# file opened: C:\Zx\CSpect\Projects\vForth15_INDIRECT/source/main.asm
   1  0000              //  ______________________________________________________________________
   2  0000              //
   3  0000              //  main.asm
   4  0000              //  ______________________________________________________________________
   5  0000              //
   6  0000              //  v-Forth 1.5 NextZXOS version
   7  0000              //  build 20220528
   8  0000              //
   9  0000              //  Inirect-Thread version.
  10  0000              //
  11  0000              //  NextZXOS version
  12  0000              //  ______________________________________________________________________
  13  0000              //
  14  0000              //  This work is available as-is with no whatsoever warranty.
  15  0000              //  Copying, modifying and distributing this software is allowed
  16  0000              //  provided that the copyright notice is kept.
  17  0000              //  ______________________________________________________________________
  18  0000              //
  19  0000              //  by Matteo Vitturi, 1990-2022
  20  0000              //
  21  0000              //  https://sites.google.com/view/vforth/vforth15-next
  22  0000              //  https://www.oocities.org/matteo_vitturi/english/index.htm
  23  0000              //
  24  0000              //  This is the complete compiler for v.Forth for SINCLAIR ZX Spectrum Next.
  25  0000              //  Each line of this source list mustn't exceed 80 bytes.
  26  0000              //  Z80N (ZX Spectrum Next) extension is available.
  27  0000              //
  28  0000              //  This list has been tested using the following configuration:
  29  0000              //      - CSpect emulator V.2.12.30
  30  0000              //  ______________________________________________________________________
  31  0000              //
  32  0000              //  Z80 Registers usage map
  33  0000              //
  34  0000              //  AF
  35  0000              //  BC - Instruction Pointer: should be preserved during ROM/OS calls
  36  0000              //  DE - Working
  37  0000              //  HL - Working
  38  0000              //
  39  0000              //  AF'- Sometime used for backup purpose
  40  0000              //  BC'- Not used
  41  0000              //  DE'- Not used
  42  0000              //  HL'- Not used: (saved at startup)
  43  0000              //
  44  0000              //  SP - Calculator Stack Pointer
  45  0000              //  IX - Inner interpreter "next" address pointer. This way jp (ix) is 2T-state faster than JP next
  46  0000              //  IY - (ZX System: must be preserved to interact with standard ROM)
  47  0000              //
  48  0000              //  ______________________________________________________________________
  49  0000              //
  50  0000              //  _________________
  51  0000              //
  52  0000              //  FORTH DEFINITIONS
  53  0000              //  _________________
  54  0000
  55  0000                              OPT     --zxnext
  56  0000              //  ______________________________________________________________________
  57  0000              //
  58  0000              // this controls some debugging code in L0.asm
  59  0000              //  0 for final binary release.
  60  0000              //  1 for debugging with Visual Studio Code and DeZog
  61  0000              // -1 for for binary comparison with Forth generated code.
  62  0000              DEBUGGING       equ     -1
  63  0000              //
  64  0000              //  ______________________________________________________________________
  65  0000
  66  0000                              if ( -1 == DEBUGGING )
  67  0000              ORIGIN          equ     $62E6                   // for binary comparison
  68  0000                              endif
  69  0000              //  ______________________________________________________________________
  70  0000
  71  0000                              if (  0 == DEBUGGING )
  72  0000 ~            ORIGIN          equ     $6366                   // binary
  73  0000                              endif
  74  0000              //  ______________________________________________________________________
  75  0000
  76  0000                              if (  1 == DEBUGGING )
  77  0000 ~            ORIGIN          equ     $8080                   // for DeZog
  78  0000                              endif
  79  0000              //  ______________________________________________________________________
  80  0000
  81  0000                              DEVICE  ZXSPECTRUMNEXT
  82  0000
  83  0000                              ORG     ORIGIN
  84  62E6
  85  62E6                              if ( -1 == DEBUGGING )
  86  62E6 00 00 00...                  ds 128                            // for binary comparison
  87  62EA                              endif
  88  6366
  89  6366              //  ______________________________________________________________________
  90  6366              //
  91  6366              //  Naming convention for Label vs Forth correspondance
  92  6366              //  Forth words are named as they are named for real with some exception to avoid assembler syntax errors.
  93  6366              //    - Leading "0" is converted into "Z_"
  94  6366              //    - Leading "(" is converted into "C_", closing bracket is omitted
  95  6366              //    - Leading numbers are converted in letters: ONE_  TWO_ etc.
  96  6366              //    - Question mark "?" is converted into "Q" or omitted if needed / useful.
  97  6366              //    - Plus sign "+" is converted in _PLUS or ADD_ depending.
  98  6366              //    - Minus sign "-" in L (for Line), MINUS or SUBTRACT depending
  99  6366              //    - Greater-Than sign ">" in _GREATER or TO_ depending
 100  6366              //    - Equal sign "=" is converted in EQUAL
 101  6366              //    - Less-Than sign "<" in _LESS or FROM_ (or TO_ again) depending
 102  6366              //    - Asterisk sign "*" is converted in _MUL or STAR
 103  6366              //    - Slash "/" is converted in _DIV or omitted if it is clear what it means
 104  6366              //    - Exclamation mark "!" is converted in STORE
 105  6366              //    - At-Sign "@" is converted in FETCH
 106  6366              //    - Words that collide with Assembler are normally suffixed with "_OP"
 107  6366
 108  6366                              include "system.asm"
# file opened: C:\Zx\CSpect\Projects\vForth15_INDIRECT/source/system.asm
   1+ 6366              //  ______________________________________________________________________
   2+ 6366              //
   3+ 6366              //  system.asm
   4+ 6366              //  ______________________________________________________________________
   5+ 6366
   6+ 6366              // Registers:
   7+ 6366              //
   8+ 6366              //      BC: Instruction Pointer
   9+ 6366              //      DE:
  10+ 6366              //      HL: W register
  11+ 6366              //      SP: Calc stack Pointer
  12+ 6366              //      IX: Inner-Interpreter Address
  13+ 6366
  14+ 6366              //  ______________________________________________________________________
  15+ 6366              //
  16+ 6366              // ZX-Spectrum standard system variables
  17+ 6366              SCR_CT          equ     $5C8C                   // SCR-CT system variable
  18+ 6366              LASTK           equ     $5C08                   // LASTK system variable
  19+ 6366              BORDCR          equ     $5C48                   // BORDCR system variable
  20+ 6366              FLAGS2          equ     $5C6A                   // for caps-lock
  21+ 6366
  22+ 6366              //  ______________________________________________________________________
  23+ 6366              //
  24+ 6366              // Flag constants
  25+ 6366              TRUE_FLAG       equ     $FFFF
  26+ 6366              FALSE_FLAG      equ     $0000
  27+ 6366
  28+ 6366              //  ______________________________________________________________________
  29+ 6366              //
  30+ 6366              // Ascii char constants
  31+ 6366              NUL_CHAR        equ     $00
  32+ 6366              COMMA_CHAR      equ     $06
  33+ 6366              BACKSPACE_CHAR  equ     $08
  34+ 6366              CR_CHAR         equ     $0D
  35+ 6366              BLANK_CHAR      equ     $20
  36+ 6366              QUOTE_CHAR      equ     "'"
  37+ 6366              DQUOTE_CHAR     equ     '"'
  38+ 6366              UNDERSCORE_CHAR equ     $5F
  39+ 6366              SOLIDBLOCK_CHAR equ     $8F
  40+ 6366              HALFBLOCK_CHAR  equ     $8C
  41+ 6366              LC_A_CHAR       equ     $61                 // lower-case "a"
  42+ 6366              LC_Z_CHAR       equ     $7A                 // lower-case "z"
  43+ 6366
  44+ 6366
  45+ 6366              //  ______________________________________________________________________
  46+ 6366              //
  47+ 6366
  48+ 6366                              // emulate something like:  ld hl,rp
  49+ 6366              ldhlrp          macro
  50+ 6366 ~                            ld      hl,(RP_Pointer)
  51+ 6366                              endm
  52+ 6366
  53+ 6366                              // emulate something like:  ld rp,hl
  54+ 6366              ldrphl          macro
  55+ 6366 ~                            ld      (RP_Pointer),hl
  56+ 6366                              endm
  57+ 6366
  58+ 6366              //  ______________________________________________________________________
  59+ 6366              //
  60+ 6366              //  Inner interpreter next-address pointer. This is 2T-state faster than "jp address"
  61+ 6366              next            macro
  62+ 6366 ~                            jp      (ix)
  63+ 6366                              endm
  64+ 6366
  65+ 6366              psh1            macro
  66+ 6366 ~                            push    hl
  67+ 6366 ~                            jp      (ix)
  68+ 6366                              endm
  69+ 6366
  70+ 6366              psh2            macro
  71+ 6366 ~                            push    de
  72+ 6366 ~                            push    hl
  73+ 6366 ~                            jp      (ix)
  74+ 6366                              endm
  75+ 6366
  76+ 6366              //  ______________________________________________________________________
  77+ 6366              //
  78+ 6366              // Bit constants in length-byte
  79+ 6366
  80+ 6366              SMUDGE_BIT      equ     %00100000               // $20
  81+ 6366              IMMEDIATE_BIT   equ     %01000000               // $40
  82+ 6366              END_BIT         equ     %10000000               // $80
  83+ 6366
  84+ 6366
  85+ 6366              //  ______________________________________________________________________
  86+ 6366              //
  87+ 6366              //  To create Forth words using this (nice) Assembler, we have to use the two following
  88+ 6366              //  pointers
  89+ 6366              temp_NFA        defl    0
  90+ 6366              last_NFA        defl    0
  91+ 6366              len_NFA         defl    0
  92+ 6366
  93+ 6366              is_code         equ     0                   // so the direct machine-code starts at CFA
  94+ 6366              is_normal       equ     0                   // so the direct machine-code starts at CFA
  95+ 6366              is_immediate    equ     IMMEDIATE_BIT       // $40 - the definition is IMMEDIATE.
  96+ 6366
  97+ 6366              //  ______________________________________________________________________
  98+ 6366              //
  99+ 6366              //  Create a new "low-level" definition
 100+ 6366              //  This macro is used in the form  Create FORTH_NAME,n,"forth_name"
 101+ 6366              //  to create a new Forth Dictionary entry the same way Forth itself would do.
 102+ 6366              //  A word begins with a Length-Byte in range 1-31. Top 3 msb are used as flags
 103+ 6366              //  see SMUDGE_BIT and IMMEDIATE_BIT constant above.
 104+ 6366              //  It is followed by the Name of the word, i.e. a string expressed in 7-bit Ascii.
 105+ 6366              //  The last character of the Name must have the msb set to signal the end of it (END_BIT)
 106+ 6366              //  This macro acts much like the standard Forth definition CREATE
 107+ 6366
 108+ 6366              New_Def         macro   label, namec, runcode, bits
 109+ 6366 ~            temp_NFA        defl    $                   // save this NFA address to temp_NFA
 110+ 6366 ~
 111+ 6366 ~                            // dummy db directives used to calculate length of namec
 112+ 6366 ~                            db      namec
 113+ 6366 ~            len_NFA         defl    $ - temp_NFA
 114+ 6366 ~                            org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 115+ 6366 ~
 116+ 6366 ~                            db      len_NFA | END_BIT | bits  // The start of NFA must have msb set to signal the beginning of the sounted string
 117+ 6366 ~                            db      namec               // name string in 7-bit ascii, but
 118+ 6366 ~                            org     $-1                 // alter last byte of Name just above to set
 119+ 6366 ~                            db      {b $} | END_BIT     // msb as name end
 120+ 6366 ~
 121+ 6366 ~                            dw      last_NFA            // Link to previous definition Name
 122+ 6366 ~            label:          if runcode != 0 ; ok        // This is the start address of the direct jp(hl)
 123+ 6366 ~                            dw      runcode ; ok        // for primitive definitions  actual code
 124+ 6366 ~                            else
 125+ 6366 ~                            dw      $ + 2   ; ok        // is pointed by CFA
 126+ 6366 ~                            endif           ; ok        // for other definitions it "points" the correct handler
 127+ 6366 ~                            // Use of "; ok" to suppress "warning[fwdref]"
 128+ 6366 ~
 129+ 6366 ~            last_NFA        defl    temp_NFA            // keep track of NFA saved above
 130+ 6366                              endm
 131+ 6366
 132+ 6366              //  ______________________________________________________________________
 133+ 6366              //
 134+ 6366              // Create a "constant"
 135+ 6366              // The constant value is compiled in first PFA cell
 136+ 6366              Constant_Def    macro   label, namec, constant_value
 137+ 6366 ~                            New_Def  label, namec, Constant_Ptr, is_normal
 138+ 6366 ~                            dw      constant_value
 139+ 6366                              endm
 140+ 6366
 141+ 6366              //  ______________________________________________________________________
 142+ 6366              //
 143+ 6366              // Create a "variable"
 144+ 6366              // The when invoked, a variable returns a pointer, the address of first PFA cell
 145+ 6366              // this allow creation of "variables" which content is  of any length
 146+ 6366              Variable_Def    macro   label, namec, initial_value
 147+ 6366 ~                            New_Def  label, namec, Variable_Ptr, is_normal
 148+ 6366 ~                            dw      initial_value
 149+ 6366                              endm
 150+ 6366
 151+ 6366              //  ______________________________________________________________________
 152+ 6366              //
 153+ 6366              // Create a "user"
 154+ 6366              // It uses a single byte as offset to calculate the address of the variable
 155+ 6366              User_Def        macro   label, namec, offset_value
 156+ 6366 ~                            New_Def  label, namec, User_Ptr, is_normal
 157+ 6366 ~                            db      offset_value
 158+ 6366                              endm
 159+ 6366
 160+ 6366              //  ______________________________________________________________________
 161+ 6366              //
 162+ 6366              // Create a "colon-definition"
 163+ 6366              // The CFA contains a small routine i.e. "call Enter_Ptr".
 164+ 6366              // The PFA, three bytes later, contains the actual Forth definition
 165+ 6366              Colon_Def       macro   label, namec, bits
 166+ 6366 ~                            New_Def  label, namec, Enter_Ptr, bits ; ok
 167+ 6366                              endm
 168+ 6366
 169+ 6366              //  ______________________________________________________________________
 170+ 6366              //
 171+ 6366
 172+ 6366              S0_system:      equ     $D0E8               // Address of top of Calc Stack
 173+ 6366              TIB_system      equ     $D0E8               // TIB grows upwards, Return-Stack downward.
 174+ 6366              R0_system:      equ     $D188               // Address of top of Return Stack. This is S0 + $00A0
 175+ 6366              USER_system:    equ     $D188               // User variables zone.
 176+ 6366              FIRST_system:   equ     $D1E4               // Address of first BUFFER
 177+ 6366              LIMIT_system:   equ     $E000               // Address of first byte beyond last BUFFER
 178+ 6366
# file closed: C:\Zx\CSpect\Projects\vForth15_INDIRECT/source/system.asm
 109  6366                              include "L0.asm"
# file opened: C:\Zx\CSpect\Projects\vForth15_INDIRECT/source/L0.asm
   1+ 6366              //  ______________________________________________________________________
   2+ 6366              //
   3+ 6366              //  L0.asm
   4+ 6366              //
   5+ 6366              //  Origin-Area and Level-0 definitions
   6+ 6366              //  ______________________________________________________________________
   7+ 6366
   8+ 6366
   9+ 6366              Cold_origin:
  10+ 6366 A7                           and     a
  11+ 6367 C3 49 79                     jp      ColdRoutine
  12+ 636A              Warm_origin:
  13+ 636A 37                           scf
  14+ 636B C3 49 79                     jp      WarmRoutine
  15+ 636E
  16+ 636E              // +008
  17+ 636E E6 D0        SP_Basic:       dw      $D0E6               // These are bits with some "standard" meaning... 0101
  18+ 6370
  19+ 6370              // +00A
  20+ 6370 00 0E                        dw      $0E00
  21+ 6372
  22+ 6372              // +00C
  23+ 6372 2A 87        Latest_origin:  dw      Latest_Definition   // Latest word (used in Cold_Start)
  24+ 6374
  25+ 6374              // +00E
  26+ 6374 0C 00        DEL_Char_Ptr:   dw      $000C               // This is the characther used as "Back-Space"
  27+ 6376
  28+ 6376              // +010
  29+ 6376 50 B2        CPU_Id          dw      $B250               // Z80 expressed in base 36
  30+ 6378
  31+ 6378              // +012
  32+ 6378 E8 D0        S0_origin:      dw      S0_system
  33+ 637A 88 D1        R0_origin:      dw      R0_system
  34+ 637C E8 D0        TIB_origin:     dw      TIB_system
  35+ 637E 1F 00        WIDTH_origin:   dw      31
  36+ 6380 01 00        WARNING_origin: dw      1
  37+ 6382 70 87        FENCE_origin:   dw      Fence_Word
  38+ 6384 70 87        DP_origin       dw      Fence_Word
  39+ 6386 57 78        VOCLINK_origin: dw      Voclink_Ptr
  40+ 6388 E4 D1                        dw      FIRST_system
  41+ 638A 00 E0                        dw      LIMIT_system
  42+ 638C
  43+ 638C              // +026
  44+ 638C 8F           Block_Face:     db      SOLIDBLOCK_CHAR     // Caps-Lock   Cursor face
  45+ 638D 8C           Half_Face:      db      HALFBLOCK_CHAR      // Caps-unlock Cursor face
  46+ 638E 5F           Underscore_Face:db      UNDERSCORE_CHAR     // Underscore  Cursor face
  47+ 638F 00                           db      0
  48+ 6390
  49+ 6390              // +02A
  50+ 6390 00 00        IX_Echo:        dw      $0000               // Echo IX after NextOS call
  51+ 6392
  52+ 6392              // +02C
  53+ 6392 00 00        SP_Saved:       dw      $0000               // Saved SP dufing NextOS call
  54+ 6394
  55+ 6394              // +02E
  56+ 6394 88 D1        USER_Pointer:   dw      USER_system
  57+ 6396
  58+ 6396              // +030
  59+ 6396 88 D1        RP_Pointer:     dw      $d188 // R0_system
  60+ 6398
  61+ 6398              // +32
  62+ 6398              // SP_Basic        dw      0
  63+ 6398
  64+ 6398
  65+ 6398              //  ______________________________________________________________________
  66+ 6398
  67+ 6398              // from this point we can use LDHLRP and LDRPHL Assembler macros
  68+ 6398              // instead of their equivalent long sequences.
  69+ 6398
  70+ 6398              //  ______________________________________________________________________
  71+ 6398
  72+ 6398              // address for "next" - inner interpreter
  73+ 6398              // This address must always be pointed by IX
  74+ 6398              // "next" macro simply does a  jp(ix)  instruction
  75+ 6398
  76+ 6398              // Psh2_Ptr:       push    de
  77+ 6398              // Psh1_Ptr:       push    hl
  78+ 6398
  79+ 6398              Next_Ptr:       // This address must always be kept in IX: "next" relies on that
  80+ 6398
  81+ 6398                              if ( 1 == DEBUGGING )
  82+ 6398 ~                            ld      hl, Next_Breakpoint_1
  83+ 6398 ~                            and     a
  84+ 6398 ~                            sbc     hl, bc
  85+ 6398 ~                            jr      nz, Next_Continue
  86+ 6398 ~                            nop // This is where you have to put a real breakpoint to intercept BC values...
  87+ 6398                              endif
  88+ 6398
  89+ 6398              Next_Continue:
  90+ 6398 0A                           ld      a, (bc)
  91+ 6399 03                           inc     bc
  92+ 639A 6F                           ld      l, a
  93+ 639B 0A                           ld      a, (bc)
  94+ 639C 03                           inc     bc
  95+ 639D 67                           ld      h, a                // hl contains a CFA (xt) of word being executed
  96+ 639E
  97+ 639E              // Execute xt i.e. CFA held in HL
  98+ 639E              Exec_Ptr:
  99+ 639E 5E                           ld      e, (hl)
 100+ 639F 23                           inc     hl
 101+ 63A0 56                           ld      d, (hl)
 102+ 63A1 EB                           ex      de, hl
 103+ 63A2 E9                           jp      (hl)                // and jump to it
 104+ 63A3                                                          // there you'll find the real code or a CALL to a ;code part
 105+ 63A3
 106+ 63A3              //  ______________________________________________________________________
 107+ 63A3              //
 108+ 63A3              // lit          -- x
 109+ 63A3              // puts on top of stack the value of the following word.
 110+ 63A3              // it is compiled in colon definition before a literal number
 111+ 63A3
 112+ 63A3                              New_Def  LIT, "LIT", is_code, is_normal
 112+ 63A3             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 112+ 63A3             >
 112+ 63A3             >                // dummy db directives used to calculate length of namec
 112+ 63A3 4C 49 54    >                db      "LIT"
 112+ 63A6             >len_NFA         defl    $ - temp_NFA
 112+ 63A6             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 112+ 63A3             >
 112+ 63A3 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 112+ 63A4 4C 49 54    >                db      "LIT"               // name string in 7-bit ascii, but
 112+ 63A7             >                org     $-1                 // alter last byte of Name just above to set
 112+ 63A6 D4          >                db      {b $} | END_BIT     // msb as name end
 112+ 63A7             >
 112+ 63A7 00 00       >                dw      last_NFA            // Link to previous definition Name
 112+ 63A9             >LIT:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 112+ 63A9 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
 112+ 63A9             >                else
 112+ 63A9 AB 63       >                dw      $ + 2   ; ok        // is pointed by CFA
 112+ 63AB             >                endif           ; ok        // for other definitions it "points" the correct handler
 112+ 63AB             >                // Use of "; ok" to suppress "warning[fwdref]"
 112+ 63AB             >
 112+ 63AB             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 113+ 63AB
 114+ 63AB 0A                           ld      a, (bc)
 115+ 63AC 03                           inc     bc
 116+ 63AD 6F                           ld      l, a
 117+ 63AE 0A                           ld      a, (bc)
 118+ 63AF 03                           inc     bc
 119+ 63B0 67                           ld      h, a
 120+ 63B1                              psh1
 120+ 63B1 E5          >                push    hl
 120+ 63B2 DD E9       >                jp      (ix)
 121+ 63B4
 122+ 63B4              //  ______________________________________________________________________
 123+ 63B4              //
 124+ 63B4              // execute      i*x xt -- j*x
 125+ 63B4              // execution token. usually xt is given by CFA
 126+ 63B4
 127+ 63B4                              New_Def  EXECUTE, "EXECUTE", is_code, is_normal
 127+ 63B4             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 127+ 63B4             >
 127+ 63B4             >                // dummy db directives used to calculate length of namec
 127+ 63B4 45 58 45 43 >                db      "EXECUTE"
 127+ 63B8 55 54 45    >
 127+ 63BB             >len_NFA         defl    $ - temp_NFA
 127+ 63BB             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 127+ 63B4             >
 127+ 63B4 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 127+ 63B5 45 58 45 43 >                db      "EXECUTE"               // name string in 7-bit ascii, but
 127+ 63B9 55 54 45    >
 127+ 63BC             >                org     $-1                 // alter last byte of Name just above to set
 127+ 63BB C5          >                db      {b $} | END_BIT     // msb as name end
 127+ 63BC             >
 127+ 63BC A3 63       >                dw      last_NFA            // Link to previous definition Name
 127+ 63BE             >EXECUTE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 127+ 63BE ~           >                dw      runcode ; ok        // for primitive definitions  actual code
 127+ 63BE             >                else
 127+ 63BE C0 63       >                dw      $ + 2   ; ok        // is pointed by CFA
 127+ 63C0             >                endif           ; ok        // for other definitions it "points" the correct handler
 127+ 63C0             >                // Use of "; ok" to suppress "warning[fwdref]"
 127+ 63C0             >
 127+ 63C0             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 128+ 63C0 E1                           pop     hl
 129+ 63C1 18 DB                        jr      Exec_Ptr
 130+ 63C3
 131+ 63C3
 132+ 63C3              //  ______________________________________________________________________
 133+ 63C3              //
 134+ 63C3              // (+loop)       --
 135+ 63C3              // compiled by +LOOP. it uses the top two values of return-stack to
 136+ 63C3              // keep track of index and limit, they are accessed via I and I'
 137+ 63C3                              New_Def C_PLOOP, "(+LOOP)", is_code, is_normal
 137+ 63C3             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 137+ 63C3             >
 137+ 63C3             >                // dummy db directives used to calculate length of namec
 137+ 63C3 28 2B 4C 4F >                db      "(+LOOP)"
 137+ 63C7 4F 50 29    >
 137+ 63CA             >len_NFA         defl    $ - temp_NFA
 137+ 63CA             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 137+ 63C3             >
 137+ 63C3 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 137+ 63C4 28 2B 4C 4F >                db      "(+LOOP)"               // name string in 7-bit ascii, but
 137+ 63C8 4F 50 29    >
 137+ 63CB             >                org     $-1                 // alter last byte of Name just above to set
 137+ 63CA A9          >                db      {b $} | END_BIT     // msb as name end
 137+ 63CB             >
 137+ 63CB B4 63       >                dw      last_NFA            // Link to previous definition Name
 137+ 63CD             >C_PLOOP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 137+ 63CD ~           >                dw      runcode ; ok        // for primitive definitions  actual code
 137+ 63CD             >                else
 137+ 63CD CF 63       >                dw      $ + 2   ; ok        // is pointed by CFA
 137+ 63CF             >                endif           ; ok        // for other definitions it "points" the correct handler
 137+ 63CF             >                // Use of "; ok" to suppress "warning[fwdref]"
 137+ 63CF             >
 137+ 63CF             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 138+ 63CF
 139+ 63CF              Loop_Ptr:
 140+ 63CF D9                           exx
 141+ 63D0                              ldhlrp                      // ld hl,rp macro 30h +Origin
 141+ 63D0 2A 96 63    >                ld      hl,(RP_Pointer)
 142+ 63D3
 143+ 63D3 C1                           pop     bc                  // bc is increment
 144+ 63D4
 145+ 63D4 5E                           ld      e, (hl)             // hl points to loop-index, add increment to it.
 146+ 63D5 7B                           ld      a, e                // de keeps index before increment.
 147+ 63D6 81                           add     c
 148+ 63D7 77                           ld      (hl), a
 149+ 63D8 23                           inc     hl
 150+ 63D9 56                           ld      d, (hl)
 151+ 63DA 7A                           ld      a, d
 152+ 63DB 88                           adc     b
 153+ 63DC 77                           ld      (hl),a
 154+ 63DD 23                           inc     hl
 155+ 63DE
 156+ 63DE 7B                           ld      a, e
 157+ 63DF 96                           sub     (hl)
 158+ 63E0 5F                           ld      e, a
 159+ 63E1 23                           inc     hl
 160+ 63E2 7A                           ld      a, d
 161+ 63E3 9E                           sbc     (hl)
 162+ 63E4 57                           ld      d, a                // DE is index - limit : limit is the "new zero"
 163+ 63E5
 164+ 63E5 EB                           ex      de, hl
 165+ 63E6 09                           add     hl, bc
 166+ 63E7
 167+ 63E7 CB 78                        bit     7, b                // keep increment-sign just before overwriting d
 168+ 63E9 28 01                        jr      z, Loop_NegativeIncrement
 169+ 63EB 3F                               ccf
 170+ 63EC              Loop_NegativeIncrement:
 171+ 63EC 38 03                        jr      c, Loop_Endif
 172+ 63EE D9                               exx
 173+ 63EF 18 26                            jr      Branch_Ptr      // perform branch consuming following cell
 174+ 63F1              Loop_Endif:
 175+ 63F1 EB                           ex      de, hl
 176+ 63F2 23                           inc     hl
 177+ 63F3                              ldrphl                      // ld rp,hl macro 30h +Origin
 177+ 63F3 22 96 63    >                ld      (RP_Pointer),hl
 178+ 63F6 D9                           exx
 179+ 63F7 03                           inc     bc                  // skip branch-style offset
 180+ 63F8 03                           inc     bc
 181+ 63F9                              next
 181+ 63F9 DD E9       >                jp      (ix)
 182+ 63FB
 183+ 63FB              //  ______________________________________________________________________
 184+ 63FB              //
 185+ 63FB              // (loop)       n --
 186+ 63FB              // same as (LOOP) but index is incremented by 1
 187+ 63FB              // compiled by LOOP.
 188+ 63FB                              New_Def C_LOOP, "(LOOP)", is_code, is_normal
 188+ 63FB             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 188+ 63FB             >
 188+ 63FB             >                // dummy db directives used to calculate length of namec
 188+ 63FB 28 4C 4F 4F >                db      "(LOOP)"
 188+ 63FF 50 29       >
 188+ 6401             >len_NFA         defl    $ - temp_NFA
 188+ 6401             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 188+ 63FB             >
 188+ 63FB 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 188+ 63FC 28 4C 4F 4F >                db      "(LOOP)"               // name string in 7-bit ascii, but
 188+ 6400 50 29       >
 188+ 6402             >                org     $-1                 // alter last byte of Name just above to set
 188+ 6401 A9          >                db      {b $} | END_BIT     // msb as name end
 188+ 6402             >
 188+ 6402 C3 63       >                dw      last_NFA            // Link to previous definition Name
 188+ 6404             >C_LOOP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 188+ 6404 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
 188+ 6404             >                else
 188+ 6404 06 64       >                dw      $ + 2   ; ok        // is pointed by CFA
 188+ 6406             >                endif           ; ok        // for other definitions it "points" the correct handler
 188+ 6406             >                // Use of "; ok" to suppress "warning[fwdref]"
 188+ 6406             >
 188+ 6406             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 189+ 6406 ED 8A 00 01                  push    1
 190+ 640A 18 C3                        jr      Loop_Ptr
 191+ 640C
 192+ 640C              //  ______________________________________________________________________
 193+ 640C              //
 194+ 640C              // branch       --
 195+ 640C              // unconditional branch in colon definition using the following cell as an offset from current IP value
 196+ 640C              // compiled by ELSE, AGAIN and some other immediate words
 197+ 640C
 198+ 640C                              New_Def BRANCH, "BRANCH", is_code, is_normal
 198+ 640C             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 198+ 640C             >
 198+ 640C             >                // dummy db directives used to calculate length of namec
 198+ 640C 42 52 41 4E >                db      "BRANCH"
 198+ 6410 43 48       >
 198+ 6412             >len_NFA         defl    $ - temp_NFA
 198+ 6412             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 198+ 640C             >
 198+ 640C 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 198+ 640D 42 52 41 4E >                db      "BRANCH"               // name string in 7-bit ascii, but
 198+ 6411 43 48       >
 198+ 6413             >                org     $-1                 // alter last byte of Name just above to set
 198+ 6412 C8          >                db      {b $} | END_BIT     // msb as name end
 198+ 6413             >
 198+ 6413 FB 63       >                dw      last_NFA            // Link to previous definition Name
 198+ 6415             >BRANCH:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 198+ 6415 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
 198+ 6415             >                else
 198+ 6415 17 64       >                dw      $ + 2   ; ok        // is pointed by CFA
 198+ 6417             >                endif           ; ok        // for other definitions it "points" the correct handler
 198+ 6417             >                // Use of "; ok" to suppress "warning[fwdref]"
 198+ 6417             >
 198+ 6417             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 199+ 6417              Branch_Ptr:
 200+ 6417 60                           ld      h, b
 201+ 6418 69                           ld      l, c
 202+ 6419 5E                           ld      e, (hl)
 203+ 641A 23                           inc     hl
 204+ 641B 56                           ld      d, (hl)
 205+ 641C 2B                           dec     hl                  // offset is calculated from current IP
 206+ 641D 19                           add     hl, de
 207+ 641E 4D                           ld      c, l
 208+ 641F 44                           ld      b, h
 209+ 6420                              next
 209+ 6420 DD E9       >                jp      (ix)
 210+ 6422
 211+ 6422
 212+ 6422              //  ______________________________________________________________________
 213+ 6422              //
 214+ 6422              // 0branch      f --
 215+ 6422              // conditional branch if the top-of-stack is ZERO or FALSE.
 216+ 6422              // compiled by IF, UNTIL and some other immediate words
 217+ 6422
 218+ 6422                              New_Def ZBRANCH, "0BRANCH", is_code, is_normal
 218+ 6422             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 218+ 6422             >
 218+ 6422             >                // dummy db directives used to calculate length of namec
 218+ 6422 30 42 52 41 >                db      "0BRANCH"
 218+ 6426 4E 43 48    >
 218+ 6429             >len_NFA         defl    $ - temp_NFA
 218+ 6429             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 218+ 6422             >
 218+ 6422 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 218+ 6423 30 42 52 41 >                db      "0BRANCH"               // name string in 7-bit ascii, but
 218+ 6427 4E 43 48    >
 218+ 642A             >                org     $-1                 // alter last byte of Name just above to set
 218+ 6429 C8          >                db      {b $} | END_BIT     // msb as name end
 218+ 642A             >
 218+ 642A 0C 64       >                dw      last_NFA            // Link to previous definition Name
 218+ 642C             >ZBRANCH:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 218+ 642C ~           >                dw      runcode ; ok        // for primitive definitions  actual code
 218+ 642C             >                else
 218+ 642C 2E 64       >                dw      $ + 2   ; ok        // is pointed by CFA
 218+ 642E             >                endif           ; ok        // for other definitions it "points" the correct handler
 218+ 642E             >                // Use of "; ok" to suppress "warning[fwdref]"
 218+ 642E             >
 218+ 642E             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 219+ 642E              ZBranch_Ptr:
 220+ 642E E1                           pop     hl
 221+ 642F 7D                           ld      a, l
 222+ 6430 B4                           or      h
 223+ 6431 28 E4                        jr      z, Branch_Ptr
 224+ 6433 03                           inc     bc                  // if not branch, skip offset cell.
 225+ 6434 03                           inc     bc
 226+ 6435                              next
 226+ 6435 DD E9       >                jp      (ix)
 227+ 6437
 228+ 6437              //  ______________________________________________________________________
 229+ 6437              //
 230+ 6437              // (leave)        --
 231+ 6437              // compiled by LEAVE
 232+ 6437              // this forces to exit from loop and jump past
 233+ 6437                              New_Def C_LEAVE, "(LEAVE)", is_code, is_normal
 233+ 6437             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 233+ 6437             >
 233+ 6437             >                // dummy db directives used to calculate length of namec
 233+ 6437 28 4C 45 41 >                db      "(LEAVE)"
 233+ 643B 56 45 29    >
 233+ 643E             >len_NFA         defl    $ - temp_NFA
 233+ 643E             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 233+ 6437             >
 233+ 6437 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 233+ 6438 28 4C 45 41 >                db      "(LEAVE)"               // name string in 7-bit ascii, but
 233+ 643C 56 45 29    >
 233+ 643F             >                org     $-1                 // alter last byte of Name just above to set
 233+ 643E A9          >                db      {b $} | END_BIT     // msb as name end
 233+ 643F             >
 233+ 643F 22 64       >                dw      last_NFA            // Link to previous definition Name
 233+ 6441             >C_LEAVE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 233+ 6441 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
 233+ 6441             >                else
 233+ 6441 43 64       >                dw      $ + 2   ; ok        // is pointed by CFA
 233+ 6443             >                endif           ; ok        // for other definitions it "points" the correct handler
 233+ 6443             >                // Use of "; ok" to suppress "warning[fwdref]"
 233+ 6443             >
 233+ 6443             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 234+ 6443
 235+ 6443                              ldhlrp
 235+ 6443 2A 96 63    >                ld      hl,(RP_Pointer)
 236+ 6446 11 04 00                     ld      de, 4
 237+ 6449 19                           add     hl, de
 238+ 644A                              ldrphl
 238+ 644A 22 96 63    >                ld      (RP_Pointer),hl
 239+ 644D
 240+ 644D 18 C8                        jr      Branch_Ptr       // perform branch consuming following cell
 241+ 644F                              next
 241+ 644F DD E9       >                jp      (ix)
 242+ 6451
 243+ 6451              //  ______________________________________________________________________
 244+ 6451              //
 245+ 6451              // (?do)        lim ind --
 246+ 6451              // compiled by ?DO to make a loop checking for lim == ind first
 247+ 6451              // at run-time (?DO) must be followed by a BRANCH offset
 248+ 6451              // used to skip the loop if lim == ind
 249+ 6451                              New_Def C_Q_DO, "(?DO)", is_code, is_normal
 249+ 6451             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 249+ 6451             >
 249+ 6451             >                // dummy db directives used to calculate length of namec
 249+ 6451 28 3F 44 4F >                db      "(?DO)"
 249+ 6455 29          >
 249+ 6456             >len_NFA         defl    $ - temp_NFA
 249+ 6456             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 249+ 6451             >
 249+ 6451 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 249+ 6452 28 3F 44 4F >                db      "(?DO)"               // name string in 7-bit ascii, but
 249+ 6456 29          >
 249+ 6457             >                org     $-1                 // alter last byte of Name just above to set
 249+ 6456 A9          >                db      {b $} | END_BIT     // msb as name end
 249+ 6457             >
 249+ 6457 37 64       >                dw      last_NFA            // Link to previous definition Name
 249+ 6459             >C_Q_DO:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 249+ 6459 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
 249+ 6459             >                else
 249+ 6459 5B 64       >                dw      $ + 2   ; ok        // is pointed by CFA
 249+ 645B             >                endif           ; ok        // for other definitions it "points" the correct handler
 249+ 645B             >                // Use of "; ok" to suppress "warning[fwdref]"
 249+ 645B             >
 249+ 645B             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 250+ 645B D1                           pop     de                  // de has the index
 251+ 645C E1                           pop     hl                  // hl has the limit
 252+ 645D E5                           push    hl
 253+ 645E D5                           push    de
 254+ 645F A7                           and     a                   // reset carry flag
 255+ 6460 ED 52                        sbc     hl, de              // compute limit - index
 256+ 6462 20 04                        jr      nz, Do_Ptr          // if zero then don't even begin loop
 257+ 6464 D1                               pop     de
 258+ 6465 E1                               pop     hl
 259+ 6466
 260+ 6466 18 AF                            jr      Branch_Ptr          // perform branch consuming following cell
 261+ 6468              Do_Ptr:
 262+ 6468                              ldhlrp                      // prepare RP
 262+ 6468 2A 96 63    >                ld      hl,(RP_Pointer)
 263+ 646B 2B                           dec     hl
 264+ 646C 2B                           dec     hl
 265+ 646D 2B                           dec     hl
 266+ 646E 2B                           dec     hl
 267+ 646F                              ldrphl
 267+ 646F 22 96 63    >                ld      (RP_Pointer),hl
 268+ 6472
 269+ 6472                              // store index as top RP
 270+ 6472 D1                           pop     de
 271+ 6473 73                           ld      (hl), e
 272+ 6474 23                           inc     hl
 273+ 6475 72                           ld      (hl), d
 274+ 6476 23                           inc     hl
 275+ 6477                              // stores lim as second from top RP
 276+ 6477 D1                           pop     de
 277+ 6478 73                           ld      (hl), e
 278+ 6479 23                           inc     hl
 279+ 647A 72                           ld      (hl), d
 280+ 647B
 281+ 647B                              // skip branch-style offseet
 282+ 647B 03                           inc     bc
 283+ 647C 03                           inc     bc
 284+ 647D                              next
 284+ 647D DD E9       >                jp      (ix)
 285+ 647F
 286+ 647F              //  ______________________________________________________________________
 287+ 647F              //
 288+ 647F              // (do)        lim ind --
 289+ 647F              // compiled by DO to make a loop checking for lim == ind first
 290+ 647F              // this is a simpler version of (?DO)
 291+ 647F                              New_Def C_DO, "(DO)", is_code, is_normal
 291+ 647F             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 291+ 647F             >
 291+ 647F             >                // dummy db directives used to calculate length of namec
 291+ 647F 28 44 4F 29 >                db      "(DO)"
 291+ 6483             >len_NFA         defl    $ - temp_NFA
 291+ 6483             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 291+ 647F             >
 291+ 647F 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 291+ 6480 28 44 4F 29 >                db      "(DO)"               // name string in 7-bit ascii, but
 291+ 6484             >                org     $-1                 // alter last byte of Name just above to set
 291+ 6483 A9          >                db      {b $} | END_BIT     // msb as name end
 291+ 6484             >
 291+ 6484 51 64       >                dw      last_NFA            // Link to previous definition Name
 291+ 6486             >C_DO:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 291+ 6486 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
 291+ 6486             >                else
 291+ 6486 88 64       >                dw      $ + 2   ; ok        // is pointed by CFA
 291+ 6488             >                endif           ; ok        // for other definitions it "points" the correct handler
 291+ 6488             >                // Use of "; ok" to suppress "warning[fwdref]"
 291+ 6488             >
 291+ 6488             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 292+ 6488 0B                           dec     bc                  // prepare IP beforehand
 293+ 6489 0B                           dec     bc                  // to balance the two final inc bc in (?do)
 294+ 648A 18 DC                        jr      Do_Ptr
 295+ 648C
 296+ 648C              //  ______________________________________________________________________
 297+ 648C              //
 298+ 648C              // i            -- n
 299+ 648C              // used between DO and LOOP or between DO e +LOOP to copy on top of stack
 300+ 648C              // the current value of the index-loop
 301+ 648C                              New_Def I, "I", is_code, is_normal
 301+ 648C             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 301+ 648C             >
 301+ 648C             >                // dummy db directives used to calculate length of namec
 301+ 648C 49          >                db      "I"
 301+ 648D             >len_NFA         defl    $ - temp_NFA
 301+ 648D             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 301+ 648C             >
 301+ 648C 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 301+ 648D 49          >                db      "I"               // name string in 7-bit ascii, but
 301+ 648E             >                org     $-1                 // alter last byte of Name just above to set
 301+ 648D C9          >                db      {b $} | END_BIT     // msb as name end
 301+ 648E             >
 301+ 648E 7F 64       >                dw      last_NFA            // Link to previous definition Name
 301+ 6490             >I:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 301+ 6490 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
 301+ 6490             >                else
 301+ 6490 92 64       >                dw      $ + 2   ; ok        // is pointed by CFA
 301+ 6492             >                endif           ; ok        // for other definitions it "points" the correct handler
 301+ 6492             >                // Use of "; ok" to suppress "warning[fwdref]"
 301+ 6492             >
 301+ 6492             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 302+ 6492              I_Ptr:
 303+ 6492
 304+ 6492                              ldhlrp
 304+ 6492 2A 96 63    >                ld      hl,(RP_Pointer)
 305+ 6495              I_Ptr_prime
 306+ 6495 5E                           ld      e, (hl)
 307+ 6496 23                           inc     hl
 308+ 6497 56                           ld      d, (hl)
 309+ 6498 D5                           push    de
 310+ 6499                              next
 310+ 6499 DD E9       >                jp      (ix)
 311+ 649B
 312+ 649B              //  ______________________________________________________________________
 313+ 649B              //
 314+ 649B              // i'            -- n
 315+ 649B              // used between DO and LOOP or between DO e +LOOP to copy on top of stack
 316+ 649B              // the limit of the index-loop
 317+ 649B
 318+ 649B                              New_Def II, "I'", is_code, is_normal
 318+ 649B             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 318+ 649B             >
 318+ 649B             >                // dummy db directives used to calculate length of namec
 318+ 649B 49 27       >                db      "I'"
 318+ 649D             >len_NFA         defl    $ - temp_NFA
 318+ 649D             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 318+ 649B             >
 318+ 649B 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 318+ 649C 49 27       >                db      "I'"               // name string in 7-bit ascii, but
 318+ 649E             >                org     $-1                 // alter last byte of Name just above to set
 318+ 649D A7          >                db      {b $} | END_BIT     // msb as name end
 318+ 649E             >
 318+ 649E 8C 64       >                dw      last_NFA            // Link to previous definition Name
 318+ 64A0             >II:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 318+ 64A0 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
 318+ 64A0             >                else
 318+ 64A0 A2 64       >                dw      $ + 2   ; ok        // is pointed by CFA
 318+ 64A2             >                endif           ; ok        // for other definitions it "points" the correct handler
 318+ 64A2             >                // Use of "; ok" to suppress "warning[fwdref]"
 318+ 64A2             >
 318+ 64A2             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 319+ 64A2                              ldhlrp
 319+ 64A2 2A 96 63    >                ld      hl,(RP_Pointer)
 320+ 64A5 23                           inc     hl
 321+ 64A6 23                           inc     hl
 322+ 64A7 18 EC                        jr      I_Ptr_prime
 323+ 64A9
 324+ 64A9
 325+ 64A9              //  ______________________________________________________________________
 326+ 64A9              //
 327+ 64A9              // digit        c n -- u 1  |  0
 328+ 64A9              // convert a character c using base n
 329+ 64A9              // returns a unsigned number and a true flag
 330+ 64A9              // or just a false flag if the conversion fails
 331+ 64A9                              New_Def DIGIT, "DIGIT", is_code, is_normal
 331+ 64A9             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 331+ 64A9             >
 331+ 64A9             >                // dummy db directives used to calculate length of namec
 331+ 64A9 44 49 47 49 >                db      "DIGIT"
 331+ 64AD 54          >
 331+ 64AE             >len_NFA         defl    $ - temp_NFA
 331+ 64AE             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 331+ 64A9             >
 331+ 64A9 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 331+ 64AA 44 49 47 49 >                db      "DIGIT"               // name string in 7-bit ascii, but
 331+ 64AE 54          >
 331+ 64AF             >                org     $-1                 // alter last byte of Name just above to set
 331+ 64AE D4          >                db      {b $} | END_BIT     // msb as name end
 331+ 64AF             >
 331+ 64AF 9B 64       >                dw      last_NFA            // Link to previous definition Name
 331+ 64B1             >DIGIT:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 331+ 64B1 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
 331+ 64B1             >                else
 331+ 64B1 B3 64       >                dw      $ + 2   ; ok        // is pointed by CFA
 331+ 64B3             >                endif           ; ok        // for other definitions it "points" the correct handler
 331+ 64B3             >                // Use of "; ok" to suppress "warning[fwdref]"
 331+ 64B3             >
 331+ 64B3             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 332+ 64B3 E1                           pop     hl                  // l has the base
 333+ 64B4 D1                           pop     de                  // e has the digit
 334+ 64B5 7B                           ld      a, e
 335+ 64B6 FE 60                        cp      $60                 // check if lowercase
 336+ 64B8 38 02                        jr      c, Digit_Uppercase
 337+ 64BA D6 20                            sub     $20                 // quick'n'dirty uppercase
 338+ 64BC              Digit_Uppercase:
 339+ 64BC D6 30                        sub     $30
 340+ 64BE 38 15                        jr      c, Digit_Fail       // fail when character < "0"
 341+ 64C0 FE 0A                            cp      $0A
 342+ 64C2 38 06                            jr      c, Digit_Decimal    // perhaps is not decimal
 343+ 64C4 D6 07                                sub     7                   // try hex and subtract 7
 344+ 64C6 FE 0A                                cp      $0A
 345+ 64C8 38 0B                                jr      c,  Digit_Fail      // it is not hex !
 346+ 64CA
 347+ 64CA              Digit_Decimal:
 348+ 64CA                              // compare digit
 349+ 64CA BD                           cp      l                   // compare with base
 350+ 64CB
 351+ 64CB 30 08                        jr      nc, Digit_Fail      // fail when greater than base
 352+ 64CD 5F                               ld      e, a                // digit is returned as second from TOS
 353+ 64CE 21 01 00                         ld      hl, 1
 354+ 64D1
 355+ 64D1                                  psh2
 355+ 64D1 D5          >                push    de
 355+ 64D2 E5          >                push    hl
 355+ 64D3 DD E9       >                jp      (ix)
 356+ 64D5              Digit_Fail:
 357+ 64D5 21 00 00                     ld      hl, 0
 358+ 64D8                              psh1
 358+ 64D8 E5          >                push    hl
 358+ 64D9 DD E9       >                jp      (ix)
 359+ 64DB
 360+ 64DB              //  ______________________________________________________________________
 361+ 64DB              //
 362+ 64DB              //  parametric uppercase routine
 363+ 64DB              //  depending on the following op-code the routine can be by-passed
 364+ 64DB              //  changing the behaviour of some callers.
 365+ 64DB              //  If it is "ret" then the system is Case-Sensitive
 366+ 64DB              //  If it is "Nop" then the system is Case-Insensitive
 367+ 64DB              //  Only A register is touched.
 368+ 64DB 00           Case_Sensitive: nop                         // Default is case-insensitive.
 369+ 64DC              Case_Upper:
 370+ 64DC FE 61                        cp      LC_A_CHAR           // lower-case "a"
 371+ 64DE D8                           ret     c                   // no change if A < "a"
 372+ 64DF FE 7B                        cp      LC_Z_CHAR + 1       // lower-case "z" + 1
 373+ 64E1 D0                           ret     nc                  // no change if A > "z"
 374+ 64E2 D6 20                        sub     $20                 // Make uppercase if A in ["a".."z"]
 375+ 64E4 C9                           ret
 376+ 64E5
 377+ 64E5              //  ______________________________________________________________________
 378+ 64E5              //
 379+ 64E5              //  caseon      --
 380+ 64E5              // set system case-sensitivity on
 381+ 64E5              // it patches a RET/NOP at the beginning of the uppercase-routine
 382+ 64E5                              New_Def CASEON, "CASEON", is_code, is_normal
 382+ 64E5             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 382+ 64E5             >
 382+ 64E5             >                // dummy db directives used to calculate length of namec
 382+ 64E5 43 41 53 45 >                db      "CASEON"
 382+ 64E9 4F 4E       >
 382+ 64EB             >len_NFA         defl    $ - temp_NFA
 382+ 64EB             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 382+ 64E5             >
 382+ 64E5 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 382+ 64E6 43 41 53 45 >                db      "CASEON"               // name string in 7-bit ascii, but
 382+ 64EA 4F 4E       >
 382+ 64EC             >                org     $-1                 // alter last byte of Name just above to set
 382+ 64EB CE          >                db      {b $} | END_BIT     // msb as name end
 382+ 64EC             >
 382+ 64EC A9 64       >                dw      last_NFA            // Link to previous definition Name
 382+ 64EE             >CASEON:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 382+ 64EE ~           >                dw      runcode ; ok        // for primitive definitions  actual code
 382+ 64EE             >                else
 382+ 64EE F0 64       >                dw      $ + 2   ; ok        // is pointed by CFA
 382+ 64F0             >                endif           ; ok        // for other definitions it "points" the correct handler
 382+ 64F0             >                // Use of "; ok" to suppress "warning[fwdref]"
 382+ 64F0             >
 382+ 64F0             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 383+ 64F0 3E C9                        ld      a, $C9              // "ret"
 384+ 64F2 32 DB 64                     ld      (Case_Sensitive), a
 385+ 64F5                              next
 385+ 64F5 DD E9       >                jp      (ix)
 386+ 64F7
 387+ 64F7              //  ______________________________________________________________________
 388+ 64F7              //
 389+ 64F7              //  caseoff     --
 390+ 64F7              // set system case-sensitivity on
 391+ 64F7              // it patches a RET/NOP at the beginning of the uppercase-routine
 392+ 64F7                              New_Def CASEOFF, "CASEOFF", is_code, is_normal
 392+ 64F7             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 392+ 64F7             >
 392+ 64F7             >                // dummy db directives used to calculate length of namec
 392+ 64F7 43 41 53 45 >                db      "CASEOFF"
 392+ 64FB 4F 46 46    >
 392+ 64FE             >len_NFA         defl    $ - temp_NFA
 392+ 64FE             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 392+ 64F7             >
 392+ 64F7 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 392+ 64F8 43 41 53 45 >                db      "CASEOFF"               // name string in 7-bit ascii, but
 392+ 64FC 4F 46 46    >
 392+ 64FF             >                org     $-1                 // alter last byte of Name just above to set
 392+ 64FE C6          >                db      {b $} | END_BIT     // msb as name end
 392+ 64FF             >
 392+ 64FF E5 64       >                dw      last_NFA            // Link to previous definition Name
 392+ 6501             >CASEOFF:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 392+ 6501 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
 392+ 6501             >                else
 392+ 6501 03 65       >                dw      $ + 2   ; ok        // is pointed by CFA
 392+ 6503             >                endif           ; ok        // for other definitions it "points" the correct handler
 392+ 6503             >                // Use of "; ok" to suppress "warning[fwdref]"
 392+ 6503             >
 392+ 6503             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 393+ 6503 3E 00                        ld      a, $00              // "nop"
 394+ 6505 32 DB 64                     ld      (Case_Sensitive), a
 395+ 6508                              next
 395+ 6508 DD E9       >                jp      (ix)
 396+ 650A
 397+ 650A              //  ______________________________________________________________________
 398+ 650A              //
 399+ 650A              //  upper       c1 -- c1 | c2
 400+ 650A              // character on top of stack is forced to Uppercase.
 401+ 650A                              New_Def UPPER, "UPPER", is_code, is_normal
 401+ 650A             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 401+ 650A             >
 401+ 650A             >                // dummy db directives used to calculate length of namec
 401+ 650A 55 50 50 45 >                db      "UPPER"
 401+ 650E 52          >
 401+ 650F             >len_NFA         defl    $ - temp_NFA
 401+ 650F             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 401+ 650A             >
 401+ 650A 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 401+ 650B 55 50 50 45 >                db      "UPPER"               // name string in 7-bit ascii, but
 401+ 650F 52          >
 401+ 6510             >                org     $-1                 // alter last byte of Name just above to set
 401+ 650F D2          >                db      {b $} | END_BIT     // msb as name end
 401+ 6510             >
 401+ 6510 F7 64       >                dw      last_NFA            // Link to previous definition Name
 401+ 6512             >UPPER:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 401+ 6512 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
 401+ 6512             >                else
 401+ 6512 14 65       >                dw      $ + 2   ; ok        // is pointed by CFA
 401+ 6514             >                endif           ; ok        // for other definitions it "points" the correct handler
 401+ 6514             >                // Use of "; ok" to suppress "warning[fwdref]"
 401+ 6514             >
 401+ 6514             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 402+ 6514 E1                           pop     hl
 403+ 6515 7D                           ld      a, l
 404+ 6516 CD DC 64                     call    Case_Upper
 405+ 6519 6F                           ld      l, a
 406+ 651A
 407+ 651A                              psh1
 407+ 651A E5          >                push    hl
 407+ 651B DD E9       >                jp      (ix)
 408+ 651D
 409+ 651D              //  ______________________________________________________________________
 410+ 651D              //
 411+ 651D              // (find)       addr voc -- addr 0 | cfa b 1
 412+ 651D              // vocabulary search,
 413+ 651D              // - voc is starting word's NFA
 414+ 651D              // - addr is the string to be searched for
 415+ 651D              // On success, it returns the CFA of found word, the first NFA byte
 416+ 651D              // (which contains length and some flags) and a true flag.
 417+ 651D              // On fail, a false flag  (no more: leaves addr unchanged)
 418+ 651D                              New_Def C_FIND, "(FIND)", is_code, is_normal
 418+ 651D             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 418+ 651D             >
 418+ 651D             >                // dummy db directives used to calculate length of namec
 418+ 651D 28 46 49 4E >                db      "(FIND)"
 418+ 6521 44 29       >
 418+ 6523             >len_NFA         defl    $ - temp_NFA
 418+ 6523             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 418+ 651D             >
 418+ 651D 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 418+ 651E 28 46 49 4E >                db      "(FIND)"               // name string in 7-bit ascii, but
 418+ 6522 44 29       >
 418+ 6524             >                org     $-1                 // alter last byte of Name just above to set
 418+ 6523 A9          >                db      {b $} | END_BIT     // msb as name end
 418+ 6524             >
 418+ 6524 0A 65       >                dw      last_NFA            // Link to previous definition Name
 418+ 6526             >C_FIND:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 418+ 6526 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
 418+ 6526             >                else
 418+ 6526 28 65       >                dw      $ + 2   ; ok        // is pointed by CFA
 418+ 6528             >                endif           ; ok        // for other definitions it "points" the correct handler
 418+ 6528             >                // Use of "; ok" to suppress "warning[fwdref]"
 418+ 6528             >
 418+ 6528             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 419+ 6528                                                              // de has dictionary pointer
 420+ 6528 D1                               pop     de
 421+ 6529              Find_VocabularyLoop:
 422+ 6529 E1                               pop     hl                  // string pointer to search for
 423+ 652A E5                               push    hl                  // keep it on stack too for the end.
 424+ 652B 1A                               ld      a, (de)             // save NFA length byte
 425+ 652C 08                               ex      af,af'              // for later use (!)
 426+ 652D 1A                               ld      a, (de)             // reload NFA length byte
 427+ 652E AE                               xor     (hl)                // check if same length
 428+ 652F E6 3F                            and     $3F                 // by resetting 3 high bits (flags)
 429+ 6531                                  // word an text haven't the same length, skip to next vocabulary entry
 430+ 6531 20 2C                            jr      nz, Find_DifferentLenght
 431+ 6533
 432+ 6533              Find_ThisWord:  // begin loop
 433+ 6533 23                                   inc     hl
 434+ 6534 13                                   inc     de
 435+ 6535 1A                                   ld      a, (de)
 436+ 6536                                      // case insensitive option - begin
 437+ 6536 C5                                   push    bc
 438+ 6537 E6 80                                and     $80                 // split A in msb and the rest
 439+ 6539 47                                   ld      b, a
 440+ 653A 1A                                   ld      a, (de)
 441+ 653B E6 7F                                and     $7F                 // ... the rest (lower 7 bits)
 442+ 653D CD DB 64                             call    Case_Sensitive      // uppercase routine
 443+ 6540 4F                                   ld      c, a
 444+ 6541 7E                                   ld      a, (hl)
 445+ 6542 CD DB 64                             call    Case_Sensitive      // uppercase routine
 446+ 6545 A9                                   xor     c
 447+ 6546 A8                                   xor     b
 448+ 6547 C1                                   pop     bc
 449+ 6548                                      // case insensitive option - end
 450+ 6548 87                                   add     a                   // ignore msb during compare
 451+ 6549 20 12                                jr      nz, Find_DidntMatch  // jump if doesn't match (*)
 452+ 654B
 453+ 654B                                  // loop back until last byte msb is found set
 454+ 654B                                  // that bit marks the ending char of this word
 455+ 654B 30 E6                            jr      nc, Find_ThisWord
 456+ 654D
 457+ 654D                                  // match found !
 458+ 654D 21 03 00                             ld      hl, 3               // 3 bytes for CFA offset to skip LFA
 459+ 6550 19                                   add     hl, de
 460+ 6551 E3                                   ex      (sp), hl            // CFA on stack and drop addr
 461+ 6552 08                                   ex      af, af'             // retrieve NFA byte (!)
 462+ 6553 5F                                   ld      e, a
 463+ 6554 16 00                                ld      d, 0
 464+ 6556
 465+ 6556
 466+ 6556 21 01 00                             ld      hl, 1
 467+ 6559                                      psh2
 467+ 6559 D5          >                push    de
 467+ 655A E5          >                push    hl
 467+ 655B DD E9       >                jp      (ix)
 468+ 655D
 469+ 655D              Find_DidntMatch: // didn't match (*)
 470+ 655D 38 05                            jr      c,  Find_WordEnd   // jump if not end of word (**)
 471+ 655F
 472+ 655F              Find_DifferentLenght:
 473+ 655F                              // consume chars until the end of the word
 474+ 655F                              // that is last byte msb is found set
 475+ 655F 13                               inc     de
 476+ 6560 1A                               ld      a, (de)
 477+ 6561 87                               add     a, a
 478+ 6562 30 FB                        jr      nc, Find_DifferentLenght
 479+ 6564
 480+ 6564              Find_WordEnd:   // word-end  found (**)
 481+ 6564                              // take LFA and use it
 482+ 6564 13                           inc     de
 483+ 6565 EB                           ex      de, hl
 484+ 6566 5E                           ld      e, (hl)
 485+ 6567 23                           inc     hl
 486+ 6568 56                           ld      d, (hl)
 487+ 6569 7A                           ld      a, d
 488+ 656A B3                           or      e
 489+ 656B
 490+ 656B                          // loop until end of vocabulary
 491+ 656B 20 BC                    jr      nz, Find_VocabularyLoop
 492+ 656D
 493+ 656D E1                       pop     hl              // with this, it leaves addr unchanged
 494+ 656E 21 00 00                 ld      hl, FALSE_FLAG
 495+ 6571
 496+ 6571                          psh1
 496+ 6571 E5          >                push    hl
 496+ 6572 DD E9       >                jp      (ix)
 497+ 6574
 498+ 6574              //  ______________________________________________________________________
 499+ 6574              //
 500+ 6574              // enclose      a c -- a  n1 n2 n3
 501+ 6574              // starting from a, using delimiter c, determines the offsets:
 502+ 6574              //   n1   the first character non-delimiter
 503+ 6574              //   n2   the first delimiter after the text
 504+ 6574              //   n3   the first character non enclosed.
 505+ 6574              // This procedure does not go beyond a 'nul' ASCII (0x00) that represents
 506+ 6574              // an uncoditional delimiter.
 507+ 6574              // Examples:
 508+ 6574              //   i:	c  c  x  x  x  c  x	 -- 2  5  6
 509+ 6574              //  ii:	c  c  x  x  x  'nul' -- 2  5  5
 510+ 6574              // iii:	c  c  'nul'          -- 2  3  2
 511+ 6574                              New_Def ENCLOSE, "ENCLOSE", is_code, is_normal
 511+ 6574             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 511+ 6574             >
 511+ 6574             >                // dummy db directives used to calculate length of namec
 511+ 6574 45 4E 43 4C >                db      "ENCLOSE"
 511+ 6578 4F 53 45    >
 511+ 657B             >len_NFA         defl    $ - temp_NFA
 511+ 657B             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 511+ 6574             >
 511+ 6574 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 511+ 6575 45 4E 43 4C >                db      "ENCLOSE"               // name string in 7-bit ascii, but
 511+ 6579 4F 53 45    >
 511+ 657C             >                org     $-1                 // alter last byte of Name just above to set
 511+ 657B C5          >                db      {b $} | END_BIT     // msb as name end
 511+ 657C             >
 511+ 657C 1D 65       >                dw      last_NFA            // Link to previous definition Name
 511+ 657E             >ENCLOSE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 511+ 657E ~           >                dw      runcode ; ok        // for primitive definitions  actual code
 511+ 657E             >                else
 511+ 657E 80 65       >                dw      $ + 2   ; ok        // is pointed by CFA
 511+ 6580             >                endif           ; ok        // for other definitions it "points" the correct handler
 511+ 6580             >                // Use of "; ok" to suppress "warning[fwdref]"
 511+ 6580             >
 511+ 6580             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 512+ 6580 D1                           pop     de                  //  e has the character
 513+ 6581 E1                           pop     hl                  // hl has the string address
 514+ 6582 E5                           push    hl
 515+ 6583 7B                           ld      a, e
 516+ 6584 11 FF FF                     ld      de, -1              // let's start from -1
 517+ 6587 2B                           dec     hl
 518+ 6588              Enclose_NonDelimiter:
 519+ 6588                              // find first non delimiter
 520+ 6588 23                               inc     hl
 521+ 6589 13                               inc     de
 522+ 658A BE                               cp      (hl)
 523+ 658B 28 FB                        jr      z, Enclose_NonDelimiter
 524+ 658D D5                           push    de
 525+ 658E
 526+ 658E C5                           push    bc                  // save Instruction Pointer
 527+ 658F
 528+ 658F 4F                           ld      c, a                // save char
 529+ 6590 7E                           ld      a, (hl)
 530+ 6591 A7                           and     a                   // stop if 0x00
 531+ 6592 20 07                        jr      nz, Enclose_NextChar
 532+ 6594
 533+ 6594                              /// case iii. no more character in string
 534+ 6594 C1                               pop     bc                  // restore Instruction Pointer
 535+ 6595 13                               inc     de
 536+ 6596 D5                               push    de
 537+ 6597 1B                               dec     de
 538+ 6598 D5                               push    de
 539+ 6599                                  next
 539+ 6599 DD E9       >                jp      (ix)
 540+ 659B              Enclose_NextChar:
 541+ 659B 79                               ld      a, c
 542+ 659C 23                               inc     hl
 543+ 659D 13                               inc     de
 544+ 659E BE                               cp      (hl)
 545+ 659F 20 06                            jr      nz, Enclose_NonSeparator
 546+ 65A1
 547+ 65A1                                      // case i. first non enclosed
 548+ 65A1 C1                                   pop     bc                  // restore Instruction Pointer
 549+ 65A2 D5                                   push    de
 550+ 65A3 13                                   inc     de
 551+ 65A4 D5                                   push    de
 552+ 65A5                                      next
 552+ 65A5 DD E9       >                jp      (ix)
 553+ 65A7              Enclose_NonSeparator:
 554+ 65A7 7E                               ld      a, (hl)
 555+ 65A8 A7                               and     a
 556+ 65A9 20 F0                        jr      nz, Enclose_NextChar
 557+ 65AB
 558+ 65AB                              // case ii. separator & terminator
 559+ 65AB C1                           pop     bc                  // restore Instruction Pointer
 560+ 65AC D5                           push    de
 561+ 65AD D5                           push    de
 562+ 65AE                              next
 562+ 65AE DD E9       >                jp      (ix)
 563+ 65B0
 564+ 65B0              //  ______________________________________________________________________
 565+ 65B0              //
 566+ 65B0              // (map)        a2 a1 n c1 -- c2
 567+ 65B0              // translate character c1 using mapping string a2 and a2
 568+ 65B0              // if c1 is not present within string a1 then
 569+ 65B0              // c2 = c2 if it is not translated. n is the length of both a1 and a2.
 570+ 65B0                              New_Def C_MAP, "(MAP)", is_code, is_normal
 570+ 65B0             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 570+ 65B0             >
 570+ 65B0             >                // dummy db directives used to calculate length of namec
 570+ 65B0 28 4D 41 50 >                db      "(MAP)"
 570+ 65B4 29          >
 570+ 65B5             >len_NFA         defl    $ - temp_NFA
 570+ 65B5             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 570+ 65B0             >
 570+ 65B0 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 570+ 65B1 28 4D 41 50 >                db      "(MAP)"               // name string in 7-bit ascii, but
 570+ 65B5 29          >
 570+ 65B6             >                org     $-1                 // alter last byte of Name just above to set
 570+ 65B5 A9          >                db      {b $} | END_BIT     // msb as name end
 570+ 65B6             >
 570+ 65B6 74 65       >                dw      last_NFA            // Link to previous definition Name
 570+ 65B8             >C_MAP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 570+ 65B8 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
 570+ 65B8             >                else
 570+ 65B8 BA 65       >                dw      $ + 2   ; ok        // is pointed by CFA
 570+ 65BA             >                endif           ; ok        // for other definitions it "points" the correct handler
 570+ 65BA             >                // Use of "; ok" to suppress "warning[fwdref]"
 570+ 65BA             >
 570+ 65BA             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 571+ 65BA D9                           exx
 572+ 65BB E1                           pop     hl
 573+ 65BC 7D                           ld      a, l
 574+ 65BD C1                           pop     bc
 575+ 65BE E1                           pop     hl
 576+ 65BF 50                           ld      d, b
 577+ 65C0 59                           ld      e, c
 578+ 65C1 ED B1                        cpir
 579+ 65C3 E1                           pop     hl
 580+ 65C4 20 05                        jr      nz, C_Map_Then
 580+ 65C6
 581+ 65C6 19                               add     hl, de
 582+ 65C7 2B                               dec     hl
 583+ 65C8 ED 42                            sbc     hl, bc
 584+ 65CA 7E                               ld      a, (hl)
 585+ 65CB              C_Map_Then:
 586+ 65CB 6F                           ld      l, a
 587+ 65CC 26 00                        ld      h, 0
 588+ 65CE E5                           push    hl
 589+ 65CF D9                           exx
 590+ 65D0                              next
 590+ 65D0 DD E9       >                jp      (ix)
 591+ 65D2
 592+ 65D2              //  ______________________________________________________________________
 593+ 65D2              //
 594+ 65D2              // (compare)    a1 a2 n -- b
 595+ 65D2              // this word performs a lexicographic compare of n bytes of text at address a1
 596+ 65D2              // with n bytes of text at address a2. It returns numeric a value:
 597+ 65D2              //  0 : if strings are equal
 598+ 65D2              // +1 : if string at a1 greater than string at a2
 599+ 65D2              // -1 : if string at a1 less than string at a2
 600+ 65D2              // strings can be 256 bytes in length at most.
 601+ 65D2                              New_Def C_COMPARE, "(COMPARE)", is_code, is_normal
 601+ 65D2             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 601+ 65D2             >
 601+ 65D2             >                // dummy db directives used to calculate length of namec
 601+ 65D2 28 43 4F 4D >                db      "(COMPARE)"
 601+ 65D6 50 41 52 45 >
 601+ 65DA 29          >
 601+ 65DB             >len_NFA         defl    $ - temp_NFA
 601+ 65DB             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 601+ 65D2             >
 601+ 65D2 89          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 601+ 65D3 28 43 4F 4D >                db      "(COMPARE)"               // name string in 7-bit ascii, but
 601+ 65D7 50 41 52 45 >
 601+ 65DB 29          >
 601+ 65DC             >                org     $-1                 // alter last byte of Name just above to set
 601+ 65DB A9          >                db      {b $} | END_BIT     // msb as name end
 601+ 65DC             >
 601+ 65DC B0 65       >                dw      last_NFA            // Link to previous definition Name
 601+ 65DE             >C_COMPARE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 601+ 65DE ~           >                dw      runcode ; ok        // for primitive definitions  actual code
 601+ 65DE             >                else
 601+ 65DE E0 65       >                dw      $ + 2   ; ok        // is pointed by CFA
 601+ 65E0             >                endif           ; ok        // for other definitions it "points" the correct handler
 601+ 65E0             >                // Use of "; ok" to suppress "warning[fwdref]"
 601+ 65E0             >
 601+ 65E0             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 602+ 65E0 D9                           exx
 603+ 65E1 E1                           pop     hl                  // Number of bytes
 604+ 65E2 7D                           ld      a, l
 605+ 65E3 E1                           pop     hl                  // hl points string a2
 606+ 65E4 D1                           pop     de                  // hl points string a1
 607+ 65E5              //              push    bc                  // Instruction pointer on stack
 608+ 65E5 47                           ld      b, a
 609+ 65E6              C_Compare_Loop:
 610+ 65E6 7E                               ld      a, (hl)
 611+ 65E7 CD DB 64                         call    Case_Sensitive
 612+ 65EA 4F                               ld      c, a
 613+ 65EB 1A                               ld      a, (de)
 614+ 65EC CD DB 64                         call    Case_Sensitive
 615+ 65EF B9                               cp      c
 616+ 65F0 13                               inc     de
 617+ 65F1 23                               inc     hl
 618+ 65F2 28 0E                            jr      z, C_Compare_Equal
 619+ 65F4 38 05                                jr      c, C_Compare_NotLessThan  // If LessThan
 620+ 65F6 21 01 00                                 ld      hl, 1               // a1 gt a2
 621+ 65F9 18 03                                jr      C_Compare_Then      // Else
 622+ 65FB              C_Compare_NotLessThan:
 623+ 65FB 21 FF FF                                 ld      hl, -1              // a1 lt a2
 624+ 65FE              C_Compare_Then:                                 // Endif
 625+ 65FE              //                      pop     bc              // restore Instruction Pointer
 626+ 65FE E5                                   push    hl
 627+ 65FF D9                                   exx
 628+ 6600
 629+ 6600                                      next
 629+ 6600 DD E9       >                jp      (ix)
 630+ 6602
 631+ 6602              C_Compare_Equal:
 632+ 6602 10 E2                        djnz    C_Compare_Loop
 633+ 6604 21 00 00                     ld      hl, 0               // a1 eq a2
 634+ 6607              //              pop     bc                  // restore Instruction Pointer
 635+ 6607 E5                           push    hl
 636+ 6608 D9                           exx
 637+ 6609
 638+ 6609                              next
 638+ 6609 DD E9       >                jp      (ix)
 639+ 660B
 640+ 660B              //  ______________________________________________________________________
 641+ 660B              //
 642+ 660B              // emitc        c --
 643+ 660B              // low level emit, calls ROM routine at #10 to send a character to
 644+ 660B              // the the current channel (see SELECT to change stream-channel)
 645+ 660B                              New_Def EMITC, "EMITC", is_code, is_normal
 645+ 660B             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 645+ 660B             >
 645+ 660B             >                // dummy db directives used to calculate length of namec
 645+ 660B 45 4D 49 54 >                db      "EMITC"
 645+ 660F 43          >
 645+ 6610             >len_NFA         defl    $ - temp_NFA
 645+ 6610             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 645+ 660B             >
 645+ 660B 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 645+ 660C 45 4D 49 54 >                db      "EMITC"               // name string in 7-bit ascii, but
 645+ 6610 43          >
 645+ 6611             >                org     $-1                 // alter last byte of Name just above to set
 645+ 6610 C3          >                db      {b $} | END_BIT     // msb as name end
 645+ 6611             >
 645+ 6611 D2 65       >                dw      last_NFA            // Link to previous definition Name
 645+ 6613             >EMITC:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 645+ 6613 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
 645+ 6613             >                else
 645+ 6613 15 66       >                dw      $ + 2   ; ok        // is pointed by CFA
 645+ 6615             >                endif           ; ok        // for other definitions it "points" the correct handler
 645+ 6615             >                // Use of "; ok" to suppress "warning[fwdref]"
 645+ 6615             >
 645+ 6615             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 646+ 6615 E1                           pop     hl
 647+ 6616 7D                           ld      a, l
 648+ 6617              Emitc_Ptr:
 649+ 6617 C5                           push    bc
 650+ 6618 DD E5                        push    ix
 651+ 661A D7                           rst     $10
 652+ 661B DD E1                        pop     ix
 653+ 661D C1                           pop     bc
 654+ 661E 3E FF                        ld      a, 255            // max possible
 655+ 6620 32 8C 5C                     ld      (SCR_CT), a
 656+ 6623
 657+ 6623                              next
 657+ 6623 DD E9       >                jp      (ix)
 658+ 6625
 659+ 6625              //  ______________________________________________________________________
 660+ 6625              //
 661+ 6625              // cr           --
 662+ 6625              // send a CR via EMITC
 663+ 6625                              New_Def CR, "CR", is_code, is_normal
 663+ 6625             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 663+ 6625             >
 663+ 6625             >                // dummy db directives used to calculate length of namec
 663+ 6625 43 52       >                db      "CR"
 663+ 6627             >len_NFA         defl    $ - temp_NFA
 663+ 6627             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 663+ 6625             >
 663+ 6625 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 663+ 6626 43 52       >                db      "CR"               // name string in 7-bit ascii, but
 663+ 6628             >                org     $-1                 // alter last byte of Name just above to set
 663+ 6627 D2          >                db      {b $} | END_BIT     // msb as name end
 663+ 6628             >
 663+ 6628 0B 66       >                dw      last_NFA            // Link to previous definition Name
 663+ 662A             >CR:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 663+ 662A ~           >                dw      runcode ; ok        // for primitive definitions  actual code
 663+ 662A             >                else
 663+ 662A 2C 66       >                dw      $ + 2   ; ok        // is pointed by CFA
 663+ 662C             >                endif           ; ok        // for other definitions it "points" the correct handler
 663+ 662C             >                // Use of "; ok" to suppress "warning[fwdref]"
 663+ 662C             >
 663+ 662C             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 664+ 662C
 665+ 662C 3E 0D                        ld      a, CR_CHAR
 666+ 662E 18 E7                        jr      Emitc_Ptr
 667+ 6630
 668+ 6630              Emitc_Vec:
 669+ 6630 75 66                        dw      C_Emit_Printable  // comma
 670+ 6632 7B 66                        dw      C_Emit_Bel        // bel
 671+ 6634 75 66                        dw      C_Emit_Printable  // bs
 672+ 6636 90 66                        dw      C_Emit_Tab        // tab
 673+ 6638 75 66                        dw      C_Emit_Printable  // cr
 674+ 663A 96 66                        dw      C_Emit_NL         // lf (unix newline)
 675+ 663C 75 66                        dw      C_Emit_Printable  // blank
 676+ 663E 75 66                        dw      C_Emit_Printable  // blank
 677+ 6640
 678+ 6640              Emit_Selector_Start:
 679+ 6640 06                           db      $06                 // comma
 680+ 6641 07                           db      $07                 // bel
 681+ 6642 08                           db      $08                 // bs
 682+ 6643 09                           db      $09                 // tab
 683+ 6644 0D                           db      $0D                 // cr
 684+ 6645 0A                           db      $0A                 // lf (unix newline)
 685+ 6646 20                           db      $20
 686+ 6647              Emit_Selector_End:
 687+ 6647 20                           db      $20
 688+ 6648
 689+ 6648              //  ______________________________________________________________________
 690+ 6648              //
 691+ 6648              // (?emit)      c1 -- c2 | c1
 692+ 6648              // decode a character to be sent via EMIT
 693+ 6648              // search first the Emit_Selector table, if found jump to the corresponding routine in Emit_Vector
 694+ 6648              // the routine should resolve anything and convert the character anyway.
 695+ 6648                              New_Def C_EMIT, "(?EMIT)", is_code, is_normal
 695+ 6648             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 695+ 6648             >
 695+ 6648             >                // dummy db directives used to calculate length of namec
 695+ 6648 28 3F 45 4D >                db      "(?EMIT)"
 695+ 664C 49 54 29    >
 695+ 664F             >len_NFA         defl    $ - temp_NFA
 695+ 664F             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 695+ 6648             >
 695+ 6648 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 695+ 6649 28 3F 45 4D >                db      "(?EMIT)"               // name string in 7-bit ascii, but
 695+ 664D 49 54 29    >
 695+ 6650             >                org     $-1                 // alter last byte of Name just above to set
 695+ 664F A9          >                db      {b $} | END_BIT     // msb as name end
 695+ 6650             >
 695+ 6650 25 66       >                dw      last_NFA            // Link to previous definition Name
 695+ 6652             >C_EMIT:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 695+ 6652 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
 695+ 6652             >                else
 695+ 6652 54 66       >                dw      $ + 2   ; ok        // is pointed by CFA
 695+ 6654             >                endif           ; ok        // for other definitions it "points" the correct handler
 695+ 6654             >                // Use of "; ok" to suppress "warning[fwdref]"
 695+ 6654             >
 695+ 6654             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 696+ 6654 D1                           pop     de
 697+ 6655 7B                           ld      a, e                //  de has c1
 698+ 6656 E6 7F                        and     $7F                 // 7-bit ascii only
 699+ 6658 C5                           push    bc                  // save Instruction Pointer
 700+ 6659 01 08 00                     ld      bc, Emit_Selector_End - Emit_Selector_Start + 1
 701+ 665C 21 47 66                     ld      hl, Emit_Selector_End
 702+ 665F ED B9                        cpdr                        // search for c1 in Emit_Selector table, backward
 703+ 6661 20 0B                        jr      nz, C_Emit_Not_Found
 704+ 6663                                  // Found then decode it
 705+ 6663 21 30 66                         ld      hl, Emitc_Vec
 706+ 6666 09                               add     hl, bc
 707+ 6667 09                               add     hl, bc
 708+ 6668 5E                               ld      e, (hl)
 709+ 6669 23                               inc     hl
 710+ 666A 56                               ld      d, (hl)
 711+ 666B EB                               ex      de, hl
 712+ 666C C1                               pop     bc                  // restore Instruction Pointer
 713+ 666D E9                               jp      (hl)                // one of the following labels
 714+ 666E              C_Emit_Not_Found:
 715+ 666E C1                           pop     bc                  // restore Instruction Pointer
 716+ 666F FE 20                        cp      BLANK_CHAR          // cp $20 non-printable check
 717+ 6671 30 02                        jr      nc, C_Emit_Printable
 718+ 6673 3E 00                            ld      a, NUL_CHAR         // NUL is never "printed"
 719+ 6675              C_Emit_Printable:
 720+ 6675 6F                           ld      l, a
 721+ 6676 26 00                        ld      h, 0
 722+ 6678
 723+ 6678                              psh1
 723+ 6678 E5          >                push    hl
 723+ 6679 DD E9       >                jp      (ix)
 724+ 667B
 725+ 667B              C_Emit_Bel:
 726+ 667B C5                           push    bc                  // save Instruction Pointer
 727+ 667C 11 00 01                     ld      de, $0100
 728+ 667F 21 00 02                     ld      hl, $0200
 729+ 6682 DD E5                        push    ix                  // save Next Pointer
 730+ 6684 CD B6 03                     call    $03B6               // bleep Standard-ROM routine
 731+ 6687 DD E1                        pop     ix                  // restore Next Pointer
 732+ 6689 C1                           pop     bc                  // restore Instruction Pointer
 733+ 668A 21 00 00                     ld      hl, NUL_CHAR
 734+ 668D
 735+ 668D                              psh1
 735+ 668D E5          >                push    hl
 735+ 668E DD E9       >                jp      (ix)
 736+ 6690
 737+ 6690 21 06 00     C_Emit_Tab:     ld      hl, COMMA_CHAR
 738+ 6693
 739+ 6693                              psh1
 739+ 6693 E5          >                push    hl
 739+ 6694 DD E9       >                jp      (ix)
 740+ 6696
 741+ 6696 21 0D 00     C_Emit_NL       ld      hl, CR_CHAR           // 0x0A --> 0x0D  à la Spectrum
 742+ 6699
 743+ 6699                              psh1
 743+ 6699 E5          >                push    hl
 743+ 669A DD E9       >                jp      (ix)
 744+ 669C
 745+ 669C              //  ______________________________________________________________________
 746+ 669C
 747+ 669C              Key_Table:
 748+ 669C E2                           db      $E2                 //  0: STOP  --> SYMBOL+A : ~
 749+ 669D C3                           db      $C3                 //  1: NOT   --> SYMBOL+S : |
 750+ 669E CD                           db      $CD                 //  2: STEP  --> SYMBOl+D : //
 751+ 669F CC                           db      $CC                 //  3: TO    --> SYMBOL+F : {
 752+ 66A0 CB                           db      $CB                 //  4: THEN  --> SYMBOL+G : }
 753+ 66A1 C6                           db      $C6                 //  5: AND   --> SYMBOL+Y : [
 754+ 66A2 C5                           db      $C5                 //  6: OR    --> SYMBOL+U : ]
 755+ 66A3 AC                           db      $AC                 //  7: AT    --> SYMBOL+I : (C) copyright symbol
 756+ 66A4 C7                           db      $C7                 //  8: <=    --> same as SHIFT-1 [EDIT]
 757+ 66A5 C8                           db      $C8                 //  9: >=    --> same as SHIFT-0 [BACKSPACE]
 758+ 66A6 C9                           db      $C9                 // 10: <>    --> SYMBOL+W is the same as CAPS (toggle) SHIFT+2
 759+ 66A7              Key_MapTo:
 760+ 66A7 06                           db      $06                 // 10: SYMBOL+W is the same as CAPS (toggle) SHIFT+2
 761+ 66A8 0C                           db      $0C                 //  9: same as SHIFT-0 [BACKSPACE]
 762+ 66A9 07                           db      $07                 //  8: same as SHIFT-1 [EDIT]
 763+ 66AA 7F                           db      $7F                 //  7: SYMBOL+I : (C) copyright symbol
 764+ 66AB 5D                           db      $5D                 //  6: SYMBOL+U : ]
 765+ 66AC 5B                           db      $5B                 //  5: SYMBOL+Y : [
 766+ 66AD 7D                           db      $7D                 //  4: SYMBOL+G : }
 767+ 66AE 7B                           db      $7B                 //  3: SYMBOL+F : {
 768+ 66AF 5C                           db      $5C                 //  2: SYMBOl+D : //
 769+ 66B0 7C                           db      $7C                 //  1: SYMBOL+S : |
 770+ 66B1 7E                           db      $7E                 //  0: SYMBOL+A : ~
 771+ 66B2
 772+ 66B2              //  ______________________________________________________________________
 773+ 66B2              //
 774+ 66B2              // key          -- c
 775+ 66B2              // wait for a keypress
 776+ 66B2              // This definition need Standard ROM Interrupt to be served
 777+ 66B2
 778+ 66B2                              New_Def KEY, "KEY", is_code, is_normal
 778+ 66B2             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 778+ 66B2             >
 778+ 66B2             >                // dummy db directives used to calculate length of namec
 778+ 66B2 4B 45 59    >                db      "KEY"
 778+ 66B5             >len_NFA         defl    $ - temp_NFA
 778+ 66B5             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 778+ 66B2             >
 778+ 66B2 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 778+ 66B3 4B 45 59    >                db      "KEY"               // name string in 7-bit ascii, but
 778+ 66B6             >                org     $-1                 // alter last byte of Name just above to set
 778+ 66B5 D9          >                db      {b $} | END_BIT     // msb as name end
 778+ 66B6             >
 778+ 66B6 48 66       >                dw      last_NFA            // Link to previous definition Name
 778+ 66B8             >KEY:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 778+ 66B8 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
 778+ 66B8             >                else
 778+ 66B8 BA 66       >                dw      $ + 2   ; ok        // is pointed by CFA
 778+ 66BA             >                endif           ; ok        // for other definitions it "points" the correct handler
 778+ 66BA             >                // Use of "; ok" to suppress "warning[fwdref]"
 778+ 66BA             >
 778+ 66BA             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 779+ 66BA
 780+ 66BA C5                           push    bc                  // save Instruction Pointer
 781+ 66BB DD E5                        push    ix
 782+ 66BD
 783+ 66BD ED 73 92 63                  ld      (SP_Saved), sp      // be sure to not to be paged out.
 784+ 66C1 31 61 63                     ld      sp, Cold_origin - 5 // maybe $4000 in the future...
 785+ 66C4 FD CB 01 AE                  res     5, (iy + 1)         // FLAGS (5C3A+1)
 786+ 66C8
 787+ 66C8              Key_Wait:
 788+ 66C8 76                               halt
 789+ 66C9 3E 02                            ld      a, 2                // selec channel #2 (Upper Video)
 790+ 66CB CD 01 16                         call    $1601               // SELECT Standard-ROM Routine
 791+ 66CE
 792+ 66CE                                  // software-flash: flips face every 320 ms
 793+ 66CE 3E 10                            ld      a, $10              // Timing based
 794+ 66D0 FD A6 3E                         and     (iy + $3E)          // FRAMES (5C3A+3E)
 795+ 66D3
 796+ 66D3 3A 8C 63                         ld      a, (Block_Face)     // see origin.asm
 797+ 66D6 20 0C                            jr      nz, Key_Cursor
 798+ 66D8 3A 8D 63                             ld      a, (Half_Face)      // see origin.asm
 799+ 66DB FD CB 30 5E                          bit     3, (iy + $30)       // FLAGS2 (5C3A+$30) that is CAPS-LOCK
 800+ 66DF 28 03                                jr      z, Key_Cursor
 801+ 66E1 3A 8E 63                                 ld      a, (Underscore_Face) // see origin
 802+ 66E4              Key_Cursor:
 803+ 66E4 D7                               rst     $10
 804+ 66E5 3E 08                            ld      a, BACKSPACE_CHAR    // backspace
 805+ 66E7 D7                               rst     $10
 806+ 66E8
 807+ 66E8 FD CB 01 6E                      bit     5, (iy + 1)         // FLAGS (5C3A+1)
 808+ 66EC 28 DA                        jr      z, Key_Wait
 809+ 66EE
 810+ 66EE 76                           halt    // this is to sync flashing cursor.
 811+ 66EF
 812+ 66EF 3E 20                        ld      a, BLANK_CHAR       // space to blank cursor
 813+ 66F1 D7                           rst     $10
 814+ 66F2 3E 08                        ld      a, BACKSPACE_CHAR   // backspace
 815+ 66F4 D7                           rst     $10
 816+ 66F5 3A 08 5C                     ld      a, (LASTK)          // get typed character (5C08)
 817+ 66F8
 818+ 66F8                              // decode character from above table
 819+ 66F8 21 9C 66                     ld      hl, Key_Table
 820+ 66FB 01 0B 00                     ld      bc, $000B
 821+ 66FE ED B1                        cpir
 822+ 6700 20 05                        jr      nz, Key_DontMap
 823+ 6702 21 A7 66                         ld      hl, Key_MapTo
 824+ 6705 09                               add     hl, bc
 825+ 6706 7E                               ld      a, (hl)
 826+ 6707 FE 06        Key_DontMap:    cp      $06                 // CAPS-LOCK management
 827+ 6709 20 09                        jr      nz, Key_NoCapsLock
 828+ 670B 21 6A 5C                         ld      hl, $5C6A           // FLAGS2
 829+ 670E 7E                               ld      a, (hl)
 830+ 670F EE 08                            xor     $08
 831+ 6711 77                               ld      (hl), a
 832+ 6712 3E 00                            ld      a, NUL_CHAR
 833+ 6714 6F           Key_NoCapsLock: ld      l, a
 834+ 6715 26 00                        ld      h, 0                // Prepare TOS
 835+ 6717
 836+ 6717 3A 48 5C                     ld      a, ($5C48)          // BORDCR system variable
 837+ 671A 1F                           rra
 838+ 671B 1F                           rra
 839+ 671C 1F                           rra
 840+ 671D F6 18                        or      $18                 // quick'n'dirty click
 841+ 671F D3 FE                        out     ($fe), a
 842+ 6721 06 00                        ld      b, 0
 843+ 6723 10 FE                        djnz    $                   // wait loop
 844+ 6725 EE 18                        xor     $18
 845+ 6727 D3 FE                        out     ($fe), a
 846+ 6729
 847+ 6729 ED 7B 92 63                  ld      sp, (SP_Saved)
 848+ 672D
 849+ 672D DD E1                        pop     ix
 850+ 672F C1                           pop     bc                  // Restore Instruction Pointer
 851+ 6730
 852+ 6730                              psh1
 852+ 6730 E5          >                push    hl
 852+ 6731 DD E9       >                jp      (ix)
 853+ 6733
 854+ 6733              //  ______________________________________________________________________
 855+ 6733              //
 856+ 6733              // ?terminal    -- FALSE | TRUE
 857+ 6733              // test for BREAK keypress
 858+ 6733                              New_Def QTERMINAL, "?TERMINAL", is_code, is_normal
 858+ 6733             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 858+ 6733             >
 858+ 6733             >                // dummy db directives used to calculate length of namec
 858+ 6733 3F 54 45 52 >                db      "?TERMINAL"
 858+ 6737 4D 49 4E 41 >
 858+ 673B 4C          >
 858+ 673C             >len_NFA         defl    $ - temp_NFA
 858+ 673C             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 858+ 6733             >
 858+ 6733 89          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 858+ 6734 3F 54 45 52 >                db      "?TERMINAL"               // name string in 7-bit ascii, but
 858+ 6738 4D 49 4E 41 >
 858+ 673C 4C          >
 858+ 673D             >                org     $-1                 // alter last byte of Name just above to set
 858+ 673C CC          >                db      {b $} | END_BIT     // msb as name end
 858+ 673D             >
 858+ 673D B2 66       >                dw      last_NFA            // Link to previous definition Name
 858+ 673F             >QTERMINAL:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 858+ 673F ~           >                dw      runcode ; ok        // for primitive definitions  actual code
 858+ 673F             >                else
 858+ 673F 41 67       >                dw      $ + 2   ; ok        // is pointed by CFA
 858+ 6741             >                endif           ; ok        // for other definitions it "points" the correct handler
 858+ 6741             >                // Use of "; ok" to suppress "warning[fwdref]"
 858+ 6741             >
 858+ 6741             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 859+ 6741 D9                           exx
 860+ 6742 01 FE 7F                     ld      bc, $7ffe
 861+ 6745 ED 50                        in      d, (c)
 862+ 6747 41                           ld      b, c
 863+ 6748 ED 78                        in      a, (c)
 864+ 674A B2                           or       d
 865+ 674B 1F                           rra
 866+ 674C 3F                           ccf
 867+ 674D ED 62                        sbc     hl, hl
 868+ 674F E5                           push    hl
 869+ 6750 D9                           exx
 870+ 6751                              next
 870+ 6751 DD E9       >                jp      (ix)
 871+ 6753
 872+ 6753
 873+ 6753              //  ______________________________________________________________________
 874+ 6753              //
 875+ 6753              // inkey        -- c | 0
 876+ 6753              // call ROM inkey$ routine, returns c or "zero".
 877+ 6753
 878+ 6753                              New_Def INKEY, "INKEY", is_code, is_normal
 878+ 6753             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 878+ 6753             >
 878+ 6753             >                // dummy db directives used to calculate length of namec
 878+ 6753 49 4E 4B 45 >                db      "INKEY"
 878+ 6757 59          >
 878+ 6758             >len_NFA         defl    $ - temp_NFA
 878+ 6758             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 878+ 6753             >
 878+ 6753 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 878+ 6754 49 4E 4B 45 >                db      "INKEY"               // name string in 7-bit ascii, but
 878+ 6758 59          >
 878+ 6759             >                org     $-1                 // alter last byte of Name just above to set
 878+ 6758 D9          >                db      {b $} | END_BIT     // msb as name end
 878+ 6759             >
 878+ 6759 33 67       >                dw      last_NFA            // Link to previous definition Name
 878+ 675B             >INKEY:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 878+ 675B ~           >                dw      runcode ; ok        // for primitive definitions  actual code
 878+ 675B             >                else
 878+ 675B 5D 67       >                dw      $ + 2   ; ok        // is pointed by CFA
 878+ 675D             >                endif           ; ok        // for other definitions it "points" the correct handler
 878+ 675D             >                // Use of "; ok" to suppress "warning[fwdref]"
 878+ 675D             >
 878+ 675D             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 879+ 675D
 880+ 675D C5                           push    bc
 881+ 675E ED 73 92 63                  ld      (SP_Saved), sp
 882+ 6762 31 61 63                     ld      sp, Cold_origin - 5
 883+ 6765 DD E5                        push    ix
 884+ 6767 CD E6 15                     call    $15E6                   // instead of 15E9
 885+ 676A DD E1                        pop     ix
 886+ 676C ED 7B 92 63                  ld      sp, (SP_Saved)
 887+ 6770 6F                           ld      l, a
 888+ 6771 26 00                        ld      h, 0
 889+ 6773 C1                           pop     bc
 890+ 6774                              psh1
 890+ 6774 E5          >                push    hl
 890+ 6775 DD E9       >                jp      (ix)
 891+ 6777
 892+ 6777              //  ______________________________________________________________________
 893+ 6777              //
 894+ 6777              // select      n --
 895+ 6777              // selects the given channel number
 896+ 6777
 897+ 6777                              New_Def SELECT, "SELECT", is_code, is_normal
 897+ 6777             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 897+ 6777             >
 897+ 6777             >                // dummy db directives used to calculate length of namec
 897+ 6777 53 45 4C 45 >                db      "SELECT"
 897+ 677B 43 54       >
 897+ 677D             >len_NFA         defl    $ - temp_NFA
 897+ 677D             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 897+ 6777             >
 897+ 6777 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 897+ 6778 53 45 4C 45 >                db      "SELECT"               // name string in 7-bit ascii, but
 897+ 677C 43 54       >
 897+ 677E             >                org     $-1                 // alter last byte of Name just above to set
 897+ 677D D4          >                db      {b $} | END_BIT     // msb as name end
 897+ 677E             >
 897+ 677E 53 67       >                dw      last_NFA            // Link to previous definition Name
 897+ 6780             >SELECT:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 897+ 6780 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
 897+ 6780             >                else
 897+ 6780 82 67       >                dw      $ + 2   ; ok        // is pointed by CFA
 897+ 6782             >                endif           ; ok        // for other definitions it "points" the correct handler
 897+ 6782             >                // Use of "; ok" to suppress "warning[fwdref]"
 897+ 6782             >
 897+ 6782             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 898+ 6782 E1                           pop     hl
 899+ 6783 C5                           push    bc
 900+ 6784 7D                           ld      a, l
 901+ 6785 ED 73 92 63                  ld      (SP_Saved), sp
 902+ 6789 31 61 63                     ld      sp, Cold_origin - 5
 903+ 678C DD E5                        push    ix
 904+ 678E CD 01 16                     call    $1601
 905+ 6791 DD E1                        pop     ix
 906+ 6793 ED 7B 92 63                  ld      sp, (SP_Saved)
 907+ 6797 C1                           pop     bc
 908+ 6798
 909+ 6798                              next
 909+ 6798 DD E9       >                jp      (ix)
 910+ 679A
 911+ 679A              //  ______________________________________________________________________
 912+ 679A              //
 913+ 679A              // ZX Spectrum Next - Low Level disk primitives.
 914+ 679A              // this include is "here" for backward compatibility
 915+ 679A
 916+ 679A                              include "next-opt0.asm"
# file opened: C:\Zx\CSpect\Projects\vForth15_INDIRECT/source/next-opt0.asm
   1++679A              //  ______________________________________________________________________
   2++679A              //
   3++679A              //  next-opt.asm
   4++679A              //
   5++679A              //  ZX Spectrum Next - peculiar definitions
   6++679A              //  ______________________________________________________________________
   7++679A
   8++679A              //  ______________________________________________________________________
   9++679A              //
  10++679A              // f_seek       d u -- f
  11++679A              // Seek to position d in file-handle u.
  12++679A              // Return a false-flag 0 on success, True flag on error
  13++679A                              New_Def F_SEEK, "F_SEEK", is_code, is_normal
  13++679A             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  13++679A             >
  13++679A             >                // dummy db directives used to calculate length of namec
  13++679A 46 5F 53 45 >                db      "F_SEEK"
  13++679E 45 4B       >
  13++67A0             >len_NFA         defl    $ - temp_NFA
  13++67A0             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  13++679A             >
  13++679A 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  13++679B 46 5F 53 45 >                db      "F_SEEK"               // name string in 7-bit ascii, but
  13++679F 45 4B       >
  13++67A1             >                org     $-1                 // alter last byte of Name just above to set
  13++67A0 CB          >                db      {b $} | END_BIT     // msb as name end
  13++67A1             >
  13++67A1 77 67       >                dw      last_NFA            // Link to previous definition Name
  13++67A3             >F_SEEK:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
  13++67A3 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
  13++67A3             >                else
  13++67A3 A5 67       >                dw      $ + 2   ; ok        // is pointed by CFA
  13++67A5             >                endif           ; ok        // for other definitions it "points" the correct handler
  13++67A5             >                // Use of "; ok" to suppress "warning[fwdref]"
  13++67A5             >
  13++67A5             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  14++67A5 E1                           pop     hl                  // file-handle
  15++67A6 7D                           ld      a, l                // file-handle
  16++67A7 60                           ld      h, b                // save Intruction Pointer
  17++67A8 69                           ld      l, c
  18++67A9 C1                           pop     bc                  // bc has high-word of d
  19++67AA D1                           pop     de
  20++67AB DD E5                        push    ix
  21++67AD E5                           push    hl                  // save Instruction Pointer
  22++67AE DD 21 00 00                  ld      ix, 0
  23++67B2 CF                           rst     $08
  24++67B3 9F                           db      $9F
  25++67B4              F_Seek_Exit:
  26++67B4 C1                           pop     bc                  // restore Instruction Pointer
  27++67B5 DD E1                        pop     ix
  28++67B7 ED 62                        sbc     hl, hl              // to get 0 or -1
  29++67B9
  30++67B9                              psh1
  30++67B9 E5          >                push    hl
  30++67BA DD E9       >                jp      (ix)
  31++67BC
  32++67BC              //  ______________________________________________________________________
  33++67BC              //
  34++67BC              // f_close      u -- f
  35++67BC              // Close file-handle u.
  36++67BC              // Return 0 on success, True flag on error
  37++67BC
  38++67BC                              New_Def F_CLOSE, "F_CLOSE", is_code, is_normal
  38++67BC             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  38++67BC             >
  38++67BC             >                // dummy db directives used to calculate length of namec
  38++67BC 46 5F 43 4C >                db      "F_CLOSE"
  38++67C0 4F 53 45    >
  38++67C3             >len_NFA         defl    $ - temp_NFA
  38++67C3             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  38++67BC             >
  38++67BC 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  38++67BD 46 5F 43 4C >                db      "F_CLOSE"               // name string in 7-bit ascii, but
  38++67C1 4F 53 45    >
  38++67C4             >                org     $-1                 // alter last byte of Name just above to set
  38++67C3 C5          >                db      {b $} | END_BIT     // msb as name end
  38++67C4             >
  38++67C4 9A 67       >                dw      last_NFA            // Link to previous definition Name
  38++67C6             >F_CLOSE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
  38++67C6 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
  38++67C6             >                else
  38++67C6 C8 67       >                dw      $ + 2   ; ok        // is pointed by CFA
  38++67C8             >                endif           ; ok        // for other definitions it "points" the correct handler
  38++67C8             >                // Use of "; ok" to suppress "warning[fwdref]"
  38++67C8             >
  38++67C8             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  39++67C8
  40++67C8 E1                           pop     hl
  41++67C9 7D                           ld      a, l                // file-handle
  42++67CA DD E5                        push    ix
  43++67CC C5                           push    bc                  // Save Instruction pointer
  44++67CD CF                           rst     $08
  45++67CE 9B                           db      $9B
  46++67CF 18 E3                        jr      F_Seek_Exit
  47++67D1              //              pop     bc
  48++67D1              //              pop     ix
  49++67D1              //              sbc     hl, hl
  50++67D1              //              psh1
  51++67D1
  52++67D1              //  ______________________________________________________________________
  53++67D1              //
  54++67D1              // f_sync      u -- f
  55++67D1              // Close file-handle u.
  56++67D1              // Return 0 on success, True flag on error
  57++67D1
  58++67D1                              New_Def F_SYNC, "F_SYNC", is_code, is_normal
  58++67D1             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  58++67D1             >
  58++67D1             >                // dummy db directives used to calculate length of namec
  58++67D1 46 5F 53 59 >                db      "F_SYNC"
  58++67D5 4E 43       >
  58++67D7             >len_NFA         defl    $ - temp_NFA
  58++67D7             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  58++67D1             >
  58++67D1 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  58++67D2 46 5F 53 59 >                db      "F_SYNC"               // name string in 7-bit ascii, but
  58++67D6 4E 43       >
  58++67D8             >                org     $-1                 // alter last byte of Name just above to set
  58++67D7 C3          >                db      {b $} | END_BIT     // msb as name end
  58++67D8             >
  58++67D8 BC 67       >                dw      last_NFA            // Link to previous definition Name
  58++67DA             >F_SYNC:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
  58++67DA ~           >                dw      runcode ; ok        // for primitive definitions  actual code
  58++67DA             >                else
  58++67DA DC 67       >                dw      $ + 2   ; ok        // is pointed by CFA
  58++67DC             >                endif           ; ok        // for other definitions it "points" the correct handler
  58++67DC             >                // Use of "; ok" to suppress "warning[fwdref]"
  58++67DC             >
  58++67DC             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  59++67DC E1                           pop     hl
  60++67DD 7D                           ld      a, l                // file-handle
  61++67DE DD E5                        push    ix
  62++67E0 C5                           push    bc
  63++67E1 CF                           rst     $08
  64++67E2 9C                           db      $9C
  65++67E3 18 CF                        jr      F_Seek_Exit
  66++67E5              //              pop     bc
  67++67E5              //              pop     ix
  68++67E5              //              sbc     hl, hl
  69++67E5              //              psh1
  70++67E5
  71++67E5              //  ______________________________________________________________________
  72++67E5              //
  73++67E5              // f_fgetpos    u -- d f
  74++67E5              // Seek to position d in file-handle u.
  75++67E5              // Return a false-flag 0 on success, True flag on error
  76++67E5                              New_Def F_FGETPOS, "F_FGETPOS", is_code, is_normal
  76++67E5             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  76++67E5             >
  76++67E5             >                // dummy db directives used to calculate length of namec
  76++67E5 46 5F 46 47 >                db      "F_FGETPOS"
  76++67E9 45 54 50 4F >
  76++67ED 53          >
  76++67EE             >len_NFA         defl    $ - temp_NFA
  76++67EE             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  76++67E5             >
  76++67E5 89          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  76++67E6 46 5F 46 47 >                db      "F_FGETPOS"               // name string in 7-bit ascii, but
  76++67EA 45 54 50 4F >
  76++67EE 53          >
  76++67EF             >                org     $-1                 // alter last byte of Name just above to set
  76++67EE D3          >                db      {b $} | END_BIT     // msb as name end
  76++67EF             >
  76++67EF D1 67       >                dw      last_NFA            // Link to previous definition Name
  76++67F1             >F_FGETPOS:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
  76++67F1 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
  76++67F1             >                else
  76++67F1 F3 67       >                dw      $ + 2   ; ok        // is pointed by CFA
  76++67F3             >                endif           ; ok        // for other definitions it "points" the correct handler
  76++67F3             >                // Use of "; ok" to suppress "warning[fwdref]"
  76++67F3             >
  76++67F3             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  77++67F3 E1                           pop     hl
  78++67F4 7D                           ld      a, l                // file-handle
  79++67F5 DD E5                        push    ix
  80++67F7 C5                           push    bc
  81++67F8 CF                           rst     $08
  82++67F9 A0                           db      $A0
  83++67FA E1                           pop     hl                  // restore Instruction Pointer
  84++67FB DD E1                        pop     ix
  85++67FD D5                           push    de
  86++67FE C5                           push    bc
  87++67FF 44                           ld      b, h                // restore Instruction Pointer
  88++6800 4D                           ld      c, l
  89++6801 ED 62                        sbc     hl, hl
  90++6803
  91++6803                              psh1
  91++6803 E5          >                push    hl
  91++6804 DD E9       >                jp      (ix)
  92++6806
  93++6806              //  ______________________________________________________________________
  94++6806              //
  95++6806              // f_read       a b u -- n f
  96++6806              // Read b bytes from file-handle u to address a
  97++6806              // Return the actual number n of bytes read
  98++6806              // Return 0 on success, True flag on error
  99++6806                              New_Def F_READ, "F_READ", is_code, is_normal
  99++6806             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  99++6806             >
  99++6806             >                // dummy db directives used to calculate length of namec
  99++6806 46 5F 52 45 >                db      "F_READ"
  99++680A 41 44       >
  99++680C             >len_NFA         defl    $ - temp_NFA
  99++680C             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  99++6806             >
  99++6806 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  99++6807 46 5F 52 45 >                db      "F_READ"               // name string in 7-bit ascii, but
  99++680B 41 44       >
  99++680D             >                org     $-1                 // alter last byte of Name just above to set
  99++680C C4          >                db      {b $} | END_BIT     // msb as name end
  99++680D             >
  99++680D E5 67       >                dw      last_NFA            // Link to previous definition Name
  99++680F             >F_READ:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
  99++680F ~           >                dw      runcode ; ok        // for primitive definitions  actual code
  99++680F             >                else
  99++680F 11 68       >                dw      $ + 2   ; ok        // is pointed by CFA
  99++6811             >                endif           ; ok        // for other definitions it "points" the correct handler
  99++6811             >                // Use of "; ok" to suppress "warning[fwdref]"
  99++6811             >
  99++6811             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 100++6811
 101++6811 50                           ld      d, b
 102++6812 59                           ld      e, c
 103++6813 E1                           pop     hl
 104++6814 7D                           ld      a, l                // file-handle
 105++6815 C1                           pop     bc                  // bc has bytes to read
 106++6816 DD E3                        ex      (sp), ix            // ix has address
 107++6818 D5                           push    de                  // Save Instruction pointer
 108++6819 CF                           rst     $08
 109++681A 9D                           db      $9D
 110++681B              F_Read_Exit:
 111++681B C1                           pop     bc                  // Restore Instruction pointer
 112++681C DD E1                        pop     ix                  // Restore ix
 113++681E D5                           push    de                  // bytes written
 114++681F ED 62                        sbc     hl, hl
 115++6821
 116++6821                              psh1
 116++6821 E5          >                push    hl
 116++6822 DD E9       >                jp      (ix)
 117++6824
 118++6824              //  ______________________________________________________________________
 119++6824              //
 120++6824              // f_write      a b u -- n f
 121++6824              // Write bytes currently stored at address a to file-handle u.
 122++6824              // Return the actual n bytes written and 0 on success, True flag on error.
 123++6824                              New_Def F_WRITE, "F_WRITE", is_code, is_normal
 123++6824             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 123++6824             >
 123++6824             >                // dummy db directives used to calculate length of namec
 123++6824 46 5F 57 52 >                db      "F_WRITE"
 123++6828 49 54 45    >
 123++682B             >len_NFA         defl    $ - temp_NFA
 123++682B             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 123++6824             >
 123++6824 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 123++6825 46 5F 57 52 >                db      "F_WRITE"               // name string in 7-bit ascii, but
 123++6829 49 54 45    >
 123++682C             >                org     $-1                 // alter last byte of Name just above to set
 123++682B C5          >                db      {b $} | END_BIT     // msb as name end
 123++682C             >
 123++682C 06 68       >                dw      last_NFA            // Link to previous definition Name
 123++682E             >F_WRITE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 123++682E ~           >                dw      runcode ; ok        // for primitive definitions  actual code
 123++682E             >                else
 123++682E 30 68       >                dw      $ + 2   ; ok        // is pointed by CFA
 123++6830             >                endif           ; ok        // for other definitions it "points" the correct handler
 123++6830             >                // Use of "; ok" to suppress "warning[fwdref]"
 123++6830             >
 123++6830             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 124++6830
 125++6830 50                           ld      d, b
 126++6831 59                           ld      e, c
 127++6832 E1                           pop     hl
 128++6833 7D                           ld      a, l                // file-handle
 129++6834 C1                           pop     bc                  // bc has bytes to read
 130++6835 DD E3                        ex      (sp), ix            // ix has address
 131++6837 D5                           push    de                  // Save Instruction pointer
 132++6838 CF                           rst     $08
 133++6839 9E                           db      $9E
 134++683A 18 DF                        jr F_Read_Exit
 135++683C              //              pop     bc                  // Restore Instruction pointer
 136++683C              //              pop     ix                  // Restore ix
 137++683C              //              push    de                  // bytes written
 138++683C              //              sbc     hl, hl
 139++683C              //
 140++683C              //              psh1
 141++683C
 142++683C              //  ______________________________________________________________________
 143++683C              //
 144++683C              // f_open       a1 a2 b -- u f
 145++683C              // open a file
 146++683C              // a1 (filespec) is a null-terminated string, such as produced by ," definition
 147++683C              // a2 is address to an 8-byte header data used in some cases.
 148++683C              // b is access mode-byte, that is a combination of:
 149++683C              // any/all of:
 150++683C              //   esx_mode_read          $01 request read access
 151++683C              //   esx_mode_write         $02 request write access
 152++683C              //   esx_mode_use_header    $40 read/write +3DOS header
 153++683C              // plus one of:
 154++683C              //   esx_mode_open_exist    $00 only open existing file
 155++683C              //   esx_mode_open_creat    $08 open existing or create file
 156++683C              //   esx_mode_creat_noexist $04 create new file, error if exists
 157++683C              //   esx_mode_creat_trunc   $0c create new file, delete existing
 158++683C              // Return file-handle u and 0 on success, True flag on error
 159++683C                              New_Def F_OPEN, "F_OPEN", is_code, is_normal
 159++683C             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 159++683C             >
 159++683C             >                // dummy db directives used to calculate length of namec
 159++683C 46 5F 4F 50 >                db      "F_OPEN"
 159++6840 45 4E       >
 159++6842             >len_NFA         defl    $ - temp_NFA
 159++6842             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 159++683C             >
 159++683C 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 159++683D 46 5F 4F 50 >                db      "F_OPEN"               // name string in 7-bit ascii, but
 159++6841 45 4E       >
 159++6843             >                org     $-1                 // alter last byte of Name just above to set
 159++6842 CE          >                db      {b $} | END_BIT     // msb as name end
 159++6843             >
 159++6843 24 68       >                dw      last_NFA            // Link to previous definition Name
 159++6845             >F_OPEN:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 159++6845 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
 159++6845             >                else
 159++6845 47 68       >                dw      $ + 2   ; ok        // is pointed by CFA
 159++6847             >                endif           ; ok        // for other definitions it "points" the correct handler
 159++6847             >                // Use of "; ok" to suppress "warning[fwdref]"
 159++6847             >
 159++6847             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 160++6847 60                           ld      h, b                // Save Instruction pointer
 161++6848 69                           ld      l, c
 162++6849 C1                           pop     bc                  // file-mode
 163++684A 41                           ld      b, c                // file-mode
 164++684B D1                           pop     de                  // 8-bytes buffer if any
 165++684C DD E3                        ex      (sp), ix            // filespec nul-terminated
 166++684E E5                           push    hl                  // Save Instruction pointer
 167++684F 3E 2A                        ld      a, "*"
 168++6851 CF                           rst     $08
 169++6852 9A                           db      $9A
 170++6853              F_Open_Exit:
 171++6853 C1                           pop     bc
 172++6854 DD E1                        pop     ix
 173++6856 ED 62                        sbc     hl, hl
 174++6858 5F                           ld      e, a
 175++6859 16 00                        ld      d, 0
 176++685B
 177++685B
 178++685B                              psh2
 178++685B D5          >                push    de
 178++685C E5          >                push    hl
 178++685D DD E9       >                jp      (ix)
 179++685F
 180++685F              //   \ CREATE FILENAME ," test.txt"   \ new Counted String
 181++685F              //   \ FILENAME 1+ PAD 1 F_OPEN
 182++685F              //   \ DROP
 183++685F              //   \ F_CLOSE
 184++685F
 185++685F
 186++685F              //  ______________________________________________________________________
 187++685F              //
 188++685F              // f_opendir    a1 a2 b -- u f
 189++685F              // open a file
 190++685F                              New_Def F_OPENDIR, "F_OPENDIR", is_code, is_normal
 190++685F             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 190++685F             >
 190++685F             >                // dummy db directives used to calculate length of namec
 190++685F 46 5F 4F 50 >                db      "F_OPENDIR"
 190++6863 45 4E 44 49 >
 190++6867 52          >
 190++6868             >len_NFA         defl    $ - temp_NFA
 190++6868             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 190++685F             >
 190++685F 89          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 190++6860 46 5F 4F 50 >                db      "F_OPENDIR"               // name string in 7-bit ascii, but
 190++6864 45 4E 44 49 >
 190++6868 52          >
 190++6869             >                org     $-1                 // alter last byte of Name just above to set
 190++6868 D2          >                db      {b $} | END_BIT     // msb as name end
 190++6869             >
 190++6869 3C 68       >                dw      last_NFA            // Link to previous definition Name
 190++686B             >F_OPENDIR:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 190++686B ~           >                dw      runcode ; ok        // for primitive definitions  actual code
 190++686B             >                else
 190++686B 6D 68       >                dw      $ + 2   ; ok        // is pointed by CFA
 190++686D             >                endif           ; ok        // for other definitions it "points" the correct handler
 190++686D             >                // Use of "; ok" to suppress "warning[fwdref]"
 190++686D             >
 190++686D             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 191++686D DD E3                        ex      (sp), ix            // filespec nul-terminated
 192++686F C5                           push    bc                  // Save Instruction pointer
 193++6870 06 10                        ld      b, $10              // file-mode
 194++6872 3E 43                        ld      a, "C"
 195++6874 CF                           rst     $08
 196++6875 A3                           db      $A3
 197++6876 18 DB                        jr      F_Open_Exit
 198++6878
 199++6878
 200++6878              //  ______________________________________________________________________
 201++6878              //
 202++6878              // f_readdir    a1 a2 b -- u f
 203++6878              // open a file
 204++6878                              New_Def F_READDIR, "F_READDIR", is_code, is_normal
 204++6878             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 204++6878             >
 204++6878             >                // dummy db directives used to calculate length of namec
 204++6878 46 5F 52 45 >                db      "F_READDIR"
 204++687C 41 44 44 49 >
 204++6880 52          >
 204++6881             >len_NFA         defl    $ - temp_NFA
 204++6881             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 204++6878             >
 204++6878 89          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 204++6879 46 5F 52 45 >                db      "F_READDIR"               // name string in 7-bit ascii, but
 204++687D 41 44 44 49 >
 204++6881 52          >
 204++6882             >                org     $-1                 // alter last byte of Name just above to set
 204++6881 D2          >                db      {b $} | END_BIT     // msb as name end
 204++6882             >
 204++6882 5F 68       >                dw      last_NFA            // Link to previous definition Name
 204++6884             >F_READDIR:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 204++6884 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
 204++6884             >                else
 204++6884 86 68       >                dw      $ + 2   ; ok        // is pointed by CFA
 204++6886             >                endif           ; ok        // for other definitions it "points" the correct handler
 204++6886             >                // Use of "; ok" to suppress "warning[fwdref]"
 204++6886             >
 204++6886             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 205++6886 E1                           pop     hl
 206++6887 7D                           ld      a, l
 207++6888 D1                           pop     de
 208++6889 DD E3                        ex      (sp), ix            // filespec nul-terminated
 209++688B C5                           push    bc                  // Save Instruction pointer
 210++688C CF                           rst     $08
 211++688D A4                           db      $A4
 212++688E 18 C3                        jr      F_Open_Exit
 213++6890
# file closed: C:\Zx\CSpect\Projects\vForth15_INDIRECT/source/next-opt0.asm
 917+ 6890
 918+ 6890
 919+ 6890              //  ______________________________________________________________________
 920+ 6890              //
 921+ 6890              // cmove    a1 a2 u --
 922+ 6890              // If u > 0, moves memory content starting at address a1 for n bytes long
 923+ 6890              // storing then starting at address addr2.
 924+ 6890              // The content of a1 is moved first. See CMOVE> also.
 925+ 6890                              New_Def CMOVE, "CMOVE", is_code, is_normal
 925+ 6890             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 925+ 6890             >
 925+ 6890             >                // dummy db directives used to calculate length of namec
 925+ 6890 43 4D 4F 56 >                db      "CMOVE"
 925+ 6894 45          >
 925+ 6895             >len_NFA         defl    $ - temp_NFA
 925+ 6895             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 925+ 6890             >
 925+ 6890 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 925+ 6891 43 4D 4F 56 >                db      "CMOVE"               // name string in 7-bit ascii, but
 925+ 6895 45          >
 925+ 6896             >                org     $-1                 // alter last byte of Name just above to set
 925+ 6895 C5          >                db      {b $} | END_BIT     // msb as name end
 925+ 6896             >
 925+ 6896 78 68       >                dw      last_NFA            // Link to previous definition Name
 925+ 6898             >CMOVE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 925+ 6898 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
 925+ 6898             >                else
 925+ 6898 9A 68       >                dw      $ + 2   ; ok        // is pointed by CFA
 925+ 689A             >                endif           ; ok        // for other definitions it "points" the correct handler
 925+ 689A             >                // Use of "; ok" to suppress "warning[fwdref]"
 925+ 689A             >
 925+ 689A             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 926+ 689A D9                           exx
 927+ 689B C1                           pop     bc                  // bc has counter
 928+ 689C D1                           pop     de                  // de now has dest
 929+ 689D E1                           pop     hl                  // hl has source, save Instruction Pointer
 930+ 689E 78                           ld      a, b
 931+ 689F B1                           or      c
 932+ 68A0 28 02                        jr      z, Cmove_NoMove
 933+ 68A2 ED B0                            ldir
 934+ 68A4              Cmove_NoMove:
 935+ 68A4 D9                           exx
 936+ 68A5                              next
 936+ 68A5 DD E9       >                jp      (ix)
 937+ 68A7
 938+ 68A7              //  ______________________________________________________________________
 939+ 68A7              //
 940+ 68A7              // cmove>    a1 a2 u --
 941+ 68A7              // If u > 0, moves memory content starting at address a1 for n bytes long
 942+ 68A7              // storing then starting at address addr2.
 943+ 68A7              // The content of a1 is moved last. See cmove.
 944+ 68A7                              New_Def CMOVE_TO, "CMOVE>", is_code, is_normal
 944+ 68A7             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 944+ 68A7             >
 944+ 68A7             >                // dummy db directives used to calculate length of namec
 944+ 68A7 43 4D 4F 56 >                db      "CMOVE>"
 944+ 68AB 45 3E       >
 944+ 68AD             >len_NFA         defl    $ - temp_NFA
 944+ 68AD             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 944+ 68A7             >
 944+ 68A7 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 944+ 68A8 43 4D 4F 56 >                db      "CMOVE>"               // name string in 7-bit ascii, but
 944+ 68AC 45 3E       >
 944+ 68AE             >                org     $-1                 // alter last byte of Name just above to set
 944+ 68AD BE          >                db      {b $} | END_BIT     // msb as name end
 944+ 68AE             >
 944+ 68AE 90 68       >                dw      last_NFA            // Link to previous definition Name
 944+ 68B0             >CMOVE_TO:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 944+ 68B0 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
 944+ 68B0             >                else
 944+ 68B0 B2 68       >                dw      $ + 2   ; ok        // is pointed by CFA
 944+ 68B2             >                endif           ; ok        // for other definitions it "points" the correct handler
 944+ 68B2             >                // Use of "; ok" to suppress "warning[fwdref]"
 944+ 68B2             >
 944+ 68B2             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 945+ 68B2 D9                           exx
 946+ 68B3 C1                           pop     bc                  // bc has counter
 947+ 68B4 D1                           pop     de                  // de has dest
 948+ 68B5 E1                           pop     hl                  // hl has source, save Instruction Pointer
 949+ 68B6 78                           ld      a, b
 950+ 68B7 B1                           or      c
 951+ 68B8 28 08                        jr      z, CmoveV_NoMove
 952+ 68BA EB                               ex      de, hl              // compute address to
 953+ 68BB 09                               add     hl, bc              // operate backward
 954+ 68BC 2B                               dec     hl
 955+ 68BD EB                               ex      de, hl
 956+ 68BE 09                               add     hl, bc
 957+ 68BF 2B                               dec     hl
 958+ 68C0 ED B8                            lddr                        // backward
 959+ 68C2              CmoveV_NoMove:
 960+ 68C2 D9                           exx
 961+ 68C3                              next
 961+ 68C3 DD E9       >                jp      (ix)
 962+ 68C5
 963+ 68C5              //  ______________________________________________________________________
 964+ 68C5              //
 965+ 68C5              // um*      u1 u2 -- ud
 966+ 68C5              // Unsigned multiplication
 967+ 68C5              // A double-integer is kept in CPU registers as DEHL then pushed on stack.
 968+ 68C5              // On the stack a double number is treated as two single numbers
 969+ 68C5              // where DE is on the top of the stack and HL is the second from top,
 970+ 68C5              // Instead, in 2VARIABLE a double number is stored as EDLH.
 971+ 68C5              // this definition could use "MUL" Z80N new op-code.
 972+ 68C5                              New_Def UM_MUL, "UM*", is_code, is_normal
 972+ 68C5             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 972+ 68C5             >
 972+ 68C5             >                // dummy db directives used to calculate length of namec
 972+ 68C5 55 4D 2A    >                db      "UM*"
 972+ 68C8             >len_NFA         defl    $ - temp_NFA
 972+ 68C8             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 972+ 68C5             >
 972+ 68C5 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 972+ 68C6 55 4D 2A    >                db      "UM*"               // name string in 7-bit ascii, but
 972+ 68C9             >                org     $-1                 // alter last byte of Name just above to set
 972+ 68C8 AA          >                db      {b $} | END_BIT     // msb as name end
 972+ 68C9             >
 972+ 68C9 A7 68       >                dw      last_NFA            // Link to previous definition Name
 972+ 68CB             >UM_MUL:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 972+ 68CB ~           >                dw      runcode ; ok        // for primitive definitions  actual code
 972+ 68CB             >                else
 972+ 68CB CD 68       >                dw      $ + 2   ; ok        // is pointed by CFA
 972+ 68CD             >                endif           ; ok        // for other definitions it "points" the correct handler
 972+ 68CD             >                // Use of "; ok" to suppress "warning[fwdref]"
 972+ 68CD             >
 972+ 68CD             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 973+ 68CD D9                           exx
 974+ 68CE D1                           pop     de                    // de has u2 operand
 975+ 68CF E1                           pop     hl                    // hl has u1 operand
 976+ 68D0 45                           ld      b, l
 977+ 68D1 4B                           ld      c, e
 978+ 68D2 5D                           ld      e, l
 979+ 68D3 6A                           ld      l, d
 980+ 68D4 E5                           push    hl
 981+ 68D5 69                           ld      l, c
 982+ 68D6 ED 30                        mul
 983+ 68D8 EB                           ex      de, hl
 984+ 68D9 ED 30                        mul
 985+ 68DB AF                           xor     a
 986+ 68DC 19                           add     hl, de
 987+ 68DD 8F                           adc     a
 988+ 68DE 59                           ld      e, c
 989+ 68DF 50                           ld      d, b
 990+ 68E0 ED 30                        mul
 991+ 68E2 47                           ld      b, a
 992+ 68E3 4C                           ld      c, h
 993+ 68E4 7A                           ld      a, d
 994+ 68E5 85                           add     l
 995+ 68E6 67                           ld      h, a
 996+ 68E7 6B                           ld      l, e
 997+ 68E8 D1                           pop     de
 998+ 68E9 ED 30                        mul
 999+ 68EB EB                           ex      de, hl
1000+ 68EC ED 4A                        adc     hl, bc
1001+ 68EE D5                           push    de
1002+ 68EF E5                           push    hl
1003+ 68F0 D9                           exx
1004+ 68F1                              next
1004+ 68F1 DD E9       >                jp      (ix)
1005+ 68F3
1006+ 68F3              //  ______________________________________________________________________
1007+ 68F3              //
1008+ 68F3              // um/mod      ud u1 -- q r
1009+ 68F3              // divides ud into u1 giving quotient q and remainder r
1010+ 68F3              // algorithm takes 16 bit at a time starting from msb
1011+ 68F3              // DE grows from lsb upward with quotient result
1012+ 68F3              // HL keeps the remainder at each stage of division
1013+ 68F3              // each loop 'lowers' the next binary digit to form the current dividend
1014+ 68F3                              New_Def UMDIVMOD, "UM/MOD", is_code, is_normal
1014+ 68F3             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1014+ 68F3             >
1014+ 68F3             >                // dummy db directives used to calculate length of namec
1014+ 68F3 55 4D 2F 4D >                db      "UM/MOD"
1014+ 68F7 4F 44       >
1014+ 68F9             >len_NFA         defl    $ - temp_NFA
1014+ 68F9             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1014+ 68F3             >
1014+ 68F3 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1014+ 68F4 55 4D 2F 4D >                db      "UM/MOD"               // name string in 7-bit ascii, but
1014+ 68F8 4F 44       >
1014+ 68FA             >                org     $-1                 // alter last byte of Name just above to set
1014+ 68F9 C4          >                db      {b $} | END_BIT     // msb as name end
1014+ 68FA             >
1014+ 68FA C5 68       >                dw      last_NFA            // Link to previous definition Name
1014+ 68FC             >UMDIVMOD:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1014+ 68FC ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1014+ 68FC             >                else
1014+ 68FC FE 68       >                dw      $ + 2   ; ok        // is pointed by CFA
1014+ 68FE             >                endif           ; ok        // for other definitions it "points" the correct handler
1014+ 68FE             >                // Use of "; ok" to suppress "warning[fwdref]"
1014+ 68FE             >
1014+ 68FE             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1015+ 68FE D9                           exx
1016+ 68FF C1                           pop     bc                      // divisor
1017+ 6900
1018+ 6900 E1                           pop     hl                      // < high part
1019+ 6901 D1                           pop     de                      // < low part and
1020+ 6902
1021+ 6902 7D                           ld      a, l                    // check without changing arguments
1022+ 6903 91                           sub     c                       // if divisor is greater than high part
1023+ 6904 7C                           ld      a, h                    // so quotient will be in range
1024+ 6905 98                           sbc     a, b
1025+ 6906 30 20                        jr      nc, Um_DivMod_OutOfRange
1026+ 6908 3E 10                            ld      a, 16
1027+ 690A              Um_DivMod_Loop:
1028+ 690A CB 23                                sla     e
1029+ 690C CB 12                                rl      d
1030+ 690E ED 6A                                adc     hl, hl
1031+ 6910 30 05                                jr      nc, Um_DivMod_Carry
1032+ 6912 A7                                       and     a
1033+ 6913 ED 42                                    sbc     hl, bc
1034+ 6915 18 07                                jr      Um_DivMod_Endif    // else
1035+ 6917              Um_DivMod_Carry:
1036+ 6917 A7                                       and     a
1037+ 6918 ED 42                                    sbc     hl, bc
1038+ 691A 30 02                                    jr      nc, Um_DivMod_Endif
1039+ 691C 09                                           add     hl, bc
1040+ 691D 1B                                           dec     de
1041+ 691E              Um_DivMod_Endif:                                   // endif
1042+ 691E 13                                   inc     de
1043+ 691F 3D                                   dec     a
1044+ 6920 20 E8                            jr      nz, Um_DivMod_Loop
1045+ 6922 EB                               ex      de, hl
1046+ 6923              Um_DivMod_Bailout:
1047+ 6923 D5                               push    de                  // de := remanider
1048+ 6924 E5                               push    hl                  // hl := quotient
1049+ 6925 D9                               exx
1050+ 6926                                  next
1050+ 6926 DD E9       >                jp      (ix)
1051+ 6928
1052+ 6928              Um_DivMod_OutOfRange:
1053+ 6928 21 FF FF                     ld      hl, -1
1054+ 692B 54                           ld      d, h
1055+ 692C 5D                           ld      e, l
1056+ 692D 18 F4                        jr      Um_DivMod_Bailout
1057+ 692F
1058+ 692F              //  ______________________________________________________________________
1059+ 692F              //
1060+ 692F              // and          n1 n2 -- n3
1061+ 692F              // bit logical AND. Returns n3 as n1 & n2
1062+ 692F                              New_Def AND_OP, "AND", is_code, is_normal
1062+ 692F             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1062+ 692F             >
1062+ 692F             >                // dummy db directives used to calculate length of namec
1062+ 692F 41 4E 44    >                db      "AND"
1062+ 6932             >len_NFA         defl    $ - temp_NFA
1062+ 6932             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1062+ 692F             >
1062+ 692F 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1062+ 6930 41 4E 44    >                db      "AND"               // name string in 7-bit ascii, but
1062+ 6933             >                org     $-1                 // alter last byte of Name just above to set
1062+ 6932 C4          >                db      {b $} | END_BIT     // msb as name end
1062+ 6933             >
1062+ 6933 F3 68       >                dw      last_NFA            // Link to previous definition Name
1062+ 6935             >AND_OP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1062+ 6935 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1062+ 6935             >                else
1062+ 6935 37 69       >                dw      $ + 2   ; ok        // is pointed by CFA
1062+ 6937             >                endif           ; ok        // for other definitions it "points" the correct handler
1062+ 6937             >                // Use of "; ok" to suppress "warning[fwdref]"
1062+ 6937             >
1062+ 6937             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1063+ 6937 D1                           pop     de
1064+ 6938 E1                           pop     hl
1065+ 6939 7B                           ld      a, e
1066+ 693A A5                           and     l
1067+ 693B 6F                           ld      l, a
1068+ 693C 7A                           ld      a, d
1069+ 693D A4                           and     h
1070+ 693E 67                           ld      h, a
1071+ 693F
1072+ 693F                              psh1
1072+ 693F E5          >                push    hl
1072+ 6940 DD E9       >                jp      (ix)
1073+ 6942
1074+ 6942              //  ______________________________________________________________________
1075+ 6942              //
1076+ 6942              // or           n1 n2 -- n3
1077+ 6942              // bit logical OR. Returns n3 as n1 | n2
1078+ 6942                              New_Def OR_OP, "OR", is_code, is_normal
1078+ 6942             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1078+ 6942             >
1078+ 6942             >                // dummy db directives used to calculate length of namec
1078+ 6942 4F 52       >                db      "OR"
1078+ 6944             >len_NFA         defl    $ - temp_NFA
1078+ 6944             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1078+ 6942             >
1078+ 6942 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1078+ 6943 4F 52       >                db      "OR"               // name string in 7-bit ascii, but
1078+ 6945             >                org     $-1                 // alter last byte of Name just above to set
1078+ 6944 D2          >                db      {b $} | END_BIT     // msb as name end
1078+ 6945             >
1078+ 6945 2F 69       >                dw      last_NFA            // Link to previous definition Name
1078+ 6947             >OR_OP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1078+ 6947 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1078+ 6947             >                else
1078+ 6947 49 69       >                dw      $ + 2   ; ok        // is pointed by CFA
1078+ 6949             >                endif           ; ok        // for other definitions it "points" the correct handler
1078+ 6949             >                // Use of "; ok" to suppress "warning[fwdref]"
1078+ 6949             >
1078+ 6949             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1079+ 6949 D1                           pop     de
1080+ 694A E1                           pop     hl
1081+ 694B 7B                           ld      a, e
1082+ 694C B5                           or      l
1083+ 694D 6F                           ld      l, a
1084+ 694E 7A                           ld      a, d
1085+ 694F B4                           or      h
1086+ 6950 67                           ld      h, a
1087+ 6951
1088+ 6951                              psh1
1088+ 6951 E5          >                push    hl
1088+ 6952 DD E9       >                jp      (ix)
1089+ 6954
1090+ 6954              //  ______________________________________________________________________
1091+ 6954              //
1092+ 6954              // xor          n1 n2 -- n3
1093+ 6954              // bit logical OR. Returns n3 as n1 ^ n2
1094+ 6954                              New_Def XOR_OP, "XOR", is_code, is_normal
1094+ 6954             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1094+ 6954             >
1094+ 6954             >                // dummy db directives used to calculate length of namec
1094+ 6954 58 4F 52    >                db      "XOR"
1094+ 6957             >len_NFA         defl    $ - temp_NFA
1094+ 6957             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1094+ 6954             >
1094+ 6954 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1094+ 6955 58 4F 52    >                db      "XOR"               // name string in 7-bit ascii, but
1094+ 6958             >                org     $-1                 // alter last byte of Name just above to set
1094+ 6957 D2          >                db      {b $} | END_BIT     // msb as name end
1094+ 6958             >
1094+ 6958 42 69       >                dw      last_NFA            // Link to previous definition Name
1094+ 695A             >XOR_OP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1094+ 695A ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1094+ 695A             >                else
1094+ 695A 5C 69       >                dw      $ + 2   ; ok        // is pointed by CFA
1094+ 695C             >                endif           ; ok        // for other definitions it "points" the correct handler
1094+ 695C             >                // Use of "; ok" to suppress "warning[fwdref]"
1094+ 695C             >
1094+ 695C             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1095+ 695C D1                           pop     de
1096+ 695D E1                           pop     hl
1097+ 695E 7B                           ld      a, e
1098+ 695F AD                           xor     l
1099+ 6960 6F                           ld      l, a
1100+ 6961 7A                           ld      a, d
1101+ 6962 AC                           xor     h
1102+ 6963 67                           ld      h, a
1103+ 6964
1104+ 6964                              psh1
1104+ 6964 E5          >                push    hl
1104+ 6965 DD E9       >                jp      (ix)
1105+ 6967
1106+ 6967              //  ______________________________________________________________________
1107+ 6967              //
1108+ 6967              // sp@      -- a
1109+ 6967              // returns on top of stack the value of SP before execution
1110+ 6967                              New_Def SPFETCH, "SP@", is_code, is_normal
1110+ 6967             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1110+ 6967             >
1110+ 6967             >                // dummy db directives used to calculate length of namec
1110+ 6967 53 50 40    >                db      "SP@"
1110+ 696A             >len_NFA         defl    $ - temp_NFA
1110+ 696A             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1110+ 6967             >
1110+ 6967 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1110+ 6968 53 50 40    >                db      "SP@"               // name string in 7-bit ascii, but
1110+ 696B             >                org     $-1                 // alter last byte of Name just above to set
1110+ 696A C0          >                db      {b $} | END_BIT     // msb as name end
1110+ 696B             >
1110+ 696B 54 69       >                dw      last_NFA            // Link to previous definition Name
1110+ 696D             >SPFETCH:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1110+ 696D ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1110+ 696D             >                else
1110+ 696D 6F 69       >                dw      $ + 2   ; ok        // is pointed by CFA
1110+ 696F             >                endif           ; ok        // for other definitions it "points" the correct handler
1110+ 696F             >                // Use of "; ok" to suppress "warning[fwdref]"
1110+ 696F             >
1110+ 696F             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1111+ 696F
1112+ 696F 21 00 00                     ld      hl, 0
1113+ 6972 39                           add     hl, sp
1114+ 6973
1115+ 6973                              psh1
1115+ 6973 E5          >                push    hl
1115+ 6974 DD E9       >                jp      (ix)
1116+ 6976
1117+ 6976              //  ______________________________________________________________________
1118+ 6976              //
1119+ 6976              // sp!      a --
1120+ 6976              // restore SP to the initial value passed
1121+ 6976              // normally it is S0, i.e. the word at offset 6 and 7 of user variabiles area.
1122+ 6976                              New_Def SPSTORE, "SP!", is_code, is_normal
1122+ 6976             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1122+ 6976             >
1122+ 6976             >                // dummy db directives used to calculate length of namec
1122+ 6976 53 50 21    >                db      "SP!"
1122+ 6979             >len_NFA         defl    $ - temp_NFA
1122+ 6979             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1122+ 6976             >
1122+ 6976 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1122+ 6977 53 50 21    >                db      "SP!"               // name string in 7-bit ascii, but
1122+ 697A             >                org     $-1                 // alter last byte of Name just above to set
1122+ 6979 A1          >                db      {b $} | END_BIT     // msb as name end
1122+ 697A             >
1122+ 697A 67 69       >                dw      last_NFA            // Link to previous definition Name
1122+ 697C             >SPSTORE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1122+ 697C ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1122+ 697C             >                else
1122+ 697C 7E 69       >                dw      $ + 2   ; ok        // is pointed by CFA
1122+ 697E             >                endif           ; ok        // for other definitions it "points" the correct handler
1122+ 697E             >                // Use of "; ok" to suppress "warning[fwdref]"
1122+ 697E             >
1122+ 697E             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1123+ 697E E1                           pop     hl
1124+ 697F F9                           ld      sp, hl
1125+ 6980
1126+ 6980                              next
1126+ 6980 DD E9       >                jp      (ix)
1127+ 6982
1128+ 6982              //  ______________________________________________________________________
1129+ 6982              //
1130+ 6982              // rp@      -- a
1131+ 6982              // returns on top of stack the value of Return-Pointer
1132+ 6982                              New_Def RPFETCH, "RP@", is_code, is_normal
1132+ 6982             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1132+ 6982             >
1132+ 6982             >                // dummy db directives used to calculate length of namec
1132+ 6982 52 50 40    >                db      "RP@"
1132+ 6985             >len_NFA         defl    $ - temp_NFA
1132+ 6985             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1132+ 6982             >
1132+ 6982 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1132+ 6983 52 50 40    >                db      "RP@"               // name string in 7-bit ascii, but
1132+ 6986             >                org     $-1                 // alter last byte of Name just above to set
1132+ 6985 C0          >                db      {b $} | END_BIT     // msb as name end
1132+ 6986             >
1132+ 6986 76 69       >                dw      last_NFA            // Link to previous definition Name
1132+ 6988             >RPFETCH:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1132+ 6988 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1132+ 6988             >                else
1132+ 6988 8A 69       >                dw      $ + 2   ; ok        // is pointed by CFA
1132+ 698A             >                endif           ; ok        // for other definitions it "points" the correct handler
1132+ 698A             >                // Use of "; ok" to suppress "warning[fwdref]"
1132+ 698A             >
1132+ 698A             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1133+ 698A
1134+ 698A                              ldhlrp
1134+ 698A 2A 96 63    >                ld      hl,(RP_Pointer)
1135+ 698D
1136+ 698D                              psh1
1136+ 698D E5          >                push    hl
1136+ 698E DD E9       >                jp      (ix)
1137+ 6990
1138+ 6990              //  ______________________________________________________________________
1139+ 6990              //
1140+ 6990              // rp!      a --
1141+ 6990              // restore RP to the initial value passed
1142+ 6990              // normally it is R0 @, i.e. the word at offset 8 of user variabiles area.
1143+ 6990                              New_Def RPSTORE, "RP!", is_code, is_normal
1143+ 6990             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1143+ 6990             >
1143+ 6990             >                // dummy db directives used to calculate length of namec
1143+ 6990 52 50 21    >                db      "RP!"
1143+ 6993             >len_NFA         defl    $ - temp_NFA
1143+ 6993             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1143+ 6990             >
1143+ 6990 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1143+ 6991 52 50 21    >                db      "RP!"               // name string in 7-bit ascii, but
1143+ 6994             >                org     $-1                 // alter last byte of Name just above to set
1143+ 6993 A1          >                db      {b $} | END_BIT     // msb as name end
1143+ 6994             >
1143+ 6994 82 69       >                dw      last_NFA            // Link to previous definition Name
1143+ 6996             >RPSTORE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1143+ 6996 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1143+ 6996             >                else
1143+ 6996 98 69       >                dw      $ + 2   ; ok        // is pointed by CFA
1143+ 6998             >                endif           ; ok        // for other definitions it "points" the correct handler
1143+ 6998             >                // Use of "; ok" to suppress "warning[fwdref]"
1143+ 6998             >
1143+ 6998             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1144+ 6998 E1                           pop     hl
1145+ 6999                              ldrphl
1145+ 6999 22 96 63    >                ld      (RP_Pointer),hl
1146+ 699C
1147+ 699C                              next
1147+ 699C DD E9       >                jp      (ix)
1148+ 699E
1149+ 699E              //  ______________________________________________________________________
1150+ 699E              //
1151+ 699E              // exit      --
1152+ 699E              // exits back to the caller word
1153+ 699E                              New_Def EXIT, "EXIT", is_code, is_normal
1153+ 699E             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1153+ 699E             >
1153+ 699E             >                // dummy db directives used to calculate length of namec
1153+ 699E 45 58 49 54 >                db      "EXIT"
1153+ 69A2             >len_NFA         defl    $ - temp_NFA
1153+ 69A2             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1153+ 699E             >
1153+ 699E 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1153+ 699F 45 58 49 54 >                db      "EXIT"               // name string in 7-bit ascii, but
1153+ 69A3             >                org     $-1                 // alter last byte of Name just above to set
1153+ 69A2 D4          >                db      {b $} | END_BIT     // msb as name end
1153+ 69A3             >
1153+ 69A3 90 69       >                dw      last_NFA            // Link to previous definition Name
1153+ 69A5             >EXIT:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1153+ 69A5 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1153+ 69A5             >                else
1153+ 69A5 A7 69       >                dw      $ + 2   ; ok        // is pointed by CFA
1153+ 69A7             >                endif           ; ok        // for other definitions it "points" the correct handler
1153+ 69A7             >                // Use of "; ok" to suppress "warning[fwdref]"
1153+ 69A7             >
1153+ 69A7             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1154+ 69A7                              ldhlrp                      // Get Return Stack Pointer
1154+ 69A7 2A 96 63    >                ld      hl,(RP_Pointer)
1155+ 69AA 4E                           ld      c, (hl)             // pop Instruction Pointer
1156+ 69AB 23                           inc     hl                  // from Return Stack
1157+ 69AC 46                           ld      b, (hl)
1158+ 69AD 23                           inc     hl
1159+ 69AE                              ldrphl                      // Set Return Stack Pointer
1159+ 69AE 22 96 63    >                ld      (RP_Pointer),hl
1160+ 69B1                              next
1160+ 69B1 DD E9       >                jp      (ix)
1161+ 69B3
1162+ 69B3              //  ______________________________________________________________________
1163+ 69B3              //
1164+ 69B3              // lastl      --
1165+ 69B3              // exits back to the caller word
1166+ 69B3              //              New_Def EXIT, "LASTL", is_code, is_normal
1167+ 69B3              //              ldhlrp                      // Get Return Stack Pointer
1168+ 69B3              //              ld      e, (hl)             // pop Instruction Pointer
1169+ 69B3              //              inc     hl                  // from Return Stack
1170+ 69B3              //              ld      d, (hl)
1171+ 69B3              //              inc     hl
1172+ 69B3              //              ld      (hl), e
1173+ 69B3              //              inc     hl
1174+ 69B3              //              ld      (hl), d
1175+ 69B3              //              next
1176+ 69B3
1177+ 69B3              //  ______________________________________________________________________
1178+ 69B3              //
1179+ 69B3              // >r      n --
1180+ 69B3              // pop from calculator-stack and push into return-stack
1181+ 69B3                              New_Def TO_R, ">R", is_code, is_normal
1181+ 69B3             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1181+ 69B3             >
1181+ 69B3             >                // dummy db directives used to calculate length of namec
1181+ 69B3 3E 52       >                db      ">R"
1181+ 69B5             >len_NFA         defl    $ - temp_NFA
1181+ 69B5             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1181+ 69B3             >
1181+ 69B3 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1181+ 69B4 3E 52       >                db      ">R"               // name string in 7-bit ascii, but
1181+ 69B6             >                org     $-1                 // alter last byte of Name just above to set
1181+ 69B5 D2          >                db      {b $} | END_BIT     // msb as name end
1181+ 69B6             >
1181+ 69B6 9E 69       >                dw      last_NFA            // Link to previous definition Name
1181+ 69B8             >TO_R:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1181+ 69B8 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1181+ 69B8             >                else
1181+ 69B8 BA 69       >                dw      $ + 2   ; ok        // is pointed by CFA
1181+ 69BA             >                endif           ; ok        // for other definitions it "points" the correct handler
1181+ 69BA             >                // Use of "; ok" to suppress "warning[fwdref]"
1181+ 69BA             >
1181+ 69BA             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1182+ 69BA D1                           pop     de
1183+ 69BB                              ldhlrp
1183+ 69BB 2A 96 63    >                ld      hl,(RP_Pointer)
1184+ 69BE 2B                           dec     hl
1185+ 69BF 72                           ld      (hl), d             // store current TOS
1186+ 69C0 2B                           dec     hl                  // to Return Stack
1187+ 69C1 73                           ld      (hl), e
1188+ 69C2                              ldrphl
1188+ 69C2 22 96 63    >                ld      (RP_Pointer),hl
1189+ 69C5
1190+ 69C5                              next
1190+ 69C5 DD E9       >                jp      (ix)
1191+ 69C7
1192+ 69C7              //  ______________________________________________________________________
1193+ 69C7              //
1194+ 69C7              // r>      -- n
1195+ 69C7              // pop from return-stack and push into calculator-stack
1196+ 69C7                              New_Def R_TO, "R>", is_code, is_normal
1196+ 69C7             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1196+ 69C7             >
1196+ 69C7             >                // dummy db directives used to calculate length of namec
1196+ 69C7 52 3E       >                db      "R>"
1196+ 69C9             >len_NFA         defl    $ - temp_NFA
1196+ 69C9             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1196+ 69C7             >
1196+ 69C7 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1196+ 69C8 52 3E       >                db      "R>"               // name string in 7-bit ascii, but
1196+ 69CA             >                org     $-1                 // alter last byte of Name just above to set
1196+ 69C9 BE          >                db      {b $} | END_BIT     // msb as name end
1196+ 69CA             >
1196+ 69CA B3 69       >                dw      last_NFA            // Link to previous definition Name
1196+ 69CC             >R_TO:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1196+ 69CC ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1196+ 69CC             >                else
1196+ 69CC CE 69       >                dw      $ + 2   ; ok        // is pointed by CFA
1196+ 69CE             >                endif           ; ok        // for other definitions it "points" the correct handler
1196+ 69CE             >                // Use of "; ok" to suppress "warning[fwdref]"
1196+ 69CE             >
1196+ 69CE             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1197+ 69CE
1198+ 69CE                              ldhlrp
1198+ 69CE 2A 96 63    >                ld      hl,(RP_Pointer)
1199+ 69D1 5E                           ld      e, (hl)             // retrieve from Return Stack
1200+ 69D2 23                           inc     hl
1201+ 69D3 56                           ld      d, (hl)
1202+ 69D4 23                           inc     hl
1203+ 69D5                              ldrphl
1203+ 69D5 22 96 63    >                ld      (RP_Pointer),hl
1204+ 69D8 D5                           push    de
1205+ 69D9                              next
1205+ 69D9 DD E9       >                jp      (ix)
1206+ 69DB
1207+ 69DB              //  ______________________________________________________________________
1208+ 69DB              //
1209+ 69DB              // r@            -- n
1210+ 69DB              // return on top of stack the value of top of return-stack
1211+ 69DB              // Since this is the same as I, we alter R's CFA to jump there
1212+ 69DB                              New_Def R_OP, "R@", I_Ptr, is_normal
1212+ 69DB             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1212+ 69DB             >
1212+ 69DB             >                // dummy db directives used to calculate length of namec
1212+ 69DB 52 40       >                db      "R@"
1212+ 69DD             >len_NFA         defl    $ - temp_NFA
1212+ 69DD             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1212+ 69DB             >
1212+ 69DB 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1212+ 69DC 52 40       >                db      "R@"               // name string in 7-bit ascii, but
1212+ 69DE             >                org     $-1                 // alter last byte of Name just above to set
1212+ 69DD C0          >                db      {b $} | END_BIT     // msb as name end
1212+ 69DE             >
1212+ 69DE C7 69       >                dw      last_NFA            // Link to previous definition Name
1212+ 69E0             >R_OP:          if I_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1212+ 69E0 92 64       >                dw      I_Ptr ; ok        // for primitive definitions  actual code
1212+ 69E2             >                else
1212+ 69E2 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
1212+ 69E2             >                endif           ; ok        // for other definitions it "points" the correct handler
1212+ 69E2             >                // Use of "; ok" to suppress "warning[fwdref]"
1212+ 69E2             >
1212+ 69E2             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1213+ 69E2
1214+ 69E2              //  ______________________________________________________________________
1215+ 69E2              //
1216+ 69E2              // r            -- n
1217+ 69E2              // return on top of stack the value of top of return-stack
1218+ 69E2              // Since this is the same as I, we alter R's CFA to jump there
1219+ 69E2              //              New_Def R_OLD, "R", I_Ptr, is_normal
1220+ 69E2
1221+ 69E2              //  ______________________________________________________________________
1222+ 69E2              //
1223+ 69E2              // 0=           n -- f
1224+ 69E2              // true (non zero) if n is zero, false (0) elsewere
1225+ 69E2                              New_Def ZEQUAL, "0=", is_code, is_normal
1225+ 69E2             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1225+ 69E2             >
1225+ 69E2             >                // dummy db directives used to calculate length of namec
1225+ 69E2 30 3D       >                db      "0="
1225+ 69E4             >len_NFA         defl    $ - temp_NFA
1225+ 69E4             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1225+ 69E2             >
1225+ 69E2 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1225+ 69E3 30 3D       >                db      "0="               // name string in 7-bit ascii, but
1225+ 69E5             >                org     $-1                 // alter last byte of Name just above to set
1225+ 69E4 BD          >                db      {b $} | END_BIT     // msb as name end
1225+ 69E5             >
1225+ 69E5 DB 69       >                dw      last_NFA            // Link to previous definition Name
1225+ 69E7             >ZEQUAL:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1225+ 69E7 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1225+ 69E7             >                else
1225+ 69E7 E9 69       >                dw      $ + 2   ; ok        // is pointed by CFA
1225+ 69E9             >                endif           ; ok        // for other definitions it "points" the correct handler
1225+ 69E9             >                // Use of "; ok" to suppress "warning[fwdref]"
1225+ 69E9             >
1225+ 69E9             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1226+ 69E9              Zero_Equal:
1227+ 69E9 E1                           pop     hl
1228+ 69EA 7D                           ld      a, l
1229+ 69EB B4                           or      h
1230+ 69EC 21 00 00                     ld      hl, FALSE_FLAG
1231+ 69EF 20 01                        jr      nz, ZEqual_Skip
1232+ 69F1 2B                               dec     hl
1233+ 69F2              ZEqual_Skip:
1234+ 69F2                              psh1
1234+ 69F2 E5          >                push    hl
1234+ 69F3 DD E9       >                jp      (ix)
1235+ 69F5
1236+ 69F5              //  ______________________________________________________________________
1237+ 69F5              //
1238+ 69F5              // not         a1 -- a2
1239+ 69F5              // increment by 2 top of stack
1240+ 69F5                              New_Def NOT_OP, "NOT", Zero_Equal, is_normal
1240+ 69F5             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1240+ 69F5             >
1240+ 69F5             >                // dummy db directives used to calculate length of namec
1240+ 69F5 4E 4F 54    >                db      "NOT"
1240+ 69F8             >len_NFA         defl    $ - temp_NFA
1240+ 69F8             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1240+ 69F5             >
1240+ 69F5 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1240+ 69F6 4E 4F 54    >                db      "NOT"               // name string in 7-bit ascii, but
1240+ 69F9             >                org     $-1                 // alter last byte of Name just above to set
1240+ 69F8 D4          >                db      {b $} | END_BIT     // msb as name end
1240+ 69F9             >
1240+ 69F9 E2 69       >                dw      last_NFA            // Link to previous definition Name
1240+ 69FB             >NOT_OP:          if Zero_Equal != 0 ; ok        // This is the start address of the direct jp(hl)
1240+ 69FB E9 69       >                dw      Zero_Equal ; ok        // for primitive definitions  actual code
1240+ 69FD             >                else
1240+ 69FD ~           >                dw      $ + 2   ; ok        // is pointed by CFA
1240+ 69FD             >                endif           ; ok        // for other definitions it "points" the correct handler
1240+ 69FD             >                // Use of "; ok" to suppress "warning[fwdref]"
1240+ 69FD             >
1240+ 69FD             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1241+ 69FD
1242+ 69FD              //  ______________________________________________________________________
1243+ 69FD              //
1244+ 69FD              // 0<           n -- f
1245+ 69FD              // true (non zero) if n is less than zero, false (0) elsewere
1246+ 69FD                              New_Def ZLESS, "0<", is_code, is_normal
1246+ 69FD             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1246+ 69FD             >
1246+ 69FD             >                // dummy db directives used to calculate length of namec
1246+ 69FD 30 3C       >                db      "0<"
1246+ 69FF             >len_NFA         defl    $ - temp_NFA
1246+ 69FF             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1246+ 69FD             >
1246+ 69FD 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1246+ 69FE 30 3C       >                db      "0<"               // name string in 7-bit ascii, but
1246+ 6A00             >                org     $-1                 // alter last byte of Name just above to set
1246+ 69FF BC          >                db      {b $} | END_BIT     // msb as name end
1246+ 6A00             >
1246+ 6A00 F5 69       >                dw      last_NFA            // Link to previous definition Name
1246+ 6A02             >ZLESS:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1246+ 6A02 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1246+ 6A02             >                else
1246+ 6A02 04 6A       >                dw      $ + 2   ; ok        // is pointed by CFA
1246+ 6A04             >                endif           ; ok        // for other definitions it "points" the correct handler
1246+ 6A04             >                // Use of "; ok" to suppress "warning[fwdref]"
1246+ 6A04             >
1246+ 6A04             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1247+ 6A04 E1                           pop     hl
1248+ 6A05 29                           add     hl, hl
1249+ 6A06 21 00 00                     ld      hl, 0
1250+ 6A09 30 01                        jr      nc, ZLess_Skip
1251+ 6A0B 2B                               dec     hl
1252+ 6A0C              ZLess_Skip:
1253+ 6A0C                              psh1
1253+ 6A0C E5          >                push    hl
1253+ 6A0D DD E9       >                jp      (ix)
1254+ 6A0F
1255+ 6A0F              //  ______________________________________________________________________
1256+ 6A0F              //
1257+ 6A0F              // 0>           n -- f
1258+ 6A0F              // true (non zero) if n is less than zero, false (0) elsewere
1259+ 6A0F                              New_Def ZGREATER, "0>", is_code, is_normal
1259+ 6A0F             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1259+ 6A0F             >
1259+ 6A0F             >                // dummy db directives used to calculate length of namec
1259+ 6A0F 30 3E       >                db      "0>"
1259+ 6A11             >len_NFA         defl    $ - temp_NFA
1259+ 6A11             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1259+ 6A0F             >
1259+ 6A0F 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1259+ 6A10 30 3E       >                db      "0>"               // name string in 7-bit ascii, but
1259+ 6A12             >                org     $-1                 // alter last byte of Name just above to set
1259+ 6A11 BE          >                db      {b $} | END_BIT     // msb as name end
1259+ 6A12             >
1259+ 6A12 FD 69       >                dw      last_NFA            // Link to previous definition Name
1259+ 6A14             >ZGREATER:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1259+ 6A14 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1259+ 6A14             >                else
1259+ 6A14 16 6A       >                dw      $ + 2   ; ok        // is pointed by CFA
1259+ 6A16             >                endif           ; ok        // for other definitions it "points" the correct handler
1259+ 6A16             >                // Use of "; ok" to suppress "warning[fwdref]"
1259+ 6A16             >
1259+ 6A16             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1260+ 6A16 E1                           pop     hl
1261+ 6A17 7D                           ld      a, l
1262+ 6A18 B4                           or      h
1263+ 6A19 29                           add     hl, hl
1264+ 6A1A 21 00 00                     ld      hl, FALSE_FLAG
1265+ 6A1D 38 04                        jr      c, ZGreater_Skip
1266+ 6A1F A7                               and     a
1267+ 6A20 28 01                            jr      z, ZGreater_Skip
1268+ 6A22 2B                                   dec     hl
1269+ 6A23              ZGreater_Skip:
1270+ 6A23                              psh1
1270+ 6A23 E5          >                push    hl
1270+ 6A24 DD E9       >                jp      (ix)
1271+ 6A26
1272+ 6A26              //  ______________________________________________________________________
1273+ 6A26              //
1274+ 6A26              // +            n1 n2 -- n3
1275+ 6A26              // returns the unsigned sum of two top values
1276+ 6A26                              New_Def PLUS, "+", is_code, is_normal
1276+ 6A26             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1276+ 6A26             >
1276+ 6A26             >                // dummy db directives used to calculate length of namec
1276+ 6A26 2B          >                db      "+"
1276+ 6A27             >len_NFA         defl    $ - temp_NFA
1276+ 6A27             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1276+ 6A26             >
1276+ 6A26 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1276+ 6A27 2B          >                db      "+"               // name string in 7-bit ascii, but
1276+ 6A28             >                org     $-1                 // alter last byte of Name just above to set
1276+ 6A27 AB          >                db      {b $} | END_BIT     // msb as name end
1276+ 6A28             >
1276+ 6A28 0F 6A       >                dw      last_NFA            // Link to previous definition Name
1276+ 6A2A             >PLUS:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1276+ 6A2A ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1276+ 6A2A             >                else
1276+ 6A2A 2C 6A       >                dw      $ + 2   ; ok        // is pointed by CFA
1276+ 6A2C             >                endif           ; ok        // for other definitions it "points" the correct handler
1276+ 6A2C             >                // Use of "; ok" to suppress "warning[fwdref]"
1276+ 6A2C             >
1276+ 6A2C             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1277+ 6A2C E1                           pop     hl
1278+ 6A2D D1                           pop     de
1279+ 6A2E 19                           add     hl, de
1280+ 6A2F
1281+ 6A2F                              psh1
1281+ 6A2F E5          >                push    hl
1281+ 6A30 DD E9       >                jp      (ix)
1282+ 6A32
1283+ 6A32
1284+ 6A32              //  ______________________________________________________________________
1285+ 6A32              //
1286+ 6A32              // d+           d1 d2 -- d3
1287+ 6A32              // returns the unsigned sum of two top double-numbers
1288+ 6A32              //      d2  d1
1289+ 6A32              //      h l h l
1290+ 6A32              // SP   LHEDLHED
1291+ 6A32              // SP  +01234567
1292+ 6A32                              New_Def DPLUS, "D+", is_code, is_normal
1292+ 6A32             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1292+ 6A32             >
1292+ 6A32             >                // dummy db directives used to calculate length of namec
1292+ 6A32 44 2B       >                db      "D+"
1292+ 6A34             >len_NFA         defl    $ - temp_NFA
1292+ 6A34             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1292+ 6A32             >
1292+ 6A32 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1292+ 6A33 44 2B       >                db      "D+"               // name string in 7-bit ascii, but
1292+ 6A35             >                org     $-1                 // alter last byte of Name just above to set
1292+ 6A34 AB          >                db      {b $} | END_BIT     // msb as name end
1292+ 6A35             >
1292+ 6A35 26 6A       >                dw      last_NFA            // Link to previous definition Name
1292+ 6A37             >DPLUS:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1292+ 6A37 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1292+ 6A37             >                else
1292+ 6A37 39 6A       >                dw      $ + 2   ; ok        // is pointed by CFA
1292+ 6A39             >                endif           ; ok        // for other definitions it "points" the correct handler
1292+ 6A39             >                // Use of "; ok" to suppress "warning[fwdref]"
1292+ 6A39             >
1292+ 6A39             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1293+ 6A39
1294+ 6A39 D9                           exx
1295+ 6A3A C1                           pop     bc                  // bc := d2.H
1296+ 6A3B D1                           pop     de                  // hl := d2.L
1297+ 6A3C E1                           pop     hl                  // d1.H
1298+ 6A3D E3                           ex      (sp), hl            // d1.L
1299+ 6A3E 19                           add     hl, de              // hl := d2.L + d1.L
1300+ 6A3F E3                           ex      (sp), hl            // d1.H
1301+ 6A40 ED 4A                        adc     hl, bc              // d1.H + d2.H
1302+ 6A42 E5                           push    hl
1303+ 6A43 D9                           exx
1304+ 6A44                              next
1304+ 6A44 DD E9       >                jp      (ix)
1305+ 6A46
1306+ 6A46              //  ______________________________________________________________________
1307+ 6A46              //
1308+ 6A46              // 1+           n1 -- n2
1309+ 6A46              // increment by 1 top of stack
1310+ 6A46                              New_Def ONE_PLUS, "1+", is_code, is_normal
1310+ 6A46             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1310+ 6A46             >
1310+ 6A46             >                // dummy db directives used to calculate length of namec
1310+ 6A46 31 2B       >                db      "1+"
1310+ 6A48             >len_NFA         defl    $ - temp_NFA
1310+ 6A48             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1310+ 6A46             >
1310+ 6A46 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1310+ 6A47 31 2B       >                db      "1+"               // name string in 7-bit ascii, but
1310+ 6A49             >                org     $-1                 // alter last byte of Name just above to set
1310+ 6A48 AB          >                db      {b $} | END_BIT     // msb as name end
1310+ 6A49             >
1310+ 6A49 32 6A       >                dw      last_NFA            // Link to previous definition Name
1310+ 6A4B             >ONE_PLUS:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1310+ 6A4B ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1310+ 6A4B             >                else
1310+ 6A4B 4D 6A       >                dw      $ + 2   ; ok        // is pointed by CFA
1310+ 6A4D             >                endif           ; ok        // for other definitions it "points" the correct handler
1310+ 6A4D             >                // Use of "; ok" to suppress "warning[fwdref]"
1310+ 6A4D             >
1310+ 6A4D             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1311+ 6A4D E1                           pop     hl
1312+ 6A4E 23                           inc     hl
1313+ 6A4F
1314+ 6A4F                              psh1
1314+ 6A4F E5          >                push    hl
1314+ 6A50 DD E9       >                jp      (ix)
1315+ 6A52
1316+ 6A52              //  ______________________________________________________________________
1317+ 6A52              //
1318+ 6A52              // 1-           n1 -- n2
1319+ 6A52              // decrement by 1 top of stack
1320+ 6A52                              New_Def ONE_SUBTRACT, "1-", is_code, is_normal
1320+ 6A52             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1320+ 6A52             >
1320+ 6A52             >                // dummy db directives used to calculate length of namec
1320+ 6A52 31 2D       >                db      "1-"
1320+ 6A54             >len_NFA         defl    $ - temp_NFA
1320+ 6A54             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1320+ 6A52             >
1320+ 6A52 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1320+ 6A53 31 2D       >                db      "1-"               // name string in 7-bit ascii, but
1320+ 6A55             >                org     $-1                 // alter last byte of Name just above to set
1320+ 6A54 AD          >                db      {b $} | END_BIT     // msb as name end
1320+ 6A55             >
1320+ 6A55 46 6A       >                dw      last_NFA            // Link to previous definition Name
1320+ 6A57             >ONE_SUBTRACT:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1320+ 6A57 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1320+ 6A57             >                else
1320+ 6A57 59 6A       >                dw      $ + 2   ; ok        // is pointed by CFA
1320+ 6A59             >                endif           ; ok        // for other definitions it "points" the correct handler
1320+ 6A59             >                // Use of "; ok" to suppress "warning[fwdref]"
1320+ 6A59             >
1320+ 6A59             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1321+ 6A59 E1                           pop     hl
1322+ 6A5A 2B                           dec     hl
1323+ 6A5B
1324+ 6A5B                              psh1
1324+ 6A5B E5          >                push    hl
1324+ 6A5C DD E9       >                jp      (ix)
1325+ 6A5E
1326+ 6A5E              //  ______________________________________________________________________
1327+ 6A5E              //
1328+ 6A5E              // 2+           n1 -- n2
1329+ 6A5E              // increment by 2 top of stack
1330+ 6A5E                              New_Def TWO_PLUS, "2+", is_code, is_normal
1330+ 6A5E             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1330+ 6A5E             >
1330+ 6A5E             >                // dummy db directives used to calculate length of namec
1330+ 6A5E 32 2B       >                db      "2+"
1330+ 6A60             >len_NFA         defl    $ - temp_NFA
1330+ 6A60             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1330+ 6A5E             >
1330+ 6A5E 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1330+ 6A5F 32 2B       >                db      "2+"               // name string in 7-bit ascii, but
1330+ 6A61             >                org     $-1                 // alter last byte of Name just above to set
1330+ 6A60 AB          >                db      {b $} | END_BIT     // msb as name end
1330+ 6A61             >
1330+ 6A61 52 6A       >                dw      last_NFA            // Link to previous definition Name
1330+ 6A63             >TWO_PLUS:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1330+ 6A63 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1330+ 6A63             >                else
1330+ 6A63 65 6A       >                dw      $ + 2   ; ok        // is pointed by CFA
1330+ 6A65             >                endif           ; ok        // for other definitions it "points" the correct handler
1330+ 6A65             >                // Use of "; ok" to suppress "warning[fwdref]"
1330+ 6A65             >
1330+ 6A65             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1331+ 6A65              Two_Plus:
1332+ 6A65 E1                           pop     hl
1333+ 6A66 23                           inc     hl
1334+ 6A67 23                           inc     hl
1335+ 6A68
1336+ 6A68                              psh1
1336+ 6A68 E5          >                push    hl
1336+ 6A69 DD E9       >                jp      (ix)
1337+ 6A6B
1338+ 6A6B              //  ______________________________________________________________________
1339+ 6A6B              //
1340+ 6A6B              // cell+        a1 -- a2
1341+ 6A6B              // increment by 2 top of stack
1342+ 6A6B                              New_Def CELL_PLUS, "CELL+", Two_Plus, is_normal
1342+ 6A6B             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1342+ 6A6B             >
1342+ 6A6B             >                // dummy db directives used to calculate length of namec
1342+ 6A6B 43 45 4C 4C >                db      "CELL+"
1342+ 6A6F 2B          >
1342+ 6A70             >len_NFA         defl    $ - temp_NFA
1342+ 6A70             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1342+ 6A6B             >
1342+ 6A6B 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1342+ 6A6C 43 45 4C 4C >                db      "CELL+"               // name string in 7-bit ascii, but
1342+ 6A70 2B          >
1342+ 6A71             >                org     $-1                 // alter last byte of Name just above to set
1342+ 6A70 AB          >                db      {b $} | END_BIT     // msb as name end
1342+ 6A71             >
1342+ 6A71 5E 6A       >                dw      last_NFA            // Link to previous definition Name
1342+ 6A73             >CELL_PLUS:          if Two_Plus != 0 ; ok        // This is the start address of the direct jp(hl)
1342+ 6A73 65 6A       >                dw      Two_Plus ; ok        // for primitive definitions  actual code
1342+ 6A75             >                else
1342+ 6A75 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
1342+ 6A75             >                endif           ; ok        // for other definitions it "points" the correct handler
1342+ 6A75             >                // Use of "; ok" to suppress "warning[fwdref]"
1342+ 6A75             >
1342+ 6A75             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1343+ 6A75
1344+ 6A75              //  ______________________________________________________________________
1345+ 6A75              //
1346+ 6A75              // align        a1 -- a2
1347+ 6A75              // align memory : not used
1348+ 6A75              //              New_Def ALIGN_ADDR, "ALIGN", is_code, is_normal
1349+ 6A75              //            next
1350+ 6A75
1351+ 6A75              //  ______________________________________________________________________
1352+ 6A75              //
1353+ 6A75              // cell-        a1 -- a2
1354+ 6A75              // decrement by 2 top of stack
1355+ 6A75                              New_Def CELL_MINUS, "CELL-", is_code, is_normal
1355+ 6A75             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1355+ 6A75             >
1355+ 6A75             >                // dummy db directives used to calculate length of namec
1355+ 6A75 43 45 4C 4C >                db      "CELL-"
1355+ 6A79 2D          >
1355+ 6A7A             >len_NFA         defl    $ - temp_NFA
1355+ 6A7A             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1355+ 6A75             >
1355+ 6A75 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1355+ 6A76 43 45 4C 4C >                db      "CELL-"               // name string in 7-bit ascii, but
1355+ 6A7A 2D          >
1355+ 6A7B             >                org     $-1                 // alter last byte of Name just above to set
1355+ 6A7A AD          >                db      {b $} | END_BIT     // msb as name end
1355+ 6A7B             >
1355+ 6A7B 6B 6A       >                dw      last_NFA            // Link to previous definition Name
1355+ 6A7D             >CELL_MINUS:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1355+ 6A7D ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1355+ 6A7D             >                else
1355+ 6A7D 7F 6A       >                dw      $ + 2   ; ok        // is pointed by CFA
1355+ 6A7F             >                endif           ; ok        // for other definitions it "points" the correct handler
1355+ 6A7F             >                // Use of "; ok" to suppress "warning[fwdref]"
1355+ 6A7F             >
1355+ 6A7F             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1356+ 6A7F              CellMinus:
1357+ 6A7F E1                           pop     hl
1358+ 6A80 2B                           dec     hl
1359+ 6A81 2B                           dec     hl
1360+ 6A82 E5                           push    hl
1361+ 6A83                              next
1361+ 6A83 DD E9       >                jp      (ix)
1362+ 6A85
1363+ 6A85              //  ______________________________________________________________________
1364+ 6A85              //
1365+ 6A85              // 2-           a1 -- a2
1366+ 6A85              // decrement by 2 top of stack
1367+ 6A85                              New_Def TWO_MINUS, "2-", CellMinus, is_normal
1367+ 6A85             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1367+ 6A85             >
1367+ 6A85             >                // dummy db directives used to calculate length of namec
1367+ 6A85 32 2D       >                db      "2-"
1367+ 6A87             >len_NFA         defl    $ - temp_NFA
1367+ 6A87             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1367+ 6A85             >
1367+ 6A85 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1367+ 6A86 32 2D       >                db      "2-"               // name string in 7-bit ascii, but
1367+ 6A88             >                org     $-1                 // alter last byte of Name just above to set
1367+ 6A87 AD          >                db      {b $} | END_BIT     // msb as name end
1367+ 6A88             >
1367+ 6A88 75 6A       >                dw      last_NFA            // Link to previous definition Name
1367+ 6A8A             >TWO_MINUS:          if CellMinus != 0 ; ok        // This is the start address of the direct jp(hl)
1367+ 6A8A 7F 6A       >                dw      CellMinus ; ok        // for primitive definitions  actual code
1367+ 6A8C             >                else
1367+ 6A8C ~           >                dw      $ + 2   ; ok        // is pointed by CFA
1367+ 6A8C             >                endif           ; ok        // for other definitions it "points" the correct handler
1367+ 6A8C             >                // Use of "; ok" to suppress "warning[fwdref]"
1367+ 6A8C             >
1367+ 6A8C             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1368+ 6A8C
1369+ 6A8C              //  ______________________________________________________________________
1370+ 6A8C              //
1371+ 6A8C              // negate        n1 -- n2
1372+ 6A8C              // change the sign of number
1373+ 6A8C                              New_Def MINUS, "NEGATE", is_code, is_normal
1373+ 6A8C             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1373+ 6A8C             >
1373+ 6A8C             >                // dummy db directives used to calculate length of namec
1373+ 6A8C 4E 45 47 41 >                db      "NEGATE"
1373+ 6A90 54 45       >
1373+ 6A92             >len_NFA         defl    $ - temp_NFA
1373+ 6A92             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1373+ 6A8C             >
1373+ 6A8C 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1373+ 6A8D 4E 45 47 41 >                db      "NEGATE"               // name string in 7-bit ascii, but
1373+ 6A91 54 45       >
1373+ 6A93             >                org     $-1                 // alter last byte of Name just above to set
1373+ 6A92 C5          >                db      {b $} | END_BIT     // msb as name end
1373+ 6A93             >
1373+ 6A93 85 6A       >                dw      last_NFA            // Link to previous definition Name
1373+ 6A95             >MINUS:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1373+ 6A95 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1373+ 6A95             >                else
1373+ 6A95 97 6A       >                dw      $ + 2   ; ok        // is pointed by CFA
1373+ 6A97             >                endif           ; ok        // for other definitions it "points" the correct handler
1373+ 6A97             >                // Use of "; ok" to suppress "warning[fwdref]"
1373+ 6A97             >
1373+ 6A97             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1374+ 6A97 21 00 00                     ld      hl, 0               // subtract from 0
1375+ 6A9A D1                           pop     de
1376+ 6A9B B7                           or      a
1377+ 6A9C ED 52                        sbc     hl, de
1378+ 6A9E
1379+ 6A9E                              psh1
1379+ 6A9E E5          >                push    hl
1379+ 6A9F DD E9       >                jp      (ix)
1380+ 6AA1
1381+ 6AA1              //  ______________________________________________________________________
1382+ 6AA1              //
1383+ 6AA1              // dnegate      d1 -- d2
1384+ 6AA1              // change the sign of a double number
1385+ 6AA1                              New_Def DMINUS, "DNEGATE", is_code, is_normal
1385+ 6AA1             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1385+ 6AA1             >
1385+ 6AA1             >                // dummy db directives used to calculate length of namec
1385+ 6AA1 44 4E 45 47 >                db      "DNEGATE"
1385+ 6AA5 41 54 45    >
1385+ 6AA8             >len_NFA         defl    $ - temp_NFA
1385+ 6AA8             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1385+ 6AA1             >
1385+ 6AA1 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1385+ 6AA2 44 4E 45 47 >                db      "DNEGATE"               // name string in 7-bit ascii, but
1385+ 6AA6 41 54 45    >
1385+ 6AA9             >                org     $-1                 // alter last byte of Name just above to set
1385+ 6AA8 C5          >                db      {b $} | END_BIT     // msb as name end
1385+ 6AA9             >
1385+ 6AA9 8C 6A       >                dw      last_NFA            // Link to previous definition Name
1385+ 6AAB             >DMINUS:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1385+ 6AAB ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1385+ 6AAB             >                else
1385+ 6AAB AD 6A       >                dw      $ + 2   ; ok        // is pointed by CFA
1385+ 6AAD             >                endif           ; ok        // for other definitions it "points" the correct handler
1385+ 6AAD             >                // Use of "; ok" to suppress "warning[fwdref]"
1385+ 6AAD             >
1385+ 6AAD             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1386+ 6AAD D9                           exx
1387+ 6AAE C1                           pop     bc                  // d1.H
1388+ 6AAF D1                           pop     de                  // d1.L
1389+ 6AB0 AF                           xor     a
1390+ 6AB1 67                           ld      h, a
1391+ 6AB2 6F                           ld      l, a
1392+ 6AB3 ED 52                        sbc     hl, de              // subtact from zero
1393+ 6AB5 E5                           push    hl                  // > d2-L
1394+ 6AB6 67                           ld      h, a
1395+ 6AB7 6F                           ld      l, a
1396+ 6AB8 ED 42                        sbc     hl, bc              // subtract from zero with carry
1397+ 6ABA                                                          // > d2-H
1398+ 6ABA E5                           push    hl
1399+ 6ABB D9                           exx
1400+ 6ABC                              next
1400+ 6ABC DD E9       >                jp      (ix)
1401+ 6ABE
1402+ 6ABE              //  ______________________________________________________________________
1403+ 6ABE              //
1404+ 6ABE              // over         n1 n2 -- n1 n2 n1
1405+ 6ABE              // copy the second value of stack and put it on top.
1406+ 6ABE                              New_Def OVER, "OVER", is_code, is_normal
1406+ 6ABE             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1406+ 6ABE             >
1406+ 6ABE             >                // dummy db directives used to calculate length of namec
1406+ 6ABE 4F 56 45 52 >                db      "OVER"
1406+ 6AC2             >len_NFA         defl    $ - temp_NFA
1406+ 6AC2             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1406+ 6ABE             >
1406+ 6ABE 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1406+ 6ABF 4F 56 45 52 >                db      "OVER"               // name string in 7-bit ascii, but
1406+ 6AC3             >                org     $-1                 // alter last byte of Name just above to set
1406+ 6AC2 D2          >                db      {b $} | END_BIT     // msb as name end
1406+ 6AC3             >
1406+ 6AC3 A1 6A       >                dw      last_NFA            // Link to previous definition Name
1406+ 6AC5             >OVER:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1406+ 6AC5 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1406+ 6AC5             >                else
1406+ 6AC5 C7 6A       >                dw      $ + 2   ; ok        // is pointed by CFA
1406+ 6AC7             >                endif           ; ok        // for other definitions it "points" the correct handler
1406+ 6AC7             >                // Use of "; ok" to suppress "warning[fwdref]"
1406+ 6AC7             >
1406+ 6AC7             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1407+ 6AC7 D1                           pop     de                  //   n2
1408+ 6AC8 E1                           pop     hl                  // < n1
1409+ 6AC9 E5                           push    hl                  // > n1
1410+ 6ACA D5                           push    de                  // > n2
1411+ 6ACB E5                           push    hl                  // > n1
1412+ 6ACC                              next
1412+ 6ACC DD E9       >                jp      (ix)
1413+ 6ACE
1414+ 6ACE              //  ______________________________________________________________________
1415+ 6ACE              //
1416+ 6ACE              // drop         n1 --
1417+ 6ACE              // drops the top of stack
1418+ 6ACE                              New_Def DROP, "DROP", is_code, is_normal
1418+ 6ACE             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1418+ 6ACE             >
1418+ 6ACE             >                // dummy db directives used to calculate length of namec
1418+ 6ACE 44 52 4F 50 >                db      "DROP"
1418+ 6AD2             >len_NFA         defl    $ - temp_NFA
1418+ 6AD2             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1418+ 6ACE             >
1418+ 6ACE 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1418+ 6ACF 44 52 4F 50 >                db      "DROP"               // name string in 7-bit ascii, but
1418+ 6AD3             >                org     $-1                 // alter last byte of Name just above to set
1418+ 6AD2 D0          >                db      {b $} | END_BIT     // msb as name end
1418+ 6AD3             >
1418+ 6AD3 BE 6A       >                dw      last_NFA            // Link to previous definition Name
1418+ 6AD5             >DROP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1418+ 6AD5 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1418+ 6AD5             >                else
1418+ 6AD5 D7 6A       >                dw      $ + 2   ; ok        // is pointed by CFA
1418+ 6AD7             >                endif           ; ok        // for other definitions it "points" the correct handler
1418+ 6AD7             >                // Use of "; ok" to suppress "warning[fwdref]"
1418+ 6AD7             >
1418+ 6AD7             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1419+ 6AD7 E1                           pop     hl                  // < n1 and discard previous TOS
1420+ 6AD8                              next
1420+ 6AD8 DD E9       >                jp      (ix)
1421+ 6ADA
1422+ 6ADA              //  ______________________________________________________________________
1423+ 6ADA              //
1424+ 6ADA              // nip          n1 n2 -- n2
1425+ 6ADA              // drops the second elemento on the stack
1426+ 6ADA                              New_Def NIP, "NIP", is_code, is_normal
1426+ 6ADA             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1426+ 6ADA             >
1426+ 6ADA             >                // dummy db directives used to calculate length of namec
1426+ 6ADA 4E 49 50    >                db      "NIP"
1426+ 6ADD             >len_NFA         defl    $ - temp_NFA
1426+ 6ADD             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1426+ 6ADA             >
1426+ 6ADA 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1426+ 6ADB 4E 49 50    >                db      "NIP"               // name string in 7-bit ascii, but
1426+ 6ADE             >                org     $-1                 // alter last byte of Name just above to set
1426+ 6ADD D0          >                db      {b $} | END_BIT     // msb as name end
1426+ 6ADE             >
1426+ 6ADE CE 6A       >                dw      last_NFA            // Link to previous definition Name
1426+ 6AE0             >NIP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1426+ 6AE0 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1426+ 6AE0             >                else
1426+ 6AE0 E2 6A       >                dw      $ + 2   ; ok        // is pointed by CFA
1426+ 6AE2             >                endif           ; ok        // for other definitions it "points" the correct handler
1426+ 6AE2             >                // Use of "; ok" to suppress "warning[fwdref]"
1426+ 6AE2             >
1426+ 6AE2             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1427+ 6AE2
1428+ 6AE2 E1                           pop     hl                  // < n1 discarded
1429+ 6AE3 E3                           ex      (sp), hl
1430+ 6AE4                              next
1430+ 6AE4 DD E9       >                jp      (ix)
1431+ 6AE6
1432+ 6AE6              //  ______________________________________________________________________
1433+ 6AE6              //
1434+ 6AE6              // tuck         n1 n2 -- n2 n1 n2
1435+ 6AE6              // copy the top element after the second.
1436+ 6AE6                              New_Def TUCK, "TUCK", is_code, is_normal
1436+ 6AE6             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1436+ 6AE6             >
1436+ 6AE6             >                // dummy db directives used to calculate length of namec
1436+ 6AE6 54 55 43 4B >                db      "TUCK"
1436+ 6AEA             >len_NFA         defl    $ - temp_NFA
1436+ 6AEA             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1436+ 6AE6             >
1436+ 6AE6 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1436+ 6AE7 54 55 43 4B >                db      "TUCK"               // name string in 7-bit ascii, but
1436+ 6AEB             >                org     $-1                 // alter last byte of Name just above to set
1436+ 6AEA CB          >                db      {b $} | END_BIT     // msb as name end
1436+ 6AEB             >
1436+ 6AEB DA 6A       >                dw      last_NFA            // Link to previous definition Name
1436+ 6AED             >TUCK:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1436+ 6AED ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1436+ 6AED             >                else
1436+ 6AED EF 6A       >                dw      $ + 2   ; ok        // is pointed by CFA
1436+ 6AEF             >                endif           ; ok        // for other definitions it "points" the correct handler
1436+ 6AEF             >                // Use of "; ok" to suppress "warning[fwdref]"
1436+ 6AEF             >
1436+ 6AEF             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1437+ 6AEF E1                           pop     hl
1438+ 6AF0 D1                           pop     de                  // < n1
1439+ 6AF1 E5                           push    hl                  // > n2  and TOS
1440+ 6AF2 D5                           push    de                  // > n1
1441+ 6AF3 E5                           push    hl
1442+ 6AF4                              next
1442+ 6AF4 DD E9       >                jp      (ix)
1443+ 6AF6
1444+ 6AF6              //  ______________________________________________________________________
1445+ 6AF6              //
1446+ 6AF6              // swap         n1 n2 -- n2 n1
1447+ 6AF6              // swaps the two values on top of stack
1448+ 6AF6                              New_Def SWAP, "SWAP", is_code, is_normal
1448+ 6AF6             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1448+ 6AF6             >
1448+ 6AF6             >                // dummy db directives used to calculate length of namec
1448+ 6AF6 53 57 41 50 >                db      "SWAP"
1448+ 6AFA             >len_NFA         defl    $ - temp_NFA
1448+ 6AFA             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1448+ 6AF6             >
1448+ 6AF6 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1448+ 6AF7 53 57 41 50 >                db      "SWAP"               // name string in 7-bit ascii, but
1448+ 6AFB             >                org     $-1                 // alter last byte of Name just above to set
1448+ 6AFA D0          >                db      {b $} | END_BIT     // msb as name end
1448+ 6AFB             >
1448+ 6AFB E6 6A       >                dw      last_NFA            // Link to previous definition Name
1448+ 6AFD             >SWAP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1448+ 6AFD ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1448+ 6AFD             >                else
1448+ 6AFD FF 6A       >                dw      $ + 2   ; ok        // is pointed by CFA
1448+ 6AFF             >                endif           ; ok        // for other definitions it "points" the correct handler
1448+ 6AFF             >                // Use of "; ok" to suppress "warning[fwdref]"
1448+ 6AFF             >
1448+ 6AFF             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1449+ 6AFF E1                           pop     hl                  // < n1
1450+ 6B00 E3                           ex      (sp),hl             // > n2
1451+ 6B01 E5                           push    hl                  // copy n1 to TOS
1452+ 6B02                              next
1452+ 6B02 DD E9       >                jp      (ix)
1453+ 6B04
1454+ 6B04              //  ______________________________________________________________________
1455+ 6B04              //
1456+ 6B04              // dup         n -- n n
1457+ 6B04              // duplicates the top value of stack
1458+ 6B04                              New_Def DUP, "DUP", is_code, is_normal
1458+ 6B04             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1458+ 6B04             >
1458+ 6B04             >                // dummy db directives used to calculate length of namec
1458+ 6B04 44 55 50    >                db      "DUP"
1458+ 6B07             >len_NFA         defl    $ - temp_NFA
1458+ 6B07             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1458+ 6B04             >
1458+ 6B04 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1458+ 6B05 44 55 50    >                db      "DUP"               // name string in 7-bit ascii, but
1458+ 6B08             >                org     $-1                 // alter last byte of Name just above to set
1458+ 6B07 D0          >                db      {b $} | END_BIT     // msb as name end
1458+ 6B08             >
1458+ 6B08 F6 6A       >                dw      last_NFA            // Link to previous definition Name
1458+ 6B0A             >DUP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1458+ 6B0A ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1458+ 6B0A             >                else
1458+ 6B0A 0C 6B       >                dw      $ + 2   ; ok        // is pointed by CFA
1458+ 6B0C             >                endif           ; ok        // for other definitions it "points" the correct handler
1458+ 6B0C             >                // Use of "; ok" to suppress "warning[fwdref]"
1458+ 6B0C             >
1458+ 6B0C             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1459+ 6B0C E1                           pop     hl
1460+ 6B0D E5                           push    hl                  // > n duplicate TOS
1461+ 6B0E E5                           push    hl
1462+ 6B0F                              next
1462+ 6B0F DD E9       >                jp      (ix)
1463+ 6B11
1464+ 6B11              //  ______________________________________________________________________
1465+ 6B11              //
1466+ 6B11              // rot         n1 n2 n3 -- n2 n3 n1
1467+ 6B11              // Rotates the 3 top values of stack by picking the 3rd in access-order
1468+ 6B11              // and putting it on top. The other two are shifted down one place.
1469+ 6B11                              New_Def ROT, "ROT", is_code, is_normal
1469+ 6B11             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1469+ 6B11             >
1469+ 6B11             >                // dummy db directives used to calculate length of namec
1469+ 6B11 52 4F 54    >                db      "ROT"
1469+ 6B14             >len_NFA         defl    $ - temp_NFA
1469+ 6B14             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1469+ 6B11             >
1469+ 6B11 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1469+ 6B12 52 4F 54    >                db      "ROT"               // name string in 7-bit ascii, but
1469+ 6B15             >                org     $-1                 // alter last byte of Name just above to set
1469+ 6B14 D4          >                db      {b $} | END_BIT     // msb as name end
1469+ 6B15             >
1469+ 6B15 04 6B       >                dw      last_NFA            // Link to previous definition Name
1469+ 6B17             >ROT:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1469+ 6B17 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1469+ 6B17             >                else
1469+ 6B17 19 6B       >                dw      $ + 2   ; ok        // is pointed by CFA
1469+ 6B19             >                endif           ; ok        // for other definitions it "points" the correct handler
1469+ 6B19             >                // Use of "; ok" to suppress "warning[fwdref]"
1469+ 6B19             >
1469+ 6B19             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1470+ 6B19 D1                           pop     de                  // < n3
1471+ 6B1A E1                           pop     hl                  // < n2
1472+ 6B1B E3                           ex      (sp),hl             // > n2 < n1
1473+ 6B1C D5                           push    de                  // > n3
1474+ 6B1D E5                           push    hl                  // copy n1 to TOS
1475+ 6B1E                              next
1475+ 6B1E DD E9       >                jp      (ix)
1476+ 6B20
1477+ 6B20              //  ______________________________________________________________________
1478+ 6B20              //
1479+ 6B20              // -rot         n1 n2 n3 -- n3 n1 n2
1480+ 6B20              // Rotates the 3 top values of stack by picking the 1st in access-order
1481+ 6B20              // and putting back to 3rd place. The other two are shifted down one place.
1482+ 6B20                              New_Def DASH_ROT, "-ROT", is_code, is_normal
1482+ 6B20             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1482+ 6B20             >
1482+ 6B20             >                // dummy db directives used to calculate length of namec
1482+ 6B20 2D 52 4F 54 >                db      "-ROT"
1482+ 6B24             >len_NFA         defl    $ - temp_NFA
1482+ 6B24             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1482+ 6B20             >
1482+ 6B20 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1482+ 6B21 2D 52 4F 54 >                db      "-ROT"               // name string in 7-bit ascii, but
1482+ 6B25             >                org     $-1                 // alter last byte of Name just above to set
1482+ 6B24 D4          >                db      {b $} | END_BIT     // msb as name end
1482+ 6B25             >
1482+ 6B25 11 6B       >                dw      last_NFA            // Link to previous definition Name
1482+ 6B27             >DASH_ROT:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1482+ 6B27 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1482+ 6B27             >                else
1482+ 6B27 29 6B       >                dw      $ + 2   ; ok        // is pointed by CFA
1482+ 6B29             >                endif           ; ok        // for other definitions it "points" the correct handler
1482+ 6B29             >                // Use of "; ok" to suppress "warning[fwdref]"
1482+ 6B29             >
1482+ 6B29             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1483+ 6B29 E1                           pop     hl                  // < n3
1484+ 6B2A D1                           pop     de                  // < n2
1485+ 6B2B E3                           ex      (sp),hl             // > n3 < n1
1486+ 6B2C E5                           push    hl                  // > n1
1487+ 6B2D D5                           push    de                  // copy n3 to TOS
1488+ 6B2E                              next
1488+ 6B2E DD E9       >                jp      (ix)
1489+ 6B30
1490+ 6B30              //  ______________________________________________________________________
1491+ 6B30              //
1492+ 6B30              // pick        n1 -- nx
1493+ 6B30              // picks the nth element from TOS
1494+ 6B30                              New_Def PICK, "PICK", is_code, is_normal
1494+ 6B30             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1494+ 6B30             >
1494+ 6B30             >                // dummy db directives used to calculate length of namec
1494+ 6B30 50 49 43 4B >                db      "PICK"
1494+ 6B34             >len_NFA         defl    $ - temp_NFA
1494+ 6B34             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1494+ 6B30             >
1494+ 6B30 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1494+ 6B31 50 49 43 4B >                db      "PICK"               // name string in 7-bit ascii, but
1494+ 6B35             >                org     $-1                 // alter last byte of Name just above to set
1494+ 6B34 CB          >                db      {b $} | END_BIT     // msb as name end
1494+ 6B35             >
1494+ 6B35 20 6B       >                dw      last_NFA            // Link to previous definition Name
1494+ 6B37             >PICK:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1494+ 6B37 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1494+ 6B37             >                else
1494+ 6B37 39 6B       >                dw      $ + 2   ; ok        // is pointed by CFA
1494+ 6B39             >                endif           ; ok        // for other definitions it "points" the correct handler
1494+ 6B39             >                // Use of "; ok" to suppress "warning[fwdref]"
1494+ 6B39             >
1494+ 6B39             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1495+ 6B39 E1                           pop     hl                  // take TOS as index
1496+ 6B3A 29                           add     hl, hl              // as cells
1497+ 6B3B 39                           add     hl, sp              // from Stack Pointer
1498+ 6B3C 7E                           ld      a, (hl)             // replace TOS
1499+ 6B3D 23                           inc     hl
1500+ 6B3E 66                           ld      h, (hl)
1501+ 6B3F 6F                           ld      l, a
1502+ 6B40
1503+ 6B40                              psh1
1503+ 6B40 E5          >                push    hl
1503+ 6B41 DD E9       >                jp      (ix)
1504+ 6B43
1505+ 6B43
1506+ 6B43              //  ______________________________________________________________________
1507+ 6B43              //
1508+ 6B43              // roll        n1 n2 n3 ... n -- n2 n3 ... n1
1509+ 6B43              // picks the nth element from TOS
1510+ 6B43              //              New_Def ROLL, "ROLL", is_code, is_normal
1511+ 6B43              //              exx                     // we need all registers free
1512+ 6B43              //              pop     hl              // number of cells to roll
1513+ 6B43              //              ld      a, h
1514+ 6B43              //              or       l
1515+ 6B43              //              jr      z, Roll_Zero
1516+ 6B43              //                  add     hl, hl              // number of bytes to move
1517+ 6B43              //                  ld      b, h
1518+ 6B43              //                  ld      c, l
1519+ 6B43              //                  add     hl, sp          // address of n1
1520+ 6B43              //                  ld      a, (hl)         // take n1 into a and a,
1521+ 6B43              //                  inc     hl
1522+ 6B43              //                  ex      af, af'
1523+ 6B43              //                  ld      a, (hl)         // take n1 into a and a,
1524+ 6B43              //                  ld      d, h
1525+ 6B43              //                  ld      e, l
1526+ 6B43              //                  dec     hl
1527+ 6B43              //                  dec     hl
1528+ 6B43              //                  lddr
1529+ 6B43              //                  ex      de, hl
1530+ 6B43              //                  ld      (hl), a
1531+ 6B43              //                  dec     hl
1532+ 6B43              //                  ex      af, af'
1533+ 6B43              //                  ld      (hl), a
1534+ 6B43              //Roll_Zero:
1535+ 6B43              //              exx
1536+ 6B43              //              next
1537+ 6B43
1538+ 6B43
1539+ 6B43              //  ______________________________________________________________________
1540+ 6B43              //
1541+ 6B43              // 2over        d1 d2 -- d1 d2 d1
1542+ 6B43              //              n1 n2 n3 n4 -- n1 n2 n3 n4 n1 n2
1543+ 6B43              // copy the second double of stack and put on top.
1544+ 6B43              //              New_Def TWO_OVER, "2OVER", is_code, is_normal
1545+ 6B43              //
1546+ 6B43              //              ld      hl, 7
1547+ 6B43              //              add     hl, sp
1548+ 6B43              //              ld      d, (hl)
1549+ 6B43              //              dec     hl
1550+ 6B43              //              ld      e, (hl)             // d1-L
1551+ 6B43              //              push    de
1552+ 6B43              //              dec     hl
1553+ 6B43              //              ld      d, (hl)
1554+ 6B43              //              dec     hl
1555+ 6B43              //              ld      e, (hl)             // d1-H
1556+ 6B43              //              push    de
1557+ 6B43              //              next
1558+ 6B43
1559+ 6B43              //  ______________________________________________________________________
1560+ 6B43              //
1561+ 6B43              // 2drop        d --
1562+ 6B43              //              n1 n2 --
1563+ 6B43              // drops the top double from stack
1564+ 6B43                              New_Def TWO_DROP, "2DROP", is_code, is_normal
1564+ 6B43             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1564+ 6B43             >
1564+ 6B43             >                // dummy db directives used to calculate length of namec
1564+ 6B43 32 44 52 4F >                db      "2DROP"
1564+ 6B47 50          >
1564+ 6B48             >len_NFA         defl    $ - temp_NFA
1564+ 6B48             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1564+ 6B43             >
1564+ 6B43 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1564+ 6B44 32 44 52 4F >                db      "2DROP"               // name string in 7-bit ascii, but
1564+ 6B48 50          >
1564+ 6B49             >                org     $-1                 // alter last byte of Name just above to set
1564+ 6B48 D0          >                db      {b $} | END_BIT     // msb as name end
1564+ 6B49             >
1564+ 6B49 30 6B       >                dw      last_NFA            // Link to previous definition Name
1564+ 6B4B             >TWO_DROP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1564+ 6B4B ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1564+ 6B4B             >                else
1564+ 6B4B 4D 6B       >                dw      $ + 2   ; ok        // is pointed by CFA
1564+ 6B4D             >                endif           ; ok        // for other definitions it "points" the correct handler
1564+ 6B4D             >                // Use of "; ok" to suppress "warning[fwdref]"
1564+ 6B4D             >
1564+ 6B4D             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1565+ 6B4D E1                           pop     hl
1566+ 6B4E E1                           pop     hl
1567+ 6B4F                              next
1567+ 6B4F DD E9       >                jp      (ix)
1568+ 6B51
1569+ 6B51              //  ______________________________________________________________________
1570+ 6B51              //
1571+ 6B51              // 2nip         d1 d2 -- d2
1572+ 6B51              //              n1 n2 n3 n4 -- n3 n4
1573+ 6B51              // drops the second double on the stack
1574+ 6B51              //              New_Def TWO_NIP, 4, "2nip"
1575+ 6B51              //              ...
1576+ 6B51
1577+ 6B51              //  ______________________________________________________________________
1578+ 6B51              //
1579+ 6B51              // 2tuck         d1 d2 -- d2 d1 d2
1580+ 6B51              // copy the top element after the second.
1581+ 6B51              //              New_Def TWO_TUCK, 5, "2tuck"
1582+ 6B51              //              ...
1583+ 6B51
1584+ 6B51              //  ______________________________________________________________________
1585+ 6B51              //
1586+ 6B51              // 2swap         d1 d2 -- d2 d1
1587+ 6B51              //               n1 n2 n3 n4 -- n3 n4 n1 n2
1588+ 6B51              // swaps the two doubles on top of stack
1589+ 6B51                              New_Def TWO_SWAP, "2SWAP", is_code, is_normal
1589+ 6B51             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1589+ 6B51             >
1589+ 6B51             >                // dummy db directives used to calculate length of namec
1589+ 6B51 32 53 57 41 >                db      "2SWAP"
1589+ 6B55 50          >
1589+ 6B56             >len_NFA         defl    $ - temp_NFA
1589+ 6B56             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1589+ 6B51             >
1589+ 6B51 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1589+ 6B52 32 53 57 41 >                db      "2SWAP"               // name string in 7-bit ascii, but
1589+ 6B56 50          >
1589+ 6B57             >                org     $-1                 // alter last byte of Name just above to set
1589+ 6B56 D0          >                db      {b $} | END_BIT     // msb as name end
1589+ 6B57             >
1589+ 6B57 43 6B       >                dw      last_NFA            // Link to previous definition Name
1589+ 6B59             >TWO_SWAP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1589+ 6B59 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1589+ 6B59             >                else
1589+ 6B59 5B 6B       >                dw      $ + 2   ; ok        // is pointed by CFA
1589+ 6B5B             >                endif           ; ok        // for other definitions it "points" the correct handler
1589+ 6B5B             >                // Use of "; ok" to suppress "warning[fwdref]"
1589+ 6B5B             >
1589+ 6B5B             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1590+ 6B5B F1                           pop     af                  //   d2-H
1591+ 6B5C E1                           pop     hl                  // < d2-L
1592+ 6B5D D1                           pop     de                  // < d1-H
1593+ 6B5E E3                           ex      (sp), hl            // < d1-L > d2-L
1594+ 6B5F F5                           push    af                  // > d2-H
1595+ 6B60 E5                           push    hl                  // > d1-L
1596+ 6B61 D5                           push    de
1597+ 6B62
1598+ 6B62                              next
1598+ 6B62 DD E9       >                jp      (ix)
1599+ 6B64
1600+ 6B64              //  ______________________________________________________________________
1601+ 6B64              //
1602+ 6B64              // 2dup         d -- d d
1603+ 6B64              //              n1 n2 -- n1 n2 n1 n2
1604+ 6B64              // duplicates the top double of stack
1605+ 6B64                              New_Def TWO_DUP, "2DUP", is_code, is_normal
1605+ 6B64             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1605+ 6B64             >
1605+ 6B64             >                // dummy db directives used to calculate length of namec
1605+ 6B64 32 44 55 50 >                db      "2DUP"
1605+ 6B68             >len_NFA         defl    $ - temp_NFA
1605+ 6B68             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1605+ 6B64             >
1605+ 6B64 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1605+ 6B65 32 44 55 50 >                db      "2DUP"               // name string in 7-bit ascii, but
1605+ 6B69             >                org     $-1                 // alter last byte of Name just above to set
1605+ 6B68 D0          >                db      {b $} | END_BIT     // msb as name end
1605+ 6B69             >
1605+ 6B69 51 6B       >                dw      last_NFA            // Link to previous definition Name
1605+ 6B6B             >TWO_DUP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1605+ 6B6B ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1605+ 6B6B             >                else
1605+ 6B6B 6D 6B       >                dw      $ + 2   ; ok        // is pointed by CFA
1605+ 6B6D             >                endif           ; ok        // for other definitions it "points" the correct handler
1605+ 6B6D             >                // Use of "; ok" to suppress "warning[fwdref]"
1605+ 6B6D             >
1605+ 6B6D             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1606+ 6B6D E1                           pop     hl                  // < d-H
1607+ 6B6E D1                           pop     de                  // < d-L
1608+ 6B6F D5                           push    de                  // < d-L
1609+ 6B70 E5                           push    hl                  // > d-H
1610+ 6B71 D5                           push    de                  // > d-L
1611+ 6B72 E5                           push    hl                  // > d-H
1612+ 6B73                              next
1612+ 6B73 DD E9       >                jp      (ix)
1613+ 6B75
1614+ 6B75              //  ______________________________________________________________________
1615+ 6B75              //
1616+ 6B75              // 2rot         d1 d2 d3 -- d2 d3 d1
1617+ 6B75              //              n1 n2 n3 n4 n5 n6 -- n3 n4 n5 n6 n1 n2
1618+ 6B75              // Rotates the 3 top doubles of stack by picking the 3rd in access-order
1619+ 6B75              // and putting it on top. The other two are shifted down one place.
1620+ 6B75              //              New_Def TWO?ROT, 4, "2rot"
1621+ 6B75              //              ...
1622+ 6B75              //              New_Def TWO_ROT, "2ROT", is_code, is_normal
1623+ 6B75              //
1624+ 6B75              //      d3  |d2  |d1  |
1625+ 6B75              //      h l |h l |h l |
1626+ 6B75              // SP   LHED|LHED|LHED|
1627+ 6B75              // SP  +0123|4567|89ab|
1628+ 6B75              //              ld      hl, $000B
1629+ 6B75              //              add     hl, sp
1630+ 6B75              //              ld      d, (hl)
1631+ 6B75              //              dec     hl
1632+ 6B75              //              ld      e, (hl)
1633+ 6B75              //              dec     hl
1634+ 6B75              //              push    de
1635+ 6B75              //              ld      d, (hl)
1636+ 6B75              //              dec     hl
1637+ 6B75              //              ld      e, (hl)
1638+ 6B75              //              dec     hl
1639+ 6B75              //              push    de
1640+ 6B75
1641+ 6B75              //      d1  |d3  |d2  |d1  |
1642+ 6B75              //      h l |h l |h l |h l |
1643+ 6B75              // SP   LHED|LHED|LHED|LHED|
1644+ 6B75              // SP       +0123|4567|89ab|
1645+ 6B75
1646+ 6B75              //              ld      d, h
1647+ 6B75              //              ld      e, l
1648+ 6B75              //              inc     de
1649+ 6B75              //              inc     de
1650+ 6B75              //              inc     de
1651+ 6B75              //              inc     de
1652+ 6B75              //              push    bc
1653+ 6B75              //              ld      bc, $000C
1654+ 6B75              //              lddr
1655+ 6B75              //              pop     bc
1656+ 6B75              //              pop     de
1657+ 6B75              //              pop     de
1658+ 6B75              //
1659+ 6B75              //              next
1660+ 6B75
1661+ 6B75
1662+ 6B75              //  ______________________________________________________________________
1663+ 6B75              //
1664+ 6B75              // +!           n a --
1665+ 6B75              // Sums to the content of address a the number n.
1666+ 6B75              // It is the same of  a @ n + a !
1667+ 6B75                              New_Def PLUSSTORE, "+!", is_code, is_normal
1667+ 6B75             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1667+ 6B75             >
1667+ 6B75             >                // dummy db directives used to calculate length of namec
1667+ 6B75 2B 21       >                db      "+!"
1667+ 6B77             >len_NFA         defl    $ - temp_NFA
1667+ 6B77             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1667+ 6B75             >
1667+ 6B75 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1667+ 6B76 2B 21       >                db      "+!"               // name string in 7-bit ascii, but
1667+ 6B78             >                org     $-1                 // alter last byte of Name just above to set
1667+ 6B77 A1          >                db      {b $} | END_BIT     // msb as name end
1667+ 6B78             >
1667+ 6B78 64 6B       >                dw      last_NFA            // Link to previous definition Name
1667+ 6B7A             >PLUSSTORE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1667+ 6B7A ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1667+ 6B7A             >                else
1667+ 6B7A 7C 6B       >                dw      $ + 2   ; ok        // is pointed by CFA
1667+ 6B7C             >                endif           ; ok        // for other definitions it "points" the correct handler
1667+ 6B7C             >                // Use of "; ok" to suppress "warning[fwdref]"
1667+ 6B7C             >
1667+ 6B7C             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1668+ 6B7C E1                           pop     hl                  // hl is the address
1669+ 6B7D D1                           pop     de                  // de is the number
1670+ 6B7E 7E                           ld      a, (hl)
1671+ 6B7F 83                           add     e
1672+ 6B80 77                           ld      (hl), a
1673+ 6B81 23                           inc     hl
1674+ 6B82 7E                           ld      a, (hl)
1675+ 6B83 8A                           adc     d
1676+ 6B84 77                           ld      (hl), a
1677+ 6B85
1678+ 6B85                              next
1678+ 6B85 DD E9       >                jp      (ix)
1679+ 6B87
1680+ 6B87              //  ______________________________________________________________________
1681+ 6B87              //
1682+ 6B87              // toggle       a n --
1683+ 6B87              // Complements (xor) the byte at addrress  a  with the model n.
1684+ 6B87                              New_Def TOGGLE, "TOGGLE", is_code, is_normal
1684+ 6B87             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1684+ 6B87             >
1684+ 6B87             >                // dummy db directives used to calculate length of namec
1684+ 6B87 54 4F 47 47 >                db      "TOGGLE"
1684+ 6B8B 4C 45       >
1684+ 6B8D             >len_NFA         defl    $ - temp_NFA
1684+ 6B8D             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1684+ 6B87             >
1684+ 6B87 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1684+ 6B88 54 4F 47 47 >                db      "TOGGLE"               // name string in 7-bit ascii, but
1684+ 6B8C 4C 45       >
1684+ 6B8E             >                org     $-1                 // alter last byte of Name just above to set
1684+ 6B8D C5          >                db      {b $} | END_BIT     // msb as name end
1684+ 6B8E             >
1684+ 6B8E 75 6B       >                dw      last_NFA            // Link to previous definition Name
1684+ 6B90             >TOGGLE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1684+ 6B90 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1684+ 6B90             >                else
1684+ 6B90 92 6B       >                dw      $ + 2   ; ok        // is pointed by CFA
1684+ 6B92             >                endif           ; ok        // for other definitions it "points" the correct handler
1684+ 6B92             >                // Use of "; ok" to suppress "warning[fwdref]"
1684+ 6B92             >
1684+ 6B92             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1685+ 6B92 D1                           pop     de
1686+ 6B93 E1                           pop     hl
1687+ 6B94 7E                           ld      a, (hl)
1688+ 6B95 AB                           xor     e
1689+ 6B96 77                           ld      (hl), a
1690+ 6B97
1691+ 6B97                              next
1691+ 6B97 DD E9       >                jp      (ix)
1692+ 6B99
1693+ 6B99              //  ______________________________________________________________________
1694+ 6B99              //
1695+ 6B99              // @            a -- n
1696+ 6B99              // fetch 16 bit number n from address a. Z80 keeps high byte is in high memory
1697+ 6B99                              New_Def FETCH, "@", is_code, is_normal
1697+ 6B99             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1697+ 6B99             >
1697+ 6B99             >                // dummy db directives used to calculate length of namec
1697+ 6B99 40          >                db      "@"
1697+ 6B9A             >len_NFA         defl    $ - temp_NFA
1697+ 6B9A             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1697+ 6B99             >
1697+ 6B99 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1697+ 6B9A 40          >                db      "@"               // name string in 7-bit ascii, but
1697+ 6B9B             >                org     $-1                 // alter last byte of Name just above to set
1697+ 6B9A C0          >                db      {b $} | END_BIT     // msb as name end
1697+ 6B9B             >
1697+ 6B9B 87 6B       >                dw      last_NFA            // Link to previous definition Name
1697+ 6B9D             >FETCH:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1697+ 6B9D ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1697+ 6B9D             >                else
1697+ 6B9D 9F 6B       >                dw      $ + 2   ; ok        // is pointed by CFA
1697+ 6B9F             >                endif           ; ok        // for other definitions it "points" the correct handler
1697+ 6B9F             >                // Use of "; ok" to suppress "warning[fwdref]"
1697+ 6B9F             >
1697+ 6B9F             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1698+ 6B9F E1                           pop     hl
1699+ 6BA0 5E                           ld      e, (hl)             // low-byte
1700+ 6BA1 23                           inc     hl
1701+ 6BA2 56                           ld      d, (hl)             // high-byte
1702+ 6BA3 D5                           push    de
1703+ 6BA4                              next
1703+ 6BA4 DD E9       >                jp      (ix)
1704+ 6BA6
1705+ 6BA6              //  ______________________________________________________________________
1706+ 6BA6              //
1707+ 6BA6              // !            n a --
1708+ 6BA6              // store 16 bit number n from address a. Z80 keeps high byte is in high memory
1709+ 6BA6                              New_Def STORE, "!", is_code, is_normal
1709+ 6BA6             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1709+ 6BA6             >
1709+ 6BA6             >                // dummy db directives used to calculate length of namec
1709+ 6BA6 21          >                db      "!"
1709+ 6BA7             >len_NFA         defl    $ - temp_NFA
1709+ 6BA7             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1709+ 6BA6             >
1709+ 6BA6 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1709+ 6BA7 21          >                db      "!"               // name string in 7-bit ascii, but
1709+ 6BA8             >                org     $-1                 // alter last byte of Name just above to set
1709+ 6BA7 A1          >                db      {b $} | END_BIT     // msb as name end
1709+ 6BA8             >
1709+ 6BA8 99 6B       >                dw      last_NFA            // Link to previous definition Name
1709+ 6BAA             >STORE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1709+ 6BAA ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1709+ 6BAA             >                else
1709+ 6BAA AC 6B       >                dw      $ + 2   ; ok        // is pointed by CFA
1709+ 6BAC             >                endif           ; ok        // for other definitions it "points" the correct handler
1709+ 6BAC             >                // Use of "; ok" to suppress "warning[fwdref]"
1709+ 6BAC             >
1709+ 6BAC             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1710+ 6BAC E1                           pop     hl                  // address
1711+ 6BAD D1                           pop     de                  // < n
1712+ 6BAE 73                           ld      (hl), e             // low-byte
1713+ 6BAF 23                           inc     hl
1714+ 6BB0 72                           ld      (hl), d             // high-byte
1715+ 6BB1
1716+ 6BB1                              next
1716+ 6BB1 DD E9       >                jp      (ix)
1717+ 6BB3
1718+ 6BB3              //  ______________________________________________________________________
1719+ 6BB3              //
1720+ 6BB3              // c@           a -- c
1721+ 6BB3              // fetch a character n from address a
1722+ 6BB3                              New_Def CFETCH, "C@", is_code, is_normal
1722+ 6BB3             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1722+ 6BB3             >
1722+ 6BB3             >                // dummy db directives used to calculate length of namec
1722+ 6BB3 43 40       >                db      "C@"
1722+ 6BB5             >len_NFA         defl    $ - temp_NFA
1722+ 6BB5             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1722+ 6BB3             >
1722+ 6BB3 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1722+ 6BB4 43 40       >                db      "C@"               // name string in 7-bit ascii, but
1722+ 6BB6             >                org     $-1                 // alter last byte of Name just above to set
1722+ 6BB5 C0          >                db      {b $} | END_BIT     // msb as name end
1722+ 6BB6             >
1722+ 6BB6 A6 6B       >                dw      last_NFA            // Link to previous definition Name
1722+ 6BB8             >CFETCH:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1722+ 6BB8 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1722+ 6BB8             >                else
1722+ 6BB8 BA 6B       >                dw      $ + 2   ; ok        // is pointed by CFA
1722+ 6BBA             >                endif           ; ok        // for other definitions it "points" the correct handler
1722+ 6BBA             >                // Use of "; ok" to suppress "warning[fwdref]"
1722+ 6BBA             >
1722+ 6BBA             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1723+ 6BBA E1                           pop     hl
1724+ 6BBB 6E                           ld      l, (hl)             // low-byte
1725+ 6BBC 26 00                        ld      h, 0
1726+ 6BBE
1727+ 6BBE                              psh1
1727+ 6BBE E5          >                push    hl
1727+ 6BBF DD E9       >                jp      (ix)
1728+ 6BC1
1729+ 6BC1              //  ______________________________________________________________________
1730+ 6BC1              //
1731+ 6BC1              // c!           c a --
1732+ 6BC1              // fetch 16 bit number n from address a. Z80 keeps high byte is in high memory
1733+ 6BC1                              New_Def CSTORE, "C!", is_code, is_normal
1733+ 6BC1             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1733+ 6BC1             >
1733+ 6BC1             >                // dummy db directives used to calculate length of namec
1733+ 6BC1 43 21       >                db      "C!"
1733+ 6BC3             >len_NFA         defl    $ - temp_NFA
1733+ 6BC3             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1733+ 6BC1             >
1733+ 6BC1 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1733+ 6BC2 43 21       >                db      "C!"               // name string in 7-bit ascii, but
1733+ 6BC4             >                org     $-1                 // alter last byte of Name just above to set
1733+ 6BC3 A1          >                db      {b $} | END_BIT     // msb as name end
1733+ 6BC4             >
1733+ 6BC4 B3 6B       >                dw      last_NFA            // Link to previous definition Name
1733+ 6BC6             >CSTORE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1733+ 6BC6 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1733+ 6BC6             >                else
1733+ 6BC6 C8 6B       >                dw      $ + 2   ; ok        // is pointed by CFA
1733+ 6BC8             >                endif           ; ok        // for other definitions it "points" the correct handler
1733+ 6BC8             >                // Use of "; ok" to suppress "warning[fwdref]"
1733+ 6BC8             >
1733+ 6BC8             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1734+ 6BC8 E1                           pop     hl                  // < address
1735+ 6BC9 D1                           pop     de
1736+ 6BCA 73                           ld      (hl), e             // low-byte
1737+ 6BCB
1738+ 6BCB                              next
1738+ 6BCB DD E9       >                jp      (ix)
1739+ 6BCD
1740+ 6BCD              //  ______________________________________________________________________
1741+ 6BCD              //
1742+ 6BCD              // 2@           a -- d
1743+ 6BCD              // fetch a 32 bits number d from address a and leaves it on top of the
1744+ 6BCD              // stack as two single numbers, high part as top of the stack.
1745+ 6BCD              // A double number is normally kept in CPU registers as HLDE.
1746+ 6BCD              // On stack a double number is treated as two single numbers
1747+ 6BCD              // where BC is on the top of the stack and HL is the second from top,
1748+ 6BCD              // so the sign of the number can be checked on top of stack
1749+ 6BCD              // and in the stack memory it appears as LHED.
1750+ 6BCD                              New_Def TWO_FETCH, "2@", is_code, is_normal
1750+ 6BCD             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1750+ 6BCD             >
1750+ 6BCD             >                // dummy db directives used to calculate length of namec
1750+ 6BCD 32 40       >                db      "2@"
1750+ 6BCF             >len_NFA         defl    $ - temp_NFA
1750+ 6BCF             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1750+ 6BCD             >
1750+ 6BCD 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1750+ 6BCE 32 40       >                db      "2@"               // name string in 7-bit ascii, but
1750+ 6BD0             >                org     $-1                 // alter last byte of Name just above to set
1750+ 6BCF C0          >                db      {b $} | END_BIT     // msb as name end
1750+ 6BD0             >
1750+ 6BD0 C1 6B       >                dw      last_NFA            // Link to previous definition Name
1750+ 6BD2             >TWO_FETCH:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1750+ 6BD2 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1750+ 6BD2             >                else
1750+ 6BD2 D4 6B       >                dw      $ + 2   ; ok        // is pointed by CFA
1750+ 6BD4             >                endif           ; ok        // for other definitions it "points" the correct handler
1750+ 6BD4             >                // Use of "; ok" to suppress "warning[fwdref]"
1750+ 6BD4             >
1750+ 6BD4             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1751+ 6BD4 E1                           pop     hl                  // address
1752+ 6BD5 5E                           ld      e, (hl)             // low-byte
1753+ 6BD6 23                           inc     hl
1754+ 6BD7 56                           ld      d, (hl)             // high-byte
1755+ 6BD8
1756+ 6BD8 23                           inc     hl
1757+ 6BD9 7E                           ld      a, (hl)             // low-byte
1758+ 6BDA 23                           inc     hl
1759+ 6BDB 66                           ld      h, (hl)             // high-byte
1760+ 6BDC 6F                           ld      l, a
1761+ 6BDD E5                           push    hl
1762+ 6BDE D5                           push    de
1763+ 6BDF                              next
1763+ 6BDF DD E9       >                jp      (ix)
1764+ 6BE1
1765+ 6BE1              //  ______________________________________________________________________
1766+ 6BE1              //
1767+ 6BE1              // 2!           d a --
1768+ 6BE1              // stores a 32 bits number d from address a and leaves it on top of the
1769+ 6BE1              // stack as two single numbers, high part as top of the stack.
1770+ 6BE1              // A double number is normally kept in CPU registers as HLDE.
1771+ 6BE1              // On stack a double number is treated as two single numbers
1772+ 6BE1              // where BC is on the top of the stack and HL is the second from top,
1773+ 6BE1              // so the sign of the number can be checked on top of stack
1774+ 6BE1              // and in the stack memory it appears as LHED.
1775+ 6BE1                              New_Def TWO_STORE, "2!", is_code, is_normal
1775+ 6BE1             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1775+ 6BE1             >
1775+ 6BE1             >                // dummy db directives used to calculate length of namec
1775+ 6BE1 32 21       >                db      "2!"
1775+ 6BE3             >len_NFA         defl    $ - temp_NFA
1775+ 6BE3             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1775+ 6BE1             >
1775+ 6BE1 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1775+ 6BE2 32 21       >                db      "2!"               // name string in 7-bit ascii, but
1775+ 6BE4             >                org     $-1                 // alter last byte of Name just above to set
1775+ 6BE3 A1          >                db      {b $} | END_BIT     // msb as name end
1775+ 6BE4             >
1775+ 6BE4 CD 6B       >                dw      last_NFA            // Link to previous definition Name
1775+ 6BE6             >TWO_STORE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1775+ 6BE6 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1775+ 6BE6             >                else
1775+ 6BE6 E8 6B       >                dw      $ + 2   ; ok        // is pointed by CFA
1775+ 6BE8             >                endif           ; ok        // for other definitions it "points" the correct handler
1775+ 6BE8             >                // Use of "; ok" to suppress "warning[fwdref]"
1775+ 6BE8             >
1775+ 6BE8             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1776+ 6BE8 D9                           exx
1777+ 6BE9 E1                           pop     hl                  // address
1778+ 6BEA C1                           pop     bc                  // < high-part
1779+ 6BEB D1                           pop     de                  // < low-part > Instruction Pointer
1780+ 6BEC 71                           ld      (hl), c
1781+ 6BED 23                           inc     hl
1782+ 6BEE 70                           ld      (hl), b
1783+ 6BEF 23                           inc     hl
1784+ 6BF0 73                           ld      (hl), e
1785+ 6BF1 23                           inc     hl
1786+ 6BF2 72                           ld      (hl), d
1787+ 6BF3 D9                           exx
1788+ 6BF4                              next
1788+ 6BF4 DD E9       >                jp      (ix)
1789+ 6BF6
1790+ 6BF6              //  ______________________________________________________________________
1791+ 6BF6              //
1792+ 6BF6              // p@           a -- c
1793+ 6BF6              // Read one byte from port a and leave the result on top of stack
1794+ 6BF6                              New_Def PFETCH, "P@", is_code, is_normal
1794+ 6BF6             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1794+ 6BF6             >
1794+ 6BF6             >                // dummy db directives used to calculate length of namec
1794+ 6BF6 50 40       >                db      "P@"
1794+ 6BF8             >len_NFA         defl    $ - temp_NFA
1794+ 6BF8             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1794+ 6BF6             >
1794+ 6BF6 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1794+ 6BF7 50 40       >                db      "P@"               // name string in 7-bit ascii, but
1794+ 6BF9             >                org     $-1                 // alter last byte of Name just above to set
1794+ 6BF8 C0          >                db      {b $} | END_BIT     // msb as name end
1794+ 6BF9             >
1794+ 6BF9 E1 6B       >                dw      last_NFA            // Link to previous definition Name
1794+ 6BFB             >PFETCH:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1794+ 6BFB ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1794+ 6BFB             >                else
1794+ 6BFB FD 6B       >                dw      $ + 2   ; ok        // is pointed by CFA
1794+ 6BFD             >                endif           ; ok        // for other definitions it "points" the correct handler
1794+ 6BFD             >                // Use of "; ok" to suppress "warning[fwdref]"
1794+ 6BFD             >
1794+ 6BFD             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1795+ 6BFD D9                           exx
1796+ 6BFE C1                           pop     bc
1797+ 6BFF 26 00                        ld      h, 0
1798+ 6C01 ED 68                        in      l, (c)
1799+ 6C03 E5                           push    hl
1800+ 6C04 D9                           exx
1801+ 6C05                              next
1801+ 6C05 DD E9       >                jp      (ix)
1802+ 6C07
1803+ 6C07              //  ______________________________________________________________________
1804+ 6C07              //
1805+ 6C07              // p!           c a --
1806+ 6C07              // Send one byte (top of stack) to port a
1807+ 6C07                              New_Def PSTORE, "P!", is_code, is_normal
1807+ 6C07             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1807+ 6C07             >
1807+ 6C07             >                // dummy db directives used to calculate length of namec
1807+ 6C07 50 21       >                db      "P!"
1807+ 6C09             >len_NFA         defl    $ - temp_NFA
1807+ 6C09             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1807+ 6C07             >
1807+ 6C07 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1807+ 6C08 50 21       >                db      "P!"               // name string in 7-bit ascii, but
1807+ 6C0A             >                org     $-1                 // alter last byte of Name just above to set
1807+ 6C09 A1          >                db      {b $} | END_BIT     // msb as name end
1807+ 6C0A             >
1807+ 6C0A F6 6B       >                dw      last_NFA            // Link to previous definition Name
1807+ 6C0C             >PSTORE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1807+ 6C0C ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1807+ 6C0C             >                else
1807+ 6C0C 0E 6C       >                dw      $ + 2   ; ok        // is pointed by CFA
1807+ 6C0E             >                endif           ; ok        // for other definitions it "points" the correct handler
1807+ 6C0E             >                // Use of "; ok" to suppress "warning[fwdref]"
1807+ 6C0E             >
1807+ 6C0E             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1808+ 6C0E D9                           exx
1809+ 6C0F C1                           pop     bc
1810+ 6C10 E1                           pop     hl                  // < c
1811+ 6C11 ED 69                        out     (c), l              // low-byte
1812+ 6C13 D9                           exx
1813+ 6C14                              next
1813+ 6C14 DD E9       >                jp      (ix)
1814+ 6C16
1815+ 6C16
1816+ 6C16              //  ______________________________________________________________________
1817+ 6C16              //
1818+ 6C16              // 2*           n1 -- n2
1819+ 6C16              // doubles the number at top of stack
1820+ 6C16                              New_Def TWO_MUL, "2*", is_code, is_normal
1820+ 6C16             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1820+ 6C16             >
1820+ 6C16             >                // dummy db directives used to calculate length of namec
1820+ 6C16 32 2A       >                db      "2*"
1820+ 6C18             >len_NFA         defl    $ - temp_NFA
1820+ 6C18             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1820+ 6C16             >
1820+ 6C16 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1820+ 6C17 32 2A       >                db      "2*"               // name string in 7-bit ascii, but
1820+ 6C19             >                org     $-1                 // alter last byte of Name just above to set
1820+ 6C18 AA          >                db      {b $} | END_BIT     // msb as name end
1820+ 6C19             >
1820+ 6C19 07 6C       >                dw      last_NFA            // Link to previous definition Name
1820+ 6C1B             >TWO_MUL:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1820+ 6C1B ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1820+ 6C1B             >                else
1820+ 6C1B 1D 6C       >                dw      $ + 2   ; ok        // is pointed by CFA
1820+ 6C1D             >                endif           ; ok        // for other definitions it "points" the correct handler
1820+ 6C1D             >                // Use of "; ok" to suppress "warning[fwdref]"
1820+ 6C1D             >
1820+ 6C1D             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1821+ 6C1D              Two_Mul_Ptr:
1822+ 6C1D E1                           pop     hl
1823+ 6C1E 29                           add     hl, hl
1824+ 6C1F
1825+ 6C1F                              psh1
1825+ 6C1F E5          >                push    hl
1825+ 6C20 DD E9       >                jp      (ix)
1826+ 6C22
1827+ 6C22              //  ______________________________________________________________________
1828+ 6C22              //
1829+ 6C22              // 2/           n1 -- n2
1830+ 6C22              // halves the top of stack, sign is unchanged
1831+ 6C22                              New_Def TWO_DIV, "2/", is_code, is_normal
1831+ 6C22             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1831+ 6C22             >
1831+ 6C22             >                // dummy db directives used to calculate length of namec
1831+ 6C22 32 2F       >                db      "2/"
1831+ 6C24             >len_NFA         defl    $ - temp_NFA
1831+ 6C24             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1831+ 6C22             >
1831+ 6C22 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1831+ 6C23 32 2F       >                db      "2/"               // name string in 7-bit ascii, but
1831+ 6C25             >                org     $-1                 // alter last byte of Name just above to set
1831+ 6C24 AF          >                db      {b $} | END_BIT     // msb as name end
1831+ 6C25             >
1831+ 6C25 16 6C       >                dw      last_NFA            // Link to previous definition Name
1831+ 6C27             >TWO_DIV:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1831+ 6C27 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1831+ 6C27             >                else
1831+ 6C27 29 6C       >                dw      $ + 2   ; ok        // is pointed by CFA
1831+ 6C29             >                endif           ; ok        // for other definitions it "points" the correct handler
1831+ 6C29             >                // Use of "; ok" to suppress "warning[fwdref]"
1831+ 6C29             >
1831+ 6C29             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1832+ 6C29 E1                           pop     hl
1833+ 6C2A CB 2C                        sra     h
1834+ 6C2C CB 1D                        rr      l
1835+ 6C2E
1836+ 6C2E                              psh1
1836+ 6C2E E5          >                push    hl
1836+ 6C2F DD E9       >                jp      (ix)
1837+ 6C31
1838+ 6C31              //  ______________________________________________________________________
1839+ 6C31              //
1840+ 6C31              // lshift       n1 u -- n2
1841+ 6C31              // bit left shift of u bits
1842+ 6C31                              New_Def LSHIFT, "LSHIFT", is_code, is_normal
1842+ 6C31             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1842+ 6C31             >
1842+ 6C31             >                // dummy db directives used to calculate length of namec
1842+ 6C31 4C 53 48 49 >                db      "LSHIFT"
1842+ 6C35 46 54       >
1842+ 6C37             >len_NFA         defl    $ - temp_NFA
1842+ 6C37             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1842+ 6C31             >
1842+ 6C31 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1842+ 6C32 4C 53 48 49 >                db      "LSHIFT"               // name string in 7-bit ascii, but
1842+ 6C36 46 54       >
1842+ 6C38             >                org     $-1                 // alter last byte of Name just above to set
1842+ 6C37 D4          >                db      {b $} | END_BIT     // msb as name end
1842+ 6C38             >
1842+ 6C38 22 6C       >                dw      last_NFA            // Link to previous definition Name
1842+ 6C3A             >LSHIFT:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1842+ 6C3A ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1842+ 6C3A             >                else
1842+ 6C3A 3C 6C       >                dw      $ + 2   ; ok        // is pointed by CFA
1842+ 6C3C             >                endif           ; ok        // for other definitions it "points" the correct handler
1842+ 6C3C             >                // Use of "; ok" to suppress "warning[fwdref]"
1842+ 6C3C             >
1842+ 6C3C             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1843+ 6C3C D1                           pop     de
1844+ 6C3D
1845+ 6C3D E1                           pop     hl
1846+ 6C3E 7B                           ld      a, e
1847+ 6C3F B7                           or      a
1848+ 6C40 28 04                        jr      z, Lshift_Zero
1849+ 6C42              Lshift_Loop:
1850+ 6C42 29                                   add     hl, hl
1851+ 6C43 3D                                   dec     a
1852+ 6C44 20 FC                            jr      nz, Lshift_Loop
1853+ 6C46              Lshift_Zero:
1854+ 6C46
1855+ 6C46
1856+ 6C46                              psh1
1856+ 6C46 E5          >                push    hl
1856+ 6C47 DD E9       >                jp      (ix)
1857+ 6C49
1858+ 6C49              //  ______________________________________________________________________
1859+ 6C49              //
1860+ 6C49              // rshift       n1 u -- n2
1861+ 6C49              // bit right shift of u bits
1862+ 6C49                              New_Def RSHIFT, "RSHIFT", is_code, is_normal
1862+ 6C49             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1862+ 6C49             >
1862+ 6C49             >                // dummy db directives used to calculate length of namec
1862+ 6C49 52 53 48 49 >                db      "RSHIFT"
1862+ 6C4D 46 54       >
1862+ 6C4F             >len_NFA         defl    $ - temp_NFA
1862+ 6C4F             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1862+ 6C49             >
1862+ 6C49 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1862+ 6C4A 52 53 48 49 >                db      "RSHIFT"               // name string in 7-bit ascii, but
1862+ 6C4E 46 54       >
1862+ 6C50             >                org     $-1                 // alter last byte of Name just above to set
1862+ 6C4F D4          >                db      {b $} | END_BIT     // msb as name end
1862+ 6C50             >
1862+ 6C50 31 6C       >                dw      last_NFA            // Link to previous definition Name
1862+ 6C52             >RSHIFT:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1862+ 6C52 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1862+ 6C52             >                else
1862+ 6C52 54 6C       >                dw      $ + 2   ; ok        // is pointed by CFA
1862+ 6C54             >                endif           ; ok        // for other definitions it "points" the correct handler
1862+ 6C54             >                // Use of "; ok" to suppress "warning[fwdref]"
1862+ 6C54             >
1862+ 6C54             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1863+ 6C54 D1                           pop     de
1864+ 6C55
1865+ 6C55 E1                           pop     hl
1866+ 6C56 7B                           ld      a, e
1867+ 6C57 B7                           or      a
1868+ 6C58 28 07                        jr      z, Rshift_Zero
1869+ 6C5A              Rshift_Loop:
1870+ 6C5A CB 3C                                srl     h
1871+ 6C5C CB 1D                                rr      l
1872+ 6C5E 3D                                   dec     a
1873+ 6C5F 20 F9                            jr      nz, Rshift_Loop
1874+ 6C61              Rshift_Zero:
1875+ 6C61
1876+ 6C61
1877+ 6C61                              psh1
1877+ 6C61 E5          >                push    hl
1877+ 6C62 DD E9       >                jp      (ix)
1878+ 6C64
1879+ 6C64              //  ______________________________________________________________________
1880+ 6C64              //
1881+ 6C64              // cells        n1 -- n2
1882+ 6C64              // decrement by 2 top of stack
1883+ 6C64                              New_Def CELLS, "CELLS", Two_Mul_Ptr, is_normal
1883+ 6C64             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1883+ 6C64             >
1883+ 6C64             >                // dummy db directives used to calculate length of namec
1883+ 6C64 43 45 4C 4C >                db      "CELLS"
1883+ 6C68 53          >
1883+ 6C69             >len_NFA         defl    $ - temp_NFA
1883+ 6C69             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1883+ 6C64             >
1883+ 6C64 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1883+ 6C65 43 45 4C 4C >                db      "CELLS"               // name string in 7-bit ascii, but
1883+ 6C69 53          >
1883+ 6C6A             >                org     $-1                 // alter last byte of Name just above to set
1883+ 6C69 D3          >                db      {b $} | END_BIT     // msb as name end
1883+ 6C6A             >
1883+ 6C6A 49 6C       >                dw      last_NFA            // Link to previous definition Name
1883+ 6C6C             >CELLS:          if Two_Mul_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1883+ 6C6C 1D 6C       >                dw      Two_Mul_Ptr ; ok        // for primitive definitions  actual code
1883+ 6C6E             >                else
1883+ 6C6E ~           >                dw      $ + 2   ; ok        // is pointed by CFA
1883+ 6C6E             >                endif           ; ok        // for other definitions it "points" the correct handler
1883+ 6C6E             >                // Use of "; ok" to suppress "warning[fwdref]"
1883+ 6C6E             >
1883+ 6C6E             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1884+ 6C6E
1885+ 6C6E
1886+ 6C6E              //  ______________________________________________________________________
1887+ 6C6E
# file closed: C:\Zx\CSpect\Projects\vForth15_INDIRECT/source/L0.asm
 110  6C6E                              include "L1.asm"
# file opened: C:\Zx\CSpect\Projects\vForth15_INDIRECT/source/L1.asm
   1+ 6C6E              //  ______________________________________________________________________
   2+ 6C6E              //
   3+ 6C6E              //  L1.asm
   4+ 6C6E              //
   5+ 6C6E              //  Level-1 definitions and derivate
   6+ 6C6E              //  ______________________________________________________________________
   7+ 6C6E
   8+ 6C6E              //  ______________________________________________________________________
   9+ 6C6E              //
  10+ 6C6E              // :            -- cccc     ( compile time )
  11+ 6C6E              //              i*x -- j*x  ( run time )
  12+ 6C6E              // Colon Definition
  13+ 6C6E                              Colon_Def COLON, ":", is_immediate      // has forward-ref
  13+ 6C6E             >                New_Def  COLON, ":", Enter_Ptr, is_immediate ; ok
  13+ 6C6E             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  13+ 6C6E             >
  13+ 6C6E             >                // dummy db directives used to calculate length of namec
  13+ 6C6E 3A          >                db      ":"
  13+ 6C6F             >len_NFA         defl    $ - temp_NFA
  13+ 6C6F             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  13+ 6C6E             >
  13+ 6C6E C1          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
  13+ 6C6F 3A          >                db      ":"               // name string in 7-bit ascii, but
  13+ 6C70             >                org     $-1                 // alter last byte of Name just above to set
  13+ 6C6F BA          >                db      {b $} | END_BIT     // msb as name end
  13+ 6C70             >
  13+ 6C70 64 6C       >                dw      last_NFA            // Link to previous definition Name
  13+ 6C72             >COLON:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
  13+ 6C72 88 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
  13+ 6C74             >                else
  13+ 6C74 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
  13+ 6C74             >                endif           ; ok        // for other definitions it "points" the correct handler
  13+ 6C74             >                // Use of "; ok" to suppress "warning[fwdref]"
  13+ 6C74             >
  13+ 6C74             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  14+ 6C74
  15+ 6C74 DB 70                        dw      QEXEC                   // ?exec
  16+ 6C76 96 70                        dw      STORE_CSP               // !csp
  17+ 6C78 45 6E 9D 6B                  dw      CURRENT, FETCH          // current @
  18+ 6C7C 38 6E AA 6B                  dw      CONTEXT, STORE          // context !
  19+ 6C80 D5 76                        dw      CREATE                  // create  ( forward )
  20+ 6C82 88 71                        dw      SMUDGE                  // dmudge
  21+ 6C84 73 71                        dw      SQUARED_CLOSE           // ]
  22+ 6C86 DE 71                        dw      C_SEMICOLON_CODE        // ;code ( change the 3-bytes CFA of defining word to call Enter_Ptr )
  23+ 6C88                                                              // ... immediate
  24+ 6C88              Enter_Ptr:
  25+ 6C88                              // via call coded in CFA
  26+ 6C88                              ldhlrp
  26+ 6C88 2A 96 63    >                ld      hl,(RP_Pointer)
  27+ 6C8B 2B                           dec     hl                  // push on Return-Stack current Instruction-Pointer
  28+ 6C8C 70                           ld      (hl), b
  29+ 6C8D 2B                           dec     hl
  30+ 6C8E 71                           ld      (hl), c
  31+ 6C8F                              ldrphl
  31+ 6C8F 22 96 63    >                ld      (RP_Pointer),hl
  32+ 6C92 13                           inc     de
  33+ 6C93 4B                           ld      c, e
  34+ 6C94 42                           ld      b, d
  35+ 6C95                              next
  35+ 6C95 DD E9       >                jp      (ix)
  36+ 6C97
  37+ 6C97              //  ______________________________________________________________________
  38+ 6C97              //
  39+ 6C97              // ;            --
  40+ 6C97              // Semicolon. End of Colon-Definition. Stack must be balanced.
  41+ 6C97                              Colon_Def SEMICOLON, ";", is_immediate   // has forward-ref
  41+ 6C97             >                New_Def  SEMICOLON, ";", Enter_Ptr, is_immediate ; ok
  41+ 6C97             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  41+ 6C97             >
  41+ 6C97             >                // dummy db directives used to calculate length of namec
  41+ 6C97 3B          >                db      ";"
  41+ 6C98             >len_NFA         defl    $ - temp_NFA
  41+ 6C98             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  41+ 6C97             >
  41+ 6C97 C1          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
  41+ 6C98 3B          >                db      ";"               // name string in 7-bit ascii, but
  41+ 6C99             >                org     $-1                 // alter last byte of Name just above to set
  41+ 6C98 BB          >                db      {b $} | END_BIT     // msb as name end
  41+ 6C99             >
  41+ 6C99 6E 6C       >                dw      last_NFA            // Link to previous definition Name
  41+ 6C9B             >SEMICOLON:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
  41+ 6C9B 88 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
  41+ 6C9D             >                else
  41+ 6C9D ~           >                dw      $ + 2   ; ok        // is pointed by CFA
  41+ 6C9D             >                endif           ; ok        // for other definitions it "points" the correct handler
  41+ 6C9D             >                // Use of "; ok" to suppress "warning[fwdref]"
  41+ 6C9D             >
  41+ 6C9D             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  42+ 6C9D
  43+ 6C9D 05 71                        dw      QCSP                    // ?csp
  44+ 6C9F 3C 71 A5 69                  dw      COMPILE, EXIT           // [compile] ;s
  45+ 6CA3 88 71                        dw      SMUDGE                  // smudge
  46+ 6CA5 65 71                        dw      SQUARED_OPEN            // [
  47+ 6CA7 A5 69                        dw      EXIT                    // ; immediate
  48+ 6CA9
  49+ 6CA9              //  ______________________________________________________________________
  50+ 6CA9              //
  51+ 6CA9              // noop         --
  52+ 6CA9                              New_Def NOOP, "NOOP", is_code, is_normal
  52+ 6CA9             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  52+ 6CA9             >
  52+ 6CA9             >                // dummy db directives used to calculate length of namec
  52+ 6CA9 4E 4F 4F 50 >                db      "NOOP"
  52+ 6CAD             >len_NFA         defl    $ - temp_NFA
  52+ 6CAD             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  52+ 6CA9             >
  52+ 6CA9 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  52+ 6CAA 4E 4F 4F 50 >                db      "NOOP"               // name string in 7-bit ascii, but
  52+ 6CAE             >                org     $-1                 // alter last byte of Name just above to set
  52+ 6CAD D0          >                db      {b $} | END_BIT     // msb as name end
  52+ 6CAE             >
  52+ 6CAE 97 6C       >                dw      last_NFA            // Link to previous definition Name
  52+ 6CB0             >NOOP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
  52+ 6CB0 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
  52+ 6CB0             >                else
  52+ 6CB0 B2 6C       >                dw      $ + 2   ; ok        // is pointed by CFA
  52+ 6CB2             >                endif           ; ok        // for other definitions it "points" the correct handler
  52+ 6CB2             >                // Use of "; ok" to suppress "warning[fwdref]"
  52+ 6CB2             >
  52+ 6CB2             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  53+ 6CB2                              next
  53+ 6CB2 DD E9       >                jp      (ix)
  54+ 6CB4
  55+ 6CB4              //  ______________________________________________________________________
  56+ 6CB4              //
  57+ 6CB4              // constant     n -- cccc     ( compile time )
  58+ 6CB4              //              -- n          ( run time )
  59+ 6CB4              // Constant definition.
  60+ 6CB4                              Colon_Def CONSTANT, "CONSTANT", is_normal   // has forward-ref
  60+ 6CB4             >                New_Def  CONSTANT, "CONSTANT", Enter_Ptr, is_normal ; ok
  60+ 6CB4             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  60+ 6CB4             >
  60+ 6CB4             >                // dummy db directives used to calculate length of namec
  60+ 6CB4 43 4F 4E 53 >                db      "CONSTANT"
  60+ 6CB8 54 41 4E 54 >
  60+ 6CBC             >len_NFA         defl    $ - temp_NFA
  60+ 6CBC             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  60+ 6CB4             >
  60+ 6CB4 88          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  60+ 6CB5 43 4F 4E 53 >                db      "CONSTANT"               // name string in 7-bit ascii, but
  60+ 6CB9 54 41 4E 54 >
  60+ 6CBD             >                org     $-1                 // alter last byte of Name just above to set
  60+ 6CBC D4          >                db      {b $} | END_BIT     // msb as name end
  60+ 6CBD             >
  60+ 6CBD A9 6C       >                dw      last_NFA            // Link to previous definition Name
  60+ 6CBF             >CONSTANT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
  60+ 6CBF 88 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
  60+ 6CC1             >                else
  60+ 6CC1 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
  60+ 6CC1             >                endif           ; ok        // for other definitions it "points" the correct handler
  60+ 6CC1             >                // Use of "; ok" to suppress "warning[fwdref]"
  60+ 6CC1             >
  60+ 6CC1             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  61+ 6CC1
  62+ 6CC1 D5 76                        dw      CREATE                  // create
  63+ 6CC3 00 6F                        dw      COMMA                   // ,    ( at PFA then, store the value )
  64+ 6CC5 DE 71                        dw      C_SEMICOLON_CODE        // ;code (  changes the 3-bytes CFA to call Constant_Ptr )
  65+ 6CC7              Constant_Ptr:
  66+ 6CC7
  67+ 6CC7 13                           inc     de
  68+ 6CC8 EB                           ex      de, hl
  69+ 6CC9
  70+ 6CC9 5E                           ld      e, (hl)
  71+ 6CCA 23                           inc     hl
  72+ 6CCB 56                           ld      d, (hl)
  73+ 6CCC D5                           push    de
  74+ 6CCD                              next
  74+ 6CCD DD E9       >                jp      (ix)
  75+ 6CCF
  76+ 6CCF              //  ______________________________________________________________________
  77+ 6CCF              //
  78+ 6CCF              // variable     n -- cccc     ( compile time )
  79+ 6CCF              //              -- a          ( run time )
  80+ 6CCF              // Variable definition, n is the initial value.
  81+ 6CCF                              Colon_Def VARIABLE, "VARIABLE", is_normal   // has forward-ref
  81+ 6CCF             >                New_Def  VARIABLE, "VARIABLE", Enter_Ptr, is_normal ; ok
  81+ 6CCF             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  81+ 6CCF             >
  81+ 6CCF             >                // dummy db directives used to calculate length of namec
  81+ 6CCF 56 41 52 49 >                db      "VARIABLE"
  81+ 6CD3 41 42 4C 45 >
  81+ 6CD7             >len_NFA         defl    $ - temp_NFA
  81+ 6CD7             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  81+ 6CCF             >
  81+ 6CCF 88          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  81+ 6CD0 56 41 52 49 >                db      "VARIABLE"               // name string in 7-bit ascii, but
  81+ 6CD4 41 42 4C 45 >
  81+ 6CD8             >                org     $-1                 // alter last byte of Name just above to set
  81+ 6CD7 C5          >                db      {b $} | END_BIT     // msb as name end
  81+ 6CD8             >
  81+ 6CD8 B4 6C       >                dw      last_NFA            // Link to previous definition Name
  81+ 6CDA             >VARIABLE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
  81+ 6CDA 88 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
  81+ 6CDC             >                else
  81+ 6CDC ~           >                dw      $ + 2   ; ok        // is pointed by CFA
  81+ 6CDC             >                endif           ; ok        // for other definitions it "points" the correct handler
  81+ 6CDC             >                // Use of "; ok" to suppress "warning[fwdref]"
  81+ 6CDC             >
  81+ 6CDC             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  82+ 6CDC
  83+ 6CDC 05 6D                        dw      ZERO
  84+ 6CDE BF 6C                        dw      CONSTANT                // constant
  85+ 6CE0 DE 71                        dw      C_SEMICOLON_CODE        // ;code ( changes the 3-bytes CFA to call Variable_Ptr )
  86+ 6CE2              Variable_Ptr:
  87+ 6CE2
  88+ 6CE2 13                           inc     de
  89+ 6CE3 D5                           push    de                  // balance TOS before overwrite it
  90+ 6CE4
  91+ 6CE4                              next
  91+ 6CE4 DD E9       >                jp      (ix)
  92+ 6CE6
  93+ 6CE6              //  ______________________________________________________________________
  94+ 6CE6              //
  95+ 6CE6              // user         b -- cccc     ( compile time )
  96+ 6CE6              //              -- a          ( run time )
  97+ 6CE6              // User variable definition
  98+ 6CE6                              Colon_Def USER, "USER", is_normal
  98+ 6CE6             >                New_Def  USER, "USER", Enter_Ptr, is_normal ; ok
  98+ 6CE6             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  98+ 6CE6             >
  98+ 6CE6             >                // dummy db directives used to calculate length of namec
  98+ 6CE6 55 53 45 52 >                db      "USER"
  98+ 6CEA             >len_NFA         defl    $ - temp_NFA
  98+ 6CEA             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  98+ 6CE6             >
  98+ 6CE6 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  98+ 6CE7 55 53 45 52 >                db      "USER"               // name string in 7-bit ascii, but
  98+ 6CEB             >                org     $-1                 // alter last byte of Name just above to set
  98+ 6CEA D2          >                db      {b $} | END_BIT     // msb as name end
  98+ 6CEB             >
  98+ 6CEB CF 6C       >                dw      last_NFA            // Link to previous definition Name
  98+ 6CED             >USER:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
  98+ 6CED 88 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
  98+ 6CEF             >                else
  98+ 6CEF ~           >                dw      $ + 2   ; ok        // is pointed by CFA
  98+ 6CEF             >                endif           ; ok        // for other definitions it "points" the correct handler
  98+ 6CEF             >                // Use of "; ok" to suppress "warning[fwdref]"
  98+ 6CEF             >
  98+ 6CEF             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  99+ 6CEF
 100+ 6CEF D5 76                        dw      CREATE                  // create
 101+ 6CF1 11 6F                        dw      CCOMMA                  // c,
 102+ 6CF3 DE 71                        dw      C_SEMICOLON_CODE        // ;code () changes the 3-bytes CFA to call User_Ptr )
 103+ 6CF5
 104+ 6CF5
 105+ 6CF5              User_Ptr:
 106+ 6CF5                              // via call coded in CFA
 107+ 6CF5 13                           inc     de
 108+ 6CF6 EB                           ex      de, hl
 109+ 6CF7 5E                           ld      e, (hl)
 110+ 6CF8 16 00                        ld      d, 0
 111+ 6CFA 2A 94 63                     ld      hl, (USER_Pointer)
 112+ 6CFD 19                           add     hl, de
 113+ 6CFE
 114+ 6CFE                              psh1
 114+ 6CFE E5          >                push    hl
 114+ 6CFF DD E9       >                jp      (ix)
 115+ 6D01
 116+ 6D01              //  ______________________________________________________________________
 117+ 6D01              //
 118+ 6D01                              Constant_Def ZERO       ,   "0"     ,   0
 118+ 6D01             >                New_Def  ZERO, "0", Constant_Ptr, is_normal
 118+ 6D01             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 118+ 6D01             >
 118+ 6D01             >                // dummy db directives used to calculate length of namec
 118+ 6D01 30          >                db      "0"
 118+ 6D02             >len_NFA         defl    $ - temp_NFA
 118+ 6D02             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 118+ 6D01             >
 118+ 6D01 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 118+ 6D02 30          >                db      "0"               // name string in 7-bit ascii, but
 118+ 6D03             >                org     $-1                 // alter last byte of Name just above to set
 118+ 6D02 B0          >                db      {b $} | END_BIT     // msb as name end
 118+ 6D03             >
 118+ 6D03 E6 6C       >                dw      last_NFA            // Link to previous definition Name
 118+ 6D05             >ZERO:          if Constant_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 118+ 6D05 C7 6C       >                dw      Constant_Ptr ; ok        // for primitive definitions  actual code
 118+ 6D07             >                else
 118+ 6D07 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 118+ 6D07             >                endif           ; ok        // for other definitions it "points" the correct handler
 118+ 6D07             >                // Use of "; ok" to suppress "warning[fwdref]"
 118+ 6D07             >
 118+ 6D07             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 118+ 6D07 00 00       >                dw      0
 119+ 6D09                              Constant_Def ONE        ,   "1"     ,   1
 119+ 6D09             >                New_Def  ONE, "1", Constant_Ptr, is_normal
 119+ 6D09             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 119+ 6D09             >
 119+ 6D09             >                // dummy db directives used to calculate length of namec
 119+ 6D09 31          >                db      "1"
 119+ 6D0A             >len_NFA         defl    $ - temp_NFA
 119+ 6D0A             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 119+ 6D09             >
 119+ 6D09 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 119+ 6D0A 31          >                db      "1"               // name string in 7-bit ascii, but
 119+ 6D0B             >                org     $-1                 // alter last byte of Name just above to set
 119+ 6D0A B1          >                db      {b $} | END_BIT     // msb as name end
 119+ 6D0B             >
 119+ 6D0B 01 6D       >                dw      last_NFA            // Link to previous definition Name
 119+ 6D0D             >ONE:          if Constant_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 119+ 6D0D C7 6C       >                dw      Constant_Ptr ; ok        // for primitive definitions  actual code
 119+ 6D0F             >                else
 119+ 6D0F ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 119+ 6D0F             >                endif           ; ok        // for other definitions it "points" the correct handler
 119+ 6D0F             >                // Use of "; ok" to suppress "warning[fwdref]"
 119+ 6D0F             >
 119+ 6D0F             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 119+ 6D0F 01 00       >                dw      1
 120+ 6D11                              Constant_Def TWO        ,   "2"     ,   2
 120+ 6D11             >                New_Def  TWO, "2", Constant_Ptr, is_normal
 120+ 6D11             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 120+ 6D11             >
 120+ 6D11             >                // dummy db directives used to calculate length of namec
 120+ 6D11 32          >                db      "2"
 120+ 6D12             >len_NFA         defl    $ - temp_NFA
 120+ 6D12             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 120+ 6D11             >
 120+ 6D11 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 120+ 6D12 32          >                db      "2"               // name string in 7-bit ascii, but
 120+ 6D13             >                org     $-1                 // alter last byte of Name just above to set
 120+ 6D12 B2          >                db      {b $} | END_BIT     // msb as name end
 120+ 6D13             >
 120+ 6D13 09 6D       >                dw      last_NFA            // Link to previous definition Name
 120+ 6D15             >TWO:          if Constant_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 120+ 6D15 C7 6C       >                dw      Constant_Ptr ; ok        // for primitive definitions  actual code
 120+ 6D17             >                else
 120+ 6D17 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 120+ 6D17             >                endif           ; ok        // for other definitions it "points" the correct handler
 120+ 6D17             >                // Use of "; ok" to suppress "warning[fwdref]"
 120+ 6D17             >
 120+ 6D17             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 120+ 6D17 02 00       >                dw      2
 121+ 6D19                              Constant_Def THREE      ,   "3"     ,   3
 121+ 6D19             >                New_Def  THREE, "3", Constant_Ptr, is_normal
 121+ 6D19             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 121+ 6D19             >
 121+ 6D19             >                // dummy db directives used to calculate length of namec
 121+ 6D19 33          >                db      "3"
 121+ 6D1A             >len_NFA         defl    $ - temp_NFA
 121+ 6D1A             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 121+ 6D19             >
 121+ 6D19 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 121+ 6D1A 33          >                db      "3"               // name string in 7-bit ascii, but
 121+ 6D1B             >                org     $-1                 // alter last byte of Name just above to set
 121+ 6D1A B3          >                db      {b $} | END_BIT     // msb as name end
 121+ 6D1B             >
 121+ 6D1B 11 6D       >                dw      last_NFA            // Link to previous definition Name
 121+ 6D1D             >THREE:          if Constant_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 121+ 6D1D C7 6C       >                dw      Constant_Ptr ; ok        // for primitive definitions  actual code
 121+ 6D1F             >                else
 121+ 6D1F ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 121+ 6D1F             >                endif           ; ok        // for other definitions it "points" the correct handler
 121+ 6D1F             >                // Use of "; ok" to suppress "warning[fwdref]"
 121+ 6D1F             >
 121+ 6D1F             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 121+ 6D1F 03 00       >                dw      3
 122+ 6D21                              Constant_Def NEG_ONE    ,   "-1"    ,  -1
 122+ 6D21             >                New_Def  NEG_ONE, "-1", Constant_Ptr, is_normal
 122+ 6D21             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 122+ 6D21             >
 122+ 6D21             >                // dummy db directives used to calculate length of namec
 122+ 6D21 2D 31       >                db      "-1"
 122+ 6D23             >len_NFA         defl    $ - temp_NFA
 122+ 6D23             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 122+ 6D21             >
 122+ 6D21 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 122+ 6D22 2D 31       >                db      "-1"               // name string in 7-bit ascii, but
 122+ 6D24             >                org     $-1                 // alter last byte of Name just above to set
 122+ 6D23 B1          >                db      {b $} | END_BIT     // msb as name end
 122+ 6D24             >
 122+ 6D24 19 6D       >                dw      last_NFA            // Link to previous definition Name
 122+ 6D26             >NEG_ONE:          if Constant_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 122+ 6D26 C7 6C       >                dw      Constant_Ptr ; ok        // for primitive definitions  actual code
 122+ 6D28             >                else
 122+ 6D28 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 122+ 6D28             >                endif           ; ok        // for other definitions it "points" the correct handler
 122+ 6D28             >                // Use of "; ok" to suppress "warning[fwdref]"
 122+ 6D28             >
 122+ 6D28             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 122+ 6D28 FF FF       >                dw      -1
 123+ 6D2A                              Constant_Def BL         ,   "BL"    , $20
 123+ 6D2A             >                New_Def  BL, "BL", Constant_Ptr, is_normal
 123+ 6D2A             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 123+ 6D2A             >
 123+ 6D2A             >                // dummy db directives used to calculate length of namec
 123+ 6D2A 42 4C       >                db      "BL"
 123+ 6D2C             >len_NFA         defl    $ - temp_NFA
 123+ 6D2C             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 123+ 6D2A             >
 123+ 6D2A 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 123+ 6D2B 42 4C       >                db      "BL"               // name string in 7-bit ascii, but
 123+ 6D2D             >                org     $-1                 // alter last byte of Name just above to set
 123+ 6D2C CC          >                db      {b $} | END_BIT     // msb as name end
 123+ 6D2D             >
 123+ 6D2D 21 6D       >                dw      last_NFA            // Link to previous definition Name
 123+ 6D2F             >BL:          if Constant_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 123+ 6D2F C7 6C       >                dw      Constant_Ptr ; ok        // for primitive definitions  actual code
 123+ 6D31             >                else
 123+ 6D31 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 123+ 6D31             >                endif           ; ok        // for other definitions it "points" the correct handler
 123+ 6D31             >                // Use of "; ok" to suppress "warning[fwdref]"
 123+ 6D31             >
 123+ 6D31             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 123+ 6D31 20 00       >                dw      $20
 124+ 6D33                              Constant_Def CL         ,   "C/L"   ,  64
 124+ 6D33             >                New_Def  CL, "C/L", Constant_Ptr, is_normal
 124+ 6D33             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 124+ 6D33             >
 124+ 6D33             >                // dummy db directives used to calculate length of namec
 124+ 6D33 43 2F 4C    >                db      "C/L"
 124+ 6D36             >len_NFA         defl    $ - temp_NFA
 124+ 6D36             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 124+ 6D33             >
 124+ 6D33 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 124+ 6D34 43 2F 4C    >                db      "C/L"               // name string in 7-bit ascii, but
 124+ 6D37             >                org     $-1                 // alter last byte of Name just above to set
 124+ 6D36 CC          >                db      {b $} | END_BIT     // msb as name end
 124+ 6D37             >
 124+ 6D37 2A 6D       >                dw      last_NFA            // Link to previous definition Name
 124+ 6D39             >CL:          if Constant_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 124+ 6D39 C7 6C       >                dw      Constant_Ptr ; ok        // for primitive definitions  actual code
 124+ 6D3B             >                else
 124+ 6D3B ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 124+ 6D3B             >                endif           ; ok        // for other definitions it "points" the correct handler
 124+ 6D3B             >                // Use of "; ok" to suppress "warning[fwdref]"
 124+ 6D3B             >
 124+ 6D3B             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 124+ 6D3B 40 00       >                dw      64
 125+ 6D3D                              Constant_Def BBUF       ,   "B/BUF" , 512
 125+ 6D3D             >                New_Def  BBUF, "B/BUF", Constant_Ptr, is_normal
 125+ 6D3D             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 125+ 6D3D             >
 125+ 6D3D             >                // dummy db directives used to calculate length of namec
 125+ 6D3D 42 2F 42 55 >                db      "B/BUF"
 125+ 6D41 46          >
 125+ 6D42             >len_NFA         defl    $ - temp_NFA
 125+ 6D42             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 125+ 6D3D             >
 125+ 6D3D 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 125+ 6D3E 42 2F 42 55 >                db      "B/BUF"               // name string in 7-bit ascii, but
 125+ 6D42 46          >
 125+ 6D43             >                org     $-1                 // alter last byte of Name just above to set
 125+ 6D42 C6          >                db      {b $} | END_BIT     // msb as name end
 125+ 6D43             >
 125+ 6D43 33 6D       >                dw      last_NFA            // Link to previous definition Name
 125+ 6D45             >BBUF:          if Constant_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 125+ 6D45 C7 6C       >                dw      Constant_Ptr ; ok        // for primitive definitions  actual code
 125+ 6D47             >                else
 125+ 6D47 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 125+ 6D47             >                endif           ; ok        // for other definitions it "points" the correct handler
 125+ 6D47             >                // Use of "; ok" to suppress "warning[fwdref]"
 125+ 6D47             >
 125+ 6D47             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 125+ 6D47 00 02       >                dw      512
 126+ 6D49                              Constant_Def BSCR       ,   "B/SCR" ,   2
 126+ 6D49             >                New_Def  BSCR, "B/SCR", Constant_Ptr, is_normal
 126+ 6D49             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 126+ 6D49             >
 126+ 6D49             >                // dummy db directives used to calculate length of namec
 126+ 6D49 42 2F 53 43 >                db      "B/SCR"
 126+ 6D4D 52          >
 126+ 6D4E             >len_NFA         defl    $ - temp_NFA
 126+ 6D4E             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 126+ 6D49             >
 126+ 6D49 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 126+ 6D4A 42 2F 53 43 >                db      "B/SCR"               // name string in 7-bit ascii, but
 126+ 6D4E 52          >
 126+ 6D4F             >                org     $-1                 // alter last byte of Name just above to set
 126+ 6D4E D2          >                db      {b $} | END_BIT     // msb as name end
 126+ 6D4F             >
 126+ 6D4F 3D 6D       >                dw      last_NFA            // Link to previous definition Name
 126+ 6D51             >BSCR:          if Constant_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 126+ 6D51 C7 6C       >                dw      Constant_Ptr ; ok        // for primitive definitions  actual code
 126+ 6D53             >                else
 126+ 6D53 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 126+ 6D53             >                endif           ; ok        // for other definitions it "points" the correct handler
 126+ 6D53             >                // Use of "; ok" to suppress "warning[fwdref]"
 126+ 6D53             >
 126+ 6D53             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 126+ 6D53 02 00       >                dw      2
 127+ 6D55                              Constant_Def LSCR       ,   "L/SCR" ,  16
 127+ 6D55             >                New_Def  LSCR, "L/SCR", Constant_Ptr, is_normal
 127+ 6D55             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 127+ 6D55             >
 127+ 6D55             >                // dummy db directives used to calculate length of namec
 127+ 6D55 4C 2F 53 43 >                db      "L/SCR"
 127+ 6D59 52          >
 127+ 6D5A             >len_NFA         defl    $ - temp_NFA
 127+ 6D5A             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 127+ 6D55             >
 127+ 6D55 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 127+ 6D56 4C 2F 53 43 >                db      "L/SCR"               // name string in 7-bit ascii, but
 127+ 6D5A 52          >
 127+ 6D5B             >                org     $-1                 // alter last byte of Name just above to set
 127+ 6D5A D2          >                db      {b $} | END_BIT     // msb as name end
 127+ 6D5B             >
 127+ 6D5B 49 6D       >                dw      last_NFA            // Link to previous definition Name
 127+ 6D5D             >LSCR:          if Constant_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 127+ 6D5D C7 6C       >                dw      Constant_Ptr ; ok        // for primitive definitions  actual code
 127+ 6D5F             >                else
 127+ 6D5F ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 127+ 6D5F             >                endif           ; ok        // for other definitions it "points" the correct handler
 127+ 6D5F             >                // Use of "; ok" to suppress "warning[fwdref]"
 127+ 6D5F             >
 127+ 6D5F             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 127+ 6D5F 10 00       >                dw      16
 128+ 6D61
 129+ 6D61              //  ______________________________________________________________________
 130+ 6D61              //
 131+ 6D61              // +origin         --
 132+ 6D61              //              Colon_Def PLUS_ORIGIN, "+ORIGIN", is_normal
 133+ 6D61              //              dw      LIT, Cold_origin        // [ hex 6366 ] literal
 134+ 6D61              //              dw      PLUS                    // +
 135+ 6D61              //              dw      EXIT                    // ;
 136+ 6D61                              New_Def PLUS_ORIGIN, "+ORIGIN", is_code, is_normal
 136+ 6D61             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 136+ 6D61             >
 136+ 6D61             >                // dummy db directives used to calculate length of namec
 136+ 6D61 2B 4F 52 49 >                db      "+ORIGIN"
 136+ 6D65 47 49 4E    >
 136+ 6D68             >len_NFA         defl    $ - temp_NFA
 136+ 6D68             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 136+ 6D61             >
 136+ 6D61 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 136+ 6D62 2B 4F 52 49 >                db      "+ORIGIN"               // name string in 7-bit ascii, but
 136+ 6D66 47 49 4E    >
 136+ 6D69             >                org     $-1                 // alter last byte of Name just above to set
 136+ 6D68 CE          >                db      {b $} | END_BIT     // msb as name end
 136+ 6D69             >
 136+ 6D69 55 6D       >                dw      last_NFA            // Link to previous definition Name
 136+ 6D6B             >PLUS_ORIGIN:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 136+ 6D6B ~           >                dw      runcode ; ok        // for primitive definitions  actual code
 136+ 6D6B             >                else
 136+ 6D6B 6D 6D       >                dw      $ + 2   ; ok        // is pointed by CFA
 136+ 6D6D             >                endif           ; ok        // for other definitions it "points" the correct handler
 136+ 6D6D             >                // Use of "; ok" to suppress "warning[fwdref]"
 136+ 6D6D             >
 136+ 6D6D             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 137+ 6D6D E1                           pop     hl
 138+ 6D6E 11 66 63                     ld      de,  Cold_origin
 139+ 6D71 19                           add     hl, de
 140+ 6D72 E5                           push    hl
 141+ 6D73                              next
 141+ 6D73 DD E9       >                jp      (ix)
 142+ 6D75
 143+ 6D75
 144+ 6D75              //  ______________________________________________________________________
 145+ 6D75              //
 146+ 6D75                              Constant_Def CNEXT      ,   "(NEXT)", Next_Ptr
 146+ 6D75             >                New_Def  CNEXT, "(NEXT)", Constant_Ptr, is_normal
 146+ 6D75             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 146+ 6D75             >
 146+ 6D75             >                // dummy db directives used to calculate length of namec
 146+ 6D75 28 4E 45 58 >                db      "(NEXT)"
 146+ 6D79 54 29       >
 146+ 6D7B             >len_NFA         defl    $ - temp_NFA
 146+ 6D7B             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 146+ 6D75             >
 146+ 6D75 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 146+ 6D76 28 4E 45 58 >                db      "(NEXT)"               // name string in 7-bit ascii, but
 146+ 6D7A 54 29       >
 146+ 6D7C             >                org     $-1                 // alter last byte of Name just above to set
 146+ 6D7B A9          >                db      {b $} | END_BIT     // msb as name end
 146+ 6D7C             >
 146+ 6D7C 61 6D       >                dw      last_NFA            // Link to previous definition Name
 146+ 6D7E             >CNEXT:          if Constant_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 146+ 6D7E C7 6C       >                dw      Constant_Ptr ; ok        // for primitive definitions  actual code
 146+ 6D80             >                else
 146+ 6D80 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 146+ 6D80             >                endif           ; ok        // for other definitions it "points" the correct handler
 146+ 6D80             >                // Use of "; ok" to suppress "warning[fwdref]"
 146+ 6D80             >
 146+ 6D80             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 146+ 6D80 98 63       >                dw      Next_Ptr
 147+ 6D82
 148+ 6D82              //  ______________________________________________________________________
 149+ 6D82              //
 150+ 6D82
 151+ 6D82                              User_Def S0         , "S0"        , 06 // starting value of Stack-Pointer
 151+ 6D82             >                New_Def  S0, "S0", User_Ptr, is_normal
 151+ 6D82             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 151+ 6D82             >
 151+ 6D82             >                // dummy db directives used to calculate length of namec
 151+ 6D82 53 30       >                db      "S0"
 151+ 6D84             >len_NFA         defl    $ - temp_NFA
 151+ 6D84             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 151+ 6D82             >
 151+ 6D82 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 151+ 6D83 53 30       >                db      "S0"               // name string in 7-bit ascii, but
 151+ 6D85             >                org     $-1                 // alter last byte of Name just above to set
 151+ 6D84 B0          >                db      {b $} | END_BIT     // msb as name end
 151+ 6D85             >
 151+ 6D85 75 6D       >                dw      last_NFA            // Link to previous definition Name
 151+ 6D87             >S0:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 151+ 6D87 F5 6C       >                dw      User_Ptr ; ok        // for primitive definitions  actual code
 151+ 6D89             >                else
 151+ 6D89 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 151+ 6D89             >                endif           ; ok        // for other definitions it "points" the correct handler
 151+ 6D89             >                // Use of "; ok" to suppress "warning[fwdref]"
 151+ 6D89             >
 151+ 6D89             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 151+ 6D89 06          >                db      06
 152+ 6D8A                              User_Def R0         , "R0"        , 08 // starting value of Return-Pointer
 152+ 6D8A             >                New_Def  R0, "R0", User_Ptr, is_normal
 152+ 6D8A             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 152+ 6D8A             >
 152+ 6D8A             >                // dummy db directives used to calculate length of namec
 152+ 6D8A 52 30       >                db      "R0"
 152+ 6D8C             >len_NFA         defl    $ - temp_NFA
 152+ 6D8C             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 152+ 6D8A             >
 152+ 6D8A 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 152+ 6D8B 52 30       >                db      "R0"               // name string in 7-bit ascii, but
 152+ 6D8D             >                org     $-1                 // alter last byte of Name just above to set
 152+ 6D8C B0          >                db      {b $} | END_BIT     // msb as name end
 152+ 6D8D             >
 152+ 6D8D 82 6D       >                dw      last_NFA            // Link to previous definition Name
 152+ 6D8F             >R0:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 152+ 6D8F F5 6C       >                dw      User_Ptr ; ok        // for primitive definitions  actual code
 152+ 6D91             >                else
 152+ 6D91 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 152+ 6D91             >                endif           ; ok        // for other definitions it "points" the correct handler
 152+ 6D91             >                // Use of "; ok" to suppress "warning[fwdref]"
 152+ 6D91             >
 152+ 6D91             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 152+ 6D91 08          >                db      08
 153+ 6D92                              User_Def TIB        , "TIB"       , 10 // input terminal buffer address
 153+ 6D92             >                New_Def  TIB, "TIB", User_Ptr, is_normal
 153+ 6D92             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 153+ 6D92             >
 153+ 6D92             >                // dummy db directives used to calculate length of namec
 153+ 6D92 54 49 42    >                db      "TIB"
 153+ 6D95             >len_NFA         defl    $ - temp_NFA
 153+ 6D95             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 153+ 6D92             >
 153+ 6D92 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 153+ 6D93 54 49 42    >                db      "TIB"               // name string in 7-bit ascii, but
 153+ 6D96             >                org     $-1                 // alter last byte of Name just above to set
 153+ 6D95 C2          >                db      {b $} | END_BIT     // msb as name end
 153+ 6D96             >
 153+ 6D96 8A 6D       >                dw      last_NFA            // Link to previous definition Name
 153+ 6D98             >TIB:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 153+ 6D98 F5 6C       >                dw      User_Ptr ; ok        // for primitive definitions  actual code
 153+ 6D9A             >                else
 153+ 6D9A ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 153+ 6D9A             >                endif           ; ok        // for other definitions it "points" the correct handler
 153+ 6D9A             >                // Use of "; ok" to suppress "warning[fwdref]"
 153+ 6D9A             >
 153+ 6D9A             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 153+ 6D9A 0A          >                db      10
 154+ 6D9B                              User_Def WIDTH      , "WIDTH"     , 12 // maximum number of characters for a word name
 154+ 6D9B             >                New_Def  WIDTH, "WIDTH", User_Ptr, is_normal
 154+ 6D9B             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 154+ 6D9B             >
 154+ 6D9B             >                // dummy db directives used to calculate length of namec
 154+ 6D9B 57 49 44 54 >                db      "WIDTH"
 154+ 6D9F 48          >
 154+ 6DA0             >len_NFA         defl    $ - temp_NFA
 154+ 6DA0             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 154+ 6D9B             >
 154+ 6D9B 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 154+ 6D9C 57 49 44 54 >                db      "WIDTH"               // name string in 7-bit ascii, but
 154+ 6DA0 48          >
 154+ 6DA1             >                org     $-1                 // alter last byte of Name just above to set
 154+ 6DA0 C8          >                db      {b $} | END_BIT     // msb as name end
 154+ 6DA1             >
 154+ 6DA1 92 6D       >                dw      last_NFA            // Link to previous definition Name
 154+ 6DA3             >WIDTH:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 154+ 6DA3 F5 6C       >                dw      User_Ptr ; ok        // for primitive definitions  actual code
 154+ 6DA5             >                else
 154+ 6DA5 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 154+ 6DA5             >                endif           ; ok        // for other definitions it "points" the correct handler
 154+ 6DA5             >                // Use of "; ok" to suppress "warning[fwdref]"
 154+ 6DA5             >
 154+ 6DA5             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 154+ 6DA5 0C          >                db      12
 155+ 6DA6                              User_Def WARNING    , "WARNING"   , 14 // error reporting method: 0 base, 1 verbose
 155+ 6DA6             >                New_Def  WARNING, "WARNING", User_Ptr, is_normal
 155+ 6DA6             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 155+ 6DA6             >
 155+ 6DA6             >                // dummy db directives used to calculate length of namec
 155+ 6DA6 57 41 52 4E >                db      "WARNING"
 155+ 6DAA 49 4E 47    >
 155+ 6DAD             >len_NFA         defl    $ - temp_NFA
 155+ 6DAD             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 155+ 6DA6             >
 155+ 6DA6 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 155+ 6DA7 57 41 52 4E >                db      "WARNING"               // name string in 7-bit ascii, but
 155+ 6DAB 49 4E 47    >
 155+ 6DAE             >                org     $-1                 // alter last byte of Name just above to set
 155+ 6DAD C7          >                db      {b $} | END_BIT     // msb as name end
 155+ 6DAE             >
 155+ 6DAE 9B 6D       >                dw      last_NFA            // Link to previous definition Name
 155+ 6DB0             >WARNING:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 155+ 6DB0 F5 6C       >                dw      User_Ptr ; ok        // for primitive definitions  actual code
 155+ 6DB2             >                else
 155+ 6DB2 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 155+ 6DB2             >                endif           ; ok        // for other definitions it "points" the correct handler
 155+ 6DB2             >                // Use of "; ok" to suppress "warning[fwdref]"
 155+ 6DB2             >
 155+ 6DB2             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 155+ 6DB2 0E          >                db      14
 156+ 6DB3                              User_Def FENCE      , "FENCE"     , 16 // minimum address where FORGET can work
 156+ 6DB3             >                New_Def  FENCE, "FENCE", User_Ptr, is_normal
 156+ 6DB3             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 156+ 6DB3             >
 156+ 6DB3             >                // dummy db directives used to calculate length of namec
 156+ 6DB3 46 45 4E 43 >                db      "FENCE"
 156+ 6DB7 45          >
 156+ 6DB8             >len_NFA         defl    $ - temp_NFA
 156+ 6DB8             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 156+ 6DB3             >
 156+ 6DB3 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 156+ 6DB4 46 45 4E 43 >                db      "FENCE"               // name string in 7-bit ascii, but
 156+ 6DB8 45          >
 156+ 6DB9             >                org     $-1                 // alter last byte of Name just above to set
 156+ 6DB8 C5          >                db      {b $} | END_BIT     // msb as name end
 156+ 6DB9             >
 156+ 6DB9 A6 6D       >                dw      last_NFA            // Link to previous definition Name
 156+ 6DBB             >FENCE:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 156+ 6DBB F5 6C       >                dw      User_Ptr ; ok        // for primitive definitions  actual code
 156+ 6DBD             >                else
 156+ 6DBD ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 156+ 6DBD             >                endif           ; ok        // for other definitions it "points" the correct handler
 156+ 6DBD             >                // Use of "; ok" to suppress "warning[fwdref]"
 156+ 6DBD             >
 156+ 6DBD             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 156+ 6DBD 10          >                db      16
 157+ 6DBE                              User_Def DP         , "DP"        , 18 // Dictionary Pointer
 157+ 6DBE             >                New_Def  DP, "DP", User_Ptr, is_normal
 157+ 6DBE             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 157+ 6DBE             >
 157+ 6DBE             >                // dummy db directives used to calculate length of namec
 157+ 6DBE 44 50       >                db      "DP"
 157+ 6DC0             >len_NFA         defl    $ - temp_NFA
 157+ 6DC0             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 157+ 6DBE             >
 157+ 6DBE 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 157+ 6DBF 44 50       >                db      "DP"               // name string in 7-bit ascii, but
 157+ 6DC1             >                org     $-1                 // alter last byte of Name just above to set
 157+ 6DC0 D0          >                db      {b $} | END_BIT     // msb as name end
 157+ 6DC1             >
 157+ 6DC1 B3 6D       >                dw      last_NFA            // Link to previous definition Name
 157+ 6DC3             >DP:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 157+ 6DC3 F5 6C       >                dw      User_Ptr ; ok        // for primitive definitions  actual code
 157+ 6DC5             >                else
 157+ 6DC5 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 157+ 6DC5             >                endif           ; ok        // for other definitions it "points" the correct handler
 157+ 6DC5             >                // Use of "; ok" to suppress "warning[fwdref]"
 157+ 6DC5             >
 157+ 6DC5             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 157+ 6DC5 12          >                db      18
 158+ 6DC6                              User_Def VOC_LINK   , "VOC-LINK"  , 20 // pointer to the latest vocabulary
 158+ 6DC6             >                New_Def  VOC_LINK, "VOC-LINK", User_Ptr, is_normal
 158+ 6DC6             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 158+ 6DC6             >
 158+ 6DC6             >                // dummy db directives used to calculate length of namec
 158+ 6DC6 56 4F 43 2D >                db      "VOC-LINK"
 158+ 6DCA 4C 49 4E 4B >
 158+ 6DCE             >len_NFA         defl    $ - temp_NFA
 158+ 6DCE             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 158+ 6DC6             >
 158+ 6DC6 88          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 158+ 6DC7 56 4F 43 2D >                db      "VOC-LINK"               // name string in 7-bit ascii, but
 158+ 6DCB 4C 49 4E 4B >
 158+ 6DCF             >                org     $-1                 // alter last byte of Name just above to set
 158+ 6DCE CB          >                db      {b $} | END_BIT     // msb as name end
 158+ 6DCF             >
 158+ 6DCF BE 6D       >                dw      last_NFA            // Link to previous definition Name
 158+ 6DD1             >VOC_LINK:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 158+ 6DD1 F5 6C       >                dw      User_Ptr ; ok        // for primitive definitions  actual code
 158+ 6DD3             >                else
 158+ 6DD3 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 158+ 6DD3             >                endif           ; ok        // for other definitions it "points" the correct handler
 158+ 6DD3             >                // Use of "; ok" to suppress "warning[fwdref]"
 158+ 6DD3             >
 158+ 6DD3             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 158+ 6DD3 14          >                db      20
 159+ 6DD4                              User_Def FIRST      , "FIRST"     , 22 // address of first buffer
 159+ 6DD4             >                New_Def  FIRST, "FIRST", User_Ptr, is_normal
 159+ 6DD4             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 159+ 6DD4             >
 159+ 6DD4             >                // dummy db directives used to calculate length of namec
 159+ 6DD4 46 49 52 53 >                db      "FIRST"
 159+ 6DD8 54          >
 159+ 6DD9             >len_NFA         defl    $ - temp_NFA
 159+ 6DD9             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 159+ 6DD4             >
 159+ 6DD4 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 159+ 6DD5 46 49 52 53 >                db      "FIRST"               // name string in 7-bit ascii, but
 159+ 6DD9 54          >
 159+ 6DDA             >                org     $-1                 // alter last byte of Name just above to set
 159+ 6DD9 D4          >                db      {b $} | END_BIT     // msb as name end
 159+ 6DDA             >
 159+ 6DDA C6 6D       >                dw      last_NFA            // Link to previous definition Name
 159+ 6DDC             >FIRST:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 159+ 6DDC F5 6C       >                dw      User_Ptr ; ok        // for primitive definitions  actual code
 159+ 6DDE             >                else
 159+ 6DDE ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 159+ 6DDE             >                endif           ; ok        // for other definitions it "points" the correct handler
 159+ 6DDE             >                // Use of "; ok" to suppress "warning[fwdref]"
 159+ 6DDE             >
 159+ 6DDE             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 159+ 6DDE 16          >                db      22
 160+ 6DDF                              User_Def LIMIT      , "LIMIT"     , 24 // address of last buffer
 160+ 6DDF             >                New_Def  LIMIT, "LIMIT", User_Ptr, is_normal
 160+ 6DDF             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 160+ 6DDF             >
 160+ 6DDF             >                // dummy db directives used to calculate length of namec
 160+ 6DDF 4C 49 4D 49 >                db      "LIMIT"
 160+ 6DE3 54          >
 160+ 6DE4             >len_NFA         defl    $ - temp_NFA
 160+ 6DE4             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 160+ 6DDF             >
 160+ 6DDF 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 160+ 6DE0 4C 49 4D 49 >                db      "LIMIT"               // name string in 7-bit ascii, but
 160+ 6DE4 54          >
 160+ 6DE5             >                org     $-1                 // alter last byte of Name just above to set
 160+ 6DE4 D4          >                db      {b $} | END_BIT     // msb as name end
 160+ 6DE5             >
 160+ 6DE5 D4 6D       >                dw      last_NFA            // Link to previous definition Name
 160+ 6DE7             >LIMIT:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 160+ 6DE7 F5 6C       >                dw      User_Ptr ; ok        // for primitive definitions  actual code
 160+ 6DE9             >                else
 160+ 6DE9 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 160+ 6DE9             >                endif           ; ok        // for other definitions it "points" the correct handler
 160+ 6DE9             >                // Use of "; ok" to suppress "warning[fwdref]"
 160+ 6DE9             >
 160+ 6DE9             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 160+ 6DE9 18          >                db      24
 161+ 6DEA                              User_Def EXP        , "EXP"       , 26 // keeps the exponent in number conversion
 161+ 6DEA             >                New_Def  EXP, "EXP", User_Ptr, is_normal
 161+ 6DEA             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 161+ 6DEA             >
 161+ 6DEA             >                // dummy db directives used to calculate length of namec
 161+ 6DEA 45 58 50    >                db      "EXP"
 161+ 6DED             >len_NFA         defl    $ - temp_NFA
 161+ 6DED             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 161+ 6DEA             >
 161+ 6DEA 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 161+ 6DEB 45 58 50    >                db      "EXP"               // name string in 7-bit ascii, but
 161+ 6DEE             >                org     $-1                 // alter last byte of Name just above to set
 161+ 6DED D0          >                db      {b $} | END_BIT     // msb as name end
 161+ 6DEE             >
 161+ 6DEE DF 6D       >                dw      last_NFA            // Link to previous definition Name
 161+ 6DF0             >EXP:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 161+ 6DF0 F5 6C       >                dw      User_Ptr ; ok        // for primitive definitions  actual code
 161+ 6DF2             >                else
 161+ 6DF2 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 161+ 6DF2             >                endif           ; ok        // for other definitions it "points" the correct handler
 161+ 6DF2             >                // Use of "; ok" to suppress "warning[fwdref]"
 161+ 6DF2             >
 161+ 6DF2             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 161+ 6DF2 1A          >                db      26
 162+ 6DF3                              User_Def NMODE      , "NMODE"     , 28 // number mode: 0 integer, 1 floating point
 162+ 6DF3             >                New_Def  NMODE, "NMODE", User_Ptr, is_normal
 162+ 6DF3             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 162+ 6DF3             >
 162+ 6DF3             >                // dummy db directives used to calculate length of namec
 162+ 6DF3 4E 4D 4F 44 >                db      "NMODE"
 162+ 6DF7 45          >
 162+ 6DF8             >len_NFA         defl    $ - temp_NFA
 162+ 6DF8             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 162+ 6DF3             >
 162+ 6DF3 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 162+ 6DF4 4E 4D 4F 44 >                db      "NMODE"               // name string in 7-bit ascii, but
 162+ 6DF8 45          >
 162+ 6DF9             >                org     $-1                 // alter last byte of Name just above to set
 162+ 6DF8 C5          >                db      {b $} | END_BIT     // msb as name end
 162+ 6DF9             >
 162+ 6DF9 EA 6D       >                dw      last_NFA            // Link to previous definition Name
 162+ 6DFB             >NMODE:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 162+ 6DFB F5 6C       >                dw      User_Ptr ; ok        // for primitive definitions  actual code
 162+ 6DFD             >                else
 162+ 6DFD ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 162+ 6DFD             >                endif           ; ok        // for other definitions it "points" the correct handler
 162+ 6DFD             >                // Use of "; ok" to suppress "warning[fwdref]"
 162+ 6DFD             >
 162+ 6DFD             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 162+ 6DFD 1C          >                db      28
 163+ 6DFE                              User_Def BLK        , "BLK"       , 30 // block number to be interpreted. 0 for terminal
 163+ 6DFE             >                New_Def  BLK, "BLK", User_Ptr, is_normal
 163+ 6DFE             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 163+ 6DFE             >
 163+ 6DFE             >                // dummy db directives used to calculate length of namec
 163+ 6DFE 42 4C 4B    >                db      "BLK"
 163+ 6E01             >len_NFA         defl    $ - temp_NFA
 163+ 6E01             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 163+ 6DFE             >
 163+ 6DFE 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 163+ 6DFF 42 4C 4B    >                db      "BLK"               // name string in 7-bit ascii, but
 163+ 6E02             >                org     $-1                 // alter last byte of Name just above to set
 163+ 6E01 CB          >                db      {b $} | END_BIT     // msb as name end
 163+ 6E02             >
 163+ 6E02 F3 6D       >                dw      last_NFA            // Link to previous definition Name
 163+ 6E04             >BLK:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 163+ 6E04 F5 6C       >                dw      User_Ptr ; ok        // for primitive definitions  actual code
 163+ 6E06             >                else
 163+ 6E06 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 163+ 6E06             >                endif           ; ok        // for other definitions it "points" the correct handler
 163+ 6E06             >                // Use of "; ok" to suppress "warning[fwdref]"
 163+ 6E06             >
 163+ 6E06             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 163+ 6E06 1E          >                db      30
 164+ 6E07                              User_Def TO_IN      , ">IN"       , 32 // incremented when consuming input buffer
 164+ 6E07             >                New_Def  TO_IN, ">IN", User_Ptr, is_normal
 164+ 6E07             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 164+ 6E07             >
 164+ 6E07             >                // dummy db directives used to calculate length of namec
 164+ 6E07 3E 49 4E    >                db      ">IN"
 164+ 6E0A             >len_NFA         defl    $ - temp_NFA
 164+ 6E0A             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 164+ 6E07             >
 164+ 6E07 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 164+ 6E08 3E 49 4E    >                db      ">IN"               // name string in 7-bit ascii, but
 164+ 6E0B             >                org     $-1                 // alter last byte of Name just above to set
 164+ 6E0A CE          >                db      {b $} | END_BIT     // msb as name end
 164+ 6E0B             >
 164+ 6E0B FE 6D       >                dw      last_NFA            // Link to previous definition Name
 164+ 6E0D             >TO_IN:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 164+ 6E0D F5 6C       >                dw      User_Ptr ; ok        // for primitive definitions  actual code
 164+ 6E0F             >                else
 164+ 6E0F ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 164+ 6E0F             >                endif           ; ok        // for other definitions it "points" the correct handler
 164+ 6E0F             >                // Use of "; ok" to suppress "warning[fwdref]"
 164+ 6E0F             >
 164+ 6E0F             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 164+ 6E0F 20          >                db      32
 165+ 6E10                              User_Def OUT        , "OUT"       , 34 // incremented when sending to output
 165+ 6E10             >                New_Def  OUT, "OUT", User_Ptr, is_normal
 165+ 6E10             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 165+ 6E10             >
 165+ 6E10             >                // dummy db directives used to calculate length of namec
 165+ 6E10 4F 55 54    >                db      "OUT"
 165+ 6E13             >len_NFA         defl    $ - temp_NFA
 165+ 6E13             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 165+ 6E10             >
 165+ 6E10 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 165+ 6E11 4F 55 54    >                db      "OUT"               // name string in 7-bit ascii, but
 165+ 6E14             >                org     $-1                 // alter last byte of Name just above to set
 165+ 6E13 D4          >                db      {b $} | END_BIT     // msb as name end
 165+ 6E14             >
 165+ 6E14 07 6E       >                dw      last_NFA            // Link to previous definition Name
 165+ 6E16             >OUT:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 165+ 6E16 F5 6C       >                dw      User_Ptr ; ok        // for primitive definitions  actual code
 165+ 6E18             >                else
 165+ 6E18 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 165+ 6E18             >                endif           ; ok        // for other definitions it "points" the correct handler
 165+ 6E18             >                // Use of "; ok" to suppress "warning[fwdref]"
 165+ 6E18             >
 165+ 6E18             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 165+ 6E18 22          >                db      34
 166+ 6E19                              User_Def SCR        , "SCR"       , 36 // latest screen retreieved by LIST
 166+ 6E19             >                New_Def  SCR, "SCR", User_Ptr, is_normal
 166+ 6E19             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 166+ 6E19             >
 166+ 6E19             >                // dummy db directives used to calculate length of namec
 166+ 6E19 53 43 52    >                db      "SCR"
 166+ 6E1C             >len_NFA         defl    $ - temp_NFA
 166+ 6E1C             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 166+ 6E19             >
 166+ 6E19 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 166+ 6E1A 53 43 52    >                db      "SCR"               // name string in 7-bit ascii, but
 166+ 6E1D             >                org     $-1                 // alter last byte of Name just above to set
 166+ 6E1C D2          >                db      {b $} | END_BIT     // msb as name end
 166+ 6E1D             >
 166+ 6E1D 10 6E       >                dw      last_NFA            // Link to previous definition Name
 166+ 6E1F             >SCR:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 166+ 6E1F F5 6C       >                dw      User_Ptr ; ok        // for primitive definitions  actual code
 166+ 6E21             >                else
 166+ 6E21 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 166+ 6E21             >                endif           ; ok        // for other definitions it "points" the correct handler
 166+ 6E21             >                // Use of "; ok" to suppress "warning[fwdref]"
 166+ 6E21             >
 166+ 6E21             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 166+ 6E21 24          >                db      36
 167+ 6E22                              User_Def OFFSET     , "OFFSET"    , 38 //
 167+ 6E22             >                New_Def  OFFSET, "OFFSET", User_Ptr, is_normal
 167+ 6E22             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 167+ 6E22             >
 167+ 6E22             >                // dummy db directives used to calculate length of namec
 167+ 6E22 4F 46 46 53 >                db      "OFFSET"
 167+ 6E26 45 54       >
 167+ 6E28             >len_NFA         defl    $ - temp_NFA
 167+ 6E28             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 167+ 6E22             >
 167+ 6E22 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 167+ 6E23 4F 46 46 53 >                db      "OFFSET"               // name string in 7-bit ascii, but
 167+ 6E27 45 54       >
 167+ 6E29             >                org     $-1                 // alter last byte of Name just above to set
 167+ 6E28 D4          >                db      {b $} | END_BIT     // msb as name end
 167+ 6E29             >
 167+ 6E29 19 6E       >                dw      last_NFA            // Link to previous definition Name
 167+ 6E2B             >OFFSET:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 167+ 6E2B F5 6C       >                dw      User_Ptr ; ok        // for primitive definitions  actual code
 167+ 6E2D             >                else
 167+ 6E2D ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 167+ 6E2D             >                endif           ; ok        // for other definitions it "points" the correct handler
 167+ 6E2D             >                // Use of "; ok" to suppress "warning[fwdref]"
 167+ 6E2D             >
 167+ 6E2D             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 167+ 6E2D 26          >                db      38
 168+ 6E2E                              User_Def CONTEXT    , "CONTEXT"   , 40 // pointer to the vocabulary where search begins
 168+ 6E2E             >                New_Def  CONTEXT, "CONTEXT", User_Ptr, is_normal
 168+ 6E2E             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 168+ 6E2E             >
 168+ 6E2E             >                // dummy db directives used to calculate length of namec
 168+ 6E2E 43 4F 4E 54 >                db      "CONTEXT"
 168+ 6E32 45 58 54    >
 168+ 6E35             >len_NFA         defl    $ - temp_NFA
 168+ 6E35             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 168+ 6E2E             >
 168+ 6E2E 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 168+ 6E2F 43 4F 4E 54 >                db      "CONTEXT"               // name string in 7-bit ascii, but
 168+ 6E33 45 58 54    >
 168+ 6E36             >                org     $-1                 // alter last byte of Name just above to set
 168+ 6E35 D4          >                db      {b $} | END_BIT     // msb as name end
 168+ 6E36             >
 168+ 6E36 22 6E       >                dw      last_NFA            // Link to previous definition Name
 168+ 6E38             >CONTEXT:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 168+ 6E38 F5 6C       >                dw      User_Ptr ; ok        // for primitive definitions  actual code
 168+ 6E3A             >                else
 168+ 6E3A ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 168+ 6E3A             >                endif           ; ok        // for other definitions it "points" the correct handler
 168+ 6E3A             >                // Use of "; ok" to suppress "warning[fwdref]"
 168+ 6E3A             >
 168+ 6E3A             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 168+ 6E3A 28          >                db      40
 169+ 6E3B                              User_Def CURRENT    , "CURRENT"   , 42 // pointer to the vocabulary where search continues
 169+ 6E3B             >                New_Def  CURRENT, "CURRENT", User_Ptr, is_normal
 169+ 6E3B             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 169+ 6E3B             >
 169+ 6E3B             >                // dummy db directives used to calculate length of namec
 169+ 6E3B 43 55 52 52 >                db      "CURRENT"
 169+ 6E3F 45 4E 54    >
 169+ 6E42             >len_NFA         defl    $ - temp_NFA
 169+ 6E42             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 169+ 6E3B             >
 169+ 6E3B 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 169+ 6E3C 43 55 52 52 >                db      "CURRENT"               // name string in 7-bit ascii, but
 169+ 6E40 45 4E 54    >
 169+ 6E43             >                org     $-1                 // alter last byte of Name just above to set
 169+ 6E42 D4          >                db      {b $} | END_BIT     // msb as name end
 169+ 6E43             >
 169+ 6E43 2E 6E       >                dw      last_NFA            // Link to previous definition Name
 169+ 6E45             >CURRENT:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 169+ 6E45 F5 6C       >                dw      User_Ptr ; ok        // for primitive definitions  actual code
 169+ 6E47             >                else
 169+ 6E47 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 169+ 6E47             >                endif           ; ok        // for other definitions it "points" the correct handler
 169+ 6E47             >                // Use of "; ok" to suppress "warning[fwdref]"
 169+ 6E47             >
 169+ 6E47             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 169+ 6E47 2A          >                db      42
 170+ 6E48                              User_Def STATE      , "STATE"     , 44 // compilation status. 0 interpreting.
 170+ 6E48             >                New_Def  STATE, "STATE", User_Ptr, is_normal
 170+ 6E48             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 170+ 6E48             >
 170+ 6E48             >                // dummy db directives used to calculate length of namec
 170+ 6E48 53 54 41 54 >                db      "STATE"
 170+ 6E4C 45          >
 170+ 6E4D             >len_NFA         defl    $ - temp_NFA
 170+ 6E4D             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 170+ 6E48             >
 170+ 6E48 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 170+ 6E49 53 54 41 54 >                db      "STATE"               // name string in 7-bit ascii, but
 170+ 6E4D 45          >
 170+ 6E4E             >                org     $-1                 // alter last byte of Name just above to set
 170+ 6E4D C5          >                db      {b $} | END_BIT     // msb as name end
 170+ 6E4E             >
 170+ 6E4E 3B 6E       >                dw      last_NFA            // Link to previous definition Name
 170+ 6E50             >STATE:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 170+ 6E50 F5 6C       >                dw      User_Ptr ; ok        // for primitive definitions  actual code
 170+ 6E52             >                else
 170+ 6E52 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 170+ 6E52             >                endif           ; ok        // for other definitions it "points" the correct handler
 170+ 6E52             >                // Use of "; ok" to suppress "warning[fwdref]"
 170+ 6E52             >
 170+ 6E52             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 170+ 6E52 2C          >                db      44
 171+ 6E53                              User_Def BASE       , "BASE"      , 46 //
 171+ 6E53             >                New_Def  BASE, "BASE", User_Ptr, is_normal
 171+ 6E53             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 171+ 6E53             >
 171+ 6E53             >                // dummy db directives used to calculate length of namec
 171+ 6E53 42 41 53 45 >                db      "BASE"
 171+ 6E57             >len_NFA         defl    $ - temp_NFA
 171+ 6E57             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 171+ 6E53             >
 171+ 6E53 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 171+ 6E54 42 41 53 45 >                db      "BASE"               // name string in 7-bit ascii, but
 171+ 6E58             >                org     $-1                 // alter last byte of Name just above to set
 171+ 6E57 C5          >                db      {b $} | END_BIT     // msb as name end
 171+ 6E58             >
 171+ 6E58 48 6E       >                dw      last_NFA            // Link to previous definition Name
 171+ 6E5A             >BASE:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 171+ 6E5A F5 6C       >                dw      User_Ptr ; ok        // for primitive definitions  actual code
 171+ 6E5C             >                else
 171+ 6E5C ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 171+ 6E5C             >                endif           ; ok        // for other definitions it "points" the correct handler
 171+ 6E5C             >                // Use of "; ok" to suppress "warning[fwdref]"
 171+ 6E5C             >
 171+ 6E5C             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 171+ 6E5C 2E          >                db      46
 172+ 6E5D                              User_Def DPL        , "DPL"       , 48 // number of digits after decimal point in conversion
 172+ 6E5D             >                New_Def  DPL, "DPL", User_Ptr, is_normal
 172+ 6E5D             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 172+ 6E5D             >
 172+ 6E5D             >                // dummy db directives used to calculate length of namec
 172+ 6E5D 44 50 4C    >                db      "DPL"
 172+ 6E60             >len_NFA         defl    $ - temp_NFA
 172+ 6E60             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 172+ 6E5D             >
 172+ 6E5D 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 172+ 6E5E 44 50 4C    >                db      "DPL"               // name string in 7-bit ascii, but
 172+ 6E61             >                org     $-1                 // alter last byte of Name just above to set
 172+ 6E60 CC          >                db      {b $} | END_BIT     // msb as name end
 172+ 6E61             >
 172+ 6E61 53 6E       >                dw      last_NFA            // Link to previous definition Name
 172+ 6E63             >DPL:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 172+ 6E63 F5 6C       >                dw      User_Ptr ; ok        // for primitive definitions  actual code
 172+ 6E65             >                else
 172+ 6E65 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 172+ 6E65             >                endif           ; ok        // for other definitions it "points" the correct handler
 172+ 6E65             >                // Use of "; ok" to suppress "warning[fwdref]"
 172+ 6E65             >
 172+ 6E65             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 172+ 6E65 30          >                db      48
 173+ 6E66                              User_Def FLD        , "FLD"       , 50 // output field width
 173+ 6E66             >                New_Def  FLD, "FLD", User_Ptr, is_normal
 173+ 6E66             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 173+ 6E66             >
 173+ 6E66             >                // dummy db directives used to calculate length of namec
 173+ 6E66 46 4C 44    >                db      "FLD"
 173+ 6E69             >len_NFA         defl    $ - temp_NFA
 173+ 6E69             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 173+ 6E66             >
 173+ 6E66 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 173+ 6E67 46 4C 44    >                db      "FLD"               // name string in 7-bit ascii, but
 173+ 6E6A             >                org     $-1                 // alter last byte of Name just above to set
 173+ 6E69 C4          >                db      {b $} | END_BIT     // msb as name end
 173+ 6E6A             >
 173+ 6E6A 5D 6E       >                dw      last_NFA            // Link to previous definition Name
 173+ 6E6C             >FLD:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 173+ 6E6C F5 6C       >                dw      User_Ptr ; ok        // for primitive definitions  actual code
 173+ 6E6E             >                else
 173+ 6E6E ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 173+ 6E6E             >                endif           ; ok        // for other definitions it "points" the correct handler
 173+ 6E6E             >                // Use of "; ok" to suppress "warning[fwdref]"
 173+ 6E6E             >
 173+ 6E6E             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 173+ 6E6E 32          >                db      50
 174+ 6E6F                              User_Def CSP        , "CSP"       , 52 // used to temporary store Stack-Pointer value
 174+ 6E6F             >                New_Def  CSP, "CSP", User_Ptr, is_normal
 174+ 6E6F             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 174+ 6E6F             >
 174+ 6E6F             >                // dummy db directives used to calculate length of namec
 174+ 6E6F 43 53 50    >                db      "CSP"
 174+ 6E72             >len_NFA         defl    $ - temp_NFA
 174+ 6E72             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 174+ 6E6F             >
 174+ 6E6F 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 174+ 6E70 43 53 50    >                db      "CSP"               // name string in 7-bit ascii, but
 174+ 6E73             >                org     $-1                 // alter last byte of Name just above to set
 174+ 6E72 D0          >                db      {b $} | END_BIT     // msb as name end
 174+ 6E73             >
 174+ 6E73 66 6E       >                dw      last_NFA            // Link to previous definition Name
 174+ 6E75             >CSP:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 174+ 6E75 F5 6C       >                dw      User_Ptr ; ok        // for primitive definitions  actual code
 174+ 6E77             >                else
 174+ 6E77 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 174+ 6E77             >                endif           ; ok        // for other definitions it "points" the correct handler
 174+ 6E77             >                // Use of "; ok" to suppress "warning[fwdref]"
 174+ 6E77             >
 174+ 6E77             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 174+ 6E77 34          >                db      52
 175+ 6E78                              User_Def RSHARP     , "R#"        , 54 // location of editing cursor
 175+ 6E78             >                New_Def  RSHARP, "R#", User_Ptr, is_normal
 175+ 6E78             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 175+ 6E78             >
 175+ 6E78             >                // dummy db directives used to calculate length of namec
 175+ 6E78 52 23       >                db      "R#"
 175+ 6E7A             >len_NFA         defl    $ - temp_NFA
 175+ 6E7A             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 175+ 6E78             >
 175+ 6E78 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 175+ 6E79 52 23       >                db      "R#"               // name string in 7-bit ascii, but
 175+ 6E7B             >                org     $-1                 // alter last byte of Name just above to set
 175+ 6E7A A3          >                db      {b $} | END_BIT     // msb as name end
 175+ 6E7B             >
 175+ 6E7B 6F 6E       >                dw      last_NFA            // Link to previous definition Name
 175+ 6E7D             >RSHARP:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 175+ 6E7D F5 6C       >                dw      User_Ptr ; ok        // for primitive definitions  actual code
 175+ 6E7F             >                else
 175+ 6E7F ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 175+ 6E7F             >                endif           ; ok        // for other definitions it "points" the correct handler
 175+ 6E7F             >                // Use of "; ok" to suppress "warning[fwdref]"
 175+ 6E7F             >
 175+ 6E7F             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 175+ 6E7F 36          >                db      54
 176+ 6E80                              User_Def HLD        , "HLD"       , 56 // last character during a number conversion output
 176+ 6E80             >                New_Def  HLD, "HLD", User_Ptr, is_normal
 176+ 6E80             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 176+ 6E80             >
 176+ 6E80             >                // dummy db directives used to calculate length of namec
 176+ 6E80 48 4C 44    >                db      "HLD"
 176+ 6E83             >len_NFA         defl    $ - temp_NFA
 176+ 6E83             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 176+ 6E80             >
 176+ 6E80 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 176+ 6E81 48 4C 44    >                db      "HLD"               // name string in 7-bit ascii, but
 176+ 6E84             >                org     $-1                 // alter last byte of Name just above to set
 176+ 6E83 C4          >                db      {b $} | END_BIT     // msb as name end
 176+ 6E84             >
 176+ 6E84 78 6E       >                dw      last_NFA            // Link to previous definition Name
 176+ 6E86             >HLD:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 176+ 6E86 F5 6C       >                dw      User_Ptr ; ok        // for primitive definitions  actual code
 176+ 6E88             >                else
 176+ 6E88 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 176+ 6E88             >                endif           ; ok        // for other definitions it "points" the correct handler
 176+ 6E88             >                // Use of "; ok" to suppress "warning[fwdref]"
 176+ 6E88             >
 176+ 6E88             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 176+ 6E88 38          >                db      56
 177+ 6E89                              User_Def USE        , "USE"       , 58 // address of last used block
 177+ 6E89             >                New_Def  USE, "USE", User_Ptr, is_normal
 177+ 6E89             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 177+ 6E89             >
 177+ 6E89             >                // dummy db directives used to calculate length of namec
 177+ 6E89 55 53 45    >                db      "USE"
 177+ 6E8C             >len_NFA         defl    $ - temp_NFA
 177+ 6E8C             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 177+ 6E89             >
 177+ 6E89 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 177+ 6E8A 55 53 45    >                db      "USE"               // name string in 7-bit ascii, but
 177+ 6E8D             >                org     $-1                 // alter last byte of Name just above to set
 177+ 6E8C C5          >                db      {b $} | END_BIT     // msb as name end
 177+ 6E8D             >
 177+ 6E8D 80 6E       >                dw      last_NFA            // Link to previous definition Name
 177+ 6E8F             >USE:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 177+ 6E8F F5 6C       >                dw      User_Ptr ; ok        // for primitive definitions  actual code
 177+ 6E91             >                else
 177+ 6E91 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 177+ 6E91             >                endif           ; ok        // for other definitions it "points" the correct handler
 177+ 6E91             >                // Use of "; ok" to suppress "warning[fwdref]"
 177+ 6E91             >
 177+ 6E91             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 177+ 6E91 3A          >                db      58
 178+ 6E92                              User_Def PREV       , "PREV"      , 60 // address of previous used block
 178+ 6E92             >                New_Def  PREV, "PREV", User_Ptr, is_normal
 178+ 6E92             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 178+ 6E92             >
 178+ 6E92             >                // dummy db directives used to calculate length of namec
 178+ 6E92 50 52 45 56 >                db      "PREV"
 178+ 6E96             >len_NFA         defl    $ - temp_NFA
 178+ 6E96             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 178+ 6E92             >
 178+ 6E92 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 178+ 6E93 50 52 45 56 >                db      "PREV"               // name string in 7-bit ascii, but
 178+ 6E97             >                org     $-1                 // alter last byte of Name just above to set
 178+ 6E96 D6          >                db      {b $} | END_BIT     // msb as name end
 178+ 6E97             >
 178+ 6E97 89 6E       >                dw      last_NFA            // Link to previous definition Name
 178+ 6E99             >PREV:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 178+ 6E99 F5 6C       >                dw      User_Ptr ; ok        // for primitive definitions  actual code
 178+ 6E9B             >                else
 178+ 6E9B ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 178+ 6E9B             >                endif           ; ok        // for other definitions it "points" the correct handler
 178+ 6E9B             >                // Use of "; ok" to suppress "warning[fwdref]"
 178+ 6E9B             >
 178+ 6E9B             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 178+ 6E9B 3C          >                db      60
 179+ 6E9C                              User_Def LP         , "LP"        , 62 // line printer (not used)
 179+ 6E9C             >                New_Def  LP, "LP", User_Ptr, is_normal
 179+ 6E9C             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 179+ 6E9C             >
 179+ 6E9C             >                // dummy db directives used to calculate length of namec
 179+ 6E9C 4C 50       >                db      "LP"
 179+ 6E9E             >len_NFA         defl    $ - temp_NFA
 179+ 6E9E             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 179+ 6E9C             >
 179+ 6E9C 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 179+ 6E9D 4C 50       >                db      "LP"               // name string in 7-bit ascii, but
 179+ 6E9F             >                org     $-1                 // alter last byte of Name just above to set
 179+ 6E9E D0          >                db      {b $} | END_BIT     // msb as name end
 179+ 6E9F             >
 179+ 6E9F 92 6E       >                dw      last_NFA            // Link to previous definition Name
 179+ 6EA1             >LP:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 179+ 6EA1 F5 6C       >                dw      User_Ptr ; ok        // for primitive definitions  actual code
 179+ 6EA3             >                else
 179+ 6EA3 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 179+ 6EA3             >                endif           ; ok        // for other definitions it "points" the correct handler
 179+ 6EA3             >                // Use of "; ok" to suppress "warning[fwdref]"
 179+ 6EA3             >
 179+ 6EA3             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 179+ 6EA3 3E          >                db      62
 180+ 6EA4                              User_Def PLACE      , "PLACE"     , 64 // number of digits after decimal point in output
 180+ 6EA4             >                New_Def  PLACE, "PLACE", User_Ptr, is_normal
 180+ 6EA4             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 180+ 6EA4             >
 180+ 6EA4             >                // dummy db directives used to calculate length of namec
 180+ 6EA4 50 4C 41 43 >                db      "PLACE"
 180+ 6EA8 45          >
 180+ 6EA9             >len_NFA         defl    $ - temp_NFA
 180+ 6EA9             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 180+ 6EA4             >
 180+ 6EA4 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 180+ 6EA5 50 4C 41 43 >                db      "PLACE"               // name string in 7-bit ascii, but
 180+ 6EA9 45          >
 180+ 6EAA             >                org     $-1                 // alter last byte of Name just above to set
 180+ 6EA9 C5          >                db      {b $} | END_BIT     // msb as name end
 180+ 6EAA             >
 180+ 6EAA 9C 6E       >                dw      last_NFA            // Link to previous definition Name
 180+ 6EAC             >PLACE:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 180+ 6EAC F5 6C       >                dw      User_Ptr ; ok        // for primitive definitions  actual code
 180+ 6EAE             >                else
 180+ 6EAE ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 180+ 6EAE             >                endif           ; ok        // for other definitions it "points" the correct handler
 180+ 6EAE             >                // Use of "; ok" to suppress "warning[fwdref]"
 180+ 6EAE             >
 180+ 6EAE             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 180+ 6EAE 40          >                db      64
 181+ 6EAF                              User_Def SOURCE_ID  , "SOURCE-ID" , 66 // data-stream number in INCLUDE and LOAD-
 181+ 6EAF             >                New_Def  SOURCE_ID, "SOURCE-ID", User_Ptr, is_normal
 181+ 6EAF             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 181+ 6EAF             >
 181+ 6EAF             >                // dummy db directives used to calculate length of namec
 181+ 6EAF 53 4F 55 52 >                db      "SOURCE-ID"
 181+ 6EB3 43 45 2D 49 >
 181+ 6EB7 44          >
 181+ 6EB8             >len_NFA         defl    $ - temp_NFA
 181+ 6EB8             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 181+ 6EAF             >
 181+ 6EAF 89          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 181+ 6EB0 53 4F 55 52 >                db      "SOURCE-ID"               // name string in 7-bit ascii, but
 181+ 6EB4 43 45 2D 49 >
 181+ 6EB8 44          >
 181+ 6EB9             >                org     $-1                 // alter last byte of Name just above to set
 181+ 6EB8 C4          >                db      {b $} | END_BIT     // msb as name end
 181+ 6EB9             >
 181+ 6EB9 A4 6E       >                dw      last_NFA            // Link to previous definition Name
 181+ 6EBB             >SOURCE_ID:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 181+ 6EBB F5 6C       >                dw      User_Ptr ; ok        // for primitive definitions  actual code
 181+ 6EBD             >                else
 181+ 6EBD ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 181+ 6EBD             >                endif           ; ok        // for other definitions it "points" the correct handler
 181+ 6EBD             >                // Use of "; ok" to suppress "warning[fwdref]"
 181+ 6EBD             >
 181+ 6EBD             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 181+ 6EBD 42          >                db      66
 182+ 6EBE                              User_Def SPAN       , "SPAN"      , 68 // number of character of last EXPECT
 182+ 6EBE             >                New_Def  SPAN, "SPAN", User_Ptr, is_normal
 182+ 6EBE             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 182+ 6EBE             >
 182+ 6EBE             >                // dummy db directives used to calculate length of namec
 182+ 6EBE 53 50 41 4E >                db      "SPAN"
 182+ 6EC2             >len_NFA         defl    $ - temp_NFA
 182+ 6EC2             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 182+ 6EBE             >
 182+ 6EBE 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 182+ 6EBF 53 50 41 4E >                db      "SPAN"               // name string in 7-bit ascii, but
 182+ 6EC3             >                org     $-1                 // alter last byte of Name just above to set
 182+ 6EC2 CE          >                db      {b $} | END_BIT     // msb as name end
 182+ 6EC3             >
 182+ 6EC3 AF 6E       >                dw      last_NFA            // Link to previous definition Name
 182+ 6EC5             >SPAN:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 182+ 6EC5 F5 6C       >                dw      User_Ptr ; ok        // for primitive definitions  actual code
 182+ 6EC7             >                else
 182+ 6EC7 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 182+ 6EC7             >                endif           ; ok        // for other definitions it "points" the correct handler
 182+ 6EC7             >                // Use of "; ok" to suppress "warning[fwdref]"
 182+ 6EC7             >
 182+ 6EC7             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 182+ 6EC7 44          >                db      68
 183+ 6EC8                              User_Def HANDLER    , "HANDLER"   , 70 // Used by THROW-CATCH
 183+ 6EC8             >                New_Def  HANDLER, "HANDLER", User_Ptr, is_normal
 183+ 6EC8             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 183+ 6EC8             >
 183+ 6EC8             >                // dummy db directives used to calculate length of namec
 183+ 6EC8 48 41 4E 44 >                db      "HANDLER"
 183+ 6ECC 4C 45 52    >
 183+ 6ECF             >len_NFA         defl    $ - temp_NFA
 183+ 6ECF             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 183+ 6EC8             >
 183+ 6EC8 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 183+ 6EC9 48 41 4E 44 >                db      "HANDLER"               // name string in 7-bit ascii, but
 183+ 6ECD 4C 45 52    >
 183+ 6ED0             >                org     $-1                 // alter last byte of Name just above to set
 183+ 6ECF D2          >                db      {b $} | END_BIT     // msb as name end
 183+ 6ED0             >
 183+ 6ED0 BE 6E       >                dw      last_NFA            // Link to previous definition Name
 183+ 6ED2             >HANDLER:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 183+ 6ED2 F5 6C       >                dw      User_Ptr ; ok        // for primitive definitions  actual code
 183+ 6ED4             >                else
 183+ 6ED4 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 183+ 6ED4             >                endif           ; ok        // for other definitions it "points" the correct handler
 183+ 6ED4             >                // Use of "; ok" to suppress "warning[fwdref]"
 183+ 6ED4             >
 183+ 6ED4             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 183+ 6ED4 46          >                db      70
 184+ 6ED5                              User_Def HP         , "HP"        , 72 // heap-pointer address
 184+ 6ED5             >                New_Def  HP, "HP", User_Ptr, is_normal
 184+ 6ED5             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 184+ 6ED5             >
 184+ 6ED5             >                // dummy db directives used to calculate length of namec
 184+ 6ED5 48 50       >                db      "HP"
 184+ 6ED7             >len_NFA         defl    $ - temp_NFA
 184+ 6ED7             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 184+ 6ED5             >
 184+ 6ED5 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 184+ 6ED6 48 50       >                db      "HP"               // name string in 7-bit ascii, but
 184+ 6ED8             >                org     $-1                 // alter last byte of Name just above to set
 184+ 6ED7 D0          >                db      {b $} | END_BIT     // msb as name end
 184+ 6ED8             >
 184+ 6ED8 C8 6E       >                dw      last_NFA            // Link to previous definition Name
 184+ 6EDA             >HP:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 184+ 6EDA F5 6C       >                dw      User_Ptr ; ok        // for primitive definitions  actual code
 184+ 6EDC             >                else
 184+ 6EDC ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 184+ 6EDC             >                endif           ; ok        // for other definitions it "points" the correct handler
 184+ 6EDC             >                // Use of "; ok" to suppress "warning[fwdref]"
 184+ 6EDC             >
 184+ 6EDC             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 184+ 6EDC 48          >                db      72
 185+ 6EDD
 186+ 6EDD              //  ______________________________________________________________________
 187+ 6EDD              //
 188+ 6EDD              // here         -- a
 189+ 6EDD                              Colon_Def HERE, "HERE", is_normal
 189+ 6EDD             >                New_Def  HERE, "HERE", Enter_Ptr, is_normal ; ok
 189+ 6EDD             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 189+ 6EDD             >
 189+ 6EDD             >                // dummy db directives used to calculate length of namec
 189+ 6EDD 48 45 52 45 >                db      "HERE"
 189+ 6EE1             >len_NFA         defl    $ - temp_NFA
 189+ 6EE1             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 189+ 6EDD             >
 189+ 6EDD 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 189+ 6EDE 48 45 52 45 >                db      "HERE"               // name string in 7-bit ascii, but
 189+ 6EE2             >                org     $-1                 // alter last byte of Name just above to set
 189+ 6EE1 C5          >                db      {b $} | END_BIT     // msb as name end
 189+ 6EE2             >
 189+ 6EE2 D5 6E       >                dw      last_NFA            // Link to previous definition Name
 189+ 6EE4             >HERE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 189+ 6EE4 88 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 189+ 6EE6             >                else
 189+ 6EE6 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 189+ 6EE6             >                endif           ; ok        // for other definitions it "points" the correct handler
 189+ 6EE6             >                // Use of "; ok" to suppress "warning[fwdref]"
 189+ 6EE6             >
 189+ 6EE6             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 190+ 6EE6 C3 6D 9D 6B                  dw      DP, FETCH               // dp @
 191+ 6EEA A5 69                        dw      EXIT                    // ;
 192+ 6EEC
 193+ 6EEC              //  ______________________________________________________________________
 194+ 6EEC              //
 195+ 6EEC              // allot        n --
 196+ 6EEC                              Colon_Def ALLOT, "ALLOT", is_normal
 196+ 6EEC             >                New_Def  ALLOT, "ALLOT", Enter_Ptr, is_normal ; ok
 196+ 6EEC             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 196+ 6EEC             >
 196+ 6EEC             >                // dummy db directives used to calculate length of namec
 196+ 6EEC 41 4C 4C 4F >                db      "ALLOT"
 196+ 6EF0 54          >
 196+ 6EF1             >len_NFA         defl    $ - temp_NFA
 196+ 6EF1             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 196+ 6EEC             >
 196+ 6EEC 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 196+ 6EED 41 4C 4C 4F >                db      "ALLOT"               // name string in 7-bit ascii, but
 196+ 6EF1 54          >
 196+ 6EF2             >                org     $-1                 // alter last byte of Name just above to set
 196+ 6EF1 D4          >                db      {b $} | END_BIT     // msb as name end
 196+ 6EF2             >
 196+ 6EF2 DD 6E       >                dw      last_NFA            // Link to previous definition Name
 196+ 6EF4             >ALLOT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 196+ 6EF4 88 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 196+ 6EF6             >                else
 196+ 6EF6 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 196+ 6EF6             >                endif           ; ok        // for other definitions it "points" the correct handler
 196+ 6EF6             >                // Use of "; ok" to suppress "warning[fwdref]"
 196+ 6EF6             >
 196+ 6EF6             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 197+ 6EF6 C3 6D 7A 6B                  dw      DP,  PLUSSTORE          // dp +!
 198+ 6EFA A5 69                        dw      EXIT                    // ;
 199+ 6EFC
 200+ 6EFC              //  ______________________________________________________________________
 201+ 6EFC              //
 202+ 6EFC              // comma        n --
 203+ 6EFC                              Colon_Def COMMA, ",", is_normal
 203+ 6EFC             >                New_Def  COMMA, ",", Enter_Ptr, is_normal ; ok
 203+ 6EFC             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 203+ 6EFC             >
 203+ 6EFC             >                // dummy db directives used to calculate length of namec
 203+ 6EFC 2C          >                db      ","
 203+ 6EFD             >len_NFA         defl    $ - temp_NFA
 203+ 6EFD             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 203+ 6EFC             >
 203+ 6EFC 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 203+ 6EFD 2C          >                db      ","               // name string in 7-bit ascii, but
 203+ 6EFE             >                org     $-1                 // alter last byte of Name just above to set
 203+ 6EFD AC          >                db      {b $} | END_BIT     // msb as name end
 203+ 6EFE             >
 203+ 6EFE EC 6E       >                dw      last_NFA            // Link to previous definition Name
 203+ 6F00             >COMMA:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 203+ 6F00 88 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 203+ 6F02             >                else
 203+ 6F02 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 203+ 6F02             >                endif           ; ok        // for other definitions it "points" the correct handler
 203+ 6F02             >                // Use of "; ok" to suppress "warning[fwdref]"
 203+ 6F02             >
 203+ 6F02             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 204+ 6F02 E4 6E AA 6B                  dw      HERE, STORE             // here !
 205+ 6F06 15 6D F4 6E                  dw      TWO, ALLOT              // 2 allot
 206+ 6F0A A5 69                        dw      EXIT                    // ;
 207+ 6F0C
 208+ 6F0C              //  ______________________________________________________________________
 209+ 6F0C              //
 210+ 6F0C              // ccomma       c --
 211+ 6F0C                              Colon_Def CCOMMA, "C,", is_normal
 211+ 6F0C             >                New_Def  CCOMMA, "C,", Enter_Ptr, is_normal ; ok
 211+ 6F0C             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 211+ 6F0C             >
 211+ 6F0C             >                // dummy db directives used to calculate length of namec
 211+ 6F0C 43 2C       >                db      "C,"
 211+ 6F0E             >len_NFA         defl    $ - temp_NFA
 211+ 6F0E             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 211+ 6F0C             >
 211+ 6F0C 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 211+ 6F0D 43 2C       >                db      "C,"               // name string in 7-bit ascii, but
 211+ 6F0F             >                org     $-1                 // alter last byte of Name just above to set
 211+ 6F0E AC          >                db      {b $} | END_BIT     // msb as name end
 211+ 6F0F             >
 211+ 6F0F FC 6E       >                dw      last_NFA            // Link to previous definition Name
 211+ 6F11             >CCOMMA:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 211+ 6F11 88 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 211+ 6F13             >                else
 211+ 6F13 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 211+ 6F13             >                endif           ; ok        // for other definitions it "points" the correct handler
 211+ 6F13             >                // Use of "; ok" to suppress "warning[fwdref]"
 211+ 6F13             >
 211+ 6F13             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 212+ 6F13 E4 6E C6 6B                  dw      HERE, CSTORE            // here c!
 213+ 6F17 0D 6D F4 6E                  dw      ONE, ALLOT              // 1 allot
 214+ 6F1B A5 69                        dw      EXIT                    // ;
 215+ 6F1D
 216+ 6F1D              //  ______________________________________________________________________
 217+ 6F1D              //
 218+ 6F1D              // s>d          n -- d
 219+ 6F1D              // converts a single precision integer in a double precision
 220+ 6F1D                              New_Def S_TO_D, "S>D", is_code, is_normal
 220+ 6F1D             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 220+ 6F1D             >
 220+ 6F1D             >                // dummy db directives used to calculate length of namec
 220+ 6F1D 53 3E 44    >                db      "S>D"
 220+ 6F20             >len_NFA         defl    $ - temp_NFA
 220+ 6F20             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 220+ 6F1D             >
 220+ 6F1D 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 220+ 6F1E 53 3E 44    >                db      "S>D"               // name string in 7-bit ascii, but
 220+ 6F21             >                org     $-1                 // alter last byte of Name just above to set
 220+ 6F20 C4          >                db      {b $} | END_BIT     // msb as name end
 220+ 6F21             >
 220+ 6F21 0C 6F       >                dw      last_NFA            // Link to previous definition Name
 220+ 6F23             >S_TO_D:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 220+ 6F23 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
 220+ 6F23             >                else
 220+ 6F23 25 6F       >                dw      $ + 2   ; ok        // is pointed by CFA
 220+ 6F25             >                endif           ; ok        // for other definitions it "points" the correct handler
 220+ 6F25             >                // Use of "; ok" to suppress "warning[fwdref]"
 220+ 6F25             >
 220+ 6F25             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 221+ 6F25 D1                           pop     de
 222+ 6F26 21 00 00                     ld      hl, 0
 223+ 6F29 7A                           ld      a, d
 224+ 6F2A E6 80                        and     $80
 225+ 6F2C 28 01                        jr      z, S_to_D_Skip
 226+ 6F2E 2B                           dec     hl                  // $FFFF
 227+ 6F2F              S_to_D_Skip:
 228+ 6F2F D5                           push    de
 229+ 6F30 E5                           push    hl
 230+ 6F31                              next
 230+ 6F31 DD E9       >                jp      (ix)
 231+ 6F33
 232+ 6F33              //  ______________________________________________________________________
 233+ 6F33              //
 234+ 6F33              // -            n1 n2 -- n3
 235+ 6F33              // subtraction
 236+ 6F33                              New_Def SUBTRACT, "-", is_code, is_normal
 236+ 6F33             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 236+ 6F33             >
 236+ 6F33             >                // dummy db directives used to calculate length of namec
 236+ 6F33 2D          >                db      "-"
 236+ 6F34             >len_NFA         defl    $ - temp_NFA
 236+ 6F34             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 236+ 6F33             >
 236+ 6F33 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 236+ 6F34 2D          >                db      "-"               // name string in 7-bit ascii, but
 236+ 6F35             >                org     $-1                 // alter last byte of Name just above to set
 236+ 6F34 AD          >                db      {b $} | END_BIT     // msb as name end
 236+ 6F35             >
 236+ 6F35 1D 6F       >                dw      last_NFA            // Link to previous definition Name
 236+ 6F37             >SUBTRACT:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 236+ 6F37 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
 236+ 6F37             >                else
 236+ 6F37 39 6F       >                dw      $ + 2   ; ok        // is pointed by CFA
 236+ 6F39             >                endif           ; ok        // for other definitions it "points" the correct handler
 236+ 6F39             >                // Use of "; ok" to suppress "warning[fwdref]"
 236+ 6F39             >
 236+ 6F39             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 237+ 6F39 D1                           pop     de
 238+ 6F3A E1                           pop     hl
 239+ 6F3B A7                           and     a
 240+ 6F3C ED 52                        sbc     hl, de
 241+ 6F3E
 242+ 6F3E                              psh1
 242+ 6F3E E5          >                push    hl
 242+ 6F3F DD E9       >                jp      (ix)
 243+ 6F41
 244+ 6F41              //  ______________________________________________________________________
 245+ 6F41              //
 246+ 6F41              // =            n1 n2 -- n3
 247+ 6F41              // equals
 248+ 6F41                              Colon_Def EQUALS, "=", is_normal
 248+ 6F41             >                New_Def  EQUALS, "=", Enter_Ptr, is_normal ; ok
 248+ 6F41             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 248+ 6F41             >
 248+ 6F41             >                // dummy db directives used to calculate length of namec
 248+ 6F41 3D          >                db      "="
 248+ 6F42             >len_NFA         defl    $ - temp_NFA
 248+ 6F42             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 248+ 6F41             >
 248+ 6F41 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 248+ 6F42 3D          >                db      "="               // name string in 7-bit ascii, but
 248+ 6F43             >                org     $-1                 // alter last byte of Name just above to set
 248+ 6F42 BD          >                db      {b $} | END_BIT     // msb as name end
 248+ 6F43             >
 248+ 6F43 33 6F       >                dw      last_NFA            // Link to previous definition Name
 248+ 6F45             >EQUALS:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 248+ 6F45 88 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 248+ 6F47             >                else
 248+ 6F47 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 248+ 6F47             >                endif           ; ok        // for other definitions it "points" the correct handler
 248+ 6F47             >                // Use of "; ok" to suppress "warning[fwdref]"
 248+ 6F47             >
 248+ 6F47             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 249+ 6F47 37 6F E7 69                  dw      SUBTRACT, ZEQUAL        // - 0=
 250+ 6F4B A5 69                        dw      EXIT                    // ;
 251+ 6F4D
 252+ 6F4D              //  ______________________________________________________________________
 253+ 6F4D              //
 254+ 6F4D              // u<           u1 u2 -- u3
 255+ 6F4D              // unsigned less-than
 256+ 6F4D                              New_Def ULESS, "U<", is_code, is_normal
 256+ 6F4D             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 256+ 6F4D             >
 256+ 6F4D             >                // dummy db directives used to calculate length of namec
 256+ 6F4D 55 3C       >                db      "U<"
 256+ 6F4F             >len_NFA         defl    $ - temp_NFA
 256+ 6F4F             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 256+ 6F4D             >
 256+ 6F4D 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 256+ 6F4E 55 3C       >                db      "U<"               // name string in 7-bit ascii, but
 256+ 6F50             >                org     $-1                 // alter last byte of Name just above to set
 256+ 6F4F BC          >                db      {b $} | END_BIT     // msb as name end
 256+ 6F50             >
 256+ 6F50 41 6F       >                dw      last_NFA            // Link to previous definition Name
 256+ 6F52             >ULESS:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 256+ 6F52 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
 256+ 6F52             >                else
 256+ 6F52 54 6F       >                dw      $ + 2   ; ok        // is pointed by CFA
 256+ 6F54             >                endif           ; ok        // for other definitions it "points" the correct handler
 256+ 6F54             >                // Use of "; ok" to suppress "warning[fwdref]"
 256+ 6F54             >
 256+ 6F54             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 257+ 6F54 D1                           pop     de
 258+ 6F55 E1                           pop     hl
 259+ 6F56 A7                           and     a
 260+ 6F57 ED 52                        sbc     hl, de
 261+ 6F59 21 FF FF                     ld      hl, -1
 262+ 6F5C 38 01                        jr      c, ULess_Skip
 263+ 6F5E 23                               inc     hl
 264+ 6F5F              ULess_Skip:
 265+ 6F5F
 266+ 6F5F                              psh1
 266+ 6F5F E5          >                push    hl
 266+ 6F60 DD E9       >                jp      (ix)
 267+ 6F62
 268+ 6F62              //  ______________________________________________________________________
 269+ 6F62              //
 270+ 6F62              // <           n1 n2 -- n3
 271+ 6F62              // less-than
 272+ 6F62                              New_Def LESS, "<", is_code, is_normal
 272+ 6F62             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 272+ 6F62             >
 272+ 6F62             >                // dummy db directives used to calculate length of namec
 272+ 6F62 3C          >                db      "<"
 272+ 6F63             >len_NFA         defl    $ - temp_NFA
 272+ 6F63             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 272+ 6F62             >
 272+ 6F62 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 272+ 6F63 3C          >                db      "<"               // name string in 7-bit ascii, but
 272+ 6F64             >                org     $-1                 // alter last byte of Name just above to set
 272+ 6F63 BC          >                db      {b $} | END_BIT     // msb as name end
 272+ 6F64             >
 272+ 6F64 4D 6F       >                dw      last_NFA            // Link to previous definition Name
 272+ 6F66             >LESS:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 272+ 6F66 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
 272+ 6F66             >                else
 272+ 6F66 68 6F       >                dw      $ + 2   ; ok        // is pointed by CFA
 272+ 6F68             >                endif           ; ok        // for other definitions it "points" the correct handler
 272+ 6F68             >                // Use of "; ok" to suppress "warning[fwdref]"
 272+ 6F68             >
 272+ 6F68             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 273+ 6F68 D1                           pop     de
 274+ 6F69 E1                           pop     hl
 275+ 6F6A 7C                           ld      a, h
 276+ 6F6B EE 80                        xor     $80
 277+ 6F6D 67                           ld      h, a
 278+ 6F6E 7A                           ld      a, d
 279+ 6F6F EE 80                        xor     $80
 280+ 6F71 57                           ld      d, a
 281+ 6F72              //              and     a
 282+ 6F72 ED 52                        sbc     hl, de
 283+ 6F74 ED 62                        sbc     hl, hl
 284+ 6F76                              psh1
 284+ 6F76 E5          >                push    hl
 284+ 6F77 DD E9       >                jp      (ix)
 285+ 6F79
 286+ 6F79              //  ______________________________________________________________________
 287+ 6F79              //
 288+ 6F79              // >            n1 n2 -- n3
 289+ 6F79              // greater than
 290+ 6F79                              Colon_Def GREATER, ">", is_normal
 290+ 6F79             >                New_Def  GREATER, ">", Enter_Ptr, is_normal ; ok
 290+ 6F79             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 290+ 6F79             >
 290+ 6F79             >                // dummy db directives used to calculate length of namec
 290+ 6F79 3E          >                db      ">"
 290+ 6F7A             >len_NFA         defl    $ - temp_NFA
 290+ 6F7A             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 290+ 6F79             >
 290+ 6F79 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 290+ 6F7A 3E          >                db      ">"               // name string in 7-bit ascii, but
 290+ 6F7B             >                org     $-1                 // alter last byte of Name just above to set
 290+ 6F7A BE          >                db      {b $} | END_BIT     // msb as name end
 290+ 6F7B             >
 290+ 6F7B 62 6F       >                dw      last_NFA            // Link to previous definition Name
 290+ 6F7D             >GREATER:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 290+ 6F7D 88 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 290+ 6F7F             >                else
 290+ 6F7F ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 290+ 6F7F             >                endif           ; ok        // for other definitions it "points" the correct handler
 290+ 6F7F             >                // Use of "; ok" to suppress "warning[fwdref]"
 290+ 6F7F             >
 290+ 6F7F             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 291+ 6F7F FD 6A 66 6F                  dw      SWAP, LESS              // swap <
 292+ 6F83 A5 69                        dw      EXIT                    // ;
 293+ 6F85              //  ______________________________________________________________________
 294+ 6F85              //
 295+ 6F85              // min          n1 n2 -- n3
 296+ 6F85              // minimum between n1 and n2
 297+ 6F85                              Colon_Def MIN, "MIN" , is_normal
 297+ 6F85             >                New_Def  MIN, "MIN", Enter_Ptr, is_normal ; ok
 297+ 6F85             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 297+ 6F85             >
 297+ 6F85             >                // dummy db directives used to calculate length of namec
 297+ 6F85 4D 49 4E    >                db      "MIN"
 297+ 6F88             >len_NFA         defl    $ - temp_NFA
 297+ 6F88             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 297+ 6F85             >
 297+ 6F85 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 297+ 6F86 4D 49 4E    >                db      "MIN"               // name string in 7-bit ascii, but
 297+ 6F89             >                org     $-1                 // alter last byte of Name just above to set
 297+ 6F88 CE          >                db      {b $} | END_BIT     // msb as name end
 297+ 6F89             >
 297+ 6F89 79 6F       >                dw      last_NFA            // Link to previous definition Name
 297+ 6F8B             >MIN:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 297+ 6F8B 88 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 297+ 6F8D             >                else
 297+ 6F8D ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 297+ 6F8D             >                endif           ; ok        // for other definitions it "points" the correct handler
 297+ 6F8D             >                // Use of "; ok" to suppress "warning[fwdref]"
 297+ 6F8D             >
 297+ 6F8D             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 298+ 6F8D 6B 6B                        dw      TWO_DUP                 // 2dup
 299+ 6F8F 7D 6F                        dw      GREATER                 // >
 300+ 6F91 2C 64                        dw      ZBRANCH
 301+ 6F93 04 00                        dw      Min_Skip - $   // if
 302+ 6F95 FD 6A                        dw          SWAP                //      swap
 303+ 6F97              Min_Skip:                                       // endif
 304+ 6F97 D5 6A                        dw      DROP                    // drop
 305+ 6F99 A5 69                        dw      EXIT                    // ;
 306+ 6F9B
 307+ 6F9B              //  ______________________________________________________________________
 308+ 6F9B              //
 309+ 6F9B              // max          n1 n2 -- n3
 310+ 6F9B              // maximum between n1 and n2
 311+ 6F9B                              Colon_Def MAX, "MAX", is_normal
 311+ 6F9B             >                New_Def  MAX, "MAX", Enter_Ptr, is_normal ; ok
 311+ 6F9B             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 311+ 6F9B             >
 311+ 6F9B             >                // dummy db directives used to calculate length of namec
 311+ 6F9B 4D 41 58    >                db      "MAX"
 311+ 6F9E             >len_NFA         defl    $ - temp_NFA
 311+ 6F9E             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 311+ 6F9B             >
 311+ 6F9B 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 311+ 6F9C 4D 41 58    >                db      "MAX"               // name string in 7-bit ascii, but
 311+ 6F9F             >                org     $-1                 // alter last byte of Name just above to set
 311+ 6F9E D8          >                db      {b $} | END_BIT     // msb as name end
 311+ 6F9F             >
 311+ 6F9F 85 6F       >                dw      last_NFA            // Link to previous definition Name
 311+ 6FA1             >MAX:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 311+ 6FA1 88 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 311+ 6FA3             >                else
 311+ 6FA3 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 311+ 6FA3             >                endif           ; ok        // for other definitions it "points" the correct handler
 311+ 6FA3             >                // Use of "; ok" to suppress "warning[fwdref]"
 311+ 6FA3             >
 311+ 6FA3             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 312+ 6FA3 6B 6B                        dw      TWO_DUP                 // 2dup
 313+ 6FA5 66 6F                        dw      LESS                    // <
 314+ 6FA7 2C 64                        dw      ZBRANCH
 315+ 6FA9 04 00                        dw      Max_Skip - $   // if
 316+ 6FAB FD 6A                        dw          SWAP                //      swap
 317+ 6FAD              Max_Skip:                                       // endif
 318+ 6FAD D5 6A                        dw      DROP                    // drop
 319+ 6FAF A5 69                        dw      EXIT                    // ;
 320+ 6FB1
 321+ 6FB1              //  ______________________________________________________________________
 322+ 6FB1              //
 323+ 6FB1              // ?dup         n -- 0 | n n
 324+ 6FB1              // duplicate if not zero
 325+ 6FB1                              New_Def QDUP, "?DUP", is_code, is_normal
 325+ 6FB1             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 325+ 6FB1             >
 325+ 6FB1             >                // dummy db directives used to calculate length of namec
 325+ 6FB1 3F 44 55 50 >                db      "?DUP"
 325+ 6FB5             >len_NFA         defl    $ - temp_NFA
 325+ 6FB5             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 325+ 6FB1             >
 325+ 6FB1 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 325+ 6FB2 3F 44 55 50 >                db      "?DUP"               // name string in 7-bit ascii, but
 325+ 6FB6             >                org     $-1                 // alter last byte of Name just above to set
 325+ 6FB5 D0          >                db      {b $} | END_BIT     // msb as name end
 325+ 6FB6             >
 325+ 6FB6 9B 6F       >                dw      last_NFA            // Link to previous definition Name
 325+ 6FB8             >QDUP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 325+ 6FB8 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
 325+ 6FB8             >                else
 325+ 6FB8 BA 6F       >                dw      $ + 2   ; ok        // is pointed by CFA
 325+ 6FBA             >                endif           ; ok        // for other definitions it "points" the correct handler
 325+ 6FBA             >                // Use of "; ok" to suppress "warning[fwdref]"
 325+ 6FBA             >
 325+ 6FBA             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 326+ 6FBA              QDup_Ptr:
 327+ 6FBA E1                           pop     hl
 328+ 6FBB 7C                           ld      a, h
 329+ 6FBC B5                           or      l
 330+ 6FBD 28 01                        jr      z, QDup_Skip
 331+ 6FBF E5                               push    hl
 332+ 6FC0              QDup_Skip:
 333+ 6FC0                              psh1
 333+ 6FC0 E5          >                push    hl
 333+ 6FC1 DD E9       >                jp      (ix)
 334+ 6FC3
 335+ 6FC3              //  ______________________________________________________________________
 336+ 6FC3              //
 337+ 6FC3              // -dup         n -- 0 | n n
 338+ 6FC3              // duplicate if not zero
 339+ 6FC3                              New_Def LDUP, "-DUP", QDup_Ptr, is_normal
 339+ 6FC3             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 339+ 6FC3             >
 339+ 6FC3             >                // dummy db directives used to calculate length of namec
 339+ 6FC3 2D 44 55 50 >                db      "-DUP"
 339+ 6FC7             >len_NFA         defl    $ - temp_NFA
 339+ 6FC7             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 339+ 6FC3             >
 339+ 6FC3 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 339+ 6FC4 2D 44 55 50 >                db      "-DUP"               // name string in 7-bit ascii, but
 339+ 6FC8             >                org     $-1                 // alter last byte of Name just above to set
 339+ 6FC7 D0          >                db      {b $} | END_BIT     // msb as name end
 339+ 6FC8             >
 339+ 6FC8 B1 6F       >                dw      last_NFA            // Link to previous definition Name
 339+ 6FCA             >LDUP:          if QDup_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 339+ 6FCA BA 6F       >                dw      QDup_Ptr ; ok        // for primitive definitions  actual code
 339+ 6FCC             >                else
 339+ 6FCC ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 339+ 6FCC             >                endif           ; ok        // for other definitions it "points" the correct handler
 339+ 6FCC             >                // Use of "; ok" to suppress "warning[fwdref]"
 339+ 6FCC             >
 339+ 6FCC             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 340+ 6FCC
 341+ 6FCC              //  ______________________________________________________________________
 342+ 6FCC              //
 343+ 6FCC              // emit         c --
 344+ 6FCC                              Colon_Def EMIT, "EMIT", is_normal
 344+ 6FCC             >                New_Def  EMIT, "EMIT", Enter_Ptr, is_normal ; ok
 344+ 6FCC             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 344+ 6FCC             >
 344+ 6FCC             >                // dummy db directives used to calculate length of namec
 344+ 6FCC 45 4D 49 54 >                db      "EMIT"
 344+ 6FD0             >len_NFA         defl    $ - temp_NFA
 344+ 6FD0             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 344+ 6FCC             >
 344+ 6FCC 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 344+ 6FCD 45 4D 49 54 >                db      "EMIT"               // name string in 7-bit ascii, but
 344+ 6FD1             >                org     $-1                 // alter last byte of Name just above to set
 344+ 6FD0 D4          >                db      {b $} | END_BIT     // msb as name end
 344+ 6FD1             >
 344+ 6FD1 C3 6F       >                dw      last_NFA            // Link to previous definition Name
 344+ 6FD3             >EMIT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 344+ 6FD3 88 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 344+ 6FD5             >                else
 344+ 6FD5 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 344+ 6FD5             >                endif           ; ok        // for other definitions it "points" the correct handler
 344+ 6FD5             >                // Use of "; ok" to suppress "warning[fwdref]"
 344+ 6FD5             >
 344+ 6FD5             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 345+ 6FD5 52 66                        dw      C_EMIT                      // (?emit)
 346+ 6FD7 B8 6F                        dw      QDUP                        // ?dup
 347+ 6FD9                                                                  // if
 348+ 6FD9 2C 64                        dw      ZBRANCH
 349+ 6FDB 0A 00                        dw      Emit_Skip - $
 350+ 6FDD 13 66                        dw          EMITC                   //      emitc
 351+ 6FDF 0D 6D                        dw          ONE                     //      1
 352+ 6FE1 16 6E 7A 6B                  dw          OUT, PLUSSTORE        //      out +!
 353+ 6FE5              Emit_Skip:                                          // endif
 354+ 6FE5 A5 69                        dw      EXIT                        // ;
 355+ 6FE7
 356+ 6FE7              //  ______________________________________________________________________
 357+ 6FE7              //
 358+ 6FE7              // space        --
 359+ 6FE7                              Colon_Def SPACE, "SPACE", is_normal
 359+ 6FE7             >                New_Def  SPACE, "SPACE", Enter_Ptr, is_normal ; ok
 359+ 6FE7             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 359+ 6FE7             >
 359+ 6FE7             >                // dummy db directives used to calculate length of namec
 359+ 6FE7 53 50 41 43 >                db      "SPACE"
 359+ 6FEB 45          >
 359+ 6FEC             >len_NFA         defl    $ - temp_NFA
 359+ 6FEC             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 359+ 6FE7             >
 359+ 6FE7 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 359+ 6FE8 53 50 41 43 >                db      "SPACE"               // name string in 7-bit ascii, but
 359+ 6FEC 45          >
 359+ 6FED             >                org     $-1                 // alter last byte of Name just above to set
 359+ 6FEC C5          >                db      {b $} | END_BIT     // msb as name end
 359+ 6FED             >
 359+ 6FED CC 6F       >                dw      last_NFA            // Link to previous definition Name
 359+ 6FEF             >SPACE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 359+ 6FEF 88 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 359+ 6FF1             >                else
 359+ 6FF1 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 359+ 6FF1             >                endif           ; ok        // for other definitions it "points" the correct handler
 359+ 6FF1             >                // Use of "; ok" to suppress "warning[fwdref]"
 359+ 6FF1             >
 359+ 6FF1             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 360+ 6FF1 2F 6D D3 6F                  dw      BL, EMIT                // bl emit
 361+ 6FF5 A5 69                        dw      EXIT                    // ;
 362+ 6FF7
 363+ 6FF7              //  ______________________________________________________________________
 364+ 6FF7              //
 365+ 6FF7              // traverse     a n -- a
 366+ 6FF7              // A dictionary entry is structured as follows
 367+ 6FF7              // NFA: +0   one byte of word-length (n<32) | some flags (immediate, smudge) | $80
 368+ 6FF7              //      +1   word name, last character is toggled with $80
 369+ 6FF7              // LFA: +1+n link to NFA ofprevious  dictionary entry.
 370+ 6FF7              // CFA: +3+n routine address. Colon definitions here have pointer to code
 371+ 6FF7              // PFA: +5+n "is_code", definitions have no PFA.
 372+ 6FF7              //
 373+ 6FF7                              Colon_Def TRAVERSE, "TRAVERSE", is_normal
 373+ 6FF7             >                New_Def  TRAVERSE, "TRAVERSE", Enter_Ptr, is_normal ; ok
 373+ 6FF7             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 373+ 6FF7             >
 373+ 6FF7             >                // dummy db directives used to calculate length of namec
 373+ 6FF7 54 52 41 56 >                db      "TRAVERSE"
 373+ 6FFB 45 52 53 45 >
 373+ 6FFF             >len_NFA         defl    $ - temp_NFA
 373+ 6FFF             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 373+ 6FF7             >
 373+ 6FF7 88          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 373+ 6FF8 54 52 41 56 >                db      "TRAVERSE"               // name string in 7-bit ascii, but
 373+ 6FFC 45 52 53 45 >
 373+ 7000             >                org     $-1                 // alter last byte of Name just above to set
 373+ 6FFF C5          >                db      {b $} | END_BIT     // msb as name end
 373+ 7000             >
 373+ 7000 E7 6F       >                dw      last_NFA            // Link to previous definition Name
 373+ 7002             >TRAVERSE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 373+ 7002 88 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 373+ 7004             >                else
 373+ 7004 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 373+ 7004             >                endif           ; ok        // for other definitions it "points" the correct handler
 373+ 7004             >                // Use of "; ok" to suppress "warning[fwdref]"
 373+ 7004             >
 373+ 7004             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 374+ 7004 FD 6A                        dw      SWAP                    // swap
 375+ 7006              Traverse_Begin:                                 // begin
 376+ 7006 C5 6A 2A 6A                  dw          OVER, PLUS          //      over +
 377+ 700A A9 63 7F 00                  dw          LIT, 127            //      127
 378+ 700E C5 6A B8 6B                  dw          OVER, CFETCH        //      over @
 379+ 7012 66 6F                        dw          LESS                //      <
 380+ 7014                                                              // until
 381+ 7014 2C 64                        dw      ZBRANCH
 382+ 7016 F0 FF                        dw      Traverse_Begin - $
 383+ 7018 E0 6A                        dw      NIP                     //  nip
 384+ 701A A5 69                        dw      EXIT                    //  ;
 385+ 701C
 386+ 701C              //  ______________________________________________________________________
 387+ 701C              //
 388+ 701C              // latest       -- nfa
 389+ 701C                              Colon_Def LATEST, "LATEST", is_normal
 389+ 701C             >                New_Def  LATEST, "LATEST", Enter_Ptr, is_normal ; ok
 389+ 701C             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 389+ 701C             >
 389+ 701C             >                // dummy db directives used to calculate length of namec
 389+ 701C 4C 41 54 45 >                db      "LATEST"
 389+ 7020 53 54       >
 389+ 7022             >len_NFA         defl    $ - temp_NFA
 389+ 7022             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 389+ 701C             >
 389+ 701C 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 389+ 701D 4C 41 54 45 >                db      "LATEST"               // name string in 7-bit ascii, but
 389+ 7021 53 54       >
 389+ 7023             >                org     $-1                 // alter last byte of Name just above to set
 389+ 7022 D4          >                db      {b $} | END_BIT     // msb as name end
 389+ 7023             >
 389+ 7023 F7 6F       >                dw      last_NFA            // Link to previous definition Name
 389+ 7025             >LATEST:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 389+ 7025 88 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 389+ 7027             >                else
 389+ 7027 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 389+ 7027             >                endif           ; ok        // for other definitions it "points" the correct handler
 389+ 7027             >                // Use of "; ok" to suppress "warning[fwdref]"
 389+ 7027             >
 389+ 7027             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 390+ 7027 45 6E                        dw      CURRENT                 // current
 391+ 7029 9D 6B 9D 6B                  dw      FETCH, FETCH            // @ @
 392+ 702D A5 69                        dw      EXIT                    // ;
 393+ 702F
 394+ 702F              //  ______________________________________________________________________
 395+ 702F              //
 396+ 702F              // lfa          pfa -- lfa
 397+ 702F                              Colon_Def LFA, "LFA", is_normal
 397+ 702F             >                New_Def  LFA, "LFA", Enter_Ptr, is_normal ; ok
 397+ 702F             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 397+ 702F             >
 397+ 702F             >                // dummy db directives used to calculate length of namec
 397+ 702F 4C 46 41    >                db      "LFA"
 397+ 7032             >len_NFA         defl    $ - temp_NFA
 397+ 7032             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 397+ 702F             >
 397+ 702F 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 397+ 7030 4C 46 41    >                db      "LFA"               // name string in 7-bit ascii, but
 397+ 7033             >                org     $-1                 // alter last byte of Name just above to set
 397+ 7032 C1          >                db      {b $} | END_BIT     // msb as name end
 397+ 7033             >
 397+ 7033 1C 70       >                dw      last_NFA            // Link to previous definition Name
 397+ 7035             >LFA:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 397+ 7035 88 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 397+ 7037             >                else
 397+ 7037 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 397+ 7037             >                endif           ; ok        // for other definitions it "points" the correct handler
 397+ 7037             >                // Use of "; ok" to suppress "warning[fwdref]"
 397+ 7037             >
 397+ 7037             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 398+ 7037 7D 6A                        dw      CELL_MINUS              // cell-
 399+ 7039 7D 6A                        dw      CELL_MINUS              // cell-
 400+ 703B A5 69                        dw      EXIT                    // ;
 401+ 703D
 402+ 703D              //  ______________________________________________________________________
 403+ 703D              //
 404+ 703D              // cfa          pfa -- cfa
 405+ 703D                              Colon_Def CFA, "CFA", is_normal
 405+ 703D             >                New_Def  CFA, "CFA", Enter_Ptr, is_normal ; ok
 405+ 703D             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 405+ 703D             >
 405+ 703D             >                // dummy db directives used to calculate length of namec
 405+ 703D 43 46 41    >                db      "CFA"
 405+ 7040             >len_NFA         defl    $ - temp_NFA
 405+ 7040             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 405+ 703D             >
 405+ 703D 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 405+ 703E 43 46 41    >                db      "CFA"               // name string in 7-bit ascii, but
 405+ 7041             >                org     $-1                 // alter last byte of Name just above to set
 405+ 7040 C1          >                db      {b $} | END_BIT     // msb as name end
 405+ 7041             >
 405+ 7041 2F 70       >                dw      last_NFA            // Link to previous definition Name
 405+ 7043             >CFA:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 405+ 7043 88 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 405+ 7045             >                else
 405+ 7045 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 405+ 7045             >                endif           ; ok        // for other definitions it "points" the correct handler
 405+ 7045             >                // Use of "; ok" to suppress "warning[fwdref]"
 405+ 7045             >
 405+ 7045             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 406+ 7045 7D 6A                        dw      CELL_MINUS              // cell-
 407+ 7047 A5 69                        dw      EXIT                    // ;
 408+ 7049
 409+ 7049              //  ______________________________________________________________________
 410+ 7049              //
 411+ 7049              // nfa          pfa -- nfa
 412+ 7049                              Colon_Def NFA, "NFA", is_normal
 412+ 7049             >                New_Def  NFA, "NFA", Enter_Ptr, is_normal ; ok
 412+ 7049             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 412+ 7049             >
 412+ 7049             >                // dummy db directives used to calculate length of namec
 412+ 7049 4E 46 41    >                db      "NFA"
 412+ 704C             >len_NFA         defl    $ - temp_NFA
 412+ 704C             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 412+ 7049             >
 412+ 7049 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 412+ 704A 4E 46 41    >                db      "NFA"               // name string in 7-bit ascii, but
 412+ 704D             >                org     $-1                 // alter last byte of Name just above to set
 412+ 704C C1          >                db      {b $} | END_BIT     // msb as name end
 412+ 704D             >
 412+ 704D 3D 70       >                dw      last_NFA            // Link to previous definition Name
 412+ 704F             >NFA:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 412+ 704F 88 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 412+ 7051             >                else
 412+ 7051 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 412+ 7051             >                endif           ; ok        // for other definitions it "points" the correct handler
 412+ 7051             >                // Use of "; ok" to suppress "warning[fwdref]"
 412+ 7051             >
 412+ 7051             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 413+ 7051 A9 63 05 00                  dw      LIT, 5                  // 5
 414+ 7055 37 6F                        dw      SUBTRACT                // -
 415+ 7057 26 6D                        dw      NEG_ONE                 // -1
 416+ 7059 02 70                        dw      TRAVERSE                // traverse
 417+ 705B A5 69                        dw      EXIT                    // ;
 418+ 705D
 419+ 705D              //  ______________________________________________________________________
 420+ 705D              //
 421+ 705D              // pfa          nfa -- pfa
 422+ 705D                              Colon_Def PFA, "PFA", is_normal
 422+ 705D             >                New_Def  PFA, "PFA", Enter_Ptr, is_normal ; ok
 422+ 705D             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 422+ 705D             >
 422+ 705D             >                // dummy db directives used to calculate length of namec
 422+ 705D 50 46 41    >                db      "PFA"
 422+ 7060             >len_NFA         defl    $ - temp_NFA
 422+ 7060             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 422+ 705D             >
 422+ 705D 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 422+ 705E 50 46 41    >                db      "PFA"               // name string in 7-bit ascii, but
 422+ 7061             >                org     $-1                 // alter last byte of Name just above to set
 422+ 7060 C1          >                db      {b $} | END_BIT     // msb as name end
 422+ 7061             >
 422+ 7061 49 70       >                dw      last_NFA            // Link to previous definition Name
 422+ 7063             >PFA:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 422+ 7063 88 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 422+ 7065             >                else
 422+ 7065 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 422+ 7065             >                endif           ; ok        // for other definitions it "points" the correct handler
 422+ 7065             >                // Use of "; ok" to suppress "warning[fwdref]"
 422+ 7065             >
 422+ 7065             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 423+ 7065 0D 6D                        dw      ONE                     // 1
 424+ 7067 02 70                        dw      TRAVERSE                // traverse
 425+ 7069 A9 63 05 00                  dw      LIT, 5                  // 6
 426+ 706D 2A 6A                        dw      PLUS                    // +
 427+ 706F A5 69                        dw      EXIT                    // ;
 428+ 7071
 429+ 7071              //  ______________________________________________________________________
 430+ 7071              //
 431+ 7071              // >body        cfa -- pfa
 432+ 7071                              Colon_Def TO_BODY, ">BODY", is_normal
 432+ 7071             >                New_Def  TO_BODY, ">BODY", Enter_Ptr, is_normal ; ok
 432+ 7071             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 432+ 7071             >
 432+ 7071             >                // dummy db directives used to calculate length of namec
 432+ 7071 3E 42 4F 44 >                db      ">BODY"
 432+ 7075 59          >
 432+ 7076             >len_NFA         defl    $ - temp_NFA
 432+ 7076             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 432+ 7071             >
 432+ 7071 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 432+ 7072 3E 42 4F 44 >                db      ">BODY"               // name string in 7-bit ascii, but
 432+ 7076 59          >
 432+ 7077             >                org     $-1                 // alter last byte of Name just above to set
 432+ 7076 D9          >                db      {b $} | END_BIT     // msb as name end
 432+ 7077             >
 432+ 7077 5D 70       >                dw      last_NFA            // Link to previous definition Name
 432+ 7079             >TO_BODY:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 432+ 7079 88 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 432+ 707B             >                else
 432+ 707B ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 432+ 707B             >                endif           ; ok        // for other definitions it "points" the correct handler
 432+ 707B             >                // Use of "; ok" to suppress "warning[fwdref]"
 432+ 707B             >
 432+ 707B             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 433+ 707B 73 6A                        dw      CELL_PLUS               // cell+
 434+ 707D A5 69                        dw      EXIT                    // ;
 435+ 707F
 436+ 707F              //  ______________________________________________________________________
 437+ 707F              //
 438+ 707F              // <name        cfa -- nfa
 439+ 707F                              Colon_Def TO_NAME, "<NAME", is_normal
 439+ 707F             >                New_Def  TO_NAME, "<NAME", Enter_Ptr, is_normal ; ok
 439+ 707F             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 439+ 707F             >
 439+ 707F             >                // dummy db directives used to calculate length of namec
 439+ 707F 3C 4E 41 4D >                db      "<NAME"
 439+ 7083 45          >
 439+ 7084             >len_NFA         defl    $ - temp_NFA
 439+ 7084             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 439+ 707F             >
 439+ 707F 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 439+ 7080 3C 4E 41 4D >                db      "<NAME"               // name string in 7-bit ascii, but
 439+ 7084 45          >
 439+ 7085             >                org     $-1                 // alter last byte of Name just above to set
 439+ 7084 C5          >                db      {b $} | END_BIT     // msb as name end
 439+ 7085             >
 439+ 7085 71 70       >                dw      last_NFA            // Link to previous definition Name
 439+ 7087             >TO_NAME:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 439+ 7087 88 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 439+ 7089             >                else
 439+ 7089 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 439+ 7089             >                endif           ; ok        // for other definitions it "points" the correct handler
 439+ 7089             >                // Use of "; ok" to suppress "warning[fwdref]"
 439+ 7089             >
 439+ 7089             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 440+ 7089 79 70                        dw      TO_BODY                 // >body
 441+ 708B 4F 70                        dw      NFA                     // nfa
 442+ 708D A5 69                        dw      EXIT                    // ;
 443+ 708F
 444+ 708F              //  ______________________________________________________________________
 445+ 708F              //
 446+ 708F              // !csp         --
 447+ 708F              // store in user variable CSP current value of SP. Used at compile-time for syntax checkng
 448+ 708F                              Colon_Def STORE_CSP, "!CSP", is_normal
 448+ 708F             >                New_Def  STORE_CSP, "!CSP", Enter_Ptr, is_normal ; ok
 448+ 708F             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 448+ 708F             >
 448+ 708F             >                // dummy db directives used to calculate length of namec
 448+ 708F 21 43 53 50 >                db      "!CSP"
 448+ 7093             >len_NFA         defl    $ - temp_NFA
 448+ 7093             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 448+ 708F             >
 448+ 708F 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 448+ 7090 21 43 53 50 >                db      "!CSP"               // name string in 7-bit ascii, but
 448+ 7094             >                org     $-1                 // alter last byte of Name just above to set
 448+ 7093 D0          >                db      {b $} | END_BIT     // msb as name end
 448+ 7094             >
 448+ 7094 7F 70       >                dw      last_NFA            // Link to previous definition Name
 448+ 7096             >STORE_CSP:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 448+ 7096 88 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 448+ 7098             >                else
 448+ 7098 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 448+ 7098             >                endif           ; ok        // for other definitions it "points" the correct handler
 448+ 7098             >                // Use of "; ok" to suppress "warning[fwdref]"
 448+ 7098             >
 448+ 7098             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 449+ 7098 6D 69                        dw      SPFETCH                 // sp@
 450+ 709A 75 6E AA 6B                  dw      CSP, STORE              // csp !
 451+ 709E A5 69                        dw      EXIT                    // ;
 452+ 70A0
 453+ 70A0              //  ______________________________________________________________________
 454+ 70A0              //
 455+ 70A0              // ?error       f n --
 456+ 70A0              // rase error n if flag f it true
 457+ 70A0                              Colon_Def QERROR, "?ERROR", is_normal
 457+ 70A0             >                New_Def  QERROR, "?ERROR", Enter_Ptr, is_normal ; ok
 457+ 70A0             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 457+ 70A0             >
 457+ 70A0             >                // dummy db directives used to calculate length of namec
 457+ 70A0 3F 45 52 52 >                db      "?ERROR"
 457+ 70A4 4F 52       >
 457+ 70A6             >len_NFA         defl    $ - temp_NFA
 457+ 70A6             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 457+ 70A0             >
 457+ 70A0 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 457+ 70A1 3F 45 52 52 >                db      "?ERROR"               // name string in 7-bit ascii, but
 457+ 70A5 4F 52       >
 457+ 70A7             >                org     $-1                 // alter last byte of Name just above to set
 457+ 70A6 D2          >                db      {b $} | END_BIT     // msb as name end
 457+ 70A7             >
 457+ 70A7 8F 70       >                dw      last_NFA            // Link to previous definition Name
 457+ 70A9             >QERROR:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 457+ 70A9 88 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 457+ 70AB             >                else
 457+ 70AB ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 457+ 70AB             >                endif           ; ok        // for other definitions it "points" the correct handler
 457+ 70AB             >                // Use of "; ok" to suppress "warning[fwdref]"
 457+ 70AB             >
 457+ 70AB             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 458+ 70AB FD 6A                        dw      SWAP                    // swap
 459+ 70AD                                                              // if
 460+ 70AD 2C 64                        dw      ZBRANCH
 461+ 70AF 08 00                        dw      QError_Else - $
 462+ 70B1 12 76                        dw          ERROR               //      error  ( is a forward-ref )
 463+ 70B3                                                              // else
 464+ 70B3 15 64                        dw      BRANCH
 465+ 70B5 04 00                        dw      QError_Endif - $
 466+ 70B7              QError_Else:
 467+ 70B7 D5 6A                        dw          DROP                //      drop
 468+ 70B9              QError_Endif:                                   // endif
 469+ 70B9 A5 69                        dw      EXIT                    // ;
 470+ 70BB
 471+ 70BB              //  ______________________________________________________________________
 472+ 70BB              //
 473+ 70BB              // ?comp       --
 474+ 70BB              // raise msg #17 if not compiling
 475+ 70BB                              Colon_Def QCOMP, "?COMP", is_normal
 475+ 70BB             >                New_Def  QCOMP, "?COMP", Enter_Ptr, is_normal ; ok
 475+ 70BB             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 475+ 70BB             >
 475+ 70BB             >                // dummy db directives used to calculate length of namec
 475+ 70BB 3F 43 4F 4D >                db      "?COMP"
 475+ 70BF 50          >
 475+ 70C0             >len_NFA         defl    $ - temp_NFA
 475+ 70C0             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 475+ 70BB             >
 475+ 70BB 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 475+ 70BC 3F 43 4F 4D >                db      "?COMP"               // name string in 7-bit ascii, but
 475+ 70C0 50          >
 475+ 70C1             >                org     $-1                 // alter last byte of Name just above to set
 475+ 70C0 D0          >                db      {b $} | END_BIT     // msb as name end
 475+ 70C1             >
 475+ 70C1 A0 70       >                dw      last_NFA            // Link to previous definition Name
 475+ 70C3             >QCOMP:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 475+ 70C3 88 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 475+ 70C5             >                else
 475+ 70C5 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 475+ 70C5             >                endif           ; ok        // for other definitions it "points" the correct handler
 475+ 70C5             >                // Use of "; ok" to suppress "warning[fwdref]"
 475+ 70C5             >
 475+ 70C5             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 476+ 70C5 50 6E 9D 6B                  dw      STATE, FETCH            // state @
 477+ 70C9 E7 69                        dw      ZEQUAL                  // 0=
 478+ 70CB A9 63 11 00                  dw      LIT, 17                 // 17  ( can't be executed )
 479+ 70CF A9 70                        dw      QERROR                  // ?error
 480+ 70D1 A5 69                        dw      EXIT                    // ;
 481+ 70D3
 482+ 70D3              //  ______________________________________________________________________
 483+ 70D3              //
 484+ 70D3              // ?exec       --
 485+ 70D3              // raise msg #18 if compiling
 486+ 70D3                              Colon_Def QEXEC, "?EXEC", is_normal
 486+ 70D3             >                New_Def  QEXEC, "?EXEC", Enter_Ptr, is_normal ; ok
 486+ 70D3             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 486+ 70D3             >
 486+ 70D3             >                // dummy db directives used to calculate length of namec
 486+ 70D3 3F 45 58 45 >                db      "?EXEC"
 486+ 70D7 43          >
 486+ 70D8             >len_NFA         defl    $ - temp_NFA
 486+ 70D8             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 486+ 70D3             >
 486+ 70D3 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 486+ 70D4 3F 45 58 45 >                db      "?EXEC"               // name string in 7-bit ascii, but
 486+ 70D8 43          >
 486+ 70D9             >                org     $-1                 // alter last byte of Name just above to set
 486+ 70D8 C3          >                db      {b $} | END_BIT     // msb as name end
 486+ 70D9             >
 486+ 70D9 BB 70       >                dw      last_NFA            // Link to previous definition Name
 486+ 70DB             >QEXEC:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 486+ 70DB 88 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 486+ 70DD             >                else
 486+ 70DD ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 486+ 70DD             >                endif           ; ok        // for other definitions it "points" the correct handler
 486+ 70DD             >                // Use of "; ok" to suppress "warning[fwdref]"
 486+ 70DD             >
 486+ 70DD             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 487+ 70DD 50 6E 9D 6B                  dw      STATE, FETCH            // state @
 488+ 70E1 A9 63 12 00                  dw      LIT, 18                 // 18  ( can't be compiled )
 489+ 70E5 A9 70                        dw      QERROR                  // ?error
 490+ 70E7 A5 69                        dw      EXIT                    // ;
 491+ 70E9
 492+ 70E9              //  ______________________________________________________________________
 493+ 70E9              //
 494+ 70E9              // ?pairs       n1 n2 --
 495+ 70E9              // raise msg #19 if n1 != n2. Compiler pushes some placeholder to stack for syntax checking
 496+ 70E9                              Colon_Def QPAIRS, "?PAIRS", is_normal
 496+ 70E9             >                New_Def  QPAIRS, "?PAIRS", Enter_Ptr, is_normal ; ok
 496+ 70E9             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 496+ 70E9             >
 496+ 70E9             >                // dummy db directives used to calculate length of namec
 496+ 70E9 3F 50 41 49 >                db      "?PAIRS"
 496+ 70ED 52 53       >
 496+ 70EF             >len_NFA         defl    $ - temp_NFA
 496+ 70EF             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 496+ 70E9             >
 496+ 70E9 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 496+ 70EA 3F 50 41 49 >                db      "?PAIRS"               // name string in 7-bit ascii, but
 496+ 70EE 52 53       >
 496+ 70F0             >                org     $-1                 // alter last byte of Name just above to set
 496+ 70EF D3          >                db      {b $} | END_BIT     // msb as name end
 496+ 70F0             >
 496+ 70F0 D3 70       >                dw      last_NFA            // Link to previous definition Name
 496+ 70F2             >QPAIRS:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 496+ 70F2 88 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 496+ 70F4             >                else
 496+ 70F4 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 496+ 70F4             >                endif           ; ok        // for other definitions it "points" the correct handler
 496+ 70F4             >                // Use of "; ok" to suppress "warning[fwdref]"
 496+ 70F4             >
 496+ 70F4             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 497+ 70F4 37 6F                        dw      SUBTRACT                // -
 498+ 70F6 A9 63 13 00                  dw      LIT, 19                 // 18  ( syntax error )
 499+ 70FA A9 70                        dw      QERROR                  // ?error
 500+ 70FC A5 69                        dw      EXIT                    // ;
 501+ 70FE
 502+ 70FE              //  ______________________________________________________________________
 503+ 70FE              //
 504+ 70FE              // ?csp       --
 505+ 70FE              // raise msg #20 if surrent SP in not what previously saved in CSP.
 506+ 70FE              // Compiler relies on that for  syntax checking of structures
 507+ 70FE                              Colon_Def QCSP, "?CSP", is_normal
 507+ 70FE             >                New_Def  QCSP, "?CSP", Enter_Ptr, is_normal ; ok
 507+ 70FE             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 507+ 70FE             >
 507+ 70FE             >                // dummy db directives used to calculate length of namec
 507+ 70FE 3F 43 53 50 >                db      "?CSP"
 507+ 7102             >len_NFA         defl    $ - temp_NFA
 507+ 7102             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 507+ 70FE             >
 507+ 70FE 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 507+ 70FF 3F 43 53 50 >                db      "?CSP"               // name string in 7-bit ascii, but
 507+ 7103             >                org     $-1                 // alter last byte of Name just above to set
 507+ 7102 D0          >                db      {b $} | END_BIT     // msb as name end
 507+ 7103             >
 507+ 7103 E9 70       >                dw      last_NFA            // Link to previous definition Name
 507+ 7105             >QCSP:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 507+ 7105 88 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 507+ 7107             >                else
 507+ 7107 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 507+ 7107             >                endif           ; ok        // for other definitions it "points" the correct handler
 507+ 7107             >                // Use of "; ok" to suppress "warning[fwdref]"
 507+ 7107             >
 507+ 7107             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 508+ 7107 6D 69                        dw      SPFETCH                 // sp@
 509+ 7109 75 6E 9D 6B                  dw      CSP, FETCH              // csp @
 510+ 710D 37 6F                        dw      SUBTRACT                // -
 511+ 710F A9 63 14 00                  dw      LIT, 20                 // 20  ( bad definition end )
 512+ 7113 A9 70                        dw      QERROR                  // ?error
 513+ 7115 A5 69                        dw      EXIT                    // ;
 514+ 7117
 515+ 7117              //  ______________________________________________________________________
 516+ 7117              //
 517+ 7117              // ?loading      --
 518+ 7117              // raise msg #22 if not loading
 519+ 7117                              Colon_Def QLOADING, "?LOADING", is_normal
 519+ 7117             >                New_Def  QLOADING, "?LOADING", Enter_Ptr, is_normal ; ok
 519+ 7117             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 519+ 7117             >
 519+ 7117             >                // dummy db directives used to calculate length of namec
 519+ 7117 3F 4C 4F 41 >                db      "?LOADING"
 519+ 711B 44 49 4E 47 >
 519+ 711F             >len_NFA         defl    $ - temp_NFA
 519+ 711F             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 519+ 7117             >
 519+ 7117 88          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 519+ 7118 3F 4C 4F 41 >                db      "?LOADING"               // name string in 7-bit ascii, but
 519+ 711C 44 49 4E 47 >
 519+ 7120             >                org     $-1                 // alter last byte of Name just above to set
 519+ 711F C7          >                db      {b $} | END_BIT     // msb as name end
 519+ 7120             >
 519+ 7120 FE 70       >                dw      last_NFA            // Link to previous definition Name
 519+ 7122             >QLOADING:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 519+ 7122 88 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 519+ 7124             >                else
 519+ 7124 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 519+ 7124             >                endif           ; ok        // for other definitions it "points" the correct handler
 519+ 7124             >                // Use of "; ok" to suppress "warning[fwdref]"
 519+ 7124             >
 519+ 7124             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 520+ 7124 04 6E 9D 6B                  dw      BLK, FETCH              // blk @
 521+ 7128 E7 69                        dw      ZEQUAL                  // 0=
 522+ 712A A9 63 16 00                  dw      LIT, 22                 // 22  ( aren't loading now )
 523+ 712E A9 70                        dw      QERROR                  // ?error
 524+ 7130 A5 69                        dw      EXIT                    // ;
 525+ 7132
 526+ 7132              //  ______________________________________________________________________
 527+ 7132              //
 528+ 7132              // compile      --
 529+ 7132              // compiles the following word
 530+ 7132                              Colon_Def COMPILE, "COMPILE", is_normal
 530+ 7132             >                New_Def  COMPILE, "COMPILE", Enter_Ptr, is_normal ; ok
 530+ 7132             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 530+ 7132             >
 530+ 7132             >                // dummy db directives used to calculate length of namec
 530+ 7132 43 4F 4D 50 >                db      "COMPILE"
 530+ 7136 49 4C 45    >
 530+ 7139             >len_NFA         defl    $ - temp_NFA
 530+ 7139             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 530+ 7132             >
 530+ 7132 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 530+ 7133 43 4F 4D 50 >                db      "COMPILE"               // name string in 7-bit ascii, but
 530+ 7137 49 4C 45    >
 530+ 713A             >                org     $-1                 // alter last byte of Name just above to set
 530+ 7139 C5          >                db      {b $} | END_BIT     // msb as name end
 530+ 713A             >
 530+ 713A 17 71       >                dw      last_NFA            // Link to previous definition Name
 530+ 713C             >COMPILE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 530+ 713C 88 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 530+ 713E             >                else
 530+ 713E ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 530+ 713E             >                endif           ; ok        // for other definitions it "points" the correct handler
 530+ 713E             >                // Use of "; ok" to suppress "warning[fwdref]"
 530+ 713E             >
 530+ 713E             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 531+ 713E C3 70                        dw      QCOMP                   // ?comp
 532+ 7140 CC 69                        dw      R_TO                    // r>
 533+ 7142 0A 6B 73 6A                  dw      DUP, CELL_PLUS          // dup, cell+
 534+ 7146 B8 69                        dw      TO_R                    // >r
 535+ 7148 9D 6B 00 6F                  dw      FETCH, COMMA            // @ ,
 536+ 714C A5 69                        dw      EXIT                    // ;
 537+ 714E
 538+ 714E              //  ______________________________________________________________________
 539+ 714E              //
 540+ 714E              // compile,     --
 541+ 714E              // compiles the following word
 542+ 714E                              Colon_Def COMPILE_XT, "COMPILE,", is_normal
 542+ 714E             >                New_Def  COMPILE_XT, "COMPILE,", Enter_Ptr, is_normal ; ok
 542+ 714E             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 542+ 714E             >
 542+ 714E             >                // dummy db directives used to calculate length of namec
 542+ 714E 43 4F 4D 50 >                db      "COMPILE,"
 542+ 7152 49 4C 45 2C >
 542+ 7156             >len_NFA         defl    $ - temp_NFA
 542+ 7156             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 542+ 714E             >
 542+ 714E 88          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 542+ 714F 43 4F 4D 50 >                db      "COMPILE,"               // name string in 7-bit ascii, but
 542+ 7153 49 4C 45 2C >
 542+ 7157             >                org     $-1                 // alter last byte of Name just above to set
 542+ 7156 AC          >                db      {b $} | END_BIT     // msb as name end
 542+ 7157             >
 542+ 7157 32 71       >                dw      last_NFA            // Link to previous definition Name
 542+ 7159             >COMPILE_XT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 542+ 7159 88 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 542+ 715B             >                else
 542+ 715B ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 542+ 715B             >                endif           ; ok        // for other definitions it "points" the correct handler
 542+ 715B             >                // Use of "; ok" to suppress "warning[fwdref]"
 542+ 715B             >
 542+ 715B             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 543+ 715B C3 70                        dw      QCOMP                   // ?comp
 544+ 715D 00 6F                        dw      COMMA                   // ,
 545+ 715F A5 69                        dw      EXIT                    // ;
 546+ 7161
 547+ 7161              //  ______________________________________________________________________
 548+ 7161              //
 549+ 7161              // [            --
 550+ 7161              // stop compilation
 551+ 7161                              Colon_Def SQUARED_OPEN, "[", is_immediate
 551+ 7161             >                New_Def  SQUARED_OPEN, "[", Enter_Ptr, is_immediate ; ok
 551+ 7161             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 551+ 7161             >
 551+ 7161             >                // dummy db directives used to calculate length of namec
 551+ 7161 5B          >                db      "["
 551+ 7162             >len_NFA         defl    $ - temp_NFA
 551+ 7162             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 551+ 7161             >
 551+ 7161 C1          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 551+ 7162 5B          >                db      "["               // name string in 7-bit ascii, but
 551+ 7163             >                org     $-1                 // alter last byte of Name just above to set
 551+ 7162 DB          >                db      {b $} | END_BIT     // msb as name end
 551+ 7163             >
 551+ 7163 4E 71       >                dw      last_NFA            // Link to previous definition Name
 551+ 7165             >SQUARED_OPEN:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 551+ 7165 88 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 551+ 7167             >                else
 551+ 7167 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 551+ 7167             >                endif           ; ok        // for other definitions it "points" the correct handler
 551+ 7167             >                // Use of "; ok" to suppress "warning[fwdref]"
 551+ 7167             >
 551+ 7167             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 552+ 7167 05 6D                        dw      ZERO                    // 0
 553+ 7169 50 6E AA 6B                  dw      STATE, STORE            // state !
 554+ 716D A5 69                        dw      EXIT                    // ; immediate
 555+ 716F
 556+ 716F              //  ______________________________________________________________________
 557+ 716F              //
 558+ 716F              // ]            --
 559+ 716F              // start compilation
 560+ 716F                              Colon_Def SQUARED_CLOSE, "]", is_normal
 560+ 716F             >                New_Def  SQUARED_CLOSE, "]", Enter_Ptr, is_normal ; ok
 560+ 716F             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 560+ 716F             >
 560+ 716F             >                // dummy db directives used to calculate length of namec
 560+ 716F 5D          >                db      "]"
 560+ 7170             >len_NFA         defl    $ - temp_NFA
 560+ 7170             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 560+ 716F             >
 560+ 716F 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 560+ 7170 5D          >                db      "]"               // name string in 7-bit ascii, but
 560+ 7171             >                org     $-1                 // alter last byte of Name just above to set
 560+ 7170 DD          >                db      {b $} | END_BIT     // msb as name end
 560+ 7171             >
 560+ 7171 61 71       >                dw      last_NFA            // Link to previous definition Name
 560+ 7173             >SQUARED_CLOSE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 560+ 7173 88 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 560+ 7175             >                else
 560+ 7175 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 560+ 7175             >                endif           ; ok        // for other definitions it "points" the correct handler
 560+ 7175             >                // Use of "; ok" to suppress "warning[fwdref]"
 560+ 7175             >
 560+ 7175             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 561+ 7175 A9 63 C0 00                  dw      LIT, $C0                // 192
 562+ 7179 50 6E AA 6B                  dw      STATE, STORE            // state !
 563+ 717D A5 69                        dw      EXIT                    // ;
 564+ 717F
 565+ 717F              //  ______________________________________________________________________
 566+ 717F              //
 567+ 717F              // smudge       --
 568+ 717F              // toggle smudge bit of latest definition
 569+ 717F                              Colon_Def SMUDGE, "SMUDGE", is_normal
 569+ 717F             >                New_Def  SMUDGE, "SMUDGE", Enter_Ptr, is_normal ; ok
 569+ 717F             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 569+ 717F             >
 569+ 717F             >                // dummy db directives used to calculate length of namec
 569+ 717F 53 4D 55 44 >                db      "SMUDGE"
 569+ 7183 47 45       >
 569+ 7185             >len_NFA         defl    $ - temp_NFA
 569+ 7185             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 569+ 717F             >
 569+ 717F 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 569+ 7180 53 4D 55 44 >                db      "SMUDGE"               // name string in 7-bit ascii, but
 569+ 7184 47 45       >
 569+ 7186             >                org     $-1                 // alter last byte of Name just above to set
 569+ 7185 C5          >                db      {b $} | END_BIT     // msb as name end
 569+ 7186             >
 569+ 7186 6F 71       >                dw      last_NFA            // Link to previous definition Name
 569+ 7188             >SMUDGE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 569+ 7188 88 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 569+ 718A             >                else
 569+ 718A ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 569+ 718A             >                endif           ; ok        // for other definitions it "points" the correct handler
 569+ 718A             >                // Use of "; ok" to suppress "warning[fwdref]"
 569+ 718A             >
 569+ 718A             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 570+ 718A 25 70                        dw      LATEST                  // latest
 571+ 718C A9 63 20 00                  dw      LIT, SMUDGE_BIT         // 32
 572+ 7190 90 6B                        dw      TOGGLE                  // toggle
 573+ 7192 A5 69                        dw      EXIT                    // ;
 574+ 7194
 575+ 7194              //  ______________________________________________________________________
 576+ 7194              //
 577+ 7194              // immediate    --
 578+ 7194              // make immediate the latest definition
 579+ 7194                              Colon_Def IMMEDIATE, "IMMEDIATE", is_normal
 579+ 7194             >                New_Def  IMMEDIATE, "IMMEDIATE", Enter_Ptr, is_normal ; ok
 579+ 7194             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 579+ 7194             >
 579+ 7194             >                // dummy db directives used to calculate length of namec
 579+ 7194 49 4D 4D 45 >                db      "IMMEDIATE"
 579+ 7198 44 49 41 54 >
 579+ 719C 45          >
 579+ 719D             >len_NFA         defl    $ - temp_NFA
 579+ 719D             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 579+ 7194             >
 579+ 7194 89          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 579+ 7195 49 4D 4D 45 >                db      "IMMEDIATE"               // name string in 7-bit ascii, but
 579+ 7199 44 49 41 54 >
 579+ 719D 45          >
 579+ 719E             >                org     $-1                 // alter last byte of Name just above to set
 579+ 719D C5          >                db      {b $} | END_BIT     // msb as name end
 579+ 719E             >
 579+ 719E 7F 71       >                dw      last_NFA            // Link to previous definition Name
 579+ 71A0             >IMMEDIATE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 579+ 71A0 88 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 579+ 71A2             >                else
 579+ 71A2 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 579+ 71A2             >                endif           ; ok        // for other definitions it "points" the correct handler
 579+ 71A2             >                // Use of "; ok" to suppress "warning[fwdref]"
 579+ 71A2             >
 579+ 71A2             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 580+ 71A2 25 70                        dw      LATEST                  // latest
 581+ 71A4 A9 63 40 00                  dw      LIT, $40                // 64
 582+ 71A8 90 6B                        dw      TOGGLE                  // toggle
 583+ 71AA A5 69                        dw      EXIT                    // ;
 584+ 71AC
 585+ 71AC              //  ______________________________________________________________________
 586+ 71AC              //
 587+ 71AC              // hex          --
 588+ 71AC              // change numeration base
 589+ 71AC                              Colon_Def HEX, "HEX", is_normal
 589+ 71AC             >                New_Def  HEX, "HEX", Enter_Ptr, is_normal ; ok
 589+ 71AC             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 589+ 71AC             >
 589+ 71AC             >                // dummy db directives used to calculate length of namec
 589+ 71AC 48 45 58    >                db      "HEX"
 589+ 71AF             >len_NFA         defl    $ - temp_NFA
 589+ 71AF             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 589+ 71AC             >
 589+ 71AC 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 589+ 71AD 48 45 58    >                db      "HEX"               // name string in 7-bit ascii, but
 589+ 71B0             >                org     $-1                 // alter last byte of Name just above to set
 589+ 71AF D8          >                db      {b $} | END_BIT     // msb as name end
 589+ 71B0             >
 589+ 71B0 94 71       >                dw      last_NFA            // Link to previous definition Name
 589+ 71B2             >HEX:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 589+ 71B2 88 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 589+ 71B4             >                else
 589+ 71B4 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 589+ 71B4             >                endif           ; ok        // for other definitions it "points" the correct handler
 589+ 71B4             >                // Use of "; ok" to suppress "warning[fwdref]"
 589+ 71B4             >
 589+ 71B4             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 590+ 71B4 A9 63 10 00                  dw      LIT, 16                 // 16
 591+ 71B8 5A 6E AA 6B                  dw      BASE, STORE             // base !
 592+ 71BC A5 69                        dw      EXIT                    // ;
 593+ 71BE
 594+ 71BE              //  ______________________________________________________________________
 595+ 71BE              //
 596+ 71BE              // decimal      --
 597+ 71BE              // change numeration base
 598+ 71BE                              Colon_Def DECIMAL, "DECIMAL", is_normal
 598+ 71BE             >                New_Def  DECIMAL, "DECIMAL", Enter_Ptr, is_normal ; ok
 598+ 71BE             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 598+ 71BE             >
 598+ 71BE             >                // dummy db directives used to calculate length of namec
 598+ 71BE 44 45 43 49 >                db      "DECIMAL"
 598+ 71C2 4D 41 4C    >
 598+ 71C5             >len_NFA         defl    $ - temp_NFA
 598+ 71C5             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 598+ 71BE             >
 598+ 71BE 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 598+ 71BF 44 45 43 49 >                db      "DECIMAL"               // name string in 7-bit ascii, but
 598+ 71C3 4D 41 4C    >
 598+ 71C6             >                org     $-1                 // alter last byte of Name just above to set
 598+ 71C5 CC          >                db      {b $} | END_BIT     // msb as name end
 598+ 71C6             >
 598+ 71C6 AC 71       >                dw      last_NFA            // Link to previous definition Name
 598+ 71C8             >DECIMAL:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 598+ 71C8 88 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 598+ 71CA             >                else
 598+ 71CA ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 598+ 71CA             >                endif           ; ok        // for other definitions it "points" the correct handler
 598+ 71CA             >                // Use of "; ok" to suppress "warning[fwdref]"
 598+ 71CA             >
 598+ 71CA             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 599+ 71CA A9 63 0A 00                  dw      LIT, 10                 // 10
 600+ 71CE 5A 6E AA 6B                  dw      BASE, STORE             // base !
 601+ 71D2 A5 69                        dw      EXIT                    // ;
 602+ 71D4
 603+ 71D4              //  ______________________________________________________________________
 604+ 71D4              //
 605+ 71D4              // (;code)       --
 606+ 71D4              // patch to CFA to call/jump to the "following code"
 607+ 71D4                              Colon_Def C_SEMICOLON_CODE, "(;CODE)", is_normal
 607+ 71D4             >                New_Def  C_SEMICOLON_CODE, "(;CODE)", Enter_Ptr, is_normal ; ok
 607+ 71D4             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 607+ 71D4             >
 607+ 71D4             >                // dummy db directives used to calculate length of namec
 607+ 71D4 28 3B 43 4F >                db      "(;CODE)"
 607+ 71D8 44 45 29    >
 607+ 71DB             >len_NFA         defl    $ - temp_NFA
 607+ 71DB             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 607+ 71D4             >
 607+ 71D4 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 607+ 71D5 28 3B 43 4F >                db      "(;CODE)"               // name string in 7-bit ascii, but
 607+ 71D9 44 45 29    >
 607+ 71DC             >                org     $-1                 // alter last byte of Name just above to set
 607+ 71DB A9          >                db      {b $} | END_BIT     // msb as name end
 607+ 71DC             >
 607+ 71DC BE 71       >                dw      last_NFA            // Link to previous definition Name
 607+ 71DE             >C_SEMICOLON_CODE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 607+ 71DE 88 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 607+ 71E0             >                else
 607+ 71E0 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 607+ 71E0             >                endif           ; ok        // for other definitions it "points" the correct handler
 607+ 71E0             >                // Use of "; ok" to suppress "warning[fwdref]"
 607+ 71E0             >
 607+ 71E0             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 608+ 71E0 CC 69                        dw      R_TO                    // r>       ( Return Stack has IP to caller's next cell )
 609+ 71E2 25 70                        dw      LATEST                  // latest   ( Word being defined in this moment )
 610+ 71E4 63 70 43 70                  dw      PFA, CFA                // pfa cfa  ( cfa of latest word )
 611+ 71E8
 612+ 71E8
 613+ 71E8
 614+ 71E8
 615+ 71E8
 616+ 71E8 AA 6B                        dw      STORE                   // !
 617+ 71EA A5 69                        dw      EXIT                    // ;
 618+ 71EC
 619+ 71EC              //  ______________________________________________________________________
 620+ 71EC              //
 621+ 71EC              // ;code        --
 622+ 71EC                              Colon_Def SEMICOLON_CODE, ";CODE", is_immediate
 622+ 71EC             >                New_Def  SEMICOLON_CODE, ";CODE", Enter_Ptr, is_immediate ; ok
 622+ 71EC             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 622+ 71EC             >
 622+ 71EC             >                // dummy db directives used to calculate length of namec
 622+ 71EC 3B 43 4F 44 >                db      ";CODE"
 622+ 71F0 45          >
 622+ 71F1             >len_NFA         defl    $ - temp_NFA
 622+ 71F1             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 622+ 71EC             >
 622+ 71EC C5          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 622+ 71ED 3B 43 4F 44 >                db      ";CODE"               // name string in 7-bit ascii, but
 622+ 71F1 45          >
 622+ 71F2             >                org     $-1                 // alter last byte of Name just above to set
 622+ 71F1 C5          >                db      {b $} | END_BIT     // msb as name end
 622+ 71F2             >
 622+ 71F2 D4 71       >                dw      last_NFA            // Link to previous definition Name
 622+ 71F4             >SEMICOLON_CODE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 622+ 71F4 88 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 622+ 71F6             >                else
 622+ 71F6 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 622+ 71F6             >                endif           ; ok        // for other definitions it "points" the correct handler
 622+ 71F6             >                // Use of "; ok" to suppress "warning[fwdref]"
 622+ 71F6             >
 622+ 71F6             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 623+ 71F6 05 71                        dw      QCSP                    // ?csp
 624+ 71F8 3C 71                        dw      COMPILE                 // compile
 625+ 71FA DE 71                        dw      C_SEMICOLON_CODE        // (;code)
 626+ 71FC 65 71                        dw      SQUARED_OPEN            // [
 627+ 71FE B0 6C                        dw      NOOP                    // noop () can be patched later to ASSEMBLER... )
 628+ 7200 A5 69                        dw      EXIT                    // ; immediate
 629+ 7202
 630+ 7202              //  ______________________________________________________________________
 631+ 7202              //
 632+ 7202              // <builds      --
 633+ 7202                              Colon_Def CBUILDS, "<BUILDS", is_normal
 633+ 7202             >                New_Def  CBUILDS, "<BUILDS", Enter_Ptr, is_normal ; ok
 633+ 7202             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 633+ 7202             >
 633+ 7202             >                // dummy db directives used to calculate length of namec
 633+ 7202 3C 42 55 49 >                db      "<BUILDS"
 633+ 7206 4C 44 53    >
 633+ 7209             >len_NFA         defl    $ - temp_NFA
 633+ 7209             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 633+ 7202             >
 633+ 7202 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 633+ 7203 3C 42 55 49 >                db      "<BUILDS"               // name string in 7-bit ascii, but
 633+ 7207 4C 44 53    >
 633+ 720A             >                org     $-1                 // alter last byte of Name just above to set
 633+ 7209 D3          >                db      {b $} | END_BIT     // msb as name end
 633+ 720A             >
 633+ 720A EC 71       >                dw      last_NFA            // Link to previous definition Name
 633+ 720C             >CBUILDS:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 633+ 720C 88 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 633+ 720E             >                else
 633+ 720E ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 633+ 720E             >                endif           ; ok        // for other definitions it "points" the correct handler
 633+ 720E             >                // Use of "; ok" to suppress "warning[fwdref]"
 633+ 720E             >
 633+ 720E             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 634+ 720E 05 6D                        dw      ZERO                    // 0
 635+ 7210 BF 6C                        dw      CONSTANT                // constant
 636+ 7212 A5 69                        dw      EXIT                    // ;
 637+ 7214
 638+ 7214              //  ______________________________________________________________________
 639+ 7214              //
 640+ 7214              // recurse      --
 641+ 7214              //              Colon_Def RECURSE, "RECURSE", is_immediate
 642+ 7214              //              dw      QCOMP                   // ?comp
 643+ 7214              //              dw      LATEST                  // latest
 644+ 7214              //              dw      PFA, CFA                // pfa cfa
 645+ 7214              //              dw      COMMA                   // ,
 646+ 7214              //              dw      EXIT                    // ; immediate
 647+ 7214
 648+ 7214              //  ______________________________________________________________________
 649+ 7214              //
 650+ 7214              // does>     --
 651+ 7214                              Colon_Def DOES_TO, "DOES>", is_normal
 651+ 7214             >                New_Def  DOES_TO, "DOES>", Enter_Ptr, is_normal ; ok
 651+ 7214             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 651+ 7214             >
 651+ 7214             >                // dummy db directives used to calculate length of namec
 651+ 7214 44 4F 45 53 >                db      "DOES>"
 651+ 7218 3E          >
 651+ 7219             >len_NFA         defl    $ - temp_NFA
 651+ 7219             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 651+ 7214             >
 651+ 7214 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 651+ 7215 44 4F 45 53 >                db      "DOES>"               // name string in 7-bit ascii, but
 651+ 7219 3E          >
 651+ 721A             >                org     $-1                 // alter last byte of Name just above to set
 651+ 7219 BE          >                db      {b $} | END_BIT     // msb as name end
 651+ 721A             >
 651+ 721A 02 72       >                dw      last_NFA            // Link to previous definition Name
 651+ 721C             >DOES_TO:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 651+ 721C 88 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 651+ 721E             >                else
 651+ 721E ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 651+ 721E             >                endif           ; ok        // for other definitions it "points" the correct handler
 651+ 721E             >                // Use of "; ok" to suppress "warning[fwdref]"
 651+ 721E             >
 651+ 721E             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 652+ 721E CC 69                        dw      R_TO                    // r>
 653+ 7220 25 70                        dw      LATEST                  // latest
 654+ 7222 63 70                        dw      PFA                     // pfa
 655+ 7224 AA 6B                        dw      STORE                   // !
 656+ 7226 DE 71                        dw      C_SEMICOLON_CODE        // ;code
 657+ 7228              Does_Ptr:
 658+ 7228                              // via call coded in CFA
 659+ 7228                              ldhlrp
 659+ 7228 2A 96 63    >                ld      hl,(RP_Pointer)
 660+ 722B 2B                           dec     hl                  // push on Return-Stack current Instruction-Pointer
 661+ 722C 70                           ld      (hl), b
 662+ 722D 2B                           dec     hl
 663+ 722E 71                           ld      (hl), c
 664+ 722F                              ldrphl
 664+ 722F 22 96 63    >                ld      (RP_Pointer),hl
 665+ 7232 13                           inc     de
 666+ 7233 EB                           ex      de, hl
 667+ 7234 4E                           ld      c, (hl)
 668+ 7235 23                           inc     hl
 669+ 7236 46                           ld      b, (hl)
 670+ 7237 23                           inc     hl
 671+ 7238
 672+ 7238                              psh1
 672+ 7238 E5          >                push    hl
 672+ 7239 DD E9       >                jp      (ix)
 673+ 723B                              // SMUDGE !
 674+ 723B
 675+ 723B              //  ______________________________________________________________________
 676+ 723B              //
 677+ 723B              // count        a -- a2 n
 678+ 723B              // expects a counted string at address a, returns string address and counter
 679+ 723B                              New_Def COUNT, "COUNT", is_code, is_normal
 679+ 723B             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 679+ 723B             >
 679+ 723B             >                // dummy db directives used to calculate length of namec
 679+ 723B 43 4F 55 4E >                db      "COUNT"
 679+ 723F 54          >
 679+ 7240             >len_NFA         defl    $ - temp_NFA
 679+ 7240             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 679+ 723B             >
 679+ 723B 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 679+ 723C 43 4F 55 4E >                db      "COUNT"               // name string in 7-bit ascii, but
 679+ 7240 54          >
 679+ 7241             >                org     $-1                 // alter last byte of Name just above to set
 679+ 7240 D4          >                db      {b $} | END_BIT     // msb as name end
 679+ 7241             >
 679+ 7241 14 72       >                dw      last_NFA            // Link to previous definition Name
 679+ 7243             >COUNT:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 679+ 7243 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
 679+ 7243             >                else
 679+ 7243 45 72       >                dw      $ + 2   ; ok        // is pointed by CFA
 679+ 7245             >                endif           ; ok        // for other definitions it "points" the correct handler
 679+ 7245             >                // Use of "; ok" to suppress "warning[fwdref]"
 679+ 7245             >
 679+ 7245             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 680+ 7245 E1                           pop     hl
 681+ 7246 5E                           ld      e, (hl)
 682+ 7247 16 00                        ld      d, 0
 683+ 7249 23                           inc     hl
 684+ 724A              Count_Ptr:
 685+ 724A E5                           push    hl
 686+ 724B D5                           push    de
 687+ 724C                              next
 687+ 724C DD E9       >                jp      (ix)
 688+ 724E
 689+ 724E
 690+ 724E              //  ______________________________________________________________________
 691+ 724E              //
 692+ 724E              // bounds       a n -- a+n n
 693+ 724E              // given an address and a length ( a n ) calculate the bound addresses
 694+ 724E              // suitable for DO-LOOP
 695+ 724E                              New_Def BOUNDS, "BOUNDS", is_code, is_normal
 695+ 724E             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 695+ 724E             >
 695+ 724E             >                // dummy db directives used to calculate length of namec
 695+ 724E 42 4F 55 4E >                db      "BOUNDS"
 695+ 7252 44 53       >
 695+ 7254             >len_NFA         defl    $ - temp_NFA
 695+ 7254             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 695+ 724E             >
 695+ 724E 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 695+ 724F 42 4F 55 4E >                db      "BOUNDS"               // name string in 7-bit ascii, but
 695+ 7253 44 53       >
 695+ 7255             >                org     $-1                 // alter last byte of Name just above to set
 695+ 7254 D3          >                db      {b $} | END_BIT     // msb as name end
 695+ 7255             >
 695+ 7255 3B 72       >                dw      last_NFA            // Link to previous definition Name
 695+ 7257             >BOUNDS:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 695+ 7257 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
 695+ 7257             >                else
 695+ 7257 59 72       >                dw      $ + 2   ; ok        // is pointed by CFA
 695+ 7259             >                endif           ; ok        // for other definitions it "points" the correct handler
 695+ 7259             >                // Use of "; ok" to suppress "warning[fwdref]"
 695+ 7259             >
 695+ 7259             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 696+ 7259 E1                           pop     hl
 697+ 725A D1                           pop     de
 698+ 725B 19                           add     hl, de
 699+ 725C 18 EC                        jr      Count_Ptr
 700+ 725E
 701+ 725E              //  ______________________________________________________________________
 702+ 725E              //
 703+ 725E              // type         a n --
 704+ 725E              // Sends to current output channel n characters starting at address a.
 705+ 725E                              Colon_Def TYPE, "TYPE", is_normal
 705+ 725E             >                New_Def  TYPE, "TYPE", Enter_Ptr, is_normal ; ok
 705+ 725E             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 705+ 725E             >
 705+ 725E             >                // dummy db directives used to calculate length of namec
 705+ 725E 54 59 50 45 >                db      "TYPE"
 705+ 7262             >len_NFA         defl    $ - temp_NFA
 705+ 7262             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 705+ 725E             >
 705+ 725E 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 705+ 725F 54 59 50 45 >                db      "TYPE"               // name string in 7-bit ascii, but
 705+ 7263             >                org     $-1                 // alter last byte of Name just above to set
 705+ 7262 C5          >                db      {b $} | END_BIT     // msb as name end
 705+ 7263             >
 705+ 7263 4E 72       >                dw      last_NFA            // Link to previous definition Name
 705+ 7265             >TYPE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 705+ 7265 88 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 705+ 7267             >                else
 705+ 7267 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 705+ 7267             >                endif           ; ok        // for other definitions it "points" the correct handler
 705+ 7267             >                // Use of "; ok" to suppress "warning[fwdref]"
 705+ 7267             >
 705+ 7267             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 706+ 7267 57 72                        dw      BOUNDS                  // bounds
 707+ 7269 59 64                        dw      C_Q_DO                  // ?do
 708+ 726B 0C 00                        dw      Type_Skip - $
 709+ 726D              Type_Loop:
 710+ 726D 90 64 B8 6B                  dw          I, CFETCH           //      i c@
 711+ 7271 D3 6F                        dw          EMIT                //      emit
 712+ 7273 04 64                        dw      C_LOOP                  // loop
 713+ 7275 F8 FF                        dw      Type_Loop - $
 714+ 7277              Type_Skip:
 715+ 7277 A5 69                        dw      EXIT                    // ;
 716+ 7279
 717+ 7279              //  ______________________________________________________________________
 718+ 7279              //
 719+ 7279              // leave        --
 720+ 7279              // Compile (leave) to leave current LOOP and jump just after it
 721+ 7279                              Colon_Def LEAVE, "LEAVE", is_immediate
 721+ 7279             >                New_Def  LEAVE, "LEAVE", Enter_Ptr, is_immediate ; ok
 721+ 7279             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 721+ 7279             >
 721+ 7279             >                // dummy db directives used to calculate length of namec
 721+ 7279 4C 45 41 56 >                db      "LEAVE"
 721+ 727D 45          >
 721+ 727E             >len_NFA         defl    $ - temp_NFA
 721+ 727E             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 721+ 7279             >
 721+ 7279 C5          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 721+ 727A 4C 45 41 56 >                db      "LEAVE"               // name string in 7-bit ascii, but
 721+ 727E 45          >
 721+ 727F             >                org     $-1                 // alter last byte of Name just above to set
 721+ 727E C5          >                db      {b $} | END_BIT     // msb as name end
 721+ 727F             >
 721+ 727F 5E 72       >                dw      last_NFA            // Link to previous definition Name
 721+ 7281             >LEAVE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 721+ 7281 88 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 721+ 7283             >                else
 721+ 7283 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 721+ 7283             >                endif           ; ok        // for other definitions it "points" the correct handler
 721+ 7283             >                // Use of "; ok" to suppress "warning[fwdref]"
 721+ 7283             >
 721+ 7283             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 722+ 7283 3C 71 41 64                  dw      COMPILE, C_LEAVE       // compile (leave)     \ unloop and branch
 723+ 7287 E4 6E B8 69                  dw      HERE, TO_R, ZERO, COMMA // here >r 0 ,
 723+ 728B 05 6D 00 6F
 724+ 728F 05 6D 05 6D                  dw      ZERO, ZERO
 725+ 7293 6D 69 0A 6B                  dw      SPFETCH, DUP
 726+ 7297 73 6A 73 6A                  dw      CELL_PLUS, CELL_PLUS
 727+ 729B ED 6A                        dw      TUCK
 728+ 729D 75 6E 9D 6B                  dw      CSP, FETCH
 729+ 72A1 FD 6A 37 6F                  dw      SWAP, SUBTRACT
 730+ 72A5 98 68                        dw      CMOVE
 731+ 72A7 75 6E 9D 6B                  dw      CSP, FETCH, CELL_MINUS
 731+ 72AB 7D 6A
 732+ 72AD CC 69 C5 6A                  dw      R_TO, OVER, STORE
 732+ 72B1 AA 6B
 733+ 72B3 7D 6A 05 6D                  dw      CELL_MINUS, ZERO
 734+ 72B7 FD 6A AA 6B                  dw      SWAP, STORE
 735+ 72BB A5 69                        dw      EXIT                    // ;
 736+ 72BD
 737+ 72BD              //  ______________________________________________________________________
 738+ 72BD              //
 739+ 72BD              // -trailing    a n1 -- a n2
 740+ 72BD              // Assumes that an n1 bytes-long string is stored at address a
 741+ 72BD              // and the string contains a space delimited word,
 742+ 72BD              // Finds n2 as the position of the first character after the word.
 743+ 72BD                              Colon_Def LTRAILING, "-TRAILING", is_normal
 743+ 72BD             >                New_Def  LTRAILING, "-TRAILING", Enter_Ptr, is_normal ; ok
 743+ 72BD             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 743+ 72BD             >
 743+ 72BD             >                // dummy db directives used to calculate length of namec
 743+ 72BD 2D 54 52 41 >                db      "-TRAILING"
 743+ 72C1 49 4C 49 4E >
 743+ 72C5 47          >
 743+ 72C6             >len_NFA         defl    $ - temp_NFA
 743+ 72C6             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 743+ 72BD             >
 743+ 72BD 89          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 743+ 72BE 2D 54 52 41 >                db      "-TRAILING"               // name string in 7-bit ascii, but
 743+ 72C2 49 4C 49 4E >
 743+ 72C6 47          >
 743+ 72C7             >                org     $-1                 // alter last byte of Name just above to set
 743+ 72C6 C7          >                db      {b $} | END_BIT     // msb as name end
 743+ 72C7             >
 743+ 72C7 79 72       >                dw      last_NFA            // Link to previous definition Name
 743+ 72C9             >LTRAILING:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 743+ 72C9 88 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 743+ 72CB             >                else
 743+ 72CB ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 743+ 72CB             >                endif           ; ok        // for other definitions it "points" the correct handler
 743+ 72CB             >                // Use of "; ok" to suppress "warning[fwdref]"
 743+ 72CB             >
 743+ 72CB             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 744+ 72CB 0A 6B 05 6D                  dw      DUP, ZERO               // dup 0
 745+ 72CF                                                              // do
 746+ 72CF 59 64                        dw      C_Q_DO
 747+ 72D1 20 00                        dw      LTrailing_Leave - $
 748+ 72D3              LTrailing_Loop:
 749+ 72D3 6B 6B 2A 6A                  dw          TWO_DUP, PLUS       //      2dup +
 750+ 72D7 57 6A                        dw          ONE_SUBTRACT        //      1-
 751+ 72D9 B8 6B                        dw          CFETCH              //      c@
 752+ 72DB 2F 6D 37 6F                  dw          BL, SUBTRACT        //      bl -
 753+ 72DF                                                              //      if
 754+ 72DF 2C 64                        dw          ZBRANCH
 755+ 72E1 0A 00                        dw          LTrailing_Else - $
 756+ 72E3 41 64                        dw              C_LEAVE         //          leave
 757+ 72E5 0C 00                        dw              LTrailing_Leave - $
 758+ 72E7 15 64                        dw          BRANCH              //      else
 759+ 72E9 04 00                        dw          LTrailing_Endif - $
 760+ 72EB              LTrailing_Else:
 761+ 72EB 57 6A                        dw              ONE_SUBTRACT    //          1-
 762+ 72ED              LTrailing_Endif:                                //      endif
 763+ 72ED                                                              // loop
 764+ 72ED 04 64                        dw      C_LOOP
 765+ 72EF E4 FF                        dw      LTrailing_Loop - $
 766+ 72F1              LTrailing_Leave:
 767+ 72F1 A5 69                        dw      EXIT                    // ;
 768+ 72F3
 769+ 72F3              //  ______________________________________________________________________
 770+ 72F3              //
 771+ 72F3              // accept       a n1 -- n2
 772+ 72F3              // Accepts at most n1 characters from terminal and stores them at address a
 773+ 72F3              // CR stops input. A 'nul' is added as trailer.
 774+ 72F3              // n2 is the string length. n2 is kept in span user variable also.
 775+ 72F3                              Colon_Def ACCEPT, "ACCEPT", is_normal
 775+ 72F3             >                New_Def  ACCEPT, "ACCEPT", Enter_Ptr, is_normal ; ok
 775+ 72F3             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 775+ 72F3             >
 775+ 72F3             >                // dummy db directives used to calculate length of namec
 775+ 72F3 41 43 43 45 >                db      "ACCEPT"
 775+ 72F7 50 54       >
 775+ 72F9             >len_NFA         defl    $ - temp_NFA
 775+ 72F9             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 775+ 72F3             >
 775+ 72F3 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 775+ 72F4 41 43 43 45 >                db      "ACCEPT"               // name string in 7-bit ascii, but
 775+ 72F8 50 54       >
 775+ 72FA             >                org     $-1                 // alter last byte of Name just above to set
 775+ 72F9 D4          >                db      {b $} | END_BIT     // msb as name end
 775+ 72FA             >
 775+ 72FA BD 72       >                dw      last_NFA            // Link to previous definition Name
 775+ 72FC             >ACCEPT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 775+ 72FC 88 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 775+ 72FE             >                else
 775+ 72FE ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 775+ 72FE             >                endif           ; ok        // for other definitions it "points" the correct handler
 775+ 72FE             >                // Use of "; ok" to suppress "warning[fwdref]"
 775+ 72FE             >
 775+ 72FE             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 776+ 72FE C5 6A 2A 6A                  dw      OVER, PLUS, OVER        //                      ( a  n1+a  a )
 776+ 7302 C5 6A
 777+ 7304 05 6D 27 6B                  dw      ZERO, DASH_ROT          //                      ( a  0     a+n1  a )
 778+ 7308                                                              // do
 779+ 7308 59 64                        dw      C_Q_DO
 780+ 730A 8A 00                        dw      Accept_Leave - $
 781+ 730C              Accept_Loop:
 782+ 730C D5 6A B8 66                  dw          DROP, KEY           //      drop key        ( a  c )
 783+ 7310 0A 6B                        dw          DUP                 //      dup             ( a  c  c )
 784+ 7312 A9 63 0E 00                  dw          LIT, $0E            //      0E
 785+ 7316 6B 6D                        dw          PLUS_ORIGIN         //      +origin
 786+ 7318 9D 6B                        dw          FETCH               //      @               ( a  c  c  del )
 787+ 731A 45 6F                        dw          EQUALS              //      =               ( a  c  c==del )
 788+ 731C                                                              //      if
 789+ 731C 2C 64                        dw          ZBRANCH
 790+ 731E 2C 00                        dw          Accept_Else_0 - $
 791+ 7320 D5 6A                        dw              DROP            //          drop        ( a  )
 792+ 7322 0A 6B 90 64                  dw              DUP, I, EQUALS  //          dup i =     ( a  a==i )
 792+ 7326 45 6F
 793+ 7328 0D 6D 35 69                  dw              ONE, AND_OP     //          1 and
 794+ 732C 0A 6B                        dw              DUP             //          dup         ( a  a==i  a==i )
 795+ 732E CC 69                        dw              R_TO            //          r> 2 - + r>
 796+ 7330 8A 6A 2A 6A                  dw              TWO_MINUS, PLUS //      ( decrement index by 1 or 2 )
 797+ 7334 B8 69                        dw              TO_R            //
 798+ 7336                                                              //          if
 799+ 7336 2C 64                        dw              ZBRANCH
 800+ 7338 0A 00                        dw              Accept_Else_1 - $
 801+ 733A A9 63 07 00                  dw                  LIT, 7      //              7       ( a  7 )
 802+ 733E                                                              //          else
 803+ 733E 15 64                        dw              BRANCH
 804+ 7340 06 00                        dw              Accept_Endif_1 - $
 805+ 7342              Accept_Else_1:
 806+ 7342 A9 63 08 00                  dw                  LIT, 8      //              8       ( a  8 )
 807+ 7346              Accept_Endif_1:                                 //          endif
 808+ 7346 15 64                        dw          BRANCH
 809+ 7348 2E 00                        dw          Accept_Endif_0 - $
 810+ 734A              Accept_Else_0:                                  //      else
 811+ 734A 0A 6B                        dw              DUP             //          dup         ( a  c  c )
 812+ 734C A9 63 0D 00                  dw              LIT, 13         //          13
 813+ 7350 45 6F                        dw              EQUALS          //          =           ( a  c  c==CR )
 814+ 7352                                                              //          if
 815+ 7352 2C 64                        dw              ZBRANCH
 816+ 7354 0C 00                        dw              Accept_Else_2 - $
 817+ 7356 D5 6A 2F 6D                  dw                  DROP, BL    //              drop bl ( a  bl )
 818+ 735A 05 6D                        dw                  ZERO        //              0       ( a  c  0 )
 819+ 735C                                                              //          else
 820+ 735C 15 64                        dw              BRANCH
 821+ 735E 04 00                        dw              Accept_Endif_2 - $
 822+ 7360              Accept_Else_2:
 823+ 7360 0A 6B                        dw                  DUP         //              dup     ( a  c  c )
 824+ 7362                                                              //          endif
 825+ 7362              Accept_Endif_2:
 826+ 7362 90 64 C6 6B                  dw              I, CSTORE       //          i           ( a  c )
 827+ 7366 0A 6B 2F 6D                  dw              DUP, BL, LESS   //          dup bl <    ( a  c  c<BL )
 827+ 736A 66 6F
 828+ 736C                                                              //          if
 829+ 736C 2C 64                        dw              ZBRANCH
 830+ 736E 08 00                        dw              Accept_Endif_3 - $
 831+ 7370 CC 69                        dw                  R_TO        //              r>
 832+ 7372 57 6A                        dw                  ONE_SUBTRACT//              1-
 833+ 7374 B8 69                        dw                  TO_R        //              >r
 834+ 7376                                                              //          endif
 835+ 7376              Accept_Endif_3:
 836+ 7376              Accept_Endif_0:                                 //      endif
 837+ 7376 D3 6F                        dw          EMIT                //      emit
 838+ 7378 05 6D 90 64                  dw          ZERO, I, ONE_PLUS   //      0 i 1+ !
 838+ 737C 4B 6A
 839+ 737E AA 6B                        dw          STORE               //          ( zero pad )
 840+ 7380 90 64                        dw          I                   //      i
 841+ 7382 90 64 B8 6B                  dw          I, CFETCH, ZEQUAL   //      i 0= if
 841+ 7386 E7 69
 842+ 7388 2C 64                        dw          ZBRANCH             //
 843+ 738A 06 00                        dw              Accept_Endif_4 - $
 844+ 738C 41 64                        dw                  C_LEAVE     //              leave
 845+ 738E 06 00                        dw                  Accept_Leave - $
 846+ 7390              Accept_Endif_4:                                 //      endif
 847+ 7390                                                              // loop
 848+ 7390 04 64                        dw      C_LOOP
 849+ 7392 7A FF                        dw      Accept_Loop - $
 850+ 7394              Accept_Leave:
 851+ 7394 FD 6A 37 6F                  dw      SWAP, SUBTRACT          // swap -
 852+ 7398 4B 6A                        dw      ONE_PLUS                // 1+
 853+ 739A 0A 6B C5 6E                  dw      DUP, SPAN, STORE        // dup span !
 853+ 739E AA 6B
 854+ 73A0 A5 69                        dw      EXIT                    // ;
 855+ 73A2
 856+ 73A2              //  ______________________________________________________________________
 857+ 73A2              //
 858+ 73A2              // expect      a n --
 859+ 73A2              // Accepts at most n1 characters from terminal and stores them at address a
 860+ 73A2              // CR stops input. A 'nul' is added as trailer.
 861+ 73A2              // n2 is the string length. n2 is kept in span user variable also.
 862+ 73A2              //              Colon_Def EXPECT, "EXPECT", is_normal
 863+ 73A2              //              dw      ACCEPT, DROP            // accept drop
 864+ 73A2              //              dw      EXIT                    // ;
 865+ 73A2
 866+ 73A2              //  ______________________________________________________________________
 867+ 73A2              //
 868+ 73A2              // query        --
 869+ 73A2              // Accept at most 80 character from console. CR stops.
 870+ 73A2              // Text is stored in TIB. Variable IN is zeroed.
 871+ 73A2                              Colon_Def QUERY, "QUERY", is_normal
 871+ 73A2             >                New_Def  QUERY, "QUERY", Enter_Ptr, is_normal ; ok
 871+ 73A2             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 871+ 73A2             >
 871+ 73A2             >                // dummy db directives used to calculate length of namec
 871+ 73A2 51 55 45 52 >                db      "QUERY"
 871+ 73A6 59          >
 871+ 73A7             >len_NFA         defl    $ - temp_NFA
 871+ 73A7             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 871+ 73A2             >
 871+ 73A2 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 871+ 73A3 51 55 45 52 >                db      "QUERY"               // name string in 7-bit ascii, but
 871+ 73A7 59          >
 871+ 73A8             >                org     $-1                 // alter last byte of Name just above to set
 871+ 73A7 D9          >                db      {b $} | END_BIT     // msb as name end
 871+ 73A8             >
 871+ 73A8 F3 72       >                dw      last_NFA            // Link to previous definition Name
 871+ 73AA             >QUERY:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 871+ 73AA 88 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 871+ 73AC             >                else
 871+ 73AC ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 871+ 73AC             >                endif           ; ok        // for other definitions it "points" the correct handler
 871+ 73AC             >                // Use of "; ok" to suppress "warning[fwdref]"
 871+ 73AC             >
 871+ 73AC             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 872+ 73AC 98 6D 9D 6B                  dw      TIB, FETCH              // tib @
 873+ 73B0 A9 63 50 00                  dw      LIT, 80                 // 80
 874+ 73B4 FC 72 D5 6A                  dw      ACCEPT, DROP            // accept drop
 875+ 73B8 05 6D 0D 6E                  dw      ZERO, TO_IN, STORE      // 0 >in !
 875+ 73BC AA 6B
 876+ 73BE A5 69                        dw      EXIT                    // ;
 877+ 73C0
 878+ 73C0              //  ______________________________________________________________________
 879+ 73C0              //
 880+ 73C0              // fill        a n c --
 881+ 73C0              // If n > 0, fills n locations starting from address a with the value c.
 882+ 73C0                              New_Def FILL, "FILL", is_code, is_normal
 882+ 73C0             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 882+ 73C0             >
 882+ 73C0             >                // dummy db directives used to calculate length of namec
 882+ 73C0 46 49 4C 4C >                db      "FILL"
 882+ 73C4             >len_NFA         defl    $ - temp_NFA
 882+ 73C4             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 882+ 73C0             >
 882+ 73C0 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 882+ 73C1 46 49 4C 4C >                db      "FILL"               // name string in 7-bit ascii, but
 882+ 73C5             >                org     $-1                 // alter last byte of Name just above to set
 882+ 73C4 CC          >                db      {b $} | END_BIT     // msb as name end
 882+ 73C5             >
 882+ 73C5 A2 73       >                dw      last_NFA            // Link to previous definition Name
 882+ 73C7             >FILL:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 882+ 73C7 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
 882+ 73C7             >                else
 882+ 73C7 C9 73       >                dw      $ + 2   ; ok        // is pointed by CFA
 882+ 73C9             >                endif           ; ok        // for other definitions it "points" the correct handler
 882+ 73C9             >                // Use of "; ok" to suppress "warning[fwdref]"
 882+ 73C9             >
 882+ 73C9             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 883+ 73C9 D9                           exx
 884+ 73CA D1                           pop     de                  // de has character
 885+ 73CB C1                           pop     bc                  // bc has counter
 886+ 73CC E1                           pop     hl                  // hl has address, save Instruction Pointer
 887+ 73CD              Fill_Loop:
 888+ 73CD 78                               ld      a, b
 889+ 73CE B1                               or      c
 890+ 73CF 28 05                        jr      z, Fill_While_End
 891+ 73D1 73                               ld      (hl), e
 892+ 73D2 0B                               dec     bc
 893+ 73D3 23                               inc     hl
 894+ 73D4 18 F7                        jr      Fill_Loop
 895+ 73D6              Fill_While_End:
 896+ 73D6 D9                           exx
 897+ 73D7
 898+ 73D7                              next
 898+ 73D7 DD E9       >                jp      (ix)
 899+ 73D9
 900+ 73D9              //  ______________________________________________________________________
 901+ 73D9              //
 902+ 73D9              // erase        a n --
 903+ 73D9              // If n > 0, fills n locations starting from address a with 'nul' characters.
 904+ 73D9                              Colon_Def ERASE, "ERASE", is_normal
 904+ 73D9             >                New_Def  ERASE, "ERASE", Enter_Ptr, is_normal ; ok
 904+ 73D9             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 904+ 73D9             >
 904+ 73D9             >                // dummy db directives used to calculate length of namec
 904+ 73D9 45 52 41 53 >                db      "ERASE"
 904+ 73DD 45          >
 904+ 73DE             >len_NFA         defl    $ - temp_NFA
 904+ 73DE             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 904+ 73D9             >
 904+ 73D9 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 904+ 73DA 45 52 41 53 >                db      "ERASE"               // name string in 7-bit ascii, but
 904+ 73DE 45          >
 904+ 73DF             >                org     $-1                 // alter last byte of Name just above to set
 904+ 73DE C5          >                db      {b $} | END_BIT     // msb as name end
 904+ 73DF             >
 904+ 73DF C0 73       >                dw      last_NFA            // Link to previous definition Name
 904+ 73E1             >ERASE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 904+ 73E1 88 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 904+ 73E3             >                else
 904+ 73E3 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 904+ 73E3             >                endif           ; ok        // for other definitions it "points" the correct handler
 904+ 73E3             >                // Use of "; ok" to suppress "warning[fwdref]"
 904+ 73E3             >
 904+ 73E3             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 905+ 73E3 05 6D C7 73                  dw      ZERO, FILL              // 0 fill
 906+ 73E7 A5 69                        dw      EXIT                    // ;
 907+ 73E9
 908+ 73E9              //  ______________________________________________________________________
 909+ 73E9              //
 910+ 73E9              // blanks       a n --
 911+ 73E9              // If n > 0, fills n locations starting from address a with 'nul' characters.
 912+ 73E9                              Colon_Def BLANKS, "BLANKS", is_normal
 912+ 73E9             >                New_Def  BLANKS, "BLANKS", Enter_Ptr, is_normal ; ok
 912+ 73E9             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 912+ 73E9             >
 912+ 73E9             >                // dummy db directives used to calculate length of namec
 912+ 73E9 42 4C 41 4E >                db      "BLANKS"
 912+ 73ED 4B 53       >
 912+ 73EF             >len_NFA         defl    $ - temp_NFA
 912+ 73EF             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 912+ 73E9             >
 912+ 73E9 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 912+ 73EA 42 4C 41 4E >                db      "BLANKS"               // name string in 7-bit ascii, but
 912+ 73EE 4B 53       >
 912+ 73F0             >                org     $-1                 // alter last byte of Name just above to set
 912+ 73EF D3          >                db      {b $} | END_BIT     // msb as name end
 912+ 73F0             >
 912+ 73F0 D9 73       >                dw      last_NFA            // Link to previous definition Name
 912+ 73F2             >BLANKS:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 912+ 73F2 88 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 912+ 73F4             >                else
 912+ 73F4 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 912+ 73F4             >                endif           ; ok        // for other definitions it "points" the correct handler
 912+ 73F4             >                // Use of "; ok" to suppress "warning[fwdref]"
 912+ 73F4             >
 912+ 73F4             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 913+ 73F4 2F 6D C7 73                  dw      BL, FILL                // bl fill
 914+ 73F8 A5 69                        dw      EXIT                    // ;
 915+ 73FA
 916+ 73FA              //  ______________________________________________________________________
 917+ 73FA              //
 918+ 73FA              // hold         c --
 919+ 73FA              // Used between <# and #> to insert a character c in numeric formatting.
 920+ 73FA                              Colon_Def HOLD, "HOLD", is_normal
 920+ 73FA             >                New_Def  HOLD, "HOLD", Enter_Ptr, is_normal ; ok
 920+ 73FA             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 920+ 73FA             >
 920+ 73FA             >                // dummy db directives used to calculate length of namec
 920+ 73FA 48 4F 4C 44 >                db      "HOLD"
 920+ 73FE             >len_NFA         defl    $ - temp_NFA
 920+ 73FE             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 920+ 73FA             >
 920+ 73FA 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 920+ 73FB 48 4F 4C 44 >                db      "HOLD"               // name string in 7-bit ascii, but
 920+ 73FF             >                org     $-1                 // alter last byte of Name just above to set
 920+ 73FE C4          >                db      {b $} | END_BIT     // msb as name end
 920+ 73FF             >
 920+ 73FF E9 73       >                dw      last_NFA            // Link to previous definition Name
 920+ 7401             >HOLD:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 920+ 7401 88 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 920+ 7403             >                else
 920+ 7403 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 920+ 7403             >                endif           ; ok        // for other definitions it "points" the correct handler
 920+ 7403             >                // Use of "; ok" to suppress "warning[fwdref]"
 920+ 7403             >
 920+ 7403             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 921+ 7403 26 6D                        dw      NEG_ONE                 // -1
 922+ 7405 86 6E 7A 6B                  dw      HLD, PLUSSTORE          // hld +!
 923+ 7409 86 6E 9D 6B                  dw      HLD, FETCH, CSTORE      // hld @ c!
 923+ 740D C6 6B
 924+ 740F A5 69                        dw      EXIT                    // ;
 925+ 7411
 926+ 7411              //  ______________________________________________________________________
 927+ 7411              //
 928+ 7411              // pad         -- a
 929+ 7411              // leaves the buffer text address. This is at a fixed distance over HERE.
 930+ 7411                              Colon_Def PAD, "PAD", is_normal
 930+ 7411             >                New_Def  PAD, "PAD", Enter_Ptr, is_normal ; ok
 930+ 7411             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 930+ 7411             >
 930+ 7411             >                // dummy db directives used to calculate length of namec
 930+ 7411 50 41 44    >                db      "PAD"
 930+ 7414             >len_NFA         defl    $ - temp_NFA
 930+ 7414             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 930+ 7411             >
 930+ 7411 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 930+ 7412 50 41 44    >                db      "PAD"               // name string in 7-bit ascii, but
 930+ 7415             >                org     $-1                 // alter last byte of Name just above to set
 930+ 7414 C4          >                db      {b $} | END_BIT     // msb as name end
 930+ 7415             >
 930+ 7415 FA 73       >                dw      last_NFA            // Link to previous definition Name
 930+ 7417             >PAD:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 930+ 7417 88 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 930+ 7419             >                else
 930+ 7419 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 930+ 7419             >                endif           ; ok        // for other definitions it "points" the correct handler
 930+ 7419             >                // Use of "; ok" to suppress "warning[fwdref]"
 930+ 7419             >
 930+ 7419             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 931+ 7419 E4 6E                        dw      HERE                    // here
 932+ 741B A9 63 44 00                  dw      LIT, 68                 // 68
 933+ 741F 2A 6A                        dw      PLUS                    // +
 934+ 7421 A5 69                        dw      EXIT                    // ;
 935+ 7423
 936+ 7423              //  ______________________________________________________________________
 937+ 7423              //
 938+ 7423              // word         c -- a
 939+ 7423              // reads characters from input streams until it encouners a c delimiter.
 940+ 7423              // Stores that packet so it starts from HERE
 941+ 7423              // WORD leaves a counter as first byte and ends the packet with two spaces.
 942+ 7423              // Other occurrences of c are ignored.
 943+ 7423              // If BLK is zero, text is taken from terminal buffer TIB.
 944+ 7423              // Otherwise text is taken from the disk-block given by BLK.
 945+ 7423              // "in" variable is incremented of the number of character read.
 946+ 7423              // The number of characters read is given by ENCLOSE.
 947+ 7423                              Colon_Def WORD, "WORD", is_normal
 947+ 7423             >                New_Def  WORD, "WORD", Enter_Ptr, is_normal ; ok
 947+ 7423             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 947+ 7423             >
 947+ 7423             >                // dummy db directives used to calculate length of namec
 947+ 7423 57 4F 52 44 >                db      "WORD"
 947+ 7427             >len_NFA         defl    $ - temp_NFA
 947+ 7427             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 947+ 7423             >
 947+ 7423 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 947+ 7424 57 4F 52 44 >                db      "WORD"               // name string in 7-bit ascii, but
 947+ 7428             >                org     $-1                 // alter last byte of Name just above to set
 947+ 7427 C4          >                db      {b $} | END_BIT     // msb as name end
 947+ 7428             >
 947+ 7428 11 74       >                dw      last_NFA            // Link to previous definition Name
 947+ 742A             >WORD:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 947+ 742A 88 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 947+ 742C             >                else
 947+ 742C ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 947+ 742C             >                endif           ; ok        // for other definitions it "points" the correct handler
 947+ 742C             >                // Use of "; ok" to suppress "warning[fwdref]"
 947+ 742C             >
 947+ 742C             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 948+ 742C 04 6E 9D 6B                  dw      BLK, FETCH              // blk @
 949+ 7430                                                              // if
 950+ 7430 2C 64                        dw      ZBRANCH
 951+ 7432 0C 00                        dw      Word_Else - $
 952+ 7434 04 6E 9D 6B                  dw          BLK, FETCH          //      blk @
 953+ 7438 7D 7D                        dw          BLOCK               //      block ( forward )
 954+ 743A                                                              // else
 955+ 743A 15 64                        dw      BRANCH
 956+ 743C 06 00                        dw      Word_Endif - $
 957+ 743E              Word_Else:
 958+ 743E 98 6D 9D 6B                  dw         TIB, FETCH           //      tib @
 959+ 7442              Word_Endif:                                     // endif
 960+ 7442 0D 6E 9D 6B                  dw      TO_IN, FETCH, PLUS      // >in @ +
 960+ 7446 2A 6A
 961+ 7448 FD 6A 7E 65                  dw      SWAP, ENCLOSE           // swap enclose
 962+ 744C E4 6E A9 63                  dw      HERE, LIT, 34, BLANKS   // here 34 blanks
 962+ 7450 22 00 F2 73
 963+ 7454 0D 6E 7A 6B                  dw      TO_IN, PLUSSTORE        // >in @ +
 964+ 7458 C5 6A 37 6F                  dw      OVER, SUBTRACT, TO_R    // over - >r
 964+ 745C B8 69
 965+ 745E E0 69 E4 6E                  dw      R_OP, HERE, CSTORE      // r here c!
 965+ 7462 C6 6B
 966+ 7464 2A 6A                        dw      PLUS                    // +
 967+ 7466 E4 6E 4B 6A                  dw      HERE, ONE_PLUS, R_TO    // here 1+ r>
 967+ 746A CC 69
 968+ 746C 98 68                        dw      CMOVE                   // cmove
 969+ 746E E4 6E                        dw      HERE                    // here
 970+ 7470 A5 69                        dw      EXIT                    // ;
 971+ 7472
 972+ 7472              //  ______________________________________________________________________
 973+ 7472              //
 974+ 7472              // (.")         --
 975+ 7472              // Direct procedure compiled by ." and  .(  It executes TYPE.
 976+ 7472                              Colon_Def C_DOT_QUOTE, '(.")', is_normal
 976+ 7472             >                New_Def  C_DOT_QUOTE, '(.")', Enter_Ptr, is_normal ; ok
 976+ 7472             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 976+ 7472             >
 976+ 7472             >                // dummy db directives used to calculate length of namec
 976+ 7472 28 2E 22 29 >                db      '(.")'
 976+ 7476             >len_NFA         defl    $ - temp_NFA
 976+ 7476             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 976+ 7472             >
 976+ 7472 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 976+ 7473 28 2E 22 29 >                db      '(.")'               // name string in 7-bit ascii, but
 976+ 7477             >                org     $-1                 // alter last byte of Name just above to set
 976+ 7476 A9          >                db      {b $} | END_BIT     // msb as name end
 976+ 7477             >
 976+ 7477 23 74       >                dw      last_NFA            // Link to previous definition Name
 976+ 7479             >C_DOT_QUOTE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 976+ 7479 88 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 976+ 747B             >                else
 976+ 747B ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 976+ 747B             >                endif           ; ok        // for other definitions it "points" the correct handler
 976+ 747B             >                // Use of "; ok" to suppress "warning[fwdref]"
 976+ 747B             >
 976+ 747B             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 977+ 747B E0 69 43 72                  dw      R_OP, COUNT             // r count
 978+ 747F 0A 6B 4B 6A                  dw      DUP, ONE_PLUS           // dup 1+
 979+ 7483 CC 69 2A 6A                  dw      R_TO, PLUS, TO_R        // r> + >r  ( advance IP )
 979+ 7487 B8 69
 980+ 7489 65 72                        dw      TYPE                    // type
 981+ 748B A5 69                        dw      EXIT                    // ;
 982+ 748D
 983+ 748D              //  ______________________________________________________________________
 984+ 748D              //
 985+ 748D              // char         -- c
 986+ 748D              // get first character from next input word
 987+ 748D                              Colon_Def CHAR,  "CHAR", is_normal
 987+ 748D             >                New_Def  CHAR, "CHAR", Enter_Ptr, is_normal ; ok
 987+ 748D             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 987+ 748D             >
 987+ 748D             >                // dummy db directives used to calculate length of namec
 987+ 748D 43 48 41 52 >                db      "CHAR"
 987+ 7491             >len_NFA         defl    $ - temp_NFA
 987+ 7491             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 987+ 748D             >
 987+ 748D 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 987+ 748E 43 48 41 52 >                db      "CHAR"               // name string in 7-bit ascii, but
 987+ 7492             >                org     $-1                 // alter last byte of Name just above to set
 987+ 7491 D2          >                db      {b $} | END_BIT     // msb as name end
 987+ 7492             >
 987+ 7492 72 74       >                dw      last_NFA            // Link to previous definition Name
 987+ 7494             >CHAR:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 987+ 7494 88 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 987+ 7496             >                else
 987+ 7496 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 987+ 7496             >                endif           ; ok        // for other definitions it "points" the correct handler
 987+ 7496             >                // Use of "; ok" to suppress "warning[fwdref]"
 987+ 7496             >
 987+ 7496             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 988+ 7496 2F 6D 2A 74                  dw      BL, WORD                // bl word
 989+ 749A 4B 6A B8 6B                  dw      ONE_PLUS, CFETCH        // 1+ c@
 990+ 749E A5 69                        dw      EXIT                    // ;
 991+ 74A0
 992+ 74A0              //  ______________________________________________________________________
 993+ 74A0              //
 994+ 74A0              // ,"           --
 995+ 74A0              // compiles a string terminated by " as a counted string from next input stream
 996+ 74A0                              Colon_Def COMMA_QUOTE,  ',"', is_normal
 996+ 74A0             >                New_Def  COMMA_QUOTE, ',"', Enter_Ptr, is_normal ; ok
 996+ 74A0             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 996+ 74A0             >
 996+ 74A0             >                // dummy db directives used to calculate length of namec
 996+ 74A0 2C 22       >                db      ',"'
 996+ 74A2             >len_NFA         defl    $ - temp_NFA
 996+ 74A2             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 996+ 74A0             >
 996+ 74A0 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 996+ 74A1 2C 22       >                db      ',"'               // name string in 7-bit ascii, but
 996+ 74A3             >                org     $-1                 // alter last byte of Name just above to set
 996+ 74A2 A2          >                db      {b $} | END_BIT     // msb as name end
 996+ 74A3             >
 996+ 74A3 8D 74       >                dw      last_NFA            // Link to previous definition Name
 996+ 74A5             >COMMA_QUOTE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 996+ 74A5 88 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 996+ 74A7             >                else
 996+ 74A7 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 996+ 74A7             >                endif           ; ok        // for other definitions it "points" the correct handler
 996+ 74A7             >                // Use of "; ok" to suppress "warning[fwdref]"
 996+ 74A7             >
 996+ 74A7             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 997+ 74A7 A9 63 22 00                  dw      LIT, DQUOTE_CHAR        // [char] "
 998+ 74AB 2A 74                        dw      WORD                    // word
 999+ 74AD B8 6B 4B 6A                  dw      CFETCH, ONE_PLUS        // c@ 1+
1000+ 74B1 F4 6E                        dw      ALLOT                   // allot
1001+ 74B3 05 6D 11 6F                  dw      ZERO, CCOMMA            // 0 c,  ( nul-terminated string - useful anyway )
1002+ 74B7 A5 69                        dw      EXIT
1003+ 74B9
1004+ 74B9              //  ______________________________________________________________________
1005+ 74B9              //
1006+ 74B9              // .c           c --
1007+ 74B9              // intermediate general purpose string builder, used by ." and .(
1008+ 74B9                              Colon_Def DOT_C,  ".C", is_immediate
1008+ 74B9             >                New_Def  DOT_C, ".C", Enter_Ptr, is_immediate ; ok
1008+ 74B9             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1008+ 74B9             >
1008+ 74B9             >                // dummy db directives used to calculate length of namec
1008+ 74B9 2E 43       >                db      ".C"
1008+ 74BB             >len_NFA         defl    $ - temp_NFA
1008+ 74BB             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1008+ 74B9             >
1008+ 74B9 C2          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
1008+ 74BA 2E 43       >                db      ".C"               // name string in 7-bit ascii, but
1008+ 74BC             >                org     $-1                 // alter last byte of Name just above to set
1008+ 74BB C3          >                db      {b $} | END_BIT     // msb as name end
1008+ 74BC             >
1008+ 74BC A0 74       >                dw      last_NFA            // Link to previous definition Name
1008+ 74BE             >DOT_C:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1008+ 74BE 88 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
1008+ 74C0             >                else
1008+ 74C0 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
1008+ 74C0             >                endif           ; ok        // for other definitions it "points" the correct handler
1008+ 74C0             >                // Use of "; ok" to suppress "warning[fwdref]"
1008+ 74C0             >
1008+ 74C0             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1009+ 74C0 50 6E 9D 6B                  dw      STATE, FETCH            // state @
1010+ 74C4                                                              // if
1011+ 74C4 2C 64                        dw      ZBRANCH
1012+ 74C6 12 00                        dw      Dot_C_Else - $
1013+ 74C8 3C 71 79 74                  dw          COMPILE, C_DOT_QUOTE //     compile (.")
1014+ 74CC 2A 74 B8 6B                  dw          WORD, CFETCH        //      word c@
1015+ 74D0 4B 6A F4 6E                  dw          ONE_PLUS, ALLOT     //      1+ allot
1016+ 74D4                                                              // else
1017+ 74D4 15 64                        dw      BRANCH
1018+ 74D6 08 00                        dw      Dot_C_Endif - $
1019+ 74D8              Dot_C_Else:
1020+ 74D8 2A 74 43 72                  dw          WORD, COUNT, TYPE   //      word count type
1020+ 74DC 65 72
1021+ 74DE              Dot_C_Endif:                                    // endif
1022+ 74DE A5 69                        dw      EXIT                    ;
1023+ 74E0
1024+ 74E0              //  ______________________________________________________________________
1025+ 74E0              //
1026+ 74E0              // ."           c --
1027+ 74E0                              Colon_Def DOT_QUOTE,  '."', is_immediate
1027+ 74E0             >                New_Def  DOT_QUOTE, '."', Enter_Ptr, is_immediate ; ok
1027+ 74E0             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1027+ 74E0             >
1027+ 74E0             >                // dummy db directives used to calculate length of namec
1027+ 74E0 2E 22       >                db      '."'
1027+ 74E2             >len_NFA         defl    $ - temp_NFA
1027+ 74E2             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1027+ 74E0             >
1027+ 74E0 C2          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
1027+ 74E1 2E 22       >                db      '."'               // name string in 7-bit ascii, but
1027+ 74E3             >                org     $-1                 // alter last byte of Name just above to set
1027+ 74E2 A2          >                db      {b $} | END_BIT     // msb as name end
1027+ 74E3             >
1027+ 74E3 B9 74       >                dw      last_NFA            // Link to previous definition Name
1027+ 74E5             >DOT_QUOTE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1027+ 74E5 88 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
1027+ 74E7             >                else
1027+ 74E7 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
1027+ 74E7             >                endif           ; ok        // for other definitions it "points" the correct handler
1027+ 74E7             >                // Use of "; ok" to suppress "warning[fwdref]"
1027+ 74E7             >
1027+ 74E7             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1028+ 74E7 A9 63 22 00                  dw      LIT, DQUOTE_CHAR        // [char] "
1029+ 74EB BE 74                        dw      DOT_C                   // [compile] .c
1030+ 74ED A5 69                        dw      EXIT                    // ; immediate
1031+ 74EF
1032+ 74EF              //  ______________________________________________________________________
1033+ 74EF              //
1034+ 74EF              // .(           c --
1035+ 74EF                              Colon_Def DOT_BRACKET,  ".(", is_immediate
1035+ 74EF             >                New_Def  DOT_BRACKET, ".(", Enter_Ptr, is_immediate ; ok
1035+ 74EF             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1035+ 74EF             >
1035+ 74EF             >                // dummy db directives used to calculate length of namec
1035+ 74EF 2E 28       >                db      ".("
1035+ 74F1             >len_NFA         defl    $ - temp_NFA
1035+ 74F1             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1035+ 74EF             >
1035+ 74EF C2          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
1035+ 74F0 2E 28       >                db      ".("               // name string in 7-bit ascii, but
1035+ 74F2             >                org     $-1                 // alter last byte of Name just above to set
1035+ 74F1 A8          >                db      {b $} | END_BIT     // msb as name end
1035+ 74F2             >
1035+ 74F2 E0 74       >                dw      last_NFA            // Link to previous definition Name
1035+ 74F4             >DOT_BRACKET:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1035+ 74F4 88 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
1035+ 74F6             >                else
1035+ 74F6 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
1035+ 74F6             >                endif           ; ok        // for other definitions it "points" the correct handler
1035+ 74F6             >                // Use of "; ok" to suppress "warning[fwdref]"
1035+ 74F6             >
1035+ 74F6             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1036+ 74F6 A9 63 29 00                  dw      LIT, ")"                // [char] )
1037+ 74FA BE 74                        dw      DOT_C                   // [compile] .c
1038+ 74FC A5 69                        dw      EXIT                    // ; immediate
1039+ 74FE
1040+ 74FE              //  ______________________________________________________________________
1041+ 74FE              //
1042+ 74FE              // (sgn)        a -- a f
1043+ 74FE              // determines if char in addr a is a sign (+ or -), and in that case increments
1044+ 74FE              // a flag. Returns f as the sign, true for negative, false for positive.
1045+ 74FE              // called by NUMBER and (EXP)
1046+ 74FE                              Colon_Def CSGN,  "(SGN)", is_normal
1046+ 74FE             >                New_Def  CSGN, "(SGN)", Enter_Ptr, is_normal ; ok
1046+ 74FE             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1046+ 74FE             >
1046+ 74FE             >                // dummy db directives used to calculate length of namec
1046+ 74FE 28 53 47 4E >                db      "(SGN)"
1046+ 7502 29          >
1046+ 7503             >len_NFA         defl    $ - temp_NFA
1046+ 7503             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1046+ 74FE             >
1046+ 74FE 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1046+ 74FF 28 53 47 4E >                db      "(SGN)"               // name string in 7-bit ascii, but
1046+ 7503 29          >
1046+ 7504             >                org     $-1                 // alter last byte of Name just above to set
1046+ 7503 A9          >                db      {b $} | END_BIT     // msb as name end
1046+ 7504             >
1046+ 7504 EF 74       >                dw      last_NFA            // Link to previous definition Name
1046+ 7506             >CSGN:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1046+ 7506 88 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
1046+ 7508             >                else
1046+ 7508 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
1046+ 7508             >                endif           ; ok        // for other definitions it "points" the correct handler
1046+ 7508             >                // Use of "; ok" to suppress "warning[fwdref]"
1046+ 7508             >
1046+ 7508             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1047+ 7508 0A 6B 4B 6A                  dw      DUP, ONE_PLUS, CFETCH   // dup 1+ c@
1047+ 750C B8 6B
1048+ 750E 0A 6B A9 63                  dw      DUP, LIT, "-", EQUALS   // dup [char] - =
1048+ 7512 2D 00 45 6F
1049+ 7516                                                              // if
1050+ 7516 2C 64                        dw      ZBRANCH
1051+ 7518 12 00                        dw      CSgn_Else_0 - $
1052+ 751A D5 6A                        dw          DROP                //      drop
1053+ 751C 4B 6A                        dw          ONE_PLUS            //      1+
1054+ 751E 0D 6D 63 6E                  dw          ONE, DPL, PLUSSTORE //      1 dpl +!
1054+ 7522 7A 6B
1055+ 7524 0D 6D                        dw          ONE                 //      1
1056+ 7526                                                              // else
1057+ 7526 15 64                        dw      BRANCH
1058+ 7528 16 00                        dw      CSgn_Endif_0 - $
1059+ 752A              CSgn_Else_0:
1060+ 752A A9 63 2B 00                  dw          LIT, "+", EQUALS    //      [char] + =
1060+ 752E 45 6F
1061+ 7530                                                              //      if
1062+ 7530 2C 64                        dw          ZBRANCH
1063+ 7532 0A 00                        dw          CSgn_Endif_1 - $
1064+ 7534 4B 6A                        dw              ONE_PLUS        //          1+
1065+ 7536 0D 6D 63 6E                  dw              ONE, DPL        //          1 dpl
1066+ 753A 7A 6B                        dw              PLUSSTORE       //          +!
1067+ 753C              CSgn_Endif_1                                    //      endif
1068+ 753C 05 6D                        dw          ZERO                //      0
1069+ 753E              CSgn_Endif_0:                                   // endif
1070+ 753E A5 69                        dw      EXIT
1071+ 7540
1072+ 7540              //  ______________________________________________________________________
1073+ 7540              //
1074+ 7540              // (number)     d a -- d1 a1
1075+ 7540              // using the current BASE parse characters stored in address a
1076+ 7540              // accumulating a double precision integer d
1077+ 7540              // the process stops at the first not-convertible character
1078+ 7540              // A double-number is kept in CPU registers as HLDE.
1079+ 7540              // On the stack a double number is treated as two single numbers
1080+ 7540              // where HL is on the top of the stack and DE is the second from top,
1081+ 7540              // so in the stack memory it appears as LHED.
1082+ 7540              // Instead, in 2VARIABLE a double number is stored as EDLH.
1083+ 7540                              Colon_Def CNUMBER,  "(NUMBER)", is_normal
1083+ 7540             >                New_Def  CNUMBER, "(NUMBER)", Enter_Ptr, is_normal ; ok
1083+ 7540             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1083+ 7540             >
1083+ 7540             >                // dummy db directives used to calculate length of namec
1083+ 7540 28 4E 55 4D >                db      "(NUMBER)"
1083+ 7544 42 45 52 29 >
1083+ 7548             >len_NFA         defl    $ - temp_NFA
1083+ 7548             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1083+ 7540             >
1083+ 7540 88          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1083+ 7541 28 4E 55 4D >                db      "(NUMBER)"               // name string in 7-bit ascii, but
1083+ 7545 42 45 52 29 >
1083+ 7549             >                org     $-1                 // alter last byte of Name just above to set
1083+ 7548 A9          >                db      {b $} | END_BIT     // msb as name end
1083+ 7549             >
1083+ 7549 FE 74       >                dw      last_NFA            // Link to previous definition Name
1083+ 754B             >CNUMBER:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1083+ 754B 88 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
1083+ 754D             >                else
1083+ 754D ~           >                dw      $ + 2   ; ok        // is pointed by CFA
1083+ 754D             >                endif           ; ok        // for other definitions it "points" the correct handler
1083+ 754D             >                // Use of "; ok" to suppress "warning[fwdref]"
1083+ 754D             >
1083+ 754D             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1084+ 754D                                                              // begin
1085+ 754D              CNumber_Begin:
1086+ 754D 4B 6A                        dw          ONE_PLUS            //      1+
1087+ 754F 0A 6B B8 69                  dw          DUP, TO_R           //      dup >r
1088+ 7553 B8 6B                        dw          CFETCH              //      @
1089+ 7555 5A 6E 9D 6B                  dw          BASE, FETCH         //      base @
1090+ 7559 B1 64                        dw          DIGIT               //      digit
1091+ 755B                                                              // while
1092+ 755B 2C 64                        dw      ZBRANCH
1093+ 755D 2C 00                        dw      CNumber_While_end - $
1094+ 755F FD 6A                        dw          SWAP                //      swap
1095+ 7561 5A 6E 9D 6B                  dw          BASE, FETCH         //      base @
1096+ 7565 CB 68                        dw          UM_MUL              //      um*
1097+ 7567 D5 6A 17 6B                  dw          DROP, ROT           //      drop rot
1098+ 756B 5A 6E 9D 6B                  dw          BASE, FETCH         //      base @
1099+ 756F CB 68                        dw          UM_MUL              //      um*
1100+ 7571 37 6A                        dw          DPLUS               //      d+
1101+ 7573 63 6E 9D 6B                  dw          DPL, FETCH          //      dpl @
1102+ 7577 4B 6A                        dw          ONE_PLUS            //      1+
1103+ 7579                                                              //      if
1104+ 7579 2C 64                        dw          ZBRANCH
1105+ 757B 08 00                        dw          CNumber_Endif - $
1106+ 757D 0D 6D 63 6E                  dw              ONE, DPL        //          1 dpl
1107+ 7581 7A 6B                        dw              PLUSSTORE       //          +!
1108+ 7583              CNumber_Endif:                                  //      endif
1109+ 7583 CC 69                        dw             R_TO             //      r>  ( balance rp )
1110+ 7585 15 64                        dw      BRANCH
1111+ 7587 C6 FF                        dw      CNumber_Begin - $
1112+ 7589              CNumber_While_end:                              // repeat
1113+ 7589 CC 69                        dw      R_TO                    // r>  ( balance rp on exit while-repeat )
1114+ 758B A5 69                        dw      EXIT                    // ;
1115+ 758D
1116+ 758D              //  ______________________________________________________________________
1117+ 758D              //
1118+ 758D              // number       a -- d
1119+ 758D                              Colon_Def NUMBER,  "NUMBER", is_normal
1119+ 758D             >                New_Def  NUMBER, "NUMBER", Enter_Ptr, is_normal ; ok
1119+ 758D             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1119+ 758D             >
1119+ 758D             >                // dummy db directives used to calculate length of namec
1119+ 758D 4E 55 4D 42 >                db      "NUMBER"
1119+ 7591 45 52       >
1119+ 7593             >len_NFA         defl    $ - temp_NFA
1119+ 7593             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1119+ 758D             >
1119+ 758D 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1119+ 758E 4E 55 4D 42 >                db      "NUMBER"               // name string in 7-bit ascii, but
1119+ 7592 45 52       >
1119+ 7594             >                org     $-1                 // alter last byte of Name just above to set
1119+ 7593 D2          >                db      {b $} | END_BIT     // msb as name end
1119+ 7594             >
1119+ 7594 40 75       >                dw      last_NFA            // Link to previous definition Name
1119+ 7596             >NUMBER:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1119+ 7596 88 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
1119+ 7598             >                else
1119+ 7598 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
1119+ 7598             >                endif           ; ok        // for other definitions it "points" the correct handler
1119+ 7598             >                // Use of "; ok" to suppress "warning[fwdref]"
1119+ 7598             >
1119+ 7598             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1120+ 7598 05 6D 05 6D                  dw      ZERO, ZERO              // 0 0
1121+ 759C 17 6B                        dw      ROT                     // rot
1122+ 759E 06 75 B8 69                  dw      CSGN, TO_R              // (sgn) >r
1123+ 75A2 26 6D 63 6E                  dw      NEG_ONE, DPL, STORE     // -1 dpl !
1123+ 75A6 AA 6B
1124+ 75A8 4B 75                        dw      CNUMBER                 // (number)
1125+ 75AA 0A 6B B8 6B                  dw      DUP, CFETCH             // dup c@
1126+ 75AE A9 63 2E 00                  dw      LIT, 46, EQUALS         // [char] . =  ( decimal point )
1126+ 75B2 45 6F
1127+ 75B4                                                              // if
1128+ 75B4 2C 64                        dw      ZBRANCH
1129+ 75B6 0A 00                        dw      Number_Endif_1 - $
1130+ 75B8 05 6D 63 6E                  dw          ZERO, DPL, STORE    //      0 dpl !
1130+ 75BC AA 6B
1131+ 75BE 4B 75                        dw          CNUMBER             //      (number)
1132+ 75C0              Number_Endif_1:                                 // endif
1133+ 75C0 B8 6B 2F 6D                  dw      CFETCH, BL              // c@ bl
1134+ 75C4 37 6F 05 6D                  dw      SUBTRACT, ZERO, QERROR  // - 0 ?error
1134+ 75C8 A9 70
1135+ 75CA CC 69                        dw      R_TO                    // r>
1136+ 75CC                                                              // if
1137+ 75CC 2C 64                        dw      ZBRANCH
1138+ 75CE 04 00                        dw      Number_Endif_2 - $
1139+ 75D0 AB 6A                        dw          DMINUS              //      dminus
1140+ 75D2              Number_Endif_2:                                 // endif
1141+ 75D2 A5 69                        dw      EXIT                    // ;
1142+ 75D4
1143+ 75D4              //  ______________________________________________________________________
1144+ 75D4              //
1145+ 75D4              // -find        a -- d
1146+ 75D4                              Colon_Def LFIND,  "-FIND", is_normal
1146+ 75D4             >                New_Def  LFIND, "-FIND", Enter_Ptr, is_normal ; ok
1146+ 75D4             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1146+ 75D4             >
1146+ 75D4             >                // dummy db directives used to calculate length of namec
1146+ 75D4 2D 46 49 4E >                db      "-FIND"
1146+ 75D8 44          >
1146+ 75D9             >len_NFA         defl    $ - temp_NFA
1146+ 75D9             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1146+ 75D4             >
1146+ 75D4 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1146+ 75D5 2D 46 49 4E >                db      "-FIND"               // name string in 7-bit ascii, but
1146+ 75D9 44          >
1146+ 75DA             >                org     $-1                 // alter last byte of Name just above to set
1146+ 75D9 C4          >                db      {b $} | END_BIT     // msb as name end
1146+ 75DA             >
1146+ 75DA 8D 75       >                dw      last_NFA            // Link to previous definition Name
1146+ 75DC             >LFIND:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1146+ 75DC 88 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
1146+ 75DE             >                else
1146+ 75DE ~           >                dw      $ + 2   ; ok        // is pointed by CFA
1146+ 75DE             >                endif           ; ok        // for other definitions it "points" the correct handler
1146+ 75DE             >                // Use of "; ok" to suppress "warning[fwdref]"
1146+ 75DE             >
1146+ 75DE             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1147+ 75DE 2F 6D 2A 74                  dw      BL, WORD                // bl word
1148+ 75E2 38 6E 9D 6B                  dw      CONTEXT, FETCH, FETCH   // context @ @
1148+ 75E6 9D 6B
1149+ 75E8 26 65                        dw      C_FIND                  // (find)
1150+ 75EA B8 6F                        dw      QDUP                    // ?dup
1151+ 75EC E7 69                        dw      ZEQUAL                  // 0=
1152+ 75EE                                                              // if
1153+ 75EE 2C 64                        dw      ZBRANCH
1154+ 75F0 08 00                        dw      LFind_Endif - $
1155+ 75F2 E4 6E                        dw          HERE                //      here
1156+ 75F4 25 70                        dw          LATEST              //      latest
1157+ 75F6 26 65                        dw          C_FIND              //      (find)
1158+ 75F8              LFind_Endif:                                    // endif
1159+ 75F8 A5 69                        dw      EXIT                    // ;
1160+ 75FA
1161+ 75FA              //  ______________________________________________________________________
1162+ 75FA              //
1163+ 75FA              // (abort)      --
1164+ 75FA                              Colon_Def CABORT,  "(ABORT)", is_normal
1164+ 75FA             >                New_Def  CABORT, "(ABORT)", Enter_Ptr, is_normal ; ok
1164+ 75FA             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1164+ 75FA             >
1164+ 75FA             >                // dummy db directives used to calculate length of namec
1164+ 75FA 28 41 42 4F >                db      "(ABORT)"
1164+ 75FE 52 54 29    >
1164+ 7601             >len_NFA         defl    $ - temp_NFA
1164+ 7601             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1164+ 75FA             >
1164+ 75FA 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1164+ 75FB 28 41 42 4F >                db      "(ABORT)"               // name string in 7-bit ascii, but
1164+ 75FF 52 54 29    >
1164+ 7602             >                org     $-1                 // alter last byte of Name just above to set
1164+ 7601 A9          >                db      {b $} | END_BIT     // msb as name end
1164+ 7602             >
1164+ 7602 D4 75       >                dw      last_NFA            // Link to previous definition Name
1164+ 7604             >CABORT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1164+ 7604 88 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
1164+ 7606             >                else
1164+ 7606 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
1164+ 7606             >                endif           ; ok        // for other definitions it "points" the correct handler
1164+ 7606             >                // Use of "; ok" to suppress "warning[fwdref]"
1164+ 7606             >
1164+ 7606             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1165+ 7606 CB 78                        dw      ABORT                   // abort
1166+ 7608 A5 69                        dw      EXIT                    // ;
1167+ 760A
1168+ 760A              //  ______________________________________________________________________
1169+ 760A              //
1170+ 760A              // error        n --
1171+ 760A              // raise an error
1172+ 760A              // if WARNING is 0, prints "MSG#n".
1173+ 760A              // if WARNING is 1, prints line n of screen 4.
1174+ 760A              // if WARNING is -1 does (ABORT) that normally does ABORT
1175+ 760A              // value can be negative or beyond block 4.
1176+ 760A                              Colon_Def ERROR,  "ERROR", is_normal
1176+ 760A             >                New_Def  ERROR, "ERROR", Enter_Ptr, is_normal ; ok
1176+ 760A             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1176+ 760A             >
1176+ 760A             >                // dummy db directives used to calculate length of namec
1176+ 760A 45 52 52 4F >                db      "ERROR"
1176+ 760E 52          >
1176+ 760F             >len_NFA         defl    $ - temp_NFA
1176+ 760F             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1176+ 760A             >
1176+ 760A 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1176+ 760B 45 52 52 4F >                db      "ERROR"               // name string in 7-bit ascii, but
1176+ 760F 52          >
1176+ 7610             >                org     $-1                 // alter last byte of Name just above to set
1176+ 760F D2          >                db      {b $} | END_BIT     // msb as name end
1176+ 7610             >
1176+ 7610 FA 75       >                dw      last_NFA            // Link to previous definition Name
1176+ 7612             >ERROR:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1176+ 7612 88 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
1176+ 7614             >                else
1176+ 7614 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
1176+ 7614             >                endif           ; ok        // for other definitions it "points" the correct handler
1176+ 7614             >                // Use of "; ok" to suppress "warning[fwdref]"
1176+ 7614             >
1176+ 7614             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1177+ 7614 B0 6D 9D 6B                  dw      WARNING, FETCH, ZLESS   // warning @ 0<
1177+ 7618 02 6A
1178+ 761A                                                              // if
1179+ 761A 2C 64                        dw      ZBRANCH
1180+ 761C 04 00                        dw      Error_Endif_1 - $
1181+ 761E 04 76                        dw          CABORT              //      (abort)
1182+ 7620              Error_Endif_1:                                  // endif
1183+ 7620 E4 6E 43 72                  dw      HERE, COUNT, TYPE       // here count type
1183+ 7624 65 72
1184+ 7626 79 74                        dw      C_DOT_QUOTE             // .( ? )
1185+ 7628 02 3F 20                     db      2, "? "
1186+ 762B FC 7A                        dw      MESSAGE                 // message  ( forward )
1187+ 762D 87 6D 9D 6B                  dw      S0, FETCH, SPSTORE      // s0 @ sp!
1187+ 7631 7C 69
1188+ 7633 04 6E 9D 6B                  dw      BLK, FETCH, QDUP        // blk @ ?dup
1188+ 7637 B8 6F
1189+ 7639                                                              // if
1190+ 7639 2C 64                        dw      ZBRANCH
1191+ 763B 08 00                        dw      Error_Endif_2 - $
1192+ 763D 0D 6E 9D 6B                  dw          TO_IN, FETCH, SWAP  //      >in @ swap
1192+ 7641 FD 6A
1193+ 7643              Error_Endif_2:                                  // endif
1194+ 7643 8A 78                        dw      QUIT                    // quit ( forward )
1195+ 7645 A5 69                        dw      EXIT                    // ;
1196+ 7647              //  ______________________________________________________________________
1197+ 7647              //
1198+ 7647              // id.          nfa --
1199+ 7647                              Colon_Def ID_DOT,  "ID.", is_normal
1199+ 7647             >                New_Def  ID_DOT, "ID.", Enter_Ptr, is_normal ; ok
1199+ 7647             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1199+ 7647             >
1199+ 7647             >                // dummy db directives used to calculate length of namec
1199+ 7647 49 44 2E    >                db      "ID."
1199+ 764A             >len_NFA         defl    $ - temp_NFA
1199+ 764A             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1199+ 7647             >
1199+ 7647 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1199+ 7648 49 44 2E    >                db      "ID."               // name string in 7-bit ascii, but
1199+ 764B             >                org     $-1                 // alter last byte of Name just above to set
1199+ 764A AE          >                db      {b $} | END_BIT     // msb as name end
1199+ 764B             >
1199+ 764B 0A 76       >                dw      last_NFA            // Link to previous definition Name
1199+ 764D             >ID_DOT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1199+ 764D 88 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
1199+ 764F             >                else
1199+ 764F ~           >                dw      $ + 2   ; ok        // is pointed by CFA
1199+ 764F             >                endif           ; ok        // for other definitions it "points" the correct handler
1199+ 764F             >                // Use of "; ok" to suppress "warning[fwdref]"
1199+ 764F             >
1199+ 764F             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1200+ 764F 17 74 A9 63                  dw      PAD, LIT, 32, LIT, 96   // pad 32 96
1200+ 7653 20 00 A9 63
1200+ 7657 60 00
1201+ 7659 C7 73                        dw      FILL                    // fill
1202+ 765B 0A 6B 63 70                  dw      DUP, PFA, LFA           // dup pfa lfa
1202+ 765F 35 70
1203+ 7661 C5 6A 37 6F                  dw      OVER, SUBTRACT          // over -
1204+ 7665 17 74 FD 6A                  dw      PAD, SWAP               // pad swap
1205+ 7669 98 68                        dw      CMOVE                   // cmove
1206+ 766B 17 74 43 72                  dw      PAD, COUNT, LIT, $1F    // pad count 01F
1206+ 766F A9 63 1F 00
1207+ 7673 35 69                        dw      AND_OP                  // and  ( use only lower bits )
1208+ 7675 65 72 EF 6F                  dw      TYPE, SPACE             // type
1209+ 7679 A5 69                        dw      EXIT                    // ;
1210+ 767B
1211+ 767B              //  ______________________________________________________________________
1212+ 767B              //
1213+ 767B              // code         -- cccc
1214+ 767B                              Colon_Def CODE,  "CODE", is_normal
1214+ 767B             >                New_Def  CODE, "CODE", Enter_Ptr, is_normal ; ok
1214+ 767B             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1214+ 767B             >
1214+ 767B             >                // dummy db directives used to calculate length of namec
1214+ 767B 43 4F 44 45 >                db      "CODE"
1214+ 767F             >len_NFA         defl    $ - temp_NFA
1214+ 767F             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1214+ 767B             >
1214+ 767B 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1214+ 767C 43 4F 44 45 >                db      "CODE"               // name string in 7-bit ascii, but
1214+ 7680             >                org     $-1                 // alter last byte of Name just above to set
1214+ 767F C5          >                db      {b $} | END_BIT     // msb as name end
1214+ 7680             >
1214+ 7680 47 76       >                dw      last_NFA            // Link to previous definition Name
1214+ 7682             >CODE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1214+ 7682 88 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
1214+ 7684             >                else
1214+ 7684 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
1214+ 7684             >                endif           ; ok        // for other definitions it "points" the correct handler
1214+ 7684             >                // Use of "; ok" to suppress "warning[fwdref]"
1214+ 7684             >
1214+ 7684             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1215+ 7684 DC 75                        dw      LFIND                   // -find
1216+ 7686                                                              // if
1217+ 7686 2C 64                        dw      ZBRANCH
1218+ 7688 10 00                        dw      Code_Endif - $
1219+ 768A D5 6A                        dw          DROP                //      drop
1220+ 768C 87 70 4D 76                  dw          TO_NAME, ID_DOT     //      >name id.
1221+ 7690 A9 63 04 00                  dw          LIT, 4, MESSAGE     //      4 message
1221+ 7694 FC 7A
1222+ 7696 EF 6F                        dw          SPACE               //      space
1223+ 7698              Code_Endif:                                     // endif
1224+ 7698 E4 6E                        dw      HERE                    // here
1225+ 769A                                                              // ( ---- here begins NFA ---- )
1226+ 769A 0A 6B B8 6B                  dw      DUP, CFETCH             // dup c@
1227+ 769E A3 6D 9D 6B                  dw      WIDTH, FETCH, MIN       // width @ min  ( max 31 character length )
1227+ 76A2 8B 6F
1228+ 76A4 4B 6A F4 6E                  dw      ONE_PLUS, ALLOT         // 1+ allot
1229+ 76A8 0A 6B                        dw      DUP                     // dup
1230+ 76AA A9 63                        dw      LIT
1231+ 76AC A0 00                        dw      SMUDGE_BIT | END_BIT    // 160
1232+ 76AE 90 6B                        dw      TOGGLE                  // toggle
1233+ 76B0 E4 6E 57 6A                  dw      HERE, ONE_SUBTRACT      // here 1- ( last character )
1234+ 76B4 A9 63 80 00                  dw      LIT, END_BIT, TOGGLE    // 128 toggle
1234+ 76B8 90 6B
1235+ 76BA                                                              // ( ---- here is LFA ---- )
1236+ 76BA 25 70 00 6F                  dw      LATEST, COMMA           // latest ,
1237+ 76BE 45 6E 9D 6B                  dw      CURRENT, FETCH, STORE   // current @ ! ( save this word as the latest )
1237+ 76C2 AA 6B
1238+ 76C4 E4 6E 73 6A                  dw      HERE, CELL_PLUS, COMMA  // ( CFA point PFA )
1238+ 76C8 00 6F
1239+ 76CA A5 69                        dw      EXIT                    // ;
1240+ 76CC
1241+ 76CC              //  ______________________________________________________________________
1242+ 76CC              //
1243+ 76CC              // create       -- cccc     ( compile time )
1244+ 76CC              //              -- a        ( run time )
1245+ 76CC                              Colon_Def CREATE,  "CREATE", is_normal
1245+ 76CC             >                New_Def  CREATE, "CREATE", Enter_Ptr, is_normal ; ok
1245+ 76CC             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1245+ 76CC             >
1245+ 76CC             >                // dummy db directives used to calculate length of namec
1245+ 76CC 43 52 45 41 >                db      "CREATE"
1245+ 76D0 54 45       >
1245+ 76D2             >len_NFA         defl    $ - temp_NFA
1245+ 76D2             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1245+ 76CC             >
1245+ 76CC 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1245+ 76CD 43 52 45 41 >                db      "CREATE"               // name string in 7-bit ascii, but
1245+ 76D1 54 45       >
1245+ 76D3             >                org     $-1                 // alter last byte of Name just above to set
1245+ 76D2 C5          >                db      {b $} | END_BIT     // msb as name end
1245+ 76D3             >
1245+ 76D3 7B 76       >                dw      last_NFA            // Link to previous definition Name
1245+ 76D5             >CREATE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1245+ 76D5 88 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
1245+ 76D7             >                else
1245+ 76D7 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
1245+ 76D7             >                endif           ; ok        // for other definitions it "points" the correct handler
1245+ 76D7             >                // Use of "; ok" to suppress "warning[fwdref]"
1245+ 76D7             >
1245+ 76D7             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1246+ 76D7 82 76 88 71                  dw      CODE, SMUDGE        // code smudge
1247+ 76DB
1248+ 76DB
1249+ 76DB DE 71                        dw      C_SEMICOLON_CODE
1250+ 76DD                              // this routine is called from the call coded in CFA
1251+ 76DD              Create_Ptr:
1252+ 76DD 13                           inc     de
1253+ 76DE D5                           push    de                  // balance TOS before overwrite it
1254+ 76DF
1255+ 76DF                              next
1255+ 76DF DD E9       >                jp      (ix)
1256+ 76E1
1257+ 76E1              //  ______________________________________________________________________
1258+ 76E1              //
1259+ 76E1              // [compile]    -- cccc     ( compile time )
1260+ 76E1                              Colon_Def COMPILE_IMMEDIATE,  "[COMPILE]", is_immediate
1260+ 76E1             >                New_Def  COMPILE_IMMEDIATE, "[COMPILE]", Enter_Ptr, is_immediate ; ok
1260+ 76E1             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1260+ 76E1             >
1260+ 76E1             >                // dummy db directives used to calculate length of namec
1260+ 76E1 5B 43 4F 4D >                db      "[COMPILE]"
1260+ 76E5 50 49 4C 45 >
1260+ 76E9 5D          >
1260+ 76EA             >len_NFA         defl    $ - temp_NFA
1260+ 76EA             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1260+ 76E1             >
1260+ 76E1 C9          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
1260+ 76E2 5B 43 4F 4D >                db      "[COMPILE]"               // name string in 7-bit ascii, but
1260+ 76E6 50 49 4C 45 >
1260+ 76EA 5D          >
1260+ 76EB             >                org     $-1                 // alter last byte of Name just above to set
1260+ 76EA DD          >                db      {b $} | END_BIT     // msb as name end
1260+ 76EB             >
1260+ 76EB CC 76       >                dw      last_NFA            // Link to previous definition Name
1260+ 76ED             >COMPILE_IMMEDIATE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1260+ 76ED 88 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
1260+ 76EF             >                else
1260+ 76EF ~           >                dw      $ + 2   ; ok        // is pointed by CFA
1260+ 76EF             >                endif           ; ok        // for other definitions it "points" the correct handler
1260+ 76EF             >                // Use of "; ok" to suppress "warning[fwdref]"
1260+ 76EF             >
1260+ 76EF             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1261+ 76EF DC 75                        dw      LFIND                   // -find      (  cfa  b  f  )
1262+ 76F1 E7 69                        dw      ZEQUAL                  // 0=         (  cfa  b  )
1263+ 76F3 05 6D A9 70                  dw      ZERO, QERROR            // 0 ?error
1264+ 76F7 D5 6A                        dw      DROP                    // drop       (  cfa  )
1265+ 76F9 00 6F                        dw      COMMA                   // ,
1266+ 76FB A5 69                        dw      EXIT                    // ; immediate
1267+ 76FD
1268+ 76FD              //  ______________________________________________________________________
1269+ 76FD              //
1270+ 76FD              // literal      n --      ( compile time )
1271+ 76FD                              Colon_Def LITERAL,  "LITERAL", is_immediate
1271+ 76FD             >                New_Def  LITERAL, "LITERAL", Enter_Ptr, is_immediate ; ok
1271+ 76FD             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1271+ 76FD             >
1271+ 76FD             >                // dummy db directives used to calculate length of namec
1271+ 76FD 4C 49 54 45 >                db      "LITERAL"
1271+ 7701 52 41 4C    >
1271+ 7704             >len_NFA         defl    $ - temp_NFA
1271+ 7704             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1271+ 76FD             >
1271+ 76FD C7          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
1271+ 76FE 4C 49 54 45 >                db      "LITERAL"               // name string in 7-bit ascii, but
1271+ 7702 52 41 4C    >
1271+ 7705             >                org     $-1                 // alter last byte of Name just above to set
1271+ 7704 CC          >                db      {b $} | END_BIT     // msb as name end
1271+ 7705             >
1271+ 7705 E1 76       >                dw      last_NFA            // Link to previous definition Name
1271+ 7707             >LITERAL:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1271+ 7707 88 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
1271+ 7709             >                else
1271+ 7709 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
1271+ 7709             >                endif           ; ok        // for other definitions it "points" the correct handler
1271+ 7709             >                // Use of "; ok" to suppress "warning[fwdref]"
1271+ 7709             >
1271+ 7709             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1272+ 7709 50 6E 9D 6B                  dw      STATE, FETCH            // state @
1273+ 770D                                                              // if
1274+ 770D 2C 64                        dw      ZBRANCH
1275+ 770F 08 00                        dw      Literal_Endif - $
1276+ 7711 3C 71 A9 63                  dw          COMPILE, LIT        //      compile lit
1277+ 7715 00 6F                        dw          COMMA               //      ,
1278+ 7717              Literal_Endif:                                  // endif
1279+ 7717 A5 69                        dw      EXIT                    // ; immediate
1280+ 7719
1281+ 7719              //  ______________________________________________________________________
1282+ 7719              //
1283+ 7719              // dliteral     n --      ( compile time )
1284+ 7719                              Colon_Def DLITERAL,  "DLITERAL", is_immediate
1284+ 7719             >                New_Def  DLITERAL, "DLITERAL", Enter_Ptr, is_immediate ; ok
1284+ 7719             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1284+ 7719             >
1284+ 7719             >                // dummy db directives used to calculate length of namec
1284+ 7719 44 4C 49 54 >                db      "DLITERAL"
1284+ 771D 45 52 41 4C >
1284+ 7721             >len_NFA         defl    $ - temp_NFA
1284+ 7721             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1284+ 7719             >
1284+ 7719 C8          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
1284+ 771A 44 4C 49 54 >                db      "DLITERAL"               // name string in 7-bit ascii, but
1284+ 771E 45 52 41 4C >
1284+ 7722             >                org     $-1                 // alter last byte of Name just above to set
1284+ 7721 CC          >                db      {b $} | END_BIT     // msb as name end
1284+ 7722             >
1284+ 7722 FD 76       >                dw      last_NFA            // Link to previous definition Name
1284+ 7724             >DLITERAL:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1284+ 7724 88 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
1284+ 7726             >                else
1284+ 7726 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
1284+ 7726             >                endif           ; ok        // for other definitions it "points" the correct handler
1284+ 7726             >                // Use of "; ok" to suppress "warning[fwdref]"
1284+ 7726             >
1284+ 7726             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1285+ 7726 50 6E 9D 6B                  dw      STATE, FETCH            // state @
1286+ 772A                                                              // if
1287+ 772A 2C 64                        dw      ZBRANCH
1288+ 772C 08 00                        dw      DLiteral_Endif - $
1289+ 772E FD 6A                        dw          SWAP                //      swap
1290+ 7730 07 77 07 77                  dw          LITERAL,  LITERAL   //      [compile] literal [compile] literal
1291+ 7734              DLiteral_Endif:                                 // endif
1292+ 7734 A5 69                        dw      EXIT                    // ; immediate
1293+ 7736
1294+ 7736              //  ______________________________________________________________________
1295+ 7736              //
1296+ 7736              // [char]       n --      ( compile time )
1297+ 7736              // inside colon definition, gets first character from next input word
1298+ 7736              // and compiles it as literal.
1299+ 7736                              Colon_Def COMPILE_CHAR,  "[CHAR]", is_immediate
1299+ 7736             >                New_Def  COMPILE_CHAR, "[CHAR]", Enter_Ptr, is_immediate ; ok
1299+ 7736             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1299+ 7736             >
1299+ 7736             >                // dummy db directives used to calculate length of namec
1299+ 7736 5B 43 48 41 >                db      "[CHAR]"
1299+ 773A 52 5D       >
1299+ 773C             >len_NFA         defl    $ - temp_NFA
1299+ 773C             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1299+ 7736             >
1299+ 7736 C6          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
1299+ 7737 5B 43 48 41 >                db      "[CHAR]"               // name string in 7-bit ascii, but
1299+ 773B 52 5D       >
1299+ 773D             >                org     $-1                 // alter last byte of Name just above to set
1299+ 773C DD          >                db      {b $} | END_BIT     // msb as name end
1299+ 773D             >
1299+ 773D 19 77       >                dw      last_NFA            // Link to previous definition Name
1299+ 773F             >COMPILE_CHAR:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1299+ 773F 88 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
1299+ 7741             >                else
1299+ 7741 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
1299+ 7741             >                endif           ; ok        // for other definitions it "points" the correct handler
1299+ 7741             >                // Use of "; ok" to suppress "warning[fwdref]"
1299+ 7741             >
1299+ 7741             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1300+ 7741 94 74 07 77                  dw      CHAR, LITERAL           // char [compile] literal
1301+ 7745 A5 69                        dw      EXIT                    // ; immediate
1302+ 7747
1303+ 7747              //  ______________________________________________________________________
1304+ 7747              //
1305+ 7747              // 0x00         n --      ( compile time )
1306+ 7747                              Colon_Def NUL_WORD,  $00, is_immediate
1306+ 7747             >                New_Def  NUL_WORD, $00, Enter_Ptr, is_immediate ; ok
1306+ 7747             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1306+ 7747             >
1306+ 7747             >                // dummy db directives used to calculate length of namec
1306+ 7747 00          >                db      $00
1306+ 7748             >len_NFA         defl    $ - temp_NFA
1306+ 7748             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1306+ 7747             >
1306+ 7747 C1          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
1306+ 7748 00          >                db      $00               // name string in 7-bit ascii, but
1306+ 7749             >                org     $-1                 // alter last byte of Name just above to set
1306+ 7748 80          >                db      {b $} | END_BIT     // msb as name end
1306+ 7749             >
1306+ 7749 36 77       >                dw      last_NFA            // Link to previous definition Name
1306+ 774B             >NUL_WORD:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1306+ 774B 88 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
1306+ 774D             >                else
1306+ 774D ~           >                dw      $ + 2   ; ok        // is pointed by CFA
1306+ 774D             >                endif           ; ok        // for other definitions it "points" the correct handler
1306+ 774D             >                // Use of "; ok" to suppress "warning[fwdref]"
1306+ 774D             >
1306+ 774D             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1307+ 774D 04 6E 9D 6B                  dw      BLK, FETCH, ONE         // blk @ 1
1307+ 7751 0D 6D
1308+ 7753 7D 6F                        dw      GREATER                 // > if
1309+ 7755                                                              // if
1310+ 7755 2C 64                        dw      ZBRANCH
1311+ 7757 28 00                        dw      Nul_Else_1 - $
1312+ 7759 0D 6D 04 6E                  dw          ONE, BLK, PLUSSTORE //      1 blk +!
1312+ 775D 7A 6B
1313+ 775F 05 6D 0D 6E                  dw          ZERO, TO_IN, STORE  //      0 >in !
1313+ 7763 AA 6B
1314+ 7765 04 6E 9D 6B                  dw          BLK, FETCH          //      blk @
1315+ 7769 51 6D                        dw          BSCR                //      b/scr
1316+ 776B 57 6A                        dw          ONE_SUBTRACT        //      1 -
1317+ 776D 35 69                        dw          AND_OP              //      and  ( this is tricky )
1318+ 776F E7 69                        dw          ZEQUAL              //      0=
1319+ 7771                                                              //      if
1320+ 7771 2C 64                        dw          ZBRANCH
1321+ 7773 08 00                        dw          Nul_Endif_2 - $
1322+ 7775 DB 70                        dw              QEXEC           //          ?exec
1323+ 7777 CC 69 D5 6A                  dw              R_TO, DROP      //          r> drop
1324+ 777B              Nul_Endif_2:                                    //      endif
1325+ 777B 15 64                        dw      BRANCH
1326+ 777D 06 00                        dw      Nul_Endif_1 - $
1327+ 777F              Nul_Else_1:                                     // else
1328+ 777F CC 69 D5 6A                  dw          R_TO, DROP          //      r> drop
1329+ 7783              Nul_Endif_1:                                    // endif
1330+ 7783 A5 69                        dw      EXIT                    // ;
1331+ 7785
1332+ 7785              //  ______________________________________________________________________
1333+ 7785              //
1334+ 7785              // ?stack       --
1335+ 7785              // Raise error #1 if stack is empty and you pop it
1336+ 7785              // Raise error #7 if stack is full.
1337+ 7785              // This means SP must always stay between HERE and FFFF
1338+ 7785              // For 128K BANK paging purpose SP must be <= BFE0 and 50 words room
1339+ 7785              // for Next 8K MMU paging this is $DOE8
1340+ 7785                              Colon_Def QSTACK, "?STACK", is_normal
1340+ 7785             >                New_Def  QSTACK, "?STACK", Enter_Ptr, is_normal ; ok
1340+ 7785             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1340+ 7785             >
1340+ 7785             >                // dummy db directives used to calculate length of namec
1340+ 7785 3F 53 54 41 >                db      "?STACK"
1340+ 7789 43 4B       >
1340+ 778B             >len_NFA         defl    $ - temp_NFA
1340+ 778B             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1340+ 7785             >
1340+ 7785 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1340+ 7786 3F 53 54 41 >                db      "?STACK"               // name string in 7-bit ascii, but
1340+ 778A 43 4B       >
1340+ 778C             >                org     $-1                 // alter last byte of Name just above to set
1340+ 778B CB          >                db      {b $} | END_BIT     // msb as name end
1340+ 778C             >
1340+ 778C 47 77       >                dw      last_NFA            // Link to previous definition Name
1340+ 778E             >QSTACK:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1340+ 778E 88 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
1340+ 7790             >                else
1340+ 7790 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
1340+ 7790             >                endif           ; ok        // for other definitions it "points" the correct handler
1340+ 7790             >                // Use of "; ok" to suppress "warning[fwdref]"
1340+ 7790             >
1340+ 7790             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1341+ 7790 6D 69                        dw      SPFETCH                 // sp@
1342+ 7792 87 6D 9D 6B                  dw      S0, FETCH               // s0 @
1343+ 7796 FD 6A 52 6F                  dw      SWAP, ULESS             // swap u<
1344+ 779A 0D 6D A9 70                  dw      ONE, QERROR             // 1 ?error
1345+ 779E E4 6E                        dw      HERE                    // here
1346+ 77A0 87 6D 9D 6B                  dw      S0, FETCH, LESS         // s0 @ <
1346+ 77A4 66 6F
1347+ 77A6                                                              // if
1348+ 77A6 2C 64                        dw      ZBRANCH
1349+ 77A8 14 00                        dw      QStack_Endif - $
1350+ 77AA 6D 69                        dw          SPFETCH             //      sp@
1351+ 77AC E4 6E A9 63                  dw          HERE, LIT, 128      //      here 128
1351+ 77B0 80 00
1352+ 77B2 2A 6A 52 6F                  dw          PLUS, ULESS         //      plus u<
1353+ 77B6 A9 63 07 00                  dw          LIT, 7, QERROR      //      7 Cerror
1353+ 77BA A9 70
1354+ 77BC              QStack_Endif:                                   // endif
1355+ 77BC A5 69                        dw      EXIT                    // ;
1356+ 77BE
1357+ 77BE
# file closed: C:\Zx\CSpect\Projects\vForth15_INDIRECT/source/L1.asm
 111  77BE                              include "L2.asm"
# file opened: C:\Zx\CSpect\Projects\vForth15_INDIRECT/source/L2.asm
   1+ 77BE              //  ______________________________________________________________________
   2+ 77BE              //
   3+ 77BE              //  L2.asm
   4+ 77BE              //
   5+ 77BE              //  Level-2
   6+ 77BE              //  the Forth interpreter, vocabulary, cold/warm start and quit from Forth.
   7+ 77BE              //  ______________________________________________________________________
   8+ 77BE
   9+ 77BE
  10+ 77BE              //  ______________________________________________________________________
  11+ 77BE              //
  12+ 77BE              // interpret    --
  13+ 77BE              // This is the text interpreter.
  14+ 77BE              // It executes or compiles, depending on STATE, the text coming from
  15+ 77BE              // current input stream.
  16+ 77BE              // If the word search fails after parsing CONTEXT and CURRENT vocabulary,
  17+ 77BE              // the word is interpreted as numeric and converted, using current BASE,
  18+ 77BE              // leaving on top of stack a single or double precision number, depending
  19+ 77BE              // on the presence of a decimal point.
  20+ 77BE              // If the number conversion fails, the terminal is notified with ? followed
  21+ 77BE              // by the offending word.
  22+ 77BE                              Colon_Def INTERPRET, "INTERPRET", is_normal
  22+ 77BE             >                New_Def  INTERPRET, "INTERPRET", Enter_Ptr, is_normal ; ok
  22+ 77BE             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  22+ 77BE             >
  22+ 77BE             >                // dummy db directives used to calculate length of namec
  22+ 77BE 49 4E 54 45 >                db      "INTERPRET"
  22+ 77C2 52 50 52 45 >
  22+ 77C6 54          >
  22+ 77C7             >len_NFA         defl    $ - temp_NFA
  22+ 77C7             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  22+ 77BE             >
  22+ 77BE 89          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  22+ 77BF 49 4E 54 45 >                db      "INTERPRET"               // name string in 7-bit ascii, but
  22+ 77C3 52 50 52 45 >
  22+ 77C7 54          >
  22+ 77C8             >                org     $-1                 // alter last byte of Name just above to set
  22+ 77C7 D4          >                db      {b $} | END_BIT     // msb as name end
  22+ 77C8             >
  22+ 77C8 85 77       >                dw      last_NFA            // Link to previous definition Name
  22+ 77CA             >INTERPRET:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
  22+ 77CA 88 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
  22+ 77CC             >                else
  22+ 77CC ~           >                dw      $ + 2   ; ok        // is pointed by CFA
  22+ 77CC             >                endif           ; ok        // for other definitions it "points" the correct handler
  22+ 77CC             >                // Use of "; ok" to suppress "warning[fwdref]"
  22+ 77CC             >
  22+ 77CC             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  23+ 77CC
  24+ 77CC              Interpret_Begin:                                        // begin
  25+ 77CC DC 75                        dw          LFIND                       //      -find
  26+ 77CE                                                                      //      if
  27+ 77CE 2C 64                        dw          ZBRANCH
  28+ 77D0 1A 00                        dw          Interpret_Else_1 - $
  29+ 77D2 50 6E 9D 6B                  dw              STATE, FETCH, LESS      //          state @ <
  29+ 77D6 66 6F
  30+ 77D8                                                                      //          if
  31+ 77D8 2C 64                        dw              ZBRANCH
  32+ 77DA 08 00                        dw              Interpret_Else_2 - $
  33+ 77DC 59 71                        dw                  COMPILE_XT          //              compile,
  34+ 77DE                                                                      //          else
  35+ 77DE 15 64                        dw              BRANCH
  36+ 77E0 06 00                        dw              Interpret_Endif_2 - $
  37+ 77E2              Interpret_Else_2:
  38+ 77E2 BE 63 B0 6C                  dw                  EXECUTE, NOOP       //              execute nooop
  39+ 77E6              Interpret_Endif_2:                                      //          endif
  40+ 77E6                                                                      //      else
  41+ 77E6 15 64                        dw          BRANCH
  42+ 77E8 1A 00                        dw          Interpret_Endif_1 - $
  43+ 77EA              Interpret_Else_1:
  44+ 77EA E4 6E 96 75                  dw              HERE, NUMBER            //          here number
  45+ 77EE 63 6E 9D 6B                  dw              DPL, FETCH, ONE_PLUS    //          dpl @ 1+
  45+ 77F2 4B 6A
  46+ 77F4                                                                      //          if
  47+ 77F4 2C 64                        dw              ZBRANCH
  48+ 77F6 08 00                        dw              Interpret_Else_3 - $
  49+ 77F8              //              dw                  NMODE, FETCH        //              nmode @
  50+ 77F8              //                                                      //              if
  51+ 77F8              //              dw                  ZBRANCH
  52+ 77F8              //              dw                  Interpret_Endif_4 - $
  53+ 77F8              //              dw                      ONE, ZERO       //                  1 0
  54+ 77F8              //              dw                      TWO_DROP        //                  2drop
  55+ 77F8              //Interpret_Endif_4:                                      //              endif
  56+ 77F8 24 77                        dw                  DLITERAL            //              [compile] dliteral
  57+ 77FA                                                                      //          else
  58+ 77FA 15 64                        dw              BRANCH
  59+ 77FC 06 00                        dw              Interpret_Endif_3 - $
  60+ 77FE              Interpret_Else_3:
  61+ 77FE D5 6A                        dw                  DROP                //              drop
  62+ 7800 07 77                        dw                  LITERAL             //              [compile]  literal
  63+ 7802              Interpret_Endif_3:                                      //          endif
  64+ 7802              Interpret_Endif_1:                                      //      endif
  65+ 7802 8E 77                        dw          QSTACK                      //      ?stack
  66+ 7804 3F 67                        dw          QTERMINAL                   //      ?terminal
  67+ 7806                                                                      //      if
  68+ 7806 2C 64                        dw          ZBRANCH
  69+ 7808 04 00                        dw          Interpret_Endif_5 - $
  70+ 780A 04 76                        dw              CABORT                  //          (abort)
  71+ 780C              Interpret_Endif_5:                                      //      endif
  72+ 780C 15 64                        dw      BRANCH
  73+ 780E BE FF                        dw      Interpret_Begin - $
  74+ 7810 A5 69                        dw      EXIT                            // ;
  75+ 7812
  76+ 7812              //  ______________________________________________________________________
  77+ 7812              //
  78+ 7812              // vocabulary   -- cccc     ( compile time )
  79+ 7812              // Defining word used in the form   VOCABULARY cccc
  80+ 7812              // creates the word  cccc  that gives the name to the vocabulary.
  81+ 7812              // Giving  cccc  makes the vocabulary CONTEXT so its words are executed first
  82+ 7812              // Giving  cccc DEFINITIONS makes  the vocabulary  CURRENT
  83+ 7812              // so new definitions can be inserted in that vocabulary.
  84+ 7812                              Colon_Def VOCABULARY, "VOCABULARY", is_normal
  84+ 7812             >                New_Def  VOCABULARY, "VOCABULARY", Enter_Ptr, is_normal ; ok
  84+ 7812             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  84+ 7812             >
  84+ 7812             >                // dummy db directives used to calculate length of namec
  84+ 7812 56 4F 43 41 >                db      "VOCABULARY"
  84+ 7816 42 55 4C 41 >
  84+ 781A 52 59       >
  84+ 781C             >len_NFA         defl    $ - temp_NFA
  84+ 781C             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  84+ 7812             >
  84+ 7812 8A          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  84+ 7813 56 4F 43 41 >                db      "VOCABULARY"               // name string in 7-bit ascii, but
  84+ 7817 42 55 4C 41 >
  84+ 781B 52 59       >
  84+ 781D             >                org     $-1                 // alter last byte of Name just above to set
  84+ 781C D9          >                db      {b $} | END_BIT     // msb as name end
  84+ 781D             >
  84+ 781D BE 77       >                dw      last_NFA            // Link to previous definition Name
  84+ 781F             >VOCABULARY:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
  84+ 781F 88 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
  84+ 7821             >                else
  84+ 7821 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
  84+ 7821             >                endif           ; ok        // for other definitions it "points" the correct handler
  84+ 7821             >                // Use of "; ok" to suppress "warning[fwdref]"
  84+ 7821             >
  84+ 7821             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  85+ 7821
  86+ 7821 0C 72                        dw      CBUILDS
  87+ 7823
  88+ 7823 A9 63 81 A0                  dw      LIT, $A081, COMMA       // $81A0 ,
  88+ 7827 00 6F
  89+ 7829 45 6E 9D 6B                  dw      CURRENT, FETCH          // current @
  90+ 782D 7D 6A 00 6F                  dw      CELL_MINUS, COMMA       // cell- ,
  91+ 7831 E4 6E                        dw      HERE                    // here
  92+ 7833 D1 6D 9D 6B                  dw      VOC_LINK, FETCH, COMMA  // voc-link @ ,
  92+ 7837 00 6F
  93+ 7839 D1 6D AA 6B                  dw      VOC_LINK, STORE         // voc-link !
  94+ 783D
  95+ 783D 1C 72                        dw      DOES_TO                 // does>
  96+ 783F              Vocabulary_Does:
  97+ 783F 73 6A                        dw      CELL_PLUS               // cell+
  98+ 7841 38 6E AA 6B                  dw      CONTEXT, STORE          // context !
  99+ 7845 A5 69                        dw      EXIT                    // ;
 100+ 7847
 101+ 7847              //  ______________________________________________________________________
 102+ 7847              //
 103+ 7847              // forth        --
 104+ 7847              // Name of the first vocabulary.
 105+ 7847              // It makes FORTH the CONTEXT vocabulary.
 106+ 7847              // Until new user vocabulary are defined, new colon-definitions becomes
 107+ 7847              // part of FORTH. It is immediate, so it will executed during the creation
 108+ 7847              // of a colon definition to be able to select the vocabulary.
 109+ 7847
 110+ 7847                              New_Def FORTH, "FORTH", Does_Ptr, is_immediate
 110+ 7847             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 110+ 7847             >
 110+ 7847             >                // dummy db directives used to calculate length of namec
 110+ 7847 46 4F 52 54 >                db      "FORTH"
 110+ 784B 48          >
 110+ 784C             >len_NFA         defl    $ - temp_NFA
 110+ 784C             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 110+ 7847             >
 110+ 7847 C5          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 110+ 7848 46 4F 52 54 >                db      "FORTH"               // name string in 7-bit ascii, but
 110+ 784C 48          >
 110+ 784D             >                org     $-1                 // alter last byte of Name just above to set
 110+ 784C C8          >                db      {b $} | END_BIT     // msb as name end
 110+ 784D             >
 110+ 784D 12 78       >                dw      last_NFA            // Link to previous definition Name
 110+ 784F             >FORTH:          if Does_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 110+ 784F 28 72       >                dw      Does_Ptr ; ok        // for primitive definitions  actual code
 110+ 7851             >                else
 110+ 7851 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 110+ 7851             >                endif           ; ok        // for other definitions it "points" the correct handler
 110+ 7851             >                // Use of "; ok" to suppress "warning[fwdref]"
 110+ 7851             >
 110+ 7851             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 111+ 7851 3F 78                        dw      Vocabulary_Does
 112+ 7853 81 A0                        db      $81, $A0
 113+ 7855              Forth_Latest_Ptr:
 114+ 7855 70 87                        dw      Here_Dictionary // Fence_Word // Latest_Definition
 115+ 7857              Voclink_Ptr:
 116+ 7857 00 00                        dw      0
 117+ 7859              // Any new vocabulary is structured as follow:
 118+ 7859              // PFA+0 points to DOES> part of VOCABULARY to perform CELL+ CONTEXT !
 119+ 7859              // PFA+2 is 81,A0 i.e. a null-word used as LATEST in the new vocabulary
 120+ 7859              // PFA+4 always contains the LATEST word of this VOCABULARY.
 121+ 7859              //       at creations it points to the null-word of its parent vocabulary
 122+ 7859              //       that is normally FORTH, For example ASSEMBLER points FORTH's null-word
 123+ 7859              // PFA+6 is the pointer that builds up the vocabulary linked list.
 124+ 7859              //       FORTH has 0 here to signal the end of the list and user's variable
 125+ 7859              //       VOC-LINK points to PFA+6 of the newest vocabulary created.
 126+ 7859              //       While FORTH is the only vocabulary, VOC-LINK points to FORTH's PFA+6
 127+ 7859              //       When ASSEMBLER is created, its PFA+6 points to FORTH's PFA+6, and so on
 128+ 7859
 129+ 7859              //  ______________________________________________________________________
 130+ 7859              //
 131+ 7859              // definitions  --
 132+ 7859              // Used in the form  cccc DEFINITIONS
 133+ 7859              // set the CURRENT vocabulary at CONTEXT to insert new definitions in
 134+ 7859              // vocabulary cccc.
 135+ 7859                              Colon_Def DEFINITIONS, "DEFINITIONS", is_normal
 135+ 7859             >                New_Def  DEFINITIONS, "DEFINITIONS", Enter_Ptr, is_normal ; ok
 135+ 7859             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 135+ 7859             >
 135+ 7859             >                // dummy db directives used to calculate length of namec
 135+ 7859 44 45 46 49 >                db      "DEFINITIONS"
 135+ 785D 4E 49 54 49 >
 135+ 7861 4F 4E 53    >
 135+ 7864             >len_NFA         defl    $ - temp_NFA
 135+ 7864             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 135+ 7859             >
 135+ 7859 8B          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 135+ 785A 44 45 46 49 >                db      "DEFINITIONS"               // name string in 7-bit ascii, but
 135+ 785E 4E 49 54 49 >
 135+ 7862 4F 4E 53    >
 135+ 7865             >                org     $-1                 // alter last byte of Name just above to set
 135+ 7864 D3          >                db      {b $} | END_BIT     // msb as name end
 135+ 7865             >
 135+ 7865 47 78       >                dw      last_NFA            // Link to previous definition Name
 135+ 7867             >DEFINITIONS:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 135+ 7867 88 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 135+ 7869             >                else
 135+ 7869 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 135+ 7869             >                endif           ; ok        // for other definitions it "points" the correct handler
 135+ 7869             >                // Use of "; ok" to suppress "warning[fwdref]"
 135+ 7869             >
 135+ 7869             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 136+ 7869 38 6E 9D 6B                  dw      CONTEXT, FETCH          // context @
 137+ 786D 45 6E AA 6B                  dw      CURRENT, STORE          // current !
 138+ 7871 A5 69                        dw      EXIT                    // ;
 139+ 7873
 140+ 7873              //  ______________________________________________________________________
 141+ 7873              //
 142+ 7873              // (            -- cccc )
 143+ 7873              // the following text is interpreted as a comment until a closing )
 144+ 7873                              Colon_Def COMMENT_BRAKET, "(", is_immediate
 144+ 7873             >                New_Def  COMMENT_BRAKET, "(", Enter_Ptr, is_immediate ; ok
 144+ 7873             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 144+ 7873             >
 144+ 7873             >                // dummy db directives used to calculate length of namec
 144+ 7873 28          >                db      "("
 144+ 7874             >len_NFA         defl    $ - temp_NFA
 144+ 7874             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 144+ 7873             >
 144+ 7873 C1          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 144+ 7874 28          >                db      "("               // name string in 7-bit ascii, but
 144+ 7875             >                org     $-1                 // alter last byte of Name just above to set
 144+ 7874 A8          >                db      {b $} | END_BIT     // msb as name end
 144+ 7875             >
 144+ 7875 59 78       >                dw      last_NFA            // Link to previous definition Name
 144+ 7877             >COMMENT_BRAKET:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 144+ 7877 88 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 144+ 7879             >                else
 144+ 7879 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 144+ 7879             >                endif           ; ok        // for other definitions it "points" the correct handler
 144+ 7879             >                // Use of "; ok" to suppress "warning[fwdref]"
 144+ 7879             >
 144+ 7879             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 145+ 7879 A9 63 29 00                  dw      LIT, ")"                // [char] )
 146+ 787D 2A 74 D5 6A                  dw      WORD, DROP              // word drop
 147+ 7881 A5 69                        dw      EXIT                    // ;
 148+ 7883
 149+ 7883              //  ______________________________________________________________________
 150+ 7883              //
 151+ 7883              // quit         --
 152+ 7883              // \ Erase the return-stack, stop any compilation and give controlo to the console. No message is issued.
 153+ 7883                              Colon_Def QUIT, "QUIT", is_normal
 153+ 7883             >                New_Def  QUIT, "QUIT", Enter_Ptr, is_normal ; ok
 153+ 7883             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 153+ 7883             >
 153+ 7883             >                // dummy db directives used to calculate length of namec
 153+ 7883 51 55 49 54 >                db      "QUIT"
 153+ 7887             >len_NFA         defl    $ - temp_NFA
 153+ 7887             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 153+ 7883             >
 153+ 7883 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 153+ 7884 51 55 49 54 >                db      "QUIT"               // name string in 7-bit ascii, but
 153+ 7888             >                org     $-1                 // alter last byte of Name just above to set
 153+ 7887 D4          >                db      {b $} | END_BIT     // msb as name end
 153+ 7888             >
 153+ 7888 73 78       >                dw      last_NFA            // Link to previous definition Name
 153+ 788A             >QUIT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 153+ 788A 88 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 153+ 788C             >                else
 153+ 788C ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 153+ 788C             >                endif           ; ok        // for other definitions it "points" the correct handler
 153+ 788C             >                // Use of "; ok" to suppress "warning[fwdref]"
 153+ 788C             >
 153+ 788C             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 154+ 788C
 155+ 788C BB 6E 9D 6B                  dw      SOURCE_ID, FETCH        // source-id @
 156+ 7890 C6 67 D5 6A                  dw      F_CLOSE, DROP           // f_close drop
 157+ 7894 05 6D BB 6E                  dw      ZERO, SOURCE_ID, STORE  // 0 source-id !
 157+ 7898 AA 6B
 158+ 789A 05 6D 04 6E                  dw      ZERO, BLK, STORE        // 0 blk !
 158+ 789E AA 6B
 159+ 78A0 65 71                        dw      SQUARED_OPEN            // [compile] [
 160+ 78A2                                                              // begin
 161+ 78A2              Quit_Begin:
 162+ 78A2 8F 6D 9D 6B                  dw      R0, FETCH, RPSTORE      //      r0 @ rp!
 162+ 78A6 96 69
 163+ 78A8 2A 66                        dw      CR                      //      cr
 164+ 78AA AA 73                        dw      QUERY                   //      query
 165+ 78AC              Next_Breakpoint_1:
 166+ 78AC CA 77                        dw      INTERPRET               //      interpret
 167+ 78AE 50 6E 9D 6B                  dw      STATE, FETCH, ZEQUAL    //      state @ 0=
 167+ 78B2 E7 69
 168+ 78B4                                                              //      if
 169+ 78B4 2C 64                        dw      ZBRANCH
 170+ 78B6 07 00                        dw      Quit_Endif - $
 171+ 78B8 79 74                        dw          C_DOT_QUOTE
 172+ 78BA 02 6F 6B                     db          2, "ok"             //          .( ok)
 173+ 78BD              Quit_Endif:                                     //      else
 174+ 78BD                                                              // again
 175+ 78BD 15 64                        dw      BRANCH
 176+ 78BF E3 FF                        dw      Quit_Begin - $
 177+ 78C1 A5 69                        dw      EXIT                    // ;
 178+ 78C3
 179+ 78C3              //  ______________________________________________________________________
 180+ 78C3              //
 181+ 78C3              // abort        --
 182+ 78C3                              Colon_Def ABORT, "ABORT", is_normal
 182+ 78C3             >                New_Def  ABORT, "ABORT", Enter_Ptr, is_normal ; ok
 182+ 78C3             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 182+ 78C3             >
 182+ 78C3             >                // dummy db directives used to calculate length of namec
 182+ 78C3 41 42 4F 52 >                db      "ABORT"
 182+ 78C7 54          >
 182+ 78C8             >len_NFA         defl    $ - temp_NFA
 182+ 78C8             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 182+ 78C3             >
 182+ 78C3 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 182+ 78C4 41 42 4F 52 >                db      "ABORT"               // name string in 7-bit ascii, but
 182+ 78C8 54          >
 182+ 78C9             >                org     $-1                 // alter last byte of Name just above to set
 182+ 78C8 D4          >                db      {b $} | END_BIT     // msb as name end
 182+ 78C9             >
 182+ 78C9 83 78       >                dw      last_NFA            // Link to previous definition Name
 182+ 78CB             >ABORT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 182+ 78CB 88 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 182+ 78CD             >                else
 182+ 78CD ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 182+ 78CD             >                endif           ; ok        // for other definitions it "points" the correct handler
 182+ 78CD             >                // Use of "; ok" to suppress "warning[fwdref]"
 182+ 78CD             >
 182+ 78CD             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 183+ 78CD 87 6D 9D 6B                  dw      S0, FETCH, SPSTORE      // s0 @ sp!
 183+ 78D1 7C 69
 184+ 78D3 C8 71                        dw      DECIMAL                 // decimal
 185+ 78D5 4F 78                        dw      FORTH                   // [compile] forth
 186+ 78D7 67 78                        dw      DEFINITIONS             // definitions
 187+ 78D9              Autoexec_Ptr:
 188+ 78D9 90 85                        dw      AUTOEXEC                // autoexec, patched to noop
 189+ 78DB 8A 78                        dw      QUIT                    // quit
 190+ 78DD A5 69                        dw      EXIT                    // ;
 191+ 78DF
 192+ 78DF              //  ______________________________________________________________________
 193+ 78DF              //
 194+ 78DF              // warm         --
 195+ 78DF                              Colon_Def WARM, "WARM", is_normal
 195+ 78DF             >                New_Def  WARM, "WARM", Enter_Ptr, is_normal ; ok
 195+ 78DF             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 195+ 78DF             >
 195+ 78DF             >                // dummy db directives used to calculate length of namec
 195+ 78DF 57 41 52 4D >                db      "WARM"
 195+ 78E3             >len_NFA         defl    $ - temp_NFA
 195+ 78E3             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 195+ 78DF             >
 195+ 78DF 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 195+ 78E0 57 41 52 4D >                db      "WARM"               // name string in 7-bit ascii, but
 195+ 78E4             >                org     $-1                 // alter last byte of Name just above to set
 195+ 78E3 CD          >                db      {b $} | END_BIT     // msb as name end
 195+ 78E4             >
 195+ 78E4 C3 78       >                dw      last_NFA            // Link to previous definition Name
 195+ 78E6             >WARM:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 195+ 78E6 88 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 195+ 78E8             >                else
 195+ 78E8 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 195+ 78E8             >                endif           ; ok        // for other definitions it "points" the correct handler
 195+ 78E8             >                // Use of "; ok" to suppress "warning[fwdref]"
 195+ 78E8             >
 195+ 78E8             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 196+ 78E8 65 7C                        dw      BLK_INIT                // blk-init
 197+ 78EA 41 84                        dw      SPLASH                  // splash
 198+ 78EC A9 63 07 00                  dw      LIT, 7, EMIT            // 7 emit
 198+ 78F0 D3 6F
 199+ 78F2 CB 78                        dw      ABORT                   // abort
 200+ 78F4 A5 69                        dw      EXIT                    // exit
 201+ 78F6
 202+ 78F6              //  ______________________________________________________________________
 203+ 78F6              //
 204+ 78F6              // cold         --
 205+ 78F6                              Colon_Def COLD, "COLD", is_normal
 205+ 78F6             >                New_Def  COLD, "COLD", Enter_Ptr, is_normal ; ok
 205+ 78F6             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 205+ 78F6             >
 205+ 78F6             >                // dummy db directives used to calculate length of namec
 205+ 78F6 43 4F 4C 44 >                db      "COLD"
 205+ 78FA             >len_NFA         defl    $ - temp_NFA
 205+ 78FA             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 205+ 78F6             >
 205+ 78F6 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 205+ 78F7 43 4F 4C 44 >                db      "COLD"               // name string in 7-bit ascii, but
 205+ 78FB             >                org     $-1                 // alter last byte of Name just above to set
 205+ 78FA C4          >                db      {b $} | END_BIT     // msb as name end
 205+ 78FB             >
 205+ 78FB DF 78       >                dw      last_NFA            // Link to previous definition Name
 205+ 78FD             >COLD:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 205+ 78FD 88 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 205+ 78FF             >                else
 205+ 78FF ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 205+ 78FF             >                endif           ; ok        // for other definitions it "points" the correct handler
 205+ 78FF             >                // Use of "; ok" to suppress "warning[fwdref]"
 205+ 78FF             >
 205+ 78FF             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 206+ 78FF A9 63 78 63                  dw      LIT, S0_origin          // [ hex $12 +origin ] Literal
 207+ 7903 A9 63 94 63                  dw      LIT, USER_Pointer       // [ hex $3E +origin ] literal
 208+ 7907 9D 6B                        dw      FETCH                   // @
 209+ 7909 A9 63 06 00                  dw      LIT, 6, PLUS            // 6 +
 209+ 790D 2A 6A
 210+ 790F A9 63 14 00                  dw      LIT, 20                 // 20
 211+ 7913 98 68                        dw      CMOVE
 212+ 7915 A9 63 72 63                  dw      LIT, Latest_origin      // [ hex 0C +origin ] literal
 213+ 7919 9D 6B                        dw      FETCH                   // @
 214+ 791B A9 63 55 78                  dw      LIT, Forth_Latest_Ptr   // [ ' forth >body 4 + ] Literal
 215+ 791F AA 6B                        dw      STORE                   // !
 216+ 7921 05 6D FB 6D                  dw      ZERO, NMODE, STORE      // 0 nmode !
 216+ 7925 AA 6B
 217+ 7927 DC 6D 9D 6B                  dw      FIRST, FETCH, DUP       // first @ dup
 217+ 792B 0A 6B
 218+ 792D 8F 6E AA 6B                  dw      USE, STORE              // use !
 219+ 7931 99 6E AA 6B                  dw      PREV, STORE             // prev !
 220+ 7935 A9 63 04 00                  dw      LIT, 4, PLACE, STORE    // 4 place !
 220+ 7939 AC 6E AA 6B
 221+ 793D              //              dw      LIT, 8
 222+ 793D              //              dw      LIT, FLAGS2, CSTORE     // 8 5C6A c!
 223+ 793D 15 6D DA 6E                  dw      TWO, HP, STORE          // 2 hp !
 223+ 7941 AA 6B
 224+ 7943 E6 78        Warm_Start:     dw      WARM
 225+ 7945 FD 78        Cold_Start:     dw      COLD
 226+ 7947 A5 69                        dw      EXIT
 227+ 7949
 228+ 7949              //  ______________________________________________________________________
 229+ 7949              WarmRoutine:
 230+ 7949              ColdRoutine:
 231+ 7949 DD 21 98 63                  ld      ix, Next_Ptr
 232+ 794D D9                           exx
 233+ 794E E5                           push    hl
 234+ 794F D9                           exx
 235+ 7950
 236+ 7950 ED 73 6E 63                  ld      (SP_Basic), sp
 237+ 7954 ED 7B 78 63                  ld      sp, (S0_origin)
 238+ 7958              //              nop
 239+ 7958 2A 7A 63                     ld      hl, (R0_origin)
 240+ 795B              //              nop
 241+ 795B                              ldrphl
 241+ 795B 22 96 63    >                ld      (RP_Pointer),hl
 242+ 795E 01 43 79                     ld      bc, Warm_Start
 243+ 7961 38 02                        jr      c, Warm_Skip
 244+ 7963 03                           inc     bc
 245+ 7964 03                           inc     bc
 246+ 7965              Warm_Skip:
 247+ 7965                              next
 247+ 7965 DD E9       >                jp      (ix)
 248+ 7967
 249+ 7967              //  ______________________________________________________________________
 250+ 7967              //
 251+ 7967              // basic        --
 252+ 7967                              New_Def BASIC, "BASIC", is_code, is_normal
 252+ 7967             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 252+ 7967             >
 252+ 7967             >                // dummy db directives used to calculate length of namec
 252+ 7967 42 41 53 49 >                db      "BASIC"
 252+ 796B 43          >
 252+ 796C             >len_NFA         defl    $ - temp_NFA
 252+ 796C             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 252+ 7967             >
 252+ 7967 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 252+ 7968 42 41 53 49 >                db      "BASIC"               // name string in 7-bit ascii, but
 252+ 796C 43          >
 252+ 796D             >                org     $-1                 // alter last byte of Name just above to set
 252+ 796C C3          >                db      {b $} | END_BIT     // msb as name end
 252+ 796D             >
 252+ 796D F6 78       >                dw      last_NFA            // Link to previous definition Name
 252+ 796F             >BASIC:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 252+ 796F ~           >                dw      runcode ; ok        // for primitive definitions  actual code
 252+ 796F             >                else
 252+ 796F 71 79       >                dw      $ + 2   ; ok        // is pointed by CFA
 252+ 7971             >                endif           ; ok        // for other definitions it "points" the correct handler
 252+ 7971             >                // Use of "; ok" to suppress "warning[fwdref]"
 252+ 7971             >
 252+ 7971             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 253+ 7971 C1                           pop     bc
 254+ 7972 21 00 00                     ld      hl, 0
 255+ 7975 39                           add     hl, sp
 256+ 7976 ED 7B 6E 63                  ld      sp, (SP_Basic)
 257+ 797A              //              nop
 258+ 797A 22 6E 63                     ld      (SP_Basic),hl
 259+ 797D D9                           exx
 260+ 797E E1                           pop     hl
 261+ 797F D9                           exx
 262+ 7980 C9                           ret     // to Basic
 263+ 7981
 264+ 7981              //  ______________________________________________________________________
 265+ 7981              //
 266+ 7981              // +-           n1 n2 -- n3
 267+ 7981              // leaves n1 with the sign of n2 as n3.
 268+ 7981                              Colon_Def PLUS_MINUS, "+-", is_normal
 268+ 7981             >                New_Def  PLUS_MINUS, "+-", Enter_Ptr, is_normal ; ok
 268+ 7981             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 268+ 7981             >
 268+ 7981             >                // dummy db directives used to calculate length of namec
 268+ 7981 2B 2D       >                db      "+-"
 268+ 7983             >len_NFA         defl    $ - temp_NFA
 268+ 7983             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 268+ 7981             >
 268+ 7981 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 268+ 7982 2B 2D       >                db      "+-"               // name string in 7-bit ascii, but
 268+ 7984             >                org     $-1                 // alter last byte of Name just above to set
 268+ 7983 AD          >                db      {b $} | END_BIT     // msb as name end
 268+ 7984             >
 268+ 7984 67 79       >                dw      last_NFA            // Link to previous definition Name
 268+ 7986             >PLUS_MINUS:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 268+ 7986 88 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 268+ 7988             >                else
 268+ 7988 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 268+ 7988             >                endif           ; ok        // for other definitions it "points" the correct handler
 268+ 7988             >                // Use of "; ok" to suppress "warning[fwdref]"
 268+ 7988             >
 268+ 7988             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 269+ 7988 02 6A                        dw      ZLESS                   // 0<
 270+ 798A                                                              // if
 271+ 798A 2C 64                        dw      ZBRANCH
 272+ 798C 04 00                        dw      Plus_Minus_Endif - $
 273+ 798E 95 6A                        dw          MINUS               //      minus
 274+ 7990              Plus_Minus_Endif:                               // endif
 275+ 7990 A5 69                        dw      EXIT                    // ;
 276+ 7992
 277+ 7992              //  ______________________________________________________________________
 278+ 7992              //
 279+ 7992              // d+-          d1 n -- d2
 280+ 7992              // leaves d1 with the sign of n as d2.
 281+ 7992                              Colon_Def DPLUS_MINUS, "D+-", is_normal
 281+ 7992             >                New_Def  DPLUS_MINUS, "D+-", Enter_Ptr, is_normal ; ok
 281+ 7992             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 281+ 7992             >
 281+ 7992             >                // dummy db directives used to calculate length of namec
 281+ 7992 44 2B 2D    >                db      "D+-"
 281+ 7995             >len_NFA         defl    $ - temp_NFA
 281+ 7995             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 281+ 7992             >
 281+ 7992 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 281+ 7993 44 2B 2D    >                db      "D+-"               // name string in 7-bit ascii, but
 281+ 7996             >                org     $-1                 // alter last byte of Name just above to set
 281+ 7995 AD          >                db      {b $} | END_BIT     // msb as name end
 281+ 7996             >
 281+ 7996 81 79       >                dw      last_NFA            // Link to previous definition Name
 281+ 7998             >DPLUS_MINUS:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 281+ 7998 88 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 281+ 799A             >                else
 281+ 799A ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 281+ 799A             >                endif           ; ok        // for other definitions it "points" the correct handler
 281+ 799A             >                // Use of "; ok" to suppress "warning[fwdref]"
 281+ 799A             >
 281+ 799A             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 282+ 799A 02 6A                        dw      ZLESS                   // 0<
 283+ 799C                                                              // if
 284+ 799C 2C 64                        dw      ZBRANCH
 285+ 799E 04 00                        dw      DPlus_Minus_Endif - $
 286+ 79A0 AB 6A                        dw          DMINUS              //      dminus
 287+ 79A2              DPlus_Minus_Endif:                              // endif
 288+ 79A2 A5 69                        dw      EXIT                    // ;
 289+ 79A4
 290+ 79A4              //  ______________________________________________________________________
 291+ 79A4              //
 292+ 79A4              // abs          n1 -- n2
 293+ 79A4                              Colon_Def ABS_OP, "ABS", is_normal
 293+ 79A4             >                New_Def  ABS_OP, "ABS", Enter_Ptr, is_normal ; ok
 293+ 79A4             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 293+ 79A4             >
 293+ 79A4             >                // dummy db directives used to calculate length of namec
 293+ 79A4 41 42 53    >                db      "ABS"
 293+ 79A7             >len_NFA         defl    $ - temp_NFA
 293+ 79A7             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 293+ 79A4             >
 293+ 79A4 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 293+ 79A5 41 42 53    >                db      "ABS"               // name string in 7-bit ascii, but
 293+ 79A8             >                org     $-1                 // alter last byte of Name just above to set
 293+ 79A7 D3          >                db      {b $} | END_BIT     // msb as name end
 293+ 79A8             >
 293+ 79A8 92 79       >                dw      last_NFA            // Link to previous definition Name
 293+ 79AA             >ABS_OP:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 293+ 79AA 88 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 293+ 79AC             >                else
 293+ 79AC ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 293+ 79AC             >                endif           ; ok        // for other definitions it "points" the correct handler
 293+ 79AC             >                // Use of "; ok" to suppress "warning[fwdref]"
 293+ 79AC             >
 293+ 79AC             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 294+ 79AC 0A 6B                        dw      DUP                     // dup
 295+ 79AE 86 79                        dw      PLUS_MINUS              // +-
 296+ 79B0 A5 69                        dw      EXIT                    // ;
 297+ 79B2
 298+ 79B2              //  ______________________________________________________________________
 299+ 79B2              //
 300+ 79B2              // dabs         d1 -- d2
 301+ 79B2                              Colon_Def DABS, "DABS", is_normal
 301+ 79B2             >                New_Def  DABS, "DABS", Enter_Ptr, is_normal ; ok
 301+ 79B2             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 301+ 79B2             >
 301+ 79B2             >                // dummy db directives used to calculate length of namec
 301+ 79B2 44 41 42 53 >                db      "DABS"
 301+ 79B6             >len_NFA         defl    $ - temp_NFA
 301+ 79B6             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 301+ 79B2             >
 301+ 79B2 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 301+ 79B3 44 41 42 53 >                db      "DABS"               // name string in 7-bit ascii, but
 301+ 79B7             >                org     $-1                 // alter last byte of Name just above to set
 301+ 79B6 D3          >                db      {b $} | END_BIT     // msb as name end
 301+ 79B7             >
 301+ 79B7 A4 79       >                dw      last_NFA            // Link to previous definition Name
 301+ 79B9             >DABS:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 301+ 79B9 88 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 301+ 79BB             >                else
 301+ 79BB ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 301+ 79BB             >                endif           ; ok        // for other definitions it "points" the correct handler
 301+ 79BB             >                // Use of "; ok" to suppress "warning[fwdref]"
 301+ 79BB             >
 301+ 79BB             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 302+ 79BB 0A 6B                        dw      DUP                     // dup
 303+ 79BD 98 79                        dw      DPLUS_MINUS             // d+-
 304+ 79BF A5 69                        dw      EXIT                    // ;
 305+ 79C1
 306+ 79C1              //  ______________________________________________________________________
 307+ 79C1              //
 308+ 79C1              // m*           n1 n2 -- d
 309+ 79C1              // multiply two integer giving a double
 310+ 79C1                              Colon_Def MMUL, "M*", is_normal
 310+ 79C1             >                New_Def  MMUL, "M*", Enter_Ptr, is_normal ; ok
 310+ 79C1             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 310+ 79C1             >
 310+ 79C1             >                // dummy db directives used to calculate length of namec
 310+ 79C1 4D 2A       >                db      "M*"
 310+ 79C3             >len_NFA         defl    $ - temp_NFA
 310+ 79C3             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 310+ 79C1             >
 310+ 79C1 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 310+ 79C2 4D 2A       >                db      "M*"               // name string in 7-bit ascii, but
 310+ 79C4             >                org     $-1                 // alter last byte of Name just above to set
 310+ 79C3 AA          >                db      {b $} | END_BIT     // msb as name end
 310+ 79C4             >
 310+ 79C4 B2 79       >                dw      last_NFA            // Link to previous definition Name
 310+ 79C6             >MMUL:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 310+ 79C6 88 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 310+ 79C8             >                else
 310+ 79C8 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 310+ 79C8             >                endif           ; ok        // for other definitions it "points" the correct handler
 310+ 79C8             >                // Use of "; ok" to suppress "warning[fwdref]"
 310+ 79C8             >
 310+ 79C8             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 311+ 79C8 6B 6B 5A 69                  dw      TWO_DUP, XOR_OP, TO_R   // 2dup xor >r
 311+ 79CC B8 69
 312+ 79CE AA 79 FD 6A                  dw      ABS_OP, SWAP            // abs swap
 313+ 79D2 AA 79 CB 68                  dw      ABS_OP, UM_MUL          // abs um*
 314+ 79D6 CC 69 98 79                  dw      R_TO, DPLUS_MINUS       // r> d+-
 315+ 79DA A5 69                        dw      EXIT                    // ;
 316+ 79DC
 317+ 79DC              //  ______________________________________________________________________
 318+ 79DC              //
 319+ 79DC              // sm/rem       d n -- q r
 320+ 79DC              // Symmetric division: divides a double into n giving quotient q and remainder r
 321+ 79DC              // the remainder has the sign of d.
 322+ 79DC                              Colon_Def SMDIVM, "SM/REM", is_normal
 322+ 79DC             >                New_Def  SMDIVM, "SM/REM", Enter_Ptr, is_normal ; ok
 322+ 79DC             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 322+ 79DC             >
 322+ 79DC             >                // dummy db directives used to calculate length of namec
 322+ 79DC 53 4D 2F 52 >                db      "SM/REM"
 322+ 79E0 45 4D       >
 322+ 79E2             >len_NFA         defl    $ - temp_NFA
 322+ 79E2             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 322+ 79DC             >
 322+ 79DC 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 322+ 79DD 53 4D 2F 52 >                db      "SM/REM"               // name string in 7-bit ascii, but
 322+ 79E1 45 4D       >
 322+ 79E3             >                org     $-1                 // alter last byte of Name just above to set
 322+ 79E2 CD          >                db      {b $} | END_BIT     // msb as name end
 322+ 79E3             >
 322+ 79E3 C1 79       >                dw      last_NFA            // Link to previous definition Name
 322+ 79E5             >SMDIVM:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 322+ 79E5 88 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 322+ 79E7             >                else
 322+ 79E7 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 322+ 79E7             >                endif           ; ok        // for other definitions it "points" the correct handler
 322+ 79E7             >                // Use of "; ok" to suppress "warning[fwdref]"
 322+ 79E7             >
 322+ 79E7             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 323+ 79E7 C5 6A B8 69                  dw      OVER, TO_R, TO_R        // over >r >r
 323+ 79EB B8 69
 324+ 79ED B9 79 E0 69                  dw      DABS, R_OP, ABS_OP      // dabs r abs
 324+ 79F1 AA 79
 325+ 79F3 FC 68                        dw      UMDIVMOD                // um/mod
 326+ 79F5 CC 69                        dw      R_TO                    // r>
 327+ 79F7 E0 69 5A 69                  dw      R_OP, XOR_OP            // r xor
 328+ 79FB 86 79 FD 6A                  dw      PLUS_MINUS, SWAP        // +- swap
 329+ 79FF CC 69                        dw      R_TO                    // r>
 330+ 7A01 86 79 FD 6A                  dw      PLUS_MINUS, SWAP        // +- swap
 331+ 7A05 A5 69                        dw      EXIT                    // ;
 332+ 7A07
 333+ 7A07              //  ______________________________________________________________________
 334+ 7A07              //
 335+ 7A07              // fm/mod       d n -- q r
 336+ 7A07              // Floored division: divides a double into n giving quotient q and remainder r
 337+ 7A07              // the remainder has the sign of d.
 338+ 7A07                              Colon_Def FMDIVM, "FM/MOD", is_normal
 338+ 7A07             >                New_Def  FMDIVM, "FM/MOD", Enter_Ptr, is_normal ; ok
 338+ 7A07             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 338+ 7A07             >
 338+ 7A07             >                // dummy db directives used to calculate length of namec
 338+ 7A07 46 4D 2F 4D >                db      "FM/MOD"
 338+ 7A0B 4F 44       >
 338+ 7A0D             >len_NFA         defl    $ - temp_NFA
 338+ 7A0D             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 338+ 7A07             >
 338+ 7A07 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 338+ 7A08 46 4D 2F 4D >                db      "FM/MOD"               // name string in 7-bit ascii, but
 338+ 7A0C 4F 44       >
 338+ 7A0E             >                org     $-1                 // alter last byte of Name just above to set
 338+ 7A0D C4          >                db      {b $} | END_BIT     // msb as name end
 338+ 7A0E             >
 338+ 7A0E DC 79       >                dw      last_NFA            // Link to previous definition Name
 338+ 7A10             >FMDIVM:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 338+ 7A10 88 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 338+ 7A12             >                else
 338+ 7A12 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 338+ 7A12             >                endif           ; ok        // for other definitions it "points" the correct handler
 338+ 7A12             >                // Use of "; ok" to suppress "warning[fwdref]"
 338+ 7A12             >
 338+ 7A12             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 339+ 7A12 0A 6B B8 69                  dw      DUP, TO_R               // dup >r
 340+ 7A16 E5 79                        dw      SMDIVM
 341+ 7A18 C5 6A 0A 6B                  dw      OVER, DUP
 342+ 7A1C E7 69 E7 69                  dw      ZEQUAL, ZEQUAL
 343+ 7A20 FD 6A 02 6A                  dw      SWAP, ZLESS
 344+ 7A24 E0 69 02 6A                  dw      R_OP, ZLESS
 345+ 7A28 5A 69 35 69                  dw      XOR_OP, AND_OP
 346+ 7A2C 2C 64                        dw      ZBRANCH
 347+ 7A2E 10 00                        dw      Fm_Mod_Else - $
 348+ 7A30 57 6A                        dw          ONE_SUBTRACT
 349+ 7A32 FD 6A CC 69                  dw          SWAP, R_TO
 350+ 7A36 2A 6A FD 6A                  dw          PLUS, SWAP
 351+ 7A3A 15 64                        dw      BRANCH
 352+ 7A3C 06 00                        dw      Fm_Mod_Endif - $
 353+ 7A3E              Fm_Mod_Else:
 354+ 7A3E CC 69 D5 6A                  dw          R_TO, DROP
 355+ 7A42              Fm_Mod_Endif:
 356+ 7A42 A5 69                        dw      EXIT
 357+ 7A44              //              dw      TWO_DUP                 // 2dup
 358+ 7A44              //              dw      XOR_OP, TO_R, TO_R      // xor >r >r
 359+ 7A44              //              dw      DABS, R_OP, ABS_OP      // dabs r abs
 360+ 7A44              //              dw      UMDIVMOD                // um/mod
 361+ 7A44              //              dw      SWAP                    // swap
 362+ 7A44              //              dw      II, ZLESS               // i'
 363+ 7A44              //              dw      ONE, AND_OP, PLUS       // 0< 1 and +
 364+ 7A44              //              dw      R_TO                    // r>
 365+ 7A44              //              dw      PLUS_MINUS, SWAP        // +- swap
 366+ 7A44              //              dw      R_OP                    // r@
 367+ 7A44              //              dw      ZLESS                   // i'
 368+ 7A44              //              dw      ONE, AND_OP, PLUS       // 0< 1 and +
 369+ 7A44              //              dw      R_TO                    // r>
 370+ 7A44              //              dw      PLUS_MINUS              // +- swap
 371+ 7A44              //              dw      EXIT                    // ;
 372+ 7A44
 373+ 7A44              //  ______________________________________________________________________
 374+ 7A44              //
 375+ 7A44              // m/mod        d n -- q r
 376+ 7A44              // multiply two integer giving a double
 377+ 7A44                              Colon_Def MDIVM, "M/MOD", is_normal
 377+ 7A44             >                New_Def  MDIVM, "M/MOD", Enter_Ptr, is_normal ; ok
 377+ 7A44             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 377+ 7A44             >
 377+ 7A44             >                // dummy db directives used to calculate length of namec
 377+ 7A44 4D 2F 4D 4F >                db      "M/MOD"
 377+ 7A48 44          >
 377+ 7A49             >len_NFA         defl    $ - temp_NFA
 377+ 7A49             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 377+ 7A44             >
 377+ 7A44 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 377+ 7A45 4D 2F 4D 4F >                db      "M/MOD"               // name string in 7-bit ascii, but
 377+ 7A49 44          >
 377+ 7A4A             >                org     $-1                 // alter last byte of Name just above to set
 377+ 7A49 C4          >                db      {b $} | END_BIT     // msb as name end
 377+ 7A4A             >
 377+ 7A4A 07 7A       >                dw      last_NFA            // Link to previous definition Name
 377+ 7A4C             >MDIVM:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 377+ 7A4C 88 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 377+ 7A4E             >                else
 377+ 7A4E ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 377+ 7A4E             >                endif           ; ok        // for other definitions it "points" the correct handler
 377+ 7A4E             >                // Use of "; ok" to suppress "warning[fwdref]"
 377+ 7A4E             >
 377+ 7A4E             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 378+ 7A4E E5 79                        dw      SMDIVM
 379+ 7A50 A5 69                        dw      EXIT                    // ;
 380+ 7A52
 381+ 7A52              //  ______________________________________________________________________
 382+ 7A52              //
 383+ 7A52              // m/           d n -- q
 384+ 7A52              // multiply two integer giving a double
 385+ 7A52                              Colon_Def MDIV, "M/", is_normal
 385+ 7A52             >                New_Def  MDIV, "M/", Enter_Ptr, is_normal ; ok
 385+ 7A52             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 385+ 7A52             >
 385+ 7A52             >                // dummy db directives used to calculate length of namec
 385+ 7A52 4D 2F       >                db      "M/"
 385+ 7A54             >len_NFA         defl    $ - temp_NFA
 385+ 7A54             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 385+ 7A52             >
 385+ 7A52 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 385+ 7A53 4D 2F       >                db      "M/"               // name string in 7-bit ascii, but
 385+ 7A55             >                org     $-1                 // alter last byte of Name just above to set
 385+ 7A54 AF          >                db      {b $} | END_BIT     // msb as name end
 385+ 7A55             >
 385+ 7A55 44 7A       >                dw      last_NFA            // Link to previous definition Name
 385+ 7A57             >MDIV:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 385+ 7A57 88 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 385+ 7A59             >                else
 385+ 7A59 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 385+ 7A59             >                endif           ; ok        // for other definitions it "points" the correct handler
 385+ 7A59             >                // Use of "; ok" to suppress "warning[fwdref]"
 385+ 7A59             >
 385+ 7A59             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 386+ 7A59 4C 7A E0 6A                  dw      MDIVM, NIP
 387+ 7A5D A5 69                        dw      EXIT                    // ;
 388+ 7A5F
 389+ 7A5F              //  ______________________________________________________________________
 390+ 7A5F              //
 391+ 7A5F              // *            n1 n2 -- n3
 392+ 7A5F              // multiply two integer
 393+ 7A5F                              Colon_Def MUL, "*", is_normal
 393+ 7A5F             >                New_Def  MUL, "*", Enter_Ptr, is_normal ; ok
 393+ 7A5F             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 393+ 7A5F             >
 393+ 7A5F             >                // dummy db directives used to calculate length of namec
 393+ 7A5F 2A          >                db      "*"
 393+ 7A60             >len_NFA         defl    $ - temp_NFA
 393+ 7A60             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 393+ 7A5F             >
 393+ 7A5F 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 393+ 7A60 2A          >                db      "*"               // name string in 7-bit ascii, but
 393+ 7A61             >                org     $-1                 // alter last byte of Name just above to set
 393+ 7A60 AA          >                db      {b $} | END_BIT     // msb as name end
 393+ 7A61             >
 393+ 7A61 52 7A       >                dw      last_NFA            // Link to previous definition Name
 393+ 7A63             >MUL:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 393+ 7A63 88 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 393+ 7A65             >                else
 393+ 7A65 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 393+ 7A65             >                endif           ; ok        // for other definitions it "points" the correct handler
 393+ 7A65             >                // Use of "; ok" to suppress "warning[fwdref]"
 393+ 7A65             >
 393+ 7A65             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 394+ 7A65 C6 79 D5 6A                  dw      MMUL, DROP              // m* drop
 395+ 7A69 A5 69                        dw      EXIT                    // ;
 396+ 7A6B
 397+ 7A6B              //  ______________________________________________________________________
 398+ 7A6B              //
 399+ 7A6B              // /mod         n1 n2 -- n3 n4
 400+ 7A6B              // leaves quotient n4 and remainder n3 of the integer division n1 / n2.
 401+ 7A6B              // The remainder has the sign of n1
 402+ 7A6B                              Colon_Def DIVMOD, "/MOD", is_normal
 402+ 7A6B             >                New_Def  DIVMOD, "/MOD", Enter_Ptr, is_normal ; ok
 402+ 7A6B             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 402+ 7A6B             >
 402+ 7A6B             >                // dummy db directives used to calculate length of namec
 402+ 7A6B 2F 4D 4F 44 >                db      "/MOD"
 402+ 7A6F             >len_NFA         defl    $ - temp_NFA
 402+ 7A6F             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 402+ 7A6B             >
 402+ 7A6B 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 402+ 7A6C 2F 4D 4F 44 >                db      "/MOD"               // name string in 7-bit ascii, but
 402+ 7A70             >                org     $-1                 // alter last byte of Name just above to set
 402+ 7A6F C4          >                db      {b $} | END_BIT     // msb as name end
 402+ 7A70             >
 402+ 7A70 5F 7A       >                dw      last_NFA            // Link to previous definition Name
 402+ 7A72             >DIVMOD:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 402+ 7A72 88 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 402+ 7A74             >                else
 402+ 7A74 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 402+ 7A74             >                endif           ; ok        // for other definitions it "points" the correct handler
 402+ 7A74             >                // Use of "; ok" to suppress "warning[fwdref]"
 402+ 7A74             >
 402+ 7A74             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 403+ 7A74 B8 69 23 6F                  dw      TO_R, S_TO_D, R_TO      // >r s->d r>
 403+ 7A78 CC 69
 404+ 7A7A 4C 7A                        dw      MDIVM                   // m/mod
 405+ 7A7C A5 69                        dw      EXIT                    // ;
 406+ 7A7E
 407+ 7A7E              //  ______________________________________________________________________
 408+ 7A7E              //
 409+ 7A7E              // /            n1 n2 -- n3
 410+ 7A7E              // division
 411+ 7A7E                              Colon_Def DIV, "/", is_normal
 411+ 7A7E             >                New_Def  DIV, "/", Enter_Ptr, is_normal ; ok
 411+ 7A7E             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 411+ 7A7E             >
 411+ 7A7E             >                // dummy db directives used to calculate length of namec
 411+ 7A7E 2F          >                db      "/"
 411+ 7A7F             >len_NFA         defl    $ - temp_NFA
 411+ 7A7F             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 411+ 7A7E             >
 411+ 7A7E 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 411+ 7A7F 2F          >                db      "/"               // name string in 7-bit ascii, but
 411+ 7A80             >                org     $-1                 // alter last byte of Name just above to set
 411+ 7A7F AF          >                db      {b $} | END_BIT     // msb as name end
 411+ 7A80             >
 411+ 7A80 6B 7A       >                dw      last_NFA            // Link to previous definition Name
 411+ 7A82             >DIV:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 411+ 7A82 88 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 411+ 7A84             >                else
 411+ 7A84 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 411+ 7A84             >                endif           ; ok        // for other definitions it "points" the correct handler
 411+ 7A84             >                // Use of "; ok" to suppress "warning[fwdref]"
 411+ 7A84             >
 411+ 7A84             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 412+ 7A84 72 7A E0 6A                  dw      DIVMOD, NIP             // /mod nip
 413+ 7A88 A5 69                        dw      EXIT                    // ;
 414+ 7A8A
 415+ 7A8A              //  ______________________________________________________________________
 416+ 7A8A              //
 417+ 7A8A              // mod          n1 n2 -- n3
 418+ 7A8A                              Colon_Def MOD, "MOD", is_normal
 418+ 7A8A             >                New_Def  MOD, "MOD", Enter_Ptr, is_normal ; ok
 418+ 7A8A             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 418+ 7A8A             >
 418+ 7A8A             >                // dummy db directives used to calculate length of namec
 418+ 7A8A 4D 4F 44    >                db      "MOD"
 418+ 7A8D             >len_NFA         defl    $ - temp_NFA
 418+ 7A8D             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 418+ 7A8A             >
 418+ 7A8A 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 418+ 7A8B 4D 4F 44    >                db      "MOD"               // name string in 7-bit ascii, but
 418+ 7A8E             >                org     $-1                 // alter last byte of Name just above to set
 418+ 7A8D C4          >                db      {b $} | END_BIT     // msb as name end
 418+ 7A8E             >
 418+ 7A8E 7E 7A       >                dw      last_NFA            // Link to previous definition Name
 418+ 7A90             >MOD:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 418+ 7A90 88 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 418+ 7A92             >                else
 418+ 7A92 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 418+ 7A92             >                endif           ; ok        // for other definitions it "points" the correct handler
 418+ 7A92             >                // Use of "; ok" to suppress "warning[fwdref]"
 418+ 7A92             >
 418+ 7A92             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 419+ 7A92 72 7A D5 6A                  dw      DIVMOD, DROP            // /mod drop
 420+ 7A96 A5 69                        dw      EXIT                    // ;
 421+ 7A98
 422+ 7A98              //  ______________________________________________________________________
 423+ 7A98              //
 424+ 7A98              // */mod        n1 n2 n3 -- n4 n5
 425+ 7A98              // leaves the quotient n5 and the remainder n4 of the operation
 426+ 7A98              // (n1 * n2) / n3. The intermediate passage through a double number
 427+ 7A98              // avoids loss of precision
 428+ 7A98                              Colon_Def MUL_DIV_MOD, "*/MOD", is_normal
 428+ 7A98             >                New_Def  MUL_DIV_MOD, "*/MOD", Enter_Ptr, is_normal ; ok
 428+ 7A98             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 428+ 7A98             >
 428+ 7A98             >                // dummy db directives used to calculate length of namec
 428+ 7A98 2A 2F 4D 4F >                db      "*/MOD"
 428+ 7A9C 44          >
 428+ 7A9D             >len_NFA         defl    $ - temp_NFA
 428+ 7A9D             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 428+ 7A98             >
 428+ 7A98 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 428+ 7A99 2A 2F 4D 4F >                db      "*/MOD"               // name string in 7-bit ascii, but
 428+ 7A9D 44          >
 428+ 7A9E             >                org     $-1                 // alter last byte of Name just above to set
 428+ 7A9D C4          >                db      {b $} | END_BIT     // msb as name end
 428+ 7A9E             >
 428+ 7A9E 8A 7A       >                dw      last_NFA            // Link to previous definition Name
 428+ 7AA0             >MUL_DIV_MOD:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 428+ 7AA0 88 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 428+ 7AA2             >                else
 428+ 7AA2 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 428+ 7AA2             >                endif           ; ok        // for other definitions it "points" the correct handler
 428+ 7AA2             >                // Use of "; ok" to suppress "warning[fwdref]"
 428+ 7AA2             >
 428+ 7AA2             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 429+ 7AA2 B8 69 C6 79                  dw      TO_R, MMUL              // >r  m*
 430+ 7AA6 CC 69 4C 7A                  dw      R_TO, MDIVM             // r>  m/mod
 431+ 7AAA A5 69                        dw      EXIT                    // ;
 432+ 7AAC
 433+ 7AAC              //  ______________________________________________________________________
 434+ 7AAC              //
 435+ 7AAC              // */          n1 n2 n3 -- n4
 436+ 7AAC              // (n1 * n2) / n3. The intermediate passage through a double number avoids loss of precision
 437+ 7AAC                              Colon_Def MUL_DIV, "*/", is_normal
 437+ 7AAC             >                New_Def  MUL_DIV, "*/", Enter_Ptr, is_normal ; ok
 437+ 7AAC             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 437+ 7AAC             >
 437+ 7AAC             >                // dummy db directives used to calculate length of namec
 437+ 7AAC 2A 2F       >                db      "*/"
 437+ 7AAE             >len_NFA         defl    $ - temp_NFA
 437+ 7AAE             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 437+ 7AAC             >
 437+ 7AAC 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 437+ 7AAD 2A 2F       >                db      "*/"               // name string in 7-bit ascii, but
 437+ 7AAF             >                org     $-1                 // alter last byte of Name just above to set
 437+ 7AAE AF          >                db      {b $} | END_BIT     // msb as name end
 437+ 7AAF             >
 437+ 7AAF 98 7A       >                dw      last_NFA            // Link to previous definition Name
 437+ 7AB1             >MUL_DIV:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 437+ 7AB1 88 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 437+ 7AB3             >                else
 437+ 7AB3 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 437+ 7AB3             >                endif           ; ok        // for other definitions it "points" the correct handler
 437+ 7AB3             >                // Use of "; ok" to suppress "warning[fwdref]"
 437+ 7AB3             >
 437+ 7AB3             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 438+ 7AB3 A0 7A                        dw     MUL_DIV_MOD              // */mod
 439+ 7AB5 E0 6A                        dw     NIP                      // nip
 440+ 7AB7 A5 69                        dw     EXIT                     // ;
 441+ 7AB9
 442+ 7AB9
 443+ 7AB9              //  ______________________________________________________________________
 444+ 7AB9              //
 445+ 7AB9              // m/mod        ud1 u2 -- u3 ud4
 446+ 7AB9              // mixed operation: it leaves the remainder u3 and the quotient ud4 of ud1 / u1.
 447+ 7AB9              // All terms are unsigned.
 448+ 7AB9              //              Colon_Def MDIV_MOD, "M/MOD", is_normal
 449+ 7AB9              //              dw      TO_R                    // >r           ( ud1 )
 450+ 7AB9              //              dw      ZERO, R_OP, UMDIVMOD    // 0 r um/mod   ( l rem1 h/r )
 451+ 7AB9              //              dw      R_TO, SWAP, TO_R        // r> swap >r   ( l rem )
 452+ 7AB9              //              dw      UMDIVMOD                // um/mod       ( rem2 l/r )
 453+ 7AB9              //              dw      R_TO                    // r>           ( rem2 l/r h/r )
 454+ 7AB9              //              dw      EXIT                    // ;
 455+ 7AB9
 456+ 7AB9              //  ______________________________________________________________________
 457+ 7AB9              //
 458+ 7AB9              // (line)       n1 n2 -- a b
 459+ 7AB9              // sends the line n1 of block n2 to the disk buffer.
 460+ 7AB9              // it returns the address a and ca counter b = C/L meaning a whole line.
 461+ 7AB9                              Colon_Def CLINE, "(LINE)", is_normal
 461+ 7AB9             >                New_Def  CLINE, "(LINE)", Enter_Ptr, is_normal ; ok
 461+ 7AB9             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 461+ 7AB9             >
 461+ 7AB9             >                // dummy db directives used to calculate length of namec
 461+ 7AB9 28 4C 49 4E >                db      "(LINE)"
 461+ 7ABD 45 29       >
 461+ 7ABF             >len_NFA         defl    $ - temp_NFA
 461+ 7ABF             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 461+ 7AB9             >
 461+ 7AB9 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 461+ 7ABA 28 4C 49 4E >                db      "(LINE)"               // name string in 7-bit ascii, but
 461+ 7ABE 45 29       >
 461+ 7AC0             >                org     $-1                 // alter last byte of Name just above to set
 461+ 7ABF A9          >                db      {b $} | END_BIT     // msb as name end
 461+ 7AC0             >
 461+ 7AC0 AC 7A       >                dw      last_NFA            // Link to previous definition Name
 461+ 7AC2             >CLINE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 461+ 7AC2 88 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 461+ 7AC4             >                else
 461+ 7AC4 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 461+ 7AC4             >                endif           ; ok        // for other definitions it "points" the correct handler
 461+ 7AC4             >                // Use of "; ok" to suppress "warning[fwdref]"
 461+ 7AC4             >
 461+ 7AC4             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 462+ 7AC4 B8 69                        dw      TO_R                    // >r
 463+ 7AC6 B0 6C                        dw      NOOP                    // noop
 464+ 7AC8 39 6D                        dw      CL                      // c/l
 465+ 7ACA 45 6D A0 7A                  dw      BBUF, MUL_DIV_MOD       // */mod
 466+ 7ACE CC 69                        dw      R_TO                    // r>
 467+ 7AD0 51 6D 63 7A                  dw      BSCR, MUL, PLUS         // b/scr * +
 467+ 7AD4 2A 6A
 468+ 7AD6 7D 7D                        dw      BLOCK                   // block   ( forward )
 469+ 7AD8 2A 6A                        dw      PLUS                    // +
 470+ 7ADA B0 6C                        dw      NOOP                    // noop
 471+ 7ADC 39 6D                        dw      CL                      // c/l
 472+ 7ADE A5 69                        dw      EXIT                    // ;
 473+ 7AE0
 474+ 7AE0              //  ______________________________________________________________________
 475+ 7AE0              //
 476+ 7AE0              // .line        n1 n2 --
 477+ 7AE0              // Sends to output line  n1  of screen n2.
 478+ 7AE0                              Colon_Def DOT_LINE, ".LINE", is_normal
 478+ 7AE0             >                New_Def  DOT_LINE, ".LINE", Enter_Ptr, is_normal ; ok
 478+ 7AE0             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 478+ 7AE0             >
 478+ 7AE0             >                // dummy db directives used to calculate length of namec
 478+ 7AE0 2E 4C 49 4E >                db      ".LINE"
 478+ 7AE4 45          >
 478+ 7AE5             >len_NFA         defl    $ - temp_NFA
 478+ 7AE5             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 478+ 7AE0             >
 478+ 7AE0 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 478+ 7AE1 2E 4C 49 4E >                db      ".LINE"               // name string in 7-bit ascii, but
 478+ 7AE5 45          >
 478+ 7AE6             >                org     $-1                 // alter last byte of Name just above to set
 478+ 7AE5 C5          >                db      {b $} | END_BIT     // msb as name end
 478+ 7AE6             >
 478+ 7AE6 B9 7A       >                dw      last_NFA            // Link to previous definition Name
 478+ 7AE8             >DOT_LINE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 478+ 7AE8 88 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 478+ 7AEA             >                else
 478+ 7AEA ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 478+ 7AEA             >                endif           ; ok        // for other definitions it "points" the correct handler
 478+ 7AEA             >                // Use of "; ok" to suppress "warning[fwdref]"
 478+ 7AEA             >
 478+ 7AEA             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 479+ 7AEA C2 7A C9 72                  dw      CLINE, LTRAILING, TYPE  // (line) -trailing type
 479+ 7AEE 65 72
 480+ 7AF0 A5 69                        dw      EXIT                    // ;
 481+ 7AF2
 482+ 7AF2              //  ______________________________________________________________________
 483+ 7AF2              //
 484+ 7AF2              // message       n1 n2 --
 485+ 7AF2              // prints error message to current channel.
 486+ 7AF2              // if WARNING is 0, prints "MSG#n".
 487+ 7AF2              // if WARNING is 1, prints line n of screen 4.
 488+ 7AF2              // if WARNING is -1, see ERROR
 489+ 7AF2              // value can be negative or beyond block 4.
 490+ 7AF2                              Colon_Def MESSAGE, "MESSAGE", is_normal
 490+ 7AF2             >                New_Def  MESSAGE, "MESSAGE", Enter_Ptr, is_normal ; ok
 490+ 7AF2             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 490+ 7AF2             >
 490+ 7AF2             >                // dummy db directives used to calculate length of namec
 490+ 7AF2 4D 45 53 53 >                db      "MESSAGE"
 490+ 7AF6 41 47 45    >
 490+ 7AF9             >len_NFA         defl    $ - temp_NFA
 490+ 7AF9             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 490+ 7AF2             >
 490+ 7AF2 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 490+ 7AF3 4D 45 53 53 >                db      "MESSAGE"               // name string in 7-bit ascii, but
 490+ 7AF7 41 47 45    >
 490+ 7AFA             >                org     $-1                 // alter last byte of Name just above to set
 490+ 7AF9 C5          >                db      {b $} | END_BIT     // msb as name end
 490+ 7AFA             >
 490+ 7AFA E0 7A       >                dw      last_NFA            // Link to previous definition Name
 490+ 7AFC             >MESSAGE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 490+ 7AFC 88 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 490+ 7AFE             >                else
 490+ 7AFE ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 490+ 7AFE             >                endif           ; ok        // for other definitions it "points" the correct handler
 490+ 7AFE             >                // Use of "; ok" to suppress "warning[fwdref]"
 490+ 7AFE             >
 490+ 7AFE             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 491+ 7AFE B0 6D 9D 6B                  dw      WARNING, FETCH          // warning @
 492+ 7B02                                                              // if
 493+ 7B02 2C 64                        dw      ZBRANCH
 494+ 7B04 18 00                        dw      Message_Else - $
 495+ 7B06 A9 63 04 00                  dw          LIT, 4              //      4
 496+ 7B0A 2B 6E 9D 6B                  dw          OFFSET, FETCH       //      offset @
 497+ 7B0E 51 6D 82 7A                  dw          BSCR, DIV, SUBTRACT //      b/scr / -
 497+ 7B12 37 6F
 498+ 7B14 E8 7A                        dw          DOT_LINE            //      .line
 499+ 7B16 EF 6F                        dw          SPACE               //      space
 500+ 7B18                                                              // else
 501+ 7B18
 502+ 7B18 15 64                        dw      BRANCH
 503+ 7B1A 0B 00                        dw      Message_ENdif - $
 504+ 7B1C              Message_Else:
 505+ 7B1C 79 74                        dw          C_DOT_QUOTE         //      .( msg#)
 506+ 7B1E 04 6D 73 67                  db          4, "msg#"
 506+ 7B22 23
 507+ 7B23 3A 83                        dw          DOT                 //      .  ( forward )
 508+ 7B25              Message_ENdif:                                  // endif
 509+ 7B25 A5 69                        dw      EXIT                    // ;
 510+ 7B27
 511+ 7B27
 512+ 7B27              //  ______________________________________________________________________
 513+ 7B27              //
 514+ 7B27              // device
 515+ 7B27                              Variable_Def DEVICE,   "DEVICE",   2
 515+ 7B27             >                New_Def  DEVICE, "DEVICE", Variable_Ptr, is_normal
 515+ 7B27             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 515+ 7B27             >
 515+ 7B27             >                // dummy db directives used to calculate length of namec
 515+ 7B27 44 45 56 49 >                db      "DEVICE"
 515+ 7B2B 43 45       >
 515+ 7B2D             >len_NFA         defl    $ - temp_NFA
 515+ 7B2D             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 515+ 7B27             >
 515+ 7B27 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 515+ 7B28 44 45 56 49 >                db      "DEVICE"               // name string in 7-bit ascii, but
 515+ 7B2C 43 45       >
 515+ 7B2E             >                org     $-1                 // alter last byte of Name just above to set
 515+ 7B2D C5          >                db      {b $} | END_BIT     // msb as name end
 515+ 7B2E             >
 515+ 7B2E F2 7A       >                dw      last_NFA            // Link to previous definition Name
 515+ 7B30             >DEVICE:          if Variable_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 515+ 7B30 E2 6C       >                dw      Variable_Ptr ; ok        // for primitive definitions  actual code
 515+ 7B32             >                else
 515+ 7B32 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 515+ 7B32             >                endif           ; ok        // for other definitions it "points" the correct handler
 515+ 7B32             >                // Use of "; ok" to suppress "warning[fwdref]"
 515+ 7B32             >
 515+ 7B32             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 515+ 7B32 02 00       >                dw      2
 516+ 7B34
 517+ 7B34              //  ______________________________________________________________________
 518+ 7B34
# file closed: C:\Zx\CSpect\Projects\vForth15_INDIRECT/source/L2.asm
 112  7B34                              include "next-opt1.asm"
# file opened: C:\Zx\CSpect\Projects\vForth15_INDIRECT/source/next-opt1.asm
   1+ 7B34              //  ______________________________________________________________________
   2+ 7B34              //
   3+ 7B34              //  next-opt.asm
   4+ 7B34              //
   5+ 7B34              //  ZX Spectrum Next - peculiar definitions
   6+ 7B34              //  ______________________________________________________________________
   7+ 7B34
   8+ 7B34              //  ______________________________________________________________________
   9+ 7B34              //
  10+ 7B34              // reg@         n -- b
  11+ 7B34              // read Next REGister n giving byte b
  12+ 7B34
  13+ 7B34                              New_Def REG_FETCH, "REG@", is_code, is_normal
  13+ 7B34             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  13+ 7B34             >
  13+ 7B34             >                // dummy db directives used to calculate length of namec
  13+ 7B34 52 45 47 40 >                db      "REG@"
  13+ 7B38             >len_NFA         defl    $ - temp_NFA
  13+ 7B38             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  13+ 7B34             >
  13+ 7B34 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  13+ 7B35 52 45 47 40 >                db      "REG@"               // name string in 7-bit ascii, but
  13+ 7B39             >                org     $-1                 // alter last byte of Name just above to set
  13+ 7B38 C0          >                db      {b $} | END_BIT     // msb as name end
  13+ 7B39             >
  13+ 7B39 27 7B       >                dw      last_NFA            // Link to previous definition Name
  13+ 7B3B             >REG_FETCH:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
  13+ 7B3B ~           >                dw      runcode ; ok        // for primitive definitions  actual code
  13+ 7B3B             >                else
  13+ 7B3B 3D 7B       >                dw      $ + 2   ; ok        // is pointed by CFA
  13+ 7B3D             >                endif           ; ok        // for other definitions it "points" the correct handler
  13+ 7B3D             >                // Use of "; ok" to suppress "warning[fwdref]"
  13+ 7B3D             >
  13+ 7B3D             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  14+ 7B3D D9                           exx
  15+ 7B3E 01 3B 24                     ld      bc, $243B
  16+ 7B41 E1                           pop     hl
  17+ 7B42 ED 69                        out     (c), l
  18+ 7B44 04                           inc     b
  19+ 7B45 ED 68                        in      l,(c)
  20+ 7B47 E5                           push    hl
  21+ 7B48 D9                           exx
  22+ 7B49                              next
  22+ 7B49 DD E9       >                jp      (ix)
  23+ 7B4B
  24+ 7B4B
  25+ 7B4B              //  ______________________________________________________________________
  26+ 7B4B              //
  27+ 7B4B              // reg!         b n --
  28+ 7B4B              // write value b to Next REGister n
  29+ 7B4B
  30+ 7B4B                              New_Def REG_STORE, "REG!", is_code, is_normal
  30+ 7B4B             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  30+ 7B4B             >
  30+ 7B4B             >                // dummy db directives used to calculate length of namec
  30+ 7B4B 52 45 47 21 >                db      "REG!"
  30+ 7B4F             >len_NFA         defl    $ - temp_NFA
  30+ 7B4F             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  30+ 7B4B             >
  30+ 7B4B 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  30+ 7B4C 52 45 47 21 >                db      "REG!"               // name string in 7-bit ascii, but
  30+ 7B50             >                org     $-1                 // alter last byte of Name just above to set
  30+ 7B4F A1          >                db      {b $} | END_BIT     // msb as name end
  30+ 7B50             >
  30+ 7B50 34 7B       >                dw      last_NFA            // Link to previous definition Name
  30+ 7B52             >REG_STORE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
  30+ 7B52 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
  30+ 7B52             >                else
  30+ 7B52 54 7B       >                dw      $ + 2   ; ok        // is pointed by CFA
  30+ 7B54             >                endif           ; ok        // for other definitions it "points" the correct handler
  30+ 7B54             >                // Use of "; ok" to suppress "warning[fwdref]"
  30+ 7B54             >
  30+ 7B54             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  31+ 7B54 D9                           exx
  32+ 7B55 01 3B 24                     ld      bc, $243B
  33+ 7B58 E1                           pop     hl
  34+ 7B59 ED 69                        out     (c), l
  35+ 7B5B 04                           inc     b
  36+ 7B5C E1                           pop     hl
  37+ 7B5D ED 69                        out     (c), l
  38+ 7B5F D9                           exx
  39+ 7B60                              next
  39+ 7B60 DD E9       >                jp      (ix)
  40+ 7B62
  41+ 7B62
  42+ 7B62              //  ______________________________________________________________________
  43+ 7B62              //
  44+ 7B62              // mmu7@        -- n
  45+ 7B62              // query current page in MMU7 8K-RAM : 0 and 223
  46+ 7B62
  47+ 7B62                              Colon_Def MMU7_FETCH, "MMU7@", is_normal
  47+ 7B62             >                New_Def  MMU7_FETCH, "MMU7@", Enter_Ptr, is_normal ; ok
  47+ 7B62             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  47+ 7B62             >
  47+ 7B62             >                // dummy db directives used to calculate length of namec
  47+ 7B62 4D 4D 55 37 >                db      "MMU7@"
  47+ 7B66 40          >
  47+ 7B67             >len_NFA         defl    $ - temp_NFA
  47+ 7B67             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  47+ 7B62             >
  47+ 7B62 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  47+ 7B63 4D 4D 55 37 >                db      "MMU7@"               // name string in 7-bit ascii, but
  47+ 7B67 40          >
  47+ 7B68             >                org     $-1                 // alter last byte of Name just above to set
  47+ 7B67 C0          >                db      {b $} | END_BIT     // msb as name end
  47+ 7B68             >
  47+ 7B68 4B 7B       >                dw      last_NFA            // Link to previous definition Name
  47+ 7B6A             >MMU7_FETCH:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
  47+ 7B6A 88 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
  47+ 7B6C             >                else
  47+ 7B6C ~           >                dw      $ + 2   ; ok        // is pointed by CFA
  47+ 7B6C             >                endif           ; ok        // for other definitions it "points" the correct handler
  47+ 7B6C             >                // Use of "; ok" to suppress "warning[fwdref]"
  47+ 7B6C             >
  47+ 7B6C             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  48+ 7B6C A9 63 57 00                  dw      LIT, 87, REG_FETCH
  48+ 7B70 3B 7B
  49+ 7B72 A5 69                        dw      EXIT
  50+ 7B74
  51+ 7B74              //  ______________________________________________________________________
  52+ 7B74              //
  53+ 7B74              // mmu7!        n --
  54+ 7B74              // set MMU7 8K-RAM page to n given between 0 and 223
  55+ 7B74              // optimized version that uses NEXTREG n,A Z80n op-code.
  56+ 7B74
  57+ 7B74                              New_Def MMU7_STORE, "MMU7!", is_code, is_normal
  57+ 7B74             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  57+ 7B74             >
  57+ 7B74             >                // dummy db directives used to calculate length of namec
  57+ 7B74 4D 4D 55 37 >                db      "MMU7!"
  57+ 7B78 21          >
  57+ 7B79             >len_NFA         defl    $ - temp_NFA
  57+ 7B79             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  57+ 7B74             >
  57+ 7B74 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  57+ 7B75 4D 4D 55 37 >                db      "MMU7!"               // name string in 7-bit ascii, but
  57+ 7B79 21          >
  57+ 7B7A             >                org     $-1                 // alter last byte of Name just above to set
  57+ 7B79 A1          >                db      {b $} | END_BIT     // msb as name end
  57+ 7B7A             >
  57+ 7B7A 62 7B       >                dw      last_NFA            // Link to previous definition Name
  57+ 7B7C             >MMU7_STORE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
  57+ 7B7C ~           >                dw      runcode ; ok        // for primitive definitions  actual code
  57+ 7B7C             >                else
  57+ 7B7C 7E 7B       >                dw      $ + 2   ; ok        // is pointed by CFA
  57+ 7B7E             >                endif           ; ok        // for other definitions it "points" the correct handler
  57+ 7B7E             >                // Use of "; ok" to suppress "warning[fwdref]"
  57+ 7B7E             >
  57+ 7B7E             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  58+ 7B7E E1                           pop     hl
  59+ 7B7F 7D                           ld      a, l
  60+ 7B80 ED 92 57                     nextreg 87, a
  61+ 7B83
  62+ 7B83                              next
  62+ 7B83 DD E9       >                jp      (ix)
  63+ 7B85
  64+ 7B85              //  ______________________________________________________________________
  65+ 7B85              //
  66+ 7B85              // >far         ha -- a n
  67+ 7B85              // decode bits 765 of H as one of the 8K-page between 64 and 71 (40h-47h)
  68+ 7B85              // take lower bits of H and L as an offset from E000h
  69+ 7B85              // then return address  a  between E000h-FFFFh
  70+ 7B85              // and page number n  between 64-71 (40h-47h)
  71+ 7B85              // For example, in hex:
  72+ 7B85              //   0000 >FAR  gives  40.E000
  73+ 7B85              //   1FFF >FAR  gives  40.FFFF
  74+ 7B85              //   2000 >FAR  gives  41.E000
  75+ 7B85              //   3FFF >FAR  gives  41.FFFF
  76+ 7B85              //   EFFF >FAR  gives  47.EFFF
  77+ 7B85              //   FFFF >FAR  gives  47.FFFF
  78+ 7B85              //                New_Def TO_FAR, ">FAR", is_code, is_normal
  79+ 7B85              //                pop     de
  80+ 7B85              //                ld      a, d
  81+ 7B85              //                and     $E0
  82+ 7B85              //                rlca
  83+ 7B85              //                rlca
  84+ 7B85              //                rlca
  85+ 7B85              //                add     $40
  86+ 7B85              //                ld      l, a
  87+ 7B85              //                ld      h, 0
  88+ 7B85              //                ld      a, d
  89+ 7B85              //                or      $E0
  90+ 7B85              //                ld      d, a
  91+ 7B85              //                push    hl
  92+ 7B85              //                push    de
  93+ 7B85              //                next
  94+ 7B85
  95+ 7B85              //  ______________________________________________________________________
  96+ 7B85              //
  97+ 7B85              // <far         a n  -- ha
  98+ 7B85              // given an address E000-FFFF and a page number n (64-71 or 40h-47h)
  99+ 7B85              // reverse of >FAR: encodes a FAR address compressing
 100+ 7B85              // to bits 765 of H, lower bits of HL address offset from E000h
 101+ 7B85              //                New_Def FROM_FAR, "<FAR", is_code, is_normal
 102+ 7B85              //                pop     de                  // page number in e
 103+ 7B85              //                pop     hl                  // address in hl
 104+ 7B85              //                ld      a, e
 105+ 7B85              //                sub     $40                 // reduced to 0-7
 106+ 7B85              //                rrca
 107+ 7B85              //                rrca
 108+ 7B85              //                rrca
 109+ 7B85              //                ld      d, a                // save to d bits 765
 110+ 7B85              //                ld      a, h                // drops
 111+ 7B85              //                and     $1F
 112+ 7B85              //                or      d
 113+ 7B85              //                ld      h, a
 114+ 7B85              //
 115+ 7B85              //                psh1
 116+ 7B85
 117+ 7B85              //  ______________________________________________________________________
 118+ 7B85              //
 119+ 7B85              // m_p3dos      n1 n2 n3 n4 a -- n5 n6 n7 n8  f
 120+ 7B85              // NextZXOS call wrapper.
 121+ 7B85              //  n1 = hl register parameter value
 122+ 7B85              //  n2 = de register parameter value
 123+ 7B85              //  n3 = bc register parameter value
 124+ 7B85              //  n4 =  a register parameter value
 125+ 7B85              //   a = routine address in ROM 3
 126+ 7B85              // ----
 127+ 7B85              //  n5 = hl returned value
 128+ 7B85              //  n6 = de returned value
 129+ 7B85              //  n7 = bc returned value
 130+ 7B85              //  n8 =  a returned value
 131+ 7B85              //   f
 132+ 7B85                              New_Def M_P3DOS, "M_P3DOS", is_code, is_normal
 132+ 7B85             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 132+ 7B85             >
 132+ 7B85             >                // dummy db directives used to calculate length of namec
 132+ 7B85 4D 5F 50 33 >                db      "M_P3DOS"
 132+ 7B89 44 4F 53    >
 132+ 7B8C             >len_NFA         defl    $ - temp_NFA
 132+ 7B8C             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 132+ 7B85             >
 132+ 7B85 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 132+ 7B86 4D 5F 50 33 >                db      "M_P3DOS"               // name string in 7-bit ascii, but
 132+ 7B8A 44 4F 53    >
 132+ 7B8D             >                org     $-1                 // alter last byte of Name just above to set
 132+ 7B8C D3          >                db      {b $} | END_BIT     // msb as name end
 132+ 7B8D             >
 132+ 7B8D 74 7B       >                dw      last_NFA            // Link to previous definition Name
 132+ 7B8F             >M_P3DOS:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 132+ 7B8F ~           >                dw      runcode ; ok        // for primitive definitions  actual code
 132+ 7B8F             >                else
 132+ 7B8F 91 7B       >                dw      $ + 2   ; ok        // is pointed by CFA
 132+ 7B91             >                endif           ; ok        // for other definitions it "points" the correct handler
 132+ 7B91             >                // Use of "; ok" to suppress "warning[fwdref]"
 132+ 7B91             >
 132+ 7B91             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 133+ 7B91 D1                           pop     de                  // dos call entry address in de
 134+ 7B92 E1                           pop     hl                  // a register
 135+ 7B93 7D                           ld      a, l
 136+ 7B94 D9                           exx
 137+ 7B95 C1                           pop     bc
 138+ 7B96 D1                           pop     de
 139+ 7B97 E1                           pop     hl
 140+ 7B98 D9                           exx
 141+ 7B99
 142+ 7B99 C5                           push    bc
 143+ 7B9A DD E5                        push    ix
 144+ 7B9C
 145+ 7B9C              //              ld      (SP_Saved), sp
 146+ 7B9C              //              ld      sp, Cold_origin - 5
 147+ 7B9C 0E 07                        ld      c, 7                // use 7 RAM Bank
 148+ 7B9E
 149+ 7B9E CF                           rst     08
 150+ 7B9F 94                           db      $94
 151+ 7BA0
 152+ 7BA0              //              ld      sp, (SP_Saved)
 153+ 7BA0              //              push    ix
 154+ 7BA0              //              pop     hl
 155+ 7BA0              //              ld      (IX_Echo), hl
 156+ 7BA0 DD 22 90 63                  ld      (IX_Echo), ix
 157+ 7BA4              //              nop
 158+ 7BA4 DD E1                        pop     ix
 159+ 7BA6 E3                           ex      (sp), hl            // hl argument and retrieve bc
 160+ 7BA7 D5                           push    de
 161+ 7BA8 C5                           push    bc
 162+ 7BA9 4D                           ld      c, l
 163+ 7BAA 44                           ld      b, h
 164+ 7BAB
 165+ 7BAB 26 00                        ld      h, 0
 166+ 7BAD 6F                           ld      l, a
 167+ 7BAE E5                           push    hl
 168+ 7BAF ED 62                        sbc     hl, hl              // -1 for OK ; 0 for KO but now...
 169+ 7BB1 23                           inc     hl                  //  0 for OK ; 1 for ko
 170+ 7BB2
 171+ 7BB2                              psh1
 171+ 7BB2 E5          >                push    hl
 171+ 7BB3 DD E9       >                jp      (ix)
 172+ 7BB5
 173+ 7BB5              //  ______________________________________________________________________
 174+ 7BB5              //
 175+ 7BB5              // blk-fh
 176+ 7BB5                              Variable_Def BLK_FH,   "BLK-FH",   1
 176+ 7BB5             >                New_Def  BLK_FH, "BLK-FH", Variable_Ptr, is_normal
 176+ 7BB5             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 176+ 7BB5             >
 176+ 7BB5             >                // dummy db directives used to calculate length of namec
 176+ 7BB5 42 4C 4B 2D >                db      "BLK-FH"
 176+ 7BB9 46 48       >
 176+ 7BBB             >len_NFA         defl    $ - temp_NFA
 176+ 7BBB             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 176+ 7BB5             >
 176+ 7BB5 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 176+ 7BB6 42 4C 4B 2D >                db      "BLK-FH"               // name string in 7-bit ascii, but
 176+ 7BBA 46 48       >
 176+ 7BBC             >                org     $-1                 // alter last byte of Name just above to set
 176+ 7BBB C8          >                db      {b $} | END_BIT     // msb as name end
 176+ 7BBC             >
 176+ 7BBC 85 7B       >                dw      last_NFA            // Link to previous definition Name
 176+ 7BBE             >BLK_FH:          if Variable_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 176+ 7BBE E2 6C       >                dw      Variable_Ptr ; ok        // for primitive definitions  actual code
 176+ 7BC0             >                else
 176+ 7BC0 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 176+ 7BC0             >                endif           ; ok        // for other definitions it "points" the correct handler
 176+ 7BC0             >                // Use of "; ok" to suppress "warning[fwdref]"
 176+ 7BC0             >
 176+ 7BC0             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 176+ 7BC0 01 00       >                dw      1
 177+ 7BC2
 178+ 7BC2                              New_Def BLK_FNAME,   "BLK-FNAME", Create_Ptr, is_normal
 178+ 7BC2             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 178+ 7BC2             >
 178+ 7BC2             >                // dummy db directives used to calculate length of namec
 178+ 7BC2 42 4C 4B 2D >                db      "BLK-FNAME"
 178+ 7BC6 46 4E 41 4D >
 178+ 7BCA 45          >
 178+ 7BCB             >len_NFA         defl    $ - temp_NFA
 178+ 7BCB             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 178+ 7BC2             >
 178+ 7BC2 89          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 178+ 7BC3 42 4C 4B 2D >                db      "BLK-FNAME"               // name string in 7-bit ascii, but
 178+ 7BC7 46 4E 41 4D >
 178+ 7BCB 45          >
 178+ 7BCC             >                org     $-1                 // alter last byte of Name just above to set
 178+ 7BCB C5          >                db      {b $} | END_BIT     // msb as name end
 178+ 7BCC             >
 178+ 7BCC B5 7B       >                dw      last_NFA            // Link to previous definition Name
 178+ 7BCE             >BLK_FNAME:          if Create_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 178+ 7BCE DD 76       >                dw      Create_Ptr ; ok        // for primitive definitions  actual code
 178+ 7BD0             >                else
 178+ 7BD0 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 178+ 7BD0             >                endif           ; ok        // for other definitions it "points" the correct handler
 178+ 7BD0             >                // Use of "; ok" to suppress "warning[fwdref]"
 178+ 7BD0             >
 178+ 7BD0             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 179+ 7BD0 0E 21 42 6C                  db      14, "!Blocks-64.bin", 0
 179+ 7BD4 6F 63 6B 73
 179+ 7BD8 2D 36 34 2E
 179+ 7BDC 62 69 6E 00
 180+ 7BE0 00 00 00...                  ds      24
 181+ 7BF8
 182+ 7BF8              //  ______________________________________________________________________
 183+ 7BF8              //
 184+ 7BF8              // blk-seek     n --
 185+ 7BF8              // seek block n  within blocks!.bin  file
 186+ 7BF8                              Colon_Def BLK_SEEK, "BLK-SEEK", is_normal
 186+ 7BF8             >                New_Def  BLK_SEEK, "BLK-SEEK", Enter_Ptr, is_normal ; ok
 186+ 7BF8             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 186+ 7BF8             >
 186+ 7BF8             >                // dummy db directives used to calculate length of namec
 186+ 7BF8 42 4C 4B 2D >                db      "BLK-SEEK"
 186+ 7BFC 53 45 45 4B >
 186+ 7C00             >len_NFA         defl    $ - temp_NFA
 186+ 7C00             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 186+ 7BF8             >
 186+ 7BF8 88          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 186+ 7BF9 42 4C 4B 2D >                db      "BLK-SEEK"               // name string in 7-bit ascii, but
 186+ 7BFD 53 45 45 4B >
 186+ 7C01             >                org     $-1                 // alter last byte of Name just above to set
 186+ 7C00 CB          >                db      {b $} | END_BIT     // msb as name end
 186+ 7C01             >
 186+ 7C01 C2 7B       >                dw      last_NFA            // Link to previous definition Name
 186+ 7C03             >BLK_SEEK:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 186+ 7C03 88 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 186+ 7C05             >                else
 186+ 7C05 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 186+ 7C05             >                endif           ; ok        // for other definitions it "points" the correct handler
 186+ 7C05             >                // Use of "; ok" to suppress "warning[fwdref]"
 186+ 7C05             >
 186+ 7C05             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 187+ 7C05 45 6D C6 79                  dw  BBUF, MMUL
 188+ 7C09 BE 7B 9D 6B                  dw  BLK_FH, FETCH
 189+ 7C0D A3 67                        dw  F_SEEK
 190+ 7C0F A9 63 2D 00                  dw  LIT, $2D, QERROR
 190+ 7C13 A9 70
 191+ 7C15 A5 69                        dw  EXIT
 192+ 7C17
 193+ 7C17              //  ______________________________________________________________________
 194+ 7C17              //
 195+ 7C17              // blk-read     n --
 196+ 7C17              // seek block n  within blocks!.bin  file
 197+ 7C17                              Colon_Def BLK_READ, "BLK-READ", is_normal
 197+ 7C17             >                New_Def  BLK_READ, "BLK-READ", Enter_Ptr, is_normal ; ok
 197+ 7C17             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 197+ 7C17             >
 197+ 7C17             >                // dummy db directives used to calculate length of namec
 197+ 7C17 42 4C 4B 2D >                db      "BLK-READ"
 197+ 7C1B 52 45 41 44 >
 197+ 7C1F             >len_NFA         defl    $ - temp_NFA
 197+ 7C1F             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 197+ 7C17             >
 197+ 7C17 88          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 197+ 7C18 42 4C 4B 2D >                db      "BLK-READ"               // name string in 7-bit ascii, but
 197+ 7C1C 52 45 41 44 >
 197+ 7C20             >                org     $-1                 // alter last byte of Name just above to set
 197+ 7C1F C4          >                db      {b $} | END_BIT     // msb as name end
 197+ 7C20             >
 197+ 7C20 F8 7B       >                dw      last_NFA            // Link to previous definition Name
 197+ 7C22             >BLK_READ:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 197+ 7C22 88 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 197+ 7C24             >                else
 197+ 7C24 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 197+ 7C24             >                endif           ; ok        // for other definitions it "points" the correct handler
 197+ 7C24             >                // Use of "; ok" to suppress "warning[fwdref]"
 197+ 7C24             >
 197+ 7C24             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 198+ 7C24 03 7C                        dw  BLK_SEEK
 199+ 7C26 45 6D                        dw  BBUF
 200+ 7C28 BE 7B 9D 6B                  dw  BLK_FH, FETCH
 201+ 7C2C 0F 68                        dw  F_READ
 202+ 7C2E A9 63 2E 00                  dw  LIT, $2E, QERROR
 202+ 7C32 A9 70
 203+ 7C34 D5 6A                        dw  DROP
 204+ 7C36 A5 69                        dw  EXIT
 205+ 7C38
 206+ 7C38              //  ______________________________________________________________________
 207+ 7C38              //
 208+ 7C38              // blk-write     n --
 209+ 7C38              // seek block n  within blocks!.bin  file
 210+ 7C38                              Colon_Def BLK_WRITE, "BLK-WRITE", is_normal
 210+ 7C38             >                New_Def  BLK_WRITE, "BLK-WRITE", Enter_Ptr, is_normal ; ok
 210+ 7C38             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 210+ 7C38             >
 210+ 7C38             >                // dummy db directives used to calculate length of namec
 210+ 7C38 42 4C 4B 2D >                db      "BLK-WRITE"
 210+ 7C3C 57 52 49 54 >
 210+ 7C40 45          >
 210+ 7C41             >len_NFA         defl    $ - temp_NFA
 210+ 7C41             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 210+ 7C38             >
 210+ 7C38 89          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 210+ 7C39 42 4C 4B 2D >                db      "BLK-WRITE"               // name string in 7-bit ascii, but
 210+ 7C3D 57 52 49 54 >
 210+ 7C41 45          >
 210+ 7C42             >                org     $-1                 // alter last byte of Name just above to set
 210+ 7C41 C5          >                db      {b $} | END_BIT     // msb as name end
 210+ 7C42             >
 210+ 7C42 17 7C       >                dw      last_NFA            // Link to previous definition Name
 210+ 7C44             >BLK_WRITE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 210+ 7C44 88 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 210+ 7C46             >                else
 210+ 7C46 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 210+ 7C46             >                endif           ; ok        // for other definitions it "points" the correct handler
 210+ 7C46             >                // Use of "; ok" to suppress "warning[fwdref]"
 210+ 7C46             >
 210+ 7C46             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 211+ 7C46 03 7C                        dw  BLK_SEEK
 212+ 7C48 45 6D                        dw  BBUF
 213+ 7C4A BE 7B 9D 6B                  dw  BLK_FH, FETCH
 214+ 7C4E 2E 68                        dw  F_WRITE
 215+ 7C50 A9 63 2F 00                  dw  LIT, $2F, QERROR
 215+ 7C54 A9 70
 216+ 7C56 D5 6A                        dw  DROP
 217+ 7C58 A5 69                        dw  EXIT
 218+ 7C5A
 219+ 7C5A              //  ______________________________________________________________________
 220+ 7C5A              //
 221+ 7C5A              // blk-init     n --
 222+ 7C5A              // seek block n  within blocks!.bin  file
 223+ 7C5A                              Colon_Def BLK_INIT, "BLK-INIT", is_normal
 223+ 7C5A             >                New_Def  BLK_INIT, "BLK-INIT", Enter_Ptr, is_normal ; ok
 223+ 7C5A             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 223+ 7C5A             >
 223+ 7C5A             >                // dummy db directives used to calculate length of namec
 223+ 7C5A 42 4C 4B 2D >                db      "BLK-INIT"
 223+ 7C5E 49 4E 49 54 >
 223+ 7C62             >len_NFA         defl    $ - temp_NFA
 223+ 7C62             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 223+ 7C5A             >
 223+ 7C5A 88          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 223+ 7C5B 42 4C 4B 2D >                db      "BLK-INIT"               // name string in 7-bit ascii, but
 223+ 7C5F 49 4E 49 54 >
 223+ 7C63             >                org     $-1                 // alter last byte of Name just above to set
 223+ 7C62 D4          >                db      {b $} | END_BIT     // msb as name end
 223+ 7C63             >
 223+ 7C63 38 7C       >                dw      last_NFA            // Link to previous definition Name
 223+ 7C65             >BLK_INIT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 223+ 7C65 88 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 223+ 7C67             >                else
 223+ 7C67 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 223+ 7C67             >                endif           ; ok        // for other definitions it "points" the correct handler
 223+ 7C67             >                // Use of "; ok" to suppress "warning[fwdref]"
 223+ 7C67             >
 223+ 7C67             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 224+ 7C67 BE 7B 9D 6B                  dw  BLK_FH, FETCH, F_CLOSE, DROP
 224+ 7C6B C6 67 D5 6A
 225+ 7C6F CE 7B 4B 6A                  dw  BLK_FNAME, ONE_PLUS
 226+ 7C73 E4 6E 1D 6D                  dw  HERE, THREE, F_OPEN         // open for update (read+write)
 226+ 7C77 45 68
 227+ 7C79 A9 63 2C 00                  dw  LIT, $2C, QERROR
 227+ 7C7D A9 70
 228+ 7C7F BE 7B AA 6B                  dw  BLK_FH, STORE
 229+ 7C83 A5 69                        dw  EXIT
 230+ 7C85
 231+ 7C85              //  ______________________________________________________________________
 232+ 7C85              //
 233+ 7C85              // #sec
 234+ 7C85              // number of 512 Byte "sector" available on thie sysstem.
 235+ 7C85              // it addd up to 16 MByte of data that can be used as source or pool for almost anything.
 236+ 7C85
 237+ 7C85                              Constant_Def NSEC , "#SEC", 32767
 237+ 7C85             >                New_Def  NSEC, "#SEC", Constant_Ptr, is_normal
 237+ 7C85             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 237+ 7C85             >
 237+ 7C85             >                // dummy db directives used to calculate length of namec
 237+ 7C85 23 53 45 43 >                db      "#SEC"
 237+ 7C89             >len_NFA         defl    $ - temp_NFA
 237+ 7C89             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 237+ 7C85             >
 237+ 7C85 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 237+ 7C86 23 53 45 43 >                db      "#SEC"               // name string in 7-bit ascii, but
 237+ 7C8A             >                org     $-1                 // alter last byte of Name just above to set
 237+ 7C89 C3          >                db      {b $} | END_BIT     // msb as name end
 237+ 7C8A             >
 237+ 7C8A 5A 7C       >                dw      last_NFA            // Link to previous definition Name
 237+ 7C8C             >NSEC:          if Constant_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 237+ 7C8C C7 6C       >                dw      Constant_Ptr ; ok        // for primitive definitions  actual code
 237+ 7C8E             >                else
 237+ 7C8E ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 237+ 7C8E             >                endif           ; ok        // for other definitions it "points" the correct handler
 237+ 7C8E             >                // Use of "; ok" to suppress "warning[fwdref]"
 237+ 7C8E             >
 237+ 7C8E             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 237+ 7C8E FF 7F       >                dw      32767
 238+ 7C90
 239+ 7C90              //  ______________________________________________________________________
 240+ 7C90
 241+ 7C90
 242+ 7C90
# file closed: C:\Zx\CSpect\Projects\vForth15_INDIRECT/source/next-opt1.asm
 113  7C90                              include "L3.asm"
# file opened: C:\Zx\CSpect\Projects\vForth15_INDIRECT/source/L3.asm
   1+ 7C90              //  ______________________________________________________________________
   2+ 7C90              //
   3+ 7C90              //  L3.asm
   4+ 7C90              //
   5+ 7C90              //  Continuation of L2.asm
   6+ 7C90              //  I/O Block definitions
   7+ 7C90              //  ______________________________________________________________________
   8+ 7C90
   9+ 7C90
  10+ 7C90              //  ______________________________________________________________________
  11+ 7C90              //
  12+ 7C90              // r/w          a n f --
  13+ 7C90              // read/write block n depending on flag f, true-flag means read, false-flag means write.
  14+ 7C90                              Colon_Def READ_WRITE, "R/W", is_normal
  14+ 7C90             >                New_Def  READ_WRITE, "R/W", Enter_Ptr, is_normal ; ok
  14+ 7C90             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  14+ 7C90             >
  14+ 7C90             >                // dummy db directives used to calculate length of namec
  14+ 7C90 52 2F 57    >                db      "R/W"
  14+ 7C93             >len_NFA         defl    $ - temp_NFA
  14+ 7C93             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  14+ 7C90             >
  14+ 7C90 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  14+ 7C91 52 2F 57    >                db      "R/W"               // name string in 7-bit ascii, but
  14+ 7C94             >                org     $-1                 // alter last byte of Name just above to set
  14+ 7C93 D7          >                db      {b $} | END_BIT     // msb as name end
  14+ 7C94             >
  14+ 7C94 85 7C       >                dw      last_NFA            // Link to previous definition Name
  14+ 7C96             >READ_WRITE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
  14+ 7C96 88 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
  14+ 7C98             >                else
  14+ 7C98 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
  14+ 7C98             >                endif           ; ok        // for other definitions it "points" the correct handler
  14+ 7C98             >                // Use of "; ok" to suppress "warning[fwdref]"
  14+ 7C98             >
  14+ 7C98             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  15+ 7C98 B8 69                        dw      TO_R                    // >r
  16+ 7C9A 57 6A                        dw      ONE_SUBTRACT            // 1-
  17+ 7C9C 0A 6B 02 6A                  dw      DUP, ZLESS              // dup 0<
  18+ 7CA0 C5 6A 8C 7C                  dw      OVER, NSEC              // over #sec
  19+ 7CA4 57 6A 7D 6F                  dw      ONE_SUBTRACT, GREATER   // 1- >
  20+ 7CA8 47 69                        dw      OR_OP                   // or
  21+ 7CAA A9 63 06 00                  dw      LIT, 6, QERROR          // 6 ?error
  21+ 7CAE A9 70
  22+ 7CB0 CC 69                        dw      R_TO                    // r>
  23+ 7CB2                                                              // if
  24+ 7CB2 2C 64                        dw      ZBRANCH
  25+ 7CB4 08 00                        dw      Read_Write_Else - $
  26+ 7CB6 22 7C                        dw          BLK_READ            //      blk-read
  27+ 7CB8 15 64                        dw      BRANCH
  28+ 7CBA 04 00                        dw      Read_Write_Endif - $
  29+ 7CBC              Read_Write_Else:                                // else
  30+ 7CBC 44 7C                        dw          BLK_WRITE           //      blk-write
  31+ 7CBE              Read_Write_Endif:                               // endif
  32+ 7CBE A5 69                        dw      EXIT                    // ;
  33+ 7CC0
  34+ 7CC0
  35+ 7CC0              //  ______________________________________________________________________
  36+ 7CC0              //
  37+ 7CC0              // +buf        a1 -- a2 f
  38+ 7CC0              // advences to next buffer, cyclically rotating along them
  39+ 7CC0                              Colon_Def PBUF, "+BUF", is_normal
  39+ 7CC0             >                New_Def  PBUF, "+BUF", Enter_Ptr, is_normal ; ok
  39+ 7CC0             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  39+ 7CC0             >
  39+ 7CC0             >                // dummy db directives used to calculate length of namec
  39+ 7CC0 2B 42 55 46 >                db      "+BUF"
  39+ 7CC4             >len_NFA         defl    $ - temp_NFA
  39+ 7CC4             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  39+ 7CC0             >
  39+ 7CC0 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  39+ 7CC1 2B 42 55 46 >                db      "+BUF"               // name string in 7-bit ascii, but
  39+ 7CC5             >                org     $-1                 // alter last byte of Name just above to set
  39+ 7CC4 C6          >                db      {b $} | END_BIT     // msb as name end
  39+ 7CC5             >
  39+ 7CC5 90 7C       >                dw      last_NFA            // Link to previous definition Name
  39+ 7CC7             >PBUF:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
  39+ 7CC7 88 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
  39+ 7CC9             >                else
  39+ 7CC9 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
  39+ 7CC9             >                endif           ; ok        // for other definitions it "points" the correct handler
  39+ 7CC9             >                // Use of "; ok" to suppress "warning[fwdref]"
  39+ 7CC9             >
  39+ 7CC9             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  40+ 7CC9 A9 63 04 02                  dw      LIT, 516, PLUS          // 516 +
  40+ 7CCD 2A 6A
  41+ 7CCF 0A 6B E7 6D                  dw      DUP, LIMIT, FETCH       // dup limit @
  41+ 7CD3 9D 6B
  42+ 7CD5 45 6F                        dw      EQUALS                  // =
  43+ 7CD7                                                              // if
  44+ 7CD7 2C 64                        dw      ZBRANCH
  45+ 7CD9 08 00                        dw      PBuf_Endif - $
  46+ 7CDB D5 6A                        dw          DROP                //      drop
  47+ 7CDD DC 6D 9D 6B                  dw          FIRST, FETCH        //      first @
  48+ 7CE1              PBuf_Endif:                                     // endif
  49+ 7CE1 0A 6B 99 6E                  dw      DUP, PREV, FETCH        // dup prev @
  49+ 7CE5 9D 6B
  50+ 7CE7 37 6F                        dw      SUBTRACT                // -
  51+ 7CE9 A5 69                        dw      EXIT                    // ;
  52+ 7CEB
  53+ 7CEB              //  ______________________________________________________________________
  54+ 7CEB              //
  55+ 7CEB              // update       --
  56+ 7CEB              // mark the last used block to be written to disk
  57+ 7CEB                              Colon_Def UPDATE, "UPDATE", is_normal
  57+ 7CEB             >                New_Def  UPDATE, "UPDATE", Enter_Ptr, is_normal ; ok
  57+ 7CEB             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  57+ 7CEB             >
  57+ 7CEB             >                // dummy db directives used to calculate length of namec
  57+ 7CEB 55 50 44 41 >                db      "UPDATE"
  57+ 7CEF 54 45       >
  57+ 7CF1             >len_NFA         defl    $ - temp_NFA
  57+ 7CF1             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  57+ 7CEB             >
  57+ 7CEB 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  57+ 7CEC 55 50 44 41 >                db      "UPDATE"               // name string in 7-bit ascii, but
  57+ 7CF0 54 45       >
  57+ 7CF2             >                org     $-1                 // alter last byte of Name just above to set
  57+ 7CF1 C5          >                db      {b $} | END_BIT     // msb as name end
  57+ 7CF2             >
  57+ 7CF2 C0 7C       >                dw      last_NFA            // Link to previous definition Name
  57+ 7CF4             >UPDATE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
  57+ 7CF4 88 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
  57+ 7CF6             >                else
  57+ 7CF6 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
  57+ 7CF6             >                endif           ; ok        // for other definitions it "points" the correct handler
  57+ 7CF6             >                // Use of "; ok" to suppress "warning[fwdref]"
  57+ 7CF6             >
  57+ 7CF6             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  58+ 7CF6 99 6E 9D 6B                  dw      PREV, FETCH, FETCH      // prev @ @
  58+ 7CFA 9D 6B
  59+ 7CFC A9 63 00 80                  dw      LIT, $8000, OR_OP       // $8000, or
  59+ 7D00 47 69
  60+ 7D02 99 6E 9D 6B                  dw      PREV, FETCH, STORE      // prev @ !
  60+ 7D06 AA 6B
  61+ 7D08 A5 69                        dw      EXIT                    // ;
  62+ 7D0A
  63+ 7D0A
  64+ 7D0A              //  ______________________________________________________________________
  65+ 7D0A              //
  66+ 7D0A              // empty-buffers --
  67+ 7D0A                              Colon_Def EMPTY_BUFFERS, "EMPTY-BUFFERS", is_normal
  67+ 7D0A             >                New_Def  EMPTY_BUFFERS, "EMPTY-BUFFERS", Enter_Ptr, is_normal ; ok
  67+ 7D0A             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  67+ 7D0A             >
  67+ 7D0A             >                // dummy db directives used to calculate length of namec
  67+ 7D0A 45 4D 50 54 >                db      "EMPTY-BUFFERS"
  67+ 7D0E 59 2D 42 55 >
  67+ 7D12 46 46 45 52 >
  67+ 7D16 53          >
  67+ 7D17             >len_NFA         defl    $ - temp_NFA
  67+ 7D17             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  67+ 7D0A             >
  67+ 7D0A 8D          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  67+ 7D0B 45 4D 50 54 >                db      "EMPTY-BUFFERS"               // name string in 7-bit ascii, but
  67+ 7D0F 59 2D 42 55 >
  67+ 7D13 46 46 45 52 >
  67+ 7D17 53          >
  67+ 7D18             >                org     $-1                 // alter last byte of Name just above to set
  67+ 7D17 D3          >                db      {b $} | END_BIT     // msb as name end
  67+ 7D18             >
  67+ 7D18 EB 7C       >                dw      last_NFA            // Link to previous definition Name
  67+ 7D1A             >EMPTY_BUFFERS:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
  67+ 7D1A 88 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
  67+ 7D1C             >                else
  67+ 7D1C ~           >                dw      $ + 2   ; ok        // is pointed by CFA
  67+ 7D1C             >                endif           ; ok        // for other definitions it "points" the correct handler
  67+ 7D1C             >                // Use of "; ok" to suppress "warning[fwdref]"
  67+ 7D1C             >
  67+ 7D1C             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  68+ 7D1C DC 6D 9D 6B                  dw      FIRST, FETCH            // first @
  69+ 7D20 E7 6D 9D 6B                  dw      LIMIT, FETCH            // limit @
  70+ 7D24 C5 6A 37 6F                  dw      OVER, SUBTRACT, ERASE   // over - erase
  70+ 7D28 E1 73
  71+ 7D2A A5 69                        dw      EXIT                    // ;
  72+ 7D2C
  73+ 7D2C              //  ______________________________________________________________________
  74+ 7D2C              //
  75+ 7D2C              // buffer       n -- a
  76+ 7D2C              // read block n and gives the address to a buffer
  77+ 7D2C              // any block previously inside the buffer, if modified, is rewritten to
  78+ 7D2C              // disk before reading the block n.
  79+ 7D2C
  80+ 7D2C                              Colon_Def BUFFER, "BUFFER", is_normal
  80+ 7D2C             >                New_Def  BUFFER, "BUFFER", Enter_Ptr, is_normal ; ok
  80+ 7D2C             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  80+ 7D2C             >
  80+ 7D2C             >                // dummy db directives used to calculate length of namec
  80+ 7D2C 42 55 46 46 >                db      "BUFFER"
  80+ 7D30 45 52       >
  80+ 7D32             >len_NFA         defl    $ - temp_NFA
  80+ 7D32             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  80+ 7D2C             >
  80+ 7D2C 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  80+ 7D2D 42 55 46 46 >                db      "BUFFER"               // name string in 7-bit ascii, but
  80+ 7D31 45 52       >
  80+ 7D33             >                org     $-1                 // alter last byte of Name just above to set
  80+ 7D32 D2          >                db      {b $} | END_BIT     // msb as name end
  80+ 7D33             >
  80+ 7D33 0A 7D       >                dw      last_NFA            // Link to previous definition Name
  80+ 7D35             >BUFFER:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
  80+ 7D35 88 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
  80+ 7D37             >                else
  80+ 7D37 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
  80+ 7D37             >                endif           ; ok        // for other definitions it "points" the correct handler
  80+ 7D37             >                // Use of "; ok" to suppress "warning[fwdref]"
  80+ 7D37             >
  80+ 7D37             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  81+ 7D37 8F 6E 9D 6B                  dw      USE, FETCH              // use @
  82+ 7D3B 0A 6B B8 69                  dw      DUP, TO_R               // dup >r
  83+ 7D3F                                                              // begin
  84+ 7D3F              Buffer_Begin:
  85+ 7D3F C7 7C                        dw          PBUF                //      +buf
  86+ 7D41                                                              // until
  87+ 7D41 2C 64                        dw      ZBRANCH
  88+ 7D43 FC FF                        dw      Buffer_Begin - $
  89+ 7D45 8F 6E AA 6B                  dw      USE, STORE              // use !
  90+ 7D49 E0 69 9D 6B                  dw      R_OP, FETCH, ZLESS      // r @ 0<
  90+ 7D4D 02 6A
  91+ 7D4F                                                              // if
  92+ 7D4F 2C 64                        dw      ZBRANCH
  93+ 7D51 14 00                        dw      Buffer_Endif - $
  94+ 7D53 E0 69 73 6A                  dw          R_OP, CELL_PLUS     //      r cell+
  95+ 7D57 E0 69 9D 6B                  dw          R_OP, FETCH         //      r fetch
  96+ 7D5B A9 63 FF 7F                  dw          LIT, $7FFF          //      7FFF
  97+ 7D5F 35 69                        dw          AND_OP              //      and
  98+ 7D61 05 6D 96 7C                  dw          ZERO, READ_WRITE    //      0 r/w
  99+ 7D65              Buffer_Endif:                                   // endif
 100+ 7D65 E0 69 AA 6B                  dw      R_OP, STORE             // r !
 101+ 7D69 E0 69 99 6E                  dw      R_OP, PREV, STORE       // r prev !
 101+ 7D6D AA 6B
 102+ 7D6F CC 69 73 6A                  dw      R_TO, CELL_PLUS         // r> cell+
 103+ 7D73 A5 69                        dw      EXIT                    // ;
 104+ 7D75
 105+ 7D75              //  ______________________________________________________________________
 106+ 7D75              //
 107+ 7D75              // block        n -- a
 108+ 7D75              // Leaves the buffer address that contains the block n.
 109+ 7D75              // If the block is not already present, it will be loaded from disk
 110+ 7D75              // The block previously inside the buffer, if modified, is rewritten to
 111+ 7D75              // disk before reading the block n.
 112+ 7D75              // See also BUFFER, R/W, UPDATE, FLUSH.
 113+ 7D75
 114+ 7D75                              Colon_Def BLOCK, "BLOCK", is_normal
 114+ 7D75             >                New_Def  BLOCK, "BLOCK", Enter_Ptr, is_normal ; ok
 114+ 7D75             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 114+ 7D75             >
 114+ 7D75             >                // dummy db directives used to calculate length of namec
 114+ 7D75 42 4C 4F 43 >                db      "BLOCK"
 114+ 7D79 4B          >
 114+ 7D7A             >len_NFA         defl    $ - temp_NFA
 114+ 7D7A             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 114+ 7D75             >
 114+ 7D75 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 114+ 7D76 42 4C 4F 43 >                db      "BLOCK"               // name string in 7-bit ascii, but
 114+ 7D7A 4B          >
 114+ 7D7B             >                org     $-1                 // alter last byte of Name just above to set
 114+ 7D7A CB          >                db      {b $} | END_BIT     // msb as name end
 114+ 7D7B             >
 114+ 7D7B 2C 7D       >                dw      last_NFA            // Link to previous definition Name
 114+ 7D7D             >BLOCK:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 114+ 7D7D 88 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 114+ 7D7F             >                else
 114+ 7D7F ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 114+ 7D7F             >                endif           ; ok        // for other definitions it "points" the correct handler
 114+ 7D7F             >                // Use of "; ok" to suppress "warning[fwdref]"
 114+ 7D7F             >
 114+ 7D7F             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 115+ 7D7F 2B 6E 9D 6B                  dw      OFFSET, FETCH           // offset @
 116+ 7D83 2A 6A B8 69                  dw      PLUS, TO_R              // + >r
 117+ 7D87 99 6E 9D 6B                  dw      PREV, FETCH             // prev @
 118+ 7D8B 0A 6B 9D 6B                  dw      DUP, FETCH              // dup @
 119+ 7D8F E0 69 37 6F                  dw      R_OP, SUBTRACT          // r -
 120+ 7D93 0A 6B 2A 6A                  dw      DUP, PLUS               // dup +  ( trick: check equality without most significant bit )
 121+ 7D97                                                              // if
 122+ 7D97 2C 64                        dw        ZBRANCH
 123+ 7D99 32 00                        dw        Block_Endif_1 - $
 124+ 7D9B              Block_Begin:                                    //      begin
 125+ 7D9B C7 7C E7 69                  dw          PBUF, ZEQUAL        //          +buf 0
 126+ 7D9F                                                              //          if
 127+ 7D9F 2C 64                        dw          ZBRANCH
 128+ 7DA1 12 00                        dw          Block_Endif_2 - $
 129+ 7DA3 D5 6A                        dw              DROP            //              drop
 130+ 7DA5 E0 69 35 7D                  dw              R_OP, BUFFER    //              r buffer
 131+ 7DA9 0A 6B                        dw              DUP             //              dup
 132+ 7DAB E0 69 0D 6D                  dw              R_OP, ONE       //              r 1
 133+ 7DAF 96 7C                        dw              READ_WRITE      //              r/w
 134+ 7DB1 8A 6A                        dw              TWO_MINUS       //              2-
 135+ 7DB3              Block_Endif_2:                                  //          endif
 136+ 7DB3 0A 6B 9D 6B                  dw          DUP, FETCH, R_OP    //          dup @ r
 136+ 7DB7 E0 69
 137+ 7DB9 37 6F 0A 6B                  dw          SUBTRACT, DUP       //          - dup
 138+ 7DBD 2A 6A E7 69                  dw          PLUS, ZEQUAL        //          + 0=
 139+ 7DC1                                                              //      until
 140+ 7DC1 2C 64                        dw        ZBRANCH
 141+ 7DC3 D8 FF                        dw        Block_Begin - $
 142+ 7DC5 0A 6B 99 6E                  dw        DUP, PREV, STORE      //      dup prev !
 142+ 7DC9 AA 6B
 143+ 7DCB              Block_Endif_1:                                  // endif
 144+ 7DCB CC 69 D5 6A                  dw      R_TO, DROP, CELL_PLUS   // r> drop cell+
 144+ 7DCF 73 6A
 145+ 7DD1 A5 69                        dw      EXIT                    // ;
 146+ 7DD3
 147+ 7DD3              //  ______________________________________________________________________
 148+ 7DD3              //
 149+ 7DD3              // #buff        -- n
 150+ 7DD3              // number of buffers available. must be the difference between LIMIT and FIRST divided by 516
 151+ 7DD3                              Constant_Def NBUFF,   "#BUFF", 7
 151+ 7DD3             >                New_Def  NBUFF, "#BUFF", Constant_Ptr, is_normal
 151+ 7DD3             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 151+ 7DD3             >
 151+ 7DD3             >                // dummy db directives used to calculate length of namec
 151+ 7DD3 23 42 55 46 >                db      "#BUFF"
 151+ 7DD7 46          >
 151+ 7DD8             >len_NFA         defl    $ - temp_NFA
 151+ 7DD8             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 151+ 7DD3             >
 151+ 7DD3 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 151+ 7DD4 23 42 55 46 >                db      "#BUFF"               // name string in 7-bit ascii, but
 151+ 7DD8 46          >
 151+ 7DD9             >                org     $-1                 // alter last byte of Name just above to set
 151+ 7DD8 C6          >                db      {b $} | END_BIT     // msb as name end
 151+ 7DD9             >
 151+ 7DD9 75 7D       >                dw      last_NFA            // Link to previous definition Name
 151+ 7DDB             >NBUFF:          if Constant_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 151+ 7DDB C7 6C       >                dw      Constant_Ptr ; ok        // for primitive definitions  actual code
 151+ 7DDD             >                else
 151+ 7DDD ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 151+ 7DDD             >                endif           ; ok        // for other definitions it "points" the correct handler
 151+ 7DDD             >                // Use of "; ok" to suppress "warning[fwdref]"
 151+ 7DDD             >
 151+ 7DDD             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 151+ 7DDD 07 00       >                dw      7
 152+ 7DDF
 153+ 7DDF              //  ______________________________________________________________________
 154+ 7DDF              //
 155+ 7DDF              // flush        --
 156+ 7DDF                              Colon_Def FLUSH, "FLUSH", is_normal
 156+ 7DDF             >                New_Def  FLUSH, "FLUSH", Enter_Ptr, is_normal ; ok
 156+ 7DDF             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 156+ 7DDF             >
 156+ 7DDF             >                // dummy db directives used to calculate length of namec
 156+ 7DDF 46 4C 55 53 >                db      "FLUSH"
 156+ 7DE3 48          >
 156+ 7DE4             >len_NFA         defl    $ - temp_NFA
 156+ 7DE4             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 156+ 7DDF             >
 156+ 7DDF 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 156+ 7DE0 46 4C 55 53 >                db      "FLUSH"               // name string in 7-bit ascii, but
 156+ 7DE4 48          >
 156+ 7DE5             >                org     $-1                 // alter last byte of Name just above to set
 156+ 7DE4 C8          >                db      {b $} | END_BIT     // msb as name end
 156+ 7DE5             >
 156+ 7DE5 D3 7D       >                dw      last_NFA            // Link to previous definition Name
 156+ 7DE7             >FLUSH:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 156+ 7DE7 88 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 156+ 7DE9             >                else
 156+ 7DE9 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 156+ 7DE9             >                endif           ; ok        // for other definitions it "points" the correct handler
 156+ 7DE9             >                // Use of "; ok" to suppress "warning[fwdref]"
 156+ 7DE9             >
 156+ 7DE9             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 157+ 7DE9 DB 7D 4B 6A                  dw      NBUFF, ONE_PLUS, ZERO   // #buff 1+ 0
 157+ 7DED 05 6D
 158+ 7DEF              Flush_Do:                                       // do
 159+ 7DEF 86 64                        dw      C_DO
 160+ 7DF1 05 6D 35 7D                  dw      ZERO, BUFFER, DROP      //      0 buffer drop
 160+ 7DF5 D5 6A
 161+ 7DF7                                                              // loop
 162+ 7DF7 04 64 F8 FF                  dw      C_LOOP, Flush_Do - $
 163+ 7DFB BE 7B 9D 6B                  dw      BLK_FH, FETCH           // blk-fh @     ( ZX-Next dependance )
 164+ 7DFF DA 67 D5 6A                  dw      F_SYNC, DROP            // f_sync drop
 165+ 7E03 A5 69                        dw      EXIT                    // exit
 166+ 7E05
 167+ 7E05              //  ______________________________________________________________________
 168+ 7E05              //
 169+ 7E05              // f_getline    a m fh -- n
 170+ 7E05              // Given an open filehandle read next line (terminated with $0D or $0A)
 171+ 7E05              // Address a is left for subsequent processing
 172+ 7E05              // and n as the actual number of byte read, that is the length of line
 173+ 7E05                              Colon_Def F_GETLINE, "F_GETLINE", is_normal
 173+ 7E05             >                New_Def  F_GETLINE, "F_GETLINE", Enter_Ptr, is_normal ; ok
 173+ 7E05             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 173+ 7E05             >
 173+ 7E05             >                // dummy db directives used to calculate length of namec
 173+ 7E05 46 5F 47 45 >                db      "F_GETLINE"
 173+ 7E09 54 4C 49 4E >
 173+ 7E0D 45          >
 173+ 7E0E             >len_NFA         defl    $ - temp_NFA
 173+ 7E0E             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 173+ 7E05             >
 173+ 7E05 89          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 173+ 7E06 46 5F 47 45 >                db      "F_GETLINE"               // name string in 7-bit ascii, but
 173+ 7E0A 54 4C 49 4E >
 173+ 7E0E 45          >
 173+ 7E0F             >                org     $-1                 // alter last byte of Name just above to set
 173+ 7E0E C5          >                db      {b $} | END_BIT     // msb as name end
 173+ 7E0F             >
 173+ 7E0F DF 7D       >                dw      last_NFA            // Link to previous definition Name
 173+ 7E11             >F_GETLINE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 173+ 7E11 88 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 173+ 7E13             >                else
 173+ 7E13 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 173+ 7E13             >                endif           ; ok        // for other definitions it "points" the correct handler
 173+ 7E13             >                // Use of "; ok" to suppress "warning[fwdref]"
 173+ 7E13             >
 173+ 7E13             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 174+ 7E13 B8 69                        dw      TO_R                    // >r               ( a  m  )     \  fh
 175+ 7E15 ED 6A                        dw      TUCK                    // tuck             ( m a m )
 176+ 7E17 E0 69 F1 67                  dw      R_OP, F_FGETPOS         // r f_fgetpos      ( m a m d f )
 177+ 7E1B A9 63 2C 00                  dw      LIT, 44, QERROR         // 44 ?error        ( m a m d )
 177+ 7E1F A9 70
 178+ 7E21
 179+ 7E21 59 6B C5 6A                  dw      TWO_SWAP, OVER          // 2swap over       ( m d a m )
 180+ 7E25 4B 6A FD 6A                  dw      ONE_PLUS, SWAP          // 1+ swap          ( m d a a+1 m )
 181+ 7E29
 182+ 7E29 E0 69 0F 68                  dw      R_OP, F_READ            // r f_read         ( m d a n f )
 183+ 7E2D A9 63 2E 00                  dw      LIT, 46, QERROR         // 46 ?error        ( m d a n )
 183+ 7E31 A9 70
 184+ 7E33                                                              // if ( at least 1 chr was read )  \  fh
 185+ 7E33 2C 64                        dw      ZBRANCH
 186+ 7E35 3C 00                        dw      FGetline_Else - $
 187+ 7E37 A9 63 0A 00                  dw          LIT, 10, ENCLOSE    //      10 enclose       ( m d a x b x )
 187+ 7E3B 7E 65
 188+ 7E3D D5 6A E0 6A                  dw          DROP, NIP           //      drop nip         ( m d a b )
 189+ 7E41 FD 6A                        dw          SWAP                //      drop swap        ( m d b a )
 190+ 7E43 A9 63 0D 00                  dw          LIT, 13, ENCLOSE    //      13 enclose       ( m d b a x c x )
 190+ 7E47 7E 65
 191+ 7E49 D5 6A E0 6A                  dw          DROP, NIP           //      drop nip         ( m d b a c )
 192+ 7E4D 17 6B 8B 6F                  dw          ROT, MIN            //      rot min          ( m d a n )
 193+ 7E51 0A 6B C5 6E                  dw          DUP, SPAN, STORE    //      dup span !       ( m d a n )
 193+ 7E55 AA 6B
 194+ 7E57 0A 6B B8 69                  dw          DUP, TO_R           //      dup >r           ( m d a n )      \ fh n
 195+ 7E5B 59 6B CC 69                  dw          TWO_SWAP, R_TO      //      2swap r>         ( m a n d n )    \ fh
 196+ 7E5F 05 6D 37 6A                  dw          ZERO, DPLUS         //      0 d+             ( m a n d+n )
 197+ 7E63 CC 69 A3 67                  dw          R_TO, F_SEEK        //      r> f_seek        ( m a n f )
 198+ 7E67 A9 63 2D 00                  dw          LIT, 45, QERROR     //      45 ?error        ( m a n )
 198+ 7E6B A9 70
 199+ 7E6D                                                              // else
 200+ 7E6D 15 64                        dw      BRANCH
 201+ 7E6F 0C 00                        dw      FGetline_Endif - $
 202+ 7E71              FGetline_Else:
 203+ 7E71 CC 69                        dw          R_TO                //      r>              ( m d a fh )
 204+ 7E73 59 6B 4B 6B                  dw          TWO_SWAP, TWO_DROP  //      2swap 2drop     ( m a fh )
 205+ 7E77 D5 6A 05 6D                  dw          DROP, ZERO          //      drop, 0         ( m a 0 )
 206+ 7E7B              FGetline_Endif:                                 // endif
 207+ 7E7B B8 69 0A 6B                  dw      TO_R, DUP, DUP          // >r dup dup           ( m a a a )
 207+ 7E7F 0A 6B
 208+ 7E81 4B 6A FD 6A                  dw      ONE_PLUS, SWAP          // 1+ swap              ( m a a+1 a )
 209+ 7E85 E0 69 98 68                  dw      R_OP, CMOVE             // r cmove              ( m a )
 210+ 7E89 6B 6B 2A 6A                  dw      TWO_DUP, PLUS           // 2dup +               ( m a m+a )
 211+ 7E8D 05 6D FD 6A                  dw      ZERO, SWAP              // 0 swap
 212+ 7E91 7D 6A AA 6B                  dw      CELL_MINUS,  STORE      // cell-  !             ( m a )
 213+ 7E95 E0 69 2A 6A                  dw      R_OP, PLUS, ONE_SUBTRACT// r + 1-               ( m a+n1 )
 213+ 7E99 57 6A
 214+ 7E9B FD 6A E0 69                  dw      SWAP, R_OP, SUBTRACT    // swap r -             ( a+n+1 m-n )
 214+ 7E9F 37 6F
 215+ 7EA1 F2 73                        dw      BLANKS                  // blanks
 216+ 7EA3 CC 69                        dw      R_TO                    // r>                   ( n )
 217+ 7EA5 A5 69                        dw      EXIT                    // ;
 218+ 7EA7
 219+ 7EA7              //  ______________________________________________________________________
 220+ 7EA7              //
 221+ 7EA7              // f_include    fh --
 222+ 7EA7              // Given a filehandle includes the source from file
 223+ 7EA7                              Colon_Def F_INCLUDE, "F_INCLUDE", is_normal
 223+ 7EA7             >                New_Def  F_INCLUDE, "F_INCLUDE", Enter_Ptr, is_normal ; ok
 223+ 7EA7             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 223+ 7EA7             >
 223+ 7EA7             >                // dummy db directives used to calculate length of namec
 223+ 7EA7 46 5F 49 4E >                db      "F_INCLUDE"
 223+ 7EAB 43 4C 55 44 >
 223+ 7EAF 45          >
 223+ 7EB0             >len_NFA         defl    $ - temp_NFA
 223+ 7EB0             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 223+ 7EA7             >
 223+ 7EA7 89          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 223+ 7EA8 46 5F 49 4E >                db      "F_INCLUDE"               // name string in 7-bit ascii, but
 223+ 7EAC 43 4C 55 44 >
 223+ 7EB0 45          >
 223+ 7EB1             >                org     $-1                 // alter last byte of Name just above to set
 223+ 7EB0 C5          >                db      {b $} | END_BIT     // msb as name end
 223+ 7EB1             >
 223+ 7EB1 05 7E       >                dw      last_NFA            // Link to previous definition Name
 223+ 7EB3             >F_INCLUDE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 223+ 7EB3 88 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 223+ 7EB5             >                else
 223+ 7EB5 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 223+ 7EB5             >                endif           ; ok        // for other definitions it "points" the correct handler
 223+ 7EB5             >                // Use of "; ok" to suppress "warning[fwdref]"
 223+ 7EB5             >
 223+ 7EB5             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 224+ 7EB5 04 6E 9D 6B                  dw      BLK, FETCH, TO_R        // blk @ >r
 224+ 7EB9 B8 69
 225+ 7EBB 0D 6E 9D 6B                  dw      TO_IN, FETCH, TO_R      // >in @ >r
 225+ 7EBF B8 69
 226+ 7EC1 BB 6E 9D 6B                  dw      SOURCE_ID, FETCH, TO_R  // source-id @ >r
 226+ 7EC5 B8 69
 227+ 7EC7 E0 69                        dw      R_OP                    // r
 228+ 7EC9                                                              // if
 229+ 7EC9 2C 64                        dw      ZBRANCH
 230+ 7ECB 20 00                        dw      FInclude_Else_1 - $
 231+ 7ECD E0 69 F1 67                  dw          R_OP, F_FGETPOS     //      r f_getpos
 232+ 7ED1 A9 63 2C 00                  dw          LIT, 44, QERROR     //      44 ?error
 232+ 7ED5 A9 70
 233+ 7ED7 0D 6E 9D 6B                  dw          TO_IN, FETCH        //      >in @ 2-
 234+ 7EDB 8A 6A                        dw          TWO_MINUS
 235+ 7EDD C5 6E 9D 6B                  dw          SPAN, FETCH         //      span @ -
 236+ 7EE1 37 6F                        dw          SUBTRACT
 237+ 7EE3 23 6F 37 6A                  dw          S_TO_D, DPLUS       //      s>d d+
 238+ 7EE7                                                              // else
 239+ 7EE7 15 64                        dw      BRANCH
 240+ 7EE9 06 00                        dw      FInclude_Endif_1 - $
 241+ 7EEB              FInclude_Else_1:
 242+ 7EEB 05 6D 05 6D                  dw          ZERO, ZERO          //      0 0
 243+ 7EEF                                                              // endif
 244+ 7EEF              FInclude_Endif_1:
 245+ 7EEF B8 69 B8 69                  dw      TO_R, TO_R              // >r >r
 246+ 7EF3 BB 6E AA 6B                  dw      SOURCE_ID, STORE        // source-id !
 247+ 7EF7              FInclude_Begin:                                 // begin
 248+ 7EF7 0D 6D 7D 7D                  dw          ONE, BLOCK, BBUF    //      1 block b/buf
 248+ 7EFB 45 6D
 249+ 7EFD 6B 6B F2 73                  dw          TWO_DUP, BLANKS     //      2dup blanks
 250+ 7F01 FD 6A 4B 6A                  dw          SWAP, ONE_PLUS      //      swap 1+
 251+ 7F05 FD 6A 7D 6A                  dw          SWAP, CELL_MINUS    //      swap cell-
 252+ 7F09 BB 6E 9D 6B                  dw          SOURCE_ID, FETCH    //      source-id @
 253+ 7F0D 11 7E                        dw          F_GETLINE           //      f_getline
 254+ 7F0F                                                              // while
 255+ 7F0F 2C 64                        dw      ZBRANCH
 256+ 7F11 14 00                        dw      FInclude_Repeat - $
 257+ 7F13 0D 6D 04 6E                  dw          ONE, BLK, STORE     //      1 blk !
 257+ 7F17 AA 6B
 258+ 7F19 05 6D 0D 6E                  dw          ZERO, TO_IN, STORE  //      0 >in !
 258+ 7F1D AA 6B
 259+ 7F1F CA 77                        dw          INTERPRET           //      interpret
 260+ 7F21 15 64                        dw      BRANCH
 261+ 7F23 D4 FF                        dw      FInclude_Begin - $
 262+ 7F25              FInclude_Repeat:                                // repeat
 263+ 7F25 BB 6E 9D 6B                  dw      SOURCE_ID, FETCH        // source-id @
 264+ 7F29 05 6D BB 6E                  dw      ZERO, SOURCE_ID, STORE  // 0 source-id !
 264+ 7F2D AA 6B
 265+ 7F2F C6 67                        dw      F_CLOSE                 // f_close
 266+ 7F31 A9 63 2A 00                  dw      LIT, 42, QERROR         // 42 ?error
 266+ 7F35 A9 70
 267+ 7F37 CC 69 CC 69                  dw      R_TO, R_TO, R_TO        // r> r> r>
 267+ 7F3B CC 69
 268+ 7F3D 0A 6B BB 6E                  dw      DUP, SOURCE_ID, STORE   // dup source-id !
 268+ 7F41 AA 6B
 269+ 7F43                                                              // if
 270+ 7F43 2C 64                        dw      ZBRANCH
 271+ 7F45 12 00                        dw      FInclude_Else_2 - $
 272+ 7F47 BB 6E 9D 6B                  dw          SOURCE_ID, FETCH    //      source-id @
 273+ 7F4B A3 67                        dw          F_SEEK              //      f_seek
 274+ 7F4D A9 63 2B 00                  dw          LIT, 43, QERROR     //      43, ?error
 274+ 7F51 A9 70
 275+ 7F53                                                              // else
 276+ 7F53 15 64                        dw      BRANCH
 277+ 7F55 04 00                        dw      FInclude_Endif_2 - $
 278+ 7F57              FInclude_Else_2:
 279+ 7F57 4B 6B                        dw          TWO_DROP            //      2drop
 280+ 7F59              FInclude_Endif_2:                               // endif
 281+ 7F59 CC 69 0D 6E                  dw      R_TO, TO_IN, STORE      // r> >in !
 281+ 7F5D AA 6B
 282+ 7F5F CC 69 04 6E                  dw      R_TO, BLK, STORE        // r> blk !
 282+ 7F63 AA 6B
 283+ 7F65 A5 69                        dw      EXIT                    // ;
 284+ 7F67
 285+ 7F67              //  ______________________________________________________________________
 286+ 7F67              //
 287+ 7F67              // open<         -- fh
 288+ 7F67              // Open the following filename and return it file-handle
 289+ 7F67              // Used in the form OPEN CCCC
 290+ 7F67                              Colon_Def OPEN_FH, "OPEN<", is_normal
 290+ 7F67             >                New_Def  OPEN_FH, "OPEN<", Enter_Ptr, is_normal ; ok
 290+ 7F67             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 290+ 7F67             >
 290+ 7F67             >                // dummy db directives used to calculate length of namec
 290+ 7F67 4F 50 45 4E >                db      "OPEN<"
 290+ 7F6B 3C          >
 290+ 7F6C             >len_NFA         defl    $ - temp_NFA
 290+ 7F6C             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 290+ 7F67             >
 290+ 7F67 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 290+ 7F68 4F 50 45 4E >                db      "OPEN<"               // name string in 7-bit ascii, but
 290+ 7F6C 3C          >
 290+ 7F6D             >                org     $-1                 // alter last byte of Name just above to set
 290+ 7F6C BC          >                db      {b $} | END_BIT     // msb as name end
 290+ 7F6D             >
 290+ 7F6D A7 7E       >                dw      last_NFA            // Link to previous definition Name
 290+ 7F6F             >OPEN_FH:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 290+ 7F6F 88 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 290+ 7F71             >                else
 290+ 7F71 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 290+ 7F71             >                endif           ; ok        // for other definitions it "points" the correct handler
 290+ 7F71             >                // Use of "; ok" to suppress "warning[fwdref]"
 290+ 7F71             >
 290+ 7F71             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 291+ 7F71 2F 6D                        dw      BL
 292+ 7F73 2A 74 43 72                  dw      WORD, COUNT, OVER       // bl word count over
 292+ 7F77 C5 6A
 293+ 7F79 2A 6A 05 6D                  dw      PLUS, ZERO, SWAP, STORE // + 0 swap !
 293+ 7F7D FD 6A AA 6B
 294+ 7F81 17 74 0D 6D                  dw      PAD, ONE, F_OPEN        // pad 1 f_open
 294+ 7F85 45 68
 295+ 7F87 A9 63 2B 00                  dw      LIT, 43                 // 43
 296+ 7F8B A9 70                        dw      QERROR                  // ?error
 297+ 7F8D A5 69                        dw      EXIT                    // ;
 298+ 7F8F
 299+ 7F8F              //  ______________________________________________________________________
 300+ 7F8F              //
 301+ 7F8F              // include      -- cccc
 302+ 7F8F              // Include the following filename
 303+ 7F8F                              Colon_Def INCLUDE, "INCLUDE", is_normal
 303+ 7F8F             >                New_Def  INCLUDE, "INCLUDE", Enter_Ptr, is_normal ; ok
 303+ 7F8F             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 303+ 7F8F             >
 303+ 7F8F             >                // dummy db directives used to calculate length of namec
 303+ 7F8F 49 4E 43 4C >                db      "INCLUDE"
 303+ 7F93 55 44 45    >
 303+ 7F96             >len_NFA         defl    $ - temp_NFA
 303+ 7F96             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 303+ 7F8F             >
 303+ 7F8F 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 303+ 7F90 49 4E 43 4C >                db      "INCLUDE"               // name string in 7-bit ascii, but
 303+ 7F94 55 44 45    >
 303+ 7F97             >                org     $-1                 // alter last byte of Name just above to set
 303+ 7F96 C5          >                db      {b $} | END_BIT     // msb as name end
 303+ 7F97             >
 303+ 7F97 67 7F       >                dw      last_NFA            // Link to previous definition Name
 303+ 7F99             >INCLUDE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 303+ 7F99 88 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 303+ 7F9B             >                else
 303+ 7F9B ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 303+ 7F9B             >                endif           ; ok        // for other definitions it "points" the correct handler
 303+ 7F9B             >                // Use of "; ok" to suppress "warning[fwdref]"
 303+ 7F9B             >
 303+ 7F9B             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 304+ 7F9B 6F 7F                        dw      OPEN_FH                 // open
 305+ 7F9D 0A 6B B3 7E                  dw      DUP, F_INCLUDE          // dup f_include
 306+ 7FA1 C6 67 D5 6A                  dw      F_CLOSE, DROP           // f_close drop
 307+ 7FA5 A5 69                        dw      EXIT                    // ;
 308+ 7FA7
 309+ 7FA7              //  ______________________________________________________________________
 310+ 7FA7              //
 311+ 7FA7              // needs
 312+ 7FA7              // check for cccc exists in vocabulary
 313+ 7FA7              // if it doesn't then  INCLUDE  inc/cccc.F
 314+ 7FA7
 315+ 7FA7              // temp filename cccc.f as counted string zero-padded
 316+ 7FA7                              New_Def NEEDS_W,   "NEEDS-W", Create_Ptr, is_normal
 316+ 7FA7             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 316+ 7FA7             >
 316+ 7FA7             >                // dummy db directives used to calculate length of namec
 316+ 7FA7 4E 45 45 44 >                db      "NEEDS-W"
 316+ 7FAB 53 2D 57    >
 316+ 7FAE             >len_NFA         defl    $ - temp_NFA
 316+ 7FAE             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 316+ 7FA7             >
 316+ 7FA7 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 316+ 7FA8 4E 45 45 44 >                db      "NEEDS-W"               // name string in 7-bit ascii, but
 316+ 7FAC 53 2D 57    >
 316+ 7FAF             >                org     $-1                 // alter last byte of Name just above to set
 316+ 7FAE D7          >                db      {b $} | END_BIT     // msb as name end
 316+ 7FAF             >
 316+ 7FAF 8F 7F       >                dw      last_NFA            // Link to previous definition Name
 316+ 7FB1             >NEEDS_W:          if Create_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 316+ 7FB1 DD 76       >                dw      Create_Ptr ; ok        // for primitive definitions  actual code
 316+ 7FB3             >                else
 316+ 7FB3 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 316+ 7FB3             >                endif           ; ok        // for other definitions it "points" the correct handler
 316+ 7FB3             >                // Use of "; ok" to suppress "warning[fwdref]"
 316+ 7FB3             >
 316+ 7FB3             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 317+ 7FB3 00 00 00...                  ds      35                      // 32 + .f + 0x00 = len 35
 318+ 7FD6              // temp complete path+filename
 319+ 7FD6                              New_Def NEEDS_FN,  "NEEDS-FN", Create_Ptr, is_normal
 319+ 7FD6             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 319+ 7FD6             >
 319+ 7FD6             >                // dummy db directives used to calculate length of namec
 319+ 7FD6 4E 45 45 44 >                db      "NEEDS-FN"
 319+ 7FDA 53 2D 46 4E >
 319+ 7FDE             >len_NFA         defl    $ - temp_NFA
 319+ 7FDE             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 319+ 7FD6             >
 319+ 7FD6 88          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 319+ 7FD7 4E 45 45 44 >                db      "NEEDS-FN"               // name string in 7-bit ascii, but
 319+ 7FDB 53 2D 46 4E >
 319+ 7FDF             >                org     $-1                 // alter last byte of Name just above to set
 319+ 7FDE CE          >                db      {b $} | END_BIT     // msb as name end
 319+ 7FDF             >
 319+ 7FDF A7 7F       >                dw      last_NFA            // Link to previous definition Name
 319+ 7FE1             >NEEDS_FN:          if Create_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 319+ 7FE1 DD 76       >                dw      Create_Ptr ; ok        // for primitive definitions  actual code
 319+ 7FE3             >                else
 319+ 7FE3 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 319+ 7FE3             >                endif           ; ok        // for other definitions it "points" the correct handler
 319+ 7FE3             >                // Use of "; ok" to suppress "warning[fwdref]"
 319+ 7FE3             >
 319+ 7FE3             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 320+ 7FE3 00 00 00...                  ds      40
 321+ 800B              // constant path
 322+ 800B                              New_Def NEEDS_INC,  "NEEDS-INC", Create_Ptr, is_normal
 322+ 800B             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 322+ 800B             >
 322+ 800B             >                // dummy db directives used to calculate length of namec
 322+ 800B 4E 45 45 44 >                db      "NEEDS-INC"
 322+ 800F 53 2D 49 4E >
 322+ 8013 43          >
 322+ 8014             >len_NFA         defl    $ - temp_NFA
 322+ 8014             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 322+ 800B             >
 322+ 800B 89          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 322+ 800C 4E 45 45 44 >                db      "NEEDS-INC"               // name string in 7-bit ascii, but
 322+ 8010 53 2D 49 4E >
 322+ 8014 43          >
 322+ 8015             >                org     $-1                 // alter last byte of Name just above to set
 322+ 8014 C3          >                db      {b $} | END_BIT     // msb as name end
 322+ 8015             >
 322+ 8015 D6 7F       >                dw      last_NFA            // Link to previous definition Name
 322+ 8017             >NEEDS_INC:          if Create_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 322+ 8017 DD 76       >                dw      Create_Ptr ; ok        // for primitive definitions  actual code
 322+ 8019             >                else
 322+ 8019 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 322+ 8019             >                endif           ; ok        // for other definitions it "points" the correct handler
 322+ 8019             >                // Use of "; ok" to suppress "warning[fwdref]"
 322+ 8019             >
 322+ 8019             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 323+ 8019 04 69 6E 63                  db      4, "inc/", 0
 323+ 801D 2F 00
 324+ 801F                              New_Def NEEDS_LIB,  "NEEDS-LIB", Create_Ptr, is_normal
 324+ 801F             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 324+ 801F             >
 324+ 801F             >                // dummy db directives used to calculate length of namec
 324+ 801F 4E 45 45 44 >                db      "NEEDS-LIB"
 324+ 8023 53 2D 4C 49 >
 324+ 8027 42          >
 324+ 8028             >len_NFA         defl    $ - temp_NFA
 324+ 8028             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 324+ 801F             >
 324+ 801F 89          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 324+ 8020 4E 45 45 44 >                db      "NEEDS-LIB"               // name string in 7-bit ascii, but
 324+ 8024 53 2D 4C 49 >
 324+ 8028 42          >
 324+ 8029             >                org     $-1                 // alter last byte of Name just above to set
 324+ 8028 C2          >                db      {b $} | END_BIT     // msb as name end
 324+ 8029             >
 324+ 8029 0B 80       >                dw      last_NFA            // Link to previous definition Name
 324+ 802B             >NEEDS_LIB:          if Create_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 324+ 802B DD 76       >                dw      Create_Ptr ; ok        // for primitive definitions  actual code
 324+ 802D             >                else
 324+ 802D ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 324+ 802D             >                endif           ; ok        // for other definitions it "points" the correct handler
 324+ 802D             >                // Use of "; ok" to suppress "warning[fwdref]"
 324+ 802D             >
 324+ 802D             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 325+ 802D 04 6C 69 62                  db      4, "lib/", 0
 325+ 8031 2F 00
 326+ 8033
 327+ 8033              // Concatenate path at a and filename and include it
 328+ 8033              // No error is issued if filename doesn't exist.
 329+ 8033                              Colon_Def NEEDS_SLASH, "NEEDS/", is_normal
 329+ 8033             >                New_Def  NEEDS_SLASH, "NEEDS/", Enter_Ptr, is_normal ; ok
 329+ 8033             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 329+ 8033             >
 329+ 8033             >                // dummy db directives used to calculate length of namec
 329+ 8033 4E 45 45 44 >                db      "NEEDS/"
 329+ 8037 53 2F       >
 329+ 8039             >len_NFA         defl    $ - temp_NFA
 329+ 8039             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 329+ 8033             >
 329+ 8033 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 329+ 8034 4E 45 45 44 >                db      "NEEDS/"               // name string in 7-bit ascii, but
 329+ 8038 53 2F       >
 329+ 803A             >                org     $-1                 // alter last byte of Name just above to set
 329+ 8039 AF          >                db      {b $} | END_BIT     // msb as name end
 329+ 803A             >
 329+ 803A 1F 80       >                dw      last_NFA            // Link to previous definition Name
 329+ 803C             >NEEDS_SLASH:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 329+ 803C 88 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 329+ 803E             >                else
 329+ 803E ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 329+ 803E             >                endif           ; ok        // for other definitions it "points" the correct handler
 329+ 803E             >                // Use of "; ok" to suppress "warning[fwdref]"
 329+ 803E             >
 329+ 803E             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 330+ 803E 43 72 ED 6A                  dw      COUNT, TUCK             // n a n
 331+ 8042 E1 7F FD 6A                  dw      NEEDS_FN, SWAP, CMOVE   // n        \ Path
 331+ 8046 98 68
 332+ 8048 E1 7F 2A 6A                  dw      NEEDS_FN, PLUS          // a1+n     \ Concat
 333+ 804C B1 7F 4B 6A                  dw      NEEDS_W, ONE_PLUS, SWAP
 333+ 8050 FD 6A
 334+ 8052 A9 63 23 00                  dw      LIT, 35
 335+ 8056 98 68                        dw      CMOVE
 336+ 8058 E1 7F                        dw      NEEDS_FN
 337+ 805A 17 74 0D 6D                  dw      PAD, ONE, F_OPEN
 337+ 805E 45 68
 338+ 8060 E7 69                        dw      ZEQUAL
 339+ 8062 2C 64                        dw      ZBRANCH
 340+ 8064 08 00                        dw      Needs_1 - $
 341+ 8066 B3 7E                        dw          F_INCLUDE
 342+ 8068 15 64                        dw      BRANCH
 343+ 806A 04 00                        dw      Needs_2 - $
 344+ 806C              Needs_1:
 345+ 806C              //              dw          NEEDS_W, COUNT, TYPE, SPACE
 346+ 806C              //              dw          LIT, 43, MESSAGE
 347+ 806C D5 6A                        dw          DROP
 348+ 806E              Needs_2:
 349+ 806E A5 69                        dw      EXIT                    // ;
 350+ 8070
 351+ 8070
 352+ 8070                              New_Def NDOM,   "NDOM", Create_Ptr, is_normal
 352+ 8070             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 352+ 8070             >
 352+ 8070             >                // dummy db directives used to calculate length of namec
 352+ 8070 4E 44 4F 4D >                db      "NDOM"
 352+ 8074             >len_NFA         defl    $ - temp_NFA
 352+ 8074             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 352+ 8070             >
 352+ 8070 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 352+ 8071 4E 44 4F 4D >                db      "NDOM"               // name string in 7-bit ascii, but
 352+ 8075             >                org     $-1                 // alter last byte of Name just above to set
 352+ 8074 CD          >                db      {b $} | END_BIT     // msb as name end
 352+ 8075             >
 352+ 8075 33 80       >                dw      last_NFA            // Link to previous definition Name
 352+ 8077             >NDOM:          if Create_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 352+ 8077 DD 76       >                dw      Create_Ptr ; ok        // for primitive definitions  actual code
 352+ 8079             >                else
 352+ 8079 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 352+ 8079             >                endif           ; ok        // for other definitions it "points" the correct handler
 352+ 8079             >                // Use of "; ok" to suppress "warning[fwdref]"
 352+ 8079             >
 352+ 8079             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 353+ 8079              //              db $3A, $3F, $2F, $2A, $7C, $5C, $3C, $3E, $22
 354+ 8079 3A 3F 2F 2A                  db ':?/*|\<>"'
 354+ 807D 7C 5C 3C 3E
 354+ 8081 22
 355+ 8082
 356+ 8082                              New_Def NCDM,   "NCDM", Create_Ptr, is_normal
 356+ 8082             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 356+ 8082             >
 356+ 8082             >                // dummy db directives used to calculate length of namec
 356+ 8082 4E 43 44 4D >                db      "NCDM"
 356+ 8086             >len_NFA         defl    $ - temp_NFA
 356+ 8086             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 356+ 8082             >
 356+ 8082 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 356+ 8083 4E 43 44 4D >                db      "NCDM"               // name string in 7-bit ascii, but
 356+ 8087             >                org     $-1                 // alter last byte of Name just above to set
 356+ 8086 CD          >                db      {b $} | END_BIT     // msb as name end
 356+ 8087             >
 356+ 8087 70 80       >                dw      last_NFA            // Link to previous definition Name
 356+ 8089             >NCDM:          if Create_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 356+ 8089 DD 76       >                dw      Create_Ptr ; ok        // for primitive definitions  actual code
 356+ 808B             >                else
 356+ 808B ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 356+ 808B             >                endif           ; ok        // for other definitions it "points" the correct handler
 356+ 808B             >                // Use of "; ok" to suppress "warning[fwdref]"
 356+ 808B             >
 356+ 808B             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 357+ 808B              //              db $5F, $5E, $25, $26, $24, $5F, $7B, $7D, $7E
 358+ 808B 5F 5E 25 26                  db '_^%&$_{}~'
 358+ 808F 24 5F 7B 7D
 358+ 8093 7E
 359+ 8094
 360+ 8094              // Replace illegal character in filename using the map here above
 361+ 8094              // at the moment we need only  "
 362+ 8094                              Colon_Def NEEDS_CHECK, "NEEDS-CH", is_normal
 362+ 8094             >                New_Def  NEEDS_CHECK, "NEEDS-CH", Enter_Ptr, is_normal ; ok
 362+ 8094             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 362+ 8094             >
 362+ 8094             >                // dummy db directives used to calculate length of namec
 362+ 8094 4E 45 45 44 >                db      "NEEDS-CH"
 362+ 8098 53 2D 43 48 >
 362+ 809C             >len_NFA         defl    $ - temp_NFA
 362+ 809C             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 362+ 8094             >
 362+ 8094 88          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 362+ 8095 4E 45 45 44 >                db      "NEEDS-CH"               // name string in 7-bit ascii, but
 362+ 8099 53 2D 43 48 >
 362+ 809D             >                org     $-1                 // alter last byte of Name just above to set
 362+ 809C C8          >                db      {b $} | END_BIT     // msb as name end
 362+ 809D             >
 362+ 809D 82 80       >                dw      last_NFA            // Link to previous definition Name
 362+ 809F             >NEEDS_CHECK:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 362+ 809F 88 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 362+ 80A1             >                else
 362+ 80A1 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 362+ 80A1             >                endif           ; ok        // for other definitions it "points" the correct handler
 362+ 80A1             >                // Use of "; ok" to suppress "warning[fwdref]"
 362+ 80A1             >
 362+ 80A1             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 363+ 80A1 43 72 57 72                  dw      COUNT, BOUNDS
 364+ 80A5 86 64                        dw      C_DO
 365+ 80A7              Needs_3:
 366+ 80A7 89 80 77 80                  dw          NCDM, NDOM, LIT, 9
 366+ 80AB A9 63 09 00
 367+ 80AF 90 64 B8 6B                  dw          I, CFETCH
 368+ 80B3 B8 65                        dw          C_MAP
 369+ 80B5 90 64 C6 6B                  dw          I, CSTORE
 370+ 80B9              Needs_4:
 371+ 80B9 04 64                        dw      C_LOOP
 372+ 80BB EC FF                        dw      Needs_3 - $
 373+ 80BD A5 69                        dw      EXIT
 374+ 80BF
 375+ 80BF
 376+ 80BF              // include  "path/cccc.f" if cccc is not defined
 377+ 80BF              // filename cccc.f is temporary stored at NEEDS-W
 378+ 80BF                              Colon_Def NEEDS_PATH, "NEEDS-F", is_normal
 378+ 80BF             >                New_Def  NEEDS_PATH, "NEEDS-F", Enter_Ptr, is_normal ; ok
 378+ 80BF             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 378+ 80BF             >
 378+ 80BF             >                // dummy db directives used to calculate length of namec
 378+ 80BF 4E 45 45 44 >                db      "NEEDS-F"
 378+ 80C3 53 2D 46    >
 378+ 80C6             >len_NFA         defl    $ - temp_NFA
 378+ 80C6             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 378+ 80BF             >
 378+ 80BF 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 378+ 80C0 4E 45 45 44 >                db      "NEEDS-F"               // name string in 7-bit ascii, but
 378+ 80C4 53 2D 46    >
 378+ 80C7             >                org     $-1                 // alter last byte of Name just above to set
 378+ 80C6 C6          >                db      {b $} | END_BIT     // msb as name end
 378+ 80C7             >
 378+ 80C7 94 80       >                dw      last_NFA            // Link to previous definition Name
 378+ 80C9             >NEEDS_PATH:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 378+ 80C9 88 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 378+ 80CB             >                else
 378+ 80CB ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 378+ 80CB             >                endif           ; ok        // for other definitions it "points" the correct handler
 378+ 80CB             >                // Use of "; ok" to suppress "warning[fwdref]"
 378+ 80CB             >
 378+ 80CB             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 379+ 80CB DC 75                        dw      LFIND
 380+ 80CD 2C 64                        dw      ZBRANCH
 381+ 80CF 0A 00                        dw      Needs_5 - $
 382+ 80D1
 383+ 80D1 D5 6A 4B 6B                  dw          DROP, TWO_DROP
 384+ 80D5 15 64                        dw      BRANCH
 385+ 80D7 2C 00                        dw      Needs_6 - $
 386+ 80D9              Needs_5:
 387+ 80D9 B1 7F                        dw          NEEDS_W
 388+ 80DB A9 63 23 00                  dw          LIT, 35
 389+ 80DF E1 73                        dw          ERASE                   // a
 390+ 80E1 E4 6E B8 6B                  dw          HERE, CFETCH, ONE_PLUS  // a n
 390+ 80E5 4B 6A
 391+ 80E7 E4 6E C5 6A                  dw          HERE, OVER              // a n here n
 392+ 80EB B1 7F FD 6A                  dw          NEEDS_W, SWAP, CMOVE    // a n
 392+ 80EF 98 68
 393+ 80F1 B1 7F 9F 80                  dw          NEEDS_W, NEEDS_CHECK
 394+ 80F5 B1 7F 2A 6A                  dw          NEEDS_W, PLUS           // a a1+1
 395+ 80F9 A9 63 2E 66                  dw          LIT, $662E              // a a1+1 ".F"
 396+ 80FD FD 6A AA 6B                  dw          SWAP, STORE             // a
 397+ 8101 3C 80                        dw          NEEDS_SLASH
 398+ 8103              Needs_6:
 399+ 8103 A5 69                        dw      EXIT
 400+ 8105
 401+ 8105
 402+ 8105              // check for cccc exists in vocabulary
 403+ 8105              // if it doesn't then  INCLUDE  inc/cccc.F
 404+ 8105              // search in inc subdirectory
 405+ 8105                              Colon_Def NEEDS, "NEEDS", is_normal
 405+ 8105             >                New_Def  NEEDS, "NEEDS", Enter_Ptr, is_normal ; ok
 405+ 8105             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 405+ 8105             >
 405+ 8105             >                // dummy db directives used to calculate length of namec
 405+ 8105 4E 45 45 44 >                db      "NEEDS"
 405+ 8109 53          >
 405+ 810A             >len_NFA         defl    $ - temp_NFA
 405+ 810A             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 405+ 8105             >
 405+ 8105 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 405+ 8106 4E 45 45 44 >                db      "NEEDS"               // name string in 7-bit ascii, but
 405+ 810A 53          >
 405+ 810B             >                org     $-1                 // alter last byte of Name just above to set
 405+ 810A D3          >                db      {b $} | END_BIT     // msb as name end
 405+ 810B             >
 405+ 810B BF 80       >                dw      last_NFA            // Link to previous definition Name
 405+ 810D             >NEEDS:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 405+ 810D 88 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 405+ 810F             >                else
 405+ 810F ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 405+ 810F             >                endif           ; ok        // for other definitions it "points" the correct handler
 405+ 810F             >                // Use of "; ok" to suppress "warning[fwdref]"
 405+ 810F             >
 405+ 810F             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 406+ 810F 0D 6E 9D 6B                  dw      TO_IN, FETCH
 407+ 8113 0A 6B                        dw      DUP
 408+ 8115 17 80 C9 80                  dw      NEEDS_INC, NEEDS_PATH
 409+ 8119 0D 6E AA 6B                  dw      TO_IN, STORE
 410+ 811D 2B 80 C9 80                  dw      NEEDS_LIB, NEEDS_PATH
 411+ 8121 0D 6E AA 6B                  dw      TO_IN, STORE
 412+ 8125 DC 75                        dw      LFIND
 413+ 8127 2C 64                        dw      ZBRANCH
 414+ 8129 08 00                        dw      Needs_10 - $
 415+ 812B 4B 6B                        dw          TWO_DROP
 416+ 812D 15 64                        dw      BRANCH
 417+ 812F 10 00                        dw      Needs_11 - $
 418+ 8131              Needs_10:
 419+ 8131 B1 7F 43 72                  dw      NEEDS_W, COUNT, TYPE, SPACE
 419+ 8135 65 72 EF 6F
 420+ 8139 A9 63 2B 00                  dw      LIT, 43, MESSAGE
 420+ 813D FC 7A
 421+ 813F              Needs_11:
 422+ 813F A5 69                        dw      EXIT
 423+ 8141
 424+ 8141
 425+ 8141              //  ______________________________________________________________________
 426+ 8141              //
 427+ 8141              // load+        n --
 428+ 8141                              Colon_Def LOAD_P, "LOAD+", is_normal
 428+ 8141             >                New_Def  LOAD_P, "LOAD+", Enter_Ptr, is_normal ; ok
 428+ 8141             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 428+ 8141             >
 428+ 8141             >                // dummy db directives used to calculate length of namec
 428+ 8141 4C 4F 41 44 >                db      "LOAD+"
 428+ 8145 2B          >
 428+ 8146             >len_NFA         defl    $ - temp_NFA
 428+ 8146             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 428+ 8141             >
 428+ 8141 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 428+ 8142 4C 4F 41 44 >                db      "LOAD+"               // name string in 7-bit ascii, but
 428+ 8146 2B          >
 428+ 8147             >                org     $-1                 // alter last byte of Name just above to set
 428+ 8146 AB          >                db      {b $} | END_BIT     // msb as name end
 428+ 8147             >
 428+ 8147 05 81       >                dw      last_NFA            // Link to previous definition Name
 428+ 8149             >LOAD_P:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 428+ 8149 88 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 428+ 814B             >                else
 428+ 814B ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 428+ 814B             >                endif           ; ok        // for other definitions it "points" the correct handler
 428+ 814B             >                // Use of "; ok" to suppress "warning[fwdref]"
 428+ 814B             >
 428+ 814B             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 429+ 814B 04 6E 9D 6B                  dw      BLK, FETCH, TO_R        // blk @ >r
 429+ 814F B8 69
 430+ 8151 0D 6E 9D 6B                  dw      TO_IN, FETCH, TO_R      // >in @ >r
 430+ 8155 B8 69
 431+ 8157
 432+ 8157 05 6D 0D 6E                  dw      ZERO, TO_IN, STORE      // 0 >in !
 432+ 815B AA 6B
 433+ 815D 51 6D 63 7A                  dw      BSCR, MUL, BLK, STORE   // b/scr * blk !
 433+ 8161 04 6E AA 6B
 434+ 8165 CA 77                        dw      INTERPRET               // interpret
 435+ 8167
 436+ 8167 CC 69 0D 6E                  dw      R_TO, TO_IN, STORE      // r> >in !
 436+ 816B AA 6B
 437+ 816D CC 69 04 6E                  dw      R_TO, BLK, STORE        // r> blk !
 437+ 8171 AA 6B
 438+ 8173 A5 69                        dw      EXIT                    // ;
 439+ 8175
 440+ 8175              //  ______________________________________________________________________
 441+ 8175              //
 442+ 8175              // -->          --
 443+ 8175                              Colon_Def LOAD_NEXT, "-->", is_immediate
 443+ 8175             >                New_Def  LOAD_NEXT, "-->", Enter_Ptr, is_immediate ; ok
 443+ 8175             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 443+ 8175             >
 443+ 8175             >                // dummy db directives used to calculate length of namec
 443+ 8175 2D 2D 3E    >                db      "-->"
 443+ 8178             >len_NFA         defl    $ - temp_NFA
 443+ 8178             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 443+ 8175             >
 443+ 8175 C3          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 443+ 8176 2D 2D 3E    >                db      "-->"               // name string in 7-bit ascii, but
 443+ 8179             >                org     $-1                 // alter last byte of Name just above to set
 443+ 8178 BE          >                db      {b $} | END_BIT     // msb as name end
 443+ 8179             >
 443+ 8179 41 81       >                dw      last_NFA            // Link to previous definition Name
 443+ 817B             >LOAD_NEXT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 443+ 817B 88 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 443+ 817D             >                else
 443+ 817D ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 443+ 817D             >                endif           ; ok        // for other definitions it "points" the correct handler
 443+ 817D             >                // Use of "; ok" to suppress "warning[fwdref]"
 443+ 817D             >
 443+ 817D             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 444+ 817D 22 71                        dw      QLOADING                // ?loading
 445+ 817F 05 6D 0D 6E                  dw      ZERO, TO_IN, STORE      // 0 >in !
 445+ 8183 AA 6B
 446+ 8185 51 6D                        dw      BSCR                    // b/scr
 447+ 8187 04 6E 9D 6B                  dw      BLK, FETCH              // blk @
 448+ 818B C5 6A                        dw      OVER                    // over
 449+ 818D 90 7A                        dw      MOD                     // mod
 450+ 818F 37 6F                        dw      SUBTRACT                // -
 451+ 8191 04 6E 7A 6B                  dw      BLK, PLUSSTORE          // +!
 452+ 8195 A5 69                        dw      EXIT                    // ;
 453+ 8197
 454+ 8197              //  ______________________________________________________________________
 455+ 8197              //
 456+ 8197              // '            -- xt
 457+ 8197                              Colon_Def TICK, "'", is_normal
 457+ 8197             >                New_Def  TICK, "'", Enter_Ptr, is_normal ; ok
 457+ 8197             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 457+ 8197             >
 457+ 8197             >                // dummy db directives used to calculate length of namec
 457+ 8197 27          >                db      "'"
 457+ 8198             >len_NFA         defl    $ - temp_NFA
 457+ 8198             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 457+ 8197             >
 457+ 8197 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 457+ 8198 27          >                db      "'"               // name string in 7-bit ascii, but
 457+ 8199             >                org     $-1                 // alter last byte of Name just above to set
 457+ 8198 A7          >                db      {b $} | END_BIT     // msb as name end
 457+ 8199             >
 457+ 8199 75 81       >                dw      last_NFA            // Link to previous definition Name
 457+ 819B             >TICK:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 457+ 819B 88 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 457+ 819D             >                else
 457+ 819D ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 457+ 819D             >                endif           ; ok        // for other definitions it "points" the correct handler
 457+ 819D             >                // Use of "; ok" to suppress "warning[fwdref]"
 457+ 819D             >
 457+ 819D             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 458+ 819D DC 75                        dw      LFIND                   // -find
 459+ 819F E7 69                        dw      ZEQUAL                  // 0=
 460+ 81A1 05 6D A9 70                  dw      ZERO, QERROR            // 0 ?error
 461+ 81A5 D5 6A                        dw      DROP                    // drop
 462+ 81A7 A5 69                        dw      EXIT                    // ;
 463+ 81A9
 464+ 81A9              //  ______________________________________________________________________
 465+ 81A9              //
 466+ 81A9              // forget       -- cccc
 467+ 81A9                              Colon_Def FORGET, "FORGET", is_normal
 467+ 81A9             >                New_Def  FORGET, "FORGET", Enter_Ptr, is_normal ; ok
 467+ 81A9             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 467+ 81A9             >
 467+ 81A9             >                // dummy db directives used to calculate length of namec
 467+ 81A9 46 4F 52 47 >                db      "FORGET"
 467+ 81AD 45 54       >
 467+ 81AF             >len_NFA         defl    $ - temp_NFA
 467+ 81AF             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 467+ 81A9             >
 467+ 81A9 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 467+ 81AA 46 4F 52 47 >                db      "FORGET"               // name string in 7-bit ascii, but
 467+ 81AE 45 54       >
 467+ 81B0             >                org     $-1                 // alter last byte of Name just above to set
 467+ 81AF D4          >                db      {b $} | END_BIT     // msb as name end
 467+ 81B0             >
 467+ 81B0 97 81       >                dw      last_NFA            // Link to previous definition Name
 467+ 81B2             >FORGET:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 467+ 81B2 88 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 467+ 81B4             >                else
 467+ 81B4 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 467+ 81B4             >                endif           ; ok        // for other definitions it "points" the correct handler
 467+ 81B4             >                // Use of "; ok" to suppress "warning[fwdref]"
 467+ 81B4             >
 467+ 81B4             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 468+ 81B4 45 6E 9D 6B                  dw      CURRENT, FETCH          // current @
 469+ 81B8 38 6E 9D 6B                  dw      CONTEXT, FETCH          // context @
 470+ 81BC 37 6F A9 63                  dw      SUBTRACT, LIT, 23, QERROR // - 23 ?error
 470+ 81C0 17 00 A9 70
 471+ 81C4 9B 81 79 70                  dw      TICK, TO_BODY           // ' >body
 472+ 81C8 0A 6B BB 6D                  dw      DUP, FENCE, FETCH       // dup fence @
 472+ 81CC 9D 6B
 473+ 81CE 52 6F A9 63                  dw      ULESS, LIT, 21, QERROR  // u< 21 ?error
 473+ 81D2 15 00 A9 70
 474+ 81D6 0A 6B 4F 70                  dw      DUP, NFA, DP, STORE     // dup nfa dp !
 474+ 81DA C3 6D AA 6B
 475+ 81DE 35 70 9D 6B                  dw      LFA, FETCH              // lfa @
 476+ 81E2 38 6E 9D 6B                  dw      CONTEXT, FETCH, STORE   // context @ !
 476+ 81E6 AA 6B
 477+ 81E8 A5 69                        dw      EXIT                    // ;
 478+ 81EA
 479+ 81EA              //  ______________________________________________________________________
 480+ 81EA              //
 481+ 81EA              // marker       -- cccc
 482+ 81EA                              Colon_Def MARKER, "MARKER", is_immediate
 482+ 81EA             >                New_Def  MARKER, "MARKER", Enter_Ptr, is_immediate ; ok
 482+ 81EA             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 482+ 81EA             >
 482+ 81EA             >                // dummy db directives used to calculate length of namec
 482+ 81EA 4D 41 52 4B >                db      "MARKER"
 482+ 81EE 45 52       >
 482+ 81F0             >len_NFA         defl    $ - temp_NFA
 482+ 81F0             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 482+ 81EA             >
 482+ 81EA C6          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 482+ 81EB 4D 41 52 4B >                db      "MARKER"               // name string in 7-bit ascii, but
 482+ 81EF 45 52       >
 482+ 81F1             >                org     $-1                 // alter last byte of Name just above to set
 482+ 81F0 D2          >                db      {b $} | END_BIT     // msb as name end
 482+ 81F1             >
 482+ 81F1 A9 81       >                dw      last_NFA            // Link to previous definition Name
 482+ 81F3             >MARKER:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 482+ 81F3 88 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 482+ 81F5             >                else
 482+ 81F5 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 482+ 81F5             >                endif           ; ok        // for other definitions it "points" the correct handler
 482+ 81F5             >                // Use of "; ok" to suppress "warning[fwdref]"
 482+ 81F5             >
 482+ 81F5             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 483+ 81F5 0C 72                        dw      CBUILDS
 484+ 81F7 D1 6D 9D 6B                  dw      VOC_LINK, FETCH, COMMA
 484+ 81FB 00 6F
 485+ 81FD 45 6E 9D 6B                  dw      CURRENT, FETCH, COMMA
 485+ 8201 00 6F
 486+ 8203 38 6E 9D 6B                  dw      CONTEXT, FETCH, COMMA
 486+ 8207 00 6F
 487+ 8209 25 70 00 6F                  dw      LATEST, COMMA
 488+ 820D 25 70 63 70                  dw      LATEST, PFA, LFA, FETCH, COMMA
 488+ 8211 35 70 9D 6B
 488+ 8215 00 6F
 489+ 8217 1C 72                        dw      DOES_TO
 490+ 8219 0A 6B 9D 6B                  dw      DUP, FETCH, VOC_LINK, STORE, CELL_PLUS
 490+ 821D D1 6D AA 6B
 490+ 8221 73 6A
 491+ 8223 0A 6B 9D 6B                  dw      DUP, FETCH, CURRENT, STORE, CELL_PLUS
 491+ 8227 45 6E AA 6B
 491+ 822B 73 6A
 492+ 822D 0A 6B 9D 6B                  dw      DUP, FETCH, CONTEXT, STORE, CELL_PLUS
 492+ 8231 38 6E AA 6B
 492+ 8235 73 6A
 493+ 8237 0A 6B 9D 6B                  dw      DUP, FETCH, DP, STORE, CELL_PLUS
 493+ 823B C3 6D AA 6B
 493+ 823F 73 6A
 494+ 8241 9D 6B 45 6E                  dw           FETCH, CURRENT, FETCH, STORE
 494+ 8245 9D 6B AA 6B
 495+ 8249 A5 69                        dw      EXIT
 496+ 824B
 497+ 824B              //  ______________________________________________________________________
 498+ 824B              //
 499+ 824B              // spaces       n --
 500+ 824B                              Colon_Def SPACES, "SPACES", is_normal
 500+ 824B             >                New_Def  SPACES, "SPACES", Enter_Ptr, is_normal ; ok
 500+ 824B             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 500+ 824B             >
 500+ 824B             >                // dummy db directives used to calculate length of namec
 500+ 824B 53 50 41 43 >                db      "SPACES"
 500+ 824F 45 53       >
 500+ 8251             >len_NFA         defl    $ - temp_NFA
 500+ 8251             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 500+ 824B             >
 500+ 824B 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 500+ 824C 53 50 41 43 >                db      "SPACES"               // name string in 7-bit ascii, but
 500+ 8250 45 53       >
 500+ 8252             >                org     $-1                 // alter last byte of Name just above to set
 500+ 8251 D3          >                db      {b $} | END_BIT     // msb as name end
 500+ 8252             >
 500+ 8252 EA 81       >                dw      last_NFA            // Link to previous definition Name
 500+ 8254             >SPACES:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 500+ 8254 88 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 500+ 8256             >                else
 500+ 8256 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 500+ 8256             >                endif           ; ok        // for other definitions it "points" the correct handler
 500+ 8256             >                // Use of "; ok" to suppress "warning[fwdref]"
 500+ 8256             >
 500+ 8256             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 501+ 8256 05 6D A1 6F                  dw      ZERO, MAX
 502+ 825A 05 6D 59 64                  dw      ZERO, C_Q_DO
 503+ 825E 08 00                        dw      Spaces_Leave - $
 504+ 8260              Spaces_Loop:
 505+ 8260 EF 6F                        dw          SPACE
 506+ 8262 04 64                        dw      C_LOOP
 507+ 8264 FC FF                        dw      Spaces_Loop - $
 508+ 8266              Spaces_Leave:
 509+ 8266 A5 69                        dw      EXIT                    // ;
 510+ 8268
 511+ 8268              //  ______________________________________________________________________
 512+ 8268              //
 513+ 8268              // <#           --
 514+ 8268                              Colon_Def BEGIN_DASH, "<#", is_normal
 514+ 8268             >                New_Def  BEGIN_DASH, "<#", Enter_Ptr, is_normal ; ok
 514+ 8268             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 514+ 8268             >
 514+ 8268             >                // dummy db directives used to calculate length of namec
 514+ 8268 3C 23       >                db      "<#"
 514+ 826A             >len_NFA         defl    $ - temp_NFA
 514+ 826A             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 514+ 8268             >
 514+ 8268 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 514+ 8269 3C 23       >                db      "<#"               // name string in 7-bit ascii, but
 514+ 826B             >                org     $-1                 // alter last byte of Name just above to set
 514+ 826A A3          >                db      {b $} | END_BIT     // msb as name end
 514+ 826B             >
 514+ 826B 4B 82       >                dw      last_NFA            // Link to previous definition Name
 514+ 826D             >BEGIN_DASH:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 514+ 826D 88 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 514+ 826F             >                else
 514+ 826F ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 514+ 826F             >                endif           ; ok        // for other definitions it "points" the correct handler
 514+ 826F             >                // Use of "; ok" to suppress "warning[fwdref]"
 514+ 826F             >
 514+ 826F             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 515+ 826F 17 74 86 6E                  dw      PAD, HLD, STORE
 515+ 8273 AA 6B
 516+ 8275 A5 69                        dw      EXIT
 517+ 8277
 518+ 8277              //  ______________________________________________________________________
 519+ 8277              //
 520+ 8277              // #>           --
 521+ 8277                              Colon_Def DASH_END, "#>", is_normal
 521+ 8277             >                New_Def  DASH_END, "#>", Enter_Ptr, is_normal ; ok
 521+ 8277             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 521+ 8277             >
 521+ 8277             >                // dummy db directives used to calculate length of namec
 521+ 8277 23 3E       >                db      "#>"
 521+ 8279             >len_NFA         defl    $ - temp_NFA
 521+ 8279             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 521+ 8277             >
 521+ 8277 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 521+ 8278 23 3E       >                db      "#>"               // name string in 7-bit ascii, but
 521+ 827A             >                org     $-1                 // alter last byte of Name just above to set
 521+ 8279 BE          >                db      {b $} | END_BIT     // msb as name end
 521+ 827A             >
 521+ 827A 68 82       >                dw      last_NFA            // Link to previous definition Name
 521+ 827C             >DASH_END:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 521+ 827C 88 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 521+ 827E             >                else
 521+ 827E ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 521+ 827E             >                endif           ; ok        // for other definitions it "points" the correct handler
 521+ 827E             >                // Use of "; ok" to suppress "warning[fwdref]"
 521+ 827E             >
 521+ 827E             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 522+ 827E 4B 6B                        dw      TWO_DROP
 523+ 8280 86 6E 9D 6B                  dw      HLD, FETCH, PAD, OVER, SUBTRACT
 523+ 8284 17 74 C5 6A
 523+ 8288 37 6F
 524+ 828A A5 69                        dw      EXIT
 525+ 828C
 526+ 828C              //  ______________________________________________________________________
 527+ 828C              //
 528+ 828C              // sign         n d -- d
 529+ 828C                              Colon_Def SIGN, "SIGN", is_normal
 529+ 828C             >                New_Def  SIGN, "SIGN", Enter_Ptr, is_normal ; ok
 529+ 828C             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 529+ 828C             >
 529+ 828C             >                // dummy db directives used to calculate length of namec
 529+ 828C 53 49 47 4E >                db      "SIGN"
 529+ 8290             >len_NFA         defl    $ - temp_NFA
 529+ 8290             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 529+ 828C             >
 529+ 828C 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 529+ 828D 53 49 47 4E >                db      "SIGN"               // name string in 7-bit ascii, but
 529+ 8291             >                org     $-1                 // alter last byte of Name just above to set
 529+ 8290 CE          >                db      {b $} | END_BIT     // msb as name end
 529+ 8291             >
 529+ 8291 77 82       >                dw      last_NFA            // Link to previous definition Name
 529+ 8293             >SIGN:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 529+ 8293 88 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 529+ 8295             >                else
 529+ 8295 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 529+ 8295             >                endif           ; ok        // for other definitions it "points" the correct handler
 529+ 8295             >                // Use of "; ok" to suppress "warning[fwdref]"
 529+ 8295             >
 529+ 8295             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 530+ 8295 17 6B 02 6A                  dw      ROT, ZLESS
 531+ 8299 2C 64                        dw      ZBRANCH
 532+ 829B 08 00                        dw      Sign_Endif - $
 533+ 829D A9 63 2D 00                  dw          LIT, 45, HOLD
 533+ 82A1 01 74
 534+ 82A3              Sign_Endif:
 535+ 82A3 A5 69                        dw      EXIT
 536+ 82A5
 537+ 82A5              //  ______________________________________________________________________
 538+ 82A5              //
 539+ 82A5              // #           d1 -- d2
 540+ 82A5                              Colon_Def DASH, "#", is_normal
 540+ 82A5             >                New_Def  DASH, "#", Enter_Ptr, is_normal ; ok
 540+ 82A5             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 540+ 82A5             >
 540+ 82A5             >                // dummy db directives used to calculate length of namec
 540+ 82A5 23          >                db      "#"
 540+ 82A6             >len_NFA         defl    $ - temp_NFA
 540+ 82A6             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 540+ 82A5             >
 540+ 82A5 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 540+ 82A6 23          >                db      "#"               // name string in 7-bit ascii, but
 540+ 82A7             >                org     $-1                 // alter last byte of Name just above to set
 540+ 82A6 A3          >                db      {b $} | END_BIT     // msb as name end
 540+ 82A7             >
 540+ 82A7 8C 82       >                dw      last_NFA            // Link to previous definition Name
 540+ 82A9             >DASH:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 540+ 82A9 88 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 540+ 82AB             >                else
 540+ 82AB ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 540+ 82AB             >                endif           ; ok        // for other definitions it "points" the correct handler
 540+ 82AB             >                // Use of "; ok" to suppress "warning[fwdref]"
 540+ 82AB             >
 540+ 82AB             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 541+ 82AB 5A 6E 9D 6B                  dw      BASE, FETCH
 542+ 82AF
 543+ 82AF B8 69                        dw      TO_R                    // >r           ( ud1 )
 544+ 82B1 05 6D E0 69                  dw      ZERO, R_OP, UMDIVMOD    // 0 r um/mod   ( l rem1 h/r )
 544+ 82B5 FC 68
 545+ 82B7 CC 69 FD 6A                  dw      R_TO, SWAP, TO_R        // r> swap >r   ( l rem )
 545+ 82BB B8 69
 546+ 82BD FC 68                        dw      UMDIVMOD                // um/mod       ( rem2 l/r )
 547+ 82BF CC 69                        dw      R_TO                    // r>           ( rem2 l/r h/r )
 548+ 82C1
 549+ 82C1 17 6B                        dw      ROT
 550+ 82C3 A9 63 09 00                  dw      LIT, 9, OVER, LESS
 550+ 82C7 C5 6A 66 6F
 551+ 82CB 2C 64                        dw      ZBRANCH
 552+ 82CD 08 00                        dw      Dash_Endif - $
 553+ 82CF A9 63 07 00                  dw          LIT, 7, PLUS
 553+ 82D3 2A 6A
 554+ 82D5              Dash_Endif:
 555+ 82D5
 556+ 82D5 A9 63 30 00                  dw      LIT, 48, PLUS, HOLD
 556+ 82D9 2A 6A 01 74
 557+ 82DD A5 69                        dw      EXIT
 558+ 82DF
 559+ 82DF              //  ______________________________________________________________________
 560+ 82DF              //
 561+ 82DF              // #s           d1 -- d2
 562+ 82DF                              Colon_Def DASHES, "#S", is_normal
 562+ 82DF             >                New_Def  DASHES, "#S", Enter_Ptr, is_normal ; ok
 562+ 82DF             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 562+ 82DF             >
 562+ 82DF             >                // dummy db directives used to calculate length of namec
 562+ 82DF 23 53       >                db      "#S"
 562+ 82E1             >len_NFA         defl    $ - temp_NFA
 562+ 82E1             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 562+ 82DF             >
 562+ 82DF 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 562+ 82E0 23 53       >                db      "#S"               // name string in 7-bit ascii, but
 562+ 82E2             >                org     $-1                 // alter last byte of Name just above to set
 562+ 82E1 D3          >                db      {b $} | END_BIT     // msb as name end
 562+ 82E2             >
 562+ 82E2 A5 82       >                dw      last_NFA            // Link to previous definition Name
 562+ 82E4             >DASHES:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 562+ 82E4 88 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 562+ 82E6             >                else
 562+ 82E6 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 562+ 82E6             >                endif           ; ok        // for other definitions it "points" the correct handler
 562+ 82E6             >                // Use of "; ok" to suppress "warning[fwdref]"
 562+ 82E6             >
 562+ 82E6             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 563+ 82E6              Dashes_Begin:
 564+ 82E6 A9 82 6B 6B                  dw      DASH, TWO_DUP
 565+ 82EA 47 69 E7 69                  dw          OR_OP, ZEQUAL
 566+ 82EE 2C 64                        dw      ZBRANCH
 567+ 82F0 F6 FF                        dw      Dashes_Begin - $
 568+ 82F2 A5 69                        dw      EXIT
 569+ 82F4
 570+ 82F4              //  ______________________________________________________________________
 571+ 82F4              //
 572+ 82F4              // d.r          d n --
 573+ 82F4                              Colon_Def D_DOT_R, "D.R", is_normal
 573+ 82F4             >                New_Def  D_DOT_R, "D.R", Enter_Ptr, is_normal ; ok
 573+ 82F4             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 573+ 82F4             >
 573+ 82F4             >                // dummy db directives used to calculate length of namec
 573+ 82F4 44 2E 52    >                db      "D.R"
 573+ 82F7             >len_NFA         defl    $ - temp_NFA
 573+ 82F7             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 573+ 82F4             >
 573+ 82F4 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 573+ 82F5 44 2E 52    >                db      "D.R"               // name string in 7-bit ascii, but
 573+ 82F8             >                org     $-1                 // alter last byte of Name just above to set
 573+ 82F7 D2          >                db      {b $} | END_BIT     // msb as name end
 573+ 82F8             >
 573+ 82F8 DF 82       >                dw      last_NFA            // Link to previous definition Name
 573+ 82FA             >D_DOT_R:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 573+ 82FA 88 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 573+ 82FC             >                else
 573+ 82FC ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 573+ 82FC             >                endif           ; ok        // for other definitions it "points" the correct handler
 573+ 82FC             >                // Use of "; ok" to suppress "warning[fwdref]"
 573+ 82FC             >
 573+ 82FC             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 574+ 82FC B8 69                        dw      TO_R
 575+ 82FE ED 6A B9 79                  dw      TUCK, DABS
 576+ 8302 6D 82 E4 82                  dw      BEGIN_DASH, DASHES, SIGN, DASH_END
 576+ 8306 93 82 7C 82
 577+ 830A CC 69                        dw      R_TO
 578+ 830C C5 6A 37 6F                  dw      OVER, SUBTRACT, SPACES, TYPE
 578+ 8310 54 82 65 72
 579+ 8314 A5 69                        dw      EXIT
 580+ 8316
 581+ 8316              //  ______________________________________________________________________
 582+ 8316              //
 583+ 8316              // .r           n1 n2 --
 584+ 8316                              Colon_Def DOT_R, ".R", is_normal
 584+ 8316             >                New_Def  DOT_R, ".R", Enter_Ptr, is_normal ; ok
 584+ 8316             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 584+ 8316             >
 584+ 8316             >                // dummy db directives used to calculate length of namec
 584+ 8316 2E 52       >                db      ".R"
 584+ 8318             >len_NFA         defl    $ - temp_NFA
 584+ 8318             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 584+ 8316             >
 584+ 8316 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 584+ 8317 2E 52       >                db      ".R"               // name string in 7-bit ascii, but
 584+ 8319             >                org     $-1                 // alter last byte of Name just above to set
 584+ 8318 D2          >                db      {b $} | END_BIT     // msb as name end
 584+ 8319             >
 584+ 8319 F4 82       >                dw      last_NFA            // Link to previous definition Name
 584+ 831B             >DOT_R:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 584+ 831B 88 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 584+ 831D             >                else
 584+ 831D ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 584+ 831D             >                endif           ; ok        // for other definitions it "points" the correct handler
 584+ 831D             >                // Use of "; ok" to suppress "warning[fwdref]"
 584+ 831D             >
 584+ 831D             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 585+ 831D B8 69                        dw      TO_R
 586+ 831F 23 6F CC 69                  dw      S_TO_D, R_TO
 587+ 8323 FA 82                        dw      D_DOT_R
 588+ 8325 A5 69                        dw      EXIT
 589+ 8327
 590+ 8327              //  ______________________________________________________________________
 591+ 8327              //
 592+ 8327              // d.           d --
 593+ 8327                              Colon_Def D_DOT, "D.", is_normal
 593+ 8327             >                New_Def  D_DOT, "D.", Enter_Ptr, is_normal ; ok
 593+ 8327             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 593+ 8327             >
 593+ 8327             >                // dummy db directives used to calculate length of namec
 593+ 8327 44 2E       >                db      "D."
 593+ 8329             >len_NFA         defl    $ - temp_NFA
 593+ 8329             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 593+ 8327             >
 593+ 8327 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 593+ 8328 44 2E       >                db      "D."               // name string in 7-bit ascii, but
 593+ 832A             >                org     $-1                 // alter last byte of Name just above to set
 593+ 8329 AE          >                db      {b $} | END_BIT     // msb as name end
 593+ 832A             >
 593+ 832A 16 83       >                dw      last_NFA            // Link to previous definition Name
 593+ 832C             >D_DOT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 593+ 832C 88 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 593+ 832E             >                else
 593+ 832E ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 593+ 832E             >                endif           ; ok        // for other definitions it "points" the correct handler
 593+ 832E             >                // Use of "; ok" to suppress "warning[fwdref]"
 593+ 832E             >
 593+ 832E             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 594+ 832E 05 6D FA 82                  dw      ZERO, D_DOT_R, SPACE
 594+ 8332 EF 6F
 595+ 8334 A5 69                        dw      EXIT
 596+ 8336
 597+ 8336              //  ______________________________________________________________________
 598+ 8336              //
 599+ 8336              // .            n --
 600+ 8336                              Colon_Def DOT, ".", is_normal
 600+ 8336             >                New_Def  DOT, ".", Enter_Ptr, is_normal ; ok
 600+ 8336             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 600+ 8336             >
 600+ 8336             >                // dummy db directives used to calculate length of namec
 600+ 8336 2E          >                db      "."
 600+ 8337             >len_NFA         defl    $ - temp_NFA
 600+ 8337             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 600+ 8336             >
 600+ 8336 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 600+ 8337 2E          >                db      "."               // name string in 7-bit ascii, but
 600+ 8338             >                org     $-1                 // alter last byte of Name just above to set
 600+ 8337 AE          >                db      {b $} | END_BIT     // msb as name end
 600+ 8338             >
 600+ 8338 27 83       >                dw      last_NFA            // Link to previous definition Name
 600+ 833A             >DOT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 600+ 833A 88 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 600+ 833C             >                else
 600+ 833C ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 600+ 833C             >                endif           ; ok        // for other definitions it "points" the correct handler
 600+ 833C             >                // Use of "; ok" to suppress "warning[fwdref]"
 600+ 833C             >
 600+ 833C             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 601+ 833C 23 6F 2C 83                  dw      S_TO_D, D_DOT
 602+ 8340 A5 69                        dw      EXIT
 603+ 8342
 604+ 8342              //  ______________________________________________________________________
 605+ 8342              //
 606+ 8342              // ?            n --
 607+ 8342                              Colon_Def QUESTION, "?", is_normal
 607+ 8342             >                New_Def  QUESTION, "?", Enter_Ptr, is_normal ; ok
 607+ 8342             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 607+ 8342             >
 607+ 8342             >                // dummy db directives used to calculate length of namec
 607+ 8342 3F          >                db      "?"
 607+ 8343             >len_NFA         defl    $ - temp_NFA
 607+ 8343             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 607+ 8342             >
 607+ 8342 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 607+ 8343 3F          >                db      "?"               // name string in 7-bit ascii, but
 607+ 8344             >                org     $-1                 // alter last byte of Name just above to set
 607+ 8343 BF          >                db      {b $} | END_BIT     // msb as name end
 607+ 8344             >
 607+ 8344 36 83       >                dw      last_NFA            // Link to previous definition Name
 607+ 8346             >QUESTION:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 607+ 8346 88 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 607+ 8348             >                else
 607+ 8348 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 607+ 8348             >                endif           ; ok        // for other definitions it "points" the correct handler
 607+ 8348             >                // Use of "; ok" to suppress "warning[fwdref]"
 607+ 8348             >
 607+ 8348             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 608+ 8348 9D 6B 3A 83                  dw      FETCH, DOT
 609+ 834C A5 69                        dw      EXIT
 610+ 834E
 611+ 834E              //  ______________________________________________________________________
 612+ 834E              //
 613+ 834E              // u.           u --
 614+ 834E                              Colon_Def U_DOT, "U.", is_normal
 614+ 834E             >                New_Def  U_DOT, "U.", Enter_Ptr, is_normal ; ok
 614+ 834E             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 614+ 834E             >
 614+ 834E             >                // dummy db directives used to calculate length of namec
 614+ 834E 55 2E       >                db      "U."
 614+ 8350             >len_NFA         defl    $ - temp_NFA
 614+ 8350             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 614+ 834E             >
 614+ 834E 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 614+ 834F 55 2E       >                db      "U."               // name string in 7-bit ascii, but
 614+ 8351             >                org     $-1                 // alter last byte of Name just above to set
 614+ 8350 AE          >                db      {b $} | END_BIT     // msb as name end
 614+ 8351             >
 614+ 8351 42 83       >                dw      last_NFA            // Link to previous definition Name
 614+ 8353             >U_DOT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 614+ 8353 88 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 614+ 8355             >                else
 614+ 8355 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 614+ 8355             >                endif           ; ok        // for other definitions it "points" the correct handler
 614+ 8355             >                // Use of "; ok" to suppress "warning[fwdref]"
 614+ 8355             >
 614+ 8355             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 615+ 8355 05 6D 2C 83                  dw      ZERO, D_DOT
 616+ 8359 A5 69                        dw      EXIT
 617+ 835B
 618+ 835B              //  ______________________________________________________________________
 619+ 835B              //
 620+ 835B              // words        --
 621+ 835B                              Colon_Def WORDS, "WORDS", is_normal
 621+ 835B             >                New_Def  WORDS, "WORDS", Enter_Ptr, is_normal ; ok
 621+ 835B             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 621+ 835B             >
 621+ 835B             >                // dummy db directives used to calculate length of namec
 621+ 835B 57 4F 52 44 >                db      "WORDS"
 621+ 835F 53          >
 621+ 8360             >len_NFA         defl    $ - temp_NFA
 621+ 8360             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 621+ 835B             >
 621+ 835B 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 621+ 835C 57 4F 52 44 >                db      "WORDS"               // name string in 7-bit ascii, but
 621+ 8360 53          >
 621+ 8361             >                org     $-1                 // alter last byte of Name just above to set
 621+ 8360 D3          >                db      {b $} | END_BIT     // msb as name end
 621+ 8361             >
 621+ 8361 4E 83       >                dw      last_NFA            // Link to previous definition Name
 621+ 8363             >WORDS:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 621+ 8363 88 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 621+ 8365             >                else
 621+ 8365 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 621+ 8365             >                endif           ; ok        // for other definitions it "points" the correct handler
 621+ 8365             >                // Use of "; ok" to suppress "warning[fwdref]"
 621+ 8365             >
 621+ 8365             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 622+ 8365 A9 63 80 00                  dw      LIT, 128, OUT, STORE
 622+ 8369 16 6E AA 6B
 623+ 836D 38 6E 9D 6B                  dw      CONTEXT, FETCH, FETCH
 623+ 8371 9D 6B
 624+ 8373              Words_Begin:
 625+ 8373 0A 6B B8 6B                  dw          DUP, CFETCH, LIT, $1F, AND_OP
 625+ 8377 A9 63 1F 00
 625+ 837B 35 69
 626+ 837D 16 6E 9D 6B                  dw          OUT, FETCH, PLUS
 626+ 8381 2A 6A
 627+ 8383 39 6D 66 6F                  dw          CL, LESS, ZEQUAL
 627+ 8387 E7 69
 628+ 8389 2C 64                        dw          ZBRANCH
 629+ 838B 0A 00                        dw          Words_Endif - $
 630+ 838D 2A 66 05 6D                  dw              CR, ZERO, OUT, STORE
 630+ 8391 16 6E AA 6B
 631+ 8395              Words_Endif:
 632+ 8395 0A 6B 4D 76                  dw          DUP, ID_DOT
 633+ 8399 63 70 35 70                  dw          PFA, LFA, FETCH
 633+ 839D 9D 6B
 634+ 839F 0A 6B E7 69                  dw          DUP, ZEQUAL
 635+ 83A3 3F 67 47 69                  dw          QTERMINAL, OR_OP
 636+ 83A7 2C 64                        dw      ZBRANCH
 637+ 83A9 CA FF                        dw      Words_Begin - $
 638+ 83AB D5 6A                        dw      DROP
 639+ 83AD A5 69                        dw      EXIT
 640+ 83AF
 641+ 83AF              //  ______________________________________________________________________
 642+ 83AF              //
 643+ 83AF              // list         n --
 644+ 83AF                              Colon_Def LIST, "LIST", is_normal
 644+ 83AF             >                New_Def  LIST, "LIST", Enter_Ptr, is_normal ; ok
 644+ 83AF             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 644+ 83AF             >
 644+ 83AF             >                // dummy db directives used to calculate length of namec
 644+ 83AF 4C 49 53 54 >                db      "LIST"
 644+ 83B3             >len_NFA         defl    $ - temp_NFA
 644+ 83B3             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 644+ 83AF             >
 644+ 83AF 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 644+ 83B0 4C 49 53 54 >                db      "LIST"               // name string in 7-bit ascii, but
 644+ 83B4             >                org     $-1                 // alter last byte of Name just above to set
 644+ 83B3 D4          >                db      {b $} | END_BIT     // msb as name end
 644+ 83B4             >
 644+ 83B4 5B 83       >                dw      last_NFA            // Link to previous definition Name
 644+ 83B6             >LIST:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 644+ 83B6 88 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 644+ 83B8             >                else
 644+ 83B8 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 644+ 83B8             >                endif           ; ok        // for other definitions it "points" the correct handler
 644+ 83B8             >                // Use of "; ok" to suppress "warning[fwdref]"
 644+ 83B8             >
 644+ 83B8             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 645+ 83B8 C8 71 2A 66                  dw      DECIMAL, CR
 646+ 83BC 0A 6B 1F 6E                  dw      DUP, SCR, STORE
 646+ 83C0 AA 6B
 647+ 83C2 79 74                        dw      C_DOT_QUOTE
 648+ 83C4 05 53 63 72                  db      5, "Scr# "
 648+ 83C8 23 20
 649+ 83CA 3A 83                        dw      DOT
 650+ 83CC 5D 6D 05 6D                  dw      LSCR, ZERO, C_DO
 650+ 83D0 86 64
 651+ 83D2              List_Loop:
 652+ 83D2 2A 66                        dw          CR
 653+ 83D4 90 64 1D 6D                  dw          I, THREE
 654+ 83D8 1B 83 EF 6F                  dw          DOT_R, SPACE
 655+ 83DC 90 64 1F 6E                  dw          I, SCR, FETCH, DOT_LINE
 655+ 83E0 9D 6B E8 7A
 656+ 83E4 3F 67                        dw          QTERMINAL
 657+ 83E6 2C 64                        dw          ZBRANCH
 658+ 83E8 06 00                        dw          List_Endif - $
 659+ 83EA 41 64                        dw              C_LEAVE
 660+ 83EC 06 00                        dw              List_Leave - $
 661+ 83EE              List_Endif:
 662+ 83EE 04 64                        dw      C_LOOP
 663+ 83F0 E2 FF                        dw      List_Loop - $
 664+ 83F2              List_Leave:
 665+ 83F2 2A 66                        dw      CR
 666+ 83F4 A5 69                        dw      EXIT
 667+ 83F6
 668+ 83F6              //  ______________________________________________________________________
 669+ 83F6              //
 670+ 83F6              // index        n1 n2 --
 671+ 83F6                              Colon_Def INDEX, "INDEX", is_normal
 671+ 83F6             >                New_Def  INDEX, "INDEX", Enter_Ptr, is_normal ; ok
 671+ 83F6             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 671+ 83F6             >
 671+ 83F6             >                // dummy db directives used to calculate length of namec
 671+ 83F6 49 4E 44 45 >                db      "INDEX"
 671+ 83FA 58          >
 671+ 83FB             >len_NFA         defl    $ - temp_NFA
 671+ 83FB             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 671+ 83F6             >
 671+ 83F6 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 671+ 83F7 49 4E 44 45 >                db      "INDEX"               // name string in 7-bit ascii, but
 671+ 83FB 58          >
 671+ 83FC             >                org     $-1                 // alter last byte of Name just above to set
 671+ 83FB D8          >                db      {b $} | END_BIT     // msb as name end
 671+ 83FC             >
 671+ 83FC AF 83       >                dw      last_NFA            // Link to previous definition Name
 671+ 83FE             >INDEX:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 671+ 83FE 88 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 671+ 8400             >                else
 671+ 8400 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 671+ 8400             >                endif           ; ok        // for other definitions it "points" the correct handler
 671+ 8400             >                // Use of "; ok" to suppress "warning[fwdref]"
 671+ 8400             >
 671+ 8400             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 672+ 8400 4B 6A FD 6A                  dw      ONE_PLUS, SWAP, C_DO
 672+ 8404 86 64
 673+ 8406              Index_Loop:
 674+ 8406 2A 66 90 64                  dw          CR, I, THREE
 674+ 840A 1D 6D
 675+ 840C 1B 83 EF 6F                  dw          DOT_R, SPACE
 676+ 8410 05 6D 90 64                  dw          ZERO, I, DOT_LINE
 676+ 8414 E8 7A
 677+ 8416 3F 67                        dw          QTERMINAL
 678+ 8418 2C 64                        dw          ZBRANCH
 679+ 841A 06 00                        dw          Index_Endif - $
 680+ 841C 41 64                        dw              C_LEAVE
 681+ 841E 06 00                        dw              Index_Leave - $
 682+ 8420              Index_Endif:
 683+ 8420 04 64                        dw      C_LOOP
 684+ 8422 E4 FF                        dw      Index_Loop - $
 685+ 8424              Index_Leave:
 686+ 8424 2A 66                        dw      CR
 687+ 8426 A5 69                        dw      EXIT
 688+ 8428
 689+ 8428              //  ______________________________________________________________________
 690+ 8428              //
 691+ 8428              // cls          --
 692+ 8428                              Colon_Def CLS, "CLS", is_normal
 692+ 8428             >                New_Def  CLS, "CLS", Enter_Ptr, is_normal ; ok
 692+ 8428             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 692+ 8428             >
 692+ 8428             >                // dummy db directives used to calculate length of namec
 692+ 8428 43 4C 53    >                db      "CLS"
 692+ 842B             >len_NFA         defl    $ - temp_NFA
 692+ 842B             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 692+ 8428             >
 692+ 8428 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 692+ 8429 43 4C 53    >                db      "CLS"               // name string in 7-bit ascii, but
 692+ 842C             >                org     $-1                 // alter last byte of Name just above to set
 692+ 842B D3          >                db      {b $} | END_BIT     // msb as name end
 692+ 842C             >
 692+ 842C F6 83       >                dw      last_NFA            // Link to previous definition Name
 692+ 842E             >CLS:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 692+ 842E 88 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 692+ 8430             >                else
 692+ 8430 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 692+ 8430             >                endif           ; ok        // for other definitions it "points" the correct handler
 692+ 8430             >                // Use of "; ok" to suppress "warning[fwdref]"
 692+ 8430             >
 692+ 8430             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 693+ 8430 A9 63 0E 00                  dw      LIT, $0E, EMITC
 693+ 8434 13 66
 694+ 8436 A5 69                        dw      EXIT
 695+ 8438
 696+ 8438              //  ______________________________________________________________________
 697+ 8438              //
 698+ 8438              // splash       --
 699+ 8438                              Colon_Def SPLASH, "SPLASH", is_normal
 699+ 8438             >                New_Def  SPLASH, "SPLASH", Enter_Ptr, is_normal ; ok
 699+ 8438             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 699+ 8438             >
 699+ 8438             >                // dummy db directives used to calculate length of namec
 699+ 8438 53 50 4C 41 >                db      "SPLASH"
 699+ 843C 53 48       >
 699+ 843E             >len_NFA         defl    $ - temp_NFA
 699+ 843E             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 699+ 8438             >
 699+ 8438 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 699+ 8439 53 50 4C 41 >                db      "SPLASH"               // name string in 7-bit ascii, but
 699+ 843D 53 48       >
 699+ 843F             >                org     $-1                 // alter last byte of Name just above to set
 699+ 843E C8          >                db      {b $} | END_BIT     // msb as name end
 699+ 843F             >
 699+ 843F 28 84       >                dw      last_NFA            // Link to previous definition Name
 699+ 8441             >SPLASH:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 699+ 8441 88 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 699+ 8443             >                else
 699+ 8443 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 699+ 8443             >                endif           ; ok        // for other definitions it "points" the correct handler
 699+ 8443             >                // Use of "; ok" to suppress "warning[fwdref]"
 699+ 8443             >
 699+ 8443             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 700+ 8443 2E 84                        dw      CLS
 701+ 8445 79 74                        dw      C_DOT_QUOTE
 702+ 8447 5A                           db      90  // length of the following string CR included.
 703+ 8448 76 2D 46 6F                  db      "v-Forth 1.52 NextZXOS version", 13
 703+ 844C 72 74 68 20
 703+ 8450 31 2E 35 32
 703+ 8454 20 4E 65 78
 703+ 8458 74 5A 58 4F
 703+ 845C 53 20 76 65
 703+ 8460 72 73 69 6F
 703+ 8464 6E 0D
 704+ 8466 49 6E 64 69                  db      "Indirect Threaded - build 20220528", 13
 704+ 846A 72 65 63 74
 704+ 846E 20 54 68 72
 704+ 8472 65 61 64 65
 704+ 8476 64 20 2D 20
 704+ 847A 62 75 69 6C
 704+ 847E 64 20 32 30
 704+ 8482 32 32 30 35
 704+ 8486 32 38 0D
 705+ 8489 31 39 39 30                  db      "1990-2022 Matteo Vitturi", 13
 705+ 848D 2D 32 30 32
 705+ 8491 32 20 4D 61
 705+ 8495 74 74 65 6F
 705+ 8499 20 56 69 74
 705+ 849D 74 75 72 69
 705+ 84A1 0D
 706+ 84A2 A5 69                        dw      EXIT
 707+ 84A4
 708+ 84A4              //  ______________________________________________________________________
 709+ 84A4              //
 710+ 84A4              // video        --
 711+ 84A4                              Colon_Def VIDEO, "VIDEO", is_normal
 711+ 84A4             >                New_Def  VIDEO, "VIDEO", Enter_Ptr, is_normal ; ok
 711+ 84A4             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 711+ 84A4             >
 711+ 84A4             >                // dummy db directives used to calculate length of namec
 711+ 84A4 56 49 44 45 >                db      "VIDEO"
 711+ 84A8 4F          >
 711+ 84A9             >len_NFA         defl    $ - temp_NFA
 711+ 84A9             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 711+ 84A4             >
 711+ 84A4 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 711+ 84A5 56 49 44 45 >                db      "VIDEO"               // name string in 7-bit ascii, but
 711+ 84A9 4F          >
 711+ 84AA             >                org     $-1                 // alter last byte of Name just above to set
 711+ 84A9 CF          >                db      {b $} | END_BIT     // msb as name end
 711+ 84AA             >
 711+ 84AA 38 84       >                dw      last_NFA            // Link to previous definition Name
 711+ 84AC             >VIDEO:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 711+ 84AC 88 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 711+ 84AE             >                else
 711+ 84AE ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 711+ 84AE             >                endif           ; ok        // for other definitions it "points" the correct handler
 711+ 84AE             >                // Use of "; ok" to suppress "warning[fwdref]"
 711+ 84AE             >
 711+ 84AE             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 712+ 84AE 15 6D 0A 6B                  dw      TWO, DUP, DEVICE, STORE
 712+ 84B2 30 7B AA 6B
 713+ 84B6 80 67                        dw      SELECT
 714+ 84B8 A5 69                        dw      EXIT
 715+ 84BA
 716+ 84BA              //  ______________________________________________________________________
 717+ 84BA              //
 718+ 84BA              // accept-      a n1 -- n2
 719+ 84BA                              Colon_Def ACCEPT_N, "ACCEPT-", is_normal
 719+ 84BA             >                New_Def  ACCEPT_N, "ACCEPT-", Enter_Ptr, is_normal ; ok
 719+ 84BA             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 719+ 84BA             >
 719+ 84BA             >                // dummy db directives used to calculate length of namec
 719+ 84BA 41 43 43 45 >                db      "ACCEPT-"
 719+ 84BE 50 54 2D    >
 719+ 84C1             >len_NFA         defl    $ - temp_NFA
 719+ 84C1             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 719+ 84BA             >
 719+ 84BA 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 719+ 84BB 41 43 43 45 >                db      "ACCEPT-"               // name string in 7-bit ascii, but
 719+ 84BF 50 54 2D    >
 719+ 84C2             >                org     $-1                 // alter last byte of Name just above to set
 719+ 84C1 AD          >                db      {b $} | END_BIT     // msb as name end
 719+ 84C2             >
 719+ 84C2 A4 84       >                dw      last_NFA            // Link to previous definition Name
 719+ 84C4             >ACCEPT_N:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 719+ 84C4 88 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 719+ 84C6             >                else
 719+ 84C6 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 719+ 84C6             >                endif           ; ok        // for other definitions it "points" the correct handler
 719+ 84C6             >                // Use of "; ok" to suppress "warning[fwdref]"
 719+ 84C6             >
 719+ 84C6             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 720+ 84C6 B8 69                        dw      TO_R
 721+ 84C8 05 6D                        dw      ZERO
 722+ 84CA FD 6A                        dw      SWAP
 723+ 84CC 0A 6B                        dw      DUP
 724+ 84CE CC 69                        dw      R_TO
 725+ 84D0 2A 6A                        dw      PLUS
 726+ 84D2 FD 6A                        dw      SWAP
 727+ 84D4 86 64                        dw      C_DO
 728+ 84D6              AcceptN_Loop:
 729+ 84D6 6A 7B                        dw          MMU7_FETCH
 730+ 84D8 5B 67                        dw          INKEY
 731+ 84DA FD 6A 7C 7B                  dw          SWAP, MMU7_STORE
 732+ 84DE 0A 6B E7 69                  dw          DUP, ZEQUAL
 733+ 84E2 2C 64                        dw          ZBRANCH
 734+ 84E4 06 00                        dw          AcceptN_Endif_1 - $
 735+ 84E6 AC 84 8A 78                  dw              VIDEO, QUIT
 736+ 84EA              AcceptN_Endif_1:
 737+ 84EA 0A 6B A9 63                  dw          DUP, LIT, 13, EQUALS
 737+ 84EE 0D 00 45 6F
 738+ 84F2 2C 64                        dw          ZBRANCH
 739+ 84F4 06 00                        dw          AcceptN_Endif_2 - $
 740+ 84F6 D5 6A 05 6D                  dw              DROP, ZERO
 741+ 84FA              AcceptN_Endif_2:
 742+ 84FA 0A 6B A9 63                  dw          DUP, LIT, 10, EQUALS
 742+ 84FE 0A 00 45 6F
 743+ 8502 2C 64                        dw          ZBRANCH
 744+ 8504 06 00                        dw          AcceptN_Endif_3 - $
 745+ 8506 D5 6A 05 6D                  dw              DROP, ZERO
 746+ 850A              AcceptN_Endif_3:
 747+ 850A 90 64 C6 6B                  dw          I, CSTORE, ONE_PLUS
 747+ 850E 4B 6A
 748+ 8510
 749+ 8510 90 64 B8 6B                  dw          I, CFETCH, ZEQUAL   //      i 0= if
 749+ 8514 E7 69
 750+ 8516 2C 64                        dw          ZBRANCH
 751+ 8518 06 00                        dw              AcceptN_Endif_4 - $
 752+ 851A 41 64                        dw                  C_LEAVE     //              leave
 753+ 851C 06 00                        dw                  AcceptN_Leave - $
 754+ 851E              AcceptN_Endif_4:                                 //      endif
 755+ 851E
 756+ 851E 04 64                        dw      C_LOOP
 757+ 8520 B6 FF                        dw      AcceptN_Loop -$
 758+ 8522              AcceptN_Leave:
 759+ 8522 A5 69                        dw      EXIT
 760+ 8524
 761+ 8524              //  ______________________________________________________________________
 762+ 8524              //
 763+ 8524              // load-        n --
 764+ 8524              // Provided that a stream n is OPEN# via the standart BASIC
 765+ 8524              // it accepts text from stream #n to the normal INTERPRET
 766+ 8524              // up to now, text-file must end with QUIT
 767+ 8524                              Colon_Def LOAD_N, "LOAD-", is_normal
 767+ 8524             >                New_Def  LOAD_N, "LOAD-", Enter_Ptr, is_normal ; ok
 767+ 8524             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 767+ 8524             >
 767+ 8524             >                // dummy db directives used to calculate length of namec
 767+ 8524 4C 4F 41 44 >                db      "LOAD-"
 767+ 8528 2D          >
 767+ 8529             >len_NFA         defl    $ - temp_NFA
 767+ 8529             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 767+ 8524             >
 767+ 8524 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 767+ 8525 4C 4F 41 44 >                db      "LOAD-"               // name string in 7-bit ascii, but
 767+ 8529 2D          >
 767+ 852A             >                org     $-1                 // alter last byte of Name just above to set
 767+ 8529 AD          >                db      {b $} | END_BIT     // msb as name end
 767+ 852A             >
 767+ 852A BA 84       >                dw      last_NFA            // Link to previous definition Name
 767+ 852C             >LOAD_N:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 767+ 852C 88 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 767+ 852E             >                else
 767+ 852E ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 767+ 852E             >                endif           ; ok        // for other definitions it "points" the correct handler
 767+ 852E             >                // Use of "; ok" to suppress "warning[fwdref]"
 767+ 852E             >
 767+ 852E             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 768+ 852E BB 6E AA 6B                  dw      SOURCE_ID, STORE
 769+ 8532              Load_N_Begin:
 770+ 8532 98 6D 9D 6B                  dw          TIB, FETCH
 771+ 8536 0A 6B A9 63                  dw          DUP, LIT, 80
 771+ 853A 50 00
 772+ 853C 6B 6B F2 73                  dw          TWO_DUP, BLANKS
 773+ 8540 BB 6E 9D 6B                  dw          SOURCE_ID, FETCH
 774+ 8544 AA 79 0A 6B                  dw          ABS_OP, DUP, DEVICE, STORE
 774+ 8548 30 7B AA 6B
 775+ 854C 80 67                        dw          SELECT
 776+ 854E C4 84                        dw          ACCEPT_N
 777+ 8550 AC 84                        dw          VIDEO
 778+ 8552 4B 6B                        dw          TWO_DROP
 779+ 8554 05 6D 04 6E                  dw          ZERO, BLK, STORE
 779+ 8558 AA 6B
 780+ 855A 05 6D 0D 6E                  dw          ZERO, TO_IN, STORE
 780+ 855E AA 6B
 781+ 8560 CA 77                        dw          INTERPRET
 782+ 8562 3F 67                        dw          QTERMINAL
 783+ 8564 2C 64                        dw      ZBRANCH
 784+ 8566 CC FF                        dw      Load_N_Begin - $
 785+ 8568 A5 69                        dw      EXIT
 786+ 856A
 787+ 856A              //  ______________________________________________________________________
 788+ 856A              //
 789+ 856A              // load         n --
 790+ 856A              // if n is positive, it loads screen #n (as usual)
 791+ 856A              // if n is negative, it connects stream #n to the normal INTERPRET
 792+ 856A              // this second way is useful if you want to load any kind of file
 793+ 856A              // provied that it is OPEN# the usual BASIC way.
 794+ 856A                              Colon_Def LOAD, "LOAD", is_normal
 794+ 856A             >                New_Def  LOAD, "LOAD", Enter_Ptr, is_normal ; ok
 794+ 856A             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 794+ 856A             >
 794+ 856A             >                // dummy db directives used to calculate length of namec
 794+ 856A 4C 4F 41 44 >                db      "LOAD"
 794+ 856E             >len_NFA         defl    $ - temp_NFA
 794+ 856E             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 794+ 856A             >
 794+ 856A 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 794+ 856B 4C 4F 41 44 >                db      "LOAD"               // name string in 7-bit ascii, but
 794+ 856F             >                org     $-1                 // alter last byte of Name just above to set
 794+ 856E C4          >                db      {b $} | END_BIT     // msb as name end
 794+ 856F             >
 794+ 856F 24 85       >                dw      last_NFA            // Link to previous definition Name
 794+ 8571             >LOAD:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 794+ 8571 88 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 794+ 8573             >                else
 794+ 8573 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 794+ 8573             >                endif           ; ok        // for other definitions it "points" the correct handler
 794+ 8573             >                // Use of "; ok" to suppress "warning[fwdref]"
 794+ 8573             >
 794+ 8573             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 795+ 8573 0A 6B 02 6A                  dw      DUP, ZLESS
 796+ 8577 2C 64                        dw      ZBRANCH
 797+ 8579 08 00                        dw      Load_Else - $
 798+ 857B 2C 85                        dw          LOAD_N
 799+ 857D 15 64                        dw      BRANCH
 800+ 857F 04 00                        dw      Load_Endif - $
 801+ 8581              Load_Else:
 802+ 8581 49 81                        dw          LOAD_P
 803+ 8583              Load_Endif:
 804+ 8583 A5 69                        dw      EXIT
 805+ 8585
 806+ 8585
 807+ 8585              //  ______________________________________________________________________
 808+ 8585              //
 809+ 8585              // autoexec     --
 810+ 8585              // this word is called the first time the Forth system boot to
 811+ 8585              // load Screen# 1. Once called it patches itself to prevent furhter runs.
 812+ 8585                              Colon_Def AUTOEXEC, "AUTOEXEC", is_normal
 812+ 8585             >                New_Def  AUTOEXEC, "AUTOEXEC", Enter_Ptr, is_normal ; ok
 812+ 8585             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 812+ 8585             >
 812+ 8585             >                // dummy db directives used to calculate length of namec
 812+ 8585 41 55 54 4F >                db      "AUTOEXEC"
 812+ 8589 45 58 45 43 >
 812+ 858D             >len_NFA         defl    $ - temp_NFA
 812+ 858D             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 812+ 8585             >
 812+ 8585 88          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 812+ 8586 41 55 54 4F >                db      "AUTOEXEC"               // name string in 7-bit ascii, but
 812+ 858A 45 58 45 43 >
 812+ 858E             >                org     $-1                 // alter last byte of Name just above to set
 812+ 858D C3          >                db      {b $} | END_BIT     // msb as name end
 812+ 858E             >
 812+ 858E 6A 85       >                dw      last_NFA            // Link to previous definition Name
 812+ 8590             >AUTOEXEC:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 812+ 8590 88 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 812+ 8592             >                else
 812+ 8592 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 812+ 8592             >                endif           ; ok        // for other definitions it "points" the correct handler
 812+ 8592             >                // Use of "; ok" to suppress "warning[fwdref]"
 812+ 8592             >
 812+ 8592             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 813+ 8592 A9 63 0B 00                  dw      LIT, 11
 814+ 8596 A9 63 B0 6C                  dw      LIT, NOOP
 815+ 859A A9 63 D9 78                  dw      LIT, Autoexec_Ptr
 816+ 859E AA 6B                        dw      STORE
 817+ 85A0 71 85                        dw      LOAD
 818+ 85A2 8A 78                        dw      QUIT
 819+ 85A4 A5 69                        dw      EXIT
 820+ 85A6
 821+ 85A6
 822+ 85A6              //  ______________________________________________________________________
 823+ 85A6              //
 824+ 85A6              // bye     --
 825+ 85A6              //
 826+ 85A6                              Colon_Def BYE, "BYE", is_normal
 826+ 85A6             >                New_Def  BYE, "BYE", Enter_Ptr, is_normal ; ok
 826+ 85A6             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 826+ 85A6             >
 826+ 85A6             >                // dummy db directives used to calculate length of namec
 826+ 85A6 42 59 45    >                db      "BYE"
 826+ 85A9             >len_NFA         defl    $ - temp_NFA
 826+ 85A9             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 826+ 85A6             >
 826+ 85A6 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 826+ 85A7 42 59 45    >                db      "BYE"               // name string in 7-bit ascii, but
 826+ 85AA             >                org     $-1                 // alter last byte of Name just above to set
 826+ 85A9 C5          >                db      {b $} | END_BIT     // msb as name end
 826+ 85AA             >
 826+ 85AA 85 85       >                dw      last_NFA            // Link to previous definition Name
 826+ 85AC             >BYE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 826+ 85AC 88 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 826+ 85AE             >                else
 826+ 85AE ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 826+ 85AE             >                endif           ; ok        // for other definitions it "points" the correct handler
 826+ 85AE             >                // Use of "; ok" to suppress "warning[fwdref]"
 826+ 85AE             >
 826+ 85AE             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 827+ 85AE E7 7D                        dw      FLUSH
 828+ 85B0 1A 7D                        dw      EMPTY_BUFFERS
 829+ 85B2 BE 7B 9D 6B                  dw      BLK_FH, FETCH, F_CLOSE, DROP
 829+ 85B6 C6 67 D5 6A
 830+ 85BA 05 6D 6B 6D                  dw      ZERO, PLUS_ORIGIN
 831+ 85BE 6F 79                        dw      BASIC
 832+ 85C0
 833+ 85C0              //  ______________________________________________________________________
 834+ 85C0              //
 835+ 85C0              // invv     --
 836+ 85C0              //
 837+ 85C0              //              Colon_Def INVV, "INVV", is_normal
 838+ 85C0              //              dw      LIT, 20, EMITC, ONE, EMITC
 839+ 85C0              //              dw      EXIT
 840+ 85C0
 841+ 85C0              //  ______________________________________________________________________
 842+ 85C0              //
 843+ 85C0              // truv     --
 844+ 85C0              //
 845+ 85C0              //              Colon_Def TRUV, "TRUV", is_normal
 846+ 85C0              //              dw      LIT, 20, EMITC, ZERO, EMITC
 847+ 85C0              //              dw      EXIT
 848+ 85C0
 849+ 85C0              //  ______________________________________________________________________
 850+ 85C0              //
 851+ 85C0              // mark     --
 852+ 85C0              //
 853+ 85C0              //              Colon_Def MARK, "MARK", is_normal
 854+ 85C0              //              dw      INVV, TYPE, TRUV
 855+ 85C0              //              dw      EXIT
 856+ 85C0
 857+ 85C0              //  ______________________________________________________________________
 858+ 85C0              //
 859+ 85C0              // back     --
 860+ 85C0              //
 861+ 85C0                              Colon_Def BACK, "BACK", is_normal
 861+ 85C0             >                New_Def  BACK, "BACK", Enter_Ptr, is_normal ; ok
 861+ 85C0             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 861+ 85C0             >
 861+ 85C0             >                // dummy db directives used to calculate length of namec
 861+ 85C0 42 41 43 4B >                db      "BACK"
 861+ 85C4             >len_NFA         defl    $ - temp_NFA
 861+ 85C4             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 861+ 85C0             >
 861+ 85C0 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 861+ 85C1 42 41 43 4B >                db      "BACK"               // name string in 7-bit ascii, but
 861+ 85C5             >                org     $-1                 // alter last byte of Name just above to set
 861+ 85C4 CB          >                db      {b $} | END_BIT     // msb as name end
 861+ 85C5             >
 861+ 85C5 A6 85       >                dw      last_NFA            // Link to previous definition Name
 861+ 85C7             >BACK:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 861+ 85C7 88 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 861+ 85C9             >                else
 861+ 85C9 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 861+ 85C9             >                endif           ; ok        // for other definitions it "points" the correct handler
 861+ 85C9             >                // Use of "; ok" to suppress "warning[fwdref]"
 861+ 85C9             >
 861+ 85C9             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 862+ 85C9 E4 6E 37 6F                  dw      HERE, SUBTRACT, COMMA
 862+ 85CD 00 6F
 863+ 85CF A5 69                        dw      EXIT
 864+ 85D1
 865+ 85D1              //  ______________________________________________________________________
 866+ 85D1              //
 867+ 85D1              // if          ( -- a 2 ) \ compile-time
 868+ 85D1              // IF ... THEN
 869+ 85D1              // IF ... ELSE ... ENDIF
 870+ 85D1                              Colon_Def IF, "IF", is_immediate
 870+ 85D1             >                New_Def  IF, "IF", Enter_Ptr, is_immediate ; ok
 870+ 85D1             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 870+ 85D1             >
 870+ 85D1             >                // dummy db directives used to calculate length of namec
 870+ 85D1 49 46       >                db      "IF"
 870+ 85D3             >len_NFA         defl    $ - temp_NFA
 870+ 85D3             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 870+ 85D1             >
 870+ 85D1 C2          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 870+ 85D2 49 46       >                db      "IF"               // name string in 7-bit ascii, but
 870+ 85D4             >                org     $-1                 // alter last byte of Name just above to set
 870+ 85D3 C6          >                db      {b $} | END_BIT     // msb as name end
 870+ 85D4             >
 870+ 85D4 C0 85       >                dw      last_NFA            // Link to previous definition Name
 870+ 85D6             >IF:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 870+ 85D6 88 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 870+ 85D8             >                else
 870+ 85D8 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 870+ 85D8             >                endif           ; ok        // for other definitions it "points" the correct handler
 870+ 85D8             >                // Use of "; ok" to suppress "warning[fwdref]"
 870+ 85D8             >
 870+ 85D8             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 871+ 85D8 3C 71 2C 64                  dw      COMPILE, ZBRANCH
 872+ 85DC E4 6E 05 6D                  dw      HERE, ZERO, COMMA
 872+ 85E0 00 6F
 873+ 85E2 15 6D                        dw      TWO
 874+ 85E4 A5 69                        dw      EXIT
 875+ 85E6
 876+ 85E6              //  ______________________________________________________________________
 877+ 85E6              //
 878+ 85E6              // then        ( a 2 -- ) \ compile-time
 879+ 85E6              //
 880+ 85E6                              Colon_Def THEN, "THEN", is_immediate
 880+ 85E6             >                New_Def  THEN, "THEN", Enter_Ptr, is_immediate ; ok
 880+ 85E6             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 880+ 85E6             >
 880+ 85E6             >                // dummy db directives used to calculate length of namec
 880+ 85E6 54 48 45 4E >                db      "THEN"
 880+ 85EA             >len_NFA         defl    $ - temp_NFA
 880+ 85EA             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 880+ 85E6             >
 880+ 85E6 C4          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 880+ 85E7 54 48 45 4E >                db      "THEN"               // name string in 7-bit ascii, but
 880+ 85EB             >                org     $-1                 // alter last byte of Name just above to set
 880+ 85EA CE          >                db      {b $} | END_BIT     // msb as name end
 880+ 85EB             >
 880+ 85EB D1 85       >                dw      last_NFA            // Link to previous definition Name
 880+ 85ED             >THEN:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 880+ 85ED 88 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 880+ 85EF             >                else
 880+ 85EF ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 880+ 85EF             >                endif           ; ok        // for other definitions it "points" the correct handler
 880+ 85EF             >                // Use of "; ok" to suppress "warning[fwdref]"
 880+ 85EF             >
 880+ 85EF             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 881+ 85EF C3 70                        dw      QCOMP
 882+ 85F1 15 6D F2 70                  dw      TWO, QPAIRS
 883+ 85F5 E4 6E C5 6A                  dw      HERE, OVER, SUBTRACT, SWAP, STORE
 883+ 85F9 37 6F FD 6A
 883+ 85FD AA 6B
 884+ 85FF A5 69                        dw      EXIT
 885+ 8601
 886+ 8601              //  ______________________________________________________________________
 887+ 8601              //
 888+ 8601              // endif       ( a 2 -- ) \ compile-time
 889+ 8601              //
 890+ 8601                              Colon_Def ENDIF, "ENDIF", is_immediate
 890+ 8601             >                New_Def  ENDIF, "ENDIF", Enter_Ptr, is_immediate ; ok
 890+ 8601             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 890+ 8601             >
 890+ 8601             >                // dummy db directives used to calculate length of namec
 890+ 8601 45 4E 44 49 >                db      "ENDIF"
 890+ 8605 46          >
 890+ 8606             >len_NFA         defl    $ - temp_NFA
 890+ 8606             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 890+ 8601             >
 890+ 8601 C5          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 890+ 8602 45 4E 44 49 >                db      "ENDIF"               // name string in 7-bit ascii, but
 890+ 8606 46          >
 890+ 8607             >                org     $-1                 // alter last byte of Name just above to set
 890+ 8606 C6          >                db      {b $} | END_BIT     // msb as name end
 890+ 8607             >
 890+ 8607 E6 85       >                dw      last_NFA            // Link to previous definition Name
 890+ 8609             >ENDIF:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 890+ 8609 88 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 890+ 860B             >                else
 890+ 860B ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 890+ 860B             >                endif           ; ok        // for other definitions it "points" the correct handler
 890+ 860B             >                // Use of "; ok" to suppress "warning[fwdref]"
 890+ 860B             >
 890+ 860B             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 891+ 860B ED 85                        dw      THEN
 892+ 860D A5 69                        dw      EXIT
 893+ 860F
 894+ 860F              //  ______________________________________________________________________
 895+ 860F              //
 896+ 860F              // else        ( a1 2 -- a2 2 ) \ compile-time
 897+ 860F              //
 898+ 860F                              Colon_Def ELSE, "ELSE", is_immediate
 898+ 860F             >                New_Def  ELSE, "ELSE", Enter_Ptr, is_immediate ; ok
 898+ 860F             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 898+ 860F             >
 898+ 860F             >                // dummy db directives used to calculate length of namec
 898+ 860F 45 4C 53 45 >                db      "ELSE"
 898+ 8613             >len_NFA         defl    $ - temp_NFA
 898+ 8613             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 898+ 860F             >
 898+ 860F C4          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 898+ 8610 45 4C 53 45 >                db      "ELSE"               // name string in 7-bit ascii, but
 898+ 8614             >                org     $-1                 // alter last byte of Name just above to set
 898+ 8613 C5          >                db      {b $} | END_BIT     // msb as name end
 898+ 8614             >
 898+ 8614 01 86       >                dw      last_NFA            // Link to previous definition Name
 898+ 8616             >ELSE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 898+ 8616 88 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 898+ 8618             >                else
 898+ 8618 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 898+ 8618             >                endif           ; ok        // for other definitions it "points" the correct handler
 898+ 8618             >                // Use of "; ok" to suppress "warning[fwdref]"
 898+ 8618             >
 898+ 8618             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 899+ 8618 C3 70                        dw      QCOMP
 900+ 861A 15 6D F2 70                  dw      TWO, QPAIRS
 901+ 861E 3C 71 15 64                  dw      COMPILE, BRANCH
 902+ 8622 E4 6E 05 6D                  dw      HERE, ZERO, COMMA
 902+ 8626 00 6F
 903+ 8628 FD 6A 15 6D                  dw      SWAP, TWO, THEN
 903+ 862C ED 85
 904+ 862E 15 6D                        dw      TWO
 905+ 8630 A5 69                        dw      EXIT
 906+ 8632
 907+ 8632              //  ______________________________________________________________________
 908+ 8632              //
 909+ 8632              // begin        ( -- a 1 ) \ compile-time
 910+ 8632              // BEGIN ... AGAIN
 911+ 8632              // BEGIN ... f UNTIL
 912+ 8632              // BEGIN ... f WHILE ... REPEAT
 913+ 8632                              Colon_Def BEGIN, "BEGIN", is_immediate
 913+ 8632             >                New_Def  BEGIN, "BEGIN", Enter_Ptr, is_immediate ; ok
 913+ 8632             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 913+ 8632             >
 913+ 8632             >                // dummy db directives used to calculate length of namec
 913+ 8632 42 45 47 49 >                db      "BEGIN"
 913+ 8636 4E          >
 913+ 8637             >len_NFA         defl    $ - temp_NFA
 913+ 8637             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 913+ 8632             >
 913+ 8632 C5          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 913+ 8633 42 45 47 49 >                db      "BEGIN"               // name string in 7-bit ascii, but
 913+ 8637 4E          >
 913+ 8638             >                org     $-1                 // alter last byte of Name just above to set
 913+ 8637 CE          >                db      {b $} | END_BIT     // msb as name end
 913+ 8638             >
 913+ 8638 0F 86       >                dw      last_NFA            // Link to previous definition Name
 913+ 863A             >BEGIN:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 913+ 863A 88 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 913+ 863C             >                else
 913+ 863C ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 913+ 863C             >                endif           ; ok        // for other definitions it "points" the correct handler
 913+ 863C             >                // Use of "; ok" to suppress "warning[fwdref]"
 913+ 863C             >
 913+ 863C             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 914+ 863C C3 70                        dw      QCOMP
 915+ 863E E4 6E                        dw      HERE
 916+ 8640 15 6D                        dw      TWO
 917+ 8642 A5 69                        dw      EXIT
 918+ 8644
 919+ 8644              //  ______________________________________________________________________
 920+ 8644              //
 921+ 8644              // again        ( a 1 -- ) \ compile-time
 922+ 8644                              Colon_Def AGAIN, "AGAIN", is_immediate
 922+ 8644             >                New_Def  AGAIN, "AGAIN", Enter_Ptr, is_immediate ; ok
 922+ 8644             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 922+ 8644             >
 922+ 8644             >                // dummy db directives used to calculate length of namec
 922+ 8644 41 47 41 49 >                db      "AGAIN"
 922+ 8648 4E          >
 922+ 8649             >len_NFA         defl    $ - temp_NFA
 922+ 8649             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 922+ 8644             >
 922+ 8644 C5          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 922+ 8645 41 47 41 49 >                db      "AGAIN"               // name string in 7-bit ascii, but
 922+ 8649 4E          >
 922+ 864A             >                org     $-1                 // alter last byte of Name just above to set
 922+ 8649 CE          >                db      {b $} | END_BIT     // msb as name end
 922+ 864A             >
 922+ 864A 32 86       >                dw      last_NFA            // Link to previous definition Name
 922+ 864C             >AGAIN:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 922+ 864C 88 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 922+ 864E             >                else
 922+ 864E ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 922+ 864E             >                endif           ; ok        // for other definitions it "points" the correct handler
 922+ 864E             >                // Use of "; ok" to suppress "warning[fwdref]"
 922+ 864E             >
 922+ 864E             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 923+ 864E C3 70                        dw      QCOMP
 924+ 8650 15 6D F2 70                  dw      TWO, QPAIRS
 925+ 8654 3C 71 15 64                  dw      COMPILE, BRANCH
 926+ 8658 C7 85                        dw      BACK
 927+ 865A A5 69                        dw      EXIT
 928+ 865C
 929+ 865C              //  ______________________________________________________________________
 930+ 865C              //
 931+ 865C              // until        ( a 1 -- ) \ compile-time
 932+ 865C                              Colon_Def UNTIL, "UNTIL", is_immediate
 932+ 865C             >                New_Def  UNTIL, "UNTIL", Enter_Ptr, is_immediate ; ok
 932+ 865C             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 932+ 865C             >
 932+ 865C             >                // dummy db directives used to calculate length of namec
 932+ 865C 55 4E 54 49 >                db      "UNTIL"
 932+ 8660 4C          >
 932+ 8661             >len_NFA         defl    $ - temp_NFA
 932+ 8661             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 932+ 865C             >
 932+ 865C C5          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 932+ 865D 55 4E 54 49 >                db      "UNTIL"               // name string in 7-bit ascii, but
 932+ 8661 4C          >
 932+ 8662             >                org     $-1                 // alter last byte of Name just above to set
 932+ 8661 CC          >                db      {b $} | END_BIT     // msb as name end
 932+ 8662             >
 932+ 8662 44 86       >                dw      last_NFA            // Link to previous definition Name
 932+ 8664             >UNTIL:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 932+ 8664 88 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 932+ 8666             >                else
 932+ 8666 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 932+ 8666             >                endif           ; ok        // for other definitions it "points" the correct handler
 932+ 8666             >                // Use of "; ok" to suppress "warning[fwdref]"
 932+ 8666             >
 932+ 8666             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 933+ 8666 C3 70                        dw      QCOMP
 934+ 8668 15 6D F2 70                  dw      TWO, QPAIRS
 935+ 866C 3C 71 2C 64                  dw      COMPILE, ZBRANCH
 936+ 8670 C7 85                        dw      BACK
 937+ 8672 A5 69                        dw      EXIT
 938+ 8674
 939+ 8674              //  ______________________________________________________________________
 940+ 8674              //
 941+ 8674              // end          ( a 1 -- ) \ compile-time
 942+ 8674                              Colon_Def END, "END", is_immediate
 942+ 8674             >                New_Def  END, "END", Enter_Ptr, is_immediate ; ok
 942+ 8674             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 942+ 8674             >
 942+ 8674             >                // dummy db directives used to calculate length of namec
 942+ 8674 45 4E 44    >                db      "END"
 942+ 8677             >len_NFA         defl    $ - temp_NFA
 942+ 8677             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 942+ 8674             >
 942+ 8674 C3          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 942+ 8675 45 4E 44    >                db      "END"               // name string in 7-bit ascii, but
 942+ 8678             >                org     $-1                 // alter last byte of Name just above to set
 942+ 8677 C4          >                db      {b $} | END_BIT     // msb as name end
 942+ 8678             >
 942+ 8678 5C 86       >                dw      last_NFA            // Link to previous definition Name
 942+ 867A             >END:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 942+ 867A 88 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 942+ 867C             >                else
 942+ 867C ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 942+ 867C             >                endif           ; ok        // for other definitions it "points" the correct handler
 942+ 867C             >                // Use of "; ok" to suppress "warning[fwdref]"
 942+ 867C             >
 942+ 867C             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 943+ 867C 64 86                        dw      UNTIL
 944+ 867E A5 69                        dw      EXIT
 945+ 8680
 946+ 8680              //  ______________________________________________________________________
 947+ 8680              //
 948+ 8680              // while        ( a1 1 -- a1 1 a2 4 ) \ compile-time
 949+ 8680                              Colon_Def WHILE, "WHILE", is_immediate
 949+ 8680             >                New_Def  WHILE, "WHILE", Enter_Ptr, is_immediate ; ok
 949+ 8680             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 949+ 8680             >
 949+ 8680             >                // dummy db directives used to calculate length of namec
 949+ 8680 57 48 49 4C >                db      "WHILE"
 949+ 8684 45          >
 949+ 8685             >len_NFA         defl    $ - temp_NFA
 949+ 8685             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 949+ 8680             >
 949+ 8680 C5          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 949+ 8681 57 48 49 4C >                db      "WHILE"               // name string in 7-bit ascii, but
 949+ 8685 45          >
 949+ 8686             >                org     $-1                 // alter last byte of Name just above to set
 949+ 8685 C5          >                db      {b $} | END_BIT     // msb as name end
 949+ 8686             >
 949+ 8686 74 86       >                dw      last_NFA            // Link to previous definition Name
 949+ 8688             >WHILE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 949+ 8688 88 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 949+ 868A             >                else
 949+ 868A ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 949+ 868A             >                endif           ; ok        // for other definitions it "points" the correct handler
 949+ 868A             >                // Use of "; ok" to suppress "warning[fwdref]"
 949+ 868A             >
 949+ 868A             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 950+ 868A D6 85                        dw      IF
 951+ 868C              //              dw      TWO_PLUS // ( that is 4 )
 952+ 868C 59 6B                        dw      TWO_SWAP
 953+ 868E A5 69                        dw      EXIT
 954+ 8690
 955+ 8690              //  ______________________________________________________________________
 956+ 8690              //
 957+ 8690              // repeat       ( a1 1 a2 4 -- ) \ compile-time
 958+ 8690                              Colon_Def REPEAT, "REPEAT", is_immediate
 958+ 8690             >                New_Def  REPEAT, "REPEAT", Enter_Ptr, is_immediate ; ok
 958+ 8690             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 958+ 8690             >
 958+ 8690             >                // dummy db directives used to calculate length of namec
 958+ 8690 52 45 50 45 >                db      "REPEAT"
 958+ 8694 41 54       >
 958+ 8696             >len_NFA         defl    $ - temp_NFA
 958+ 8696             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 958+ 8690             >
 958+ 8690 C6          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 958+ 8691 52 45 50 45 >                db      "REPEAT"               // name string in 7-bit ascii, but
 958+ 8695 41 54       >
 958+ 8697             >                org     $-1                 // alter last byte of Name just above to set
 958+ 8696 D4          >                db      {b $} | END_BIT     // msb as name end
 958+ 8697             >
 958+ 8697 80 86       >                dw      last_NFA            // Link to previous definition Name
 958+ 8699             >REPEAT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 958+ 8699 88 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 958+ 869B             >                else
 958+ 869B ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 958+ 869B             >                endif           ; ok        // for other definitions it "points" the correct handler
 958+ 869B             >                // Use of "; ok" to suppress "warning[fwdref]"
 958+ 869B             >
 958+ 869B             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 959+ 869B 4C 86                        dw      AGAIN
 960+ 869D              //              dw      TWO_MINUS
 961+ 869D ED 85                        dw      THEN
 962+ 869F A5 69                        dw      EXIT
 963+ 86A1
 964+ 86A1              //  ______________________________________________________________________
 965+ 86A1              //
 966+ 86A1              // ?do-
 967+ 86A1              // special version of "BACK" used by ?DO and LOOP
 968+ 86A1                              Colon_Def C_DO_BACK, "?DO-", is_normal
 968+ 86A1             >                New_Def  C_DO_BACK, "?DO-", Enter_Ptr, is_normal ; ok
 968+ 86A1             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 968+ 86A1             >
 968+ 86A1             >                // dummy db directives used to calculate length of namec
 968+ 86A1 3F 44 4F 2D >                db      "?DO-"
 968+ 86A5             >len_NFA         defl    $ - temp_NFA
 968+ 86A5             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 968+ 86A1             >
 968+ 86A1 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 968+ 86A2 3F 44 4F 2D >                db      "?DO-"               // name string in 7-bit ascii, but
 968+ 86A6             >                org     $-1                 // alter last byte of Name just above to set
 968+ 86A5 AD          >                db      {b $} | END_BIT     // msb as name end
 968+ 86A6             >
 968+ 86A6 90 86       >                dw      last_NFA            // Link to previous definition Name
 968+ 86A8             >C_DO_BACK:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 968+ 86A8 88 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 968+ 86AA             >                else
 968+ 86AA ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 968+ 86AA             >                endif           ; ok        // for other definitions it "points" the correct handler
 968+ 86AA             >                // Use of "; ok" to suppress "warning[fwdref]"
 968+ 86AA             >
 968+ 86AA             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 969+ 86AA C7 85                        dw      BACK
 970+ 86AC              CDoBack_Begin:
 971+ 86AC 6D 69 75 6E                  dw      SPFETCH, CSP, FETCH, SUBTRACT
 971+ 86B0 9D 6B 37 6F
 972+ 86B4 2C 64                        dw      ZBRANCH
 973+ 86B6 0A 00                        dw      CDoBack_While - $
 974+ 86B8 63 6A ED 85                  dw          TWO_PLUS, THEN
 975+ 86BC 15 64                        dw      BRANCH
 976+ 86BE EE FF                        dw      CDoBack_Begin - $
 977+ 86C0              CDoBack_While:
 978+ 86C0 05 71 75 6E                  dw      QCSP, CSP, STORE
 978+ 86C4 AA 6B
 979+ 86C6 A5 69                        dw      EXIT
 980+ 86C8
 981+ 86C8              //  ______________________________________________________________________
 982+ 86C8              //
 983+ 86C8              // do
 984+ 86C8              // DO  ... LOOP
 985+ 86C8              // DO  ... n +LOOP
 986+ 86C8              // ?DO ... LOOP
 987+ 86C8              // ?DO ... n +LOOP
 988+ 86C8                              Colon_Def DO, "DO", is_immediate
 988+ 86C8             >                New_Def  DO, "DO", Enter_Ptr, is_immediate ; ok
 988+ 86C8             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 988+ 86C8             >
 988+ 86C8             >                // dummy db directives used to calculate length of namec
 988+ 86C8 44 4F       >                db      "DO"
 988+ 86CA             >len_NFA         defl    $ - temp_NFA
 988+ 86CA             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 988+ 86C8             >
 988+ 86C8 C2          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 988+ 86C9 44 4F       >                db      "DO"               // name string in 7-bit ascii, but
 988+ 86CB             >                org     $-1                 // alter last byte of Name just above to set
 988+ 86CA CF          >                db      {b $} | END_BIT     // msb as name end
 988+ 86CB             >
 988+ 86CB A1 86       >                dw      last_NFA            // Link to previous definition Name
 988+ 86CD             >DO:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 988+ 86CD 88 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 988+ 86CF             >                else
 988+ 86CF ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 988+ 86CF             >                endif           ; ok        // for other definitions it "points" the correct handler
 988+ 86CF             >                // Use of "; ok" to suppress "warning[fwdref]"
 988+ 86CF             >
 988+ 86CF             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 989+ 86CF 3C 71 86 64                  dw      COMPILE, C_DO
 990+ 86D3 75 6E 9D 6B                  dw      CSP, FETCH, STORE_CSP
 990+ 86D7 96 70
 991+ 86D9 E4 6E 1D 6D                  dw      HERE, THREE
 992+ 86DD A5 69                        dw      EXIT
 993+ 86DF
 994+ 86DF              //  ______________________________________________________________________
 995+ 86DF              //
 996+ 86DF              // loop
 997+ 86DF                              Colon_Def LOOP, "LOOP", is_immediate
 997+ 86DF             >                New_Def  LOOP, "LOOP", Enter_Ptr, is_immediate ; ok
 997+ 86DF             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 997+ 86DF             >
 997+ 86DF             >                // dummy db directives used to calculate length of namec
 997+ 86DF 4C 4F 4F 50 >                db      "LOOP"
 997+ 86E3             >len_NFA         defl    $ - temp_NFA
 997+ 86E3             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 997+ 86DF             >
 997+ 86DF C4          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 997+ 86E0 4C 4F 4F 50 >                db      "LOOP"               // name string in 7-bit ascii, but
 997+ 86E4             >                org     $-1                 // alter last byte of Name just above to set
 997+ 86E3 D0          >                db      {b $} | END_BIT     // msb as name end
 997+ 86E4             >
 997+ 86E4 C8 86       >                dw      last_NFA            // Link to previous definition Name
 997+ 86E6             >LOOP:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 997+ 86E6 88 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 997+ 86E8             >                else
 997+ 86E8 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 997+ 86E8             >                endif           ; ok        // for other definitions it "points" the correct handler
 997+ 86E8             >                // Use of "; ok" to suppress "warning[fwdref]"
 997+ 86E8             >
 997+ 86E8             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 998+ 86E8 1D 6D F2 70                  dw      THREE, QPAIRS
 999+ 86EC 3C 71 04 64                  dw      COMPILE, C_LOOP
1000+ 86F0 A8 86                        dw      C_DO_BACK
1001+ 86F2 A5 69                        dw      EXIT
1002+ 86F4
1003+ 86F4              //  ______________________________________________________________________
1004+ 86F4              //
1005+ 86F4              // +loop
1006+ 86F4                              Colon_Def PLOOP, "+LOOP", is_immediate
1006+ 86F4             >                New_Def  PLOOP, "+LOOP", Enter_Ptr, is_immediate ; ok
1006+ 86F4             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1006+ 86F4             >
1006+ 86F4             >                // dummy db directives used to calculate length of namec
1006+ 86F4 2B 4C 4F 4F >                db      "+LOOP"
1006+ 86F8 50          >
1006+ 86F9             >len_NFA         defl    $ - temp_NFA
1006+ 86F9             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1006+ 86F4             >
1006+ 86F4 C5          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
1006+ 86F5 2B 4C 4F 4F >                db      "+LOOP"               // name string in 7-bit ascii, but
1006+ 86F9 50          >
1006+ 86FA             >                org     $-1                 // alter last byte of Name just above to set
1006+ 86F9 D0          >                db      {b $} | END_BIT     // msb as name end
1006+ 86FA             >
1006+ 86FA DF 86       >                dw      last_NFA            // Link to previous definition Name
1006+ 86FC             >PLOOP:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1006+ 86FC 88 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
1006+ 86FE             >                else
1006+ 86FE ~           >                dw      $ + 2   ; ok        // is pointed by CFA
1006+ 86FE             >                endif           ; ok        // for other definitions it "points" the correct handler
1006+ 86FE             >                // Use of "; ok" to suppress "warning[fwdref]"
1006+ 86FE             >
1006+ 86FE             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1007+ 86FE 1D 6D F2 70                  dw      THREE, QPAIRS
1008+ 8702 3C 71 CD 63                  dw      COMPILE, C_PLOOP
1009+ 8706 A8 86                        dw      C_DO_BACK
1010+ 8708 A5 69                        dw      EXIT
1011+ 870A
1012+ 870A              //  ______________________________________________________________________
1013+ 870A              //
1014+ 870A              // ?do
1015+ 870A                              Colon_Def QDO, "?DO", is_immediate
1015+ 870A             >                New_Def  QDO, "?DO", Enter_Ptr, is_immediate ; ok
1015+ 870A             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1015+ 870A             >
1015+ 870A             >                // dummy db directives used to calculate length of namec
1015+ 870A 3F 44 4F    >                db      "?DO"
1015+ 870D             >len_NFA         defl    $ - temp_NFA
1015+ 870D             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1015+ 870A             >
1015+ 870A C3          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
1015+ 870B 3F 44 4F    >                db      "?DO"               // name string in 7-bit ascii, but
1015+ 870E             >                org     $-1                 // alter last byte of Name just above to set
1015+ 870D CF          >                db      {b $} | END_BIT     // msb as name end
1015+ 870E             >
1015+ 870E F4 86       >                dw      last_NFA            // Link to previous definition Name
1015+ 8710             >QDO:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1015+ 8710 88 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
1015+ 8712             >                else
1015+ 8712 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
1015+ 8712             >                endif           ; ok        // for other definitions it "points" the correct handler
1015+ 8712             >                // Use of "; ok" to suppress "warning[fwdref]"
1015+ 8712             >
1015+ 8712             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1016+ 8712 3C 71 59 64                  dw      COMPILE, C_Q_DO
1017+ 8716 75 6E 9D 6B                  dw      CSP, FETCH, STORE_CSP
1017+ 871A 96 70
1018+ 871C E4 6E 05 6D                  dw      HERE, ZERO, COMMA, ZERO
1018+ 8720 00 6F 05 6D
1019+ 8724 E4 6E 1D 6D                  dw      HERE, THREE
1020+ 8728 A5 69                        dw      EXIT
1021+ 872A
1022+ 872A              Latest_Definition:
1023+ 872A              //  ______________________________________________________________________
1024+ 872A              //
1025+ 872A              // \
1026+ 872A                              Colon_Def BACKSLASH, "\\", is_immediate  // this is a single back-slash
1026+ 872A             >                New_Def  BACKSLASH, "\\", Enter_Ptr, is_immediate ; ok
1026+ 872A             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1026+ 872A             >
1026+ 872A             >                // dummy db directives used to calculate length of namec
1026+ 872A 5C          >                db      "\\"
1026+ 872B             >len_NFA         defl    $ - temp_NFA
1026+ 872B             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1026+ 872A             >
1026+ 872A C1          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
1026+ 872B 5C          >                db      "\\"               // name string in 7-bit ascii, but
1026+ 872C             >                org     $-1                 // alter last byte of Name just above to set
1026+ 872B DC          >                db      {b $} | END_BIT     // msb as name end
1026+ 872C             >
1026+ 872C 0A 87       >                dw      last_NFA            // Link to previous definition Name
1026+ 872E             >BACKSLASH:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1026+ 872E 88 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
1026+ 8730             >                else
1026+ 8730 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
1026+ 8730             >                endif           ; ok        // for other definitions it "points" the correct handler
1026+ 8730             >                // Use of "; ok" to suppress "warning[fwdref]"
1026+ 8730             >
1026+ 8730             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1027+ 8730 04 6E 9D 6B                  dw      BLK, FETCH
1028+ 8734 2C 64                        dw      ZBRANCH
1029+ 8736 30 00                        dw      Backslash_Else_1 - $
1030+ 8738 04 6E 9D 6B                  dw          BLK, FETCH, ONE, GREATER  // BLOCK 1 is used as temp-line in INCLUDE file
1030+ 873C 0D 6D 7D 6F
1031+ 8740 2C 64                        dw          ZBRANCH
1032+ 8742 18 00                        dw          Backslash_Else_2 - $
1033+ 8744 0D 6E 9D 6B                  dw              TO_IN, FETCH, CL, MOD, CL
1033+ 8748 39 6D 90 7A
1033+ 874C 39 6D
1034+ 874E FD 6A 37 6F                  dw              SWAP, SUBTRACT, TO_IN, PLUSSTORE
1034+ 8752 0D 6E 7A 6B
1035+ 8756 15 64                        dw          BRANCH
1036+ 8758 0A 00                        dw          Backslash_Endif_2 - $
1037+ 875A              Backslash_Else_2:
1038+ 875A 45 6D 7D 6A                  dw              BBUF, CELL_MINUS, TO_IN, STORE
1038+ 875E 0D 6E AA 6B
1039+ 8762              Backslash_Endif_2:
1040+ 8762 15 64                        dw      BRANCH
1041+ 8764 0A 00                        dw      Backslash_Endif_1 - $
1042+ 8766              Backslash_Else_1:
1043+ 8766 A9 63 50 00                  dw          LIT, 80, TO_IN, STORE
1043+ 876A 0D 6E AA 6B
1044+ 876E              Backslash_Endif_1:
1045+ 876E A5 69                        dw      EXIT
1046+ 8770
1047+ 8770              Fence_Word:
1048+ 8770              //  ______________________________________________________________________
1049+ 8770              //
1050+ 8770
1051+ 8770 00           Here_Dictionary db      0
1052+ 8771
# file closed: C:\Zx\CSpect\Projects\vForth15_INDIRECT/source/L3.asm
 114  8771
 115  8771              // now we save the compiled file so we can either run it or debug it
 116  8771                              SAVENEX OPEN "output/main.nex", ORIGIN
 117  8771                              SAVENEX CORE 3, 0, 0                                // Next core 3.0.0 required as minimum
 118  8771                              SAVENEX CFG  0
 119  8771                              SAVENEX BANK 2, 0
 120  8771                              SAVENEX AUTO
 121  8771                              SAVENEX CLOSE
 122  8771
 123  8771              //              PAGE 7 ;set 7 page to current slot
 124  8771              //              SAVEBIN "ram7.bin",$C000,$4000 ;- save 4000h begin from C000h of RAM to file
 125  8771              //              SAVEBIN "output/ram2.bin", $8000, 9800 ;- save 3000h begin from 8000h of RAM to file
 126  8771
 127  8771                              SAVETAP "output/F15E.tap", CODE, "forth15e", ORIGIN, 10000
 128  8771
 129  8771                              SAVEBIN "output/forth15E.bin", ORIGIN, 10000
 130  8771
 131  8771                              END
# file closed: C:\Zx\CSpect\Projects\vForth15_INDIRECT/source/main.asm
