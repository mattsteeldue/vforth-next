# file opened: C:\Zx\CSpect\Projects\vForth15_INDIRECT/source/main.asm
   1  0000              //  ______________________________________________________________________
   2  0000              //
   3  0000              //  main.asm
   4  0000              //  ______________________________________________________________________
   5  0000              //
   6  0000              //  v-Forth 1.5 NextZXOS version
   7  0000              //  build 20211119
   8  0000              //
   9  0000              //  Inirect-Thread version.
  10  0000              //
  11  0000              //  NextZXOS version
  12  0000              //  ______________________________________________________________________
  13  0000              //
  14  0000              //  This work is available as-is with no whatsoever warranty.
  15  0000              //  Copying, modifying and distributing this software is allowed
  16  0000              //  provided that the copyright notice is kept.
  17  0000              //  ______________________________________________________________________
  18  0000              //
  19  0000              //  by Matteo Vitturi, 1990-2021
  20  0000              //
  21  0000              //  https://sites.google.com/view/vforth/vforth15-next
  22  0000              //  https://www.oocities.org/matteo_vitturi/english/index.htm
  23  0000              //
  24  0000              //  This is the complete compiler for v.Forth for SINCLAIR ZX Spectrum Next.
  25  0000              //  Each line of this source list mustn't exceed 80 bytes.
  26  0000              //  Z80N (ZX Spectrum Next) extension is available.
  27  0000              //
  28  0000              //  This list has been tested using the following configuration:
  29  0000              //      - CSpect emulator V.2.12.30
  30  0000              //  ______________________________________________________________________
  31  0000              //
  32  0000              //  Z80 Registers usage map
  33  0000              //
  34  0000              //  AF
  35  0000              //  BC - Instruction Pointer: should be preserved during ROM/OS calls
  36  0000              //  DE - Working
  37  0000              //  HL - Working
  38  0000              //
  39  0000              //  AF'- Sometime used for backup purpose
  40  0000              //  BC'- Not used
  41  0000              //  DE'- Not used
  42  0000              //  HL'- Not used: (saved at startup)
  43  0000              //
  44  0000              //  SP - Calculator Stack Pointer
  45  0000              //  IX - Inner interpreter "next" address pointer. This way jp (ix) is 2T-state faster than JP next
  46  0000              //  IY - (ZX System: must be preserved to interact with standard ROM)
  47  0000              //
  48  0000              //  ______________________________________________________________________
  49  0000              //
  50  0000              //  _________________
  51  0000              //
  52  0000              //  FORTH DEFINITIONS
  53  0000              //  _________________
  54  0000
  55  0000                              OPT     --zxnext
  56  0000              //  ______________________________________________________________________
  57  0000              //
  58  0000              // this controls some debugging code in L0.asm
  59  0000              //  0 for final binary release.
  60  0000              //  1 for debugging with Visual Studio Code and DeZog
  61  0000              // -1 for for binary comparison with Forth generated code.
  62  0000              DEBUGGING       equ     -1
  63  0000              //
  64  0000              //  ______________________________________________________________________
  65  0000
  66  0000                              if ( -1 == DEBUGGING )
  67  0000              ORIGIN          equ     $62E6                   // for binary comparison
  68  0000                              endif
  69  0000              //  ______________________________________________________________________
  70  0000
  71  0000                              if (  0 == DEBUGGING )
  72  0000 ~            ORIGIN          equ     $6366                   // binary
  73  0000                              endif
  74  0000              //  ______________________________________________________________________
  75  0000
  76  0000                              if (  1 == DEBUGGING )
  77  0000 ~            ORIGIN          equ     $8080                   // for DeZog
  78  0000                              endif
  79  0000              //  ______________________________________________________________________
  80  0000
  81  0000                              DEVICE  ZXSPECTRUMNEXT
  82  0000
  83  0000                              ORG     ORIGIN
  84  62E6
  85  62E6                              if ( -1 == DEBUGGING )
  86  62E6 00 00 00...                  ds 128                            // for binary comparison
  87  62EA                              endif
  88  6366
  89  6366              //  ______________________________________________________________________
  90  6366              //
  91  6366              //  Naming convention for Label vs Forth correspondance
  92  6366              //  Forth words are named as they are named for real with some exception to avoid assembler syntax errors.
  93  6366              //    - Leading "0" is converted into "Z_"
  94  6366              //    - Leading "(" is converted into "C_", closing bracket is omitted
  95  6366              //    - Leading numbers are converted in letters: ONE_  TWO_ etc.
  96  6366              //    - Question mark "?" is converted into "Q" or omitted if needed / useful.
  97  6366              //    - Plus sign "+" is converted in _PLUS or ADD_ depending.
  98  6366              //    - Minus sign "-" in L (for Line), MINUS or SUBTRACT depending
  99  6366              //    - Greater-Than sign ">" in _GREATER or TO_ depending
 100  6366              //    - Equal sign "=" is converted in EQUAL
 101  6366              //    - Less-Than sign "<" in _LESS or FROM_ (or TO_ again) depending
 102  6366              //    - Asterisk sign "*" is converted in _MUL or STAR
 103  6366              //    - Slash "/" is converted in _DIV or omitted if it is clear what it means
 104  6366              //    - Exclamation mark "!" is converted in STORE
 105  6366              //    - At-Sign "@" is converted in FETCH
 106  6366              //    - Words that collide with Assembler are normally suffixed with "_OP"
 107  6366
 108  6366                              include "system.asm"
# file opened: C:\Zx\CSpect\Projects\vForth15_INDIRECT/source/system.asm
   1+ 6366              //  ______________________________________________________________________
   2+ 6366              //
   3+ 6366              //  system.asm
   4+ 6366              //  ______________________________________________________________________
   5+ 6366
   6+ 6366              // Registers:
   7+ 6366              //
   8+ 6366              //      BC: Instruction Pointer
   9+ 6366              //      DE:
  10+ 6366              //      HL: W register
  11+ 6366              //      SP: Calc stack Pointer
  12+ 6366              //      IX: Inner-Interpreter Address
  13+ 6366
  14+ 6366              //  ______________________________________________________________________
  15+ 6366              //
  16+ 6366              // ZX-Spectrum standard system variables
  17+ 6366              SCR_CT          equ     $5C8C                   // SCR-CT system variable
  18+ 6366              LASTK           equ     $5C08                   // LASTK system variable
  19+ 6366              BORDCR          equ     $5C48                   // BORDCR system variable
  20+ 6366              FLAGS2          equ     $5C6A                   // for caps-lock
  21+ 6366
  22+ 6366              //  ______________________________________________________________________
  23+ 6366              //
  24+ 6366              // Flag constants
  25+ 6366              TRUE_FLAG       equ     $FFFF
  26+ 6366              FALSE_FLAG      equ     $0000
  27+ 6366
  28+ 6366              //  ______________________________________________________________________
  29+ 6366              //
  30+ 6366              // Ascii char constants
  31+ 6366              NUL_CHAR        equ     $00
  32+ 6366              COMMA_CHAR      equ     $06
  33+ 6366              BACKSPACE_CHAR  equ     $08
  34+ 6366              CR_CHAR         equ     $0D
  35+ 6366              BLANK_CHAR      equ     $20
  36+ 6366              QUOTE_CHAR      equ     "'"
  37+ 6366              DQUOTE_CHAR     equ     '"'
  38+ 6366              UNDERSCORE_CHAR equ     $5F
  39+ 6366              SOLIDBLOCK_CHAR equ     $8F
  40+ 6366              HALFBLOCK_CHAR  equ     $8C
  41+ 6366              LC_A_CHAR       equ     $61                 // lower-case "a"
  42+ 6366              LC_Z_CHAR       equ     $7A                 // lower-case "z"
  43+ 6366
  44+ 6366
  45+ 6366              //  ______________________________________________________________________
  46+ 6366              //
  47+ 6366
  48+ 6366                              // emulate something like:  ld hl,rp
  49+ 6366              ldhlrp          macro
  50+ 6366 ~                            ld      hl,(RP_Pointer)
  51+ 6366                              endm
  52+ 6366
  53+ 6366                              // emulate something like:  ld rp,hl
  54+ 6366              ldrphl          macro
  55+ 6366 ~                            ld      (RP_Pointer),hl
  56+ 6366                              endm
  57+ 6366
  58+ 6366              //  ______________________________________________________________________
  59+ 6366              //
  60+ 6366              //  Inner interpreter next-address pointer. This is 2T-state faster than "jp address"
  61+ 6366              next            macro
  62+ 6366 ~                            jp      (ix)
  63+ 6366                              endm
  64+ 6366
  65+ 6366              psh1            macro
  66+ 6366 ~                            push    hl
  67+ 6366 ~                            jp      (ix)
  68+ 6366                              endm
  69+ 6366
  70+ 6366              psh2            macro
  71+ 6366 ~                            push    de
  72+ 6366 ~                            push    hl
  73+ 6366 ~                            jp      (ix)
  74+ 6366                              endm
  75+ 6366
  76+ 6366              //  ______________________________________________________________________
  77+ 6366              //
  78+ 6366              // Bit constants in length-byte
  79+ 6366
  80+ 6366              SMUDGE_BIT      equ     %00100000               // $20
  81+ 6366              IMMEDIATE_BIT   equ     %01000000               // $40
  82+ 6366              END_BIT         equ     %10000000               // $80
  83+ 6366
  84+ 6366
  85+ 6366              //  ______________________________________________________________________
  86+ 6366              //
  87+ 6366              //  To create Forth words using this (nice) Assembler, we have to use the two following
  88+ 6366              //  pointers
  89+ 6366              temp_NFA        defl    0
  90+ 6366              last_NFA        defl    0
  91+ 6366              len_NFA         defl    0
  92+ 6366
  93+ 6366              is_code         equ     0                   // so the direct machine-code starts at CFA
  94+ 6366              is_normal       equ     0                   // so the direct machine-code starts at CFA
  95+ 6366              is_immediate    equ     IMMEDIATE_BIT       // $40 - the definition is IMMEDIATE.
  96+ 6366
  97+ 6366              //  ______________________________________________________________________
  98+ 6366              //
  99+ 6366              //  Create a new "low-level" definition
 100+ 6366              //  This macro is used in the form  Create FORTH_NAME,n,"forth_name"
 101+ 6366              //  to create a new Forth Dictionary entry the same way Forth itself would do.
 102+ 6366              //  A word begins with a Length-Byte in range 1-31. Top 3 msb are used as flags
 103+ 6366              //  see SMUDGE_BIT and IMMEDIATE_BIT constant above.
 104+ 6366              //  It is followed by the Name of the word, i.e. a string expressed in 7-bit Ascii.
 105+ 6366              //  The last character of the Name must have the msb set to signal the end of it (END_BIT)
 106+ 6366              //  This macro acts much like the standard Forth definition CREATE
 107+ 6366
 108+ 6366              New_Def         macro   label, namec, runcode, bits
 109+ 6366 ~            temp_NFA        defl    $                   // save this NFA address to temp_NFA
 110+ 6366 ~
 111+ 6366 ~                            // dummy db directives used to calculate length of namec
 112+ 6366 ~                            db      namec
 113+ 6366 ~            len_NFA         defl    $ - temp_NFA
 114+ 6366 ~                            org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 115+ 6366 ~
 116+ 6366 ~                            db      len_NFA | END_BIT | bits  // The start of NFA must have msb set to signal the beginning of the sounted string
 117+ 6366 ~                            db      namec               // name string in 7-bit ascii, but
 118+ 6366 ~                            org     $-1                 // alter last byte of Name just above to set
 119+ 6366 ~                            db      {b $} | END_BIT     // msb as name end
 120+ 6366 ~
 121+ 6366 ~                            dw      last_NFA            // Link to previous definition Name
 122+ 6366 ~            label:          if runcode != 0 ; ok        // This is the start address of the direct jp(hl)
 123+ 6366 ~                            dw      runcode ; ok        // for primitive definitions  actual code
 124+ 6366 ~                            else
 125+ 6366 ~                            dw      $ + 2   ; ok        // is pointed by CFA
 126+ 6366 ~                            endif           ; ok        // for other definitions it "points" the correct handler
 127+ 6366 ~                            // Use of "; ok" to suppress "warning[fwdref]"
 128+ 6366 ~
 129+ 6366 ~            last_NFA        defl    temp_NFA            // keep track of NFA saved above
 130+ 6366                              endm
 131+ 6366
 132+ 6366              //  ______________________________________________________________________
 133+ 6366              //
 134+ 6366              // Create a "constant"
 135+ 6366              // The constant value is compiled in first PFA cell
 136+ 6366              Constant_Def    macro   label, namec, constant_value
 137+ 6366 ~                            New_Def  label, namec, Constant_Ptr, is_normal
 138+ 6366 ~                            dw      constant_value
 139+ 6366                              endm
 140+ 6366
 141+ 6366              //  ______________________________________________________________________
 142+ 6366              //
 143+ 6366              // Create a "variable"
 144+ 6366              // The when invoked, a variable returns a pointer, the address of first PFA cell
 145+ 6366              // this allow creation of "variables" which content is  of any length
 146+ 6366              Variable_Def    macro   label, namec, initial_value
 147+ 6366 ~                            New_Def  label, namec, Variable_Ptr, is_normal
 148+ 6366 ~                            dw      initial_value
 149+ 6366                              endm
 150+ 6366
 151+ 6366              //  ______________________________________________________________________
 152+ 6366              //
 153+ 6366              // Create a "user"
 154+ 6366              // It uses a single byte as offset to calculate the address of the variable
 155+ 6366              User_Def        macro   label, namec, offset_value
 156+ 6366 ~                            New_Def  label, namec, User_Ptr, is_normal
 157+ 6366 ~                            db      offset_value
 158+ 6366                              endm
 159+ 6366
 160+ 6366              //  ______________________________________________________________________
 161+ 6366              //
 162+ 6366              // Create a "colon-definition"
 163+ 6366              // The CFA contains a small routine i.e. "call Enter_Ptr".
 164+ 6366              // The PFA, three bytes later, contains the actual Forth definition
 165+ 6366              Colon_Def       macro   label, namec, bits
 166+ 6366 ~                            New_Def  label, namec, Enter_Ptr, bits ; ok
 167+ 6366                              endm
 168+ 6366
 169+ 6366              //  ______________________________________________________________________
 170+ 6366              //
 171+ 6366
 172+ 6366              S0_system:      equ     $D0E8               // Address of top of Calc Stack
 173+ 6366              TIB_system      equ     $D0E8               // TIB grows upwards, Return-Stack downward.
 174+ 6366              R0_system:      equ     $D188               // Address of top of Return Stack. This is S0 + $00A0
 175+ 6366              USER_system:    equ     $D188               // User variables zone.
 176+ 6366              FIRST_system:   equ     $D1E4               // Address of first BUFFER
 177+ 6366              LIMIT_system:   equ     $E000               // Address of first byte beyond last BUFFER
 178+ 6366
# file closed: C:\Zx\CSpect\Projects\vForth15_INDIRECT/source/system.asm
 109  6366                              include "L0.asm"
# file opened: C:\Zx\CSpect\Projects\vForth15_INDIRECT/source/L0.asm
   1+ 6366              //  ______________________________________________________________________
   2+ 6366              //
   3+ 6366              //  L0.asm
   4+ 6366              //
   5+ 6366              //  Origin-Area and Level-0 definitions
   6+ 6366              //  ______________________________________________________________________
   7+ 6366
   8+ 6366
   9+ 6366              Cold_origin:
  10+ 6366 A7                           and     a
  11+ 6367 C3 1B 79                     jp      ColdRoutine
  12+ 636A              Warm_origin:
  13+ 636A 37                           scf
  14+ 636B C3 1B 79                     jp      WarmRoutine
  15+ 636E
  16+ 636E              // +008
  17+ 636E E6 D0        SP_Basic:       dw      $D0E6               // These are bits with some "standard" meaning... 0101
  18+ 6370
  19+ 6370              // +00A
  20+ 6370 00 0E                        dw      $0E00
  21+ 6372
  22+ 6372              // +00C
  23+ 6372 51 87        Latest_origin:  dw      Latest_Definition   // Latest word (used in Cold_Start)
  24+ 6374
  25+ 6374              // +00E
  26+ 6374 0C 00        DEL_Char_Ptr:   dw      $000C               // This is the characther used as "Back-Space"
  27+ 6376
  28+ 6376              // +010
  29+ 6376 50 B2        CPU_Id          dw      $B250               // Z80 expressed in base 36
  30+ 6378
  31+ 6378              // +012
  32+ 6378 E8 D0        S0_origin:      dw      S0_system
  33+ 637A 88 D1        R0_origin:      dw      R0_system
  34+ 637C E8 D0        TIB_origin:     dw      TIB_system
  35+ 637E 1F 00        WIDTH_origin:   dw      31
  36+ 6380 01 00        WARNING_origin: dw      1
  37+ 6382 97 87        FENCE_origin:   dw      Fence_Word
  38+ 6384 97 87        DP_origin       dw      Fence_Word
  39+ 6386 29 78        VOCLINK_origin: dw      Voclink_Ptr
  40+ 6388 E4 D1                        dw      FIRST_system
  41+ 638A 00 E0                        dw      LIMIT_system
  42+ 638C
  43+ 638C              // +026
  44+ 638C 8F           Block_Face:     db      SOLIDBLOCK_CHAR     // Caps-Lock   Cursor face
  45+ 638D 8C           Half_Face:      db      HALFBLOCK_CHAR      // Caps-unlock Cursor face
  46+ 638E 5F           Underscore_Face:db      UNDERSCORE_CHAR     // Underscore  Cursor face
  47+ 638F 00                           db      0
  48+ 6390
  49+ 6390              // +02A
  50+ 6390 00 00        IX_Echo:        dw      $0000               // Echo IX after NextOS call
  51+ 6392
  52+ 6392              // +02C
  53+ 6392 00 00        SP_Saved:       dw      $0000               // Saved SP dufing NextOS call
  54+ 6394
  55+ 6394              // +02E
  56+ 6394 88 D1        USER_Pointer:   dw      USER_system
  57+ 6396
  58+ 6396              // +030
  59+ 6396 88 D1        RP_Pointer:     dw      $d188 // R0_system
  60+ 6398
  61+ 6398              // +32
  62+ 6398              // SP_Basic        dw      0
  63+ 6398
  64+ 6398
  65+ 6398              //  ______________________________________________________________________
  66+ 6398
  67+ 6398              // from this point we can use LDHLRP and LDRPHL Assembler macros
  68+ 6398              // instead of their equivalent long sequences.
  69+ 6398
  70+ 6398              //  ______________________________________________________________________
  71+ 6398
  72+ 6398              // address for "next" - inner interpreter
  73+ 6398              // This address must always be pointed by IX
  74+ 6398              // "next" macro simply does a  jp(ix)  instruction
  75+ 6398
  76+ 6398              // Psh2_Ptr:       push    de
  77+ 6398              // Psh1_Ptr:       push    hl
  78+ 6398
  79+ 6398              Next_Ptr:       // This address must always be kept in IX: "next" relies on that
  80+ 6398
  81+ 6398                              if ( 1 == DEBUGGING )
  82+ 6398 ~                            ld      hl, Next_Breakpoint_1
  83+ 6398 ~                            and     a
  84+ 6398 ~                            sbc     hl, bc
  85+ 6398 ~                            jr      nz, Next_Continue
  86+ 6398 ~                            nop // This is where you have to put a real breakpoint to intercept BC values...
  87+ 6398                              endif
  88+ 6398
  89+ 6398              Next_Continue:
  90+ 6398 0A                           ld      a, (bc)
  91+ 6399 03                           inc     bc
  92+ 639A 6F                           ld      l, a
  93+ 639B 0A                           ld      a, (bc)
  94+ 639C 03                           inc     bc
  95+ 639D 67                           ld      h, a                // hl contains a CFA (xt) of word being executed
  96+ 639E
  97+ 639E              // Execute xt i.e. CFA held in HL
  98+ 639E              Exec_Ptr:
  99+ 639E 5E                           ld      e, (hl)
 100+ 639F 23                           inc     hl
 101+ 63A0 56                           ld      d, (hl)
 102+ 63A1 EB                           ex      de, hl
 103+ 63A2 E9                           jp      (hl)                // and jump to it
 104+ 63A3                                                          // there you'll find the real code or a CALL to a ;code part
 105+ 63A3
 106+ 63A3              //  ______________________________________________________________________
 107+ 63A3              //
 108+ 63A3              // lit          -- x
 109+ 63A3              // puts on top of stack the value of the following word.
 110+ 63A3              // it is compiled in colon definition before a literal number
 111+ 63A3
 112+ 63A3                              New_Def  LIT, "LIT", is_code, is_normal
 112+ 63A3             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 112+ 63A3             >
 112+ 63A3             >                // dummy db directives used to calculate length of namec
 112+ 63A3 4C 49 54    >                db      "LIT"
 112+ 63A6             >len_NFA         defl    $ - temp_NFA
 112+ 63A6             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 112+ 63A3             >
 112+ 63A3 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 112+ 63A4 4C 49 54    >                db      "LIT"               // name string in 7-bit ascii, but
 112+ 63A7             >                org     $-1                 // alter last byte of Name just above to set
 112+ 63A6 D4          >                db      {b $} | END_BIT     // msb as name end
 112+ 63A7             >
 112+ 63A7 00 00       >                dw      last_NFA            // Link to previous definition Name
 112+ 63A9             >LIT:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 112+ 63A9 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
 112+ 63A9             >                else
 112+ 63A9 AB 63       >                dw      $ + 2   ; ok        // is pointed by CFA
 112+ 63AB             >                endif           ; ok        // for other definitions it "points" the correct handler
 112+ 63AB             >                // Use of "; ok" to suppress "warning[fwdref]"
 112+ 63AB             >
 112+ 63AB             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 113+ 63AB
 114+ 63AB 0A                           ld      a, (bc)
 115+ 63AC 03                           inc     bc
 116+ 63AD 6F                           ld      l, a
 117+ 63AE 0A                           ld      a, (bc)
 118+ 63AF 03                           inc     bc
 119+ 63B0 67                           ld      h, a
 120+ 63B1                              psh1
 120+ 63B1 E5          >                push    hl
 120+ 63B2 DD E9       >                jp      (ix)
 121+ 63B4
 122+ 63B4              //  ______________________________________________________________________
 123+ 63B4              //
 124+ 63B4              // execute      i*x xt -- j*x
 125+ 63B4              // execution token. usually xt is given by CFA
 126+ 63B4
 127+ 63B4                              New_Def  EXECUTE, "EXECUTE", is_code, is_normal
 127+ 63B4             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 127+ 63B4             >
 127+ 63B4             >                // dummy db directives used to calculate length of namec
 127+ 63B4 45 58 45 43 >                db      "EXECUTE"
 127+ 63B8 55 54 45    >
 127+ 63BB             >len_NFA         defl    $ - temp_NFA
 127+ 63BB             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 127+ 63B4             >
 127+ 63B4 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 127+ 63B5 45 58 45 43 >                db      "EXECUTE"               // name string in 7-bit ascii, but
 127+ 63B9 55 54 45    >
 127+ 63BC             >                org     $-1                 // alter last byte of Name just above to set
 127+ 63BB C5          >                db      {b $} | END_BIT     // msb as name end
 127+ 63BC             >
 127+ 63BC A3 63       >                dw      last_NFA            // Link to previous definition Name
 127+ 63BE             >EXECUTE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 127+ 63BE ~           >                dw      runcode ; ok        // for primitive definitions  actual code
 127+ 63BE             >                else
 127+ 63BE C0 63       >                dw      $ + 2   ; ok        // is pointed by CFA
 127+ 63C0             >                endif           ; ok        // for other definitions it "points" the correct handler
 127+ 63C0             >                // Use of "; ok" to suppress "warning[fwdref]"
 127+ 63C0             >
 127+ 63C0             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 128+ 63C0 E1                           pop     hl
 129+ 63C1 18 DB                        jr      Exec_Ptr
 130+ 63C3
 131+ 63C3
 132+ 63C3              //  ______________________________________________________________________
 133+ 63C3              //
 134+ 63C3              // branch       --
 135+ 63C3              // unconditional branch in colon definition using the following cell as an offset from current IP value
 136+ 63C3              // compiled by ELSE, AGAIN and some other immediate words
 137+ 63C3
 138+ 63C3                              New_Def BRANCH, "BRANCH", is_code, is_normal
 138+ 63C3             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 138+ 63C3             >
 138+ 63C3             >                // dummy db directives used to calculate length of namec
 138+ 63C3 42 52 41 4E >                db      "BRANCH"
 138+ 63C7 43 48       >
 138+ 63C9             >len_NFA         defl    $ - temp_NFA
 138+ 63C9             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 138+ 63C3             >
 138+ 63C3 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 138+ 63C4 42 52 41 4E >                db      "BRANCH"               // name string in 7-bit ascii, but
 138+ 63C8 43 48       >
 138+ 63CA             >                org     $-1                 // alter last byte of Name just above to set
 138+ 63C9 C8          >                db      {b $} | END_BIT     // msb as name end
 138+ 63CA             >
 138+ 63CA B4 63       >                dw      last_NFA            // Link to previous definition Name
 138+ 63CC             >BRANCH:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 138+ 63CC ~           >                dw      runcode ; ok        // for primitive definitions  actual code
 138+ 63CC             >                else
 138+ 63CC CE 63       >                dw      $ + 2   ; ok        // is pointed by CFA
 138+ 63CE             >                endif           ; ok        // for other definitions it "points" the correct handler
 138+ 63CE             >                // Use of "; ok" to suppress "warning[fwdref]"
 138+ 63CE             >
 138+ 63CE             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 139+ 63CE              Branch_Ptr:
 140+ 63CE 60                           ld      h, b
 141+ 63CF 69                           ld      l, c
 142+ 63D0 5E                           ld      e, (hl)
 143+ 63D1 23                           inc     hl
 144+ 63D2 56                           ld      d, (hl)
 145+ 63D3 2B                           dec     hl                  // offset is calculated from current IP
 146+ 63D4 19                           add     hl, de
 147+ 63D5 4D                           ld      c, l
 148+ 63D6 44                           ld      b, h
 149+ 63D7                              next
 149+ 63D7 DD E9       >                jp      (ix)
 150+ 63D9
 151+ 63D9
 152+ 63D9              //  ______________________________________________________________________
 153+ 63D9              //
 154+ 63D9              // 0branch      f --
 155+ 63D9              // conditional branch if the top-of-stack is ZERO or FALSE.
 156+ 63D9              // compiled by IF, UNTIL and some other immediate words
 157+ 63D9
 158+ 63D9                              New_Def ZBRANCH, "0BRANCH", is_code, is_normal
 158+ 63D9             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 158+ 63D9             >
 158+ 63D9             >                // dummy db directives used to calculate length of namec
 158+ 63D9 30 42 52 41 >                db      "0BRANCH"
 158+ 63DD 4E 43 48    >
 158+ 63E0             >len_NFA         defl    $ - temp_NFA
 158+ 63E0             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 158+ 63D9             >
 158+ 63D9 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 158+ 63DA 30 42 52 41 >                db      "0BRANCH"               // name string in 7-bit ascii, but
 158+ 63DE 4E 43 48    >
 158+ 63E1             >                org     $-1                 // alter last byte of Name just above to set
 158+ 63E0 C8          >                db      {b $} | END_BIT     // msb as name end
 158+ 63E1             >
 158+ 63E1 C3 63       >                dw      last_NFA            // Link to previous definition Name
 158+ 63E3             >ZBRANCH:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 158+ 63E3 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
 158+ 63E3             >                else
 158+ 63E3 E5 63       >                dw      $ + 2   ; ok        // is pointed by CFA
 158+ 63E5             >                endif           ; ok        // for other definitions it "points" the correct handler
 158+ 63E5             >                // Use of "; ok" to suppress "warning[fwdref]"
 158+ 63E5             >
 158+ 63E5             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 159+ 63E5              ZBranch_Ptr:
 160+ 63E5 E1                           pop     hl
 161+ 63E6 7D                           ld      a, l
 162+ 63E7 B4                           or      h
 163+ 63E8 CA CE 63                     jp      z, Branch_Ptr
 164+ 63EB 03                           inc     bc                  // if not branch, skip offset cell.
 165+ 63EC 03                           inc     bc
 166+ 63ED                              next
 166+ 63ED DD E9       >                jp      (ix)
 167+ 63EF
 168+ 63EF              //  ______________________________________________________________________
 169+ 63EF              //
 170+ 63EF              // (loop)       --
 171+ 63EF              // compiled by +LOOP. it uses the top two values of return-stack to
 172+ 63EF              // keep track of index and limit
 173+ 63EF                              New_Def C_LOOP, "(LOOP)", is_code, is_normal
 173+ 63EF             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 173+ 63EF             >
 173+ 63EF             >                // dummy db directives used to calculate length of namec
 173+ 63EF 28 4C 4F 4F >                db      "(LOOP)"
 173+ 63F3 50 29       >
 173+ 63F5             >len_NFA         defl    $ - temp_NFA
 173+ 63F5             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 173+ 63EF             >
 173+ 63EF 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 173+ 63F0 28 4C 4F 4F >                db      "(LOOP)"               // name string in 7-bit ascii, but
 173+ 63F4 50 29       >
 173+ 63F6             >                org     $-1                 // alter last byte of Name just above to set
 173+ 63F5 A9          >                db      {b $} | END_BIT     // msb as name end
 173+ 63F6             >
 173+ 63F6 D9 63       >                dw      last_NFA            // Link to previous definition Name
 173+ 63F8             >C_LOOP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 173+ 63F8 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
 173+ 63F8             >                else
 173+ 63F8 FA 63       >                dw      $ + 2   ; ok        // is pointed by CFA
 173+ 63FA             >                endif           ; ok        // for other definitions it "points" the correct handler
 173+ 63FA             >                // Use of "; ok" to suppress "warning[fwdref]"
 173+ 63FA             >
 173+ 63FA             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 174+ 63FA
 175+ 63FA
 176+ 63FA 11 01 00                     ld      de, 1               // bc contains increment of 1
 177+ 63FD
 178+ 63FD              Loop_Ptr:
 179+ 63FD                              ldhlrp                      // ld hl,rp macro 30h +Origin
 179+ 63FD 2A 96 63    >                ld      hl,(RP_Pointer)
 180+ 6400
 181+ 6400 7E                           ld      a, (hl)             // hl points to loop-index, add increment de to it.
 182+ 6401 83                           add     e
 183+ 6402 77                           ld      (hl), a
 184+ 6403 5F                           ld      e, a
 185+ 6404 23                           inc     hl
 186+ 6405 7E                           ld      a, (hl)
 187+ 6406 8A                           adc     d
 188+ 6407 77                           ld      (hl),a
 189+ 6408 23                           inc     hl
 190+ 6409 CB 7A                        bit     7, d                // keep increment-sign just before overwriting d
 191+ 640B 57                           ld      d, a
 192+ 640C
 193+ 640C 20 07                        jr      nz, Loop_NegativeIncrement
 194+ 640E 7B                               ld      a, e
 195+ 640F 96                               sub     (hl)
 196+ 6410 7A                               ld      a, d
 197+ 6411 23                               inc     hl
 198+ 6412 9E                               sbc     (hl)
 199+ 6413 18 05                        jr      Loop_Endif              // else
 200+ 6415
 201+ 6415              Loop_NegativeIncrement:
 202+ 6415 7E                               ld      a, (hl)
 203+ 6416 93                               sub     e
 204+ 6417 23                               inc     hl
 205+ 6418 7E                               ld      a, (hl)
 206+ 6419 9A                               sbc     d
 207+ 641A
 208+ 641A              Loop_Endif:
 209+ 641A FA CE 63                     jp      m, Branch_Ptr       // perform branch consuming following cell
 210+ 641D 23                           inc     hl
 211+ 641E                              ldrphl                      // ld rp,hl macro 30h +Origin
 211+ 641E 22 96 63    >                ld      (RP_Pointer),hl
 212+ 6421
 213+ 6421 03                           inc     bc                  // skip branch-style offset
 214+ 6422 03                           inc     bc
 215+ 6423                              next
 215+ 6423 DD E9       >                jp      (ix)
 216+ 6425
 217+ 6425              //  ______________________________________________________________________
 218+ 6425              //
 219+ 6425              // (+loop)       n --
 220+ 6425              // same as (LOOP) but index is incremented by n (instead of just 1)
 221+ 6425              // compiled by +LOOP.
 222+ 6425                              New_Def C_PLOOP, "(+LOOP)", is_code, is_normal
 222+ 6425             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 222+ 6425             >
 222+ 6425             >                // dummy db directives used to calculate length of namec
 222+ 6425 28 2B 4C 4F >                db      "(+LOOP)"
 222+ 6429 4F 50 29    >
 222+ 642C             >len_NFA         defl    $ - temp_NFA
 222+ 642C             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 222+ 6425             >
 222+ 6425 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 222+ 6426 28 2B 4C 4F >                db      "(+LOOP)"               // name string in 7-bit ascii, but
 222+ 642A 4F 50 29    >
 222+ 642D             >                org     $-1                 // alter last byte of Name just above to set
 222+ 642C A9          >                db      {b $} | END_BIT     // msb as name end
 222+ 642D             >
 222+ 642D EF 63       >                dw      last_NFA            // Link to previous definition Name
 222+ 642F             >C_PLOOP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 222+ 642F ~           >                dw      runcode ; ok        // for primitive definitions  actual code
 222+ 642F             >                else
 222+ 642F 31 64       >                dw      $ + 2   ; ok        // is pointed by CFA
 222+ 6431             >                endif           ; ok        // for other definitions it "points" the correct handler
 222+ 6431             >                // Use of "; ok" to suppress "warning[fwdref]"
 222+ 6431             >
 222+ 6431             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 223+ 6431 D1                           pop     de
 224+ 6432 C3 FD 63                     jp      Loop_Ptr
 225+ 6435
 226+ 6435              //  ______________________________________________________________________
 227+ 6435              //
 228+ 6435              // (?do)        lim ind --
 229+ 6435              // compiled by ?DO to make a loop checking for lim == ind first
 230+ 6435              // at run-time (?DO) must be followed by a BRANCH offset
 231+ 6435              // used to skip the loop if lim == ind
 232+ 6435                              New_Def C_Q_DO, "(?DO)", is_code, is_normal
 232+ 6435             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 232+ 6435             >
 232+ 6435             >                // dummy db directives used to calculate length of namec
 232+ 6435 28 3F 44 4F >                db      "(?DO)"
 232+ 6439 29          >
 232+ 643A             >len_NFA         defl    $ - temp_NFA
 232+ 643A             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 232+ 6435             >
 232+ 6435 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 232+ 6436 28 3F 44 4F >                db      "(?DO)"               // name string in 7-bit ascii, but
 232+ 643A 29          >
 232+ 643B             >                org     $-1                 // alter last byte of Name just above to set
 232+ 643A A9          >                db      {b $} | END_BIT     // msb as name end
 232+ 643B             >
 232+ 643B 25 64       >                dw      last_NFA            // Link to previous definition Name
 232+ 643D             >C_Q_DO:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 232+ 643D ~           >                dw      runcode ; ok        // for primitive definitions  actual code
 232+ 643D             >                else
 232+ 643D 3F 64       >                dw      $ + 2   ; ok        // is pointed by CFA
 232+ 643F             >                endif           ; ok        // for other definitions it "points" the correct handler
 232+ 643F             >                // Use of "; ok" to suppress "warning[fwdref]"
 232+ 643F             >
 232+ 643F             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 233+ 643F D1                           pop     de                  // de has the index
 234+ 6440 E1                           pop     hl                  // hl has the limit
 235+ 6441 E5                           push    hl
 236+ 6442 D5                           push    de
 237+ 6443 A7                           and     a                   // reset carry flag
 238+ 6444 ED 52                        sbc     hl, de              // compute limit - index
 239+ 6446 20 05                        jr      nz, Do_Ptr          // if zero then don't even begin loop
 240+ 6448 D1                               pop     de
 241+ 6449 E1                               pop     hl
 242+ 644A
 243+ 644A C3 CE 63                         jp      Branch_Ptr          // perform branch consuming following cell
 244+ 644D              Do_Ptr:
 245+ 644D                              ldhlrp                      // prepare RP
 245+ 644D 2A 96 63    >                ld      hl,(RP_Pointer)
 246+ 6450 2B                           dec     hl
 247+ 6451 2B                           dec     hl
 248+ 6452 2B                           dec     hl
 249+ 6453 2B                           dec     hl
 250+ 6454                              ldrphl
 250+ 6454 22 96 63    >                ld      (RP_Pointer),hl
 251+ 6457
 252+ 6457                              // store index as top RP
 253+ 6457 D1                           pop     de
 254+ 6458 73                           ld      (hl), e
 255+ 6459 23                           inc     hl
 256+ 645A 72                           ld      (hl), d
 257+ 645B 23                           inc     hl
 258+ 645C                              // stores lim as second from top RP
 259+ 645C D1                           pop     de
 260+ 645D 73                           ld      (hl), e
 261+ 645E 23                           inc     hl
 262+ 645F 72                           ld      (hl), d
 263+ 6460
 264+ 6460                              // skip branch-style offseet
 265+ 6460 03                           inc     bc
 266+ 6461 03                           inc     bc
 267+ 6462                              next
 267+ 6462 DD E9       >                jp      (ix)
 268+ 6464
 269+ 6464              //  ______________________________________________________________________
 270+ 6464              //
 271+ 6464              // (do)        lim ind --
 272+ 6464              // compiled by DO to make a loop checking for lim == ind first
 273+ 6464              // this is a simpler version of (?DO)
 274+ 6464                              New_Def C_DO, "(DO)", is_code, is_normal
 274+ 6464             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 274+ 6464             >
 274+ 6464             >                // dummy db directives used to calculate length of namec
 274+ 6464 28 44 4F 29 >                db      "(DO)"
 274+ 6468             >len_NFA         defl    $ - temp_NFA
 274+ 6468             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 274+ 6464             >
 274+ 6464 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 274+ 6465 28 44 4F 29 >                db      "(DO)"               // name string in 7-bit ascii, but
 274+ 6469             >                org     $-1                 // alter last byte of Name just above to set
 274+ 6468 A9          >                db      {b $} | END_BIT     // msb as name end
 274+ 6469             >
 274+ 6469 35 64       >                dw      last_NFA            // Link to previous definition Name
 274+ 646B             >C_DO:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 274+ 646B ~           >                dw      runcode ; ok        // for primitive definitions  actual code
 274+ 646B             >                else
 274+ 646B 6D 64       >                dw      $ + 2   ; ok        // is pointed by CFA
 274+ 646D             >                endif           ; ok        // for other definitions it "points" the correct handler
 274+ 646D             >                // Use of "; ok" to suppress "warning[fwdref]"
 274+ 646D             >
 274+ 646D             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 275+ 646D 0B                           dec     bc                  // prepare IP beforehand
 276+ 646E 0B                           dec     bc                  // to balance the two final inc bc in (?do)
 277+ 646F C3 4D 64                     jp      Do_Ptr
 278+ 6472
 279+ 6472              //  ______________________________________________________________________
 280+ 6472              //
 281+ 6472              // i            -- n
 282+ 6472              // used between DO and LOOP or between DO e +LOOP to copy on top of stack
 283+ 6472              // the current value of the index-loop
 284+ 6472                              New_Def I, "I", is_code, is_normal
 284+ 6472             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 284+ 6472             >
 284+ 6472             >                // dummy db directives used to calculate length of namec
 284+ 6472 49          >                db      "I"
 284+ 6473             >len_NFA         defl    $ - temp_NFA
 284+ 6473             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 284+ 6472             >
 284+ 6472 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 284+ 6473 49          >                db      "I"               // name string in 7-bit ascii, but
 284+ 6474             >                org     $-1                 // alter last byte of Name just above to set
 284+ 6473 C9          >                db      {b $} | END_BIT     // msb as name end
 284+ 6474             >
 284+ 6474 64 64       >                dw      last_NFA            // Link to previous definition Name
 284+ 6476             >I:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 284+ 6476 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
 284+ 6476             >                else
 284+ 6476 78 64       >                dw      $ + 2   ; ok        // is pointed by CFA
 284+ 6478             >                endif           ; ok        // for other definitions it "points" the correct handler
 284+ 6478             >                // Use of "; ok" to suppress "warning[fwdref]"
 284+ 6478             >
 284+ 6478             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 285+ 6478              I_Ptr:
 286+ 6478
 287+ 6478                              ldhlrp
 287+ 6478 2A 96 63    >                ld      hl,(RP_Pointer)
 288+ 647B              I_Ptr_prime
 289+ 647B 5E                           ld      e, (hl)
 290+ 647C 23                           inc     hl
 291+ 647D 56                           ld      d, (hl)
 292+ 647E D5                           push    de
 293+ 647F                              next
 293+ 647F DD E9       >                jp      (ix)
 294+ 6481
 295+ 6481              //  ______________________________________________________________________
 296+ 6481              //
 297+ 6481              // i'            -- n
 298+ 6481              // used between DO and LOOP or between DO e +LOOP to copy on top of stack
 299+ 6481              // the limit of the index-loop
 300+ 6481
 301+ 6481                              New_Def II, "I'", is_code, is_normal
 301+ 6481             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 301+ 6481             >
 301+ 6481             >                // dummy db directives used to calculate length of namec
 301+ 6481 49 27       >                db      "I'"
 301+ 6483             >len_NFA         defl    $ - temp_NFA
 301+ 6483             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 301+ 6481             >
 301+ 6481 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 301+ 6482 49 27       >                db      "I'"               // name string in 7-bit ascii, but
 301+ 6484             >                org     $-1                 // alter last byte of Name just above to set
 301+ 6483 A7          >                db      {b $} | END_BIT     // msb as name end
 301+ 6484             >
 301+ 6484 72 64       >                dw      last_NFA            // Link to previous definition Name
 301+ 6486             >II:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 301+ 6486 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
 301+ 6486             >                else
 301+ 6486 88 64       >                dw      $ + 2   ; ok        // is pointed by CFA
 301+ 6488             >                endif           ; ok        // for other definitions it "points" the correct handler
 301+ 6488             >                // Use of "; ok" to suppress "warning[fwdref]"
 301+ 6488             >
 301+ 6488             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 302+ 6488                              ldhlrp
 302+ 6488 2A 96 63    >                ld      hl,(RP_Pointer)
 303+ 648B 23                           inc     hl
 304+ 648C 23                           inc     hl
 305+ 648D 18 EC                        jr      I_Ptr_prime
 306+ 648F
 307+ 648F
 308+ 648F              //  ______________________________________________________________________
 309+ 648F              //
 310+ 648F              // digit        c n -- u 1  |  0
 311+ 648F              // convert a character c using base n
 312+ 648F              // returns a unsigned number and a true flag
 313+ 648F              // or just a false flag if the conversion fails
 314+ 648F                              New_Def DIGIT, "DIGIT", is_code, is_normal
 314+ 648F             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 314+ 648F             >
 314+ 648F             >                // dummy db directives used to calculate length of namec
 314+ 648F 44 49 47 49 >                db      "DIGIT"
 314+ 6493 54          >
 314+ 6494             >len_NFA         defl    $ - temp_NFA
 314+ 6494             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 314+ 648F             >
 314+ 648F 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 314+ 6490 44 49 47 49 >                db      "DIGIT"               // name string in 7-bit ascii, but
 314+ 6494 54          >
 314+ 6495             >                org     $-1                 // alter last byte of Name just above to set
 314+ 6494 D4          >                db      {b $} | END_BIT     // msb as name end
 314+ 6495             >
 314+ 6495 81 64       >                dw      last_NFA            // Link to previous definition Name
 314+ 6497             >DIGIT:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 314+ 6497 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
 314+ 6497             >                else
 314+ 6497 99 64       >                dw      $ + 2   ; ok        // is pointed by CFA
 314+ 6499             >                endif           ; ok        // for other definitions it "points" the correct handler
 314+ 6499             >                // Use of "; ok" to suppress "warning[fwdref]"
 314+ 6499             >
 314+ 6499             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 315+ 6499 E1                           pop     hl                  // l has the base
 316+ 649A D1                           pop     de                  // e has the digit
 317+ 649B 7B                           ld      a, e
 318+ 649C FE 60                        cp      $60                 // check if lowercase
 319+ 649E 38 02                        jr      c, Digit_Uppercase
 320+ 64A0 D6 20                            sub     $20                 // quick'n'dirty uppercase
 321+ 64A2              Digit_Uppercase:
 322+ 64A2 D6 30                        sub     $30
 323+ 64A4 38 15                        jr      c, Digit_Fail       // fail when character < "0"
 324+ 64A6 FE 0A                            cp      $0A
 325+ 64A8 38 06                            jr      c, Digit_Decimal    // perhaps is not decimal
 326+ 64AA D6 07                                sub     7                   // try hex and subtract 7
 327+ 64AC FE 0A                                cp      $0A
 328+ 64AE 38 0B                                jr      c,  Digit_Fail      // it is not hex !
 329+ 64B0
 330+ 64B0              Digit_Decimal:
 331+ 64B0                              // compare digit
 332+ 64B0 BD                           cp      l                   // compare with base
 333+ 64B1
 334+ 64B1 30 08                        jr      nc, Digit_Fail      // fail when greater than base
 335+ 64B3 5F                               ld      e, a                // digit is returned as second from TOS
 336+ 64B4 21 01 00                         ld      hl, 1
 337+ 64B7
 338+ 64B7                                  psh2
 338+ 64B7 D5          >                push    de
 338+ 64B8 E5          >                push    hl
 338+ 64B9 DD E9       >                jp      (ix)
 339+ 64BB              Digit_Fail:
 340+ 64BB 21 00 00                     ld      hl, 0
 341+ 64BE                              psh1
 341+ 64BE E5          >                push    hl
 341+ 64BF DD E9       >                jp      (ix)
 342+ 64C1
 343+ 64C1              //  ______________________________________________________________________
 344+ 64C1              //
 345+ 64C1              //  parametric uppercase routine
 346+ 64C1              //  depending on the following op-code the routine can be by-passed
 347+ 64C1              //  changing the behaviour of some callers.
 348+ 64C1              //  If it is "ret" then the system is Case-Sensitive
 349+ 64C1              //  If it is "Nop" then the system is Case-Insensitive
 350+ 64C1              //  Only A register is touched.
 351+ 64C1 00           Case_Sensitive: nop                         // Default is case-insensitive.
 352+ 64C2              Case_Upper:
 353+ 64C2 FE 61                        cp      LC_A_CHAR           // lower-case "a"
 354+ 64C4 D8                           ret     c                   // no change if A < "a"
 355+ 64C5 FE 7B                        cp      LC_Z_CHAR + 1       // lower-case "z" + 1
 356+ 64C7 D0                           ret     nc                  // no change if A > "z"
 357+ 64C8 D6 20                        sub     $20                 // Make uppercase if A in ["a".."z"]
 358+ 64CA C9                           ret
 359+ 64CB
 360+ 64CB              //  ______________________________________________________________________
 361+ 64CB              //
 362+ 64CB              //  caseon      --
 363+ 64CB              // set system case-sensitivity on
 364+ 64CB              // it patches a RET/NOP at the beginning of the uppercase-routine
 365+ 64CB                              New_Def CASEON, "CASEON", is_code, is_normal
 365+ 64CB             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 365+ 64CB             >
 365+ 64CB             >                // dummy db directives used to calculate length of namec
 365+ 64CB 43 41 53 45 >                db      "CASEON"
 365+ 64CF 4F 4E       >
 365+ 64D1             >len_NFA         defl    $ - temp_NFA
 365+ 64D1             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 365+ 64CB             >
 365+ 64CB 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 365+ 64CC 43 41 53 45 >                db      "CASEON"               // name string in 7-bit ascii, but
 365+ 64D0 4F 4E       >
 365+ 64D2             >                org     $-1                 // alter last byte of Name just above to set
 365+ 64D1 CE          >                db      {b $} | END_BIT     // msb as name end
 365+ 64D2             >
 365+ 64D2 8F 64       >                dw      last_NFA            // Link to previous definition Name
 365+ 64D4             >CASEON:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 365+ 64D4 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
 365+ 64D4             >                else
 365+ 64D4 D6 64       >                dw      $ + 2   ; ok        // is pointed by CFA
 365+ 64D6             >                endif           ; ok        // for other definitions it "points" the correct handler
 365+ 64D6             >                // Use of "; ok" to suppress "warning[fwdref]"
 365+ 64D6             >
 365+ 64D6             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 366+ 64D6 3E C9                        ld      a, $C9              // "ret"
 367+ 64D8 32 C1 64                     ld      (Case_Sensitive), a
 368+ 64DB                              next
 368+ 64DB DD E9       >                jp      (ix)
 369+ 64DD
 370+ 64DD              //  ______________________________________________________________________
 371+ 64DD              //
 372+ 64DD              //  caseoff     --
 373+ 64DD              // set system case-sensitivity on
 374+ 64DD              // it patches a RET/NOP at the beginning of the uppercase-routine
 375+ 64DD                              New_Def CASEOFF, "CASEOFF", is_code, is_normal
 375+ 64DD             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 375+ 64DD             >
 375+ 64DD             >                // dummy db directives used to calculate length of namec
 375+ 64DD 43 41 53 45 >                db      "CASEOFF"
 375+ 64E1 4F 46 46    >
 375+ 64E4             >len_NFA         defl    $ - temp_NFA
 375+ 64E4             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 375+ 64DD             >
 375+ 64DD 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 375+ 64DE 43 41 53 45 >                db      "CASEOFF"               // name string in 7-bit ascii, but
 375+ 64E2 4F 46 46    >
 375+ 64E5             >                org     $-1                 // alter last byte of Name just above to set
 375+ 64E4 C6          >                db      {b $} | END_BIT     // msb as name end
 375+ 64E5             >
 375+ 64E5 CB 64       >                dw      last_NFA            // Link to previous definition Name
 375+ 64E7             >CASEOFF:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 375+ 64E7 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
 375+ 64E7             >                else
 375+ 64E7 E9 64       >                dw      $ + 2   ; ok        // is pointed by CFA
 375+ 64E9             >                endif           ; ok        // for other definitions it "points" the correct handler
 375+ 64E9             >                // Use of "; ok" to suppress "warning[fwdref]"
 375+ 64E9             >
 375+ 64E9             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 376+ 64E9 3E 00                        ld      a, $00              // "nop"
 377+ 64EB 32 C1 64                     ld      (Case_Sensitive), a
 378+ 64EE                              next
 378+ 64EE DD E9       >                jp      (ix)
 379+ 64F0
 380+ 64F0              //  ______________________________________________________________________
 381+ 64F0              //
 382+ 64F0              //  upper       c1 -- c1 | c2
 383+ 64F0              // character on top of stack is forced to Uppercase.
 384+ 64F0                              New_Def UPPER, "UPPER", is_code, is_normal
 384+ 64F0             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 384+ 64F0             >
 384+ 64F0             >                // dummy db directives used to calculate length of namec
 384+ 64F0 55 50 50 45 >                db      "UPPER"
 384+ 64F4 52          >
 384+ 64F5             >len_NFA         defl    $ - temp_NFA
 384+ 64F5             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 384+ 64F0             >
 384+ 64F0 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 384+ 64F1 55 50 50 45 >                db      "UPPER"               // name string in 7-bit ascii, but
 384+ 64F5 52          >
 384+ 64F6             >                org     $-1                 // alter last byte of Name just above to set
 384+ 64F5 D2          >                db      {b $} | END_BIT     // msb as name end
 384+ 64F6             >
 384+ 64F6 DD 64       >                dw      last_NFA            // Link to previous definition Name
 384+ 64F8             >UPPER:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 384+ 64F8 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
 384+ 64F8             >                else
 384+ 64F8 FA 64       >                dw      $ + 2   ; ok        // is pointed by CFA
 384+ 64FA             >                endif           ; ok        // for other definitions it "points" the correct handler
 384+ 64FA             >                // Use of "; ok" to suppress "warning[fwdref]"
 384+ 64FA             >
 384+ 64FA             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 385+ 64FA E1                           pop     hl
 386+ 64FB 7D                           ld      a, l
 387+ 64FC CD C2 64                     call    Case_Upper
 388+ 64FF 6F                           ld      l, a
 389+ 6500
 390+ 6500                              psh1
 390+ 6500 E5          >                push    hl
 390+ 6501 DD E9       >                jp      (ix)
 391+ 6503
 392+ 6503              //  ______________________________________________________________________
 393+ 6503              //
 394+ 6503              // (find)       addr voc -- addr 0 | cfa b 1
 395+ 6503              // vocabulary search,
 396+ 6503              // - voc is starting word's NFA
 397+ 6503              // - addr is the string to be searched for
 398+ 6503              // On success, it returns the CFA of found word, the first NFA byte
 399+ 6503              // (which contains length and some flags) and a true flag.
 400+ 6503              // On fail, a false flag  (no more: leaves addr unchanged)
 401+ 6503                              New_Def C_FIND, "(FIND)", is_code, is_normal
 401+ 6503             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 401+ 6503             >
 401+ 6503             >                // dummy db directives used to calculate length of namec
 401+ 6503 28 46 49 4E >                db      "(FIND)"
 401+ 6507 44 29       >
 401+ 6509             >len_NFA         defl    $ - temp_NFA
 401+ 6509             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 401+ 6503             >
 401+ 6503 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 401+ 6504 28 46 49 4E >                db      "(FIND)"               // name string in 7-bit ascii, but
 401+ 6508 44 29       >
 401+ 650A             >                org     $-1                 // alter last byte of Name just above to set
 401+ 6509 A9          >                db      {b $} | END_BIT     // msb as name end
 401+ 650A             >
 401+ 650A F0 64       >                dw      last_NFA            // Link to previous definition Name
 401+ 650C             >C_FIND:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 401+ 650C ~           >                dw      runcode ; ok        // for primitive definitions  actual code
 401+ 650C             >                else
 401+ 650C 0E 65       >                dw      $ + 2   ; ok        // is pointed by CFA
 401+ 650E             >                endif           ; ok        // for other definitions it "points" the correct handler
 401+ 650E             >                // Use of "; ok" to suppress "warning[fwdref]"
 401+ 650E             >
 401+ 650E             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 402+ 650E                                                              // de has dictionary pointer
 403+ 650E D1                               pop     de
 404+ 650F              Find_VocabularyLoop:
 405+ 650F E1                               pop     hl                  // string pointer to search for
 406+ 6510 E5                               push    hl                  // keep it on stack too for the end.
 407+ 6511 1A                               ld      a, (de)             // save NFA length byte
 408+ 6512 08                               ex      af,af'              // for later use (!)
 409+ 6513 1A                               ld      a, (de)             // reload NFA length byte
 410+ 6514 AE                               xor     (hl)                // check if same length
 411+ 6515 E6 3F                            and     $3F                 // by resetting 3 high bits (flags)
 412+ 6517                                  // word an text haven't the same length, skip to next vocabulary entry
 413+ 6517 20 2C                            jr      nz, Find_DifferentLenght
 414+ 6519
 415+ 6519              Find_ThisWord:  // begin loop
 416+ 6519 23                                   inc     hl
 417+ 651A 13                                   inc     de
 418+ 651B 1A                                   ld      a, (de)
 419+ 651C                                      // case insensitive option - begin
 420+ 651C C5                                   push    bc
 421+ 651D E6 80                                and     $80                 // split A in msb and the rest
 422+ 651F 47                                   ld      b, a
 423+ 6520 1A                                   ld      a, (de)
 424+ 6521 E6 7F                                and     $7F                 // ... the rest (lower 7 bits)
 425+ 6523 CD C1 64                             call    Case_Sensitive      // uppercase routine
 426+ 6526 4F                                   ld      c, a
 427+ 6527 7E                                   ld      a, (hl)
 428+ 6528 CD C1 64                             call    Case_Sensitive      // uppercase routine
 429+ 652B A9                                   xor     c
 430+ 652C A8                                   xor     b
 431+ 652D C1                                   pop     bc
 432+ 652E                                      // case insensitive option - end
 433+ 652E 87                                   add     a                   // ignore msb during compare
 434+ 652F 20 12                                jr      nz, Find_DidntMatch  // jump if doesn't match (*)
 435+ 6531
 436+ 6531                                  // loop back until last byte msb is found set
 437+ 6531                                  // that bit marks the ending char of this word
 438+ 6531 30 E6                            jr      nc, Find_ThisWord
 439+ 6533
 440+ 6533                                  // match found !
 441+ 6533 21 03 00                             ld      hl, 3               // 3 bytes for CFA offset to skip LFA
 442+ 6536 19                                   add     hl, de
 443+ 6537 E3                                   ex      (sp), hl            // CFA on stack and drop addr
 444+ 6538 08                                   ex      af, af'             // retrieve NFA byte (!)
 445+ 6539 5F                                   ld      e, a
 446+ 653A 16 00                                ld      d, 0
 447+ 653C
 448+ 653C
 449+ 653C 21 01 00                             ld      hl, 1
 450+ 653F                                      psh2
 450+ 653F D5          >                push    de
 450+ 6540 E5          >                push    hl
 450+ 6541 DD E9       >                jp      (ix)
 451+ 6543
 452+ 6543              Find_DidntMatch: // didn't match (*)
 453+ 6543 38 05                            jr      c,  Find_WordEnd   // jump if not end of word (**)
 454+ 6545
 455+ 6545              Find_DifferentLenght:
 456+ 6545                              // consume chars until the end of the word
 457+ 6545                              // that is last byte msb is found set
 458+ 6545 13                               inc     de
 459+ 6546 1A                               ld      a, (de)
 460+ 6547 87                               add     a, a
 461+ 6548 30 FB                        jr      nc, Find_DifferentLenght
 462+ 654A
 463+ 654A              Find_WordEnd:   // word-end  found (**)
 464+ 654A                              // take LFA and use it
 465+ 654A 13                           inc     de
 466+ 654B EB                           ex      de, hl
 467+ 654C 5E                           ld      e, (hl)
 468+ 654D 23                           inc     hl
 469+ 654E 56                           ld      d, (hl)
 470+ 654F 7A                           ld      a, d
 471+ 6550 B3                           or      e
 472+ 6551
 473+ 6551                          // loop until end of vocabulary
 474+ 6551 20 BC                    jr      nz, Find_VocabularyLoop
 475+ 6553
 476+ 6553 E1                       pop     hl              // with this, it leaves addr unchanged
 477+ 6554 21 00 00                 ld      hl, FALSE_FLAG
 478+ 6557
 479+ 6557                          psh1
 479+ 6557 E5          >                push    hl
 479+ 6558 DD E9       >                jp      (ix)
 480+ 655A
 481+ 655A              //  ______________________________________________________________________
 482+ 655A              //
 483+ 655A              // enclose      a c -- a  n1 n2 n3
 484+ 655A              // starting from a, using delimiter c, determines the offsets:
 485+ 655A              //   n1   the first character non-delimiter
 486+ 655A              //   n2   the first delimiter after the text
 487+ 655A              //   n3   the first character non enclosed.
 488+ 655A              // This procedure does not go beyond a 'nul' ASCII (0x00) that represents
 489+ 655A              // an uncoditional delimiter.
 490+ 655A              // Examples:
 491+ 655A              //   i:	c  c  x  x  x  c  x	 -- 2  5  6
 492+ 655A              //  ii:	c  c  x  x  x  'nul' -- 2  5  5
 493+ 655A              // iii:	c  c  'nul'          -- 2  3  2
 494+ 655A                              New_Def ENCLOSE, "ENCLOSE", is_code, is_normal
 494+ 655A             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 494+ 655A             >
 494+ 655A             >                // dummy db directives used to calculate length of namec
 494+ 655A 45 4E 43 4C >                db      "ENCLOSE"
 494+ 655E 4F 53 45    >
 494+ 6561             >len_NFA         defl    $ - temp_NFA
 494+ 6561             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 494+ 655A             >
 494+ 655A 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 494+ 655B 45 4E 43 4C >                db      "ENCLOSE"               // name string in 7-bit ascii, but
 494+ 655F 4F 53 45    >
 494+ 6562             >                org     $-1                 // alter last byte of Name just above to set
 494+ 6561 C5          >                db      {b $} | END_BIT     // msb as name end
 494+ 6562             >
 494+ 6562 03 65       >                dw      last_NFA            // Link to previous definition Name
 494+ 6564             >ENCLOSE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 494+ 6564 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
 494+ 6564             >                else
 494+ 6564 66 65       >                dw      $ + 2   ; ok        // is pointed by CFA
 494+ 6566             >                endif           ; ok        // for other definitions it "points" the correct handler
 494+ 6566             >                // Use of "; ok" to suppress "warning[fwdref]"
 494+ 6566             >
 494+ 6566             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 495+ 6566 D1                           pop     de                  //  e has the character
 496+ 6567 E1                           pop     hl                  // hl has the string address
 497+ 6568 E5                           push    hl
 498+ 6569 7B                           ld      a, e
 499+ 656A 11 FF FF                     ld      de, -1              // let's start from -1
 500+ 656D 2B                           dec     hl
 501+ 656E              Enclose_NonDelimiter:
 502+ 656E                              // find first non delimiter
 503+ 656E 23                               inc     hl
 504+ 656F 13                               inc     de
 505+ 6570 BE                               cp      (hl)
 506+ 6571 28 FB                        jr      z, Enclose_NonDelimiter
 507+ 6573 D5                           push    de
 508+ 6574
 509+ 6574 C5                           push    bc                  // save Instruction Pointer
 510+ 6575
 511+ 6575 4F                           ld      c, a                // save char
 512+ 6576 7E                           ld      a, (hl)
 513+ 6577 A7                           and     a                   // stop if 0x00
 514+ 6578 20 07                        jr      nz, Enclose_NextChar
 515+ 657A
 516+ 657A                              /// case iii. no more character in string
 517+ 657A C1                               pop     bc                  // restore Instruction Pointer
 518+ 657B 13                               inc     de
 519+ 657C D5                               push    de
 520+ 657D 1B                               dec     de
 521+ 657E D5                               push    de
 522+ 657F                                  next
 522+ 657F DD E9       >                jp      (ix)
 523+ 6581              Enclose_NextChar:
 524+ 6581 79                               ld      a, c
 525+ 6582 23                               inc     hl
 526+ 6583 13                               inc     de
 527+ 6584 BE                               cp      (hl)
 528+ 6585 20 06                            jr      nz, Enclose_NonSeparator
 529+ 6587
 530+ 6587                                      // case i. first non enclosed
 531+ 6587 C1                                   pop     bc                  // restore Instruction Pointer
 532+ 6588 D5                                   push    de
 533+ 6589 13                                   inc     de
 534+ 658A D5                                   push    de
 535+ 658B                                      next
 535+ 658B DD E9       >                jp      (ix)
 536+ 658D              Enclose_NonSeparator:
 537+ 658D 7E                               ld      a, (hl)
 538+ 658E A7                               and     a
 539+ 658F 20 F0                        jr      nz, Enclose_NextChar
 540+ 6591
 541+ 6591                              // case ii. separator & terminator
 542+ 6591 C1                           pop     bc                  // restore Instruction Pointer
 543+ 6592 D5                           push    de
 544+ 6593 D5                           push    de
 545+ 6594                              next
 545+ 6594 DD E9       >                jp      (ix)
 546+ 6596
 547+ 6596              //  ______________________________________________________________________
 548+ 6596              //
 549+ 6596              // (map)        a2 a1 n c1 -- c2
 550+ 6596              // translate character c1 using mapping string a2 and a2
 551+ 6596              // if c1 is not present within string a1 then
 552+ 6596              // c2 = c2 if it is not translated. n is the length of both a1 and a2.
 553+ 6596                              New_Def C_MAP, "(MAP)", is_code, is_normal
 553+ 6596             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 553+ 6596             >
 553+ 6596             >                // dummy db directives used to calculate length of namec
 553+ 6596 28 4D 41 50 >                db      "(MAP)"
 553+ 659A 29          >
 553+ 659B             >len_NFA         defl    $ - temp_NFA
 553+ 659B             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 553+ 6596             >
 553+ 6596 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 553+ 6597 28 4D 41 50 >                db      "(MAP)"               // name string in 7-bit ascii, but
 553+ 659B 29          >
 553+ 659C             >                org     $-1                 // alter last byte of Name just above to set
 553+ 659B A9          >                db      {b $} | END_BIT     // msb as name end
 553+ 659C             >
 553+ 659C 5A 65       >                dw      last_NFA            // Link to previous definition Name
 553+ 659E             >C_MAP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 553+ 659E ~           >                dw      runcode ; ok        // for primitive definitions  actual code
 553+ 659E             >                else
 553+ 659E A0 65       >                dw      $ + 2   ; ok        // is pointed by CFA
 553+ 65A0             >                endif           ; ok        // for other definitions it "points" the correct handler
 553+ 65A0             >                // Use of "; ok" to suppress "warning[fwdref]"
 553+ 65A0             >
 553+ 65A0             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 554+ 65A0 D9                           exx
 555+ 65A1 E1                           pop     hl
 556+ 65A2 7D                           ld      a, l
 557+ 65A3 C1                           pop     bc
 558+ 65A4 E1                           pop     hl
 559+ 65A5 50                           ld      d, b
 560+ 65A6 59                           ld      e, c
 561+ 65A7 ED B1                        cpir
 562+ 65A9 E1                           pop     hl
 563+ 65AA 20 05                        jr      nz, C_Map_Then
 563+ 65AC
 564+ 65AC 19                               add     hl, de
 565+ 65AD 2B                               dec     hl
 566+ 65AE ED 42                            sbc     hl, bc
 567+ 65B0 7E                               ld      a, (hl)
 568+ 65B1              C_Map_Then:
 569+ 65B1 6F                           ld      l, a
 570+ 65B2 26 00                        ld      h, 0
 571+ 65B4 E5                           push    hl
 572+ 65B5 D9                           exx
 573+ 65B6                              next
 573+ 65B6 DD E9       >                jp      (ix)
 574+ 65B8
 575+ 65B8              //  ______________________________________________________________________
 576+ 65B8              //
 577+ 65B8              // (compare)    a1 a2 n -- b
 578+ 65B8              // this word performs a lexicographic compare of n bytes of text at address a1
 579+ 65B8              // with n bytes of text at address a2. It returns numeric a value:
 580+ 65B8              //  0 : if strings are equal
 581+ 65B8              // +1 : if string at a1 greater than string at a2
 582+ 65B8              // -1 : if string at a1 less than string at a2
 583+ 65B8              // strings can be 256 bytes in length at most.
 584+ 65B8                              New_Def C_COMPARE, "(COMPARE)", is_code, is_normal
 584+ 65B8             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 584+ 65B8             >
 584+ 65B8             >                // dummy db directives used to calculate length of namec
 584+ 65B8 28 43 4F 4D >                db      "(COMPARE)"
 584+ 65BC 50 41 52 45 >
 584+ 65C0 29          >
 584+ 65C1             >len_NFA         defl    $ - temp_NFA
 584+ 65C1             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 584+ 65B8             >
 584+ 65B8 89          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 584+ 65B9 28 43 4F 4D >                db      "(COMPARE)"               // name string in 7-bit ascii, but
 584+ 65BD 50 41 52 45 >
 584+ 65C1 29          >
 584+ 65C2             >                org     $-1                 // alter last byte of Name just above to set
 584+ 65C1 A9          >                db      {b $} | END_BIT     // msb as name end
 584+ 65C2             >
 584+ 65C2 96 65       >                dw      last_NFA            // Link to previous definition Name
 584+ 65C4             >C_COMPARE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 584+ 65C4 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
 584+ 65C4             >                else
 584+ 65C4 C6 65       >                dw      $ + 2   ; ok        // is pointed by CFA
 584+ 65C6             >                endif           ; ok        // for other definitions it "points" the correct handler
 584+ 65C6             >                // Use of "; ok" to suppress "warning[fwdref]"
 584+ 65C6             >
 584+ 65C6             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 585+ 65C6 D9                           exx
 586+ 65C7 E1                           pop     hl                  // Number of bytes
 587+ 65C8 7D                           ld      a, l
 588+ 65C9 E1                           pop     hl                  // hl points string a2
 589+ 65CA D1                           pop     de                  // hl points string a1
 590+ 65CB              //              push    bc                  // Instruction pointer on stack
 591+ 65CB 47                           ld      b, a
 592+ 65CC              C_Compare_Loop:
 593+ 65CC 7E                               ld      a, (hl)
 594+ 65CD CD C1 64                         call    Case_Sensitive
 595+ 65D0 4F                               ld      c, a
 596+ 65D1 1A                               ld      a, (de)
 597+ 65D2 CD C1 64                         call    Case_Sensitive
 598+ 65D5 B9                               cp      c
 599+ 65D6 13                               inc     de
 600+ 65D7 23                               inc     hl
 601+ 65D8 28 0E                            jr      z, C_Compare_Equal
 602+ 65DA 38 05                                jr      c, C_Compare_NotLessThan  // If LessThan
 603+ 65DC 21 01 00                                 ld      hl, 1               // a1 gt a2
 604+ 65DF 18 03                                jr      C_Compare_Then      // Else
 605+ 65E1              C_Compare_NotLessThan:
 606+ 65E1 21 FF FF                                 ld      hl, -1              // a1 lt a2
 607+ 65E4              C_Compare_Then:                                 // Endif
 608+ 65E4              //                      pop     bc              // restore Instruction Pointer
 609+ 65E4 E5                                   push    hl
 610+ 65E5 D9                                   exx
 611+ 65E6
 612+ 65E6                                      next
 612+ 65E6 DD E9       >                jp      (ix)
 613+ 65E8
 614+ 65E8              C_Compare_Equal:
 615+ 65E8 10 E2                        djnz    C_Compare_Loop
 616+ 65EA 21 00 00                     ld      hl, 0               // a1 eq a2
 617+ 65ED              //              pop     bc                  // restore Instruction Pointer
 618+ 65ED E5                           push    hl
 619+ 65EE D9                           exx
 620+ 65EF
 621+ 65EF                              next
 621+ 65EF DD E9       >                jp      (ix)
 622+ 65F1
 623+ 65F1              //  ______________________________________________________________________
 624+ 65F1              //
 625+ 65F1              // emitc        c --
 626+ 65F1              // low level emit, calls ROM routine at #10 to send a character to
 627+ 65F1              // the the current channel (see SELECT to change stream-channel)
 628+ 65F1                              New_Def EMITC, "EMITC", is_code, is_normal
 628+ 65F1             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 628+ 65F1             >
 628+ 65F1             >                // dummy db directives used to calculate length of namec
 628+ 65F1 45 4D 49 54 >                db      "EMITC"
 628+ 65F5 43          >
 628+ 65F6             >len_NFA         defl    $ - temp_NFA
 628+ 65F6             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 628+ 65F1             >
 628+ 65F1 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 628+ 65F2 45 4D 49 54 >                db      "EMITC"               // name string in 7-bit ascii, but
 628+ 65F6 43          >
 628+ 65F7             >                org     $-1                 // alter last byte of Name just above to set
 628+ 65F6 C3          >                db      {b $} | END_BIT     // msb as name end
 628+ 65F7             >
 628+ 65F7 B8 65       >                dw      last_NFA            // Link to previous definition Name
 628+ 65F9             >EMITC:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 628+ 65F9 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
 628+ 65F9             >                else
 628+ 65F9 FB 65       >                dw      $ + 2   ; ok        // is pointed by CFA
 628+ 65FB             >                endif           ; ok        // for other definitions it "points" the correct handler
 628+ 65FB             >                // Use of "; ok" to suppress "warning[fwdref]"
 628+ 65FB             >
 628+ 65FB             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 629+ 65FB E1                           pop     hl
 630+ 65FC 7D                           ld      a, l
 631+ 65FD              Emitc_Ptr:
 632+ 65FD C5                           push    bc
 633+ 65FE DD E5                        push    ix
 634+ 6600 D7                           rst     $10
 635+ 6601 DD E1                        pop     ix
 636+ 6603 C1                           pop     bc
 637+ 6604 3E FF                        ld      a, 255            // max possible
 638+ 6606 32 8C 5C                     ld      (SCR_CT), a
 639+ 6609
 640+ 6609                              next
 640+ 6609 DD E9       >                jp      (ix)
 641+ 660B
 642+ 660B              Emitc_Vec:
 643+ 660B 50 66                        dw      C_Emit_Printable  // comma
 644+ 660D 56 66                        dw      C_Emit_Bel        // bel
 645+ 660F 50 66                        dw      C_Emit_Printable  // bs
 646+ 6611 6B 66                        dw      C_Emit_Tab        // tab
 647+ 6613 50 66                        dw      C_Emit_Printable  // cr
 648+ 6615 71 66                        dw      C_Emit_NL         // lf (unix newline)
 649+ 6617 50 66                        dw      C_Emit_Printable  // blank
 650+ 6619 50 66                        dw      C_Emit_Printable  // blank
 651+ 661B
 652+ 661B              Emit_Selector_Start:
 653+ 661B 06                           db      $06                 // comma
 654+ 661C 07                           db      $07                 // bel
 655+ 661D 08                           db      $08                 // bs
 656+ 661E 09                           db      $09                 // tab
 657+ 661F 0D                           db      $0D                 // cr
 658+ 6620 0A                           db      $0A                 // lf (unix newline)
 659+ 6621 20                           db      $20
 660+ 6622              Emit_Selector_End:
 661+ 6622 20                           db      $20
 662+ 6623
 663+ 6623              //  ______________________________________________________________________
 664+ 6623              //
 665+ 6623              // (?emit)      c1 -- c2 | c1
 666+ 6623              // decode a character to be sent via EMIT
 667+ 6623              // search first the Emit_Selector table, if found jump to the corresponding routine in Emit_Vector
 668+ 6623              // the routine should resolve anything and convert the character anyway.
 669+ 6623                              New_Def C_EMIT, "(?EMIT)", is_code, is_normal
 669+ 6623             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 669+ 6623             >
 669+ 6623             >                // dummy db directives used to calculate length of namec
 669+ 6623 28 3F 45 4D >                db      "(?EMIT)"
 669+ 6627 49 54 29    >
 669+ 662A             >len_NFA         defl    $ - temp_NFA
 669+ 662A             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 669+ 6623             >
 669+ 6623 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 669+ 6624 28 3F 45 4D >                db      "(?EMIT)"               // name string in 7-bit ascii, but
 669+ 6628 49 54 29    >
 669+ 662B             >                org     $-1                 // alter last byte of Name just above to set
 669+ 662A A9          >                db      {b $} | END_BIT     // msb as name end
 669+ 662B             >
 669+ 662B F1 65       >                dw      last_NFA            // Link to previous definition Name
 669+ 662D             >C_EMIT:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 669+ 662D ~           >                dw      runcode ; ok        // for primitive definitions  actual code
 669+ 662D             >                else
 669+ 662D 2F 66       >                dw      $ + 2   ; ok        // is pointed by CFA
 669+ 662F             >                endif           ; ok        // for other definitions it "points" the correct handler
 669+ 662F             >                // Use of "; ok" to suppress "warning[fwdref]"
 669+ 662F             >
 669+ 662F             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 670+ 662F D1                           pop     de
 671+ 6630 7B                           ld      a, e                //  de has c1
 672+ 6631 E6 7F                        and     $7F                 // 7-bit ascii only
 673+ 6633 C5                           push    bc                  // save Instruction Pointer
 674+ 6634 01 08 00                     ld      bc, Emit_Selector_End - Emit_Selector_Start + 1
 675+ 6637 21 22 66                     ld      hl, Emit_Selector_End
 676+ 663A ED B9                        cpdr                        // search for c1 in Emit_Selector table, backward
 677+ 663C 20 0B                        jr      nz, C_Emit_Not_Found
 678+ 663E                                  // Found then decode it
 679+ 663E 21 0B 66                         ld      hl, Emitc_Vec
 680+ 6641 09                               add     hl, bc
 681+ 6642 09                               add     hl, bc
 682+ 6643 5E                               ld      e, (hl)
 683+ 6644 23                               inc     hl
 684+ 6645 56                               ld      d, (hl)
 685+ 6646 EB                               ex      de, hl
 686+ 6647 C1                               pop     bc                  // restore Instruction Pointer
 687+ 6648 E9                               jp      (hl)                // one of the following labels
 688+ 6649              C_Emit_Not_Found:
 689+ 6649 C1                           pop     bc                  // restore Instruction Pointer
 690+ 664A FE 20                        cp      BLANK_CHAR          // cp $20 non-printable check
 691+ 664C 30 02                        jr      nc, C_Emit_Printable
 692+ 664E 3E 00                            ld      a, NUL_CHAR         // NUL is never "printed"
 693+ 6650              C_Emit_Printable:
 694+ 6650 6F                           ld      l, a
 695+ 6651 26 00                        ld      h, 0
 696+ 6653
 697+ 6653                              psh1
 697+ 6653 E5          >                push    hl
 697+ 6654 DD E9       >                jp      (ix)
 698+ 6656
 699+ 6656              C_Emit_Bel:
 700+ 6656 C5                           push    bc                  // save Instruction Pointer
 701+ 6657 11 00 01                     ld      de, $0100
 702+ 665A 21 00 02                     ld      hl, $0200
 703+ 665D DD E5                        push    ix                  // save Next Pointer
 704+ 665F CD B6 03                     call    $03B6               // bleep Standard-ROM routine
 705+ 6662 DD E1                        pop     ix                  // restore Next Pointer
 706+ 6664 C1                           pop     bc                  // restore Instruction Pointer
 707+ 6665 21 00 00                     ld      hl, NUL_CHAR
 708+ 6668
 709+ 6668                              psh1
 709+ 6668 E5          >                push    hl
 709+ 6669 DD E9       >                jp      (ix)
 710+ 666B
 711+ 666B 21 06 00     C_Emit_Tab:     ld      hl, COMMA_CHAR
 712+ 666E
 713+ 666E                              psh1
 713+ 666E E5          >                push    hl
 713+ 666F DD E9       >                jp      (ix)
 714+ 6671
 715+ 6671 21 0D 00     C_Emit_NL       ld      hl, CR_CHAR           // 0x0A --> 0x0D  à la Spectrum
 716+ 6674
 717+ 6674                              psh1
 717+ 6674 E5          >                push    hl
 717+ 6675 DD E9       >                jp      (ix)
 718+ 6677
 719+ 6677              //  ______________________________________________________________________
 720+ 6677
 721+ 6677              Key_Table:
 722+ 6677 E2                           db      $E2                 //  0: STOP  --> SYMBOL+A : ~
 723+ 6678 C3                           db      $C3                 //  1: NOT   --> SYMBOL+S : |
 724+ 6679 CD                           db      $CD                 //  2: STEP  --> SYMBOl+D : //
 725+ 667A CC                           db      $CC                 //  3: TO    --> SYMBOL+F : {
 726+ 667B CB                           db      $CB                 //  4: THEN  --> SYMBOL+G : }
 727+ 667C C6                           db      $C6                 //  5: AND   --> SYMBOL+Y : [
 728+ 667D C5                           db      $C5                 //  6: OR    --> SYMBOL+U : ]
 729+ 667E AC                           db      $AC                 //  7: AT    --> SYMBOL+I : (C) copyright symbol
 730+ 667F C7                           db      $C7                 //  8: <=    --> same as SHIFT-1 [EDIT]
 731+ 6680 C8                           db      $C8                 //  9: >=    --> same as SHIFT-0 [BACKSPACE]
 732+ 6681 C9                           db      $C9                 // 10: <>    --> SYMBOL+W is the same as CAPS (toggle) SHIFT+2
 733+ 6682              Key_MapTo:
 734+ 6682 06                           db      $06                 // 10: SYMBOL+W is the same as CAPS (toggle) SHIFT+2
 735+ 6683 0C                           db      $0C                 //  9: same as SHIFT-0 [BACKSPACE]
 736+ 6684 07                           db      $07                 //  8: same as SHIFT-1 [EDIT]
 737+ 6685 7F                           db      $7F                 //  7: SYMBOL+I : (C) copyright symbol
 738+ 6686 5D                           db      $5D                 //  6: SYMBOL+U : ]
 739+ 6687 5B                           db      $5B                 //  5: SYMBOL+Y : [
 740+ 6688 7D                           db      $7D                 //  4: SYMBOL+G : }
 741+ 6689 7B                           db      $7B                 //  3: SYMBOL+F : {
 742+ 668A 5C                           db      $5C                 //  2: SYMBOl+D : //
 743+ 668B 7C                           db      $7C                 //  1: SYMBOL+S : |
 744+ 668C 7E                           db      $7E                 //  0: SYMBOL+A : ~
 745+ 668D
 746+ 668D              //  ______________________________________________________________________
 747+ 668D              //
 748+ 668D              // key          -- c
 749+ 668D              // wait for a keypress
 750+ 668D              // This definition need Standard ROM Interrupt to be served
 751+ 668D
 752+ 668D                              New_Def KEY, "KEY", is_code, is_normal
 752+ 668D             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 752+ 668D             >
 752+ 668D             >                // dummy db directives used to calculate length of namec
 752+ 668D 4B 45 59    >                db      "KEY"
 752+ 6690             >len_NFA         defl    $ - temp_NFA
 752+ 6690             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 752+ 668D             >
 752+ 668D 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 752+ 668E 4B 45 59    >                db      "KEY"               // name string in 7-bit ascii, but
 752+ 6691             >                org     $-1                 // alter last byte of Name just above to set
 752+ 6690 D9          >                db      {b $} | END_BIT     // msb as name end
 752+ 6691             >
 752+ 6691 23 66       >                dw      last_NFA            // Link to previous definition Name
 752+ 6693             >KEY:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 752+ 6693 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
 752+ 6693             >                else
 752+ 6693 95 66       >                dw      $ + 2   ; ok        // is pointed by CFA
 752+ 6695             >                endif           ; ok        // for other definitions it "points" the correct handler
 752+ 6695             >                // Use of "; ok" to suppress "warning[fwdref]"
 752+ 6695             >
 752+ 6695             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 753+ 6695
 754+ 6695 C5                           push    bc                  // save Instruction Pointer
 755+ 6696 DD E5                        push    ix
 756+ 6698
 757+ 6698 ED 73 92 63                  ld      (SP_Saved), sp      // be sure to not to be paged out.
 758+ 669C 31 61 63                     ld      sp, Cold_origin - 5 // maybe $4000 in the future...
 759+ 669F FD CB 01 AE                  res     5, (iy + 1)         // FLAGS (5C3A+1)
 760+ 66A3
 761+ 66A3              Key_Wait:
 762+ 66A3 76                               halt
 763+ 66A4 3E 02                            ld      a, 2                // selec channel #2 (Upper Video)
 764+ 66A6 CD 01 16                         call    $1601               // SELECT Standard-ROM Routine
 765+ 66A9
 766+ 66A9                                  // software-flash: flips face every 320 ms
 767+ 66A9 3E 10                            ld      a, $10              // Timing based
 768+ 66AB FD A6 3E                         and     (iy + $3E)          // FRAMES (5C3A+3E)
 769+ 66AE
 770+ 66AE 3A 8C 63                         ld      a, (Block_Face)     // see origin.asm
 771+ 66B1 20 0C                            jr      nz, Key_Cursor
 772+ 66B3 3A 8D 63                             ld      a, (Half_Face)      // see origin.asm
 773+ 66B6 FD CB 30 5E                          bit     3, (iy + $30)       // FLAGS2 (5C3A+$30) that is CAPS-LOCK
 774+ 66BA 28 03                                jr      z, Key_Cursor
 775+ 66BC 3A 8E 63                                 ld      a, (Underscore_Face) // see origin
 776+ 66BF              Key_Cursor:
 777+ 66BF D7                               rst     $10
 778+ 66C0 3E 08                            ld      a, BACKSPACE_CHAR    // backspace
 779+ 66C2 D7                               rst     $10
 780+ 66C3
 781+ 66C3 FD CB 01 6E                      bit     5, (iy + 1)         // FLAGS (5C3A+1)
 782+ 66C7 28 DA                        jr      z, Key_Wait
 783+ 66C9
 784+ 66C9 76                           halt    // this is to sync flashing cursor.
 785+ 66CA
 786+ 66CA 3E 20                        ld      a, BLANK_CHAR       // space to blank cursor
 787+ 66CC D7                           rst     $10
 788+ 66CD 3E 08                        ld      a, BACKSPACE_CHAR   // backspace
 789+ 66CF D7                           rst     $10
 790+ 66D0 3A 08 5C                     ld      a, (LASTK)          // get typed character (5C08)
 791+ 66D3
 792+ 66D3                              // decode character from above table
 793+ 66D3 21 77 66                     ld      hl, Key_Table
 794+ 66D6 01 0B 00                     ld      bc, $000B
 795+ 66D9 ED B1                        cpir
 796+ 66DB 20 05                        jr      nz, Key_DontMap
 797+ 66DD 21 82 66                         ld      hl, Key_MapTo
 798+ 66E0 09                               add     hl, bc
 799+ 66E1 7E                               ld      a, (hl)
 800+ 66E2 FE 06        Key_DontMap:    cp      $06                 // CAPS-LOCK management
 801+ 66E4 20 09                        jr      nz, Key_NoCapsLock
 802+ 66E6 21 6A 5C                         ld      hl, $5C6A           // FLAGS2
 803+ 66E9 7E                               ld      a, (hl)
 804+ 66EA EE 08                            xor     $08
 805+ 66EC 77                               ld      (hl), a
 806+ 66ED 3E 00                            ld      a, NUL_CHAR
 807+ 66EF 6F           Key_NoCapsLock: ld      l, a
 808+ 66F0 26 00                        ld      h, 0                // Prepare TOS
 809+ 66F2
 810+ 66F2 3A 48 5C                     ld      a, ($5C48)          // BORDCR system variable
 811+ 66F5 1F                           rra
 812+ 66F6 1F                           rra
 813+ 66F7 1F                           rra
 814+ 66F8 F6 18                        or      $18                 // quick'n'dirty click
 815+ 66FA D3 FE                        out     ($fe), a
 816+ 66FC 06 00                        ld      b, 0
 817+ 66FE 10 FE                        djnz    $                   // wait loop
 818+ 6700 EE 18                        xor     $18
 819+ 6702 D3 FE                        out     ($fe), a
 820+ 6704
 821+ 6704 ED 7B 92 63                  ld      sp, (SP_Saved)
 822+ 6708
 823+ 6708 DD E1                        pop     ix
 824+ 670A C1                           pop     bc                  // Restore Instruction Pointer
 825+ 670B
 826+ 670B                              psh1
 826+ 670B E5          >                push    hl
 826+ 670C DD E9       >                jp      (ix)
 827+ 670E
 828+ 670E              //  ______________________________________________________________________
 829+ 670E              //
 830+ 670E              // ?terminal    -- FALSE | TRUE
 831+ 670E              // test for BREAK keypress
 832+ 670E                              New_Def QTERMINAL, "?TERMINAL", is_code, is_normal
 832+ 670E             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 832+ 670E             >
 832+ 670E             >                // dummy db directives used to calculate length of namec
 832+ 670E 3F 54 45 52 >                db      "?TERMINAL"
 832+ 6712 4D 49 4E 41 >
 832+ 6716 4C          >
 832+ 6717             >len_NFA         defl    $ - temp_NFA
 832+ 6717             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 832+ 670E             >
 832+ 670E 89          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 832+ 670F 3F 54 45 52 >                db      "?TERMINAL"               // name string in 7-bit ascii, but
 832+ 6713 4D 49 4E 41 >
 832+ 6717 4C          >
 832+ 6718             >                org     $-1                 // alter last byte of Name just above to set
 832+ 6717 CC          >                db      {b $} | END_BIT     // msb as name end
 832+ 6718             >
 832+ 6718 8D 66       >                dw      last_NFA            // Link to previous definition Name
 832+ 671A             >QTERMINAL:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 832+ 671A ~           >                dw      runcode ; ok        // for primitive definitions  actual code
 832+ 671A             >                else
 832+ 671A 1C 67       >                dw      $ + 2   ; ok        // is pointed by CFA
 832+ 671C             >                endif           ; ok        // for other definitions it "points" the correct handler
 832+ 671C             >                // Use of "; ok" to suppress "warning[fwdref]"
 832+ 671C             >
 832+ 671C             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 833+ 671C 21 00 00                     ld      hl, 0
 834+ 671F ED 73 92 63                  ld      (SP_Saved), sp
 835+ 6723 31 61 63                     ld      sp, Cold_origin - 5
 836+ 6726 CD 54 1F                     call    $1F54
 837+ 6729 ED 7B 92 63                  ld      sp, (SP_Saved)
 838+ 672D
 839+ 672D 38 01                        jr      c, QTerminal_NoBreak
 840+ 672F 2B                               dec     hl                  // quick TRUE_FLAG
 841+ 6730              QTerminal_NoBreak:
 842+ 6730
 843+ 6730                              psh1
 843+ 6730 E5          >                push    hl
 843+ 6731 DD E9       >                jp      (ix)
 844+ 6733
 845+ 6733
 846+ 6733              //  ______________________________________________________________________
 847+ 6733              //
 848+ 6733              // ZX Spectrum Next - Low Level disk primitives.
 849+ 6733              // this include is "here" for backward compatibility
 850+ 6733
 851+ 6733                              include "next-opt0.asm"
# file opened: C:\Zx\CSpect\Projects\vForth15_INDIRECT/source/next-opt0.asm
   1++6733              //  ______________________________________________________________________
   2++6733              //
   3++6733              //  next-opt.asm
   4++6733              //
   5++6733              //  ZX Spectrum Next - peculiar definitions
   6++6733              //  ______________________________________________________________________
   7++6733
   8++6733              //  ______________________________________________________________________
   9++6733              //
  10++6733              // f_seek       d u -- f
  11++6733              // Seek to position d in file-handle u.
  12++6733              // Return a false-flag 0 on success, True flag on error
  13++6733                              New_Def F_SEEK, "F_SEEK", is_code, is_normal
  13++6733             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  13++6733             >
  13++6733             >                // dummy db directives used to calculate length of namec
  13++6733 46 5F 53 45 >                db      "F_SEEK"
  13++6737 45 4B       >
  13++6739             >len_NFA         defl    $ - temp_NFA
  13++6739             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  13++6733             >
  13++6733 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  13++6734 46 5F 53 45 >                db      "F_SEEK"               // name string in 7-bit ascii, but
  13++6738 45 4B       >
  13++673A             >                org     $-1                 // alter last byte of Name just above to set
  13++6739 CB          >                db      {b $} | END_BIT     // msb as name end
  13++673A             >
  13++673A 0E 67       >                dw      last_NFA            // Link to previous definition Name
  13++673C             >F_SEEK:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
  13++673C ~           >                dw      runcode ; ok        // for primitive definitions  actual code
  13++673C             >                else
  13++673C 3E 67       >                dw      $ + 2   ; ok        // is pointed by CFA
  13++673E             >                endif           ; ok        // for other definitions it "points" the correct handler
  13++673E             >                // Use of "; ok" to suppress "warning[fwdref]"
  13++673E             >
  13++673E             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  14++673E E1                           pop     hl                  // file-handle
  15++673F 7D                           ld      a, l                // file-handle
  16++6740 60                           ld      h, b                // save Intruction Pointer
  17++6741 69                           ld      l, c
  18++6742 C1                           pop     bc                  // bc has high-word of d
  19++6743 D1                           pop     de
  20++6744 DD E5                        push    ix
  21++6746 E5                           push    hl                  // save Instruction Pointer
  22++6747 DD 21 00 00                  ld      ix, 0
  23++674B CF                           rst     $08
  24++674C 9F                           db      $9F
  25++674D              F_Seek_Exit:
  26++674D C1                           pop     bc                  // restore Instruction Pointer
  27++674E DD E1                        pop     ix
  28++6750 ED 62                        sbc     hl, hl              // to get 0 or -1
  29++6752
  30++6752                              psh1
  30++6752 E5          >                push    hl
  30++6753 DD E9       >                jp      (ix)
  31++6755
  32++6755              //  ______________________________________________________________________
  33++6755              //
  34++6755              // f_close      u -- f
  35++6755              // Close file-handle u.
  36++6755              // Return 0 on success, True flag on error
  37++6755
  38++6755                              New_Def F_CLOSE, "F_CLOSE", is_code, is_normal
  38++6755             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  38++6755             >
  38++6755             >                // dummy db directives used to calculate length of namec
  38++6755 46 5F 43 4C >                db      "F_CLOSE"
  38++6759 4F 53 45    >
  38++675C             >len_NFA         defl    $ - temp_NFA
  38++675C             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  38++6755             >
  38++6755 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  38++6756 46 5F 43 4C >                db      "F_CLOSE"               // name string in 7-bit ascii, but
  38++675A 4F 53 45    >
  38++675D             >                org     $-1                 // alter last byte of Name just above to set
  38++675C C5          >                db      {b $} | END_BIT     // msb as name end
  38++675D             >
  38++675D 33 67       >                dw      last_NFA            // Link to previous definition Name
  38++675F             >F_CLOSE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
  38++675F ~           >                dw      runcode ; ok        // for primitive definitions  actual code
  38++675F             >                else
  38++675F 61 67       >                dw      $ + 2   ; ok        // is pointed by CFA
  38++6761             >                endif           ; ok        // for other definitions it "points" the correct handler
  38++6761             >                // Use of "; ok" to suppress "warning[fwdref]"
  38++6761             >
  38++6761             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  39++6761
  40++6761 E1                           pop     hl
  41++6762 7D                           ld      a, l                // file-handle
  42++6763 DD E5                        push    ix
  43++6765 C5                           push    bc                  // Save Instruction pointer
  44++6766 CF                           rst     $08
  45++6767 9B                           db      $9B
  46++6768 18 E3                        jr      F_Seek_Exit
  47++676A              //              pop     bc
  48++676A              //              pop     ix
  49++676A              //              sbc     hl, hl
  50++676A              //              psh1
  51++676A
  52++676A              //  ______________________________________________________________________
  53++676A              //
  54++676A              // f_sync      u -- f
  55++676A              // Close file-handle u.
  56++676A              // Return 0 on success, True flag on error
  57++676A
  58++676A                              New_Def F_SYNC, "F_SYNC", is_code, is_normal
  58++676A             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  58++676A             >
  58++676A             >                // dummy db directives used to calculate length of namec
  58++676A 46 5F 53 59 >                db      "F_SYNC"
  58++676E 4E 43       >
  58++6770             >len_NFA         defl    $ - temp_NFA
  58++6770             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  58++676A             >
  58++676A 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  58++676B 46 5F 53 59 >                db      "F_SYNC"               // name string in 7-bit ascii, but
  58++676F 4E 43       >
  58++6771             >                org     $-1                 // alter last byte of Name just above to set
  58++6770 C3          >                db      {b $} | END_BIT     // msb as name end
  58++6771             >
  58++6771 55 67       >                dw      last_NFA            // Link to previous definition Name
  58++6773             >F_SYNC:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
  58++6773 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
  58++6773             >                else
  58++6773 75 67       >                dw      $ + 2   ; ok        // is pointed by CFA
  58++6775             >                endif           ; ok        // for other definitions it "points" the correct handler
  58++6775             >                // Use of "; ok" to suppress "warning[fwdref]"
  58++6775             >
  58++6775             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  59++6775 E1                           pop     hl
  60++6776 7D                           ld      a, l                // file-handle
  61++6777 DD E5                        push    ix
  62++6779 C5                           push    bc
  63++677A CF                           rst     $08
  64++677B 9C                           db      $9C
  65++677C 18 CF                        jr      F_Seek_Exit
  66++677E              //              pop     bc
  67++677E              //              pop     ix
  68++677E              //              sbc     hl, hl
  69++677E              //              psh1
  70++677E
  71++677E              //  ______________________________________________________________________
  72++677E              //
  73++677E              // f_fgetpos    u -- d f
  74++677E              // Seek to position d in file-handle u.
  75++677E              // Return a false-flag 0 on success, True flag on error
  76++677E                              New_Def F_FGETPOS, "F_FGETPOS", is_code, is_normal
  76++677E             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  76++677E             >
  76++677E             >                // dummy db directives used to calculate length of namec
  76++677E 46 5F 46 47 >                db      "F_FGETPOS"
  76++6782 45 54 50 4F >
  76++6786 53          >
  76++6787             >len_NFA         defl    $ - temp_NFA
  76++6787             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  76++677E             >
  76++677E 89          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  76++677F 46 5F 46 47 >                db      "F_FGETPOS"               // name string in 7-bit ascii, but
  76++6783 45 54 50 4F >
  76++6787 53          >
  76++6788             >                org     $-1                 // alter last byte of Name just above to set
  76++6787 D3          >                db      {b $} | END_BIT     // msb as name end
  76++6788             >
  76++6788 6A 67       >                dw      last_NFA            // Link to previous definition Name
  76++678A             >F_FGETPOS:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
  76++678A ~           >                dw      runcode ; ok        // for primitive definitions  actual code
  76++678A             >                else
  76++678A 8C 67       >                dw      $ + 2   ; ok        // is pointed by CFA
  76++678C             >                endif           ; ok        // for other definitions it "points" the correct handler
  76++678C             >                // Use of "; ok" to suppress "warning[fwdref]"
  76++678C             >
  76++678C             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  77++678C E1                           pop     hl
  78++678D 7D                           ld      a, l                // file-handle
  79++678E DD E5                        push    ix
  80++6790 C5                           push    bc
  81++6791 CF                           rst     $08
  82++6792 A0                           db      $A0
  83++6793 E1                           pop     hl                  // restore Instruction Pointer
  84++6794 DD E1                        pop     ix
  85++6796 D5                           push    de
  86++6797 C5                           push    bc
  87++6798 44                           ld      b, h                // restore Instruction Pointer
  88++6799 4D                           ld      c, l
  89++679A ED 62                        sbc     hl, hl
  90++679C
  91++679C                              psh1
  91++679C E5          >                push    hl
  91++679D DD E9       >                jp      (ix)
  92++679F
  93++679F              //  ______________________________________________________________________
  94++679F              //
  95++679F              // f_read       a b u -- n f
  96++679F              // Read b bytes from file-handle u to address a
  97++679F              // Return the actual number n of bytes read
  98++679F              // Return 0 on success, True flag on error
  99++679F                              New_Def F_READ, "F_READ", is_code, is_normal
  99++679F             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  99++679F             >
  99++679F             >                // dummy db directives used to calculate length of namec
  99++679F 46 5F 52 45 >                db      "F_READ"
  99++67A3 41 44       >
  99++67A5             >len_NFA         defl    $ - temp_NFA
  99++67A5             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  99++679F             >
  99++679F 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  99++67A0 46 5F 52 45 >                db      "F_READ"               // name string in 7-bit ascii, but
  99++67A4 41 44       >
  99++67A6             >                org     $-1                 // alter last byte of Name just above to set
  99++67A5 C4          >                db      {b $} | END_BIT     // msb as name end
  99++67A6             >
  99++67A6 7E 67       >                dw      last_NFA            // Link to previous definition Name
  99++67A8             >F_READ:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
  99++67A8 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
  99++67A8             >                else
  99++67A8 AA 67       >                dw      $ + 2   ; ok        // is pointed by CFA
  99++67AA             >                endif           ; ok        // for other definitions it "points" the correct handler
  99++67AA             >                // Use of "; ok" to suppress "warning[fwdref]"
  99++67AA             >
  99++67AA             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 100++67AA
 101++67AA 50                           ld      d, b
 102++67AB 59                           ld      e, c
 103++67AC E1                           pop     hl
 104++67AD 7D                           ld      a, l                // file-handle
 105++67AE C1                           pop     bc                  // bc has bytes to read
 106++67AF DD E3                        ex      (sp), ix            // ix has address
 107++67B1 D5                           push    de                  // Save Instruction pointer
 108++67B2 CF                           rst     $08
 109++67B3 9D                           db      $9D
 110++67B4              F_Read_Exit:
 111++67B4 C1                           pop     bc                  // Restore Instruction pointer
 112++67B5 DD E1                        pop     ix                  // Restore ix
 113++67B7 D5                           push    de                  // bytes written
 114++67B8 ED 62                        sbc     hl, hl
 115++67BA
 116++67BA                              psh1
 116++67BA E5          >                push    hl
 116++67BB DD E9       >                jp      (ix)
 117++67BD
 118++67BD              //  ______________________________________________________________________
 119++67BD              //
 120++67BD              // f_write      a b u -- n f
 121++67BD              // Write bytes currently stored at address a to file-handle u.
 122++67BD              // Return the actual n bytes written and 0 on success, True flag on error.
 123++67BD                              New_Def F_WRITE, "F_WRITE", is_code, is_normal
 123++67BD             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 123++67BD             >
 123++67BD             >                // dummy db directives used to calculate length of namec
 123++67BD 46 5F 57 52 >                db      "F_WRITE"
 123++67C1 49 54 45    >
 123++67C4             >len_NFA         defl    $ - temp_NFA
 123++67C4             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 123++67BD             >
 123++67BD 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 123++67BE 46 5F 57 52 >                db      "F_WRITE"               // name string in 7-bit ascii, but
 123++67C2 49 54 45    >
 123++67C5             >                org     $-1                 // alter last byte of Name just above to set
 123++67C4 C5          >                db      {b $} | END_BIT     // msb as name end
 123++67C5             >
 123++67C5 9F 67       >                dw      last_NFA            // Link to previous definition Name
 123++67C7             >F_WRITE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 123++67C7 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
 123++67C7             >                else
 123++67C7 C9 67       >                dw      $ + 2   ; ok        // is pointed by CFA
 123++67C9             >                endif           ; ok        // for other definitions it "points" the correct handler
 123++67C9             >                // Use of "; ok" to suppress "warning[fwdref]"
 123++67C9             >
 123++67C9             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 124++67C9
 125++67C9 50                           ld      d, b
 126++67CA 59                           ld      e, c
 127++67CB E1                           pop     hl
 128++67CC 7D                           ld      a, l                // file-handle
 129++67CD C1                           pop     bc                  // bc has bytes to read
 130++67CE DD E3                        ex      (sp), ix            // ix has address
 131++67D0 D5                           push    de                  // Save Instruction pointer
 132++67D1 CF                           rst     $08
 133++67D2 9E                           db      $9E
 134++67D3 18 DF                        jr F_Read_Exit
 135++67D5              //              pop     bc                  // Restore Instruction pointer
 136++67D5              //              pop     ix                  // Restore ix
 137++67D5              //              push    de                  // bytes written
 138++67D5              //              sbc     hl, hl
 139++67D5              //
 140++67D5              //              psh1
 141++67D5
 142++67D5              //  ______________________________________________________________________
 143++67D5              //
 144++67D5              // f_open       a1 a2 b -- u f
 145++67D5              // open a file
 146++67D5              // a1 (filespec) is a null-terminated string, such as produced by ," definition
 147++67D5              // a2 is address to an 8-byte header data used in some cases.
 148++67D5              // b is access mode-byte, that is a combination of:
 149++67D5              // any/all of:
 150++67D5              //   esx_mode_read          $01 request read access
 151++67D5              //   esx_mode_write         $02 request write access
 152++67D5              //   esx_mode_use_header    $40 read/write +3DOS header
 153++67D5              // plus one of:
 154++67D5              //   esx_mode_open_exist    $00 only open existing file
 155++67D5              //   esx_mode_open_creat    $08 open existing or create file
 156++67D5              //   esx_mode_creat_noexist $04 create new file, error if exists
 157++67D5              //   esx_mode_creat_trunc   $0c create new file, delete existing
 158++67D5              // Return file-handle u and 0 on success, True flag on error
 159++67D5                              New_Def F_OPEN, "F_OPEN", is_code, is_normal
 159++67D5             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 159++67D5             >
 159++67D5             >                // dummy db directives used to calculate length of namec
 159++67D5 46 5F 4F 50 >                db      "F_OPEN"
 159++67D9 45 4E       >
 159++67DB             >len_NFA         defl    $ - temp_NFA
 159++67DB             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 159++67D5             >
 159++67D5 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 159++67D6 46 5F 4F 50 >                db      "F_OPEN"               // name string in 7-bit ascii, but
 159++67DA 45 4E       >
 159++67DC             >                org     $-1                 // alter last byte of Name just above to set
 159++67DB CE          >                db      {b $} | END_BIT     // msb as name end
 159++67DC             >
 159++67DC BD 67       >                dw      last_NFA            // Link to previous definition Name
 159++67DE             >F_OPEN:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 159++67DE ~           >                dw      runcode ; ok        // for primitive definitions  actual code
 159++67DE             >                else
 159++67DE E0 67       >                dw      $ + 2   ; ok        // is pointed by CFA
 159++67E0             >                endif           ; ok        // for other definitions it "points" the correct handler
 159++67E0             >                // Use of "; ok" to suppress "warning[fwdref]"
 159++67E0             >
 159++67E0             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 160++67E0 60                           ld      h, b                // Save Instruction pointer
 161++67E1 69                           ld      l, c
 162++67E2 C1                           pop     bc                  // file-mode
 163++67E3 41                           ld      b, c                // file-mode
 164++67E4 D1                           pop     de                  // 8-bytes buffer if any
 165++67E5 DD E3                        ex      (sp), ix            // filespec nul-terminated
 166++67E7 E5                           push    hl                  // Save Instruction pointer
 167++67E8 3E 2A                        ld      a, "*"
 168++67EA CF                           rst     $08
 169++67EB 9A                           db      $9A
 170++67EC              F_Open_Exit:
 171++67EC C1                           pop     bc
 172++67ED DD E1                        pop     ix
 173++67EF ED 62                        sbc     hl, hl
 174++67F1 5F                           ld      e, a
 175++67F2 16 00                        ld      d, 0
 176++67F4
 177++67F4
 178++67F4                              psh2
 178++67F4 D5          >                push    de
 178++67F5 E5          >                push    hl
 178++67F6 DD E9       >                jp      (ix)
 179++67F8
 180++67F8              //   \ CREATE FILENAME ," test.txt"   \ new Counted String
 181++67F8              //   \ FILENAME 1+ PAD 1 F_OPEN
 182++67F8              //   \ DROP
 183++67F8              //   \ F_CLOSE
 184++67F8
 185++67F8
 186++67F8              //  ______________________________________________________________________
 187++67F8              //
 188++67F8              // f_opendir    a1 a2 b -- u f
 189++67F8              // open a file
 190++67F8                              New_Def F_OPENDIR, "F_OPENDIR", is_code, is_normal
 190++67F8             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 190++67F8             >
 190++67F8             >                // dummy db directives used to calculate length of namec
 190++67F8 46 5F 4F 50 >                db      "F_OPENDIR"
 190++67FC 45 4E 44 49 >
 190++6800 52          >
 190++6801             >len_NFA         defl    $ - temp_NFA
 190++6801             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 190++67F8             >
 190++67F8 89          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 190++67F9 46 5F 4F 50 >                db      "F_OPENDIR"               // name string in 7-bit ascii, but
 190++67FD 45 4E 44 49 >
 190++6801 52          >
 190++6802             >                org     $-1                 // alter last byte of Name just above to set
 190++6801 D2          >                db      {b $} | END_BIT     // msb as name end
 190++6802             >
 190++6802 D5 67       >                dw      last_NFA            // Link to previous definition Name
 190++6804             >F_OPENDIR:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 190++6804 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
 190++6804             >                else
 190++6804 06 68       >                dw      $ + 2   ; ok        // is pointed by CFA
 190++6806             >                endif           ; ok        // for other definitions it "points" the correct handler
 190++6806             >                // Use of "; ok" to suppress "warning[fwdref]"
 190++6806             >
 190++6806             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 191++6806 DD E3                        ex      (sp), ix            // filespec nul-terminated
 192++6808 C5                           push    bc                  // Save Instruction pointer
 193++6809 06 10                        ld      b, $10              // file-mode
 194++680B 3E 43                        ld      a, "C"
 195++680D CF                           rst     $08
 196++680E A3                           db      $A3
 197++680F 18 DB                        jr      F_Open_Exit
 198++6811
 199++6811
 200++6811              //  ______________________________________________________________________
 201++6811              //
 202++6811              // f_readdir    a1 a2 b -- u f
 203++6811              // open a file
 204++6811                              New_Def F_READDIR, "F_READDIR", is_code, is_normal
 204++6811             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 204++6811             >
 204++6811             >                // dummy db directives used to calculate length of namec
 204++6811 46 5F 52 45 >                db      "F_READDIR"
 204++6815 41 44 44 49 >
 204++6819 52          >
 204++681A             >len_NFA         defl    $ - temp_NFA
 204++681A             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 204++6811             >
 204++6811 89          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 204++6812 46 5F 52 45 >                db      "F_READDIR"               // name string in 7-bit ascii, but
 204++6816 41 44 44 49 >
 204++681A 52          >
 204++681B             >                org     $-1                 // alter last byte of Name just above to set
 204++681A D2          >                db      {b $} | END_BIT     // msb as name end
 204++681B             >
 204++681B F8 67       >                dw      last_NFA            // Link to previous definition Name
 204++681D             >F_READDIR:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 204++681D ~           >                dw      runcode ; ok        // for primitive definitions  actual code
 204++681D             >                else
 204++681D 1F 68       >                dw      $ + 2   ; ok        // is pointed by CFA
 204++681F             >                endif           ; ok        // for other definitions it "points" the correct handler
 204++681F             >                // Use of "; ok" to suppress "warning[fwdref]"
 204++681F             >
 204++681F             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 205++681F E1                           pop     hl
 206++6820 7D                           ld      a, l
 207++6821 D1                           pop     de
 208++6822 DD E3                        ex      (sp), ix            // filespec nul-terminated
 209++6824 C5                           push    bc                  // Save Instruction pointer
 210++6825 CF                           rst     $08
 211++6826 A4                           db      $A4
 212++6827 18 C3                        jr      F_Open_Exit
 213++6829
# file closed: C:\Zx\CSpect\Projects\vForth15_INDIRECT/source/next-opt0.asm
 852+ 6829
 853+ 6829
 854+ 6829              //  ______________________________________________________________________
 855+ 6829              //
 856+ 6829              // cr           --
 857+ 6829              // send a CR via EMITC
 858+ 6829                              New_Def CR, "CR", is_code, is_normal
 858+ 6829             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 858+ 6829             >
 858+ 6829             >                // dummy db directives used to calculate length of namec
 858+ 6829 43 52       >                db      "CR"
 858+ 682B             >len_NFA         defl    $ - temp_NFA
 858+ 682B             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 858+ 6829             >
 858+ 6829 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 858+ 682A 43 52       >                db      "CR"               // name string in 7-bit ascii, but
 858+ 682C             >                org     $-1                 // alter last byte of Name just above to set
 858+ 682B D2          >                db      {b $} | END_BIT     // msb as name end
 858+ 682C             >
 858+ 682C 11 68       >                dw      last_NFA            // Link to previous definition Name
 858+ 682E             >CR:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 858+ 682E ~           >                dw      runcode ; ok        // for primitive definitions  actual code
 858+ 682E             >                else
 858+ 682E 30 68       >                dw      $ + 2   ; ok        // is pointed by CFA
 858+ 6830             >                endif           ; ok        // for other definitions it "points" the correct handler
 858+ 6830             >                // Use of "; ok" to suppress "warning[fwdref]"
 858+ 6830             >
 858+ 6830             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 859+ 6830
 860+ 6830 3E 0D                        ld      a, CR_CHAR
 861+ 6832 C3 FD 65                     jp      Emitc_Ptr
 862+ 6835
 863+ 6835              //  ______________________________________________________________________
 864+ 6835              //
 865+ 6835              // cmove    a1 a2 u --
 866+ 6835              // If u > 0, moves memory content starting at address a1 for n bytes long
 867+ 6835              // storing then starting at address addr2.
 868+ 6835              // The content of a1 is moved first. See CMOVE> also.
 869+ 6835                              New_Def CMOVE, "CMOVE", is_code, is_normal
 869+ 6835             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 869+ 6835             >
 869+ 6835             >                // dummy db directives used to calculate length of namec
 869+ 6835 43 4D 4F 56 >                db      "CMOVE"
 869+ 6839 45          >
 869+ 683A             >len_NFA         defl    $ - temp_NFA
 869+ 683A             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 869+ 6835             >
 869+ 6835 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 869+ 6836 43 4D 4F 56 >                db      "CMOVE"               // name string in 7-bit ascii, but
 869+ 683A 45          >
 869+ 683B             >                org     $-1                 // alter last byte of Name just above to set
 869+ 683A C5          >                db      {b $} | END_BIT     // msb as name end
 869+ 683B             >
 869+ 683B 29 68       >                dw      last_NFA            // Link to previous definition Name
 869+ 683D             >CMOVE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 869+ 683D ~           >                dw      runcode ; ok        // for primitive definitions  actual code
 869+ 683D             >                else
 869+ 683D 3F 68       >                dw      $ + 2   ; ok        // is pointed by CFA
 869+ 683F             >                endif           ; ok        // for other definitions it "points" the correct handler
 869+ 683F             >                // Use of "; ok" to suppress "warning[fwdref]"
 869+ 683F             >
 869+ 683F             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 870+ 683F D9                           exx
 871+ 6840 C1                           pop     bc                  // bc has counter
 872+ 6841 D1                           pop     de                  // de now has dest
 873+ 6842 E1                           pop     hl                  // hl has source, save Instruction Pointer
 874+ 6843 78                           ld      a, b
 875+ 6844 B1                           or      c
 876+ 6845 28 02                        jr      z, Cmove_NoMove
 877+ 6847 ED B0                            ldir
 878+ 6849              Cmove_NoMove:
 879+ 6849 D9                           exx
 880+ 684A                              next
 880+ 684A DD E9       >                jp      (ix)
 881+ 684C
 882+ 684C              //  ______________________________________________________________________
 883+ 684C              //
 884+ 684C              // cmove>    a1 a2 u --
 885+ 684C              // If u > 0, moves memory content starting at address a1 for n bytes long
 886+ 684C              // storing then starting at address addr2.
 887+ 684C              // The content of a1 is moved last. See cmove.
 888+ 684C                              New_Def CMOVE_TO, "CMOVE>", is_code, is_normal
 888+ 684C             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 888+ 684C             >
 888+ 684C             >                // dummy db directives used to calculate length of namec
 888+ 684C 43 4D 4F 56 >                db      "CMOVE>"
 888+ 6850 45 3E       >
 888+ 6852             >len_NFA         defl    $ - temp_NFA
 888+ 6852             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 888+ 684C             >
 888+ 684C 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 888+ 684D 43 4D 4F 56 >                db      "CMOVE>"               // name string in 7-bit ascii, but
 888+ 6851 45 3E       >
 888+ 6853             >                org     $-1                 // alter last byte of Name just above to set
 888+ 6852 BE          >                db      {b $} | END_BIT     // msb as name end
 888+ 6853             >
 888+ 6853 35 68       >                dw      last_NFA            // Link to previous definition Name
 888+ 6855             >CMOVE_TO:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 888+ 6855 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
 888+ 6855             >                else
 888+ 6855 57 68       >                dw      $ + 2   ; ok        // is pointed by CFA
 888+ 6857             >                endif           ; ok        // for other definitions it "points" the correct handler
 888+ 6857             >                // Use of "; ok" to suppress "warning[fwdref]"
 888+ 6857             >
 888+ 6857             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 889+ 6857 D9                           exx
 890+ 6858 C1                           pop     bc                  // bc has counter
 891+ 6859 D1                           pop     de                  // de has dest
 892+ 685A E1                           pop     hl                  // hl has source, save Instruction Pointer
 893+ 685B 78                           ld      a, b
 894+ 685C B1                           or      c
 895+ 685D 28 08                        jr      z, CmoveV_NoMove
 896+ 685F EB                               ex      de, hl              // compute address to
 897+ 6860 09                               add     hl, bc              // operate backward
 898+ 6861 2B                               dec     hl
 899+ 6862 EB                               ex      de, hl
 900+ 6863 09                               add     hl, bc
 901+ 6864 2B                               dec     hl
 902+ 6865 ED B8                            lddr                        // backward
 903+ 6867              CmoveV_NoMove:
 904+ 6867 D9                           exx
 905+ 6868                              next
 905+ 6868 DD E9       >                jp      (ix)
 906+ 686A
 907+ 686A              //  ______________________________________________________________________
 908+ 686A              //
 909+ 686A              // um*      u1 u2 -- ud
 910+ 686A              // Unsigned multiplication
 911+ 686A              // A double-integer is kept in CPU registers as DEHL then pushed on stack.
 912+ 686A              // On the stack a double number is treated as two single numbers
 913+ 686A              // where DE is on the top of the stack and HL is the second from top,
 914+ 686A              // Instead, in 2VARIABLE a double number is stored as EDLH.
 915+ 686A              // this definition could use "MUL" Z80N new op-code.
 916+ 686A                              New_Def UM_MUL, "UM*", is_code, is_normal
 916+ 686A             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 916+ 686A             >
 916+ 686A             >                // dummy db directives used to calculate length of namec
 916+ 686A 55 4D 2A    >                db      "UM*"
 916+ 686D             >len_NFA         defl    $ - temp_NFA
 916+ 686D             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 916+ 686A             >
 916+ 686A 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 916+ 686B 55 4D 2A    >                db      "UM*"               // name string in 7-bit ascii, but
 916+ 686E             >                org     $-1                 // alter last byte of Name just above to set
 916+ 686D AA          >                db      {b $} | END_BIT     // msb as name end
 916+ 686E             >
 916+ 686E 4C 68       >                dw      last_NFA            // Link to previous definition Name
 916+ 6870             >UM_MUL:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 916+ 6870 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
 916+ 6870             >                else
 916+ 6870 72 68       >                dw      $ + 2   ; ok        // is pointed by CFA
 916+ 6872             >                endif           ; ok        // for other definitions it "points" the correct handler
 916+ 6872             >                // Use of "; ok" to suppress "warning[fwdref]"
 916+ 6872             >
 916+ 6872             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 917+ 6872 D1                           pop     de                    // de has u2 operand
 918+ 6873 E1                           pop     hl                    // hl has u1 operand
 919+ 6874 C5                           push    bc                    // Save Instruction Pointer
 920+ 6875 45                           ld      b, l
 921+ 6876 4B                           ld      c, e
 922+ 6877 5D                           ld      e, l
 923+ 6878 6A                           ld      l, d
 924+ 6879 E5                           push    hl
 925+ 687A 69                           ld      l, c
 926+ 687B ED 30                        mul
 927+ 687D EB                           ex      de, hl
 928+ 687E ED 30                        mul
 929+ 6880 AF                           xor     a
 930+ 6881 19                           add     hl, de
 931+ 6882 8F                           adc     a
 932+ 6883 59                           ld      e, c
 933+ 6884 50                           ld      d, b
 934+ 6885 ED 30                        mul
 935+ 6887 47                           ld      b, a
 936+ 6888 4C                           ld      c, h
 937+ 6889 7A                           ld      a, d
 938+ 688A 85                           add     l
 939+ 688B 67                           ld      h, a
 940+ 688C 6B                           ld      l, e
 941+ 688D D1                           pop     de
 942+ 688E ED 30                        mul
 943+ 6890 EB                           ex      de, hl
 944+ 6891 ED 4A                        adc     hl, bc
 945+ 6893 C1                           pop     bc
 946+ 6894 D5                           push    de
 947+ 6895 E5                           push    hl
 948+ 6896                              next
 948+ 6896 DD E9       >                jp      (ix)
 949+ 6898
 950+ 6898              //  ______________________________________________________________________
 951+ 6898              //
 952+ 6898              // um/mod      ud u1 -- q r
 953+ 6898              // divides ud into u1 giving quotient q and remainder r
 954+ 6898              // algorithm takes 16 bit at a time starting from msb
 955+ 6898              // DE grows from lsb upward with quotient result
 956+ 6898              // HL keeps the remainder at each stage of division
 957+ 6898              // each loop 'lowers' the next binary digit to form the current dividend
 958+ 6898                              New_Def UMDIVMOD, "UM/MOD", is_code, is_normal
 958+ 6898             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 958+ 6898             >
 958+ 6898             >                // dummy db directives used to calculate length of namec
 958+ 6898 55 4D 2F 4D >                db      "UM/MOD"
 958+ 689C 4F 44       >
 958+ 689E             >len_NFA         defl    $ - temp_NFA
 958+ 689E             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 958+ 6898             >
 958+ 6898 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 958+ 6899 55 4D 2F 4D >                db      "UM/MOD"               // name string in 7-bit ascii, but
 958+ 689D 4F 44       >
 958+ 689F             >                org     $-1                 // alter last byte of Name just above to set
 958+ 689E C4          >                db      {b $} | END_BIT     // msb as name end
 958+ 689F             >
 958+ 689F 6A 68       >                dw      last_NFA            // Link to previous definition Name
 958+ 68A1             >UMDIVMOD:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 958+ 68A1 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
 958+ 68A1             >                else
 958+ 68A1 A3 68       >                dw      $ + 2   ; ok        // is pointed by CFA
 958+ 68A3             >                endif           ; ok        // for other definitions it "points" the correct handler
 958+ 68A3             >                // Use of "; ok" to suppress "warning[fwdref]"
 958+ 68A3             >
 958+ 68A3             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 959+ 68A3 60                           ld      h, b
 960+ 68A4 69                           ld      l, c                    // Save Instruction Pointer
 961+ 68A5
 962+ 68A5 C1                           pop     bc                      // divisor
 963+ 68A6
 964+ 68A6 D1                           pop     de                      // < high part
 965+ 68A7 E3                           ex      (sp), hl                // < low part and > save bc
 966+ 68A8 EB                           ex      de, hl                  //
 967+ 68A9 7D                           ld      a, l                    // check without changing arguments
 968+ 68AA 91                           sub     c                       // if divisor is greater than high part
 969+ 68AB 7C                           ld      a, h                    // so quotient will be in range
 970+ 68AC 98                           sbc     a, b
 971+ 68AD 30 23                        jr      nc, Um_DivMod_OutOfRange
 972+ 68AF 3E 10                            ld      a, 16
 973+ 68B1              Um_DivMod_Loop:
 974+ 68B1 A7                                   and     a
 975+ 68B2 CB 13                                rl      e
 976+ 68B4 CB 12                                rl      d
 977+ 68B6 CB 15                                rl      l
 978+ 68B8 CB 14                                rl      h
 979+ 68BA 30 05                                jr      nc, Um_DivMod_Carry
 980+ 68BC A7                                       and     a
 981+ 68BD ED 42                                    sbc     hl, bc
 982+ 68BF 18 07                                jr      Um_DivMod_Endif    // else
 983+ 68C1              Um_DivMod_Carry:
 984+ 68C1 A7                                       and     a
 985+ 68C2 ED 42                                    sbc     hl, bc
 986+ 68C4 30 02                                    jr      nc, Um_DivMod_Endif
 987+ 68C6 09                                           add     hl, bc
 988+ 68C7 1B                                           dec     de
 989+ 68C8              Um_DivMod_Endif:                                   // endif
 990+ 68C8 13                                   inc     de
 991+ 68C9 3D                                   dec     a
 992+ 68CA 20 E5                            jr      nz, Um_DivMod_Loop
 993+ 68CC EB                               ex      de, hl
 994+ 68CD              Um_DivMod_Bailout:
 995+ 68CD C1                               pop     bc                  // restore Instruction Pointer
 996+ 68CE D5                               push    de                  // de := remanider
 997+ 68CF E5                               push    hl                  // hl := quotient
 998+ 68D0                                  next
 998+ 68D0 DD E9       >                jp      (ix)
 999+ 68D2
1000+ 68D2              Um_DivMod_OutOfRange:
1001+ 68D2 21 FF FF                     ld      hl, -1
1002+ 68D5 54                           ld      d, h
1003+ 68D6 5D                           ld      e, l
1004+ 68D7 18 F4                        jr      Um_DivMod_Bailout
1005+ 68D9
1006+ 68D9              //  ______________________________________________________________________
1007+ 68D9              //
1008+ 68D9              // and          n1 n2 -- n3
1009+ 68D9              // bit logical AND. Returns n3 as n1 & n2
1010+ 68D9                              New_Def AND_OP, "AND", is_code, is_normal
1010+ 68D9             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1010+ 68D9             >
1010+ 68D9             >                // dummy db directives used to calculate length of namec
1010+ 68D9 41 4E 44    >                db      "AND"
1010+ 68DC             >len_NFA         defl    $ - temp_NFA
1010+ 68DC             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1010+ 68D9             >
1010+ 68D9 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1010+ 68DA 41 4E 44    >                db      "AND"               // name string in 7-bit ascii, but
1010+ 68DD             >                org     $-1                 // alter last byte of Name just above to set
1010+ 68DC C4          >                db      {b $} | END_BIT     // msb as name end
1010+ 68DD             >
1010+ 68DD 98 68       >                dw      last_NFA            // Link to previous definition Name
1010+ 68DF             >AND_OP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1010+ 68DF ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1010+ 68DF             >                else
1010+ 68DF E1 68       >                dw      $ + 2   ; ok        // is pointed by CFA
1010+ 68E1             >                endif           ; ok        // for other definitions it "points" the correct handler
1010+ 68E1             >                // Use of "; ok" to suppress "warning[fwdref]"
1010+ 68E1             >
1010+ 68E1             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1011+ 68E1 D1                           pop     de
1012+ 68E2 E1                           pop     hl
1013+ 68E3 7B                           ld      a, e
1014+ 68E4 A5                           and     l
1015+ 68E5 6F                           ld      l, a
1016+ 68E6 7A                           ld      a, d
1017+ 68E7 A4                           and     h
1018+ 68E8 67                           ld      h, a
1019+ 68E9
1020+ 68E9                              psh1
1020+ 68E9 E5          >                push    hl
1020+ 68EA DD E9       >                jp      (ix)
1021+ 68EC
1022+ 68EC              //  ______________________________________________________________________
1023+ 68EC              //
1024+ 68EC              // or           n1 n2 -- n3
1025+ 68EC              // bit logical OR. Returns n3 as n1 | n2
1026+ 68EC                              New_Def OR_OP, "OR", is_code, is_normal
1026+ 68EC             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1026+ 68EC             >
1026+ 68EC             >                // dummy db directives used to calculate length of namec
1026+ 68EC 4F 52       >                db      "OR"
1026+ 68EE             >len_NFA         defl    $ - temp_NFA
1026+ 68EE             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1026+ 68EC             >
1026+ 68EC 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1026+ 68ED 4F 52       >                db      "OR"               // name string in 7-bit ascii, but
1026+ 68EF             >                org     $-1                 // alter last byte of Name just above to set
1026+ 68EE D2          >                db      {b $} | END_BIT     // msb as name end
1026+ 68EF             >
1026+ 68EF D9 68       >                dw      last_NFA            // Link to previous definition Name
1026+ 68F1             >OR_OP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1026+ 68F1 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1026+ 68F1             >                else
1026+ 68F1 F3 68       >                dw      $ + 2   ; ok        // is pointed by CFA
1026+ 68F3             >                endif           ; ok        // for other definitions it "points" the correct handler
1026+ 68F3             >                // Use of "; ok" to suppress "warning[fwdref]"
1026+ 68F3             >
1026+ 68F3             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1027+ 68F3 D1                           pop     de
1028+ 68F4 E1                           pop     hl
1029+ 68F5 7B                           ld      a, e
1030+ 68F6 B5                           or      l
1031+ 68F7 6F                           ld      l, a
1032+ 68F8 7A                           ld      a, d
1033+ 68F9 B4                           or      h
1034+ 68FA 67                           ld      h, a
1035+ 68FB
1036+ 68FB                              psh1
1036+ 68FB E5          >                push    hl
1036+ 68FC DD E9       >                jp      (ix)
1037+ 68FE
1038+ 68FE              //  ______________________________________________________________________
1039+ 68FE              //
1040+ 68FE              // xor          n1 n2 -- n3
1041+ 68FE              // bit logical OR. Returns n3 as n1 ^ n2
1042+ 68FE                              New_Def XOR_OP, "XOR", is_code, is_normal
1042+ 68FE             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1042+ 68FE             >
1042+ 68FE             >                // dummy db directives used to calculate length of namec
1042+ 68FE 58 4F 52    >                db      "XOR"
1042+ 6901             >len_NFA         defl    $ - temp_NFA
1042+ 6901             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1042+ 68FE             >
1042+ 68FE 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1042+ 68FF 58 4F 52    >                db      "XOR"               // name string in 7-bit ascii, but
1042+ 6902             >                org     $-1                 // alter last byte of Name just above to set
1042+ 6901 D2          >                db      {b $} | END_BIT     // msb as name end
1042+ 6902             >
1042+ 6902 EC 68       >                dw      last_NFA            // Link to previous definition Name
1042+ 6904             >XOR_OP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1042+ 6904 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1042+ 6904             >                else
1042+ 6904 06 69       >                dw      $ + 2   ; ok        // is pointed by CFA
1042+ 6906             >                endif           ; ok        // for other definitions it "points" the correct handler
1042+ 6906             >                // Use of "; ok" to suppress "warning[fwdref]"
1042+ 6906             >
1042+ 6906             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1043+ 6906 D1                           pop     de
1044+ 6907 E1                           pop     hl
1045+ 6908 7B                           ld      a, e
1046+ 6909 AD                           xor     l
1047+ 690A 6F                           ld      l, a
1048+ 690B 7A                           ld      a, d
1049+ 690C AC                           xor     h
1050+ 690D 67                           ld      h, a
1051+ 690E
1052+ 690E                              psh1
1052+ 690E E5          >                push    hl
1052+ 690F DD E9       >                jp      (ix)
1053+ 6911
1054+ 6911              //  ______________________________________________________________________
1055+ 6911              //
1056+ 6911              // sp@      -- a
1057+ 6911              // returns on top of stack the value of SP before execution
1058+ 6911                              New_Def SPFETCH, "SP@", is_code, is_normal
1058+ 6911             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1058+ 6911             >
1058+ 6911             >                // dummy db directives used to calculate length of namec
1058+ 6911 53 50 40    >                db      "SP@"
1058+ 6914             >len_NFA         defl    $ - temp_NFA
1058+ 6914             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1058+ 6911             >
1058+ 6911 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1058+ 6912 53 50 40    >                db      "SP@"               // name string in 7-bit ascii, but
1058+ 6915             >                org     $-1                 // alter last byte of Name just above to set
1058+ 6914 C0          >                db      {b $} | END_BIT     // msb as name end
1058+ 6915             >
1058+ 6915 FE 68       >                dw      last_NFA            // Link to previous definition Name
1058+ 6917             >SPFETCH:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1058+ 6917 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1058+ 6917             >                else
1058+ 6917 19 69       >                dw      $ + 2   ; ok        // is pointed by CFA
1058+ 6919             >                endif           ; ok        // for other definitions it "points" the correct handler
1058+ 6919             >                // Use of "; ok" to suppress "warning[fwdref]"
1058+ 6919             >
1058+ 6919             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1059+ 6919
1060+ 6919 21 00 00                     ld      hl, 0
1061+ 691C 39                           add     hl, sp
1062+ 691D
1063+ 691D                              psh1
1063+ 691D E5          >                push    hl
1063+ 691E DD E9       >                jp      (ix)
1064+ 6920
1065+ 6920              //  ______________________________________________________________________
1066+ 6920              //
1067+ 6920              // sp!      a --
1068+ 6920              // restore SP to the initial value passed
1069+ 6920              // normally it is S0, i.e. the word at offset 6 and 7 of user variabiles area.
1070+ 6920                              New_Def SPSTORE, "SP!", is_code, is_normal
1070+ 6920             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1070+ 6920             >
1070+ 6920             >                // dummy db directives used to calculate length of namec
1070+ 6920 53 50 21    >                db      "SP!"
1070+ 6923             >len_NFA         defl    $ - temp_NFA
1070+ 6923             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1070+ 6920             >
1070+ 6920 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1070+ 6921 53 50 21    >                db      "SP!"               // name string in 7-bit ascii, but
1070+ 6924             >                org     $-1                 // alter last byte of Name just above to set
1070+ 6923 A1          >                db      {b $} | END_BIT     // msb as name end
1070+ 6924             >
1070+ 6924 11 69       >                dw      last_NFA            // Link to previous definition Name
1070+ 6926             >SPSTORE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1070+ 6926 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1070+ 6926             >                else
1070+ 6926 28 69       >                dw      $ + 2   ; ok        // is pointed by CFA
1070+ 6928             >                endif           ; ok        // for other definitions it "points" the correct handler
1070+ 6928             >                // Use of "; ok" to suppress "warning[fwdref]"
1070+ 6928             >
1070+ 6928             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1071+ 6928 E1                           pop     hl
1072+ 6929 F9                           ld      sp, hl
1073+ 692A
1074+ 692A                              next
1074+ 692A DD E9       >                jp      (ix)
1075+ 692C
1076+ 692C              //  ______________________________________________________________________
1077+ 692C              //
1078+ 692C              // rp@      -- a
1079+ 692C              // returns on top of stack the value of Return-Pointer
1080+ 692C                              New_Def RPFETCH, "RP@", is_code, is_normal
1080+ 692C             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1080+ 692C             >
1080+ 692C             >                // dummy db directives used to calculate length of namec
1080+ 692C 52 50 40    >                db      "RP@"
1080+ 692F             >len_NFA         defl    $ - temp_NFA
1080+ 692F             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1080+ 692C             >
1080+ 692C 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1080+ 692D 52 50 40    >                db      "RP@"               // name string in 7-bit ascii, but
1080+ 6930             >                org     $-1                 // alter last byte of Name just above to set
1080+ 692F C0          >                db      {b $} | END_BIT     // msb as name end
1080+ 6930             >
1080+ 6930 20 69       >                dw      last_NFA            // Link to previous definition Name
1080+ 6932             >RPFETCH:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1080+ 6932 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1080+ 6932             >                else
1080+ 6932 34 69       >                dw      $ + 2   ; ok        // is pointed by CFA
1080+ 6934             >                endif           ; ok        // for other definitions it "points" the correct handler
1080+ 6934             >                // Use of "; ok" to suppress "warning[fwdref]"
1080+ 6934             >
1080+ 6934             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1081+ 6934
1082+ 6934                              ldhlrp
1082+ 6934 2A 96 63    >                ld      hl,(RP_Pointer)
1083+ 6937
1084+ 6937                              psh1
1084+ 6937 E5          >                push    hl
1084+ 6938 DD E9       >                jp      (ix)
1085+ 693A
1086+ 693A              //  ______________________________________________________________________
1087+ 693A              //
1088+ 693A              // rp!      a --
1089+ 693A              // restore RP to the initial value passed
1090+ 693A              // normally it is R0 @, i.e. the word at offset 8 of user variabiles area.
1091+ 693A                              New_Def RPSTORE, "RP!", is_code, is_normal
1091+ 693A             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1091+ 693A             >
1091+ 693A             >                // dummy db directives used to calculate length of namec
1091+ 693A 52 50 21    >                db      "RP!"
1091+ 693D             >len_NFA         defl    $ - temp_NFA
1091+ 693D             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1091+ 693A             >
1091+ 693A 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1091+ 693B 52 50 21    >                db      "RP!"               // name string in 7-bit ascii, but
1091+ 693E             >                org     $-1                 // alter last byte of Name just above to set
1091+ 693D A1          >                db      {b $} | END_BIT     // msb as name end
1091+ 693E             >
1091+ 693E 2C 69       >                dw      last_NFA            // Link to previous definition Name
1091+ 6940             >RPSTORE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1091+ 6940 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1091+ 6940             >                else
1091+ 6940 42 69       >                dw      $ + 2   ; ok        // is pointed by CFA
1091+ 6942             >                endif           ; ok        // for other definitions it "points" the correct handler
1091+ 6942             >                // Use of "; ok" to suppress "warning[fwdref]"
1091+ 6942             >
1091+ 6942             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1092+ 6942 E1                           pop     hl
1093+ 6943                              ldrphl
1093+ 6943 22 96 63    >                ld      (RP_Pointer),hl
1094+ 6946
1095+ 6946                              next
1095+ 6946 DD E9       >                jp      (ix)
1096+ 6948
1097+ 6948              //  ______________________________________________________________________
1098+ 6948              //
1099+ 6948              // exit      --
1100+ 6948              // exits back to the caller word
1101+ 6948                              New_Def EXIT, "EXIT", is_code, is_normal
1101+ 6948             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1101+ 6948             >
1101+ 6948             >                // dummy db directives used to calculate length of namec
1101+ 6948 45 58 49 54 >                db      "EXIT"
1101+ 694C             >len_NFA         defl    $ - temp_NFA
1101+ 694C             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1101+ 6948             >
1101+ 6948 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1101+ 6949 45 58 49 54 >                db      "EXIT"               // name string in 7-bit ascii, but
1101+ 694D             >                org     $-1                 // alter last byte of Name just above to set
1101+ 694C D4          >                db      {b $} | END_BIT     // msb as name end
1101+ 694D             >
1101+ 694D 3A 69       >                dw      last_NFA            // Link to previous definition Name
1101+ 694F             >EXIT:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1101+ 694F ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1101+ 694F             >                else
1101+ 694F 51 69       >                dw      $ + 2   ; ok        // is pointed by CFA
1101+ 6951             >                endif           ; ok        // for other definitions it "points" the correct handler
1101+ 6951             >                // Use of "; ok" to suppress "warning[fwdref]"
1101+ 6951             >
1101+ 6951             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1102+ 6951                              ldhlrp                      // Get Return Stack Pointer
1102+ 6951 2A 96 63    >                ld      hl,(RP_Pointer)
1103+ 6954 4E                           ld      c, (hl)             // pop Instruction Pointer
1104+ 6955 23                           inc     hl                  // from Return Stack
1105+ 6956 46                           ld      b, (hl)
1106+ 6957 23                           inc     hl
1107+ 6958                              ldrphl                      // Set Return Stack Pointer
1107+ 6958 22 96 63    >                ld      (RP_Pointer),hl
1108+ 695B                              next
1108+ 695B DD E9       >                jp      (ix)
1109+ 695D
1110+ 695D              //  ______________________________________________________________________
1111+ 695D              //
1112+ 695D              // lastl      --
1113+ 695D              // exits back to the caller word
1114+ 695D              //              New_Def EXIT, "LASTL", is_code, is_normal
1115+ 695D              //              ldhlrp                      // Get Return Stack Pointer
1116+ 695D              //              ld      e, (hl)             // pop Instruction Pointer
1117+ 695D              //              inc     hl                  // from Return Stack
1118+ 695D              //              ld      d, (hl)
1119+ 695D              //              inc     hl
1120+ 695D              //              ld      (hl), e
1121+ 695D              //              inc     hl
1122+ 695D              //              ld      (hl), d
1123+ 695D              //              next
1124+ 695D
1125+ 695D              //  ______________________________________________________________________
1126+ 695D              //
1127+ 695D              // (leave)        --
1128+ 695D              // compiled by LEAVE
1129+ 695D              // this forces to exit from loop and jump past
1130+ 695D                              New_Def C_LEAVE, "(LEAVE)", is_code, is_normal
1130+ 695D             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1130+ 695D             >
1130+ 695D             >                // dummy db directives used to calculate length of namec
1130+ 695D 28 4C 45 41 >                db      "(LEAVE)"
1130+ 6961 56 45 29    >
1130+ 6964             >len_NFA         defl    $ - temp_NFA
1130+ 6964             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1130+ 695D             >
1130+ 695D 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1130+ 695E 28 4C 45 41 >                db      "(LEAVE)"               // name string in 7-bit ascii, but
1130+ 6962 56 45 29    >
1130+ 6965             >                org     $-1                 // alter last byte of Name just above to set
1130+ 6964 A9          >                db      {b $} | END_BIT     // msb as name end
1130+ 6965             >
1130+ 6965 48 69       >                dw      last_NFA            // Link to previous definition Name
1130+ 6967             >C_LEAVE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1130+ 6967 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1130+ 6967             >                else
1130+ 6967 69 69       >                dw      $ + 2   ; ok        // is pointed by CFA
1130+ 6969             >                endif           ; ok        // for other definitions it "points" the correct handler
1130+ 6969             >                // Use of "; ok" to suppress "warning[fwdref]"
1130+ 6969             >
1130+ 6969             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1131+ 6969
1132+ 6969                              ldhlrp
1132+ 6969 2A 96 63    >                ld      hl,(RP_Pointer)
1133+ 696C 11 04 00                     ld      de, 4
1134+ 696F 19                           add     hl, de
1135+ 6970                              ldrphl
1135+ 6970 22 96 63    >                ld      (RP_Pointer),hl
1136+ 6973
1137+ 6973 C3 CE 63                     jp      Branch_Ptr       // perform branch consuming following cell
1138+ 6976                              next
1138+ 6976 DD E9       >                jp      (ix)
1139+ 6978
1140+ 6978              //  ______________________________________________________________________
1141+ 6978              //
1142+ 6978              // >r      n --
1143+ 6978              // pop from calculator-stack and push into return-stack
1144+ 6978                              New_Def TO_R, ">R", is_code, is_normal
1144+ 6978             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1144+ 6978             >
1144+ 6978             >                // dummy db directives used to calculate length of namec
1144+ 6978 3E 52       >                db      ">R"
1144+ 697A             >len_NFA         defl    $ - temp_NFA
1144+ 697A             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1144+ 6978             >
1144+ 6978 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1144+ 6979 3E 52       >                db      ">R"               // name string in 7-bit ascii, but
1144+ 697B             >                org     $-1                 // alter last byte of Name just above to set
1144+ 697A D2          >                db      {b $} | END_BIT     // msb as name end
1144+ 697B             >
1144+ 697B 5D 69       >                dw      last_NFA            // Link to previous definition Name
1144+ 697D             >TO_R:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1144+ 697D ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1144+ 697D             >                else
1144+ 697D 7F 69       >                dw      $ + 2   ; ok        // is pointed by CFA
1144+ 697F             >                endif           ; ok        // for other definitions it "points" the correct handler
1144+ 697F             >                // Use of "; ok" to suppress "warning[fwdref]"
1144+ 697F             >
1144+ 697F             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1145+ 697F D1                           pop     de
1146+ 6980                              ldhlrp
1146+ 6980 2A 96 63    >                ld      hl,(RP_Pointer)
1147+ 6983 2B                           dec     hl
1148+ 6984 72                           ld      (hl), d             // store current TOS
1149+ 6985 2B                           dec     hl                  // to Return Stack
1150+ 6986 73                           ld      (hl), e
1151+ 6987                              ldrphl
1151+ 6987 22 96 63    >                ld      (RP_Pointer),hl
1152+ 698A
1153+ 698A                              next
1153+ 698A DD E9       >                jp      (ix)
1154+ 698C
1155+ 698C              //  ______________________________________________________________________
1156+ 698C              //
1157+ 698C              // r>      -- n
1158+ 698C              // pop from return-stack and push into calculator-stack
1159+ 698C                              New_Def R_TO, "R>", is_code, is_normal
1159+ 698C             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1159+ 698C             >
1159+ 698C             >                // dummy db directives used to calculate length of namec
1159+ 698C 52 3E       >                db      "R>"
1159+ 698E             >len_NFA         defl    $ - temp_NFA
1159+ 698E             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1159+ 698C             >
1159+ 698C 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1159+ 698D 52 3E       >                db      "R>"               // name string in 7-bit ascii, but
1159+ 698F             >                org     $-1                 // alter last byte of Name just above to set
1159+ 698E BE          >                db      {b $} | END_BIT     // msb as name end
1159+ 698F             >
1159+ 698F 78 69       >                dw      last_NFA            // Link to previous definition Name
1159+ 6991             >R_TO:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1159+ 6991 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1159+ 6991             >                else
1159+ 6991 93 69       >                dw      $ + 2   ; ok        // is pointed by CFA
1159+ 6993             >                endif           ; ok        // for other definitions it "points" the correct handler
1159+ 6993             >                // Use of "; ok" to suppress "warning[fwdref]"
1159+ 6993             >
1159+ 6993             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1160+ 6993
1161+ 6993                              ldhlrp
1161+ 6993 2A 96 63    >                ld      hl,(RP_Pointer)
1162+ 6996 5E                           ld      e, (hl)             // retrieve from Return Stack
1163+ 6997 23                           inc     hl
1164+ 6998 56                           ld      d, (hl)
1165+ 6999 23                           inc     hl
1166+ 699A                              ldrphl
1166+ 699A 22 96 63    >                ld      (RP_Pointer),hl
1167+ 699D D5                           push    de
1168+ 699E                              next
1168+ 699E DD E9       >                jp      (ix)
1169+ 69A0
1170+ 69A0              //  ______________________________________________________________________
1171+ 69A0              //
1172+ 69A0              // r            -- n
1173+ 69A0              // return on top of stack the value of top of return-stack
1174+ 69A0              // Since this is the same as I, we alter R's CFA to jump there
1175+ 69A0                              New_Def R_OP, "R@", I_Ptr, is_normal
1175+ 69A0             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1175+ 69A0             >
1175+ 69A0             >                // dummy db directives used to calculate length of namec
1175+ 69A0 52 40       >                db      "R@"
1175+ 69A2             >len_NFA         defl    $ - temp_NFA
1175+ 69A2             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1175+ 69A0             >
1175+ 69A0 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1175+ 69A1 52 40       >                db      "R@"               // name string in 7-bit ascii, but
1175+ 69A3             >                org     $-1                 // alter last byte of Name just above to set
1175+ 69A2 C0          >                db      {b $} | END_BIT     // msb as name end
1175+ 69A3             >
1175+ 69A3 8C 69       >                dw      last_NFA            // Link to previous definition Name
1175+ 69A5             >R_OP:          if I_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1175+ 69A5 78 64       >                dw      I_Ptr ; ok        // for primitive definitions  actual code
1175+ 69A7             >                else
1175+ 69A7 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
1175+ 69A7             >                endif           ; ok        // for other definitions it "points" the correct handler
1175+ 69A7             >                // Use of "; ok" to suppress "warning[fwdref]"
1175+ 69A7             >
1175+ 69A7             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1176+ 69A7
1177+ 69A7              //  ______________________________________________________________________
1178+ 69A7              //
1179+ 69A7              // r            -- n
1180+ 69A7              // return on top of stack the value of top of return-stack
1181+ 69A7              // Since this is the same as I, we alter R's CFA to jump there
1182+ 69A7                              New_Def R_OLD, "R", I_Ptr, is_normal
1182+ 69A7             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1182+ 69A7             >
1182+ 69A7             >                // dummy db directives used to calculate length of namec
1182+ 69A7 52          >                db      "R"
1182+ 69A8             >len_NFA         defl    $ - temp_NFA
1182+ 69A8             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1182+ 69A7             >
1182+ 69A7 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1182+ 69A8 52          >                db      "R"               // name string in 7-bit ascii, but
1182+ 69A9             >                org     $-1                 // alter last byte of Name just above to set
1182+ 69A8 D2          >                db      {b $} | END_BIT     // msb as name end
1182+ 69A9             >
1182+ 69A9 A0 69       >                dw      last_NFA            // Link to previous definition Name
1182+ 69AB             >R_OLD:          if I_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1182+ 69AB 78 64       >                dw      I_Ptr ; ok        // for primitive definitions  actual code
1182+ 69AD             >                else
1182+ 69AD ~           >                dw      $ + 2   ; ok        // is pointed by CFA
1182+ 69AD             >                endif           ; ok        // for other definitions it "points" the correct handler
1182+ 69AD             >                // Use of "; ok" to suppress "warning[fwdref]"
1182+ 69AD             >
1182+ 69AD             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1183+ 69AD
1184+ 69AD              //  ______________________________________________________________________
1185+ 69AD              //
1186+ 69AD              // 0=           n -- f
1187+ 69AD              // true (non zero) if n is zero, false (0) elsewere
1188+ 69AD                              New_Def ZEQUAL, "0=", is_code, is_normal
1188+ 69AD             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1188+ 69AD             >
1188+ 69AD             >                // dummy db directives used to calculate length of namec
1188+ 69AD 30 3D       >                db      "0="
1188+ 69AF             >len_NFA         defl    $ - temp_NFA
1188+ 69AF             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1188+ 69AD             >
1188+ 69AD 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1188+ 69AE 30 3D       >                db      "0="               // name string in 7-bit ascii, but
1188+ 69B0             >                org     $-1                 // alter last byte of Name just above to set
1188+ 69AF BD          >                db      {b $} | END_BIT     // msb as name end
1188+ 69B0             >
1188+ 69B0 A7 69       >                dw      last_NFA            // Link to previous definition Name
1188+ 69B2             >ZEQUAL:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1188+ 69B2 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1188+ 69B2             >                else
1188+ 69B2 B4 69       >                dw      $ + 2   ; ok        // is pointed by CFA
1188+ 69B4             >                endif           ; ok        // for other definitions it "points" the correct handler
1188+ 69B4             >                // Use of "; ok" to suppress "warning[fwdref]"
1188+ 69B4             >
1188+ 69B4             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1189+ 69B4              Zero_Equal:
1190+ 69B4 E1                           pop     hl
1191+ 69B5 7D                           ld      a, l
1192+ 69B6 B4                           or      h
1193+ 69B7 21 00 00                     ld      hl, FALSE_FLAG
1194+ 69BA 20 01                        jr      nz, ZEqual_Skip
1195+ 69BC 2B                               dec     hl
1196+ 69BD              ZEqual_Skip:
1197+ 69BD                              psh1
1197+ 69BD E5          >                push    hl
1197+ 69BE DD E9       >                jp      (ix)
1198+ 69C0
1199+ 69C0              //  ______________________________________________________________________
1200+ 69C0              //
1201+ 69C0              // not         a1 -- a2
1202+ 69C0              // increment by 2 top of stack
1203+ 69C0                              New_Def NOT_OP, "NOT", Zero_Equal, is_normal
1203+ 69C0             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1203+ 69C0             >
1203+ 69C0             >                // dummy db directives used to calculate length of namec
1203+ 69C0 4E 4F 54    >                db      "NOT"
1203+ 69C3             >len_NFA         defl    $ - temp_NFA
1203+ 69C3             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1203+ 69C0             >
1203+ 69C0 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1203+ 69C1 4E 4F 54    >                db      "NOT"               // name string in 7-bit ascii, but
1203+ 69C4             >                org     $-1                 // alter last byte of Name just above to set
1203+ 69C3 D4          >                db      {b $} | END_BIT     // msb as name end
1203+ 69C4             >
1203+ 69C4 AD 69       >                dw      last_NFA            // Link to previous definition Name
1203+ 69C6             >NOT_OP:          if Zero_Equal != 0 ; ok        // This is the start address of the direct jp(hl)
1203+ 69C6 B4 69       >                dw      Zero_Equal ; ok        // for primitive definitions  actual code
1203+ 69C8             >                else
1203+ 69C8 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
1203+ 69C8             >                endif           ; ok        // for other definitions it "points" the correct handler
1203+ 69C8             >                // Use of "; ok" to suppress "warning[fwdref]"
1203+ 69C8             >
1203+ 69C8             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1204+ 69C8
1205+ 69C8              //  ______________________________________________________________________
1206+ 69C8              //
1207+ 69C8              // 0<           n -- f
1208+ 69C8              // true (non zero) if n is less than zero, false (0) elsewere
1209+ 69C8                              New_Def ZLESS, "0<", is_code, is_normal
1209+ 69C8             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1209+ 69C8             >
1209+ 69C8             >                // dummy db directives used to calculate length of namec
1209+ 69C8 30 3C       >                db      "0<"
1209+ 69CA             >len_NFA         defl    $ - temp_NFA
1209+ 69CA             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1209+ 69C8             >
1209+ 69C8 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1209+ 69C9 30 3C       >                db      "0<"               // name string in 7-bit ascii, but
1209+ 69CB             >                org     $-1                 // alter last byte of Name just above to set
1209+ 69CA BC          >                db      {b $} | END_BIT     // msb as name end
1209+ 69CB             >
1209+ 69CB C0 69       >                dw      last_NFA            // Link to previous definition Name
1209+ 69CD             >ZLESS:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1209+ 69CD ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1209+ 69CD             >                else
1209+ 69CD CF 69       >                dw      $ + 2   ; ok        // is pointed by CFA
1209+ 69CF             >                endif           ; ok        // for other definitions it "points" the correct handler
1209+ 69CF             >                // Use of "; ok" to suppress "warning[fwdref]"
1209+ 69CF             >
1209+ 69CF             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1210+ 69CF E1                           pop     hl
1211+ 69D0 29                           add     hl, hl
1212+ 69D1 21 00 00                     ld      hl, 0
1213+ 69D4 30 01                        jr      nc, ZLess_Skip
1214+ 69D6 2B                               dec     hl
1215+ 69D7              ZLess_Skip:
1216+ 69D7                              psh1
1216+ 69D7 E5          >                push    hl
1216+ 69D8 DD E9       >                jp      (ix)
1217+ 69DA
1218+ 69DA              //  ______________________________________________________________________
1219+ 69DA              //
1220+ 69DA              // 0>           n -- f
1221+ 69DA              // true (non zero) if n is less than zero, false (0) elsewere
1222+ 69DA                              New_Def ZGREATER, "0>", is_code, is_normal
1222+ 69DA             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1222+ 69DA             >
1222+ 69DA             >                // dummy db directives used to calculate length of namec
1222+ 69DA 30 3E       >                db      "0>"
1222+ 69DC             >len_NFA         defl    $ - temp_NFA
1222+ 69DC             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1222+ 69DA             >
1222+ 69DA 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1222+ 69DB 30 3E       >                db      "0>"               // name string in 7-bit ascii, but
1222+ 69DD             >                org     $-1                 // alter last byte of Name just above to set
1222+ 69DC BE          >                db      {b $} | END_BIT     // msb as name end
1222+ 69DD             >
1222+ 69DD C8 69       >                dw      last_NFA            // Link to previous definition Name
1222+ 69DF             >ZGREATER:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1222+ 69DF ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1222+ 69DF             >                else
1222+ 69DF E1 69       >                dw      $ + 2   ; ok        // is pointed by CFA
1222+ 69E1             >                endif           ; ok        // for other definitions it "points" the correct handler
1222+ 69E1             >                // Use of "; ok" to suppress "warning[fwdref]"
1222+ 69E1             >
1222+ 69E1             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1223+ 69E1 E1                           pop     hl
1224+ 69E2 7D                           ld      a, l
1225+ 69E3 B4                           or      h
1226+ 69E4 29                           add     hl, hl
1227+ 69E5 21 00 00                     ld      hl, FALSE_FLAG
1228+ 69E8 38 04                        jr      c, ZGreater_Skip
1229+ 69EA A7                               and     a
1230+ 69EB 28 01                            jr      z, ZGreater_Skip
1231+ 69ED 2B                                   dec     hl
1232+ 69EE              ZGreater_Skip:
1233+ 69EE                              psh1
1233+ 69EE E5          >                push    hl
1233+ 69EF DD E9       >                jp      (ix)
1234+ 69F1
1235+ 69F1              //  ______________________________________________________________________
1236+ 69F1              //
1237+ 69F1              // +            n1 n2 -- n3
1238+ 69F1              // returns the unsigned sum of two top values
1239+ 69F1                              New_Def PLUS, "+", is_code, is_normal
1239+ 69F1             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1239+ 69F1             >
1239+ 69F1             >                // dummy db directives used to calculate length of namec
1239+ 69F1 2B          >                db      "+"
1239+ 69F2             >len_NFA         defl    $ - temp_NFA
1239+ 69F2             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1239+ 69F1             >
1239+ 69F1 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1239+ 69F2 2B          >                db      "+"               // name string in 7-bit ascii, but
1239+ 69F3             >                org     $-1                 // alter last byte of Name just above to set
1239+ 69F2 AB          >                db      {b $} | END_BIT     // msb as name end
1239+ 69F3             >
1239+ 69F3 DA 69       >                dw      last_NFA            // Link to previous definition Name
1239+ 69F5             >PLUS:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1239+ 69F5 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1239+ 69F5             >                else
1239+ 69F5 F7 69       >                dw      $ + 2   ; ok        // is pointed by CFA
1239+ 69F7             >                endif           ; ok        // for other definitions it "points" the correct handler
1239+ 69F7             >                // Use of "; ok" to suppress "warning[fwdref]"
1239+ 69F7             >
1239+ 69F7             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1240+ 69F7 E1                           pop     hl
1241+ 69F8 D1                           pop     de
1242+ 69F9 19                           add     hl, de
1243+ 69FA
1244+ 69FA                              psh1
1244+ 69FA E5          >                push    hl
1244+ 69FB DD E9       >                jp      (ix)
1245+ 69FD
1246+ 69FD
1247+ 69FD              //  ______________________________________________________________________
1248+ 69FD              //
1249+ 69FD              // d+           d1 d2 -- d3
1250+ 69FD              // returns the unsigned sum of two top double-numbers
1251+ 69FD              //      d2  d1
1252+ 69FD              //      h l h l
1253+ 69FD              // SP   LHEDLHED
1254+ 69FD              // SP  +01234567
1255+ 69FD                              New_Def DPLUS, "D+", is_code, is_normal
1255+ 69FD             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1255+ 69FD             >
1255+ 69FD             >                // dummy db directives used to calculate length of namec
1255+ 69FD 44 2B       >                db      "D+"
1255+ 69FF             >len_NFA         defl    $ - temp_NFA
1255+ 69FF             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1255+ 69FD             >
1255+ 69FD 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1255+ 69FE 44 2B       >                db      "D+"               // name string in 7-bit ascii, but
1255+ 6A00             >                org     $-1                 // alter last byte of Name just above to set
1255+ 69FF AB          >                db      {b $} | END_BIT     // msb as name end
1255+ 6A00             >
1255+ 6A00 F1 69       >                dw      last_NFA            // Link to previous definition Name
1255+ 6A02             >DPLUS:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1255+ 6A02 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1255+ 6A02             >                else
1255+ 6A02 04 6A       >                dw      $ + 2   ; ok        // is pointed by CFA
1255+ 6A04             >                endif           ; ok        // for other definitions it "points" the correct handler
1255+ 6A04             >                // Use of "; ok" to suppress "warning[fwdref]"
1255+ 6A04             >
1255+ 6A04             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1256+ 6A04
1257+ 6A04 D9                           exx
1258+ 6A05 C1                           pop     bc                  // bc := d2.H
1259+ 6A06 D1                           pop     de                  // hl := d2.L
1260+ 6A07 E1                           pop     hl                  // d1.H
1261+ 6A08 E3                           ex      (sp), hl            // d1.L
1262+ 6A09 19                           add     hl, de              // hl := d2.L + d1.L
1263+ 6A0A E3                           ex      (sp), hl            // d1.H
1264+ 6A0B ED 4A                        adc     hl, bc              // d1.H + d2.H
1265+ 6A0D E5                           push    hl
1266+ 6A0E D9                           exx
1267+ 6A0F                              next
1267+ 6A0F DD E9       >                jp      (ix)
1268+ 6A11
1269+ 6A11              //  ______________________________________________________________________
1270+ 6A11              //
1271+ 6A11              // 1+           n1 -- n2
1272+ 6A11              // increment by 1 top of stack
1273+ 6A11                              New_Def ONE_PLUS, "1+", is_code, is_normal
1273+ 6A11             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1273+ 6A11             >
1273+ 6A11             >                // dummy db directives used to calculate length of namec
1273+ 6A11 31 2B       >                db      "1+"
1273+ 6A13             >len_NFA         defl    $ - temp_NFA
1273+ 6A13             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1273+ 6A11             >
1273+ 6A11 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1273+ 6A12 31 2B       >                db      "1+"               // name string in 7-bit ascii, but
1273+ 6A14             >                org     $-1                 // alter last byte of Name just above to set
1273+ 6A13 AB          >                db      {b $} | END_BIT     // msb as name end
1273+ 6A14             >
1273+ 6A14 FD 69       >                dw      last_NFA            // Link to previous definition Name
1273+ 6A16             >ONE_PLUS:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1273+ 6A16 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1273+ 6A16             >                else
1273+ 6A16 18 6A       >                dw      $ + 2   ; ok        // is pointed by CFA
1273+ 6A18             >                endif           ; ok        // for other definitions it "points" the correct handler
1273+ 6A18             >                // Use of "; ok" to suppress "warning[fwdref]"
1273+ 6A18             >
1273+ 6A18             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1274+ 6A18 E1                           pop     hl
1275+ 6A19 23                           inc     hl
1276+ 6A1A
1277+ 6A1A                              psh1
1277+ 6A1A E5          >                push    hl
1277+ 6A1B DD E9       >                jp      (ix)
1278+ 6A1D
1279+ 6A1D              //  ______________________________________________________________________
1280+ 6A1D              //
1281+ 6A1D              // 1-           n1 -- n2
1282+ 6A1D              // decrement by 1 top of stack
1283+ 6A1D                              New_Def ONE_SUBTRACT, "1-", is_code, is_normal
1283+ 6A1D             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1283+ 6A1D             >
1283+ 6A1D             >                // dummy db directives used to calculate length of namec
1283+ 6A1D 31 2D       >                db      "1-"
1283+ 6A1F             >len_NFA         defl    $ - temp_NFA
1283+ 6A1F             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1283+ 6A1D             >
1283+ 6A1D 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1283+ 6A1E 31 2D       >                db      "1-"               // name string in 7-bit ascii, but
1283+ 6A20             >                org     $-1                 // alter last byte of Name just above to set
1283+ 6A1F AD          >                db      {b $} | END_BIT     // msb as name end
1283+ 6A20             >
1283+ 6A20 11 6A       >                dw      last_NFA            // Link to previous definition Name
1283+ 6A22             >ONE_SUBTRACT:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1283+ 6A22 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1283+ 6A22             >                else
1283+ 6A22 24 6A       >                dw      $ + 2   ; ok        // is pointed by CFA
1283+ 6A24             >                endif           ; ok        // for other definitions it "points" the correct handler
1283+ 6A24             >                // Use of "; ok" to suppress "warning[fwdref]"
1283+ 6A24             >
1283+ 6A24             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1284+ 6A24 E1                           pop     hl
1285+ 6A25 2B                           dec     hl
1286+ 6A26
1287+ 6A26                              psh1
1287+ 6A26 E5          >                push    hl
1287+ 6A27 DD E9       >                jp      (ix)
1288+ 6A29
1289+ 6A29              //  ______________________________________________________________________
1290+ 6A29              //
1291+ 6A29              // 2+           n1 -- n2
1292+ 6A29              // increment by 2 top of stack
1293+ 6A29                              New_Def TWO_PLUS, "2+", is_code, is_normal
1293+ 6A29             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1293+ 6A29             >
1293+ 6A29             >                // dummy db directives used to calculate length of namec
1293+ 6A29 32 2B       >                db      "2+"
1293+ 6A2B             >len_NFA         defl    $ - temp_NFA
1293+ 6A2B             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1293+ 6A29             >
1293+ 6A29 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1293+ 6A2A 32 2B       >                db      "2+"               // name string in 7-bit ascii, but
1293+ 6A2C             >                org     $-1                 // alter last byte of Name just above to set
1293+ 6A2B AB          >                db      {b $} | END_BIT     // msb as name end
1293+ 6A2C             >
1293+ 6A2C 1D 6A       >                dw      last_NFA            // Link to previous definition Name
1293+ 6A2E             >TWO_PLUS:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1293+ 6A2E ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1293+ 6A2E             >                else
1293+ 6A2E 30 6A       >                dw      $ + 2   ; ok        // is pointed by CFA
1293+ 6A30             >                endif           ; ok        // for other definitions it "points" the correct handler
1293+ 6A30             >                // Use of "; ok" to suppress "warning[fwdref]"
1293+ 6A30             >
1293+ 6A30             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1294+ 6A30              Two_Plus:
1295+ 6A30 E1                           pop     hl
1296+ 6A31 23                           inc     hl
1297+ 6A32 23                           inc     hl
1298+ 6A33
1299+ 6A33                              psh1
1299+ 6A33 E5          >                push    hl
1299+ 6A34 DD E9       >                jp      (ix)
1300+ 6A36
1301+ 6A36              //  ______________________________________________________________________
1302+ 6A36              //
1303+ 6A36              // cell+        a1 -- a2
1304+ 6A36              // increment by 2 top of stack
1305+ 6A36                              New_Def CELL_PLUS, "CELL+", Two_Plus, is_normal
1305+ 6A36             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1305+ 6A36             >
1305+ 6A36             >                // dummy db directives used to calculate length of namec
1305+ 6A36 43 45 4C 4C >                db      "CELL+"
1305+ 6A3A 2B          >
1305+ 6A3B             >len_NFA         defl    $ - temp_NFA
1305+ 6A3B             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1305+ 6A36             >
1305+ 6A36 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1305+ 6A37 43 45 4C 4C >                db      "CELL+"               // name string in 7-bit ascii, but
1305+ 6A3B 2B          >
1305+ 6A3C             >                org     $-1                 // alter last byte of Name just above to set
1305+ 6A3B AB          >                db      {b $} | END_BIT     // msb as name end
1305+ 6A3C             >
1305+ 6A3C 29 6A       >                dw      last_NFA            // Link to previous definition Name
1305+ 6A3E             >CELL_PLUS:          if Two_Plus != 0 ; ok        // This is the start address of the direct jp(hl)
1305+ 6A3E 30 6A       >                dw      Two_Plus ; ok        // for primitive definitions  actual code
1305+ 6A40             >                else
1305+ 6A40 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
1305+ 6A40             >                endif           ; ok        // for other definitions it "points" the correct handler
1305+ 6A40             >                // Use of "; ok" to suppress "warning[fwdref]"
1305+ 6A40             >
1305+ 6A40             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1306+ 6A40
1307+ 6A40              //  ______________________________________________________________________
1308+ 6A40              //
1309+ 6A40              // align        a1 -- a2
1310+ 6A40              // align memory : not used
1311+ 6A40              //              New_Def ALIGN_ADDR, "ALIGN", is_code, is_normal
1312+ 6A40              //            next
1313+ 6A40
1314+ 6A40              //  ______________________________________________________________________
1315+ 6A40              //
1316+ 6A40              // cell-        a1 -- a2
1317+ 6A40              // decrement by 2 top of stack
1318+ 6A40                              New_Def CELL_MINUS, "CELL-", is_code, is_normal
1318+ 6A40             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1318+ 6A40             >
1318+ 6A40             >                // dummy db directives used to calculate length of namec
1318+ 6A40 43 45 4C 4C >                db      "CELL-"
1318+ 6A44 2D          >
1318+ 6A45             >len_NFA         defl    $ - temp_NFA
1318+ 6A45             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1318+ 6A40             >
1318+ 6A40 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1318+ 6A41 43 45 4C 4C >                db      "CELL-"               // name string in 7-bit ascii, but
1318+ 6A45 2D          >
1318+ 6A46             >                org     $-1                 // alter last byte of Name just above to set
1318+ 6A45 AD          >                db      {b $} | END_BIT     // msb as name end
1318+ 6A46             >
1318+ 6A46 36 6A       >                dw      last_NFA            // Link to previous definition Name
1318+ 6A48             >CELL_MINUS:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1318+ 6A48 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1318+ 6A48             >                else
1318+ 6A48 4A 6A       >                dw      $ + 2   ; ok        // is pointed by CFA
1318+ 6A4A             >                endif           ; ok        // for other definitions it "points" the correct handler
1318+ 6A4A             >                // Use of "; ok" to suppress "warning[fwdref]"
1318+ 6A4A             >
1318+ 6A4A             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1319+ 6A4A              CellMinus:
1320+ 6A4A E1                           pop     hl
1321+ 6A4B 2B                           dec     hl
1322+ 6A4C 2B                           dec     hl
1323+ 6A4D E5                           push    hl
1324+ 6A4E                              next
1324+ 6A4E DD E9       >                jp      (ix)
1325+ 6A50
1326+ 6A50              //  ______________________________________________________________________
1327+ 6A50              //
1328+ 6A50              // 2-           a1 -- a2
1329+ 6A50              // decrement by 2 top of stack
1330+ 6A50                              New_Def TWO_MINUS, "2-", CellMinus, is_normal
1330+ 6A50             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1330+ 6A50             >
1330+ 6A50             >                // dummy db directives used to calculate length of namec
1330+ 6A50 32 2D       >                db      "2-"
1330+ 6A52             >len_NFA         defl    $ - temp_NFA
1330+ 6A52             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1330+ 6A50             >
1330+ 6A50 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1330+ 6A51 32 2D       >                db      "2-"               // name string in 7-bit ascii, but
1330+ 6A53             >                org     $-1                 // alter last byte of Name just above to set
1330+ 6A52 AD          >                db      {b $} | END_BIT     // msb as name end
1330+ 6A53             >
1330+ 6A53 40 6A       >                dw      last_NFA            // Link to previous definition Name
1330+ 6A55             >TWO_MINUS:          if CellMinus != 0 ; ok        // This is the start address of the direct jp(hl)
1330+ 6A55 4A 6A       >                dw      CellMinus ; ok        // for primitive definitions  actual code
1330+ 6A57             >                else
1330+ 6A57 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
1330+ 6A57             >                endif           ; ok        // for other definitions it "points" the correct handler
1330+ 6A57             >                // Use of "; ok" to suppress "warning[fwdref]"
1330+ 6A57             >
1330+ 6A57             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1331+ 6A57
1332+ 6A57              //  ______________________________________________________________________
1333+ 6A57              //
1334+ 6A57              // negate        n1 -- n2
1335+ 6A57              // change the sign of number
1336+ 6A57                              New_Def MINUS, "NEGATE", is_code, is_normal
1336+ 6A57             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1336+ 6A57             >
1336+ 6A57             >                // dummy db directives used to calculate length of namec
1336+ 6A57 4E 45 47 41 >                db      "NEGATE"
1336+ 6A5B 54 45       >
1336+ 6A5D             >len_NFA         defl    $ - temp_NFA
1336+ 6A5D             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1336+ 6A57             >
1336+ 6A57 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1336+ 6A58 4E 45 47 41 >                db      "NEGATE"               // name string in 7-bit ascii, but
1336+ 6A5C 54 45       >
1336+ 6A5E             >                org     $-1                 // alter last byte of Name just above to set
1336+ 6A5D C5          >                db      {b $} | END_BIT     // msb as name end
1336+ 6A5E             >
1336+ 6A5E 50 6A       >                dw      last_NFA            // Link to previous definition Name
1336+ 6A60             >MINUS:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1336+ 6A60 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1336+ 6A60             >                else
1336+ 6A60 62 6A       >                dw      $ + 2   ; ok        // is pointed by CFA
1336+ 6A62             >                endif           ; ok        // for other definitions it "points" the correct handler
1336+ 6A62             >                // Use of "; ok" to suppress "warning[fwdref]"
1336+ 6A62             >
1336+ 6A62             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1337+ 6A62 21 00 00                     ld      hl, 0               // subtract from 0
1338+ 6A65 D1                           pop     de
1339+ 6A66 B7                           or      a
1340+ 6A67 ED 52                        sbc     hl, de
1341+ 6A69
1342+ 6A69                              psh1
1342+ 6A69 E5          >                push    hl
1342+ 6A6A DD E9       >                jp      (ix)
1343+ 6A6C
1344+ 6A6C              //  ______________________________________________________________________
1345+ 6A6C              //
1346+ 6A6C              // dnegate      d1 -- d2
1347+ 6A6C              // change the sign of a double number
1348+ 6A6C                              New_Def DMINUS, "DNEGATE", is_code, is_normal
1348+ 6A6C             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1348+ 6A6C             >
1348+ 6A6C             >                // dummy db directives used to calculate length of namec
1348+ 6A6C 44 4E 45 47 >                db      "DNEGATE"
1348+ 6A70 41 54 45    >
1348+ 6A73             >len_NFA         defl    $ - temp_NFA
1348+ 6A73             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1348+ 6A6C             >
1348+ 6A6C 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1348+ 6A6D 44 4E 45 47 >                db      "DNEGATE"               // name string in 7-bit ascii, but
1348+ 6A71 41 54 45    >
1348+ 6A74             >                org     $-1                 // alter last byte of Name just above to set
1348+ 6A73 C5          >                db      {b $} | END_BIT     // msb as name end
1348+ 6A74             >
1348+ 6A74 57 6A       >                dw      last_NFA            // Link to previous definition Name
1348+ 6A76             >DMINUS:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1348+ 6A76 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1348+ 6A76             >                else
1348+ 6A76 78 6A       >                dw      $ + 2   ; ok        // is pointed by CFA
1348+ 6A78             >                endif           ; ok        // for other definitions it "points" the correct handler
1348+ 6A78             >                // Use of "; ok" to suppress "warning[fwdref]"
1348+ 6A78             >
1348+ 6A78             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1349+ 6A78 D9                           exx
1350+ 6A79 C1                           pop     bc                  // d1.H
1351+ 6A7A D1                           pop     de                  // d1.L
1352+ 6A7B AF                           xor     a
1353+ 6A7C 67                           ld      h, a
1354+ 6A7D 6F                           ld      l, a
1355+ 6A7E ED 52                        sbc     hl, de              // subtact from zero
1356+ 6A80 E5                           push    hl                  // > d2-L
1357+ 6A81 67                           ld      h, a
1358+ 6A82 6F                           ld      l, a
1359+ 6A83 ED 42                        sbc     hl, bc              // subtract from zero with carry
1360+ 6A85                                                          // > d2-H
1361+ 6A85 E5                           push    hl
1362+ 6A86 D9                           exx
1363+ 6A87                              next
1363+ 6A87 DD E9       >                jp      (ix)
1364+ 6A89
1365+ 6A89              //  ______________________________________________________________________
1366+ 6A89              //
1367+ 6A89              // over         n1 n2 -- n1 n2 n1
1368+ 6A89              // copy the second value of stack and put it on top.
1369+ 6A89                              New_Def OVER, "OVER", is_code, is_normal
1369+ 6A89             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1369+ 6A89             >
1369+ 6A89             >                // dummy db directives used to calculate length of namec
1369+ 6A89 4F 56 45 52 >                db      "OVER"
1369+ 6A8D             >len_NFA         defl    $ - temp_NFA
1369+ 6A8D             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1369+ 6A89             >
1369+ 6A89 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1369+ 6A8A 4F 56 45 52 >                db      "OVER"               // name string in 7-bit ascii, but
1369+ 6A8E             >                org     $-1                 // alter last byte of Name just above to set
1369+ 6A8D D2          >                db      {b $} | END_BIT     // msb as name end
1369+ 6A8E             >
1369+ 6A8E 6C 6A       >                dw      last_NFA            // Link to previous definition Name
1369+ 6A90             >OVER:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1369+ 6A90 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1369+ 6A90             >                else
1369+ 6A90 92 6A       >                dw      $ + 2   ; ok        // is pointed by CFA
1369+ 6A92             >                endif           ; ok        // for other definitions it "points" the correct handler
1369+ 6A92             >                // Use of "; ok" to suppress "warning[fwdref]"
1369+ 6A92             >
1369+ 6A92             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1370+ 6A92 D1                           pop     de                  //   n2
1371+ 6A93 E1                           pop     hl                  // < n1
1372+ 6A94 E5                           push    hl                  // > n1
1373+ 6A95 D5                           push    de                  // > n2
1374+ 6A96 E5                           push    hl                  // > n1
1375+ 6A97                              next
1375+ 6A97 DD E9       >                jp      (ix)
1376+ 6A99
1377+ 6A99              //  ______________________________________________________________________
1378+ 6A99              //
1379+ 6A99              // drop         n1 --
1380+ 6A99              // drops the top of stack
1381+ 6A99                              New_Def DROP, "DROP", is_code, is_normal
1381+ 6A99             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1381+ 6A99             >
1381+ 6A99             >                // dummy db directives used to calculate length of namec
1381+ 6A99 44 52 4F 50 >                db      "DROP"
1381+ 6A9D             >len_NFA         defl    $ - temp_NFA
1381+ 6A9D             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1381+ 6A99             >
1381+ 6A99 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1381+ 6A9A 44 52 4F 50 >                db      "DROP"               // name string in 7-bit ascii, but
1381+ 6A9E             >                org     $-1                 // alter last byte of Name just above to set
1381+ 6A9D D0          >                db      {b $} | END_BIT     // msb as name end
1381+ 6A9E             >
1381+ 6A9E 89 6A       >                dw      last_NFA            // Link to previous definition Name
1381+ 6AA0             >DROP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1381+ 6AA0 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1381+ 6AA0             >                else
1381+ 6AA0 A2 6A       >                dw      $ + 2   ; ok        // is pointed by CFA
1381+ 6AA2             >                endif           ; ok        // for other definitions it "points" the correct handler
1381+ 6AA2             >                // Use of "; ok" to suppress "warning[fwdref]"
1381+ 6AA2             >
1381+ 6AA2             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1382+ 6AA2 E1                           pop     hl                  // < n1 and discard previous TOS
1383+ 6AA3                              next
1383+ 6AA3 DD E9       >                jp      (ix)
1384+ 6AA5
1385+ 6AA5              //  ______________________________________________________________________
1386+ 6AA5              //
1387+ 6AA5              // nip          n1 n2 -- n2
1388+ 6AA5              // drops the second elemento on the stack
1389+ 6AA5                              New_Def NIP, "NIP", is_code, is_normal
1389+ 6AA5             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1389+ 6AA5             >
1389+ 6AA5             >                // dummy db directives used to calculate length of namec
1389+ 6AA5 4E 49 50    >                db      "NIP"
1389+ 6AA8             >len_NFA         defl    $ - temp_NFA
1389+ 6AA8             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1389+ 6AA5             >
1389+ 6AA5 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1389+ 6AA6 4E 49 50    >                db      "NIP"               // name string in 7-bit ascii, but
1389+ 6AA9             >                org     $-1                 // alter last byte of Name just above to set
1389+ 6AA8 D0          >                db      {b $} | END_BIT     // msb as name end
1389+ 6AA9             >
1389+ 6AA9 99 6A       >                dw      last_NFA            // Link to previous definition Name
1389+ 6AAB             >NIP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1389+ 6AAB ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1389+ 6AAB             >                else
1389+ 6AAB AD 6A       >                dw      $ + 2   ; ok        // is pointed by CFA
1389+ 6AAD             >                endif           ; ok        // for other definitions it "points" the correct handler
1389+ 6AAD             >                // Use of "; ok" to suppress "warning[fwdref]"
1389+ 6AAD             >
1389+ 6AAD             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1390+ 6AAD
1391+ 6AAD E1                           pop     hl                  // < n1 discarded
1392+ 6AAE E3                           ex      (sp), hl
1393+ 6AAF                              next
1393+ 6AAF DD E9       >                jp      (ix)
1394+ 6AB1
1395+ 6AB1              //  ______________________________________________________________________
1396+ 6AB1              //
1397+ 6AB1              // tuck         n1 n2 -- n2 n1 n2
1398+ 6AB1              // copy the top element after the second.
1399+ 6AB1                              New_Def TUCK, "TUCK", is_code, is_normal
1399+ 6AB1             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1399+ 6AB1             >
1399+ 6AB1             >                // dummy db directives used to calculate length of namec
1399+ 6AB1 54 55 43 4B >                db      "TUCK"
1399+ 6AB5             >len_NFA         defl    $ - temp_NFA
1399+ 6AB5             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1399+ 6AB1             >
1399+ 6AB1 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1399+ 6AB2 54 55 43 4B >                db      "TUCK"               // name string in 7-bit ascii, but
1399+ 6AB6             >                org     $-1                 // alter last byte of Name just above to set
1399+ 6AB5 CB          >                db      {b $} | END_BIT     // msb as name end
1399+ 6AB6             >
1399+ 6AB6 A5 6A       >                dw      last_NFA            // Link to previous definition Name
1399+ 6AB8             >TUCK:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1399+ 6AB8 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1399+ 6AB8             >                else
1399+ 6AB8 BA 6A       >                dw      $ + 2   ; ok        // is pointed by CFA
1399+ 6ABA             >                endif           ; ok        // for other definitions it "points" the correct handler
1399+ 6ABA             >                // Use of "; ok" to suppress "warning[fwdref]"
1399+ 6ABA             >
1399+ 6ABA             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1400+ 6ABA E1                           pop     hl
1401+ 6ABB D1                           pop     de                  // < n1
1402+ 6ABC E5                           push    hl                  // > n2  and TOS
1403+ 6ABD D5                           push    de                  // > n1
1404+ 6ABE E5                           push    hl
1405+ 6ABF                              next
1405+ 6ABF DD E9       >                jp      (ix)
1406+ 6AC1
1407+ 6AC1              //  ______________________________________________________________________
1408+ 6AC1              //
1409+ 6AC1              // swap         n1 n2 -- n2 n1
1410+ 6AC1              // swaps the two values on top of stack
1411+ 6AC1                              New_Def SWAP, "SWAP", is_code, is_normal
1411+ 6AC1             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1411+ 6AC1             >
1411+ 6AC1             >                // dummy db directives used to calculate length of namec
1411+ 6AC1 53 57 41 50 >                db      "SWAP"
1411+ 6AC5             >len_NFA         defl    $ - temp_NFA
1411+ 6AC5             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1411+ 6AC1             >
1411+ 6AC1 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1411+ 6AC2 53 57 41 50 >                db      "SWAP"               // name string in 7-bit ascii, but
1411+ 6AC6             >                org     $-1                 // alter last byte of Name just above to set
1411+ 6AC5 D0          >                db      {b $} | END_BIT     // msb as name end
1411+ 6AC6             >
1411+ 6AC6 B1 6A       >                dw      last_NFA            // Link to previous definition Name
1411+ 6AC8             >SWAP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1411+ 6AC8 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1411+ 6AC8             >                else
1411+ 6AC8 CA 6A       >                dw      $ + 2   ; ok        // is pointed by CFA
1411+ 6ACA             >                endif           ; ok        // for other definitions it "points" the correct handler
1411+ 6ACA             >                // Use of "; ok" to suppress "warning[fwdref]"
1411+ 6ACA             >
1411+ 6ACA             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1412+ 6ACA E1                           pop     hl                  // < n1
1413+ 6ACB E3                           ex      (sp),hl             // > n2
1414+ 6ACC E5                           push    hl                  // copy n1 to TOS
1415+ 6ACD                              next
1415+ 6ACD DD E9       >                jp      (ix)
1416+ 6ACF
1417+ 6ACF              //  ______________________________________________________________________
1418+ 6ACF              //
1419+ 6ACF              // dup         n -- n n
1420+ 6ACF              // duplicates the top value of stack
1421+ 6ACF                              New_Def DUP, "DUP", is_code, is_normal
1421+ 6ACF             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1421+ 6ACF             >
1421+ 6ACF             >                // dummy db directives used to calculate length of namec
1421+ 6ACF 44 55 50    >                db      "DUP"
1421+ 6AD2             >len_NFA         defl    $ - temp_NFA
1421+ 6AD2             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1421+ 6ACF             >
1421+ 6ACF 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1421+ 6AD0 44 55 50    >                db      "DUP"               // name string in 7-bit ascii, but
1421+ 6AD3             >                org     $-1                 // alter last byte of Name just above to set
1421+ 6AD2 D0          >                db      {b $} | END_BIT     // msb as name end
1421+ 6AD3             >
1421+ 6AD3 C1 6A       >                dw      last_NFA            // Link to previous definition Name
1421+ 6AD5             >DUP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1421+ 6AD5 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1421+ 6AD5             >                else
1421+ 6AD5 D7 6A       >                dw      $ + 2   ; ok        // is pointed by CFA
1421+ 6AD7             >                endif           ; ok        // for other definitions it "points" the correct handler
1421+ 6AD7             >                // Use of "; ok" to suppress "warning[fwdref]"
1421+ 6AD7             >
1421+ 6AD7             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1422+ 6AD7 E1                           pop     hl
1423+ 6AD8 E5                           push    hl                  // > n duplicate TOS
1424+ 6AD9 E5                           push    hl
1425+ 6ADA                              next
1425+ 6ADA DD E9       >                jp      (ix)
1426+ 6ADC
1427+ 6ADC              //  ______________________________________________________________________
1428+ 6ADC              //
1429+ 6ADC              // rot         n1 n2 n3 -- n2 n3 n1
1430+ 6ADC              // Rotates the 3 top values of stack by picking the 3rd in access-order
1431+ 6ADC              // and putting it on top. The other two are shifted down one place.
1432+ 6ADC                              New_Def ROT, "ROT", is_code, is_normal
1432+ 6ADC             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1432+ 6ADC             >
1432+ 6ADC             >                // dummy db directives used to calculate length of namec
1432+ 6ADC 52 4F 54    >                db      "ROT"
1432+ 6ADF             >len_NFA         defl    $ - temp_NFA
1432+ 6ADF             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1432+ 6ADC             >
1432+ 6ADC 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1432+ 6ADD 52 4F 54    >                db      "ROT"               // name string in 7-bit ascii, but
1432+ 6AE0             >                org     $-1                 // alter last byte of Name just above to set
1432+ 6ADF D4          >                db      {b $} | END_BIT     // msb as name end
1432+ 6AE0             >
1432+ 6AE0 CF 6A       >                dw      last_NFA            // Link to previous definition Name
1432+ 6AE2             >ROT:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1432+ 6AE2 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1432+ 6AE2             >                else
1432+ 6AE2 E4 6A       >                dw      $ + 2   ; ok        // is pointed by CFA
1432+ 6AE4             >                endif           ; ok        // for other definitions it "points" the correct handler
1432+ 6AE4             >                // Use of "; ok" to suppress "warning[fwdref]"
1432+ 6AE4             >
1432+ 6AE4             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1433+ 6AE4 D1                           pop     de                  // < n3
1434+ 6AE5 E1                           pop     hl                  // < n2
1435+ 6AE6 E3                           ex      (sp),hl             // > n2 < n1
1436+ 6AE7 D5                           push    de                  // > n3
1437+ 6AE8 E5                           push    hl                  // copy n1 to TOS
1438+ 6AE9                              next
1438+ 6AE9 DD E9       >                jp      (ix)
1439+ 6AEB
1440+ 6AEB              //  ______________________________________________________________________
1441+ 6AEB              //
1442+ 6AEB              // -rot         n1 n2 n3 -- n3 n1 n2
1443+ 6AEB              // Rotates the 3 top values of stack by picking the 1st in access-order
1444+ 6AEB              // and putting back to 3rd place. The other two are shifted down one place.
1445+ 6AEB                              New_Def DASH_ROT, "-ROT", is_code, is_normal
1445+ 6AEB             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1445+ 6AEB             >
1445+ 6AEB             >                // dummy db directives used to calculate length of namec
1445+ 6AEB 2D 52 4F 54 >                db      "-ROT"
1445+ 6AEF             >len_NFA         defl    $ - temp_NFA
1445+ 6AEF             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1445+ 6AEB             >
1445+ 6AEB 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1445+ 6AEC 2D 52 4F 54 >                db      "-ROT"               // name string in 7-bit ascii, but
1445+ 6AF0             >                org     $-1                 // alter last byte of Name just above to set
1445+ 6AEF D4          >                db      {b $} | END_BIT     // msb as name end
1445+ 6AF0             >
1445+ 6AF0 DC 6A       >                dw      last_NFA            // Link to previous definition Name
1445+ 6AF2             >DASH_ROT:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1445+ 6AF2 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1445+ 6AF2             >                else
1445+ 6AF2 F4 6A       >                dw      $ + 2   ; ok        // is pointed by CFA
1445+ 6AF4             >                endif           ; ok        // for other definitions it "points" the correct handler
1445+ 6AF4             >                // Use of "; ok" to suppress "warning[fwdref]"
1445+ 6AF4             >
1445+ 6AF4             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1446+ 6AF4 E1                           pop     hl                  // < n3
1447+ 6AF5 D1                           pop     de                  // < n2
1448+ 6AF6 E3                           ex      (sp),hl             // > n3 < n1
1449+ 6AF7 E5                           push    hl                  // > n1
1450+ 6AF8 D5                           push    de                  // copy n3 to TOS
1451+ 6AF9                              next
1451+ 6AF9 DD E9       >                jp      (ix)
1452+ 6AFB
1453+ 6AFB              //  ______________________________________________________________________
1454+ 6AFB              //
1455+ 6AFB              // pick        n1 -- nx
1456+ 6AFB              // picks the nth element from TOS
1457+ 6AFB                              New_Def PICK, "PICK", is_code, is_normal
1457+ 6AFB             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1457+ 6AFB             >
1457+ 6AFB             >                // dummy db directives used to calculate length of namec
1457+ 6AFB 50 49 43 4B >                db      "PICK"
1457+ 6AFF             >len_NFA         defl    $ - temp_NFA
1457+ 6AFF             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1457+ 6AFB             >
1457+ 6AFB 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1457+ 6AFC 50 49 43 4B >                db      "PICK"               // name string in 7-bit ascii, but
1457+ 6B00             >                org     $-1                 // alter last byte of Name just above to set
1457+ 6AFF CB          >                db      {b $} | END_BIT     // msb as name end
1457+ 6B00             >
1457+ 6B00 EB 6A       >                dw      last_NFA            // Link to previous definition Name
1457+ 6B02             >PICK:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1457+ 6B02 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1457+ 6B02             >                else
1457+ 6B02 04 6B       >                dw      $ + 2   ; ok        // is pointed by CFA
1457+ 6B04             >                endif           ; ok        // for other definitions it "points" the correct handler
1457+ 6B04             >                // Use of "; ok" to suppress "warning[fwdref]"
1457+ 6B04             >
1457+ 6B04             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1458+ 6B04 E1                           pop     hl                  // take TOS as index
1459+ 6B05 29                           add     hl, hl              // as cells
1460+ 6B06 39                           add     hl, sp              // from Stack Pointer
1461+ 6B07 7E                           ld      a, (hl)             // replace TOS
1462+ 6B08 23                           inc     hl
1463+ 6B09 66                           ld      h, (hl)
1464+ 6B0A 6F                           ld      l, a
1465+ 6B0B
1466+ 6B0B                              psh1
1466+ 6B0B E5          >                push    hl
1466+ 6B0C DD E9       >                jp      (ix)
1467+ 6B0E
1468+ 6B0E
1469+ 6B0E              //  ______________________________________________________________________
1470+ 6B0E              //
1471+ 6B0E              // roll        n1 n2 n3 ... n -- n2 n3 ... n1
1472+ 6B0E              // picks the nth element from TOS
1473+ 6B0E              //              New_Def ROLL, "ROLL", is_code, is_normal
1474+ 6B0E              //              exx                     // we need all registers free
1475+ 6B0E              //              pop     hl              // number of cells to roll
1476+ 6B0E              //              ld      a, h
1477+ 6B0E              //              or       l
1478+ 6B0E              //              jr      z, Roll_Zero
1479+ 6B0E              //                  add     hl, hl              // number of bytes to move
1480+ 6B0E              //                  ld      b, h
1481+ 6B0E              //                  ld      c, l
1482+ 6B0E              //                  add     hl, sp          // address of n1
1483+ 6B0E              //                  ld      a, (hl)         // take n1 into a and a,
1484+ 6B0E              //                  inc     hl
1485+ 6B0E              //                  ex      af, af'
1486+ 6B0E              //                  ld      a, (hl)         // take n1 into a and a,
1487+ 6B0E              //                  ld      d, h
1488+ 6B0E              //                  ld      e, l
1489+ 6B0E              //                  dec     hl
1490+ 6B0E              //                  dec     hl
1491+ 6B0E              //                  lddr
1492+ 6B0E              //                  ex      de, hl
1493+ 6B0E              //                  ld      (hl), a
1494+ 6B0E              //                  dec     hl
1495+ 6B0E              //                  ex      af, af'
1496+ 6B0E              //                  ld      (hl), a
1497+ 6B0E              //Roll_Zero:
1498+ 6B0E              //              exx
1499+ 6B0E              //              next
1500+ 6B0E
1501+ 6B0E
1502+ 6B0E              //  ______________________________________________________________________
1503+ 6B0E              //
1504+ 6B0E              // 2over        d1 d2 -- d1 d2 d1
1505+ 6B0E              //              n1 n2 n3 n4 -- n1 n2 n3 n4 n1 n2
1506+ 6B0E              // copy the second double of stack and put on top.
1507+ 6B0E              //              New_Def TWO_OVER, "2OVER", is_code, is_normal
1508+ 6B0E              //
1509+ 6B0E              //              ld      hl, 7
1510+ 6B0E              //              add     hl, sp
1511+ 6B0E              //              ld      d, (hl)
1512+ 6B0E              //              dec     hl
1513+ 6B0E              //              ld      e, (hl)             // d1-L
1514+ 6B0E              //              push    de
1515+ 6B0E              //              dec     hl
1516+ 6B0E              //              ld      d, (hl)
1517+ 6B0E              //              dec     hl
1518+ 6B0E              //              ld      e, (hl)             // d1-H
1519+ 6B0E              //              push    de
1520+ 6B0E              //              next
1521+ 6B0E
1522+ 6B0E              //  ______________________________________________________________________
1523+ 6B0E              //
1524+ 6B0E              // 2drop        d --
1525+ 6B0E              //              n1 n2 --
1526+ 6B0E              // drops the top double from stack
1527+ 6B0E                              New_Def TWO_DROP, "2DROP", is_code, is_normal
1527+ 6B0E             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1527+ 6B0E             >
1527+ 6B0E             >                // dummy db directives used to calculate length of namec
1527+ 6B0E 32 44 52 4F >                db      "2DROP"
1527+ 6B12 50          >
1527+ 6B13             >len_NFA         defl    $ - temp_NFA
1527+ 6B13             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1527+ 6B0E             >
1527+ 6B0E 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1527+ 6B0F 32 44 52 4F >                db      "2DROP"               // name string in 7-bit ascii, but
1527+ 6B13 50          >
1527+ 6B14             >                org     $-1                 // alter last byte of Name just above to set
1527+ 6B13 D0          >                db      {b $} | END_BIT     // msb as name end
1527+ 6B14             >
1527+ 6B14 FB 6A       >                dw      last_NFA            // Link to previous definition Name
1527+ 6B16             >TWO_DROP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1527+ 6B16 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1527+ 6B16             >                else
1527+ 6B16 18 6B       >                dw      $ + 2   ; ok        // is pointed by CFA
1527+ 6B18             >                endif           ; ok        // for other definitions it "points" the correct handler
1527+ 6B18             >                // Use of "; ok" to suppress "warning[fwdref]"
1527+ 6B18             >
1527+ 6B18             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1528+ 6B18 E1                           pop     hl
1529+ 6B19 E1                           pop     hl
1530+ 6B1A                              next
1530+ 6B1A DD E9       >                jp      (ix)
1531+ 6B1C
1532+ 6B1C              //  ______________________________________________________________________
1533+ 6B1C              //
1534+ 6B1C              // 2nip         d1 d2 -- d2
1535+ 6B1C              //              n1 n2 n3 n4 -- n3 n4
1536+ 6B1C              // drops the second double on the stack
1537+ 6B1C              //              New_Def TWO_NIP, 4, "2nip"
1538+ 6B1C              //              ...
1539+ 6B1C
1540+ 6B1C              //  ______________________________________________________________________
1541+ 6B1C              //
1542+ 6B1C              // 2tuck         d1 d2 -- d2 d1 d2
1543+ 6B1C              // copy the top element after the second.
1544+ 6B1C              //              New_Def TWO_TUCK, 5, "2tuck"
1545+ 6B1C              //              ...
1546+ 6B1C
1547+ 6B1C              //  ______________________________________________________________________
1548+ 6B1C              //
1549+ 6B1C              // 2swap         d1 d2 -- d2 d1
1550+ 6B1C              //               n1 n2 n3 n4 -- n3 n4 n1 n2
1551+ 6B1C              // swaps the two doubles on top of stack
1552+ 6B1C                              New_Def TWO_SWAP, "2SWAP", is_code, is_normal
1552+ 6B1C             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1552+ 6B1C             >
1552+ 6B1C             >                // dummy db directives used to calculate length of namec
1552+ 6B1C 32 53 57 41 >                db      "2SWAP"
1552+ 6B20 50          >
1552+ 6B21             >len_NFA         defl    $ - temp_NFA
1552+ 6B21             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1552+ 6B1C             >
1552+ 6B1C 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1552+ 6B1D 32 53 57 41 >                db      "2SWAP"               // name string in 7-bit ascii, but
1552+ 6B21 50          >
1552+ 6B22             >                org     $-1                 // alter last byte of Name just above to set
1552+ 6B21 D0          >                db      {b $} | END_BIT     // msb as name end
1552+ 6B22             >
1552+ 6B22 0E 6B       >                dw      last_NFA            // Link to previous definition Name
1552+ 6B24             >TWO_SWAP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1552+ 6B24 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1552+ 6B24             >                else
1552+ 6B24 26 6B       >                dw      $ + 2   ; ok        // is pointed by CFA
1552+ 6B26             >                endif           ; ok        // for other definitions it "points" the correct handler
1552+ 6B26             >                // Use of "; ok" to suppress "warning[fwdref]"
1552+ 6B26             >
1552+ 6B26             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1553+ 6B26 F1                           pop     af                  //   d2-H
1554+ 6B27 E1                           pop     hl                  // < d2-L
1555+ 6B28 D1                           pop     de                  // < d1-H
1556+ 6B29 E3                           ex      (sp), hl            // < d1-L > d2-L
1557+ 6B2A F5                           push    af                  // > d2-H
1558+ 6B2B E5                           push    hl                  // > d1-L
1559+ 6B2C D5                           push    de
1560+ 6B2D
1561+ 6B2D                              next
1561+ 6B2D DD E9       >                jp      (ix)
1562+ 6B2F
1563+ 6B2F              //  ______________________________________________________________________
1564+ 6B2F              //
1565+ 6B2F              // 2dup         d -- d d
1566+ 6B2F              //              n1 n2 -- n1 n2 n1 n2
1567+ 6B2F              // duplicates the top double of stack
1568+ 6B2F                              New_Def TWO_DUP, "2DUP", is_code, is_normal
1568+ 6B2F             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1568+ 6B2F             >
1568+ 6B2F             >                // dummy db directives used to calculate length of namec
1568+ 6B2F 32 44 55 50 >                db      "2DUP"
1568+ 6B33             >len_NFA         defl    $ - temp_NFA
1568+ 6B33             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1568+ 6B2F             >
1568+ 6B2F 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1568+ 6B30 32 44 55 50 >                db      "2DUP"               // name string in 7-bit ascii, but
1568+ 6B34             >                org     $-1                 // alter last byte of Name just above to set
1568+ 6B33 D0          >                db      {b $} | END_BIT     // msb as name end
1568+ 6B34             >
1568+ 6B34 1C 6B       >                dw      last_NFA            // Link to previous definition Name
1568+ 6B36             >TWO_DUP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1568+ 6B36 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1568+ 6B36             >                else
1568+ 6B36 38 6B       >                dw      $ + 2   ; ok        // is pointed by CFA
1568+ 6B38             >                endif           ; ok        // for other definitions it "points" the correct handler
1568+ 6B38             >                // Use of "; ok" to suppress "warning[fwdref]"
1568+ 6B38             >
1568+ 6B38             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1569+ 6B38 E1                           pop     hl                  // < d-H
1570+ 6B39 D1                           pop     de                  // < d-L
1571+ 6B3A D5                           push    de                  // < d-L
1572+ 6B3B E5                           push    hl                  // > d-H
1573+ 6B3C D5                           push    de                  // > d-L
1574+ 6B3D E5                           push    hl                  // > d-H
1575+ 6B3E                              next
1575+ 6B3E DD E9       >                jp      (ix)
1576+ 6B40
1577+ 6B40              //  ______________________________________________________________________
1578+ 6B40              //
1579+ 6B40              // 2rot         d1 d2 d3 -- d2 d3 d1
1580+ 6B40              //              n1 n2 n3 n4 n5 n6 -- n3 n4 n5 n6 n1 n2
1581+ 6B40              // Rotates the 3 top doubles of stack by picking the 3rd in access-order
1582+ 6B40              // and putting it on top. The other two are shifted down one place.
1583+ 6B40              //              New_Def TWO?ROT, 4, "2rot"
1584+ 6B40              //              ...
1585+ 6B40              //              New_Def TWO_ROT, "2ROT", is_code, is_normal
1586+ 6B40              //
1587+ 6B40              //      d3  |d2  |d1  |
1588+ 6B40              //      h l |h l |h l |
1589+ 6B40              // SP   LHED|LHED|LHED|
1590+ 6B40              // SP  +0123|4567|89ab|
1591+ 6B40              //              ld      hl, $000B
1592+ 6B40              //              add     hl, sp
1593+ 6B40              //              ld      d, (hl)
1594+ 6B40              //              dec     hl
1595+ 6B40              //              ld      e, (hl)
1596+ 6B40              //              dec     hl
1597+ 6B40              //              push    de
1598+ 6B40              //              ld      d, (hl)
1599+ 6B40              //              dec     hl
1600+ 6B40              //              ld      e, (hl)
1601+ 6B40              //              dec     hl
1602+ 6B40              //              push    de
1603+ 6B40
1604+ 6B40              //      d1  |d3  |d2  |d1  |
1605+ 6B40              //      h l |h l |h l |h l |
1606+ 6B40              // SP   LHED|LHED|LHED|LHED|
1607+ 6B40              // SP       +0123|4567|89ab|
1608+ 6B40
1609+ 6B40              //              ld      d, h
1610+ 6B40              //              ld      e, l
1611+ 6B40              //              inc     de
1612+ 6B40              //              inc     de
1613+ 6B40              //              inc     de
1614+ 6B40              //              inc     de
1615+ 6B40              //              push    bc
1616+ 6B40              //              ld      bc, $000C
1617+ 6B40              //              lddr
1618+ 6B40              //              pop     bc
1619+ 6B40              //              pop     de
1620+ 6B40              //              pop     de
1621+ 6B40              //
1622+ 6B40              //              next
1623+ 6B40
1624+ 6B40
1625+ 6B40              //  ______________________________________________________________________
1626+ 6B40              //
1627+ 6B40              // +!           n a --
1628+ 6B40              // Sums to the content of address a the number n.
1629+ 6B40              // It is the same of  a @ n + a !
1630+ 6B40                              New_Def PLUSSTORE, "+!", is_code, is_normal
1630+ 6B40             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1630+ 6B40             >
1630+ 6B40             >                // dummy db directives used to calculate length of namec
1630+ 6B40 2B 21       >                db      "+!"
1630+ 6B42             >len_NFA         defl    $ - temp_NFA
1630+ 6B42             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1630+ 6B40             >
1630+ 6B40 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1630+ 6B41 2B 21       >                db      "+!"               // name string in 7-bit ascii, but
1630+ 6B43             >                org     $-1                 // alter last byte of Name just above to set
1630+ 6B42 A1          >                db      {b $} | END_BIT     // msb as name end
1630+ 6B43             >
1630+ 6B43 2F 6B       >                dw      last_NFA            // Link to previous definition Name
1630+ 6B45             >PLUSSTORE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1630+ 6B45 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1630+ 6B45             >                else
1630+ 6B45 47 6B       >                dw      $ + 2   ; ok        // is pointed by CFA
1630+ 6B47             >                endif           ; ok        // for other definitions it "points" the correct handler
1630+ 6B47             >                // Use of "; ok" to suppress "warning[fwdref]"
1630+ 6B47             >
1630+ 6B47             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1631+ 6B47 E1                           pop     hl                  // hl is the address
1632+ 6B48 D1                           pop     de                  // de is the number
1633+ 6B49 7E                           ld      a, (hl)
1634+ 6B4A 83                           add     e
1635+ 6B4B 77                           ld      (hl), a
1636+ 6B4C 23                           inc     hl
1637+ 6B4D 7E                           ld      a, (hl)
1638+ 6B4E 8A                           adc     d
1639+ 6B4F 77                           ld      (hl), a
1640+ 6B50
1641+ 6B50                              next
1641+ 6B50 DD E9       >                jp      (ix)
1642+ 6B52
1643+ 6B52              //  ______________________________________________________________________
1644+ 6B52              //
1645+ 6B52              // toggle       a n --
1646+ 6B52              // Complements (xor) the byte at addrress  a  with the model n.
1647+ 6B52                              New_Def TOGGLE, "TOGGLE", is_code, is_normal
1647+ 6B52             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1647+ 6B52             >
1647+ 6B52             >                // dummy db directives used to calculate length of namec
1647+ 6B52 54 4F 47 47 >                db      "TOGGLE"
1647+ 6B56 4C 45       >
1647+ 6B58             >len_NFA         defl    $ - temp_NFA
1647+ 6B58             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1647+ 6B52             >
1647+ 6B52 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1647+ 6B53 54 4F 47 47 >                db      "TOGGLE"               // name string in 7-bit ascii, but
1647+ 6B57 4C 45       >
1647+ 6B59             >                org     $-1                 // alter last byte of Name just above to set
1647+ 6B58 C5          >                db      {b $} | END_BIT     // msb as name end
1647+ 6B59             >
1647+ 6B59 40 6B       >                dw      last_NFA            // Link to previous definition Name
1647+ 6B5B             >TOGGLE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1647+ 6B5B ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1647+ 6B5B             >                else
1647+ 6B5B 5D 6B       >                dw      $ + 2   ; ok        // is pointed by CFA
1647+ 6B5D             >                endif           ; ok        // for other definitions it "points" the correct handler
1647+ 6B5D             >                // Use of "; ok" to suppress "warning[fwdref]"
1647+ 6B5D             >
1647+ 6B5D             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1648+ 6B5D D1                           pop     de
1649+ 6B5E E1                           pop     hl
1650+ 6B5F 7E                           ld      a, (hl)
1651+ 6B60 AB                           xor     e
1652+ 6B61 77                           ld      (hl), a
1653+ 6B62
1654+ 6B62                              next
1654+ 6B62 DD E9       >                jp      (ix)
1655+ 6B64
1656+ 6B64              //  ______________________________________________________________________
1657+ 6B64              //
1658+ 6B64              // @            a -- n
1659+ 6B64              // fetch 16 bit number n from address a. Z80 keeps high byte is in high memory
1660+ 6B64                              New_Def FETCH, "@", is_code, is_normal
1660+ 6B64             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1660+ 6B64             >
1660+ 6B64             >                // dummy db directives used to calculate length of namec
1660+ 6B64 40          >                db      "@"
1660+ 6B65             >len_NFA         defl    $ - temp_NFA
1660+ 6B65             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1660+ 6B64             >
1660+ 6B64 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1660+ 6B65 40          >                db      "@"               // name string in 7-bit ascii, but
1660+ 6B66             >                org     $-1                 // alter last byte of Name just above to set
1660+ 6B65 C0          >                db      {b $} | END_BIT     // msb as name end
1660+ 6B66             >
1660+ 6B66 52 6B       >                dw      last_NFA            // Link to previous definition Name
1660+ 6B68             >FETCH:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1660+ 6B68 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1660+ 6B68             >                else
1660+ 6B68 6A 6B       >                dw      $ + 2   ; ok        // is pointed by CFA
1660+ 6B6A             >                endif           ; ok        // for other definitions it "points" the correct handler
1660+ 6B6A             >                // Use of "; ok" to suppress "warning[fwdref]"
1660+ 6B6A             >
1660+ 6B6A             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1661+ 6B6A E1                           pop     hl
1662+ 6B6B 5E                           ld      e, (hl)             // low-byte
1663+ 6B6C 23                           inc     hl
1664+ 6B6D 56                           ld      d, (hl)             // high-byte
1665+ 6B6E D5                           push    de
1666+ 6B6F                              next
1666+ 6B6F DD E9       >                jp      (ix)
1667+ 6B71
1668+ 6B71              //  ______________________________________________________________________
1669+ 6B71              //
1670+ 6B71              // !            n a --
1671+ 6B71              // store 16 bit number n from address a. Z80 keeps high byte is in high memory
1672+ 6B71                              New_Def STORE, "!", is_code, is_normal
1672+ 6B71             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1672+ 6B71             >
1672+ 6B71             >                // dummy db directives used to calculate length of namec
1672+ 6B71 21          >                db      "!"
1672+ 6B72             >len_NFA         defl    $ - temp_NFA
1672+ 6B72             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1672+ 6B71             >
1672+ 6B71 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1672+ 6B72 21          >                db      "!"               // name string in 7-bit ascii, but
1672+ 6B73             >                org     $-1                 // alter last byte of Name just above to set
1672+ 6B72 A1          >                db      {b $} | END_BIT     // msb as name end
1672+ 6B73             >
1672+ 6B73 64 6B       >                dw      last_NFA            // Link to previous definition Name
1672+ 6B75             >STORE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1672+ 6B75 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1672+ 6B75             >                else
1672+ 6B75 77 6B       >                dw      $ + 2   ; ok        // is pointed by CFA
1672+ 6B77             >                endif           ; ok        // for other definitions it "points" the correct handler
1672+ 6B77             >                // Use of "; ok" to suppress "warning[fwdref]"
1672+ 6B77             >
1672+ 6B77             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1673+ 6B77 E1                           pop     hl                  // address
1674+ 6B78 D1                           pop     de                  // < n
1675+ 6B79 73                           ld      (hl), e             // low-byte
1676+ 6B7A 23                           inc     hl
1677+ 6B7B 72                           ld      (hl), d             // high-byte
1678+ 6B7C
1679+ 6B7C                              next
1679+ 6B7C DD E9       >                jp      (ix)
1680+ 6B7E
1681+ 6B7E              //  ______________________________________________________________________
1682+ 6B7E              //
1683+ 6B7E              // c@           a -- c
1684+ 6B7E              // fetch a character n from address a
1685+ 6B7E                              New_Def CFETCH, "C@", is_code, is_normal
1685+ 6B7E             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1685+ 6B7E             >
1685+ 6B7E             >                // dummy db directives used to calculate length of namec
1685+ 6B7E 43 40       >                db      "C@"
1685+ 6B80             >len_NFA         defl    $ - temp_NFA
1685+ 6B80             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1685+ 6B7E             >
1685+ 6B7E 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1685+ 6B7F 43 40       >                db      "C@"               // name string in 7-bit ascii, but
1685+ 6B81             >                org     $-1                 // alter last byte of Name just above to set
1685+ 6B80 C0          >                db      {b $} | END_BIT     // msb as name end
1685+ 6B81             >
1685+ 6B81 71 6B       >                dw      last_NFA            // Link to previous definition Name
1685+ 6B83             >CFETCH:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1685+ 6B83 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1685+ 6B83             >                else
1685+ 6B83 85 6B       >                dw      $ + 2   ; ok        // is pointed by CFA
1685+ 6B85             >                endif           ; ok        // for other definitions it "points" the correct handler
1685+ 6B85             >                // Use of "; ok" to suppress "warning[fwdref]"
1685+ 6B85             >
1685+ 6B85             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1686+ 6B85 E1                           pop     hl
1687+ 6B86 6E                           ld      l, (hl)             // low-byte
1688+ 6B87 26 00                        ld      h, 0
1689+ 6B89
1690+ 6B89                              psh1
1690+ 6B89 E5          >                push    hl
1690+ 6B8A DD E9       >                jp      (ix)
1691+ 6B8C
1692+ 6B8C              //  ______________________________________________________________________
1693+ 6B8C              //
1694+ 6B8C              // c!           c a --
1695+ 6B8C              // fetch 16 bit number n from address a. Z80 keeps high byte is in high memory
1696+ 6B8C                              New_Def CSTORE, "C!", is_code, is_normal
1696+ 6B8C             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1696+ 6B8C             >
1696+ 6B8C             >                // dummy db directives used to calculate length of namec
1696+ 6B8C 43 21       >                db      "C!"
1696+ 6B8E             >len_NFA         defl    $ - temp_NFA
1696+ 6B8E             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1696+ 6B8C             >
1696+ 6B8C 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1696+ 6B8D 43 21       >                db      "C!"               // name string in 7-bit ascii, but
1696+ 6B8F             >                org     $-1                 // alter last byte of Name just above to set
1696+ 6B8E A1          >                db      {b $} | END_BIT     // msb as name end
1696+ 6B8F             >
1696+ 6B8F 7E 6B       >                dw      last_NFA            // Link to previous definition Name
1696+ 6B91             >CSTORE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1696+ 6B91 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1696+ 6B91             >                else
1696+ 6B91 93 6B       >                dw      $ + 2   ; ok        // is pointed by CFA
1696+ 6B93             >                endif           ; ok        // for other definitions it "points" the correct handler
1696+ 6B93             >                // Use of "; ok" to suppress "warning[fwdref]"
1696+ 6B93             >
1696+ 6B93             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1697+ 6B93 E1                           pop     hl                  // < address
1698+ 6B94 D1                           pop     de
1699+ 6B95 73                           ld      (hl), e             // low-byte
1700+ 6B96
1701+ 6B96                              next
1701+ 6B96 DD E9       >                jp      (ix)
1702+ 6B98
1703+ 6B98              //  ______________________________________________________________________
1704+ 6B98              //
1705+ 6B98              // 2@           a -- d
1706+ 6B98              // fetch a 32 bits number d from address a and leaves it on top of the
1707+ 6B98              // stack as two single numbers, high part as top of the stack.
1708+ 6B98              // A double number is normally kept in CPU registers as HLDE.
1709+ 6B98              // On stack a double number is treated as two single numbers
1710+ 6B98              // where BC is on the top of the stack and HL is the second from top,
1711+ 6B98              // so the sign of the number can be checked on top of stack
1712+ 6B98              // and in the stack memory it appears as LHED.
1713+ 6B98                              New_Def TWO_FETCH, "2@", is_code, is_normal
1713+ 6B98             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1713+ 6B98             >
1713+ 6B98             >                // dummy db directives used to calculate length of namec
1713+ 6B98 32 40       >                db      "2@"
1713+ 6B9A             >len_NFA         defl    $ - temp_NFA
1713+ 6B9A             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1713+ 6B98             >
1713+ 6B98 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1713+ 6B99 32 40       >                db      "2@"               // name string in 7-bit ascii, but
1713+ 6B9B             >                org     $-1                 // alter last byte of Name just above to set
1713+ 6B9A C0          >                db      {b $} | END_BIT     // msb as name end
1713+ 6B9B             >
1713+ 6B9B 8C 6B       >                dw      last_NFA            // Link to previous definition Name
1713+ 6B9D             >TWO_FETCH:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1713+ 6B9D ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1713+ 6B9D             >                else
1713+ 6B9D 9F 6B       >                dw      $ + 2   ; ok        // is pointed by CFA
1713+ 6B9F             >                endif           ; ok        // for other definitions it "points" the correct handler
1713+ 6B9F             >                // Use of "; ok" to suppress "warning[fwdref]"
1713+ 6B9F             >
1713+ 6B9F             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1714+ 6B9F E1                           pop     hl                  // address
1715+ 6BA0 5E                           ld      e, (hl)             // low-byte
1716+ 6BA1 23                           inc     hl
1717+ 6BA2 56                           ld      d, (hl)             // high-byte
1718+ 6BA3
1719+ 6BA3 23                           inc     hl
1720+ 6BA4 7E                           ld      a, (hl)             // low-byte
1721+ 6BA5 23                           inc     hl
1722+ 6BA6 66                           ld      h, (hl)             // high-byte
1723+ 6BA7 6F                           ld      l, a
1724+ 6BA8 E5                           push    hl
1725+ 6BA9 D5                           push    de
1726+ 6BAA                              next
1726+ 6BAA DD E9       >                jp      (ix)
1727+ 6BAC
1728+ 6BAC              //  ______________________________________________________________________
1729+ 6BAC              //
1730+ 6BAC              // 2!           d a --
1731+ 6BAC              // stores a 32 bits number d from address a and leaves it on top of the
1732+ 6BAC              // stack as two single numbers, high part as top of the stack.
1733+ 6BAC              // A double number is normally kept in CPU registers as HLDE.
1734+ 6BAC              // On stack a double number is treated as two single numbers
1735+ 6BAC              // where BC is on the top of the stack and HL is the second from top,
1736+ 6BAC              // so the sign of the number can be checked on top of stack
1737+ 6BAC              // and in the stack memory it appears as LHED.
1738+ 6BAC                              New_Def TWO_STORE, "2!", is_code, is_normal
1738+ 6BAC             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1738+ 6BAC             >
1738+ 6BAC             >                // dummy db directives used to calculate length of namec
1738+ 6BAC 32 21       >                db      "2!"
1738+ 6BAE             >len_NFA         defl    $ - temp_NFA
1738+ 6BAE             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1738+ 6BAC             >
1738+ 6BAC 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1738+ 6BAD 32 21       >                db      "2!"               // name string in 7-bit ascii, but
1738+ 6BAF             >                org     $-1                 // alter last byte of Name just above to set
1738+ 6BAE A1          >                db      {b $} | END_BIT     // msb as name end
1738+ 6BAF             >
1738+ 6BAF 98 6B       >                dw      last_NFA            // Link to previous definition Name
1738+ 6BB1             >TWO_STORE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1738+ 6BB1 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1738+ 6BB1             >                else
1738+ 6BB1 B3 6B       >                dw      $ + 2   ; ok        // is pointed by CFA
1738+ 6BB3             >                endif           ; ok        // for other definitions it "points" the correct handler
1738+ 6BB3             >                // Use of "; ok" to suppress "warning[fwdref]"
1738+ 6BB3             >
1738+ 6BB3             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1739+ 6BB3 D9                           exx
1740+ 6BB4 E1                           pop     hl                  // address
1741+ 6BB5 C1                           pop     bc                  // < high-part
1742+ 6BB6 D1                           pop     de                  // < low-part > Instruction Pointer
1743+ 6BB7 71                           ld      (hl), c
1744+ 6BB8 23                           inc     hl
1745+ 6BB9 70                           ld      (hl), b
1746+ 6BBA 23                           inc     hl
1747+ 6BBB 73                           ld      (hl), e
1748+ 6BBC 23                           inc     hl
1749+ 6BBD 72                           ld      (hl), d
1750+ 6BBE D9                           exx
1751+ 6BBF                              next
1751+ 6BBF DD E9       >                jp      (ix)
1752+ 6BC1
1753+ 6BC1              //  ______________________________________________________________________
1754+ 6BC1              //
1755+ 6BC1              // p@           a -- c
1756+ 6BC1              // Read one byte from port a and leave the result on top of stack
1757+ 6BC1                              New_Def PFETCH, "P@", is_code, is_normal
1757+ 6BC1             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1757+ 6BC1             >
1757+ 6BC1             >                // dummy db directives used to calculate length of namec
1757+ 6BC1 50 40       >                db      "P@"
1757+ 6BC3             >len_NFA         defl    $ - temp_NFA
1757+ 6BC3             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1757+ 6BC1             >
1757+ 6BC1 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1757+ 6BC2 50 40       >                db      "P@"               // name string in 7-bit ascii, but
1757+ 6BC4             >                org     $-1                 // alter last byte of Name just above to set
1757+ 6BC3 C0          >                db      {b $} | END_BIT     // msb as name end
1757+ 6BC4             >
1757+ 6BC4 AC 6B       >                dw      last_NFA            // Link to previous definition Name
1757+ 6BC6             >PFETCH:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1757+ 6BC6 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1757+ 6BC6             >                else
1757+ 6BC6 C8 6B       >                dw      $ + 2   ; ok        // is pointed by CFA
1757+ 6BC8             >                endif           ; ok        // for other definitions it "points" the correct handler
1757+ 6BC8             >                // Use of "; ok" to suppress "warning[fwdref]"
1757+ 6BC8             >
1757+ 6BC8             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1758+ 6BC8 D9                           exx
1759+ 6BC9 C1                           pop     bc
1760+ 6BCA 26 00                        ld      h, 0
1761+ 6BCC ED 68                        in      l, (c)
1762+ 6BCE E5                           push    hl
1763+ 6BCF D9                           exx
1764+ 6BD0                              next
1764+ 6BD0 DD E9       >                jp      (ix)
1765+ 6BD2
1766+ 6BD2              //  ______________________________________________________________________
1767+ 6BD2              //
1768+ 6BD2              // p!           c a --
1769+ 6BD2              // Send one byte (top of stack) to port a
1770+ 6BD2                              New_Def PSTORE, "P!", is_code, is_normal
1770+ 6BD2             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1770+ 6BD2             >
1770+ 6BD2             >                // dummy db directives used to calculate length of namec
1770+ 6BD2 50 21       >                db      "P!"
1770+ 6BD4             >len_NFA         defl    $ - temp_NFA
1770+ 6BD4             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1770+ 6BD2             >
1770+ 6BD2 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1770+ 6BD3 50 21       >                db      "P!"               // name string in 7-bit ascii, but
1770+ 6BD5             >                org     $-1                 // alter last byte of Name just above to set
1770+ 6BD4 A1          >                db      {b $} | END_BIT     // msb as name end
1770+ 6BD5             >
1770+ 6BD5 C1 6B       >                dw      last_NFA            // Link to previous definition Name
1770+ 6BD7             >PSTORE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1770+ 6BD7 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1770+ 6BD7             >                else
1770+ 6BD7 D9 6B       >                dw      $ + 2   ; ok        // is pointed by CFA
1770+ 6BD9             >                endif           ; ok        // for other definitions it "points" the correct handler
1770+ 6BD9             >                // Use of "; ok" to suppress "warning[fwdref]"
1770+ 6BD9             >
1770+ 6BD9             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1771+ 6BD9 D9                           exx
1772+ 6BDA C1                           pop     bc
1773+ 6BDB E1                           pop     hl                  // < c
1774+ 6BDC ED 69                        out     (c), l              // low-byte
1775+ 6BDE D9                           exx
1776+ 6BDF                              next
1776+ 6BDF DD E9       >                jp      (ix)
1777+ 6BE1
1778+ 6BE1
1779+ 6BE1              //  ______________________________________________________________________
1780+ 6BE1              //
1781+ 6BE1              // 2*           n1 -- n2
1782+ 6BE1              // doubles the number at top of stack
1783+ 6BE1                              New_Def TWO_MUL, "2*", is_code, is_normal
1783+ 6BE1             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1783+ 6BE1             >
1783+ 6BE1             >                // dummy db directives used to calculate length of namec
1783+ 6BE1 32 2A       >                db      "2*"
1783+ 6BE3             >len_NFA         defl    $ - temp_NFA
1783+ 6BE3             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1783+ 6BE1             >
1783+ 6BE1 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1783+ 6BE2 32 2A       >                db      "2*"               // name string in 7-bit ascii, but
1783+ 6BE4             >                org     $-1                 // alter last byte of Name just above to set
1783+ 6BE3 AA          >                db      {b $} | END_BIT     // msb as name end
1783+ 6BE4             >
1783+ 6BE4 D2 6B       >                dw      last_NFA            // Link to previous definition Name
1783+ 6BE6             >TWO_MUL:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1783+ 6BE6 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1783+ 6BE6             >                else
1783+ 6BE6 E8 6B       >                dw      $ + 2   ; ok        // is pointed by CFA
1783+ 6BE8             >                endif           ; ok        // for other definitions it "points" the correct handler
1783+ 6BE8             >                // Use of "; ok" to suppress "warning[fwdref]"
1783+ 6BE8             >
1783+ 6BE8             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1784+ 6BE8              Two_Mul_Ptr:
1785+ 6BE8 E1                           pop     hl
1786+ 6BE9 29                           add     hl, hl
1787+ 6BEA
1788+ 6BEA                              psh1
1788+ 6BEA E5          >                push    hl
1788+ 6BEB DD E9       >                jp      (ix)
1789+ 6BED
1790+ 6BED              //  ______________________________________________________________________
1791+ 6BED              //
1792+ 6BED              // 2/           n1 -- n2
1793+ 6BED              // halves the top of stack, sign is unchanged
1794+ 6BED                              New_Def TWO_DIV, "2/", is_code, is_normal
1794+ 6BED             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1794+ 6BED             >
1794+ 6BED             >                // dummy db directives used to calculate length of namec
1794+ 6BED 32 2F       >                db      "2/"
1794+ 6BEF             >len_NFA         defl    $ - temp_NFA
1794+ 6BEF             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1794+ 6BED             >
1794+ 6BED 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1794+ 6BEE 32 2F       >                db      "2/"               // name string in 7-bit ascii, but
1794+ 6BF0             >                org     $-1                 // alter last byte of Name just above to set
1794+ 6BEF AF          >                db      {b $} | END_BIT     // msb as name end
1794+ 6BF0             >
1794+ 6BF0 E1 6B       >                dw      last_NFA            // Link to previous definition Name
1794+ 6BF2             >TWO_DIV:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1794+ 6BF2 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1794+ 6BF2             >                else
1794+ 6BF2 F4 6B       >                dw      $ + 2   ; ok        // is pointed by CFA
1794+ 6BF4             >                endif           ; ok        // for other definitions it "points" the correct handler
1794+ 6BF4             >                // Use of "; ok" to suppress "warning[fwdref]"
1794+ 6BF4             >
1794+ 6BF4             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1795+ 6BF4 E1                           pop     hl
1796+ 6BF5 CB 2C                        sra     h
1797+ 6BF7 CB 1D                        rr      l
1798+ 6BF9
1799+ 6BF9                              psh1
1799+ 6BF9 E5          >                push    hl
1799+ 6BFA DD E9       >                jp      (ix)
1800+ 6BFC
1801+ 6BFC              //  ______________________________________________________________________
1802+ 6BFC              //
1803+ 6BFC              // lshift       n1 u -- n2
1804+ 6BFC              // bit left shift of u bits
1805+ 6BFC                              New_Def LSHIFT, "LSHIFT", is_code, is_normal
1805+ 6BFC             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1805+ 6BFC             >
1805+ 6BFC             >                // dummy db directives used to calculate length of namec
1805+ 6BFC 4C 53 48 49 >                db      "LSHIFT"
1805+ 6C00 46 54       >
1805+ 6C02             >len_NFA         defl    $ - temp_NFA
1805+ 6C02             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1805+ 6BFC             >
1805+ 6BFC 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1805+ 6BFD 4C 53 48 49 >                db      "LSHIFT"               // name string in 7-bit ascii, but
1805+ 6C01 46 54       >
1805+ 6C03             >                org     $-1                 // alter last byte of Name just above to set
1805+ 6C02 D4          >                db      {b $} | END_BIT     // msb as name end
1805+ 6C03             >
1805+ 6C03 ED 6B       >                dw      last_NFA            // Link to previous definition Name
1805+ 6C05             >LSHIFT:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1805+ 6C05 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1805+ 6C05             >                else
1805+ 6C05 07 6C       >                dw      $ + 2   ; ok        // is pointed by CFA
1805+ 6C07             >                endif           ; ok        // for other definitions it "points" the correct handler
1805+ 6C07             >                // Use of "; ok" to suppress "warning[fwdref]"
1805+ 6C07             >
1805+ 6C07             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1806+ 6C07 D1                           pop     de
1807+ 6C08
1808+ 6C08 E1                           pop     hl
1809+ 6C09 7B                           ld      a, e
1810+ 6C0A B7                           or      a
1811+ 6C0B 28 04                        jr      z, Lshift_Zero
1812+ 6C0D              Lshift_Loop:
1813+ 6C0D 29                                   add     hl, hl
1814+ 6C0E 3D                                   dec     a
1815+ 6C0F 20 FC                            jr      nz, Lshift_Loop
1816+ 6C11              Lshift_Zero:
1817+ 6C11
1818+ 6C11
1819+ 6C11                              psh1
1819+ 6C11 E5          >                push    hl
1819+ 6C12 DD E9       >                jp      (ix)
1820+ 6C14
1821+ 6C14              //  ______________________________________________________________________
1822+ 6C14              //
1823+ 6C14              // rshift       n1 u -- n2
1824+ 6C14              // bit right shift of u bits
1825+ 6C14                              New_Def RSHIFT, "RSHIFT", is_code, is_normal
1825+ 6C14             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1825+ 6C14             >
1825+ 6C14             >                // dummy db directives used to calculate length of namec
1825+ 6C14 52 53 48 49 >                db      "RSHIFT"
1825+ 6C18 46 54       >
1825+ 6C1A             >len_NFA         defl    $ - temp_NFA
1825+ 6C1A             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1825+ 6C14             >
1825+ 6C14 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1825+ 6C15 52 53 48 49 >                db      "RSHIFT"               // name string in 7-bit ascii, but
1825+ 6C19 46 54       >
1825+ 6C1B             >                org     $-1                 // alter last byte of Name just above to set
1825+ 6C1A D4          >                db      {b $} | END_BIT     // msb as name end
1825+ 6C1B             >
1825+ 6C1B FC 6B       >                dw      last_NFA            // Link to previous definition Name
1825+ 6C1D             >RSHIFT:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1825+ 6C1D ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1825+ 6C1D             >                else
1825+ 6C1D 1F 6C       >                dw      $ + 2   ; ok        // is pointed by CFA
1825+ 6C1F             >                endif           ; ok        // for other definitions it "points" the correct handler
1825+ 6C1F             >                // Use of "; ok" to suppress "warning[fwdref]"
1825+ 6C1F             >
1825+ 6C1F             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1826+ 6C1F D1                           pop     de
1827+ 6C20
1828+ 6C20 E1                           pop     hl
1829+ 6C21 7B                           ld      a, e
1830+ 6C22 B7                           or      a
1831+ 6C23 28 07                        jr      z, Rshift_Zero
1832+ 6C25              Rshift_Loop:
1833+ 6C25 CB 3C                                srl     h
1834+ 6C27 CB 1D                                rr      l
1835+ 6C29 3D                                   dec     a
1836+ 6C2A 20 F9                            jr      nz, Rshift_Loop
1837+ 6C2C              Rshift_Zero:
1838+ 6C2C
1839+ 6C2C
1840+ 6C2C                              psh1
1840+ 6C2C E5          >                push    hl
1840+ 6C2D DD E9       >                jp      (ix)
1841+ 6C2F
1842+ 6C2F              //  ______________________________________________________________________
1843+ 6C2F              //
1844+ 6C2F              // cells        n1 -- n2
1845+ 6C2F              // decrement by 2 top of stack
1846+ 6C2F                              New_Def CELLS, "CELLS", Two_Mul_Ptr, is_normal
1846+ 6C2F             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1846+ 6C2F             >
1846+ 6C2F             >                // dummy db directives used to calculate length of namec
1846+ 6C2F 43 45 4C 4C >                db      "CELLS"
1846+ 6C33 53          >
1846+ 6C34             >len_NFA         defl    $ - temp_NFA
1846+ 6C34             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1846+ 6C2F             >
1846+ 6C2F 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1846+ 6C30 43 45 4C 4C >                db      "CELLS"               // name string in 7-bit ascii, but
1846+ 6C34 53          >
1846+ 6C35             >                org     $-1                 // alter last byte of Name just above to set
1846+ 6C34 D3          >                db      {b $} | END_BIT     // msb as name end
1846+ 6C35             >
1846+ 6C35 14 6C       >                dw      last_NFA            // Link to previous definition Name
1846+ 6C37             >CELLS:          if Two_Mul_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1846+ 6C37 E8 6B       >                dw      Two_Mul_Ptr ; ok        // for primitive definitions  actual code
1846+ 6C39             >                else
1846+ 6C39 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
1846+ 6C39             >                endif           ; ok        // for other definitions it "points" the correct handler
1846+ 6C39             >                // Use of "; ok" to suppress "warning[fwdref]"
1846+ 6C39             >
1846+ 6C39             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1847+ 6C39
1848+ 6C39
1849+ 6C39              //  ______________________________________________________________________
1850+ 6C39
# file closed: C:\Zx\CSpect\Projects\vForth15_INDIRECT/source/L0.asm
 110  6C39                              include "L1.asm"
# file opened: C:\Zx\CSpect\Projects\vForth15_INDIRECT/source/L1.asm
   1+ 6C39              //  ______________________________________________________________________
   2+ 6C39              //
   3+ 6C39              //  L1.asm
   4+ 6C39              //
   5+ 6C39              //  Level-1 definitions and derivate
   6+ 6C39              //  ______________________________________________________________________
   7+ 6C39
   8+ 6C39              //  ______________________________________________________________________
   9+ 6C39              //
  10+ 6C39              // :            -- cccc     ( compile time )
  11+ 6C39              //              i*x -- j*x  ( run time )
  12+ 6C39              // Colon Definition
  13+ 6C39                              Colon_Def COLON, ":", is_immediate      // has forward-ref
  13+ 6C39             >                New_Def  COLON, ":", Enter_Ptr, is_immediate ; ok
  13+ 6C39             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  13+ 6C39             >
  13+ 6C39             >                // dummy db directives used to calculate length of namec
  13+ 6C39 3A          >                db      ":"
  13+ 6C3A             >len_NFA         defl    $ - temp_NFA
  13+ 6C3A             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  13+ 6C39             >
  13+ 6C39 C1          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
  13+ 6C3A 3A          >                db      ":"               // name string in 7-bit ascii, but
  13+ 6C3B             >                org     $-1                 // alter last byte of Name just above to set
  13+ 6C3A BA          >                db      {b $} | END_BIT     // msb as name end
  13+ 6C3B             >
  13+ 6C3B 2F 6C       >                dw      last_NFA            // Link to previous definition Name
  13+ 6C3D             >COLON:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
  13+ 6C3D 53 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
  13+ 6C3F             >                else
  13+ 6C3F ~           >                dw      $ + 2   ; ok        // is pointed by CFA
  13+ 6C3F             >                endif           ; ok        // for other definitions it "points" the correct handler
  13+ 6C3F             >                // Use of "; ok" to suppress "warning[fwdref]"
  13+ 6C3F             >
  13+ 6C3F             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  14+ 6C3F
  15+ 6C3F A9 70                        dw      QEXEC                   // ?exec
  16+ 6C41 64 70                        dw      STORE_CSP               // !csp
  17+ 6C43 0E 6E 68 6B                  dw      CURRENT, FETCH          // current @
  18+ 6C47 01 6E 75 6B                  dw      CONTEXT, STORE          // context !
  19+ 6C4B A7 76                        dw      CREATE                  // create  ( forward )
  20+ 6C4D 56 71                        dw      SMUDGE                  // dmudge
  21+ 6C4F 41 71                        dw      SQUARED_CLOSE           // ]
  22+ 6C51 AC 71                        dw      C_SEMICOLON_CODE        // ;code ( change the 3-bytes CFA of defining word to call Enter_Ptr )
  23+ 6C53                                                              // ... immediate
  24+ 6C53              Enter_Ptr:
  25+ 6C53                              // via call coded in CFA
  26+ 6C53                              ldhlrp
  26+ 6C53 2A 96 63    >                ld      hl,(RP_Pointer)
  27+ 6C56 2B                           dec     hl                  // push on Return-Stack current Instruction-Pointer
  28+ 6C57 70                           ld      (hl), b
  29+ 6C58 2B                           dec     hl
  30+ 6C59 71                           ld      (hl), c
  31+ 6C5A                              ldrphl
  31+ 6C5A 22 96 63    >                ld      (RP_Pointer),hl
  32+ 6C5D 13                           inc     de
  33+ 6C5E 4B                           ld      c, e
  34+ 6C5F 42                           ld      b, d
  35+ 6C60                              next
  35+ 6C60 DD E9       >                jp      (ix)
  36+ 6C62
  37+ 6C62              //  ______________________________________________________________________
  38+ 6C62              //
  39+ 6C62              // ;            --
  40+ 6C62              // Semicolon. End of Colon-Definition. Stack must be balanced.
  41+ 6C62                              Colon_Def SEMICOLON, ";", is_immediate   // has forward-ref
  41+ 6C62             >                New_Def  SEMICOLON, ";", Enter_Ptr, is_immediate ; ok
  41+ 6C62             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  41+ 6C62             >
  41+ 6C62             >                // dummy db directives used to calculate length of namec
  41+ 6C62 3B          >                db      ";"
  41+ 6C63             >len_NFA         defl    $ - temp_NFA
  41+ 6C63             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  41+ 6C62             >
  41+ 6C62 C1          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
  41+ 6C63 3B          >                db      ";"               // name string in 7-bit ascii, but
  41+ 6C64             >                org     $-1                 // alter last byte of Name just above to set
  41+ 6C63 BB          >                db      {b $} | END_BIT     // msb as name end
  41+ 6C64             >
  41+ 6C64 39 6C       >                dw      last_NFA            // Link to previous definition Name
  41+ 6C66             >SEMICOLON:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
  41+ 6C66 53 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
  41+ 6C68             >                else
  41+ 6C68 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
  41+ 6C68             >                endif           ; ok        // for other definitions it "points" the correct handler
  41+ 6C68             >                // Use of "; ok" to suppress "warning[fwdref]"
  41+ 6C68             >
  41+ 6C68             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  42+ 6C68
  43+ 6C68 D3 70                        dw      QCSP                    // ?csp
  44+ 6C6A 0A 71 4F 69                  dw      COMPILE, EXIT           // [compile] ;s
  45+ 6C6E 56 71                        dw      SMUDGE                  // smudge
  46+ 6C70 33 71                        dw      SQUARED_OPEN            // [
  47+ 6C72 4F 69                        dw      EXIT                    // ; immediate
  48+ 6C74
  49+ 6C74              //  ______________________________________________________________________
  50+ 6C74              //
  51+ 6C74              // noop         --
  52+ 6C74
  53+ 6C74                              Colon_Def NOOP, "NOOP", is_normal
  53+ 6C74             >                New_Def  NOOP, "NOOP", Enter_Ptr, is_normal ; ok
  53+ 6C74             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  53+ 6C74             >
  53+ 6C74             >                // dummy db directives used to calculate length of namec
  53+ 6C74 4E 4F 4F 50 >                db      "NOOP"
  53+ 6C78             >len_NFA         defl    $ - temp_NFA
  53+ 6C78             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  53+ 6C74             >
  53+ 6C74 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  53+ 6C75 4E 4F 4F 50 >                db      "NOOP"               // name string in 7-bit ascii, but
  53+ 6C79             >                org     $-1                 // alter last byte of Name just above to set
  53+ 6C78 D0          >                db      {b $} | END_BIT     // msb as name end
  53+ 6C79             >
  53+ 6C79 62 6C       >                dw      last_NFA            // Link to previous definition Name
  53+ 6C7B             >NOOP:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
  53+ 6C7B 53 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
  53+ 6C7D             >                else
  53+ 6C7D ~           >                dw      $ + 2   ; ok        // is pointed by CFA
  53+ 6C7D             >                endif           ; ok        // for other definitions it "points" the correct handler
  53+ 6C7D             >                // Use of "; ok" to suppress "warning[fwdref]"
  53+ 6C7D             >
  53+ 6C7D             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  54+ 6C7D 4F 69                        dw      EXIT
  55+ 6C7F
  56+ 6C7F              //  ______________________________________________________________________
  57+ 6C7F              //
  58+ 6C7F              // constant     n -- cccc     ( compile time )
  59+ 6C7F              //              -- n          ( run time )
  60+ 6C7F              // Constant definition.
  61+ 6C7F                              Colon_Def CONSTANT, "CONSTANT", is_normal   // has forward-ref
  61+ 6C7F             >                New_Def  CONSTANT, "CONSTANT", Enter_Ptr, is_normal ; ok
  61+ 6C7F             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  61+ 6C7F             >
  61+ 6C7F             >                // dummy db directives used to calculate length of namec
  61+ 6C7F 43 4F 4E 53 >                db      "CONSTANT"
  61+ 6C83 54 41 4E 54 >
  61+ 6C87             >len_NFA         defl    $ - temp_NFA
  61+ 6C87             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  61+ 6C7F             >
  61+ 6C7F 88          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  61+ 6C80 43 4F 4E 53 >                db      "CONSTANT"               // name string in 7-bit ascii, but
  61+ 6C84 54 41 4E 54 >
  61+ 6C88             >                org     $-1                 // alter last byte of Name just above to set
  61+ 6C87 D4          >                db      {b $} | END_BIT     // msb as name end
  61+ 6C88             >
  61+ 6C88 74 6C       >                dw      last_NFA            // Link to previous definition Name
  61+ 6C8A             >CONSTANT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
  61+ 6C8A 53 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
  61+ 6C8C             >                else
  61+ 6C8C ~           >                dw      $ + 2   ; ok        // is pointed by CFA
  61+ 6C8C             >                endif           ; ok        // for other definitions it "points" the correct handler
  61+ 6C8C             >                // Use of "; ok" to suppress "warning[fwdref]"
  61+ 6C8C             >
  61+ 6C8C             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  62+ 6C8C
  63+ 6C8C A7 76                        dw      CREATE                  // create
  64+ 6C8E C9 6E                        dw      COMMA                   // ,    ( at PFA then, store the value )
  65+ 6C90 AC 71                        dw      C_SEMICOLON_CODE        // ;code (  changes the 3-bytes CFA to call Constant_Ptr )
  66+ 6C92              Constant_Ptr:
  67+ 6C92
  68+ 6C92 13                           inc     de
  69+ 6C93 EB                           ex      de, hl
  70+ 6C94
  71+ 6C94 5E                           ld      e, (hl)
  72+ 6C95 23                           inc     hl
  73+ 6C96 56                           ld      d, (hl)
  74+ 6C97 D5                           push    de
  75+ 6C98                              next
  75+ 6C98 DD E9       >                jp      (ix)
  76+ 6C9A
  77+ 6C9A              //  ______________________________________________________________________
  78+ 6C9A              //
  79+ 6C9A              // variable     n -- cccc     ( compile time )
  80+ 6C9A              //              -- a          ( run time )
  81+ 6C9A              // Variable definition, n is the initial value.
  82+ 6C9A                              Colon_Def VARIABLE, "VARIABLE", is_normal   // has forward-ref
  82+ 6C9A             >                New_Def  VARIABLE, "VARIABLE", Enter_Ptr, is_normal ; ok
  82+ 6C9A             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  82+ 6C9A             >
  82+ 6C9A             >                // dummy db directives used to calculate length of namec
  82+ 6C9A 56 41 52 49 >                db      "VARIABLE"
  82+ 6C9E 41 42 4C 45 >
  82+ 6CA2             >len_NFA         defl    $ - temp_NFA
  82+ 6CA2             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  82+ 6C9A             >
  82+ 6C9A 88          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  82+ 6C9B 56 41 52 49 >                db      "VARIABLE"               // name string in 7-bit ascii, but
  82+ 6C9F 41 42 4C 45 >
  82+ 6CA3             >                org     $-1                 // alter last byte of Name just above to set
  82+ 6CA2 C5          >                db      {b $} | END_BIT     // msb as name end
  82+ 6CA3             >
  82+ 6CA3 7F 6C       >                dw      last_NFA            // Link to previous definition Name
  82+ 6CA5             >VARIABLE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
  82+ 6CA5 53 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
  82+ 6CA7             >                else
  82+ 6CA7 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
  82+ 6CA7             >                endif           ; ok        // for other definitions it "points" the correct handler
  82+ 6CA7             >                // Use of "; ok" to suppress "warning[fwdref]"
  82+ 6CA7             >
  82+ 6CA7             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  83+ 6CA7
  84+ 6CA7 8A 6C                        dw      CONSTANT                // constant
  85+ 6CA9 AC 71                        dw      C_SEMICOLON_CODE        // ;code ( changes the 3-bytes CFA to call Variable_Ptr )
  86+ 6CAB              Variable_Ptr:
  87+ 6CAB
  88+ 6CAB 13                           inc     de
  89+ 6CAC D5                           push    de                  // balance TOS before overwrite it
  90+ 6CAD
  91+ 6CAD                              next
  91+ 6CAD DD E9       >                jp      (ix)
  92+ 6CAF
  93+ 6CAF              //  ______________________________________________________________________
  94+ 6CAF              //
  95+ 6CAF              // user         b -- cccc     ( compile time )
  96+ 6CAF              //              -- a          ( run time )
  97+ 6CAF              // User variable definition
  98+ 6CAF                              Colon_Def USER, "USER", is_normal
  98+ 6CAF             >                New_Def  USER, "USER", Enter_Ptr, is_normal ; ok
  98+ 6CAF             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  98+ 6CAF             >
  98+ 6CAF             >                // dummy db directives used to calculate length of namec
  98+ 6CAF 55 53 45 52 >                db      "USER"
  98+ 6CB3             >len_NFA         defl    $ - temp_NFA
  98+ 6CB3             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  98+ 6CAF             >
  98+ 6CAF 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  98+ 6CB0 55 53 45 52 >                db      "USER"               // name string in 7-bit ascii, but
  98+ 6CB4             >                org     $-1                 // alter last byte of Name just above to set
  98+ 6CB3 D2          >                db      {b $} | END_BIT     // msb as name end
  98+ 6CB4             >
  98+ 6CB4 9A 6C       >                dw      last_NFA            // Link to previous definition Name
  98+ 6CB6             >USER:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
  98+ 6CB6 53 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
  98+ 6CB8             >                else
  98+ 6CB8 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
  98+ 6CB8             >                endif           ; ok        // for other definitions it "points" the correct handler
  98+ 6CB8             >                // Use of "; ok" to suppress "warning[fwdref]"
  98+ 6CB8             >
  98+ 6CB8             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  99+ 6CB8
 100+ 6CB8 A7 76                        dw      CREATE                  // create
 101+ 6CBA DA 6E                        dw      CCOMMA                  // c,
 102+ 6CBC AC 71                        dw      C_SEMICOLON_CODE        // ;code () changes the 3-bytes CFA to call User_Ptr )
 103+ 6CBE
 104+ 6CBE
 105+ 6CBE              User_Ptr:
 106+ 6CBE                              // via call coded in CFA
 107+ 6CBE 13                           inc     de
 108+ 6CBF EB                           ex      de, hl
 109+ 6CC0 5E                           ld      e, (hl)
 110+ 6CC1 16 00                        ld      d, 0
 111+ 6CC3 2A 94 63                     ld      hl, (USER_Pointer)
 112+ 6CC6 19                           add     hl, de
 113+ 6CC7
 114+ 6CC7                              psh1
 114+ 6CC7 E5          >                push    hl
 114+ 6CC8 DD E9       >                jp      (ix)
 115+ 6CCA
 116+ 6CCA              //  ______________________________________________________________________
 117+ 6CCA              //
 118+ 6CCA                              Constant_Def ZERO       ,   "0"     ,   0
 118+ 6CCA             >                New_Def  ZERO, "0", Constant_Ptr, is_normal
 118+ 6CCA             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 118+ 6CCA             >
 118+ 6CCA             >                // dummy db directives used to calculate length of namec
 118+ 6CCA 30          >                db      "0"
 118+ 6CCB             >len_NFA         defl    $ - temp_NFA
 118+ 6CCB             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 118+ 6CCA             >
 118+ 6CCA 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 118+ 6CCB 30          >                db      "0"               // name string in 7-bit ascii, but
 118+ 6CCC             >                org     $-1                 // alter last byte of Name just above to set
 118+ 6CCB B0          >                db      {b $} | END_BIT     // msb as name end
 118+ 6CCC             >
 118+ 6CCC AF 6C       >                dw      last_NFA            // Link to previous definition Name
 118+ 6CCE             >ZERO:          if Constant_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 118+ 6CCE 92 6C       >                dw      Constant_Ptr ; ok        // for primitive definitions  actual code
 118+ 6CD0             >                else
 118+ 6CD0 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 118+ 6CD0             >                endif           ; ok        // for other definitions it "points" the correct handler
 118+ 6CD0             >                // Use of "; ok" to suppress "warning[fwdref]"
 118+ 6CD0             >
 118+ 6CD0             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 118+ 6CD0 00 00       >                dw      0
 119+ 6CD2                              Constant_Def ONE        ,   "1"     ,   1
 119+ 6CD2             >                New_Def  ONE, "1", Constant_Ptr, is_normal
 119+ 6CD2             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 119+ 6CD2             >
 119+ 6CD2             >                // dummy db directives used to calculate length of namec
 119+ 6CD2 31          >                db      "1"
 119+ 6CD3             >len_NFA         defl    $ - temp_NFA
 119+ 6CD3             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 119+ 6CD2             >
 119+ 6CD2 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 119+ 6CD3 31          >                db      "1"               // name string in 7-bit ascii, but
 119+ 6CD4             >                org     $-1                 // alter last byte of Name just above to set
 119+ 6CD3 B1          >                db      {b $} | END_BIT     // msb as name end
 119+ 6CD4             >
 119+ 6CD4 CA 6C       >                dw      last_NFA            // Link to previous definition Name
 119+ 6CD6             >ONE:          if Constant_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 119+ 6CD6 92 6C       >                dw      Constant_Ptr ; ok        // for primitive definitions  actual code
 119+ 6CD8             >                else
 119+ 6CD8 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 119+ 6CD8             >                endif           ; ok        // for other definitions it "points" the correct handler
 119+ 6CD8             >                // Use of "; ok" to suppress "warning[fwdref]"
 119+ 6CD8             >
 119+ 6CD8             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 119+ 6CD8 01 00       >                dw      1
 120+ 6CDA                              Constant_Def TWO        ,   "2"     ,   2
 120+ 6CDA             >                New_Def  TWO, "2", Constant_Ptr, is_normal
 120+ 6CDA             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 120+ 6CDA             >
 120+ 6CDA             >                // dummy db directives used to calculate length of namec
 120+ 6CDA 32          >                db      "2"
 120+ 6CDB             >len_NFA         defl    $ - temp_NFA
 120+ 6CDB             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 120+ 6CDA             >
 120+ 6CDA 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 120+ 6CDB 32          >                db      "2"               // name string in 7-bit ascii, but
 120+ 6CDC             >                org     $-1                 // alter last byte of Name just above to set
 120+ 6CDB B2          >                db      {b $} | END_BIT     // msb as name end
 120+ 6CDC             >
 120+ 6CDC D2 6C       >                dw      last_NFA            // Link to previous definition Name
 120+ 6CDE             >TWO:          if Constant_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 120+ 6CDE 92 6C       >                dw      Constant_Ptr ; ok        // for primitive definitions  actual code
 120+ 6CE0             >                else
 120+ 6CE0 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 120+ 6CE0             >                endif           ; ok        // for other definitions it "points" the correct handler
 120+ 6CE0             >                // Use of "; ok" to suppress "warning[fwdref]"
 120+ 6CE0             >
 120+ 6CE0             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 120+ 6CE0 02 00       >                dw      2
 121+ 6CE2                              Constant_Def THREE      ,   "3"     ,   3
 121+ 6CE2             >                New_Def  THREE, "3", Constant_Ptr, is_normal
 121+ 6CE2             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 121+ 6CE2             >
 121+ 6CE2             >                // dummy db directives used to calculate length of namec
 121+ 6CE2 33          >                db      "3"
 121+ 6CE3             >len_NFA         defl    $ - temp_NFA
 121+ 6CE3             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 121+ 6CE2             >
 121+ 6CE2 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 121+ 6CE3 33          >                db      "3"               // name string in 7-bit ascii, but
 121+ 6CE4             >                org     $-1                 // alter last byte of Name just above to set
 121+ 6CE3 B3          >                db      {b $} | END_BIT     // msb as name end
 121+ 6CE4             >
 121+ 6CE4 DA 6C       >                dw      last_NFA            // Link to previous definition Name
 121+ 6CE6             >THREE:          if Constant_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 121+ 6CE6 92 6C       >                dw      Constant_Ptr ; ok        // for primitive definitions  actual code
 121+ 6CE8             >                else
 121+ 6CE8 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 121+ 6CE8             >                endif           ; ok        // for other definitions it "points" the correct handler
 121+ 6CE8             >                // Use of "; ok" to suppress "warning[fwdref]"
 121+ 6CE8             >
 121+ 6CE8             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 121+ 6CE8 03 00       >                dw      3
 122+ 6CEA                              Constant_Def NEG_ONE    ,   "-1"    ,  -1
 122+ 6CEA             >                New_Def  NEG_ONE, "-1", Constant_Ptr, is_normal
 122+ 6CEA             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 122+ 6CEA             >
 122+ 6CEA             >                // dummy db directives used to calculate length of namec
 122+ 6CEA 2D 31       >                db      "-1"
 122+ 6CEC             >len_NFA         defl    $ - temp_NFA
 122+ 6CEC             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 122+ 6CEA             >
 122+ 6CEA 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 122+ 6CEB 2D 31       >                db      "-1"               // name string in 7-bit ascii, but
 122+ 6CED             >                org     $-1                 // alter last byte of Name just above to set
 122+ 6CEC B1          >                db      {b $} | END_BIT     // msb as name end
 122+ 6CED             >
 122+ 6CED E2 6C       >                dw      last_NFA            // Link to previous definition Name
 122+ 6CEF             >NEG_ONE:          if Constant_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 122+ 6CEF 92 6C       >                dw      Constant_Ptr ; ok        // for primitive definitions  actual code
 122+ 6CF1             >                else
 122+ 6CF1 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 122+ 6CF1             >                endif           ; ok        // for other definitions it "points" the correct handler
 122+ 6CF1             >                // Use of "; ok" to suppress "warning[fwdref]"
 122+ 6CF1             >
 122+ 6CF1             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 122+ 6CF1 FF FF       >                dw      -1
 123+ 6CF3                              Constant_Def BL         ,   "BL"    , $20
 123+ 6CF3             >                New_Def  BL, "BL", Constant_Ptr, is_normal
 123+ 6CF3             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 123+ 6CF3             >
 123+ 6CF3             >                // dummy db directives used to calculate length of namec
 123+ 6CF3 42 4C       >                db      "BL"
 123+ 6CF5             >len_NFA         defl    $ - temp_NFA
 123+ 6CF5             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 123+ 6CF3             >
 123+ 6CF3 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 123+ 6CF4 42 4C       >                db      "BL"               // name string in 7-bit ascii, but
 123+ 6CF6             >                org     $-1                 // alter last byte of Name just above to set
 123+ 6CF5 CC          >                db      {b $} | END_BIT     // msb as name end
 123+ 6CF6             >
 123+ 6CF6 EA 6C       >                dw      last_NFA            // Link to previous definition Name
 123+ 6CF8             >BL:          if Constant_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 123+ 6CF8 92 6C       >                dw      Constant_Ptr ; ok        // for primitive definitions  actual code
 123+ 6CFA             >                else
 123+ 6CFA ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 123+ 6CFA             >                endif           ; ok        // for other definitions it "points" the correct handler
 123+ 6CFA             >                // Use of "; ok" to suppress "warning[fwdref]"
 123+ 6CFA             >
 123+ 6CFA             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 123+ 6CFA 20 00       >                dw      $20
 124+ 6CFC                              Constant_Def CL         ,   "C/L"   ,  64
 124+ 6CFC             >                New_Def  CL, "C/L", Constant_Ptr, is_normal
 124+ 6CFC             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 124+ 6CFC             >
 124+ 6CFC             >                // dummy db directives used to calculate length of namec
 124+ 6CFC 43 2F 4C    >                db      "C/L"
 124+ 6CFF             >len_NFA         defl    $ - temp_NFA
 124+ 6CFF             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 124+ 6CFC             >
 124+ 6CFC 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 124+ 6CFD 43 2F 4C    >                db      "C/L"               // name string in 7-bit ascii, but
 124+ 6D00             >                org     $-1                 // alter last byte of Name just above to set
 124+ 6CFF CC          >                db      {b $} | END_BIT     // msb as name end
 124+ 6D00             >
 124+ 6D00 F3 6C       >                dw      last_NFA            // Link to previous definition Name
 124+ 6D02             >CL:          if Constant_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 124+ 6D02 92 6C       >                dw      Constant_Ptr ; ok        // for primitive definitions  actual code
 124+ 6D04             >                else
 124+ 6D04 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 124+ 6D04             >                endif           ; ok        // for other definitions it "points" the correct handler
 124+ 6D04             >                // Use of "; ok" to suppress "warning[fwdref]"
 124+ 6D04             >
 124+ 6D04             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 124+ 6D04 40 00       >                dw      64
 125+ 6D06                              Constant_Def BBUF       ,   "B/BUF" , 512
 125+ 6D06             >                New_Def  BBUF, "B/BUF", Constant_Ptr, is_normal
 125+ 6D06             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 125+ 6D06             >
 125+ 6D06             >                // dummy db directives used to calculate length of namec
 125+ 6D06 42 2F 42 55 >                db      "B/BUF"
 125+ 6D0A 46          >
 125+ 6D0B             >len_NFA         defl    $ - temp_NFA
 125+ 6D0B             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 125+ 6D06             >
 125+ 6D06 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 125+ 6D07 42 2F 42 55 >                db      "B/BUF"               // name string in 7-bit ascii, but
 125+ 6D0B 46          >
 125+ 6D0C             >                org     $-1                 // alter last byte of Name just above to set
 125+ 6D0B C6          >                db      {b $} | END_BIT     // msb as name end
 125+ 6D0C             >
 125+ 6D0C FC 6C       >                dw      last_NFA            // Link to previous definition Name
 125+ 6D0E             >BBUF:          if Constant_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 125+ 6D0E 92 6C       >                dw      Constant_Ptr ; ok        // for primitive definitions  actual code
 125+ 6D10             >                else
 125+ 6D10 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 125+ 6D10             >                endif           ; ok        // for other definitions it "points" the correct handler
 125+ 6D10             >                // Use of "; ok" to suppress "warning[fwdref]"
 125+ 6D10             >
 125+ 6D10             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 125+ 6D10 00 02       >                dw      512
 126+ 6D12                              Constant_Def BSCR       ,   "B/SCR" ,   2
 126+ 6D12             >                New_Def  BSCR, "B/SCR", Constant_Ptr, is_normal
 126+ 6D12             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 126+ 6D12             >
 126+ 6D12             >                // dummy db directives used to calculate length of namec
 126+ 6D12 42 2F 53 43 >                db      "B/SCR"
 126+ 6D16 52          >
 126+ 6D17             >len_NFA         defl    $ - temp_NFA
 126+ 6D17             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 126+ 6D12             >
 126+ 6D12 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 126+ 6D13 42 2F 53 43 >                db      "B/SCR"               // name string in 7-bit ascii, but
 126+ 6D17 52          >
 126+ 6D18             >                org     $-1                 // alter last byte of Name just above to set
 126+ 6D17 D2          >                db      {b $} | END_BIT     // msb as name end
 126+ 6D18             >
 126+ 6D18 06 6D       >                dw      last_NFA            // Link to previous definition Name
 126+ 6D1A             >BSCR:          if Constant_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 126+ 6D1A 92 6C       >                dw      Constant_Ptr ; ok        // for primitive definitions  actual code
 126+ 6D1C             >                else
 126+ 6D1C ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 126+ 6D1C             >                endif           ; ok        // for other definitions it "points" the correct handler
 126+ 6D1C             >                // Use of "; ok" to suppress "warning[fwdref]"
 126+ 6D1C             >
 126+ 6D1C             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 126+ 6D1C 02 00       >                dw      2
 127+ 6D1E                              Constant_Def LSCR       ,   "L/SCR" ,  16
 127+ 6D1E             >                New_Def  LSCR, "L/SCR", Constant_Ptr, is_normal
 127+ 6D1E             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 127+ 6D1E             >
 127+ 6D1E             >                // dummy db directives used to calculate length of namec
 127+ 6D1E 4C 2F 53 43 >                db      "L/SCR"
 127+ 6D22 52          >
 127+ 6D23             >len_NFA         defl    $ - temp_NFA
 127+ 6D23             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 127+ 6D1E             >
 127+ 6D1E 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 127+ 6D1F 4C 2F 53 43 >                db      "L/SCR"               // name string in 7-bit ascii, but
 127+ 6D23 52          >
 127+ 6D24             >                org     $-1                 // alter last byte of Name just above to set
 127+ 6D23 D2          >                db      {b $} | END_BIT     // msb as name end
 127+ 6D24             >
 127+ 6D24 12 6D       >                dw      last_NFA            // Link to previous definition Name
 127+ 6D26             >LSCR:          if Constant_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 127+ 6D26 92 6C       >                dw      Constant_Ptr ; ok        // for primitive definitions  actual code
 127+ 6D28             >                else
 127+ 6D28 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 127+ 6D28             >                endif           ; ok        // for other definitions it "points" the correct handler
 127+ 6D28             >                // Use of "; ok" to suppress "warning[fwdref]"
 127+ 6D28             >
 127+ 6D28             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 127+ 6D28 10 00       >                dw      16
 128+ 6D2A
 129+ 6D2A              //  ______________________________________________________________________
 130+ 6D2A              //
 131+ 6D2A              // +origin         --
 132+ 6D2A              //              Colon_Def PLUS_ORIGIN, "+ORIGIN", is_normal
 133+ 6D2A              //              dw      LIT, Cold_origin        // [ hex 6366 ] literal
 134+ 6D2A              //              dw      PLUS                    // +
 135+ 6D2A              //              dw      EXIT                    // ;
 136+ 6D2A                              New_Def PLUS_ORIGIN, "+ORIGIN", is_code, is_normal
 136+ 6D2A             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 136+ 6D2A             >
 136+ 6D2A             >                // dummy db directives used to calculate length of namec
 136+ 6D2A 2B 4F 52 49 >                db      "+ORIGIN"
 136+ 6D2E 47 49 4E    >
 136+ 6D31             >len_NFA         defl    $ - temp_NFA
 136+ 6D31             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 136+ 6D2A             >
 136+ 6D2A 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 136+ 6D2B 2B 4F 52 49 >                db      "+ORIGIN"               // name string in 7-bit ascii, but
 136+ 6D2F 47 49 4E    >
 136+ 6D32             >                org     $-1                 // alter last byte of Name just above to set
 136+ 6D31 CE          >                db      {b $} | END_BIT     // msb as name end
 136+ 6D32             >
 136+ 6D32 1E 6D       >                dw      last_NFA            // Link to previous definition Name
 136+ 6D34             >PLUS_ORIGIN:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 136+ 6D34 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
 136+ 6D34             >                else
 136+ 6D34 36 6D       >                dw      $ + 2   ; ok        // is pointed by CFA
 136+ 6D36             >                endif           ; ok        // for other definitions it "points" the correct handler
 136+ 6D36             >                // Use of "; ok" to suppress "warning[fwdref]"
 136+ 6D36             >
 136+ 6D36             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 137+ 6D36 E1                           pop     hl
 138+ 6D37 11 66 63                     ld      de,  Cold_origin
 139+ 6D3A 19                           add     hl, de
 140+ 6D3B E5                           push    hl
 141+ 6D3C                              next
 141+ 6D3C DD E9       >                jp      (ix)
 142+ 6D3E
 143+ 6D3E
 144+ 6D3E              //  ______________________________________________________________________
 145+ 6D3E              //
 146+ 6D3E                              Constant_Def CNEXT      ,   "(NEXT)", Next_Ptr
 146+ 6D3E             >                New_Def  CNEXT, "(NEXT)", Constant_Ptr, is_normal
 146+ 6D3E             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 146+ 6D3E             >
 146+ 6D3E             >                // dummy db directives used to calculate length of namec
 146+ 6D3E 28 4E 45 58 >                db      "(NEXT)"
 146+ 6D42 54 29       >
 146+ 6D44             >len_NFA         defl    $ - temp_NFA
 146+ 6D44             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 146+ 6D3E             >
 146+ 6D3E 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 146+ 6D3F 28 4E 45 58 >                db      "(NEXT)"               // name string in 7-bit ascii, but
 146+ 6D43 54 29       >
 146+ 6D45             >                org     $-1                 // alter last byte of Name just above to set
 146+ 6D44 A9          >                db      {b $} | END_BIT     // msb as name end
 146+ 6D45             >
 146+ 6D45 2A 6D       >                dw      last_NFA            // Link to previous definition Name
 146+ 6D47             >CNEXT:          if Constant_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 146+ 6D47 92 6C       >                dw      Constant_Ptr ; ok        // for primitive definitions  actual code
 146+ 6D49             >                else
 146+ 6D49 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 146+ 6D49             >                endif           ; ok        // for other definitions it "points" the correct handler
 146+ 6D49             >                // Use of "; ok" to suppress "warning[fwdref]"
 146+ 6D49             >
 146+ 6D49             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 146+ 6D49 98 63       >                dw      Next_Ptr
 147+ 6D4B
 148+ 6D4B              //  ______________________________________________________________________
 149+ 6D4B              //
 150+ 6D4B
 151+ 6D4B                              User_Def S0         , "S0"        , 06 // starting value of Stack-Pointer
 151+ 6D4B             >                New_Def  S0, "S0", User_Ptr, is_normal
 151+ 6D4B             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 151+ 6D4B             >
 151+ 6D4B             >                // dummy db directives used to calculate length of namec
 151+ 6D4B 53 30       >                db      "S0"
 151+ 6D4D             >len_NFA         defl    $ - temp_NFA
 151+ 6D4D             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 151+ 6D4B             >
 151+ 6D4B 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 151+ 6D4C 53 30       >                db      "S0"               // name string in 7-bit ascii, but
 151+ 6D4E             >                org     $-1                 // alter last byte of Name just above to set
 151+ 6D4D B0          >                db      {b $} | END_BIT     // msb as name end
 151+ 6D4E             >
 151+ 6D4E 3E 6D       >                dw      last_NFA            // Link to previous definition Name
 151+ 6D50             >S0:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 151+ 6D50 BE 6C       >                dw      User_Ptr ; ok        // for primitive definitions  actual code
 151+ 6D52             >                else
 151+ 6D52 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 151+ 6D52             >                endif           ; ok        // for other definitions it "points" the correct handler
 151+ 6D52             >                // Use of "; ok" to suppress "warning[fwdref]"
 151+ 6D52             >
 151+ 6D52             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 151+ 6D52 06          >                db      06
 152+ 6D53                              User_Def R0         , "R0"        , 08 // starting value of Return-Pointer
 152+ 6D53             >                New_Def  R0, "R0", User_Ptr, is_normal
 152+ 6D53             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 152+ 6D53             >
 152+ 6D53             >                // dummy db directives used to calculate length of namec
 152+ 6D53 52 30       >                db      "R0"
 152+ 6D55             >len_NFA         defl    $ - temp_NFA
 152+ 6D55             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 152+ 6D53             >
 152+ 6D53 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 152+ 6D54 52 30       >                db      "R0"               // name string in 7-bit ascii, but
 152+ 6D56             >                org     $-1                 // alter last byte of Name just above to set
 152+ 6D55 B0          >                db      {b $} | END_BIT     // msb as name end
 152+ 6D56             >
 152+ 6D56 4B 6D       >                dw      last_NFA            // Link to previous definition Name
 152+ 6D58             >R0:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 152+ 6D58 BE 6C       >                dw      User_Ptr ; ok        // for primitive definitions  actual code
 152+ 6D5A             >                else
 152+ 6D5A ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 152+ 6D5A             >                endif           ; ok        // for other definitions it "points" the correct handler
 152+ 6D5A             >                // Use of "; ok" to suppress "warning[fwdref]"
 152+ 6D5A             >
 152+ 6D5A             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 152+ 6D5A 08          >                db      08
 153+ 6D5B                              User_Def TIB        , "TIB"       , 10 // input terminal buffer address
 153+ 6D5B             >                New_Def  TIB, "TIB", User_Ptr, is_normal
 153+ 6D5B             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 153+ 6D5B             >
 153+ 6D5B             >                // dummy db directives used to calculate length of namec
 153+ 6D5B 54 49 42    >                db      "TIB"
 153+ 6D5E             >len_NFA         defl    $ - temp_NFA
 153+ 6D5E             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 153+ 6D5B             >
 153+ 6D5B 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 153+ 6D5C 54 49 42    >                db      "TIB"               // name string in 7-bit ascii, but
 153+ 6D5F             >                org     $-1                 // alter last byte of Name just above to set
 153+ 6D5E C2          >                db      {b $} | END_BIT     // msb as name end
 153+ 6D5F             >
 153+ 6D5F 53 6D       >                dw      last_NFA            // Link to previous definition Name
 153+ 6D61             >TIB:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 153+ 6D61 BE 6C       >                dw      User_Ptr ; ok        // for primitive definitions  actual code
 153+ 6D63             >                else
 153+ 6D63 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 153+ 6D63             >                endif           ; ok        // for other definitions it "points" the correct handler
 153+ 6D63             >                // Use of "; ok" to suppress "warning[fwdref]"
 153+ 6D63             >
 153+ 6D63             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 153+ 6D63 0A          >                db      10
 154+ 6D64                              User_Def WIDTH      , "WIDTH"     , 12 // maximum number of characters for a word name
 154+ 6D64             >                New_Def  WIDTH, "WIDTH", User_Ptr, is_normal
 154+ 6D64             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 154+ 6D64             >
 154+ 6D64             >                // dummy db directives used to calculate length of namec
 154+ 6D64 57 49 44 54 >                db      "WIDTH"
 154+ 6D68 48          >
 154+ 6D69             >len_NFA         defl    $ - temp_NFA
 154+ 6D69             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 154+ 6D64             >
 154+ 6D64 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 154+ 6D65 57 49 44 54 >                db      "WIDTH"               // name string in 7-bit ascii, but
 154+ 6D69 48          >
 154+ 6D6A             >                org     $-1                 // alter last byte of Name just above to set
 154+ 6D69 C8          >                db      {b $} | END_BIT     // msb as name end
 154+ 6D6A             >
 154+ 6D6A 5B 6D       >                dw      last_NFA            // Link to previous definition Name
 154+ 6D6C             >WIDTH:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 154+ 6D6C BE 6C       >                dw      User_Ptr ; ok        // for primitive definitions  actual code
 154+ 6D6E             >                else
 154+ 6D6E ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 154+ 6D6E             >                endif           ; ok        // for other definitions it "points" the correct handler
 154+ 6D6E             >                // Use of "; ok" to suppress "warning[fwdref]"
 154+ 6D6E             >
 154+ 6D6E             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 154+ 6D6E 0C          >                db      12
 155+ 6D6F                              User_Def WARNING    , "WARNING"   , 14 // error reporting method: 0 base, 1 verbose
 155+ 6D6F             >                New_Def  WARNING, "WARNING", User_Ptr, is_normal
 155+ 6D6F             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 155+ 6D6F             >
 155+ 6D6F             >                // dummy db directives used to calculate length of namec
 155+ 6D6F 57 41 52 4E >                db      "WARNING"
 155+ 6D73 49 4E 47    >
 155+ 6D76             >len_NFA         defl    $ - temp_NFA
 155+ 6D76             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 155+ 6D6F             >
 155+ 6D6F 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 155+ 6D70 57 41 52 4E >                db      "WARNING"               // name string in 7-bit ascii, but
 155+ 6D74 49 4E 47    >
 155+ 6D77             >                org     $-1                 // alter last byte of Name just above to set
 155+ 6D76 C7          >                db      {b $} | END_BIT     // msb as name end
 155+ 6D77             >
 155+ 6D77 64 6D       >                dw      last_NFA            // Link to previous definition Name
 155+ 6D79             >WARNING:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 155+ 6D79 BE 6C       >                dw      User_Ptr ; ok        // for primitive definitions  actual code
 155+ 6D7B             >                else
 155+ 6D7B ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 155+ 6D7B             >                endif           ; ok        // for other definitions it "points" the correct handler
 155+ 6D7B             >                // Use of "; ok" to suppress "warning[fwdref]"
 155+ 6D7B             >
 155+ 6D7B             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 155+ 6D7B 0E          >                db      14
 156+ 6D7C                              User_Def FENCE      , "FENCE"     , 16 // minimum address where FORGET can work
 156+ 6D7C             >                New_Def  FENCE, "FENCE", User_Ptr, is_normal
 156+ 6D7C             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 156+ 6D7C             >
 156+ 6D7C             >                // dummy db directives used to calculate length of namec
 156+ 6D7C 46 45 4E 43 >                db      "FENCE"
 156+ 6D80 45          >
 156+ 6D81             >len_NFA         defl    $ - temp_NFA
 156+ 6D81             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 156+ 6D7C             >
 156+ 6D7C 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 156+ 6D7D 46 45 4E 43 >                db      "FENCE"               // name string in 7-bit ascii, but
 156+ 6D81 45          >
 156+ 6D82             >                org     $-1                 // alter last byte of Name just above to set
 156+ 6D81 C5          >                db      {b $} | END_BIT     // msb as name end
 156+ 6D82             >
 156+ 6D82 6F 6D       >                dw      last_NFA            // Link to previous definition Name
 156+ 6D84             >FENCE:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 156+ 6D84 BE 6C       >                dw      User_Ptr ; ok        // for primitive definitions  actual code
 156+ 6D86             >                else
 156+ 6D86 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 156+ 6D86             >                endif           ; ok        // for other definitions it "points" the correct handler
 156+ 6D86             >                // Use of "; ok" to suppress "warning[fwdref]"
 156+ 6D86             >
 156+ 6D86             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 156+ 6D86 10          >                db      16
 157+ 6D87                              User_Def DP         , "DP"        , 18 // Dictionary Pointer
 157+ 6D87             >                New_Def  DP, "DP", User_Ptr, is_normal
 157+ 6D87             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 157+ 6D87             >
 157+ 6D87             >                // dummy db directives used to calculate length of namec
 157+ 6D87 44 50       >                db      "DP"
 157+ 6D89             >len_NFA         defl    $ - temp_NFA
 157+ 6D89             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 157+ 6D87             >
 157+ 6D87 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 157+ 6D88 44 50       >                db      "DP"               // name string in 7-bit ascii, but
 157+ 6D8A             >                org     $-1                 // alter last byte of Name just above to set
 157+ 6D89 D0          >                db      {b $} | END_BIT     // msb as name end
 157+ 6D8A             >
 157+ 6D8A 7C 6D       >                dw      last_NFA            // Link to previous definition Name
 157+ 6D8C             >DP:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 157+ 6D8C BE 6C       >                dw      User_Ptr ; ok        // for primitive definitions  actual code
 157+ 6D8E             >                else
 157+ 6D8E ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 157+ 6D8E             >                endif           ; ok        // for other definitions it "points" the correct handler
 157+ 6D8E             >                // Use of "; ok" to suppress "warning[fwdref]"
 157+ 6D8E             >
 157+ 6D8E             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 157+ 6D8E 12          >                db      18
 158+ 6D8F                              User_Def VOC_LINK   , "VOC-LINK"  , 20 // pointer to the latest vocabulary
 158+ 6D8F             >                New_Def  VOC_LINK, "VOC-LINK", User_Ptr, is_normal
 158+ 6D8F             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 158+ 6D8F             >
 158+ 6D8F             >                // dummy db directives used to calculate length of namec
 158+ 6D8F 56 4F 43 2D >                db      "VOC-LINK"
 158+ 6D93 4C 49 4E 4B >
 158+ 6D97             >len_NFA         defl    $ - temp_NFA
 158+ 6D97             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 158+ 6D8F             >
 158+ 6D8F 88          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 158+ 6D90 56 4F 43 2D >                db      "VOC-LINK"               // name string in 7-bit ascii, but
 158+ 6D94 4C 49 4E 4B >
 158+ 6D98             >                org     $-1                 // alter last byte of Name just above to set
 158+ 6D97 CB          >                db      {b $} | END_BIT     // msb as name end
 158+ 6D98             >
 158+ 6D98 87 6D       >                dw      last_NFA            // Link to previous definition Name
 158+ 6D9A             >VOC_LINK:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 158+ 6D9A BE 6C       >                dw      User_Ptr ; ok        // for primitive definitions  actual code
 158+ 6D9C             >                else
 158+ 6D9C ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 158+ 6D9C             >                endif           ; ok        // for other definitions it "points" the correct handler
 158+ 6D9C             >                // Use of "; ok" to suppress "warning[fwdref]"
 158+ 6D9C             >
 158+ 6D9C             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 158+ 6D9C 14          >                db      20
 159+ 6D9D                              User_Def FIRST      , "FIRST"     , 22 // address of first buffer
 159+ 6D9D             >                New_Def  FIRST, "FIRST", User_Ptr, is_normal
 159+ 6D9D             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 159+ 6D9D             >
 159+ 6D9D             >                // dummy db directives used to calculate length of namec
 159+ 6D9D 46 49 52 53 >                db      "FIRST"
 159+ 6DA1 54          >
 159+ 6DA2             >len_NFA         defl    $ - temp_NFA
 159+ 6DA2             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 159+ 6D9D             >
 159+ 6D9D 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 159+ 6D9E 46 49 52 53 >                db      "FIRST"               // name string in 7-bit ascii, but
 159+ 6DA2 54          >
 159+ 6DA3             >                org     $-1                 // alter last byte of Name just above to set
 159+ 6DA2 D4          >                db      {b $} | END_BIT     // msb as name end
 159+ 6DA3             >
 159+ 6DA3 8F 6D       >                dw      last_NFA            // Link to previous definition Name
 159+ 6DA5             >FIRST:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 159+ 6DA5 BE 6C       >                dw      User_Ptr ; ok        // for primitive definitions  actual code
 159+ 6DA7             >                else
 159+ 6DA7 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 159+ 6DA7             >                endif           ; ok        // for other definitions it "points" the correct handler
 159+ 6DA7             >                // Use of "; ok" to suppress "warning[fwdref]"
 159+ 6DA7             >
 159+ 6DA7             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 159+ 6DA7 16          >                db      22
 160+ 6DA8                              User_Def LIMIT      , "LIMIT"     , 24 // address of last buffer
 160+ 6DA8             >                New_Def  LIMIT, "LIMIT", User_Ptr, is_normal
 160+ 6DA8             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 160+ 6DA8             >
 160+ 6DA8             >                // dummy db directives used to calculate length of namec
 160+ 6DA8 4C 49 4D 49 >                db      "LIMIT"
 160+ 6DAC 54          >
 160+ 6DAD             >len_NFA         defl    $ - temp_NFA
 160+ 6DAD             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 160+ 6DA8             >
 160+ 6DA8 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 160+ 6DA9 4C 49 4D 49 >                db      "LIMIT"               // name string in 7-bit ascii, but
 160+ 6DAD 54          >
 160+ 6DAE             >                org     $-1                 // alter last byte of Name just above to set
 160+ 6DAD D4          >                db      {b $} | END_BIT     // msb as name end
 160+ 6DAE             >
 160+ 6DAE 9D 6D       >                dw      last_NFA            // Link to previous definition Name
 160+ 6DB0             >LIMIT:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 160+ 6DB0 BE 6C       >                dw      User_Ptr ; ok        // for primitive definitions  actual code
 160+ 6DB2             >                else
 160+ 6DB2 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 160+ 6DB2             >                endif           ; ok        // for other definitions it "points" the correct handler
 160+ 6DB2             >                // Use of "; ok" to suppress "warning[fwdref]"
 160+ 6DB2             >
 160+ 6DB2             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 160+ 6DB2 18          >                db      24
 161+ 6DB3                              User_Def EXP        , "EXP"       , 26 // keeps the exponent in number conversion
 161+ 6DB3             >                New_Def  EXP, "EXP", User_Ptr, is_normal
 161+ 6DB3             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 161+ 6DB3             >
 161+ 6DB3             >                // dummy db directives used to calculate length of namec
 161+ 6DB3 45 58 50    >                db      "EXP"
 161+ 6DB6             >len_NFA         defl    $ - temp_NFA
 161+ 6DB6             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 161+ 6DB3             >
 161+ 6DB3 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 161+ 6DB4 45 58 50    >                db      "EXP"               // name string in 7-bit ascii, but
 161+ 6DB7             >                org     $-1                 // alter last byte of Name just above to set
 161+ 6DB6 D0          >                db      {b $} | END_BIT     // msb as name end
 161+ 6DB7             >
 161+ 6DB7 A8 6D       >                dw      last_NFA            // Link to previous definition Name
 161+ 6DB9             >EXP:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 161+ 6DB9 BE 6C       >                dw      User_Ptr ; ok        // for primitive definitions  actual code
 161+ 6DBB             >                else
 161+ 6DBB ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 161+ 6DBB             >                endif           ; ok        // for other definitions it "points" the correct handler
 161+ 6DBB             >                // Use of "; ok" to suppress "warning[fwdref]"
 161+ 6DBB             >
 161+ 6DBB             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 161+ 6DBB 1A          >                db      26
 162+ 6DBC                              User_Def NMODE      , "NMODE"     , 28 // number mode: 0 integer, 1 floating point
 162+ 6DBC             >                New_Def  NMODE, "NMODE", User_Ptr, is_normal
 162+ 6DBC             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 162+ 6DBC             >
 162+ 6DBC             >                // dummy db directives used to calculate length of namec
 162+ 6DBC 4E 4D 4F 44 >                db      "NMODE"
 162+ 6DC0 45          >
 162+ 6DC1             >len_NFA         defl    $ - temp_NFA
 162+ 6DC1             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 162+ 6DBC             >
 162+ 6DBC 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 162+ 6DBD 4E 4D 4F 44 >                db      "NMODE"               // name string in 7-bit ascii, but
 162+ 6DC1 45          >
 162+ 6DC2             >                org     $-1                 // alter last byte of Name just above to set
 162+ 6DC1 C5          >                db      {b $} | END_BIT     // msb as name end
 162+ 6DC2             >
 162+ 6DC2 B3 6D       >                dw      last_NFA            // Link to previous definition Name
 162+ 6DC4             >NMODE:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 162+ 6DC4 BE 6C       >                dw      User_Ptr ; ok        // for primitive definitions  actual code
 162+ 6DC6             >                else
 162+ 6DC6 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 162+ 6DC6             >                endif           ; ok        // for other definitions it "points" the correct handler
 162+ 6DC6             >                // Use of "; ok" to suppress "warning[fwdref]"
 162+ 6DC6             >
 162+ 6DC6             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 162+ 6DC6 1C          >                db      28
 163+ 6DC7                              User_Def BLK        , "BLK"       , 30 // block number to be interpreted. 0 for terminal
 163+ 6DC7             >                New_Def  BLK, "BLK", User_Ptr, is_normal
 163+ 6DC7             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 163+ 6DC7             >
 163+ 6DC7             >                // dummy db directives used to calculate length of namec
 163+ 6DC7 42 4C 4B    >                db      "BLK"
 163+ 6DCA             >len_NFA         defl    $ - temp_NFA
 163+ 6DCA             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 163+ 6DC7             >
 163+ 6DC7 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 163+ 6DC8 42 4C 4B    >                db      "BLK"               // name string in 7-bit ascii, but
 163+ 6DCB             >                org     $-1                 // alter last byte of Name just above to set
 163+ 6DCA CB          >                db      {b $} | END_BIT     // msb as name end
 163+ 6DCB             >
 163+ 6DCB BC 6D       >                dw      last_NFA            // Link to previous definition Name
 163+ 6DCD             >BLK:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 163+ 6DCD BE 6C       >                dw      User_Ptr ; ok        // for primitive definitions  actual code
 163+ 6DCF             >                else
 163+ 6DCF ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 163+ 6DCF             >                endif           ; ok        // for other definitions it "points" the correct handler
 163+ 6DCF             >                // Use of "; ok" to suppress "warning[fwdref]"
 163+ 6DCF             >
 163+ 6DCF             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 163+ 6DCF 1E          >                db      30
 164+ 6DD0                              User_Def TO_IN      , ">IN"       , 32 // incremented when consuming input buffer
 164+ 6DD0             >                New_Def  TO_IN, ">IN", User_Ptr, is_normal
 164+ 6DD0             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 164+ 6DD0             >
 164+ 6DD0             >                // dummy db directives used to calculate length of namec
 164+ 6DD0 3E 49 4E    >                db      ">IN"
 164+ 6DD3             >len_NFA         defl    $ - temp_NFA
 164+ 6DD3             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 164+ 6DD0             >
 164+ 6DD0 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 164+ 6DD1 3E 49 4E    >                db      ">IN"               // name string in 7-bit ascii, but
 164+ 6DD4             >                org     $-1                 // alter last byte of Name just above to set
 164+ 6DD3 CE          >                db      {b $} | END_BIT     // msb as name end
 164+ 6DD4             >
 164+ 6DD4 C7 6D       >                dw      last_NFA            // Link to previous definition Name
 164+ 6DD6             >TO_IN:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 164+ 6DD6 BE 6C       >                dw      User_Ptr ; ok        // for primitive definitions  actual code
 164+ 6DD8             >                else
 164+ 6DD8 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 164+ 6DD8             >                endif           ; ok        // for other definitions it "points" the correct handler
 164+ 6DD8             >                // Use of "; ok" to suppress "warning[fwdref]"
 164+ 6DD8             >
 164+ 6DD8             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 164+ 6DD8 20          >                db      32
 165+ 6DD9                              User_Def OUT        , "OUT"       , 34 // incremented when sending to output
 165+ 6DD9             >                New_Def  OUT, "OUT", User_Ptr, is_normal
 165+ 6DD9             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 165+ 6DD9             >
 165+ 6DD9             >                // dummy db directives used to calculate length of namec
 165+ 6DD9 4F 55 54    >                db      "OUT"
 165+ 6DDC             >len_NFA         defl    $ - temp_NFA
 165+ 6DDC             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 165+ 6DD9             >
 165+ 6DD9 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 165+ 6DDA 4F 55 54    >                db      "OUT"               // name string in 7-bit ascii, but
 165+ 6DDD             >                org     $-1                 // alter last byte of Name just above to set
 165+ 6DDC D4          >                db      {b $} | END_BIT     // msb as name end
 165+ 6DDD             >
 165+ 6DDD D0 6D       >                dw      last_NFA            // Link to previous definition Name
 165+ 6DDF             >OUT:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 165+ 6DDF BE 6C       >                dw      User_Ptr ; ok        // for primitive definitions  actual code
 165+ 6DE1             >                else
 165+ 6DE1 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 165+ 6DE1             >                endif           ; ok        // for other definitions it "points" the correct handler
 165+ 6DE1             >                // Use of "; ok" to suppress "warning[fwdref]"
 165+ 6DE1             >
 165+ 6DE1             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 165+ 6DE1 22          >                db      34
 166+ 6DE2                              User_Def SCR        , "SCR"       , 36 // latest screen retreieved by LIST
 166+ 6DE2             >                New_Def  SCR, "SCR", User_Ptr, is_normal
 166+ 6DE2             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 166+ 6DE2             >
 166+ 6DE2             >                // dummy db directives used to calculate length of namec
 166+ 6DE2 53 43 52    >                db      "SCR"
 166+ 6DE5             >len_NFA         defl    $ - temp_NFA
 166+ 6DE5             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 166+ 6DE2             >
 166+ 6DE2 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 166+ 6DE3 53 43 52    >                db      "SCR"               // name string in 7-bit ascii, but
 166+ 6DE6             >                org     $-1                 // alter last byte of Name just above to set
 166+ 6DE5 D2          >                db      {b $} | END_BIT     // msb as name end
 166+ 6DE6             >
 166+ 6DE6 D9 6D       >                dw      last_NFA            // Link to previous definition Name
 166+ 6DE8             >SCR:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 166+ 6DE8 BE 6C       >                dw      User_Ptr ; ok        // for primitive definitions  actual code
 166+ 6DEA             >                else
 166+ 6DEA ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 166+ 6DEA             >                endif           ; ok        // for other definitions it "points" the correct handler
 166+ 6DEA             >                // Use of "; ok" to suppress "warning[fwdref]"
 166+ 6DEA             >
 166+ 6DEA             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 166+ 6DEA 24          >                db      36
 167+ 6DEB                              User_Def OFFSET     , "OFFSET"    , 38 //
 167+ 6DEB             >                New_Def  OFFSET, "OFFSET", User_Ptr, is_normal
 167+ 6DEB             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 167+ 6DEB             >
 167+ 6DEB             >                // dummy db directives used to calculate length of namec
 167+ 6DEB 4F 46 46 53 >                db      "OFFSET"
 167+ 6DEF 45 54       >
 167+ 6DF1             >len_NFA         defl    $ - temp_NFA
 167+ 6DF1             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 167+ 6DEB             >
 167+ 6DEB 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 167+ 6DEC 4F 46 46 53 >                db      "OFFSET"               // name string in 7-bit ascii, but
 167+ 6DF0 45 54       >
 167+ 6DF2             >                org     $-1                 // alter last byte of Name just above to set
 167+ 6DF1 D4          >                db      {b $} | END_BIT     // msb as name end
 167+ 6DF2             >
 167+ 6DF2 E2 6D       >                dw      last_NFA            // Link to previous definition Name
 167+ 6DF4             >OFFSET:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 167+ 6DF4 BE 6C       >                dw      User_Ptr ; ok        // for primitive definitions  actual code
 167+ 6DF6             >                else
 167+ 6DF6 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 167+ 6DF6             >                endif           ; ok        // for other definitions it "points" the correct handler
 167+ 6DF6             >                // Use of "; ok" to suppress "warning[fwdref]"
 167+ 6DF6             >
 167+ 6DF6             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 167+ 6DF6 26          >                db      38
 168+ 6DF7                              User_Def CONTEXT    , "CONTEXT"   , 40 // pointer to the vocabulary where search begins
 168+ 6DF7             >                New_Def  CONTEXT, "CONTEXT", User_Ptr, is_normal
 168+ 6DF7             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 168+ 6DF7             >
 168+ 6DF7             >                // dummy db directives used to calculate length of namec
 168+ 6DF7 43 4F 4E 54 >                db      "CONTEXT"
 168+ 6DFB 45 58 54    >
 168+ 6DFE             >len_NFA         defl    $ - temp_NFA
 168+ 6DFE             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 168+ 6DF7             >
 168+ 6DF7 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 168+ 6DF8 43 4F 4E 54 >                db      "CONTEXT"               // name string in 7-bit ascii, but
 168+ 6DFC 45 58 54    >
 168+ 6DFF             >                org     $-1                 // alter last byte of Name just above to set
 168+ 6DFE D4          >                db      {b $} | END_BIT     // msb as name end
 168+ 6DFF             >
 168+ 6DFF EB 6D       >                dw      last_NFA            // Link to previous definition Name
 168+ 6E01             >CONTEXT:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 168+ 6E01 BE 6C       >                dw      User_Ptr ; ok        // for primitive definitions  actual code
 168+ 6E03             >                else
 168+ 6E03 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 168+ 6E03             >                endif           ; ok        // for other definitions it "points" the correct handler
 168+ 6E03             >                // Use of "; ok" to suppress "warning[fwdref]"
 168+ 6E03             >
 168+ 6E03             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 168+ 6E03 28          >                db      40
 169+ 6E04                              User_Def CURRENT    , "CURRENT"   , 42 // pointer to the vocabulary where search continues
 169+ 6E04             >                New_Def  CURRENT, "CURRENT", User_Ptr, is_normal
 169+ 6E04             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 169+ 6E04             >
 169+ 6E04             >                // dummy db directives used to calculate length of namec
 169+ 6E04 43 55 52 52 >                db      "CURRENT"
 169+ 6E08 45 4E 54    >
 169+ 6E0B             >len_NFA         defl    $ - temp_NFA
 169+ 6E0B             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 169+ 6E04             >
 169+ 6E04 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 169+ 6E05 43 55 52 52 >                db      "CURRENT"               // name string in 7-bit ascii, but
 169+ 6E09 45 4E 54    >
 169+ 6E0C             >                org     $-1                 // alter last byte of Name just above to set
 169+ 6E0B D4          >                db      {b $} | END_BIT     // msb as name end
 169+ 6E0C             >
 169+ 6E0C F7 6D       >                dw      last_NFA            // Link to previous definition Name
 169+ 6E0E             >CURRENT:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 169+ 6E0E BE 6C       >                dw      User_Ptr ; ok        // for primitive definitions  actual code
 169+ 6E10             >                else
 169+ 6E10 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 169+ 6E10             >                endif           ; ok        // for other definitions it "points" the correct handler
 169+ 6E10             >                // Use of "; ok" to suppress "warning[fwdref]"
 169+ 6E10             >
 169+ 6E10             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 169+ 6E10 2A          >                db      42
 170+ 6E11                              User_Def STATE      , "STATE"     , 44 // compilation status. 0 interpreting.
 170+ 6E11             >                New_Def  STATE, "STATE", User_Ptr, is_normal
 170+ 6E11             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 170+ 6E11             >
 170+ 6E11             >                // dummy db directives used to calculate length of namec
 170+ 6E11 53 54 41 54 >                db      "STATE"
 170+ 6E15 45          >
 170+ 6E16             >len_NFA         defl    $ - temp_NFA
 170+ 6E16             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 170+ 6E11             >
 170+ 6E11 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 170+ 6E12 53 54 41 54 >                db      "STATE"               // name string in 7-bit ascii, but
 170+ 6E16 45          >
 170+ 6E17             >                org     $-1                 // alter last byte of Name just above to set
 170+ 6E16 C5          >                db      {b $} | END_BIT     // msb as name end
 170+ 6E17             >
 170+ 6E17 04 6E       >                dw      last_NFA            // Link to previous definition Name
 170+ 6E19             >STATE:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 170+ 6E19 BE 6C       >                dw      User_Ptr ; ok        // for primitive definitions  actual code
 170+ 6E1B             >                else
 170+ 6E1B ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 170+ 6E1B             >                endif           ; ok        // for other definitions it "points" the correct handler
 170+ 6E1B             >                // Use of "; ok" to suppress "warning[fwdref]"
 170+ 6E1B             >
 170+ 6E1B             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 170+ 6E1B 2C          >                db      44
 171+ 6E1C                              User_Def BASE       , "BASE"      , 46 //
 171+ 6E1C             >                New_Def  BASE, "BASE", User_Ptr, is_normal
 171+ 6E1C             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 171+ 6E1C             >
 171+ 6E1C             >                // dummy db directives used to calculate length of namec
 171+ 6E1C 42 41 53 45 >                db      "BASE"
 171+ 6E20             >len_NFA         defl    $ - temp_NFA
 171+ 6E20             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 171+ 6E1C             >
 171+ 6E1C 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 171+ 6E1D 42 41 53 45 >                db      "BASE"               // name string in 7-bit ascii, but
 171+ 6E21             >                org     $-1                 // alter last byte of Name just above to set
 171+ 6E20 C5          >                db      {b $} | END_BIT     // msb as name end
 171+ 6E21             >
 171+ 6E21 11 6E       >                dw      last_NFA            // Link to previous definition Name
 171+ 6E23             >BASE:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 171+ 6E23 BE 6C       >                dw      User_Ptr ; ok        // for primitive definitions  actual code
 171+ 6E25             >                else
 171+ 6E25 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 171+ 6E25             >                endif           ; ok        // for other definitions it "points" the correct handler
 171+ 6E25             >                // Use of "; ok" to suppress "warning[fwdref]"
 171+ 6E25             >
 171+ 6E25             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 171+ 6E25 2E          >                db      46
 172+ 6E26                              User_Def DPL        , "DPL"       , 48 // number of digits after decimal point in conversion
 172+ 6E26             >                New_Def  DPL, "DPL", User_Ptr, is_normal
 172+ 6E26             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 172+ 6E26             >
 172+ 6E26             >                // dummy db directives used to calculate length of namec
 172+ 6E26 44 50 4C    >                db      "DPL"
 172+ 6E29             >len_NFA         defl    $ - temp_NFA
 172+ 6E29             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 172+ 6E26             >
 172+ 6E26 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 172+ 6E27 44 50 4C    >                db      "DPL"               // name string in 7-bit ascii, but
 172+ 6E2A             >                org     $-1                 // alter last byte of Name just above to set
 172+ 6E29 CC          >                db      {b $} | END_BIT     // msb as name end
 172+ 6E2A             >
 172+ 6E2A 1C 6E       >                dw      last_NFA            // Link to previous definition Name
 172+ 6E2C             >DPL:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 172+ 6E2C BE 6C       >                dw      User_Ptr ; ok        // for primitive definitions  actual code
 172+ 6E2E             >                else
 172+ 6E2E ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 172+ 6E2E             >                endif           ; ok        // for other definitions it "points" the correct handler
 172+ 6E2E             >                // Use of "; ok" to suppress "warning[fwdref]"
 172+ 6E2E             >
 172+ 6E2E             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 172+ 6E2E 30          >                db      48
 173+ 6E2F                              User_Def FLD        , "FLD"       , 50 // output field width
 173+ 6E2F             >                New_Def  FLD, "FLD", User_Ptr, is_normal
 173+ 6E2F             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 173+ 6E2F             >
 173+ 6E2F             >                // dummy db directives used to calculate length of namec
 173+ 6E2F 46 4C 44    >                db      "FLD"
 173+ 6E32             >len_NFA         defl    $ - temp_NFA
 173+ 6E32             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 173+ 6E2F             >
 173+ 6E2F 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 173+ 6E30 46 4C 44    >                db      "FLD"               // name string in 7-bit ascii, but
 173+ 6E33             >                org     $-1                 // alter last byte of Name just above to set
 173+ 6E32 C4          >                db      {b $} | END_BIT     // msb as name end
 173+ 6E33             >
 173+ 6E33 26 6E       >                dw      last_NFA            // Link to previous definition Name
 173+ 6E35             >FLD:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 173+ 6E35 BE 6C       >                dw      User_Ptr ; ok        // for primitive definitions  actual code
 173+ 6E37             >                else
 173+ 6E37 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 173+ 6E37             >                endif           ; ok        // for other definitions it "points" the correct handler
 173+ 6E37             >                // Use of "; ok" to suppress "warning[fwdref]"
 173+ 6E37             >
 173+ 6E37             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 173+ 6E37 32          >                db      50
 174+ 6E38                              User_Def CSP        , "CSP"       , 52 // used to temporary store Stack-Pointer value
 174+ 6E38             >                New_Def  CSP, "CSP", User_Ptr, is_normal
 174+ 6E38             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 174+ 6E38             >
 174+ 6E38             >                // dummy db directives used to calculate length of namec
 174+ 6E38 43 53 50    >                db      "CSP"
 174+ 6E3B             >len_NFA         defl    $ - temp_NFA
 174+ 6E3B             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 174+ 6E38             >
 174+ 6E38 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 174+ 6E39 43 53 50    >                db      "CSP"               // name string in 7-bit ascii, but
 174+ 6E3C             >                org     $-1                 // alter last byte of Name just above to set
 174+ 6E3B D0          >                db      {b $} | END_BIT     // msb as name end
 174+ 6E3C             >
 174+ 6E3C 2F 6E       >                dw      last_NFA            // Link to previous definition Name
 174+ 6E3E             >CSP:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 174+ 6E3E BE 6C       >                dw      User_Ptr ; ok        // for primitive definitions  actual code
 174+ 6E40             >                else
 174+ 6E40 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 174+ 6E40             >                endif           ; ok        // for other definitions it "points" the correct handler
 174+ 6E40             >                // Use of "; ok" to suppress "warning[fwdref]"
 174+ 6E40             >
 174+ 6E40             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 174+ 6E40 34          >                db      52
 175+ 6E41                              User_Def RSHARP     , "R#"        , 54 // location of editing cursor
 175+ 6E41             >                New_Def  RSHARP, "R#", User_Ptr, is_normal
 175+ 6E41             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 175+ 6E41             >
 175+ 6E41             >                // dummy db directives used to calculate length of namec
 175+ 6E41 52 23       >                db      "R#"
 175+ 6E43             >len_NFA         defl    $ - temp_NFA
 175+ 6E43             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 175+ 6E41             >
 175+ 6E41 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 175+ 6E42 52 23       >                db      "R#"               // name string in 7-bit ascii, but
 175+ 6E44             >                org     $-1                 // alter last byte of Name just above to set
 175+ 6E43 A3          >                db      {b $} | END_BIT     // msb as name end
 175+ 6E44             >
 175+ 6E44 38 6E       >                dw      last_NFA            // Link to previous definition Name
 175+ 6E46             >RSHARP:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 175+ 6E46 BE 6C       >                dw      User_Ptr ; ok        // for primitive definitions  actual code
 175+ 6E48             >                else
 175+ 6E48 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 175+ 6E48             >                endif           ; ok        // for other definitions it "points" the correct handler
 175+ 6E48             >                // Use of "; ok" to suppress "warning[fwdref]"
 175+ 6E48             >
 175+ 6E48             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 175+ 6E48 36          >                db      54
 176+ 6E49                              User_Def HLD        , "HLD"       , 56 // last character during a number conversion output
 176+ 6E49             >                New_Def  HLD, "HLD", User_Ptr, is_normal
 176+ 6E49             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 176+ 6E49             >
 176+ 6E49             >                // dummy db directives used to calculate length of namec
 176+ 6E49 48 4C 44    >                db      "HLD"
 176+ 6E4C             >len_NFA         defl    $ - temp_NFA
 176+ 6E4C             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 176+ 6E49             >
 176+ 6E49 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 176+ 6E4A 48 4C 44    >                db      "HLD"               // name string in 7-bit ascii, but
 176+ 6E4D             >                org     $-1                 // alter last byte of Name just above to set
 176+ 6E4C C4          >                db      {b $} | END_BIT     // msb as name end
 176+ 6E4D             >
 176+ 6E4D 41 6E       >                dw      last_NFA            // Link to previous definition Name
 176+ 6E4F             >HLD:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 176+ 6E4F BE 6C       >                dw      User_Ptr ; ok        // for primitive definitions  actual code
 176+ 6E51             >                else
 176+ 6E51 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 176+ 6E51             >                endif           ; ok        // for other definitions it "points" the correct handler
 176+ 6E51             >                // Use of "; ok" to suppress "warning[fwdref]"
 176+ 6E51             >
 176+ 6E51             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 176+ 6E51 38          >                db      56
 177+ 6E52                              User_Def USE        , "USE"       , 58 // address of last used block
 177+ 6E52             >                New_Def  USE, "USE", User_Ptr, is_normal
 177+ 6E52             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 177+ 6E52             >
 177+ 6E52             >                // dummy db directives used to calculate length of namec
 177+ 6E52 55 53 45    >                db      "USE"
 177+ 6E55             >len_NFA         defl    $ - temp_NFA
 177+ 6E55             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 177+ 6E52             >
 177+ 6E52 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 177+ 6E53 55 53 45    >                db      "USE"               // name string in 7-bit ascii, but
 177+ 6E56             >                org     $-1                 // alter last byte of Name just above to set
 177+ 6E55 C5          >                db      {b $} | END_BIT     // msb as name end
 177+ 6E56             >
 177+ 6E56 49 6E       >                dw      last_NFA            // Link to previous definition Name
 177+ 6E58             >USE:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 177+ 6E58 BE 6C       >                dw      User_Ptr ; ok        // for primitive definitions  actual code
 177+ 6E5A             >                else
 177+ 6E5A ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 177+ 6E5A             >                endif           ; ok        // for other definitions it "points" the correct handler
 177+ 6E5A             >                // Use of "; ok" to suppress "warning[fwdref]"
 177+ 6E5A             >
 177+ 6E5A             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 177+ 6E5A 3A          >                db      58
 178+ 6E5B                              User_Def PREV       , "PREV"      , 60 // address of previous used block
 178+ 6E5B             >                New_Def  PREV, "PREV", User_Ptr, is_normal
 178+ 6E5B             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 178+ 6E5B             >
 178+ 6E5B             >                // dummy db directives used to calculate length of namec
 178+ 6E5B 50 52 45 56 >                db      "PREV"
 178+ 6E5F             >len_NFA         defl    $ - temp_NFA
 178+ 6E5F             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 178+ 6E5B             >
 178+ 6E5B 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 178+ 6E5C 50 52 45 56 >                db      "PREV"               // name string in 7-bit ascii, but
 178+ 6E60             >                org     $-1                 // alter last byte of Name just above to set
 178+ 6E5F D6          >                db      {b $} | END_BIT     // msb as name end
 178+ 6E60             >
 178+ 6E60 52 6E       >                dw      last_NFA            // Link to previous definition Name
 178+ 6E62             >PREV:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 178+ 6E62 BE 6C       >                dw      User_Ptr ; ok        // for primitive definitions  actual code
 178+ 6E64             >                else
 178+ 6E64 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 178+ 6E64             >                endif           ; ok        // for other definitions it "points" the correct handler
 178+ 6E64             >                // Use of "; ok" to suppress "warning[fwdref]"
 178+ 6E64             >
 178+ 6E64             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 178+ 6E64 3C          >                db      60
 179+ 6E65                              User_Def LP         , "LP"        , 62 // line printer (not used)
 179+ 6E65             >                New_Def  LP, "LP", User_Ptr, is_normal
 179+ 6E65             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 179+ 6E65             >
 179+ 6E65             >                // dummy db directives used to calculate length of namec
 179+ 6E65 4C 50       >                db      "LP"
 179+ 6E67             >len_NFA         defl    $ - temp_NFA
 179+ 6E67             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 179+ 6E65             >
 179+ 6E65 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 179+ 6E66 4C 50       >                db      "LP"               // name string in 7-bit ascii, but
 179+ 6E68             >                org     $-1                 // alter last byte of Name just above to set
 179+ 6E67 D0          >                db      {b $} | END_BIT     // msb as name end
 179+ 6E68             >
 179+ 6E68 5B 6E       >                dw      last_NFA            // Link to previous definition Name
 179+ 6E6A             >LP:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 179+ 6E6A BE 6C       >                dw      User_Ptr ; ok        // for primitive definitions  actual code
 179+ 6E6C             >                else
 179+ 6E6C ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 179+ 6E6C             >                endif           ; ok        // for other definitions it "points" the correct handler
 179+ 6E6C             >                // Use of "; ok" to suppress "warning[fwdref]"
 179+ 6E6C             >
 179+ 6E6C             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 179+ 6E6C 3E          >                db      62
 180+ 6E6D                              User_Def PLACE      , "PLACE"     , 64 // number of digits after decimal point in output
 180+ 6E6D             >                New_Def  PLACE, "PLACE", User_Ptr, is_normal
 180+ 6E6D             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 180+ 6E6D             >
 180+ 6E6D             >                // dummy db directives used to calculate length of namec
 180+ 6E6D 50 4C 41 43 >                db      "PLACE"
 180+ 6E71 45          >
 180+ 6E72             >len_NFA         defl    $ - temp_NFA
 180+ 6E72             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 180+ 6E6D             >
 180+ 6E6D 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 180+ 6E6E 50 4C 41 43 >                db      "PLACE"               // name string in 7-bit ascii, but
 180+ 6E72 45          >
 180+ 6E73             >                org     $-1                 // alter last byte of Name just above to set
 180+ 6E72 C5          >                db      {b $} | END_BIT     // msb as name end
 180+ 6E73             >
 180+ 6E73 65 6E       >                dw      last_NFA            // Link to previous definition Name
 180+ 6E75             >PLACE:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 180+ 6E75 BE 6C       >                dw      User_Ptr ; ok        // for primitive definitions  actual code
 180+ 6E77             >                else
 180+ 6E77 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 180+ 6E77             >                endif           ; ok        // for other definitions it "points" the correct handler
 180+ 6E77             >                // Use of "; ok" to suppress "warning[fwdref]"
 180+ 6E77             >
 180+ 6E77             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 180+ 6E77 40          >                db      64
 181+ 6E78                              User_Def SOURCE_ID  , "SOURCE-ID" , 66 // data-stream number in INCLUDE and LOAD-
 181+ 6E78             >                New_Def  SOURCE_ID, "SOURCE-ID", User_Ptr, is_normal
 181+ 6E78             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 181+ 6E78             >
 181+ 6E78             >                // dummy db directives used to calculate length of namec
 181+ 6E78 53 4F 55 52 >                db      "SOURCE-ID"
 181+ 6E7C 43 45 2D 49 >
 181+ 6E80 44          >
 181+ 6E81             >len_NFA         defl    $ - temp_NFA
 181+ 6E81             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 181+ 6E78             >
 181+ 6E78 89          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 181+ 6E79 53 4F 55 52 >                db      "SOURCE-ID"               // name string in 7-bit ascii, but
 181+ 6E7D 43 45 2D 49 >
 181+ 6E81 44          >
 181+ 6E82             >                org     $-1                 // alter last byte of Name just above to set
 181+ 6E81 C4          >                db      {b $} | END_BIT     // msb as name end
 181+ 6E82             >
 181+ 6E82 6D 6E       >                dw      last_NFA            // Link to previous definition Name
 181+ 6E84             >SOURCE_ID:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 181+ 6E84 BE 6C       >                dw      User_Ptr ; ok        // for primitive definitions  actual code
 181+ 6E86             >                else
 181+ 6E86 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 181+ 6E86             >                endif           ; ok        // for other definitions it "points" the correct handler
 181+ 6E86             >                // Use of "; ok" to suppress "warning[fwdref]"
 181+ 6E86             >
 181+ 6E86             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 181+ 6E86 42          >                db      66
 182+ 6E87                              User_Def SPAN       , "SPAN"      , 68 // number of character of last EXPECT
 182+ 6E87             >                New_Def  SPAN, "SPAN", User_Ptr, is_normal
 182+ 6E87             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 182+ 6E87             >
 182+ 6E87             >                // dummy db directives used to calculate length of namec
 182+ 6E87 53 50 41 4E >                db      "SPAN"
 182+ 6E8B             >len_NFA         defl    $ - temp_NFA
 182+ 6E8B             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 182+ 6E87             >
 182+ 6E87 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 182+ 6E88 53 50 41 4E >                db      "SPAN"               // name string in 7-bit ascii, but
 182+ 6E8C             >                org     $-1                 // alter last byte of Name just above to set
 182+ 6E8B CE          >                db      {b $} | END_BIT     // msb as name end
 182+ 6E8C             >
 182+ 6E8C 78 6E       >                dw      last_NFA            // Link to previous definition Name
 182+ 6E8E             >SPAN:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 182+ 6E8E BE 6C       >                dw      User_Ptr ; ok        // for primitive definitions  actual code
 182+ 6E90             >                else
 182+ 6E90 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 182+ 6E90             >                endif           ; ok        // for other definitions it "points" the correct handler
 182+ 6E90             >                // Use of "; ok" to suppress "warning[fwdref]"
 182+ 6E90             >
 182+ 6E90             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 182+ 6E90 44          >                db      68
 183+ 6E91                              User_Def HANDLER    , "HANDLER"   , 70 // Used by THROW-CATCH
 183+ 6E91             >                New_Def  HANDLER, "HANDLER", User_Ptr, is_normal
 183+ 6E91             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 183+ 6E91             >
 183+ 6E91             >                // dummy db directives used to calculate length of namec
 183+ 6E91 48 41 4E 44 >                db      "HANDLER"
 183+ 6E95 4C 45 52    >
 183+ 6E98             >len_NFA         defl    $ - temp_NFA
 183+ 6E98             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 183+ 6E91             >
 183+ 6E91 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 183+ 6E92 48 41 4E 44 >                db      "HANDLER"               // name string in 7-bit ascii, but
 183+ 6E96 4C 45 52    >
 183+ 6E99             >                org     $-1                 // alter last byte of Name just above to set
 183+ 6E98 D2          >                db      {b $} | END_BIT     // msb as name end
 183+ 6E99             >
 183+ 6E99 87 6E       >                dw      last_NFA            // Link to previous definition Name
 183+ 6E9B             >HANDLER:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 183+ 6E9B BE 6C       >                dw      User_Ptr ; ok        // for primitive definitions  actual code
 183+ 6E9D             >                else
 183+ 6E9D ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 183+ 6E9D             >                endif           ; ok        // for other definitions it "points" the correct handler
 183+ 6E9D             >                // Use of "; ok" to suppress "warning[fwdref]"
 183+ 6E9D             >
 183+ 6E9D             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 183+ 6E9D 46          >                db      70
 184+ 6E9E                              User_Def HP         , "HP"        , 72 // heap-pointer address
 184+ 6E9E             >                New_Def  HP, "HP", User_Ptr, is_normal
 184+ 6E9E             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 184+ 6E9E             >
 184+ 6E9E             >                // dummy db directives used to calculate length of namec
 184+ 6E9E 48 50       >                db      "HP"
 184+ 6EA0             >len_NFA         defl    $ - temp_NFA
 184+ 6EA0             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 184+ 6E9E             >
 184+ 6E9E 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 184+ 6E9F 48 50       >                db      "HP"               // name string in 7-bit ascii, but
 184+ 6EA1             >                org     $-1                 // alter last byte of Name just above to set
 184+ 6EA0 D0          >                db      {b $} | END_BIT     // msb as name end
 184+ 6EA1             >
 184+ 6EA1 91 6E       >                dw      last_NFA            // Link to previous definition Name
 184+ 6EA3             >HP:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 184+ 6EA3 BE 6C       >                dw      User_Ptr ; ok        // for primitive definitions  actual code
 184+ 6EA5             >                else
 184+ 6EA5 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 184+ 6EA5             >                endif           ; ok        // for other definitions it "points" the correct handler
 184+ 6EA5             >                // Use of "; ok" to suppress "warning[fwdref]"
 184+ 6EA5             >
 184+ 6EA5             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 184+ 6EA5 48          >                db      72
 185+ 6EA6
 186+ 6EA6              //  ______________________________________________________________________
 187+ 6EA6              //
 188+ 6EA6              // here         -- a
 189+ 6EA6                              Colon_Def HERE, "HERE", is_normal
 189+ 6EA6             >                New_Def  HERE, "HERE", Enter_Ptr, is_normal ; ok
 189+ 6EA6             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 189+ 6EA6             >
 189+ 6EA6             >                // dummy db directives used to calculate length of namec
 189+ 6EA6 48 45 52 45 >                db      "HERE"
 189+ 6EAA             >len_NFA         defl    $ - temp_NFA
 189+ 6EAA             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 189+ 6EA6             >
 189+ 6EA6 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 189+ 6EA7 48 45 52 45 >                db      "HERE"               // name string in 7-bit ascii, but
 189+ 6EAB             >                org     $-1                 // alter last byte of Name just above to set
 189+ 6EAA C5          >                db      {b $} | END_BIT     // msb as name end
 189+ 6EAB             >
 189+ 6EAB 9E 6E       >                dw      last_NFA            // Link to previous definition Name
 189+ 6EAD             >HERE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 189+ 6EAD 53 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 189+ 6EAF             >                else
 189+ 6EAF ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 189+ 6EAF             >                endif           ; ok        // for other definitions it "points" the correct handler
 189+ 6EAF             >                // Use of "; ok" to suppress "warning[fwdref]"
 189+ 6EAF             >
 189+ 6EAF             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 190+ 6EAF 8C 6D 68 6B                  dw      DP, FETCH               // dp @
 191+ 6EB3 4F 69                        dw      EXIT                    // ;
 192+ 6EB5
 193+ 6EB5              //  ______________________________________________________________________
 194+ 6EB5              //
 195+ 6EB5              // allot        n --
 196+ 6EB5                              Colon_Def ALLOT, "ALLOT", is_normal
 196+ 6EB5             >                New_Def  ALLOT, "ALLOT", Enter_Ptr, is_normal ; ok
 196+ 6EB5             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 196+ 6EB5             >
 196+ 6EB5             >                // dummy db directives used to calculate length of namec
 196+ 6EB5 41 4C 4C 4F >                db      "ALLOT"
 196+ 6EB9 54          >
 196+ 6EBA             >len_NFA         defl    $ - temp_NFA
 196+ 6EBA             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 196+ 6EB5             >
 196+ 6EB5 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 196+ 6EB6 41 4C 4C 4F >                db      "ALLOT"               // name string in 7-bit ascii, but
 196+ 6EBA 54          >
 196+ 6EBB             >                org     $-1                 // alter last byte of Name just above to set
 196+ 6EBA D4          >                db      {b $} | END_BIT     // msb as name end
 196+ 6EBB             >
 196+ 6EBB A6 6E       >                dw      last_NFA            // Link to previous definition Name
 196+ 6EBD             >ALLOT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 196+ 6EBD 53 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 196+ 6EBF             >                else
 196+ 6EBF ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 196+ 6EBF             >                endif           ; ok        // for other definitions it "points" the correct handler
 196+ 6EBF             >                // Use of "; ok" to suppress "warning[fwdref]"
 196+ 6EBF             >
 196+ 6EBF             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 197+ 6EBF 8C 6D 45 6B                  dw      DP,  PLUSSTORE          // dp +!
 198+ 6EC3 4F 69                        dw      EXIT                    // ;
 199+ 6EC5
 200+ 6EC5              //  ______________________________________________________________________
 201+ 6EC5              //
 202+ 6EC5              // comma        n --
 203+ 6EC5                              Colon_Def COMMA, ",", is_normal
 203+ 6EC5             >                New_Def  COMMA, ",", Enter_Ptr, is_normal ; ok
 203+ 6EC5             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 203+ 6EC5             >
 203+ 6EC5             >                // dummy db directives used to calculate length of namec
 203+ 6EC5 2C          >                db      ","
 203+ 6EC6             >len_NFA         defl    $ - temp_NFA
 203+ 6EC6             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 203+ 6EC5             >
 203+ 6EC5 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 203+ 6EC6 2C          >                db      ","               // name string in 7-bit ascii, but
 203+ 6EC7             >                org     $-1                 // alter last byte of Name just above to set
 203+ 6EC6 AC          >                db      {b $} | END_BIT     // msb as name end
 203+ 6EC7             >
 203+ 6EC7 B5 6E       >                dw      last_NFA            // Link to previous definition Name
 203+ 6EC9             >COMMA:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 203+ 6EC9 53 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 203+ 6ECB             >                else
 203+ 6ECB ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 203+ 6ECB             >                endif           ; ok        // for other definitions it "points" the correct handler
 203+ 6ECB             >                // Use of "; ok" to suppress "warning[fwdref]"
 203+ 6ECB             >
 203+ 6ECB             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 204+ 6ECB AD 6E 75 6B                  dw      HERE, STORE             // here !
 205+ 6ECF DE 6C BD 6E                  dw      TWO, ALLOT              // 2 allot
 206+ 6ED3 4F 69                        dw      EXIT                    // ;
 207+ 6ED5
 208+ 6ED5              //  ______________________________________________________________________
 209+ 6ED5              //
 210+ 6ED5              // ccomma       c --
 211+ 6ED5                              Colon_Def CCOMMA, "C,", is_normal
 211+ 6ED5             >                New_Def  CCOMMA, "C,", Enter_Ptr, is_normal ; ok
 211+ 6ED5             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 211+ 6ED5             >
 211+ 6ED5             >                // dummy db directives used to calculate length of namec
 211+ 6ED5 43 2C       >                db      "C,"
 211+ 6ED7             >len_NFA         defl    $ - temp_NFA
 211+ 6ED7             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 211+ 6ED5             >
 211+ 6ED5 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 211+ 6ED6 43 2C       >                db      "C,"               // name string in 7-bit ascii, but
 211+ 6ED8             >                org     $-1                 // alter last byte of Name just above to set
 211+ 6ED7 AC          >                db      {b $} | END_BIT     // msb as name end
 211+ 6ED8             >
 211+ 6ED8 C5 6E       >                dw      last_NFA            // Link to previous definition Name
 211+ 6EDA             >CCOMMA:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 211+ 6EDA 53 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 211+ 6EDC             >                else
 211+ 6EDC ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 211+ 6EDC             >                endif           ; ok        // for other definitions it "points" the correct handler
 211+ 6EDC             >                // Use of "; ok" to suppress "warning[fwdref]"
 211+ 6EDC             >
 211+ 6EDC             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 212+ 6EDC AD 6E 91 6B                  dw      HERE, CSTORE            // here c!
 213+ 6EE0 D6 6C BD 6E                  dw      ONE, ALLOT              // 1 allot
 214+ 6EE4 4F 69                        dw      EXIT                    // ;
 215+ 6EE6
 216+ 6EE6              //  ______________________________________________________________________
 217+ 6EE6              //
 218+ 6EE6              // s>d          n -- d
 219+ 6EE6              // converts a single precision integer in a double precision
 220+ 6EE6                              New_Def S_TO_D, "S>D", is_code, is_normal
 220+ 6EE6             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 220+ 6EE6             >
 220+ 6EE6             >                // dummy db directives used to calculate length of namec
 220+ 6EE6 53 3E 44    >                db      "S>D"
 220+ 6EE9             >len_NFA         defl    $ - temp_NFA
 220+ 6EE9             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 220+ 6EE6             >
 220+ 6EE6 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 220+ 6EE7 53 3E 44    >                db      "S>D"               // name string in 7-bit ascii, but
 220+ 6EEA             >                org     $-1                 // alter last byte of Name just above to set
 220+ 6EE9 C4          >                db      {b $} | END_BIT     // msb as name end
 220+ 6EEA             >
 220+ 6EEA D5 6E       >                dw      last_NFA            // Link to previous definition Name
 220+ 6EEC             >S_TO_D:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 220+ 6EEC ~           >                dw      runcode ; ok        // for primitive definitions  actual code
 220+ 6EEC             >                else
 220+ 6EEC EE 6E       >                dw      $ + 2   ; ok        // is pointed by CFA
 220+ 6EEE             >                endif           ; ok        // for other definitions it "points" the correct handler
 220+ 6EEE             >                // Use of "; ok" to suppress "warning[fwdref]"
 220+ 6EEE             >
 220+ 6EEE             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 221+ 6EEE D1                           pop     de
 222+ 6EEF 21 00 00                     ld      hl, 0
 223+ 6EF2 7A                           ld      a, d
 224+ 6EF3 E6 80                        and     $80
 225+ 6EF5 28 01                        jr      z, S_to_D_Skip
 226+ 6EF7 2B                           dec     hl                  // $FFFF
 227+ 6EF8              S_to_D_Skip:
 228+ 6EF8 D5                           push    de
 229+ 6EF9 E5                           push    hl
 230+ 6EFA                              next
 230+ 6EFA DD E9       >                jp      (ix)
 231+ 6EFC
 232+ 6EFC              //  ______________________________________________________________________
 233+ 6EFC              //
 234+ 6EFC              // -            n1 n2 -- n3
 235+ 6EFC              // subtraction
 236+ 6EFC                              New_Def SUBTRACT, "-", is_code, is_normal
 236+ 6EFC             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 236+ 6EFC             >
 236+ 6EFC             >                // dummy db directives used to calculate length of namec
 236+ 6EFC 2D          >                db      "-"
 236+ 6EFD             >len_NFA         defl    $ - temp_NFA
 236+ 6EFD             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 236+ 6EFC             >
 236+ 6EFC 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 236+ 6EFD 2D          >                db      "-"               // name string in 7-bit ascii, but
 236+ 6EFE             >                org     $-1                 // alter last byte of Name just above to set
 236+ 6EFD AD          >                db      {b $} | END_BIT     // msb as name end
 236+ 6EFE             >
 236+ 6EFE E6 6E       >                dw      last_NFA            // Link to previous definition Name
 236+ 6F00             >SUBTRACT:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 236+ 6F00 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
 236+ 6F00             >                else
 236+ 6F00 02 6F       >                dw      $ + 2   ; ok        // is pointed by CFA
 236+ 6F02             >                endif           ; ok        // for other definitions it "points" the correct handler
 236+ 6F02             >                // Use of "; ok" to suppress "warning[fwdref]"
 236+ 6F02             >
 236+ 6F02             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 237+ 6F02 D1                           pop     de
 238+ 6F03 E1                           pop     hl
 239+ 6F04 A7                           and     a
 240+ 6F05 ED 52                        sbc     hl, de
 241+ 6F07
 242+ 6F07                              psh1
 242+ 6F07 E5          >                push    hl
 242+ 6F08 DD E9       >                jp      (ix)
 243+ 6F0A
 244+ 6F0A              //  ______________________________________________________________________
 245+ 6F0A              //
 246+ 6F0A              // =            n1 n2 -- n3
 247+ 6F0A              // equals
 248+ 6F0A                              Colon_Def EQUALS, "=", is_normal
 248+ 6F0A             >                New_Def  EQUALS, "=", Enter_Ptr, is_normal ; ok
 248+ 6F0A             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 248+ 6F0A             >
 248+ 6F0A             >                // dummy db directives used to calculate length of namec
 248+ 6F0A 3D          >                db      "="
 248+ 6F0B             >len_NFA         defl    $ - temp_NFA
 248+ 6F0B             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 248+ 6F0A             >
 248+ 6F0A 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 248+ 6F0B 3D          >                db      "="               // name string in 7-bit ascii, but
 248+ 6F0C             >                org     $-1                 // alter last byte of Name just above to set
 248+ 6F0B BD          >                db      {b $} | END_BIT     // msb as name end
 248+ 6F0C             >
 248+ 6F0C FC 6E       >                dw      last_NFA            // Link to previous definition Name
 248+ 6F0E             >EQUALS:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 248+ 6F0E 53 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 248+ 6F10             >                else
 248+ 6F10 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 248+ 6F10             >                endif           ; ok        // for other definitions it "points" the correct handler
 248+ 6F10             >                // Use of "; ok" to suppress "warning[fwdref]"
 248+ 6F10             >
 248+ 6F10             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 249+ 6F10 00 6F B2 69                  dw      SUBTRACT, ZEQUAL        // - 0=
 250+ 6F14 4F 69                        dw      EXIT                    // ;
 251+ 6F16
 252+ 6F16              //  ______________________________________________________________________
 253+ 6F16              //
 254+ 6F16              // u<           u1 u2 -- u3
 255+ 6F16              // unsigned less-than
 256+ 6F16                              New_Def ULESS, "U<", is_code, is_normal
 256+ 6F16             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 256+ 6F16             >
 256+ 6F16             >                // dummy db directives used to calculate length of namec
 256+ 6F16 55 3C       >                db      "U<"
 256+ 6F18             >len_NFA         defl    $ - temp_NFA
 256+ 6F18             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 256+ 6F16             >
 256+ 6F16 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 256+ 6F17 55 3C       >                db      "U<"               // name string in 7-bit ascii, but
 256+ 6F19             >                org     $-1                 // alter last byte of Name just above to set
 256+ 6F18 BC          >                db      {b $} | END_BIT     // msb as name end
 256+ 6F19             >
 256+ 6F19 0A 6F       >                dw      last_NFA            // Link to previous definition Name
 256+ 6F1B             >ULESS:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 256+ 6F1B ~           >                dw      runcode ; ok        // for primitive definitions  actual code
 256+ 6F1B             >                else
 256+ 6F1B 1D 6F       >                dw      $ + 2   ; ok        // is pointed by CFA
 256+ 6F1D             >                endif           ; ok        // for other definitions it "points" the correct handler
 256+ 6F1D             >                // Use of "; ok" to suppress "warning[fwdref]"
 256+ 6F1D             >
 256+ 6F1D             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 257+ 6F1D D1                           pop     de
 258+ 6F1E E1                           pop     hl
 259+ 6F1F A7                           and     a
 260+ 6F20 ED 52                        sbc     hl, de
 261+ 6F22 21 FF FF                     ld      hl, -1
 262+ 6F25 38 01                        jr      c, ULess_Skip
 263+ 6F27 23                               inc     hl
 264+ 6F28              ULess_Skip:
 265+ 6F28
 266+ 6F28                              psh1
 266+ 6F28 E5          >                push    hl
 266+ 6F29 DD E9       >                jp      (ix)
 267+ 6F2B
 268+ 6F2B              //  ______________________________________________________________________
 269+ 6F2B              //
 270+ 6F2B              // <           n1 n2 -- n3
 271+ 6F2B              // less-than
 272+ 6F2B                              New_Def LESS, "<", is_code, is_normal
 272+ 6F2B             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 272+ 6F2B             >
 272+ 6F2B             >                // dummy db directives used to calculate length of namec
 272+ 6F2B 3C          >                db      "<"
 272+ 6F2C             >len_NFA         defl    $ - temp_NFA
 272+ 6F2C             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 272+ 6F2B             >
 272+ 6F2B 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 272+ 6F2C 3C          >                db      "<"               // name string in 7-bit ascii, but
 272+ 6F2D             >                org     $-1                 // alter last byte of Name just above to set
 272+ 6F2C BC          >                db      {b $} | END_BIT     // msb as name end
 272+ 6F2D             >
 272+ 6F2D 16 6F       >                dw      last_NFA            // Link to previous definition Name
 272+ 6F2F             >LESS:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 272+ 6F2F ~           >                dw      runcode ; ok        // for primitive definitions  actual code
 272+ 6F2F             >                else
 272+ 6F2F 31 6F       >                dw      $ + 2   ; ok        // is pointed by CFA
 272+ 6F31             >                endif           ; ok        // for other definitions it "points" the correct handler
 272+ 6F31             >                // Use of "; ok" to suppress "warning[fwdref]"
 272+ 6F31             >
 272+ 6F31             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 273+ 6F31 D1                           pop     de
 274+ 6F32 E1                           pop     hl
 275+ 6F33 7C                           ld      a, h
 276+ 6F34 EE 80                        xor     $80
 277+ 6F36 67                           ld      h, a
 278+ 6F37 7A                           ld      a, d
 279+ 6F38 EE 80                        xor     $80
 280+ 6F3A 57                           ld      d, a
 281+ 6F3B A7                           and     a
 282+ 6F3C ED 52                        sbc     hl, de
 283+ 6F3E 21 FF FF                     ld      hl, -1
 284+ 6F41 38 01                        jr      c, Less_Skip
 285+ 6F43 23                               inc     hl
 286+ 6F44              Less_Skip:
 287+ 6F44
 288+ 6F44                              psh1
 288+ 6F44 E5          >                push    hl
 288+ 6F45 DD E9       >                jp      (ix)
 289+ 6F47
 290+ 6F47              //  ______________________________________________________________________
 291+ 6F47              //
 292+ 6F47              // >            n1 n2 -- n3
 293+ 6F47              // greater than
 294+ 6F47                              Colon_Def GREATER, ">", is_normal
 294+ 6F47             >                New_Def  GREATER, ">", Enter_Ptr, is_normal ; ok
 294+ 6F47             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 294+ 6F47             >
 294+ 6F47             >                // dummy db directives used to calculate length of namec
 294+ 6F47 3E          >                db      ">"
 294+ 6F48             >len_NFA         defl    $ - temp_NFA
 294+ 6F48             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 294+ 6F47             >
 294+ 6F47 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 294+ 6F48 3E          >                db      ">"               // name string in 7-bit ascii, but
 294+ 6F49             >                org     $-1                 // alter last byte of Name just above to set
 294+ 6F48 BE          >                db      {b $} | END_BIT     // msb as name end
 294+ 6F49             >
 294+ 6F49 2B 6F       >                dw      last_NFA            // Link to previous definition Name
 294+ 6F4B             >GREATER:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 294+ 6F4B 53 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 294+ 6F4D             >                else
 294+ 6F4D ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 294+ 6F4D             >                endif           ; ok        // for other definitions it "points" the correct handler
 294+ 6F4D             >                // Use of "; ok" to suppress "warning[fwdref]"
 294+ 6F4D             >
 294+ 6F4D             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 295+ 6F4D C8 6A 2F 6F                  dw      SWAP, LESS              // swap <
 296+ 6F51 4F 69                        dw      EXIT                    // ;
 297+ 6F53              //  ______________________________________________________________________
 298+ 6F53              //
 299+ 6F53              // min          n1 n2 -- n3
 300+ 6F53              // minimum between n1 and n2
 301+ 6F53                              Colon_Def MIN, "MIN" , is_normal
 301+ 6F53             >                New_Def  MIN, "MIN", Enter_Ptr, is_normal ; ok
 301+ 6F53             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 301+ 6F53             >
 301+ 6F53             >                // dummy db directives used to calculate length of namec
 301+ 6F53 4D 49 4E    >                db      "MIN"
 301+ 6F56             >len_NFA         defl    $ - temp_NFA
 301+ 6F56             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 301+ 6F53             >
 301+ 6F53 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 301+ 6F54 4D 49 4E    >                db      "MIN"               // name string in 7-bit ascii, but
 301+ 6F57             >                org     $-1                 // alter last byte of Name just above to set
 301+ 6F56 CE          >                db      {b $} | END_BIT     // msb as name end
 301+ 6F57             >
 301+ 6F57 47 6F       >                dw      last_NFA            // Link to previous definition Name
 301+ 6F59             >MIN:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 301+ 6F59 53 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 301+ 6F5B             >                else
 301+ 6F5B ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 301+ 6F5B             >                endif           ; ok        // for other definitions it "points" the correct handler
 301+ 6F5B             >                // Use of "; ok" to suppress "warning[fwdref]"
 301+ 6F5B             >
 301+ 6F5B             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 302+ 6F5B 36 6B                        dw      TWO_DUP                 // 2dup
 303+ 6F5D 4B 6F                        dw      GREATER                 // >
 304+ 6F5F E3 63                        dw      ZBRANCH
 305+ 6F61 04 00                        dw      Min_Skip - $   // if
 306+ 6F63 C8 6A                        dw          SWAP                //      swap
 307+ 6F65              Min_Skip:                                       // endif
 308+ 6F65 A0 6A                        dw      DROP                    // drop
 309+ 6F67 4F 69                        dw      EXIT                    // ;
 310+ 6F69
 311+ 6F69              //  ______________________________________________________________________
 312+ 6F69              //
 313+ 6F69              // max          n1 n2 -- n3
 314+ 6F69              // maximum between n1 and n2
 315+ 6F69                              Colon_Def MAX, "MAX", is_normal
 315+ 6F69             >                New_Def  MAX, "MAX", Enter_Ptr, is_normal ; ok
 315+ 6F69             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 315+ 6F69             >
 315+ 6F69             >                // dummy db directives used to calculate length of namec
 315+ 6F69 4D 41 58    >                db      "MAX"
 315+ 6F6C             >len_NFA         defl    $ - temp_NFA
 315+ 6F6C             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 315+ 6F69             >
 315+ 6F69 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 315+ 6F6A 4D 41 58    >                db      "MAX"               // name string in 7-bit ascii, but
 315+ 6F6D             >                org     $-1                 // alter last byte of Name just above to set
 315+ 6F6C D8          >                db      {b $} | END_BIT     // msb as name end
 315+ 6F6D             >
 315+ 6F6D 53 6F       >                dw      last_NFA            // Link to previous definition Name
 315+ 6F6F             >MAX:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 315+ 6F6F 53 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 315+ 6F71             >                else
 315+ 6F71 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 315+ 6F71             >                endif           ; ok        // for other definitions it "points" the correct handler
 315+ 6F71             >                // Use of "; ok" to suppress "warning[fwdref]"
 315+ 6F71             >
 315+ 6F71             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 316+ 6F71 36 6B                        dw      TWO_DUP                 // 2dup
 317+ 6F73 2F 6F                        dw      LESS                    // <
 318+ 6F75 E3 63                        dw      ZBRANCH
 319+ 6F77 04 00                        dw      Max_Skip - $   // if
 320+ 6F79 C8 6A                        dw          SWAP                //      swap
 321+ 6F7B              Max_Skip:                                       // endif
 322+ 6F7B A0 6A                        dw      DROP                    // drop
 323+ 6F7D 4F 69                        dw      EXIT                    // ;
 324+ 6F7F
 325+ 6F7F              //  ______________________________________________________________________
 326+ 6F7F              //
 327+ 6F7F              // ?dup         n -- 0 | n n
 328+ 6F7F              // duplicate if not zero
 329+ 6F7F                              New_Def QDUP, "?DUP", is_code, is_normal
 329+ 6F7F             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 329+ 6F7F             >
 329+ 6F7F             >                // dummy db directives used to calculate length of namec
 329+ 6F7F 3F 44 55 50 >                db      "?DUP"
 329+ 6F83             >len_NFA         defl    $ - temp_NFA
 329+ 6F83             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 329+ 6F7F             >
 329+ 6F7F 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 329+ 6F80 3F 44 55 50 >                db      "?DUP"               // name string in 7-bit ascii, but
 329+ 6F84             >                org     $-1                 // alter last byte of Name just above to set
 329+ 6F83 D0          >                db      {b $} | END_BIT     // msb as name end
 329+ 6F84             >
 329+ 6F84 69 6F       >                dw      last_NFA            // Link to previous definition Name
 329+ 6F86             >QDUP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 329+ 6F86 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
 329+ 6F86             >                else
 329+ 6F86 88 6F       >                dw      $ + 2   ; ok        // is pointed by CFA
 329+ 6F88             >                endif           ; ok        // for other definitions it "points" the correct handler
 329+ 6F88             >                // Use of "; ok" to suppress "warning[fwdref]"
 329+ 6F88             >
 329+ 6F88             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 330+ 6F88              QDup_Ptr:
 331+ 6F88 E1                           pop     hl
 332+ 6F89 7C                           ld      a, h
 333+ 6F8A B5                           or      l
 334+ 6F8B 28 01                        jr      z, QDup_Skip
 335+ 6F8D E5                               push    hl
 336+ 6F8E              QDup_Skip:
 337+ 6F8E                              psh1
 337+ 6F8E E5          >                push    hl
 337+ 6F8F DD E9       >                jp      (ix)
 338+ 6F91
 339+ 6F91              //  ______________________________________________________________________
 340+ 6F91              //
 341+ 6F91              // -dup         n -- 0 | n n
 342+ 6F91              // duplicate if not zero
 343+ 6F91                              New_Def LDUP, "-DUP", QDup_Ptr, is_normal
 343+ 6F91             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 343+ 6F91             >
 343+ 6F91             >                // dummy db directives used to calculate length of namec
 343+ 6F91 2D 44 55 50 >                db      "-DUP"
 343+ 6F95             >len_NFA         defl    $ - temp_NFA
 343+ 6F95             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 343+ 6F91             >
 343+ 6F91 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 343+ 6F92 2D 44 55 50 >                db      "-DUP"               // name string in 7-bit ascii, but
 343+ 6F96             >                org     $-1                 // alter last byte of Name just above to set
 343+ 6F95 D0          >                db      {b $} | END_BIT     // msb as name end
 343+ 6F96             >
 343+ 6F96 7F 6F       >                dw      last_NFA            // Link to previous definition Name
 343+ 6F98             >LDUP:          if QDup_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 343+ 6F98 88 6F       >                dw      QDup_Ptr ; ok        // for primitive definitions  actual code
 343+ 6F9A             >                else
 343+ 6F9A ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 343+ 6F9A             >                endif           ; ok        // for other definitions it "points" the correct handler
 343+ 6F9A             >                // Use of "; ok" to suppress "warning[fwdref]"
 343+ 6F9A             >
 343+ 6F9A             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 344+ 6F9A
 345+ 6F9A              //  ______________________________________________________________________
 346+ 6F9A              //
 347+ 6F9A              // emit         c --
 348+ 6F9A                              Colon_Def EMIT, "EMIT", is_normal
 348+ 6F9A             >                New_Def  EMIT, "EMIT", Enter_Ptr, is_normal ; ok
 348+ 6F9A             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 348+ 6F9A             >
 348+ 6F9A             >                // dummy db directives used to calculate length of namec
 348+ 6F9A 45 4D 49 54 >                db      "EMIT"
 348+ 6F9E             >len_NFA         defl    $ - temp_NFA
 348+ 6F9E             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 348+ 6F9A             >
 348+ 6F9A 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 348+ 6F9B 45 4D 49 54 >                db      "EMIT"               // name string in 7-bit ascii, but
 348+ 6F9F             >                org     $-1                 // alter last byte of Name just above to set
 348+ 6F9E D4          >                db      {b $} | END_BIT     // msb as name end
 348+ 6F9F             >
 348+ 6F9F 91 6F       >                dw      last_NFA            // Link to previous definition Name
 348+ 6FA1             >EMIT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 348+ 6FA1 53 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 348+ 6FA3             >                else
 348+ 6FA3 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 348+ 6FA3             >                endif           ; ok        // for other definitions it "points" the correct handler
 348+ 6FA3             >                // Use of "; ok" to suppress "warning[fwdref]"
 348+ 6FA3             >
 348+ 6FA3             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 349+ 6FA3 2D 66                        dw      C_EMIT                      // (?emit)
 350+ 6FA5 86 6F                        dw      QDUP                        // ?dup
 351+ 6FA7                                                                  // if
 352+ 6FA7 E3 63                        dw      ZBRANCH
 353+ 6FA9 0A 00                        dw      Emit_Skip - $
 354+ 6FAB F9 65                        dw          EMITC                   //      emitc
 355+ 6FAD D6 6C                        dw          ONE                     //      1
 356+ 6FAF DF 6D 45 6B                  dw          OUT, PLUSSTORE        //      out +!
 357+ 6FB3              Emit_Skip:                                          // endif
 358+ 6FB3 4F 69                        dw      EXIT                        // ;
 359+ 6FB5
 360+ 6FB5              //  ______________________________________________________________________
 361+ 6FB5              //
 362+ 6FB5              // space        --
 363+ 6FB5                              Colon_Def SPACE, "SPACE", is_normal
 363+ 6FB5             >                New_Def  SPACE, "SPACE", Enter_Ptr, is_normal ; ok
 363+ 6FB5             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 363+ 6FB5             >
 363+ 6FB5             >                // dummy db directives used to calculate length of namec
 363+ 6FB5 53 50 41 43 >                db      "SPACE"
 363+ 6FB9 45          >
 363+ 6FBA             >len_NFA         defl    $ - temp_NFA
 363+ 6FBA             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 363+ 6FB5             >
 363+ 6FB5 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 363+ 6FB6 53 50 41 43 >                db      "SPACE"               // name string in 7-bit ascii, but
 363+ 6FBA 45          >
 363+ 6FBB             >                org     $-1                 // alter last byte of Name just above to set
 363+ 6FBA C5          >                db      {b $} | END_BIT     // msb as name end
 363+ 6FBB             >
 363+ 6FBB 9A 6F       >                dw      last_NFA            // Link to previous definition Name
 363+ 6FBD             >SPACE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 363+ 6FBD 53 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 363+ 6FBF             >                else
 363+ 6FBF ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 363+ 6FBF             >                endif           ; ok        // for other definitions it "points" the correct handler
 363+ 6FBF             >                // Use of "; ok" to suppress "warning[fwdref]"
 363+ 6FBF             >
 363+ 6FBF             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 364+ 6FBF F8 6C A1 6F                  dw      BL, EMIT                // bl emit
 365+ 6FC3 4F 69                        dw      EXIT                    // ;
 366+ 6FC5
 367+ 6FC5              //  ______________________________________________________________________
 368+ 6FC5              //
 369+ 6FC5              // traverse     a n -- a
 370+ 6FC5              // A dictionary entry is structured as follows
 371+ 6FC5              // NFA: +0   one byte of word-length (n<32) | some flags (immediate, smudge) | $80
 372+ 6FC5              //      +1   word name, last character is toggled with $80
 373+ 6FC5              // LFA: +1+n link to NFA ofprevious  dictionary entry.
 374+ 6FC5              // CFA: +3+n routine address. Colon definitions here have pointer to code
 375+ 6FC5              // PFA: +5+n "is_code", definitions have no PFA.
 376+ 6FC5              //
 377+ 6FC5                              Colon_Def TRAVERSE, "TRAVERSE", is_normal
 377+ 6FC5             >                New_Def  TRAVERSE, "TRAVERSE", Enter_Ptr, is_normal ; ok
 377+ 6FC5             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 377+ 6FC5             >
 377+ 6FC5             >                // dummy db directives used to calculate length of namec
 377+ 6FC5 54 52 41 56 >                db      "TRAVERSE"
 377+ 6FC9 45 52 53 45 >
 377+ 6FCD             >len_NFA         defl    $ - temp_NFA
 377+ 6FCD             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 377+ 6FC5             >
 377+ 6FC5 88          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 377+ 6FC6 54 52 41 56 >                db      "TRAVERSE"               // name string in 7-bit ascii, but
 377+ 6FCA 45 52 53 45 >
 377+ 6FCE             >                org     $-1                 // alter last byte of Name just above to set
 377+ 6FCD C5          >                db      {b $} | END_BIT     // msb as name end
 377+ 6FCE             >
 377+ 6FCE B5 6F       >                dw      last_NFA            // Link to previous definition Name
 377+ 6FD0             >TRAVERSE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 377+ 6FD0 53 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 377+ 6FD2             >                else
 377+ 6FD2 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 377+ 6FD2             >                endif           ; ok        // for other definitions it "points" the correct handler
 377+ 6FD2             >                // Use of "; ok" to suppress "warning[fwdref]"
 377+ 6FD2             >
 377+ 6FD2             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 378+ 6FD2 C8 6A                        dw      SWAP                    // swap
 379+ 6FD4              Traverse_Begin:                                 // begin
 380+ 6FD4 90 6A F5 69                  dw          OVER, PLUS          //      over +
 381+ 6FD8 A9 63 7F 00                  dw          LIT, 127            //      127
 382+ 6FDC 90 6A 83 6B                  dw          OVER, CFETCH        //      over @
 383+ 6FE0 2F 6F                        dw          LESS                //      <
 384+ 6FE2                                                              // until
 385+ 6FE2 E3 63                        dw      ZBRANCH
 386+ 6FE4 F0 FF                        dw      Traverse_Begin - $
 387+ 6FE6 AB 6A                        dw      NIP                     //  nip
 388+ 6FE8 4F 69                        dw      EXIT                    //  ;
 389+ 6FEA
 390+ 6FEA              //  ______________________________________________________________________
 391+ 6FEA              //
 392+ 6FEA              // latest       -- nfa
 393+ 6FEA                              Colon_Def LATEST, "LATEST", is_normal
 393+ 6FEA             >                New_Def  LATEST, "LATEST", Enter_Ptr, is_normal ; ok
 393+ 6FEA             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 393+ 6FEA             >
 393+ 6FEA             >                // dummy db directives used to calculate length of namec
 393+ 6FEA 4C 41 54 45 >                db      "LATEST"
 393+ 6FEE 53 54       >
 393+ 6FF0             >len_NFA         defl    $ - temp_NFA
 393+ 6FF0             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 393+ 6FEA             >
 393+ 6FEA 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 393+ 6FEB 4C 41 54 45 >                db      "LATEST"               // name string in 7-bit ascii, but
 393+ 6FEF 53 54       >
 393+ 6FF1             >                org     $-1                 // alter last byte of Name just above to set
 393+ 6FF0 D4          >                db      {b $} | END_BIT     // msb as name end
 393+ 6FF1             >
 393+ 6FF1 C5 6F       >                dw      last_NFA            // Link to previous definition Name
 393+ 6FF3             >LATEST:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 393+ 6FF3 53 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 393+ 6FF5             >                else
 393+ 6FF5 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 393+ 6FF5             >                endif           ; ok        // for other definitions it "points" the correct handler
 393+ 6FF5             >                // Use of "; ok" to suppress "warning[fwdref]"
 393+ 6FF5             >
 393+ 6FF5             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 394+ 6FF5 0E 6E                        dw      CURRENT                 // current
 395+ 6FF7 68 6B 68 6B                  dw      FETCH, FETCH            // @ @
 396+ 6FFB 4F 69                        dw      EXIT                    // ;
 397+ 6FFD
 398+ 6FFD              //  ______________________________________________________________________
 399+ 6FFD              //
 400+ 6FFD              // lfa          pfa -- lfa
 401+ 6FFD                              Colon_Def LFA, "LFA", is_normal
 401+ 6FFD             >                New_Def  LFA, "LFA", Enter_Ptr, is_normal ; ok
 401+ 6FFD             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 401+ 6FFD             >
 401+ 6FFD             >                // dummy db directives used to calculate length of namec
 401+ 6FFD 4C 46 41    >                db      "LFA"
 401+ 7000             >len_NFA         defl    $ - temp_NFA
 401+ 7000             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 401+ 6FFD             >
 401+ 6FFD 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 401+ 6FFE 4C 46 41    >                db      "LFA"               // name string in 7-bit ascii, but
 401+ 7001             >                org     $-1                 // alter last byte of Name just above to set
 401+ 7000 C1          >                db      {b $} | END_BIT     // msb as name end
 401+ 7001             >
 401+ 7001 EA 6F       >                dw      last_NFA            // Link to previous definition Name
 401+ 7003             >LFA:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 401+ 7003 53 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 401+ 7005             >                else
 401+ 7005 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 401+ 7005             >                endif           ; ok        // for other definitions it "points" the correct handler
 401+ 7005             >                // Use of "; ok" to suppress "warning[fwdref]"
 401+ 7005             >
 401+ 7005             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 402+ 7005 48 6A                        dw      CELL_MINUS              // cell-
 403+ 7007 48 6A                        dw      CELL_MINUS              // cell-
 404+ 7009 4F 69                        dw      EXIT                    // ;
 405+ 700B
 406+ 700B              //  ______________________________________________________________________
 407+ 700B              //
 408+ 700B              // cfa          pfa -- cfa
 409+ 700B                              Colon_Def CFA, "CFA", is_normal
 409+ 700B             >                New_Def  CFA, "CFA", Enter_Ptr, is_normal ; ok
 409+ 700B             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 409+ 700B             >
 409+ 700B             >                // dummy db directives used to calculate length of namec
 409+ 700B 43 46 41    >                db      "CFA"
 409+ 700E             >len_NFA         defl    $ - temp_NFA
 409+ 700E             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 409+ 700B             >
 409+ 700B 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 409+ 700C 43 46 41    >                db      "CFA"               // name string in 7-bit ascii, but
 409+ 700F             >                org     $-1                 // alter last byte of Name just above to set
 409+ 700E C1          >                db      {b $} | END_BIT     // msb as name end
 409+ 700F             >
 409+ 700F FD 6F       >                dw      last_NFA            // Link to previous definition Name
 409+ 7011             >CFA:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 409+ 7011 53 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 409+ 7013             >                else
 409+ 7013 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 409+ 7013             >                endif           ; ok        // for other definitions it "points" the correct handler
 409+ 7013             >                // Use of "; ok" to suppress "warning[fwdref]"
 409+ 7013             >
 409+ 7013             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 410+ 7013 48 6A                        dw      CELL_MINUS              // cell-
 411+ 7015 4F 69                        dw      EXIT                    // ;
 412+ 7017
 413+ 7017              //  ______________________________________________________________________
 414+ 7017              //
 415+ 7017              // nfa          pfa -- nfa
 416+ 7017                              Colon_Def NFA, "NFA", is_normal
 416+ 7017             >                New_Def  NFA, "NFA", Enter_Ptr, is_normal ; ok
 416+ 7017             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 416+ 7017             >
 416+ 7017             >                // dummy db directives used to calculate length of namec
 416+ 7017 4E 46 41    >                db      "NFA"
 416+ 701A             >len_NFA         defl    $ - temp_NFA
 416+ 701A             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 416+ 7017             >
 416+ 7017 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 416+ 7018 4E 46 41    >                db      "NFA"               // name string in 7-bit ascii, but
 416+ 701B             >                org     $-1                 // alter last byte of Name just above to set
 416+ 701A C1          >                db      {b $} | END_BIT     // msb as name end
 416+ 701B             >
 416+ 701B 0B 70       >                dw      last_NFA            // Link to previous definition Name
 416+ 701D             >NFA:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 416+ 701D 53 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 416+ 701F             >                else
 416+ 701F ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 416+ 701F             >                endif           ; ok        // for other definitions it "points" the correct handler
 416+ 701F             >                // Use of "; ok" to suppress "warning[fwdref]"
 416+ 701F             >
 416+ 701F             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 417+ 701F A9 63 05 00                  dw      LIT, 5                  // 5
 418+ 7023 00 6F                        dw      SUBTRACT                // -
 419+ 7025 EF 6C                        dw      NEG_ONE                 // -1
 420+ 7027 D0 6F                        dw      TRAVERSE                // traverse
 421+ 7029 4F 69                        dw      EXIT                    // ;
 422+ 702B
 423+ 702B              //  ______________________________________________________________________
 424+ 702B              //
 425+ 702B              // pfa          nfa -- pfa
 426+ 702B                              Colon_Def PFA, "PFA", is_normal
 426+ 702B             >                New_Def  PFA, "PFA", Enter_Ptr, is_normal ; ok
 426+ 702B             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 426+ 702B             >
 426+ 702B             >                // dummy db directives used to calculate length of namec
 426+ 702B 50 46 41    >                db      "PFA"
 426+ 702E             >len_NFA         defl    $ - temp_NFA
 426+ 702E             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 426+ 702B             >
 426+ 702B 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 426+ 702C 50 46 41    >                db      "PFA"               // name string in 7-bit ascii, but
 426+ 702F             >                org     $-1                 // alter last byte of Name just above to set
 426+ 702E C1          >                db      {b $} | END_BIT     // msb as name end
 426+ 702F             >
 426+ 702F 17 70       >                dw      last_NFA            // Link to previous definition Name
 426+ 7031             >PFA:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 426+ 7031 53 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 426+ 7033             >                else
 426+ 7033 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 426+ 7033             >                endif           ; ok        // for other definitions it "points" the correct handler
 426+ 7033             >                // Use of "; ok" to suppress "warning[fwdref]"
 426+ 7033             >
 426+ 7033             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 427+ 7033 D6 6C                        dw      ONE                     // 1
 428+ 7035 D0 6F                        dw      TRAVERSE                // traverse
 429+ 7037 A9 63 05 00                  dw      LIT, 5                  // 6
 430+ 703B F5 69                        dw      PLUS                    // +
 431+ 703D 4F 69                        dw      EXIT                    // ;
 432+ 703F
 433+ 703F              //  ______________________________________________________________________
 434+ 703F              //
 435+ 703F              // >body        cfa -- pfa
 436+ 703F                              Colon_Def TO_BODY, ">BODY", is_normal
 436+ 703F             >                New_Def  TO_BODY, ">BODY", Enter_Ptr, is_normal ; ok
 436+ 703F             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 436+ 703F             >
 436+ 703F             >                // dummy db directives used to calculate length of namec
 436+ 703F 3E 42 4F 44 >                db      ">BODY"
 436+ 7043 59          >
 436+ 7044             >len_NFA         defl    $ - temp_NFA
 436+ 7044             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 436+ 703F             >
 436+ 703F 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 436+ 7040 3E 42 4F 44 >                db      ">BODY"               // name string in 7-bit ascii, but
 436+ 7044 59          >
 436+ 7045             >                org     $-1                 // alter last byte of Name just above to set
 436+ 7044 D9          >                db      {b $} | END_BIT     // msb as name end
 436+ 7045             >
 436+ 7045 2B 70       >                dw      last_NFA            // Link to previous definition Name
 436+ 7047             >TO_BODY:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 436+ 7047 53 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 436+ 7049             >                else
 436+ 7049 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 436+ 7049             >                endif           ; ok        // for other definitions it "points" the correct handler
 436+ 7049             >                // Use of "; ok" to suppress "warning[fwdref]"
 436+ 7049             >
 436+ 7049             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 437+ 7049 3E 6A                        dw      CELL_PLUS               // cell+
 438+ 704B 4F 69                        dw      EXIT                    // ;
 439+ 704D
 440+ 704D              //  ______________________________________________________________________
 441+ 704D              //
 442+ 704D              // <name        cfa -- nfa
 443+ 704D                              Colon_Def TO_NAME, "<NAME", is_normal
 443+ 704D             >                New_Def  TO_NAME, "<NAME", Enter_Ptr, is_normal ; ok
 443+ 704D             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 443+ 704D             >
 443+ 704D             >                // dummy db directives used to calculate length of namec
 443+ 704D 3C 4E 41 4D >                db      "<NAME"
 443+ 7051 45          >
 443+ 7052             >len_NFA         defl    $ - temp_NFA
 443+ 7052             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 443+ 704D             >
 443+ 704D 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 443+ 704E 3C 4E 41 4D >                db      "<NAME"               // name string in 7-bit ascii, but
 443+ 7052 45          >
 443+ 7053             >                org     $-1                 // alter last byte of Name just above to set
 443+ 7052 C5          >                db      {b $} | END_BIT     // msb as name end
 443+ 7053             >
 443+ 7053 3F 70       >                dw      last_NFA            // Link to previous definition Name
 443+ 7055             >TO_NAME:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 443+ 7055 53 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 443+ 7057             >                else
 443+ 7057 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 443+ 7057             >                endif           ; ok        // for other definitions it "points" the correct handler
 443+ 7057             >                // Use of "; ok" to suppress "warning[fwdref]"
 443+ 7057             >
 443+ 7057             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 444+ 7057 47 70                        dw      TO_BODY                 // >body
 445+ 7059 1D 70                        dw      NFA                     // nfa
 446+ 705B 4F 69                        dw      EXIT                    // ;
 447+ 705D
 448+ 705D              //  ______________________________________________________________________
 449+ 705D              //
 450+ 705D              // !csp         --
 451+ 705D              // store in user variable CSP current value of SP. Used at compile-time for syntax checkng
 452+ 705D                              Colon_Def STORE_CSP, "!CSP", is_normal
 452+ 705D             >                New_Def  STORE_CSP, "!CSP", Enter_Ptr, is_normal ; ok
 452+ 705D             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 452+ 705D             >
 452+ 705D             >                // dummy db directives used to calculate length of namec
 452+ 705D 21 43 53 50 >                db      "!CSP"
 452+ 7061             >len_NFA         defl    $ - temp_NFA
 452+ 7061             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 452+ 705D             >
 452+ 705D 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 452+ 705E 21 43 53 50 >                db      "!CSP"               // name string in 7-bit ascii, but
 452+ 7062             >                org     $-1                 // alter last byte of Name just above to set
 452+ 7061 D0          >                db      {b $} | END_BIT     // msb as name end
 452+ 7062             >
 452+ 7062 4D 70       >                dw      last_NFA            // Link to previous definition Name
 452+ 7064             >STORE_CSP:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 452+ 7064 53 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 452+ 7066             >                else
 452+ 7066 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 452+ 7066             >                endif           ; ok        // for other definitions it "points" the correct handler
 452+ 7066             >                // Use of "; ok" to suppress "warning[fwdref]"
 452+ 7066             >
 452+ 7066             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 453+ 7066 17 69                        dw      SPFETCH                 // sp@
 454+ 7068 3E 6E 75 6B                  dw      CSP, STORE              // csp !
 455+ 706C 4F 69                        dw      EXIT                    // ;
 456+ 706E
 457+ 706E              //  ______________________________________________________________________
 458+ 706E              //
 459+ 706E              // ?error       f n --
 460+ 706E              // rase error n if flag f it true
 461+ 706E                              Colon_Def QERROR, "?ERROR", is_normal
 461+ 706E             >                New_Def  QERROR, "?ERROR", Enter_Ptr, is_normal ; ok
 461+ 706E             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 461+ 706E             >
 461+ 706E             >                // dummy db directives used to calculate length of namec
 461+ 706E 3F 45 52 52 >                db      "?ERROR"
 461+ 7072 4F 52       >
 461+ 7074             >len_NFA         defl    $ - temp_NFA
 461+ 7074             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 461+ 706E             >
 461+ 706E 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 461+ 706F 3F 45 52 52 >                db      "?ERROR"               // name string in 7-bit ascii, but
 461+ 7073 4F 52       >
 461+ 7075             >                org     $-1                 // alter last byte of Name just above to set
 461+ 7074 D2          >                db      {b $} | END_BIT     // msb as name end
 461+ 7075             >
 461+ 7075 5D 70       >                dw      last_NFA            // Link to previous definition Name
 461+ 7077             >QERROR:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 461+ 7077 53 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 461+ 7079             >                else
 461+ 7079 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 461+ 7079             >                endif           ; ok        // for other definitions it "points" the correct handler
 461+ 7079             >                // Use of "; ok" to suppress "warning[fwdref]"
 461+ 7079             >
 461+ 7079             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 462+ 7079 C8 6A                        dw      SWAP                    // swap
 463+ 707B                                                              // if
 464+ 707B E3 63                        dw      ZBRANCH
 465+ 707D 08 00                        dw      QError_Else - $
 466+ 707F E4 75                        dw          ERROR               //      error  ( is a forward-ref )
 467+ 7081                                                              // else
 468+ 7081 CC 63                        dw      BRANCH
 469+ 7083 04 00                        dw      QError_Endif - $
 470+ 7085              QError_Else:
 471+ 7085 A0 6A                        dw          DROP                //      drop
 472+ 7087              QError_Endif:                                   // endif
 473+ 7087 4F 69                        dw      EXIT                    // ;
 474+ 7089
 475+ 7089              //  ______________________________________________________________________
 476+ 7089              //
 477+ 7089              // ?comp       --
 478+ 7089              // raise msg #17 if not compiling
 479+ 7089                              Colon_Def QCOMP, "?COMP", is_normal
 479+ 7089             >                New_Def  QCOMP, "?COMP", Enter_Ptr, is_normal ; ok
 479+ 7089             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 479+ 7089             >
 479+ 7089             >                // dummy db directives used to calculate length of namec
 479+ 7089 3F 43 4F 4D >                db      "?COMP"
 479+ 708D 50          >
 479+ 708E             >len_NFA         defl    $ - temp_NFA
 479+ 708E             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 479+ 7089             >
 479+ 7089 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 479+ 708A 3F 43 4F 4D >                db      "?COMP"               // name string in 7-bit ascii, but
 479+ 708E 50          >
 479+ 708F             >                org     $-1                 // alter last byte of Name just above to set
 479+ 708E D0          >                db      {b $} | END_BIT     // msb as name end
 479+ 708F             >
 479+ 708F 6E 70       >                dw      last_NFA            // Link to previous definition Name
 479+ 7091             >QCOMP:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 479+ 7091 53 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 479+ 7093             >                else
 479+ 7093 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 479+ 7093             >                endif           ; ok        // for other definitions it "points" the correct handler
 479+ 7093             >                // Use of "; ok" to suppress "warning[fwdref]"
 479+ 7093             >
 479+ 7093             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 480+ 7093 19 6E 68 6B                  dw      STATE, FETCH            // state @
 481+ 7097 B2 69                        dw      ZEQUAL                  // 0=
 482+ 7099 A9 63 11 00                  dw      LIT, 17                 // 17  ( can't be executed )
 483+ 709D 77 70                        dw      QERROR                  // ?error
 484+ 709F 4F 69                        dw      EXIT                    // ;
 485+ 70A1
 486+ 70A1              //  ______________________________________________________________________
 487+ 70A1              //
 488+ 70A1              // ?exec       --
 489+ 70A1              // raise msg #18 if compiling
 490+ 70A1                              Colon_Def QEXEC, "?EXEC", is_normal
 490+ 70A1             >                New_Def  QEXEC, "?EXEC", Enter_Ptr, is_normal ; ok
 490+ 70A1             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 490+ 70A1             >
 490+ 70A1             >                // dummy db directives used to calculate length of namec
 490+ 70A1 3F 45 58 45 >                db      "?EXEC"
 490+ 70A5 43          >
 490+ 70A6             >len_NFA         defl    $ - temp_NFA
 490+ 70A6             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 490+ 70A1             >
 490+ 70A1 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 490+ 70A2 3F 45 58 45 >                db      "?EXEC"               // name string in 7-bit ascii, but
 490+ 70A6 43          >
 490+ 70A7             >                org     $-1                 // alter last byte of Name just above to set
 490+ 70A6 C3          >                db      {b $} | END_BIT     // msb as name end
 490+ 70A7             >
 490+ 70A7 89 70       >                dw      last_NFA            // Link to previous definition Name
 490+ 70A9             >QEXEC:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 490+ 70A9 53 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 490+ 70AB             >                else
 490+ 70AB ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 490+ 70AB             >                endif           ; ok        // for other definitions it "points" the correct handler
 490+ 70AB             >                // Use of "; ok" to suppress "warning[fwdref]"
 490+ 70AB             >
 490+ 70AB             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 491+ 70AB 19 6E 68 6B                  dw      STATE, FETCH            // state @
 492+ 70AF A9 63 12 00                  dw      LIT, 18                 // 18  ( can't be compiled )
 493+ 70B3 77 70                        dw      QERROR                  // ?error
 494+ 70B5 4F 69                        dw      EXIT                    // ;
 495+ 70B7
 496+ 70B7              //  ______________________________________________________________________
 497+ 70B7              //
 498+ 70B7              // ?pairs       n1 n2 --
 499+ 70B7              // raise msg #19 if n1 != n2. Compiler pushes some placeholder to stack for syntax checking
 500+ 70B7                              Colon_Def QPAIRS, "?PAIRS", is_normal
 500+ 70B7             >                New_Def  QPAIRS, "?PAIRS", Enter_Ptr, is_normal ; ok
 500+ 70B7             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 500+ 70B7             >
 500+ 70B7             >                // dummy db directives used to calculate length of namec
 500+ 70B7 3F 50 41 49 >                db      "?PAIRS"
 500+ 70BB 52 53       >
 500+ 70BD             >len_NFA         defl    $ - temp_NFA
 500+ 70BD             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 500+ 70B7             >
 500+ 70B7 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 500+ 70B8 3F 50 41 49 >                db      "?PAIRS"               // name string in 7-bit ascii, but
 500+ 70BC 52 53       >
 500+ 70BE             >                org     $-1                 // alter last byte of Name just above to set
 500+ 70BD D3          >                db      {b $} | END_BIT     // msb as name end
 500+ 70BE             >
 500+ 70BE A1 70       >                dw      last_NFA            // Link to previous definition Name
 500+ 70C0             >QPAIRS:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 500+ 70C0 53 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 500+ 70C2             >                else
 500+ 70C2 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 500+ 70C2             >                endif           ; ok        // for other definitions it "points" the correct handler
 500+ 70C2             >                // Use of "; ok" to suppress "warning[fwdref]"
 500+ 70C2             >
 500+ 70C2             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 501+ 70C2 00 6F                        dw      SUBTRACT                // -
 502+ 70C4 A9 63 13 00                  dw      LIT, 19                 // 18  ( syntax error )
 503+ 70C8 77 70                        dw      QERROR                  // ?error
 504+ 70CA 4F 69                        dw      EXIT                    // ;
 505+ 70CC
 506+ 70CC              //  ______________________________________________________________________
 507+ 70CC              //
 508+ 70CC              // ?csp       --
 509+ 70CC              // raise msg #20 if surrent SP in not what previously saved in CSP.
 510+ 70CC              // Compiler relies on that for  syntax checking of structures
 511+ 70CC                              Colon_Def QCSP, "?CSP", is_normal
 511+ 70CC             >                New_Def  QCSP, "?CSP", Enter_Ptr, is_normal ; ok
 511+ 70CC             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 511+ 70CC             >
 511+ 70CC             >                // dummy db directives used to calculate length of namec
 511+ 70CC 3F 43 53 50 >                db      "?CSP"
 511+ 70D0             >len_NFA         defl    $ - temp_NFA
 511+ 70D0             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 511+ 70CC             >
 511+ 70CC 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 511+ 70CD 3F 43 53 50 >                db      "?CSP"               // name string in 7-bit ascii, but
 511+ 70D1             >                org     $-1                 // alter last byte of Name just above to set
 511+ 70D0 D0          >                db      {b $} | END_BIT     // msb as name end
 511+ 70D1             >
 511+ 70D1 B7 70       >                dw      last_NFA            // Link to previous definition Name
 511+ 70D3             >QCSP:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 511+ 70D3 53 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 511+ 70D5             >                else
 511+ 70D5 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 511+ 70D5             >                endif           ; ok        // for other definitions it "points" the correct handler
 511+ 70D5             >                // Use of "; ok" to suppress "warning[fwdref]"
 511+ 70D5             >
 511+ 70D5             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 512+ 70D5 17 69                        dw      SPFETCH                 // sp@
 513+ 70D7 3E 6E 68 6B                  dw      CSP, FETCH              // csp @
 514+ 70DB 00 6F                        dw      SUBTRACT                // -
 515+ 70DD A9 63 14 00                  dw      LIT, 20                 // 20  ( bad definition end )
 516+ 70E1 77 70                        dw      QERROR                  // ?error
 517+ 70E3 4F 69                        dw      EXIT                    // ;
 518+ 70E5
 519+ 70E5              //  ______________________________________________________________________
 520+ 70E5              //
 521+ 70E5              // ?loading      --
 522+ 70E5              // raise msg #22 if not loading
 523+ 70E5                              Colon_Def QLOADING, "?LOADING", is_normal
 523+ 70E5             >                New_Def  QLOADING, "?LOADING", Enter_Ptr, is_normal ; ok
 523+ 70E5             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 523+ 70E5             >
 523+ 70E5             >                // dummy db directives used to calculate length of namec
 523+ 70E5 3F 4C 4F 41 >                db      "?LOADING"
 523+ 70E9 44 49 4E 47 >
 523+ 70ED             >len_NFA         defl    $ - temp_NFA
 523+ 70ED             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 523+ 70E5             >
 523+ 70E5 88          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 523+ 70E6 3F 4C 4F 41 >                db      "?LOADING"               // name string in 7-bit ascii, but
 523+ 70EA 44 49 4E 47 >
 523+ 70EE             >                org     $-1                 // alter last byte of Name just above to set
 523+ 70ED C7          >                db      {b $} | END_BIT     // msb as name end
 523+ 70EE             >
 523+ 70EE CC 70       >                dw      last_NFA            // Link to previous definition Name
 523+ 70F0             >QLOADING:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 523+ 70F0 53 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 523+ 70F2             >                else
 523+ 70F2 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 523+ 70F2             >                endif           ; ok        // for other definitions it "points" the correct handler
 523+ 70F2             >                // Use of "; ok" to suppress "warning[fwdref]"
 523+ 70F2             >
 523+ 70F2             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 524+ 70F2 CD 6D 68 6B                  dw      BLK, FETCH              // blk @
 525+ 70F6 B2 69                        dw      ZEQUAL                  // 0=
 526+ 70F8 A9 63 16 00                  dw      LIT, 22                 // 22  ( aren't loading now )
 527+ 70FC 77 70                        dw      QERROR                  // ?error
 528+ 70FE 4F 69                        dw      EXIT                    // ;
 529+ 7100
 530+ 7100              //  ______________________________________________________________________
 531+ 7100              //
 532+ 7100              // compile      --
 533+ 7100              // compiles the following word
 534+ 7100                              Colon_Def COMPILE, "COMPILE", is_normal
 534+ 7100             >                New_Def  COMPILE, "COMPILE", Enter_Ptr, is_normal ; ok
 534+ 7100             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 534+ 7100             >
 534+ 7100             >                // dummy db directives used to calculate length of namec
 534+ 7100 43 4F 4D 50 >                db      "COMPILE"
 534+ 7104 49 4C 45    >
 534+ 7107             >len_NFA         defl    $ - temp_NFA
 534+ 7107             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 534+ 7100             >
 534+ 7100 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 534+ 7101 43 4F 4D 50 >                db      "COMPILE"               // name string in 7-bit ascii, but
 534+ 7105 49 4C 45    >
 534+ 7108             >                org     $-1                 // alter last byte of Name just above to set
 534+ 7107 C5          >                db      {b $} | END_BIT     // msb as name end
 534+ 7108             >
 534+ 7108 E5 70       >                dw      last_NFA            // Link to previous definition Name
 534+ 710A             >COMPILE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 534+ 710A 53 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 534+ 710C             >                else
 534+ 710C ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 534+ 710C             >                endif           ; ok        // for other definitions it "points" the correct handler
 534+ 710C             >                // Use of "; ok" to suppress "warning[fwdref]"
 534+ 710C             >
 534+ 710C             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 535+ 710C 91 70                        dw      QCOMP                   // ?comp
 536+ 710E 91 69                        dw      R_TO                    // r>
 537+ 7110 D5 6A 3E 6A                  dw      DUP, CELL_PLUS          // dup, cell+
 538+ 7114 7D 69                        dw      TO_R                    // >r
 539+ 7116 68 6B C9 6E                  dw      FETCH, COMMA            // @ ,
 540+ 711A 4F 69                        dw      EXIT                    // ;
 541+ 711C
 542+ 711C              //  ______________________________________________________________________
 543+ 711C              //
 544+ 711C              // compile,     --
 545+ 711C              // compiles the following word
 546+ 711C                              Colon_Def COMPILE_XT, "COMPILE,", is_normal
 546+ 711C             >                New_Def  COMPILE_XT, "COMPILE,", Enter_Ptr, is_normal ; ok
 546+ 711C             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 546+ 711C             >
 546+ 711C             >                // dummy db directives used to calculate length of namec
 546+ 711C 43 4F 4D 50 >                db      "COMPILE,"
 546+ 7120 49 4C 45 2C >
 546+ 7124             >len_NFA         defl    $ - temp_NFA
 546+ 7124             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 546+ 711C             >
 546+ 711C 88          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 546+ 711D 43 4F 4D 50 >                db      "COMPILE,"               // name string in 7-bit ascii, but
 546+ 7121 49 4C 45 2C >
 546+ 7125             >                org     $-1                 // alter last byte of Name just above to set
 546+ 7124 AC          >                db      {b $} | END_BIT     // msb as name end
 546+ 7125             >
 546+ 7125 00 71       >                dw      last_NFA            // Link to previous definition Name
 546+ 7127             >COMPILE_XT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 546+ 7127 53 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 546+ 7129             >                else
 546+ 7129 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 546+ 7129             >                endif           ; ok        // for other definitions it "points" the correct handler
 546+ 7129             >                // Use of "; ok" to suppress "warning[fwdref]"
 546+ 7129             >
 546+ 7129             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 547+ 7129 91 70                        dw      QCOMP                   // ?comp
 548+ 712B C9 6E                        dw      COMMA                   // ,
 549+ 712D 4F 69                        dw      EXIT                    // ;
 550+ 712F
 551+ 712F              //  ______________________________________________________________________
 552+ 712F              //
 553+ 712F              // [            --
 554+ 712F              // stop compilation
 555+ 712F                              Colon_Def SQUARED_OPEN, "[", is_immediate
 555+ 712F             >                New_Def  SQUARED_OPEN, "[", Enter_Ptr, is_immediate ; ok
 555+ 712F             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 555+ 712F             >
 555+ 712F             >                // dummy db directives used to calculate length of namec
 555+ 712F 5B          >                db      "["
 555+ 7130             >len_NFA         defl    $ - temp_NFA
 555+ 7130             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 555+ 712F             >
 555+ 712F C1          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 555+ 7130 5B          >                db      "["               // name string in 7-bit ascii, but
 555+ 7131             >                org     $-1                 // alter last byte of Name just above to set
 555+ 7130 DB          >                db      {b $} | END_BIT     // msb as name end
 555+ 7131             >
 555+ 7131 1C 71       >                dw      last_NFA            // Link to previous definition Name
 555+ 7133             >SQUARED_OPEN:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 555+ 7133 53 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 555+ 7135             >                else
 555+ 7135 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 555+ 7135             >                endif           ; ok        // for other definitions it "points" the correct handler
 555+ 7135             >                // Use of "; ok" to suppress "warning[fwdref]"
 555+ 7135             >
 555+ 7135             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 556+ 7135 CE 6C                        dw      ZERO                    // 0
 557+ 7137 19 6E 75 6B                  dw      STATE, STORE            // state !
 558+ 713B 4F 69                        dw      EXIT                    // ; immediate
 559+ 713D
 560+ 713D              //  ______________________________________________________________________
 561+ 713D              //
 562+ 713D              // ]            --
 563+ 713D              // start compilation
 564+ 713D                              Colon_Def SQUARED_CLOSE, "]", is_normal
 564+ 713D             >                New_Def  SQUARED_CLOSE, "]", Enter_Ptr, is_normal ; ok
 564+ 713D             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 564+ 713D             >
 564+ 713D             >                // dummy db directives used to calculate length of namec
 564+ 713D 5D          >                db      "]"
 564+ 713E             >len_NFA         defl    $ - temp_NFA
 564+ 713E             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 564+ 713D             >
 564+ 713D 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 564+ 713E 5D          >                db      "]"               // name string in 7-bit ascii, but
 564+ 713F             >                org     $-1                 // alter last byte of Name just above to set
 564+ 713E DD          >                db      {b $} | END_BIT     // msb as name end
 564+ 713F             >
 564+ 713F 2F 71       >                dw      last_NFA            // Link to previous definition Name
 564+ 7141             >SQUARED_CLOSE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 564+ 7141 53 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 564+ 7143             >                else
 564+ 7143 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 564+ 7143             >                endif           ; ok        // for other definitions it "points" the correct handler
 564+ 7143             >                // Use of "; ok" to suppress "warning[fwdref]"
 564+ 7143             >
 564+ 7143             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 565+ 7143 A9 63 C0 00                  dw      LIT, $C0                // 192
 566+ 7147 19 6E 75 6B                  dw      STATE, STORE            // state !
 567+ 714B 4F 69                        dw      EXIT                    // ;
 568+ 714D
 569+ 714D              //  ______________________________________________________________________
 570+ 714D              //
 571+ 714D              // smudge       --
 572+ 714D              // toggle smudge bit of latest definition
 573+ 714D                              Colon_Def SMUDGE, "SMUDGE", is_normal
 573+ 714D             >                New_Def  SMUDGE, "SMUDGE", Enter_Ptr, is_normal ; ok
 573+ 714D             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 573+ 714D             >
 573+ 714D             >                // dummy db directives used to calculate length of namec
 573+ 714D 53 4D 55 44 >                db      "SMUDGE"
 573+ 7151 47 45       >
 573+ 7153             >len_NFA         defl    $ - temp_NFA
 573+ 7153             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 573+ 714D             >
 573+ 714D 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 573+ 714E 53 4D 55 44 >                db      "SMUDGE"               // name string in 7-bit ascii, but
 573+ 7152 47 45       >
 573+ 7154             >                org     $-1                 // alter last byte of Name just above to set
 573+ 7153 C5          >                db      {b $} | END_BIT     // msb as name end
 573+ 7154             >
 573+ 7154 3D 71       >                dw      last_NFA            // Link to previous definition Name
 573+ 7156             >SMUDGE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 573+ 7156 53 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 573+ 7158             >                else
 573+ 7158 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 573+ 7158             >                endif           ; ok        // for other definitions it "points" the correct handler
 573+ 7158             >                // Use of "; ok" to suppress "warning[fwdref]"
 573+ 7158             >
 573+ 7158             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 574+ 7158 F3 6F                        dw      LATEST                  // latest
 575+ 715A A9 63 20 00                  dw      LIT, SMUDGE_BIT         // 32
 576+ 715E 5B 6B                        dw      TOGGLE                  // toggle
 577+ 7160 4F 69                        dw      EXIT                    // ;
 578+ 7162
 579+ 7162              //  ______________________________________________________________________
 580+ 7162              //
 581+ 7162              // immediate    --
 582+ 7162              // make immediate the latest definition
 583+ 7162                              Colon_Def IMMEDIATE, "IMMEDIATE", is_normal
 583+ 7162             >                New_Def  IMMEDIATE, "IMMEDIATE", Enter_Ptr, is_normal ; ok
 583+ 7162             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 583+ 7162             >
 583+ 7162             >                // dummy db directives used to calculate length of namec
 583+ 7162 49 4D 4D 45 >                db      "IMMEDIATE"
 583+ 7166 44 49 41 54 >
 583+ 716A 45          >
 583+ 716B             >len_NFA         defl    $ - temp_NFA
 583+ 716B             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 583+ 7162             >
 583+ 7162 89          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 583+ 7163 49 4D 4D 45 >                db      "IMMEDIATE"               // name string in 7-bit ascii, but
 583+ 7167 44 49 41 54 >
 583+ 716B 45          >
 583+ 716C             >                org     $-1                 // alter last byte of Name just above to set
 583+ 716B C5          >                db      {b $} | END_BIT     // msb as name end
 583+ 716C             >
 583+ 716C 4D 71       >                dw      last_NFA            // Link to previous definition Name
 583+ 716E             >IMMEDIATE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 583+ 716E 53 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 583+ 7170             >                else
 583+ 7170 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 583+ 7170             >                endif           ; ok        // for other definitions it "points" the correct handler
 583+ 7170             >                // Use of "; ok" to suppress "warning[fwdref]"
 583+ 7170             >
 583+ 7170             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 584+ 7170 F3 6F                        dw      LATEST                  // latest
 585+ 7172 A9 63 40 00                  dw      LIT, $40                // 64
 586+ 7176 5B 6B                        dw      TOGGLE                  // toggle
 587+ 7178 4F 69                        dw      EXIT                    // ;
 588+ 717A
 589+ 717A              //  ______________________________________________________________________
 590+ 717A              //
 591+ 717A              // hex          --
 592+ 717A              // change numeration base
 593+ 717A                              Colon_Def HEX, "HEX", is_normal
 593+ 717A             >                New_Def  HEX, "HEX", Enter_Ptr, is_normal ; ok
 593+ 717A             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 593+ 717A             >
 593+ 717A             >                // dummy db directives used to calculate length of namec
 593+ 717A 48 45 58    >                db      "HEX"
 593+ 717D             >len_NFA         defl    $ - temp_NFA
 593+ 717D             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 593+ 717A             >
 593+ 717A 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 593+ 717B 48 45 58    >                db      "HEX"               // name string in 7-bit ascii, but
 593+ 717E             >                org     $-1                 // alter last byte of Name just above to set
 593+ 717D D8          >                db      {b $} | END_BIT     // msb as name end
 593+ 717E             >
 593+ 717E 62 71       >                dw      last_NFA            // Link to previous definition Name
 593+ 7180             >HEX:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 593+ 7180 53 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 593+ 7182             >                else
 593+ 7182 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 593+ 7182             >                endif           ; ok        // for other definitions it "points" the correct handler
 593+ 7182             >                // Use of "; ok" to suppress "warning[fwdref]"
 593+ 7182             >
 593+ 7182             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 594+ 7182 A9 63 10 00                  dw      LIT, 16                 // 16
 595+ 7186 23 6E 75 6B                  dw      BASE, STORE             // base !
 596+ 718A 4F 69                        dw      EXIT                    // ;
 597+ 718C
 598+ 718C              //  ______________________________________________________________________
 599+ 718C              //
 600+ 718C              // decimal      --
 601+ 718C              // change numeration base
 602+ 718C                              Colon_Def DECIMAL, "DECIMAL", is_normal
 602+ 718C             >                New_Def  DECIMAL, "DECIMAL", Enter_Ptr, is_normal ; ok
 602+ 718C             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 602+ 718C             >
 602+ 718C             >                // dummy db directives used to calculate length of namec
 602+ 718C 44 45 43 49 >                db      "DECIMAL"
 602+ 7190 4D 41 4C    >
 602+ 7193             >len_NFA         defl    $ - temp_NFA
 602+ 7193             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 602+ 718C             >
 602+ 718C 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 602+ 718D 44 45 43 49 >                db      "DECIMAL"               // name string in 7-bit ascii, but
 602+ 7191 4D 41 4C    >
 602+ 7194             >                org     $-1                 // alter last byte of Name just above to set
 602+ 7193 CC          >                db      {b $} | END_BIT     // msb as name end
 602+ 7194             >
 602+ 7194 7A 71       >                dw      last_NFA            // Link to previous definition Name
 602+ 7196             >DECIMAL:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 602+ 7196 53 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 602+ 7198             >                else
 602+ 7198 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 602+ 7198             >                endif           ; ok        // for other definitions it "points" the correct handler
 602+ 7198             >                // Use of "; ok" to suppress "warning[fwdref]"
 602+ 7198             >
 602+ 7198             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 603+ 7198 A9 63 0A 00                  dw      LIT, 10                 // 10
 604+ 719C 23 6E 75 6B                  dw      BASE, STORE             // base !
 605+ 71A0 4F 69                        dw      EXIT                    // ;
 606+ 71A2
 607+ 71A2              //  ______________________________________________________________________
 608+ 71A2              //
 609+ 71A2              // (;code)       --
 610+ 71A2              // patch to CFA to call/jump to the "following code"
 611+ 71A2                              Colon_Def C_SEMICOLON_CODE, "(;CODE)", is_normal
 611+ 71A2             >                New_Def  C_SEMICOLON_CODE, "(;CODE)", Enter_Ptr, is_normal ; ok
 611+ 71A2             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 611+ 71A2             >
 611+ 71A2             >                // dummy db directives used to calculate length of namec
 611+ 71A2 28 3B 43 4F >                db      "(;CODE)"
 611+ 71A6 44 45 29    >
 611+ 71A9             >len_NFA         defl    $ - temp_NFA
 611+ 71A9             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 611+ 71A2             >
 611+ 71A2 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 611+ 71A3 28 3B 43 4F >                db      "(;CODE)"               // name string in 7-bit ascii, but
 611+ 71A7 44 45 29    >
 611+ 71AA             >                org     $-1                 // alter last byte of Name just above to set
 611+ 71A9 A9          >                db      {b $} | END_BIT     // msb as name end
 611+ 71AA             >
 611+ 71AA 8C 71       >                dw      last_NFA            // Link to previous definition Name
 611+ 71AC             >C_SEMICOLON_CODE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 611+ 71AC 53 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 611+ 71AE             >                else
 611+ 71AE ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 611+ 71AE             >                endif           ; ok        // for other definitions it "points" the correct handler
 611+ 71AE             >                // Use of "; ok" to suppress "warning[fwdref]"
 611+ 71AE             >
 611+ 71AE             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 612+ 71AE 91 69                        dw      R_TO                    // r>       ( Return Stack has IP to caller's next cell )
 613+ 71B0 F3 6F                        dw      LATEST                  // latest   ( Word being defined in this moment )
 614+ 71B2 31 70 11 70                  dw      PFA, CFA                // pfa cfa  ( cfa of latest word )
 615+ 71B6
 616+ 71B6
 617+ 71B6
 618+ 71B6
 619+ 71B6
 620+ 71B6 75 6B                        dw      STORE                   // !
 621+ 71B8 4F 69                        dw      EXIT                    // ;
 622+ 71BA
 623+ 71BA              //  ______________________________________________________________________
 624+ 71BA              //
 625+ 71BA              // ;code        --
 626+ 71BA                              Colon_Def SEMICOLON_CODE, ";CODE", is_immediate
 626+ 71BA             >                New_Def  SEMICOLON_CODE, ";CODE", Enter_Ptr, is_immediate ; ok
 626+ 71BA             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 626+ 71BA             >
 626+ 71BA             >                // dummy db directives used to calculate length of namec
 626+ 71BA 3B 43 4F 44 >                db      ";CODE"
 626+ 71BE 45          >
 626+ 71BF             >len_NFA         defl    $ - temp_NFA
 626+ 71BF             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 626+ 71BA             >
 626+ 71BA C5          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 626+ 71BB 3B 43 4F 44 >                db      ";CODE"               // name string in 7-bit ascii, but
 626+ 71BF 45          >
 626+ 71C0             >                org     $-1                 // alter last byte of Name just above to set
 626+ 71BF C5          >                db      {b $} | END_BIT     // msb as name end
 626+ 71C0             >
 626+ 71C0 A2 71       >                dw      last_NFA            // Link to previous definition Name
 626+ 71C2             >SEMICOLON_CODE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 626+ 71C2 53 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 626+ 71C4             >                else
 626+ 71C4 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 626+ 71C4             >                endif           ; ok        // for other definitions it "points" the correct handler
 626+ 71C4             >                // Use of "; ok" to suppress "warning[fwdref]"
 626+ 71C4             >
 626+ 71C4             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 627+ 71C4 D3 70                        dw      QCSP                    // ?csp
 628+ 71C6 0A 71                        dw      COMPILE                 // compile
 629+ 71C8 AC 71                        dw      C_SEMICOLON_CODE        // (;code)
 630+ 71CA 33 71                        dw      SQUARED_OPEN            // [
 631+ 71CC 7B 6C                        dw      NOOP                    // noop () can be patched later to ASSEMBLER... )
 632+ 71CE 4F 69                        dw      EXIT                    // ; immediate
 633+ 71D0
 634+ 71D0              //  ______________________________________________________________________
 635+ 71D0              //
 636+ 71D0              // <builds      --
 637+ 71D0                              Colon_Def CBUILDS, "<BUILDS", is_normal
 637+ 71D0             >                New_Def  CBUILDS, "<BUILDS", Enter_Ptr, is_normal ; ok
 637+ 71D0             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 637+ 71D0             >
 637+ 71D0             >                // dummy db directives used to calculate length of namec
 637+ 71D0 3C 42 55 49 >                db      "<BUILDS"
 637+ 71D4 4C 44 53    >
 637+ 71D7             >len_NFA         defl    $ - temp_NFA
 637+ 71D7             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 637+ 71D0             >
 637+ 71D0 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 637+ 71D1 3C 42 55 49 >                db      "<BUILDS"               // name string in 7-bit ascii, but
 637+ 71D5 4C 44 53    >
 637+ 71D8             >                org     $-1                 // alter last byte of Name just above to set
 637+ 71D7 D3          >                db      {b $} | END_BIT     // msb as name end
 637+ 71D8             >
 637+ 71D8 BA 71       >                dw      last_NFA            // Link to previous definition Name
 637+ 71DA             >CBUILDS:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 637+ 71DA 53 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 637+ 71DC             >                else
 637+ 71DC ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 637+ 71DC             >                endif           ; ok        // for other definitions it "points" the correct handler
 637+ 71DC             >                // Use of "; ok" to suppress "warning[fwdref]"
 637+ 71DC             >
 637+ 71DC             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 638+ 71DC CE 6C                        dw      ZERO                    // 0
 639+ 71DE 8A 6C                        dw      CONSTANT                // constant
 640+ 71E0 4F 69                        dw      EXIT                    // ;
 641+ 71E2
 642+ 71E2              //  ______________________________________________________________________
 643+ 71E2              //
 644+ 71E2              // recurse      --
 645+ 71E2              //              Colon_Def RECURSE, "RECURSE", is_immediate
 646+ 71E2              //              dw      QCOMP                   // ?comp
 647+ 71E2              //              dw      LATEST                  // latest
 648+ 71E2              //              dw      PFA, CFA                // pfa cfa
 649+ 71E2              //              dw      COMMA                   // ,
 650+ 71E2              //              dw      EXIT                    // ; immediate
 651+ 71E2
 652+ 71E2              //  ______________________________________________________________________
 653+ 71E2              //
 654+ 71E2              // does>     --
 655+ 71E2                              Colon_Def DOES_TO, "DOES>", is_normal
 655+ 71E2             >                New_Def  DOES_TO, "DOES>", Enter_Ptr, is_normal ; ok
 655+ 71E2             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 655+ 71E2             >
 655+ 71E2             >                // dummy db directives used to calculate length of namec
 655+ 71E2 44 4F 45 53 >                db      "DOES>"
 655+ 71E6 3E          >
 655+ 71E7             >len_NFA         defl    $ - temp_NFA
 655+ 71E7             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 655+ 71E2             >
 655+ 71E2 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 655+ 71E3 44 4F 45 53 >                db      "DOES>"               // name string in 7-bit ascii, but
 655+ 71E7 3E          >
 655+ 71E8             >                org     $-1                 // alter last byte of Name just above to set
 655+ 71E7 BE          >                db      {b $} | END_BIT     // msb as name end
 655+ 71E8             >
 655+ 71E8 D0 71       >                dw      last_NFA            // Link to previous definition Name
 655+ 71EA             >DOES_TO:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 655+ 71EA 53 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 655+ 71EC             >                else
 655+ 71EC ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 655+ 71EC             >                endif           ; ok        // for other definitions it "points" the correct handler
 655+ 71EC             >                // Use of "; ok" to suppress "warning[fwdref]"
 655+ 71EC             >
 655+ 71EC             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 656+ 71EC 91 69                        dw      R_TO                    // r>
 657+ 71EE F3 6F                        dw      LATEST                  // latest
 658+ 71F0 31 70                        dw      PFA                     // pfa
 659+ 71F2 75 6B                        dw      STORE                   // !
 660+ 71F4 AC 71                        dw      C_SEMICOLON_CODE        // ;code
 661+ 71F6              Does_Ptr:
 662+ 71F6                              // via call coded in CFA
 663+ 71F6                              ldhlrp
 663+ 71F6 2A 96 63    >                ld      hl,(RP_Pointer)
 664+ 71F9 2B                           dec     hl                  // push on Return-Stack current Instruction-Pointer
 665+ 71FA 70                           ld      (hl), b
 666+ 71FB 2B                           dec     hl
 667+ 71FC 71                           ld      (hl), c
 668+ 71FD                              ldrphl
 668+ 71FD 22 96 63    >                ld      (RP_Pointer),hl
 669+ 7200 13                           inc     de
 670+ 7201 EB                           ex      de, hl
 671+ 7202 4E                           ld      c, (hl)
 672+ 7203 23                           inc     hl
 673+ 7204 46                           ld      b, (hl)
 674+ 7205 23                           inc     hl
 675+ 7206
 676+ 7206                              psh1
 676+ 7206 E5          >                push    hl
 676+ 7207 DD E9       >                jp      (ix)
 677+ 7209                              // SMUDGE !
 678+ 7209
 679+ 7209              //  ______________________________________________________________________
 680+ 7209              //
 681+ 7209              // count        a -- a2 n
 682+ 7209              // expects a counted string at address a, returns string address and counter
 683+ 7209                              Colon_Def COUNT, "COUNT", is_normal
 683+ 7209             >                New_Def  COUNT, "COUNT", Enter_Ptr, is_normal ; ok
 683+ 7209             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 683+ 7209             >
 683+ 7209             >                // dummy db directives used to calculate length of namec
 683+ 7209 43 4F 55 4E >                db      "COUNT"
 683+ 720D 54          >
 683+ 720E             >len_NFA         defl    $ - temp_NFA
 683+ 720E             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 683+ 7209             >
 683+ 7209 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 683+ 720A 43 4F 55 4E >                db      "COUNT"               // name string in 7-bit ascii, but
 683+ 720E 54          >
 683+ 720F             >                org     $-1                 // alter last byte of Name just above to set
 683+ 720E D4          >                db      {b $} | END_BIT     // msb as name end
 683+ 720F             >
 683+ 720F E2 71       >                dw      last_NFA            // Link to previous definition Name
 683+ 7211             >COUNT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 683+ 7211 53 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 683+ 7213             >                else
 683+ 7213 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 683+ 7213             >                endif           ; ok        // for other definitions it "points" the correct handler
 683+ 7213             >                // Use of "; ok" to suppress "warning[fwdref]"
 683+ 7213             >
 683+ 7213             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 684+ 7213 D5 6A                        dw      DUP                     // dup
 685+ 7215 16 6A                        dw      ONE_PLUS                // 1+
 686+ 7217 C8 6A 83 6B                  dw      SWAP, CFETCH             // swap @
 687+ 721B 4F 69                        dw      EXIT                    // ;
 688+ 721D
 689+ 721D              //  ______________________________________________________________________
 690+ 721D              //
 691+ 721D              // bounds       a n -- a+n n
 692+ 721D              // given an address and a length ( a n ) calculate the bound addresses
 693+ 721D              // suitable for DO-LOOP
 694+ 721D                              Colon_Def BOUNDS, "BOUNDS", is_normal
 694+ 721D             >                New_Def  BOUNDS, "BOUNDS", Enter_Ptr, is_normal ; ok
 694+ 721D             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 694+ 721D             >
 694+ 721D             >                // dummy db directives used to calculate length of namec
 694+ 721D 42 4F 55 4E >                db      "BOUNDS"
 694+ 7221 44 53       >
 694+ 7223             >len_NFA         defl    $ - temp_NFA
 694+ 7223             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 694+ 721D             >
 694+ 721D 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 694+ 721E 42 4F 55 4E >                db      "BOUNDS"               // name string in 7-bit ascii, but
 694+ 7222 44 53       >
 694+ 7224             >                org     $-1                 // alter last byte of Name just above to set
 694+ 7223 D3          >                db      {b $} | END_BIT     // msb as name end
 694+ 7224             >
 694+ 7224 09 72       >                dw      last_NFA            // Link to previous definition Name
 694+ 7226             >BOUNDS:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 694+ 7226 53 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 694+ 7228             >                else
 694+ 7228 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 694+ 7228             >                endif           ; ok        // for other definitions it "points" the correct handler
 694+ 7228             >                // Use of "; ok" to suppress "warning[fwdref]"
 694+ 7228             >
 694+ 7228             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 695+ 7228 90 6A F5 69                  dw      OVER, PLUS, SWAP        // over + swap
 695+ 722C C8 6A
 696+ 722E 4F 69                        dw      EXIT                    // ;
 697+ 7230
 698+ 7230              //  ______________________________________________________________________
 699+ 7230              //
 700+ 7230              // type         a n --
 701+ 7230              // Sends to current output channel n characters starting at address a.
 702+ 7230                              Colon_Def TYPE, "TYPE", is_normal
 702+ 7230             >                New_Def  TYPE, "TYPE", Enter_Ptr, is_normal ; ok
 702+ 7230             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 702+ 7230             >
 702+ 7230             >                // dummy db directives used to calculate length of namec
 702+ 7230 54 59 50 45 >                db      "TYPE"
 702+ 7234             >len_NFA         defl    $ - temp_NFA
 702+ 7234             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 702+ 7230             >
 702+ 7230 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 702+ 7231 54 59 50 45 >                db      "TYPE"               // name string in 7-bit ascii, but
 702+ 7235             >                org     $-1                 // alter last byte of Name just above to set
 702+ 7234 C5          >                db      {b $} | END_BIT     // msb as name end
 702+ 7235             >
 702+ 7235 1D 72       >                dw      last_NFA            // Link to previous definition Name
 702+ 7237             >TYPE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 702+ 7237 53 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 702+ 7239             >                else
 702+ 7239 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 702+ 7239             >                endif           ; ok        // for other definitions it "points" the correct handler
 702+ 7239             >                // Use of "; ok" to suppress "warning[fwdref]"
 702+ 7239             >
 702+ 7239             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 703+ 7239 26 72                        dw      BOUNDS                  // bounds
 704+ 723B 3D 64                        dw      C_Q_DO                  // ?do
 705+ 723D 0C 00                        dw      Type_Skip - $
 706+ 723F              Type_Loop:
 707+ 723F 76 64 83 6B                  dw          I, CFETCH           //      i c@
 708+ 7243 A1 6F                        dw          EMIT                //      emit
 709+ 7245 F8 63                        dw      C_LOOP                  // loop
 710+ 7247 F8 FF                        dw      Type_Loop - $
 711+ 7249              Type_Skip:
 712+ 7249 4F 69                        dw      EXIT                    // ;
 713+ 724B
 714+ 724B              //  ______________________________________________________________________
 715+ 724B              //
 716+ 724B              // leave        --
 717+ 724B              // Compile (leave) to leave current LOOP and jump just after it
 718+ 724B                              Colon_Def LEAVE, "LEAVE", is_immediate
 718+ 724B             >                New_Def  LEAVE, "LEAVE", Enter_Ptr, is_immediate ; ok
 718+ 724B             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 718+ 724B             >
 718+ 724B             >                // dummy db directives used to calculate length of namec
 718+ 724B 4C 45 41 56 >                db      "LEAVE"
 718+ 724F 45          >
 718+ 7250             >len_NFA         defl    $ - temp_NFA
 718+ 7250             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 718+ 724B             >
 718+ 724B C5          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 718+ 724C 4C 45 41 56 >                db      "LEAVE"               // name string in 7-bit ascii, but
 718+ 7250 45          >
 718+ 7251             >                org     $-1                 // alter last byte of Name just above to set
 718+ 7250 C5          >                db      {b $} | END_BIT     // msb as name end
 718+ 7251             >
 718+ 7251 30 72       >                dw      last_NFA            // Link to previous definition Name
 718+ 7253             >LEAVE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 718+ 7253 53 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 718+ 7255             >                else
 718+ 7255 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 718+ 7255             >                endif           ; ok        // for other definitions it "points" the correct handler
 718+ 7255             >                // Use of "; ok" to suppress "warning[fwdref]"
 718+ 7255             >
 718+ 7255             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 719+ 7255 0A 71 67 69                  dw      COMPILE, C_LEAVE       // compile (leave)     \ unloop and branch
 720+ 7259 AD 6E 7D 69                  dw      HERE, TO_R, ZERO, COMMA // here >r 0 ,
 720+ 725D CE 6C C9 6E
 721+ 7261 CE 6C CE 6C                  dw      ZERO, ZERO
 722+ 7265 17 69 D5 6A                  dw      SPFETCH, DUP
 723+ 7269 3E 6A 3E 6A                  dw      CELL_PLUS, CELL_PLUS
 724+ 726D B8 6A                        dw      TUCK
 725+ 726F 3E 6E 68 6B                  dw      CSP, FETCH
 726+ 7273 C8 6A 00 6F                  dw      SWAP, SUBTRACT
 727+ 7277 3D 68                        dw      CMOVE
 728+ 7279 3E 6E 68 6B                  dw      CSP, FETCH, CELL_MINUS
 728+ 727D 48 6A
 729+ 727F 91 69 90 6A                  dw      R_TO, OVER, STORE
 729+ 7283 75 6B
 730+ 7285 48 6A CE 6C                  dw      CELL_MINUS, ZERO
 731+ 7289 C8 6A 75 6B                  dw      SWAP, STORE
 732+ 728D 4F 69                        dw      EXIT                    // ;
 733+ 728F
 734+ 728F              //  ______________________________________________________________________
 735+ 728F              //
 736+ 728F              // -trailing    a n1 -- a n2
 737+ 728F              // Assumes that an n1 bytes-long string is stored at address a
 738+ 728F              // and the string contains a space delimited word,
 739+ 728F              // Finds n2 as the position of the first character after the word.
 740+ 728F                              Colon_Def LTRAILING, "-TRAILING", is_normal
 740+ 728F             >                New_Def  LTRAILING, "-TRAILING", Enter_Ptr, is_normal ; ok
 740+ 728F             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 740+ 728F             >
 740+ 728F             >                // dummy db directives used to calculate length of namec
 740+ 728F 2D 54 52 41 >                db      "-TRAILING"
 740+ 7293 49 4C 49 4E >
 740+ 7297 47          >
 740+ 7298             >len_NFA         defl    $ - temp_NFA
 740+ 7298             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 740+ 728F             >
 740+ 728F 89          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 740+ 7290 2D 54 52 41 >                db      "-TRAILING"               // name string in 7-bit ascii, but
 740+ 7294 49 4C 49 4E >
 740+ 7298 47          >
 740+ 7299             >                org     $-1                 // alter last byte of Name just above to set
 740+ 7298 C7          >                db      {b $} | END_BIT     // msb as name end
 740+ 7299             >
 740+ 7299 4B 72       >                dw      last_NFA            // Link to previous definition Name
 740+ 729B             >LTRAILING:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 740+ 729B 53 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 740+ 729D             >                else
 740+ 729D ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 740+ 729D             >                endif           ; ok        // for other definitions it "points" the correct handler
 740+ 729D             >                // Use of "; ok" to suppress "warning[fwdref]"
 740+ 729D             >
 740+ 729D             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 741+ 729D D5 6A CE 6C                  dw      DUP, ZERO               // dup 0
 742+ 72A1                                                              // do
 743+ 72A1 3D 64                        dw      C_Q_DO
 744+ 72A3 20 00                        dw      LTrailing_Leave - $
 745+ 72A5              LTrailing_Loop:
 746+ 72A5 36 6B F5 69                  dw          TWO_DUP, PLUS       //      2dup +
 747+ 72A9 22 6A                        dw          ONE_SUBTRACT        //      1-
 748+ 72AB 83 6B                        dw          CFETCH              //      c@
 749+ 72AD F8 6C 00 6F                  dw          BL, SUBTRACT        //      bl -
 750+ 72B1                                                              //      if
 751+ 72B1 E3 63                        dw          ZBRANCH
 752+ 72B3 0A 00                        dw          LTrailing_Else - $
 753+ 72B5 67 69                        dw              C_LEAVE         //          leave
 754+ 72B7 0C 00                        dw              LTrailing_Leave - $
 755+ 72B9 CC 63                        dw          BRANCH              //      else
 756+ 72BB 04 00                        dw          LTrailing_Endif - $
 757+ 72BD              LTrailing_Else:
 758+ 72BD 22 6A                        dw              ONE_SUBTRACT    //          1-
 759+ 72BF              LTrailing_Endif:                                //      endif
 760+ 72BF                                                              // loop
 761+ 72BF F8 63                        dw      C_LOOP
 762+ 72C1 E4 FF                        dw      LTrailing_Loop - $
 763+ 72C3              LTrailing_Leave:
 764+ 72C3 4F 69                        dw      EXIT                    // ;
 765+ 72C5
 766+ 72C5              //  ______________________________________________________________________
 767+ 72C5              //
 768+ 72C5              // accept       a n1 -- n2
 769+ 72C5              // Accepts at most n1 characters from terminal and stores them at address a
 770+ 72C5              // CR stops input. A 'nul' is added as trailer.
 771+ 72C5              // n2 is the string length. n2 is kept in span user variable also.
 772+ 72C5                              Colon_Def ACCEPT, "ACCEPT", is_normal
 772+ 72C5             >                New_Def  ACCEPT, "ACCEPT", Enter_Ptr, is_normal ; ok
 772+ 72C5             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 772+ 72C5             >
 772+ 72C5             >                // dummy db directives used to calculate length of namec
 772+ 72C5 41 43 43 45 >                db      "ACCEPT"
 772+ 72C9 50 54       >
 772+ 72CB             >len_NFA         defl    $ - temp_NFA
 772+ 72CB             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 772+ 72C5             >
 772+ 72C5 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 772+ 72C6 41 43 43 45 >                db      "ACCEPT"               // name string in 7-bit ascii, but
 772+ 72CA 50 54       >
 772+ 72CC             >                org     $-1                 // alter last byte of Name just above to set
 772+ 72CB D4          >                db      {b $} | END_BIT     // msb as name end
 772+ 72CC             >
 772+ 72CC 8F 72       >                dw      last_NFA            // Link to previous definition Name
 772+ 72CE             >ACCEPT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 772+ 72CE 53 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 772+ 72D0             >                else
 772+ 72D0 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 772+ 72D0             >                endif           ; ok        // for other definitions it "points" the correct handler
 772+ 72D0             >                // Use of "; ok" to suppress "warning[fwdref]"
 772+ 72D0             >
 772+ 72D0             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 773+ 72D0 90 6A F5 69                  dw      OVER, PLUS, OVER        //                      ( a  n1+a  a )
 773+ 72D4 90 6A
 774+ 72D6 CE 6C F2 6A                  dw      ZERO, DASH_ROT          //                      ( a  0     a+n1  a )
 775+ 72DA                                                              // do
 776+ 72DA 3D 64                        dw      C_Q_DO
 777+ 72DC 8A 00                        dw      Accept_Leave - $
 778+ 72DE              Accept_Loop:
 779+ 72DE A0 6A 93 66                  dw          DROP, KEY           //      drop key        ( a  c )
 780+ 72E2 D5 6A                        dw          DUP                 //      dup             ( a  c  c )
 781+ 72E4 A9 63 0E 00                  dw          LIT, $0E            //      0E
 782+ 72E8 34 6D                        dw          PLUS_ORIGIN         //      +origin
 783+ 72EA 68 6B                        dw          FETCH               //      @               ( a  c  c  del )
 784+ 72EC 0E 6F                        dw          EQUALS              //      =               ( a  c  c==del )
 785+ 72EE                                                              //      if
 786+ 72EE E3 63                        dw          ZBRANCH
 787+ 72F0 2C 00                        dw          Accept_Else_0 - $
 788+ 72F2 A0 6A                        dw              DROP            //          drop        ( a  )
 789+ 72F4 D5 6A 76 64                  dw              DUP, I, EQUALS  //          dup i =     ( a  a==i )
 789+ 72F8 0E 6F
 790+ 72FA D6 6C DF 68                  dw              ONE, AND_OP     //          1 and
 791+ 72FE D5 6A                        dw              DUP             //          dup         ( a  a==i  a==i )
 792+ 7300 91 69                        dw              R_TO            //          r> 2 - + r>
 793+ 7302 55 6A F5 69                  dw              TWO_MINUS, PLUS //      ( decrement index by 1 or 2 )
 794+ 7306 7D 69                        dw              TO_R            //
 795+ 7308                                                              //          if
 796+ 7308 E3 63                        dw              ZBRANCH
 797+ 730A 0A 00                        dw              Accept_Else_1 - $
 798+ 730C A9 63 07 00                  dw                  LIT, 7      //              7       ( a  7 )
 799+ 7310                                                              //          else
 800+ 7310 CC 63                        dw              BRANCH
 801+ 7312 06 00                        dw              Accept_Endif_1 - $
 802+ 7314              Accept_Else_1:
 803+ 7314 A9 63 08 00                  dw                  LIT, 8      //              8       ( a  8 )
 804+ 7318              Accept_Endif_1:                                 //          endif
 805+ 7318 CC 63                        dw          BRANCH
 806+ 731A 2E 00                        dw          Accept_Endif_0 - $
 807+ 731C              Accept_Else_0:                                  //      else
 808+ 731C D5 6A                        dw              DUP             //          dup         ( a  c  c )
 809+ 731E A9 63 0D 00                  dw              LIT, 13         //          13
 810+ 7322 0E 6F                        dw              EQUALS          //          =           ( a  c  c==CR )
 811+ 7324                                                              //          if
 812+ 7324 E3 63                        dw              ZBRANCH
 813+ 7326 0C 00                        dw              Accept_Else_2 - $
 814+ 7328 A0 6A F8 6C                  dw                  DROP, BL    //              drop bl ( a  bl )
 815+ 732C CE 6C                        dw                  ZERO        //              0       ( a  c  0 )
 816+ 732E                                                              //          else
 817+ 732E CC 63                        dw              BRANCH
 818+ 7330 04 00                        dw              Accept_Endif_2 - $
 819+ 7332              Accept_Else_2:
 820+ 7332 D5 6A                        dw                  DUP         //              dup     ( a  c  c )
 821+ 7334                                                              //          endif
 822+ 7334              Accept_Endif_2:
 823+ 7334 76 64 91 6B                  dw              I, CSTORE       //          i           ( a  c )
 824+ 7338 D5 6A F8 6C                  dw              DUP, BL, LESS   //          dup bl <    ( a  c  c<BL )
 824+ 733C 2F 6F
 825+ 733E                                                              //          if
 826+ 733E E3 63                        dw              ZBRANCH
 827+ 7340 08 00                        dw              Accept_Endif_3 - $
 828+ 7342 91 69                        dw                  R_TO        //              r>
 829+ 7344 22 6A                        dw                  ONE_SUBTRACT//              1-
 830+ 7346 7D 69                        dw                  TO_R        //              >r
 831+ 7348                                                              //          endif
 832+ 7348              Accept_Endif_3:
 833+ 7348              Accept_Endif_0:                                 //      endif
 834+ 7348 A1 6F                        dw          EMIT                //      emit
 835+ 734A CE 6C 76 64                  dw          ZERO, I, ONE_PLUS   //      0 i 1+ !
 835+ 734E 16 6A
 836+ 7350 75 6B                        dw          STORE               //          ( zero pad )
 837+ 7352 76 64                        dw          I                   //      i
 838+ 7354 76 64 83 6B                  dw          I, CFETCH, ZEQUAL   //      i 0= if
 838+ 7358 B2 69
 839+ 735A E3 63                        dw          ZBRANCH             //
 840+ 735C 06 00                        dw              Accept_Endif_4 - $
 841+ 735E 67 69                        dw                  C_LEAVE     //              leave
 842+ 7360 06 00                        dw                  Accept_Leave - $
 843+ 7362              Accept_Endif_4:                                 //      endif
 844+ 7362                                                              // loop
 845+ 7362 F8 63                        dw      C_LOOP
 846+ 7364 7A FF                        dw      Accept_Loop - $
 847+ 7366              Accept_Leave:
 848+ 7366 C8 6A 00 6F                  dw      SWAP, SUBTRACT          // swap -
 849+ 736A 16 6A                        dw      ONE_PLUS                // 1+
 850+ 736C D5 6A 8E 6E                  dw      DUP, SPAN, STORE        // dup span !
 850+ 7370 75 6B
 851+ 7372 4F 69                        dw      EXIT                    // ;
 852+ 7374
 853+ 7374              //  ______________________________________________________________________
 854+ 7374              //
 855+ 7374              // expect      a n --
 856+ 7374              // Accepts at most n1 characters from terminal and stores them at address a
 857+ 7374              // CR stops input. A 'nul' is added as trailer.
 858+ 7374              // n2 is the string length. n2 is kept in span user variable also.
 859+ 7374              //              Colon_Def EXPECT, "EXPECT", is_normal
 860+ 7374              //              dw      ACCEPT, DROP            // accept drop
 861+ 7374              //              dw      EXIT                    // ;
 862+ 7374
 863+ 7374              //  ______________________________________________________________________
 864+ 7374              //
 865+ 7374              // query        --
 866+ 7374              // Accept at most 80 character from console. CR stops.
 867+ 7374              // Text is stored in TIB. Variable IN is zeroed.
 868+ 7374                              Colon_Def QUERY, "QUERY", is_normal
 868+ 7374             >                New_Def  QUERY, "QUERY", Enter_Ptr, is_normal ; ok
 868+ 7374             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 868+ 7374             >
 868+ 7374             >                // dummy db directives used to calculate length of namec
 868+ 7374 51 55 45 52 >                db      "QUERY"
 868+ 7378 59          >
 868+ 7379             >len_NFA         defl    $ - temp_NFA
 868+ 7379             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 868+ 7374             >
 868+ 7374 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 868+ 7375 51 55 45 52 >                db      "QUERY"               // name string in 7-bit ascii, but
 868+ 7379 59          >
 868+ 737A             >                org     $-1                 // alter last byte of Name just above to set
 868+ 7379 D9          >                db      {b $} | END_BIT     // msb as name end
 868+ 737A             >
 868+ 737A C5 72       >                dw      last_NFA            // Link to previous definition Name
 868+ 737C             >QUERY:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 868+ 737C 53 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 868+ 737E             >                else
 868+ 737E ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 868+ 737E             >                endif           ; ok        // for other definitions it "points" the correct handler
 868+ 737E             >                // Use of "; ok" to suppress "warning[fwdref]"
 868+ 737E             >
 868+ 737E             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 869+ 737E 61 6D 68 6B                  dw      TIB, FETCH              // tib @
 870+ 7382 A9 63 50 00                  dw      LIT, 80                 // 80
 871+ 7386 CE 72 A0 6A                  dw      ACCEPT, DROP            // accept drop
 872+ 738A CE 6C D6 6D                  dw      ZERO, TO_IN, STORE      // 0 >in !
 872+ 738E 75 6B
 873+ 7390 4F 69                        dw      EXIT                    // ;
 874+ 7392
 875+ 7392              //  ______________________________________________________________________
 876+ 7392              //
 877+ 7392              // fill        a n c --
 878+ 7392              // If n > 0, fills n locations starting from address a with the value c.
 879+ 7392                              New_Def FILL, "FILL", is_code, is_normal
 879+ 7392             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 879+ 7392             >
 879+ 7392             >                // dummy db directives used to calculate length of namec
 879+ 7392 46 49 4C 4C >                db      "FILL"
 879+ 7396             >len_NFA         defl    $ - temp_NFA
 879+ 7396             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 879+ 7392             >
 879+ 7392 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 879+ 7393 46 49 4C 4C >                db      "FILL"               // name string in 7-bit ascii, but
 879+ 7397             >                org     $-1                 // alter last byte of Name just above to set
 879+ 7396 CC          >                db      {b $} | END_BIT     // msb as name end
 879+ 7397             >
 879+ 7397 74 73       >                dw      last_NFA            // Link to previous definition Name
 879+ 7399             >FILL:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 879+ 7399 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
 879+ 7399             >                else
 879+ 7399 9B 73       >                dw      $ + 2   ; ok        // is pointed by CFA
 879+ 739B             >                endif           ; ok        // for other definitions it "points" the correct handler
 879+ 739B             >                // Use of "; ok" to suppress "warning[fwdref]"
 879+ 739B             >
 879+ 739B             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 880+ 739B D9                           exx
 881+ 739C D1                           pop     de                  // de has character
 882+ 739D C1                           pop     bc                  // bc has counter
 883+ 739E E1                           pop     hl                  // hl has address, save Instruction Pointer
 884+ 739F              Fill_Loop:
 885+ 739F 78                               ld      a, b
 886+ 73A0 B1                               or      c
 887+ 73A1 28 05                        jr      z, Fill_While_End
 888+ 73A3 73                               ld      (hl), e
 889+ 73A4 0B                               dec     bc
 890+ 73A5 23                               inc     hl
 891+ 73A6 18 F7                        jr      Fill_Loop
 892+ 73A8              Fill_While_End:
 893+ 73A8 D9                           exx
 894+ 73A9
 895+ 73A9                              next
 895+ 73A9 DD E9       >                jp      (ix)
 896+ 73AB
 897+ 73AB              //  ______________________________________________________________________
 898+ 73AB              //
 899+ 73AB              // erase        a n --
 900+ 73AB              // If n > 0, fills n locations starting from address a with 'nul' characters.
 901+ 73AB                              Colon_Def ERASE, "ERASE", is_normal
 901+ 73AB             >                New_Def  ERASE, "ERASE", Enter_Ptr, is_normal ; ok
 901+ 73AB             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 901+ 73AB             >
 901+ 73AB             >                // dummy db directives used to calculate length of namec
 901+ 73AB 45 52 41 53 >                db      "ERASE"
 901+ 73AF 45          >
 901+ 73B0             >len_NFA         defl    $ - temp_NFA
 901+ 73B0             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 901+ 73AB             >
 901+ 73AB 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 901+ 73AC 45 52 41 53 >                db      "ERASE"               // name string in 7-bit ascii, but
 901+ 73B0 45          >
 901+ 73B1             >                org     $-1                 // alter last byte of Name just above to set
 901+ 73B0 C5          >                db      {b $} | END_BIT     // msb as name end
 901+ 73B1             >
 901+ 73B1 92 73       >                dw      last_NFA            // Link to previous definition Name
 901+ 73B3             >ERASE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 901+ 73B3 53 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 901+ 73B5             >                else
 901+ 73B5 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 901+ 73B5             >                endif           ; ok        // for other definitions it "points" the correct handler
 901+ 73B5             >                // Use of "; ok" to suppress "warning[fwdref]"
 901+ 73B5             >
 901+ 73B5             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 902+ 73B5 CE 6C 99 73                  dw      ZERO, FILL              // 0 fill
 903+ 73B9 4F 69                        dw      EXIT                    // ;
 904+ 73BB
 905+ 73BB              //  ______________________________________________________________________
 906+ 73BB              //
 907+ 73BB              // blanks       a n --
 908+ 73BB              // If n > 0, fills n locations starting from address a with 'nul' characters.
 909+ 73BB                              Colon_Def BLANKS, "BLANKS", is_normal
 909+ 73BB             >                New_Def  BLANKS, "BLANKS", Enter_Ptr, is_normal ; ok
 909+ 73BB             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 909+ 73BB             >
 909+ 73BB             >                // dummy db directives used to calculate length of namec
 909+ 73BB 42 4C 41 4E >                db      "BLANKS"
 909+ 73BF 4B 53       >
 909+ 73C1             >len_NFA         defl    $ - temp_NFA
 909+ 73C1             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 909+ 73BB             >
 909+ 73BB 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 909+ 73BC 42 4C 41 4E >                db      "BLANKS"               // name string in 7-bit ascii, but
 909+ 73C0 4B 53       >
 909+ 73C2             >                org     $-1                 // alter last byte of Name just above to set
 909+ 73C1 D3          >                db      {b $} | END_BIT     // msb as name end
 909+ 73C2             >
 909+ 73C2 AB 73       >                dw      last_NFA            // Link to previous definition Name
 909+ 73C4             >BLANKS:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 909+ 73C4 53 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 909+ 73C6             >                else
 909+ 73C6 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 909+ 73C6             >                endif           ; ok        // for other definitions it "points" the correct handler
 909+ 73C6             >                // Use of "; ok" to suppress "warning[fwdref]"
 909+ 73C6             >
 909+ 73C6             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 910+ 73C6 F8 6C 99 73                  dw      BL, FILL                // bl fill
 911+ 73CA 4F 69                        dw      EXIT                    // ;
 912+ 73CC
 913+ 73CC              //  ______________________________________________________________________
 914+ 73CC              //
 915+ 73CC              // hold         c --
 916+ 73CC              // Used between <# and #> to insert a character c in numeric formatting.
 917+ 73CC                              Colon_Def HOLD, "HOLD", is_normal
 917+ 73CC             >                New_Def  HOLD, "HOLD", Enter_Ptr, is_normal ; ok
 917+ 73CC             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 917+ 73CC             >
 917+ 73CC             >                // dummy db directives used to calculate length of namec
 917+ 73CC 48 4F 4C 44 >                db      "HOLD"
 917+ 73D0             >len_NFA         defl    $ - temp_NFA
 917+ 73D0             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 917+ 73CC             >
 917+ 73CC 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 917+ 73CD 48 4F 4C 44 >                db      "HOLD"               // name string in 7-bit ascii, but
 917+ 73D1             >                org     $-1                 // alter last byte of Name just above to set
 917+ 73D0 C4          >                db      {b $} | END_BIT     // msb as name end
 917+ 73D1             >
 917+ 73D1 BB 73       >                dw      last_NFA            // Link to previous definition Name
 917+ 73D3             >HOLD:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 917+ 73D3 53 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 917+ 73D5             >                else
 917+ 73D5 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 917+ 73D5             >                endif           ; ok        // for other definitions it "points" the correct handler
 917+ 73D5             >                // Use of "; ok" to suppress "warning[fwdref]"
 917+ 73D5             >
 917+ 73D5             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 918+ 73D5 EF 6C                        dw      NEG_ONE                 // -1
 919+ 73D7 4F 6E 45 6B                  dw      HLD, PLUSSTORE          // hld +!
 920+ 73DB 4F 6E 68 6B                  dw      HLD, FETCH, CSTORE      // hld @ c!
 920+ 73DF 91 6B
 921+ 73E1 4F 69                        dw      EXIT                    // ;
 922+ 73E3
 923+ 73E3              //  ______________________________________________________________________
 924+ 73E3              //
 925+ 73E3              // pad         -- a
 926+ 73E3              // leaves the buffer text address. This is at a fixed distance over HERE.
 927+ 73E3                              Colon_Def PAD, "PAD", is_normal
 927+ 73E3             >                New_Def  PAD, "PAD", Enter_Ptr, is_normal ; ok
 927+ 73E3             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 927+ 73E3             >
 927+ 73E3             >                // dummy db directives used to calculate length of namec
 927+ 73E3 50 41 44    >                db      "PAD"
 927+ 73E6             >len_NFA         defl    $ - temp_NFA
 927+ 73E6             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 927+ 73E3             >
 927+ 73E3 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 927+ 73E4 50 41 44    >                db      "PAD"               // name string in 7-bit ascii, but
 927+ 73E7             >                org     $-1                 // alter last byte of Name just above to set
 927+ 73E6 C4          >                db      {b $} | END_BIT     // msb as name end
 927+ 73E7             >
 927+ 73E7 CC 73       >                dw      last_NFA            // Link to previous definition Name
 927+ 73E9             >PAD:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 927+ 73E9 53 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 927+ 73EB             >                else
 927+ 73EB ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 927+ 73EB             >                endif           ; ok        // for other definitions it "points" the correct handler
 927+ 73EB             >                // Use of "; ok" to suppress "warning[fwdref]"
 927+ 73EB             >
 927+ 73EB             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 928+ 73EB AD 6E                        dw      HERE                    // here
 929+ 73ED A9 63 44 00                  dw      LIT, 68                 // 68
 930+ 73F1 F5 69                        dw      PLUS                    // +
 931+ 73F3 4F 69                        dw      EXIT                    // ;
 932+ 73F5
 933+ 73F5              //  ______________________________________________________________________
 934+ 73F5              //
 935+ 73F5              // word         c -- a
 936+ 73F5              // reads characters from input streams until it encouners a c delimiter.
 937+ 73F5              // Stores that packet so it starts from HERE
 938+ 73F5              // WORD leaves a counter as first byte and ends the packet with two spaces.
 939+ 73F5              // Other occurrences of c are ignored.
 940+ 73F5              // If BLK is zero, text is taken from terminal buffer TIB.
 941+ 73F5              // Otherwise text is taken from the disk-block given by BLK.
 942+ 73F5              // "in" variable is incremented of the number of character read.
 943+ 73F5              // The number of characters read is given by ENCLOSE.
 944+ 73F5                              Colon_Def WORD, "WORD", is_normal
 944+ 73F5             >                New_Def  WORD, "WORD", Enter_Ptr, is_normal ; ok
 944+ 73F5             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 944+ 73F5             >
 944+ 73F5             >                // dummy db directives used to calculate length of namec
 944+ 73F5 57 4F 52 44 >                db      "WORD"
 944+ 73F9             >len_NFA         defl    $ - temp_NFA
 944+ 73F9             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 944+ 73F5             >
 944+ 73F5 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 944+ 73F6 57 4F 52 44 >                db      "WORD"               // name string in 7-bit ascii, but
 944+ 73FA             >                org     $-1                 // alter last byte of Name just above to set
 944+ 73F9 C4          >                db      {b $} | END_BIT     // msb as name end
 944+ 73FA             >
 944+ 73FA E3 73       >                dw      last_NFA            // Link to previous definition Name
 944+ 73FC             >WORD:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 944+ 73FC 53 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 944+ 73FE             >                else
 944+ 73FE ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 944+ 73FE             >                endif           ; ok        // for other definitions it "points" the correct handler
 944+ 73FE             >                // Use of "; ok" to suppress "warning[fwdref]"
 944+ 73FE             >
 944+ 73FE             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 945+ 73FE CD 6D 68 6B                  dw      BLK, FETCH              // blk @
 946+ 7402                                                              // if
 947+ 7402 E3 63                        dw      ZBRANCH
 948+ 7404 0C 00                        dw      Word_Else - $
 949+ 7406 CD 6D 68 6B                  dw          BLK, FETCH          //      blk @
 950+ 740A A3 7D                        dw          BLOCK               //      block ( forward )
 951+ 740C                                                              // else
 952+ 740C CC 63                        dw      BRANCH
 953+ 740E 06 00                        dw      Word_Endif - $
 954+ 7410              Word_Else:
 955+ 7410 61 6D 68 6B                  dw         TIB, FETCH           //      tib @
 956+ 7414              Word_Endif:                                     // endif
 957+ 7414 D6 6D 68 6B                  dw      TO_IN, FETCH, PLUS      // >in @ +
 957+ 7418 F5 69
 958+ 741A C8 6A 64 65                  dw      SWAP, ENCLOSE           // swap enclose
 959+ 741E AD 6E A9 63                  dw      HERE, LIT, 34, BLANKS   // here 34 blanks
 959+ 7422 22 00 C4 73
 960+ 7426 D6 6D 45 6B                  dw      TO_IN, PLUSSTORE        // >in @ +
 961+ 742A 90 6A 00 6F                  dw      OVER, SUBTRACT, TO_R    // over - >r
 961+ 742E 7D 69
 962+ 7430 A5 69 AD 6E                  dw      R_OP, HERE, CSTORE      // r here c!
 962+ 7434 91 6B
 963+ 7436 F5 69                        dw      PLUS                    // +
 964+ 7438 AD 6E 16 6A                  dw      HERE, ONE_PLUS, R_TO    // here 1+ r>
 964+ 743C 91 69
 965+ 743E 3D 68                        dw      CMOVE                   // cmove
 966+ 7440 AD 6E                        dw      HERE                    // here
 967+ 7442 4F 69                        dw      EXIT                    // ;
 968+ 7444
 969+ 7444              //  ______________________________________________________________________
 970+ 7444              //
 971+ 7444              // (.")         --
 972+ 7444              // Direct procedure compiled by ." and  .(  It executes TYPE.
 973+ 7444                              Colon_Def C_DOT_QUOTE, '(.")', is_normal
 973+ 7444             >                New_Def  C_DOT_QUOTE, '(.")', Enter_Ptr, is_normal ; ok
 973+ 7444             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 973+ 7444             >
 973+ 7444             >                // dummy db directives used to calculate length of namec
 973+ 7444 28 2E 22 29 >                db      '(.")'
 973+ 7448             >len_NFA         defl    $ - temp_NFA
 973+ 7448             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 973+ 7444             >
 973+ 7444 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 973+ 7445 28 2E 22 29 >                db      '(.")'               // name string in 7-bit ascii, but
 973+ 7449             >                org     $-1                 // alter last byte of Name just above to set
 973+ 7448 A9          >                db      {b $} | END_BIT     // msb as name end
 973+ 7449             >
 973+ 7449 F5 73       >                dw      last_NFA            // Link to previous definition Name
 973+ 744B             >C_DOT_QUOTE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 973+ 744B 53 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 973+ 744D             >                else
 973+ 744D ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 973+ 744D             >                endif           ; ok        // for other definitions it "points" the correct handler
 973+ 744D             >                // Use of "; ok" to suppress "warning[fwdref]"
 973+ 744D             >
 973+ 744D             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 974+ 744D A5 69 11 72                  dw      R_OP, COUNT             // r count
 975+ 7451 D5 6A 16 6A                  dw      DUP, ONE_PLUS           // dup 1+
 976+ 7455 91 69 F5 69                  dw      R_TO, PLUS, TO_R        // r> + >r  ( advance IP )
 976+ 7459 7D 69
 977+ 745B 37 72                        dw      TYPE                    // type
 978+ 745D 4F 69                        dw      EXIT                    // ;
 979+ 745F
 980+ 745F              //  ______________________________________________________________________
 981+ 745F              //
 982+ 745F              // char         -- c
 983+ 745F              // get first character from next input word
 984+ 745F                              Colon_Def CHAR,  "CHAR", is_normal
 984+ 745F             >                New_Def  CHAR, "CHAR", Enter_Ptr, is_normal ; ok
 984+ 745F             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 984+ 745F             >
 984+ 745F             >                // dummy db directives used to calculate length of namec
 984+ 745F 43 48 41 52 >                db      "CHAR"
 984+ 7463             >len_NFA         defl    $ - temp_NFA
 984+ 7463             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 984+ 745F             >
 984+ 745F 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 984+ 7460 43 48 41 52 >                db      "CHAR"               // name string in 7-bit ascii, but
 984+ 7464             >                org     $-1                 // alter last byte of Name just above to set
 984+ 7463 D2          >                db      {b $} | END_BIT     // msb as name end
 984+ 7464             >
 984+ 7464 44 74       >                dw      last_NFA            // Link to previous definition Name
 984+ 7466             >CHAR:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 984+ 7466 53 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 984+ 7468             >                else
 984+ 7468 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 984+ 7468             >                endif           ; ok        // for other definitions it "points" the correct handler
 984+ 7468             >                // Use of "; ok" to suppress "warning[fwdref]"
 984+ 7468             >
 984+ 7468             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 985+ 7468 F8 6C FC 73                  dw      BL, WORD                // bl word
 986+ 746C 16 6A 83 6B                  dw      ONE_PLUS, CFETCH        // 1+ c@
 987+ 7470 4F 69                        dw      EXIT                    // ;
 988+ 7472
 989+ 7472              //  ______________________________________________________________________
 990+ 7472              //
 991+ 7472              // ,"           --
 992+ 7472              // compiles a string terminated by " as a counted string from next input stream
 993+ 7472                              Colon_Def COMMA_QUOTE,  ',"', is_normal
 993+ 7472             >                New_Def  COMMA_QUOTE, ',"', Enter_Ptr, is_normal ; ok
 993+ 7472             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 993+ 7472             >
 993+ 7472             >                // dummy db directives used to calculate length of namec
 993+ 7472 2C 22       >                db      ',"'
 993+ 7474             >len_NFA         defl    $ - temp_NFA
 993+ 7474             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 993+ 7472             >
 993+ 7472 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 993+ 7473 2C 22       >                db      ',"'               // name string in 7-bit ascii, but
 993+ 7475             >                org     $-1                 // alter last byte of Name just above to set
 993+ 7474 A2          >                db      {b $} | END_BIT     // msb as name end
 993+ 7475             >
 993+ 7475 5F 74       >                dw      last_NFA            // Link to previous definition Name
 993+ 7477             >COMMA_QUOTE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 993+ 7477 53 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 993+ 7479             >                else
 993+ 7479 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 993+ 7479             >                endif           ; ok        // for other definitions it "points" the correct handler
 993+ 7479             >                // Use of "; ok" to suppress "warning[fwdref]"
 993+ 7479             >
 993+ 7479             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 994+ 7479 A9 63 22 00                  dw      LIT, DQUOTE_CHAR        // [char] "
 995+ 747D FC 73                        dw      WORD                    // word
 996+ 747F 83 6B 16 6A                  dw      CFETCH, ONE_PLUS        // c@ 1+
 997+ 7483 BD 6E                        dw      ALLOT                   // allot
 998+ 7485 CE 6C DA 6E                  dw      ZERO, CCOMMA            // 0 c,  ( nul-terminated string - useful anyway )
 999+ 7489 4F 69                        dw      EXIT
1000+ 748B
1001+ 748B              //  ______________________________________________________________________
1002+ 748B              //
1003+ 748B              // .c           c --
1004+ 748B              // intermediate general purpose string builder, used by ." and .(
1005+ 748B                              Colon_Def DOT_C,  ".C", is_immediate
1005+ 748B             >                New_Def  DOT_C, ".C", Enter_Ptr, is_immediate ; ok
1005+ 748B             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1005+ 748B             >
1005+ 748B             >                // dummy db directives used to calculate length of namec
1005+ 748B 2E 43       >                db      ".C"
1005+ 748D             >len_NFA         defl    $ - temp_NFA
1005+ 748D             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1005+ 748B             >
1005+ 748B C2          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
1005+ 748C 2E 43       >                db      ".C"               // name string in 7-bit ascii, but
1005+ 748E             >                org     $-1                 // alter last byte of Name just above to set
1005+ 748D C3          >                db      {b $} | END_BIT     // msb as name end
1005+ 748E             >
1005+ 748E 72 74       >                dw      last_NFA            // Link to previous definition Name
1005+ 7490             >DOT_C:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1005+ 7490 53 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
1005+ 7492             >                else
1005+ 7492 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
1005+ 7492             >                endif           ; ok        // for other definitions it "points" the correct handler
1005+ 7492             >                // Use of "; ok" to suppress "warning[fwdref]"
1005+ 7492             >
1005+ 7492             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1006+ 7492 19 6E 68 6B                  dw      STATE, FETCH            // state @
1007+ 7496                                                              // if
1008+ 7496 E3 63                        dw      ZBRANCH
1009+ 7498 12 00                        dw      Dot_C_Else - $
1010+ 749A 0A 71 4B 74                  dw          COMPILE, C_DOT_QUOTE //     compile (.")
1011+ 749E FC 73 83 6B                  dw          WORD, CFETCH        //      word c@
1012+ 74A2 16 6A BD 6E                  dw          ONE_PLUS, ALLOT     //      1+ allot
1013+ 74A6                                                              // else
1014+ 74A6 CC 63                        dw      BRANCH
1015+ 74A8 08 00                        dw      Dot_C_Endif - $
1016+ 74AA              Dot_C_Else:
1017+ 74AA FC 73 11 72                  dw          WORD, COUNT, TYPE   //      word count type
1017+ 74AE 37 72
1018+ 74B0              Dot_C_Endif:                                    // endif
1019+ 74B0 4F 69                        dw      EXIT                    ;
1020+ 74B2
1021+ 74B2              //  ______________________________________________________________________
1022+ 74B2              //
1023+ 74B2              // ."           c --
1024+ 74B2                              Colon_Def DOT_QUOTE,  '."', is_immediate
1024+ 74B2             >                New_Def  DOT_QUOTE, '."', Enter_Ptr, is_immediate ; ok
1024+ 74B2             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1024+ 74B2             >
1024+ 74B2             >                // dummy db directives used to calculate length of namec
1024+ 74B2 2E 22       >                db      '."'
1024+ 74B4             >len_NFA         defl    $ - temp_NFA
1024+ 74B4             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1024+ 74B2             >
1024+ 74B2 C2          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
1024+ 74B3 2E 22       >                db      '."'               // name string in 7-bit ascii, but
1024+ 74B5             >                org     $-1                 // alter last byte of Name just above to set
1024+ 74B4 A2          >                db      {b $} | END_BIT     // msb as name end
1024+ 74B5             >
1024+ 74B5 8B 74       >                dw      last_NFA            // Link to previous definition Name
1024+ 74B7             >DOT_QUOTE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1024+ 74B7 53 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
1024+ 74B9             >                else
1024+ 74B9 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
1024+ 74B9             >                endif           ; ok        // for other definitions it "points" the correct handler
1024+ 74B9             >                // Use of "; ok" to suppress "warning[fwdref]"
1024+ 74B9             >
1024+ 74B9             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1025+ 74B9 A9 63 22 00                  dw      LIT, DQUOTE_CHAR        // [char] "
1026+ 74BD 90 74                        dw      DOT_C                   // [compile] .c
1027+ 74BF 4F 69                        dw      EXIT                    // ; immediate
1028+ 74C1
1029+ 74C1              //  ______________________________________________________________________
1030+ 74C1              //
1031+ 74C1              // .(           c --
1032+ 74C1                              Colon_Def DOT_BRACKET,  ".(", is_immediate
1032+ 74C1             >                New_Def  DOT_BRACKET, ".(", Enter_Ptr, is_immediate ; ok
1032+ 74C1             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1032+ 74C1             >
1032+ 74C1             >                // dummy db directives used to calculate length of namec
1032+ 74C1 2E 28       >                db      ".("
1032+ 74C3             >len_NFA         defl    $ - temp_NFA
1032+ 74C3             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1032+ 74C1             >
1032+ 74C1 C2          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
1032+ 74C2 2E 28       >                db      ".("               // name string in 7-bit ascii, but
1032+ 74C4             >                org     $-1                 // alter last byte of Name just above to set
1032+ 74C3 A8          >                db      {b $} | END_BIT     // msb as name end
1032+ 74C4             >
1032+ 74C4 B2 74       >                dw      last_NFA            // Link to previous definition Name
1032+ 74C6             >DOT_BRACKET:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1032+ 74C6 53 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
1032+ 74C8             >                else
1032+ 74C8 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
1032+ 74C8             >                endif           ; ok        // for other definitions it "points" the correct handler
1032+ 74C8             >                // Use of "; ok" to suppress "warning[fwdref]"
1032+ 74C8             >
1032+ 74C8             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1033+ 74C8 A9 63 29 00                  dw      LIT, ")"                // [char] )
1034+ 74CC 90 74                        dw      DOT_C                   // [compile] .c
1035+ 74CE 4F 69                        dw      EXIT                    // ; immediate
1036+ 74D0
1037+ 74D0              //  ______________________________________________________________________
1038+ 74D0              //
1039+ 74D0              // (sgn)        a -- a f
1040+ 74D0              // determines if char in addr a is a sign (+ or -), and in that case increments
1041+ 74D0              // a flag. Returns f as the sign, true for negative, false for positive.
1042+ 74D0              // called by NUMBER and (EXP)
1043+ 74D0                              Colon_Def CSGN,  "(SGN)", is_normal
1043+ 74D0             >                New_Def  CSGN, "(SGN)", Enter_Ptr, is_normal ; ok
1043+ 74D0             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1043+ 74D0             >
1043+ 74D0             >                // dummy db directives used to calculate length of namec
1043+ 74D0 28 53 47 4E >                db      "(SGN)"
1043+ 74D4 29          >
1043+ 74D5             >len_NFA         defl    $ - temp_NFA
1043+ 74D5             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1043+ 74D0             >
1043+ 74D0 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1043+ 74D1 28 53 47 4E >                db      "(SGN)"               // name string in 7-bit ascii, but
1043+ 74D5 29          >
1043+ 74D6             >                org     $-1                 // alter last byte of Name just above to set
1043+ 74D5 A9          >                db      {b $} | END_BIT     // msb as name end
1043+ 74D6             >
1043+ 74D6 C1 74       >                dw      last_NFA            // Link to previous definition Name
1043+ 74D8             >CSGN:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1043+ 74D8 53 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
1043+ 74DA             >                else
1043+ 74DA ~           >                dw      $ + 2   ; ok        // is pointed by CFA
1043+ 74DA             >                endif           ; ok        // for other definitions it "points" the correct handler
1043+ 74DA             >                // Use of "; ok" to suppress "warning[fwdref]"
1043+ 74DA             >
1043+ 74DA             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1044+ 74DA D5 6A 16 6A                  dw      DUP, ONE_PLUS, CFETCH   // dup 1+ c@
1044+ 74DE 83 6B
1045+ 74E0 D5 6A A9 63                  dw      DUP, LIT, "-", EQUALS   // dup [char] - =
1045+ 74E4 2D 00 0E 6F
1046+ 74E8                                                              // if
1047+ 74E8 E3 63                        dw      ZBRANCH
1048+ 74EA 12 00                        dw      CSgn_Else_0 - $
1049+ 74EC A0 6A                        dw          DROP                //      drop
1050+ 74EE 16 6A                        dw          ONE_PLUS            //      1+
1051+ 74F0 D6 6C 2C 6E                  dw          ONE, DPL, PLUSSTORE //      1 dpl +!
1051+ 74F4 45 6B
1052+ 74F6 D6 6C                        dw          ONE                 //      1
1053+ 74F8                                                              // else
1054+ 74F8 CC 63                        dw      BRANCH
1055+ 74FA 16 00                        dw      CSgn_Endif_0 - $
1056+ 74FC              CSgn_Else_0:
1057+ 74FC A9 63 2B 00                  dw          LIT, "+", EQUALS    //      [char] + =
1057+ 7500 0E 6F
1058+ 7502                                                              //      if
1059+ 7502 E3 63                        dw          ZBRANCH
1060+ 7504 0A 00                        dw          CSgn_Endif_1 - $
1061+ 7506 16 6A                        dw              ONE_PLUS        //          1+
1062+ 7508 D6 6C 2C 6E                  dw              ONE, DPL        //          1 dpl
1063+ 750C 45 6B                        dw              PLUSSTORE       //          +!
1064+ 750E              CSgn_Endif_1                                    //      endif
1065+ 750E CE 6C                        dw          ZERO                //      0
1066+ 7510              CSgn_Endif_0:                                   // endif
1067+ 7510 4F 69                        dw      EXIT
1068+ 7512
1069+ 7512              //  ______________________________________________________________________
1070+ 7512              //
1071+ 7512              // (number)     d a -- d1 a1
1072+ 7512              // using the current BASE parse characters stored in address a
1073+ 7512              // accumulating a double precision integer d
1074+ 7512              // the process stops at the first not-convertible character
1075+ 7512              // A double-number is kept in CPU registers as HLDE.
1076+ 7512              // On the stack a double number is treated as two single numbers
1077+ 7512              // where HL is on the top of the stack and DE is the second from top,
1078+ 7512              // so in the stack memory it appears as LHED.
1079+ 7512              // Instead, in 2VARIABLE a double number is stored as EDLH.
1080+ 7512                              Colon_Def CNUMBER,  "(NUMBER)", is_normal
1080+ 7512             >                New_Def  CNUMBER, "(NUMBER)", Enter_Ptr, is_normal ; ok
1080+ 7512             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1080+ 7512             >
1080+ 7512             >                // dummy db directives used to calculate length of namec
1080+ 7512 28 4E 55 4D >                db      "(NUMBER)"
1080+ 7516 42 45 52 29 >
1080+ 751A             >len_NFA         defl    $ - temp_NFA
1080+ 751A             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1080+ 7512             >
1080+ 7512 88          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1080+ 7513 28 4E 55 4D >                db      "(NUMBER)"               // name string in 7-bit ascii, but
1080+ 7517 42 45 52 29 >
1080+ 751B             >                org     $-1                 // alter last byte of Name just above to set
1080+ 751A A9          >                db      {b $} | END_BIT     // msb as name end
1080+ 751B             >
1080+ 751B D0 74       >                dw      last_NFA            // Link to previous definition Name
1080+ 751D             >CNUMBER:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1080+ 751D 53 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
1080+ 751F             >                else
1080+ 751F ~           >                dw      $ + 2   ; ok        // is pointed by CFA
1080+ 751F             >                endif           ; ok        // for other definitions it "points" the correct handler
1080+ 751F             >                // Use of "; ok" to suppress "warning[fwdref]"
1080+ 751F             >
1080+ 751F             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1081+ 751F                                                              // begin
1082+ 751F              CNumber_Begin:
1083+ 751F 16 6A                        dw          ONE_PLUS            //      1+
1084+ 7521 D5 6A 7D 69                  dw          DUP, TO_R           //      dup >r
1085+ 7525 83 6B                        dw          CFETCH              //      @
1086+ 7527 23 6E 68 6B                  dw          BASE, FETCH         //      base @
1087+ 752B 97 64                        dw          DIGIT               //      digit
1088+ 752D                                                              // while
1089+ 752D E3 63                        dw      ZBRANCH
1090+ 752F 2C 00                        dw      CNumber_While_end - $
1091+ 7531 C8 6A                        dw          SWAP                //      swap
1092+ 7533 23 6E 68 6B                  dw          BASE, FETCH         //      base @
1093+ 7537 70 68                        dw          UM_MUL              //      um*
1094+ 7539 A0 6A E2 6A                  dw          DROP, ROT           //      drop rot
1095+ 753D 23 6E 68 6B                  dw          BASE, FETCH         //      base @
1096+ 7541 70 68                        dw          UM_MUL              //      um*
1097+ 7543 02 6A                        dw          DPLUS               //      d+
1098+ 7545 2C 6E 68 6B                  dw          DPL, FETCH          //      dpl @
1099+ 7549 16 6A                        dw          ONE_PLUS            //      1+
1100+ 754B                                                              //      if
1101+ 754B E3 63                        dw          ZBRANCH
1102+ 754D 08 00                        dw          CNumber_Endif - $
1103+ 754F D6 6C 2C 6E                  dw              ONE, DPL        //          1 dpl
1104+ 7553 45 6B                        dw              PLUSSTORE       //          +!
1105+ 7555              CNumber_Endif:                                  //      endif
1106+ 7555 91 69                        dw             R_TO             //      r>  ( balance rp )
1107+ 7557 CC 63                        dw      BRANCH
1108+ 7559 C6 FF                        dw      CNumber_Begin - $
1109+ 755B              CNumber_While_end:                              // repeat
1110+ 755B 91 69                        dw      R_TO                    // r>  ( balance rp on exit while-repeat )
1111+ 755D 4F 69                        dw      EXIT                    // ;
1112+ 755F
1113+ 755F              //  ______________________________________________________________________
1114+ 755F              //
1115+ 755F              // number       a -- d
1116+ 755F                              Colon_Def NUMBER,  "NUMBER", is_normal
1116+ 755F             >                New_Def  NUMBER, "NUMBER", Enter_Ptr, is_normal ; ok
1116+ 755F             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1116+ 755F             >
1116+ 755F             >                // dummy db directives used to calculate length of namec
1116+ 755F 4E 55 4D 42 >                db      "NUMBER"
1116+ 7563 45 52       >
1116+ 7565             >len_NFA         defl    $ - temp_NFA
1116+ 7565             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1116+ 755F             >
1116+ 755F 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1116+ 7560 4E 55 4D 42 >                db      "NUMBER"               // name string in 7-bit ascii, but
1116+ 7564 45 52       >
1116+ 7566             >                org     $-1                 // alter last byte of Name just above to set
1116+ 7565 D2          >                db      {b $} | END_BIT     // msb as name end
1116+ 7566             >
1116+ 7566 12 75       >                dw      last_NFA            // Link to previous definition Name
1116+ 7568             >NUMBER:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1116+ 7568 53 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
1116+ 756A             >                else
1116+ 756A ~           >                dw      $ + 2   ; ok        // is pointed by CFA
1116+ 756A             >                endif           ; ok        // for other definitions it "points" the correct handler
1116+ 756A             >                // Use of "; ok" to suppress "warning[fwdref]"
1116+ 756A             >
1116+ 756A             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1117+ 756A CE 6C CE 6C                  dw      ZERO, ZERO              // 0 0
1118+ 756E E2 6A                        dw      ROT                     // rot
1119+ 7570 D8 74 7D 69                  dw      CSGN, TO_R              // (sgn) >r
1120+ 7574 EF 6C 2C 6E                  dw      NEG_ONE, DPL, STORE     // -1 dpl !
1120+ 7578 75 6B
1121+ 757A 1D 75                        dw      CNUMBER                 // (number)
1122+ 757C D5 6A 83 6B                  dw      DUP, CFETCH             // dup c@
1123+ 7580 A9 63 2E 00                  dw      LIT, 46, EQUALS         // [char] . =  ( decimal point )
1123+ 7584 0E 6F
1124+ 7586                                                              // if
1125+ 7586 E3 63                        dw      ZBRANCH
1126+ 7588 0A 00                        dw      Number_Endif_1 - $
1127+ 758A CE 6C 2C 6E                  dw          ZERO, DPL, STORE    //      0 dpl !
1127+ 758E 75 6B
1128+ 7590 1D 75                        dw          CNUMBER             //      (number)
1129+ 7592              Number_Endif_1:                                 // endif
1130+ 7592 83 6B F8 6C                  dw      CFETCH, BL              // c@ bl
1131+ 7596 00 6F CE 6C                  dw      SUBTRACT, ZERO, QERROR  // - 0 ?error
1131+ 759A 77 70
1132+ 759C 91 69                        dw      R_TO                    // r>
1133+ 759E                                                              // if
1134+ 759E E3 63                        dw      ZBRANCH
1135+ 75A0 04 00                        dw      Number_Endif_2 - $
1136+ 75A2 76 6A                        dw          DMINUS              //      dminus
1137+ 75A4              Number_Endif_2:                                 // endif
1138+ 75A4 4F 69                        dw      EXIT                    // ;
1139+ 75A6
1140+ 75A6              //  ______________________________________________________________________
1141+ 75A6              //
1142+ 75A6              // -find        a -- d
1143+ 75A6                              Colon_Def LFIND,  "-FIND", is_normal
1143+ 75A6             >                New_Def  LFIND, "-FIND", Enter_Ptr, is_normal ; ok
1143+ 75A6             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1143+ 75A6             >
1143+ 75A6             >                // dummy db directives used to calculate length of namec
1143+ 75A6 2D 46 49 4E >                db      "-FIND"
1143+ 75AA 44          >
1143+ 75AB             >len_NFA         defl    $ - temp_NFA
1143+ 75AB             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1143+ 75A6             >
1143+ 75A6 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1143+ 75A7 2D 46 49 4E >                db      "-FIND"               // name string in 7-bit ascii, but
1143+ 75AB 44          >
1143+ 75AC             >                org     $-1                 // alter last byte of Name just above to set
1143+ 75AB C4          >                db      {b $} | END_BIT     // msb as name end
1143+ 75AC             >
1143+ 75AC 5F 75       >                dw      last_NFA            // Link to previous definition Name
1143+ 75AE             >LFIND:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1143+ 75AE 53 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
1143+ 75B0             >                else
1143+ 75B0 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
1143+ 75B0             >                endif           ; ok        // for other definitions it "points" the correct handler
1143+ 75B0             >                // Use of "; ok" to suppress "warning[fwdref]"
1143+ 75B0             >
1143+ 75B0             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1144+ 75B0 F8 6C FC 73                  dw      BL, WORD                // bl word
1145+ 75B4 01 6E 68 6B                  dw      CONTEXT, FETCH, FETCH   // context @ @
1145+ 75B8 68 6B
1146+ 75BA 0C 65                        dw      C_FIND                  // (find)
1147+ 75BC 86 6F                        dw      QDUP                    // ?dup
1148+ 75BE B2 69                        dw      ZEQUAL                  // 0=
1149+ 75C0                                                              // if
1150+ 75C0 E3 63                        dw      ZBRANCH
1151+ 75C2 08 00                        dw      LFind_Endif - $
1152+ 75C4 AD 6E                        dw          HERE                //      here
1153+ 75C6 F3 6F                        dw          LATEST              //      latest
1154+ 75C8 0C 65                        dw          C_FIND              //      (find)
1155+ 75CA              LFind_Endif:                                    // endif
1156+ 75CA 4F 69                        dw      EXIT                    // ;
1157+ 75CC
1158+ 75CC              //  ______________________________________________________________________
1159+ 75CC              //
1160+ 75CC              // (abort)      --
1161+ 75CC                              Colon_Def CABORT,  "(ABORT)", is_normal
1161+ 75CC             >                New_Def  CABORT, "(ABORT)", Enter_Ptr, is_normal ; ok
1161+ 75CC             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1161+ 75CC             >
1161+ 75CC             >                // dummy db directives used to calculate length of namec
1161+ 75CC 28 41 42 4F >                db      "(ABORT)"
1161+ 75D0 52 54 29    >
1161+ 75D3             >len_NFA         defl    $ - temp_NFA
1161+ 75D3             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1161+ 75CC             >
1161+ 75CC 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1161+ 75CD 28 41 42 4F >                db      "(ABORT)"               // name string in 7-bit ascii, but
1161+ 75D1 52 54 29    >
1161+ 75D4             >                org     $-1                 // alter last byte of Name just above to set
1161+ 75D3 A9          >                db      {b $} | END_BIT     // msb as name end
1161+ 75D4             >
1161+ 75D4 A6 75       >                dw      last_NFA            // Link to previous definition Name
1161+ 75D6             >CABORT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1161+ 75D6 53 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
1161+ 75D8             >                else
1161+ 75D8 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
1161+ 75D8             >                endif           ; ok        // for other definitions it "points" the correct handler
1161+ 75D8             >                // Use of "; ok" to suppress "warning[fwdref]"
1161+ 75D8             >
1161+ 75D8             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1162+ 75D8 9D 78                        dw      ABORT                   // abort
1163+ 75DA 4F 69                        dw      EXIT                    // ;
1164+ 75DC
1165+ 75DC              //  ______________________________________________________________________
1166+ 75DC              //
1167+ 75DC              // error        n --
1168+ 75DC              // raise an error
1169+ 75DC              // if WARNING is 0, prints "MSG#n".
1170+ 75DC              // if WARNING is 1, prints line n of screen 4.
1171+ 75DC              // if WARNING is -1 does (ABORT) that normally does ABORT
1172+ 75DC              // value can be negative or beyond block 4.
1173+ 75DC                              Colon_Def ERROR,  "ERROR", is_normal
1173+ 75DC             >                New_Def  ERROR, "ERROR", Enter_Ptr, is_normal ; ok
1173+ 75DC             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1173+ 75DC             >
1173+ 75DC             >                // dummy db directives used to calculate length of namec
1173+ 75DC 45 52 52 4F >                db      "ERROR"
1173+ 75E0 52          >
1173+ 75E1             >len_NFA         defl    $ - temp_NFA
1173+ 75E1             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1173+ 75DC             >
1173+ 75DC 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1173+ 75DD 45 52 52 4F >                db      "ERROR"               // name string in 7-bit ascii, but
1173+ 75E1 52          >
1173+ 75E2             >                org     $-1                 // alter last byte of Name just above to set
1173+ 75E1 D2          >                db      {b $} | END_BIT     // msb as name end
1173+ 75E2             >
1173+ 75E2 CC 75       >                dw      last_NFA            // Link to previous definition Name
1173+ 75E4             >ERROR:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1173+ 75E4 53 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
1173+ 75E6             >                else
1173+ 75E6 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
1173+ 75E6             >                endif           ; ok        // for other definitions it "points" the correct handler
1173+ 75E6             >                // Use of "; ok" to suppress "warning[fwdref]"
1173+ 75E6             >
1173+ 75E6             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1174+ 75E6 79 6D 68 6B                  dw      WARNING, FETCH, ZLESS   // warning @ 0<
1174+ 75EA CD 69
1175+ 75EC                                                              // if
1176+ 75EC E3 63                        dw      ZBRANCH
1177+ 75EE 04 00                        dw      Error_Endif_1 - $
1178+ 75F0 D6 75                        dw          CABORT              //      (abort)
1179+ 75F2              Error_Endif_1:                                  // endif
1180+ 75F2 AD 6E 11 72                  dw      HERE, COUNT, TYPE       // here count type
1180+ 75F6 37 72
1181+ 75F8 4B 74                        dw      C_DOT_QUOTE             // .( ? )
1182+ 75FA 02 3F 20                     db      2, "? "
1183+ 75FD CE 7A                        dw      MESSAGE                 // message  ( forward )
1184+ 75FF 50 6D 68 6B                  dw      S0, FETCH, SPSTORE      // s0 @ sp!
1184+ 7603 26 69
1185+ 7605 CD 6D 68 6B                  dw      BLK, FETCH, QDUP        // blk @ ?dup
1185+ 7609 86 6F
1186+ 760B                                                              // if
1187+ 760B E3 63                        dw      ZBRANCH
1188+ 760D 08 00                        dw      Error_Endif_2 - $
1189+ 760F D6 6D 68 6B                  dw          TO_IN, FETCH, SWAP  //      >in @ swap
1189+ 7613 C8 6A
1190+ 7615              Error_Endif_2:                                  // endif
1191+ 7615 5C 78                        dw      QUIT                    // quit ( forward )
1192+ 7617 4F 69                        dw      EXIT                    // ;
1193+ 7619              //  ______________________________________________________________________
1194+ 7619              //
1195+ 7619              // id.          nfa --
1196+ 7619                              Colon_Def ID_DOT,  "ID.", is_normal
1196+ 7619             >                New_Def  ID_DOT, "ID.", Enter_Ptr, is_normal ; ok
1196+ 7619             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1196+ 7619             >
1196+ 7619             >                // dummy db directives used to calculate length of namec
1196+ 7619 49 44 2E    >                db      "ID."
1196+ 761C             >len_NFA         defl    $ - temp_NFA
1196+ 761C             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1196+ 7619             >
1196+ 7619 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1196+ 761A 49 44 2E    >                db      "ID."               // name string in 7-bit ascii, but
1196+ 761D             >                org     $-1                 // alter last byte of Name just above to set
1196+ 761C AE          >                db      {b $} | END_BIT     // msb as name end
1196+ 761D             >
1196+ 761D DC 75       >                dw      last_NFA            // Link to previous definition Name
1196+ 761F             >ID_DOT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1196+ 761F 53 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
1196+ 7621             >                else
1196+ 7621 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
1196+ 7621             >                endif           ; ok        // for other definitions it "points" the correct handler
1196+ 7621             >                // Use of "; ok" to suppress "warning[fwdref]"
1196+ 7621             >
1196+ 7621             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1197+ 7621 E9 73 A9 63                  dw      PAD, LIT, 32, LIT, 96   // pad 32 96
1197+ 7625 20 00 A9 63
1197+ 7629 60 00
1198+ 762B 99 73                        dw      FILL                    // fill
1199+ 762D D5 6A 31 70                  dw      DUP, PFA, LFA           // dup pfa lfa
1199+ 7631 03 70
1200+ 7633 90 6A 00 6F                  dw      OVER, SUBTRACT          // over -
1201+ 7637 E9 73 C8 6A                  dw      PAD, SWAP               // pad swap
1202+ 763B 3D 68                        dw      CMOVE                   // cmove
1203+ 763D E9 73 11 72                  dw      PAD, COUNT, LIT, $1F    // pad count 01F
1203+ 7641 A9 63 1F 00
1204+ 7645 DF 68                        dw      AND_OP                  // and  ( use only lower bits )
1205+ 7647 37 72 BD 6F                  dw      TYPE, SPACE             // type
1206+ 764B 4F 69                        dw      EXIT                    // ;
1207+ 764D
1208+ 764D              //  ______________________________________________________________________
1209+ 764D              //
1210+ 764D              // code         -- cccc
1211+ 764D                              Colon_Def CODE,  "CODE", is_normal
1211+ 764D             >                New_Def  CODE, "CODE", Enter_Ptr, is_normal ; ok
1211+ 764D             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1211+ 764D             >
1211+ 764D             >                // dummy db directives used to calculate length of namec
1211+ 764D 43 4F 44 45 >                db      "CODE"
1211+ 7651             >len_NFA         defl    $ - temp_NFA
1211+ 7651             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1211+ 764D             >
1211+ 764D 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1211+ 764E 43 4F 44 45 >                db      "CODE"               // name string in 7-bit ascii, but
1211+ 7652             >                org     $-1                 // alter last byte of Name just above to set
1211+ 7651 C5          >                db      {b $} | END_BIT     // msb as name end
1211+ 7652             >
1211+ 7652 19 76       >                dw      last_NFA            // Link to previous definition Name
1211+ 7654             >CODE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1211+ 7654 53 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
1211+ 7656             >                else
1211+ 7656 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
1211+ 7656             >                endif           ; ok        // for other definitions it "points" the correct handler
1211+ 7656             >                // Use of "; ok" to suppress "warning[fwdref]"
1211+ 7656             >
1211+ 7656             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1212+ 7656 AE 75                        dw      LFIND                   // -find
1213+ 7658                                                              // if
1214+ 7658 E3 63                        dw      ZBRANCH
1215+ 765A 10 00                        dw      Code_Endif - $
1216+ 765C A0 6A                        dw          DROP                //      drop
1217+ 765E 55 70 1F 76                  dw          TO_NAME, ID_DOT     //      >name id.
1218+ 7662 A9 63 04 00                  dw          LIT, 4, MESSAGE     //      4 message
1218+ 7666 CE 7A
1219+ 7668 BD 6F                        dw          SPACE               //      space
1220+ 766A              Code_Endif:                                     // endif
1221+ 766A AD 6E                        dw      HERE                    // here
1222+ 766C                                                              // ( ---- here begins NFA ---- )
1223+ 766C D5 6A 83 6B                  dw      DUP, CFETCH             // dup c@
1224+ 7670 6C 6D 68 6B                  dw      WIDTH, FETCH, MIN       // width @ min  ( max 31 character length )
1224+ 7674 59 6F
1225+ 7676 16 6A BD 6E                  dw      ONE_PLUS, ALLOT         // 1+ allot
1226+ 767A D5 6A                        dw      DUP                     // dup
1227+ 767C A9 63                        dw      LIT
1228+ 767E A0 00                        dw      SMUDGE_BIT | END_BIT    // 160
1229+ 7680 5B 6B                        dw      TOGGLE                  // toggle
1230+ 7682 AD 6E 22 6A                  dw      HERE, ONE_SUBTRACT     // here 1- ( last character )
1231+ 7686 A9 63 80 00                  dw      LIT, END_BIT, TOGGLE    // 128 toggle
1231+ 768A 5B 6B
1232+ 768C                                                              // ( ---- here is LFA ---- )
1233+ 768C F3 6F C9 6E                  dw      LATEST, COMMA           // latest ,
1234+ 7690 0E 6E 68 6B                  dw      CURRENT, FETCH, STORE   // current @ ! ( save this word as the latest )
1234+ 7694 75 6B
1235+ 7696 AD 6E 3E 6A                  dw      HERE, CELL_PLUS, COMMA  // ( CFA point PFA )
1235+ 769A C9 6E
1236+ 769C 4F 69                        dw      EXIT                    // ;
1237+ 769E
1238+ 769E              //  ______________________________________________________________________
1239+ 769E              //
1240+ 769E              // create       -- cccc     ( compile time )
1241+ 769E              //              -- a        ( run time )
1242+ 769E                              Colon_Def CREATE,  "CREATE", is_normal
1242+ 769E             >                New_Def  CREATE, "CREATE", Enter_Ptr, is_normal ; ok
1242+ 769E             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1242+ 769E             >
1242+ 769E             >                // dummy db directives used to calculate length of namec
1242+ 769E 43 52 45 41 >                db      "CREATE"
1242+ 76A2 54 45       >
1242+ 76A4             >len_NFA         defl    $ - temp_NFA
1242+ 76A4             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1242+ 769E             >
1242+ 769E 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1242+ 769F 43 52 45 41 >                db      "CREATE"               // name string in 7-bit ascii, but
1242+ 76A3 54 45       >
1242+ 76A5             >                org     $-1                 // alter last byte of Name just above to set
1242+ 76A4 C5          >                db      {b $} | END_BIT     // msb as name end
1242+ 76A5             >
1242+ 76A5 4D 76       >                dw      last_NFA            // Link to previous definition Name
1242+ 76A7             >CREATE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1242+ 76A7 53 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
1242+ 76A9             >                else
1242+ 76A9 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
1242+ 76A9             >                endif           ; ok        // for other definitions it "points" the correct handler
1242+ 76A9             >                // Use of "; ok" to suppress "warning[fwdref]"
1242+ 76A9             >
1242+ 76A9             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1243+ 76A9 54 76 56 71                  dw      CODE, SMUDGE        // code smudge
1244+ 76AD
1245+ 76AD
1246+ 76AD AC 71                        dw      C_SEMICOLON_CODE
1247+ 76AF                              // this routine is called from the call coded in CFA
1248+ 76AF              Create_Ptr:
1249+ 76AF 13                           inc     de
1250+ 76B0 D5                           push    de                  // balance TOS before overwrite it
1251+ 76B1
1252+ 76B1                              next
1252+ 76B1 DD E9       >                jp      (ix)
1253+ 76B3
1254+ 76B3              //  ______________________________________________________________________
1255+ 76B3              //
1256+ 76B3              // [compile]    -- cccc     ( compile time )
1257+ 76B3                              Colon_Def COMPILE_IMMEDIATE,  "[COMPILE]", is_immediate
1257+ 76B3             >                New_Def  COMPILE_IMMEDIATE, "[COMPILE]", Enter_Ptr, is_immediate ; ok
1257+ 76B3             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1257+ 76B3             >
1257+ 76B3             >                // dummy db directives used to calculate length of namec
1257+ 76B3 5B 43 4F 4D >                db      "[COMPILE]"
1257+ 76B7 50 49 4C 45 >
1257+ 76BB 5D          >
1257+ 76BC             >len_NFA         defl    $ - temp_NFA
1257+ 76BC             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1257+ 76B3             >
1257+ 76B3 C9          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
1257+ 76B4 5B 43 4F 4D >                db      "[COMPILE]"               // name string in 7-bit ascii, but
1257+ 76B8 50 49 4C 45 >
1257+ 76BC 5D          >
1257+ 76BD             >                org     $-1                 // alter last byte of Name just above to set
1257+ 76BC DD          >                db      {b $} | END_BIT     // msb as name end
1257+ 76BD             >
1257+ 76BD 9E 76       >                dw      last_NFA            // Link to previous definition Name
1257+ 76BF             >COMPILE_IMMEDIATE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1257+ 76BF 53 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
1257+ 76C1             >                else
1257+ 76C1 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
1257+ 76C1             >                endif           ; ok        // for other definitions it "points" the correct handler
1257+ 76C1             >                // Use of "; ok" to suppress "warning[fwdref]"
1257+ 76C1             >
1257+ 76C1             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1258+ 76C1 AE 75                        dw      LFIND                   // -find      (  cfa  b  f  )
1259+ 76C3 B2 69                        dw      ZEQUAL                  // 0=         (  cfa  b  )
1260+ 76C5 CE 6C 77 70                  dw      ZERO, QERROR            // 0 ?error
1261+ 76C9 A0 6A                        dw      DROP                    // drop       (  cfa  )
1262+ 76CB C9 6E                        dw      COMMA                   // ,
1263+ 76CD 4F 69                        dw      EXIT                    // ; immediate
1264+ 76CF
1265+ 76CF              //  ______________________________________________________________________
1266+ 76CF              //
1267+ 76CF              // literal      n --      ( compile time )
1268+ 76CF                              Colon_Def LITERAL,  "LITERAL", is_immediate
1268+ 76CF             >                New_Def  LITERAL, "LITERAL", Enter_Ptr, is_immediate ; ok
1268+ 76CF             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1268+ 76CF             >
1268+ 76CF             >                // dummy db directives used to calculate length of namec
1268+ 76CF 4C 49 54 45 >                db      "LITERAL"
1268+ 76D3 52 41 4C    >
1268+ 76D6             >len_NFA         defl    $ - temp_NFA
1268+ 76D6             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1268+ 76CF             >
1268+ 76CF C7          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
1268+ 76D0 4C 49 54 45 >                db      "LITERAL"               // name string in 7-bit ascii, but
1268+ 76D4 52 41 4C    >
1268+ 76D7             >                org     $-1                 // alter last byte of Name just above to set
1268+ 76D6 CC          >                db      {b $} | END_BIT     // msb as name end
1268+ 76D7             >
1268+ 76D7 B3 76       >                dw      last_NFA            // Link to previous definition Name
1268+ 76D9             >LITERAL:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1268+ 76D9 53 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
1268+ 76DB             >                else
1268+ 76DB ~           >                dw      $ + 2   ; ok        // is pointed by CFA
1268+ 76DB             >                endif           ; ok        // for other definitions it "points" the correct handler
1268+ 76DB             >                // Use of "; ok" to suppress "warning[fwdref]"
1268+ 76DB             >
1268+ 76DB             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1269+ 76DB 19 6E 68 6B                  dw      STATE, FETCH            // state @
1270+ 76DF                                                              // if
1271+ 76DF E3 63                        dw      ZBRANCH
1272+ 76E1 08 00                        dw      Literal_Endif - $
1273+ 76E3 0A 71 A9 63                  dw          COMPILE, LIT        //      compile lit
1274+ 76E7 C9 6E                        dw          COMMA               //      ,
1275+ 76E9              Literal_Endif:                                  // endif
1276+ 76E9 4F 69                        dw      EXIT                    // ; immediate
1277+ 76EB
1278+ 76EB              //  ______________________________________________________________________
1279+ 76EB              //
1280+ 76EB              // dliteral     n --      ( compile time )
1281+ 76EB                              Colon_Def DLITERAL,  "DLITERAL", is_immediate
1281+ 76EB             >                New_Def  DLITERAL, "DLITERAL", Enter_Ptr, is_immediate ; ok
1281+ 76EB             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1281+ 76EB             >
1281+ 76EB             >                // dummy db directives used to calculate length of namec
1281+ 76EB 44 4C 49 54 >                db      "DLITERAL"
1281+ 76EF 45 52 41 4C >
1281+ 76F3             >len_NFA         defl    $ - temp_NFA
1281+ 76F3             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1281+ 76EB             >
1281+ 76EB C8          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
1281+ 76EC 44 4C 49 54 >                db      "DLITERAL"               // name string in 7-bit ascii, but
1281+ 76F0 45 52 41 4C >
1281+ 76F4             >                org     $-1                 // alter last byte of Name just above to set
1281+ 76F3 CC          >                db      {b $} | END_BIT     // msb as name end
1281+ 76F4             >
1281+ 76F4 CF 76       >                dw      last_NFA            // Link to previous definition Name
1281+ 76F6             >DLITERAL:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1281+ 76F6 53 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
1281+ 76F8             >                else
1281+ 76F8 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
1281+ 76F8             >                endif           ; ok        // for other definitions it "points" the correct handler
1281+ 76F8             >                // Use of "; ok" to suppress "warning[fwdref]"
1281+ 76F8             >
1281+ 76F8             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1282+ 76F8 19 6E 68 6B                  dw      STATE, FETCH            // state @
1283+ 76FC                                                              // if
1284+ 76FC E3 63                        dw      ZBRANCH
1285+ 76FE 08 00                        dw      DLiteral_Endif - $
1286+ 7700 C8 6A                        dw          SWAP                //      swap
1287+ 7702 D9 76 D9 76                  dw          LITERAL,  LITERAL   //      [compile] literal [compile] literal
1288+ 7706              DLiteral_Endif:                                 // endif
1289+ 7706 4F 69                        dw      EXIT                    // ; immediate
1290+ 7708
1291+ 7708              //  ______________________________________________________________________
1292+ 7708              //
1293+ 7708              // [char]       n --      ( compile time )
1294+ 7708              // inside colon definition, gets first character from next input word
1295+ 7708              // and compiles it as literal.
1296+ 7708                              Colon_Def COMPILE_CHAR,  "[CHAR]", is_immediate
1296+ 7708             >                New_Def  COMPILE_CHAR, "[CHAR]", Enter_Ptr, is_immediate ; ok
1296+ 7708             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1296+ 7708             >
1296+ 7708             >                // dummy db directives used to calculate length of namec
1296+ 7708 5B 43 48 41 >                db      "[CHAR]"
1296+ 770C 52 5D       >
1296+ 770E             >len_NFA         defl    $ - temp_NFA
1296+ 770E             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1296+ 7708             >
1296+ 7708 C6          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
1296+ 7709 5B 43 48 41 >                db      "[CHAR]"               // name string in 7-bit ascii, but
1296+ 770D 52 5D       >
1296+ 770F             >                org     $-1                 // alter last byte of Name just above to set
1296+ 770E DD          >                db      {b $} | END_BIT     // msb as name end
1296+ 770F             >
1296+ 770F EB 76       >                dw      last_NFA            // Link to previous definition Name
1296+ 7711             >COMPILE_CHAR:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1296+ 7711 53 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
1296+ 7713             >                else
1296+ 7713 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
1296+ 7713             >                endif           ; ok        // for other definitions it "points" the correct handler
1296+ 7713             >                // Use of "; ok" to suppress "warning[fwdref]"
1296+ 7713             >
1296+ 7713             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1297+ 7713 66 74 D9 76                  dw      CHAR, LITERAL           // char [compile] literal
1298+ 7717 4F 69                        dw      EXIT                    // ; immediate
1299+ 7719
1300+ 7719              //  ______________________________________________________________________
1301+ 7719              //
1302+ 7719              // 0x00         n --      ( compile time )
1303+ 7719                              Colon_Def NUL_WORD,  $00, is_immediate
1303+ 7719             >                New_Def  NUL_WORD, $00, Enter_Ptr, is_immediate ; ok
1303+ 7719             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1303+ 7719             >
1303+ 7719             >                // dummy db directives used to calculate length of namec
1303+ 7719 00          >                db      $00
1303+ 771A             >len_NFA         defl    $ - temp_NFA
1303+ 771A             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1303+ 7719             >
1303+ 7719 C1          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
1303+ 771A 00          >                db      $00               // name string in 7-bit ascii, but
1303+ 771B             >                org     $-1                 // alter last byte of Name just above to set
1303+ 771A 80          >                db      {b $} | END_BIT     // msb as name end
1303+ 771B             >
1303+ 771B 08 77       >                dw      last_NFA            // Link to previous definition Name
1303+ 771D             >NUL_WORD:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1303+ 771D 53 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
1303+ 771F             >                else
1303+ 771F ~           >                dw      $ + 2   ; ok        // is pointed by CFA
1303+ 771F             >                endif           ; ok        // for other definitions it "points" the correct handler
1303+ 771F             >                // Use of "; ok" to suppress "warning[fwdref]"
1303+ 771F             >
1303+ 771F             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1304+ 771F CD 6D 68 6B                  dw      BLK, FETCH, ONE         // blk @ 1
1304+ 7723 D6 6C
1305+ 7725 4B 6F                        dw      GREATER                 // > if
1306+ 7727                                                              // if
1307+ 7727 E3 63                        dw      ZBRANCH
1308+ 7729 28 00                        dw      Nul_Else_1 - $
1309+ 772B D6 6C CD 6D                  dw          ONE, BLK, PLUSSTORE //      1 blk +!
1309+ 772F 45 6B
1310+ 7731 CE 6C D6 6D                  dw          ZERO, TO_IN, STORE  //      0 >in !
1310+ 7735 75 6B
1311+ 7737 CD 6D 68 6B                  dw          BLK, FETCH          //      blk @
1312+ 773B 1A 6D                        dw          BSCR                //      b/scr
1313+ 773D 22 6A                        dw          ONE_SUBTRACT        //      1 -
1314+ 773F DF 68                        dw          AND_OP              //      and  ( this is tricky )
1315+ 7741 B2 69                        dw          ZEQUAL              //      0=
1316+ 7743                                                              //      if
1317+ 7743 E3 63                        dw          ZBRANCH
1318+ 7745 08 00                        dw          Nul_Endif_2 - $
1319+ 7747 A9 70                        dw              QEXEC           //          ?exec
1320+ 7749 91 69 A0 6A                  dw              R_TO, DROP      //          r> drop
1321+ 774D              Nul_Endif_2:                                    //      endif
1322+ 774D CC 63                        dw      BRANCH
1323+ 774F 06 00                        dw      Nul_Endif_1 - $
1324+ 7751              Nul_Else_1:                                     // else
1325+ 7751 91 69 A0 6A                  dw          R_TO, DROP          //      r> drop
1326+ 7755              Nul_Endif_1:                                    // endif
1327+ 7755 4F 69                        dw      EXIT                    // ;
1328+ 7757
1329+ 7757              //  ______________________________________________________________________
1330+ 7757              //
1331+ 7757              // ?stack       --
1332+ 7757              // Raise error #1 if stack is empty and you pop it
1333+ 7757              // Raise error #7 if stack is full.
1334+ 7757              // This means SP must always stay between HERE and FFFF
1335+ 7757              // For 128K BANK paging purpose SP must be <= BFE0 and 50 words room
1336+ 7757              // for Next 8K MMU paging this is $DOE8
1337+ 7757                              Colon_Def QSTACK, "?STACK", is_normal
1337+ 7757             >                New_Def  QSTACK, "?STACK", Enter_Ptr, is_normal ; ok
1337+ 7757             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1337+ 7757             >
1337+ 7757             >                // dummy db directives used to calculate length of namec
1337+ 7757 3F 53 54 41 >                db      "?STACK"
1337+ 775B 43 4B       >
1337+ 775D             >len_NFA         defl    $ - temp_NFA
1337+ 775D             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1337+ 7757             >
1337+ 7757 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1337+ 7758 3F 53 54 41 >                db      "?STACK"               // name string in 7-bit ascii, but
1337+ 775C 43 4B       >
1337+ 775E             >                org     $-1                 // alter last byte of Name just above to set
1337+ 775D CB          >                db      {b $} | END_BIT     // msb as name end
1337+ 775E             >
1337+ 775E 19 77       >                dw      last_NFA            // Link to previous definition Name
1337+ 7760             >QSTACK:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1337+ 7760 53 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
1337+ 7762             >                else
1337+ 7762 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
1337+ 7762             >                endif           ; ok        // for other definitions it "points" the correct handler
1337+ 7762             >                // Use of "; ok" to suppress "warning[fwdref]"
1337+ 7762             >
1337+ 7762             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1338+ 7762 17 69                        dw      SPFETCH                 // sp@
1339+ 7764 50 6D 68 6B                  dw      S0, FETCH               // s0 @
1340+ 7768 C8 6A 1B 6F                  dw      SWAP, ULESS             // swap u<
1341+ 776C D6 6C 77 70                  dw      ONE, QERROR             // 1 ?error
1342+ 7770 AD 6E                        dw      HERE                    // here
1343+ 7772 50 6D 68 6B                  dw      S0, FETCH, LESS         // s0 @ <
1343+ 7776 2F 6F
1344+ 7778                                                              // if
1345+ 7778 E3 63                        dw      ZBRANCH
1346+ 777A 14 00                        dw      QStack_Endif - $
1347+ 777C 17 69                        dw          SPFETCH             //      sp@
1348+ 777E AD 6E A9 63                  dw          HERE, LIT, 128      //      here 128
1348+ 7782 80 00
1349+ 7784 F5 69 1B 6F                  dw          PLUS, ULESS         //      plus u<
1350+ 7788 A9 63 07 00                  dw          LIT, 7, QERROR      //      7 Cerror
1350+ 778C 77 70
1351+ 778E              QStack_Endif:                                   // endif
1352+ 778E 4F 69                        dw      EXIT                    // ;
1353+ 7790
1354+ 7790
# file closed: C:\Zx\CSpect\Projects\vForth15_INDIRECT/source/L1.asm
 111  7790                              include "L2.asm"
# file opened: C:\Zx\CSpect\Projects\vForth15_INDIRECT/source/L2.asm
   1+ 7790              //  ______________________________________________________________________
   2+ 7790              //
   3+ 7790              //  L2.asm
   4+ 7790              //
   5+ 7790              //  Level-2
   6+ 7790              //  the Forth interpreter, vocabulary, cold/warm start and quit from Forth.
   7+ 7790              //  ______________________________________________________________________
   8+ 7790
   9+ 7790
  10+ 7790              //  ______________________________________________________________________
  11+ 7790              //
  12+ 7790              // interpret    --
  13+ 7790              // This is the text interpreter.
  14+ 7790              // It executes or compiles, depending on STATE, the text coming from
  15+ 7790              // current input stream.
  16+ 7790              // If the word search fails after parsing CONTEXT and CURRENT vocabulary,
  17+ 7790              // the word is interpreted as numeric and converted, using current BASE,
  18+ 7790              // leaving on top of stack a single or double precision number, depending
  19+ 7790              // on the presence of a decimal point.
  20+ 7790              // If the number conversion fails, the terminal is notified with ? followed
  21+ 7790              // by the offending word.
  22+ 7790                              Colon_Def INTERPRET, "INTERPRET", is_normal
  22+ 7790             >                New_Def  INTERPRET, "INTERPRET", Enter_Ptr, is_normal ; ok
  22+ 7790             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  22+ 7790             >
  22+ 7790             >                // dummy db directives used to calculate length of namec
  22+ 7790 49 4E 54 45 >                db      "INTERPRET"
  22+ 7794 52 50 52 45 >
  22+ 7798 54          >
  22+ 7799             >len_NFA         defl    $ - temp_NFA
  22+ 7799             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  22+ 7790             >
  22+ 7790 89          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  22+ 7791 49 4E 54 45 >                db      "INTERPRET"               // name string in 7-bit ascii, but
  22+ 7795 52 50 52 45 >
  22+ 7799 54          >
  22+ 779A             >                org     $-1                 // alter last byte of Name just above to set
  22+ 7799 D4          >                db      {b $} | END_BIT     // msb as name end
  22+ 779A             >
  22+ 779A 57 77       >                dw      last_NFA            // Link to previous definition Name
  22+ 779C             >INTERPRET:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
  22+ 779C 53 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
  22+ 779E             >                else
  22+ 779E ~           >                dw      $ + 2   ; ok        // is pointed by CFA
  22+ 779E             >                endif           ; ok        // for other definitions it "points" the correct handler
  22+ 779E             >                // Use of "; ok" to suppress "warning[fwdref]"
  22+ 779E             >
  22+ 779E             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  23+ 779E
  24+ 779E              Interpret_Begin:                                        // begin
  25+ 779E AE 75                        dw          LFIND                       //      -find
  26+ 77A0                                                                      //      if
  27+ 77A0 E3 63                        dw          ZBRANCH
  28+ 77A2 1A 00                        dw          Interpret_Else_1 - $
  29+ 77A4 19 6E 68 6B                  dw              STATE, FETCH, LESS      //          state @ <
  29+ 77A8 2F 6F
  30+ 77AA                                                                      //          if
  31+ 77AA E3 63                        dw              ZBRANCH
  32+ 77AC 08 00                        dw              Interpret_Else_2 - $
  33+ 77AE 27 71                        dw                  COMPILE_XT          //              compile,
  34+ 77B0                                                                      //          else
  35+ 77B0 CC 63                        dw              BRANCH
  36+ 77B2 06 00                        dw              Interpret_Endif_2 - $
  37+ 77B4              Interpret_Else_2:
  38+ 77B4 BE 63 7B 6C                  dw                  EXECUTE, NOOP       //              execute nooop
  39+ 77B8              Interpret_Endif_2:                                      //          endif
  40+ 77B8                                                                      //      else
  41+ 77B8 CC 63                        dw          BRANCH
  42+ 77BA 1A 00                        dw          Interpret_Endif_1 - $
  43+ 77BC              Interpret_Else_1:
  44+ 77BC AD 6E 68 75                  dw              HERE, NUMBER            //          here number
  45+ 77C0 2C 6E 68 6B                  dw              DPL, FETCH, ONE_PLUS    //          dpl @ 1+
  45+ 77C4 16 6A
  46+ 77C6                                                                      //          if
  47+ 77C6 E3 63                        dw              ZBRANCH
  48+ 77C8 08 00                        dw              Interpret_Else_3 - $
  49+ 77CA              //              dw                  NMODE, FETCH        //              nmode @
  50+ 77CA              //                                                      //              if
  51+ 77CA              //              dw                  ZBRANCH
  52+ 77CA              //              dw                  Interpret_Endif_4 - $
  53+ 77CA              //              dw                      ONE, ZERO       //                  1 0
  54+ 77CA              //              dw                      TWO_DROP        //                  2drop
  55+ 77CA              //Interpret_Endif_4:                                      //              endif
  56+ 77CA F6 76                        dw                  DLITERAL            //              [compile] dliteral
  57+ 77CC                                                                      //          else
  58+ 77CC CC 63                        dw              BRANCH
  59+ 77CE 06 00                        dw              Interpret_Endif_3 - $
  60+ 77D0              Interpret_Else_3:
  61+ 77D0 A0 6A                        dw                  DROP                //              drop
  62+ 77D2 D9 76                        dw                  LITERAL             //              [compile]  literal
  63+ 77D4              Interpret_Endif_3:                                      //          endif
  64+ 77D4              Interpret_Endif_1:                                      //      endif
  65+ 77D4 60 77                        dw          QSTACK                      //      ?stack
  66+ 77D6 1A 67                        dw          QTERMINAL                   //      ?terminal
  67+ 77D8                                                                      //      if
  68+ 77D8 E3 63                        dw          ZBRANCH
  69+ 77DA 04 00                        dw          Interpret_Endif_5 - $
  70+ 77DC D6 75                        dw              CABORT                  //          (abort)
  71+ 77DE              Interpret_Endif_5:                                      //      endif
  72+ 77DE CC 63                        dw      BRANCH
  73+ 77E0 BE FF                        dw      Interpret_Begin - $
  74+ 77E2 4F 69                        dw      EXIT                            // ;
  75+ 77E4
  76+ 77E4              //  ______________________________________________________________________
  77+ 77E4              //
  78+ 77E4              // vocabulary   -- cccc     ( compile time )
  79+ 77E4              // Defining word used in the form   VOCABULARY cccc
  80+ 77E4              // creates the word  cccc  that gives the name to the vocabulary.
  81+ 77E4              // Giving  cccc  makes the vocabulary CONTEXT so its words are executed first
  82+ 77E4              // Giving  cccc DEFINITIONS makes  the vocabulary  CURRENT
  83+ 77E4              // so new definitions can be inserted in that vocabulary.
  84+ 77E4                              Colon_Def VOCABULARY, "VOCABULARY", is_normal
  84+ 77E4             >                New_Def  VOCABULARY, "VOCABULARY", Enter_Ptr, is_normal ; ok
  84+ 77E4             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  84+ 77E4             >
  84+ 77E4             >                // dummy db directives used to calculate length of namec
  84+ 77E4 56 4F 43 41 >                db      "VOCABULARY"
  84+ 77E8 42 55 4C 41 >
  84+ 77EC 52 59       >
  84+ 77EE             >len_NFA         defl    $ - temp_NFA
  84+ 77EE             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  84+ 77E4             >
  84+ 77E4 8A          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  84+ 77E5 56 4F 43 41 >                db      "VOCABULARY"               // name string in 7-bit ascii, but
  84+ 77E9 42 55 4C 41 >
  84+ 77ED 52 59       >
  84+ 77EF             >                org     $-1                 // alter last byte of Name just above to set
  84+ 77EE D9          >                db      {b $} | END_BIT     // msb as name end
  84+ 77EF             >
  84+ 77EF 90 77       >                dw      last_NFA            // Link to previous definition Name
  84+ 77F1             >VOCABULARY:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
  84+ 77F1 53 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
  84+ 77F3             >                else
  84+ 77F3 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
  84+ 77F3             >                endif           ; ok        // for other definitions it "points" the correct handler
  84+ 77F3             >                // Use of "; ok" to suppress "warning[fwdref]"
  84+ 77F3             >
  84+ 77F3             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  85+ 77F3
  86+ 77F3 DA 71                        dw      CBUILDS
  87+ 77F5
  88+ 77F5 A9 63 81 A0                  dw      LIT, $A081, COMMA       // $81A0 ,
  88+ 77F9 C9 6E
  89+ 77FB 0E 6E 68 6B                  dw      CURRENT, FETCH          // current @
  90+ 77FF 48 6A C9 6E                  dw      CELL_MINUS, COMMA       // cell- ,
  91+ 7803 AD 6E                        dw      HERE                    // here
  92+ 7805 9A 6D 68 6B                  dw      VOC_LINK, FETCH, COMMA  // voc-link @ ,
  92+ 7809 C9 6E
  93+ 780B 9A 6D 75 6B                  dw      VOC_LINK, STORE         // voc-link !
  94+ 780F
  95+ 780F EA 71                        dw      DOES_TO                 // does>
  96+ 7811              Vocabulary_Does:
  97+ 7811 3E 6A                        dw      CELL_PLUS               // cell+
  98+ 7813 01 6E 75 6B                  dw      CONTEXT, STORE          // context !
  99+ 7817 4F 69                        dw      EXIT                    // ;
 100+ 7819
 101+ 7819              //  ______________________________________________________________________
 102+ 7819              //
 103+ 7819              // forth        --
 104+ 7819              // Name of the first vocabulary.
 105+ 7819              // It makes FORTH the CONTEXT vocabulary.
 106+ 7819              // Until new user vocabulary are defined, new colon-definitions becomes
 107+ 7819              // part of FORTH. It is immediate, so it will executed during the creation
 108+ 7819              // of a colon definition to be able to select the vocabulary.
 109+ 7819
 110+ 7819                              New_Def FORTH, "FORTH", Does_Ptr, is_immediate
 110+ 7819             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 110+ 7819             >
 110+ 7819             >                // dummy db directives used to calculate length of namec
 110+ 7819 46 4F 52 54 >                db      "FORTH"
 110+ 781D 48          >
 110+ 781E             >len_NFA         defl    $ - temp_NFA
 110+ 781E             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 110+ 7819             >
 110+ 7819 C5          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 110+ 781A 46 4F 52 54 >                db      "FORTH"               // name string in 7-bit ascii, but
 110+ 781E 48          >
 110+ 781F             >                org     $-1                 // alter last byte of Name just above to set
 110+ 781E C8          >                db      {b $} | END_BIT     // msb as name end
 110+ 781F             >
 110+ 781F E4 77       >                dw      last_NFA            // Link to previous definition Name
 110+ 7821             >FORTH:          if Does_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 110+ 7821 F6 71       >                dw      Does_Ptr ; ok        // for primitive definitions  actual code
 110+ 7823             >                else
 110+ 7823 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 110+ 7823             >                endif           ; ok        // for other definitions it "points" the correct handler
 110+ 7823             >                // Use of "; ok" to suppress "warning[fwdref]"
 110+ 7823             >
 110+ 7823             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 111+ 7823 11 78                        dw      Vocabulary_Does
 112+ 7825 81 A0                        db      $81, $A0
 113+ 7827              Forth_Latest_Ptr:
 114+ 7827 97 87                        dw      Here_Dictionary // Fence_Word // Latest_Definition
 115+ 7829              Voclink_Ptr:
 116+ 7829 00 00                        dw      0
 117+ 782B              // Any new vocabulary is structured as follow:
 118+ 782B              // PFA+0 points to DOES> part of VOCABULARY to perform CELL+ CONTEXT !
 119+ 782B              // PFA+2 is 81,A0 i.e. a null-word used as LATEST in the new vocabulary
 120+ 782B              // PFA+4 always contains the LATEST word of this VOCABULARY.
 121+ 782B              //       at creations it points to the null-word of its parent vocabulary
 122+ 782B              //       that is normally FORTH, For example ASSEMBLER points FORTH's null-word
 123+ 782B              // PFA+6 is the pointer that builds up the vocabulary linked list.
 124+ 782B              //       FORTH has 0 here to signal the end of the list and user's variable
 125+ 782B              //       VOC-LINK points to PFA+6 of the newest vocabulary created.
 126+ 782B              //       While FORTH is the only vocabulary, VOC-LINK points to FORTH's PFA+6
 127+ 782B              //       When ASSEMBLER is created, its PFA+6 points to FORTH's PFA+6, and so on
 128+ 782B
 129+ 782B              //  ______________________________________________________________________
 130+ 782B              //
 131+ 782B              // definitions  --
 132+ 782B              // Used in the form  cccc DEFINITIONS
 133+ 782B              // set the CURRENT vocabulary at CONTEXT to insert new definitions in
 134+ 782B              // vocabulary cccc.
 135+ 782B                              Colon_Def DEFINITIONS, "DEFINITIONS", is_normal
 135+ 782B             >                New_Def  DEFINITIONS, "DEFINITIONS", Enter_Ptr, is_normal ; ok
 135+ 782B             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 135+ 782B             >
 135+ 782B             >                // dummy db directives used to calculate length of namec
 135+ 782B 44 45 46 49 >                db      "DEFINITIONS"
 135+ 782F 4E 49 54 49 >
 135+ 7833 4F 4E 53    >
 135+ 7836             >len_NFA         defl    $ - temp_NFA
 135+ 7836             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 135+ 782B             >
 135+ 782B 8B          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 135+ 782C 44 45 46 49 >                db      "DEFINITIONS"               // name string in 7-bit ascii, but
 135+ 7830 4E 49 54 49 >
 135+ 7834 4F 4E 53    >
 135+ 7837             >                org     $-1                 // alter last byte of Name just above to set
 135+ 7836 D3          >                db      {b $} | END_BIT     // msb as name end
 135+ 7837             >
 135+ 7837 19 78       >                dw      last_NFA            // Link to previous definition Name
 135+ 7839             >DEFINITIONS:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 135+ 7839 53 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 135+ 783B             >                else
 135+ 783B ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 135+ 783B             >                endif           ; ok        // for other definitions it "points" the correct handler
 135+ 783B             >                // Use of "; ok" to suppress "warning[fwdref]"
 135+ 783B             >
 135+ 783B             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 136+ 783B 01 6E 68 6B                  dw      CONTEXT, FETCH          // context @
 137+ 783F 0E 6E 75 6B                  dw      CURRENT, STORE          // current !
 138+ 7843 4F 69                        dw      EXIT                    // ;
 139+ 7845
 140+ 7845              //  ______________________________________________________________________
 141+ 7845              //
 142+ 7845              // (            -- cccc )
 143+ 7845              // the following text is interpreted as a comment until a closing )
 144+ 7845                              Colon_Def COMMENT_BRAKET, "(", is_immediate
 144+ 7845             >                New_Def  COMMENT_BRAKET, "(", Enter_Ptr, is_immediate ; ok
 144+ 7845             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 144+ 7845             >
 144+ 7845             >                // dummy db directives used to calculate length of namec
 144+ 7845 28          >                db      "("
 144+ 7846             >len_NFA         defl    $ - temp_NFA
 144+ 7846             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 144+ 7845             >
 144+ 7845 C1          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 144+ 7846 28          >                db      "("               // name string in 7-bit ascii, but
 144+ 7847             >                org     $-1                 // alter last byte of Name just above to set
 144+ 7846 A8          >                db      {b $} | END_BIT     // msb as name end
 144+ 7847             >
 144+ 7847 2B 78       >                dw      last_NFA            // Link to previous definition Name
 144+ 7849             >COMMENT_BRAKET:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 144+ 7849 53 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 144+ 784B             >                else
 144+ 784B ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 144+ 784B             >                endif           ; ok        // for other definitions it "points" the correct handler
 144+ 784B             >                // Use of "; ok" to suppress "warning[fwdref]"
 144+ 784B             >
 144+ 784B             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 145+ 784B A9 63 29 00                  dw      LIT, ")"                // [char] )
 146+ 784F FC 73 A0 6A                  dw      WORD, DROP              // word drop
 147+ 7853 4F 69                        dw      EXIT                    // ;
 148+ 7855
 149+ 7855              //  ______________________________________________________________________
 150+ 7855              //
 151+ 7855              // quit         --
 152+ 7855              // \ Erase the return-stack, stop any compilation and give controlo to the console. No message is issued.
 153+ 7855                              Colon_Def QUIT, "QUIT", is_normal
 153+ 7855             >                New_Def  QUIT, "QUIT", Enter_Ptr, is_normal ; ok
 153+ 7855             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 153+ 7855             >
 153+ 7855             >                // dummy db directives used to calculate length of namec
 153+ 7855 51 55 49 54 >                db      "QUIT"
 153+ 7859             >len_NFA         defl    $ - temp_NFA
 153+ 7859             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 153+ 7855             >
 153+ 7855 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 153+ 7856 51 55 49 54 >                db      "QUIT"               // name string in 7-bit ascii, but
 153+ 785A             >                org     $-1                 // alter last byte of Name just above to set
 153+ 7859 D4          >                db      {b $} | END_BIT     // msb as name end
 153+ 785A             >
 153+ 785A 45 78       >                dw      last_NFA            // Link to previous definition Name
 153+ 785C             >QUIT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 153+ 785C 53 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 153+ 785E             >                else
 153+ 785E ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 153+ 785E             >                endif           ; ok        // for other definitions it "points" the correct handler
 153+ 785E             >                // Use of "; ok" to suppress "warning[fwdref]"
 153+ 785E             >
 153+ 785E             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 154+ 785E
 155+ 785E 84 6E 68 6B                  dw      SOURCE_ID, FETCH        // source-id @
 156+ 7862 5F 67 A0 6A                  dw      F_CLOSE, DROP           // f_close drop
 157+ 7866 CE 6C 84 6E                  dw      ZERO, SOURCE_ID, STORE  // 0 source-id !
 157+ 786A 75 6B
 158+ 786C CE 6C CD 6D                  dw      ZERO, BLK, STORE        // 0 blk !
 158+ 7870 75 6B
 159+ 7872 33 71                        dw      SQUARED_OPEN            // [compile] [
 160+ 7874                                                              // begin
 161+ 7874              Quit_Begin:
 162+ 7874 58 6D 68 6B                  dw      R0, FETCH, RPSTORE      //      r0 @ rp!
 162+ 7878 40 69
 163+ 787A 2E 68                        dw      CR                      //      cr
 164+ 787C 7C 73                        dw      QUERY                   //      query
 165+ 787E              Next_Breakpoint_1:
 166+ 787E 9C 77                        dw      INTERPRET               //      interpret
 167+ 7880 19 6E 68 6B                  dw      STATE, FETCH, ZEQUAL    //      state @ 0=
 167+ 7884 B2 69
 168+ 7886                                                              //      if
 169+ 7886 E3 63                        dw      ZBRANCH
 170+ 7888 07 00                        dw      Quit_Endif - $
 171+ 788A 4B 74                        dw          C_DOT_QUOTE
 172+ 788C 02 6F 6B                     db          2, "ok"             //          .( ok)
 173+ 788F              Quit_Endif:                                     //      else
 174+ 788F                                                              // again
 175+ 788F CC 63                        dw      BRANCH
 176+ 7891 E3 FF                        dw      Quit_Begin - $
 177+ 7893 4F 69                        dw      EXIT                    // ;
 178+ 7895
 179+ 7895              //  ______________________________________________________________________
 180+ 7895              //
 181+ 7895              // abort        --
 182+ 7895                              Colon_Def ABORT, "ABORT", is_normal
 182+ 7895             >                New_Def  ABORT, "ABORT", Enter_Ptr, is_normal ; ok
 182+ 7895             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 182+ 7895             >
 182+ 7895             >                // dummy db directives used to calculate length of namec
 182+ 7895 41 42 4F 52 >                db      "ABORT"
 182+ 7899 54          >
 182+ 789A             >len_NFA         defl    $ - temp_NFA
 182+ 789A             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 182+ 7895             >
 182+ 7895 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 182+ 7896 41 42 4F 52 >                db      "ABORT"               // name string in 7-bit ascii, but
 182+ 789A 54          >
 182+ 789B             >                org     $-1                 // alter last byte of Name just above to set
 182+ 789A D4          >                db      {b $} | END_BIT     // msb as name end
 182+ 789B             >
 182+ 789B 55 78       >                dw      last_NFA            // Link to previous definition Name
 182+ 789D             >ABORT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 182+ 789D 53 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 182+ 789F             >                else
 182+ 789F ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 182+ 789F             >                endif           ; ok        // for other definitions it "points" the correct handler
 182+ 789F             >                // Use of "; ok" to suppress "warning[fwdref]"
 182+ 789F             >
 182+ 789F             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 183+ 789F 50 6D 68 6B                  dw      S0, FETCH, SPSTORE      // s0 @ sp!
 183+ 78A3 26 69
 184+ 78A5 96 71                        dw      DECIMAL                 // decimal
 185+ 78A7 21 78                        dw      FORTH                   // [compile] forth
 186+ 78A9 39 78                        dw      DEFINITIONS             // definitions
 187+ 78AB              Autoexec_Ptr:
 188+ 78AB B3 85                        dw      AUTOEXEC                // autoexec, patched to noop
 189+ 78AD 5C 78                        dw      QUIT                    // quit
 190+ 78AF 4F 69                        dw      EXIT                    // ;
 191+ 78B1
 192+ 78B1              //  ______________________________________________________________________
 193+ 78B1              //
 194+ 78B1              // warm         --
 195+ 78B1                              Colon_Def WARM, "WARM", is_normal
 195+ 78B1             >                New_Def  WARM, "WARM", Enter_Ptr, is_normal ; ok
 195+ 78B1             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 195+ 78B1             >
 195+ 78B1             >                // dummy db directives used to calculate length of namec
 195+ 78B1 57 41 52 4D >                db      "WARM"
 195+ 78B5             >len_NFA         defl    $ - temp_NFA
 195+ 78B5             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 195+ 78B1             >
 195+ 78B1 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 195+ 78B2 57 41 52 4D >                db      "WARM"               // name string in 7-bit ascii, but
 195+ 78B6             >                org     $-1                 // alter last byte of Name just above to set
 195+ 78B5 CD          >                db      {b $} | END_BIT     // msb as name end
 195+ 78B6             >
 195+ 78B6 95 78       >                dw      last_NFA            // Link to previous definition Name
 195+ 78B8             >WARM:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 195+ 78B8 53 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 195+ 78BA             >                else
 195+ 78BA ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 195+ 78BA             >                endif           ; ok        // for other definitions it "points" the correct handler
 195+ 78BA             >                // Use of "; ok" to suppress "warning[fwdref]"
 195+ 78BA             >
 195+ 78BA             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 196+ 78BA 8B 7C                        dw      BLK_INIT                // blk-init
 197+ 78BC 67 84                        dw      SPLASH                  // splash
 198+ 78BE A9 63 07 00                  dw      LIT, 7, EMIT            // 7 emit
 198+ 78C2 A1 6F
 199+ 78C4 9D 78                        dw      ABORT                   // abort
 200+ 78C6 4F 69                        dw      EXIT                    // exit
 201+ 78C8
 202+ 78C8              //  ______________________________________________________________________
 203+ 78C8              //
 204+ 78C8              // cold         --
 205+ 78C8                              Colon_Def COLD, "COLD", is_normal
 205+ 78C8             >                New_Def  COLD, "COLD", Enter_Ptr, is_normal ; ok
 205+ 78C8             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 205+ 78C8             >
 205+ 78C8             >                // dummy db directives used to calculate length of namec
 205+ 78C8 43 4F 4C 44 >                db      "COLD"
 205+ 78CC             >len_NFA         defl    $ - temp_NFA
 205+ 78CC             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 205+ 78C8             >
 205+ 78C8 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 205+ 78C9 43 4F 4C 44 >                db      "COLD"               // name string in 7-bit ascii, but
 205+ 78CD             >                org     $-1                 // alter last byte of Name just above to set
 205+ 78CC C4          >                db      {b $} | END_BIT     // msb as name end
 205+ 78CD             >
 205+ 78CD B1 78       >                dw      last_NFA            // Link to previous definition Name
 205+ 78CF             >COLD:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 205+ 78CF 53 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 205+ 78D1             >                else
 205+ 78D1 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 205+ 78D1             >                endif           ; ok        // for other definitions it "points" the correct handler
 205+ 78D1             >                // Use of "; ok" to suppress "warning[fwdref]"
 205+ 78D1             >
 205+ 78D1             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 206+ 78D1 A9 63 78 63                  dw      LIT, S0_origin          // [ hex $12 +origin ] Literal
 207+ 78D5 A9 63 94 63                  dw      LIT, USER_Pointer       // [ hex $3E +origin ] literal
 208+ 78D9 68 6B                        dw      FETCH                   // @
 209+ 78DB A9 63 06 00                  dw      LIT, 6, PLUS            // 6 +
 209+ 78DF F5 69
 210+ 78E1 A9 63 14 00                  dw      LIT, 20                 // 20
 211+ 78E5 3D 68                        dw      CMOVE
 212+ 78E7 A9 63 72 63                  dw      LIT, Latest_origin      // [ hex 0C +origin ] literal
 213+ 78EB 68 6B                        dw      FETCH                   // @
 214+ 78ED A9 63 27 78                  dw      LIT, Forth_Latest_Ptr   // [ ' forth >body 4 + ] Literal
 215+ 78F1 75 6B                        dw      STORE                   // !
 216+ 78F3 CE 6C C4 6D                  dw      ZERO, NMODE, STORE      // 0 nmode !
 216+ 78F7 75 6B
 217+ 78F9 A5 6D 68 6B                  dw      FIRST, FETCH, DUP       // first @ dup
 217+ 78FD D5 6A
 218+ 78FF 58 6E 75 6B                  dw      USE, STORE              // use !
 219+ 7903 62 6E 75 6B                  dw      PREV, STORE             // prev !
 220+ 7907 A9 63 04 00                  dw      LIT, 4, PLACE, STORE    // 4 place !
 220+ 790B 75 6E 75 6B
 221+ 790F              //              dw      LIT, 8
 222+ 790F              //              dw      LIT, FLAGS2, CSTORE     // 8 5C6A c!
 223+ 790F DE 6C A3 6E                  dw      TWO, HP, STORE          // 2 hp !
 223+ 7913 75 6B
 224+ 7915 B8 78        Warm_Start:     dw      WARM
 225+ 7917 CF 78        Cold_Start:     dw      COLD
 226+ 7919 4F 69                        dw      EXIT
 227+ 791B
 228+ 791B              //  ______________________________________________________________________
 229+ 791B              WarmRoutine:
 230+ 791B              ColdRoutine:
 231+ 791B DD 21 98 63                  ld      ix, Next_Ptr
 232+ 791F D9                           exx
 233+ 7920 E5                           push    hl
 234+ 7921 D9                           exx
 235+ 7922
 236+ 7922 ED 73 6E 63                  ld      (SP_Basic), sp
 237+ 7926 ED 7B 78 63                  ld      sp, (S0_origin)
 238+ 792A              //              nop
 239+ 792A 2A 7A 63                     ld      hl, (R0_origin)
 240+ 792D              //              nop
 241+ 792D                              ldrphl
 241+ 792D 22 96 63    >                ld      (RP_Pointer),hl
 242+ 7930 01 15 79                     ld      bc, Warm_Start
 243+ 7933 38 02                        jr      c, Warm_Skip
 244+ 7935 03                           inc     bc
 245+ 7936 03                           inc     bc
 246+ 7937              Warm_Skip:
 247+ 7937                              next
 247+ 7937 DD E9       >                jp      (ix)
 248+ 7939
 249+ 7939              //  ______________________________________________________________________
 250+ 7939              //
 251+ 7939              // basic        --
 252+ 7939                              New_Def BASIC, "BASIC", is_code, is_normal
 252+ 7939             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 252+ 7939             >
 252+ 7939             >                // dummy db directives used to calculate length of namec
 252+ 7939 42 41 53 49 >                db      "BASIC"
 252+ 793D 43          >
 252+ 793E             >len_NFA         defl    $ - temp_NFA
 252+ 793E             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 252+ 7939             >
 252+ 7939 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 252+ 793A 42 41 53 49 >                db      "BASIC"               // name string in 7-bit ascii, but
 252+ 793E 43          >
 252+ 793F             >                org     $-1                 // alter last byte of Name just above to set
 252+ 793E C3          >                db      {b $} | END_BIT     // msb as name end
 252+ 793F             >
 252+ 793F C8 78       >                dw      last_NFA            // Link to previous definition Name
 252+ 7941             >BASIC:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 252+ 7941 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
 252+ 7941             >                else
 252+ 7941 43 79       >                dw      $ + 2   ; ok        // is pointed by CFA
 252+ 7943             >                endif           ; ok        // for other definitions it "points" the correct handler
 252+ 7943             >                // Use of "; ok" to suppress "warning[fwdref]"
 252+ 7943             >
 252+ 7943             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 253+ 7943 C1                           pop     bc
 254+ 7944 21 00 00                     ld      hl, 0
 255+ 7947 39                           add     hl, sp
 256+ 7948 ED 7B 6E 63                  ld      sp, (SP_Basic)
 257+ 794C              //              nop
 258+ 794C 22 6E 63                     ld      (SP_Basic),hl
 259+ 794F D9                           exx
 260+ 7950 E1                           pop     hl
 261+ 7951 D9                           exx
 262+ 7952 C9                           ret     // to Basic
 263+ 7953
 264+ 7953              //  ______________________________________________________________________
 265+ 7953              //
 266+ 7953              // +-           n1 n2 -- n3
 267+ 7953              // leaves n1 with the sign of n2 as n3.
 268+ 7953                              Colon_Def PLUS_MINUS, "+-", is_normal
 268+ 7953             >                New_Def  PLUS_MINUS, "+-", Enter_Ptr, is_normal ; ok
 268+ 7953             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 268+ 7953             >
 268+ 7953             >                // dummy db directives used to calculate length of namec
 268+ 7953 2B 2D       >                db      "+-"
 268+ 7955             >len_NFA         defl    $ - temp_NFA
 268+ 7955             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 268+ 7953             >
 268+ 7953 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 268+ 7954 2B 2D       >                db      "+-"               // name string in 7-bit ascii, but
 268+ 7956             >                org     $-1                 // alter last byte of Name just above to set
 268+ 7955 AD          >                db      {b $} | END_BIT     // msb as name end
 268+ 7956             >
 268+ 7956 39 79       >                dw      last_NFA            // Link to previous definition Name
 268+ 7958             >PLUS_MINUS:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 268+ 7958 53 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 268+ 795A             >                else
 268+ 795A ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 268+ 795A             >                endif           ; ok        // for other definitions it "points" the correct handler
 268+ 795A             >                // Use of "; ok" to suppress "warning[fwdref]"
 268+ 795A             >
 268+ 795A             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 269+ 795A CD 69                        dw      ZLESS                   // 0<
 270+ 795C                                                              // if
 271+ 795C E3 63                        dw      ZBRANCH
 272+ 795E 04 00                        dw      Plus_Minus_Endif - $
 273+ 7960 60 6A                        dw          MINUS               //      minus
 274+ 7962              Plus_Minus_Endif:                               // endif
 275+ 7962 4F 69                        dw      EXIT                    // ;
 276+ 7964
 277+ 7964              //  ______________________________________________________________________
 278+ 7964              //
 279+ 7964              // d+-          d1 n -- d2
 280+ 7964              // leaves d1 with the sign of n as d2.
 281+ 7964                              Colon_Def DPLUS_MINUS, "D+-", is_normal
 281+ 7964             >                New_Def  DPLUS_MINUS, "D+-", Enter_Ptr, is_normal ; ok
 281+ 7964             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 281+ 7964             >
 281+ 7964             >                // dummy db directives used to calculate length of namec
 281+ 7964 44 2B 2D    >                db      "D+-"
 281+ 7967             >len_NFA         defl    $ - temp_NFA
 281+ 7967             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 281+ 7964             >
 281+ 7964 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 281+ 7965 44 2B 2D    >                db      "D+-"               // name string in 7-bit ascii, but
 281+ 7968             >                org     $-1                 // alter last byte of Name just above to set
 281+ 7967 AD          >                db      {b $} | END_BIT     // msb as name end
 281+ 7968             >
 281+ 7968 53 79       >                dw      last_NFA            // Link to previous definition Name
 281+ 796A             >DPLUS_MINUS:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 281+ 796A 53 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 281+ 796C             >                else
 281+ 796C ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 281+ 796C             >                endif           ; ok        // for other definitions it "points" the correct handler
 281+ 796C             >                // Use of "; ok" to suppress "warning[fwdref]"
 281+ 796C             >
 281+ 796C             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 282+ 796C CD 69                        dw      ZLESS                   // 0<
 283+ 796E                                                              // if
 284+ 796E E3 63                        dw      ZBRANCH
 285+ 7970 04 00                        dw      DPlus_Minus_Endif - $
 286+ 7972 76 6A                        dw          DMINUS              //      dminus
 287+ 7974              DPlus_Minus_Endif:                              // endif
 288+ 7974 4F 69                        dw      EXIT                    // ;
 289+ 7976
 290+ 7976              //  ______________________________________________________________________
 291+ 7976              //
 292+ 7976              // abs          n1 -- n2
 293+ 7976                              Colon_Def ABS_OP, "ABS", is_normal
 293+ 7976             >                New_Def  ABS_OP, "ABS", Enter_Ptr, is_normal ; ok
 293+ 7976             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 293+ 7976             >
 293+ 7976             >                // dummy db directives used to calculate length of namec
 293+ 7976 41 42 53    >                db      "ABS"
 293+ 7979             >len_NFA         defl    $ - temp_NFA
 293+ 7979             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 293+ 7976             >
 293+ 7976 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 293+ 7977 41 42 53    >                db      "ABS"               // name string in 7-bit ascii, but
 293+ 797A             >                org     $-1                 // alter last byte of Name just above to set
 293+ 7979 D3          >                db      {b $} | END_BIT     // msb as name end
 293+ 797A             >
 293+ 797A 64 79       >                dw      last_NFA            // Link to previous definition Name
 293+ 797C             >ABS_OP:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 293+ 797C 53 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 293+ 797E             >                else
 293+ 797E ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 293+ 797E             >                endif           ; ok        // for other definitions it "points" the correct handler
 293+ 797E             >                // Use of "; ok" to suppress "warning[fwdref]"
 293+ 797E             >
 293+ 797E             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 294+ 797E D5 6A                        dw      DUP                     // dup
 295+ 7980 58 79                        dw      PLUS_MINUS              // +-
 296+ 7982 4F 69                        dw      EXIT                    // ;
 297+ 7984
 298+ 7984              //  ______________________________________________________________________
 299+ 7984              //
 300+ 7984              // dabs         d1 -- d2
 301+ 7984                              Colon_Def DABS, "DABS", is_normal
 301+ 7984             >                New_Def  DABS, "DABS", Enter_Ptr, is_normal ; ok
 301+ 7984             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 301+ 7984             >
 301+ 7984             >                // dummy db directives used to calculate length of namec
 301+ 7984 44 41 42 53 >                db      "DABS"
 301+ 7988             >len_NFA         defl    $ - temp_NFA
 301+ 7988             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 301+ 7984             >
 301+ 7984 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 301+ 7985 44 41 42 53 >                db      "DABS"               // name string in 7-bit ascii, but
 301+ 7989             >                org     $-1                 // alter last byte of Name just above to set
 301+ 7988 D3          >                db      {b $} | END_BIT     // msb as name end
 301+ 7989             >
 301+ 7989 76 79       >                dw      last_NFA            // Link to previous definition Name
 301+ 798B             >DABS:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 301+ 798B 53 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 301+ 798D             >                else
 301+ 798D ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 301+ 798D             >                endif           ; ok        // for other definitions it "points" the correct handler
 301+ 798D             >                // Use of "; ok" to suppress "warning[fwdref]"
 301+ 798D             >
 301+ 798D             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 302+ 798D D5 6A                        dw      DUP                     // dup
 303+ 798F 6A 79                        dw      DPLUS_MINUS             // d+-
 304+ 7991 4F 69                        dw      EXIT                    // ;
 305+ 7993
 306+ 7993              //  ______________________________________________________________________
 307+ 7993              //
 308+ 7993              // m*           n1 n2 -- d
 309+ 7993              // multiply two integer giving a double
 310+ 7993                              Colon_Def MMUL, "M*", is_normal
 310+ 7993             >                New_Def  MMUL, "M*", Enter_Ptr, is_normal ; ok
 310+ 7993             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 310+ 7993             >
 310+ 7993             >                // dummy db directives used to calculate length of namec
 310+ 7993 4D 2A       >                db      "M*"
 310+ 7995             >len_NFA         defl    $ - temp_NFA
 310+ 7995             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 310+ 7993             >
 310+ 7993 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 310+ 7994 4D 2A       >                db      "M*"               // name string in 7-bit ascii, but
 310+ 7996             >                org     $-1                 // alter last byte of Name just above to set
 310+ 7995 AA          >                db      {b $} | END_BIT     // msb as name end
 310+ 7996             >
 310+ 7996 84 79       >                dw      last_NFA            // Link to previous definition Name
 310+ 7998             >MMUL:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 310+ 7998 53 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 310+ 799A             >                else
 310+ 799A ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 310+ 799A             >                endif           ; ok        // for other definitions it "points" the correct handler
 310+ 799A             >                // Use of "; ok" to suppress "warning[fwdref]"
 310+ 799A             >
 310+ 799A             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 311+ 799A 36 6B 04 69                  dw      TWO_DUP, XOR_OP, TO_R   // 2dup xor >r
 311+ 799E 7D 69
 312+ 79A0 7C 79 C8 6A                  dw      ABS_OP, SWAP            // abs swap
 313+ 79A4 7C 79 70 68                  dw      ABS_OP, UM_MUL          // abs um*
 314+ 79A8 91 69 6A 79                  dw      R_TO, DPLUS_MINUS       // r> d+-
 315+ 79AC 4F 69                        dw      EXIT                    // ;
 316+ 79AE
 317+ 79AE              //  ______________________________________________________________________
 318+ 79AE              //
 319+ 79AE              // sm/rem       d n -- q r
 320+ 79AE              // Symmetric division: divides a double into n giving quotient q and remainder r
 321+ 79AE              // the remainder has the sign of d.
 322+ 79AE                              Colon_Def SMDIVM, "SM/REM", is_normal
 322+ 79AE             >                New_Def  SMDIVM, "SM/REM", Enter_Ptr, is_normal ; ok
 322+ 79AE             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 322+ 79AE             >
 322+ 79AE             >                // dummy db directives used to calculate length of namec
 322+ 79AE 53 4D 2F 52 >                db      "SM/REM"
 322+ 79B2 45 4D       >
 322+ 79B4             >len_NFA         defl    $ - temp_NFA
 322+ 79B4             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 322+ 79AE             >
 322+ 79AE 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 322+ 79AF 53 4D 2F 52 >                db      "SM/REM"               // name string in 7-bit ascii, but
 322+ 79B3 45 4D       >
 322+ 79B5             >                org     $-1                 // alter last byte of Name just above to set
 322+ 79B4 CD          >                db      {b $} | END_BIT     // msb as name end
 322+ 79B5             >
 322+ 79B5 93 79       >                dw      last_NFA            // Link to previous definition Name
 322+ 79B7             >SMDIVM:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 322+ 79B7 53 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 322+ 79B9             >                else
 322+ 79B9 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 322+ 79B9             >                endif           ; ok        // for other definitions it "points" the correct handler
 322+ 79B9             >                // Use of "; ok" to suppress "warning[fwdref]"
 322+ 79B9             >
 322+ 79B9             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 323+ 79B9 90 6A 7D 69                  dw      OVER, TO_R, TO_R        // over >r >r
 323+ 79BD 7D 69
 324+ 79BF 8B 79 A5 69                  dw      DABS, R_OP, ABS_OP      // dabs r abs
 324+ 79C3 7C 79
 325+ 79C5 A1 68                        dw      UMDIVMOD                // um/mod
 326+ 79C7 91 69                        dw      R_TO                    // r>
 327+ 79C9 A5 69 04 69                  dw      R_OP, XOR_OP            // r xor
 328+ 79CD 58 79 C8 6A                  dw      PLUS_MINUS, SWAP        // +- swap
 329+ 79D1 91 69                        dw      R_TO                    // r>
 330+ 79D3 58 79 C8 6A                  dw      PLUS_MINUS, SWAP        // +- swap
 331+ 79D7 4F 69                        dw      EXIT                    // ;
 332+ 79D9
 333+ 79D9              //  ______________________________________________________________________
 334+ 79D9              //
 335+ 79D9              // fm/mod       d n -- q r
 336+ 79D9              // Floored division: divides a double into n giving quotient q and remainder r
 337+ 79D9              // the remainder has the sign of d.
 338+ 79D9                              Colon_Def FMDIVM, "FM/MOD", is_normal
 338+ 79D9             >                New_Def  FMDIVM, "FM/MOD", Enter_Ptr, is_normal ; ok
 338+ 79D9             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 338+ 79D9             >
 338+ 79D9             >                // dummy db directives used to calculate length of namec
 338+ 79D9 46 4D 2F 4D >                db      "FM/MOD"
 338+ 79DD 4F 44       >
 338+ 79DF             >len_NFA         defl    $ - temp_NFA
 338+ 79DF             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 338+ 79D9             >
 338+ 79D9 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 338+ 79DA 46 4D 2F 4D >                db      "FM/MOD"               // name string in 7-bit ascii, but
 338+ 79DE 4F 44       >
 338+ 79E0             >                org     $-1                 // alter last byte of Name just above to set
 338+ 79DF C4          >                db      {b $} | END_BIT     // msb as name end
 338+ 79E0             >
 338+ 79E0 AE 79       >                dw      last_NFA            // Link to previous definition Name
 338+ 79E2             >FMDIVM:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 338+ 79E2 53 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 338+ 79E4             >                else
 338+ 79E4 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 338+ 79E4             >                endif           ; ok        // for other definitions it "points" the correct handler
 338+ 79E4             >                // Use of "; ok" to suppress "warning[fwdref]"
 338+ 79E4             >
 338+ 79E4             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 339+ 79E4 D5 6A 7D 69                  dw      DUP, TO_R               // dup >r
 340+ 79E8 B7 79                        dw      SMDIVM
 341+ 79EA 90 6A D5 6A                  dw      OVER, DUP
 342+ 79EE B2 69 B2 69                  dw      ZEQUAL, ZEQUAL
 343+ 79F2 C8 6A CD 69                  dw      SWAP, ZLESS
 344+ 79F6 A5 69 CD 69                  dw      R_OP, ZLESS
 345+ 79FA 04 69 DF 68                  dw      XOR_OP, AND_OP
 346+ 79FE E3 63                        dw      ZBRANCH
 347+ 7A00 10 00                        dw      Fm_Mod_Else - $
 348+ 7A02 22 6A                        dw          ONE_SUBTRACT
 349+ 7A04 C8 6A 91 69                  dw          SWAP, R_TO
 350+ 7A08 F5 69 C8 6A                  dw          PLUS, SWAP
 351+ 7A0C CC 63                        dw      BRANCH
 352+ 7A0E 06 00                        dw      Fm_Mod_Endif - $
 353+ 7A10              Fm_Mod_Else:
 354+ 7A10 91 69 A0 6A                  dw          R_TO, DROP
 355+ 7A14              Fm_Mod_Endif:
 356+ 7A14 4F 69                        dw      EXIT
 357+ 7A16              //              dw      TWO_DUP                 // 2dup
 358+ 7A16              //              dw      XOR_OP, TO_R, TO_R      // xor >r >r
 359+ 7A16              //              dw      DABS, R_OP, ABS_OP      // dabs r abs
 360+ 7A16              //              dw      UMDIVMOD                // um/mod
 361+ 7A16              //              dw      SWAP                    // swap
 362+ 7A16              //              dw      II, ZLESS               // i'
 363+ 7A16              //              dw      ONE, AND_OP, PLUS       // 0< 1 and +
 364+ 7A16              //              dw      R_TO                    // r>
 365+ 7A16              //              dw      PLUS_MINUS, SWAP        // +- swap
 366+ 7A16              //              dw      R_OP                    // r@
 367+ 7A16              //              dw      ZLESS                   // i'
 368+ 7A16              //              dw      ONE, AND_OP, PLUS       // 0< 1 and +
 369+ 7A16              //              dw      R_TO                    // r>
 370+ 7A16              //              dw      PLUS_MINUS              // +- swap
 371+ 7A16              //              dw      EXIT                    // ;
 372+ 7A16
 373+ 7A16              //  ______________________________________________________________________
 374+ 7A16              //
 375+ 7A16              // m/mod        d n -- q r
 376+ 7A16              // multiply two integer giving a double
 377+ 7A16                              Colon_Def MDIVM, "M/MOD", is_normal
 377+ 7A16             >                New_Def  MDIVM, "M/MOD", Enter_Ptr, is_normal ; ok
 377+ 7A16             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 377+ 7A16             >
 377+ 7A16             >                // dummy db directives used to calculate length of namec
 377+ 7A16 4D 2F 4D 4F >                db      "M/MOD"
 377+ 7A1A 44          >
 377+ 7A1B             >len_NFA         defl    $ - temp_NFA
 377+ 7A1B             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 377+ 7A16             >
 377+ 7A16 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 377+ 7A17 4D 2F 4D 4F >                db      "M/MOD"               // name string in 7-bit ascii, but
 377+ 7A1B 44          >
 377+ 7A1C             >                org     $-1                 // alter last byte of Name just above to set
 377+ 7A1B C4          >                db      {b $} | END_BIT     // msb as name end
 377+ 7A1C             >
 377+ 7A1C D9 79       >                dw      last_NFA            // Link to previous definition Name
 377+ 7A1E             >MDIVM:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 377+ 7A1E 53 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 377+ 7A20             >                else
 377+ 7A20 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 377+ 7A20             >                endif           ; ok        // for other definitions it "points" the correct handler
 377+ 7A20             >                // Use of "; ok" to suppress "warning[fwdref]"
 377+ 7A20             >
 377+ 7A20             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 378+ 7A20 B7 79                        dw      SMDIVM
 379+ 7A22 4F 69                        dw      EXIT                    // ;
 380+ 7A24
 381+ 7A24              //  ______________________________________________________________________
 382+ 7A24              //
 383+ 7A24              // m/           d n -- q
 384+ 7A24              // multiply two integer giving a double
 385+ 7A24                              Colon_Def MDIV, "M/", is_normal
 385+ 7A24             >                New_Def  MDIV, "M/", Enter_Ptr, is_normal ; ok
 385+ 7A24             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 385+ 7A24             >
 385+ 7A24             >                // dummy db directives used to calculate length of namec
 385+ 7A24 4D 2F       >                db      "M/"
 385+ 7A26             >len_NFA         defl    $ - temp_NFA
 385+ 7A26             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 385+ 7A24             >
 385+ 7A24 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 385+ 7A25 4D 2F       >                db      "M/"               // name string in 7-bit ascii, but
 385+ 7A27             >                org     $-1                 // alter last byte of Name just above to set
 385+ 7A26 AF          >                db      {b $} | END_BIT     // msb as name end
 385+ 7A27             >
 385+ 7A27 16 7A       >                dw      last_NFA            // Link to previous definition Name
 385+ 7A29             >MDIV:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 385+ 7A29 53 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 385+ 7A2B             >                else
 385+ 7A2B ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 385+ 7A2B             >                endif           ; ok        // for other definitions it "points" the correct handler
 385+ 7A2B             >                // Use of "; ok" to suppress "warning[fwdref]"
 385+ 7A2B             >
 385+ 7A2B             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 386+ 7A2B 1E 7A AB 6A                  dw      MDIVM, NIP
 387+ 7A2F 4F 69                        dw      EXIT                    // ;
 388+ 7A31
 389+ 7A31              //  ______________________________________________________________________
 390+ 7A31              //
 391+ 7A31              // *            n1 n2 -- n3
 392+ 7A31              // multiply two integer
 393+ 7A31                              Colon_Def MUL, "*", is_normal
 393+ 7A31             >                New_Def  MUL, "*", Enter_Ptr, is_normal ; ok
 393+ 7A31             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 393+ 7A31             >
 393+ 7A31             >                // dummy db directives used to calculate length of namec
 393+ 7A31 2A          >                db      "*"
 393+ 7A32             >len_NFA         defl    $ - temp_NFA
 393+ 7A32             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 393+ 7A31             >
 393+ 7A31 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 393+ 7A32 2A          >                db      "*"               // name string in 7-bit ascii, but
 393+ 7A33             >                org     $-1                 // alter last byte of Name just above to set
 393+ 7A32 AA          >                db      {b $} | END_BIT     // msb as name end
 393+ 7A33             >
 393+ 7A33 24 7A       >                dw      last_NFA            // Link to previous definition Name
 393+ 7A35             >MUL:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 393+ 7A35 53 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 393+ 7A37             >                else
 393+ 7A37 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 393+ 7A37             >                endif           ; ok        // for other definitions it "points" the correct handler
 393+ 7A37             >                // Use of "; ok" to suppress "warning[fwdref]"
 393+ 7A37             >
 393+ 7A37             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 394+ 7A37 98 79 A0 6A                  dw      MMUL, DROP              // m* drop
 395+ 7A3B 4F 69                        dw      EXIT                    // ;
 396+ 7A3D
 397+ 7A3D              //  ______________________________________________________________________
 398+ 7A3D              //
 399+ 7A3D              // /mod         n1 n2 -- n3 n4
 400+ 7A3D              // leaves quotient n4 and remainder n3 of the integer division n1 / n2.
 401+ 7A3D              // The remainder has the sign of n1
 402+ 7A3D                              Colon_Def DIVMOD, "/MOD", is_normal
 402+ 7A3D             >                New_Def  DIVMOD, "/MOD", Enter_Ptr, is_normal ; ok
 402+ 7A3D             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 402+ 7A3D             >
 402+ 7A3D             >                // dummy db directives used to calculate length of namec
 402+ 7A3D 2F 4D 4F 44 >                db      "/MOD"
 402+ 7A41             >len_NFA         defl    $ - temp_NFA
 402+ 7A41             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 402+ 7A3D             >
 402+ 7A3D 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 402+ 7A3E 2F 4D 4F 44 >                db      "/MOD"               // name string in 7-bit ascii, but
 402+ 7A42             >                org     $-1                 // alter last byte of Name just above to set
 402+ 7A41 C4          >                db      {b $} | END_BIT     // msb as name end
 402+ 7A42             >
 402+ 7A42 31 7A       >                dw      last_NFA            // Link to previous definition Name
 402+ 7A44             >DIVMOD:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 402+ 7A44 53 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 402+ 7A46             >                else
 402+ 7A46 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 402+ 7A46             >                endif           ; ok        // for other definitions it "points" the correct handler
 402+ 7A46             >                // Use of "; ok" to suppress "warning[fwdref]"
 402+ 7A46             >
 402+ 7A46             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 403+ 7A46 7D 69 EC 6E                  dw      TO_R, S_TO_D, R_TO      // >r s->d r>
 403+ 7A4A 91 69
 404+ 7A4C 1E 7A                        dw      MDIVM                   // m/mod
 405+ 7A4E 4F 69                        dw      EXIT                    // ;
 406+ 7A50
 407+ 7A50              //  ______________________________________________________________________
 408+ 7A50              //
 409+ 7A50              // /            n1 n2 -- n3
 410+ 7A50              // division
 411+ 7A50                              Colon_Def DIV, "/", is_normal
 411+ 7A50             >                New_Def  DIV, "/", Enter_Ptr, is_normal ; ok
 411+ 7A50             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 411+ 7A50             >
 411+ 7A50             >                // dummy db directives used to calculate length of namec
 411+ 7A50 2F          >                db      "/"
 411+ 7A51             >len_NFA         defl    $ - temp_NFA
 411+ 7A51             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 411+ 7A50             >
 411+ 7A50 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 411+ 7A51 2F          >                db      "/"               // name string in 7-bit ascii, but
 411+ 7A52             >                org     $-1                 // alter last byte of Name just above to set
 411+ 7A51 AF          >                db      {b $} | END_BIT     // msb as name end
 411+ 7A52             >
 411+ 7A52 3D 7A       >                dw      last_NFA            // Link to previous definition Name
 411+ 7A54             >DIV:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 411+ 7A54 53 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 411+ 7A56             >                else
 411+ 7A56 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 411+ 7A56             >                endif           ; ok        // for other definitions it "points" the correct handler
 411+ 7A56             >                // Use of "; ok" to suppress "warning[fwdref]"
 411+ 7A56             >
 411+ 7A56             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 412+ 7A56 44 7A AB 6A                  dw      DIVMOD, NIP             // /mod nip
 413+ 7A5A 4F 69                        dw      EXIT                    // ;
 414+ 7A5C
 415+ 7A5C              //  ______________________________________________________________________
 416+ 7A5C              //
 417+ 7A5C              // mod          n1 n2 -- n3
 418+ 7A5C                              Colon_Def MOD, "MOD", is_normal
 418+ 7A5C             >                New_Def  MOD, "MOD", Enter_Ptr, is_normal ; ok
 418+ 7A5C             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 418+ 7A5C             >
 418+ 7A5C             >                // dummy db directives used to calculate length of namec
 418+ 7A5C 4D 4F 44    >                db      "MOD"
 418+ 7A5F             >len_NFA         defl    $ - temp_NFA
 418+ 7A5F             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 418+ 7A5C             >
 418+ 7A5C 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 418+ 7A5D 4D 4F 44    >                db      "MOD"               // name string in 7-bit ascii, but
 418+ 7A60             >                org     $-1                 // alter last byte of Name just above to set
 418+ 7A5F C4          >                db      {b $} | END_BIT     // msb as name end
 418+ 7A60             >
 418+ 7A60 50 7A       >                dw      last_NFA            // Link to previous definition Name
 418+ 7A62             >MOD:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 418+ 7A62 53 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 418+ 7A64             >                else
 418+ 7A64 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 418+ 7A64             >                endif           ; ok        // for other definitions it "points" the correct handler
 418+ 7A64             >                // Use of "; ok" to suppress "warning[fwdref]"
 418+ 7A64             >
 418+ 7A64             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 419+ 7A64 44 7A A0 6A                  dw      DIVMOD, DROP            // /mod drop
 420+ 7A68 4F 69                        dw      EXIT                    // ;
 421+ 7A6A
 422+ 7A6A              //  ______________________________________________________________________
 423+ 7A6A              //
 424+ 7A6A              // */mod        n1 n2 n3 -- n4 n5
 425+ 7A6A              // leaves the quotient n5 and the remainder n4 of the operation
 426+ 7A6A              // (n1 * n2) / n3. The intermediate passage through a double number
 427+ 7A6A              // avoids loss of precision
 428+ 7A6A                              Colon_Def MUL_DIV_MOD, "*/MOD", is_normal
 428+ 7A6A             >                New_Def  MUL_DIV_MOD, "*/MOD", Enter_Ptr, is_normal ; ok
 428+ 7A6A             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 428+ 7A6A             >
 428+ 7A6A             >                // dummy db directives used to calculate length of namec
 428+ 7A6A 2A 2F 4D 4F >                db      "*/MOD"
 428+ 7A6E 44          >
 428+ 7A6F             >len_NFA         defl    $ - temp_NFA
 428+ 7A6F             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 428+ 7A6A             >
 428+ 7A6A 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 428+ 7A6B 2A 2F 4D 4F >                db      "*/MOD"               // name string in 7-bit ascii, but
 428+ 7A6F 44          >
 428+ 7A70             >                org     $-1                 // alter last byte of Name just above to set
 428+ 7A6F C4          >                db      {b $} | END_BIT     // msb as name end
 428+ 7A70             >
 428+ 7A70 5C 7A       >                dw      last_NFA            // Link to previous definition Name
 428+ 7A72             >MUL_DIV_MOD:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 428+ 7A72 53 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 428+ 7A74             >                else
 428+ 7A74 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 428+ 7A74             >                endif           ; ok        // for other definitions it "points" the correct handler
 428+ 7A74             >                // Use of "; ok" to suppress "warning[fwdref]"
 428+ 7A74             >
 428+ 7A74             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 429+ 7A74 7D 69 98 79                  dw      TO_R, MMUL              // >r  m*
 430+ 7A78 91 69 1E 7A                  dw      R_TO, MDIVM             // r>  m/mod
 431+ 7A7C 4F 69                        dw      EXIT                    // ;
 432+ 7A7E
 433+ 7A7E              //  ______________________________________________________________________
 434+ 7A7E              //
 435+ 7A7E              // */          n1 n2 n3 -- n4
 436+ 7A7E              // (n1 * n2) / n3. The intermediate passage through a double number avoids loss of precision
 437+ 7A7E                              Colon_Def MUL_DIV, "*/", is_normal
 437+ 7A7E             >                New_Def  MUL_DIV, "*/", Enter_Ptr, is_normal ; ok
 437+ 7A7E             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 437+ 7A7E             >
 437+ 7A7E             >                // dummy db directives used to calculate length of namec
 437+ 7A7E 2A 2F       >                db      "*/"
 437+ 7A80             >len_NFA         defl    $ - temp_NFA
 437+ 7A80             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 437+ 7A7E             >
 437+ 7A7E 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 437+ 7A7F 2A 2F       >                db      "*/"               // name string in 7-bit ascii, but
 437+ 7A81             >                org     $-1                 // alter last byte of Name just above to set
 437+ 7A80 AF          >                db      {b $} | END_BIT     // msb as name end
 437+ 7A81             >
 437+ 7A81 6A 7A       >                dw      last_NFA            // Link to previous definition Name
 437+ 7A83             >MUL_DIV:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 437+ 7A83 53 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 437+ 7A85             >                else
 437+ 7A85 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 437+ 7A85             >                endif           ; ok        // for other definitions it "points" the correct handler
 437+ 7A85             >                // Use of "; ok" to suppress "warning[fwdref]"
 437+ 7A85             >
 437+ 7A85             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 438+ 7A85 72 7A                        dw     MUL_DIV_MOD              // */mod
 439+ 7A87 AB 6A                        dw     NIP                      // nip
 440+ 7A89 4F 69                        dw     EXIT                     // ;
 441+ 7A8B
 442+ 7A8B
 443+ 7A8B              //  ______________________________________________________________________
 444+ 7A8B              //
 445+ 7A8B              // m/mod        ud1 u2 -- u3 ud4
 446+ 7A8B              // mixed operation: it leaves the remainder u3 and the quotient ud4 of ud1 / u1.
 447+ 7A8B              // All terms are unsigned.
 448+ 7A8B              //              Colon_Def MDIV_MOD, "M/MOD", is_normal
 449+ 7A8B              //              dw      TO_R                    // >r           ( ud1 )
 450+ 7A8B              //              dw      ZERO, R_OP, UMDIVMOD    // 0 r um/mod   ( l rem1 h/r )
 451+ 7A8B              //              dw      R_TO, SWAP, TO_R        // r> swap >r   ( l rem )
 452+ 7A8B              //              dw      UMDIVMOD                // um/mod       ( rem2 l/r )
 453+ 7A8B              //              dw      R_TO                    // r>           ( rem2 l/r h/r )
 454+ 7A8B              //              dw      EXIT                    // ;
 455+ 7A8B
 456+ 7A8B              //  ______________________________________________________________________
 457+ 7A8B              //
 458+ 7A8B              // (line)       n1 n2 -- a b
 459+ 7A8B              // sends the line n1 of block n2 to the disk buffer.
 460+ 7A8B              // it returns the address a and ca counter b = C/L meaning a whole line.
 461+ 7A8B                              Colon_Def CLINE, "(LINE)", is_normal
 461+ 7A8B             >                New_Def  CLINE, "(LINE)", Enter_Ptr, is_normal ; ok
 461+ 7A8B             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 461+ 7A8B             >
 461+ 7A8B             >                // dummy db directives used to calculate length of namec
 461+ 7A8B 28 4C 49 4E >                db      "(LINE)"
 461+ 7A8F 45 29       >
 461+ 7A91             >len_NFA         defl    $ - temp_NFA
 461+ 7A91             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 461+ 7A8B             >
 461+ 7A8B 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 461+ 7A8C 28 4C 49 4E >                db      "(LINE)"               // name string in 7-bit ascii, but
 461+ 7A90 45 29       >
 461+ 7A92             >                org     $-1                 // alter last byte of Name just above to set
 461+ 7A91 A9          >                db      {b $} | END_BIT     // msb as name end
 461+ 7A92             >
 461+ 7A92 7E 7A       >                dw      last_NFA            // Link to previous definition Name
 461+ 7A94             >CLINE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 461+ 7A94 53 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 461+ 7A96             >                else
 461+ 7A96 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 461+ 7A96             >                endif           ; ok        // for other definitions it "points" the correct handler
 461+ 7A96             >                // Use of "; ok" to suppress "warning[fwdref]"
 461+ 7A96             >
 461+ 7A96             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 462+ 7A96 7D 69                        dw      TO_R                    // >r
 463+ 7A98 7B 6C                        dw      NOOP                    // noop
 464+ 7A9A 02 6D                        dw      CL                      // c/l
 465+ 7A9C 0E 6D 72 7A                  dw      BBUF, MUL_DIV_MOD       // */mod
 466+ 7AA0 91 69                        dw      R_TO                    // r>
 467+ 7AA2 1A 6D 35 7A                  dw      BSCR, MUL, PLUS         // b/scr * +
 467+ 7AA6 F5 69
 468+ 7AA8 A3 7D                        dw      BLOCK                   // block   ( forward )
 469+ 7AAA F5 69                        dw      PLUS                    // +
 470+ 7AAC 7B 6C                        dw      NOOP                    // noop
 471+ 7AAE 02 6D                        dw      CL                      // c/l
 472+ 7AB0 4F 69                        dw      EXIT                    // ;
 473+ 7AB2
 474+ 7AB2              //  ______________________________________________________________________
 475+ 7AB2              //
 476+ 7AB2              // .line        n1 n2 --
 477+ 7AB2              // Sends to output line  n1  of screen n2.
 478+ 7AB2                              Colon_Def DOT_LINE, ".LINE", is_normal
 478+ 7AB2             >                New_Def  DOT_LINE, ".LINE", Enter_Ptr, is_normal ; ok
 478+ 7AB2             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 478+ 7AB2             >
 478+ 7AB2             >                // dummy db directives used to calculate length of namec
 478+ 7AB2 2E 4C 49 4E >                db      ".LINE"
 478+ 7AB6 45          >
 478+ 7AB7             >len_NFA         defl    $ - temp_NFA
 478+ 7AB7             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 478+ 7AB2             >
 478+ 7AB2 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 478+ 7AB3 2E 4C 49 4E >                db      ".LINE"               // name string in 7-bit ascii, but
 478+ 7AB7 45          >
 478+ 7AB8             >                org     $-1                 // alter last byte of Name just above to set
 478+ 7AB7 C5          >                db      {b $} | END_BIT     // msb as name end
 478+ 7AB8             >
 478+ 7AB8 8B 7A       >                dw      last_NFA            // Link to previous definition Name
 478+ 7ABA             >DOT_LINE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 478+ 7ABA 53 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 478+ 7ABC             >                else
 478+ 7ABC ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 478+ 7ABC             >                endif           ; ok        // for other definitions it "points" the correct handler
 478+ 7ABC             >                // Use of "; ok" to suppress "warning[fwdref]"
 478+ 7ABC             >
 478+ 7ABC             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 479+ 7ABC 94 7A 9B 72                  dw      CLINE, LTRAILING, TYPE  // (line) -trailing type
 479+ 7AC0 37 72
 480+ 7AC2 4F 69                        dw      EXIT                    // ;
 481+ 7AC4
 482+ 7AC4              //  ______________________________________________________________________
 483+ 7AC4              //
 484+ 7AC4              // message       n1 n2 --
 485+ 7AC4              // prints error message to current channel.
 486+ 7AC4              // if WARNING is 0, prints "MSG#n".
 487+ 7AC4              // if WARNING is 1, prints line n of screen 4.
 488+ 7AC4              // if WARNING is -1, see ERROR
 489+ 7AC4              // value can be negative or beyond block 4.
 490+ 7AC4                              Colon_Def MESSAGE, "MESSAGE", is_normal
 490+ 7AC4             >                New_Def  MESSAGE, "MESSAGE", Enter_Ptr, is_normal ; ok
 490+ 7AC4             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 490+ 7AC4             >
 490+ 7AC4             >                // dummy db directives used to calculate length of namec
 490+ 7AC4 4D 45 53 53 >                db      "MESSAGE"
 490+ 7AC8 41 47 45    >
 490+ 7ACB             >len_NFA         defl    $ - temp_NFA
 490+ 7ACB             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 490+ 7AC4             >
 490+ 7AC4 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 490+ 7AC5 4D 45 53 53 >                db      "MESSAGE"               // name string in 7-bit ascii, but
 490+ 7AC9 41 47 45    >
 490+ 7ACC             >                org     $-1                 // alter last byte of Name just above to set
 490+ 7ACB C5          >                db      {b $} | END_BIT     // msb as name end
 490+ 7ACC             >
 490+ 7ACC B2 7A       >                dw      last_NFA            // Link to previous definition Name
 490+ 7ACE             >MESSAGE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 490+ 7ACE 53 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 490+ 7AD0             >                else
 490+ 7AD0 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 490+ 7AD0             >                endif           ; ok        // for other definitions it "points" the correct handler
 490+ 7AD0             >                // Use of "; ok" to suppress "warning[fwdref]"
 490+ 7AD0             >
 490+ 7AD0             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 491+ 7AD0 79 6D 68 6B                  dw      WARNING, FETCH          // warning @
 492+ 7AD4                                                              // if
 493+ 7AD4 E3 63                        dw      ZBRANCH
 494+ 7AD6 18 00                        dw      Message_Else - $
 495+ 7AD8 A9 63 04 00                  dw          LIT, 4              //      4
 496+ 7ADC F4 6D 68 6B                  dw          OFFSET, FETCH       //      offset @
 497+ 7AE0 1A 6D 54 7A                  dw          BSCR, DIV, SUBTRACT //      b/scr / -
 497+ 7AE4 00 6F
 498+ 7AE6 BA 7A                        dw          DOT_LINE            //      .line
 499+ 7AE8 BD 6F                        dw          SPACE               //      space
 500+ 7AEA                                                              // else
 501+ 7AEA
 502+ 7AEA CC 63                        dw      BRANCH
 503+ 7AEC 0B 00                        dw      Message_ENdif - $
 504+ 7AEE              Message_Else:
 505+ 7AEE 4B 74                        dw          C_DOT_QUOTE         //      .( msg#)
 506+ 7AF0 04 6D 73 67                  db          4, "msg#"
 506+ 7AF4 23
 507+ 7AF5 60 83                        dw          DOT                 //      .  ( forward )
 508+ 7AF7              Message_ENdif:                                  // endif
 509+ 7AF7 4F 69                        dw      EXIT                    // ;
 510+ 7AF9
 511+ 7AF9
 512+ 7AF9              //  ______________________________________________________________________
 513+ 7AF9              //
 514+ 7AF9              // device
 515+ 7AF9                              Variable_Def DEVICE,   "DEVICE",   2
 515+ 7AF9             >                New_Def  DEVICE, "DEVICE", Variable_Ptr, is_normal
 515+ 7AF9             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 515+ 7AF9             >
 515+ 7AF9             >                // dummy db directives used to calculate length of namec
 515+ 7AF9 44 45 56 49 >                db      "DEVICE"
 515+ 7AFD 43 45       >
 515+ 7AFF             >len_NFA         defl    $ - temp_NFA
 515+ 7AFF             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 515+ 7AF9             >
 515+ 7AF9 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 515+ 7AFA 44 45 56 49 >                db      "DEVICE"               // name string in 7-bit ascii, but
 515+ 7AFE 43 45       >
 515+ 7B00             >                org     $-1                 // alter last byte of Name just above to set
 515+ 7AFF C5          >                db      {b $} | END_BIT     // msb as name end
 515+ 7B00             >
 515+ 7B00 C4 7A       >                dw      last_NFA            // Link to previous definition Name
 515+ 7B02             >DEVICE:          if Variable_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 515+ 7B02 AB 6C       >                dw      Variable_Ptr ; ok        // for primitive definitions  actual code
 515+ 7B04             >                else
 515+ 7B04 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 515+ 7B04             >                endif           ; ok        // for other definitions it "points" the correct handler
 515+ 7B04             >                // Use of "; ok" to suppress "warning[fwdref]"
 515+ 7B04             >
 515+ 7B04             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 515+ 7B04 02 00       >                dw      2
 516+ 7B06
 517+ 7B06              //  ______________________________________________________________________
 518+ 7B06              //
 519+ 7B06              // inkey        -- c | 0
 520+ 7B06              // call ROM inkey$ routine, returns c or "zero".
 521+ 7B06
 522+ 7B06                              New_Def INKEY, "INKEY", is_code, is_normal
 522+ 7B06             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 522+ 7B06             >
 522+ 7B06             >                // dummy db directives used to calculate length of namec
 522+ 7B06 49 4E 4B 45 >                db      "INKEY"
 522+ 7B0A 59          >
 522+ 7B0B             >len_NFA         defl    $ - temp_NFA
 522+ 7B0B             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 522+ 7B06             >
 522+ 7B06 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 522+ 7B07 49 4E 4B 45 >                db      "INKEY"               // name string in 7-bit ascii, but
 522+ 7B0B 59          >
 522+ 7B0C             >                org     $-1                 // alter last byte of Name just above to set
 522+ 7B0B D9          >                db      {b $} | END_BIT     // msb as name end
 522+ 7B0C             >
 522+ 7B0C F9 7A       >                dw      last_NFA            // Link to previous definition Name
 522+ 7B0E             >INKEY:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 522+ 7B0E ~           >                dw      runcode ; ok        // for primitive definitions  actual code
 522+ 7B0E             >                else
 522+ 7B0E 10 7B       >                dw      $ + 2   ; ok        // is pointed by CFA
 522+ 7B10             >                endif           ; ok        // for other definitions it "points" the correct handler
 522+ 7B10             >                // Use of "; ok" to suppress "warning[fwdref]"
 522+ 7B10             >
 522+ 7B10             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 523+ 7B10
 524+ 7B10 C5                           push    bc
 525+ 7B11 ED 73 92 63                  ld      (SP_Saved), sp
 526+ 7B15 31 61 63                     ld      sp, Cold_origin - 5
 527+ 7B18 DD E5                        push    ix
 528+ 7B1A CD E6 15                     call    $15E6                   // instead of 15E9
 529+ 7B1D DD E1                        pop     ix
 530+ 7B1F ED 7B 92 63                  ld      sp, (SP_Saved)
 531+ 7B23 6F                           ld      l, a
 532+ 7B24 26 00                        ld      h, 0
 533+ 7B26 C1                           pop     bc
 534+ 7B27                              psh1
 534+ 7B27 E5          >                push    hl
 534+ 7B28 DD E9       >                jp      (ix)
 535+ 7B2A
 536+ 7B2A              //  ______________________________________________________________________
 537+ 7B2A              //
 538+ 7B2A              // select      n --
 539+ 7B2A              // selects the given channel number
 540+ 7B2A
 541+ 7B2A                              New_Def SELECT, "SELECT", is_code, is_normal
 541+ 7B2A             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 541+ 7B2A             >
 541+ 7B2A             >                // dummy db directives used to calculate length of namec
 541+ 7B2A 53 45 4C 45 >                db      "SELECT"
 541+ 7B2E 43 54       >
 541+ 7B30             >len_NFA         defl    $ - temp_NFA
 541+ 7B30             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 541+ 7B2A             >
 541+ 7B2A 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 541+ 7B2B 53 45 4C 45 >                db      "SELECT"               // name string in 7-bit ascii, but
 541+ 7B2F 43 54       >
 541+ 7B31             >                org     $-1                 // alter last byte of Name just above to set
 541+ 7B30 D4          >                db      {b $} | END_BIT     // msb as name end
 541+ 7B31             >
 541+ 7B31 06 7B       >                dw      last_NFA            // Link to previous definition Name
 541+ 7B33             >SELECT:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 541+ 7B33 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
 541+ 7B33             >                else
 541+ 7B33 35 7B       >                dw      $ + 2   ; ok        // is pointed by CFA
 541+ 7B35             >                endif           ; ok        // for other definitions it "points" the correct handler
 541+ 7B35             >                // Use of "; ok" to suppress "warning[fwdref]"
 541+ 7B35             >
 541+ 7B35             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 542+ 7B35 E1                           pop     hl
 543+ 7B36 C5                           push    bc
 544+ 7B37 7D                           ld      a, l
 545+ 7B38 ED 73 92 63                  ld      (SP_Saved), sp
 546+ 7B3C 31 61 63                     ld      sp, Cold_origin - 5
 547+ 7B3F DD E5                        push    ix
 548+ 7B41 CD 01 16                     call    $1601
 549+ 7B44 DD E1                        pop     ix
 550+ 7B46 ED 7B 92 63                  ld      sp, (SP_Saved)
 551+ 7B4A C1                           pop     bc
 552+ 7B4B
 553+ 7B4B                              next
 553+ 7B4B DD E9       >                jp      (ix)
 554+ 7B4D
 555+ 7B4D              //  ______________________________________________________________________
 556+ 7B4D
# file closed: C:\Zx\CSpect\Projects\vForth15_INDIRECT/source/L2.asm
 112  7B4D                              include "next-opt1.asm"
# file opened: C:\Zx\CSpect\Projects\vForth15_INDIRECT/source/next-opt1.asm
   1+ 7B4D              //  ______________________________________________________________________
   2+ 7B4D              //
   3+ 7B4D              //  next-opt.asm
   4+ 7B4D              //
   5+ 7B4D              //  ZX Spectrum Next - peculiar definitions
   6+ 7B4D              //  ______________________________________________________________________
   7+ 7B4D
   8+ 7B4D              //  ______________________________________________________________________
   9+ 7B4D              //
  10+ 7B4D              // reg@         n -- b
  11+ 7B4D              // read Next REGister n giving byte b
  12+ 7B4D
  13+ 7B4D                              New_Def REG_FETCH, "REG@", is_code, is_normal
  13+ 7B4D             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  13+ 7B4D             >
  13+ 7B4D             >                // dummy db directives used to calculate length of namec
  13+ 7B4D 52 45 47 40 >                db      "REG@"
  13+ 7B51             >len_NFA         defl    $ - temp_NFA
  13+ 7B51             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  13+ 7B4D             >
  13+ 7B4D 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  13+ 7B4E 52 45 47 40 >                db      "REG@"               // name string in 7-bit ascii, but
  13+ 7B52             >                org     $-1                 // alter last byte of Name just above to set
  13+ 7B51 C0          >                db      {b $} | END_BIT     // msb as name end
  13+ 7B52             >
  13+ 7B52 2A 7B       >                dw      last_NFA            // Link to previous definition Name
  13+ 7B54             >REG_FETCH:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
  13+ 7B54 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
  13+ 7B54             >                else
  13+ 7B54 56 7B       >                dw      $ + 2   ; ok        // is pointed by CFA
  13+ 7B56             >                endif           ; ok        // for other definitions it "points" the correct handler
  13+ 7B56             >                // Use of "; ok" to suppress "warning[fwdref]"
  13+ 7B56             >
  13+ 7B56             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  14+ 7B56 D9                           exx
  15+ 7B57 01 3B 24                     ld      bc, $243B
  16+ 7B5A E1                           pop     hl
  17+ 7B5B ED 69                        out     (c), l
  18+ 7B5D 04                           inc     b
  19+ 7B5E ED 68                        in      l,(c)
  20+ 7B60 E5                           push    hl
  21+ 7B61 D9                           exx
  22+ 7B62                              next
  22+ 7B62 DD E9       >                jp      (ix)
  23+ 7B64
  24+ 7B64
  25+ 7B64              //  ______________________________________________________________________
  26+ 7B64              //
  27+ 7B64              // reg!         b n --
  28+ 7B64              // write value b to Next REGister n
  29+ 7B64
  30+ 7B64                              New_Def REG_STORE, "REG!", is_code, is_normal
  30+ 7B64             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  30+ 7B64             >
  30+ 7B64             >                // dummy db directives used to calculate length of namec
  30+ 7B64 52 45 47 21 >                db      "REG!"
  30+ 7B68             >len_NFA         defl    $ - temp_NFA
  30+ 7B68             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  30+ 7B64             >
  30+ 7B64 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  30+ 7B65 52 45 47 21 >                db      "REG!"               // name string in 7-bit ascii, but
  30+ 7B69             >                org     $-1                 // alter last byte of Name just above to set
  30+ 7B68 A1          >                db      {b $} | END_BIT     // msb as name end
  30+ 7B69             >
  30+ 7B69 4D 7B       >                dw      last_NFA            // Link to previous definition Name
  30+ 7B6B             >REG_STORE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
  30+ 7B6B ~           >                dw      runcode ; ok        // for primitive definitions  actual code
  30+ 7B6B             >                else
  30+ 7B6B 6D 7B       >                dw      $ + 2   ; ok        // is pointed by CFA
  30+ 7B6D             >                endif           ; ok        // for other definitions it "points" the correct handler
  30+ 7B6D             >                // Use of "; ok" to suppress "warning[fwdref]"
  30+ 7B6D             >
  30+ 7B6D             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  31+ 7B6D D9                           exx
  32+ 7B6E 01 3B 24                     ld      bc, $243B
  33+ 7B71 E1                           pop     hl
  34+ 7B72 ED 69                        out     (c), l
  35+ 7B74 04                           inc     b
  36+ 7B75 E1                           pop     hl
  37+ 7B76 ED 69                        out     (c), l
  38+ 7B78 D9                           exx
  39+ 7B79                              next
  39+ 7B79 DD E9       >                jp      (ix)
  40+ 7B7B
  41+ 7B7B
  42+ 7B7B              //  ______________________________________________________________________
  43+ 7B7B              //
  44+ 7B7B              // mmu7@        -- n
  45+ 7B7B              // query current page in MMU7 8K-RAM : 0 and 223
  46+ 7B7B
  47+ 7B7B                              Colon_Def MMU7_FETCH, "MMU7@", is_normal
  47+ 7B7B             >                New_Def  MMU7_FETCH, "MMU7@", Enter_Ptr, is_normal ; ok
  47+ 7B7B             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  47+ 7B7B             >
  47+ 7B7B             >                // dummy db directives used to calculate length of namec
  47+ 7B7B 4D 4D 55 37 >                db      "MMU7@"
  47+ 7B7F 40          >
  47+ 7B80             >len_NFA         defl    $ - temp_NFA
  47+ 7B80             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  47+ 7B7B             >
  47+ 7B7B 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  47+ 7B7C 4D 4D 55 37 >                db      "MMU7@"               // name string in 7-bit ascii, but
  47+ 7B80 40          >
  47+ 7B81             >                org     $-1                 // alter last byte of Name just above to set
  47+ 7B80 C0          >                db      {b $} | END_BIT     // msb as name end
  47+ 7B81             >
  47+ 7B81 64 7B       >                dw      last_NFA            // Link to previous definition Name
  47+ 7B83             >MMU7_FETCH:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
  47+ 7B83 53 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
  47+ 7B85             >                else
  47+ 7B85 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
  47+ 7B85             >                endif           ; ok        // for other definitions it "points" the correct handler
  47+ 7B85             >                // Use of "; ok" to suppress "warning[fwdref]"
  47+ 7B85             >
  47+ 7B85             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  48+ 7B85 A9 63 57 00                  dw      LIT, 87, REG_FETCH
  48+ 7B89 54 7B
  49+ 7B8B 4F 69                        dw      EXIT
  50+ 7B8D
  51+ 7B8D              //  ______________________________________________________________________
  52+ 7B8D              //
  53+ 7B8D              // mmu7!        n --
  54+ 7B8D              // set MMU7 8K-RAM page to n given between 0 and 223
  55+ 7B8D              // optimized version that uses NEXTREG n,A Z80n op-code.
  56+ 7B8D
  57+ 7B8D                              New_Def MMU7_STORE, "MMU7!", is_code, is_normal
  57+ 7B8D             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  57+ 7B8D             >
  57+ 7B8D             >                // dummy db directives used to calculate length of namec
  57+ 7B8D 4D 4D 55 37 >                db      "MMU7!"
  57+ 7B91 21          >
  57+ 7B92             >len_NFA         defl    $ - temp_NFA
  57+ 7B92             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  57+ 7B8D             >
  57+ 7B8D 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  57+ 7B8E 4D 4D 55 37 >                db      "MMU7!"               // name string in 7-bit ascii, but
  57+ 7B92 21          >
  57+ 7B93             >                org     $-1                 // alter last byte of Name just above to set
  57+ 7B92 A1          >                db      {b $} | END_BIT     // msb as name end
  57+ 7B93             >
  57+ 7B93 7B 7B       >                dw      last_NFA            // Link to previous definition Name
  57+ 7B95             >MMU7_STORE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
  57+ 7B95 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
  57+ 7B95             >                else
  57+ 7B95 97 7B       >                dw      $ + 2   ; ok        // is pointed by CFA
  57+ 7B97             >                endif           ; ok        // for other definitions it "points" the correct handler
  57+ 7B97             >                // Use of "; ok" to suppress "warning[fwdref]"
  57+ 7B97             >
  57+ 7B97             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  58+ 7B97 E1                           pop     hl
  59+ 7B98 7D                           ld      a, l
  60+ 7B99 ED 92 57                     nextreg 87, a
  61+ 7B9C
  62+ 7B9C                              next
  62+ 7B9C DD E9       >                jp      (ix)
  63+ 7B9E
  64+ 7B9E              //  ______________________________________________________________________
  65+ 7B9E              //
  66+ 7B9E              // >far         ha -- a n
  67+ 7B9E              // decode bits 765 of H as one of the 8K-page between 64 and 71 (40h-47h)
  68+ 7B9E              // take lower bits of H and L as an offset from E000h
  69+ 7B9E              // then return address  a  between E000h-FFFFh
  70+ 7B9E              // and page number n  between 64-71 (40h-47h)
  71+ 7B9E              // For example, in hex:
  72+ 7B9E              //   0000 >FAR  gives  40.E000
  73+ 7B9E              //   1FFF >FAR  gives  40.FFFF
  74+ 7B9E              //   2000 >FAR  gives  41.E000
  75+ 7B9E              //   3FFF >FAR  gives  41.FFFF
  76+ 7B9E              //   EFFF >FAR  gives  47.EFFF
  77+ 7B9E              //   FFFF >FAR  gives  47.FFFF
  78+ 7B9E              //                New_Def TO_FAR, ">FAR", is_code, is_normal
  79+ 7B9E              //                pop     de
  80+ 7B9E              //                ld      a, d
  81+ 7B9E              //                and     $E0
  82+ 7B9E              //                rlca
  83+ 7B9E              //                rlca
  84+ 7B9E              //                rlca
  85+ 7B9E              //                add     $40
  86+ 7B9E              //                ld      l, a
  87+ 7B9E              //                ld      h, 0
  88+ 7B9E              //                ld      a, d
  89+ 7B9E              //                or      $E0
  90+ 7B9E              //                ld      d, a
  91+ 7B9E              //                push    hl
  92+ 7B9E              //                push    de
  93+ 7B9E              //                next
  94+ 7B9E
  95+ 7B9E              //  ______________________________________________________________________
  96+ 7B9E              //
  97+ 7B9E              // <far         a n  -- ha
  98+ 7B9E              // given an address E000-FFFF and a page number n (64-71 or 40h-47h)
  99+ 7B9E              // reverse of >FAR: encodes a FAR address compressing
 100+ 7B9E              // to bits 765 of H, lower bits of HL address offset from E000h
 101+ 7B9E              //                New_Def FROM_FAR, "<FAR", is_code, is_normal
 102+ 7B9E              //                pop     de                  // page number in e
 103+ 7B9E              //                pop     hl                  // address in hl
 104+ 7B9E              //                ld      a, e
 105+ 7B9E              //                sub     $40                 // reduced to 0-7
 106+ 7B9E              //                rrca
 107+ 7B9E              //                rrca
 108+ 7B9E              //                rrca
 109+ 7B9E              //                ld      d, a                // save to d bits 765
 110+ 7B9E              //                ld      a, h                // drops
 111+ 7B9E              //                and     $1F
 112+ 7B9E              //                or      d
 113+ 7B9E              //                ld      h, a
 114+ 7B9E              //
 115+ 7B9E              //                psh1
 116+ 7B9E
 117+ 7B9E              //  ______________________________________________________________________
 118+ 7B9E              //
 119+ 7B9E              // m_p3dos      n1 n2 n3 n4 a -- n5 n6 n7 n8  f
 120+ 7B9E              // NextZXOS call wrapper.
 121+ 7B9E              //  n1 = hl register parameter value
 122+ 7B9E              //  n2 = de register parameter value
 123+ 7B9E              //  n3 = bc register parameter value
 124+ 7B9E              //  n4 =  a register parameter value
 125+ 7B9E              //   a = routine address in ROM 3
 126+ 7B9E              // ----
 127+ 7B9E              //  n5 = hl returned value
 128+ 7B9E              //  n6 = de returned value
 129+ 7B9E              //  n7 = bc returned value
 130+ 7B9E              //  n8 =  a returned value
 131+ 7B9E              //   f
 132+ 7B9E                              New_Def M_P3DOS, "M_P3DOS", is_code, is_normal
 132+ 7B9E             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 132+ 7B9E             >
 132+ 7B9E             >                // dummy db directives used to calculate length of namec
 132+ 7B9E 4D 5F 50 33 >                db      "M_P3DOS"
 132+ 7BA2 44 4F 53    >
 132+ 7BA5             >len_NFA         defl    $ - temp_NFA
 132+ 7BA5             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 132+ 7B9E             >
 132+ 7B9E 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 132+ 7B9F 4D 5F 50 33 >                db      "M_P3DOS"               // name string in 7-bit ascii, but
 132+ 7BA3 44 4F 53    >
 132+ 7BA6             >                org     $-1                 // alter last byte of Name just above to set
 132+ 7BA5 D3          >                db      {b $} | END_BIT     // msb as name end
 132+ 7BA6             >
 132+ 7BA6 8D 7B       >                dw      last_NFA            // Link to previous definition Name
 132+ 7BA8             >M_P3DOS:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 132+ 7BA8 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
 132+ 7BA8             >                else
 132+ 7BA8 AA 7B       >                dw      $ + 2   ; ok        // is pointed by CFA
 132+ 7BAA             >                endif           ; ok        // for other definitions it "points" the correct handler
 132+ 7BAA             >                // Use of "; ok" to suppress "warning[fwdref]"
 132+ 7BAA             >
 132+ 7BAA             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 133+ 7BAA D1                           pop     de                  // dos call entry address in de
 134+ 7BAB E1                           pop     hl                  // a register
 135+ 7BAC 7D                           ld      a, l
 136+ 7BAD D9                           exx
 137+ 7BAE C1                           pop     bc
 138+ 7BAF D1                           pop     de
 139+ 7BB0 E1                           pop     hl
 140+ 7BB1 D9                           exx
 141+ 7BB2
 142+ 7BB2 C5                           push    bc
 143+ 7BB3 DD E5                        push    ix
 144+ 7BB5
 145+ 7BB5 ED 73 92 63                  ld      (SP_Saved), sp
 146+ 7BB9 31 61 63                     ld      sp, Cold_origin - 5
 147+ 7BBC 0E 07                        ld      c, 7                // use 7 RAM Bank
 148+ 7BBE
 149+ 7BBE CF                           rst     08
 150+ 7BBF 94                           db      $94
 151+ 7BC0
 152+ 7BC0 ED 7B 92 63                  ld      sp, (SP_Saved)
 153+ 7BC4 DD E5                        push    ix
 154+ 7BC6 E1                           pop     hl
 155+ 7BC7 22 90 63                     ld      (IX_Echo), hl
 156+ 7BCA              //              nop
 157+ 7BCA DD E1                        pop     ix
 158+ 7BCC E3                           ex      (sp), hl            // hl argument and retrieve bc
 159+ 7BCD D5                           push    de
 160+ 7BCE C5                           push    bc
 161+ 7BCF 4D                           ld      c, l
 162+ 7BD0 44                           ld      b, h
 163+ 7BD1
 164+ 7BD1 26 00                        ld      h, 0
 165+ 7BD3 6F                           ld      l, a
 166+ 7BD4 E5                           push    hl
 167+ 7BD5 ED 62                        sbc     hl, hl              // -1 for OK ; 0 for KO but now...
 168+ 7BD7 23                           inc     hl                  //  0 for OK ; 1 for ko
 169+ 7BD8
 170+ 7BD8                              psh1
 170+ 7BD8 E5          >                push    hl
 170+ 7BD9 DD E9       >                jp      (ix)
 171+ 7BDB
 172+ 7BDB              //  ______________________________________________________________________
 173+ 7BDB              //
 174+ 7BDB              // blk-fh
 175+ 7BDB                              Variable_Def BLK_FH,   "BLK-FH",   1
 175+ 7BDB             >                New_Def  BLK_FH, "BLK-FH", Variable_Ptr, is_normal
 175+ 7BDB             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 175+ 7BDB             >
 175+ 7BDB             >                // dummy db directives used to calculate length of namec
 175+ 7BDB 42 4C 4B 2D >                db      "BLK-FH"
 175+ 7BDF 46 48       >
 175+ 7BE1             >len_NFA         defl    $ - temp_NFA
 175+ 7BE1             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 175+ 7BDB             >
 175+ 7BDB 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 175+ 7BDC 42 4C 4B 2D >                db      "BLK-FH"               // name string in 7-bit ascii, but
 175+ 7BE0 46 48       >
 175+ 7BE2             >                org     $-1                 // alter last byte of Name just above to set
 175+ 7BE1 C8          >                db      {b $} | END_BIT     // msb as name end
 175+ 7BE2             >
 175+ 7BE2 9E 7B       >                dw      last_NFA            // Link to previous definition Name
 175+ 7BE4             >BLK_FH:          if Variable_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 175+ 7BE4 AB 6C       >                dw      Variable_Ptr ; ok        // for primitive definitions  actual code
 175+ 7BE6             >                else
 175+ 7BE6 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 175+ 7BE6             >                endif           ; ok        // for other definitions it "points" the correct handler
 175+ 7BE6             >                // Use of "; ok" to suppress "warning[fwdref]"
 175+ 7BE6             >
 175+ 7BE6             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 175+ 7BE6 01 00       >                dw      1
 176+ 7BE8
 177+ 7BE8                              New_Def BLK_FNAME,   "BLK-FNAME", Create_Ptr, is_normal
 177+ 7BE8             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 177+ 7BE8             >
 177+ 7BE8             >                // dummy db directives used to calculate length of namec
 177+ 7BE8 42 4C 4B 2D >                db      "BLK-FNAME"
 177+ 7BEC 46 4E 41 4D >
 177+ 7BF0 45          >
 177+ 7BF1             >len_NFA         defl    $ - temp_NFA
 177+ 7BF1             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 177+ 7BE8             >
 177+ 7BE8 89          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 177+ 7BE9 42 4C 4B 2D >                db      "BLK-FNAME"               // name string in 7-bit ascii, but
 177+ 7BED 46 4E 41 4D >
 177+ 7BF1 45          >
 177+ 7BF2             >                org     $-1                 // alter last byte of Name just above to set
 177+ 7BF1 C5          >                db      {b $} | END_BIT     // msb as name end
 177+ 7BF2             >
 177+ 7BF2 DB 7B       >                dw      last_NFA            // Link to previous definition Name
 177+ 7BF4             >BLK_FNAME:          if Create_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 177+ 7BF4 AF 76       >                dw      Create_Ptr ; ok        // for primitive definitions  actual code
 177+ 7BF6             >                else
 177+ 7BF6 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 177+ 7BF6             >                endif           ; ok        // for other definitions it "points" the correct handler
 177+ 7BF6             >                // Use of "; ok" to suppress "warning[fwdref]"
 177+ 7BF6             >
 177+ 7BF6             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 178+ 7BF6 0E 21 42 6C                  db      14, "!Blocks-64.bin", 0
 178+ 7BFA 6F 63 6B 73
 178+ 7BFE 2D 36 34 2E
 178+ 7C02 62 69 6E 00
 179+ 7C06 00 00 00...                  ds      24
 180+ 7C1E
 181+ 7C1E              //  ______________________________________________________________________
 182+ 7C1E              //
 183+ 7C1E              // blk-seek     n --
 184+ 7C1E              // seek block n  within blocks!.bin  file
 185+ 7C1E                              Colon_Def BLK_SEEK, "BLK-SEEK", is_normal
 185+ 7C1E             >                New_Def  BLK_SEEK, "BLK-SEEK", Enter_Ptr, is_normal ; ok
 185+ 7C1E             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 185+ 7C1E             >
 185+ 7C1E             >                // dummy db directives used to calculate length of namec
 185+ 7C1E 42 4C 4B 2D >                db      "BLK-SEEK"
 185+ 7C22 53 45 45 4B >
 185+ 7C26             >len_NFA         defl    $ - temp_NFA
 185+ 7C26             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 185+ 7C1E             >
 185+ 7C1E 88          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 185+ 7C1F 42 4C 4B 2D >                db      "BLK-SEEK"               // name string in 7-bit ascii, but
 185+ 7C23 53 45 45 4B >
 185+ 7C27             >                org     $-1                 // alter last byte of Name just above to set
 185+ 7C26 CB          >                db      {b $} | END_BIT     // msb as name end
 185+ 7C27             >
 185+ 7C27 E8 7B       >                dw      last_NFA            // Link to previous definition Name
 185+ 7C29             >BLK_SEEK:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 185+ 7C29 53 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 185+ 7C2B             >                else
 185+ 7C2B ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 185+ 7C2B             >                endif           ; ok        // for other definitions it "points" the correct handler
 185+ 7C2B             >                // Use of "; ok" to suppress "warning[fwdref]"
 185+ 7C2B             >
 185+ 7C2B             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 186+ 7C2B 0E 6D 98 79                  dw  BBUF, MMUL
 187+ 7C2F E4 7B 68 6B                  dw  BLK_FH, FETCH
 188+ 7C33 3C 67                        dw  F_SEEK
 189+ 7C35 A9 63 2D 00                  dw  LIT, $2D, QERROR
 189+ 7C39 77 70
 190+ 7C3B 4F 69                        dw  EXIT
 191+ 7C3D
 192+ 7C3D              //  ______________________________________________________________________
 193+ 7C3D              //
 194+ 7C3D              // blk-read     n --
 195+ 7C3D              // seek block n  within blocks!.bin  file
 196+ 7C3D                              Colon_Def BLK_READ, "BLK-READ", is_normal
 196+ 7C3D             >                New_Def  BLK_READ, "BLK-READ", Enter_Ptr, is_normal ; ok
 196+ 7C3D             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 196+ 7C3D             >
 196+ 7C3D             >                // dummy db directives used to calculate length of namec
 196+ 7C3D 42 4C 4B 2D >                db      "BLK-READ"
 196+ 7C41 52 45 41 44 >
 196+ 7C45             >len_NFA         defl    $ - temp_NFA
 196+ 7C45             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 196+ 7C3D             >
 196+ 7C3D 88          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 196+ 7C3E 42 4C 4B 2D >                db      "BLK-READ"               // name string in 7-bit ascii, but
 196+ 7C42 52 45 41 44 >
 196+ 7C46             >                org     $-1                 // alter last byte of Name just above to set
 196+ 7C45 C4          >                db      {b $} | END_BIT     // msb as name end
 196+ 7C46             >
 196+ 7C46 1E 7C       >                dw      last_NFA            // Link to previous definition Name
 196+ 7C48             >BLK_READ:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 196+ 7C48 53 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 196+ 7C4A             >                else
 196+ 7C4A ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 196+ 7C4A             >                endif           ; ok        // for other definitions it "points" the correct handler
 196+ 7C4A             >                // Use of "; ok" to suppress "warning[fwdref]"
 196+ 7C4A             >
 196+ 7C4A             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 197+ 7C4A 29 7C                        dw  BLK_SEEK
 198+ 7C4C 0E 6D                        dw  BBUF
 199+ 7C4E E4 7B 68 6B                  dw  BLK_FH, FETCH
 200+ 7C52 A8 67                        dw  F_READ
 201+ 7C54 A9 63 2E 00                  dw  LIT, $2E, QERROR
 201+ 7C58 77 70
 202+ 7C5A A0 6A                        dw  DROP
 203+ 7C5C 4F 69                        dw  EXIT
 204+ 7C5E
 205+ 7C5E              //  ______________________________________________________________________
 206+ 7C5E              //
 207+ 7C5E              // blk-write     n --
 208+ 7C5E              // seek block n  within blocks!.bin  file
 209+ 7C5E                              Colon_Def BLK_WRITE, "BLK-WRITE", is_normal
 209+ 7C5E             >                New_Def  BLK_WRITE, "BLK-WRITE", Enter_Ptr, is_normal ; ok
 209+ 7C5E             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 209+ 7C5E             >
 209+ 7C5E             >                // dummy db directives used to calculate length of namec
 209+ 7C5E 42 4C 4B 2D >                db      "BLK-WRITE"
 209+ 7C62 57 52 49 54 >
 209+ 7C66 45          >
 209+ 7C67             >len_NFA         defl    $ - temp_NFA
 209+ 7C67             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 209+ 7C5E             >
 209+ 7C5E 89          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 209+ 7C5F 42 4C 4B 2D >                db      "BLK-WRITE"               // name string in 7-bit ascii, but
 209+ 7C63 57 52 49 54 >
 209+ 7C67 45          >
 209+ 7C68             >                org     $-1                 // alter last byte of Name just above to set
 209+ 7C67 C5          >                db      {b $} | END_BIT     // msb as name end
 209+ 7C68             >
 209+ 7C68 3D 7C       >                dw      last_NFA            // Link to previous definition Name
 209+ 7C6A             >BLK_WRITE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 209+ 7C6A 53 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 209+ 7C6C             >                else
 209+ 7C6C ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 209+ 7C6C             >                endif           ; ok        // for other definitions it "points" the correct handler
 209+ 7C6C             >                // Use of "; ok" to suppress "warning[fwdref]"
 209+ 7C6C             >
 209+ 7C6C             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 210+ 7C6C 29 7C                        dw  BLK_SEEK
 211+ 7C6E 0E 6D                        dw  BBUF
 212+ 7C70 E4 7B 68 6B                  dw  BLK_FH, FETCH
 213+ 7C74 C7 67                        dw  F_WRITE
 214+ 7C76 A9 63 2F 00                  dw  LIT, $2F, QERROR
 214+ 7C7A 77 70
 215+ 7C7C A0 6A                        dw  DROP
 216+ 7C7E 4F 69                        dw  EXIT
 217+ 7C80
 218+ 7C80              //  ______________________________________________________________________
 219+ 7C80              //
 220+ 7C80              // blk-init     n --
 221+ 7C80              // seek block n  within blocks!.bin  file
 222+ 7C80                              Colon_Def BLK_INIT, "BLK-INIT", is_normal
 222+ 7C80             >                New_Def  BLK_INIT, "BLK-INIT", Enter_Ptr, is_normal ; ok
 222+ 7C80             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 222+ 7C80             >
 222+ 7C80             >                // dummy db directives used to calculate length of namec
 222+ 7C80 42 4C 4B 2D >                db      "BLK-INIT"
 222+ 7C84 49 4E 49 54 >
 222+ 7C88             >len_NFA         defl    $ - temp_NFA
 222+ 7C88             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 222+ 7C80             >
 222+ 7C80 88          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 222+ 7C81 42 4C 4B 2D >                db      "BLK-INIT"               // name string in 7-bit ascii, but
 222+ 7C85 49 4E 49 54 >
 222+ 7C89             >                org     $-1                 // alter last byte of Name just above to set
 222+ 7C88 D4          >                db      {b $} | END_BIT     // msb as name end
 222+ 7C89             >
 222+ 7C89 5E 7C       >                dw      last_NFA            // Link to previous definition Name
 222+ 7C8B             >BLK_INIT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 222+ 7C8B 53 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 222+ 7C8D             >                else
 222+ 7C8D ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 222+ 7C8D             >                endif           ; ok        // for other definitions it "points" the correct handler
 222+ 7C8D             >                // Use of "; ok" to suppress "warning[fwdref]"
 222+ 7C8D             >
 222+ 7C8D             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 223+ 7C8D E4 7B 68 6B                  dw  BLK_FH, FETCH, F_CLOSE, DROP
 223+ 7C91 5F 67 A0 6A
 224+ 7C95 F4 7B 16 6A                  dw  BLK_FNAME, ONE_PLUS
 225+ 7C99 AD 6E E6 6C                  dw  HERE, THREE, F_OPEN         // open for update (read+write)
 225+ 7C9D DE 67
 226+ 7C9F A9 63 2C 00                  dw  LIT, $2C, QERROR
 226+ 7CA3 77 70
 227+ 7CA5 E4 7B 75 6B                  dw  BLK_FH, STORE
 228+ 7CA9 4F 69                        dw  EXIT
 229+ 7CAB
 230+ 7CAB              //  ______________________________________________________________________
 231+ 7CAB              //
 232+ 7CAB              // #sec
 233+ 7CAB              // number of 512 Byte "sector" available on thie sysstem.
 234+ 7CAB              // it addd up to 16 MByte of data that can be used as source or pool for almost anything.
 235+ 7CAB
 236+ 7CAB                              Constant_Def NSEC , "#SEC", 32767
 236+ 7CAB             >                New_Def  NSEC, "#SEC", Constant_Ptr, is_normal
 236+ 7CAB             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 236+ 7CAB             >
 236+ 7CAB             >                // dummy db directives used to calculate length of namec
 236+ 7CAB 23 53 45 43 >                db      "#SEC"
 236+ 7CAF             >len_NFA         defl    $ - temp_NFA
 236+ 7CAF             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 236+ 7CAB             >
 236+ 7CAB 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 236+ 7CAC 23 53 45 43 >                db      "#SEC"               // name string in 7-bit ascii, but
 236+ 7CB0             >                org     $-1                 // alter last byte of Name just above to set
 236+ 7CAF C3          >                db      {b $} | END_BIT     // msb as name end
 236+ 7CB0             >
 236+ 7CB0 80 7C       >                dw      last_NFA            // Link to previous definition Name
 236+ 7CB2             >NSEC:          if Constant_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 236+ 7CB2 92 6C       >                dw      Constant_Ptr ; ok        // for primitive definitions  actual code
 236+ 7CB4             >                else
 236+ 7CB4 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 236+ 7CB4             >                endif           ; ok        // for other definitions it "points" the correct handler
 236+ 7CB4             >                // Use of "; ok" to suppress "warning[fwdref]"
 236+ 7CB4             >
 236+ 7CB4             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 236+ 7CB4 FF 7F       >                dw      32767
 237+ 7CB6
 238+ 7CB6              //  ______________________________________________________________________
 239+ 7CB6
 240+ 7CB6
 241+ 7CB6
# file closed: C:\Zx\CSpect\Projects\vForth15_INDIRECT/source/next-opt1.asm
 113  7CB6                              include "L3.asm"
# file opened: C:\Zx\CSpect\Projects\vForth15_INDIRECT/source/L3.asm
   1+ 7CB6              //  ______________________________________________________________________
   2+ 7CB6              //
   3+ 7CB6              //  L3.asm
   4+ 7CB6              //
   5+ 7CB6              //  Continuation of L2.asm
   6+ 7CB6              //  I/O Block definitions
   7+ 7CB6              //  ______________________________________________________________________
   8+ 7CB6
   9+ 7CB6
  10+ 7CB6              //  ______________________________________________________________________
  11+ 7CB6              //
  12+ 7CB6              // r/w          a n f --
  13+ 7CB6              // read/write block n depending on flag f, true-flag means read, false-flag means write.
  14+ 7CB6                              Colon_Def READ_WRITE, "R/W", is_normal
  14+ 7CB6             >                New_Def  READ_WRITE, "R/W", Enter_Ptr, is_normal ; ok
  14+ 7CB6             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  14+ 7CB6             >
  14+ 7CB6             >                // dummy db directives used to calculate length of namec
  14+ 7CB6 52 2F 57    >                db      "R/W"
  14+ 7CB9             >len_NFA         defl    $ - temp_NFA
  14+ 7CB9             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  14+ 7CB6             >
  14+ 7CB6 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  14+ 7CB7 52 2F 57    >                db      "R/W"               // name string in 7-bit ascii, but
  14+ 7CBA             >                org     $-1                 // alter last byte of Name just above to set
  14+ 7CB9 D7          >                db      {b $} | END_BIT     // msb as name end
  14+ 7CBA             >
  14+ 7CBA AB 7C       >                dw      last_NFA            // Link to previous definition Name
  14+ 7CBC             >READ_WRITE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
  14+ 7CBC 53 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
  14+ 7CBE             >                else
  14+ 7CBE ~           >                dw      $ + 2   ; ok        // is pointed by CFA
  14+ 7CBE             >                endif           ; ok        // for other definitions it "points" the correct handler
  14+ 7CBE             >                // Use of "; ok" to suppress "warning[fwdref]"
  14+ 7CBE             >
  14+ 7CBE             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  15+ 7CBE 7D 69                        dw      TO_R                    // >r
  16+ 7CC0 22 6A                        dw      ONE_SUBTRACT            // 1-
  17+ 7CC2 D5 6A CD 69                  dw      DUP, ZLESS              // dup 0<
  18+ 7CC6 90 6A B2 7C                  dw      OVER, NSEC              // over #sec
  19+ 7CCA 22 6A 4B 6F                  dw      ONE_SUBTRACT, GREATER   // 1- >
  20+ 7CCE F1 68                        dw      OR_OP                   // or
  21+ 7CD0 A9 63 06 00                  dw      LIT, 6, QERROR          // 6 ?error
  21+ 7CD4 77 70
  22+ 7CD6 91 69                        dw      R_TO                    // r>
  23+ 7CD8                                                              // if
  24+ 7CD8 E3 63                        dw      ZBRANCH
  25+ 7CDA 08 00                        dw      Read_Write_Else - $
  26+ 7CDC 48 7C                        dw          BLK_READ            //      blk-read
  27+ 7CDE CC 63                        dw      BRANCH
  28+ 7CE0 04 00                        dw      Read_Write_Endif - $
  29+ 7CE2              Read_Write_Else:                                // else
  30+ 7CE2 6A 7C                        dw          BLK_WRITE           //      blk-write
  31+ 7CE4              Read_Write_Endif:                               // endif
  32+ 7CE4 4F 69                        dw      EXIT                    // ;
  33+ 7CE6
  34+ 7CE6
  35+ 7CE6              //  ______________________________________________________________________
  36+ 7CE6              //
  37+ 7CE6              // +buf        a1 -- a2 f
  38+ 7CE6              // advences to next buffer, cyclically rotating along them
  39+ 7CE6                              Colon_Def PBUF, "+BUF", is_normal
  39+ 7CE6             >                New_Def  PBUF, "+BUF", Enter_Ptr, is_normal ; ok
  39+ 7CE6             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  39+ 7CE6             >
  39+ 7CE6             >                // dummy db directives used to calculate length of namec
  39+ 7CE6 2B 42 55 46 >                db      "+BUF"
  39+ 7CEA             >len_NFA         defl    $ - temp_NFA
  39+ 7CEA             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  39+ 7CE6             >
  39+ 7CE6 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  39+ 7CE7 2B 42 55 46 >                db      "+BUF"               // name string in 7-bit ascii, but
  39+ 7CEB             >                org     $-1                 // alter last byte of Name just above to set
  39+ 7CEA C6          >                db      {b $} | END_BIT     // msb as name end
  39+ 7CEB             >
  39+ 7CEB B6 7C       >                dw      last_NFA            // Link to previous definition Name
  39+ 7CED             >PBUF:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
  39+ 7CED 53 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
  39+ 7CEF             >                else
  39+ 7CEF ~           >                dw      $ + 2   ; ok        // is pointed by CFA
  39+ 7CEF             >                endif           ; ok        // for other definitions it "points" the correct handler
  39+ 7CEF             >                // Use of "; ok" to suppress "warning[fwdref]"
  39+ 7CEF             >
  39+ 7CEF             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  40+ 7CEF A9 63 04 02                  dw      LIT, 516, PLUS          // 516 +
  40+ 7CF3 F5 69
  41+ 7CF5 D5 6A B0 6D                  dw      DUP, LIMIT, FETCH       // dup limit @
  41+ 7CF9 68 6B
  42+ 7CFB 0E 6F                        dw      EQUALS                  // =
  43+ 7CFD                                                              // if
  44+ 7CFD E3 63                        dw      ZBRANCH
  45+ 7CFF 08 00                        dw      PBuf_Endif - $
  46+ 7D01 A0 6A                        dw          DROP                //      drop
  47+ 7D03 A5 6D 68 6B                  dw          FIRST, FETCH        //      first @
  48+ 7D07              PBuf_Endif:                                     // endif
  49+ 7D07 D5 6A 62 6E                  dw      DUP, PREV, FETCH        // dup prev @
  49+ 7D0B 68 6B
  50+ 7D0D 00 6F                        dw      SUBTRACT                // -
  51+ 7D0F 4F 69                        dw      EXIT                    // ;
  52+ 7D11
  53+ 7D11              //  ______________________________________________________________________
  54+ 7D11              //
  55+ 7D11              // update       --
  56+ 7D11              // mark the last used block to be written to disk
  57+ 7D11                              Colon_Def UPDATE, "UPDATE", is_normal
  57+ 7D11             >                New_Def  UPDATE, "UPDATE", Enter_Ptr, is_normal ; ok
  57+ 7D11             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  57+ 7D11             >
  57+ 7D11             >                // dummy db directives used to calculate length of namec
  57+ 7D11 55 50 44 41 >                db      "UPDATE"
  57+ 7D15 54 45       >
  57+ 7D17             >len_NFA         defl    $ - temp_NFA
  57+ 7D17             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  57+ 7D11             >
  57+ 7D11 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  57+ 7D12 55 50 44 41 >                db      "UPDATE"               // name string in 7-bit ascii, but
  57+ 7D16 54 45       >
  57+ 7D18             >                org     $-1                 // alter last byte of Name just above to set
  57+ 7D17 C5          >                db      {b $} | END_BIT     // msb as name end
  57+ 7D18             >
  57+ 7D18 E6 7C       >                dw      last_NFA            // Link to previous definition Name
  57+ 7D1A             >UPDATE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
  57+ 7D1A 53 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
  57+ 7D1C             >                else
  57+ 7D1C ~           >                dw      $ + 2   ; ok        // is pointed by CFA
  57+ 7D1C             >                endif           ; ok        // for other definitions it "points" the correct handler
  57+ 7D1C             >                // Use of "; ok" to suppress "warning[fwdref]"
  57+ 7D1C             >
  57+ 7D1C             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  58+ 7D1C 62 6E 68 6B                  dw      PREV, FETCH, FETCH      // prev @ @
  58+ 7D20 68 6B
  59+ 7D22 A9 63 00 80                  dw      LIT, $8000, OR_OP       // $8000, or
  59+ 7D26 F1 68
  60+ 7D28 62 6E 68 6B                  dw      PREV, FETCH, STORE      // prev @ !
  60+ 7D2C 75 6B
  61+ 7D2E 4F 69                        dw      EXIT                    // ;
  62+ 7D30
  63+ 7D30
  64+ 7D30              //  ______________________________________________________________________
  65+ 7D30              //
  66+ 7D30              // empty-buffers --
  67+ 7D30                              Colon_Def EMPTY_BUFFERS, "EMPTY-BUFFERS", is_normal
  67+ 7D30             >                New_Def  EMPTY_BUFFERS, "EMPTY-BUFFERS", Enter_Ptr, is_normal ; ok
  67+ 7D30             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  67+ 7D30             >
  67+ 7D30             >                // dummy db directives used to calculate length of namec
  67+ 7D30 45 4D 50 54 >                db      "EMPTY-BUFFERS"
  67+ 7D34 59 2D 42 55 >
  67+ 7D38 46 46 45 52 >
  67+ 7D3C 53          >
  67+ 7D3D             >len_NFA         defl    $ - temp_NFA
  67+ 7D3D             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  67+ 7D30             >
  67+ 7D30 8D          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  67+ 7D31 45 4D 50 54 >                db      "EMPTY-BUFFERS"               // name string in 7-bit ascii, but
  67+ 7D35 59 2D 42 55 >
  67+ 7D39 46 46 45 52 >
  67+ 7D3D 53          >
  67+ 7D3E             >                org     $-1                 // alter last byte of Name just above to set
  67+ 7D3D D3          >                db      {b $} | END_BIT     // msb as name end
  67+ 7D3E             >
  67+ 7D3E 11 7D       >                dw      last_NFA            // Link to previous definition Name
  67+ 7D40             >EMPTY_BUFFERS:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
  67+ 7D40 53 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
  67+ 7D42             >                else
  67+ 7D42 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
  67+ 7D42             >                endif           ; ok        // for other definitions it "points" the correct handler
  67+ 7D42             >                // Use of "; ok" to suppress "warning[fwdref]"
  67+ 7D42             >
  67+ 7D42             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  68+ 7D42 A5 6D 68 6B                  dw      FIRST, FETCH            // first @
  69+ 7D46 B0 6D 68 6B                  dw      LIMIT, FETCH            // limit @
  70+ 7D4A 90 6A 00 6F                  dw      OVER, SUBTRACT, ERASE   // over - erase
  70+ 7D4E B3 73
  71+ 7D50 4F 69                        dw      EXIT                    // ;
  72+ 7D52
  73+ 7D52              //  ______________________________________________________________________
  74+ 7D52              //
  75+ 7D52              // buffer       n -- a
  76+ 7D52              // read block n and gives the address to a buffer
  77+ 7D52              // any block previously inside the buffer, if modified, is rewritten to
  78+ 7D52              // disk before reading the block n.
  79+ 7D52
  80+ 7D52                              Colon_Def BUFFER, "BUFFER", is_normal
  80+ 7D52             >                New_Def  BUFFER, "BUFFER", Enter_Ptr, is_normal ; ok
  80+ 7D52             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  80+ 7D52             >
  80+ 7D52             >                // dummy db directives used to calculate length of namec
  80+ 7D52 42 55 46 46 >                db      "BUFFER"
  80+ 7D56 45 52       >
  80+ 7D58             >len_NFA         defl    $ - temp_NFA
  80+ 7D58             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  80+ 7D52             >
  80+ 7D52 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  80+ 7D53 42 55 46 46 >                db      "BUFFER"               // name string in 7-bit ascii, but
  80+ 7D57 45 52       >
  80+ 7D59             >                org     $-1                 // alter last byte of Name just above to set
  80+ 7D58 D2          >                db      {b $} | END_BIT     // msb as name end
  80+ 7D59             >
  80+ 7D59 30 7D       >                dw      last_NFA            // Link to previous definition Name
  80+ 7D5B             >BUFFER:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
  80+ 7D5B 53 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
  80+ 7D5D             >                else
  80+ 7D5D ~           >                dw      $ + 2   ; ok        // is pointed by CFA
  80+ 7D5D             >                endif           ; ok        // for other definitions it "points" the correct handler
  80+ 7D5D             >                // Use of "; ok" to suppress "warning[fwdref]"
  80+ 7D5D             >
  80+ 7D5D             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  81+ 7D5D 58 6E 68 6B                  dw      USE, FETCH              // use @
  82+ 7D61 D5 6A 7D 69                  dw      DUP, TO_R               // dup >r
  83+ 7D65                                                              // begin
  84+ 7D65              Buffer_Begin:
  85+ 7D65 ED 7C                        dw          PBUF                //      +buf
  86+ 7D67                                                              // until
  87+ 7D67 E3 63                        dw      ZBRANCH
  88+ 7D69 FC FF                        dw      Buffer_Begin - $
  89+ 7D6B 58 6E 75 6B                  dw      USE, STORE              // use !
  90+ 7D6F A5 69 68 6B                  dw      R_OP, FETCH, ZLESS      // r @ 0<
  90+ 7D73 CD 69
  91+ 7D75                                                              // if
  92+ 7D75 E3 63                        dw      ZBRANCH
  93+ 7D77 14 00                        dw      Buffer_Endif - $
  94+ 7D79 A5 69 3E 6A                  dw          R_OP, CELL_PLUS     //      r cell+
  95+ 7D7D A5 69 68 6B                  dw          R_OP, FETCH         //      r fetch
  96+ 7D81 A9 63 FF 7F                  dw          LIT, $7FFF          //      7FFF
  97+ 7D85 DF 68                        dw          AND_OP              //      and
  98+ 7D87 CE 6C BC 7C                  dw          ZERO, READ_WRITE    //      0 r/w
  99+ 7D8B              Buffer_Endif:                                   // endif
 100+ 7D8B A5 69 75 6B                  dw      R_OP, STORE             // r !
 101+ 7D8F A5 69 62 6E                  dw      R_OP, PREV, STORE       // r prev !
 101+ 7D93 75 6B
 102+ 7D95 91 69 3E 6A                  dw      R_TO, CELL_PLUS         // r> cell+
 103+ 7D99 4F 69                        dw      EXIT                    // ;
 104+ 7D9B
 105+ 7D9B              //  ______________________________________________________________________
 106+ 7D9B              //
 107+ 7D9B              // block        n -- a
 108+ 7D9B              // Leaves the buffer address that contains the block n.
 109+ 7D9B              // If the block is not already present, it will be loaded from disk
 110+ 7D9B              // The block previously inside the buffer, if modified, is rewritten to
 111+ 7D9B              // disk before reading the block n.
 112+ 7D9B              // See also BUFFER, R/W, UPDATE, FLUSH.
 113+ 7D9B
 114+ 7D9B                              Colon_Def BLOCK, "BLOCK", is_normal
 114+ 7D9B             >                New_Def  BLOCK, "BLOCK", Enter_Ptr, is_normal ; ok
 114+ 7D9B             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 114+ 7D9B             >
 114+ 7D9B             >                // dummy db directives used to calculate length of namec
 114+ 7D9B 42 4C 4F 43 >                db      "BLOCK"
 114+ 7D9F 4B          >
 114+ 7DA0             >len_NFA         defl    $ - temp_NFA
 114+ 7DA0             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 114+ 7D9B             >
 114+ 7D9B 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 114+ 7D9C 42 4C 4F 43 >                db      "BLOCK"               // name string in 7-bit ascii, but
 114+ 7DA0 4B          >
 114+ 7DA1             >                org     $-1                 // alter last byte of Name just above to set
 114+ 7DA0 CB          >                db      {b $} | END_BIT     // msb as name end
 114+ 7DA1             >
 114+ 7DA1 52 7D       >                dw      last_NFA            // Link to previous definition Name
 114+ 7DA3             >BLOCK:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 114+ 7DA3 53 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 114+ 7DA5             >                else
 114+ 7DA5 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 114+ 7DA5             >                endif           ; ok        // for other definitions it "points" the correct handler
 114+ 7DA5             >                // Use of "; ok" to suppress "warning[fwdref]"
 114+ 7DA5             >
 114+ 7DA5             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 115+ 7DA5 F4 6D 68 6B                  dw      OFFSET, FETCH           // offset @
 116+ 7DA9 F5 69 7D 69                  dw      PLUS, TO_R              // + >r
 117+ 7DAD 62 6E 68 6B                  dw      PREV, FETCH             // prev @
 118+ 7DB1 D5 6A 68 6B                  dw      DUP, FETCH              // dup @
 119+ 7DB5 A5 69 00 6F                  dw      R_OP, SUBTRACT          // r -
 120+ 7DB9 D5 6A F5 69                  dw      DUP, PLUS               // dup +  ( trick: check equality without most significant bit )
 121+ 7DBD                                                              // if
 122+ 7DBD E3 63                        dw        ZBRANCH
 123+ 7DBF 32 00                        dw        Block_Endif_1 - $
 124+ 7DC1              Block_Begin:                                    //      begin
 125+ 7DC1 ED 7C B2 69                  dw          PBUF, ZEQUAL        //          +buf 0
 126+ 7DC5                                                              //          if
 127+ 7DC5 E3 63                        dw          ZBRANCH
 128+ 7DC7 12 00                        dw          Block_Endif_2 - $
 129+ 7DC9 A0 6A                        dw              DROP            //              drop
 130+ 7DCB A5 69 5B 7D                  dw              R_OP, BUFFER    //              r buffer
 131+ 7DCF D5 6A                        dw              DUP             //              dup
 132+ 7DD1 A5 69 D6 6C                  dw              R_OP, ONE       //              r 1
 133+ 7DD5 BC 7C                        dw              READ_WRITE      //              r/w
 134+ 7DD7 55 6A                        dw              TWO_MINUS       //              2-
 135+ 7DD9              Block_Endif_2:                                  //          endif
 136+ 7DD9 D5 6A 68 6B                  dw          DUP, FETCH, R_OP    //          dup @ r
 136+ 7DDD A5 69
 137+ 7DDF 00 6F D5 6A                  dw          SUBTRACT, DUP       //          - dup
 138+ 7DE3 F5 69 B2 69                  dw          PLUS, ZEQUAL        //          + 0=
 139+ 7DE7                                                              //      until
 140+ 7DE7 E3 63                        dw        ZBRANCH
 141+ 7DE9 D8 FF                        dw        Block_Begin - $
 142+ 7DEB D5 6A 62 6E                  dw        DUP, PREV, STORE      //      dup prev !
 142+ 7DEF 75 6B
 143+ 7DF1              Block_Endif_1:                                  // endif
 144+ 7DF1 91 69 A0 6A                  dw      R_TO, DROP, CELL_PLUS   // r> drop cell+
 144+ 7DF5 3E 6A
 145+ 7DF7 4F 69                        dw      EXIT                    // ;
 146+ 7DF9
 147+ 7DF9              //  ______________________________________________________________________
 148+ 7DF9              //
 149+ 7DF9              // #buff        -- n
 150+ 7DF9              // number of buffers available. must be the difference between LIMIT and FIRST divided by 516
 151+ 7DF9                              Constant_Def NBUFF,   "#BUFF", 7
 151+ 7DF9             >                New_Def  NBUFF, "#BUFF", Constant_Ptr, is_normal
 151+ 7DF9             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 151+ 7DF9             >
 151+ 7DF9             >                // dummy db directives used to calculate length of namec
 151+ 7DF9 23 42 55 46 >                db      "#BUFF"
 151+ 7DFD 46          >
 151+ 7DFE             >len_NFA         defl    $ - temp_NFA
 151+ 7DFE             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 151+ 7DF9             >
 151+ 7DF9 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 151+ 7DFA 23 42 55 46 >                db      "#BUFF"               // name string in 7-bit ascii, but
 151+ 7DFE 46          >
 151+ 7DFF             >                org     $-1                 // alter last byte of Name just above to set
 151+ 7DFE C6          >                db      {b $} | END_BIT     // msb as name end
 151+ 7DFF             >
 151+ 7DFF 9B 7D       >                dw      last_NFA            // Link to previous definition Name
 151+ 7E01             >NBUFF:          if Constant_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 151+ 7E01 92 6C       >                dw      Constant_Ptr ; ok        // for primitive definitions  actual code
 151+ 7E03             >                else
 151+ 7E03 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 151+ 7E03             >                endif           ; ok        // for other definitions it "points" the correct handler
 151+ 7E03             >                // Use of "; ok" to suppress "warning[fwdref]"
 151+ 7E03             >
 151+ 7E03             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 151+ 7E03 07 00       >                dw      7
 152+ 7E05
 153+ 7E05              //  ______________________________________________________________________
 154+ 7E05              //
 155+ 7E05              // flush        --
 156+ 7E05                              Colon_Def FLUSH, "FLUSH", is_normal
 156+ 7E05             >                New_Def  FLUSH, "FLUSH", Enter_Ptr, is_normal ; ok
 156+ 7E05             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 156+ 7E05             >
 156+ 7E05             >                // dummy db directives used to calculate length of namec
 156+ 7E05 46 4C 55 53 >                db      "FLUSH"
 156+ 7E09 48          >
 156+ 7E0A             >len_NFA         defl    $ - temp_NFA
 156+ 7E0A             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 156+ 7E05             >
 156+ 7E05 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 156+ 7E06 46 4C 55 53 >                db      "FLUSH"               // name string in 7-bit ascii, but
 156+ 7E0A 48          >
 156+ 7E0B             >                org     $-1                 // alter last byte of Name just above to set
 156+ 7E0A C8          >                db      {b $} | END_BIT     // msb as name end
 156+ 7E0B             >
 156+ 7E0B F9 7D       >                dw      last_NFA            // Link to previous definition Name
 156+ 7E0D             >FLUSH:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 156+ 7E0D 53 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 156+ 7E0F             >                else
 156+ 7E0F ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 156+ 7E0F             >                endif           ; ok        // for other definitions it "points" the correct handler
 156+ 7E0F             >                // Use of "; ok" to suppress "warning[fwdref]"
 156+ 7E0F             >
 156+ 7E0F             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 157+ 7E0F 01 7E 16 6A                  dw      NBUFF, ONE_PLUS, ZERO   // #buff 1+ 0
 157+ 7E13 CE 6C
 158+ 7E15              Flush_Do:                                       // do
 159+ 7E15 6B 64                        dw      C_DO
 160+ 7E17 CE 6C 5B 7D                  dw      ZERO, BUFFER, DROP      //      0 buffer drop
 160+ 7E1B A0 6A
 161+ 7E1D                                                              // loop
 162+ 7E1D F8 63 F8 FF                  dw      C_LOOP, Flush_Do - $
 163+ 7E21 E4 7B 68 6B                  dw      BLK_FH, FETCH           // blk-fh @     ( ZX-Next dependance )
 164+ 7E25 73 67 A0 6A                  dw      F_SYNC, DROP            // f_sync drop
 165+ 7E29 4F 69                        dw      EXIT                    // exit
 166+ 7E2B
 167+ 7E2B              //  ______________________________________________________________________
 168+ 7E2B              //
 169+ 7E2B              // f_getline    a m fh -- n
 170+ 7E2B              // Given an open filehandle read next line (terminated with $0D or $0A)
 171+ 7E2B              // Address a is left for subsequent processing
 172+ 7E2B              // and n as the actual number of byte read, that is the length of line
 173+ 7E2B                              Colon_Def F_GETLINE, "F_GETLINE", is_normal
 173+ 7E2B             >                New_Def  F_GETLINE, "F_GETLINE", Enter_Ptr, is_normal ; ok
 173+ 7E2B             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 173+ 7E2B             >
 173+ 7E2B             >                // dummy db directives used to calculate length of namec
 173+ 7E2B 46 5F 47 45 >                db      "F_GETLINE"
 173+ 7E2F 54 4C 49 4E >
 173+ 7E33 45          >
 173+ 7E34             >len_NFA         defl    $ - temp_NFA
 173+ 7E34             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 173+ 7E2B             >
 173+ 7E2B 89          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 173+ 7E2C 46 5F 47 45 >                db      "F_GETLINE"               // name string in 7-bit ascii, but
 173+ 7E30 54 4C 49 4E >
 173+ 7E34 45          >
 173+ 7E35             >                org     $-1                 // alter last byte of Name just above to set
 173+ 7E34 C5          >                db      {b $} | END_BIT     // msb as name end
 173+ 7E35             >
 173+ 7E35 05 7E       >                dw      last_NFA            // Link to previous definition Name
 173+ 7E37             >F_GETLINE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 173+ 7E37 53 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 173+ 7E39             >                else
 173+ 7E39 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 173+ 7E39             >                endif           ; ok        // for other definitions it "points" the correct handler
 173+ 7E39             >                // Use of "; ok" to suppress "warning[fwdref]"
 173+ 7E39             >
 173+ 7E39             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 174+ 7E39 7D 69                        dw      TO_R                    // >r               ( a  m  )     \  fh
 175+ 7E3B B8 6A                        dw      TUCK                    // tuck             ( m a m )
 176+ 7E3D A5 69 8A 67                  dw      R_OP, F_FGETPOS         // r f_fgetpos      ( m a m d f )
 177+ 7E41 A9 63 2C 00                  dw      LIT, 44, QERROR         // 44 ?error        ( m a m d )
 177+ 7E45 77 70
 178+ 7E47
 179+ 7E47 24 6B 90 6A                  dw      TWO_SWAP, OVER          // 2swap over       ( m d a m )
 180+ 7E4B 16 6A C8 6A                  dw      ONE_PLUS, SWAP          // 1+ swap          ( m d a a+1 m )
 181+ 7E4F
 182+ 7E4F A5 69 A8 67                  dw      R_OP, F_READ            // r f_read         ( m d a n f )
 183+ 7E53 A9 63 2E 00                  dw      LIT, 46, QERROR         // 46 ?error        ( m d a n )
 183+ 7E57 77 70
 184+ 7E59                                                              // if ( at least 1 chr was read )  \  fh
 185+ 7E59 E3 63                        dw      ZBRANCH
 186+ 7E5B 3C 00                        dw      FGetline_Else - $
 187+ 7E5D A9 63 0A 00                  dw          LIT, 10, ENCLOSE    //      10 enclose       ( m d a x b x )
 187+ 7E61 64 65
 188+ 7E63 A0 6A AB 6A                  dw          DROP, NIP           //      drop nip         ( m d a b )
 189+ 7E67 C8 6A                        dw          SWAP                //      drop swap        ( m d b a )
 190+ 7E69 A9 63 0D 00                  dw          LIT, 13, ENCLOSE    //      13 enclose       ( m d b a x c x )
 190+ 7E6D 64 65
 191+ 7E6F A0 6A AB 6A                  dw          DROP, NIP           //      drop nip         ( m d b a c )
 192+ 7E73 E2 6A 59 6F                  dw          ROT, MIN            //      rot min          ( m d a n )
 193+ 7E77 D5 6A 8E 6E                  dw          DUP, SPAN, STORE    //      dup span !       ( m d a n )
 193+ 7E7B 75 6B
 194+ 7E7D D5 6A 7D 69                  dw          DUP, TO_R           //      dup >r           ( m d a n )      \ fh n
 195+ 7E81 24 6B 91 69                  dw          TWO_SWAP, R_TO      //      2swap r>         ( m a n d n )    \ fh
 196+ 7E85 CE 6C 02 6A                  dw          ZERO, DPLUS         //      0 d+             ( m a n d+n )
 197+ 7E89 91 69 3C 67                  dw          R_TO, F_SEEK        //      r> f_seek        ( m a n f )
 198+ 7E8D A9 63 2D 00                  dw          LIT, 45, QERROR     //      45 ?error        ( m a n )
 198+ 7E91 77 70
 199+ 7E93                                                              // else
 200+ 7E93 CC 63                        dw      BRANCH
 201+ 7E95 0C 00                        dw      FGetline_Endif - $
 202+ 7E97              FGetline_Else:
 203+ 7E97 91 69                        dw          R_TO                //      r>              ( m d a fh )
 204+ 7E99 24 6B 16 6B                  dw          TWO_SWAP, TWO_DROP  //      2swap 2drop     ( m a fh )
 205+ 7E9D A0 6A CE 6C                  dw          DROP, ZERO          //      drop, 0         ( m a 0 )
 206+ 7EA1              FGetline_Endif:                                 // endif
 207+ 7EA1 7D 69 D5 6A                  dw      TO_R, DUP, DUP          // >r dup dup           ( m a a a )
 207+ 7EA5 D5 6A
 208+ 7EA7 16 6A C8 6A                  dw      ONE_PLUS, SWAP          // 1+ swap              ( m a a+1 a )
 209+ 7EAB A5 69 3D 68                  dw      R_OP, CMOVE             // r cmove              ( m a )
 210+ 7EAF 36 6B F5 69                  dw      TWO_DUP, PLUS           // 2dup +               ( m a m+a )
 211+ 7EB3 CE 6C C8 6A                  dw      ZERO, SWAP              // 0 swap
 212+ 7EB7 48 6A 75 6B                  dw      CELL_MINUS,  STORE      // cell-  !             ( m a )
 213+ 7EBB A5 69 F5 69                  dw      R_OP, PLUS, ONE_SUBTRACT// r + 1-               ( m a+n1 )
 213+ 7EBF 22 6A
 214+ 7EC1 C8 6A A5 69                  dw      SWAP, R_OP, SUBTRACT    // swap r -             ( a+n+1 m-n )
 214+ 7EC5 00 6F
 215+ 7EC7 C4 73                        dw      BLANKS                  // blanks
 216+ 7EC9 91 69                        dw      R_TO                    // r>                   ( n )
 217+ 7ECB 4F 69                        dw      EXIT                    // ;
 218+ 7ECD
 219+ 7ECD              //  ______________________________________________________________________
 220+ 7ECD              //
 221+ 7ECD              // f_include    fh --
 222+ 7ECD              // Given a filehandle includes the source from file
 223+ 7ECD                              Colon_Def F_INCLUDE, "F_INCLUDE", is_normal
 223+ 7ECD             >                New_Def  F_INCLUDE, "F_INCLUDE", Enter_Ptr, is_normal ; ok
 223+ 7ECD             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 223+ 7ECD             >
 223+ 7ECD             >                // dummy db directives used to calculate length of namec
 223+ 7ECD 46 5F 49 4E >                db      "F_INCLUDE"
 223+ 7ED1 43 4C 55 44 >
 223+ 7ED5 45          >
 223+ 7ED6             >len_NFA         defl    $ - temp_NFA
 223+ 7ED6             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 223+ 7ECD             >
 223+ 7ECD 89          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 223+ 7ECE 46 5F 49 4E >                db      "F_INCLUDE"               // name string in 7-bit ascii, but
 223+ 7ED2 43 4C 55 44 >
 223+ 7ED6 45          >
 223+ 7ED7             >                org     $-1                 // alter last byte of Name just above to set
 223+ 7ED6 C5          >                db      {b $} | END_BIT     // msb as name end
 223+ 7ED7             >
 223+ 7ED7 2B 7E       >                dw      last_NFA            // Link to previous definition Name
 223+ 7ED9             >F_INCLUDE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 223+ 7ED9 53 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 223+ 7EDB             >                else
 223+ 7EDB ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 223+ 7EDB             >                endif           ; ok        // for other definitions it "points" the correct handler
 223+ 7EDB             >                // Use of "; ok" to suppress "warning[fwdref]"
 223+ 7EDB             >
 223+ 7EDB             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 224+ 7EDB CD 6D 68 6B                  dw      BLK, FETCH, TO_R        // blk @ >r
 224+ 7EDF 7D 69
 225+ 7EE1 D6 6D 68 6B                  dw      TO_IN, FETCH, TO_R      // >in @ >r
 225+ 7EE5 7D 69
 226+ 7EE7 84 6E 68 6B                  dw      SOURCE_ID, FETCH, TO_R  // source-id @ >r
 226+ 7EEB 7D 69
 227+ 7EED A5 69                        dw      R_OP                    // r
 228+ 7EEF                                                              // if
 229+ 7EEF E3 63                        dw      ZBRANCH
 230+ 7EF1 20 00                        dw      FInclude_Else_1 - $
 231+ 7EF3 A5 69 8A 67                  dw          R_OP, F_FGETPOS     //      r f_getpos
 232+ 7EF7 A9 63 2C 00                  dw          LIT, 44, QERROR     //      44 ?error
 232+ 7EFB 77 70
 233+ 7EFD D6 6D 68 6B                  dw          TO_IN, FETCH        //      >in @ 2-
 234+ 7F01 55 6A                        dw          TWO_MINUS
 235+ 7F03 8E 6E 68 6B                  dw          SPAN, FETCH         //      span @ -
 236+ 7F07 00 6F                        dw          SUBTRACT
 237+ 7F09 EC 6E 02 6A                  dw          S_TO_D, DPLUS       //      s>d d+
 238+ 7F0D                                                              // else
 239+ 7F0D CC 63                        dw      BRANCH
 240+ 7F0F 06 00                        dw      FInclude_Endif_1 - $
 241+ 7F11              FInclude_Else_1:
 242+ 7F11 CE 6C CE 6C                  dw          ZERO, ZERO          //      0 0
 243+ 7F15                                                              // endif
 244+ 7F15              FInclude_Endif_1:
 245+ 7F15 7D 69 7D 69                  dw      TO_R, TO_R              // >r >r
 246+ 7F19 84 6E 75 6B                  dw      SOURCE_ID, STORE        // source-id !
 247+ 7F1D              FInclude_Begin:                                 // begin
 248+ 7F1D D6 6C A3 7D                  dw          ONE, BLOCK, BBUF    //      1 block b/buf
 248+ 7F21 0E 6D
 249+ 7F23 36 6B C4 73                  dw          TWO_DUP, BLANKS     //      2dup blanks
 250+ 7F27 C8 6A 16 6A                  dw          SWAP, ONE_PLUS      //      swap 1+
 251+ 7F2B C8 6A 48 6A                  dw          SWAP, CELL_MINUS    //      swap cell-
 252+ 7F2F 84 6E 68 6B                  dw          SOURCE_ID, FETCH    //      source-id @
 253+ 7F33 37 7E                        dw          F_GETLINE           //      f_getline
 254+ 7F35                                                              // while
 255+ 7F35 E3 63                        dw      ZBRANCH
 256+ 7F37 14 00                        dw      FInclude_Repeat - $
 257+ 7F39 D6 6C CD 6D                  dw          ONE, BLK, STORE     //      1 blk !
 257+ 7F3D 75 6B
 258+ 7F3F CE 6C D6 6D                  dw          ZERO, TO_IN, STORE  //      0 >in !
 258+ 7F43 75 6B
 259+ 7F45 9C 77                        dw          INTERPRET           //      interpret
 260+ 7F47 CC 63                        dw      BRANCH
 261+ 7F49 D4 FF                        dw      FInclude_Begin - $
 262+ 7F4B              FInclude_Repeat:                                // repeat
 263+ 7F4B 84 6E 68 6B                  dw      SOURCE_ID, FETCH        // source-id @
 264+ 7F4F CE 6C 84 6E                  dw      ZERO, SOURCE_ID, STORE  // 0 source-id !
 264+ 7F53 75 6B
 265+ 7F55 5F 67                        dw      F_CLOSE                 // f_close
 266+ 7F57 A9 63 2A 00                  dw      LIT, 42, QERROR         // 42 ?error
 266+ 7F5B 77 70
 267+ 7F5D 91 69 91 69                  dw      R_TO, R_TO, R_TO        // r> r> r>
 267+ 7F61 91 69
 268+ 7F63 D5 6A 84 6E                  dw      DUP, SOURCE_ID, STORE   // dup source-id !
 268+ 7F67 75 6B
 269+ 7F69                                                              // if
 270+ 7F69 E3 63                        dw      ZBRANCH
 271+ 7F6B 12 00                        dw      FInclude_Else_2 - $
 272+ 7F6D 84 6E 68 6B                  dw          SOURCE_ID, FETCH    //      source-id @
 273+ 7F71 3C 67                        dw          F_SEEK              //      f_seek
 274+ 7F73 A9 63 2B 00                  dw          LIT, 43, QERROR     //      43, ?error
 274+ 7F77 77 70
 275+ 7F79                                                              // else
 276+ 7F79 CC 63                        dw      BRANCH
 277+ 7F7B 04 00                        dw      FInclude_Endif_2 - $
 278+ 7F7D              FInclude_Else_2:
 279+ 7F7D 16 6B                        dw          TWO_DROP            //      2drop
 280+ 7F7F              FInclude_Endif_2:                               // endif
 281+ 7F7F 91 69 D6 6D                  dw      R_TO, TO_IN, STORE      // r> >in !
 281+ 7F83 75 6B
 282+ 7F85 91 69 CD 6D                  dw      R_TO, BLK, STORE        // r> blk !
 282+ 7F89 75 6B
 283+ 7F8B 4F 69                        dw      EXIT                    // ;
 284+ 7F8D
 285+ 7F8D              //  ______________________________________________________________________
 286+ 7F8D              //
 287+ 7F8D              // open<         -- fh
 288+ 7F8D              // Open the following filename and return it file-handle
 289+ 7F8D              // Used in the form OPEN CCCC
 290+ 7F8D                              Colon_Def OPEN_FH, "OPEN<", is_normal
 290+ 7F8D             >                New_Def  OPEN_FH, "OPEN<", Enter_Ptr, is_normal ; ok
 290+ 7F8D             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 290+ 7F8D             >
 290+ 7F8D             >                // dummy db directives used to calculate length of namec
 290+ 7F8D 4F 50 45 4E >                db      "OPEN<"
 290+ 7F91 3C          >
 290+ 7F92             >len_NFA         defl    $ - temp_NFA
 290+ 7F92             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 290+ 7F8D             >
 290+ 7F8D 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 290+ 7F8E 4F 50 45 4E >                db      "OPEN<"               // name string in 7-bit ascii, but
 290+ 7F92 3C          >
 290+ 7F93             >                org     $-1                 // alter last byte of Name just above to set
 290+ 7F92 BC          >                db      {b $} | END_BIT     // msb as name end
 290+ 7F93             >
 290+ 7F93 CD 7E       >                dw      last_NFA            // Link to previous definition Name
 290+ 7F95             >OPEN_FH:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 290+ 7F95 53 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 290+ 7F97             >                else
 290+ 7F97 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 290+ 7F97             >                endif           ; ok        // for other definitions it "points" the correct handler
 290+ 7F97             >                // Use of "; ok" to suppress "warning[fwdref]"
 290+ 7F97             >
 290+ 7F97             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 291+ 7F97 F8 6C                        dw      BL
 292+ 7F99 FC 73 11 72                  dw      WORD, COUNT, OVER       // bl word count over
 292+ 7F9D 90 6A
 293+ 7F9F F5 69 CE 6C                  dw      PLUS, ZERO, SWAP, STORE // + 0 swap !
 293+ 7FA3 C8 6A 75 6B
 294+ 7FA7 E9 73 D6 6C                  dw      PAD, ONE, F_OPEN        // pad 1 f_open
 294+ 7FAB DE 67
 295+ 7FAD A9 63 2B 00                  dw      LIT, 43                 // 43
 296+ 7FB1 77 70                        dw      QERROR                  // ?error
 297+ 7FB3 4F 69                        dw      EXIT                    // ;
 298+ 7FB5
 299+ 7FB5              //  ______________________________________________________________________
 300+ 7FB5              //
 301+ 7FB5              // include      -- cccc
 302+ 7FB5              // Include the following filename
 303+ 7FB5                              Colon_Def INCLUDE, "INCLUDE", is_normal
 303+ 7FB5             >                New_Def  INCLUDE, "INCLUDE", Enter_Ptr, is_normal ; ok
 303+ 7FB5             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 303+ 7FB5             >
 303+ 7FB5             >                // dummy db directives used to calculate length of namec
 303+ 7FB5 49 4E 43 4C >                db      "INCLUDE"
 303+ 7FB9 55 44 45    >
 303+ 7FBC             >len_NFA         defl    $ - temp_NFA
 303+ 7FBC             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 303+ 7FB5             >
 303+ 7FB5 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 303+ 7FB6 49 4E 43 4C >                db      "INCLUDE"               // name string in 7-bit ascii, but
 303+ 7FBA 55 44 45    >
 303+ 7FBD             >                org     $-1                 // alter last byte of Name just above to set
 303+ 7FBC C5          >                db      {b $} | END_BIT     // msb as name end
 303+ 7FBD             >
 303+ 7FBD 8D 7F       >                dw      last_NFA            // Link to previous definition Name
 303+ 7FBF             >INCLUDE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 303+ 7FBF 53 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 303+ 7FC1             >                else
 303+ 7FC1 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 303+ 7FC1             >                endif           ; ok        // for other definitions it "points" the correct handler
 303+ 7FC1             >                // Use of "; ok" to suppress "warning[fwdref]"
 303+ 7FC1             >
 303+ 7FC1             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 304+ 7FC1 95 7F                        dw      OPEN_FH                 // open
 305+ 7FC3 D5 6A D9 7E                  dw      DUP, F_INCLUDE          // dup f_include
 306+ 7FC7 5F 67 A0 6A                  dw      F_CLOSE, DROP           // f_close drop
 307+ 7FCB 4F 69                        dw      EXIT                    // ;
 308+ 7FCD
 309+ 7FCD              //  ______________________________________________________________________
 310+ 7FCD              //
 311+ 7FCD              // needs
 312+ 7FCD              // check for cccc exists in vocabulary
 313+ 7FCD              // if it doesn't then  INCLUDE  inc/cccc.F
 314+ 7FCD
 315+ 7FCD              // temp filename cccc.f as counted string zero-padded
 316+ 7FCD                              New_Def NEEDS_W,   "NEEDS-W", Create_Ptr, is_normal
 316+ 7FCD             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 316+ 7FCD             >
 316+ 7FCD             >                // dummy db directives used to calculate length of namec
 316+ 7FCD 4E 45 45 44 >                db      "NEEDS-W"
 316+ 7FD1 53 2D 57    >
 316+ 7FD4             >len_NFA         defl    $ - temp_NFA
 316+ 7FD4             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 316+ 7FCD             >
 316+ 7FCD 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 316+ 7FCE 4E 45 45 44 >                db      "NEEDS-W"               // name string in 7-bit ascii, but
 316+ 7FD2 53 2D 57    >
 316+ 7FD5             >                org     $-1                 // alter last byte of Name just above to set
 316+ 7FD4 D7          >                db      {b $} | END_BIT     // msb as name end
 316+ 7FD5             >
 316+ 7FD5 B5 7F       >                dw      last_NFA            // Link to previous definition Name
 316+ 7FD7             >NEEDS_W:          if Create_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 316+ 7FD7 AF 76       >                dw      Create_Ptr ; ok        // for primitive definitions  actual code
 316+ 7FD9             >                else
 316+ 7FD9 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 316+ 7FD9             >                endif           ; ok        // for other definitions it "points" the correct handler
 316+ 7FD9             >                // Use of "; ok" to suppress "warning[fwdref]"
 316+ 7FD9             >
 316+ 7FD9             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 317+ 7FD9 00 00 00...                  ds      35                      // 32 + .f + 0x00 = len 35
 318+ 7FFC              // temp complete path+filename
 319+ 7FFC                              New_Def NEEDS_FN,  "NEEDS-FN", Create_Ptr, is_normal
 319+ 7FFC             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 319+ 7FFC             >
 319+ 7FFC             >                // dummy db directives used to calculate length of namec
 319+ 7FFC 4E 45 45 44 >                db      "NEEDS-FN"
 319+ 8000 53 2D 46 4E >
 319+ 8004             >len_NFA         defl    $ - temp_NFA
 319+ 8004             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 319+ 7FFC             >
 319+ 7FFC 88          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 319+ 7FFD 4E 45 45 44 >                db      "NEEDS-FN"               // name string in 7-bit ascii, but
 319+ 8001 53 2D 46 4E >
 319+ 8005             >                org     $-1                 // alter last byte of Name just above to set
 319+ 8004 CE          >                db      {b $} | END_BIT     // msb as name end
 319+ 8005             >
 319+ 8005 CD 7F       >                dw      last_NFA            // Link to previous definition Name
 319+ 8007             >NEEDS_FN:          if Create_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 319+ 8007 AF 76       >                dw      Create_Ptr ; ok        // for primitive definitions  actual code
 319+ 8009             >                else
 319+ 8009 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 319+ 8009             >                endif           ; ok        // for other definitions it "points" the correct handler
 319+ 8009             >                // Use of "; ok" to suppress "warning[fwdref]"
 319+ 8009             >
 319+ 8009             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 320+ 8009 00 00 00...                  ds      40
 321+ 8031              // constant path
 322+ 8031                              New_Def NEEDS_INC,  "NEEDS-INC", Create_Ptr, is_normal
 322+ 8031             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 322+ 8031             >
 322+ 8031             >                // dummy db directives used to calculate length of namec
 322+ 8031 4E 45 45 44 >                db      "NEEDS-INC"
 322+ 8035 53 2D 49 4E >
 322+ 8039 43          >
 322+ 803A             >len_NFA         defl    $ - temp_NFA
 322+ 803A             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 322+ 8031             >
 322+ 8031 89          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 322+ 8032 4E 45 45 44 >                db      "NEEDS-INC"               // name string in 7-bit ascii, but
 322+ 8036 53 2D 49 4E >
 322+ 803A 43          >
 322+ 803B             >                org     $-1                 // alter last byte of Name just above to set
 322+ 803A C3          >                db      {b $} | END_BIT     // msb as name end
 322+ 803B             >
 322+ 803B FC 7F       >                dw      last_NFA            // Link to previous definition Name
 322+ 803D             >NEEDS_INC:          if Create_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 322+ 803D AF 76       >                dw      Create_Ptr ; ok        // for primitive definitions  actual code
 322+ 803F             >                else
 322+ 803F ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 322+ 803F             >                endif           ; ok        // for other definitions it "points" the correct handler
 322+ 803F             >                // Use of "; ok" to suppress "warning[fwdref]"
 322+ 803F             >
 322+ 803F             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 323+ 803F 04 69 6E 63                  db      4, "inc/", 0
 323+ 8043 2F 00
 324+ 8045                              New_Def NEEDS_LIB,  "NEEDS-LIB", Create_Ptr, is_normal
 324+ 8045             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 324+ 8045             >
 324+ 8045             >                // dummy db directives used to calculate length of namec
 324+ 8045 4E 45 45 44 >                db      "NEEDS-LIB"
 324+ 8049 53 2D 4C 49 >
 324+ 804D 42          >
 324+ 804E             >len_NFA         defl    $ - temp_NFA
 324+ 804E             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 324+ 8045             >
 324+ 8045 89          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 324+ 8046 4E 45 45 44 >                db      "NEEDS-LIB"               // name string in 7-bit ascii, but
 324+ 804A 53 2D 4C 49 >
 324+ 804E 42          >
 324+ 804F             >                org     $-1                 // alter last byte of Name just above to set
 324+ 804E C2          >                db      {b $} | END_BIT     // msb as name end
 324+ 804F             >
 324+ 804F 31 80       >                dw      last_NFA            // Link to previous definition Name
 324+ 8051             >NEEDS_LIB:          if Create_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 324+ 8051 AF 76       >                dw      Create_Ptr ; ok        // for primitive definitions  actual code
 324+ 8053             >                else
 324+ 8053 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 324+ 8053             >                endif           ; ok        // for other definitions it "points" the correct handler
 324+ 8053             >                // Use of "; ok" to suppress "warning[fwdref]"
 324+ 8053             >
 324+ 8053             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 325+ 8053 04 6C 69 62                  db      4, "lib/", 0
 325+ 8057 2F 00
 326+ 8059
 327+ 8059              // Concatenate path at a and filename and include it
 328+ 8059              // No error is issued if filename doesn't exist.
 329+ 8059                              Colon_Def NEEDS_SLASH, "NEEDS/", is_normal
 329+ 8059             >                New_Def  NEEDS_SLASH, "NEEDS/", Enter_Ptr, is_normal ; ok
 329+ 8059             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 329+ 8059             >
 329+ 8059             >                // dummy db directives used to calculate length of namec
 329+ 8059 4E 45 45 44 >                db      "NEEDS/"
 329+ 805D 53 2F       >
 329+ 805F             >len_NFA         defl    $ - temp_NFA
 329+ 805F             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 329+ 8059             >
 329+ 8059 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 329+ 805A 4E 45 45 44 >                db      "NEEDS/"               // name string in 7-bit ascii, but
 329+ 805E 53 2F       >
 329+ 8060             >                org     $-1                 // alter last byte of Name just above to set
 329+ 805F AF          >                db      {b $} | END_BIT     // msb as name end
 329+ 8060             >
 329+ 8060 45 80       >                dw      last_NFA            // Link to previous definition Name
 329+ 8062             >NEEDS_SLASH:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 329+ 8062 53 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 329+ 8064             >                else
 329+ 8064 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 329+ 8064             >                endif           ; ok        // for other definitions it "points" the correct handler
 329+ 8064             >                // Use of "; ok" to suppress "warning[fwdref]"
 329+ 8064             >
 329+ 8064             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 330+ 8064 11 72 B8 6A                  dw      COUNT, TUCK             // n a n
 331+ 8068 07 80 C8 6A                  dw      NEEDS_FN, SWAP, CMOVE   // n        \ Path
 331+ 806C 3D 68
 332+ 806E 07 80 F5 69                  dw      NEEDS_FN, PLUS          // a1+n     \ Concat
 333+ 8072 D7 7F 16 6A                  dw      NEEDS_W, ONE_PLUS, SWAP
 333+ 8076 C8 6A
 334+ 8078 A9 63 23 00                  dw      LIT, 35
 335+ 807C 3D 68                        dw      CMOVE
 336+ 807E 07 80                        dw      NEEDS_FN
 337+ 8080 E9 73 D6 6C                  dw      PAD, ONE, F_OPEN
 337+ 8084 DE 67
 338+ 8086 B2 69                        dw      ZEQUAL
 339+ 8088 E3 63                        dw      ZBRANCH
 340+ 808A 08 00                        dw      Needs_1 - $
 341+ 808C D9 7E                        dw          F_INCLUDE
 342+ 808E CC 63                        dw      BRANCH
 343+ 8090 04 00                        dw      Needs_2 - $
 344+ 8092              Needs_1:
 345+ 8092              //              dw          NEEDS_W, COUNT, TYPE, SPACE
 346+ 8092              //              dw          LIT, 43, MESSAGE
 347+ 8092 A0 6A                        dw          DROP
 348+ 8094              Needs_2:
 349+ 8094 4F 69                        dw      EXIT                    // ;
 350+ 8096
 351+ 8096
 352+ 8096                              New_Def NCDM,   "NCDM", Create_Ptr, is_normal
 352+ 8096             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 352+ 8096             >
 352+ 8096             >                // dummy db directives used to calculate length of namec
 352+ 8096 4E 43 44 4D >                db      "NCDM"
 352+ 809A             >len_NFA         defl    $ - temp_NFA
 352+ 809A             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 352+ 8096             >
 352+ 8096 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 352+ 8097 4E 43 44 4D >                db      "NCDM"               // name string in 7-bit ascii, but
 352+ 809B             >                org     $-1                 // alter last byte of Name just above to set
 352+ 809A CD          >                db      {b $} | END_BIT     // msb as name end
 352+ 809B             >
 352+ 809B 59 80       >                dw      last_NFA            // Link to previous definition Name
 352+ 809D             >NCDM:          if Create_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 352+ 809D AF 76       >                dw      Create_Ptr ; ok        // for primitive definitions  actual code
 352+ 809F             >                else
 352+ 809F ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 352+ 809F             >                endif           ; ok        // for other definitions it "points" the correct handler
 352+ 809F             >                // Use of "; ok" to suppress "warning[fwdref]"
 352+ 809F             >
 352+ 809F             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 353+ 809F 25 5E 25 26                  db $25, $5E, $25, $26, $24, $5F, $7B, $7D, $7E
 353+ 80A3 24 5F 7B 7D
 353+ 80A7 7E
 354+ 80A8
 355+ 80A8                              New_Def NDOM,   "NDOM", Create_Ptr, is_normal
 355+ 80A8             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 355+ 80A8             >
 355+ 80A8             >                // dummy db directives used to calculate length of namec
 355+ 80A8 4E 44 4F 4D >                db      "NDOM"
 355+ 80AC             >len_NFA         defl    $ - temp_NFA
 355+ 80AC             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 355+ 80A8             >
 355+ 80A8 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 355+ 80A9 4E 44 4F 4D >                db      "NDOM"               // name string in 7-bit ascii, but
 355+ 80AD             >                org     $-1                 // alter last byte of Name just above to set
 355+ 80AC CD          >                db      {b $} | END_BIT     // msb as name end
 355+ 80AD             >
 355+ 80AD 96 80       >                dw      last_NFA            // Link to previous definition Name
 355+ 80AF             >NDOM:          if Create_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 355+ 80AF AF 76       >                dw      Create_Ptr ; ok        // for primitive definitions  actual code
 355+ 80B1             >                else
 355+ 80B1 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 355+ 80B1             >                endif           ; ok        // for other definitions it "points" the correct handler
 355+ 80B1             >                // Use of "; ok" to suppress "warning[fwdref]"
 355+ 80B1             >
 355+ 80B1             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 356+ 80B1 3A 3F 2F 2A                  db $3A, $3F, $2F, $2A, $7C, $5C, $3C, $3E, $22
 356+ 80B5 7C 5C 3C 3E
 356+ 80B9 22
 357+ 80BA
 358+ 80BA
 359+ 80BA              // Replace illegal character in filename using the map here above
 360+ 80BA              // at the moment we need only  "
 361+ 80BA                              Colon_Def NEEDS_CHECK, "NEEDS-CH", is_normal
 361+ 80BA             >                New_Def  NEEDS_CHECK, "NEEDS-CH", Enter_Ptr, is_normal ; ok
 361+ 80BA             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 361+ 80BA             >
 361+ 80BA             >                // dummy db directives used to calculate length of namec
 361+ 80BA 4E 45 45 44 >                db      "NEEDS-CH"
 361+ 80BE 53 2D 43 48 >
 361+ 80C2             >len_NFA         defl    $ - temp_NFA
 361+ 80C2             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 361+ 80BA             >
 361+ 80BA 88          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 361+ 80BB 4E 45 45 44 >                db      "NEEDS-CH"               // name string in 7-bit ascii, but
 361+ 80BF 53 2D 43 48 >
 361+ 80C3             >                org     $-1                 // alter last byte of Name just above to set
 361+ 80C2 C8          >                db      {b $} | END_BIT     // msb as name end
 361+ 80C3             >
 361+ 80C3 A8 80       >                dw      last_NFA            // Link to previous definition Name
 361+ 80C5             >NEEDS_CHECK:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 361+ 80C5 53 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 361+ 80C7             >                else
 361+ 80C7 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 361+ 80C7             >                endif           ; ok        // for other definitions it "points" the correct handler
 361+ 80C7             >                // Use of "; ok" to suppress "warning[fwdref]"
 361+ 80C7             >
 361+ 80C7             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 362+ 80C7 11 72 26 72                  dw      COUNT, BOUNDS
 363+ 80CB 6B 64                        dw      C_DO
 364+ 80CD              Needs_3:
 365+ 80CD 9D 80 AF 80                  dw          NCDM, NDOM, LIT, 9
 365+ 80D1 A9 63 09 00
 366+ 80D5 76 64 83 6B                  dw          I, CFETCH
 367+ 80D9 9E 65                        dw          C_MAP
 368+ 80DB 76 64 91 6B                  dw          I, CSTORE
 369+ 80DF              Needs_4:
 370+ 80DF F8 63                        dw      C_LOOP
 371+ 80E1 EC FF                        dw      Needs_3 - $
 372+ 80E3 4F 69                        dw      EXIT
 373+ 80E5
 374+ 80E5
 375+ 80E5              // include  "path/cccc.f" if cccc is not defined
 376+ 80E5              // filename cccc.f is temporary stored at NEEDS-W
 377+ 80E5                              Colon_Def NEEDS_PATH, "NEEDS-F", is_normal
 377+ 80E5             >                New_Def  NEEDS_PATH, "NEEDS-F", Enter_Ptr, is_normal ; ok
 377+ 80E5             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 377+ 80E5             >
 377+ 80E5             >                // dummy db directives used to calculate length of namec
 377+ 80E5 4E 45 45 44 >                db      "NEEDS-F"
 377+ 80E9 53 2D 46    >
 377+ 80EC             >len_NFA         defl    $ - temp_NFA
 377+ 80EC             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 377+ 80E5             >
 377+ 80E5 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 377+ 80E6 4E 45 45 44 >                db      "NEEDS-F"               // name string in 7-bit ascii, but
 377+ 80EA 53 2D 46    >
 377+ 80ED             >                org     $-1                 // alter last byte of Name just above to set
 377+ 80EC C6          >                db      {b $} | END_BIT     // msb as name end
 377+ 80ED             >
 377+ 80ED BA 80       >                dw      last_NFA            // Link to previous definition Name
 377+ 80EF             >NEEDS_PATH:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 377+ 80EF 53 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 377+ 80F1             >                else
 377+ 80F1 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 377+ 80F1             >                endif           ; ok        // for other definitions it "points" the correct handler
 377+ 80F1             >                // Use of "; ok" to suppress "warning[fwdref]"
 377+ 80F1             >
 377+ 80F1             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 378+ 80F1 AE 75                        dw      LFIND
 379+ 80F3 E3 63                        dw      ZBRANCH
 380+ 80F5 0A 00                        dw      Needs_5 - $
 381+ 80F7
 382+ 80F7 A0 6A 16 6B                  dw          DROP, TWO_DROP
 383+ 80FB CC 63                        dw      BRANCH
 384+ 80FD 2C 00                        dw      Needs_6 - $
 385+ 80FF              Needs_5:
 386+ 80FF D7 7F                        dw          NEEDS_W
 387+ 8101 A9 63 23 00                  dw          LIT, 35
 388+ 8105 B3 73                        dw          ERASE                   // a
 389+ 8107 AD 6E 83 6B                  dw          HERE, CFETCH, ONE_PLUS  // a n
 389+ 810B 16 6A
 390+ 810D AD 6E 90 6A                  dw          HERE, OVER              // a n here n
 391+ 8111 D7 7F C8 6A                  dw          NEEDS_W, SWAP, CMOVE    // a n
 391+ 8115 3D 68
 392+ 8117 D7 7F C5 80                  dw          NEEDS_W, NEEDS_CHECK
 393+ 811B D7 7F F5 69                  dw          NEEDS_W, PLUS           // a a1+1
 394+ 811F A9 63 2E 66                  dw          LIT, $662E              // a a1+1 ".F"
 395+ 8123 C8 6A 75 6B                  dw          SWAP, STORE             // a
 396+ 8127 62 80                        dw          NEEDS_SLASH
 397+ 8129              Needs_6:
 398+ 8129 4F 69                        dw      EXIT
 399+ 812B
 400+ 812B
 401+ 812B              // check for cccc exists in vocabulary
 402+ 812B              // if it doesn't then  INCLUDE  inc/cccc.F
 403+ 812B              // search in inc subdirectory
 404+ 812B                              Colon_Def NEEDS, "NEEDS", is_normal
 404+ 812B             >                New_Def  NEEDS, "NEEDS", Enter_Ptr, is_normal ; ok
 404+ 812B             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 404+ 812B             >
 404+ 812B             >                // dummy db directives used to calculate length of namec
 404+ 812B 4E 45 45 44 >                db      "NEEDS"
 404+ 812F 53          >
 404+ 8130             >len_NFA         defl    $ - temp_NFA
 404+ 8130             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 404+ 812B             >
 404+ 812B 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 404+ 812C 4E 45 45 44 >                db      "NEEDS"               // name string in 7-bit ascii, but
 404+ 8130 53          >
 404+ 8131             >                org     $-1                 // alter last byte of Name just above to set
 404+ 8130 D3          >                db      {b $} | END_BIT     // msb as name end
 404+ 8131             >
 404+ 8131 E5 80       >                dw      last_NFA            // Link to previous definition Name
 404+ 8133             >NEEDS:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 404+ 8133 53 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 404+ 8135             >                else
 404+ 8135 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 404+ 8135             >                endif           ; ok        // for other definitions it "points" the correct handler
 404+ 8135             >                // Use of "; ok" to suppress "warning[fwdref]"
 404+ 8135             >
 404+ 8135             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 405+ 8135 D6 6D 68 6B                  dw      TO_IN, FETCH
 406+ 8139 D5 6A                        dw      DUP
 407+ 813B 3D 80 EF 80                  dw      NEEDS_INC, NEEDS_PATH
 408+ 813F D6 6D 75 6B                  dw      TO_IN, STORE
 409+ 8143 51 80 EF 80                  dw      NEEDS_LIB, NEEDS_PATH
 410+ 8147 D6 6D 75 6B                  dw      TO_IN, STORE
 411+ 814B AE 75                        dw      LFIND
 412+ 814D E3 63                        dw      ZBRANCH
 413+ 814F 08 00                        dw      Needs_10 - $
 414+ 8151 16 6B                        dw          TWO_DROP
 415+ 8153 CC 63                        dw      BRANCH
 416+ 8155 10 00                        dw      Needs_11 - $
 417+ 8157              Needs_10:
 418+ 8157 D7 7F 11 72                  dw      NEEDS_W, COUNT, TYPE, SPACE
 418+ 815B 37 72 BD 6F
 419+ 815F A9 63 2B 00                  dw      LIT, 43, MESSAGE
 419+ 8163 CE 7A
 420+ 8165              Needs_11:
 421+ 8165 4F 69                        dw      EXIT
 422+ 8167
 423+ 8167
 424+ 8167              //  ______________________________________________________________________
 425+ 8167              //
 426+ 8167              // load+        n --
 427+ 8167                              Colon_Def LOAD_P, "LOAD+", is_normal
 427+ 8167             >                New_Def  LOAD_P, "LOAD+", Enter_Ptr, is_normal ; ok
 427+ 8167             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 427+ 8167             >
 427+ 8167             >                // dummy db directives used to calculate length of namec
 427+ 8167 4C 4F 41 44 >                db      "LOAD+"
 427+ 816B 2B          >
 427+ 816C             >len_NFA         defl    $ - temp_NFA
 427+ 816C             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 427+ 8167             >
 427+ 8167 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 427+ 8168 4C 4F 41 44 >                db      "LOAD+"               // name string in 7-bit ascii, but
 427+ 816C 2B          >
 427+ 816D             >                org     $-1                 // alter last byte of Name just above to set
 427+ 816C AB          >                db      {b $} | END_BIT     // msb as name end
 427+ 816D             >
 427+ 816D 2B 81       >                dw      last_NFA            // Link to previous definition Name
 427+ 816F             >LOAD_P:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 427+ 816F 53 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 427+ 8171             >                else
 427+ 8171 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 427+ 8171             >                endif           ; ok        // for other definitions it "points" the correct handler
 427+ 8171             >                // Use of "; ok" to suppress "warning[fwdref]"
 427+ 8171             >
 427+ 8171             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 428+ 8171 CD 6D 68 6B                  dw      BLK, FETCH, TO_R        // blk @ >r
 428+ 8175 7D 69
 429+ 8177 D6 6D 68 6B                  dw      TO_IN, FETCH, TO_R      // >in @ >r
 429+ 817B 7D 69
 430+ 817D
 431+ 817D CE 6C D6 6D                  dw      ZERO, TO_IN, STORE      // 0 >in !
 431+ 8181 75 6B
 432+ 8183 1A 6D 35 7A                  dw      BSCR, MUL, BLK, STORE   // b/scr * blk !
 432+ 8187 CD 6D 75 6B
 433+ 818B 9C 77                        dw      INTERPRET               // interpret
 434+ 818D
 435+ 818D 91 69 D6 6D                  dw      R_TO, TO_IN, STORE      // r> >in !
 435+ 8191 75 6B
 436+ 8193 91 69 CD 6D                  dw      R_TO, BLK, STORE        // r> blk !
 436+ 8197 75 6B
 437+ 8199 4F 69                        dw      EXIT                    // ;
 438+ 819B
 439+ 819B              //  ______________________________________________________________________
 440+ 819B              //
 441+ 819B              // -->          --
 442+ 819B                              Colon_Def LOAD_NEXT, "-->", is_immediate
 442+ 819B             >                New_Def  LOAD_NEXT, "-->", Enter_Ptr, is_immediate ; ok
 442+ 819B             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 442+ 819B             >
 442+ 819B             >                // dummy db directives used to calculate length of namec
 442+ 819B 2D 2D 3E    >                db      "-->"
 442+ 819E             >len_NFA         defl    $ - temp_NFA
 442+ 819E             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 442+ 819B             >
 442+ 819B C3          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 442+ 819C 2D 2D 3E    >                db      "-->"               // name string in 7-bit ascii, but
 442+ 819F             >                org     $-1                 // alter last byte of Name just above to set
 442+ 819E BE          >                db      {b $} | END_BIT     // msb as name end
 442+ 819F             >
 442+ 819F 67 81       >                dw      last_NFA            // Link to previous definition Name
 442+ 81A1             >LOAD_NEXT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 442+ 81A1 53 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 442+ 81A3             >                else
 442+ 81A3 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 442+ 81A3             >                endif           ; ok        // for other definitions it "points" the correct handler
 442+ 81A3             >                // Use of "; ok" to suppress "warning[fwdref]"
 442+ 81A3             >
 442+ 81A3             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 443+ 81A3 F0 70                        dw      QLOADING                // ?loading
 444+ 81A5 CE 6C D6 6D                  dw      ZERO, TO_IN, STORE      // 0 >in !
 444+ 81A9 75 6B
 445+ 81AB 1A 6D                        dw      BSCR                    // b/scr
 446+ 81AD CD 6D 68 6B                  dw      BLK, FETCH              // blk @
 447+ 81B1 90 6A                        dw      OVER                    // over
 448+ 81B3 62 7A                        dw      MOD                     // mod
 449+ 81B5 00 6F                        dw      SUBTRACT                // -
 450+ 81B7 CD 6D 45 6B                  dw      BLK, PLUSSTORE          // +!
 451+ 81BB 4F 69                        dw      EXIT                    // ;
 452+ 81BD
 453+ 81BD              //  ______________________________________________________________________
 454+ 81BD              //
 455+ 81BD              // '            -- xt
 456+ 81BD                              Colon_Def TICK, "'", is_normal
 456+ 81BD             >                New_Def  TICK, "'", Enter_Ptr, is_normal ; ok
 456+ 81BD             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 456+ 81BD             >
 456+ 81BD             >                // dummy db directives used to calculate length of namec
 456+ 81BD 27          >                db      "'"
 456+ 81BE             >len_NFA         defl    $ - temp_NFA
 456+ 81BE             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 456+ 81BD             >
 456+ 81BD 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 456+ 81BE 27          >                db      "'"               // name string in 7-bit ascii, but
 456+ 81BF             >                org     $-1                 // alter last byte of Name just above to set
 456+ 81BE A7          >                db      {b $} | END_BIT     // msb as name end
 456+ 81BF             >
 456+ 81BF 9B 81       >                dw      last_NFA            // Link to previous definition Name
 456+ 81C1             >TICK:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 456+ 81C1 53 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 456+ 81C3             >                else
 456+ 81C3 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 456+ 81C3             >                endif           ; ok        // for other definitions it "points" the correct handler
 456+ 81C3             >                // Use of "; ok" to suppress "warning[fwdref]"
 456+ 81C3             >
 456+ 81C3             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 457+ 81C3 AE 75                        dw      LFIND                   // -find
 458+ 81C5 B2 69                        dw      ZEQUAL                  // 0=
 459+ 81C7 CE 6C 77 70                  dw      ZERO, QERROR            // 0 ?error
 460+ 81CB A0 6A                        dw      DROP                    // drop
 461+ 81CD 4F 69                        dw      EXIT                    // ;
 462+ 81CF
 463+ 81CF              //  ______________________________________________________________________
 464+ 81CF              //
 465+ 81CF              // forget       -- cccc
 466+ 81CF                              Colon_Def FORGET, "FORGET", is_normal
 466+ 81CF             >                New_Def  FORGET, "FORGET", Enter_Ptr, is_normal ; ok
 466+ 81CF             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 466+ 81CF             >
 466+ 81CF             >                // dummy db directives used to calculate length of namec
 466+ 81CF 46 4F 52 47 >                db      "FORGET"
 466+ 81D3 45 54       >
 466+ 81D5             >len_NFA         defl    $ - temp_NFA
 466+ 81D5             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 466+ 81CF             >
 466+ 81CF 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 466+ 81D0 46 4F 52 47 >                db      "FORGET"               // name string in 7-bit ascii, but
 466+ 81D4 45 54       >
 466+ 81D6             >                org     $-1                 // alter last byte of Name just above to set
 466+ 81D5 D4          >                db      {b $} | END_BIT     // msb as name end
 466+ 81D6             >
 466+ 81D6 BD 81       >                dw      last_NFA            // Link to previous definition Name
 466+ 81D8             >FORGET:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 466+ 81D8 53 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 466+ 81DA             >                else
 466+ 81DA ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 466+ 81DA             >                endif           ; ok        // for other definitions it "points" the correct handler
 466+ 81DA             >                // Use of "; ok" to suppress "warning[fwdref]"
 466+ 81DA             >
 466+ 81DA             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 467+ 81DA 0E 6E 68 6B                  dw      CURRENT, FETCH          // current @
 468+ 81DE 01 6E 68 6B                  dw      CONTEXT, FETCH          // context @
 469+ 81E2 00 6F A9 63                  dw      SUBTRACT, LIT, 23, QERROR // - 23 ?error
 469+ 81E6 17 00 77 70
 470+ 81EA C1 81 47 70                  dw      TICK, TO_BODY           // ' >body
 471+ 81EE D5 6A 84 6D                  dw      DUP, FENCE, FETCH       // dup fence @
 471+ 81F2 68 6B
 472+ 81F4 1B 6F A9 63                  dw      ULESS, LIT, 21, QERROR  // u< 21 ?error
 472+ 81F8 15 00 77 70
 473+ 81FC D5 6A 1D 70                  dw      DUP, NFA, DP, STORE     // dup nfa dp !
 473+ 8200 8C 6D 75 6B
 474+ 8204 03 70 68 6B                  dw      LFA, FETCH              // lfa @
 475+ 8208 01 6E 68 6B                  dw      CONTEXT, FETCH, STORE   // context @ !
 475+ 820C 75 6B
 476+ 820E 4F 69                        dw      EXIT                    // ;
 477+ 8210
 478+ 8210              //  ______________________________________________________________________
 479+ 8210              //
 480+ 8210              // marker       -- cccc
 481+ 8210                              Colon_Def MARKER, "MARKER", is_immediate
 481+ 8210             >                New_Def  MARKER, "MARKER", Enter_Ptr, is_immediate ; ok
 481+ 8210             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 481+ 8210             >
 481+ 8210             >                // dummy db directives used to calculate length of namec
 481+ 8210 4D 41 52 4B >                db      "MARKER"
 481+ 8214 45 52       >
 481+ 8216             >len_NFA         defl    $ - temp_NFA
 481+ 8216             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 481+ 8210             >
 481+ 8210 C6          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 481+ 8211 4D 41 52 4B >                db      "MARKER"               // name string in 7-bit ascii, but
 481+ 8215 45 52       >
 481+ 8217             >                org     $-1                 // alter last byte of Name just above to set
 481+ 8216 D2          >                db      {b $} | END_BIT     // msb as name end
 481+ 8217             >
 481+ 8217 CF 81       >                dw      last_NFA            // Link to previous definition Name
 481+ 8219             >MARKER:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 481+ 8219 53 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 481+ 821B             >                else
 481+ 821B ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 481+ 821B             >                endif           ; ok        // for other definitions it "points" the correct handler
 481+ 821B             >                // Use of "; ok" to suppress "warning[fwdref]"
 481+ 821B             >
 481+ 821B             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 482+ 821B DA 71                        dw      CBUILDS
 483+ 821D 9A 6D 68 6B                  dw      VOC_LINK, FETCH, COMMA
 483+ 8221 C9 6E
 484+ 8223 0E 6E 68 6B                  dw      CURRENT, FETCH, COMMA
 484+ 8227 C9 6E
 485+ 8229 01 6E 68 6B                  dw      CONTEXT, FETCH, COMMA
 485+ 822D C9 6E
 486+ 822F F3 6F C9 6E                  dw      LATEST, COMMA
 487+ 8233 F3 6F 31 70                  dw      LATEST, PFA, LFA, FETCH, COMMA
 487+ 8237 03 70 68 6B
 487+ 823B C9 6E
 488+ 823D EA 71                        dw      DOES_TO
 489+ 823F D5 6A 68 6B                  dw      DUP, FETCH, VOC_LINK, STORE, CELL_PLUS
 489+ 8243 9A 6D 75 6B
 489+ 8247 3E 6A
 490+ 8249 D5 6A 68 6B                  dw      DUP, FETCH, CURRENT, STORE, CELL_PLUS
 490+ 824D 0E 6E 75 6B
 490+ 8251 3E 6A
 491+ 8253 D5 6A 68 6B                  dw      DUP, FETCH, CONTEXT, STORE, CELL_PLUS
 491+ 8257 01 6E 75 6B
 491+ 825B 3E 6A
 492+ 825D D5 6A 68 6B                  dw      DUP, FETCH, DP, STORE, CELL_PLUS
 492+ 8261 8C 6D 75 6B
 492+ 8265 3E 6A
 493+ 8267 68 6B 0E 6E                  dw           FETCH, CURRENT, FETCH, STORE
 493+ 826B 68 6B 75 6B
 494+ 826F 4F 69                        dw      EXIT
 495+ 8271
 496+ 8271              //  ______________________________________________________________________
 497+ 8271              //
 498+ 8271              // spaces       n --
 499+ 8271                              Colon_Def SPACES, "SPACES", is_normal
 499+ 8271             >                New_Def  SPACES, "SPACES", Enter_Ptr, is_normal ; ok
 499+ 8271             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 499+ 8271             >
 499+ 8271             >                // dummy db directives used to calculate length of namec
 499+ 8271 53 50 41 43 >                db      "SPACES"
 499+ 8275 45 53       >
 499+ 8277             >len_NFA         defl    $ - temp_NFA
 499+ 8277             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 499+ 8271             >
 499+ 8271 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 499+ 8272 53 50 41 43 >                db      "SPACES"               // name string in 7-bit ascii, but
 499+ 8276 45 53       >
 499+ 8278             >                org     $-1                 // alter last byte of Name just above to set
 499+ 8277 D3          >                db      {b $} | END_BIT     // msb as name end
 499+ 8278             >
 499+ 8278 10 82       >                dw      last_NFA            // Link to previous definition Name
 499+ 827A             >SPACES:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 499+ 827A 53 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 499+ 827C             >                else
 499+ 827C ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 499+ 827C             >                endif           ; ok        // for other definitions it "points" the correct handler
 499+ 827C             >                // Use of "; ok" to suppress "warning[fwdref]"
 499+ 827C             >
 499+ 827C             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 500+ 827C CE 6C 6F 6F                  dw      ZERO, MAX
 501+ 8280 CE 6C 3D 64                  dw      ZERO, C_Q_DO
 502+ 8284 08 00                        dw      Spaces_Leave - $
 503+ 8286              Spaces_Loop:
 504+ 8286 BD 6F                        dw          SPACE
 505+ 8288 F8 63                        dw      C_LOOP
 506+ 828A FC FF                        dw      Spaces_Loop - $
 507+ 828C              Spaces_Leave:
 508+ 828C 4F 69                        dw      EXIT                    // ;
 509+ 828E
 510+ 828E              //  ______________________________________________________________________
 511+ 828E              //
 512+ 828E              // <#           --
 513+ 828E                              Colon_Def BEGIN_DASH, "<#", is_normal
 513+ 828E             >                New_Def  BEGIN_DASH, "<#", Enter_Ptr, is_normal ; ok
 513+ 828E             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 513+ 828E             >
 513+ 828E             >                // dummy db directives used to calculate length of namec
 513+ 828E 3C 23       >                db      "<#"
 513+ 8290             >len_NFA         defl    $ - temp_NFA
 513+ 8290             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 513+ 828E             >
 513+ 828E 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 513+ 828F 3C 23       >                db      "<#"               // name string in 7-bit ascii, but
 513+ 8291             >                org     $-1                 // alter last byte of Name just above to set
 513+ 8290 A3          >                db      {b $} | END_BIT     // msb as name end
 513+ 8291             >
 513+ 8291 71 82       >                dw      last_NFA            // Link to previous definition Name
 513+ 8293             >BEGIN_DASH:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 513+ 8293 53 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 513+ 8295             >                else
 513+ 8295 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 513+ 8295             >                endif           ; ok        // for other definitions it "points" the correct handler
 513+ 8295             >                // Use of "; ok" to suppress "warning[fwdref]"
 513+ 8295             >
 513+ 8295             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 514+ 8295 E9 73 4F 6E                  dw      PAD, HLD, STORE
 514+ 8299 75 6B
 515+ 829B 4F 69                        dw      EXIT
 516+ 829D
 517+ 829D              //  ______________________________________________________________________
 518+ 829D              //
 519+ 829D              // #>           --
 520+ 829D                              Colon_Def DASH_END, "#>", is_normal
 520+ 829D             >                New_Def  DASH_END, "#>", Enter_Ptr, is_normal ; ok
 520+ 829D             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 520+ 829D             >
 520+ 829D             >                // dummy db directives used to calculate length of namec
 520+ 829D 23 3E       >                db      "#>"
 520+ 829F             >len_NFA         defl    $ - temp_NFA
 520+ 829F             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 520+ 829D             >
 520+ 829D 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 520+ 829E 23 3E       >                db      "#>"               // name string in 7-bit ascii, but
 520+ 82A0             >                org     $-1                 // alter last byte of Name just above to set
 520+ 829F BE          >                db      {b $} | END_BIT     // msb as name end
 520+ 82A0             >
 520+ 82A0 8E 82       >                dw      last_NFA            // Link to previous definition Name
 520+ 82A2             >DASH_END:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 520+ 82A2 53 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 520+ 82A4             >                else
 520+ 82A4 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 520+ 82A4             >                endif           ; ok        // for other definitions it "points" the correct handler
 520+ 82A4             >                // Use of "; ok" to suppress "warning[fwdref]"
 520+ 82A4             >
 520+ 82A4             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 521+ 82A4 16 6B                        dw      TWO_DROP
 522+ 82A6 4F 6E 68 6B                  dw      HLD, FETCH, PAD, OVER, SUBTRACT
 522+ 82AA E9 73 90 6A
 522+ 82AE 00 6F
 523+ 82B0 4F 69                        dw      EXIT
 524+ 82B2
 525+ 82B2              //  ______________________________________________________________________
 526+ 82B2              //
 527+ 82B2              // sign         n d -- d
 528+ 82B2                              Colon_Def SIGN, "SIGN", is_normal
 528+ 82B2             >                New_Def  SIGN, "SIGN", Enter_Ptr, is_normal ; ok
 528+ 82B2             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 528+ 82B2             >
 528+ 82B2             >                // dummy db directives used to calculate length of namec
 528+ 82B2 53 49 47 4E >                db      "SIGN"
 528+ 82B6             >len_NFA         defl    $ - temp_NFA
 528+ 82B6             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 528+ 82B2             >
 528+ 82B2 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 528+ 82B3 53 49 47 4E >                db      "SIGN"               // name string in 7-bit ascii, but
 528+ 82B7             >                org     $-1                 // alter last byte of Name just above to set
 528+ 82B6 CE          >                db      {b $} | END_BIT     // msb as name end
 528+ 82B7             >
 528+ 82B7 9D 82       >                dw      last_NFA            // Link to previous definition Name
 528+ 82B9             >SIGN:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 528+ 82B9 53 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 528+ 82BB             >                else
 528+ 82BB ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 528+ 82BB             >                endif           ; ok        // for other definitions it "points" the correct handler
 528+ 82BB             >                // Use of "; ok" to suppress "warning[fwdref]"
 528+ 82BB             >
 528+ 82BB             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 529+ 82BB E2 6A CD 69                  dw      ROT, ZLESS
 530+ 82BF E3 63                        dw      ZBRANCH
 531+ 82C1 08 00                        dw      Sign_Endif - $
 532+ 82C3 A9 63 2D 00                  dw          LIT, 45, HOLD
 532+ 82C7 D3 73
 533+ 82C9              Sign_Endif:
 534+ 82C9 4F 69                        dw      EXIT
 535+ 82CB
 536+ 82CB              //  ______________________________________________________________________
 537+ 82CB              //
 538+ 82CB              // #           d1 -- d2
 539+ 82CB                              Colon_Def DASH, "#", is_normal
 539+ 82CB             >                New_Def  DASH, "#", Enter_Ptr, is_normal ; ok
 539+ 82CB             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 539+ 82CB             >
 539+ 82CB             >                // dummy db directives used to calculate length of namec
 539+ 82CB 23          >                db      "#"
 539+ 82CC             >len_NFA         defl    $ - temp_NFA
 539+ 82CC             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 539+ 82CB             >
 539+ 82CB 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 539+ 82CC 23          >                db      "#"               // name string in 7-bit ascii, but
 539+ 82CD             >                org     $-1                 // alter last byte of Name just above to set
 539+ 82CC A3          >                db      {b $} | END_BIT     // msb as name end
 539+ 82CD             >
 539+ 82CD B2 82       >                dw      last_NFA            // Link to previous definition Name
 539+ 82CF             >DASH:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 539+ 82CF 53 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 539+ 82D1             >                else
 539+ 82D1 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 539+ 82D1             >                endif           ; ok        // for other definitions it "points" the correct handler
 539+ 82D1             >                // Use of "; ok" to suppress "warning[fwdref]"
 539+ 82D1             >
 539+ 82D1             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 540+ 82D1 23 6E 68 6B                  dw      BASE, FETCH
 541+ 82D5
 542+ 82D5 7D 69                        dw      TO_R                    // >r           ( ud1 )
 543+ 82D7 CE 6C A5 69                  dw      ZERO, R_OP, UMDIVMOD    // 0 r um/mod   ( l rem1 h/r )
 543+ 82DB A1 68
 544+ 82DD 91 69 C8 6A                  dw      R_TO, SWAP, TO_R        // r> swap >r   ( l rem )
 544+ 82E1 7D 69
 545+ 82E3 A1 68                        dw      UMDIVMOD                // um/mod       ( rem2 l/r )
 546+ 82E5 91 69                        dw      R_TO                    // r>           ( rem2 l/r h/r )
 547+ 82E7
 548+ 82E7 E2 6A                        dw      ROT
 549+ 82E9 A9 63 09 00                  dw      LIT, 9, OVER, LESS
 549+ 82ED 90 6A 2F 6F
 550+ 82F1 E3 63                        dw      ZBRANCH
 551+ 82F3 08 00                        dw      Dash_Endif - $
 552+ 82F5 A9 63 07 00                  dw          LIT, 7, PLUS
 552+ 82F9 F5 69
 553+ 82FB              Dash_Endif:
 554+ 82FB
 555+ 82FB A9 63 30 00                  dw      LIT, 48, PLUS, HOLD
 555+ 82FF F5 69 D3 73
 556+ 8303 4F 69                        dw      EXIT
 557+ 8305
 558+ 8305              //  ______________________________________________________________________
 559+ 8305              //
 560+ 8305              // #s           d1 -- d2
 561+ 8305                              Colon_Def DASHES, "#S", is_normal
 561+ 8305             >                New_Def  DASHES, "#S", Enter_Ptr, is_normal ; ok
 561+ 8305             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 561+ 8305             >
 561+ 8305             >                // dummy db directives used to calculate length of namec
 561+ 8305 23 53       >                db      "#S"
 561+ 8307             >len_NFA         defl    $ - temp_NFA
 561+ 8307             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 561+ 8305             >
 561+ 8305 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 561+ 8306 23 53       >                db      "#S"               // name string in 7-bit ascii, but
 561+ 8308             >                org     $-1                 // alter last byte of Name just above to set
 561+ 8307 D3          >                db      {b $} | END_BIT     // msb as name end
 561+ 8308             >
 561+ 8308 CB 82       >                dw      last_NFA            // Link to previous definition Name
 561+ 830A             >DASHES:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 561+ 830A 53 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 561+ 830C             >                else
 561+ 830C ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 561+ 830C             >                endif           ; ok        // for other definitions it "points" the correct handler
 561+ 830C             >                // Use of "; ok" to suppress "warning[fwdref]"
 561+ 830C             >
 561+ 830C             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 562+ 830C              Dashes_Begin:
 563+ 830C CF 82 36 6B                  dw      DASH, TWO_DUP
 564+ 8310 F1 68 B2 69                  dw          OR_OP, ZEQUAL
 565+ 8314 E3 63                        dw      ZBRANCH
 566+ 8316 F6 FF                        dw      Dashes_Begin - $
 567+ 8318 4F 69                        dw      EXIT
 568+ 831A
 569+ 831A              //  ______________________________________________________________________
 570+ 831A              //
 571+ 831A              // d.r          d n --
 572+ 831A                              Colon_Def D_DOT_R, "D.R", is_normal
 572+ 831A             >                New_Def  D_DOT_R, "D.R", Enter_Ptr, is_normal ; ok
 572+ 831A             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 572+ 831A             >
 572+ 831A             >                // dummy db directives used to calculate length of namec
 572+ 831A 44 2E 52    >                db      "D.R"
 572+ 831D             >len_NFA         defl    $ - temp_NFA
 572+ 831D             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 572+ 831A             >
 572+ 831A 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 572+ 831B 44 2E 52    >                db      "D.R"               // name string in 7-bit ascii, but
 572+ 831E             >                org     $-1                 // alter last byte of Name just above to set
 572+ 831D D2          >                db      {b $} | END_BIT     // msb as name end
 572+ 831E             >
 572+ 831E 05 83       >                dw      last_NFA            // Link to previous definition Name
 572+ 8320             >D_DOT_R:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 572+ 8320 53 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 572+ 8322             >                else
 572+ 8322 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 572+ 8322             >                endif           ; ok        // for other definitions it "points" the correct handler
 572+ 8322             >                // Use of "; ok" to suppress "warning[fwdref]"
 572+ 8322             >
 572+ 8322             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 573+ 8322 7D 69                        dw      TO_R
 574+ 8324 B8 6A 8B 79                  dw      TUCK, DABS
 575+ 8328 93 82 0A 83                  dw      BEGIN_DASH, DASHES, SIGN, DASH_END
 575+ 832C B9 82 A2 82
 576+ 8330 91 69                        dw      R_TO
 577+ 8332 90 6A 00 6F                  dw      OVER, SUBTRACT, SPACES, TYPE
 577+ 8336 7A 82 37 72
 578+ 833A 4F 69                        dw      EXIT
 579+ 833C
 580+ 833C              //  ______________________________________________________________________
 581+ 833C              //
 582+ 833C              // .r           n1 n2 --
 583+ 833C                              Colon_Def DOT_R, ".R", is_normal
 583+ 833C             >                New_Def  DOT_R, ".R", Enter_Ptr, is_normal ; ok
 583+ 833C             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 583+ 833C             >
 583+ 833C             >                // dummy db directives used to calculate length of namec
 583+ 833C 2E 52       >                db      ".R"
 583+ 833E             >len_NFA         defl    $ - temp_NFA
 583+ 833E             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 583+ 833C             >
 583+ 833C 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 583+ 833D 2E 52       >                db      ".R"               // name string in 7-bit ascii, but
 583+ 833F             >                org     $-1                 // alter last byte of Name just above to set
 583+ 833E D2          >                db      {b $} | END_BIT     // msb as name end
 583+ 833F             >
 583+ 833F 1A 83       >                dw      last_NFA            // Link to previous definition Name
 583+ 8341             >DOT_R:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 583+ 8341 53 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 583+ 8343             >                else
 583+ 8343 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 583+ 8343             >                endif           ; ok        // for other definitions it "points" the correct handler
 583+ 8343             >                // Use of "; ok" to suppress "warning[fwdref]"
 583+ 8343             >
 583+ 8343             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 584+ 8343 7D 69                        dw      TO_R
 585+ 8345 EC 6E 91 69                  dw      S_TO_D, R_TO
 586+ 8349 20 83                        dw      D_DOT_R
 587+ 834B 4F 69                        dw      EXIT
 588+ 834D
 589+ 834D              //  ______________________________________________________________________
 590+ 834D              //
 591+ 834D              // d.           d --
 592+ 834D                              Colon_Def D_DOT, "D.", is_normal
 592+ 834D             >                New_Def  D_DOT, "D.", Enter_Ptr, is_normal ; ok
 592+ 834D             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 592+ 834D             >
 592+ 834D             >                // dummy db directives used to calculate length of namec
 592+ 834D 44 2E       >                db      "D."
 592+ 834F             >len_NFA         defl    $ - temp_NFA
 592+ 834F             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 592+ 834D             >
 592+ 834D 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 592+ 834E 44 2E       >                db      "D."               // name string in 7-bit ascii, but
 592+ 8350             >                org     $-1                 // alter last byte of Name just above to set
 592+ 834F AE          >                db      {b $} | END_BIT     // msb as name end
 592+ 8350             >
 592+ 8350 3C 83       >                dw      last_NFA            // Link to previous definition Name
 592+ 8352             >D_DOT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 592+ 8352 53 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 592+ 8354             >                else
 592+ 8354 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 592+ 8354             >                endif           ; ok        // for other definitions it "points" the correct handler
 592+ 8354             >                // Use of "; ok" to suppress "warning[fwdref]"
 592+ 8354             >
 592+ 8354             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 593+ 8354 CE 6C 20 83                  dw      ZERO, D_DOT_R, SPACE
 593+ 8358 BD 6F
 594+ 835A 4F 69                        dw      EXIT
 595+ 835C
 596+ 835C              //  ______________________________________________________________________
 597+ 835C              //
 598+ 835C              // .            n --
 599+ 835C                              Colon_Def DOT, ".", is_normal
 599+ 835C             >                New_Def  DOT, ".", Enter_Ptr, is_normal ; ok
 599+ 835C             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 599+ 835C             >
 599+ 835C             >                // dummy db directives used to calculate length of namec
 599+ 835C 2E          >                db      "."
 599+ 835D             >len_NFA         defl    $ - temp_NFA
 599+ 835D             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 599+ 835C             >
 599+ 835C 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 599+ 835D 2E          >                db      "."               // name string in 7-bit ascii, but
 599+ 835E             >                org     $-1                 // alter last byte of Name just above to set
 599+ 835D AE          >                db      {b $} | END_BIT     // msb as name end
 599+ 835E             >
 599+ 835E 4D 83       >                dw      last_NFA            // Link to previous definition Name
 599+ 8360             >DOT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 599+ 8360 53 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 599+ 8362             >                else
 599+ 8362 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 599+ 8362             >                endif           ; ok        // for other definitions it "points" the correct handler
 599+ 8362             >                // Use of "; ok" to suppress "warning[fwdref]"
 599+ 8362             >
 599+ 8362             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 600+ 8362 EC 6E 52 83                  dw      S_TO_D, D_DOT
 601+ 8366 4F 69                        dw      EXIT
 602+ 8368
 603+ 8368              //  ______________________________________________________________________
 604+ 8368              //
 605+ 8368              // ?            n --
 606+ 8368                              Colon_Def QUESTION, "?", is_normal
 606+ 8368             >                New_Def  QUESTION, "?", Enter_Ptr, is_normal ; ok
 606+ 8368             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 606+ 8368             >
 606+ 8368             >                // dummy db directives used to calculate length of namec
 606+ 8368 3F          >                db      "?"
 606+ 8369             >len_NFA         defl    $ - temp_NFA
 606+ 8369             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 606+ 8368             >
 606+ 8368 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 606+ 8369 3F          >                db      "?"               // name string in 7-bit ascii, but
 606+ 836A             >                org     $-1                 // alter last byte of Name just above to set
 606+ 8369 BF          >                db      {b $} | END_BIT     // msb as name end
 606+ 836A             >
 606+ 836A 5C 83       >                dw      last_NFA            // Link to previous definition Name
 606+ 836C             >QUESTION:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 606+ 836C 53 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 606+ 836E             >                else
 606+ 836E ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 606+ 836E             >                endif           ; ok        // for other definitions it "points" the correct handler
 606+ 836E             >                // Use of "; ok" to suppress "warning[fwdref]"
 606+ 836E             >
 606+ 836E             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 607+ 836E 68 6B 60 83                  dw      FETCH, DOT
 608+ 8372 4F 69                        dw      EXIT
 609+ 8374
 610+ 8374              //  ______________________________________________________________________
 611+ 8374              //
 612+ 8374              // u.           u --
 613+ 8374                              Colon_Def U_DOT, "U.", is_normal
 613+ 8374             >                New_Def  U_DOT, "U.", Enter_Ptr, is_normal ; ok
 613+ 8374             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 613+ 8374             >
 613+ 8374             >                // dummy db directives used to calculate length of namec
 613+ 8374 55 2E       >                db      "U."
 613+ 8376             >len_NFA         defl    $ - temp_NFA
 613+ 8376             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 613+ 8374             >
 613+ 8374 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 613+ 8375 55 2E       >                db      "U."               // name string in 7-bit ascii, but
 613+ 8377             >                org     $-1                 // alter last byte of Name just above to set
 613+ 8376 AE          >                db      {b $} | END_BIT     // msb as name end
 613+ 8377             >
 613+ 8377 68 83       >                dw      last_NFA            // Link to previous definition Name
 613+ 8379             >U_DOT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 613+ 8379 53 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 613+ 837B             >                else
 613+ 837B ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 613+ 837B             >                endif           ; ok        // for other definitions it "points" the correct handler
 613+ 837B             >                // Use of "; ok" to suppress "warning[fwdref]"
 613+ 837B             >
 613+ 837B             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 614+ 837B CE 6C 52 83                  dw      ZERO, D_DOT
 615+ 837F 4F 69                        dw      EXIT
 616+ 8381
 617+ 8381              //  ______________________________________________________________________
 618+ 8381              //
 619+ 8381              // words        --
 620+ 8381                              Colon_Def WORDS, "WORDS", is_normal
 620+ 8381             >                New_Def  WORDS, "WORDS", Enter_Ptr, is_normal ; ok
 620+ 8381             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 620+ 8381             >
 620+ 8381             >                // dummy db directives used to calculate length of namec
 620+ 8381 57 4F 52 44 >                db      "WORDS"
 620+ 8385 53          >
 620+ 8386             >len_NFA         defl    $ - temp_NFA
 620+ 8386             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 620+ 8381             >
 620+ 8381 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 620+ 8382 57 4F 52 44 >                db      "WORDS"               // name string in 7-bit ascii, but
 620+ 8386 53          >
 620+ 8387             >                org     $-1                 // alter last byte of Name just above to set
 620+ 8386 D3          >                db      {b $} | END_BIT     // msb as name end
 620+ 8387             >
 620+ 8387 74 83       >                dw      last_NFA            // Link to previous definition Name
 620+ 8389             >WORDS:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 620+ 8389 53 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 620+ 838B             >                else
 620+ 838B ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 620+ 838B             >                endif           ; ok        // for other definitions it "points" the correct handler
 620+ 838B             >                // Use of "; ok" to suppress "warning[fwdref]"
 620+ 838B             >
 620+ 838B             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 621+ 838B A9 63 80 00                  dw      LIT, 128, OUT, STORE
 621+ 838F DF 6D 75 6B
 622+ 8393 01 6E 68 6B                  dw      CONTEXT, FETCH, FETCH
 622+ 8397 68 6B
 623+ 8399              Words_Begin:
 624+ 8399 D5 6A 83 6B                  dw          DUP, CFETCH, LIT, $1F, AND_OP
 624+ 839D A9 63 1F 00
 624+ 83A1 DF 68
 625+ 83A3 DF 6D 68 6B                  dw          OUT, FETCH, PLUS
 625+ 83A7 F5 69
 626+ 83A9 02 6D 2F 6F                  dw          CL, LESS, ZEQUAL
 626+ 83AD B2 69
 627+ 83AF E3 63                        dw          ZBRANCH
 628+ 83B1 0A 00                        dw          Words_Endif - $
 629+ 83B3 2E 68 CE 6C                  dw              CR, ZERO, OUT, STORE
 629+ 83B7 DF 6D 75 6B
 630+ 83BB              Words_Endif:
 631+ 83BB D5 6A 1F 76                  dw          DUP, ID_DOT
 632+ 83BF 31 70 03 70                  dw          PFA, LFA, FETCH
 632+ 83C3 68 6B
 633+ 83C5 D5 6A B2 69                  dw          DUP, ZEQUAL
 634+ 83C9 1A 67 F1 68                  dw          QTERMINAL, OR_OP
 635+ 83CD E3 63                        dw      ZBRANCH
 636+ 83CF CA FF                        dw      Words_Begin - $
 637+ 83D1 A0 6A                        dw      DROP
 638+ 83D3 4F 69                        dw      EXIT
 639+ 83D5
 640+ 83D5              //  ______________________________________________________________________
 641+ 83D5              //
 642+ 83D5              // list         n --
 643+ 83D5                              Colon_Def LIST, "LIST", is_normal
 643+ 83D5             >                New_Def  LIST, "LIST", Enter_Ptr, is_normal ; ok
 643+ 83D5             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 643+ 83D5             >
 643+ 83D5             >                // dummy db directives used to calculate length of namec
 643+ 83D5 4C 49 53 54 >                db      "LIST"
 643+ 83D9             >len_NFA         defl    $ - temp_NFA
 643+ 83D9             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 643+ 83D5             >
 643+ 83D5 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 643+ 83D6 4C 49 53 54 >                db      "LIST"               // name string in 7-bit ascii, but
 643+ 83DA             >                org     $-1                 // alter last byte of Name just above to set
 643+ 83D9 D4          >                db      {b $} | END_BIT     // msb as name end
 643+ 83DA             >
 643+ 83DA 81 83       >                dw      last_NFA            // Link to previous definition Name
 643+ 83DC             >LIST:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 643+ 83DC 53 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 643+ 83DE             >                else
 643+ 83DE ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 643+ 83DE             >                endif           ; ok        // for other definitions it "points" the correct handler
 643+ 83DE             >                // Use of "; ok" to suppress "warning[fwdref]"
 643+ 83DE             >
 643+ 83DE             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 644+ 83DE 96 71 2E 68                  dw      DECIMAL, CR
 645+ 83E2 D5 6A E8 6D                  dw      DUP, SCR, STORE
 645+ 83E6 75 6B
 646+ 83E8 4B 74                        dw      C_DOT_QUOTE
 647+ 83EA 05 53 63 72                  db      5, "Scr# "
 647+ 83EE 23 20
 648+ 83F0 60 83                        dw      DOT
 649+ 83F2 26 6D CE 6C                  dw      LSCR, ZERO, C_DO
 649+ 83F6 6B 64
 650+ 83F8              List_Loop:
 651+ 83F8 2E 68                        dw          CR
 652+ 83FA 76 64 E6 6C                  dw          I, THREE
 653+ 83FE 41 83 BD 6F                  dw          DOT_R, SPACE
 654+ 8402 76 64 E8 6D                  dw          I, SCR, FETCH, DOT_LINE
 654+ 8406 68 6B BA 7A
 655+ 840A 1A 67                        dw          QTERMINAL
 656+ 840C E3 63                        dw          ZBRANCH
 657+ 840E 06 00                        dw          List_Endif - $
 658+ 8410 67 69                        dw              C_LEAVE
 659+ 8412 06 00                        dw              List_Leave - $
 660+ 8414              List_Endif:
 661+ 8414 F8 63                        dw      C_LOOP
 662+ 8416 E2 FF                        dw      List_Loop - $
 663+ 8418              List_Leave:
 664+ 8418 2E 68                        dw      CR
 665+ 841A 4F 69                        dw      EXIT
 666+ 841C
 667+ 841C              //  ______________________________________________________________________
 668+ 841C              //
 669+ 841C              // index        n1 n2 --
 670+ 841C                              Colon_Def INDEX, "INDEX", is_normal
 670+ 841C             >                New_Def  INDEX, "INDEX", Enter_Ptr, is_normal ; ok
 670+ 841C             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 670+ 841C             >
 670+ 841C             >                // dummy db directives used to calculate length of namec
 670+ 841C 49 4E 44 45 >                db      "INDEX"
 670+ 8420 58          >
 670+ 8421             >len_NFA         defl    $ - temp_NFA
 670+ 8421             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 670+ 841C             >
 670+ 841C 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 670+ 841D 49 4E 44 45 >                db      "INDEX"               // name string in 7-bit ascii, but
 670+ 8421 58          >
 670+ 8422             >                org     $-1                 // alter last byte of Name just above to set
 670+ 8421 D8          >                db      {b $} | END_BIT     // msb as name end
 670+ 8422             >
 670+ 8422 D5 83       >                dw      last_NFA            // Link to previous definition Name
 670+ 8424             >INDEX:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 670+ 8424 53 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 670+ 8426             >                else
 670+ 8426 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 670+ 8426             >                endif           ; ok        // for other definitions it "points" the correct handler
 670+ 8426             >                // Use of "; ok" to suppress "warning[fwdref]"
 670+ 8426             >
 670+ 8426             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 671+ 8426 16 6A C8 6A                  dw      ONE_PLUS, SWAP, C_DO
 671+ 842A 6B 64
 672+ 842C              Index_Loop:
 673+ 842C 2E 68 76 64                  dw          CR, I, THREE
 673+ 8430 E6 6C
 674+ 8432 41 83 BD 6F                  dw          DOT_R, SPACE
 675+ 8436 CE 6C 76 64                  dw          ZERO, I, DOT_LINE
 675+ 843A BA 7A
 676+ 843C 1A 67                        dw          QTERMINAL
 677+ 843E E3 63                        dw          ZBRANCH
 678+ 8440 06 00                        dw          Index_Endif - $
 679+ 8442 67 69                        dw              C_LEAVE
 680+ 8444 06 00                        dw              Index_Leave - $
 681+ 8446              Index_Endif:
 682+ 8446 F8 63                        dw      C_LOOP
 683+ 8448 E4 FF                        dw      Index_Loop - $
 684+ 844A              Index_Leave:
 685+ 844A 2E 68                        dw      CR
 686+ 844C 4F 69                        dw      EXIT
 687+ 844E
 688+ 844E              //  ______________________________________________________________________
 689+ 844E              //
 690+ 844E              // cls          --
 691+ 844E                              Colon_Def CLS, "CLS", is_normal
 691+ 844E             >                New_Def  CLS, "CLS", Enter_Ptr, is_normal ; ok
 691+ 844E             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 691+ 844E             >
 691+ 844E             >                // dummy db directives used to calculate length of namec
 691+ 844E 43 4C 53    >                db      "CLS"
 691+ 8451             >len_NFA         defl    $ - temp_NFA
 691+ 8451             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 691+ 844E             >
 691+ 844E 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 691+ 844F 43 4C 53    >                db      "CLS"               // name string in 7-bit ascii, but
 691+ 8452             >                org     $-1                 // alter last byte of Name just above to set
 691+ 8451 D3          >                db      {b $} | END_BIT     // msb as name end
 691+ 8452             >
 691+ 8452 1C 84       >                dw      last_NFA            // Link to previous definition Name
 691+ 8454             >CLS:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 691+ 8454 53 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 691+ 8456             >                else
 691+ 8456 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 691+ 8456             >                endif           ; ok        // for other definitions it "points" the correct handler
 691+ 8456             >                // Use of "; ok" to suppress "warning[fwdref]"
 691+ 8456             >
 691+ 8456             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 692+ 8456 A9 63 0E 00                  dw      LIT, $0E, EMITC
 692+ 845A F9 65
 693+ 845C 4F 69                        dw      EXIT
 694+ 845E
 695+ 845E              //  ______________________________________________________________________
 696+ 845E              //
 697+ 845E              // splash       --
 698+ 845E                              Colon_Def SPLASH, "SPLASH", is_normal
 698+ 845E             >                New_Def  SPLASH, "SPLASH", Enter_Ptr, is_normal ; ok
 698+ 845E             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 698+ 845E             >
 698+ 845E             >                // dummy db directives used to calculate length of namec
 698+ 845E 53 50 4C 41 >                db      "SPLASH"
 698+ 8462 53 48       >
 698+ 8464             >len_NFA         defl    $ - temp_NFA
 698+ 8464             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 698+ 845E             >
 698+ 845E 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 698+ 845F 53 50 4C 41 >                db      "SPLASH"               // name string in 7-bit ascii, but
 698+ 8463 53 48       >
 698+ 8465             >                org     $-1                 // alter last byte of Name just above to set
 698+ 8464 C8          >                db      {b $} | END_BIT     // msb as name end
 698+ 8465             >
 698+ 8465 4E 84       >                dw      last_NFA            // Link to previous definition Name
 698+ 8467             >SPLASH:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 698+ 8467 53 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 698+ 8469             >                else
 698+ 8469 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 698+ 8469             >                endif           ; ok        // for other definitions it "points" the correct handler
 698+ 8469             >                // Use of "; ok" to suppress "warning[fwdref]"
 698+ 8469             >
 698+ 8469             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 699+ 8469 54 84                        dw      CLS
 700+ 846B 4B 74                        dw      C_DOT_QUOTE
 701+ 846D 57                           db      87
 702+ 846E 76 2D 46 6F                  db      "v-Forth 1.5 NextZXOS version", 13
 702+ 8472 72 74 68 20
 702+ 8476 31 2E 35 20
 702+ 847A 4E 65 78 74
 702+ 847E 5A 58 4F 53
 702+ 8482 20 76 65 72
 702+ 8486 73 69 6F 6E
 702+ 848A 0D
 703+ 848B 49 6E 64 69                  db      "Indirect Thread - build 20211119", 13
 703+ 848F 72 65 63 74
 703+ 8493 20 54 68 72
 703+ 8497 65 61 64 20
 703+ 849B 2D 20 62 75
 703+ 849F 69 6C 64 20
 703+ 84A3 32 30 32 31
 703+ 84A7 31 31 31 39
 703+ 84AB 0D
 704+ 84AC 31 39 39 30                  db      "1990-2021 Matteo Vitturi", 13
 704+ 84B0 2D 32 30 32
 704+ 84B4 31 20 4D 61
 704+ 84B8 74 74 65 6F
 704+ 84BC 20 56 69 74
 704+ 84C0 74 75 72 69
 704+ 84C4 0D
 705+ 84C5 4F 69                        dw      EXIT
 706+ 84C7
 707+ 84C7              //  ______________________________________________________________________
 708+ 84C7              //
 709+ 84C7              // video        --
 710+ 84C7                              Colon_Def VIDEO, "VIDEO", is_normal
 710+ 84C7             >                New_Def  VIDEO, "VIDEO", Enter_Ptr, is_normal ; ok
 710+ 84C7             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 710+ 84C7             >
 710+ 84C7             >                // dummy db directives used to calculate length of namec
 710+ 84C7 56 49 44 45 >                db      "VIDEO"
 710+ 84CB 4F          >
 710+ 84CC             >len_NFA         defl    $ - temp_NFA
 710+ 84CC             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 710+ 84C7             >
 710+ 84C7 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 710+ 84C8 56 49 44 45 >                db      "VIDEO"               // name string in 7-bit ascii, but
 710+ 84CC 4F          >
 710+ 84CD             >                org     $-1                 // alter last byte of Name just above to set
 710+ 84CC CF          >                db      {b $} | END_BIT     // msb as name end
 710+ 84CD             >
 710+ 84CD 5E 84       >                dw      last_NFA            // Link to previous definition Name
 710+ 84CF             >VIDEO:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 710+ 84CF 53 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 710+ 84D1             >                else
 710+ 84D1 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 710+ 84D1             >                endif           ; ok        // for other definitions it "points" the correct handler
 710+ 84D1             >                // Use of "; ok" to suppress "warning[fwdref]"
 710+ 84D1             >
 710+ 84D1             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 711+ 84D1 DE 6C D5 6A                  dw      TWO, DUP, DEVICE, STORE
 711+ 84D5 02 7B 75 6B
 712+ 84D9 33 7B                        dw      SELECT
 713+ 84DB 4F 69                        dw      EXIT
 714+ 84DD
 715+ 84DD              //  ______________________________________________________________________
 716+ 84DD              //
 717+ 84DD              // accept-      a n1 -- n2
 718+ 84DD                              Colon_Def ACCEPT_N, "ACCEPT-", is_normal
 718+ 84DD             >                New_Def  ACCEPT_N, "ACCEPT-", Enter_Ptr, is_normal ; ok
 718+ 84DD             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 718+ 84DD             >
 718+ 84DD             >                // dummy db directives used to calculate length of namec
 718+ 84DD 41 43 43 45 >                db      "ACCEPT-"
 718+ 84E1 50 54 2D    >
 718+ 84E4             >len_NFA         defl    $ - temp_NFA
 718+ 84E4             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 718+ 84DD             >
 718+ 84DD 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 718+ 84DE 41 43 43 45 >                db      "ACCEPT-"               // name string in 7-bit ascii, but
 718+ 84E2 50 54 2D    >
 718+ 84E5             >                org     $-1                 // alter last byte of Name just above to set
 718+ 84E4 AD          >                db      {b $} | END_BIT     // msb as name end
 718+ 84E5             >
 718+ 84E5 C7 84       >                dw      last_NFA            // Link to previous definition Name
 718+ 84E7             >ACCEPT_N:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 718+ 84E7 53 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 718+ 84E9             >                else
 718+ 84E9 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 718+ 84E9             >                endif           ; ok        // for other definitions it "points" the correct handler
 718+ 84E9             >                // Use of "; ok" to suppress "warning[fwdref]"
 718+ 84E9             >
 718+ 84E9             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 719+ 84E9 7D 69                        dw      TO_R
 720+ 84EB CE 6C                        dw      ZERO
 721+ 84ED C8 6A                        dw      SWAP
 722+ 84EF D5 6A                        dw      DUP
 723+ 84F1 91 69                        dw      R_TO
 724+ 84F3 F5 69                        dw      PLUS
 725+ 84F5 C8 6A                        dw      SWAP
 726+ 84F7 6B 64                        dw      C_DO
 727+ 84F9              AcceptN_Loop:
 728+ 84F9 83 7B                        dw          MMU7_FETCH
 729+ 84FB 0E 7B                        dw          INKEY
 730+ 84FD C8 6A 95 7B                  dw          SWAP, MMU7_STORE
 731+ 8501 D5 6A B2 69                  dw          DUP, ZEQUAL
 732+ 8505 E3 63                        dw          ZBRANCH
 733+ 8507 06 00                        dw          AcceptN_Endif_1 - $
 734+ 8509 CF 84 5C 78                  dw              VIDEO, QUIT
 735+ 850D              AcceptN_Endif_1:
 736+ 850D D5 6A A9 63                  dw          DUP, LIT, 13, EQUALS
 736+ 8511 0D 00 0E 6F
 737+ 8515 E3 63                        dw          ZBRANCH
 738+ 8517 06 00                        dw          AcceptN_Endif_2 - $
 739+ 8519 A0 6A CE 6C                  dw              DROP, ZERO
 740+ 851D              AcceptN_Endif_2:
 741+ 851D D5 6A A9 63                  dw          DUP, LIT, 10, EQUALS
 741+ 8521 0A 00 0E 6F
 742+ 8525 E3 63                        dw          ZBRANCH
 743+ 8527 06 00                        dw          AcceptN_Endif_3 - $
 744+ 8529 A0 6A CE 6C                  dw              DROP, ZERO
 745+ 852D              AcceptN_Endif_3:
 746+ 852D 76 64 91 6B                  dw          I, CSTORE, ONE_PLUS
 746+ 8531 16 6A
 747+ 8533
 748+ 8533 76 64 83 6B                  dw          I, CFETCH, ZEQUAL   //      i 0= if
 748+ 8537 B2 69
 749+ 8539 E3 63                        dw          ZBRANCH
 750+ 853B 06 00                        dw              AcceptN_Endif_4 - $
 751+ 853D 67 69                        dw                  C_LEAVE     //              leave
 752+ 853F 06 00                        dw                  AcceptN_Leave - $
 753+ 8541              AcceptN_Endif_4:                                 //      endif
 754+ 8541
 755+ 8541 F8 63                        dw      C_LOOP
 756+ 8543 B6 FF                        dw      AcceptN_Loop -$
 757+ 8545              AcceptN_Leave:
 758+ 8545 4F 69                        dw      EXIT
 759+ 8547
 760+ 8547              //  ______________________________________________________________________
 761+ 8547              //
 762+ 8547              // load-        n --
 763+ 8547              // Provided that a stream n is OPEN# via the standart BASIC
 764+ 8547              // it accepts text from stream #n to the normal INTERPRET
 765+ 8547              // up to now, text-file must end with QUIT
 766+ 8547                              Colon_Def LOAD_N, "LOAD-", is_normal
 766+ 8547             >                New_Def  LOAD_N, "LOAD-", Enter_Ptr, is_normal ; ok
 766+ 8547             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 766+ 8547             >
 766+ 8547             >                // dummy db directives used to calculate length of namec
 766+ 8547 4C 4F 41 44 >                db      "LOAD-"
 766+ 854B 2D          >
 766+ 854C             >len_NFA         defl    $ - temp_NFA
 766+ 854C             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 766+ 8547             >
 766+ 8547 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 766+ 8548 4C 4F 41 44 >                db      "LOAD-"               // name string in 7-bit ascii, but
 766+ 854C 2D          >
 766+ 854D             >                org     $-1                 // alter last byte of Name just above to set
 766+ 854C AD          >                db      {b $} | END_BIT     // msb as name end
 766+ 854D             >
 766+ 854D DD 84       >                dw      last_NFA            // Link to previous definition Name
 766+ 854F             >LOAD_N:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 766+ 854F 53 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 766+ 8551             >                else
 766+ 8551 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 766+ 8551             >                endif           ; ok        // for other definitions it "points" the correct handler
 766+ 8551             >                // Use of "; ok" to suppress "warning[fwdref]"
 766+ 8551             >
 766+ 8551             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 767+ 8551 84 6E 75 6B                  dw      SOURCE_ID, STORE
 768+ 8555              Load_N_Begin:
 769+ 8555 61 6D 68 6B                  dw          TIB, FETCH
 770+ 8559 D5 6A A9 63                  dw          DUP, LIT, 80
 770+ 855D 50 00
 771+ 855F 36 6B C4 73                  dw          TWO_DUP, BLANKS
 772+ 8563 84 6E 68 6B                  dw          SOURCE_ID, FETCH
 773+ 8567 7C 79 D5 6A                  dw          ABS_OP, DUP, DEVICE, STORE
 773+ 856B 02 7B 75 6B
 774+ 856F 33 7B                        dw          SELECT
 775+ 8571 E7 84                        dw          ACCEPT_N
 776+ 8573 CF 84                        dw          VIDEO
 777+ 8575 16 6B                        dw          TWO_DROP
 778+ 8577 CE 6C CD 6D                  dw          ZERO, BLK, STORE
 778+ 857B 75 6B
 779+ 857D CE 6C D6 6D                  dw          ZERO, TO_IN, STORE
 779+ 8581 75 6B
 780+ 8583 9C 77                        dw          INTERPRET
 781+ 8585 1A 67                        dw          QTERMINAL
 782+ 8587 E3 63                        dw      ZBRANCH
 783+ 8589 CC FF                        dw      Load_N_Begin - $
 784+ 858B 4F 69                        dw      EXIT
 785+ 858D
 786+ 858D              //  ______________________________________________________________________
 787+ 858D              //
 788+ 858D              // load         n --
 789+ 858D              // if n is positive, it loads screen #n (as usual)
 790+ 858D              // if n is negative, it connects stream #n to the normal INTERPRET
 791+ 858D              // this second way is useful if you want to load any kind of file
 792+ 858D              // provied that it is OPEN# the usual BASIC way.
 793+ 858D                              Colon_Def LOAD, "LOAD", is_normal
 793+ 858D             >                New_Def  LOAD, "LOAD", Enter_Ptr, is_normal ; ok
 793+ 858D             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 793+ 858D             >
 793+ 858D             >                // dummy db directives used to calculate length of namec
 793+ 858D 4C 4F 41 44 >                db      "LOAD"
 793+ 8591             >len_NFA         defl    $ - temp_NFA
 793+ 8591             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 793+ 858D             >
 793+ 858D 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 793+ 858E 4C 4F 41 44 >                db      "LOAD"               // name string in 7-bit ascii, but
 793+ 8592             >                org     $-1                 // alter last byte of Name just above to set
 793+ 8591 C4          >                db      {b $} | END_BIT     // msb as name end
 793+ 8592             >
 793+ 8592 47 85       >                dw      last_NFA            // Link to previous definition Name
 793+ 8594             >LOAD:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 793+ 8594 53 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 793+ 8596             >                else
 793+ 8596 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 793+ 8596             >                endif           ; ok        // for other definitions it "points" the correct handler
 793+ 8596             >                // Use of "; ok" to suppress "warning[fwdref]"
 793+ 8596             >
 793+ 8596             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 794+ 8596 D5 6A CD 69                  dw      DUP, ZLESS
 795+ 859A E3 63                        dw      ZBRANCH
 796+ 859C 08 00                        dw      Load_Else - $
 797+ 859E 4F 85                        dw          LOAD_N
 798+ 85A0 CC 63                        dw      BRANCH
 799+ 85A2 04 00                        dw      Load_Endif - $
 800+ 85A4              Load_Else:
 801+ 85A4 6F 81                        dw          LOAD_P
 802+ 85A6              Load_Endif:
 803+ 85A6 4F 69                        dw      EXIT
 804+ 85A8
 805+ 85A8
 806+ 85A8              //  ______________________________________________________________________
 807+ 85A8              //
 808+ 85A8              // autoexec     --
 809+ 85A8              // this word is called the first time the Forth system boot to
 810+ 85A8              // load Screen# 1. Once called it patches itself to prevent furhter runs.
 811+ 85A8                              Colon_Def AUTOEXEC, "AUTOEXEC", is_normal
 811+ 85A8             >                New_Def  AUTOEXEC, "AUTOEXEC", Enter_Ptr, is_normal ; ok
 811+ 85A8             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 811+ 85A8             >
 811+ 85A8             >                // dummy db directives used to calculate length of namec
 811+ 85A8 41 55 54 4F >                db      "AUTOEXEC"
 811+ 85AC 45 58 45 43 >
 811+ 85B0             >len_NFA         defl    $ - temp_NFA
 811+ 85B0             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 811+ 85A8             >
 811+ 85A8 88          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 811+ 85A9 41 55 54 4F >                db      "AUTOEXEC"               // name string in 7-bit ascii, but
 811+ 85AD 45 58 45 43 >
 811+ 85B1             >                org     $-1                 // alter last byte of Name just above to set
 811+ 85B0 C3          >                db      {b $} | END_BIT     // msb as name end
 811+ 85B1             >
 811+ 85B1 8D 85       >                dw      last_NFA            // Link to previous definition Name
 811+ 85B3             >AUTOEXEC:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 811+ 85B3 53 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 811+ 85B5             >                else
 811+ 85B5 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 811+ 85B5             >                endif           ; ok        // for other definitions it "points" the correct handler
 811+ 85B5             >                // Use of "; ok" to suppress "warning[fwdref]"
 811+ 85B5             >
 811+ 85B5             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 812+ 85B5 A9 63 0B 00                  dw      LIT, 11
 813+ 85B9 A9 63 7B 6C                  dw      LIT, NOOP
 814+ 85BD A9 63 AB 78                  dw      LIT, Autoexec_Ptr
 815+ 85C1 75 6B                        dw      STORE
 816+ 85C3 94 85                        dw      LOAD
 817+ 85C5 5C 78                        dw      QUIT
 818+ 85C7 4F 69                        dw      EXIT
 819+ 85C9
 820+ 85C9
 821+ 85C9              //  ______________________________________________________________________
 822+ 85C9              //
 823+ 85C9              // bye     --
 824+ 85C9              //
 825+ 85C9                              Colon_Def BYE, "BYE", is_normal
 825+ 85C9             >                New_Def  BYE, "BYE", Enter_Ptr, is_normal ; ok
 825+ 85C9             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 825+ 85C9             >
 825+ 85C9             >                // dummy db directives used to calculate length of namec
 825+ 85C9 42 59 45    >                db      "BYE"
 825+ 85CC             >len_NFA         defl    $ - temp_NFA
 825+ 85CC             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 825+ 85C9             >
 825+ 85C9 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 825+ 85CA 42 59 45    >                db      "BYE"               // name string in 7-bit ascii, but
 825+ 85CD             >                org     $-1                 // alter last byte of Name just above to set
 825+ 85CC C5          >                db      {b $} | END_BIT     // msb as name end
 825+ 85CD             >
 825+ 85CD A8 85       >                dw      last_NFA            // Link to previous definition Name
 825+ 85CF             >BYE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 825+ 85CF 53 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 825+ 85D1             >                else
 825+ 85D1 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 825+ 85D1             >                endif           ; ok        // for other definitions it "points" the correct handler
 825+ 85D1             >                // Use of "; ok" to suppress "warning[fwdref]"
 825+ 85D1             >
 825+ 85D1             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 826+ 85D1 0D 7E                        dw      FLUSH
 827+ 85D3 40 7D                        dw      EMPTY_BUFFERS
 828+ 85D5 E4 7B 68 6B                  dw      BLK_FH, FETCH, F_CLOSE, DROP
 828+ 85D9 5F 67 A0 6A
 829+ 85DD CE 6C 34 6D                  dw      ZERO, PLUS_ORIGIN
 830+ 85E1 41 79                        dw      BASIC
 831+ 85E3
 832+ 85E3              //  ______________________________________________________________________
 833+ 85E3              //
 834+ 85E3              // invv     --
 835+ 85E3              //
 836+ 85E3              //              Colon_Def INVV, "INVV", is_normal
 837+ 85E3              //              dw      LIT, 20, EMITC, ONE, EMITC
 838+ 85E3              //              dw      EXIT
 839+ 85E3
 840+ 85E3              //  ______________________________________________________________________
 841+ 85E3              //
 842+ 85E3              // truv     --
 843+ 85E3              //
 844+ 85E3              //              Colon_Def TRUV, "TRUV", is_normal
 845+ 85E3              //              dw      LIT, 20, EMITC, ZERO, EMITC
 846+ 85E3              //              dw      EXIT
 847+ 85E3
 848+ 85E3              //  ______________________________________________________________________
 849+ 85E3              //
 850+ 85E3              // mark     --
 851+ 85E3              //
 852+ 85E3              //              Colon_Def MARK, "MARK", is_normal
 853+ 85E3              //              dw      INVV, TYPE, TRUV
 854+ 85E3              //              dw      EXIT
 855+ 85E3
 856+ 85E3              //  ______________________________________________________________________
 857+ 85E3              //
 858+ 85E3              // back     --
 859+ 85E3              //
 860+ 85E3                              Colon_Def BACK, "BACK", is_normal
 860+ 85E3             >                New_Def  BACK, "BACK", Enter_Ptr, is_normal ; ok
 860+ 85E3             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 860+ 85E3             >
 860+ 85E3             >                // dummy db directives used to calculate length of namec
 860+ 85E3 42 41 43 4B >                db      "BACK"
 860+ 85E7             >len_NFA         defl    $ - temp_NFA
 860+ 85E7             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 860+ 85E3             >
 860+ 85E3 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 860+ 85E4 42 41 43 4B >                db      "BACK"               // name string in 7-bit ascii, but
 860+ 85E8             >                org     $-1                 // alter last byte of Name just above to set
 860+ 85E7 CB          >                db      {b $} | END_BIT     // msb as name end
 860+ 85E8             >
 860+ 85E8 C9 85       >                dw      last_NFA            // Link to previous definition Name
 860+ 85EA             >BACK:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 860+ 85EA 53 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 860+ 85EC             >                else
 860+ 85EC ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 860+ 85EC             >                endif           ; ok        // for other definitions it "points" the correct handler
 860+ 85EC             >                // Use of "; ok" to suppress "warning[fwdref]"
 860+ 85EC             >
 860+ 85EC             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 861+ 85EC AD 6E 00 6F                  dw      HERE, SUBTRACT, COMMA
 861+ 85F0 C9 6E
 862+ 85F2 4F 69                        dw      EXIT
 863+ 85F4
 864+ 85F4              //  ______________________________________________________________________
 865+ 85F4              //
 866+ 85F4              // if          ( -- a 2 ) \ compile-time
 867+ 85F4              // IF ... THEN
 868+ 85F4              // IF ... ELSE ... ENDIF
 869+ 85F4                              Colon_Def IF, "IF", is_immediate
 869+ 85F4             >                New_Def  IF, "IF", Enter_Ptr, is_immediate ; ok
 869+ 85F4             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 869+ 85F4             >
 869+ 85F4             >                // dummy db directives used to calculate length of namec
 869+ 85F4 49 46       >                db      "IF"
 869+ 85F6             >len_NFA         defl    $ - temp_NFA
 869+ 85F6             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 869+ 85F4             >
 869+ 85F4 C2          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 869+ 85F5 49 46       >                db      "IF"               // name string in 7-bit ascii, but
 869+ 85F7             >                org     $-1                 // alter last byte of Name just above to set
 869+ 85F6 C6          >                db      {b $} | END_BIT     // msb as name end
 869+ 85F7             >
 869+ 85F7 E3 85       >                dw      last_NFA            // Link to previous definition Name
 869+ 85F9             >IF:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 869+ 85F9 53 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 869+ 85FB             >                else
 869+ 85FB ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 869+ 85FB             >                endif           ; ok        // for other definitions it "points" the correct handler
 869+ 85FB             >                // Use of "; ok" to suppress "warning[fwdref]"
 869+ 85FB             >
 869+ 85FB             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 870+ 85FB 0A 71 E3 63                  dw      COMPILE, ZBRANCH
 871+ 85FF AD 6E CE 6C                  dw      HERE, ZERO, COMMA
 871+ 8603 C9 6E
 872+ 8605 DE 6C                        dw      TWO
 873+ 8607 4F 69                        dw      EXIT
 874+ 8609
 875+ 8609              //  ______________________________________________________________________
 876+ 8609              //
 877+ 8609              // endif        ( a 2 -- ) \ compile-time
 878+ 8609              //
 879+ 8609                              Colon_Def ENDIF, "ENDIF", is_immediate
 879+ 8609             >                New_Def  ENDIF, "ENDIF", Enter_Ptr, is_immediate ; ok
 879+ 8609             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 879+ 8609             >
 879+ 8609             >                // dummy db directives used to calculate length of namec
 879+ 8609 45 4E 44 49 >                db      "ENDIF"
 879+ 860D 46          >
 879+ 860E             >len_NFA         defl    $ - temp_NFA
 879+ 860E             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 879+ 8609             >
 879+ 8609 C5          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 879+ 860A 45 4E 44 49 >                db      "ENDIF"               // name string in 7-bit ascii, but
 879+ 860E 46          >
 879+ 860F             >                org     $-1                 // alter last byte of Name just above to set
 879+ 860E C6          >                db      {b $} | END_BIT     // msb as name end
 879+ 860F             >
 879+ 860F F4 85       >                dw      last_NFA            // Link to previous definition Name
 879+ 8611             >ENDIF:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 879+ 8611 53 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 879+ 8613             >                else
 879+ 8613 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 879+ 8613             >                endif           ; ok        // for other definitions it "points" the correct handler
 879+ 8613             >                // Use of "; ok" to suppress "warning[fwdref]"
 879+ 8613             >
 879+ 8613             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 880+ 8613 91 70                        dw      QCOMP
 881+ 8615 DE 6C C0 70                  dw      TWO, QPAIRS
 882+ 8619 AD 6E 90 6A                  dw      HERE, OVER, SUBTRACT, SWAP, STORE
 882+ 861D 00 6F C8 6A
 882+ 8621 75 6B
 883+ 8623 4F 69                        dw      EXIT
 884+ 8625
 885+ 8625              //  ______________________________________________________________________
 886+ 8625              //
 887+ 8625              // then        ( a 2 -- ) \ compile-time
 888+ 8625              //
 889+ 8625                              Colon_Def THEN, "THEN", is_immediate
 889+ 8625             >                New_Def  THEN, "THEN", Enter_Ptr, is_immediate ; ok
 889+ 8625             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 889+ 8625             >
 889+ 8625             >                // dummy db directives used to calculate length of namec
 889+ 8625 54 48 45 4E >                db      "THEN"
 889+ 8629             >len_NFA         defl    $ - temp_NFA
 889+ 8629             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 889+ 8625             >
 889+ 8625 C4          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 889+ 8626 54 48 45 4E >                db      "THEN"               // name string in 7-bit ascii, but
 889+ 862A             >                org     $-1                 // alter last byte of Name just above to set
 889+ 8629 CE          >                db      {b $} | END_BIT     // msb as name end
 889+ 862A             >
 889+ 862A 09 86       >                dw      last_NFA            // Link to previous definition Name
 889+ 862C             >THEN:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 889+ 862C 53 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 889+ 862E             >                else
 889+ 862E ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 889+ 862E             >                endif           ; ok        // for other definitions it "points" the correct handler
 889+ 862E             >                // Use of "; ok" to suppress "warning[fwdref]"
 889+ 862E             >
 889+ 862E             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 890+ 862E 11 86                        dw      ENDIF
 891+ 8630 4F 69                        dw      EXIT
 892+ 8632
 893+ 8632              //  ______________________________________________________________________
 894+ 8632              //
 895+ 8632              // else        ( a1 2 -- a2 2 ) \ compile-time
 896+ 8632              //
 897+ 8632                              Colon_Def ELSE, "ELSE", is_immediate
 897+ 8632             >                New_Def  ELSE, "ELSE", Enter_Ptr, is_immediate ; ok
 897+ 8632             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 897+ 8632             >
 897+ 8632             >                // dummy db directives used to calculate length of namec
 897+ 8632 45 4C 53 45 >                db      "ELSE"
 897+ 8636             >len_NFA         defl    $ - temp_NFA
 897+ 8636             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 897+ 8632             >
 897+ 8632 C4          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 897+ 8633 45 4C 53 45 >                db      "ELSE"               // name string in 7-bit ascii, but
 897+ 8637             >                org     $-1                 // alter last byte of Name just above to set
 897+ 8636 C5          >                db      {b $} | END_BIT     // msb as name end
 897+ 8637             >
 897+ 8637 25 86       >                dw      last_NFA            // Link to previous definition Name
 897+ 8639             >ELSE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 897+ 8639 53 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 897+ 863B             >                else
 897+ 863B ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 897+ 863B             >                endif           ; ok        // for other definitions it "points" the correct handler
 897+ 863B             >                // Use of "; ok" to suppress "warning[fwdref]"
 897+ 863B             >
 897+ 863B             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 898+ 863B 91 70                        dw      QCOMP
 899+ 863D DE 6C C0 70                  dw      TWO, QPAIRS
 900+ 8641 0A 71 CC 63                  dw      COMPILE, BRANCH
 901+ 8645 AD 6E CE 6C                  dw      HERE, ZERO, COMMA
 901+ 8649 C9 6E
 902+ 864B C8 6A DE 6C                  dw      SWAP, TWO, ENDIF
 902+ 864F 11 86
 903+ 8651 DE 6C                        dw      TWO
 904+ 8653 4F 69                        dw      EXIT
 905+ 8655
 906+ 8655              //  ______________________________________________________________________
 907+ 8655              //
 908+ 8655              // begin        ( -- a 1 ) \ compile-time
 909+ 8655              // BEGIN ... AGAIN
 910+ 8655              // BEGIN ... f UNTIL
 911+ 8655              // BEGIN ... f WHILE ... REPEAT
 912+ 8655                              Colon_Def BEGIN, "BEGIN", is_immediate
 912+ 8655             >                New_Def  BEGIN, "BEGIN", Enter_Ptr, is_immediate ; ok
 912+ 8655             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 912+ 8655             >
 912+ 8655             >                // dummy db directives used to calculate length of namec
 912+ 8655 42 45 47 49 >                db      "BEGIN"
 912+ 8659 4E          >
 912+ 865A             >len_NFA         defl    $ - temp_NFA
 912+ 865A             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 912+ 8655             >
 912+ 8655 C5          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 912+ 8656 42 45 47 49 >                db      "BEGIN"               // name string in 7-bit ascii, but
 912+ 865A 4E          >
 912+ 865B             >                org     $-1                 // alter last byte of Name just above to set
 912+ 865A CE          >                db      {b $} | END_BIT     // msb as name end
 912+ 865B             >
 912+ 865B 32 86       >                dw      last_NFA            // Link to previous definition Name
 912+ 865D             >BEGIN:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 912+ 865D 53 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 912+ 865F             >                else
 912+ 865F ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 912+ 865F             >                endif           ; ok        // for other definitions it "points" the correct handler
 912+ 865F             >                // Use of "; ok" to suppress "warning[fwdref]"
 912+ 865F             >
 912+ 865F             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 913+ 865F 91 70                        dw      QCOMP
 914+ 8661 AD 6E                        dw      HERE
 915+ 8663 D6 6C                        dw      ONE
 916+ 8665 4F 69                        dw      EXIT
 917+ 8667
 918+ 8667              //  ______________________________________________________________________
 919+ 8667              //
 920+ 8667              // again        ( a 1 -- ) \ compile-time
 921+ 8667                              Colon_Def AGAIN, "AGAIN", is_immediate
 921+ 8667             >                New_Def  AGAIN, "AGAIN", Enter_Ptr, is_immediate ; ok
 921+ 8667             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 921+ 8667             >
 921+ 8667             >                // dummy db directives used to calculate length of namec
 921+ 8667 41 47 41 49 >                db      "AGAIN"
 921+ 866B 4E          >
 921+ 866C             >len_NFA         defl    $ - temp_NFA
 921+ 866C             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 921+ 8667             >
 921+ 8667 C5          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 921+ 8668 41 47 41 49 >                db      "AGAIN"               // name string in 7-bit ascii, but
 921+ 866C 4E          >
 921+ 866D             >                org     $-1                 // alter last byte of Name just above to set
 921+ 866C CE          >                db      {b $} | END_BIT     // msb as name end
 921+ 866D             >
 921+ 866D 55 86       >                dw      last_NFA            // Link to previous definition Name
 921+ 866F             >AGAIN:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 921+ 866F 53 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 921+ 8671             >                else
 921+ 8671 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 921+ 8671             >                endif           ; ok        // for other definitions it "points" the correct handler
 921+ 8671             >                // Use of "; ok" to suppress "warning[fwdref]"
 921+ 8671             >
 921+ 8671             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 922+ 8671 91 70                        dw      QCOMP
 923+ 8673 D6 6C C0 70                  dw      ONE, QPAIRS
 924+ 8677 0A 71 CC 63                  dw      COMPILE, BRANCH
 925+ 867B EA 85                        dw      BACK
 926+ 867D 4F 69                        dw      EXIT
 927+ 867F
 928+ 867F              //  ______________________________________________________________________
 929+ 867F              //
 930+ 867F              // until        ( a 1 -- ) \ compile-time
 931+ 867F                              Colon_Def UNTIL, "UNTIL", is_immediate
 931+ 867F             >                New_Def  UNTIL, "UNTIL", Enter_Ptr, is_immediate ; ok
 931+ 867F             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 931+ 867F             >
 931+ 867F             >                // dummy db directives used to calculate length of namec
 931+ 867F 55 4E 54 49 >                db      "UNTIL"
 931+ 8683 4C          >
 931+ 8684             >len_NFA         defl    $ - temp_NFA
 931+ 8684             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 931+ 867F             >
 931+ 867F C5          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 931+ 8680 55 4E 54 49 >                db      "UNTIL"               // name string in 7-bit ascii, but
 931+ 8684 4C          >
 931+ 8685             >                org     $-1                 // alter last byte of Name just above to set
 931+ 8684 CC          >                db      {b $} | END_BIT     // msb as name end
 931+ 8685             >
 931+ 8685 67 86       >                dw      last_NFA            // Link to previous definition Name
 931+ 8687             >UNTIL:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 931+ 8687 53 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 931+ 8689             >                else
 931+ 8689 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 931+ 8689             >                endif           ; ok        // for other definitions it "points" the correct handler
 931+ 8689             >                // Use of "; ok" to suppress "warning[fwdref]"
 931+ 8689             >
 931+ 8689             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 932+ 8689 91 70                        dw      QCOMP
 933+ 868B D6 6C C0 70                  dw      ONE, QPAIRS
 934+ 868F 0A 71 E3 63                  dw      COMPILE, ZBRANCH
 935+ 8693 EA 85                        dw      BACK
 936+ 8695 4F 69                        dw      EXIT
 937+ 8697
 938+ 8697              //  ______________________________________________________________________
 939+ 8697              //
 940+ 8697              // end          ( a 1 -- ) \ compile-time
 941+ 8697                              Colon_Def END, "END", is_immediate
 941+ 8697             >                New_Def  END, "END", Enter_Ptr, is_immediate ; ok
 941+ 8697             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 941+ 8697             >
 941+ 8697             >                // dummy db directives used to calculate length of namec
 941+ 8697 45 4E 44    >                db      "END"
 941+ 869A             >len_NFA         defl    $ - temp_NFA
 941+ 869A             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 941+ 8697             >
 941+ 8697 C3          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 941+ 8698 45 4E 44    >                db      "END"               // name string in 7-bit ascii, but
 941+ 869B             >                org     $-1                 // alter last byte of Name just above to set
 941+ 869A C4          >                db      {b $} | END_BIT     // msb as name end
 941+ 869B             >
 941+ 869B 7F 86       >                dw      last_NFA            // Link to previous definition Name
 941+ 869D             >END:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 941+ 869D 53 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 941+ 869F             >                else
 941+ 869F ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 941+ 869F             >                endif           ; ok        // for other definitions it "points" the correct handler
 941+ 869F             >                // Use of "; ok" to suppress "warning[fwdref]"
 941+ 869F             >
 941+ 869F             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 942+ 869F 87 86                        dw      UNTIL
 943+ 86A1 4F 69                        dw      EXIT
 944+ 86A3
 945+ 86A3              //  ______________________________________________________________________
 946+ 86A3              //
 947+ 86A3              // while        ( a1 1 -- a1 1 a2 4 ) \ compile-time
 948+ 86A3                              Colon_Def WHILE, "WHILE", is_immediate
 948+ 86A3             >                New_Def  WHILE, "WHILE", Enter_Ptr, is_immediate ; ok
 948+ 86A3             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 948+ 86A3             >
 948+ 86A3             >                // dummy db directives used to calculate length of namec
 948+ 86A3 57 48 49 4C >                db      "WHILE"
 948+ 86A7 45          >
 948+ 86A8             >len_NFA         defl    $ - temp_NFA
 948+ 86A8             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 948+ 86A3             >
 948+ 86A3 C5          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 948+ 86A4 57 48 49 4C >                db      "WHILE"               // name string in 7-bit ascii, but
 948+ 86A8 45          >
 948+ 86A9             >                org     $-1                 // alter last byte of Name just above to set
 948+ 86A8 C5          >                db      {b $} | END_BIT     // msb as name end
 948+ 86A9             >
 948+ 86A9 97 86       >                dw      last_NFA            // Link to previous definition Name
 948+ 86AB             >WHILE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 948+ 86AB 53 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 948+ 86AD             >                else
 948+ 86AD ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 948+ 86AD             >                endif           ; ok        // for other definitions it "points" the correct handler
 948+ 86AD             >                // Use of "; ok" to suppress "warning[fwdref]"
 948+ 86AD             >
 948+ 86AD             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 949+ 86AD F9 85                        dw      IF
 950+ 86AF 2E 6A                        dw      TWO_PLUS // ( that is 4 )
 951+ 86B1 4F 69                        dw      EXIT
 952+ 86B3
 953+ 86B3              //  ______________________________________________________________________
 954+ 86B3              //
 955+ 86B3              // repeat       ( a1 1 a2 4 -- ) \ compile-time
 956+ 86B3                              Colon_Def REPEAT, "REPEAT", is_immediate
 956+ 86B3             >                New_Def  REPEAT, "REPEAT", Enter_Ptr, is_immediate ; ok
 956+ 86B3             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 956+ 86B3             >
 956+ 86B3             >                // dummy db directives used to calculate length of namec
 956+ 86B3 52 45 50 45 >                db      "REPEAT"
 956+ 86B7 41 54       >
 956+ 86B9             >len_NFA         defl    $ - temp_NFA
 956+ 86B9             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 956+ 86B3             >
 956+ 86B3 C6          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 956+ 86B4 52 45 50 45 >                db      "REPEAT"               // name string in 7-bit ascii, but
 956+ 86B8 41 54       >
 956+ 86BA             >                org     $-1                 // alter last byte of Name just above to set
 956+ 86B9 D4          >                db      {b $} | END_BIT     // msb as name end
 956+ 86BA             >
 956+ 86BA A3 86       >                dw      last_NFA            // Link to previous definition Name
 956+ 86BC             >REPEAT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 956+ 86BC 53 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 956+ 86BE             >                else
 956+ 86BE ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 956+ 86BE             >                endif           ; ok        // for other definitions it "points" the correct handler
 956+ 86BE             >                // Use of "; ok" to suppress "warning[fwdref]"
 956+ 86BE             >
 956+ 86BE             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 957+ 86BE 24 6B                        dw      TWO_SWAP
 958+ 86C0 6F 86                        dw      AGAIN
 959+ 86C2 55 6A                        dw      TWO_MINUS
 960+ 86C4 11 86                        dw      ENDIF
 961+ 86C6 4F 69                        dw      EXIT
 962+ 86C8
 963+ 86C8              //  ______________________________________________________________________
 964+ 86C8              //
 965+ 86C8              // ?do-
 966+ 86C8              // special version of "BACK" used by ?DO and LOOP
 967+ 86C8                              Colon_Def C_DO_BACK, "?DO-", is_normal
 967+ 86C8             >                New_Def  C_DO_BACK, "?DO-", Enter_Ptr, is_normal ; ok
 967+ 86C8             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 967+ 86C8             >
 967+ 86C8             >                // dummy db directives used to calculate length of namec
 967+ 86C8 3F 44 4F 2D >                db      "?DO-"
 967+ 86CC             >len_NFA         defl    $ - temp_NFA
 967+ 86CC             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 967+ 86C8             >
 967+ 86C8 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 967+ 86C9 3F 44 4F 2D >                db      "?DO-"               // name string in 7-bit ascii, but
 967+ 86CD             >                org     $-1                 // alter last byte of Name just above to set
 967+ 86CC AD          >                db      {b $} | END_BIT     // msb as name end
 967+ 86CD             >
 967+ 86CD B3 86       >                dw      last_NFA            // Link to previous definition Name
 967+ 86CF             >C_DO_BACK:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 967+ 86CF 53 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 967+ 86D1             >                else
 967+ 86D1 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 967+ 86D1             >                endif           ; ok        // for other definitions it "points" the correct handler
 967+ 86D1             >                // Use of "; ok" to suppress "warning[fwdref]"
 967+ 86D1             >
 967+ 86D1             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 968+ 86D1 EA 85                        dw      BACK
 969+ 86D3              CDoBack_Begin:
 970+ 86D3 17 69 3E 6E                  dw      SPFETCH, CSP, FETCH, SUBTRACT
 970+ 86D7 68 6B 00 6F
 971+ 86DB E3 63                        dw      ZBRANCH
 972+ 86DD 0A 00                        dw      CDoBack_While - $
 973+ 86DF 2E 6A 11 86                  dw          TWO_PLUS, ENDIF
 974+ 86E3 CC 63                        dw      BRANCH
 975+ 86E5 EE FF                        dw      CDoBack_Begin - $
 976+ 86E7              CDoBack_While:
 977+ 86E7 D3 70 3E 6E                  dw      QCSP, CSP, STORE
 977+ 86EB 75 6B
 978+ 86ED 4F 69                        dw      EXIT
 979+ 86EF
 980+ 86EF              //  ______________________________________________________________________
 981+ 86EF              //
 982+ 86EF              // do
 983+ 86EF              // DO  ... LOOP
 984+ 86EF              // DO  ... n +LOOP
 985+ 86EF              // ?DO ... LOOP
 986+ 86EF              // ?DO ... n +LOOP
 987+ 86EF                              Colon_Def DO, "DO", is_immediate
 987+ 86EF             >                New_Def  DO, "DO", Enter_Ptr, is_immediate ; ok
 987+ 86EF             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 987+ 86EF             >
 987+ 86EF             >                // dummy db directives used to calculate length of namec
 987+ 86EF 44 4F       >                db      "DO"
 987+ 86F1             >len_NFA         defl    $ - temp_NFA
 987+ 86F1             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 987+ 86EF             >
 987+ 86EF C2          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 987+ 86F0 44 4F       >                db      "DO"               // name string in 7-bit ascii, but
 987+ 86F2             >                org     $-1                 // alter last byte of Name just above to set
 987+ 86F1 CF          >                db      {b $} | END_BIT     // msb as name end
 987+ 86F2             >
 987+ 86F2 C8 86       >                dw      last_NFA            // Link to previous definition Name
 987+ 86F4             >DO:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 987+ 86F4 53 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 987+ 86F6             >                else
 987+ 86F6 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 987+ 86F6             >                endif           ; ok        // for other definitions it "points" the correct handler
 987+ 86F6             >                // Use of "; ok" to suppress "warning[fwdref]"
 987+ 86F6             >
 987+ 86F6             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 988+ 86F6 0A 71 6B 64                  dw      COMPILE, C_DO
 989+ 86FA 3E 6E 68 6B                  dw      CSP, FETCH, STORE_CSP
 989+ 86FE 64 70
 990+ 8700 AD 6E E6 6C                  dw      HERE, THREE
 991+ 8704 4F 69                        dw      EXIT
 992+ 8706
 993+ 8706              //  ______________________________________________________________________
 994+ 8706              //
 995+ 8706              // loop
 996+ 8706                              Colon_Def LOOP, "LOOP", is_immediate
 996+ 8706             >                New_Def  LOOP, "LOOP", Enter_Ptr, is_immediate ; ok
 996+ 8706             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 996+ 8706             >
 996+ 8706             >                // dummy db directives used to calculate length of namec
 996+ 8706 4C 4F 4F 50 >                db      "LOOP"
 996+ 870A             >len_NFA         defl    $ - temp_NFA
 996+ 870A             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 996+ 8706             >
 996+ 8706 C4          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 996+ 8707 4C 4F 4F 50 >                db      "LOOP"               // name string in 7-bit ascii, but
 996+ 870B             >                org     $-1                 // alter last byte of Name just above to set
 996+ 870A D0          >                db      {b $} | END_BIT     // msb as name end
 996+ 870B             >
 996+ 870B EF 86       >                dw      last_NFA            // Link to previous definition Name
 996+ 870D             >LOOP:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 996+ 870D 53 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 996+ 870F             >                else
 996+ 870F ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 996+ 870F             >                endif           ; ok        // for other definitions it "points" the correct handler
 996+ 870F             >                // Use of "; ok" to suppress "warning[fwdref]"
 996+ 870F             >
 996+ 870F             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 997+ 870F E6 6C C0 70                  dw      THREE, QPAIRS
 998+ 8713 0A 71 F8 63                  dw      COMPILE, C_LOOP
 999+ 8717 CF 86                        dw      C_DO_BACK
1000+ 8719 4F 69                        dw      EXIT
1001+ 871B
1002+ 871B              //  ______________________________________________________________________
1003+ 871B              //
1004+ 871B              // +loop
1005+ 871B                              Colon_Def PLOOP, "+LOOP", is_immediate
1005+ 871B             >                New_Def  PLOOP, "+LOOP", Enter_Ptr, is_immediate ; ok
1005+ 871B             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1005+ 871B             >
1005+ 871B             >                // dummy db directives used to calculate length of namec
1005+ 871B 2B 4C 4F 4F >                db      "+LOOP"
1005+ 871F 50          >
1005+ 8720             >len_NFA         defl    $ - temp_NFA
1005+ 8720             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1005+ 871B             >
1005+ 871B C5          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
1005+ 871C 2B 4C 4F 4F >                db      "+LOOP"               // name string in 7-bit ascii, but
1005+ 8720 50          >
1005+ 8721             >                org     $-1                 // alter last byte of Name just above to set
1005+ 8720 D0          >                db      {b $} | END_BIT     // msb as name end
1005+ 8721             >
1005+ 8721 06 87       >                dw      last_NFA            // Link to previous definition Name
1005+ 8723             >PLOOP:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1005+ 8723 53 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
1005+ 8725             >                else
1005+ 8725 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
1005+ 8725             >                endif           ; ok        // for other definitions it "points" the correct handler
1005+ 8725             >                // Use of "; ok" to suppress "warning[fwdref]"
1005+ 8725             >
1005+ 8725             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1006+ 8725 E6 6C C0 70                  dw      THREE, QPAIRS
1007+ 8729 0A 71 2F 64                  dw      COMPILE, C_PLOOP
1008+ 872D CF 86                        dw      C_DO_BACK
1009+ 872F 4F 69                        dw      EXIT
1010+ 8731
1011+ 8731              //  ______________________________________________________________________
1012+ 8731              //
1013+ 8731              // ?do
1014+ 8731                              Colon_Def QDO, "?DO", is_immediate
1014+ 8731             >                New_Def  QDO, "?DO", Enter_Ptr, is_immediate ; ok
1014+ 8731             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1014+ 8731             >
1014+ 8731             >                // dummy db directives used to calculate length of namec
1014+ 8731 3F 44 4F    >                db      "?DO"
1014+ 8734             >len_NFA         defl    $ - temp_NFA
1014+ 8734             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1014+ 8731             >
1014+ 8731 C3          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
1014+ 8732 3F 44 4F    >                db      "?DO"               // name string in 7-bit ascii, but
1014+ 8735             >                org     $-1                 // alter last byte of Name just above to set
1014+ 8734 CF          >                db      {b $} | END_BIT     // msb as name end
1014+ 8735             >
1014+ 8735 1B 87       >                dw      last_NFA            // Link to previous definition Name
1014+ 8737             >QDO:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1014+ 8737 53 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
1014+ 8739             >                else
1014+ 8739 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
1014+ 8739             >                endif           ; ok        // for other definitions it "points" the correct handler
1014+ 8739             >                // Use of "; ok" to suppress "warning[fwdref]"
1014+ 8739             >
1014+ 8739             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1015+ 8739 0A 71 3D 64                  dw      COMPILE, C_Q_DO
1016+ 873D 3E 6E 68 6B                  dw      CSP, FETCH, STORE_CSP
1016+ 8741 64 70
1017+ 8743 AD 6E CE 6C                  dw      HERE, ZERO, COMMA, ZERO
1017+ 8747 C9 6E CE 6C
1018+ 874B AD 6E E6 6C                  dw      HERE, THREE
1019+ 874F 4F 69                        dw      EXIT
1020+ 8751
1021+ 8751              Latest_Definition:
1022+ 8751              //  ______________________________________________________________________
1023+ 8751              //
1024+ 8751              // \
1025+ 8751                              Colon_Def BACKSLASH, "\\", is_immediate  // this is a single back-slash
1025+ 8751             >                New_Def  BACKSLASH, "\\", Enter_Ptr, is_immediate ; ok
1025+ 8751             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1025+ 8751             >
1025+ 8751             >                // dummy db directives used to calculate length of namec
1025+ 8751 5C          >                db      "\\"
1025+ 8752             >len_NFA         defl    $ - temp_NFA
1025+ 8752             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1025+ 8751             >
1025+ 8751 C1          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
1025+ 8752 5C          >                db      "\\"               // name string in 7-bit ascii, but
1025+ 8753             >                org     $-1                 // alter last byte of Name just above to set
1025+ 8752 DC          >                db      {b $} | END_BIT     // msb as name end
1025+ 8753             >
1025+ 8753 31 87       >                dw      last_NFA            // Link to previous definition Name
1025+ 8755             >BACKSLASH:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1025+ 8755 53 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
1025+ 8757             >                else
1025+ 8757 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
1025+ 8757             >                endif           ; ok        // for other definitions it "points" the correct handler
1025+ 8757             >                // Use of "; ok" to suppress "warning[fwdref]"
1025+ 8757             >
1025+ 8757             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1026+ 8757 CD 6D 68 6B                  dw      BLK, FETCH
1027+ 875B E3 63                        dw      ZBRANCH
1028+ 875D 30 00                        dw      Backslash_Else_1 - $
1029+ 875F CD 6D 68 6B                  dw          BLK, FETCH, ONE, GREATER  // BLOCK 1 is used as temp-line in INCLUDE file
1029+ 8763 D6 6C 4B 6F
1030+ 8767 E3 63                        dw          ZBRANCH
1031+ 8769 18 00                        dw          Backslash_Else_2 - $
1032+ 876B D6 6D 68 6B                  dw              TO_IN, FETCH, CL, MOD, CL
1032+ 876F 02 6D 62 7A
1032+ 8773 02 6D
1033+ 8775 C8 6A 00 6F                  dw              SWAP, SUBTRACT, TO_IN, PLUSSTORE
1033+ 8779 D6 6D 45 6B
1034+ 877D CC 63                        dw          BRANCH
1035+ 877F 0A 00                        dw          Backslash_Endif_2 - $
1036+ 8781              Backslash_Else_2:
1037+ 8781 0E 6D 48 6A                  dw              BBUF, CELL_MINUS, TO_IN, STORE
1037+ 8785 D6 6D 75 6B
1038+ 8789              Backslash_Endif_2:
1039+ 8789 CC 63                        dw      BRANCH
1040+ 878B 0A 00                        dw      Backslash_Endif_1 - $
1041+ 878D              Backslash_Else_1:
1042+ 878D A9 63 50 00                  dw          LIT, 80, TO_IN, STORE
1042+ 8791 D6 6D 75 6B
1043+ 8795              Backslash_Endif_1:
1044+ 8795 4F 69                        dw      EXIT
1045+ 8797
1046+ 8797              Fence_Word:
1047+ 8797              //  ______________________________________________________________________
1048+ 8797              //
1049+ 8797
1050+ 8797 00           Here_Dictionary db      0
1051+ 8798
# file closed: C:\Zx\CSpect\Projects\vForth15_INDIRECT/source/L3.asm
 114  8798
 115  8798              // now we save the compiled file so we can either run it or debug it
 116  8798                              SAVENEX OPEN "output/main.nex", ORIGIN
 117  8798                              SAVENEX CORE 3, 0, 0                                // Next core 3.0.0 required as minimum
 118  8798                              SAVENEX CFG  0
 119  8798                              SAVENEX BANK 2, 0
 120  8798                              SAVENEX AUTO
 121  8798                              SAVENEX CLOSE
 122  8798
 123  8798              //              PAGE 7 ;set 7 page to current slot
 124  8798              //              SAVEBIN "ram7.bin",$C000,$4000 ;- save 4000h begin from C000h of RAM to file
 125  8798              //              SAVEBIN "output/ram2.bin", $8000, 9800 ;- save 3000h begin from 8000h of RAM to file
 126  8798
 127  8798                              SAVETAP "output/F15E.tap", CODE, "forth15e", ORIGIN, 10000
 128  8798
 129  8798                              SAVEBIN "output/forth15E.bin", ORIGIN, 10000
 130  8798
 131  8798                              END
# file closed: C:\Zx\CSpect\Projects\vForth15_INDIRECT/source/main.asm
