# file opened: C:\Zx\CSpect\Projects\vForth15_INDIRECT/source/main.asm
   1  0000              //  ______________________________________________________________________
   2  0000              //
   3  0000              //  main.asm
   4  0000              //  ______________________________________________________________________
   5  0000              //
   6  0000              //  v-Forth 1.5 NextZXOS version
   7  0000              //  build 20220219
   8  0000              //
   9  0000              //  Inirect-Thread version.
  10  0000              //
  11  0000              //  NextZXOS version
  12  0000              //  ______________________________________________________________________
  13  0000              //
  14  0000              //  This work is available as-is with no whatsoever warranty.
  15  0000              //  Copying, modifying and distributing this software is allowed
  16  0000              //  provided that the copyright notice is kept.
  17  0000              //  ______________________________________________________________________
  18  0000              //
  19  0000              //  by Matteo Vitturi, 1990-2022
  20  0000              //
  21  0000              //  https://sites.google.com/view/vforth/vforth15-next
  22  0000              //  https://www.oocities.org/matteo_vitturi/english/index.htm
  23  0000              //
  24  0000              //  This is the complete compiler for v.Forth for SINCLAIR ZX Spectrum Next.
  25  0000              //  Each line of this source list mustn't exceed 80 bytes.
  26  0000              //  Z80N (ZX Spectrum Next) extension is available.
  27  0000              //
  28  0000              //  This list has been tested using the following configuration:
  29  0000              //      - CSpect emulator V.2.12.30
  30  0000              //  ______________________________________________________________________
  31  0000              //
  32  0000              //  Z80 Registers usage map
  33  0000              //
  34  0000              //  AF
  35  0000              //  BC - Instruction Pointer: should be preserved during ROM/OS calls
  36  0000              //  DE - Working
  37  0000              //  HL - Working
  38  0000              //
  39  0000              //  AF'- Sometime used for backup purpose
  40  0000              //  BC'- Not used
  41  0000              //  DE'- Not used
  42  0000              //  HL'- Not used: (saved at startup)
  43  0000              //
  44  0000              //  SP - Calculator Stack Pointer
  45  0000              //  IX - Inner interpreter "next" address pointer. This way jp (ix) is 2T-state faster than JP next
  46  0000              //  IY - (ZX System: must be preserved to interact with standard ROM)
  47  0000              //
  48  0000              //  ______________________________________________________________________
  49  0000              //
  50  0000              //  _________________
  51  0000              //
  52  0000              //  FORTH DEFINITIONS
  53  0000              //  _________________
  54  0000
  55  0000                              OPT     --zxnext
  56  0000              //  ______________________________________________________________________
  57  0000              //
  58  0000              // this controls some debugging code in L0.asm
  59  0000              //  0 for final binary release.
  60  0000              //  1 for debugging with Visual Studio Code and DeZog
  61  0000              // -1 for for binary comparison with Forth generated code.
  62  0000              DEBUGGING       equ     -1
  63  0000              //
  64  0000              //  ______________________________________________________________________
  65  0000
  66  0000                              if ( -1 == DEBUGGING )
  67  0000              ORIGIN          equ     $62E6                   // for binary comparison
  68  0000                              endif
  69  0000              //  ______________________________________________________________________
  70  0000
  71  0000                              if (  0 == DEBUGGING )
  72  0000 ~            ORIGIN          equ     $6366                   // binary
  73  0000                              endif
  74  0000              //  ______________________________________________________________________
  75  0000
  76  0000                              if (  1 == DEBUGGING )
  77  0000 ~            ORIGIN          equ     $8080                   // for DeZog
  78  0000                              endif
  79  0000              //  ______________________________________________________________________
  80  0000
  81  0000                              DEVICE  ZXSPECTRUMNEXT
  82  0000
  83  0000                              ORG     ORIGIN
  84  62E6
  85  62E6                              if ( -1 == DEBUGGING )
  86  62E6 00 00 00...                  ds 128                            // for binary comparison
  87  62EA                              endif
  88  6366
  89  6366              //  ______________________________________________________________________
  90  6366              //
  91  6366              //  Naming convention for Label vs Forth correspondance
  92  6366              //  Forth words are named as they are named for real with some exception to avoid assembler syntax errors.
  93  6366              //    - Leading "0" is converted into "Z_"
  94  6366              //    - Leading "(" is converted into "C_", closing bracket is omitted
  95  6366              //    - Leading numbers are converted in letters: ONE_  TWO_ etc.
  96  6366              //    - Question mark "?" is converted into "Q" or omitted if needed / useful.
  97  6366              //    - Plus sign "+" is converted in _PLUS or ADD_ depending.
  98  6366              //    - Minus sign "-" in L (for Line), MINUS or SUBTRACT depending
  99  6366              //    - Greater-Than sign ">" in _GREATER or TO_ depending
 100  6366              //    - Equal sign "=" is converted in EQUAL
 101  6366              //    - Less-Than sign "<" in _LESS or FROM_ (or TO_ again) depending
 102  6366              //    - Asterisk sign "*" is converted in _MUL or STAR
 103  6366              //    - Slash "/" is converted in _DIV or omitted if it is clear what it means
 104  6366              //    - Exclamation mark "!" is converted in STORE
 105  6366              //    - At-Sign "@" is converted in FETCH
 106  6366              //    - Words that collide with Assembler are normally suffixed with "_OP"
 107  6366
 108  6366                              include "system.asm"
# file opened: C:\Zx\CSpect\Projects\vForth15_INDIRECT/source/system.asm
   1+ 6366              //  ______________________________________________________________________
   2+ 6366              //
   3+ 6366              //  system.asm
   4+ 6366              //  ______________________________________________________________________
   5+ 6366
   6+ 6366              // Registers:
   7+ 6366              //
   8+ 6366              //      BC: Instruction Pointer
   9+ 6366              //      DE:
  10+ 6366              //      HL: W register
  11+ 6366              //      SP: Calc stack Pointer
  12+ 6366              //      IX: Inner-Interpreter Address
  13+ 6366
  14+ 6366              //  ______________________________________________________________________
  15+ 6366              //
  16+ 6366              // ZX-Spectrum standard system variables
  17+ 6366              SCR_CT          equ     $5C8C                   // SCR-CT system variable
  18+ 6366              LASTK           equ     $5C08                   // LASTK system variable
  19+ 6366              BORDCR          equ     $5C48                   // BORDCR system variable
  20+ 6366              FLAGS2          equ     $5C6A                   // for caps-lock
  21+ 6366
  22+ 6366              //  ______________________________________________________________________
  23+ 6366              //
  24+ 6366              // Flag constants
  25+ 6366              TRUE_FLAG       equ     $FFFF
  26+ 6366              FALSE_FLAG      equ     $0000
  27+ 6366
  28+ 6366              //  ______________________________________________________________________
  29+ 6366              //
  30+ 6366              // Ascii char constants
  31+ 6366              NUL_CHAR        equ     $00
  32+ 6366              COMMA_CHAR      equ     $06
  33+ 6366              BACKSPACE_CHAR  equ     $08
  34+ 6366              CR_CHAR         equ     $0D
  35+ 6366              BLANK_CHAR      equ     $20
  36+ 6366              QUOTE_CHAR      equ     "'"
  37+ 6366              DQUOTE_CHAR     equ     '"'
  38+ 6366              UNDERSCORE_CHAR equ     $5F
  39+ 6366              SOLIDBLOCK_CHAR equ     $8F
  40+ 6366              HALFBLOCK_CHAR  equ     $8C
  41+ 6366              LC_A_CHAR       equ     $61                 // lower-case "a"
  42+ 6366              LC_Z_CHAR       equ     $7A                 // lower-case "z"
  43+ 6366
  44+ 6366
  45+ 6366              //  ______________________________________________________________________
  46+ 6366              //
  47+ 6366
  48+ 6366                              // emulate something like:  ld hl,rp
  49+ 6366              ldhlrp          macro
  50+ 6366 ~                            ld      hl,(RP_Pointer)
  51+ 6366                              endm
  52+ 6366
  53+ 6366                              // emulate something like:  ld rp,hl
  54+ 6366              ldrphl          macro
  55+ 6366 ~                            ld      (RP_Pointer),hl
  56+ 6366                              endm
  57+ 6366
  58+ 6366              //  ______________________________________________________________________
  59+ 6366              //
  60+ 6366              //  Inner interpreter next-address pointer. This is 2T-state faster than "jp address"
  61+ 6366              next            macro
  62+ 6366 ~                            jp      (ix)
  63+ 6366                              endm
  64+ 6366
  65+ 6366              psh1            macro
  66+ 6366 ~                            push    hl
  67+ 6366 ~                            jp      (ix)
  68+ 6366                              endm
  69+ 6366
  70+ 6366              psh2            macro
  71+ 6366 ~                            push    de
  72+ 6366 ~                            push    hl
  73+ 6366 ~                            jp      (ix)
  74+ 6366                              endm
  75+ 6366
  76+ 6366              //  ______________________________________________________________________
  77+ 6366              //
  78+ 6366              // Bit constants in length-byte
  79+ 6366
  80+ 6366              SMUDGE_BIT      equ     %00100000               // $20
  81+ 6366              IMMEDIATE_BIT   equ     %01000000               // $40
  82+ 6366              END_BIT         equ     %10000000               // $80
  83+ 6366
  84+ 6366
  85+ 6366              //  ______________________________________________________________________
  86+ 6366              //
  87+ 6366              //  To create Forth words using this (nice) Assembler, we have to use the two following
  88+ 6366              //  pointers
  89+ 6366              temp_NFA        defl    0
  90+ 6366              last_NFA        defl    0
  91+ 6366              len_NFA         defl    0
  92+ 6366
  93+ 6366              is_code         equ     0                   // so the direct machine-code starts at CFA
  94+ 6366              is_normal       equ     0                   // so the direct machine-code starts at CFA
  95+ 6366              is_immediate    equ     IMMEDIATE_BIT       // $40 - the definition is IMMEDIATE.
  96+ 6366
  97+ 6366              //  ______________________________________________________________________
  98+ 6366              //
  99+ 6366              //  Create a new "low-level" definition
 100+ 6366              //  This macro is used in the form  Create FORTH_NAME,n,"forth_name"
 101+ 6366              //  to create a new Forth Dictionary entry the same way Forth itself would do.
 102+ 6366              //  A word begins with a Length-Byte in range 1-31. Top 3 msb are used as flags
 103+ 6366              //  see SMUDGE_BIT and IMMEDIATE_BIT constant above.
 104+ 6366              //  It is followed by the Name of the word, i.e. a string expressed in 7-bit Ascii.
 105+ 6366              //  The last character of the Name must have the msb set to signal the end of it (END_BIT)
 106+ 6366              //  This macro acts much like the standard Forth definition CREATE
 107+ 6366
 108+ 6366              New_Def         macro   label, namec, runcode, bits
 109+ 6366 ~            temp_NFA        defl    $                   // save this NFA address to temp_NFA
 110+ 6366 ~
 111+ 6366 ~                            // dummy db directives used to calculate length of namec
 112+ 6366 ~                            db      namec
 113+ 6366 ~            len_NFA         defl    $ - temp_NFA
 114+ 6366 ~                            org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 115+ 6366 ~
 116+ 6366 ~                            db      len_NFA | END_BIT | bits  // The start of NFA must have msb set to signal the beginning of the sounted string
 117+ 6366 ~                            db      namec               // name string in 7-bit ascii, but
 118+ 6366 ~                            org     $-1                 // alter last byte of Name just above to set
 119+ 6366 ~                            db      {b $} | END_BIT     // msb as name end
 120+ 6366 ~
 121+ 6366 ~                            dw      last_NFA            // Link to previous definition Name
 122+ 6366 ~            label:          if runcode != 0 ; ok        // This is the start address of the direct jp(hl)
 123+ 6366 ~                            dw      runcode ; ok        // for primitive definitions  actual code
 124+ 6366 ~                            else
 125+ 6366 ~                            dw      $ + 2   ; ok        // is pointed by CFA
 126+ 6366 ~                            endif           ; ok        // for other definitions it "points" the correct handler
 127+ 6366 ~                            // Use of "; ok" to suppress "warning[fwdref]"
 128+ 6366 ~
 129+ 6366 ~            last_NFA        defl    temp_NFA            // keep track of NFA saved above
 130+ 6366                              endm
 131+ 6366
 132+ 6366              //  ______________________________________________________________________
 133+ 6366              //
 134+ 6366              // Create a "constant"
 135+ 6366              // The constant value is compiled in first PFA cell
 136+ 6366              Constant_Def    macro   label, namec, constant_value
 137+ 6366 ~                            New_Def  label, namec, Constant_Ptr, is_normal
 138+ 6366 ~                            dw      constant_value
 139+ 6366                              endm
 140+ 6366
 141+ 6366              //  ______________________________________________________________________
 142+ 6366              //
 143+ 6366              // Create a "variable"
 144+ 6366              // The when invoked, a variable returns a pointer, the address of first PFA cell
 145+ 6366              // this allow creation of "variables" which content is  of any length
 146+ 6366              Variable_Def    macro   label, namec, initial_value
 147+ 6366 ~                            New_Def  label, namec, Variable_Ptr, is_normal
 148+ 6366 ~                            dw      initial_value
 149+ 6366                              endm
 150+ 6366
 151+ 6366              //  ______________________________________________________________________
 152+ 6366              //
 153+ 6366              // Create a "user"
 154+ 6366              // It uses a single byte as offset to calculate the address of the variable
 155+ 6366              User_Def        macro   label, namec, offset_value
 156+ 6366 ~                            New_Def  label, namec, User_Ptr, is_normal
 157+ 6366 ~                            db      offset_value
 158+ 6366                              endm
 159+ 6366
 160+ 6366              //  ______________________________________________________________________
 161+ 6366              //
 162+ 6366              // Create a "colon-definition"
 163+ 6366              // The CFA contains a small routine i.e. "call Enter_Ptr".
 164+ 6366              // The PFA, three bytes later, contains the actual Forth definition
 165+ 6366              Colon_Def       macro   label, namec, bits
 166+ 6366 ~                            New_Def  label, namec, Enter_Ptr, bits ; ok
 167+ 6366                              endm
 168+ 6366
 169+ 6366              //  ______________________________________________________________________
 170+ 6366              //
 171+ 6366
 172+ 6366              S0_system:      equ     $D0E8               // Address of top of Calc Stack
 173+ 6366              TIB_system      equ     $D0E8               // TIB grows upwards, Return-Stack downward.
 174+ 6366              R0_system:      equ     $D188               // Address of top of Return Stack. This is S0 + $00A0
 175+ 6366              USER_system:    equ     $D188               // User variables zone.
 176+ 6366              FIRST_system:   equ     $D1E4               // Address of first BUFFER
 177+ 6366              LIMIT_system:   equ     $E000               // Address of first byte beyond last BUFFER
 178+ 6366
# file closed: C:\Zx\CSpect\Projects\vForth15_INDIRECT/source/system.asm
 109  6366                              include "L0.asm"
# file opened: C:\Zx\CSpect\Projects\vForth15_INDIRECT/source/L0.asm
   1+ 6366              //  ______________________________________________________________________
   2+ 6366              //
   3+ 6366              //  L0.asm
   4+ 6366              //
   5+ 6366              //  Origin-Area and Level-0 definitions
   6+ 6366              //  ______________________________________________________________________
   7+ 6366
   8+ 6366
   9+ 6366              Cold_origin:
  10+ 6366 A7                           and     a
  11+ 6367 C3 67 79                     jp      ColdRoutine
  12+ 636A              Warm_origin:
  13+ 636A 37                           scf
  14+ 636B C3 67 79                     jp      WarmRoutine
  15+ 636E
  16+ 636E              // +008
  17+ 636E E6 D0        SP_Basic:       dw      $D0E6               // These are bits with some "standard" meaning... 0101
  18+ 6370
  19+ 6370              // +00A
  20+ 6370 00 0E                        dw      $0E00
  21+ 6372
  22+ 6372              // +00C
  23+ 6372 46 87        Latest_origin:  dw      Latest_Definition   // Latest word (used in Cold_Start)
  24+ 6374
  25+ 6374              // +00E
  26+ 6374 0C 00        DEL_Char_Ptr:   dw      $000C               // This is the characther used as "Back-Space"
  27+ 6376
  28+ 6376              // +010
  29+ 6376 50 B2        CPU_Id          dw      $B250               // Z80 expressed in base 36
  30+ 6378
  31+ 6378              // +012
  32+ 6378 E8 D0        S0_origin:      dw      S0_system
  33+ 637A 88 D1        R0_origin:      dw      R0_system
  34+ 637C E8 D0        TIB_origin:     dw      TIB_system
  35+ 637E 1F 00        WIDTH_origin:   dw      31
  36+ 6380 01 00        WARNING_origin: dw      1
  37+ 6382 8C 87        FENCE_origin:   dw      Fence_Word
  38+ 6384 8C 87        DP_origin       dw      Fence_Word
  39+ 6386 75 78        VOCLINK_origin: dw      Voclink_Ptr
  40+ 6388 E4 D1                        dw      FIRST_system
  41+ 638A 00 E0                        dw      LIMIT_system
  42+ 638C
  43+ 638C              // +026
  44+ 638C 8F           Block_Face:     db      SOLIDBLOCK_CHAR     // Caps-Lock   Cursor face
  45+ 638D 8C           Half_Face:      db      HALFBLOCK_CHAR      // Caps-unlock Cursor face
  46+ 638E 5F           Underscore_Face:db      UNDERSCORE_CHAR     // Underscore  Cursor face
  47+ 638F 00                           db      0
  48+ 6390
  49+ 6390              // +02A
  50+ 6390 00 00        IX_Echo:        dw      $0000               // Echo IX after NextOS call
  51+ 6392
  52+ 6392              // +02C
  53+ 6392 00 00        SP_Saved:       dw      $0000               // Saved SP dufing NextOS call
  54+ 6394
  55+ 6394              // +02E
  56+ 6394 88 D1        USER_Pointer:   dw      USER_system
  57+ 6396
  58+ 6396              // +030
  59+ 6396 88 D1        RP_Pointer:     dw      $d188 // R0_system
  60+ 6398
  61+ 6398              // +32
  62+ 6398              // SP_Basic        dw      0
  63+ 6398
  64+ 6398
  65+ 6398              //  ______________________________________________________________________
  66+ 6398
  67+ 6398              // from this point we can use LDHLRP and LDRPHL Assembler macros
  68+ 6398              // instead of their equivalent long sequences.
  69+ 6398
  70+ 6398              //  ______________________________________________________________________
  71+ 6398
  72+ 6398              // address for "next" - inner interpreter
  73+ 6398              // This address must always be pointed by IX
  74+ 6398              // "next" macro simply does a  jp(ix)  instruction
  75+ 6398
  76+ 6398              // Psh2_Ptr:       push    de
  77+ 6398              // Psh1_Ptr:       push    hl
  78+ 6398
  79+ 6398              Next_Ptr:       // This address must always be kept in IX: "next" relies on that
  80+ 6398
  81+ 6398                              if ( 1 == DEBUGGING )
  82+ 6398 ~                            ld      hl, Next_Breakpoint_1
  83+ 6398 ~                            and     a
  84+ 6398 ~                            sbc     hl, bc
  85+ 6398 ~                            jr      nz, Next_Continue
  86+ 6398 ~                            nop // This is where you have to put a real breakpoint to intercept BC values...
  87+ 6398                              endif
  88+ 6398
  89+ 6398              Next_Continue:
  90+ 6398 0A                           ld      a, (bc)
  91+ 6399 03                           inc     bc
  92+ 639A 6F                           ld      l, a
  93+ 639B 0A                           ld      a, (bc)
  94+ 639C 03                           inc     bc
  95+ 639D 67                           ld      h, a                // hl contains a CFA (xt) of word being executed
  96+ 639E
  97+ 639E              // Execute xt i.e. CFA held in HL
  98+ 639E              Exec_Ptr:
  99+ 639E 5E                           ld      e, (hl)
 100+ 639F 23                           inc     hl
 101+ 63A0 56                           ld      d, (hl)
 102+ 63A1 EB                           ex      de, hl
 103+ 63A2 E9                           jp      (hl)                // and jump to it
 104+ 63A3                                                          // there you'll find the real code or a CALL to a ;code part
 105+ 63A3
 106+ 63A3              //  ______________________________________________________________________
 107+ 63A3              //
 108+ 63A3              // lit          -- x
 109+ 63A3              // puts on top of stack the value of the following word.
 110+ 63A3              // it is compiled in colon definition before a literal number
 111+ 63A3
 112+ 63A3                              New_Def  LIT, "LIT", is_code, is_normal
 112+ 63A3             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 112+ 63A3             >
 112+ 63A3             >                // dummy db directives used to calculate length of namec
 112+ 63A3 4C 49 54    >                db      "LIT"
 112+ 63A6             >len_NFA         defl    $ - temp_NFA
 112+ 63A6             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 112+ 63A3             >
 112+ 63A3 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 112+ 63A4 4C 49 54    >                db      "LIT"               // name string in 7-bit ascii, but
 112+ 63A7             >                org     $-1                 // alter last byte of Name just above to set
 112+ 63A6 D4          >                db      {b $} | END_BIT     // msb as name end
 112+ 63A7             >
 112+ 63A7 00 00       >                dw      last_NFA            // Link to previous definition Name
 112+ 63A9             >LIT:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 112+ 63A9 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
 112+ 63A9             >                else
 112+ 63A9 AB 63       >                dw      $ + 2   ; ok        // is pointed by CFA
 112+ 63AB             >                endif           ; ok        // for other definitions it "points" the correct handler
 112+ 63AB             >                // Use of "; ok" to suppress "warning[fwdref]"
 112+ 63AB             >
 112+ 63AB             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 113+ 63AB
 114+ 63AB 0A                           ld      a, (bc)
 115+ 63AC 03                           inc     bc
 116+ 63AD 6F                           ld      l, a
 117+ 63AE 0A                           ld      a, (bc)
 118+ 63AF 03                           inc     bc
 119+ 63B0 67                           ld      h, a
 120+ 63B1                              psh1
 120+ 63B1 E5          >                push    hl
 120+ 63B2 DD E9       >                jp      (ix)
 121+ 63B4
 122+ 63B4              //  ______________________________________________________________________
 123+ 63B4              //
 124+ 63B4              // execute      i*x xt -- j*x
 125+ 63B4              // execution token. usually xt is given by CFA
 126+ 63B4
 127+ 63B4                              New_Def  EXECUTE, "EXECUTE", is_code, is_normal
 127+ 63B4             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 127+ 63B4             >
 127+ 63B4             >                // dummy db directives used to calculate length of namec
 127+ 63B4 45 58 45 43 >                db      "EXECUTE"
 127+ 63B8 55 54 45    >
 127+ 63BB             >len_NFA         defl    $ - temp_NFA
 127+ 63BB             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 127+ 63B4             >
 127+ 63B4 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 127+ 63B5 45 58 45 43 >                db      "EXECUTE"               // name string in 7-bit ascii, but
 127+ 63B9 55 54 45    >
 127+ 63BC             >                org     $-1                 // alter last byte of Name just above to set
 127+ 63BB C5          >                db      {b $} | END_BIT     // msb as name end
 127+ 63BC             >
 127+ 63BC A3 63       >                dw      last_NFA            // Link to previous definition Name
 127+ 63BE             >EXECUTE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 127+ 63BE ~           >                dw      runcode ; ok        // for primitive definitions  actual code
 127+ 63BE             >                else
 127+ 63BE C0 63       >                dw      $ + 2   ; ok        // is pointed by CFA
 127+ 63C0             >                endif           ; ok        // for other definitions it "points" the correct handler
 127+ 63C0             >                // Use of "; ok" to suppress "warning[fwdref]"
 127+ 63C0             >
 127+ 63C0             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 128+ 63C0 E1                           pop     hl
 129+ 63C1 18 DB                        jr      Exec_Ptr
 130+ 63C3
 131+ 63C3
 132+ 63C3              //  ______________________________________________________________________
 133+ 63C3              //
 134+ 63C3              // branch       --
 135+ 63C3              // unconditional branch in colon definition using the following cell as an offset from current IP value
 136+ 63C3              // compiled by ELSE, AGAIN and some other immediate words
 137+ 63C3
 138+ 63C3                              New_Def BRANCH, "BRANCH", is_code, is_normal
 138+ 63C3             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 138+ 63C3             >
 138+ 63C3             >                // dummy db directives used to calculate length of namec
 138+ 63C3 42 52 41 4E >                db      "BRANCH"
 138+ 63C7 43 48       >
 138+ 63C9             >len_NFA         defl    $ - temp_NFA
 138+ 63C9             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 138+ 63C3             >
 138+ 63C3 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 138+ 63C4 42 52 41 4E >                db      "BRANCH"               // name string in 7-bit ascii, but
 138+ 63C8 43 48       >
 138+ 63CA             >                org     $-1                 // alter last byte of Name just above to set
 138+ 63C9 C8          >                db      {b $} | END_BIT     // msb as name end
 138+ 63CA             >
 138+ 63CA B4 63       >                dw      last_NFA            // Link to previous definition Name
 138+ 63CC             >BRANCH:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 138+ 63CC ~           >                dw      runcode ; ok        // for primitive definitions  actual code
 138+ 63CC             >                else
 138+ 63CC CE 63       >                dw      $ + 2   ; ok        // is pointed by CFA
 138+ 63CE             >                endif           ; ok        // for other definitions it "points" the correct handler
 138+ 63CE             >                // Use of "; ok" to suppress "warning[fwdref]"
 138+ 63CE             >
 138+ 63CE             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 139+ 63CE              Branch_Ptr:
 140+ 63CE 60                           ld      h, b
 141+ 63CF 69                           ld      l, c
 142+ 63D0 5E                           ld      e, (hl)
 143+ 63D1 23                           inc     hl
 144+ 63D2 56                           ld      d, (hl)
 145+ 63D3 2B                           dec     hl                  // offset is calculated from current IP
 146+ 63D4 19                           add     hl, de
 147+ 63D5 4D                           ld      c, l
 148+ 63D6 44                           ld      b, h
 149+ 63D7                              next
 149+ 63D7 DD E9       >                jp      (ix)
 150+ 63D9
 151+ 63D9
 152+ 63D9              //  ______________________________________________________________________
 153+ 63D9              //
 154+ 63D9              // 0branch      f --
 155+ 63D9              // conditional branch if the top-of-stack is ZERO or FALSE.
 156+ 63D9              // compiled by IF, UNTIL and some other immediate words
 157+ 63D9
 158+ 63D9                              New_Def ZBRANCH, "0BRANCH", is_code, is_normal
 158+ 63D9             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 158+ 63D9             >
 158+ 63D9             >                // dummy db directives used to calculate length of namec
 158+ 63D9 30 42 52 41 >                db      "0BRANCH"
 158+ 63DD 4E 43 48    >
 158+ 63E0             >len_NFA         defl    $ - temp_NFA
 158+ 63E0             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 158+ 63D9             >
 158+ 63D9 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 158+ 63DA 30 42 52 41 >                db      "0BRANCH"               // name string in 7-bit ascii, but
 158+ 63DE 4E 43 48    >
 158+ 63E1             >                org     $-1                 // alter last byte of Name just above to set
 158+ 63E0 C8          >                db      {b $} | END_BIT     // msb as name end
 158+ 63E1             >
 158+ 63E1 C3 63       >                dw      last_NFA            // Link to previous definition Name
 158+ 63E3             >ZBRANCH:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 158+ 63E3 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
 158+ 63E3             >                else
 158+ 63E3 E5 63       >                dw      $ + 2   ; ok        // is pointed by CFA
 158+ 63E5             >                endif           ; ok        // for other definitions it "points" the correct handler
 158+ 63E5             >                // Use of "; ok" to suppress "warning[fwdref]"
 158+ 63E5             >
 158+ 63E5             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 159+ 63E5              ZBranch_Ptr:
 160+ 63E5 E1                           pop     hl
 161+ 63E6 7D                           ld      a, l
 162+ 63E7 B4                           or      h
 163+ 63E8 CA CE 63                     jp      z, Branch_Ptr
 164+ 63EB 03                           inc     bc                  // if not branch, skip offset cell.
 165+ 63EC 03                           inc     bc
 166+ 63ED                              next
 166+ 63ED DD E9       >                jp      (ix)
 167+ 63EF
 168+ 63EF              //  ______________________________________________________________________
 169+ 63EF              //
 170+ 63EF              // (+loop)       --
 171+ 63EF              // compiled by +LOOP. it uses the top two values of return-stack to
 172+ 63EF              // keep track of index and limit, they are accessed via I and I'
 173+ 63EF                              New_Def C_PLOOP, "(+LOOP)", is_code, is_normal
 173+ 63EF             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 173+ 63EF             >
 173+ 63EF             >                // dummy db directives used to calculate length of namec
 173+ 63EF 28 2B 4C 4F >                db      "(+LOOP)"
 173+ 63F3 4F 50 29    >
 173+ 63F6             >len_NFA         defl    $ - temp_NFA
 173+ 63F6             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 173+ 63EF             >
 173+ 63EF 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 173+ 63F0 28 2B 4C 4F >                db      "(+LOOP)"               // name string in 7-bit ascii, but
 173+ 63F4 4F 50 29    >
 173+ 63F7             >                org     $-1                 // alter last byte of Name just above to set
 173+ 63F6 A9          >                db      {b $} | END_BIT     // msb as name end
 173+ 63F7             >
 173+ 63F7 D9 63       >                dw      last_NFA            // Link to previous definition Name
 173+ 63F9             >C_PLOOP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 173+ 63F9 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
 173+ 63F9             >                else
 173+ 63F9 FB 63       >                dw      $ + 2   ; ok        // is pointed by CFA
 173+ 63FB             >                endif           ; ok        // for other definitions it "points" the correct handler
 173+ 63FB             >                // Use of "; ok" to suppress "warning[fwdref]"
 173+ 63FB             >
 173+ 63FB             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 174+ 63FB
 175+ 63FB              Loop_Ptr:
 176+ 63FB D9                           exx
 177+ 63FC                              ldhlrp                      // ld hl,rp macro 30h +Origin
 177+ 63FC 2A 96 63    >                ld      hl,(RP_Pointer)
 178+ 63FF
 179+ 63FF C1                           pop     bc                  // bc is increment
 180+ 6400
 181+ 6400 5E                           ld      e, (hl)             // hl points to loop-index, add increment to it.
 182+ 6401 7B                           ld      a, e                // de keeps index before increment.
 183+ 6402 81                           add     c
 184+ 6403 77                           ld      (hl), a
 185+ 6404 23                           inc     hl
 186+ 6405 56                           ld      d, (hl)
 187+ 6406 7A                           ld      a, d
 188+ 6407 88                           adc     b
 189+ 6408 77                           ld      (hl),a
 190+ 6409 23                           inc     hl
 191+ 640A
 192+ 640A 7B                           ld      a, e
 193+ 640B 96                           sub     (hl)
 194+ 640C 5F                           ld      e, a
 195+ 640D 23                           inc     hl
 196+ 640E 7A                           ld      a, d
 197+ 640F 9E                           sbc     (hl)
 198+ 6410 57                           ld      d, a                // DE is index - limit : limit is the "new zero"
 199+ 6411
 200+ 6411 EB                           ex      de, hl
 201+ 6412 09                           add     hl, bc
 202+ 6413
 203+ 6413 CB 78                        bit     7, b                // keep increment-sign just before overwriting d
 204+ 6415 28 01                        jr      z, Loop_NegativeIncrement
 205+ 6417 3F                               ccf
 206+ 6418              Loop_NegativeIncrement:
 207+ 6418 38 04                        jr      c, Loop_Endif
 208+ 641A D9                               exx
 209+ 641B C3 CE 63                         jp      Branch_Ptr      // perform branch consuming following cell
 210+ 641E              Loop_Endif:
 211+ 641E EB                           ex      de, hl
 212+ 641F 23                           inc     hl
 213+ 6420                              ldrphl                      // ld rp,hl macro 30h +Origin
 213+ 6420 22 96 63    >                ld      (RP_Pointer),hl
 214+ 6423 D9                           exx
 215+ 6424 03                           inc     bc                  // skip branch-style offset
 216+ 6425 03                           inc     bc
 217+ 6426                              next
 217+ 6426 DD E9       >                jp      (ix)
 218+ 6428
 219+ 6428              //  ______________________________________________________________________
 220+ 6428              //
 221+ 6428              // (loop)       n --
 222+ 6428              // same as (LOOP) but index is incremented by 1
 223+ 6428              // compiled by LOOP.
 224+ 6428                              New_Def C_LOOP, "(LOOP)", is_code, is_normal
 224+ 6428             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 224+ 6428             >
 224+ 6428             >                // dummy db directives used to calculate length of namec
 224+ 6428 28 4C 4F 4F >                db      "(LOOP)"
 224+ 642C 50 29       >
 224+ 642E             >len_NFA         defl    $ - temp_NFA
 224+ 642E             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 224+ 6428             >
 224+ 6428 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 224+ 6429 28 4C 4F 4F >                db      "(LOOP)"               // name string in 7-bit ascii, but
 224+ 642D 50 29       >
 224+ 642F             >                org     $-1                 // alter last byte of Name just above to set
 224+ 642E A9          >                db      {b $} | END_BIT     // msb as name end
 224+ 642F             >
 224+ 642F EF 63       >                dw      last_NFA            // Link to previous definition Name
 224+ 6431             >C_LOOP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 224+ 6431 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
 224+ 6431             >                else
 224+ 6431 33 64       >                dw      $ + 2   ; ok        // is pointed by CFA
 224+ 6433             >                endif           ; ok        // for other definitions it "points" the correct handler
 224+ 6433             >                // Use of "; ok" to suppress "warning[fwdref]"
 224+ 6433             >
 224+ 6433             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 225+ 6433 ED 8A 00 01                  push    1
 226+ 6437 C3 FB 63                     jp      Loop_Ptr
 227+ 643A
 228+ 643A              //  ______________________________________________________________________
 229+ 643A              //
 230+ 643A              // (?do)        lim ind --
 231+ 643A              // compiled by ?DO to make a loop checking for lim == ind first
 232+ 643A              // at run-time (?DO) must be followed by a BRANCH offset
 233+ 643A              // used to skip the loop if lim == ind
 234+ 643A                              New_Def C_Q_DO, "(?DO)", is_code, is_normal
 234+ 643A             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 234+ 643A             >
 234+ 643A             >                // dummy db directives used to calculate length of namec
 234+ 643A 28 3F 44 4F >                db      "(?DO)"
 234+ 643E 29          >
 234+ 643F             >len_NFA         defl    $ - temp_NFA
 234+ 643F             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 234+ 643A             >
 234+ 643A 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 234+ 643B 28 3F 44 4F >                db      "(?DO)"               // name string in 7-bit ascii, but
 234+ 643F 29          >
 234+ 6440             >                org     $-1                 // alter last byte of Name just above to set
 234+ 643F A9          >                db      {b $} | END_BIT     // msb as name end
 234+ 6440             >
 234+ 6440 28 64       >                dw      last_NFA            // Link to previous definition Name
 234+ 6442             >C_Q_DO:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 234+ 6442 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
 234+ 6442             >                else
 234+ 6442 44 64       >                dw      $ + 2   ; ok        // is pointed by CFA
 234+ 6444             >                endif           ; ok        // for other definitions it "points" the correct handler
 234+ 6444             >                // Use of "; ok" to suppress "warning[fwdref]"
 234+ 6444             >
 234+ 6444             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 235+ 6444 D1                           pop     de                  // de has the index
 236+ 6445 E1                           pop     hl                  // hl has the limit
 237+ 6446 E5                           push    hl
 238+ 6447 D5                           push    de
 239+ 6448 A7                           and     a                   // reset carry flag
 240+ 6449 ED 52                        sbc     hl, de              // compute limit - index
 241+ 644B 20 05                        jr      nz, Do_Ptr          // if zero then don't even begin loop
 242+ 644D D1                               pop     de
 243+ 644E E1                               pop     hl
 244+ 644F
 245+ 644F C3 CE 63                         jp      Branch_Ptr          // perform branch consuming following cell
 246+ 6452              Do_Ptr:
 247+ 6452                              ldhlrp                      // prepare RP
 247+ 6452 2A 96 63    >                ld      hl,(RP_Pointer)
 248+ 6455 2B                           dec     hl
 249+ 6456 2B                           dec     hl
 250+ 6457 2B                           dec     hl
 251+ 6458 2B                           dec     hl
 252+ 6459                              ldrphl
 252+ 6459 22 96 63    >                ld      (RP_Pointer),hl
 253+ 645C
 254+ 645C                              // store index as top RP
 255+ 645C D1                           pop     de
 256+ 645D 73                           ld      (hl), e
 257+ 645E 23                           inc     hl
 258+ 645F 72                           ld      (hl), d
 259+ 6460 23                           inc     hl
 260+ 6461                              // stores lim as second from top RP
 261+ 6461 D1                           pop     de
 262+ 6462 73                           ld      (hl), e
 263+ 6463 23                           inc     hl
 264+ 6464 72                           ld      (hl), d
 265+ 6465
 266+ 6465                              // skip branch-style offseet
 267+ 6465 03                           inc     bc
 268+ 6466 03                           inc     bc
 269+ 6467                              next
 269+ 6467 DD E9       >                jp      (ix)
 270+ 6469
 271+ 6469              //  ______________________________________________________________________
 272+ 6469              //
 273+ 6469              // (do)        lim ind --
 274+ 6469              // compiled by DO to make a loop checking for lim == ind first
 275+ 6469              // this is a simpler version of (?DO)
 276+ 6469                              New_Def C_DO, "(DO)", is_code, is_normal
 276+ 6469             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 276+ 6469             >
 276+ 6469             >                // dummy db directives used to calculate length of namec
 276+ 6469 28 44 4F 29 >                db      "(DO)"
 276+ 646D             >len_NFA         defl    $ - temp_NFA
 276+ 646D             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 276+ 6469             >
 276+ 6469 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 276+ 646A 28 44 4F 29 >                db      "(DO)"               // name string in 7-bit ascii, but
 276+ 646E             >                org     $-1                 // alter last byte of Name just above to set
 276+ 646D A9          >                db      {b $} | END_BIT     // msb as name end
 276+ 646E             >
 276+ 646E 3A 64       >                dw      last_NFA            // Link to previous definition Name
 276+ 6470             >C_DO:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 276+ 6470 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
 276+ 6470             >                else
 276+ 6470 72 64       >                dw      $ + 2   ; ok        // is pointed by CFA
 276+ 6472             >                endif           ; ok        // for other definitions it "points" the correct handler
 276+ 6472             >                // Use of "; ok" to suppress "warning[fwdref]"
 276+ 6472             >
 276+ 6472             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 277+ 6472 0B                           dec     bc                  // prepare IP beforehand
 278+ 6473 0B                           dec     bc                  // to balance the two final inc bc in (?do)
 279+ 6474 C3 52 64                     jp      Do_Ptr
 280+ 6477
 281+ 6477              //  ______________________________________________________________________
 282+ 6477              //
 283+ 6477              // i            -- n
 284+ 6477              // used between DO and LOOP or between DO e +LOOP to copy on top of stack
 285+ 6477              // the current value of the index-loop
 286+ 6477                              New_Def I, "I", is_code, is_normal
 286+ 6477             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 286+ 6477             >
 286+ 6477             >                // dummy db directives used to calculate length of namec
 286+ 6477 49          >                db      "I"
 286+ 6478             >len_NFA         defl    $ - temp_NFA
 286+ 6478             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 286+ 6477             >
 286+ 6477 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 286+ 6478 49          >                db      "I"               // name string in 7-bit ascii, but
 286+ 6479             >                org     $-1                 // alter last byte of Name just above to set
 286+ 6478 C9          >                db      {b $} | END_BIT     // msb as name end
 286+ 6479             >
 286+ 6479 69 64       >                dw      last_NFA            // Link to previous definition Name
 286+ 647B             >I:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 286+ 647B ~           >                dw      runcode ; ok        // for primitive definitions  actual code
 286+ 647B             >                else
 286+ 647B 7D 64       >                dw      $ + 2   ; ok        // is pointed by CFA
 286+ 647D             >                endif           ; ok        // for other definitions it "points" the correct handler
 286+ 647D             >                // Use of "; ok" to suppress "warning[fwdref]"
 286+ 647D             >
 286+ 647D             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 287+ 647D              I_Ptr:
 288+ 647D
 289+ 647D                              ldhlrp
 289+ 647D 2A 96 63    >                ld      hl,(RP_Pointer)
 290+ 6480              I_Ptr_prime
 291+ 6480 5E                           ld      e, (hl)
 292+ 6481 23                           inc     hl
 293+ 6482 56                           ld      d, (hl)
 294+ 6483 D5                           push    de
 295+ 6484                              next
 295+ 6484 DD E9       >                jp      (ix)
 296+ 6486
 297+ 6486              //  ______________________________________________________________________
 298+ 6486              //
 299+ 6486              // i'            -- n
 300+ 6486              // used between DO and LOOP or between DO e +LOOP to copy on top of stack
 301+ 6486              // the limit of the index-loop
 302+ 6486
 303+ 6486                              New_Def II, "I'", is_code, is_normal
 303+ 6486             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 303+ 6486             >
 303+ 6486             >                // dummy db directives used to calculate length of namec
 303+ 6486 49 27       >                db      "I'"
 303+ 6488             >len_NFA         defl    $ - temp_NFA
 303+ 6488             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 303+ 6486             >
 303+ 6486 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 303+ 6487 49 27       >                db      "I'"               // name string in 7-bit ascii, but
 303+ 6489             >                org     $-1                 // alter last byte of Name just above to set
 303+ 6488 A7          >                db      {b $} | END_BIT     // msb as name end
 303+ 6489             >
 303+ 6489 77 64       >                dw      last_NFA            // Link to previous definition Name
 303+ 648B             >II:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 303+ 648B ~           >                dw      runcode ; ok        // for primitive definitions  actual code
 303+ 648B             >                else
 303+ 648B 8D 64       >                dw      $ + 2   ; ok        // is pointed by CFA
 303+ 648D             >                endif           ; ok        // for other definitions it "points" the correct handler
 303+ 648D             >                // Use of "; ok" to suppress "warning[fwdref]"
 303+ 648D             >
 303+ 648D             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 304+ 648D                              ldhlrp
 304+ 648D 2A 96 63    >                ld      hl,(RP_Pointer)
 305+ 6490 23                           inc     hl
 306+ 6491 23                           inc     hl
 307+ 6492 18 EC                        jr      I_Ptr_prime
 308+ 6494
 309+ 6494
 310+ 6494              //  ______________________________________________________________________
 311+ 6494              //
 312+ 6494              // digit        c n -- u 1  |  0
 313+ 6494              // convert a character c using base n
 314+ 6494              // returns a unsigned number and a true flag
 315+ 6494              // or just a false flag if the conversion fails
 316+ 6494                              New_Def DIGIT, "DIGIT", is_code, is_normal
 316+ 6494             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 316+ 6494             >
 316+ 6494             >                // dummy db directives used to calculate length of namec
 316+ 6494 44 49 47 49 >                db      "DIGIT"
 316+ 6498 54          >
 316+ 6499             >len_NFA         defl    $ - temp_NFA
 316+ 6499             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 316+ 6494             >
 316+ 6494 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 316+ 6495 44 49 47 49 >                db      "DIGIT"               // name string in 7-bit ascii, but
 316+ 6499 54          >
 316+ 649A             >                org     $-1                 // alter last byte of Name just above to set
 316+ 6499 D4          >                db      {b $} | END_BIT     // msb as name end
 316+ 649A             >
 316+ 649A 86 64       >                dw      last_NFA            // Link to previous definition Name
 316+ 649C             >DIGIT:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 316+ 649C ~           >                dw      runcode ; ok        // for primitive definitions  actual code
 316+ 649C             >                else
 316+ 649C 9E 64       >                dw      $ + 2   ; ok        // is pointed by CFA
 316+ 649E             >                endif           ; ok        // for other definitions it "points" the correct handler
 316+ 649E             >                // Use of "; ok" to suppress "warning[fwdref]"
 316+ 649E             >
 316+ 649E             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 317+ 649E E1                           pop     hl                  // l has the base
 318+ 649F D1                           pop     de                  // e has the digit
 319+ 64A0 7B                           ld      a, e
 320+ 64A1 FE 60                        cp      $60                 // check if lowercase
 321+ 64A3 38 02                        jr      c, Digit_Uppercase
 322+ 64A5 D6 20                            sub     $20                 // quick'n'dirty uppercase
 323+ 64A7              Digit_Uppercase:
 324+ 64A7 D6 30                        sub     $30
 325+ 64A9 38 15                        jr      c, Digit_Fail       // fail when character < "0"
 326+ 64AB FE 0A                            cp      $0A
 327+ 64AD 38 06                            jr      c, Digit_Decimal    // perhaps is not decimal
 328+ 64AF D6 07                                sub     7                   // try hex and subtract 7
 329+ 64B1 FE 0A                                cp      $0A
 330+ 64B3 38 0B                                jr      c,  Digit_Fail      // it is not hex !
 331+ 64B5
 332+ 64B5              Digit_Decimal:
 333+ 64B5                              // compare digit
 334+ 64B5 BD                           cp      l                   // compare with base
 335+ 64B6
 336+ 64B6 30 08                        jr      nc, Digit_Fail      // fail when greater than base
 337+ 64B8 5F                               ld      e, a                // digit is returned as second from TOS
 338+ 64B9 21 01 00                         ld      hl, 1
 339+ 64BC
 340+ 64BC                                  psh2
 340+ 64BC D5          >                push    de
 340+ 64BD E5          >                push    hl
 340+ 64BE DD E9       >                jp      (ix)
 341+ 64C0              Digit_Fail:
 342+ 64C0 21 00 00                     ld      hl, 0
 343+ 64C3                              psh1
 343+ 64C3 E5          >                push    hl
 343+ 64C4 DD E9       >                jp      (ix)
 344+ 64C6
 345+ 64C6              //  ______________________________________________________________________
 346+ 64C6              //
 347+ 64C6              //  parametric uppercase routine
 348+ 64C6              //  depending on the following op-code the routine can be by-passed
 349+ 64C6              //  changing the behaviour of some callers.
 350+ 64C6              //  If it is "ret" then the system is Case-Sensitive
 351+ 64C6              //  If it is "Nop" then the system is Case-Insensitive
 352+ 64C6              //  Only A register is touched.
 353+ 64C6 00           Case_Sensitive: nop                         // Default is case-insensitive.
 354+ 64C7              Case_Upper:
 355+ 64C7 FE 61                        cp      LC_A_CHAR           // lower-case "a"
 356+ 64C9 D8                           ret     c                   // no change if A < "a"
 357+ 64CA FE 7B                        cp      LC_Z_CHAR + 1       // lower-case "z" + 1
 358+ 64CC D0                           ret     nc                  // no change if A > "z"
 359+ 64CD D6 20                        sub     $20                 // Make uppercase if A in ["a".."z"]
 360+ 64CF C9                           ret
 361+ 64D0
 362+ 64D0              //  ______________________________________________________________________
 363+ 64D0              //
 364+ 64D0              //  caseon      --
 365+ 64D0              // set system case-sensitivity on
 366+ 64D0              // it patches a RET/NOP at the beginning of the uppercase-routine
 367+ 64D0                              New_Def CASEON, "CASEON", is_code, is_normal
 367+ 64D0             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 367+ 64D0             >
 367+ 64D0             >                // dummy db directives used to calculate length of namec
 367+ 64D0 43 41 53 45 >                db      "CASEON"
 367+ 64D4 4F 4E       >
 367+ 64D6             >len_NFA         defl    $ - temp_NFA
 367+ 64D6             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 367+ 64D0             >
 367+ 64D0 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 367+ 64D1 43 41 53 45 >                db      "CASEON"               // name string in 7-bit ascii, but
 367+ 64D5 4F 4E       >
 367+ 64D7             >                org     $-1                 // alter last byte of Name just above to set
 367+ 64D6 CE          >                db      {b $} | END_BIT     // msb as name end
 367+ 64D7             >
 367+ 64D7 94 64       >                dw      last_NFA            // Link to previous definition Name
 367+ 64D9             >CASEON:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 367+ 64D9 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
 367+ 64D9             >                else
 367+ 64D9 DB 64       >                dw      $ + 2   ; ok        // is pointed by CFA
 367+ 64DB             >                endif           ; ok        // for other definitions it "points" the correct handler
 367+ 64DB             >                // Use of "; ok" to suppress "warning[fwdref]"
 367+ 64DB             >
 367+ 64DB             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 368+ 64DB 3E C9                        ld      a, $C9              // "ret"
 369+ 64DD 32 C6 64                     ld      (Case_Sensitive), a
 370+ 64E0                              next
 370+ 64E0 DD E9       >                jp      (ix)
 371+ 64E2
 372+ 64E2              //  ______________________________________________________________________
 373+ 64E2              //
 374+ 64E2              //  caseoff     --
 375+ 64E2              // set system case-sensitivity on
 376+ 64E2              // it patches a RET/NOP at the beginning of the uppercase-routine
 377+ 64E2                              New_Def CASEOFF, "CASEOFF", is_code, is_normal
 377+ 64E2             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 377+ 64E2             >
 377+ 64E2             >                // dummy db directives used to calculate length of namec
 377+ 64E2 43 41 53 45 >                db      "CASEOFF"
 377+ 64E6 4F 46 46    >
 377+ 64E9             >len_NFA         defl    $ - temp_NFA
 377+ 64E9             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 377+ 64E2             >
 377+ 64E2 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 377+ 64E3 43 41 53 45 >                db      "CASEOFF"               // name string in 7-bit ascii, but
 377+ 64E7 4F 46 46    >
 377+ 64EA             >                org     $-1                 // alter last byte of Name just above to set
 377+ 64E9 C6          >                db      {b $} | END_BIT     // msb as name end
 377+ 64EA             >
 377+ 64EA D0 64       >                dw      last_NFA            // Link to previous definition Name
 377+ 64EC             >CASEOFF:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 377+ 64EC ~           >                dw      runcode ; ok        // for primitive definitions  actual code
 377+ 64EC             >                else
 377+ 64EC EE 64       >                dw      $ + 2   ; ok        // is pointed by CFA
 377+ 64EE             >                endif           ; ok        // for other definitions it "points" the correct handler
 377+ 64EE             >                // Use of "; ok" to suppress "warning[fwdref]"
 377+ 64EE             >
 377+ 64EE             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 378+ 64EE 3E 00                        ld      a, $00              // "nop"
 379+ 64F0 32 C6 64                     ld      (Case_Sensitive), a
 380+ 64F3                              next
 380+ 64F3 DD E9       >                jp      (ix)
 381+ 64F5
 382+ 64F5              //  ______________________________________________________________________
 383+ 64F5              //
 384+ 64F5              //  upper       c1 -- c1 | c2
 385+ 64F5              // character on top of stack is forced to Uppercase.
 386+ 64F5                              New_Def UPPER, "UPPER", is_code, is_normal
 386+ 64F5             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 386+ 64F5             >
 386+ 64F5             >                // dummy db directives used to calculate length of namec
 386+ 64F5 55 50 50 45 >                db      "UPPER"
 386+ 64F9 52          >
 386+ 64FA             >len_NFA         defl    $ - temp_NFA
 386+ 64FA             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 386+ 64F5             >
 386+ 64F5 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 386+ 64F6 55 50 50 45 >                db      "UPPER"               // name string in 7-bit ascii, but
 386+ 64FA 52          >
 386+ 64FB             >                org     $-1                 // alter last byte of Name just above to set
 386+ 64FA D2          >                db      {b $} | END_BIT     // msb as name end
 386+ 64FB             >
 386+ 64FB E2 64       >                dw      last_NFA            // Link to previous definition Name
 386+ 64FD             >UPPER:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 386+ 64FD ~           >                dw      runcode ; ok        // for primitive definitions  actual code
 386+ 64FD             >                else
 386+ 64FD FF 64       >                dw      $ + 2   ; ok        // is pointed by CFA
 386+ 64FF             >                endif           ; ok        // for other definitions it "points" the correct handler
 386+ 64FF             >                // Use of "; ok" to suppress "warning[fwdref]"
 386+ 64FF             >
 386+ 64FF             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 387+ 64FF E1                           pop     hl
 388+ 6500 7D                           ld      a, l
 389+ 6501 CD C7 64                     call    Case_Upper
 390+ 6504 6F                           ld      l, a
 391+ 6505
 392+ 6505                              psh1
 392+ 6505 E5          >                push    hl
 392+ 6506 DD E9       >                jp      (ix)
 393+ 6508
 394+ 6508              //  ______________________________________________________________________
 395+ 6508              //
 396+ 6508              // (find)       addr voc -- addr 0 | cfa b 1
 397+ 6508              // vocabulary search,
 398+ 6508              // - voc is starting word's NFA
 399+ 6508              // - addr is the string to be searched for
 400+ 6508              // On success, it returns the CFA of found word, the first NFA byte
 401+ 6508              // (which contains length and some flags) and a true flag.
 402+ 6508              // On fail, a false flag  (no more: leaves addr unchanged)
 403+ 6508                              New_Def C_FIND, "(FIND)", is_code, is_normal
 403+ 6508             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 403+ 6508             >
 403+ 6508             >                // dummy db directives used to calculate length of namec
 403+ 6508 28 46 49 4E >                db      "(FIND)"
 403+ 650C 44 29       >
 403+ 650E             >len_NFA         defl    $ - temp_NFA
 403+ 650E             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 403+ 6508             >
 403+ 6508 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 403+ 6509 28 46 49 4E >                db      "(FIND)"               // name string in 7-bit ascii, but
 403+ 650D 44 29       >
 403+ 650F             >                org     $-1                 // alter last byte of Name just above to set
 403+ 650E A9          >                db      {b $} | END_BIT     // msb as name end
 403+ 650F             >
 403+ 650F F5 64       >                dw      last_NFA            // Link to previous definition Name
 403+ 6511             >C_FIND:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 403+ 6511 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
 403+ 6511             >                else
 403+ 6511 13 65       >                dw      $ + 2   ; ok        // is pointed by CFA
 403+ 6513             >                endif           ; ok        // for other definitions it "points" the correct handler
 403+ 6513             >                // Use of "; ok" to suppress "warning[fwdref]"
 403+ 6513             >
 403+ 6513             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 404+ 6513                                                              // de has dictionary pointer
 405+ 6513 D1                               pop     de
 406+ 6514              Find_VocabularyLoop:
 407+ 6514 E1                               pop     hl                  // string pointer to search for
 408+ 6515 E5                               push    hl                  // keep it on stack too for the end.
 409+ 6516 1A                               ld      a, (de)             // save NFA length byte
 410+ 6517 08                               ex      af,af'              // for later use (!)
 411+ 6518 1A                               ld      a, (de)             // reload NFA length byte
 412+ 6519 AE                               xor     (hl)                // check if same length
 413+ 651A E6 3F                            and     $3F                 // by resetting 3 high bits (flags)
 414+ 651C                                  // word an text haven't the same length, skip to next vocabulary entry
 415+ 651C 20 2C                            jr      nz, Find_DifferentLenght
 416+ 651E
 417+ 651E              Find_ThisWord:  // begin loop
 418+ 651E 23                                   inc     hl
 419+ 651F 13                                   inc     de
 420+ 6520 1A                                   ld      a, (de)
 421+ 6521                                      // case insensitive option - begin
 422+ 6521 C5                                   push    bc
 423+ 6522 E6 80                                and     $80                 // split A in msb and the rest
 424+ 6524 47                                   ld      b, a
 425+ 6525 1A                                   ld      a, (de)
 426+ 6526 E6 7F                                and     $7F                 // ... the rest (lower 7 bits)
 427+ 6528 CD C6 64                             call    Case_Sensitive      // uppercase routine
 428+ 652B 4F                                   ld      c, a
 429+ 652C 7E                                   ld      a, (hl)
 430+ 652D CD C6 64                             call    Case_Sensitive      // uppercase routine
 431+ 6530 A9                                   xor     c
 432+ 6531 A8                                   xor     b
 433+ 6532 C1                                   pop     bc
 434+ 6533                                      // case insensitive option - end
 435+ 6533 87                                   add     a                   // ignore msb during compare
 436+ 6534 20 12                                jr      nz, Find_DidntMatch  // jump if doesn't match (*)
 437+ 6536
 438+ 6536                                  // loop back until last byte msb is found set
 439+ 6536                                  // that bit marks the ending char of this word
 440+ 6536 30 E6                            jr      nc, Find_ThisWord
 441+ 6538
 442+ 6538                                  // match found !
 443+ 6538 21 03 00                             ld      hl, 3               // 3 bytes for CFA offset to skip LFA
 444+ 653B 19                                   add     hl, de
 445+ 653C E3                                   ex      (sp), hl            // CFA on stack and drop addr
 446+ 653D 08                                   ex      af, af'             // retrieve NFA byte (!)
 447+ 653E 5F                                   ld      e, a
 448+ 653F 16 00                                ld      d, 0
 449+ 6541
 450+ 6541
 451+ 6541 21 01 00                             ld      hl, 1
 452+ 6544                                      psh2
 452+ 6544 D5          >                push    de
 452+ 6545 E5          >                push    hl
 452+ 6546 DD E9       >                jp      (ix)
 453+ 6548
 454+ 6548              Find_DidntMatch: // didn't match (*)
 455+ 6548 38 05                            jr      c,  Find_WordEnd   // jump if not end of word (**)
 456+ 654A
 457+ 654A              Find_DifferentLenght:
 458+ 654A                              // consume chars until the end of the word
 459+ 654A                              // that is last byte msb is found set
 460+ 654A 13                               inc     de
 461+ 654B 1A                               ld      a, (de)
 462+ 654C 87                               add     a, a
 463+ 654D 30 FB                        jr      nc, Find_DifferentLenght
 464+ 654F
 465+ 654F              Find_WordEnd:   // word-end  found (**)
 466+ 654F                              // take LFA and use it
 467+ 654F 13                           inc     de
 468+ 6550 EB                           ex      de, hl
 469+ 6551 5E                           ld      e, (hl)
 470+ 6552 23                           inc     hl
 471+ 6553 56                           ld      d, (hl)
 472+ 6554 7A                           ld      a, d
 473+ 6555 B3                           or      e
 474+ 6556
 475+ 6556                          // loop until end of vocabulary
 476+ 6556 20 BC                    jr      nz, Find_VocabularyLoop
 477+ 6558
 478+ 6558 E1                       pop     hl              // with this, it leaves addr unchanged
 479+ 6559 21 00 00                 ld      hl, FALSE_FLAG
 480+ 655C
 481+ 655C                          psh1
 481+ 655C E5          >                push    hl
 481+ 655D DD E9       >                jp      (ix)
 482+ 655F
 483+ 655F              //  ______________________________________________________________________
 484+ 655F              //
 485+ 655F              // enclose      a c -- a  n1 n2 n3
 486+ 655F              // starting from a, using delimiter c, determines the offsets:
 487+ 655F              //   n1   the first character non-delimiter
 488+ 655F              //   n2   the first delimiter after the text
 489+ 655F              //   n3   the first character non enclosed.
 490+ 655F              // This procedure does not go beyond a 'nul' ASCII (0x00) that represents
 491+ 655F              // an uncoditional delimiter.
 492+ 655F              // Examples:
 493+ 655F              //   i:	c  c  x  x  x  c  x	 -- 2  5  6
 494+ 655F              //  ii:	c  c  x  x  x  'nul' -- 2  5  5
 495+ 655F              // iii:	c  c  'nul'          -- 2  3  2
 496+ 655F                              New_Def ENCLOSE, "ENCLOSE", is_code, is_normal
 496+ 655F             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 496+ 655F             >
 496+ 655F             >                // dummy db directives used to calculate length of namec
 496+ 655F 45 4E 43 4C >                db      "ENCLOSE"
 496+ 6563 4F 53 45    >
 496+ 6566             >len_NFA         defl    $ - temp_NFA
 496+ 6566             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 496+ 655F             >
 496+ 655F 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 496+ 6560 45 4E 43 4C >                db      "ENCLOSE"               // name string in 7-bit ascii, but
 496+ 6564 4F 53 45    >
 496+ 6567             >                org     $-1                 // alter last byte of Name just above to set
 496+ 6566 C5          >                db      {b $} | END_BIT     // msb as name end
 496+ 6567             >
 496+ 6567 08 65       >                dw      last_NFA            // Link to previous definition Name
 496+ 6569             >ENCLOSE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 496+ 6569 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
 496+ 6569             >                else
 496+ 6569 6B 65       >                dw      $ + 2   ; ok        // is pointed by CFA
 496+ 656B             >                endif           ; ok        // for other definitions it "points" the correct handler
 496+ 656B             >                // Use of "; ok" to suppress "warning[fwdref]"
 496+ 656B             >
 496+ 656B             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 497+ 656B D1                           pop     de                  //  e has the character
 498+ 656C E1                           pop     hl                  // hl has the string address
 499+ 656D E5                           push    hl
 500+ 656E 7B                           ld      a, e
 501+ 656F 11 FF FF                     ld      de, -1              // let's start from -1
 502+ 6572 2B                           dec     hl
 503+ 6573              Enclose_NonDelimiter:
 504+ 6573                              // find first non delimiter
 505+ 6573 23                               inc     hl
 506+ 6574 13                               inc     de
 507+ 6575 BE                               cp      (hl)
 508+ 6576 28 FB                        jr      z, Enclose_NonDelimiter
 509+ 6578 D5                           push    de
 510+ 6579
 511+ 6579 C5                           push    bc                  // save Instruction Pointer
 512+ 657A
 513+ 657A 4F                           ld      c, a                // save char
 514+ 657B 7E                           ld      a, (hl)
 515+ 657C A7                           and     a                   // stop if 0x00
 516+ 657D 20 07                        jr      nz, Enclose_NextChar
 517+ 657F
 518+ 657F                              /// case iii. no more character in string
 519+ 657F C1                               pop     bc                  // restore Instruction Pointer
 520+ 6580 13                               inc     de
 521+ 6581 D5                               push    de
 522+ 6582 1B                               dec     de
 523+ 6583 D5                               push    de
 524+ 6584                                  next
 524+ 6584 DD E9       >                jp      (ix)
 525+ 6586              Enclose_NextChar:
 526+ 6586 79                               ld      a, c
 527+ 6587 23                               inc     hl
 528+ 6588 13                               inc     de
 529+ 6589 BE                               cp      (hl)
 530+ 658A 20 06                            jr      nz, Enclose_NonSeparator
 531+ 658C
 532+ 658C                                      // case i. first non enclosed
 533+ 658C C1                                   pop     bc                  // restore Instruction Pointer
 534+ 658D D5                                   push    de
 535+ 658E 13                                   inc     de
 536+ 658F D5                                   push    de
 537+ 6590                                      next
 537+ 6590 DD E9       >                jp      (ix)
 538+ 6592              Enclose_NonSeparator:
 539+ 6592 7E                               ld      a, (hl)
 540+ 6593 A7                               and     a
 541+ 6594 20 F0                        jr      nz, Enclose_NextChar
 542+ 6596
 543+ 6596                              // case ii. separator & terminator
 544+ 6596 C1                           pop     bc                  // restore Instruction Pointer
 545+ 6597 D5                           push    de
 546+ 6598 D5                           push    de
 547+ 6599                              next
 547+ 6599 DD E9       >                jp      (ix)
 548+ 659B
 549+ 659B              //  ______________________________________________________________________
 550+ 659B              //
 551+ 659B              // (map)        a2 a1 n c1 -- c2
 552+ 659B              // translate character c1 using mapping string a2 and a2
 553+ 659B              // if c1 is not present within string a1 then
 554+ 659B              // c2 = c2 if it is not translated. n is the length of both a1 and a2.
 555+ 659B                              New_Def C_MAP, "(MAP)", is_code, is_normal
 555+ 659B             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 555+ 659B             >
 555+ 659B             >                // dummy db directives used to calculate length of namec
 555+ 659B 28 4D 41 50 >                db      "(MAP)"
 555+ 659F 29          >
 555+ 65A0             >len_NFA         defl    $ - temp_NFA
 555+ 65A0             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 555+ 659B             >
 555+ 659B 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 555+ 659C 28 4D 41 50 >                db      "(MAP)"               // name string in 7-bit ascii, but
 555+ 65A0 29          >
 555+ 65A1             >                org     $-1                 // alter last byte of Name just above to set
 555+ 65A0 A9          >                db      {b $} | END_BIT     // msb as name end
 555+ 65A1             >
 555+ 65A1 5F 65       >                dw      last_NFA            // Link to previous definition Name
 555+ 65A3             >C_MAP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 555+ 65A3 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
 555+ 65A3             >                else
 555+ 65A3 A5 65       >                dw      $ + 2   ; ok        // is pointed by CFA
 555+ 65A5             >                endif           ; ok        // for other definitions it "points" the correct handler
 555+ 65A5             >                // Use of "; ok" to suppress "warning[fwdref]"
 555+ 65A5             >
 555+ 65A5             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 556+ 65A5 D9                           exx
 557+ 65A6 E1                           pop     hl
 558+ 65A7 7D                           ld      a, l
 559+ 65A8 C1                           pop     bc
 560+ 65A9 E1                           pop     hl
 561+ 65AA 50                           ld      d, b
 562+ 65AB 59                           ld      e, c
 563+ 65AC ED B1                        cpir
 564+ 65AE E1                           pop     hl
 565+ 65AF 20 05                        jr      nz, C_Map_Then
 565+ 65B1
 566+ 65B1 19                               add     hl, de
 567+ 65B2 2B                               dec     hl
 568+ 65B3 ED 42                            sbc     hl, bc
 569+ 65B5 7E                               ld      a, (hl)
 570+ 65B6              C_Map_Then:
 571+ 65B6 6F                           ld      l, a
 572+ 65B7 26 00                        ld      h, 0
 573+ 65B9 E5                           push    hl
 574+ 65BA D9                           exx
 575+ 65BB                              next
 575+ 65BB DD E9       >                jp      (ix)
 576+ 65BD
 577+ 65BD              //  ______________________________________________________________________
 578+ 65BD              //
 579+ 65BD              // (compare)    a1 a2 n -- b
 580+ 65BD              // this word performs a lexicographic compare of n bytes of text at address a1
 581+ 65BD              // with n bytes of text at address a2. It returns numeric a value:
 582+ 65BD              //  0 : if strings are equal
 583+ 65BD              // +1 : if string at a1 greater than string at a2
 584+ 65BD              // -1 : if string at a1 less than string at a2
 585+ 65BD              // strings can be 256 bytes in length at most.
 586+ 65BD                              New_Def C_COMPARE, "(COMPARE)", is_code, is_normal
 586+ 65BD             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 586+ 65BD             >
 586+ 65BD             >                // dummy db directives used to calculate length of namec
 586+ 65BD 28 43 4F 4D >                db      "(COMPARE)"
 586+ 65C1 50 41 52 45 >
 586+ 65C5 29          >
 586+ 65C6             >len_NFA         defl    $ - temp_NFA
 586+ 65C6             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 586+ 65BD             >
 586+ 65BD 89          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 586+ 65BE 28 43 4F 4D >                db      "(COMPARE)"               // name string in 7-bit ascii, but
 586+ 65C2 50 41 52 45 >
 586+ 65C6 29          >
 586+ 65C7             >                org     $-1                 // alter last byte of Name just above to set
 586+ 65C6 A9          >                db      {b $} | END_BIT     // msb as name end
 586+ 65C7             >
 586+ 65C7 9B 65       >                dw      last_NFA            // Link to previous definition Name
 586+ 65C9             >C_COMPARE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 586+ 65C9 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
 586+ 65C9             >                else
 586+ 65C9 CB 65       >                dw      $ + 2   ; ok        // is pointed by CFA
 586+ 65CB             >                endif           ; ok        // for other definitions it "points" the correct handler
 586+ 65CB             >                // Use of "; ok" to suppress "warning[fwdref]"
 586+ 65CB             >
 586+ 65CB             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 587+ 65CB D9                           exx
 588+ 65CC E1                           pop     hl                  // Number of bytes
 589+ 65CD 7D                           ld      a, l
 590+ 65CE E1                           pop     hl                  // hl points string a2
 591+ 65CF D1                           pop     de                  // hl points string a1
 592+ 65D0              //              push    bc                  // Instruction pointer on stack
 593+ 65D0 47                           ld      b, a
 594+ 65D1              C_Compare_Loop:
 595+ 65D1 7E                               ld      a, (hl)
 596+ 65D2 CD C6 64                         call    Case_Sensitive
 597+ 65D5 4F                               ld      c, a
 598+ 65D6 1A                               ld      a, (de)
 599+ 65D7 CD C6 64                         call    Case_Sensitive
 600+ 65DA B9                               cp      c
 601+ 65DB 13                               inc     de
 602+ 65DC 23                               inc     hl
 603+ 65DD 28 0E                            jr      z, C_Compare_Equal
 604+ 65DF 38 05                                jr      c, C_Compare_NotLessThan  // If LessThan
 605+ 65E1 21 01 00                                 ld      hl, 1               // a1 gt a2
 606+ 65E4 18 03                                jr      C_Compare_Then      // Else
 607+ 65E6              C_Compare_NotLessThan:
 608+ 65E6 21 FF FF                                 ld      hl, -1              // a1 lt a2
 609+ 65E9              C_Compare_Then:                                 // Endif
 610+ 65E9              //                      pop     bc              // restore Instruction Pointer
 611+ 65E9 E5                                   push    hl
 612+ 65EA D9                                   exx
 613+ 65EB
 614+ 65EB                                      next
 614+ 65EB DD E9       >                jp      (ix)
 615+ 65ED
 616+ 65ED              C_Compare_Equal:
 617+ 65ED 10 E2                        djnz    C_Compare_Loop
 618+ 65EF 21 00 00                     ld      hl, 0               // a1 eq a2
 619+ 65F2              //              pop     bc                  // restore Instruction Pointer
 620+ 65F2 E5                           push    hl
 621+ 65F3 D9                           exx
 622+ 65F4
 623+ 65F4                              next
 623+ 65F4 DD E9       >                jp      (ix)
 624+ 65F6
 625+ 65F6              //  ______________________________________________________________________
 626+ 65F6              //
 627+ 65F6              // emitc        c --
 628+ 65F6              // low level emit, calls ROM routine at #10 to send a character to
 629+ 65F6              // the the current channel (see SELECT to change stream-channel)
 630+ 65F6                              New_Def EMITC, "EMITC", is_code, is_normal
 630+ 65F6             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 630+ 65F6             >
 630+ 65F6             >                // dummy db directives used to calculate length of namec
 630+ 65F6 45 4D 49 54 >                db      "EMITC"
 630+ 65FA 43          >
 630+ 65FB             >len_NFA         defl    $ - temp_NFA
 630+ 65FB             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 630+ 65F6             >
 630+ 65F6 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 630+ 65F7 45 4D 49 54 >                db      "EMITC"               // name string in 7-bit ascii, but
 630+ 65FB 43          >
 630+ 65FC             >                org     $-1                 // alter last byte of Name just above to set
 630+ 65FB C3          >                db      {b $} | END_BIT     // msb as name end
 630+ 65FC             >
 630+ 65FC BD 65       >                dw      last_NFA            // Link to previous definition Name
 630+ 65FE             >EMITC:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 630+ 65FE ~           >                dw      runcode ; ok        // for primitive definitions  actual code
 630+ 65FE             >                else
 630+ 65FE 00 66       >                dw      $ + 2   ; ok        // is pointed by CFA
 630+ 6600             >                endif           ; ok        // for other definitions it "points" the correct handler
 630+ 6600             >                // Use of "; ok" to suppress "warning[fwdref]"
 630+ 6600             >
 630+ 6600             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 631+ 6600 E1                           pop     hl
 632+ 6601 7D                           ld      a, l
 633+ 6602              Emitc_Ptr:
 634+ 6602 C5                           push    bc
 635+ 6603 DD E5                        push    ix
 636+ 6605 D7                           rst     $10
 637+ 6606 DD E1                        pop     ix
 638+ 6608 C1                           pop     bc
 639+ 6609 3E FF                        ld      a, 255            // max possible
 640+ 660B 32 8C 5C                     ld      (SCR_CT), a
 641+ 660E
 642+ 660E                              next
 642+ 660E DD E9       >                jp      (ix)
 643+ 6610
 644+ 6610              Emitc_Vec:
 645+ 6610 55 66                        dw      C_Emit_Printable  // comma
 646+ 6612 5B 66                        dw      C_Emit_Bel        // bel
 647+ 6614 55 66                        dw      C_Emit_Printable  // bs
 648+ 6616 70 66                        dw      C_Emit_Tab        // tab
 649+ 6618 55 66                        dw      C_Emit_Printable  // cr
 650+ 661A 76 66                        dw      C_Emit_NL         // lf (unix newline)
 651+ 661C 55 66                        dw      C_Emit_Printable  // blank
 652+ 661E 55 66                        dw      C_Emit_Printable  // blank
 653+ 6620
 654+ 6620              Emit_Selector_Start:
 655+ 6620 06                           db      $06                 // comma
 656+ 6621 07                           db      $07                 // bel
 657+ 6622 08                           db      $08                 // bs
 658+ 6623 09                           db      $09                 // tab
 659+ 6624 0D                           db      $0D                 // cr
 660+ 6625 0A                           db      $0A                 // lf (unix newline)
 661+ 6626 20                           db      $20
 662+ 6627              Emit_Selector_End:
 663+ 6627 20                           db      $20
 664+ 6628
 665+ 6628              //  ______________________________________________________________________
 666+ 6628              //
 667+ 6628              // (?emit)      c1 -- c2 | c1
 668+ 6628              // decode a character to be sent via EMIT
 669+ 6628              // search first the Emit_Selector table, if found jump to the corresponding routine in Emit_Vector
 670+ 6628              // the routine should resolve anything and convert the character anyway.
 671+ 6628                              New_Def C_EMIT, "(?EMIT)", is_code, is_normal
 671+ 6628             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 671+ 6628             >
 671+ 6628             >                // dummy db directives used to calculate length of namec
 671+ 6628 28 3F 45 4D >                db      "(?EMIT)"
 671+ 662C 49 54 29    >
 671+ 662F             >len_NFA         defl    $ - temp_NFA
 671+ 662F             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 671+ 6628             >
 671+ 6628 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 671+ 6629 28 3F 45 4D >                db      "(?EMIT)"               // name string in 7-bit ascii, but
 671+ 662D 49 54 29    >
 671+ 6630             >                org     $-1                 // alter last byte of Name just above to set
 671+ 662F A9          >                db      {b $} | END_BIT     // msb as name end
 671+ 6630             >
 671+ 6630 F6 65       >                dw      last_NFA            // Link to previous definition Name
 671+ 6632             >C_EMIT:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 671+ 6632 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
 671+ 6632             >                else
 671+ 6632 34 66       >                dw      $ + 2   ; ok        // is pointed by CFA
 671+ 6634             >                endif           ; ok        // for other definitions it "points" the correct handler
 671+ 6634             >                // Use of "; ok" to suppress "warning[fwdref]"
 671+ 6634             >
 671+ 6634             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 672+ 6634 D1                           pop     de
 673+ 6635 7B                           ld      a, e                //  de has c1
 674+ 6636 E6 7F                        and     $7F                 // 7-bit ascii only
 675+ 6638 C5                           push    bc                  // save Instruction Pointer
 676+ 6639 01 08 00                     ld      bc, Emit_Selector_End - Emit_Selector_Start + 1
 677+ 663C 21 27 66                     ld      hl, Emit_Selector_End
 678+ 663F ED B9                        cpdr                        // search for c1 in Emit_Selector table, backward
 679+ 6641 20 0B                        jr      nz, C_Emit_Not_Found
 680+ 6643                                  // Found then decode it
 681+ 6643 21 10 66                         ld      hl, Emitc_Vec
 682+ 6646 09                               add     hl, bc
 683+ 6647 09                               add     hl, bc
 684+ 6648 5E                               ld      e, (hl)
 685+ 6649 23                               inc     hl
 686+ 664A 56                               ld      d, (hl)
 687+ 664B EB                               ex      de, hl
 688+ 664C C1                               pop     bc                  // restore Instruction Pointer
 689+ 664D E9                               jp      (hl)                // one of the following labels
 690+ 664E              C_Emit_Not_Found:
 691+ 664E C1                           pop     bc                  // restore Instruction Pointer
 692+ 664F FE 20                        cp      BLANK_CHAR          // cp $20 non-printable check
 693+ 6651 30 02                        jr      nc, C_Emit_Printable
 694+ 6653 3E 00                            ld      a, NUL_CHAR         // NUL is never "printed"
 695+ 6655              C_Emit_Printable:
 696+ 6655 6F                           ld      l, a
 697+ 6656 26 00                        ld      h, 0
 698+ 6658
 699+ 6658                              psh1
 699+ 6658 E5          >                push    hl
 699+ 6659 DD E9       >                jp      (ix)
 700+ 665B
 701+ 665B              C_Emit_Bel:
 702+ 665B C5                           push    bc                  // save Instruction Pointer
 703+ 665C 11 00 01                     ld      de, $0100
 704+ 665F 21 00 02                     ld      hl, $0200
 705+ 6662 DD E5                        push    ix                  // save Next Pointer
 706+ 6664 CD B6 03                     call    $03B6               // bleep Standard-ROM routine
 707+ 6667 DD E1                        pop     ix                  // restore Next Pointer
 708+ 6669 C1                           pop     bc                  // restore Instruction Pointer
 709+ 666A 21 00 00                     ld      hl, NUL_CHAR
 710+ 666D
 711+ 666D                              psh1
 711+ 666D E5          >                push    hl
 711+ 666E DD E9       >                jp      (ix)
 712+ 6670
 713+ 6670 21 06 00     C_Emit_Tab:     ld      hl, COMMA_CHAR
 714+ 6673
 715+ 6673                              psh1
 715+ 6673 E5          >                push    hl
 715+ 6674 DD E9       >                jp      (ix)
 716+ 6676
 717+ 6676 21 0D 00     C_Emit_NL       ld      hl, CR_CHAR           // 0x0A --> 0x0D  à la Spectrum
 718+ 6679
 719+ 6679                              psh1
 719+ 6679 E5          >                push    hl
 719+ 667A DD E9       >                jp      (ix)
 720+ 667C
 721+ 667C              //  ______________________________________________________________________
 722+ 667C
 723+ 667C              Key_Table:
 724+ 667C E2                           db      $E2                 //  0: STOP  --> SYMBOL+A : ~
 725+ 667D C3                           db      $C3                 //  1: NOT   --> SYMBOL+S : |
 726+ 667E CD                           db      $CD                 //  2: STEP  --> SYMBOl+D : //
 727+ 667F CC                           db      $CC                 //  3: TO    --> SYMBOL+F : {
 728+ 6680 CB                           db      $CB                 //  4: THEN  --> SYMBOL+G : }
 729+ 6681 C6                           db      $C6                 //  5: AND   --> SYMBOL+Y : [
 730+ 6682 C5                           db      $C5                 //  6: OR    --> SYMBOL+U : ]
 731+ 6683 AC                           db      $AC                 //  7: AT    --> SYMBOL+I : (C) copyright symbol
 732+ 6684 C7                           db      $C7                 //  8: <=    --> same as SHIFT-1 [EDIT]
 733+ 6685 C8                           db      $C8                 //  9: >=    --> same as SHIFT-0 [BACKSPACE]
 734+ 6686 C9                           db      $C9                 // 10: <>    --> SYMBOL+W is the same as CAPS (toggle) SHIFT+2
 735+ 6687              Key_MapTo:
 736+ 6687 06                           db      $06                 // 10: SYMBOL+W is the same as CAPS (toggle) SHIFT+2
 737+ 6688 0C                           db      $0C                 //  9: same as SHIFT-0 [BACKSPACE]
 738+ 6689 07                           db      $07                 //  8: same as SHIFT-1 [EDIT]
 739+ 668A 7F                           db      $7F                 //  7: SYMBOL+I : (C) copyright symbol
 740+ 668B 5D                           db      $5D                 //  6: SYMBOL+U : ]
 741+ 668C 5B                           db      $5B                 //  5: SYMBOL+Y : [
 742+ 668D 7D                           db      $7D                 //  4: SYMBOL+G : }
 743+ 668E 7B                           db      $7B                 //  3: SYMBOL+F : {
 744+ 668F 5C                           db      $5C                 //  2: SYMBOl+D : //
 745+ 6690 7C                           db      $7C                 //  1: SYMBOL+S : |
 746+ 6691 7E                           db      $7E                 //  0: SYMBOL+A : ~
 747+ 6692
 748+ 6692              //  ______________________________________________________________________
 749+ 6692              //
 750+ 6692              // key          -- c
 751+ 6692              // wait for a keypress
 752+ 6692              // This definition need Standard ROM Interrupt to be served
 753+ 6692
 754+ 6692                              New_Def KEY, "KEY", is_code, is_normal
 754+ 6692             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 754+ 6692             >
 754+ 6692             >                // dummy db directives used to calculate length of namec
 754+ 6692 4B 45 59    >                db      "KEY"
 754+ 6695             >len_NFA         defl    $ - temp_NFA
 754+ 6695             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 754+ 6692             >
 754+ 6692 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 754+ 6693 4B 45 59    >                db      "KEY"               // name string in 7-bit ascii, but
 754+ 6696             >                org     $-1                 // alter last byte of Name just above to set
 754+ 6695 D9          >                db      {b $} | END_BIT     // msb as name end
 754+ 6696             >
 754+ 6696 28 66       >                dw      last_NFA            // Link to previous definition Name
 754+ 6698             >KEY:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 754+ 6698 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
 754+ 6698             >                else
 754+ 6698 9A 66       >                dw      $ + 2   ; ok        // is pointed by CFA
 754+ 669A             >                endif           ; ok        // for other definitions it "points" the correct handler
 754+ 669A             >                // Use of "; ok" to suppress "warning[fwdref]"
 754+ 669A             >
 754+ 669A             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 755+ 669A
 756+ 669A C5                           push    bc                  // save Instruction Pointer
 757+ 669B DD E5                        push    ix
 758+ 669D
 759+ 669D ED 73 92 63                  ld      (SP_Saved), sp      // be sure to not to be paged out.
 760+ 66A1 31 61 63                     ld      sp, Cold_origin - 5 // maybe $4000 in the future...
 761+ 66A4 FD CB 01 AE                  res     5, (iy + 1)         // FLAGS (5C3A+1)
 762+ 66A8
 763+ 66A8              Key_Wait:
 764+ 66A8 76                               halt
 765+ 66A9 3E 02                            ld      a, 2                // selec channel #2 (Upper Video)
 766+ 66AB CD 01 16                         call    $1601               // SELECT Standard-ROM Routine
 767+ 66AE
 768+ 66AE                                  // software-flash: flips face every 320 ms
 769+ 66AE 3E 10                            ld      a, $10              // Timing based
 770+ 66B0 FD A6 3E                         and     (iy + $3E)          // FRAMES (5C3A+3E)
 771+ 66B3
 772+ 66B3 3A 8C 63                         ld      a, (Block_Face)     // see origin.asm
 773+ 66B6 20 0C                            jr      nz, Key_Cursor
 774+ 66B8 3A 8D 63                             ld      a, (Half_Face)      // see origin.asm
 775+ 66BB FD CB 30 5E                          bit     3, (iy + $30)       // FLAGS2 (5C3A+$30) that is CAPS-LOCK
 776+ 66BF 28 03                                jr      z, Key_Cursor
 777+ 66C1 3A 8E 63                                 ld      a, (Underscore_Face) // see origin
 778+ 66C4              Key_Cursor:
 779+ 66C4 D7                               rst     $10
 780+ 66C5 3E 08                            ld      a, BACKSPACE_CHAR    // backspace
 781+ 66C7 D7                               rst     $10
 782+ 66C8
 783+ 66C8 FD CB 01 6E                      bit     5, (iy + 1)         // FLAGS (5C3A+1)
 784+ 66CC 28 DA                        jr      z, Key_Wait
 785+ 66CE
 786+ 66CE 76                           halt    // this is to sync flashing cursor.
 787+ 66CF
 788+ 66CF 3E 20                        ld      a, BLANK_CHAR       // space to blank cursor
 789+ 66D1 D7                           rst     $10
 790+ 66D2 3E 08                        ld      a, BACKSPACE_CHAR   // backspace
 791+ 66D4 D7                           rst     $10
 792+ 66D5 3A 08 5C                     ld      a, (LASTK)          // get typed character (5C08)
 793+ 66D8
 794+ 66D8                              // decode character from above table
 795+ 66D8 21 7C 66                     ld      hl, Key_Table
 796+ 66DB 01 0B 00                     ld      bc, $000B
 797+ 66DE ED B1                        cpir
 798+ 66E0 20 05                        jr      nz, Key_DontMap
 799+ 66E2 21 87 66                         ld      hl, Key_MapTo
 800+ 66E5 09                               add     hl, bc
 801+ 66E6 7E                               ld      a, (hl)
 802+ 66E7 FE 06        Key_DontMap:    cp      $06                 // CAPS-LOCK management
 803+ 66E9 20 09                        jr      nz, Key_NoCapsLock
 804+ 66EB 21 6A 5C                         ld      hl, $5C6A           // FLAGS2
 805+ 66EE 7E                               ld      a, (hl)
 806+ 66EF EE 08                            xor     $08
 807+ 66F1 77                               ld      (hl), a
 808+ 66F2 3E 00                            ld      a, NUL_CHAR
 809+ 66F4 6F           Key_NoCapsLock: ld      l, a
 810+ 66F5 26 00                        ld      h, 0                // Prepare TOS
 811+ 66F7
 812+ 66F7 3A 48 5C                     ld      a, ($5C48)          // BORDCR system variable
 813+ 66FA 1F                           rra
 814+ 66FB 1F                           rra
 815+ 66FC 1F                           rra
 816+ 66FD F6 18                        or      $18                 // quick'n'dirty click
 817+ 66FF D3 FE                        out     ($fe), a
 818+ 6701 06 00                        ld      b, 0
 819+ 6703 10 FE                        djnz    $                   // wait loop
 820+ 6705 EE 18                        xor     $18
 821+ 6707 D3 FE                        out     ($fe), a
 822+ 6709
 823+ 6709 ED 7B 92 63                  ld      sp, (SP_Saved)
 824+ 670D
 825+ 670D DD E1                        pop     ix
 826+ 670F C1                           pop     bc                  // Restore Instruction Pointer
 827+ 6710
 828+ 6710                              psh1
 828+ 6710 E5          >                push    hl
 828+ 6711 DD E9       >                jp      (ix)
 829+ 6713
 830+ 6713              //  ______________________________________________________________________
 831+ 6713              //
 832+ 6713              // ?terminal    -- FALSE | TRUE
 833+ 6713              // test for BREAK keypress
 834+ 6713                              New_Def QTERMINAL, "?TERMINAL", is_code, is_normal
 834+ 6713             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 834+ 6713             >
 834+ 6713             >                // dummy db directives used to calculate length of namec
 834+ 6713 3F 54 45 52 >                db      "?TERMINAL"
 834+ 6717 4D 49 4E 41 >
 834+ 671B 4C          >
 834+ 671C             >len_NFA         defl    $ - temp_NFA
 834+ 671C             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 834+ 6713             >
 834+ 6713 89          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 834+ 6714 3F 54 45 52 >                db      "?TERMINAL"               // name string in 7-bit ascii, but
 834+ 6718 4D 49 4E 41 >
 834+ 671C 4C          >
 834+ 671D             >                org     $-1                 // alter last byte of Name just above to set
 834+ 671C CC          >                db      {b $} | END_BIT     // msb as name end
 834+ 671D             >
 834+ 671D 92 66       >                dw      last_NFA            // Link to previous definition Name
 834+ 671F             >QTERMINAL:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 834+ 671F ~           >                dw      runcode ; ok        // for primitive definitions  actual code
 834+ 671F             >                else
 834+ 671F 21 67       >                dw      $ + 2   ; ok        // is pointed by CFA
 834+ 6721             >                endif           ; ok        // for other definitions it "points" the correct handler
 834+ 6721             >                // Use of "; ok" to suppress "warning[fwdref]"
 834+ 6721             >
 834+ 6721             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 835+ 6721 21 00 00                     ld      hl, 0
 836+ 6724 ED 73 92 63                  ld      (SP_Saved), sp
 837+ 6728 31 61 63                     ld      sp, Cold_origin - 5
 838+ 672B CD 54 1F                     call    $1F54
 839+ 672E ED 7B 92 63                  ld      sp, (SP_Saved)
 840+ 6732
 841+ 6732 38 01                        jr      c, QTerminal_NoBreak
 842+ 6734 2B                               dec     hl                  // quick TRUE_FLAG
 843+ 6735              QTerminal_NoBreak:
 844+ 6735
 845+ 6735                              psh1
 845+ 6735 E5          >                push    hl
 845+ 6736 DD E9       >                jp      (ix)
 846+ 6738
 847+ 6738
 848+ 6738              //  ______________________________________________________________________
 849+ 6738              //
 850+ 6738              // inkey        -- c | 0
 851+ 6738              // call ROM inkey$ routine, returns c or "zero".
 852+ 6738
 853+ 6738                              New_Def INKEY, "INKEY", is_code, is_normal
 853+ 6738             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 853+ 6738             >
 853+ 6738             >                // dummy db directives used to calculate length of namec
 853+ 6738 49 4E 4B 45 >                db      "INKEY"
 853+ 673C 59          >
 853+ 673D             >len_NFA         defl    $ - temp_NFA
 853+ 673D             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 853+ 6738             >
 853+ 6738 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 853+ 6739 49 4E 4B 45 >                db      "INKEY"               // name string in 7-bit ascii, but
 853+ 673D 59          >
 853+ 673E             >                org     $-1                 // alter last byte of Name just above to set
 853+ 673D D9          >                db      {b $} | END_BIT     // msb as name end
 853+ 673E             >
 853+ 673E 13 67       >                dw      last_NFA            // Link to previous definition Name
 853+ 6740             >INKEY:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 853+ 6740 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
 853+ 6740             >                else
 853+ 6740 42 67       >                dw      $ + 2   ; ok        // is pointed by CFA
 853+ 6742             >                endif           ; ok        // for other definitions it "points" the correct handler
 853+ 6742             >                // Use of "; ok" to suppress "warning[fwdref]"
 853+ 6742             >
 853+ 6742             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 854+ 6742
 855+ 6742 C5                           push    bc
 856+ 6743 ED 73 92 63                  ld      (SP_Saved), sp
 857+ 6747 31 61 63                     ld      sp, Cold_origin - 5
 858+ 674A DD E5                        push    ix
 859+ 674C CD E6 15                     call    $15E6                   // instead of 15E9
 860+ 674F DD E1                        pop     ix
 861+ 6751 ED 7B 92 63                  ld      sp, (SP_Saved)
 862+ 6755 6F                           ld      l, a
 863+ 6756 26 00                        ld      h, 0
 864+ 6758 C1                           pop     bc
 865+ 6759                              psh1
 865+ 6759 E5          >                push    hl
 865+ 675A DD E9       >                jp      (ix)
 866+ 675C
 867+ 675C              //  ______________________________________________________________________
 868+ 675C              //
 869+ 675C              // select      n --
 870+ 675C              // selects the given channel number
 871+ 675C
 872+ 675C                              New_Def SELECT, "SELECT", is_code, is_normal
 872+ 675C             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 872+ 675C             >
 872+ 675C             >                // dummy db directives used to calculate length of namec
 872+ 675C 53 45 4C 45 >                db      "SELECT"
 872+ 6760 43 54       >
 872+ 6762             >len_NFA         defl    $ - temp_NFA
 872+ 6762             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 872+ 675C             >
 872+ 675C 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 872+ 675D 53 45 4C 45 >                db      "SELECT"               // name string in 7-bit ascii, but
 872+ 6761 43 54       >
 872+ 6763             >                org     $-1                 // alter last byte of Name just above to set
 872+ 6762 D4          >                db      {b $} | END_BIT     // msb as name end
 872+ 6763             >
 872+ 6763 38 67       >                dw      last_NFA            // Link to previous definition Name
 872+ 6765             >SELECT:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 872+ 6765 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
 872+ 6765             >                else
 872+ 6765 67 67       >                dw      $ + 2   ; ok        // is pointed by CFA
 872+ 6767             >                endif           ; ok        // for other definitions it "points" the correct handler
 872+ 6767             >                // Use of "; ok" to suppress "warning[fwdref]"
 872+ 6767             >
 872+ 6767             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 873+ 6767 E1                           pop     hl
 874+ 6768 C5                           push    bc
 875+ 6769 7D                           ld      a, l
 876+ 676A ED 73 92 63                  ld      (SP_Saved), sp
 877+ 676E 31 61 63                     ld      sp, Cold_origin - 5
 878+ 6771 DD E5                        push    ix
 879+ 6773 CD 01 16                     call    $1601
 880+ 6776 DD E1                        pop     ix
 881+ 6778 ED 7B 92 63                  ld      sp, (SP_Saved)
 882+ 677C C1                           pop     bc
 883+ 677D
 884+ 677D                              next
 884+ 677D DD E9       >                jp      (ix)
 885+ 677F
 886+ 677F              //  ______________________________________________________________________
 887+ 677F              //
 888+ 677F              // ZX Spectrum Next - Low Level disk primitives.
 889+ 677F              // this include is "here" for backward compatibility
 890+ 677F
 891+ 677F                              include "next-opt0.asm"
# file opened: C:\Zx\CSpect\Projects\vForth15_INDIRECT/source/next-opt0.asm
   1++677F              //  ______________________________________________________________________
   2++677F              //
   3++677F              //  next-opt.asm
   4++677F              //
   5++677F              //  ZX Spectrum Next - peculiar definitions
   6++677F              //  ______________________________________________________________________
   7++677F
   8++677F              //  ______________________________________________________________________
   9++677F              //
  10++677F              // f_seek       d u -- f
  11++677F              // Seek to position d in file-handle u.
  12++677F              // Return a false-flag 0 on success, True flag on error
  13++677F                              New_Def F_SEEK, "F_SEEK", is_code, is_normal
  13++677F             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  13++677F             >
  13++677F             >                // dummy db directives used to calculate length of namec
  13++677F 46 5F 53 45 >                db      "F_SEEK"
  13++6783 45 4B       >
  13++6785             >len_NFA         defl    $ - temp_NFA
  13++6785             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  13++677F             >
  13++677F 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  13++6780 46 5F 53 45 >                db      "F_SEEK"               // name string in 7-bit ascii, but
  13++6784 45 4B       >
  13++6786             >                org     $-1                 // alter last byte of Name just above to set
  13++6785 CB          >                db      {b $} | END_BIT     // msb as name end
  13++6786             >
  13++6786 5C 67       >                dw      last_NFA            // Link to previous definition Name
  13++6788             >F_SEEK:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
  13++6788 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
  13++6788             >                else
  13++6788 8A 67       >                dw      $ + 2   ; ok        // is pointed by CFA
  13++678A             >                endif           ; ok        // for other definitions it "points" the correct handler
  13++678A             >                // Use of "; ok" to suppress "warning[fwdref]"
  13++678A             >
  13++678A             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  14++678A E1                           pop     hl                  // file-handle
  15++678B 7D                           ld      a, l                // file-handle
  16++678C 60                           ld      h, b                // save Intruction Pointer
  17++678D 69                           ld      l, c
  18++678E C1                           pop     bc                  // bc has high-word of d
  19++678F D1                           pop     de
  20++6790 DD E5                        push    ix
  21++6792 E5                           push    hl                  // save Instruction Pointer
  22++6793 DD 21 00 00                  ld      ix, 0
  23++6797 CF                           rst     $08
  24++6798 9F                           db      $9F
  25++6799              F_Seek_Exit:
  26++6799 C1                           pop     bc                  // restore Instruction Pointer
  27++679A DD E1                        pop     ix
  28++679C ED 62                        sbc     hl, hl              // to get 0 or -1
  29++679E
  30++679E                              psh1
  30++679E E5          >                push    hl
  30++679F DD E9       >                jp      (ix)
  31++67A1
  32++67A1              //  ______________________________________________________________________
  33++67A1              //
  34++67A1              // f_close      u -- f
  35++67A1              // Close file-handle u.
  36++67A1              // Return 0 on success, True flag on error
  37++67A1
  38++67A1                              New_Def F_CLOSE, "F_CLOSE", is_code, is_normal
  38++67A1             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  38++67A1             >
  38++67A1             >                // dummy db directives used to calculate length of namec
  38++67A1 46 5F 43 4C >                db      "F_CLOSE"
  38++67A5 4F 53 45    >
  38++67A8             >len_NFA         defl    $ - temp_NFA
  38++67A8             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  38++67A1             >
  38++67A1 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  38++67A2 46 5F 43 4C >                db      "F_CLOSE"               // name string in 7-bit ascii, but
  38++67A6 4F 53 45    >
  38++67A9             >                org     $-1                 // alter last byte of Name just above to set
  38++67A8 C5          >                db      {b $} | END_BIT     // msb as name end
  38++67A9             >
  38++67A9 7F 67       >                dw      last_NFA            // Link to previous definition Name
  38++67AB             >F_CLOSE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
  38++67AB ~           >                dw      runcode ; ok        // for primitive definitions  actual code
  38++67AB             >                else
  38++67AB AD 67       >                dw      $ + 2   ; ok        // is pointed by CFA
  38++67AD             >                endif           ; ok        // for other definitions it "points" the correct handler
  38++67AD             >                // Use of "; ok" to suppress "warning[fwdref]"
  38++67AD             >
  38++67AD             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  39++67AD
  40++67AD E1                           pop     hl
  41++67AE 7D                           ld      a, l                // file-handle
  42++67AF DD E5                        push    ix
  43++67B1 C5                           push    bc                  // Save Instruction pointer
  44++67B2 CF                           rst     $08
  45++67B3 9B                           db      $9B
  46++67B4 18 E3                        jr      F_Seek_Exit
  47++67B6              //              pop     bc
  48++67B6              //              pop     ix
  49++67B6              //              sbc     hl, hl
  50++67B6              //              psh1
  51++67B6
  52++67B6              //  ______________________________________________________________________
  53++67B6              //
  54++67B6              // f_sync      u -- f
  55++67B6              // Close file-handle u.
  56++67B6              // Return 0 on success, True flag on error
  57++67B6
  58++67B6                              New_Def F_SYNC, "F_SYNC", is_code, is_normal
  58++67B6             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  58++67B6             >
  58++67B6             >                // dummy db directives used to calculate length of namec
  58++67B6 46 5F 53 59 >                db      "F_SYNC"
  58++67BA 4E 43       >
  58++67BC             >len_NFA         defl    $ - temp_NFA
  58++67BC             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  58++67B6             >
  58++67B6 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  58++67B7 46 5F 53 59 >                db      "F_SYNC"               // name string in 7-bit ascii, but
  58++67BB 4E 43       >
  58++67BD             >                org     $-1                 // alter last byte of Name just above to set
  58++67BC C3          >                db      {b $} | END_BIT     // msb as name end
  58++67BD             >
  58++67BD A1 67       >                dw      last_NFA            // Link to previous definition Name
  58++67BF             >F_SYNC:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
  58++67BF ~           >                dw      runcode ; ok        // for primitive definitions  actual code
  58++67BF             >                else
  58++67BF C1 67       >                dw      $ + 2   ; ok        // is pointed by CFA
  58++67C1             >                endif           ; ok        // for other definitions it "points" the correct handler
  58++67C1             >                // Use of "; ok" to suppress "warning[fwdref]"
  58++67C1             >
  58++67C1             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  59++67C1 E1                           pop     hl
  60++67C2 7D                           ld      a, l                // file-handle
  61++67C3 DD E5                        push    ix
  62++67C5 C5                           push    bc
  63++67C6 CF                           rst     $08
  64++67C7 9C                           db      $9C
  65++67C8 18 CF                        jr      F_Seek_Exit
  66++67CA              //              pop     bc
  67++67CA              //              pop     ix
  68++67CA              //              sbc     hl, hl
  69++67CA              //              psh1
  70++67CA
  71++67CA              //  ______________________________________________________________________
  72++67CA              //
  73++67CA              // f_fgetpos    u -- d f
  74++67CA              // Seek to position d in file-handle u.
  75++67CA              // Return a false-flag 0 on success, True flag on error
  76++67CA                              New_Def F_FGETPOS, "F_FGETPOS", is_code, is_normal
  76++67CA             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  76++67CA             >
  76++67CA             >                // dummy db directives used to calculate length of namec
  76++67CA 46 5F 46 47 >                db      "F_FGETPOS"
  76++67CE 45 54 50 4F >
  76++67D2 53          >
  76++67D3             >len_NFA         defl    $ - temp_NFA
  76++67D3             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  76++67CA             >
  76++67CA 89          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  76++67CB 46 5F 46 47 >                db      "F_FGETPOS"               // name string in 7-bit ascii, but
  76++67CF 45 54 50 4F >
  76++67D3 53          >
  76++67D4             >                org     $-1                 // alter last byte of Name just above to set
  76++67D3 D3          >                db      {b $} | END_BIT     // msb as name end
  76++67D4             >
  76++67D4 B6 67       >                dw      last_NFA            // Link to previous definition Name
  76++67D6             >F_FGETPOS:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
  76++67D6 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
  76++67D6             >                else
  76++67D6 D8 67       >                dw      $ + 2   ; ok        // is pointed by CFA
  76++67D8             >                endif           ; ok        // for other definitions it "points" the correct handler
  76++67D8             >                // Use of "; ok" to suppress "warning[fwdref]"
  76++67D8             >
  76++67D8             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  77++67D8 E1                           pop     hl
  78++67D9 7D                           ld      a, l                // file-handle
  79++67DA DD E5                        push    ix
  80++67DC C5                           push    bc
  81++67DD CF                           rst     $08
  82++67DE A0                           db      $A0
  83++67DF E1                           pop     hl                  // restore Instruction Pointer
  84++67E0 DD E1                        pop     ix
  85++67E2 D5                           push    de
  86++67E3 C5                           push    bc
  87++67E4 44                           ld      b, h                // restore Instruction Pointer
  88++67E5 4D                           ld      c, l
  89++67E6 ED 62                        sbc     hl, hl
  90++67E8
  91++67E8                              psh1
  91++67E8 E5          >                push    hl
  91++67E9 DD E9       >                jp      (ix)
  92++67EB
  93++67EB              //  ______________________________________________________________________
  94++67EB              //
  95++67EB              // f_read       a b u -- n f
  96++67EB              // Read b bytes from file-handle u to address a
  97++67EB              // Return the actual number n of bytes read
  98++67EB              // Return 0 on success, True flag on error
  99++67EB                              New_Def F_READ, "F_READ", is_code, is_normal
  99++67EB             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  99++67EB             >
  99++67EB             >                // dummy db directives used to calculate length of namec
  99++67EB 46 5F 52 45 >                db      "F_READ"
  99++67EF 41 44       >
  99++67F1             >len_NFA         defl    $ - temp_NFA
  99++67F1             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  99++67EB             >
  99++67EB 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  99++67EC 46 5F 52 45 >                db      "F_READ"               // name string in 7-bit ascii, but
  99++67F0 41 44       >
  99++67F2             >                org     $-1                 // alter last byte of Name just above to set
  99++67F1 C4          >                db      {b $} | END_BIT     // msb as name end
  99++67F2             >
  99++67F2 CA 67       >                dw      last_NFA            // Link to previous definition Name
  99++67F4             >F_READ:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
  99++67F4 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
  99++67F4             >                else
  99++67F4 F6 67       >                dw      $ + 2   ; ok        // is pointed by CFA
  99++67F6             >                endif           ; ok        // for other definitions it "points" the correct handler
  99++67F6             >                // Use of "; ok" to suppress "warning[fwdref]"
  99++67F6             >
  99++67F6             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 100++67F6
 101++67F6 50                           ld      d, b
 102++67F7 59                           ld      e, c
 103++67F8 E1                           pop     hl
 104++67F9 7D                           ld      a, l                // file-handle
 105++67FA C1                           pop     bc                  // bc has bytes to read
 106++67FB DD E3                        ex      (sp), ix            // ix has address
 107++67FD D5                           push    de                  // Save Instruction pointer
 108++67FE CF                           rst     $08
 109++67FF 9D                           db      $9D
 110++6800              F_Read_Exit:
 111++6800 C1                           pop     bc                  // Restore Instruction pointer
 112++6801 DD E1                        pop     ix                  // Restore ix
 113++6803 D5                           push    de                  // bytes written
 114++6804 ED 62                        sbc     hl, hl
 115++6806
 116++6806                              psh1
 116++6806 E5          >                push    hl
 116++6807 DD E9       >                jp      (ix)
 117++6809
 118++6809              //  ______________________________________________________________________
 119++6809              //
 120++6809              // f_write      a b u -- n f
 121++6809              // Write bytes currently stored at address a to file-handle u.
 122++6809              // Return the actual n bytes written and 0 on success, True flag on error.
 123++6809                              New_Def F_WRITE, "F_WRITE", is_code, is_normal
 123++6809             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 123++6809             >
 123++6809             >                // dummy db directives used to calculate length of namec
 123++6809 46 5F 57 52 >                db      "F_WRITE"
 123++680D 49 54 45    >
 123++6810             >len_NFA         defl    $ - temp_NFA
 123++6810             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 123++6809             >
 123++6809 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 123++680A 46 5F 57 52 >                db      "F_WRITE"               // name string in 7-bit ascii, but
 123++680E 49 54 45    >
 123++6811             >                org     $-1                 // alter last byte of Name just above to set
 123++6810 C5          >                db      {b $} | END_BIT     // msb as name end
 123++6811             >
 123++6811 EB 67       >                dw      last_NFA            // Link to previous definition Name
 123++6813             >F_WRITE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 123++6813 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
 123++6813             >                else
 123++6813 15 68       >                dw      $ + 2   ; ok        // is pointed by CFA
 123++6815             >                endif           ; ok        // for other definitions it "points" the correct handler
 123++6815             >                // Use of "; ok" to suppress "warning[fwdref]"
 123++6815             >
 123++6815             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 124++6815
 125++6815 50                           ld      d, b
 126++6816 59                           ld      e, c
 127++6817 E1                           pop     hl
 128++6818 7D                           ld      a, l                // file-handle
 129++6819 C1                           pop     bc                  // bc has bytes to read
 130++681A DD E3                        ex      (sp), ix            // ix has address
 131++681C D5                           push    de                  // Save Instruction pointer
 132++681D CF                           rst     $08
 133++681E 9E                           db      $9E
 134++681F 18 DF                        jr F_Read_Exit
 135++6821              //              pop     bc                  // Restore Instruction pointer
 136++6821              //              pop     ix                  // Restore ix
 137++6821              //              push    de                  // bytes written
 138++6821              //              sbc     hl, hl
 139++6821              //
 140++6821              //              psh1
 141++6821
 142++6821              //  ______________________________________________________________________
 143++6821              //
 144++6821              // f_open       a1 a2 b -- u f
 145++6821              // open a file
 146++6821              // a1 (filespec) is a null-terminated string, such as produced by ," definition
 147++6821              // a2 is address to an 8-byte header data used in some cases.
 148++6821              // b is access mode-byte, that is a combination of:
 149++6821              // any/all of:
 150++6821              //   esx_mode_read          $01 request read access
 151++6821              //   esx_mode_write         $02 request write access
 152++6821              //   esx_mode_use_header    $40 read/write +3DOS header
 153++6821              // plus one of:
 154++6821              //   esx_mode_open_exist    $00 only open existing file
 155++6821              //   esx_mode_open_creat    $08 open existing or create file
 156++6821              //   esx_mode_creat_noexist $04 create new file, error if exists
 157++6821              //   esx_mode_creat_trunc   $0c create new file, delete existing
 158++6821              // Return file-handle u and 0 on success, True flag on error
 159++6821                              New_Def F_OPEN, "F_OPEN", is_code, is_normal
 159++6821             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 159++6821             >
 159++6821             >                // dummy db directives used to calculate length of namec
 159++6821 46 5F 4F 50 >                db      "F_OPEN"
 159++6825 45 4E       >
 159++6827             >len_NFA         defl    $ - temp_NFA
 159++6827             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 159++6821             >
 159++6821 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 159++6822 46 5F 4F 50 >                db      "F_OPEN"               // name string in 7-bit ascii, but
 159++6826 45 4E       >
 159++6828             >                org     $-1                 // alter last byte of Name just above to set
 159++6827 CE          >                db      {b $} | END_BIT     // msb as name end
 159++6828             >
 159++6828 09 68       >                dw      last_NFA            // Link to previous definition Name
 159++682A             >F_OPEN:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 159++682A ~           >                dw      runcode ; ok        // for primitive definitions  actual code
 159++682A             >                else
 159++682A 2C 68       >                dw      $ + 2   ; ok        // is pointed by CFA
 159++682C             >                endif           ; ok        // for other definitions it "points" the correct handler
 159++682C             >                // Use of "; ok" to suppress "warning[fwdref]"
 159++682C             >
 159++682C             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 160++682C 60                           ld      h, b                // Save Instruction pointer
 161++682D 69                           ld      l, c
 162++682E C1                           pop     bc                  // file-mode
 163++682F 41                           ld      b, c                // file-mode
 164++6830 D1                           pop     de                  // 8-bytes buffer if any
 165++6831 DD E3                        ex      (sp), ix            // filespec nul-terminated
 166++6833 E5                           push    hl                  // Save Instruction pointer
 167++6834 3E 2A                        ld      a, "*"
 168++6836 CF                           rst     $08
 169++6837 9A                           db      $9A
 170++6838              F_Open_Exit:
 171++6838 C1                           pop     bc
 172++6839 DD E1                        pop     ix
 173++683B ED 62                        sbc     hl, hl
 174++683D 5F                           ld      e, a
 175++683E 16 00                        ld      d, 0
 176++6840
 177++6840
 178++6840                              psh2
 178++6840 D5          >                push    de
 178++6841 E5          >                push    hl
 178++6842 DD E9       >                jp      (ix)
 179++6844
 180++6844              //   \ CREATE FILENAME ," test.txt"   \ new Counted String
 181++6844              //   \ FILENAME 1+ PAD 1 F_OPEN
 182++6844              //   \ DROP
 183++6844              //   \ F_CLOSE
 184++6844
 185++6844
 186++6844              //  ______________________________________________________________________
 187++6844              //
 188++6844              // f_opendir    a1 a2 b -- u f
 189++6844              // open a file
 190++6844                              New_Def F_OPENDIR, "F_OPENDIR", is_code, is_normal
 190++6844             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 190++6844             >
 190++6844             >                // dummy db directives used to calculate length of namec
 190++6844 46 5F 4F 50 >                db      "F_OPENDIR"
 190++6848 45 4E 44 49 >
 190++684C 52          >
 190++684D             >len_NFA         defl    $ - temp_NFA
 190++684D             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 190++6844             >
 190++6844 89          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 190++6845 46 5F 4F 50 >                db      "F_OPENDIR"               // name string in 7-bit ascii, but
 190++6849 45 4E 44 49 >
 190++684D 52          >
 190++684E             >                org     $-1                 // alter last byte of Name just above to set
 190++684D D2          >                db      {b $} | END_BIT     // msb as name end
 190++684E             >
 190++684E 21 68       >                dw      last_NFA            // Link to previous definition Name
 190++6850             >F_OPENDIR:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 190++6850 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
 190++6850             >                else
 190++6850 52 68       >                dw      $ + 2   ; ok        // is pointed by CFA
 190++6852             >                endif           ; ok        // for other definitions it "points" the correct handler
 190++6852             >                // Use of "; ok" to suppress "warning[fwdref]"
 190++6852             >
 190++6852             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 191++6852 DD E3                        ex      (sp), ix            // filespec nul-terminated
 192++6854 C5                           push    bc                  // Save Instruction pointer
 193++6855 06 10                        ld      b, $10              // file-mode
 194++6857 3E 43                        ld      a, "C"
 195++6859 CF                           rst     $08
 196++685A A3                           db      $A3
 197++685B 18 DB                        jr      F_Open_Exit
 198++685D
 199++685D
 200++685D              //  ______________________________________________________________________
 201++685D              //
 202++685D              // f_readdir    a1 a2 b -- u f
 203++685D              // open a file
 204++685D                              New_Def F_READDIR, "F_READDIR", is_code, is_normal
 204++685D             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 204++685D             >
 204++685D             >                // dummy db directives used to calculate length of namec
 204++685D 46 5F 52 45 >                db      "F_READDIR"
 204++6861 41 44 44 49 >
 204++6865 52          >
 204++6866             >len_NFA         defl    $ - temp_NFA
 204++6866             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 204++685D             >
 204++685D 89          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 204++685E 46 5F 52 45 >                db      "F_READDIR"               // name string in 7-bit ascii, but
 204++6862 41 44 44 49 >
 204++6866 52          >
 204++6867             >                org     $-1                 // alter last byte of Name just above to set
 204++6866 D2          >                db      {b $} | END_BIT     // msb as name end
 204++6867             >
 204++6867 44 68       >                dw      last_NFA            // Link to previous definition Name
 204++6869             >F_READDIR:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 204++6869 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
 204++6869             >                else
 204++6869 6B 68       >                dw      $ + 2   ; ok        // is pointed by CFA
 204++686B             >                endif           ; ok        // for other definitions it "points" the correct handler
 204++686B             >                // Use of "; ok" to suppress "warning[fwdref]"
 204++686B             >
 204++686B             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 205++686B E1                           pop     hl
 206++686C 7D                           ld      a, l
 207++686D D1                           pop     de
 208++686E DD E3                        ex      (sp), ix            // filespec nul-terminated
 209++6870 C5                           push    bc                  // Save Instruction pointer
 210++6871 CF                           rst     $08
 211++6872 A4                           db      $A4
 212++6873 18 C3                        jr      F_Open_Exit
 213++6875
# file closed: C:\Zx\CSpect\Projects\vForth15_INDIRECT/source/next-opt0.asm
 892+ 6875
 893+ 6875
 894+ 6875              //  ______________________________________________________________________
 895+ 6875              //
 896+ 6875              // cr           --
 897+ 6875              // send a CR via EMITC
 898+ 6875                              New_Def CR, "CR", is_code, is_normal
 898+ 6875             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 898+ 6875             >
 898+ 6875             >                // dummy db directives used to calculate length of namec
 898+ 6875 43 52       >                db      "CR"
 898+ 6877             >len_NFA         defl    $ - temp_NFA
 898+ 6877             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 898+ 6875             >
 898+ 6875 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 898+ 6876 43 52       >                db      "CR"               // name string in 7-bit ascii, but
 898+ 6878             >                org     $-1                 // alter last byte of Name just above to set
 898+ 6877 D2          >                db      {b $} | END_BIT     // msb as name end
 898+ 6878             >
 898+ 6878 5D 68       >                dw      last_NFA            // Link to previous definition Name
 898+ 687A             >CR:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 898+ 687A ~           >                dw      runcode ; ok        // for primitive definitions  actual code
 898+ 687A             >                else
 898+ 687A 7C 68       >                dw      $ + 2   ; ok        // is pointed by CFA
 898+ 687C             >                endif           ; ok        // for other definitions it "points" the correct handler
 898+ 687C             >                // Use of "; ok" to suppress "warning[fwdref]"
 898+ 687C             >
 898+ 687C             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 899+ 687C
 900+ 687C 3E 0D                        ld      a, CR_CHAR
 901+ 687E C3 02 66                     jp      Emitc_Ptr
 902+ 6881
 903+ 6881              //  ______________________________________________________________________
 904+ 6881              //
 905+ 6881              // cmove    a1 a2 u --
 906+ 6881              // If u > 0, moves memory content starting at address a1 for n bytes long
 907+ 6881              // storing then starting at address addr2.
 908+ 6881              // The content of a1 is moved first. See CMOVE> also.
 909+ 6881                              New_Def CMOVE, "CMOVE", is_code, is_normal
 909+ 6881             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 909+ 6881             >
 909+ 6881             >                // dummy db directives used to calculate length of namec
 909+ 6881 43 4D 4F 56 >                db      "CMOVE"
 909+ 6885 45          >
 909+ 6886             >len_NFA         defl    $ - temp_NFA
 909+ 6886             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 909+ 6881             >
 909+ 6881 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 909+ 6882 43 4D 4F 56 >                db      "CMOVE"               // name string in 7-bit ascii, but
 909+ 6886 45          >
 909+ 6887             >                org     $-1                 // alter last byte of Name just above to set
 909+ 6886 C5          >                db      {b $} | END_BIT     // msb as name end
 909+ 6887             >
 909+ 6887 75 68       >                dw      last_NFA            // Link to previous definition Name
 909+ 6889             >CMOVE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 909+ 6889 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
 909+ 6889             >                else
 909+ 6889 8B 68       >                dw      $ + 2   ; ok        // is pointed by CFA
 909+ 688B             >                endif           ; ok        // for other definitions it "points" the correct handler
 909+ 688B             >                // Use of "; ok" to suppress "warning[fwdref]"
 909+ 688B             >
 909+ 688B             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 910+ 688B D9                           exx
 911+ 688C C1                           pop     bc                  // bc has counter
 912+ 688D D1                           pop     de                  // de now has dest
 913+ 688E E1                           pop     hl                  // hl has source, save Instruction Pointer
 914+ 688F 78                           ld      a, b
 915+ 6890 B1                           or      c
 916+ 6891 28 02                        jr      z, Cmove_NoMove
 917+ 6893 ED B0                            ldir
 918+ 6895              Cmove_NoMove:
 919+ 6895 D9                           exx
 920+ 6896                              next
 920+ 6896 DD E9       >                jp      (ix)
 921+ 6898
 922+ 6898              //  ______________________________________________________________________
 923+ 6898              //
 924+ 6898              // cmove>    a1 a2 u --
 925+ 6898              // If u > 0, moves memory content starting at address a1 for n bytes long
 926+ 6898              // storing then starting at address addr2.
 927+ 6898              // The content of a1 is moved last. See cmove.
 928+ 6898                              New_Def CMOVE_TO, "CMOVE>", is_code, is_normal
 928+ 6898             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 928+ 6898             >
 928+ 6898             >                // dummy db directives used to calculate length of namec
 928+ 6898 43 4D 4F 56 >                db      "CMOVE>"
 928+ 689C 45 3E       >
 928+ 689E             >len_NFA         defl    $ - temp_NFA
 928+ 689E             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 928+ 6898             >
 928+ 6898 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 928+ 6899 43 4D 4F 56 >                db      "CMOVE>"               // name string in 7-bit ascii, but
 928+ 689D 45 3E       >
 928+ 689F             >                org     $-1                 // alter last byte of Name just above to set
 928+ 689E BE          >                db      {b $} | END_BIT     // msb as name end
 928+ 689F             >
 928+ 689F 81 68       >                dw      last_NFA            // Link to previous definition Name
 928+ 68A1             >CMOVE_TO:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 928+ 68A1 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
 928+ 68A1             >                else
 928+ 68A1 A3 68       >                dw      $ + 2   ; ok        // is pointed by CFA
 928+ 68A3             >                endif           ; ok        // for other definitions it "points" the correct handler
 928+ 68A3             >                // Use of "; ok" to suppress "warning[fwdref]"
 928+ 68A3             >
 928+ 68A3             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 929+ 68A3 D9                           exx
 930+ 68A4 C1                           pop     bc                  // bc has counter
 931+ 68A5 D1                           pop     de                  // de has dest
 932+ 68A6 E1                           pop     hl                  // hl has source, save Instruction Pointer
 933+ 68A7 78                           ld      a, b
 934+ 68A8 B1                           or      c
 935+ 68A9 28 08                        jr      z, CmoveV_NoMove
 936+ 68AB EB                               ex      de, hl              // compute address to
 937+ 68AC 09                               add     hl, bc              // operate backward
 938+ 68AD 2B                               dec     hl
 939+ 68AE EB                               ex      de, hl
 940+ 68AF 09                               add     hl, bc
 941+ 68B0 2B                               dec     hl
 942+ 68B1 ED B8                            lddr                        // backward
 943+ 68B3              CmoveV_NoMove:
 944+ 68B3 D9                           exx
 945+ 68B4                              next
 945+ 68B4 DD E9       >                jp      (ix)
 946+ 68B6
 947+ 68B6              //  ______________________________________________________________________
 948+ 68B6              //
 949+ 68B6              // um*      u1 u2 -- ud
 950+ 68B6              // Unsigned multiplication
 951+ 68B6              // A double-integer is kept in CPU registers as DEHL then pushed on stack.
 952+ 68B6              // On the stack a double number is treated as two single numbers
 953+ 68B6              // where DE is on the top of the stack and HL is the second from top,
 954+ 68B6              // Instead, in 2VARIABLE a double number is stored as EDLH.
 955+ 68B6              // this definition could use "MUL" Z80N new op-code.
 956+ 68B6                              New_Def UM_MUL, "UM*", is_code, is_normal
 956+ 68B6             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 956+ 68B6             >
 956+ 68B6             >                // dummy db directives used to calculate length of namec
 956+ 68B6 55 4D 2A    >                db      "UM*"
 956+ 68B9             >len_NFA         defl    $ - temp_NFA
 956+ 68B9             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 956+ 68B6             >
 956+ 68B6 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 956+ 68B7 55 4D 2A    >                db      "UM*"               // name string in 7-bit ascii, but
 956+ 68BA             >                org     $-1                 // alter last byte of Name just above to set
 956+ 68B9 AA          >                db      {b $} | END_BIT     // msb as name end
 956+ 68BA             >
 956+ 68BA 98 68       >                dw      last_NFA            // Link to previous definition Name
 956+ 68BC             >UM_MUL:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 956+ 68BC ~           >                dw      runcode ; ok        // for primitive definitions  actual code
 956+ 68BC             >                else
 956+ 68BC BE 68       >                dw      $ + 2   ; ok        // is pointed by CFA
 956+ 68BE             >                endif           ; ok        // for other definitions it "points" the correct handler
 956+ 68BE             >                // Use of "; ok" to suppress "warning[fwdref]"
 956+ 68BE             >
 956+ 68BE             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 957+ 68BE D9                           exx
 958+ 68BF D1                           pop     de                    // de has u2 operand
 959+ 68C0 E1                           pop     hl                    // hl has u1 operand
 960+ 68C1 45                           ld      b, l
 961+ 68C2 4B                           ld      c, e
 962+ 68C3 5D                           ld      e, l
 963+ 68C4 6A                           ld      l, d
 964+ 68C5 E5                           push    hl
 965+ 68C6 69                           ld      l, c
 966+ 68C7 ED 30                        mul
 967+ 68C9 EB                           ex      de, hl
 968+ 68CA ED 30                        mul
 969+ 68CC AF                           xor     a
 970+ 68CD 19                           add     hl, de
 971+ 68CE 8F                           adc     a
 972+ 68CF 59                           ld      e, c
 973+ 68D0 50                           ld      d, b
 974+ 68D1 ED 30                        mul
 975+ 68D3 47                           ld      b, a
 976+ 68D4 4C                           ld      c, h
 977+ 68D5 7A                           ld      a, d
 978+ 68D6 85                           add     l
 979+ 68D7 67                           ld      h, a
 980+ 68D8 6B                           ld      l, e
 981+ 68D9 D1                           pop     de
 982+ 68DA ED 30                        mul
 983+ 68DC EB                           ex      de, hl
 984+ 68DD ED 4A                        adc     hl, bc
 985+ 68DF D5                           push    de
 986+ 68E0 E5                           push    hl
 987+ 68E1 D9                           exx
 988+ 68E2                              next
 988+ 68E2 DD E9       >                jp      (ix)
 989+ 68E4
 990+ 68E4              //  ______________________________________________________________________
 991+ 68E4              //
 992+ 68E4              // um/mod      ud u1 -- q r
 993+ 68E4              // divides ud into u1 giving quotient q and remainder r
 994+ 68E4              // algorithm takes 16 bit at a time starting from msb
 995+ 68E4              // DE grows from lsb upward with quotient result
 996+ 68E4              // HL keeps the remainder at each stage of division
 997+ 68E4              // each loop 'lowers' the next binary digit to form the current dividend
 998+ 68E4                              New_Def UMDIVMOD, "UM/MOD", is_code, is_normal
 998+ 68E4             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 998+ 68E4             >
 998+ 68E4             >                // dummy db directives used to calculate length of namec
 998+ 68E4 55 4D 2F 4D >                db      "UM/MOD"
 998+ 68E8 4F 44       >
 998+ 68EA             >len_NFA         defl    $ - temp_NFA
 998+ 68EA             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 998+ 68E4             >
 998+ 68E4 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 998+ 68E5 55 4D 2F 4D >                db      "UM/MOD"               // name string in 7-bit ascii, but
 998+ 68E9 4F 44       >
 998+ 68EB             >                org     $-1                 // alter last byte of Name just above to set
 998+ 68EA C4          >                db      {b $} | END_BIT     // msb as name end
 998+ 68EB             >
 998+ 68EB B6 68       >                dw      last_NFA            // Link to previous definition Name
 998+ 68ED             >UMDIVMOD:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 998+ 68ED ~           >                dw      runcode ; ok        // for primitive definitions  actual code
 998+ 68ED             >                else
 998+ 68ED EF 68       >                dw      $ + 2   ; ok        // is pointed by CFA
 998+ 68EF             >                endif           ; ok        // for other definitions it "points" the correct handler
 998+ 68EF             >                // Use of "; ok" to suppress "warning[fwdref]"
 998+ 68EF             >
 998+ 68EF             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 999+ 68EF D9                           exx
1000+ 68F0 C1                           pop     bc                      // divisor
1001+ 68F1
1002+ 68F1 E1                           pop     hl                      // < high part
1003+ 68F2 D1                           pop     de                      // < low part and
1004+ 68F3
1005+ 68F3 7D                           ld      a, l                    // check without changing arguments
1006+ 68F4 91                           sub     c                       // if divisor is greater than high part
1007+ 68F5 7C                           ld      a, h                    // so quotient will be in range
1008+ 68F6 98                           sbc     a, b
1009+ 68F7 30 23                        jr      nc, Um_DivMod_OutOfRange
1010+ 68F9 3E 10                            ld      a, 16
1011+ 68FB              Um_DivMod_Loop:
1012+ 68FB A7                                   and     a
1013+ 68FC CB 13                                rl      e
1014+ 68FE CB 12                                rl      d
1015+ 6900 CB 15                                rl      l
1016+ 6902 CB 14                                rl      h
1017+ 6904 30 05                                jr      nc, Um_DivMod_Carry
1018+ 6906 A7                                       and     a
1019+ 6907 ED 42                                    sbc     hl, bc
1020+ 6909 18 07                                jr      Um_DivMod_Endif    // else
1021+ 690B              Um_DivMod_Carry:
1022+ 690B A7                                       and     a
1023+ 690C ED 42                                    sbc     hl, bc
1024+ 690E 30 02                                    jr      nc, Um_DivMod_Endif
1025+ 6910 09                                           add     hl, bc
1026+ 6911 1B                                           dec     de
1027+ 6912              Um_DivMod_Endif:                                   // endif
1028+ 6912 13                                   inc     de
1029+ 6913 3D                                   dec     a
1030+ 6914 20 E5                            jr      nz, Um_DivMod_Loop
1031+ 6916 EB                               ex      de, hl
1032+ 6917              Um_DivMod_Bailout:
1033+ 6917 D5                               push    de                  // de := remanider
1034+ 6918 E5                               push    hl                  // hl := quotient
1035+ 6919 D9                               exx
1036+ 691A                                  next
1036+ 691A DD E9       >                jp      (ix)
1037+ 691C
1038+ 691C              Um_DivMod_OutOfRange:
1039+ 691C 21 FF FF                     ld      hl, -1
1040+ 691F 54                           ld      d, h
1041+ 6920 5D                           ld      e, l
1042+ 6921 18 F4                        jr      Um_DivMod_Bailout
1043+ 6923
1044+ 6923              //  ______________________________________________________________________
1045+ 6923              //
1046+ 6923              // and          n1 n2 -- n3
1047+ 6923              // bit logical AND. Returns n3 as n1 & n2
1048+ 6923                              New_Def AND_OP, "AND", is_code, is_normal
1048+ 6923             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1048+ 6923             >
1048+ 6923             >                // dummy db directives used to calculate length of namec
1048+ 6923 41 4E 44    >                db      "AND"
1048+ 6926             >len_NFA         defl    $ - temp_NFA
1048+ 6926             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1048+ 6923             >
1048+ 6923 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1048+ 6924 41 4E 44    >                db      "AND"               // name string in 7-bit ascii, but
1048+ 6927             >                org     $-1                 // alter last byte of Name just above to set
1048+ 6926 C4          >                db      {b $} | END_BIT     // msb as name end
1048+ 6927             >
1048+ 6927 E4 68       >                dw      last_NFA            // Link to previous definition Name
1048+ 6929             >AND_OP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1048+ 6929 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1048+ 6929             >                else
1048+ 6929 2B 69       >                dw      $ + 2   ; ok        // is pointed by CFA
1048+ 692B             >                endif           ; ok        // for other definitions it "points" the correct handler
1048+ 692B             >                // Use of "; ok" to suppress "warning[fwdref]"
1048+ 692B             >
1048+ 692B             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1049+ 692B D1                           pop     de
1050+ 692C E1                           pop     hl
1051+ 692D 7B                           ld      a, e
1052+ 692E A5                           and     l
1053+ 692F 6F                           ld      l, a
1054+ 6930 7A                           ld      a, d
1055+ 6931 A4                           and     h
1056+ 6932 67                           ld      h, a
1057+ 6933
1058+ 6933                              psh1
1058+ 6933 E5          >                push    hl
1058+ 6934 DD E9       >                jp      (ix)
1059+ 6936
1060+ 6936              //  ______________________________________________________________________
1061+ 6936              //
1062+ 6936              // or           n1 n2 -- n3
1063+ 6936              // bit logical OR. Returns n3 as n1 | n2
1064+ 6936                              New_Def OR_OP, "OR", is_code, is_normal
1064+ 6936             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1064+ 6936             >
1064+ 6936             >                // dummy db directives used to calculate length of namec
1064+ 6936 4F 52       >                db      "OR"
1064+ 6938             >len_NFA         defl    $ - temp_NFA
1064+ 6938             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1064+ 6936             >
1064+ 6936 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1064+ 6937 4F 52       >                db      "OR"               // name string in 7-bit ascii, but
1064+ 6939             >                org     $-1                 // alter last byte of Name just above to set
1064+ 6938 D2          >                db      {b $} | END_BIT     // msb as name end
1064+ 6939             >
1064+ 6939 23 69       >                dw      last_NFA            // Link to previous definition Name
1064+ 693B             >OR_OP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1064+ 693B ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1064+ 693B             >                else
1064+ 693B 3D 69       >                dw      $ + 2   ; ok        // is pointed by CFA
1064+ 693D             >                endif           ; ok        // for other definitions it "points" the correct handler
1064+ 693D             >                // Use of "; ok" to suppress "warning[fwdref]"
1064+ 693D             >
1064+ 693D             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1065+ 693D D1                           pop     de
1066+ 693E E1                           pop     hl
1067+ 693F 7B                           ld      a, e
1068+ 6940 B5                           or      l
1069+ 6941 6F                           ld      l, a
1070+ 6942 7A                           ld      a, d
1071+ 6943 B4                           or      h
1072+ 6944 67                           ld      h, a
1073+ 6945
1074+ 6945                              psh1
1074+ 6945 E5          >                push    hl
1074+ 6946 DD E9       >                jp      (ix)
1075+ 6948
1076+ 6948              //  ______________________________________________________________________
1077+ 6948              //
1078+ 6948              // xor          n1 n2 -- n3
1079+ 6948              // bit logical OR. Returns n3 as n1 ^ n2
1080+ 6948                              New_Def XOR_OP, "XOR", is_code, is_normal
1080+ 6948             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1080+ 6948             >
1080+ 6948             >                // dummy db directives used to calculate length of namec
1080+ 6948 58 4F 52    >                db      "XOR"
1080+ 694B             >len_NFA         defl    $ - temp_NFA
1080+ 694B             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1080+ 6948             >
1080+ 6948 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1080+ 6949 58 4F 52    >                db      "XOR"               // name string in 7-bit ascii, but
1080+ 694C             >                org     $-1                 // alter last byte of Name just above to set
1080+ 694B D2          >                db      {b $} | END_BIT     // msb as name end
1080+ 694C             >
1080+ 694C 36 69       >                dw      last_NFA            // Link to previous definition Name
1080+ 694E             >XOR_OP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1080+ 694E ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1080+ 694E             >                else
1080+ 694E 50 69       >                dw      $ + 2   ; ok        // is pointed by CFA
1080+ 6950             >                endif           ; ok        // for other definitions it "points" the correct handler
1080+ 6950             >                // Use of "; ok" to suppress "warning[fwdref]"
1080+ 6950             >
1080+ 6950             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1081+ 6950 D1                           pop     de
1082+ 6951 E1                           pop     hl
1083+ 6952 7B                           ld      a, e
1084+ 6953 AD                           xor     l
1085+ 6954 6F                           ld      l, a
1086+ 6955 7A                           ld      a, d
1087+ 6956 AC                           xor     h
1088+ 6957 67                           ld      h, a
1089+ 6958
1090+ 6958                              psh1
1090+ 6958 E5          >                push    hl
1090+ 6959 DD E9       >                jp      (ix)
1091+ 695B
1092+ 695B              //  ______________________________________________________________________
1093+ 695B              //
1094+ 695B              // sp@      -- a
1095+ 695B              // returns on top of stack the value of SP before execution
1096+ 695B                              New_Def SPFETCH, "SP@", is_code, is_normal
1096+ 695B             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1096+ 695B             >
1096+ 695B             >                // dummy db directives used to calculate length of namec
1096+ 695B 53 50 40    >                db      "SP@"
1096+ 695E             >len_NFA         defl    $ - temp_NFA
1096+ 695E             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1096+ 695B             >
1096+ 695B 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1096+ 695C 53 50 40    >                db      "SP@"               // name string in 7-bit ascii, but
1096+ 695F             >                org     $-1                 // alter last byte of Name just above to set
1096+ 695E C0          >                db      {b $} | END_BIT     // msb as name end
1096+ 695F             >
1096+ 695F 48 69       >                dw      last_NFA            // Link to previous definition Name
1096+ 6961             >SPFETCH:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1096+ 6961 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1096+ 6961             >                else
1096+ 6961 63 69       >                dw      $ + 2   ; ok        // is pointed by CFA
1096+ 6963             >                endif           ; ok        // for other definitions it "points" the correct handler
1096+ 6963             >                // Use of "; ok" to suppress "warning[fwdref]"
1096+ 6963             >
1096+ 6963             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1097+ 6963
1098+ 6963 21 00 00                     ld      hl, 0
1099+ 6966 39                           add     hl, sp
1100+ 6967
1101+ 6967                              psh1
1101+ 6967 E5          >                push    hl
1101+ 6968 DD E9       >                jp      (ix)
1102+ 696A
1103+ 696A              //  ______________________________________________________________________
1104+ 696A              //
1105+ 696A              // sp!      a --
1106+ 696A              // restore SP to the initial value passed
1107+ 696A              // normally it is S0, i.e. the word at offset 6 and 7 of user variabiles area.
1108+ 696A                              New_Def SPSTORE, "SP!", is_code, is_normal
1108+ 696A             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1108+ 696A             >
1108+ 696A             >                // dummy db directives used to calculate length of namec
1108+ 696A 53 50 21    >                db      "SP!"
1108+ 696D             >len_NFA         defl    $ - temp_NFA
1108+ 696D             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1108+ 696A             >
1108+ 696A 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1108+ 696B 53 50 21    >                db      "SP!"               // name string in 7-bit ascii, but
1108+ 696E             >                org     $-1                 // alter last byte of Name just above to set
1108+ 696D A1          >                db      {b $} | END_BIT     // msb as name end
1108+ 696E             >
1108+ 696E 5B 69       >                dw      last_NFA            // Link to previous definition Name
1108+ 6970             >SPSTORE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1108+ 6970 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1108+ 6970             >                else
1108+ 6970 72 69       >                dw      $ + 2   ; ok        // is pointed by CFA
1108+ 6972             >                endif           ; ok        // for other definitions it "points" the correct handler
1108+ 6972             >                // Use of "; ok" to suppress "warning[fwdref]"
1108+ 6972             >
1108+ 6972             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1109+ 6972 E1                           pop     hl
1110+ 6973 F9                           ld      sp, hl
1111+ 6974
1112+ 6974                              next
1112+ 6974 DD E9       >                jp      (ix)
1113+ 6976
1114+ 6976              //  ______________________________________________________________________
1115+ 6976              //
1116+ 6976              // rp@      -- a
1117+ 6976              // returns on top of stack the value of Return-Pointer
1118+ 6976                              New_Def RPFETCH, "RP@", is_code, is_normal
1118+ 6976             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1118+ 6976             >
1118+ 6976             >                // dummy db directives used to calculate length of namec
1118+ 6976 52 50 40    >                db      "RP@"
1118+ 6979             >len_NFA         defl    $ - temp_NFA
1118+ 6979             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1118+ 6976             >
1118+ 6976 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1118+ 6977 52 50 40    >                db      "RP@"               // name string in 7-bit ascii, but
1118+ 697A             >                org     $-1                 // alter last byte of Name just above to set
1118+ 6979 C0          >                db      {b $} | END_BIT     // msb as name end
1118+ 697A             >
1118+ 697A 6A 69       >                dw      last_NFA            // Link to previous definition Name
1118+ 697C             >RPFETCH:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1118+ 697C ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1118+ 697C             >                else
1118+ 697C 7E 69       >                dw      $ + 2   ; ok        // is pointed by CFA
1118+ 697E             >                endif           ; ok        // for other definitions it "points" the correct handler
1118+ 697E             >                // Use of "; ok" to suppress "warning[fwdref]"
1118+ 697E             >
1118+ 697E             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1119+ 697E
1120+ 697E                              ldhlrp
1120+ 697E 2A 96 63    >                ld      hl,(RP_Pointer)
1121+ 6981
1122+ 6981                              psh1
1122+ 6981 E5          >                push    hl
1122+ 6982 DD E9       >                jp      (ix)
1123+ 6984
1124+ 6984              //  ______________________________________________________________________
1125+ 6984              //
1126+ 6984              // rp!      a --
1127+ 6984              // restore RP to the initial value passed
1128+ 6984              // normally it is R0 @, i.e. the word at offset 8 of user variabiles area.
1129+ 6984                              New_Def RPSTORE, "RP!", is_code, is_normal
1129+ 6984             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1129+ 6984             >
1129+ 6984             >                // dummy db directives used to calculate length of namec
1129+ 6984 52 50 21    >                db      "RP!"
1129+ 6987             >len_NFA         defl    $ - temp_NFA
1129+ 6987             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1129+ 6984             >
1129+ 6984 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1129+ 6985 52 50 21    >                db      "RP!"               // name string in 7-bit ascii, but
1129+ 6988             >                org     $-1                 // alter last byte of Name just above to set
1129+ 6987 A1          >                db      {b $} | END_BIT     // msb as name end
1129+ 6988             >
1129+ 6988 76 69       >                dw      last_NFA            // Link to previous definition Name
1129+ 698A             >RPSTORE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1129+ 698A ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1129+ 698A             >                else
1129+ 698A 8C 69       >                dw      $ + 2   ; ok        // is pointed by CFA
1129+ 698C             >                endif           ; ok        // for other definitions it "points" the correct handler
1129+ 698C             >                // Use of "; ok" to suppress "warning[fwdref]"
1129+ 698C             >
1129+ 698C             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1130+ 698C E1                           pop     hl
1131+ 698D                              ldrphl
1131+ 698D 22 96 63    >                ld      (RP_Pointer),hl
1132+ 6990
1133+ 6990                              next
1133+ 6990 DD E9       >                jp      (ix)
1134+ 6992
1135+ 6992              //  ______________________________________________________________________
1136+ 6992              //
1137+ 6992              // exit      --
1138+ 6992              // exits back to the caller word
1139+ 6992                              New_Def EXIT, "EXIT", is_code, is_normal
1139+ 6992             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1139+ 6992             >
1139+ 6992             >                // dummy db directives used to calculate length of namec
1139+ 6992 45 58 49 54 >                db      "EXIT"
1139+ 6996             >len_NFA         defl    $ - temp_NFA
1139+ 6996             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1139+ 6992             >
1139+ 6992 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1139+ 6993 45 58 49 54 >                db      "EXIT"               // name string in 7-bit ascii, but
1139+ 6997             >                org     $-1                 // alter last byte of Name just above to set
1139+ 6996 D4          >                db      {b $} | END_BIT     // msb as name end
1139+ 6997             >
1139+ 6997 84 69       >                dw      last_NFA            // Link to previous definition Name
1139+ 6999             >EXIT:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1139+ 6999 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1139+ 6999             >                else
1139+ 6999 9B 69       >                dw      $ + 2   ; ok        // is pointed by CFA
1139+ 699B             >                endif           ; ok        // for other definitions it "points" the correct handler
1139+ 699B             >                // Use of "; ok" to suppress "warning[fwdref]"
1139+ 699B             >
1139+ 699B             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1140+ 699B                              ldhlrp                      // Get Return Stack Pointer
1140+ 699B 2A 96 63    >                ld      hl,(RP_Pointer)
1141+ 699E 4E                           ld      c, (hl)             // pop Instruction Pointer
1142+ 699F 23                           inc     hl                  // from Return Stack
1143+ 69A0 46                           ld      b, (hl)
1144+ 69A1 23                           inc     hl
1145+ 69A2                              ldrphl                      // Set Return Stack Pointer
1145+ 69A2 22 96 63    >                ld      (RP_Pointer),hl
1146+ 69A5                              next
1146+ 69A5 DD E9       >                jp      (ix)
1147+ 69A7
1148+ 69A7              //  ______________________________________________________________________
1149+ 69A7              //
1150+ 69A7              // lastl      --
1151+ 69A7              // exits back to the caller word
1152+ 69A7              //              New_Def EXIT, "LASTL", is_code, is_normal
1153+ 69A7              //              ldhlrp                      // Get Return Stack Pointer
1154+ 69A7              //              ld      e, (hl)             // pop Instruction Pointer
1155+ 69A7              //              inc     hl                  // from Return Stack
1156+ 69A7              //              ld      d, (hl)
1157+ 69A7              //              inc     hl
1158+ 69A7              //              ld      (hl), e
1159+ 69A7              //              inc     hl
1160+ 69A7              //              ld      (hl), d
1161+ 69A7              //              next
1162+ 69A7
1163+ 69A7              //  ______________________________________________________________________
1164+ 69A7              //
1165+ 69A7              // (leave)        --
1166+ 69A7              // compiled by LEAVE
1167+ 69A7              // this forces to exit from loop and jump past
1168+ 69A7                              New_Def C_LEAVE, "(LEAVE)", is_code, is_normal
1168+ 69A7             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1168+ 69A7             >
1168+ 69A7             >                // dummy db directives used to calculate length of namec
1168+ 69A7 28 4C 45 41 >                db      "(LEAVE)"
1168+ 69AB 56 45 29    >
1168+ 69AE             >len_NFA         defl    $ - temp_NFA
1168+ 69AE             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1168+ 69A7             >
1168+ 69A7 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1168+ 69A8 28 4C 45 41 >                db      "(LEAVE)"               // name string in 7-bit ascii, but
1168+ 69AC 56 45 29    >
1168+ 69AF             >                org     $-1                 // alter last byte of Name just above to set
1168+ 69AE A9          >                db      {b $} | END_BIT     // msb as name end
1168+ 69AF             >
1168+ 69AF 92 69       >                dw      last_NFA            // Link to previous definition Name
1168+ 69B1             >C_LEAVE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1168+ 69B1 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1168+ 69B1             >                else
1168+ 69B1 B3 69       >                dw      $ + 2   ; ok        // is pointed by CFA
1168+ 69B3             >                endif           ; ok        // for other definitions it "points" the correct handler
1168+ 69B3             >                // Use of "; ok" to suppress "warning[fwdref]"
1168+ 69B3             >
1168+ 69B3             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1169+ 69B3
1170+ 69B3                              ldhlrp
1170+ 69B3 2A 96 63    >                ld      hl,(RP_Pointer)
1171+ 69B6 11 04 00                     ld      de, 4
1172+ 69B9 19                           add     hl, de
1173+ 69BA                              ldrphl
1173+ 69BA 22 96 63    >                ld      (RP_Pointer),hl
1174+ 69BD
1175+ 69BD C3 CE 63                     jp      Branch_Ptr       // perform branch consuming following cell
1176+ 69C0                              next
1176+ 69C0 DD E9       >                jp      (ix)
1177+ 69C2
1178+ 69C2              //  ______________________________________________________________________
1179+ 69C2              //
1180+ 69C2              // >r      n --
1181+ 69C2              // pop from calculator-stack and push into return-stack
1182+ 69C2                              New_Def TO_R, ">R", is_code, is_normal
1182+ 69C2             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1182+ 69C2             >
1182+ 69C2             >                // dummy db directives used to calculate length of namec
1182+ 69C2 3E 52       >                db      ">R"
1182+ 69C4             >len_NFA         defl    $ - temp_NFA
1182+ 69C4             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1182+ 69C2             >
1182+ 69C2 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1182+ 69C3 3E 52       >                db      ">R"               // name string in 7-bit ascii, but
1182+ 69C5             >                org     $-1                 // alter last byte of Name just above to set
1182+ 69C4 D2          >                db      {b $} | END_BIT     // msb as name end
1182+ 69C5             >
1182+ 69C5 A7 69       >                dw      last_NFA            // Link to previous definition Name
1182+ 69C7             >TO_R:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1182+ 69C7 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1182+ 69C7             >                else
1182+ 69C7 C9 69       >                dw      $ + 2   ; ok        // is pointed by CFA
1182+ 69C9             >                endif           ; ok        // for other definitions it "points" the correct handler
1182+ 69C9             >                // Use of "; ok" to suppress "warning[fwdref]"
1182+ 69C9             >
1182+ 69C9             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1183+ 69C9 D1                           pop     de
1184+ 69CA                              ldhlrp
1184+ 69CA 2A 96 63    >                ld      hl,(RP_Pointer)
1185+ 69CD 2B                           dec     hl
1186+ 69CE 72                           ld      (hl), d             // store current TOS
1187+ 69CF 2B                           dec     hl                  // to Return Stack
1188+ 69D0 73                           ld      (hl), e
1189+ 69D1                              ldrphl
1189+ 69D1 22 96 63    >                ld      (RP_Pointer),hl
1190+ 69D4
1191+ 69D4                              next
1191+ 69D4 DD E9       >                jp      (ix)
1192+ 69D6
1193+ 69D6              //  ______________________________________________________________________
1194+ 69D6              //
1195+ 69D6              // r>      -- n
1196+ 69D6              // pop from return-stack and push into calculator-stack
1197+ 69D6                              New_Def R_TO, "R>", is_code, is_normal
1197+ 69D6             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1197+ 69D6             >
1197+ 69D6             >                // dummy db directives used to calculate length of namec
1197+ 69D6 52 3E       >                db      "R>"
1197+ 69D8             >len_NFA         defl    $ - temp_NFA
1197+ 69D8             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1197+ 69D6             >
1197+ 69D6 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1197+ 69D7 52 3E       >                db      "R>"               // name string in 7-bit ascii, but
1197+ 69D9             >                org     $-1                 // alter last byte of Name just above to set
1197+ 69D8 BE          >                db      {b $} | END_BIT     // msb as name end
1197+ 69D9             >
1197+ 69D9 C2 69       >                dw      last_NFA            // Link to previous definition Name
1197+ 69DB             >R_TO:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1197+ 69DB ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1197+ 69DB             >                else
1197+ 69DB DD 69       >                dw      $ + 2   ; ok        // is pointed by CFA
1197+ 69DD             >                endif           ; ok        // for other definitions it "points" the correct handler
1197+ 69DD             >                // Use of "; ok" to suppress "warning[fwdref]"
1197+ 69DD             >
1197+ 69DD             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1198+ 69DD
1199+ 69DD                              ldhlrp
1199+ 69DD 2A 96 63    >                ld      hl,(RP_Pointer)
1200+ 69E0 5E                           ld      e, (hl)             // retrieve from Return Stack
1201+ 69E1 23                           inc     hl
1202+ 69E2 56                           ld      d, (hl)
1203+ 69E3 23                           inc     hl
1204+ 69E4                              ldrphl
1204+ 69E4 22 96 63    >                ld      (RP_Pointer),hl
1205+ 69E7 D5                           push    de
1206+ 69E8                              next
1206+ 69E8 DD E9       >                jp      (ix)
1207+ 69EA
1208+ 69EA              //  ______________________________________________________________________
1209+ 69EA              //
1210+ 69EA              // r            -- n
1211+ 69EA              // return on top of stack the value of top of return-stack
1212+ 69EA              // Since this is the same as I, we alter R's CFA to jump there
1213+ 69EA                              New_Def R_OP, "R@", I_Ptr, is_normal
1213+ 69EA             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1213+ 69EA             >
1213+ 69EA             >                // dummy db directives used to calculate length of namec
1213+ 69EA 52 40       >                db      "R@"
1213+ 69EC             >len_NFA         defl    $ - temp_NFA
1213+ 69EC             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1213+ 69EA             >
1213+ 69EA 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1213+ 69EB 52 40       >                db      "R@"               // name string in 7-bit ascii, but
1213+ 69ED             >                org     $-1                 // alter last byte of Name just above to set
1213+ 69EC C0          >                db      {b $} | END_BIT     // msb as name end
1213+ 69ED             >
1213+ 69ED D6 69       >                dw      last_NFA            // Link to previous definition Name
1213+ 69EF             >R_OP:          if I_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1213+ 69EF 7D 64       >                dw      I_Ptr ; ok        // for primitive definitions  actual code
1213+ 69F1             >                else
1213+ 69F1 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
1213+ 69F1             >                endif           ; ok        // for other definitions it "points" the correct handler
1213+ 69F1             >                // Use of "; ok" to suppress "warning[fwdref]"
1213+ 69F1             >
1213+ 69F1             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1214+ 69F1
1215+ 69F1              //  ______________________________________________________________________
1216+ 69F1              //
1217+ 69F1              // r            -- n
1218+ 69F1              // return on top of stack the value of top of return-stack
1219+ 69F1              // Since this is the same as I, we alter R's CFA to jump there
1220+ 69F1                              New_Def R_OLD, "R", I_Ptr, is_normal
1220+ 69F1             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1220+ 69F1             >
1220+ 69F1             >                // dummy db directives used to calculate length of namec
1220+ 69F1 52          >                db      "R"
1220+ 69F2             >len_NFA         defl    $ - temp_NFA
1220+ 69F2             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1220+ 69F1             >
1220+ 69F1 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1220+ 69F2 52          >                db      "R"               // name string in 7-bit ascii, but
1220+ 69F3             >                org     $-1                 // alter last byte of Name just above to set
1220+ 69F2 D2          >                db      {b $} | END_BIT     // msb as name end
1220+ 69F3             >
1220+ 69F3 EA 69       >                dw      last_NFA            // Link to previous definition Name
1220+ 69F5             >R_OLD:          if I_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1220+ 69F5 7D 64       >                dw      I_Ptr ; ok        // for primitive definitions  actual code
1220+ 69F7             >                else
1220+ 69F7 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
1220+ 69F7             >                endif           ; ok        // for other definitions it "points" the correct handler
1220+ 69F7             >                // Use of "; ok" to suppress "warning[fwdref]"
1220+ 69F7             >
1220+ 69F7             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1221+ 69F7
1222+ 69F7              //  ______________________________________________________________________
1223+ 69F7              //
1224+ 69F7              // 0=           n -- f
1225+ 69F7              // true (non zero) if n is zero, false (0) elsewere
1226+ 69F7                              New_Def ZEQUAL, "0=", is_code, is_normal
1226+ 69F7             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1226+ 69F7             >
1226+ 69F7             >                // dummy db directives used to calculate length of namec
1226+ 69F7 30 3D       >                db      "0="
1226+ 69F9             >len_NFA         defl    $ - temp_NFA
1226+ 69F9             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1226+ 69F7             >
1226+ 69F7 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1226+ 69F8 30 3D       >                db      "0="               // name string in 7-bit ascii, but
1226+ 69FA             >                org     $-1                 // alter last byte of Name just above to set
1226+ 69F9 BD          >                db      {b $} | END_BIT     // msb as name end
1226+ 69FA             >
1226+ 69FA F1 69       >                dw      last_NFA            // Link to previous definition Name
1226+ 69FC             >ZEQUAL:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1226+ 69FC ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1226+ 69FC             >                else
1226+ 69FC FE 69       >                dw      $ + 2   ; ok        // is pointed by CFA
1226+ 69FE             >                endif           ; ok        // for other definitions it "points" the correct handler
1226+ 69FE             >                // Use of "; ok" to suppress "warning[fwdref]"
1226+ 69FE             >
1226+ 69FE             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1227+ 69FE              Zero_Equal:
1228+ 69FE E1                           pop     hl
1229+ 69FF 7D                           ld      a, l
1230+ 6A00 B4                           or      h
1231+ 6A01 21 00 00                     ld      hl, FALSE_FLAG
1232+ 6A04 20 01                        jr      nz, ZEqual_Skip
1233+ 6A06 2B                               dec     hl
1234+ 6A07              ZEqual_Skip:
1235+ 6A07                              psh1
1235+ 6A07 E5          >                push    hl
1235+ 6A08 DD E9       >                jp      (ix)
1236+ 6A0A
1237+ 6A0A              //  ______________________________________________________________________
1238+ 6A0A              //
1239+ 6A0A              // not         a1 -- a2
1240+ 6A0A              // increment by 2 top of stack
1241+ 6A0A                              New_Def NOT_OP, "NOT", Zero_Equal, is_normal
1241+ 6A0A             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1241+ 6A0A             >
1241+ 6A0A             >                // dummy db directives used to calculate length of namec
1241+ 6A0A 4E 4F 54    >                db      "NOT"
1241+ 6A0D             >len_NFA         defl    $ - temp_NFA
1241+ 6A0D             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1241+ 6A0A             >
1241+ 6A0A 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1241+ 6A0B 4E 4F 54    >                db      "NOT"               // name string in 7-bit ascii, but
1241+ 6A0E             >                org     $-1                 // alter last byte of Name just above to set
1241+ 6A0D D4          >                db      {b $} | END_BIT     // msb as name end
1241+ 6A0E             >
1241+ 6A0E F7 69       >                dw      last_NFA            // Link to previous definition Name
1241+ 6A10             >NOT_OP:          if Zero_Equal != 0 ; ok        // This is the start address of the direct jp(hl)
1241+ 6A10 FE 69       >                dw      Zero_Equal ; ok        // for primitive definitions  actual code
1241+ 6A12             >                else
1241+ 6A12 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
1241+ 6A12             >                endif           ; ok        // for other definitions it "points" the correct handler
1241+ 6A12             >                // Use of "; ok" to suppress "warning[fwdref]"
1241+ 6A12             >
1241+ 6A12             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1242+ 6A12
1243+ 6A12              //  ______________________________________________________________________
1244+ 6A12              //
1245+ 6A12              // 0<           n -- f
1246+ 6A12              // true (non zero) if n is less than zero, false (0) elsewere
1247+ 6A12                              New_Def ZLESS, "0<", is_code, is_normal
1247+ 6A12             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1247+ 6A12             >
1247+ 6A12             >                // dummy db directives used to calculate length of namec
1247+ 6A12 30 3C       >                db      "0<"
1247+ 6A14             >len_NFA         defl    $ - temp_NFA
1247+ 6A14             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1247+ 6A12             >
1247+ 6A12 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1247+ 6A13 30 3C       >                db      "0<"               // name string in 7-bit ascii, but
1247+ 6A15             >                org     $-1                 // alter last byte of Name just above to set
1247+ 6A14 BC          >                db      {b $} | END_BIT     // msb as name end
1247+ 6A15             >
1247+ 6A15 0A 6A       >                dw      last_NFA            // Link to previous definition Name
1247+ 6A17             >ZLESS:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1247+ 6A17 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1247+ 6A17             >                else
1247+ 6A17 19 6A       >                dw      $ + 2   ; ok        // is pointed by CFA
1247+ 6A19             >                endif           ; ok        // for other definitions it "points" the correct handler
1247+ 6A19             >                // Use of "; ok" to suppress "warning[fwdref]"
1247+ 6A19             >
1247+ 6A19             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1248+ 6A19 E1                           pop     hl
1249+ 6A1A 29                           add     hl, hl
1250+ 6A1B 21 00 00                     ld      hl, 0
1251+ 6A1E 30 01                        jr      nc, ZLess_Skip
1252+ 6A20 2B                               dec     hl
1253+ 6A21              ZLess_Skip:
1254+ 6A21                              psh1
1254+ 6A21 E5          >                push    hl
1254+ 6A22 DD E9       >                jp      (ix)
1255+ 6A24
1256+ 6A24              //  ______________________________________________________________________
1257+ 6A24              //
1258+ 6A24              // 0>           n -- f
1259+ 6A24              // true (non zero) if n is less than zero, false (0) elsewere
1260+ 6A24                              New_Def ZGREATER, "0>", is_code, is_normal
1260+ 6A24             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1260+ 6A24             >
1260+ 6A24             >                // dummy db directives used to calculate length of namec
1260+ 6A24 30 3E       >                db      "0>"
1260+ 6A26             >len_NFA         defl    $ - temp_NFA
1260+ 6A26             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1260+ 6A24             >
1260+ 6A24 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1260+ 6A25 30 3E       >                db      "0>"               // name string in 7-bit ascii, but
1260+ 6A27             >                org     $-1                 // alter last byte of Name just above to set
1260+ 6A26 BE          >                db      {b $} | END_BIT     // msb as name end
1260+ 6A27             >
1260+ 6A27 12 6A       >                dw      last_NFA            // Link to previous definition Name
1260+ 6A29             >ZGREATER:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1260+ 6A29 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1260+ 6A29             >                else
1260+ 6A29 2B 6A       >                dw      $ + 2   ; ok        // is pointed by CFA
1260+ 6A2B             >                endif           ; ok        // for other definitions it "points" the correct handler
1260+ 6A2B             >                // Use of "; ok" to suppress "warning[fwdref]"
1260+ 6A2B             >
1260+ 6A2B             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1261+ 6A2B E1                           pop     hl
1262+ 6A2C 7D                           ld      a, l
1263+ 6A2D B4                           or      h
1264+ 6A2E 29                           add     hl, hl
1265+ 6A2F 21 00 00                     ld      hl, FALSE_FLAG
1266+ 6A32 38 04                        jr      c, ZGreater_Skip
1267+ 6A34 A7                               and     a
1268+ 6A35 28 01                            jr      z, ZGreater_Skip
1269+ 6A37 2B                                   dec     hl
1270+ 6A38              ZGreater_Skip:
1271+ 6A38                              psh1
1271+ 6A38 E5          >                push    hl
1271+ 6A39 DD E9       >                jp      (ix)
1272+ 6A3B
1273+ 6A3B              //  ______________________________________________________________________
1274+ 6A3B              //
1275+ 6A3B              // +            n1 n2 -- n3
1276+ 6A3B              // returns the unsigned sum of two top values
1277+ 6A3B                              New_Def PLUS, "+", is_code, is_normal
1277+ 6A3B             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1277+ 6A3B             >
1277+ 6A3B             >                // dummy db directives used to calculate length of namec
1277+ 6A3B 2B          >                db      "+"
1277+ 6A3C             >len_NFA         defl    $ - temp_NFA
1277+ 6A3C             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1277+ 6A3B             >
1277+ 6A3B 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1277+ 6A3C 2B          >                db      "+"               // name string in 7-bit ascii, but
1277+ 6A3D             >                org     $-1                 // alter last byte of Name just above to set
1277+ 6A3C AB          >                db      {b $} | END_BIT     // msb as name end
1277+ 6A3D             >
1277+ 6A3D 24 6A       >                dw      last_NFA            // Link to previous definition Name
1277+ 6A3F             >PLUS:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1277+ 6A3F ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1277+ 6A3F             >                else
1277+ 6A3F 41 6A       >                dw      $ + 2   ; ok        // is pointed by CFA
1277+ 6A41             >                endif           ; ok        // for other definitions it "points" the correct handler
1277+ 6A41             >                // Use of "; ok" to suppress "warning[fwdref]"
1277+ 6A41             >
1277+ 6A41             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1278+ 6A41 E1                           pop     hl
1279+ 6A42 D1                           pop     de
1280+ 6A43 19                           add     hl, de
1281+ 6A44
1282+ 6A44                              psh1
1282+ 6A44 E5          >                push    hl
1282+ 6A45 DD E9       >                jp      (ix)
1283+ 6A47
1284+ 6A47
1285+ 6A47              //  ______________________________________________________________________
1286+ 6A47              //
1287+ 6A47              // d+           d1 d2 -- d3
1288+ 6A47              // returns the unsigned sum of two top double-numbers
1289+ 6A47              //      d2  d1
1290+ 6A47              //      h l h l
1291+ 6A47              // SP   LHEDLHED
1292+ 6A47              // SP  +01234567
1293+ 6A47                              New_Def DPLUS, "D+", is_code, is_normal
1293+ 6A47             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1293+ 6A47             >
1293+ 6A47             >                // dummy db directives used to calculate length of namec
1293+ 6A47 44 2B       >                db      "D+"
1293+ 6A49             >len_NFA         defl    $ - temp_NFA
1293+ 6A49             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1293+ 6A47             >
1293+ 6A47 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1293+ 6A48 44 2B       >                db      "D+"               // name string in 7-bit ascii, but
1293+ 6A4A             >                org     $-1                 // alter last byte of Name just above to set
1293+ 6A49 AB          >                db      {b $} | END_BIT     // msb as name end
1293+ 6A4A             >
1293+ 6A4A 3B 6A       >                dw      last_NFA            // Link to previous definition Name
1293+ 6A4C             >DPLUS:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1293+ 6A4C ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1293+ 6A4C             >                else
1293+ 6A4C 4E 6A       >                dw      $ + 2   ; ok        // is pointed by CFA
1293+ 6A4E             >                endif           ; ok        // for other definitions it "points" the correct handler
1293+ 6A4E             >                // Use of "; ok" to suppress "warning[fwdref]"
1293+ 6A4E             >
1293+ 6A4E             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1294+ 6A4E
1295+ 6A4E D9                           exx
1296+ 6A4F C1                           pop     bc                  // bc := d2.H
1297+ 6A50 D1                           pop     de                  // hl := d2.L
1298+ 6A51 E1                           pop     hl                  // d1.H
1299+ 6A52 E3                           ex      (sp), hl            // d1.L
1300+ 6A53 19                           add     hl, de              // hl := d2.L + d1.L
1301+ 6A54 E3                           ex      (sp), hl            // d1.H
1302+ 6A55 ED 4A                        adc     hl, bc              // d1.H + d2.H
1303+ 6A57 E5                           push    hl
1304+ 6A58 D9                           exx
1305+ 6A59                              next
1305+ 6A59 DD E9       >                jp      (ix)
1306+ 6A5B
1307+ 6A5B              //  ______________________________________________________________________
1308+ 6A5B              //
1309+ 6A5B              // 1+           n1 -- n2
1310+ 6A5B              // increment by 1 top of stack
1311+ 6A5B                              New_Def ONE_PLUS, "1+", is_code, is_normal
1311+ 6A5B             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1311+ 6A5B             >
1311+ 6A5B             >                // dummy db directives used to calculate length of namec
1311+ 6A5B 31 2B       >                db      "1+"
1311+ 6A5D             >len_NFA         defl    $ - temp_NFA
1311+ 6A5D             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1311+ 6A5B             >
1311+ 6A5B 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1311+ 6A5C 31 2B       >                db      "1+"               // name string in 7-bit ascii, but
1311+ 6A5E             >                org     $-1                 // alter last byte of Name just above to set
1311+ 6A5D AB          >                db      {b $} | END_BIT     // msb as name end
1311+ 6A5E             >
1311+ 6A5E 47 6A       >                dw      last_NFA            // Link to previous definition Name
1311+ 6A60             >ONE_PLUS:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1311+ 6A60 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1311+ 6A60             >                else
1311+ 6A60 62 6A       >                dw      $ + 2   ; ok        // is pointed by CFA
1311+ 6A62             >                endif           ; ok        // for other definitions it "points" the correct handler
1311+ 6A62             >                // Use of "; ok" to suppress "warning[fwdref]"
1311+ 6A62             >
1311+ 6A62             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1312+ 6A62 E1                           pop     hl
1313+ 6A63 23                           inc     hl
1314+ 6A64
1315+ 6A64                              psh1
1315+ 6A64 E5          >                push    hl
1315+ 6A65 DD E9       >                jp      (ix)
1316+ 6A67
1317+ 6A67              //  ______________________________________________________________________
1318+ 6A67              //
1319+ 6A67              // 1-           n1 -- n2
1320+ 6A67              // decrement by 1 top of stack
1321+ 6A67                              New_Def ONE_SUBTRACT, "1-", is_code, is_normal
1321+ 6A67             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1321+ 6A67             >
1321+ 6A67             >                // dummy db directives used to calculate length of namec
1321+ 6A67 31 2D       >                db      "1-"
1321+ 6A69             >len_NFA         defl    $ - temp_NFA
1321+ 6A69             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1321+ 6A67             >
1321+ 6A67 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1321+ 6A68 31 2D       >                db      "1-"               // name string in 7-bit ascii, but
1321+ 6A6A             >                org     $-1                 // alter last byte of Name just above to set
1321+ 6A69 AD          >                db      {b $} | END_BIT     // msb as name end
1321+ 6A6A             >
1321+ 6A6A 5B 6A       >                dw      last_NFA            // Link to previous definition Name
1321+ 6A6C             >ONE_SUBTRACT:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1321+ 6A6C ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1321+ 6A6C             >                else
1321+ 6A6C 6E 6A       >                dw      $ + 2   ; ok        // is pointed by CFA
1321+ 6A6E             >                endif           ; ok        // for other definitions it "points" the correct handler
1321+ 6A6E             >                // Use of "; ok" to suppress "warning[fwdref]"
1321+ 6A6E             >
1321+ 6A6E             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1322+ 6A6E E1                           pop     hl
1323+ 6A6F 2B                           dec     hl
1324+ 6A70
1325+ 6A70                              psh1
1325+ 6A70 E5          >                push    hl
1325+ 6A71 DD E9       >                jp      (ix)
1326+ 6A73
1327+ 6A73              //  ______________________________________________________________________
1328+ 6A73              //
1329+ 6A73              // 2+           n1 -- n2
1330+ 6A73              // increment by 2 top of stack
1331+ 6A73                              New_Def TWO_PLUS, "2+", is_code, is_normal
1331+ 6A73             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1331+ 6A73             >
1331+ 6A73             >                // dummy db directives used to calculate length of namec
1331+ 6A73 32 2B       >                db      "2+"
1331+ 6A75             >len_NFA         defl    $ - temp_NFA
1331+ 6A75             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1331+ 6A73             >
1331+ 6A73 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1331+ 6A74 32 2B       >                db      "2+"               // name string in 7-bit ascii, but
1331+ 6A76             >                org     $-1                 // alter last byte of Name just above to set
1331+ 6A75 AB          >                db      {b $} | END_BIT     // msb as name end
1331+ 6A76             >
1331+ 6A76 67 6A       >                dw      last_NFA            // Link to previous definition Name
1331+ 6A78             >TWO_PLUS:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1331+ 6A78 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1331+ 6A78             >                else
1331+ 6A78 7A 6A       >                dw      $ + 2   ; ok        // is pointed by CFA
1331+ 6A7A             >                endif           ; ok        // for other definitions it "points" the correct handler
1331+ 6A7A             >                // Use of "; ok" to suppress "warning[fwdref]"
1331+ 6A7A             >
1331+ 6A7A             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1332+ 6A7A              Two_Plus:
1333+ 6A7A E1                           pop     hl
1334+ 6A7B 23                           inc     hl
1335+ 6A7C 23                           inc     hl
1336+ 6A7D
1337+ 6A7D                              psh1
1337+ 6A7D E5          >                push    hl
1337+ 6A7E DD E9       >                jp      (ix)
1338+ 6A80
1339+ 6A80              //  ______________________________________________________________________
1340+ 6A80              //
1341+ 6A80              // cell+        a1 -- a2
1342+ 6A80              // increment by 2 top of stack
1343+ 6A80                              New_Def CELL_PLUS, "CELL+", Two_Plus, is_normal
1343+ 6A80             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1343+ 6A80             >
1343+ 6A80             >                // dummy db directives used to calculate length of namec
1343+ 6A80 43 45 4C 4C >                db      "CELL+"
1343+ 6A84 2B          >
1343+ 6A85             >len_NFA         defl    $ - temp_NFA
1343+ 6A85             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1343+ 6A80             >
1343+ 6A80 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1343+ 6A81 43 45 4C 4C >                db      "CELL+"               // name string in 7-bit ascii, but
1343+ 6A85 2B          >
1343+ 6A86             >                org     $-1                 // alter last byte of Name just above to set
1343+ 6A85 AB          >                db      {b $} | END_BIT     // msb as name end
1343+ 6A86             >
1343+ 6A86 73 6A       >                dw      last_NFA            // Link to previous definition Name
1343+ 6A88             >CELL_PLUS:          if Two_Plus != 0 ; ok        // This is the start address of the direct jp(hl)
1343+ 6A88 7A 6A       >                dw      Two_Plus ; ok        // for primitive definitions  actual code
1343+ 6A8A             >                else
1343+ 6A8A ~           >                dw      $ + 2   ; ok        // is pointed by CFA
1343+ 6A8A             >                endif           ; ok        // for other definitions it "points" the correct handler
1343+ 6A8A             >                // Use of "; ok" to suppress "warning[fwdref]"
1343+ 6A8A             >
1343+ 6A8A             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1344+ 6A8A
1345+ 6A8A              //  ______________________________________________________________________
1346+ 6A8A              //
1347+ 6A8A              // align        a1 -- a2
1348+ 6A8A              // align memory : not used
1349+ 6A8A              //              New_Def ALIGN_ADDR, "ALIGN", is_code, is_normal
1350+ 6A8A              //            next
1351+ 6A8A
1352+ 6A8A              //  ______________________________________________________________________
1353+ 6A8A              //
1354+ 6A8A              // cell-        a1 -- a2
1355+ 6A8A              // decrement by 2 top of stack
1356+ 6A8A                              New_Def CELL_MINUS, "CELL-", is_code, is_normal
1356+ 6A8A             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1356+ 6A8A             >
1356+ 6A8A             >                // dummy db directives used to calculate length of namec
1356+ 6A8A 43 45 4C 4C >                db      "CELL-"
1356+ 6A8E 2D          >
1356+ 6A8F             >len_NFA         defl    $ - temp_NFA
1356+ 6A8F             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1356+ 6A8A             >
1356+ 6A8A 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1356+ 6A8B 43 45 4C 4C >                db      "CELL-"               // name string in 7-bit ascii, but
1356+ 6A8F 2D          >
1356+ 6A90             >                org     $-1                 // alter last byte of Name just above to set
1356+ 6A8F AD          >                db      {b $} | END_BIT     // msb as name end
1356+ 6A90             >
1356+ 6A90 80 6A       >                dw      last_NFA            // Link to previous definition Name
1356+ 6A92             >CELL_MINUS:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1356+ 6A92 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1356+ 6A92             >                else
1356+ 6A92 94 6A       >                dw      $ + 2   ; ok        // is pointed by CFA
1356+ 6A94             >                endif           ; ok        // for other definitions it "points" the correct handler
1356+ 6A94             >                // Use of "; ok" to suppress "warning[fwdref]"
1356+ 6A94             >
1356+ 6A94             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1357+ 6A94              CellMinus:
1358+ 6A94 E1                           pop     hl
1359+ 6A95 2B                           dec     hl
1360+ 6A96 2B                           dec     hl
1361+ 6A97 E5                           push    hl
1362+ 6A98                              next
1362+ 6A98 DD E9       >                jp      (ix)
1363+ 6A9A
1364+ 6A9A              //  ______________________________________________________________________
1365+ 6A9A              //
1366+ 6A9A              // 2-           a1 -- a2
1367+ 6A9A              // decrement by 2 top of stack
1368+ 6A9A                              New_Def TWO_MINUS, "2-", CellMinus, is_normal
1368+ 6A9A             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1368+ 6A9A             >
1368+ 6A9A             >                // dummy db directives used to calculate length of namec
1368+ 6A9A 32 2D       >                db      "2-"
1368+ 6A9C             >len_NFA         defl    $ - temp_NFA
1368+ 6A9C             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1368+ 6A9A             >
1368+ 6A9A 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1368+ 6A9B 32 2D       >                db      "2-"               // name string in 7-bit ascii, but
1368+ 6A9D             >                org     $-1                 // alter last byte of Name just above to set
1368+ 6A9C AD          >                db      {b $} | END_BIT     // msb as name end
1368+ 6A9D             >
1368+ 6A9D 8A 6A       >                dw      last_NFA            // Link to previous definition Name
1368+ 6A9F             >TWO_MINUS:          if CellMinus != 0 ; ok        // This is the start address of the direct jp(hl)
1368+ 6A9F 94 6A       >                dw      CellMinus ; ok        // for primitive definitions  actual code
1368+ 6AA1             >                else
1368+ 6AA1 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
1368+ 6AA1             >                endif           ; ok        // for other definitions it "points" the correct handler
1368+ 6AA1             >                // Use of "; ok" to suppress "warning[fwdref]"
1368+ 6AA1             >
1368+ 6AA1             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1369+ 6AA1
1370+ 6AA1              //  ______________________________________________________________________
1371+ 6AA1              //
1372+ 6AA1              // negate        n1 -- n2
1373+ 6AA1              // change the sign of number
1374+ 6AA1                              New_Def MINUS, "NEGATE", is_code, is_normal
1374+ 6AA1             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1374+ 6AA1             >
1374+ 6AA1             >                // dummy db directives used to calculate length of namec
1374+ 6AA1 4E 45 47 41 >                db      "NEGATE"
1374+ 6AA5 54 45       >
1374+ 6AA7             >len_NFA         defl    $ - temp_NFA
1374+ 6AA7             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1374+ 6AA1             >
1374+ 6AA1 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1374+ 6AA2 4E 45 47 41 >                db      "NEGATE"               // name string in 7-bit ascii, but
1374+ 6AA6 54 45       >
1374+ 6AA8             >                org     $-1                 // alter last byte of Name just above to set
1374+ 6AA7 C5          >                db      {b $} | END_BIT     // msb as name end
1374+ 6AA8             >
1374+ 6AA8 9A 6A       >                dw      last_NFA            // Link to previous definition Name
1374+ 6AAA             >MINUS:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1374+ 6AAA ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1374+ 6AAA             >                else
1374+ 6AAA AC 6A       >                dw      $ + 2   ; ok        // is pointed by CFA
1374+ 6AAC             >                endif           ; ok        // for other definitions it "points" the correct handler
1374+ 6AAC             >                // Use of "; ok" to suppress "warning[fwdref]"
1374+ 6AAC             >
1374+ 6AAC             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1375+ 6AAC 21 00 00                     ld      hl, 0               // subtract from 0
1376+ 6AAF D1                           pop     de
1377+ 6AB0 B7                           or      a
1378+ 6AB1 ED 52                        sbc     hl, de
1379+ 6AB3
1380+ 6AB3                              psh1
1380+ 6AB3 E5          >                push    hl
1380+ 6AB4 DD E9       >                jp      (ix)
1381+ 6AB6
1382+ 6AB6              //  ______________________________________________________________________
1383+ 6AB6              //
1384+ 6AB6              // dnegate      d1 -- d2
1385+ 6AB6              // change the sign of a double number
1386+ 6AB6                              New_Def DMINUS, "DNEGATE", is_code, is_normal
1386+ 6AB6             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1386+ 6AB6             >
1386+ 6AB6             >                // dummy db directives used to calculate length of namec
1386+ 6AB6 44 4E 45 47 >                db      "DNEGATE"
1386+ 6ABA 41 54 45    >
1386+ 6ABD             >len_NFA         defl    $ - temp_NFA
1386+ 6ABD             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1386+ 6AB6             >
1386+ 6AB6 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1386+ 6AB7 44 4E 45 47 >                db      "DNEGATE"               // name string in 7-bit ascii, but
1386+ 6ABB 41 54 45    >
1386+ 6ABE             >                org     $-1                 // alter last byte of Name just above to set
1386+ 6ABD C5          >                db      {b $} | END_BIT     // msb as name end
1386+ 6ABE             >
1386+ 6ABE A1 6A       >                dw      last_NFA            // Link to previous definition Name
1386+ 6AC0             >DMINUS:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1386+ 6AC0 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1386+ 6AC0             >                else
1386+ 6AC0 C2 6A       >                dw      $ + 2   ; ok        // is pointed by CFA
1386+ 6AC2             >                endif           ; ok        // for other definitions it "points" the correct handler
1386+ 6AC2             >                // Use of "; ok" to suppress "warning[fwdref]"
1386+ 6AC2             >
1386+ 6AC2             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1387+ 6AC2 D9                           exx
1388+ 6AC3 C1                           pop     bc                  // d1.H
1389+ 6AC4 D1                           pop     de                  // d1.L
1390+ 6AC5 AF                           xor     a
1391+ 6AC6 67                           ld      h, a
1392+ 6AC7 6F                           ld      l, a
1393+ 6AC8 ED 52                        sbc     hl, de              // subtact from zero
1394+ 6ACA E5                           push    hl                  // > d2-L
1395+ 6ACB 67                           ld      h, a
1396+ 6ACC 6F                           ld      l, a
1397+ 6ACD ED 42                        sbc     hl, bc              // subtract from zero with carry
1398+ 6ACF                                                          // > d2-H
1399+ 6ACF E5                           push    hl
1400+ 6AD0 D9                           exx
1401+ 6AD1                              next
1401+ 6AD1 DD E9       >                jp      (ix)
1402+ 6AD3
1403+ 6AD3              //  ______________________________________________________________________
1404+ 6AD3              //
1405+ 6AD3              // over         n1 n2 -- n1 n2 n1
1406+ 6AD3              // copy the second value of stack and put it on top.
1407+ 6AD3                              New_Def OVER, "OVER", is_code, is_normal
1407+ 6AD3             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1407+ 6AD3             >
1407+ 6AD3             >                // dummy db directives used to calculate length of namec
1407+ 6AD3 4F 56 45 52 >                db      "OVER"
1407+ 6AD7             >len_NFA         defl    $ - temp_NFA
1407+ 6AD7             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1407+ 6AD3             >
1407+ 6AD3 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1407+ 6AD4 4F 56 45 52 >                db      "OVER"               // name string in 7-bit ascii, but
1407+ 6AD8             >                org     $-1                 // alter last byte of Name just above to set
1407+ 6AD7 D2          >                db      {b $} | END_BIT     // msb as name end
1407+ 6AD8             >
1407+ 6AD8 B6 6A       >                dw      last_NFA            // Link to previous definition Name
1407+ 6ADA             >OVER:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1407+ 6ADA ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1407+ 6ADA             >                else
1407+ 6ADA DC 6A       >                dw      $ + 2   ; ok        // is pointed by CFA
1407+ 6ADC             >                endif           ; ok        // for other definitions it "points" the correct handler
1407+ 6ADC             >                // Use of "; ok" to suppress "warning[fwdref]"
1407+ 6ADC             >
1407+ 6ADC             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1408+ 6ADC D1                           pop     de                  //   n2
1409+ 6ADD E1                           pop     hl                  // < n1
1410+ 6ADE E5                           push    hl                  // > n1
1411+ 6ADF D5                           push    de                  // > n2
1412+ 6AE0 E5                           push    hl                  // > n1
1413+ 6AE1                              next
1413+ 6AE1 DD E9       >                jp      (ix)
1414+ 6AE3
1415+ 6AE3              //  ______________________________________________________________________
1416+ 6AE3              //
1417+ 6AE3              // drop         n1 --
1418+ 6AE3              // drops the top of stack
1419+ 6AE3                              New_Def DROP, "DROP", is_code, is_normal
1419+ 6AE3             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1419+ 6AE3             >
1419+ 6AE3             >                // dummy db directives used to calculate length of namec
1419+ 6AE3 44 52 4F 50 >                db      "DROP"
1419+ 6AE7             >len_NFA         defl    $ - temp_NFA
1419+ 6AE7             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1419+ 6AE3             >
1419+ 6AE3 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1419+ 6AE4 44 52 4F 50 >                db      "DROP"               // name string in 7-bit ascii, but
1419+ 6AE8             >                org     $-1                 // alter last byte of Name just above to set
1419+ 6AE7 D0          >                db      {b $} | END_BIT     // msb as name end
1419+ 6AE8             >
1419+ 6AE8 D3 6A       >                dw      last_NFA            // Link to previous definition Name
1419+ 6AEA             >DROP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1419+ 6AEA ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1419+ 6AEA             >                else
1419+ 6AEA EC 6A       >                dw      $ + 2   ; ok        // is pointed by CFA
1419+ 6AEC             >                endif           ; ok        // for other definitions it "points" the correct handler
1419+ 6AEC             >                // Use of "; ok" to suppress "warning[fwdref]"
1419+ 6AEC             >
1419+ 6AEC             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1420+ 6AEC E1                           pop     hl                  // < n1 and discard previous TOS
1421+ 6AED                              next
1421+ 6AED DD E9       >                jp      (ix)
1422+ 6AEF
1423+ 6AEF              //  ______________________________________________________________________
1424+ 6AEF              //
1425+ 6AEF              // nip          n1 n2 -- n2
1426+ 6AEF              // drops the second elemento on the stack
1427+ 6AEF                              New_Def NIP, "NIP", is_code, is_normal
1427+ 6AEF             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1427+ 6AEF             >
1427+ 6AEF             >                // dummy db directives used to calculate length of namec
1427+ 6AEF 4E 49 50    >                db      "NIP"
1427+ 6AF2             >len_NFA         defl    $ - temp_NFA
1427+ 6AF2             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1427+ 6AEF             >
1427+ 6AEF 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1427+ 6AF0 4E 49 50    >                db      "NIP"               // name string in 7-bit ascii, but
1427+ 6AF3             >                org     $-1                 // alter last byte of Name just above to set
1427+ 6AF2 D0          >                db      {b $} | END_BIT     // msb as name end
1427+ 6AF3             >
1427+ 6AF3 E3 6A       >                dw      last_NFA            // Link to previous definition Name
1427+ 6AF5             >NIP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1427+ 6AF5 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1427+ 6AF5             >                else
1427+ 6AF5 F7 6A       >                dw      $ + 2   ; ok        // is pointed by CFA
1427+ 6AF7             >                endif           ; ok        // for other definitions it "points" the correct handler
1427+ 6AF7             >                // Use of "; ok" to suppress "warning[fwdref]"
1427+ 6AF7             >
1427+ 6AF7             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1428+ 6AF7
1429+ 6AF7 E1                           pop     hl                  // < n1 discarded
1430+ 6AF8 E3                           ex      (sp), hl
1431+ 6AF9                              next
1431+ 6AF9 DD E9       >                jp      (ix)
1432+ 6AFB
1433+ 6AFB              //  ______________________________________________________________________
1434+ 6AFB              //
1435+ 6AFB              // tuck         n1 n2 -- n2 n1 n2
1436+ 6AFB              // copy the top element after the second.
1437+ 6AFB                              New_Def TUCK, "TUCK", is_code, is_normal
1437+ 6AFB             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1437+ 6AFB             >
1437+ 6AFB             >                // dummy db directives used to calculate length of namec
1437+ 6AFB 54 55 43 4B >                db      "TUCK"
1437+ 6AFF             >len_NFA         defl    $ - temp_NFA
1437+ 6AFF             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1437+ 6AFB             >
1437+ 6AFB 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1437+ 6AFC 54 55 43 4B >                db      "TUCK"               // name string in 7-bit ascii, but
1437+ 6B00             >                org     $-1                 // alter last byte of Name just above to set
1437+ 6AFF CB          >                db      {b $} | END_BIT     // msb as name end
1437+ 6B00             >
1437+ 6B00 EF 6A       >                dw      last_NFA            // Link to previous definition Name
1437+ 6B02             >TUCK:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1437+ 6B02 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1437+ 6B02             >                else
1437+ 6B02 04 6B       >                dw      $ + 2   ; ok        // is pointed by CFA
1437+ 6B04             >                endif           ; ok        // for other definitions it "points" the correct handler
1437+ 6B04             >                // Use of "; ok" to suppress "warning[fwdref]"
1437+ 6B04             >
1437+ 6B04             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1438+ 6B04 E1                           pop     hl
1439+ 6B05 D1                           pop     de                  // < n1
1440+ 6B06 E5                           push    hl                  // > n2  and TOS
1441+ 6B07 D5                           push    de                  // > n1
1442+ 6B08 E5                           push    hl
1443+ 6B09                              next
1443+ 6B09 DD E9       >                jp      (ix)
1444+ 6B0B
1445+ 6B0B              //  ______________________________________________________________________
1446+ 6B0B              //
1447+ 6B0B              // swap         n1 n2 -- n2 n1
1448+ 6B0B              // swaps the two values on top of stack
1449+ 6B0B                              New_Def SWAP, "SWAP", is_code, is_normal
1449+ 6B0B             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1449+ 6B0B             >
1449+ 6B0B             >                // dummy db directives used to calculate length of namec
1449+ 6B0B 53 57 41 50 >                db      "SWAP"
1449+ 6B0F             >len_NFA         defl    $ - temp_NFA
1449+ 6B0F             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1449+ 6B0B             >
1449+ 6B0B 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1449+ 6B0C 53 57 41 50 >                db      "SWAP"               // name string in 7-bit ascii, but
1449+ 6B10             >                org     $-1                 // alter last byte of Name just above to set
1449+ 6B0F D0          >                db      {b $} | END_BIT     // msb as name end
1449+ 6B10             >
1449+ 6B10 FB 6A       >                dw      last_NFA            // Link to previous definition Name
1449+ 6B12             >SWAP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1449+ 6B12 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1449+ 6B12             >                else
1449+ 6B12 14 6B       >                dw      $ + 2   ; ok        // is pointed by CFA
1449+ 6B14             >                endif           ; ok        // for other definitions it "points" the correct handler
1449+ 6B14             >                // Use of "; ok" to suppress "warning[fwdref]"
1449+ 6B14             >
1449+ 6B14             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1450+ 6B14 E1                           pop     hl                  // < n1
1451+ 6B15 E3                           ex      (sp),hl             // > n2
1452+ 6B16 E5                           push    hl                  // copy n1 to TOS
1453+ 6B17                              next
1453+ 6B17 DD E9       >                jp      (ix)
1454+ 6B19
1455+ 6B19              //  ______________________________________________________________________
1456+ 6B19              //
1457+ 6B19              // dup         n -- n n
1458+ 6B19              // duplicates the top value of stack
1459+ 6B19                              New_Def DUP, "DUP", is_code, is_normal
1459+ 6B19             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1459+ 6B19             >
1459+ 6B19             >                // dummy db directives used to calculate length of namec
1459+ 6B19 44 55 50    >                db      "DUP"
1459+ 6B1C             >len_NFA         defl    $ - temp_NFA
1459+ 6B1C             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1459+ 6B19             >
1459+ 6B19 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1459+ 6B1A 44 55 50    >                db      "DUP"               // name string in 7-bit ascii, but
1459+ 6B1D             >                org     $-1                 // alter last byte of Name just above to set
1459+ 6B1C D0          >                db      {b $} | END_BIT     // msb as name end
1459+ 6B1D             >
1459+ 6B1D 0B 6B       >                dw      last_NFA            // Link to previous definition Name
1459+ 6B1F             >DUP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1459+ 6B1F ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1459+ 6B1F             >                else
1459+ 6B1F 21 6B       >                dw      $ + 2   ; ok        // is pointed by CFA
1459+ 6B21             >                endif           ; ok        // for other definitions it "points" the correct handler
1459+ 6B21             >                // Use of "; ok" to suppress "warning[fwdref]"
1459+ 6B21             >
1459+ 6B21             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1460+ 6B21 E1                           pop     hl
1461+ 6B22 E5                           push    hl                  // > n duplicate TOS
1462+ 6B23 E5                           push    hl
1463+ 6B24                              next
1463+ 6B24 DD E9       >                jp      (ix)
1464+ 6B26
1465+ 6B26              //  ______________________________________________________________________
1466+ 6B26              //
1467+ 6B26              // rot         n1 n2 n3 -- n2 n3 n1
1468+ 6B26              // Rotates the 3 top values of stack by picking the 3rd in access-order
1469+ 6B26              // and putting it on top. The other two are shifted down one place.
1470+ 6B26                              New_Def ROT, "ROT", is_code, is_normal
1470+ 6B26             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1470+ 6B26             >
1470+ 6B26             >                // dummy db directives used to calculate length of namec
1470+ 6B26 52 4F 54    >                db      "ROT"
1470+ 6B29             >len_NFA         defl    $ - temp_NFA
1470+ 6B29             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1470+ 6B26             >
1470+ 6B26 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1470+ 6B27 52 4F 54    >                db      "ROT"               // name string in 7-bit ascii, but
1470+ 6B2A             >                org     $-1                 // alter last byte of Name just above to set
1470+ 6B29 D4          >                db      {b $} | END_BIT     // msb as name end
1470+ 6B2A             >
1470+ 6B2A 19 6B       >                dw      last_NFA            // Link to previous definition Name
1470+ 6B2C             >ROT:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1470+ 6B2C ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1470+ 6B2C             >                else
1470+ 6B2C 2E 6B       >                dw      $ + 2   ; ok        // is pointed by CFA
1470+ 6B2E             >                endif           ; ok        // for other definitions it "points" the correct handler
1470+ 6B2E             >                // Use of "; ok" to suppress "warning[fwdref]"
1470+ 6B2E             >
1470+ 6B2E             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1471+ 6B2E D1                           pop     de                  // < n3
1472+ 6B2F E1                           pop     hl                  // < n2
1473+ 6B30 E3                           ex      (sp),hl             // > n2 < n1
1474+ 6B31 D5                           push    de                  // > n3
1475+ 6B32 E5                           push    hl                  // copy n1 to TOS
1476+ 6B33                              next
1476+ 6B33 DD E9       >                jp      (ix)
1477+ 6B35
1478+ 6B35              //  ______________________________________________________________________
1479+ 6B35              //
1480+ 6B35              // -rot         n1 n2 n3 -- n3 n1 n2
1481+ 6B35              // Rotates the 3 top values of stack by picking the 1st in access-order
1482+ 6B35              // and putting back to 3rd place. The other two are shifted down one place.
1483+ 6B35                              New_Def DASH_ROT, "-ROT", is_code, is_normal
1483+ 6B35             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1483+ 6B35             >
1483+ 6B35             >                // dummy db directives used to calculate length of namec
1483+ 6B35 2D 52 4F 54 >                db      "-ROT"
1483+ 6B39             >len_NFA         defl    $ - temp_NFA
1483+ 6B39             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1483+ 6B35             >
1483+ 6B35 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1483+ 6B36 2D 52 4F 54 >                db      "-ROT"               // name string in 7-bit ascii, but
1483+ 6B3A             >                org     $-1                 // alter last byte of Name just above to set
1483+ 6B39 D4          >                db      {b $} | END_BIT     // msb as name end
1483+ 6B3A             >
1483+ 6B3A 26 6B       >                dw      last_NFA            // Link to previous definition Name
1483+ 6B3C             >DASH_ROT:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1483+ 6B3C ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1483+ 6B3C             >                else
1483+ 6B3C 3E 6B       >                dw      $ + 2   ; ok        // is pointed by CFA
1483+ 6B3E             >                endif           ; ok        // for other definitions it "points" the correct handler
1483+ 6B3E             >                // Use of "; ok" to suppress "warning[fwdref]"
1483+ 6B3E             >
1483+ 6B3E             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1484+ 6B3E E1                           pop     hl                  // < n3
1485+ 6B3F D1                           pop     de                  // < n2
1486+ 6B40 E3                           ex      (sp),hl             // > n3 < n1
1487+ 6B41 E5                           push    hl                  // > n1
1488+ 6B42 D5                           push    de                  // copy n3 to TOS
1489+ 6B43                              next
1489+ 6B43 DD E9       >                jp      (ix)
1490+ 6B45
1491+ 6B45              //  ______________________________________________________________________
1492+ 6B45              //
1493+ 6B45              // pick        n1 -- nx
1494+ 6B45              // picks the nth element from TOS
1495+ 6B45                              New_Def PICK, "PICK", is_code, is_normal
1495+ 6B45             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1495+ 6B45             >
1495+ 6B45             >                // dummy db directives used to calculate length of namec
1495+ 6B45 50 49 43 4B >                db      "PICK"
1495+ 6B49             >len_NFA         defl    $ - temp_NFA
1495+ 6B49             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1495+ 6B45             >
1495+ 6B45 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1495+ 6B46 50 49 43 4B >                db      "PICK"               // name string in 7-bit ascii, but
1495+ 6B4A             >                org     $-1                 // alter last byte of Name just above to set
1495+ 6B49 CB          >                db      {b $} | END_BIT     // msb as name end
1495+ 6B4A             >
1495+ 6B4A 35 6B       >                dw      last_NFA            // Link to previous definition Name
1495+ 6B4C             >PICK:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1495+ 6B4C ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1495+ 6B4C             >                else
1495+ 6B4C 4E 6B       >                dw      $ + 2   ; ok        // is pointed by CFA
1495+ 6B4E             >                endif           ; ok        // for other definitions it "points" the correct handler
1495+ 6B4E             >                // Use of "; ok" to suppress "warning[fwdref]"
1495+ 6B4E             >
1495+ 6B4E             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1496+ 6B4E E1                           pop     hl                  // take TOS as index
1497+ 6B4F 29                           add     hl, hl              // as cells
1498+ 6B50 39                           add     hl, sp              // from Stack Pointer
1499+ 6B51 7E                           ld      a, (hl)             // replace TOS
1500+ 6B52 23                           inc     hl
1501+ 6B53 66                           ld      h, (hl)
1502+ 6B54 6F                           ld      l, a
1503+ 6B55
1504+ 6B55                              psh1
1504+ 6B55 E5          >                push    hl
1504+ 6B56 DD E9       >                jp      (ix)
1505+ 6B58
1506+ 6B58
1507+ 6B58              //  ______________________________________________________________________
1508+ 6B58              //
1509+ 6B58              // roll        n1 n2 n3 ... n -- n2 n3 ... n1
1510+ 6B58              // picks the nth element from TOS
1511+ 6B58              //              New_Def ROLL, "ROLL", is_code, is_normal
1512+ 6B58              //              exx                     // we need all registers free
1513+ 6B58              //              pop     hl              // number of cells to roll
1514+ 6B58              //              ld      a, h
1515+ 6B58              //              or       l
1516+ 6B58              //              jr      z, Roll_Zero
1517+ 6B58              //                  add     hl, hl              // number of bytes to move
1518+ 6B58              //                  ld      b, h
1519+ 6B58              //                  ld      c, l
1520+ 6B58              //                  add     hl, sp          // address of n1
1521+ 6B58              //                  ld      a, (hl)         // take n1 into a and a,
1522+ 6B58              //                  inc     hl
1523+ 6B58              //                  ex      af, af'
1524+ 6B58              //                  ld      a, (hl)         // take n1 into a and a,
1525+ 6B58              //                  ld      d, h
1526+ 6B58              //                  ld      e, l
1527+ 6B58              //                  dec     hl
1528+ 6B58              //                  dec     hl
1529+ 6B58              //                  lddr
1530+ 6B58              //                  ex      de, hl
1531+ 6B58              //                  ld      (hl), a
1532+ 6B58              //                  dec     hl
1533+ 6B58              //                  ex      af, af'
1534+ 6B58              //                  ld      (hl), a
1535+ 6B58              //Roll_Zero:
1536+ 6B58              //              exx
1537+ 6B58              //              next
1538+ 6B58
1539+ 6B58
1540+ 6B58              //  ______________________________________________________________________
1541+ 6B58              //
1542+ 6B58              // 2over        d1 d2 -- d1 d2 d1
1543+ 6B58              //              n1 n2 n3 n4 -- n1 n2 n3 n4 n1 n2
1544+ 6B58              // copy the second double of stack and put on top.
1545+ 6B58              //              New_Def TWO_OVER, "2OVER", is_code, is_normal
1546+ 6B58              //
1547+ 6B58              //              ld      hl, 7
1548+ 6B58              //              add     hl, sp
1549+ 6B58              //              ld      d, (hl)
1550+ 6B58              //              dec     hl
1551+ 6B58              //              ld      e, (hl)             // d1-L
1552+ 6B58              //              push    de
1553+ 6B58              //              dec     hl
1554+ 6B58              //              ld      d, (hl)
1555+ 6B58              //              dec     hl
1556+ 6B58              //              ld      e, (hl)             // d1-H
1557+ 6B58              //              push    de
1558+ 6B58              //              next
1559+ 6B58
1560+ 6B58              //  ______________________________________________________________________
1561+ 6B58              //
1562+ 6B58              // 2drop        d --
1563+ 6B58              //              n1 n2 --
1564+ 6B58              // drops the top double from stack
1565+ 6B58                              New_Def TWO_DROP, "2DROP", is_code, is_normal
1565+ 6B58             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1565+ 6B58             >
1565+ 6B58             >                // dummy db directives used to calculate length of namec
1565+ 6B58 32 44 52 4F >                db      "2DROP"
1565+ 6B5C 50          >
1565+ 6B5D             >len_NFA         defl    $ - temp_NFA
1565+ 6B5D             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1565+ 6B58             >
1565+ 6B58 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1565+ 6B59 32 44 52 4F >                db      "2DROP"               // name string in 7-bit ascii, but
1565+ 6B5D 50          >
1565+ 6B5E             >                org     $-1                 // alter last byte of Name just above to set
1565+ 6B5D D0          >                db      {b $} | END_BIT     // msb as name end
1565+ 6B5E             >
1565+ 6B5E 45 6B       >                dw      last_NFA            // Link to previous definition Name
1565+ 6B60             >TWO_DROP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1565+ 6B60 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1565+ 6B60             >                else
1565+ 6B60 62 6B       >                dw      $ + 2   ; ok        // is pointed by CFA
1565+ 6B62             >                endif           ; ok        // for other definitions it "points" the correct handler
1565+ 6B62             >                // Use of "; ok" to suppress "warning[fwdref]"
1565+ 6B62             >
1565+ 6B62             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1566+ 6B62 E1                           pop     hl
1567+ 6B63 E1                           pop     hl
1568+ 6B64                              next
1568+ 6B64 DD E9       >                jp      (ix)
1569+ 6B66
1570+ 6B66              //  ______________________________________________________________________
1571+ 6B66              //
1572+ 6B66              // 2nip         d1 d2 -- d2
1573+ 6B66              //              n1 n2 n3 n4 -- n3 n4
1574+ 6B66              // drops the second double on the stack
1575+ 6B66              //              New_Def TWO_NIP, 4, "2nip"
1576+ 6B66              //              ...
1577+ 6B66
1578+ 6B66              //  ______________________________________________________________________
1579+ 6B66              //
1580+ 6B66              // 2tuck         d1 d2 -- d2 d1 d2
1581+ 6B66              // copy the top element after the second.
1582+ 6B66              //              New_Def TWO_TUCK, 5, "2tuck"
1583+ 6B66              //              ...
1584+ 6B66
1585+ 6B66              //  ______________________________________________________________________
1586+ 6B66              //
1587+ 6B66              // 2swap         d1 d2 -- d2 d1
1588+ 6B66              //               n1 n2 n3 n4 -- n3 n4 n1 n2
1589+ 6B66              // swaps the two doubles on top of stack
1590+ 6B66                              New_Def TWO_SWAP, "2SWAP", is_code, is_normal
1590+ 6B66             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1590+ 6B66             >
1590+ 6B66             >                // dummy db directives used to calculate length of namec
1590+ 6B66 32 53 57 41 >                db      "2SWAP"
1590+ 6B6A 50          >
1590+ 6B6B             >len_NFA         defl    $ - temp_NFA
1590+ 6B6B             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1590+ 6B66             >
1590+ 6B66 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1590+ 6B67 32 53 57 41 >                db      "2SWAP"               // name string in 7-bit ascii, but
1590+ 6B6B 50          >
1590+ 6B6C             >                org     $-1                 // alter last byte of Name just above to set
1590+ 6B6B D0          >                db      {b $} | END_BIT     // msb as name end
1590+ 6B6C             >
1590+ 6B6C 58 6B       >                dw      last_NFA            // Link to previous definition Name
1590+ 6B6E             >TWO_SWAP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1590+ 6B6E ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1590+ 6B6E             >                else
1590+ 6B6E 70 6B       >                dw      $ + 2   ; ok        // is pointed by CFA
1590+ 6B70             >                endif           ; ok        // for other definitions it "points" the correct handler
1590+ 6B70             >                // Use of "; ok" to suppress "warning[fwdref]"
1590+ 6B70             >
1590+ 6B70             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1591+ 6B70 F1                           pop     af                  //   d2-H
1592+ 6B71 E1                           pop     hl                  // < d2-L
1593+ 6B72 D1                           pop     de                  // < d1-H
1594+ 6B73 E3                           ex      (sp), hl            // < d1-L > d2-L
1595+ 6B74 F5                           push    af                  // > d2-H
1596+ 6B75 E5                           push    hl                  // > d1-L
1597+ 6B76 D5                           push    de
1598+ 6B77
1599+ 6B77                              next
1599+ 6B77 DD E9       >                jp      (ix)
1600+ 6B79
1601+ 6B79              //  ______________________________________________________________________
1602+ 6B79              //
1603+ 6B79              // 2dup         d -- d d
1604+ 6B79              //              n1 n2 -- n1 n2 n1 n2
1605+ 6B79              // duplicates the top double of stack
1606+ 6B79                              New_Def TWO_DUP, "2DUP", is_code, is_normal
1606+ 6B79             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1606+ 6B79             >
1606+ 6B79             >                // dummy db directives used to calculate length of namec
1606+ 6B79 32 44 55 50 >                db      "2DUP"
1606+ 6B7D             >len_NFA         defl    $ - temp_NFA
1606+ 6B7D             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1606+ 6B79             >
1606+ 6B79 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1606+ 6B7A 32 44 55 50 >                db      "2DUP"               // name string in 7-bit ascii, but
1606+ 6B7E             >                org     $-1                 // alter last byte of Name just above to set
1606+ 6B7D D0          >                db      {b $} | END_BIT     // msb as name end
1606+ 6B7E             >
1606+ 6B7E 66 6B       >                dw      last_NFA            // Link to previous definition Name
1606+ 6B80             >TWO_DUP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1606+ 6B80 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1606+ 6B80             >                else
1606+ 6B80 82 6B       >                dw      $ + 2   ; ok        // is pointed by CFA
1606+ 6B82             >                endif           ; ok        // for other definitions it "points" the correct handler
1606+ 6B82             >                // Use of "; ok" to suppress "warning[fwdref]"
1606+ 6B82             >
1606+ 6B82             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1607+ 6B82 E1                           pop     hl                  // < d-H
1608+ 6B83 D1                           pop     de                  // < d-L
1609+ 6B84 D5                           push    de                  // < d-L
1610+ 6B85 E5                           push    hl                  // > d-H
1611+ 6B86 D5                           push    de                  // > d-L
1612+ 6B87 E5                           push    hl                  // > d-H
1613+ 6B88                              next
1613+ 6B88 DD E9       >                jp      (ix)
1614+ 6B8A
1615+ 6B8A              //  ______________________________________________________________________
1616+ 6B8A              //
1617+ 6B8A              // 2rot         d1 d2 d3 -- d2 d3 d1
1618+ 6B8A              //              n1 n2 n3 n4 n5 n6 -- n3 n4 n5 n6 n1 n2
1619+ 6B8A              // Rotates the 3 top doubles of stack by picking the 3rd in access-order
1620+ 6B8A              // and putting it on top. The other two are shifted down one place.
1621+ 6B8A              //              New_Def TWO?ROT, 4, "2rot"
1622+ 6B8A              //              ...
1623+ 6B8A              //              New_Def TWO_ROT, "2ROT", is_code, is_normal
1624+ 6B8A              //
1625+ 6B8A              //      d3  |d2  |d1  |
1626+ 6B8A              //      h l |h l |h l |
1627+ 6B8A              // SP   LHED|LHED|LHED|
1628+ 6B8A              // SP  +0123|4567|89ab|
1629+ 6B8A              //              ld      hl, $000B
1630+ 6B8A              //              add     hl, sp
1631+ 6B8A              //              ld      d, (hl)
1632+ 6B8A              //              dec     hl
1633+ 6B8A              //              ld      e, (hl)
1634+ 6B8A              //              dec     hl
1635+ 6B8A              //              push    de
1636+ 6B8A              //              ld      d, (hl)
1637+ 6B8A              //              dec     hl
1638+ 6B8A              //              ld      e, (hl)
1639+ 6B8A              //              dec     hl
1640+ 6B8A              //              push    de
1641+ 6B8A
1642+ 6B8A              //      d1  |d3  |d2  |d1  |
1643+ 6B8A              //      h l |h l |h l |h l |
1644+ 6B8A              // SP   LHED|LHED|LHED|LHED|
1645+ 6B8A              // SP       +0123|4567|89ab|
1646+ 6B8A
1647+ 6B8A              //              ld      d, h
1648+ 6B8A              //              ld      e, l
1649+ 6B8A              //              inc     de
1650+ 6B8A              //              inc     de
1651+ 6B8A              //              inc     de
1652+ 6B8A              //              inc     de
1653+ 6B8A              //              push    bc
1654+ 6B8A              //              ld      bc, $000C
1655+ 6B8A              //              lddr
1656+ 6B8A              //              pop     bc
1657+ 6B8A              //              pop     de
1658+ 6B8A              //              pop     de
1659+ 6B8A              //
1660+ 6B8A              //              next
1661+ 6B8A
1662+ 6B8A
1663+ 6B8A              //  ______________________________________________________________________
1664+ 6B8A              //
1665+ 6B8A              // +!           n a --
1666+ 6B8A              // Sums to the content of address a the number n.
1667+ 6B8A              // It is the same of  a @ n + a !
1668+ 6B8A                              New_Def PLUSSTORE, "+!", is_code, is_normal
1668+ 6B8A             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1668+ 6B8A             >
1668+ 6B8A             >                // dummy db directives used to calculate length of namec
1668+ 6B8A 2B 21       >                db      "+!"
1668+ 6B8C             >len_NFA         defl    $ - temp_NFA
1668+ 6B8C             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1668+ 6B8A             >
1668+ 6B8A 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1668+ 6B8B 2B 21       >                db      "+!"               // name string in 7-bit ascii, but
1668+ 6B8D             >                org     $-1                 // alter last byte of Name just above to set
1668+ 6B8C A1          >                db      {b $} | END_BIT     // msb as name end
1668+ 6B8D             >
1668+ 6B8D 79 6B       >                dw      last_NFA            // Link to previous definition Name
1668+ 6B8F             >PLUSSTORE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1668+ 6B8F ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1668+ 6B8F             >                else
1668+ 6B8F 91 6B       >                dw      $ + 2   ; ok        // is pointed by CFA
1668+ 6B91             >                endif           ; ok        // for other definitions it "points" the correct handler
1668+ 6B91             >                // Use of "; ok" to suppress "warning[fwdref]"
1668+ 6B91             >
1668+ 6B91             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1669+ 6B91 E1                           pop     hl                  // hl is the address
1670+ 6B92 D1                           pop     de                  // de is the number
1671+ 6B93 7E                           ld      a, (hl)
1672+ 6B94 83                           add     e
1673+ 6B95 77                           ld      (hl), a
1674+ 6B96 23                           inc     hl
1675+ 6B97 7E                           ld      a, (hl)
1676+ 6B98 8A                           adc     d
1677+ 6B99 77                           ld      (hl), a
1678+ 6B9A
1679+ 6B9A                              next
1679+ 6B9A DD E9       >                jp      (ix)
1680+ 6B9C
1681+ 6B9C              //  ______________________________________________________________________
1682+ 6B9C              //
1683+ 6B9C              // toggle       a n --
1684+ 6B9C              // Complements (xor) the byte at addrress  a  with the model n.
1685+ 6B9C                              New_Def TOGGLE, "TOGGLE", is_code, is_normal
1685+ 6B9C             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1685+ 6B9C             >
1685+ 6B9C             >                // dummy db directives used to calculate length of namec
1685+ 6B9C 54 4F 47 47 >                db      "TOGGLE"
1685+ 6BA0 4C 45       >
1685+ 6BA2             >len_NFA         defl    $ - temp_NFA
1685+ 6BA2             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1685+ 6B9C             >
1685+ 6B9C 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1685+ 6B9D 54 4F 47 47 >                db      "TOGGLE"               // name string in 7-bit ascii, but
1685+ 6BA1 4C 45       >
1685+ 6BA3             >                org     $-1                 // alter last byte of Name just above to set
1685+ 6BA2 C5          >                db      {b $} | END_BIT     // msb as name end
1685+ 6BA3             >
1685+ 6BA3 8A 6B       >                dw      last_NFA            // Link to previous definition Name
1685+ 6BA5             >TOGGLE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1685+ 6BA5 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1685+ 6BA5             >                else
1685+ 6BA5 A7 6B       >                dw      $ + 2   ; ok        // is pointed by CFA
1685+ 6BA7             >                endif           ; ok        // for other definitions it "points" the correct handler
1685+ 6BA7             >                // Use of "; ok" to suppress "warning[fwdref]"
1685+ 6BA7             >
1685+ 6BA7             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1686+ 6BA7 D1                           pop     de
1687+ 6BA8 E1                           pop     hl
1688+ 6BA9 7E                           ld      a, (hl)
1689+ 6BAA AB                           xor     e
1690+ 6BAB 77                           ld      (hl), a
1691+ 6BAC
1692+ 6BAC                              next
1692+ 6BAC DD E9       >                jp      (ix)
1693+ 6BAE
1694+ 6BAE              //  ______________________________________________________________________
1695+ 6BAE              //
1696+ 6BAE              // @            a -- n
1697+ 6BAE              // fetch 16 bit number n from address a. Z80 keeps high byte is in high memory
1698+ 6BAE                              New_Def FETCH, "@", is_code, is_normal
1698+ 6BAE             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1698+ 6BAE             >
1698+ 6BAE             >                // dummy db directives used to calculate length of namec
1698+ 6BAE 40          >                db      "@"
1698+ 6BAF             >len_NFA         defl    $ - temp_NFA
1698+ 6BAF             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1698+ 6BAE             >
1698+ 6BAE 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1698+ 6BAF 40          >                db      "@"               // name string in 7-bit ascii, but
1698+ 6BB0             >                org     $-1                 // alter last byte of Name just above to set
1698+ 6BAF C0          >                db      {b $} | END_BIT     // msb as name end
1698+ 6BB0             >
1698+ 6BB0 9C 6B       >                dw      last_NFA            // Link to previous definition Name
1698+ 6BB2             >FETCH:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1698+ 6BB2 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1698+ 6BB2             >                else
1698+ 6BB2 B4 6B       >                dw      $ + 2   ; ok        // is pointed by CFA
1698+ 6BB4             >                endif           ; ok        // for other definitions it "points" the correct handler
1698+ 6BB4             >                // Use of "; ok" to suppress "warning[fwdref]"
1698+ 6BB4             >
1698+ 6BB4             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1699+ 6BB4 E1                           pop     hl
1700+ 6BB5 5E                           ld      e, (hl)             // low-byte
1701+ 6BB6 23                           inc     hl
1702+ 6BB7 56                           ld      d, (hl)             // high-byte
1703+ 6BB8 D5                           push    de
1704+ 6BB9                              next
1704+ 6BB9 DD E9       >                jp      (ix)
1705+ 6BBB
1706+ 6BBB              //  ______________________________________________________________________
1707+ 6BBB              //
1708+ 6BBB              // !            n a --
1709+ 6BBB              // store 16 bit number n from address a. Z80 keeps high byte is in high memory
1710+ 6BBB                              New_Def STORE, "!", is_code, is_normal
1710+ 6BBB             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1710+ 6BBB             >
1710+ 6BBB             >                // dummy db directives used to calculate length of namec
1710+ 6BBB 21          >                db      "!"
1710+ 6BBC             >len_NFA         defl    $ - temp_NFA
1710+ 6BBC             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1710+ 6BBB             >
1710+ 6BBB 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1710+ 6BBC 21          >                db      "!"               // name string in 7-bit ascii, but
1710+ 6BBD             >                org     $-1                 // alter last byte of Name just above to set
1710+ 6BBC A1          >                db      {b $} | END_BIT     // msb as name end
1710+ 6BBD             >
1710+ 6BBD AE 6B       >                dw      last_NFA            // Link to previous definition Name
1710+ 6BBF             >STORE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1710+ 6BBF ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1710+ 6BBF             >                else
1710+ 6BBF C1 6B       >                dw      $ + 2   ; ok        // is pointed by CFA
1710+ 6BC1             >                endif           ; ok        // for other definitions it "points" the correct handler
1710+ 6BC1             >                // Use of "; ok" to suppress "warning[fwdref]"
1710+ 6BC1             >
1710+ 6BC1             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1711+ 6BC1 E1                           pop     hl                  // address
1712+ 6BC2 D1                           pop     de                  // < n
1713+ 6BC3 73                           ld      (hl), e             // low-byte
1714+ 6BC4 23                           inc     hl
1715+ 6BC5 72                           ld      (hl), d             // high-byte
1716+ 6BC6
1717+ 6BC6                              next
1717+ 6BC6 DD E9       >                jp      (ix)
1718+ 6BC8
1719+ 6BC8              //  ______________________________________________________________________
1720+ 6BC8              //
1721+ 6BC8              // c@           a -- c
1722+ 6BC8              // fetch a character n from address a
1723+ 6BC8                              New_Def CFETCH, "C@", is_code, is_normal
1723+ 6BC8             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1723+ 6BC8             >
1723+ 6BC8             >                // dummy db directives used to calculate length of namec
1723+ 6BC8 43 40       >                db      "C@"
1723+ 6BCA             >len_NFA         defl    $ - temp_NFA
1723+ 6BCA             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1723+ 6BC8             >
1723+ 6BC8 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1723+ 6BC9 43 40       >                db      "C@"               // name string in 7-bit ascii, but
1723+ 6BCB             >                org     $-1                 // alter last byte of Name just above to set
1723+ 6BCA C0          >                db      {b $} | END_BIT     // msb as name end
1723+ 6BCB             >
1723+ 6BCB BB 6B       >                dw      last_NFA            // Link to previous definition Name
1723+ 6BCD             >CFETCH:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1723+ 6BCD ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1723+ 6BCD             >                else
1723+ 6BCD CF 6B       >                dw      $ + 2   ; ok        // is pointed by CFA
1723+ 6BCF             >                endif           ; ok        // for other definitions it "points" the correct handler
1723+ 6BCF             >                // Use of "; ok" to suppress "warning[fwdref]"
1723+ 6BCF             >
1723+ 6BCF             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1724+ 6BCF E1                           pop     hl
1725+ 6BD0 6E                           ld      l, (hl)             // low-byte
1726+ 6BD1 26 00                        ld      h, 0
1727+ 6BD3
1728+ 6BD3                              psh1
1728+ 6BD3 E5          >                push    hl
1728+ 6BD4 DD E9       >                jp      (ix)
1729+ 6BD6
1730+ 6BD6              //  ______________________________________________________________________
1731+ 6BD6              //
1732+ 6BD6              // c!           c a --
1733+ 6BD6              // fetch 16 bit number n from address a. Z80 keeps high byte is in high memory
1734+ 6BD6                              New_Def CSTORE, "C!", is_code, is_normal
1734+ 6BD6             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1734+ 6BD6             >
1734+ 6BD6             >                // dummy db directives used to calculate length of namec
1734+ 6BD6 43 21       >                db      "C!"
1734+ 6BD8             >len_NFA         defl    $ - temp_NFA
1734+ 6BD8             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1734+ 6BD6             >
1734+ 6BD6 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1734+ 6BD7 43 21       >                db      "C!"               // name string in 7-bit ascii, but
1734+ 6BD9             >                org     $-1                 // alter last byte of Name just above to set
1734+ 6BD8 A1          >                db      {b $} | END_BIT     // msb as name end
1734+ 6BD9             >
1734+ 6BD9 C8 6B       >                dw      last_NFA            // Link to previous definition Name
1734+ 6BDB             >CSTORE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1734+ 6BDB ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1734+ 6BDB             >                else
1734+ 6BDB DD 6B       >                dw      $ + 2   ; ok        // is pointed by CFA
1734+ 6BDD             >                endif           ; ok        // for other definitions it "points" the correct handler
1734+ 6BDD             >                // Use of "; ok" to suppress "warning[fwdref]"
1734+ 6BDD             >
1734+ 6BDD             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1735+ 6BDD E1                           pop     hl                  // < address
1736+ 6BDE D1                           pop     de
1737+ 6BDF 73                           ld      (hl), e             // low-byte
1738+ 6BE0
1739+ 6BE0                              next
1739+ 6BE0 DD E9       >                jp      (ix)
1740+ 6BE2
1741+ 6BE2              //  ______________________________________________________________________
1742+ 6BE2              //
1743+ 6BE2              // 2@           a -- d
1744+ 6BE2              // fetch a 32 bits number d from address a and leaves it on top of the
1745+ 6BE2              // stack as two single numbers, high part as top of the stack.
1746+ 6BE2              // A double number is normally kept in CPU registers as HLDE.
1747+ 6BE2              // On stack a double number is treated as two single numbers
1748+ 6BE2              // where BC is on the top of the stack and HL is the second from top,
1749+ 6BE2              // so the sign of the number can be checked on top of stack
1750+ 6BE2              // and in the stack memory it appears as LHED.
1751+ 6BE2                              New_Def TWO_FETCH, "2@", is_code, is_normal
1751+ 6BE2             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1751+ 6BE2             >
1751+ 6BE2             >                // dummy db directives used to calculate length of namec
1751+ 6BE2 32 40       >                db      "2@"
1751+ 6BE4             >len_NFA         defl    $ - temp_NFA
1751+ 6BE4             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1751+ 6BE2             >
1751+ 6BE2 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1751+ 6BE3 32 40       >                db      "2@"               // name string in 7-bit ascii, but
1751+ 6BE5             >                org     $-1                 // alter last byte of Name just above to set
1751+ 6BE4 C0          >                db      {b $} | END_BIT     // msb as name end
1751+ 6BE5             >
1751+ 6BE5 D6 6B       >                dw      last_NFA            // Link to previous definition Name
1751+ 6BE7             >TWO_FETCH:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1751+ 6BE7 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1751+ 6BE7             >                else
1751+ 6BE7 E9 6B       >                dw      $ + 2   ; ok        // is pointed by CFA
1751+ 6BE9             >                endif           ; ok        // for other definitions it "points" the correct handler
1751+ 6BE9             >                // Use of "; ok" to suppress "warning[fwdref]"
1751+ 6BE9             >
1751+ 6BE9             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1752+ 6BE9 E1                           pop     hl                  // address
1753+ 6BEA 5E                           ld      e, (hl)             // low-byte
1754+ 6BEB 23                           inc     hl
1755+ 6BEC 56                           ld      d, (hl)             // high-byte
1756+ 6BED
1757+ 6BED 23                           inc     hl
1758+ 6BEE 7E                           ld      a, (hl)             // low-byte
1759+ 6BEF 23                           inc     hl
1760+ 6BF0 66                           ld      h, (hl)             // high-byte
1761+ 6BF1 6F                           ld      l, a
1762+ 6BF2 E5                           push    hl
1763+ 6BF3 D5                           push    de
1764+ 6BF4                              next
1764+ 6BF4 DD E9       >                jp      (ix)
1765+ 6BF6
1766+ 6BF6              //  ______________________________________________________________________
1767+ 6BF6              //
1768+ 6BF6              // 2!           d a --
1769+ 6BF6              // stores a 32 bits number d from address a and leaves it on top of the
1770+ 6BF6              // stack as two single numbers, high part as top of the stack.
1771+ 6BF6              // A double number is normally kept in CPU registers as HLDE.
1772+ 6BF6              // On stack a double number is treated as two single numbers
1773+ 6BF6              // where BC is on the top of the stack and HL is the second from top,
1774+ 6BF6              // so the sign of the number can be checked on top of stack
1775+ 6BF6              // and in the stack memory it appears as LHED.
1776+ 6BF6                              New_Def TWO_STORE, "2!", is_code, is_normal
1776+ 6BF6             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1776+ 6BF6             >
1776+ 6BF6             >                // dummy db directives used to calculate length of namec
1776+ 6BF6 32 21       >                db      "2!"
1776+ 6BF8             >len_NFA         defl    $ - temp_NFA
1776+ 6BF8             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1776+ 6BF6             >
1776+ 6BF6 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1776+ 6BF7 32 21       >                db      "2!"               // name string in 7-bit ascii, but
1776+ 6BF9             >                org     $-1                 // alter last byte of Name just above to set
1776+ 6BF8 A1          >                db      {b $} | END_BIT     // msb as name end
1776+ 6BF9             >
1776+ 6BF9 E2 6B       >                dw      last_NFA            // Link to previous definition Name
1776+ 6BFB             >TWO_STORE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1776+ 6BFB ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1776+ 6BFB             >                else
1776+ 6BFB FD 6B       >                dw      $ + 2   ; ok        // is pointed by CFA
1776+ 6BFD             >                endif           ; ok        // for other definitions it "points" the correct handler
1776+ 6BFD             >                // Use of "; ok" to suppress "warning[fwdref]"
1776+ 6BFD             >
1776+ 6BFD             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1777+ 6BFD D9                           exx
1778+ 6BFE E1                           pop     hl                  // address
1779+ 6BFF C1                           pop     bc                  // < high-part
1780+ 6C00 D1                           pop     de                  // < low-part > Instruction Pointer
1781+ 6C01 71                           ld      (hl), c
1782+ 6C02 23                           inc     hl
1783+ 6C03 70                           ld      (hl), b
1784+ 6C04 23                           inc     hl
1785+ 6C05 73                           ld      (hl), e
1786+ 6C06 23                           inc     hl
1787+ 6C07 72                           ld      (hl), d
1788+ 6C08 D9                           exx
1789+ 6C09                              next
1789+ 6C09 DD E9       >                jp      (ix)
1790+ 6C0B
1791+ 6C0B              //  ______________________________________________________________________
1792+ 6C0B              //
1793+ 6C0B              // p@           a -- c
1794+ 6C0B              // Read one byte from port a and leave the result on top of stack
1795+ 6C0B                              New_Def PFETCH, "P@", is_code, is_normal
1795+ 6C0B             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1795+ 6C0B             >
1795+ 6C0B             >                // dummy db directives used to calculate length of namec
1795+ 6C0B 50 40       >                db      "P@"
1795+ 6C0D             >len_NFA         defl    $ - temp_NFA
1795+ 6C0D             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1795+ 6C0B             >
1795+ 6C0B 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1795+ 6C0C 50 40       >                db      "P@"               // name string in 7-bit ascii, but
1795+ 6C0E             >                org     $-1                 // alter last byte of Name just above to set
1795+ 6C0D C0          >                db      {b $} | END_BIT     // msb as name end
1795+ 6C0E             >
1795+ 6C0E F6 6B       >                dw      last_NFA            // Link to previous definition Name
1795+ 6C10             >PFETCH:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1795+ 6C10 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1795+ 6C10             >                else
1795+ 6C10 12 6C       >                dw      $ + 2   ; ok        // is pointed by CFA
1795+ 6C12             >                endif           ; ok        // for other definitions it "points" the correct handler
1795+ 6C12             >                // Use of "; ok" to suppress "warning[fwdref]"
1795+ 6C12             >
1795+ 6C12             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1796+ 6C12 D9                           exx
1797+ 6C13 C1                           pop     bc
1798+ 6C14 26 00                        ld      h, 0
1799+ 6C16 ED 68                        in      l, (c)
1800+ 6C18 E5                           push    hl
1801+ 6C19 D9                           exx
1802+ 6C1A                              next
1802+ 6C1A DD E9       >                jp      (ix)
1803+ 6C1C
1804+ 6C1C              //  ______________________________________________________________________
1805+ 6C1C              //
1806+ 6C1C              // p!           c a --
1807+ 6C1C              // Send one byte (top of stack) to port a
1808+ 6C1C                              New_Def PSTORE, "P!", is_code, is_normal
1808+ 6C1C             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1808+ 6C1C             >
1808+ 6C1C             >                // dummy db directives used to calculate length of namec
1808+ 6C1C 50 21       >                db      "P!"
1808+ 6C1E             >len_NFA         defl    $ - temp_NFA
1808+ 6C1E             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1808+ 6C1C             >
1808+ 6C1C 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1808+ 6C1D 50 21       >                db      "P!"               // name string in 7-bit ascii, but
1808+ 6C1F             >                org     $-1                 // alter last byte of Name just above to set
1808+ 6C1E A1          >                db      {b $} | END_BIT     // msb as name end
1808+ 6C1F             >
1808+ 6C1F 0B 6C       >                dw      last_NFA            // Link to previous definition Name
1808+ 6C21             >PSTORE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1808+ 6C21 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1808+ 6C21             >                else
1808+ 6C21 23 6C       >                dw      $ + 2   ; ok        // is pointed by CFA
1808+ 6C23             >                endif           ; ok        // for other definitions it "points" the correct handler
1808+ 6C23             >                // Use of "; ok" to suppress "warning[fwdref]"
1808+ 6C23             >
1808+ 6C23             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1809+ 6C23 D9                           exx
1810+ 6C24 C1                           pop     bc
1811+ 6C25 E1                           pop     hl                  // < c
1812+ 6C26 ED 69                        out     (c), l              // low-byte
1813+ 6C28 D9                           exx
1814+ 6C29                              next
1814+ 6C29 DD E9       >                jp      (ix)
1815+ 6C2B
1816+ 6C2B
1817+ 6C2B              //  ______________________________________________________________________
1818+ 6C2B              //
1819+ 6C2B              // 2*           n1 -- n2
1820+ 6C2B              // doubles the number at top of stack
1821+ 6C2B                              New_Def TWO_MUL, "2*", is_code, is_normal
1821+ 6C2B             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1821+ 6C2B             >
1821+ 6C2B             >                // dummy db directives used to calculate length of namec
1821+ 6C2B 32 2A       >                db      "2*"
1821+ 6C2D             >len_NFA         defl    $ - temp_NFA
1821+ 6C2D             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1821+ 6C2B             >
1821+ 6C2B 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1821+ 6C2C 32 2A       >                db      "2*"               // name string in 7-bit ascii, but
1821+ 6C2E             >                org     $-1                 // alter last byte of Name just above to set
1821+ 6C2D AA          >                db      {b $} | END_BIT     // msb as name end
1821+ 6C2E             >
1821+ 6C2E 1C 6C       >                dw      last_NFA            // Link to previous definition Name
1821+ 6C30             >TWO_MUL:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1821+ 6C30 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1821+ 6C30             >                else
1821+ 6C30 32 6C       >                dw      $ + 2   ; ok        // is pointed by CFA
1821+ 6C32             >                endif           ; ok        // for other definitions it "points" the correct handler
1821+ 6C32             >                // Use of "; ok" to suppress "warning[fwdref]"
1821+ 6C32             >
1821+ 6C32             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1822+ 6C32              Two_Mul_Ptr:
1823+ 6C32 E1                           pop     hl
1824+ 6C33 29                           add     hl, hl
1825+ 6C34
1826+ 6C34                              psh1
1826+ 6C34 E5          >                push    hl
1826+ 6C35 DD E9       >                jp      (ix)
1827+ 6C37
1828+ 6C37              //  ______________________________________________________________________
1829+ 6C37              //
1830+ 6C37              // 2/           n1 -- n2
1831+ 6C37              // halves the top of stack, sign is unchanged
1832+ 6C37                              New_Def TWO_DIV, "2/", is_code, is_normal
1832+ 6C37             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1832+ 6C37             >
1832+ 6C37             >                // dummy db directives used to calculate length of namec
1832+ 6C37 32 2F       >                db      "2/"
1832+ 6C39             >len_NFA         defl    $ - temp_NFA
1832+ 6C39             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1832+ 6C37             >
1832+ 6C37 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1832+ 6C38 32 2F       >                db      "2/"               // name string in 7-bit ascii, but
1832+ 6C3A             >                org     $-1                 // alter last byte of Name just above to set
1832+ 6C39 AF          >                db      {b $} | END_BIT     // msb as name end
1832+ 6C3A             >
1832+ 6C3A 2B 6C       >                dw      last_NFA            // Link to previous definition Name
1832+ 6C3C             >TWO_DIV:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1832+ 6C3C ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1832+ 6C3C             >                else
1832+ 6C3C 3E 6C       >                dw      $ + 2   ; ok        // is pointed by CFA
1832+ 6C3E             >                endif           ; ok        // for other definitions it "points" the correct handler
1832+ 6C3E             >                // Use of "; ok" to suppress "warning[fwdref]"
1832+ 6C3E             >
1832+ 6C3E             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1833+ 6C3E E1                           pop     hl
1834+ 6C3F CB 2C                        sra     h
1835+ 6C41 CB 1D                        rr      l
1836+ 6C43
1837+ 6C43                              psh1
1837+ 6C43 E5          >                push    hl
1837+ 6C44 DD E9       >                jp      (ix)
1838+ 6C46
1839+ 6C46              //  ______________________________________________________________________
1840+ 6C46              //
1841+ 6C46              // lshift       n1 u -- n2
1842+ 6C46              // bit left shift of u bits
1843+ 6C46                              New_Def LSHIFT, "LSHIFT", is_code, is_normal
1843+ 6C46             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1843+ 6C46             >
1843+ 6C46             >                // dummy db directives used to calculate length of namec
1843+ 6C46 4C 53 48 49 >                db      "LSHIFT"
1843+ 6C4A 46 54       >
1843+ 6C4C             >len_NFA         defl    $ - temp_NFA
1843+ 6C4C             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1843+ 6C46             >
1843+ 6C46 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1843+ 6C47 4C 53 48 49 >                db      "LSHIFT"               // name string in 7-bit ascii, but
1843+ 6C4B 46 54       >
1843+ 6C4D             >                org     $-1                 // alter last byte of Name just above to set
1843+ 6C4C D4          >                db      {b $} | END_BIT     // msb as name end
1843+ 6C4D             >
1843+ 6C4D 37 6C       >                dw      last_NFA            // Link to previous definition Name
1843+ 6C4F             >LSHIFT:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1843+ 6C4F ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1843+ 6C4F             >                else
1843+ 6C4F 51 6C       >                dw      $ + 2   ; ok        // is pointed by CFA
1843+ 6C51             >                endif           ; ok        // for other definitions it "points" the correct handler
1843+ 6C51             >                // Use of "; ok" to suppress "warning[fwdref]"
1843+ 6C51             >
1843+ 6C51             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1844+ 6C51 D1                           pop     de
1845+ 6C52
1846+ 6C52 E1                           pop     hl
1847+ 6C53 7B                           ld      a, e
1848+ 6C54 B7                           or      a
1849+ 6C55 28 04                        jr      z, Lshift_Zero
1850+ 6C57              Lshift_Loop:
1851+ 6C57 29                                   add     hl, hl
1852+ 6C58 3D                                   dec     a
1853+ 6C59 20 FC                            jr      nz, Lshift_Loop
1854+ 6C5B              Lshift_Zero:
1855+ 6C5B
1856+ 6C5B
1857+ 6C5B                              psh1
1857+ 6C5B E5          >                push    hl
1857+ 6C5C DD E9       >                jp      (ix)
1858+ 6C5E
1859+ 6C5E              //  ______________________________________________________________________
1860+ 6C5E              //
1861+ 6C5E              // rshift       n1 u -- n2
1862+ 6C5E              // bit right shift of u bits
1863+ 6C5E                              New_Def RSHIFT, "RSHIFT", is_code, is_normal
1863+ 6C5E             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1863+ 6C5E             >
1863+ 6C5E             >                // dummy db directives used to calculate length of namec
1863+ 6C5E 52 53 48 49 >                db      "RSHIFT"
1863+ 6C62 46 54       >
1863+ 6C64             >len_NFA         defl    $ - temp_NFA
1863+ 6C64             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1863+ 6C5E             >
1863+ 6C5E 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1863+ 6C5F 52 53 48 49 >                db      "RSHIFT"               // name string in 7-bit ascii, but
1863+ 6C63 46 54       >
1863+ 6C65             >                org     $-1                 // alter last byte of Name just above to set
1863+ 6C64 D4          >                db      {b $} | END_BIT     // msb as name end
1863+ 6C65             >
1863+ 6C65 46 6C       >                dw      last_NFA            // Link to previous definition Name
1863+ 6C67             >RSHIFT:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1863+ 6C67 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1863+ 6C67             >                else
1863+ 6C67 69 6C       >                dw      $ + 2   ; ok        // is pointed by CFA
1863+ 6C69             >                endif           ; ok        // for other definitions it "points" the correct handler
1863+ 6C69             >                // Use of "; ok" to suppress "warning[fwdref]"
1863+ 6C69             >
1863+ 6C69             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1864+ 6C69 D1                           pop     de
1865+ 6C6A
1866+ 6C6A E1                           pop     hl
1867+ 6C6B 7B                           ld      a, e
1868+ 6C6C B7                           or      a
1869+ 6C6D 28 07                        jr      z, Rshift_Zero
1870+ 6C6F              Rshift_Loop:
1871+ 6C6F CB 3C                                srl     h
1872+ 6C71 CB 1D                                rr      l
1873+ 6C73 3D                                   dec     a
1874+ 6C74 20 F9                            jr      nz, Rshift_Loop
1875+ 6C76              Rshift_Zero:
1876+ 6C76
1877+ 6C76
1878+ 6C76                              psh1
1878+ 6C76 E5          >                push    hl
1878+ 6C77 DD E9       >                jp      (ix)
1879+ 6C79
1880+ 6C79              //  ______________________________________________________________________
1881+ 6C79              //
1882+ 6C79              // cells        n1 -- n2
1883+ 6C79              // decrement by 2 top of stack
1884+ 6C79                              New_Def CELLS, "CELLS", Two_Mul_Ptr, is_normal
1884+ 6C79             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1884+ 6C79             >
1884+ 6C79             >                // dummy db directives used to calculate length of namec
1884+ 6C79 43 45 4C 4C >                db      "CELLS"
1884+ 6C7D 53          >
1884+ 6C7E             >len_NFA         defl    $ - temp_NFA
1884+ 6C7E             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1884+ 6C79             >
1884+ 6C79 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1884+ 6C7A 43 45 4C 4C >                db      "CELLS"               // name string in 7-bit ascii, but
1884+ 6C7E 53          >
1884+ 6C7F             >                org     $-1                 // alter last byte of Name just above to set
1884+ 6C7E D3          >                db      {b $} | END_BIT     // msb as name end
1884+ 6C7F             >
1884+ 6C7F 5E 6C       >                dw      last_NFA            // Link to previous definition Name
1884+ 6C81             >CELLS:          if Two_Mul_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1884+ 6C81 32 6C       >                dw      Two_Mul_Ptr ; ok        // for primitive definitions  actual code
1884+ 6C83             >                else
1884+ 6C83 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
1884+ 6C83             >                endif           ; ok        // for other definitions it "points" the correct handler
1884+ 6C83             >                // Use of "; ok" to suppress "warning[fwdref]"
1884+ 6C83             >
1884+ 6C83             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1885+ 6C83
1886+ 6C83
1887+ 6C83              //  ______________________________________________________________________
1888+ 6C83
# file closed: C:\Zx\CSpect\Projects\vForth15_INDIRECT/source/L0.asm
 110  6C83                              include "L1.asm"
# file opened: C:\Zx\CSpect\Projects\vForth15_INDIRECT/source/L1.asm
   1+ 6C83              //  ______________________________________________________________________
   2+ 6C83              //
   3+ 6C83              //  L1.asm
   4+ 6C83              //
   5+ 6C83              //  Level-1 definitions and derivate
   6+ 6C83              //  ______________________________________________________________________
   7+ 6C83
   8+ 6C83              //  ______________________________________________________________________
   9+ 6C83              //
  10+ 6C83              // :            -- cccc     ( compile time )
  11+ 6C83              //              i*x -- j*x  ( run time )
  12+ 6C83              // Colon Definition
  13+ 6C83                              Colon_Def COLON, ":", is_immediate      // has forward-ref
  13+ 6C83             >                New_Def  COLON, ":", Enter_Ptr, is_immediate ; ok
  13+ 6C83             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  13+ 6C83             >
  13+ 6C83             >                // dummy db directives used to calculate length of namec
  13+ 6C83 3A          >                db      ":"
  13+ 6C84             >len_NFA         defl    $ - temp_NFA
  13+ 6C84             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  13+ 6C83             >
  13+ 6C83 C1          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
  13+ 6C84 3A          >                db      ":"               // name string in 7-bit ascii, but
  13+ 6C85             >                org     $-1                 // alter last byte of Name just above to set
  13+ 6C84 BA          >                db      {b $} | END_BIT     // msb as name end
  13+ 6C85             >
  13+ 6C85 79 6C       >                dw      last_NFA            // Link to previous definition Name
  13+ 6C87             >COLON:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
  13+ 6C87 9D 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
  13+ 6C89             >                else
  13+ 6C89 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
  13+ 6C89             >                endif           ; ok        // for other definitions it "points" the correct handler
  13+ 6C89             >                // Use of "; ok" to suppress "warning[fwdref]"
  13+ 6C89             >
  13+ 6C89             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  14+ 6C89
  15+ 6C89 F5 70                        dw      QEXEC                   // ?exec
  16+ 6C8B B0 70                        dw      STORE_CSP               // !csp
  17+ 6C8D 5A 6E B2 6B                  dw      CURRENT, FETCH          // current @
  18+ 6C91 4D 6E BF 6B                  dw      CONTEXT, STORE          // context !
  19+ 6C95 F3 76                        dw      CREATE                  // create  ( forward )
  20+ 6C97 A2 71                        dw      SMUDGE                  // dmudge
  21+ 6C99 8D 71                        dw      SQUARED_CLOSE           // ]
  22+ 6C9B F8 71                        dw      C_SEMICOLON_CODE        // ;code ( change the 3-bytes CFA of defining word to call Enter_Ptr )
  23+ 6C9D                                                              // ... immediate
  24+ 6C9D              Enter_Ptr:
  25+ 6C9D                              // via call coded in CFA
  26+ 6C9D                              ldhlrp
  26+ 6C9D 2A 96 63    >                ld      hl,(RP_Pointer)
  27+ 6CA0 2B                           dec     hl                  // push on Return-Stack current Instruction-Pointer
  28+ 6CA1 70                           ld      (hl), b
  29+ 6CA2 2B                           dec     hl
  30+ 6CA3 71                           ld      (hl), c
  31+ 6CA4                              ldrphl
  31+ 6CA4 22 96 63    >                ld      (RP_Pointer),hl
  32+ 6CA7 13                           inc     de
  33+ 6CA8 4B                           ld      c, e
  34+ 6CA9 42                           ld      b, d
  35+ 6CAA                              next
  35+ 6CAA DD E9       >                jp      (ix)
  36+ 6CAC
  37+ 6CAC              //  ______________________________________________________________________
  38+ 6CAC              //
  39+ 6CAC              // ;            --
  40+ 6CAC              // Semicolon. End of Colon-Definition. Stack must be balanced.
  41+ 6CAC                              Colon_Def SEMICOLON, ";", is_immediate   // has forward-ref
  41+ 6CAC             >                New_Def  SEMICOLON, ";", Enter_Ptr, is_immediate ; ok
  41+ 6CAC             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  41+ 6CAC             >
  41+ 6CAC             >                // dummy db directives used to calculate length of namec
  41+ 6CAC 3B          >                db      ";"
  41+ 6CAD             >len_NFA         defl    $ - temp_NFA
  41+ 6CAD             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  41+ 6CAC             >
  41+ 6CAC C1          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
  41+ 6CAD 3B          >                db      ";"               // name string in 7-bit ascii, but
  41+ 6CAE             >                org     $-1                 // alter last byte of Name just above to set
  41+ 6CAD BB          >                db      {b $} | END_BIT     // msb as name end
  41+ 6CAE             >
  41+ 6CAE 83 6C       >                dw      last_NFA            // Link to previous definition Name
  41+ 6CB0             >SEMICOLON:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
  41+ 6CB0 9D 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
  41+ 6CB2             >                else
  41+ 6CB2 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
  41+ 6CB2             >                endif           ; ok        // for other definitions it "points" the correct handler
  41+ 6CB2             >                // Use of "; ok" to suppress "warning[fwdref]"
  41+ 6CB2             >
  41+ 6CB2             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  42+ 6CB2
  43+ 6CB2 1F 71                        dw      QCSP                    // ?csp
  44+ 6CB4 56 71 99 69                  dw      COMPILE, EXIT           // [compile] ;s
  45+ 6CB8 A2 71                        dw      SMUDGE                  // smudge
  46+ 6CBA 7F 71                        dw      SQUARED_OPEN            // [
  47+ 6CBC 99 69                        dw      EXIT                    // ; immediate
  48+ 6CBE
  49+ 6CBE              //  ______________________________________________________________________
  50+ 6CBE              //
  51+ 6CBE              // noop         --
  52+ 6CBE
  53+ 6CBE                              Colon_Def NOOP, "NOOP", is_normal
  53+ 6CBE             >                New_Def  NOOP, "NOOP", Enter_Ptr, is_normal ; ok
  53+ 6CBE             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  53+ 6CBE             >
  53+ 6CBE             >                // dummy db directives used to calculate length of namec
  53+ 6CBE 4E 4F 4F 50 >                db      "NOOP"
  53+ 6CC2             >len_NFA         defl    $ - temp_NFA
  53+ 6CC2             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  53+ 6CBE             >
  53+ 6CBE 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  53+ 6CBF 4E 4F 4F 50 >                db      "NOOP"               // name string in 7-bit ascii, but
  53+ 6CC3             >                org     $-1                 // alter last byte of Name just above to set
  53+ 6CC2 D0          >                db      {b $} | END_BIT     // msb as name end
  53+ 6CC3             >
  53+ 6CC3 AC 6C       >                dw      last_NFA            // Link to previous definition Name
  53+ 6CC5             >NOOP:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
  53+ 6CC5 9D 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
  53+ 6CC7             >                else
  53+ 6CC7 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
  53+ 6CC7             >                endif           ; ok        // for other definitions it "points" the correct handler
  53+ 6CC7             >                // Use of "; ok" to suppress "warning[fwdref]"
  53+ 6CC7             >
  53+ 6CC7             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  54+ 6CC7 99 69                        dw      EXIT
  55+ 6CC9
  56+ 6CC9              //  ______________________________________________________________________
  57+ 6CC9              //
  58+ 6CC9              // constant     n -- cccc     ( compile time )
  59+ 6CC9              //              -- n          ( run time )
  60+ 6CC9              // Constant definition.
  61+ 6CC9                              Colon_Def CONSTANT, "CONSTANT", is_normal   // has forward-ref
  61+ 6CC9             >                New_Def  CONSTANT, "CONSTANT", Enter_Ptr, is_normal ; ok
  61+ 6CC9             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  61+ 6CC9             >
  61+ 6CC9             >                // dummy db directives used to calculate length of namec
  61+ 6CC9 43 4F 4E 53 >                db      "CONSTANT"
  61+ 6CCD 54 41 4E 54 >
  61+ 6CD1             >len_NFA         defl    $ - temp_NFA
  61+ 6CD1             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  61+ 6CC9             >
  61+ 6CC9 88          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  61+ 6CCA 43 4F 4E 53 >                db      "CONSTANT"               // name string in 7-bit ascii, but
  61+ 6CCE 54 41 4E 54 >
  61+ 6CD2             >                org     $-1                 // alter last byte of Name just above to set
  61+ 6CD1 D4          >                db      {b $} | END_BIT     // msb as name end
  61+ 6CD2             >
  61+ 6CD2 BE 6C       >                dw      last_NFA            // Link to previous definition Name
  61+ 6CD4             >CONSTANT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
  61+ 6CD4 9D 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
  61+ 6CD6             >                else
  61+ 6CD6 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
  61+ 6CD6             >                endif           ; ok        // for other definitions it "points" the correct handler
  61+ 6CD6             >                // Use of "; ok" to suppress "warning[fwdref]"
  61+ 6CD6             >
  61+ 6CD6             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  62+ 6CD6
  63+ 6CD6 F3 76                        dw      CREATE                  // create
  64+ 6CD8 15 6F                        dw      COMMA                   // ,    ( at PFA then, store the value )
  65+ 6CDA F8 71                        dw      C_SEMICOLON_CODE        // ;code (  changes the 3-bytes CFA to call Constant_Ptr )
  66+ 6CDC              Constant_Ptr:
  67+ 6CDC
  68+ 6CDC 13                           inc     de
  69+ 6CDD EB                           ex      de, hl
  70+ 6CDE
  71+ 6CDE 5E                           ld      e, (hl)
  72+ 6CDF 23                           inc     hl
  73+ 6CE0 56                           ld      d, (hl)
  74+ 6CE1 D5                           push    de
  75+ 6CE2                              next
  75+ 6CE2 DD E9       >                jp      (ix)
  76+ 6CE4
  77+ 6CE4              //  ______________________________________________________________________
  78+ 6CE4              //
  79+ 6CE4              // variable     n -- cccc     ( compile time )
  80+ 6CE4              //              -- a          ( run time )
  81+ 6CE4              // Variable definition, n is the initial value.
  82+ 6CE4                              Colon_Def VARIABLE, "VARIABLE", is_normal   // has forward-ref
  82+ 6CE4             >                New_Def  VARIABLE, "VARIABLE", Enter_Ptr, is_normal ; ok
  82+ 6CE4             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  82+ 6CE4             >
  82+ 6CE4             >                // dummy db directives used to calculate length of namec
  82+ 6CE4 56 41 52 49 >                db      "VARIABLE"
  82+ 6CE8 41 42 4C 45 >
  82+ 6CEC             >len_NFA         defl    $ - temp_NFA
  82+ 6CEC             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  82+ 6CE4             >
  82+ 6CE4 88          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  82+ 6CE5 56 41 52 49 >                db      "VARIABLE"               // name string in 7-bit ascii, but
  82+ 6CE9 41 42 4C 45 >
  82+ 6CED             >                org     $-1                 // alter last byte of Name just above to set
  82+ 6CEC C5          >                db      {b $} | END_BIT     // msb as name end
  82+ 6CED             >
  82+ 6CED C9 6C       >                dw      last_NFA            // Link to previous definition Name
  82+ 6CEF             >VARIABLE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
  82+ 6CEF 9D 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
  82+ 6CF1             >                else
  82+ 6CF1 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
  82+ 6CF1             >                endif           ; ok        // for other definitions it "points" the correct handler
  82+ 6CF1             >                // Use of "; ok" to suppress "warning[fwdref]"
  82+ 6CF1             >
  82+ 6CF1             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  83+ 6CF1
  84+ 6CF1 1A 6D                        dw      ZERO
  85+ 6CF3 D4 6C                        dw      CONSTANT                // constant
  86+ 6CF5 F8 71                        dw      C_SEMICOLON_CODE        // ;code ( changes the 3-bytes CFA to call Variable_Ptr )
  87+ 6CF7              Variable_Ptr:
  88+ 6CF7
  89+ 6CF7 13                           inc     de
  90+ 6CF8 D5                           push    de                  // balance TOS before overwrite it
  91+ 6CF9
  92+ 6CF9                              next
  92+ 6CF9 DD E9       >                jp      (ix)
  93+ 6CFB
  94+ 6CFB              //  ______________________________________________________________________
  95+ 6CFB              //
  96+ 6CFB              // user         b -- cccc     ( compile time )
  97+ 6CFB              //              -- a          ( run time )
  98+ 6CFB              // User variable definition
  99+ 6CFB                              Colon_Def USER, "USER", is_normal
  99+ 6CFB             >                New_Def  USER, "USER", Enter_Ptr, is_normal ; ok
  99+ 6CFB             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  99+ 6CFB             >
  99+ 6CFB             >                // dummy db directives used to calculate length of namec
  99+ 6CFB 55 53 45 52 >                db      "USER"
  99+ 6CFF             >len_NFA         defl    $ - temp_NFA
  99+ 6CFF             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  99+ 6CFB             >
  99+ 6CFB 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  99+ 6CFC 55 53 45 52 >                db      "USER"               // name string in 7-bit ascii, but
  99+ 6D00             >                org     $-1                 // alter last byte of Name just above to set
  99+ 6CFF D2          >                db      {b $} | END_BIT     // msb as name end
  99+ 6D00             >
  99+ 6D00 E4 6C       >                dw      last_NFA            // Link to previous definition Name
  99+ 6D02             >USER:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
  99+ 6D02 9D 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
  99+ 6D04             >                else
  99+ 6D04 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
  99+ 6D04             >                endif           ; ok        // for other definitions it "points" the correct handler
  99+ 6D04             >                // Use of "; ok" to suppress "warning[fwdref]"
  99+ 6D04             >
  99+ 6D04             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 100+ 6D04
 101+ 6D04 F3 76                        dw      CREATE                  // create
 102+ 6D06 26 6F                        dw      CCOMMA                  // c,
 103+ 6D08 F8 71                        dw      C_SEMICOLON_CODE        // ;code () changes the 3-bytes CFA to call User_Ptr )
 104+ 6D0A
 105+ 6D0A
 106+ 6D0A              User_Ptr:
 107+ 6D0A                              // via call coded in CFA
 108+ 6D0A 13                           inc     de
 109+ 6D0B EB                           ex      de, hl
 110+ 6D0C 5E                           ld      e, (hl)
 111+ 6D0D 16 00                        ld      d, 0
 112+ 6D0F 2A 94 63                     ld      hl, (USER_Pointer)
 113+ 6D12 19                           add     hl, de
 114+ 6D13
 115+ 6D13                              psh1
 115+ 6D13 E5          >                push    hl
 115+ 6D14 DD E9       >                jp      (ix)
 116+ 6D16
 117+ 6D16              //  ______________________________________________________________________
 118+ 6D16              //
 119+ 6D16                              Constant_Def ZERO       ,   "0"     ,   0
 119+ 6D16             >                New_Def  ZERO, "0", Constant_Ptr, is_normal
 119+ 6D16             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 119+ 6D16             >
 119+ 6D16             >                // dummy db directives used to calculate length of namec
 119+ 6D16 30          >                db      "0"
 119+ 6D17             >len_NFA         defl    $ - temp_NFA
 119+ 6D17             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 119+ 6D16             >
 119+ 6D16 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 119+ 6D17 30          >                db      "0"               // name string in 7-bit ascii, but
 119+ 6D18             >                org     $-1                 // alter last byte of Name just above to set
 119+ 6D17 B0          >                db      {b $} | END_BIT     // msb as name end
 119+ 6D18             >
 119+ 6D18 FB 6C       >                dw      last_NFA            // Link to previous definition Name
 119+ 6D1A             >ZERO:          if Constant_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 119+ 6D1A DC 6C       >                dw      Constant_Ptr ; ok        // for primitive definitions  actual code
 119+ 6D1C             >                else
 119+ 6D1C ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 119+ 6D1C             >                endif           ; ok        // for other definitions it "points" the correct handler
 119+ 6D1C             >                // Use of "; ok" to suppress "warning[fwdref]"
 119+ 6D1C             >
 119+ 6D1C             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 119+ 6D1C 00 00       >                dw      0
 120+ 6D1E                              Constant_Def ONE        ,   "1"     ,   1
 120+ 6D1E             >                New_Def  ONE, "1", Constant_Ptr, is_normal
 120+ 6D1E             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 120+ 6D1E             >
 120+ 6D1E             >                // dummy db directives used to calculate length of namec
 120+ 6D1E 31          >                db      "1"
 120+ 6D1F             >len_NFA         defl    $ - temp_NFA
 120+ 6D1F             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 120+ 6D1E             >
 120+ 6D1E 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 120+ 6D1F 31          >                db      "1"               // name string in 7-bit ascii, but
 120+ 6D20             >                org     $-1                 // alter last byte of Name just above to set
 120+ 6D1F B1          >                db      {b $} | END_BIT     // msb as name end
 120+ 6D20             >
 120+ 6D20 16 6D       >                dw      last_NFA            // Link to previous definition Name
 120+ 6D22             >ONE:          if Constant_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 120+ 6D22 DC 6C       >                dw      Constant_Ptr ; ok        // for primitive definitions  actual code
 120+ 6D24             >                else
 120+ 6D24 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 120+ 6D24             >                endif           ; ok        // for other definitions it "points" the correct handler
 120+ 6D24             >                // Use of "; ok" to suppress "warning[fwdref]"
 120+ 6D24             >
 120+ 6D24             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 120+ 6D24 01 00       >                dw      1
 121+ 6D26                              Constant_Def TWO        ,   "2"     ,   2
 121+ 6D26             >                New_Def  TWO, "2", Constant_Ptr, is_normal
 121+ 6D26             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 121+ 6D26             >
 121+ 6D26             >                // dummy db directives used to calculate length of namec
 121+ 6D26 32          >                db      "2"
 121+ 6D27             >len_NFA         defl    $ - temp_NFA
 121+ 6D27             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 121+ 6D26             >
 121+ 6D26 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 121+ 6D27 32          >                db      "2"               // name string in 7-bit ascii, but
 121+ 6D28             >                org     $-1                 // alter last byte of Name just above to set
 121+ 6D27 B2          >                db      {b $} | END_BIT     // msb as name end
 121+ 6D28             >
 121+ 6D28 1E 6D       >                dw      last_NFA            // Link to previous definition Name
 121+ 6D2A             >TWO:          if Constant_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 121+ 6D2A DC 6C       >                dw      Constant_Ptr ; ok        // for primitive definitions  actual code
 121+ 6D2C             >                else
 121+ 6D2C ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 121+ 6D2C             >                endif           ; ok        // for other definitions it "points" the correct handler
 121+ 6D2C             >                // Use of "; ok" to suppress "warning[fwdref]"
 121+ 6D2C             >
 121+ 6D2C             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 121+ 6D2C 02 00       >                dw      2
 122+ 6D2E                              Constant_Def THREE      ,   "3"     ,   3
 122+ 6D2E             >                New_Def  THREE, "3", Constant_Ptr, is_normal
 122+ 6D2E             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 122+ 6D2E             >
 122+ 6D2E             >                // dummy db directives used to calculate length of namec
 122+ 6D2E 33          >                db      "3"
 122+ 6D2F             >len_NFA         defl    $ - temp_NFA
 122+ 6D2F             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 122+ 6D2E             >
 122+ 6D2E 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 122+ 6D2F 33          >                db      "3"               // name string in 7-bit ascii, but
 122+ 6D30             >                org     $-1                 // alter last byte of Name just above to set
 122+ 6D2F B3          >                db      {b $} | END_BIT     // msb as name end
 122+ 6D30             >
 122+ 6D30 26 6D       >                dw      last_NFA            // Link to previous definition Name
 122+ 6D32             >THREE:          if Constant_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 122+ 6D32 DC 6C       >                dw      Constant_Ptr ; ok        // for primitive definitions  actual code
 122+ 6D34             >                else
 122+ 6D34 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 122+ 6D34             >                endif           ; ok        // for other definitions it "points" the correct handler
 122+ 6D34             >                // Use of "; ok" to suppress "warning[fwdref]"
 122+ 6D34             >
 122+ 6D34             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 122+ 6D34 03 00       >                dw      3
 123+ 6D36                              Constant_Def NEG_ONE    ,   "-1"    ,  -1
 123+ 6D36             >                New_Def  NEG_ONE, "-1", Constant_Ptr, is_normal
 123+ 6D36             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 123+ 6D36             >
 123+ 6D36             >                // dummy db directives used to calculate length of namec
 123+ 6D36 2D 31       >                db      "-1"
 123+ 6D38             >len_NFA         defl    $ - temp_NFA
 123+ 6D38             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 123+ 6D36             >
 123+ 6D36 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 123+ 6D37 2D 31       >                db      "-1"               // name string in 7-bit ascii, but
 123+ 6D39             >                org     $-1                 // alter last byte of Name just above to set
 123+ 6D38 B1          >                db      {b $} | END_BIT     // msb as name end
 123+ 6D39             >
 123+ 6D39 2E 6D       >                dw      last_NFA            // Link to previous definition Name
 123+ 6D3B             >NEG_ONE:          if Constant_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 123+ 6D3B DC 6C       >                dw      Constant_Ptr ; ok        // for primitive definitions  actual code
 123+ 6D3D             >                else
 123+ 6D3D ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 123+ 6D3D             >                endif           ; ok        // for other definitions it "points" the correct handler
 123+ 6D3D             >                // Use of "; ok" to suppress "warning[fwdref]"
 123+ 6D3D             >
 123+ 6D3D             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 123+ 6D3D FF FF       >                dw      -1
 124+ 6D3F                              Constant_Def BL         ,   "BL"    , $20
 124+ 6D3F             >                New_Def  BL, "BL", Constant_Ptr, is_normal
 124+ 6D3F             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 124+ 6D3F             >
 124+ 6D3F             >                // dummy db directives used to calculate length of namec
 124+ 6D3F 42 4C       >                db      "BL"
 124+ 6D41             >len_NFA         defl    $ - temp_NFA
 124+ 6D41             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 124+ 6D3F             >
 124+ 6D3F 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 124+ 6D40 42 4C       >                db      "BL"               // name string in 7-bit ascii, but
 124+ 6D42             >                org     $-1                 // alter last byte of Name just above to set
 124+ 6D41 CC          >                db      {b $} | END_BIT     // msb as name end
 124+ 6D42             >
 124+ 6D42 36 6D       >                dw      last_NFA            // Link to previous definition Name
 124+ 6D44             >BL:          if Constant_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 124+ 6D44 DC 6C       >                dw      Constant_Ptr ; ok        // for primitive definitions  actual code
 124+ 6D46             >                else
 124+ 6D46 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 124+ 6D46             >                endif           ; ok        // for other definitions it "points" the correct handler
 124+ 6D46             >                // Use of "; ok" to suppress "warning[fwdref]"
 124+ 6D46             >
 124+ 6D46             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 124+ 6D46 20 00       >                dw      $20
 125+ 6D48                              Constant_Def CL         ,   "C/L"   ,  64
 125+ 6D48             >                New_Def  CL, "C/L", Constant_Ptr, is_normal
 125+ 6D48             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 125+ 6D48             >
 125+ 6D48             >                // dummy db directives used to calculate length of namec
 125+ 6D48 43 2F 4C    >                db      "C/L"
 125+ 6D4B             >len_NFA         defl    $ - temp_NFA
 125+ 6D4B             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 125+ 6D48             >
 125+ 6D48 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 125+ 6D49 43 2F 4C    >                db      "C/L"               // name string in 7-bit ascii, but
 125+ 6D4C             >                org     $-1                 // alter last byte of Name just above to set
 125+ 6D4B CC          >                db      {b $} | END_BIT     // msb as name end
 125+ 6D4C             >
 125+ 6D4C 3F 6D       >                dw      last_NFA            // Link to previous definition Name
 125+ 6D4E             >CL:          if Constant_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 125+ 6D4E DC 6C       >                dw      Constant_Ptr ; ok        // for primitive definitions  actual code
 125+ 6D50             >                else
 125+ 6D50 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 125+ 6D50             >                endif           ; ok        // for other definitions it "points" the correct handler
 125+ 6D50             >                // Use of "; ok" to suppress "warning[fwdref]"
 125+ 6D50             >
 125+ 6D50             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 125+ 6D50 40 00       >                dw      64
 126+ 6D52                              Constant_Def BBUF       ,   "B/BUF" , 512
 126+ 6D52             >                New_Def  BBUF, "B/BUF", Constant_Ptr, is_normal
 126+ 6D52             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 126+ 6D52             >
 126+ 6D52             >                // dummy db directives used to calculate length of namec
 126+ 6D52 42 2F 42 55 >                db      "B/BUF"
 126+ 6D56 46          >
 126+ 6D57             >len_NFA         defl    $ - temp_NFA
 126+ 6D57             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 126+ 6D52             >
 126+ 6D52 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 126+ 6D53 42 2F 42 55 >                db      "B/BUF"               // name string in 7-bit ascii, but
 126+ 6D57 46          >
 126+ 6D58             >                org     $-1                 // alter last byte of Name just above to set
 126+ 6D57 C6          >                db      {b $} | END_BIT     // msb as name end
 126+ 6D58             >
 126+ 6D58 48 6D       >                dw      last_NFA            // Link to previous definition Name
 126+ 6D5A             >BBUF:          if Constant_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 126+ 6D5A DC 6C       >                dw      Constant_Ptr ; ok        // for primitive definitions  actual code
 126+ 6D5C             >                else
 126+ 6D5C ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 126+ 6D5C             >                endif           ; ok        // for other definitions it "points" the correct handler
 126+ 6D5C             >                // Use of "; ok" to suppress "warning[fwdref]"
 126+ 6D5C             >
 126+ 6D5C             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 126+ 6D5C 00 02       >                dw      512
 127+ 6D5E                              Constant_Def BSCR       ,   "B/SCR" ,   2
 127+ 6D5E             >                New_Def  BSCR, "B/SCR", Constant_Ptr, is_normal
 127+ 6D5E             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 127+ 6D5E             >
 127+ 6D5E             >                // dummy db directives used to calculate length of namec
 127+ 6D5E 42 2F 53 43 >                db      "B/SCR"
 127+ 6D62 52          >
 127+ 6D63             >len_NFA         defl    $ - temp_NFA
 127+ 6D63             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 127+ 6D5E             >
 127+ 6D5E 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 127+ 6D5F 42 2F 53 43 >                db      "B/SCR"               // name string in 7-bit ascii, but
 127+ 6D63 52          >
 127+ 6D64             >                org     $-1                 // alter last byte of Name just above to set
 127+ 6D63 D2          >                db      {b $} | END_BIT     // msb as name end
 127+ 6D64             >
 127+ 6D64 52 6D       >                dw      last_NFA            // Link to previous definition Name
 127+ 6D66             >BSCR:          if Constant_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 127+ 6D66 DC 6C       >                dw      Constant_Ptr ; ok        // for primitive definitions  actual code
 127+ 6D68             >                else
 127+ 6D68 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 127+ 6D68             >                endif           ; ok        // for other definitions it "points" the correct handler
 127+ 6D68             >                // Use of "; ok" to suppress "warning[fwdref]"
 127+ 6D68             >
 127+ 6D68             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 127+ 6D68 02 00       >                dw      2
 128+ 6D6A                              Constant_Def LSCR       ,   "L/SCR" ,  16
 128+ 6D6A             >                New_Def  LSCR, "L/SCR", Constant_Ptr, is_normal
 128+ 6D6A             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 128+ 6D6A             >
 128+ 6D6A             >                // dummy db directives used to calculate length of namec
 128+ 6D6A 4C 2F 53 43 >                db      "L/SCR"
 128+ 6D6E 52          >
 128+ 6D6F             >len_NFA         defl    $ - temp_NFA
 128+ 6D6F             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 128+ 6D6A             >
 128+ 6D6A 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 128+ 6D6B 4C 2F 53 43 >                db      "L/SCR"               // name string in 7-bit ascii, but
 128+ 6D6F 52          >
 128+ 6D70             >                org     $-1                 // alter last byte of Name just above to set
 128+ 6D6F D2          >                db      {b $} | END_BIT     // msb as name end
 128+ 6D70             >
 128+ 6D70 5E 6D       >                dw      last_NFA            // Link to previous definition Name
 128+ 6D72             >LSCR:          if Constant_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 128+ 6D72 DC 6C       >                dw      Constant_Ptr ; ok        // for primitive definitions  actual code
 128+ 6D74             >                else
 128+ 6D74 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 128+ 6D74             >                endif           ; ok        // for other definitions it "points" the correct handler
 128+ 6D74             >                // Use of "; ok" to suppress "warning[fwdref]"
 128+ 6D74             >
 128+ 6D74             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 128+ 6D74 10 00       >                dw      16
 129+ 6D76
 130+ 6D76              //  ______________________________________________________________________
 131+ 6D76              //
 132+ 6D76              // +origin         --
 133+ 6D76              //              Colon_Def PLUS_ORIGIN, "+ORIGIN", is_normal
 134+ 6D76              //              dw      LIT, Cold_origin        // [ hex 6366 ] literal
 135+ 6D76              //              dw      PLUS                    // +
 136+ 6D76              //              dw      EXIT                    // ;
 137+ 6D76                              New_Def PLUS_ORIGIN, "+ORIGIN", is_code, is_normal
 137+ 6D76             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 137+ 6D76             >
 137+ 6D76             >                // dummy db directives used to calculate length of namec
 137+ 6D76 2B 4F 52 49 >                db      "+ORIGIN"
 137+ 6D7A 47 49 4E    >
 137+ 6D7D             >len_NFA         defl    $ - temp_NFA
 137+ 6D7D             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 137+ 6D76             >
 137+ 6D76 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 137+ 6D77 2B 4F 52 49 >                db      "+ORIGIN"               // name string in 7-bit ascii, but
 137+ 6D7B 47 49 4E    >
 137+ 6D7E             >                org     $-1                 // alter last byte of Name just above to set
 137+ 6D7D CE          >                db      {b $} | END_BIT     // msb as name end
 137+ 6D7E             >
 137+ 6D7E 6A 6D       >                dw      last_NFA            // Link to previous definition Name
 137+ 6D80             >PLUS_ORIGIN:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 137+ 6D80 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
 137+ 6D80             >                else
 137+ 6D80 82 6D       >                dw      $ + 2   ; ok        // is pointed by CFA
 137+ 6D82             >                endif           ; ok        // for other definitions it "points" the correct handler
 137+ 6D82             >                // Use of "; ok" to suppress "warning[fwdref]"
 137+ 6D82             >
 137+ 6D82             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 138+ 6D82 E1                           pop     hl
 139+ 6D83 11 66 63                     ld      de,  Cold_origin
 140+ 6D86 19                           add     hl, de
 141+ 6D87 E5                           push    hl
 142+ 6D88                              next
 142+ 6D88 DD E9       >                jp      (ix)
 143+ 6D8A
 144+ 6D8A
 145+ 6D8A              //  ______________________________________________________________________
 146+ 6D8A              //
 147+ 6D8A                              Constant_Def CNEXT      ,   "(NEXT)", Next_Ptr
 147+ 6D8A             >                New_Def  CNEXT, "(NEXT)", Constant_Ptr, is_normal
 147+ 6D8A             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 147+ 6D8A             >
 147+ 6D8A             >                // dummy db directives used to calculate length of namec
 147+ 6D8A 28 4E 45 58 >                db      "(NEXT)"
 147+ 6D8E 54 29       >
 147+ 6D90             >len_NFA         defl    $ - temp_NFA
 147+ 6D90             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 147+ 6D8A             >
 147+ 6D8A 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 147+ 6D8B 28 4E 45 58 >                db      "(NEXT)"               // name string in 7-bit ascii, but
 147+ 6D8F 54 29       >
 147+ 6D91             >                org     $-1                 // alter last byte of Name just above to set
 147+ 6D90 A9          >                db      {b $} | END_BIT     // msb as name end
 147+ 6D91             >
 147+ 6D91 76 6D       >                dw      last_NFA            // Link to previous definition Name
 147+ 6D93             >CNEXT:          if Constant_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 147+ 6D93 DC 6C       >                dw      Constant_Ptr ; ok        // for primitive definitions  actual code
 147+ 6D95             >                else
 147+ 6D95 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 147+ 6D95             >                endif           ; ok        // for other definitions it "points" the correct handler
 147+ 6D95             >                // Use of "; ok" to suppress "warning[fwdref]"
 147+ 6D95             >
 147+ 6D95             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 147+ 6D95 98 63       >                dw      Next_Ptr
 148+ 6D97
 149+ 6D97              //  ______________________________________________________________________
 150+ 6D97              //
 151+ 6D97
 152+ 6D97                              User_Def S0         , "S0"        , 06 // starting value of Stack-Pointer
 152+ 6D97             >                New_Def  S0, "S0", User_Ptr, is_normal
 152+ 6D97             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 152+ 6D97             >
 152+ 6D97             >                // dummy db directives used to calculate length of namec
 152+ 6D97 53 30       >                db      "S0"
 152+ 6D99             >len_NFA         defl    $ - temp_NFA
 152+ 6D99             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 152+ 6D97             >
 152+ 6D97 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 152+ 6D98 53 30       >                db      "S0"               // name string in 7-bit ascii, but
 152+ 6D9A             >                org     $-1                 // alter last byte of Name just above to set
 152+ 6D99 B0          >                db      {b $} | END_BIT     // msb as name end
 152+ 6D9A             >
 152+ 6D9A 8A 6D       >                dw      last_NFA            // Link to previous definition Name
 152+ 6D9C             >S0:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 152+ 6D9C 0A 6D       >                dw      User_Ptr ; ok        // for primitive definitions  actual code
 152+ 6D9E             >                else
 152+ 6D9E ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 152+ 6D9E             >                endif           ; ok        // for other definitions it "points" the correct handler
 152+ 6D9E             >                // Use of "; ok" to suppress "warning[fwdref]"
 152+ 6D9E             >
 152+ 6D9E             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 152+ 6D9E 06          >                db      06
 153+ 6D9F                              User_Def R0         , "R0"        , 08 // starting value of Return-Pointer
 153+ 6D9F             >                New_Def  R0, "R0", User_Ptr, is_normal
 153+ 6D9F             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 153+ 6D9F             >
 153+ 6D9F             >                // dummy db directives used to calculate length of namec
 153+ 6D9F 52 30       >                db      "R0"
 153+ 6DA1             >len_NFA         defl    $ - temp_NFA
 153+ 6DA1             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 153+ 6D9F             >
 153+ 6D9F 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 153+ 6DA0 52 30       >                db      "R0"               // name string in 7-bit ascii, but
 153+ 6DA2             >                org     $-1                 // alter last byte of Name just above to set
 153+ 6DA1 B0          >                db      {b $} | END_BIT     // msb as name end
 153+ 6DA2             >
 153+ 6DA2 97 6D       >                dw      last_NFA            // Link to previous definition Name
 153+ 6DA4             >R0:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 153+ 6DA4 0A 6D       >                dw      User_Ptr ; ok        // for primitive definitions  actual code
 153+ 6DA6             >                else
 153+ 6DA6 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 153+ 6DA6             >                endif           ; ok        // for other definitions it "points" the correct handler
 153+ 6DA6             >                // Use of "; ok" to suppress "warning[fwdref]"
 153+ 6DA6             >
 153+ 6DA6             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 153+ 6DA6 08          >                db      08
 154+ 6DA7                              User_Def TIB        , "TIB"       , 10 // input terminal buffer address
 154+ 6DA7             >                New_Def  TIB, "TIB", User_Ptr, is_normal
 154+ 6DA7             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 154+ 6DA7             >
 154+ 6DA7             >                // dummy db directives used to calculate length of namec
 154+ 6DA7 54 49 42    >                db      "TIB"
 154+ 6DAA             >len_NFA         defl    $ - temp_NFA
 154+ 6DAA             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 154+ 6DA7             >
 154+ 6DA7 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 154+ 6DA8 54 49 42    >                db      "TIB"               // name string in 7-bit ascii, but
 154+ 6DAB             >                org     $-1                 // alter last byte of Name just above to set
 154+ 6DAA C2          >                db      {b $} | END_BIT     // msb as name end
 154+ 6DAB             >
 154+ 6DAB 9F 6D       >                dw      last_NFA            // Link to previous definition Name
 154+ 6DAD             >TIB:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 154+ 6DAD 0A 6D       >                dw      User_Ptr ; ok        // for primitive definitions  actual code
 154+ 6DAF             >                else
 154+ 6DAF ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 154+ 6DAF             >                endif           ; ok        // for other definitions it "points" the correct handler
 154+ 6DAF             >                // Use of "; ok" to suppress "warning[fwdref]"
 154+ 6DAF             >
 154+ 6DAF             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 154+ 6DAF 0A          >                db      10
 155+ 6DB0                              User_Def WIDTH      , "WIDTH"     , 12 // maximum number of characters for a word name
 155+ 6DB0             >                New_Def  WIDTH, "WIDTH", User_Ptr, is_normal
 155+ 6DB0             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 155+ 6DB0             >
 155+ 6DB0             >                // dummy db directives used to calculate length of namec
 155+ 6DB0 57 49 44 54 >                db      "WIDTH"
 155+ 6DB4 48          >
 155+ 6DB5             >len_NFA         defl    $ - temp_NFA
 155+ 6DB5             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 155+ 6DB0             >
 155+ 6DB0 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 155+ 6DB1 57 49 44 54 >                db      "WIDTH"               // name string in 7-bit ascii, but
 155+ 6DB5 48          >
 155+ 6DB6             >                org     $-1                 // alter last byte of Name just above to set
 155+ 6DB5 C8          >                db      {b $} | END_BIT     // msb as name end
 155+ 6DB6             >
 155+ 6DB6 A7 6D       >                dw      last_NFA            // Link to previous definition Name
 155+ 6DB8             >WIDTH:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 155+ 6DB8 0A 6D       >                dw      User_Ptr ; ok        // for primitive definitions  actual code
 155+ 6DBA             >                else
 155+ 6DBA ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 155+ 6DBA             >                endif           ; ok        // for other definitions it "points" the correct handler
 155+ 6DBA             >                // Use of "; ok" to suppress "warning[fwdref]"
 155+ 6DBA             >
 155+ 6DBA             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 155+ 6DBA 0C          >                db      12
 156+ 6DBB                              User_Def WARNING    , "WARNING"   , 14 // error reporting method: 0 base, 1 verbose
 156+ 6DBB             >                New_Def  WARNING, "WARNING", User_Ptr, is_normal
 156+ 6DBB             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 156+ 6DBB             >
 156+ 6DBB             >                // dummy db directives used to calculate length of namec
 156+ 6DBB 57 41 52 4E >                db      "WARNING"
 156+ 6DBF 49 4E 47    >
 156+ 6DC2             >len_NFA         defl    $ - temp_NFA
 156+ 6DC2             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 156+ 6DBB             >
 156+ 6DBB 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 156+ 6DBC 57 41 52 4E >                db      "WARNING"               // name string in 7-bit ascii, but
 156+ 6DC0 49 4E 47    >
 156+ 6DC3             >                org     $-1                 // alter last byte of Name just above to set
 156+ 6DC2 C7          >                db      {b $} | END_BIT     // msb as name end
 156+ 6DC3             >
 156+ 6DC3 B0 6D       >                dw      last_NFA            // Link to previous definition Name
 156+ 6DC5             >WARNING:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 156+ 6DC5 0A 6D       >                dw      User_Ptr ; ok        // for primitive definitions  actual code
 156+ 6DC7             >                else
 156+ 6DC7 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 156+ 6DC7             >                endif           ; ok        // for other definitions it "points" the correct handler
 156+ 6DC7             >                // Use of "; ok" to suppress "warning[fwdref]"
 156+ 6DC7             >
 156+ 6DC7             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 156+ 6DC7 0E          >                db      14
 157+ 6DC8                              User_Def FENCE      , "FENCE"     , 16 // minimum address where FORGET can work
 157+ 6DC8             >                New_Def  FENCE, "FENCE", User_Ptr, is_normal
 157+ 6DC8             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 157+ 6DC8             >
 157+ 6DC8             >                // dummy db directives used to calculate length of namec
 157+ 6DC8 46 45 4E 43 >                db      "FENCE"
 157+ 6DCC 45          >
 157+ 6DCD             >len_NFA         defl    $ - temp_NFA
 157+ 6DCD             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 157+ 6DC8             >
 157+ 6DC8 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 157+ 6DC9 46 45 4E 43 >                db      "FENCE"               // name string in 7-bit ascii, but
 157+ 6DCD 45          >
 157+ 6DCE             >                org     $-1                 // alter last byte of Name just above to set
 157+ 6DCD C5          >                db      {b $} | END_BIT     // msb as name end
 157+ 6DCE             >
 157+ 6DCE BB 6D       >                dw      last_NFA            // Link to previous definition Name
 157+ 6DD0             >FENCE:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 157+ 6DD0 0A 6D       >                dw      User_Ptr ; ok        // for primitive definitions  actual code
 157+ 6DD2             >                else
 157+ 6DD2 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 157+ 6DD2             >                endif           ; ok        // for other definitions it "points" the correct handler
 157+ 6DD2             >                // Use of "; ok" to suppress "warning[fwdref]"
 157+ 6DD2             >
 157+ 6DD2             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 157+ 6DD2 10          >                db      16
 158+ 6DD3                              User_Def DP         , "DP"        , 18 // Dictionary Pointer
 158+ 6DD3             >                New_Def  DP, "DP", User_Ptr, is_normal
 158+ 6DD3             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 158+ 6DD3             >
 158+ 6DD3             >                // dummy db directives used to calculate length of namec
 158+ 6DD3 44 50       >                db      "DP"
 158+ 6DD5             >len_NFA         defl    $ - temp_NFA
 158+ 6DD5             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 158+ 6DD3             >
 158+ 6DD3 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 158+ 6DD4 44 50       >                db      "DP"               // name string in 7-bit ascii, but
 158+ 6DD6             >                org     $-1                 // alter last byte of Name just above to set
 158+ 6DD5 D0          >                db      {b $} | END_BIT     // msb as name end
 158+ 6DD6             >
 158+ 6DD6 C8 6D       >                dw      last_NFA            // Link to previous definition Name
 158+ 6DD8             >DP:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 158+ 6DD8 0A 6D       >                dw      User_Ptr ; ok        // for primitive definitions  actual code
 158+ 6DDA             >                else
 158+ 6DDA ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 158+ 6DDA             >                endif           ; ok        // for other definitions it "points" the correct handler
 158+ 6DDA             >                // Use of "; ok" to suppress "warning[fwdref]"
 158+ 6DDA             >
 158+ 6DDA             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 158+ 6DDA 12          >                db      18
 159+ 6DDB                              User_Def VOC_LINK   , "VOC-LINK"  , 20 // pointer to the latest vocabulary
 159+ 6DDB             >                New_Def  VOC_LINK, "VOC-LINK", User_Ptr, is_normal
 159+ 6DDB             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 159+ 6DDB             >
 159+ 6DDB             >                // dummy db directives used to calculate length of namec
 159+ 6DDB 56 4F 43 2D >                db      "VOC-LINK"
 159+ 6DDF 4C 49 4E 4B >
 159+ 6DE3             >len_NFA         defl    $ - temp_NFA
 159+ 6DE3             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 159+ 6DDB             >
 159+ 6DDB 88          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 159+ 6DDC 56 4F 43 2D >                db      "VOC-LINK"               // name string in 7-bit ascii, but
 159+ 6DE0 4C 49 4E 4B >
 159+ 6DE4             >                org     $-1                 // alter last byte of Name just above to set
 159+ 6DE3 CB          >                db      {b $} | END_BIT     // msb as name end
 159+ 6DE4             >
 159+ 6DE4 D3 6D       >                dw      last_NFA            // Link to previous definition Name
 159+ 6DE6             >VOC_LINK:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 159+ 6DE6 0A 6D       >                dw      User_Ptr ; ok        // for primitive definitions  actual code
 159+ 6DE8             >                else
 159+ 6DE8 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 159+ 6DE8             >                endif           ; ok        // for other definitions it "points" the correct handler
 159+ 6DE8             >                // Use of "; ok" to suppress "warning[fwdref]"
 159+ 6DE8             >
 159+ 6DE8             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 159+ 6DE8 14          >                db      20
 160+ 6DE9                              User_Def FIRST      , "FIRST"     , 22 // address of first buffer
 160+ 6DE9             >                New_Def  FIRST, "FIRST", User_Ptr, is_normal
 160+ 6DE9             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 160+ 6DE9             >
 160+ 6DE9             >                // dummy db directives used to calculate length of namec
 160+ 6DE9 46 49 52 53 >                db      "FIRST"
 160+ 6DED 54          >
 160+ 6DEE             >len_NFA         defl    $ - temp_NFA
 160+ 6DEE             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 160+ 6DE9             >
 160+ 6DE9 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 160+ 6DEA 46 49 52 53 >                db      "FIRST"               // name string in 7-bit ascii, but
 160+ 6DEE 54          >
 160+ 6DEF             >                org     $-1                 // alter last byte of Name just above to set
 160+ 6DEE D4          >                db      {b $} | END_BIT     // msb as name end
 160+ 6DEF             >
 160+ 6DEF DB 6D       >                dw      last_NFA            // Link to previous definition Name
 160+ 6DF1             >FIRST:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 160+ 6DF1 0A 6D       >                dw      User_Ptr ; ok        // for primitive definitions  actual code
 160+ 6DF3             >                else
 160+ 6DF3 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 160+ 6DF3             >                endif           ; ok        // for other definitions it "points" the correct handler
 160+ 6DF3             >                // Use of "; ok" to suppress "warning[fwdref]"
 160+ 6DF3             >
 160+ 6DF3             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 160+ 6DF3 16          >                db      22
 161+ 6DF4                              User_Def LIMIT      , "LIMIT"     , 24 // address of last buffer
 161+ 6DF4             >                New_Def  LIMIT, "LIMIT", User_Ptr, is_normal
 161+ 6DF4             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 161+ 6DF4             >
 161+ 6DF4             >                // dummy db directives used to calculate length of namec
 161+ 6DF4 4C 49 4D 49 >                db      "LIMIT"
 161+ 6DF8 54          >
 161+ 6DF9             >len_NFA         defl    $ - temp_NFA
 161+ 6DF9             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 161+ 6DF4             >
 161+ 6DF4 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 161+ 6DF5 4C 49 4D 49 >                db      "LIMIT"               // name string in 7-bit ascii, but
 161+ 6DF9 54          >
 161+ 6DFA             >                org     $-1                 // alter last byte of Name just above to set
 161+ 6DF9 D4          >                db      {b $} | END_BIT     // msb as name end
 161+ 6DFA             >
 161+ 6DFA E9 6D       >                dw      last_NFA            // Link to previous definition Name
 161+ 6DFC             >LIMIT:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 161+ 6DFC 0A 6D       >                dw      User_Ptr ; ok        // for primitive definitions  actual code
 161+ 6DFE             >                else
 161+ 6DFE ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 161+ 6DFE             >                endif           ; ok        // for other definitions it "points" the correct handler
 161+ 6DFE             >                // Use of "; ok" to suppress "warning[fwdref]"
 161+ 6DFE             >
 161+ 6DFE             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 161+ 6DFE 18          >                db      24
 162+ 6DFF                              User_Def EXP        , "EXP"       , 26 // keeps the exponent in number conversion
 162+ 6DFF             >                New_Def  EXP, "EXP", User_Ptr, is_normal
 162+ 6DFF             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 162+ 6DFF             >
 162+ 6DFF             >                // dummy db directives used to calculate length of namec
 162+ 6DFF 45 58 50    >                db      "EXP"
 162+ 6E02             >len_NFA         defl    $ - temp_NFA
 162+ 6E02             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 162+ 6DFF             >
 162+ 6DFF 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 162+ 6E00 45 58 50    >                db      "EXP"               // name string in 7-bit ascii, but
 162+ 6E03             >                org     $-1                 // alter last byte of Name just above to set
 162+ 6E02 D0          >                db      {b $} | END_BIT     // msb as name end
 162+ 6E03             >
 162+ 6E03 F4 6D       >                dw      last_NFA            // Link to previous definition Name
 162+ 6E05             >EXP:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 162+ 6E05 0A 6D       >                dw      User_Ptr ; ok        // for primitive definitions  actual code
 162+ 6E07             >                else
 162+ 6E07 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 162+ 6E07             >                endif           ; ok        // for other definitions it "points" the correct handler
 162+ 6E07             >                // Use of "; ok" to suppress "warning[fwdref]"
 162+ 6E07             >
 162+ 6E07             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 162+ 6E07 1A          >                db      26
 163+ 6E08                              User_Def NMODE      , "NMODE"     , 28 // number mode: 0 integer, 1 floating point
 163+ 6E08             >                New_Def  NMODE, "NMODE", User_Ptr, is_normal
 163+ 6E08             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 163+ 6E08             >
 163+ 6E08             >                // dummy db directives used to calculate length of namec
 163+ 6E08 4E 4D 4F 44 >                db      "NMODE"
 163+ 6E0C 45          >
 163+ 6E0D             >len_NFA         defl    $ - temp_NFA
 163+ 6E0D             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 163+ 6E08             >
 163+ 6E08 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 163+ 6E09 4E 4D 4F 44 >                db      "NMODE"               // name string in 7-bit ascii, but
 163+ 6E0D 45          >
 163+ 6E0E             >                org     $-1                 // alter last byte of Name just above to set
 163+ 6E0D C5          >                db      {b $} | END_BIT     // msb as name end
 163+ 6E0E             >
 163+ 6E0E FF 6D       >                dw      last_NFA            // Link to previous definition Name
 163+ 6E10             >NMODE:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 163+ 6E10 0A 6D       >                dw      User_Ptr ; ok        // for primitive definitions  actual code
 163+ 6E12             >                else
 163+ 6E12 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 163+ 6E12             >                endif           ; ok        // for other definitions it "points" the correct handler
 163+ 6E12             >                // Use of "; ok" to suppress "warning[fwdref]"
 163+ 6E12             >
 163+ 6E12             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 163+ 6E12 1C          >                db      28
 164+ 6E13                              User_Def BLK        , "BLK"       , 30 // block number to be interpreted. 0 for terminal
 164+ 6E13             >                New_Def  BLK, "BLK", User_Ptr, is_normal
 164+ 6E13             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 164+ 6E13             >
 164+ 6E13             >                // dummy db directives used to calculate length of namec
 164+ 6E13 42 4C 4B    >                db      "BLK"
 164+ 6E16             >len_NFA         defl    $ - temp_NFA
 164+ 6E16             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 164+ 6E13             >
 164+ 6E13 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 164+ 6E14 42 4C 4B    >                db      "BLK"               // name string in 7-bit ascii, but
 164+ 6E17             >                org     $-1                 // alter last byte of Name just above to set
 164+ 6E16 CB          >                db      {b $} | END_BIT     // msb as name end
 164+ 6E17             >
 164+ 6E17 08 6E       >                dw      last_NFA            // Link to previous definition Name
 164+ 6E19             >BLK:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 164+ 6E19 0A 6D       >                dw      User_Ptr ; ok        // for primitive definitions  actual code
 164+ 6E1B             >                else
 164+ 6E1B ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 164+ 6E1B             >                endif           ; ok        // for other definitions it "points" the correct handler
 164+ 6E1B             >                // Use of "; ok" to suppress "warning[fwdref]"
 164+ 6E1B             >
 164+ 6E1B             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 164+ 6E1B 1E          >                db      30
 165+ 6E1C                              User_Def TO_IN      , ">IN"       , 32 // incremented when consuming input buffer
 165+ 6E1C             >                New_Def  TO_IN, ">IN", User_Ptr, is_normal
 165+ 6E1C             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 165+ 6E1C             >
 165+ 6E1C             >                // dummy db directives used to calculate length of namec
 165+ 6E1C 3E 49 4E    >                db      ">IN"
 165+ 6E1F             >len_NFA         defl    $ - temp_NFA
 165+ 6E1F             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 165+ 6E1C             >
 165+ 6E1C 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 165+ 6E1D 3E 49 4E    >                db      ">IN"               // name string in 7-bit ascii, but
 165+ 6E20             >                org     $-1                 // alter last byte of Name just above to set
 165+ 6E1F CE          >                db      {b $} | END_BIT     // msb as name end
 165+ 6E20             >
 165+ 6E20 13 6E       >                dw      last_NFA            // Link to previous definition Name
 165+ 6E22             >TO_IN:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 165+ 6E22 0A 6D       >                dw      User_Ptr ; ok        // for primitive definitions  actual code
 165+ 6E24             >                else
 165+ 6E24 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 165+ 6E24             >                endif           ; ok        // for other definitions it "points" the correct handler
 165+ 6E24             >                // Use of "; ok" to suppress "warning[fwdref]"
 165+ 6E24             >
 165+ 6E24             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 165+ 6E24 20          >                db      32
 166+ 6E25                              User_Def OUT        , "OUT"       , 34 // incremented when sending to output
 166+ 6E25             >                New_Def  OUT, "OUT", User_Ptr, is_normal
 166+ 6E25             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 166+ 6E25             >
 166+ 6E25             >                // dummy db directives used to calculate length of namec
 166+ 6E25 4F 55 54    >                db      "OUT"
 166+ 6E28             >len_NFA         defl    $ - temp_NFA
 166+ 6E28             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 166+ 6E25             >
 166+ 6E25 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 166+ 6E26 4F 55 54    >                db      "OUT"               // name string in 7-bit ascii, but
 166+ 6E29             >                org     $-1                 // alter last byte of Name just above to set
 166+ 6E28 D4          >                db      {b $} | END_BIT     // msb as name end
 166+ 6E29             >
 166+ 6E29 1C 6E       >                dw      last_NFA            // Link to previous definition Name
 166+ 6E2B             >OUT:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 166+ 6E2B 0A 6D       >                dw      User_Ptr ; ok        // for primitive definitions  actual code
 166+ 6E2D             >                else
 166+ 6E2D ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 166+ 6E2D             >                endif           ; ok        // for other definitions it "points" the correct handler
 166+ 6E2D             >                // Use of "; ok" to suppress "warning[fwdref]"
 166+ 6E2D             >
 166+ 6E2D             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 166+ 6E2D 22          >                db      34
 167+ 6E2E                              User_Def SCR        , "SCR"       , 36 // latest screen retreieved by LIST
 167+ 6E2E             >                New_Def  SCR, "SCR", User_Ptr, is_normal
 167+ 6E2E             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 167+ 6E2E             >
 167+ 6E2E             >                // dummy db directives used to calculate length of namec
 167+ 6E2E 53 43 52    >                db      "SCR"
 167+ 6E31             >len_NFA         defl    $ - temp_NFA
 167+ 6E31             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 167+ 6E2E             >
 167+ 6E2E 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 167+ 6E2F 53 43 52    >                db      "SCR"               // name string in 7-bit ascii, but
 167+ 6E32             >                org     $-1                 // alter last byte of Name just above to set
 167+ 6E31 D2          >                db      {b $} | END_BIT     // msb as name end
 167+ 6E32             >
 167+ 6E32 25 6E       >                dw      last_NFA            // Link to previous definition Name
 167+ 6E34             >SCR:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 167+ 6E34 0A 6D       >                dw      User_Ptr ; ok        // for primitive definitions  actual code
 167+ 6E36             >                else
 167+ 6E36 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 167+ 6E36             >                endif           ; ok        // for other definitions it "points" the correct handler
 167+ 6E36             >                // Use of "; ok" to suppress "warning[fwdref]"
 167+ 6E36             >
 167+ 6E36             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 167+ 6E36 24          >                db      36
 168+ 6E37                              User_Def OFFSET     , "OFFSET"    , 38 //
 168+ 6E37             >                New_Def  OFFSET, "OFFSET", User_Ptr, is_normal
 168+ 6E37             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 168+ 6E37             >
 168+ 6E37             >                // dummy db directives used to calculate length of namec
 168+ 6E37 4F 46 46 53 >                db      "OFFSET"
 168+ 6E3B 45 54       >
 168+ 6E3D             >len_NFA         defl    $ - temp_NFA
 168+ 6E3D             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 168+ 6E37             >
 168+ 6E37 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 168+ 6E38 4F 46 46 53 >                db      "OFFSET"               // name string in 7-bit ascii, but
 168+ 6E3C 45 54       >
 168+ 6E3E             >                org     $-1                 // alter last byte of Name just above to set
 168+ 6E3D D4          >                db      {b $} | END_BIT     // msb as name end
 168+ 6E3E             >
 168+ 6E3E 2E 6E       >                dw      last_NFA            // Link to previous definition Name
 168+ 6E40             >OFFSET:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 168+ 6E40 0A 6D       >                dw      User_Ptr ; ok        // for primitive definitions  actual code
 168+ 6E42             >                else
 168+ 6E42 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 168+ 6E42             >                endif           ; ok        // for other definitions it "points" the correct handler
 168+ 6E42             >                // Use of "; ok" to suppress "warning[fwdref]"
 168+ 6E42             >
 168+ 6E42             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 168+ 6E42 26          >                db      38
 169+ 6E43                              User_Def CONTEXT    , "CONTEXT"   , 40 // pointer to the vocabulary where search begins
 169+ 6E43             >                New_Def  CONTEXT, "CONTEXT", User_Ptr, is_normal
 169+ 6E43             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 169+ 6E43             >
 169+ 6E43             >                // dummy db directives used to calculate length of namec
 169+ 6E43 43 4F 4E 54 >                db      "CONTEXT"
 169+ 6E47 45 58 54    >
 169+ 6E4A             >len_NFA         defl    $ - temp_NFA
 169+ 6E4A             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 169+ 6E43             >
 169+ 6E43 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 169+ 6E44 43 4F 4E 54 >                db      "CONTEXT"               // name string in 7-bit ascii, but
 169+ 6E48 45 58 54    >
 169+ 6E4B             >                org     $-1                 // alter last byte of Name just above to set
 169+ 6E4A D4          >                db      {b $} | END_BIT     // msb as name end
 169+ 6E4B             >
 169+ 6E4B 37 6E       >                dw      last_NFA            // Link to previous definition Name
 169+ 6E4D             >CONTEXT:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 169+ 6E4D 0A 6D       >                dw      User_Ptr ; ok        // for primitive definitions  actual code
 169+ 6E4F             >                else
 169+ 6E4F ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 169+ 6E4F             >                endif           ; ok        // for other definitions it "points" the correct handler
 169+ 6E4F             >                // Use of "; ok" to suppress "warning[fwdref]"
 169+ 6E4F             >
 169+ 6E4F             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 169+ 6E4F 28          >                db      40
 170+ 6E50                              User_Def CURRENT    , "CURRENT"   , 42 // pointer to the vocabulary where search continues
 170+ 6E50             >                New_Def  CURRENT, "CURRENT", User_Ptr, is_normal
 170+ 6E50             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 170+ 6E50             >
 170+ 6E50             >                // dummy db directives used to calculate length of namec
 170+ 6E50 43 55 52 52 >                db      "CURRENT"
 170+ 6E54 45 4E 54    >
 170+ 6E57             >len_NFA         defl    $ - temp_NFA
 170+ 6E57             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 170+ 6E50             >
 170+ 6E50 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 170+ 6E51 43 55 52 52 >                db      "CURRENT"               // name string in 7-bit ascii, but
 170+ 6E55 45 4E 54    >
 170+ 6E58             >                org     $-1                 // alter last byte of Name just above to set
 170+ 6E57 D4          >                db      {b $} | END_BIT     // msb as name end
 170+ 6E58             >
 170+ 6E58 43 6E       >                dw      last_NFA            // Link to previous definition Name
 170+ 6E5A             >CURRENT:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 170+ 6E5A 0A 6D       >                dw      User_Ptr ; ok        // for primitive definitions  actual code
 170+ 6E5C             >                else
 170+ 6E5C ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 170+ 6E5C             >                endif           ; ok        // for other definitions it "points" the correct handler
 170+ 6E5C             >                // Use of "; ok" to suppress "warning[fwdref]"
 170+ 6E5C             >
 170+ 6E5C             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 170+ 6E5C 2A          >                db      42
 171+ 6E5D                              User_Def STATE      , "STATE"     , 44 // compilation status. 0 interpreting.
 171+ 6E5D             >                New_Def  STATE, "STATE", User_Ptr, is_normal
 171+ 6E5D             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 171+ 6E5D             >
 171+ 6E5D             >                // dummy db directives used to calculate length of namec
 171+ 6E5D 53 54 41 54 >                db      "STATE"
 171+ 6E61 45          >
 171+ 6E62             >len_NFA         defl    $ - temp_NFA
 171+ 6E62             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 171+ 6E5D             >
 171+ 6E5D 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 171+ 6E5E 53 54 41 54 >                db      "STATE"               // name string in 7-bit ascii, but
 171+ 6E62 45          >
 171+ 6E63             >                org     $-1                 // alter last byte of Name just above to set
 171+ 6E62 C5          >                db      {b $} | END_BIT     // msb as name end
 171+ 6E63             >
 171+ 6E63 50 6E       >                dw      last_NFA            // Link to previous definition Name
 171+ 6E65             >STATE:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 171+ 6E65 0A 6D       >                dw      User_Ptr ; ok        // for primitive definitions  actual code
 171+ 6E67             >                else
 171+ 6E67 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 171+ 6E67             >                endif           ; ok        // for other definitions it "points" the correct handler
 171+ 6E67             >                // Use of "; ok" to suppress "warning[fwdref]"
 171+ 6E67             >
 171+ 6E67             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 171+ 6E67 2C          >                db      44
 172+ 6E68                              User_Def BASE       , "BASE"      , 46 //
 172+ 6E68             >                New_Def  BASE, "BASE", User_Ptr, is_normal
 172+ 6E68             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 172+ 6E68             >
 172+ 6E68             >                // dummy db directives used to calculate length of namec
 172+ 6E68 42 41 53 45 >                db      "BASE"
 172+ 6E6C             >len_NFA         defl    $ - temp_NFA
 172+ 6E6C             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 172+ 6E68             >
 172+ 6E68 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 172+ 6E69 42 41 53 45 >                db      "BASE"               // name string in 7-bit ascii, but
 172+ 6E6D             >                org     $-1                 // alter last byte of Name just above to set
 172+ 6E6C C5          >                db      {b $} | END_BIT     // msb as name end
 172+ 6E6D             >
 172+ 6E6D 5D 6E       >                dw      last_NFA            // Link to previous definition Name
 172+ 6E6F             >BASE:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 172+ 6E6F 0A 6D       >                dw      User_Ptr ; ok        // for primitive definitions  actual code
 172+ 6E71             >                else
 172+ 6E71 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 172+ 6E71             >                endif           ; ok        // for other definitions it "points" the correct handler
 172+ 6E71             >                // Use of "; ok" to suppress "warning[fwdref]"
 172+ 6E71             >
 172+ 6E71             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 172+ 6E71 2E          >                db      46
 173+ 6E72                              User_Def DPL        , "DPL"       , 48 // number of digits after decimal point in conversion
 173+ 6E72             >                New_Def  DPL, "DPL", User_Ptr, is_normal
 173+ 6E72             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 173+ 6E72             >
 173+ 6E72             >                // dummy db directives used to calculate length of namec
 173+ 6E72 44 50 4C    >                db      "DPL"
 173+ 6E75             >len_NFA         defl    $ - temp_NFA
 173+ 6E75             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 173+ 6E72             >
 173+ 6E72 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 173+ 6E73 44 50 4C    >                db      "DPL"               // name string in 7-bit ascii, but
 173+ 6E76             >                org     $-1                 // alter last byte of Name just above to set
 173+ 6E75 CC          >                db      {b $} | END_BIT     // msb as name end
 173+ 6E76             >
 173+ 6E76 68 6E       >                dw      last_NFA            // Link to previous definition Name
 173+ 6E78             >DPL:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 173+ 6E78 0A 6D       >                dw      User_Ptr ; ok        // for primitive definitions  actual code
 173+ 6E7A             >                else
 173+ 6E7A ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 173+ 6E7A             >                endif           ; ok        // for other definitions it "points" the correct handler
 173+ 6E7A             >                // Use of "; ok" to suppress "warning[fwdref]"
 173+ 6E7A             >
 173+ 6E7A             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 173+ 6E7A 30          >                db      48
 174+ 6E7B                              User_Def FLD        , "FLD"       , 50 // output field width
 174+ 6E7B             >                New_Def  FLD, "FLD", User_Ptr, is_normal
 174+ 6E7B             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 174+ 6E7B             >
 174+ 6E7B             >                // dummy db directives used to calculate length of namec
 174+ 6E7B 46 4C 44    >                db      "FLD"
 174+ 6E7E             >len_NFA         defl    $ - temp_NFA
 174+ 6E7E             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 174+ 6E7B             >
 174+ 6E7B 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 174+ 6E7C 46 4C 44    >                db      "FLD"               // name string in 7-bit ascii, but
 174+ 6E7F             >                org     $-1                 // alter last byte of Name just above to set
 174+ 6E7E C4          >                db      {b $} | END_BIT     // msb as name end
 174+ 6E7F             >
 174+ 6E7F 72 6E       >                dw      last_NFA            // Link to previous definition Name
 174+ 6E81             >FLD:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 174+ 6E81 0A 6D       >                dw      User_Ptr ; ok        // for primitive definitions  actual code
 174+ 6E83             >                else
 174+ 6E83 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 174+ 6E83             >                endif           ; ok        // for other definitions it "points" the correct handler
 174+ 6E83             >                // Use of "; ok" to suppress "warning[fwdref]"
 174+ 6E83             >
 174+ 6E83             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 174+ 6E83 32          >                db      50
 175+ 6E84                              User_Def CSP        , "CSP"       , 52 // used to temporary store Stack-Pointer value
 175+ 6E84             >                New_Def  CSP, "CSP", User_Ptr, is_normal
 175+ 6E84             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 175+ 6E84             >
 175+ 6E84             >                // dummy db directives used to calculate length of namec
 175+ 6E84 43 53 50    >                db      "CSP"
 175+ 6E87             >len_NFA         defl    $ - temp_NFA
 175+ 6E87             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 175+ 6E84             >
 175+ 6E84 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 175+ 6E85 43 53 50    >                db      "CSP"               // name string in 7-bit ascii, but
 175+ 6E88             >                org     $-1                 // alter last byte of Name just above to set
 175+ 6E87 D0          >                db      {b $} | END_BIT     // msb as name end
 175+ 6E88             >
 175+ 6E88 7B 6E       >                dw      last_NFA            // Link to previous definition Name
 175+ 6E8A             >CSP:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 175+ 6E8A 0A 6D       >                dw      User_Ptr ; ok        // for primitive definitions  actual code
 175+ 6E8C             >                else
 175+ 6E8C ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 175+ 6E8C             >                endif           ; ok        // for other definitions it "points" the correct handler
 175+ 6E8C             >                // Use of "; ok" to suppress "warning[fwdref]"
 175+ 6E8C             >
 175+ 6E8C             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 175+ 6E8C 34          >                db      52
 176+ 6E8D                              User_Def RSHARP     , "R#"        , 54 // location of editing cursor
 176+ 6E8D             >                New_Def  RSHARP, "R#", User_Ptr, is_normal
 176+ 6E8D             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 176+ 6E8D             >
 176+ 6E8D             >                // dummy db directives used to calculate length of namec
 176+ 6E8D 52 23       >                db      "R#"
 176+ 6E8F             >len_NFA         defl    $ - temp_NFA
 176+ 6E8F             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 176+ 6E8D             >
 176+ 6E8D 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 176+ 6E8E 52 23       >                db      "R#"               // name string in 7-bit ascii, but
 176+ 6E90             >                org     $-1                 // alter last byte of Name just above to set
 176+ 6E8F A3          >                db      {b $} | END_BIT     // msb as name end
 176+ 6E90             >
 176+ 6E90 84 6E       >                dw      last_NFA            // Link to previous definition Name
 176+ 6E92             >RSHARP:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 176+ 6E92 0A 6D       >                dw      User_Ptr ; ok        // for primitive definitions  actual code
 176+ 6E94             >                else
 176+ 6E94 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 176+ 6E94             >                endif           ; ok        // for other definitions it "points" the correct handler
 176+ 6E94             >                // Use of "; ok" to suppress "warning[fwdref]"
 176+ 6E94             >
 176+ 6E94             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 176+ 6E94 36          >                db      54
 177+ 6E95                              User_Def HLD        , "HLD"       , 56 // last character during a number conversion output
 177+ 6E95             >                New_Def  HLD, "HLD", User_Ptr, is_normal
 177+ 6E95             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 177+ 6E95             >
 177+ 6E95             >                // dummy db directives used to calculate length of namec
 177+ 6E95 48 4C 44    >                db      "HLD"
 177+ 6E98             >len_NFA         defl    $ - temp_NFA
 177+ 6E98             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 177+ 6E95             >
 177+ 6E95 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 177+ 6E96 48 4C 44    >                db      "HLD"               // name string in 7-bit ascii, but
 177+ 6E99             >                org     $-1                 // alter last byte of Name just above to set
 177+ 6E98 C4          >                db      {b $} | END_BIT     // msb as name end
 177+ 6E99             >
 177+ 6E99 8D 6E       >                dw      last_NFA            // Link to previous definition Name
 177+ 6E9B             >HLD:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 177+ 6E9B 0A 6D       >                dw      User_Ptr ; ok        // for primitive definitions  actual code
 177+ 6E9D             >                else
 177+ 6E9D ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 177+ 6E9D             >                endif           ; ok        // for other definitions it "points" the correct handler
 177+ 6E9D             >                // Use of "; ok" to suppress "warning[fwdref]"
 177+ 6E9D             >
 177+ 6E9D             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 177+ 6E9D 38          >                db      56
 178+ 6E9E                              User_Def USE        , "USE"       , 58 // address of last used block
 178+ 6E9E             >                New_Def  USE, "USE", User_Ptr, is_normal
 178+ 6E9E             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 178+ 6E9E             >
 178+ 6E9E             >                // dummy db directives used to calculate length of namec
 178+ 6E9E 55 53 45    >                db      "USE"
 178+ 6EA1             >len_NFA         defl    $ - temp_NFA
 178+ 6EA1             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 178+ 6E9E             >
 178+ 6E9E 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 178+ 6E9F 55 53 45    >                db      "USE"               // name string in 7-bit ascii, but
 178+ 6EA2             >                org     $-1                 // alter last byte of Name just above to set
 178+ 6EA1 C5          >                db      {b $} | END_BIT     // msb as name end
 178+ 6EA2             >
 178+ 6EA2 95 6E       >                dw      last_NFA            // Link to previous definition Name
 178+ 6EA4             >USE:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 178+ 6EA4 0A 6D       >                dw      User_Ptr ; ok        // for primitive definitions  actual code
 178+ 6EA6             >                else
 178+ 6EA6 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 178+ 6EA6             >                endif           ; ok        // for other definitions it "points" the correct handler
 178+ 6EA6             >                // Use of "; ok" to suppress "warning[fwdref]"
 178+ 6EA6             >
 178+ 6EA6             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 178+ 6EA6 3A          >                db      58
 179+ 6EA7                              User_Def PREV       , "PREV"      , 60 // address of previous used block
 179+ 6EA7             >                New_Def  PREV, "PREV", User_Ptr, is_normal
 179+ 6EA7             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 179+ 6EA7             >
 179+ 6EA7             >                // dummy db directives used to calculate length of namec
 179+ 6EA7 50 52 45 56 >                db      "PREV"
 179+ 6EAB             >len_NFA         defl    $ - temp_NFA
 179+ 6EAB             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 179+ 6EA7             >
 179+ 6EA7 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 179+ 6EA8 50 52 45 56 >                db      "PREV"               // name string in 7-bit ascii, but
 179+ 6EAC             >                org     $-1                 // alter last byte of Name just above to set
 179+ 6EAB D6          >                db      {b $} | END_BIT     // msb as name end
 179+ 6EAC             >
 179+ 6EAC 9E 6E       >                dw      last_NFA            // Link to previous definition Name
 179+ 6EAE             >PREV:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 179+ 6EAE 0A 6D       >                dw      User_Ptr ; ok        // for primitive definitions  actual code
 179+ 6EB0             >                else
 179+ 6EB0 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 179+ 6EB0             >                endif           ; ok        // for other definitions it "points" the correct handler
 179+ 6EB0             >                // Use of "; ok" to suppress "warning[fwdref]"
 179+ 6EB0             >
 179+ 6EB0             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 179+ 6EB0 3C          >                db      60
 180+ 6EB1                              User_Def LP         , "LP"        , 62 // line printer (not used)
 180+ 6EB1             >                New_Def  LP, "LP", User_Ptr, is_normal
 180+ 6EB1             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 180+ 6EB1             >
 180+ 6EB1             >                // dummy db directives used to calculate length of namec
 180+ 6EB1 4C 50       >                db      "LP"
 180+ 6EB3             >len_NFA         defl    $ - temp_NFA
 180+ 6EB3             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 180+ 6EB1             >
 180+ 6EB1 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 180+ 6EB2 4C 50       >                db      "LP"               // name string in 7-bit ascii, but
 180+ 6EB4             >                org     $-1                 // alter last byte of Name just above to set
 180+ 6EB3 D0          >                db      {b $} | END_BIT     // msb as name end
 180+ 6EB4             >
 180+ 6EB4 A7 6E       >                dw      last_NFA            // Link to previous definition Name
 180+ 6EB6             >LP:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 180+ 6EB6 0A 6D       >                dw      User_Ptr ; ok        // for primitive definitions  actual code
 180+ 6EB8             >                else
 180+ 6EB8 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 180+ 6EB8             >                endif           ; ok        // for other definitions it "points" the correct handler
 180+ 6EB8             >                // Use of "; ok" to suppress "warning[fwdref]"
 180+ 6EB8             >
 180+ 6EB8             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 180+ 6EB8 3E          >                db      62
 181+ 6EB9                              User_Def PLACE      , "PLACE"     , 64 // number of digits after decimal point in output
 181+ 6EB9             >                New_Def  PLACE, "PLACE", User_Ptr, is_normal
 181+ 6EB9             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 181+ 6EB9             >
 181+ 6EB9             >                // dummy db directives used to calculate length of namec
 181+ 6EB9 50 4C 41 43 >                db      "PLACE"
 181+ 6EBD 45          >
 181+ 6EBE             >len_NFA         defl    $ - temp_NFA
 181+ 6EBE             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 181+ 6EB9             >
 181+ 6EB9 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 181+ 6EBA 50 4C 41 43 >                db      "PLACE"               // name string in 7-bit ascii, but
 181+ 6EBE 45          >
 181+ 6EBF             >                org     $-1                 // alter last byte of Name just above to set
 181+ 6EBE C5          >                db      {b $} | END_BIT     // msb as name end
 181+ 6EBF             >
 181+ 6EBF B1 6E       >                dw      last_NFA            // Link to previous definition Name
 181+ 6EC1             >PLACE:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 181+ 6EC1 0A 6D       >                dw      User_Ptr ; ok        // for primitive definitions  actual code
 181+ 6EC3             >                else
 181+ 6EC3 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 181+ 6EC3             >                endif           ; ok        // for other definitions it "points" the correct handler
 181+ 6EC3             >                // Use of "; ok" to suppress "warning[fwdref]"
 181+ 6EC3             >
 181+ 6EC3             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 181+ 6EC3 40          >                db      64
 182+ 6EC4                              User_Def SOURCE_ID  , "SOURCE-ID" , 66 // data-stream number in INCLUDE and LOAD-
 182+ 6EC4             >                New_Def  SOURCE_ID, "SOURCE-ID", User_Ptr, is_normal
 182+ 6EC4             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 182+ 6EC4             >
 182+ 6EC4             >                // dummy db directives used to calculate length of namec
 182+ 6EC4 53 4F 55 52 >                db      "SOURCE-ID"
 182+ 6EC8 43 45 2D 49 >
 182+ 6ECC 44          >
 182+ 6ECD             >len_NFA         defl    $ - temp_NFA
 182+ 6ECD             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 182+ 6EC4             >
 182+ 6EC4 89          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 182+ 6EC5 53 4F 55 52 >                db      "SOURCE-ID"               // name string in 7-bit ascii, but
 182+ 6EC9 43 45 2D 49 >
 182+ 6ECD 44          >
 182+ 6ECE             >                org     $-1                 // alter last byte of Name just above to set
 182+ 6ECD C4          >                db      {b $} | END_BIT     // msb as name end
 182+ 6ECE             >
 182+ 6ECE B9 6E       >                dw      last_NFA            // Link to previous definition Name
 182+ 6ED0             >SOURCE_ID:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 182+ 6ED0 0A 6D       >                dw      User_Ptr ; ok        // for primitive definitions  actual code
 182+ 6ED2             >                else
 182+ 6ED2 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 182+ 6ED2             >                endif           ; ok        // for other definitions it "points" the correct handler
 182+ 6ED2             >                // Use of "; ok" to suppress "warning[fwdref]"
 182+ 6ED2             >
 182+ 6ED2             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 182+ 6ED2 42          >                db      66
 183+ 6ED3                              User_Def SPAN       , "SPAN"      , 68 // number of character of last EXPECT
 183+ 6ED3             >                New_Def  SPAN, "SPAN", User_Ptr, is_normal
 183+ 6ED3             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 183+ 6ED3             >
 183+ 6ED3             >                // dummy db directives used to calculate length of namec
 183+ 6ED3 53 50 41 4E >                db      "SPAN"
 183+ 6ED7             >len_NFA         defl    $ - temp_NFA
 183+ 6ED7             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 183+ 6ED3             >
 183+ 6ED3 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 183+ 6ED4 53 50 41 4E >                db      "SPAN"               // name string in 7-bit ascii, but
 183+ 6ED8             >                org     $-1                 // alter last byte of Name just above to set
 183+ 6ED7 CE          >                db      {b $} | END_BIT     // msb as name end
 183+ 6ED8             >
 183+ 6ED8 C4 6E       >                dw      last_NFA            // Link to previous definition Name
 183+ 6EDA             >SPAN:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 183+ 6EDA 0A 6D       >                dw      User_Ptr ; ok        // for primitive definitions  actual code
 183+ 6EDC             >                else
 183+ 6EDC ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 183+ 6EDC             >                endif           ; ok        // for other definitions it "points" the correct handler
 183+ 6EDC             >                // Use of "; ok" to suppress "warning[fwdref]"
 183+ 6EDC             >
 183+ 6EDC             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 183+ 6EDC 44          >                db      68
 184+ 6EDD                              User_Def HANDLER    , "HANDLER"   , 70 // Used by THROW-CATCH
 184+ 6EDD             >                New_Def  HANDLER, "HANDLER", User_Ptr, is_normal
 184+ 6EDD             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 184+ 6EDD             >
 184+ 6EDD             >                // dummy db directives used to calculate length of namec
 184+ 6EDD 48 41 4E 44 >                db      "HANDLER"
 184+ 6EE1 4C 45 52    >
 184+ 6EE4             >len_NFA         defl    $ - temp_NFA
 184+ 6EE4             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 184+ 6EDD             >
 184+ 6EDD 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 184+ 6EDE 48 41 4E 44 >                db      "HANDLER"               // name string in 7-bit ascii, but
 184+ 6EE2 4C 45 52    >
 184+ 6EE5             >                org     $-1                 // alter last byte of Name just above to set
 184+ 6EE4 D2          >                db      {b $} | END_BIT     // msb as name end
 184+ 6EE5             >
 184+ 6EE5 D3 6E       >                dw      last_NFA            // Link to previous definition Name
 184+ 6EE7             >HANDLER:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 184+ 6EE7 0A 6D       >                dw      User_Ptr ; ok        // for primitive definitions  actual code
 184+ 6EE9             >                else
 184+ 6EE9 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 184+ 6EE9             >                endif           ; ok        // for other definitions it "points" the correct handler
 184+ 6EE9             >                // Use of "; ok" to suppress "warning[fwdref]"
 184+ 6EE9             >
 184+ 6EE9             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 184+ 6EE9 46          >                db      70
 185+ 6EEA                              User_Def HP         , "HP"        , 72 // heap-pointer address
 185+ 6EEA             >                New_Def  HP, "HP", User_Ptr, is_normal
 185+ 6EEA             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 185+ 6EEA             >
 185+ 6EEA             >                // dummy db directives used to calculate length of namec
 185+ 6EEA 48 50       >                db      "HP"
 185+ 6EEC             >len_NFA         defl    $ - temp_NFA
 185+ 6EEC             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 185+ 6EEA             >
 185+ 6EEA 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 185+ 6EEB 48 50       >                db      "HP"               // name string in 7-bit ascii, but
 185+ 6EED             >                org     $-1                 // alter last byte of Name just above to set
 185+ 6EEC D0          >                db      {b $} | END_BIT     // msb as name end
 185+ 6EED             >
 185+ 6EED DD 6E       >                dw      last_NFA            // Link to previous definition Name
 185+ 6EEF             >HP:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 185+ 6EEF 0A 6D       >                dw      User_Ptr ; ok        // for primitive definitions  actual code
 185+ 6EF1             >                else
 185+ 6EF1 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 185+ 6EF1             >                endif           ; ok        // for other definitions it "points" the correct handler
 185+ 6EF1             >                // Use of "; ok" to suppress "warning[fwdref]"
 185+ 6EF1             >
 185+ 6EF1             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 185+ 6EF1 48          >                db      72
 186+ 6EF2
 187+ 6EF2              //  ______________________________________________________________________
 188+ 6EF2              //
 189+ 6EF2              // here         -- a
 190+ 6EF2                              Colon_Def HERE, "HERE", is_normal
 190+ 6EF2             >                New_Def  HERE, "HERE", Enter_Ptr, is_normal ; ok
 190+ 6EF2             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 190+ 6EF2             >
 190+ 6EF2             >                // dummy db directives used to calculate length of namec
 190+ 6EF2 48 45 52 45 >                db      "HERE"
 190+ 6EF6             >len_NFA         defl    $ - temp_NFA
 190+ 6EF6             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 190+ 6EF2             >
 190+ 6EF2 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 190+ 6EF3 48 45 52 45 >                db      "HERE"               // name string in 7-bit ascii, but
 190+ 6EF7             >                org     $-1                 // alter last byte of Name just above to set
 190+ 6EF6 C5          >                db      {b $} | END_BIT     // msb as name end
 190+ 6EF7             >
 190+ 6EF7 EA 6E       >                dw      last_NFA            // Link to previous definition Name
 190+ 6EF9             >HERE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 190+ 6EF9 9D 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 190+ 6EFB             >                else
 190+ 6EFB ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 190+ 6EFB             >                endif           ; ok        // for other definitions it "points" the correct handler
 190+ 6EFB             >                // Use of "; ok" to suppress "warning[fwdref]"
 190+ 6EFB             >
 190+ 6EFB             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 191+ 6EFB D8 6D B2 6B                  dw      DP, FETCH               // dp @
 192+ 6EFF 99 69                        dw      EXIT                    // ;
 193+ 6F01
 194+ 6F01              //  ______________________________________________________________________
 195+ 6F01              //
 196+ 6F01              // allot        n --
 197+ 6F01                              Colon_Def ALLOT, "ALLOT", is_normal
 197+ 6F01             >                New_Def  ALLOT, "ALLOT", Enter_Ptr, is_normal ; ok
 197+ 6F01             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 197+ 6F01             >
 197+ 6F01             >                // dummy db directives used to calculate length of namec
 197+ 6F01 41 4C 4C 4F >                db      "ALLOT"
 197+ 6F05 54          >
 197+ 6F06             >len_NFA         defl    $ - temp_NFA
 197+ 6F06             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 197+ 6F01             >
 197+ 6F01 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 197+ 6F02 41 4C 4C 4F >                db      "ALLOT"               // name string in 7-bit ascii, but
 197+ 6F06 54          >
 197+ 6F07             >                org     $-1                 // alter last byte of Name just above to set
 197+ 6F06 D4          >                db      {b $} | END_BIT     // msb as name end
 197+ 6F07             >
 197+ 6F07 F2 6E       >                dw      last_NFA            // Link to previous definition Name
 197+ 6F09             >ALLOT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 197+ 6F09 9D 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 197+ 6F0B             >                else
 197+ 6F0B ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 197+ 6F0B             >                endif           ; ok        // for other definitions it "points" the correct handler
 197+ 6F0B             >                // Use of "; ok" to suppress "warning[fwdref]"
 197+ 6F0B             >
 197+ 6F0B             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 198+ 6F0B D8 6D 8F 6B                  dw      DP,  PLUSSTORE          // dp +!
 199+ 6F0F 99 69                        dw      EXIT                    // ;
 200+ 6F11
 201+ 6F11              //  ______________________________________________________________________
 202+ 6F11              //
 203+ 6F11              // comma        n --
 204+ 6F11                              Colon_Def COMMA, ",", is_normal
 204+ 6F11             >                New_Def  COMMA, ",", Enter_Ptr, is_normal ; ok
 204+ 6F11             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 204+ 6F11             >
 204+ 6F11             >                // dummy db directives used to calculate length of namec
 204+ 6F11 2C          >                db      ","
 204+ 6F12             >len_NFA         defl    $ - temp_NFA
 204+ 6F12             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 204+ 6F11             >
 204+ 6F11 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 204+ 6F12 2C          >                db      ","               // name string in 7-bit ascii, but
 204+ 6F13             >                org     $-1                 // alter last byte of Name just above to set
 204+ 6F12 AC          >                db      {b $} | END_BIT     // msb as name end
 204+ 6F13             >
 204+ 6F13 01 6F       >                dw      last_NFA            // Link to previous definition Name
 204+ 6F15             >COMMA:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 204+ 6F15 9D 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 204+ 6F17             >                else
 204+ 6F17 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 204+ 6F17             >                endif           ; ok        // for other definitions it "points" the correct handler
 204+ 6F17             >                // Use of "; ok" to suppress "warning[fwdref]"
 204+ 6F17             >
 204+ 6F17             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 205+ 6F17 F9 6E BF 6B                  dw      HERE, STORE             // here !
 206+ 6F1B 2A 6D 09 6F                  dw      TWO, ALLOT              // 2 allot
 207+ 6F1F 99 69                        dw      EXIT                    // ;
 208+ 6F21
 209+ 6F21              //  ______________________________________________________________________
 210+ 6F21              //
 211+ 6F21              // ccomma       c --
 212+ 6F21                              Colon_Def CCOMMA, "C,", is_normal
 212+ 6F21             >                New_Def  CCOMMA, "C,", Enter_Ptr, is_normal ; ok
 212+ 6F21             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 212+ 6F21             >
 212+ 6F21             >                // dummy db directives used to calculate length of namec
 212+ 6F21 43 2C       >                db      "C,"
 212+ 6F23             >len_NFA         defl    $ - temp_NFA
 212+ 6F23             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 212+ 6F21             >
 212+ 6F21 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 212+ 6F22 43 2C       >                db      "C,"               // name string in 7-bit ascii, but
 212+ 6F24             >                org     $-1                 // alter last byte of Name just above to set
 212+ 6F23 AC          >                db      {b $} | END_BIT     // msb as name end
 212+ 6F24             >
 212+ 6F24 11 6F       >                dw      last_NFA            // Link to previous definition Name
 212+ 6F26             >CCOMMA:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 212+ 6F26 9D 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 212+ 6F28             >                else
 212+ 6F28 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 212+ 6F28             >                endif           ; ok        // for other definitions it "points" the correct handler
 212+ 6F28             >                // Use of "; ok" to suppress "warning[fwdref]"
 212+ 6F28             >
 212+ 6F28             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 213+ 6F28 F9 6E DB 6B                  dw      HERE, CSTORE            // here c!
 214+ 6F2C 22 6D 09 6F                  dw      ONE, ALLOT              // 1 allot
 215+ 6F30 99 69                        dw      EXIT                    // ;
 216+ 6F32
 217+ 6F32              //  ______________________________________________________________________
 218+ 6F32              //
 219+ 6F32              // s>d          n -- d
 220+ 6F32              // converts a single precision integer in a double precision
 221+ 6F32                              New_Def S_TO_D, "S>D", is_code, is_normal
 221+ 6F32             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 221+ 6F32             >
 221+ 6F32             >                // dummy db directives used to calculate length of namec
 221+ 6F32 53 3E 44    >                db      "S>D"
 221+ 6F35             >len_NFA         defl    $ - temp_NFA
 221+ 6F35             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 221+ 6F32             >
 221+ 6F32 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 221+ 6F33 53 3E 44    >                db      "S>D"               // name string in 7-bit ascii, but
 221+ 6F36             >                org     $-1                 // alter last byte of Name just above to set
 221+ 6F35 C4          >                db      {b $} | END_BIT     // msb as name end
 221+ 6F36             >
 221+ 6F36 21 6F       >                dw      last_NFA            // Link to previous definition Name
 221+ 6F38             >S_TO_D:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 221+ 6F38 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
 221+ 6F38             >                else
 221+ 6F38 3A 6F       >                dw      $ + 2   ; ok        // is pointed by CFA
 221+ 6F3A             >                endif           ; ok        // for other definitions it "points" the correct handler
 221+ 6F3A             >                // Use of "; ok" to suppress "warning[fwdref]"
 221+ 6F3A             >
 221+ 6F3A             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 222+ 6F3A D1                           pop     de
 223+ 6F3B 21 00 00                     ld      hl, 0
 224+ 6F3E 7A                           ld      a, d
 225+ 6F3F E6 80                        and     $80
 226+ 6F41 28 01                        jr      z, S_to_D_Skip
 227+ 6F43 2B                           dec     hl                  // $FFFF
 228+ 6F44              S_to_D_Skip:
 229+ 6F44 D5                           push    de
 230+ 6F45 E5                           push    hl
 231+ 6F46                              next
 231+ 6F46 DD E9       >                jp      (ix)
 232+ 6F48
 233+ 6F48              //  ______________________________________________________________________
 234+ 6F48              //
 235+ 6F48              // -            n1 n2 -- n3
 236+ 6F48              // subtraction
 237+ 6F48                              New_Def SUBTRACT, "-", is_code, is_normal
 237+ 6F48             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 237+ 6F48             >
 237+ 6F48             >                // dummy db directives used to calculate length of namec
 237+ 6F48 2D          >                db      "-"
 237+ 6F49             >len_NFA         defl    $ - temp_NFA
 237+ 6F49             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 237+ 6F48             >
 237+ 6F48 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 237+ 6F49 2D          >                db      "-"               // name string in 7-bit ascii, but
 237+ 6F4A             >                org     $-1                 // alter last byte of Name just above to set
 237+ 6F49 AD          >                db      {b $} | END_BIT     // msb as name end
 237+ 6F4A             >
 237+ 6F4A 32 6F       >                dw      last_NFA            // Link to previous definition Name
 237+ 6F4C             >SUBTRACT:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 237+ 6F4C ~           >                dw      runcode ; ok        // for primitive definitions  actual code
 237+ 6F4C             >                else
 237+ 6F4C 4E 6F       >                dw      $ + 2   ; ok        // is pointed by CFA
 237+ 6F4E             >                endif           ; ok        // for other definitions it "points" the correct handler
 237+ 6F4E             >                // Use of "; ok" to suppress "warning[fwdref]"
 237+ 6F4E             >
 237+ 6F4E             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 238+ 6F4E D1                           pop     de
 239+ 6F4F E1                           pop     hl
 240+ 6F50 A7                           and     a
 241+ 6F51 ED 52                        sbc     hl, de
 242+ 6F53
 243+ 6F53                              psh1
 243+ 6F53 E5          >                push    hl
 243+ 6F54 DD E9       >                jp      (ix)
 244+ 6F56
 245+ 6F56              //  ______________________________________________________________________
 246+ 6F56              //
 247+ 6F56              // =            n1 n2 -- n3
 248+ 6F56              // equals
 249+ 6F56                              Colon_Def EQUALS, "=", is_normal
 249+ 6F56             >                New_Def  EQUALS, "=", Enter_Ptr, is_normal ; ok
 249+ 6F56             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 249+ 6F56             >
 249+ 6F56             >                // dummy db directives used to calculate length of namec
 249+ 6F56 3D          >                db      "="
 249+ 6F57             >len_NFA         defl    $ - temp_NFA
 249+ 6F57             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 249+ 6F56             >
 249+ 6F56 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 249+ 6F57 3D          >                db      "="               // name string in 7-bit ascii, but
 249+ 6F58             >                org     $-1                 // alter last byte of Name just above to set
 249+ 6F57 BD          >                db      {b $} | END_BIT     // msb as name end
 249+ 6F58             >
 249+ 6F58 48 6F       >                dw      last_NFA            // Link to previous definition Name
 249+ 6F5A             >EQUALS:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 249+ 6F5A 9D 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 249+ 6F5C             >                else
 249+ 6F5C ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 249+ 6F5C             >                endif           ; ok        // for other definitions it "points" the correct handler
 249+ 6F5C             >                // Use of "; ok" to suppress "warning[fwdref]"
 249+ 6F5C             >
 249+ 6F5C             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 250+ 6F5C 4C 6F FC 69                  dw      SUBTRACT, ZEQUAL        // - 0=
 251+ 6F60 99 69                        dw      EXIT                    // ;
 252+ 6F62
 253+ 6F62              //  ______________________________________________________________________
 254+ 6F62              //
 255+ 6F62              // u<           u1 u2 -- u3
 256+ 6F62              // unsigned less-than
 257+ 6F62                              New_Def ULESS, "U<", is_code, is_normal
 257+ 6F62             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 257+ 6F62             >
 257+ 6F62             >                // dummy db directives used to calculate length of namec
 257+ 6F62 55 3C       >                db      "U<"
 257+ 6F64             >len_NFA         defl    $ - temp_NFA
 257+ 6F64             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 257+ 6F62             >
 257+ 6F62 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 257+ 6F63 55 3C       >                db      "U<"               // name string in 7-bit ascii, but
 257+ 6F65             >                org     $-1                 // alter last byte of Name just above to set
 257+ 6F64 BC          >                db      {b $} | END_BIT     // msb as name end
 257+ 6F65             >
 257+ 6F65 56 6F       >                dw      last_NFA            // Link to previous definition Name
 257+ 6F67             >ULESS:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 257+ 6F67 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
 257+ 6F67             >                else
 257+ 6F67 69 6F       >                dw      $ + 2   ; ok        // is pointed by CFA
 257+ 6F69             >                endif           ; ok        // for other definitions it "points" the correct handler
 257+ 6F69             >                // Use of "; ok" to suppress "warning[fwdref]"
 257+ 6F69             >
 257+ 6F69             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 258+ 6F69 D1                           pop     de
 259+ 6F6A E1                           pop     hl
 260+ 6F6B A7                           and     a
 261+ 6F6C ED 52                        sbc     hl, de
 262+ 6F6E 21 FF FF                     ld      hl, -1
 263+ 6F71 38 01                        jr      c, ULess_Skip
 264+ 6F73 23                               inc     hl
 265+ 6F74              ULess_Skip:
 266+ 6F74
 267+ 6F74                              psh1
 267+ 6F74 E5          >                push    hl
 267+ 6F75 DD E9       >                jp      (ix)
 268+ 6F77
 269+ 6F77              //  ______________________________________________________________________
 270+ 6F77              //
 271+ 6F77              // <           n1 n2 -- n3
 272+ 6F77              // less-than
 273+ 6F77                              New_Def LESS, "<", is_code, is_normal
 273+ 6F77             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 273+ 6F77             >
 273+ 6F77             >                // dummy db directives used to calculate length of namec
 273+ 6F77 3C          >                db      "<"
 273+ 6F78             >len_NFA         defl    $ - temp_NFA
 273+ 6F78             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 273+ 6F77             >
 273+ 6F77 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 273+ 6F78 3C          >                db      "<"               // name string in 7-bit ascii, but
 273+ 6F79             >                org     $-1                 // alter last byte of Name just above to set
 273+ 6F78 BC          >                db      {b $} | END_BIT     // msb as name end
 273+ 6F79             >
 273+ 6F79 62 6F       >                dw      last_NFA            // Link to previous definition Name
 273+ 6F7B             >LESS:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 273+ 6F7B ~           >                dw      runcode ; ok        // for primitive definitions  actual code
 273+ 6F7B             >                else
 273+ 6F7B 7D 6F       >                dw      $ + 2   ; ok        // is pointed by CFA
 273+ 6F7D             >                endif           ; ok        // for other definitions it "points" the correct handler
 273+ 6F7D             >                // Use of "; ok" to suppress "warning[fwdref]"
 273+ 6F7D             >
 273+ 6F7D             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 274+ 6F7D D1                           pop     de
 275+ 6F7E E1                           pop     hl
 276+ 6F7F 7C                           ld      a, h
 277+ 6F80 EE 80                        xor     $80
 278+ 6F82 67                           ld      h, a
 279+ 6F83 7A                           ld      a, d
 280+ 6F84 EE 80                        xor     $80
 281+ 6F86 57                           ld      d, a
 282+ 6F87 A7                           and     a
 283+ 6F88 ED 52                        sbc     hl, de
 284+ 6F8A 21 FF FF                     ld      hl, -1
 285+ 6F8D 38 01                        jr      c, Less_Skip
 286+ 6F8F 23                               inc     hl
 287+ 6F90              Less_Skip:
 288+ 6F90
 289+ 6F90                              psh1
 289+ 6F90 E5          >                push    hl
 289+ 6F91 DD E9       >                jp      (ix)
 290+ 6F93
 291+ 6F93              //  ______________________________________________________________________
 292+ 6F93              //
 293+ 6F93              // >            n1 n2 -- n3
 294+ 6F93              // greater than
 295+ 6F93                              Colon_Def GREATER, ">", is_normal
 295+ 6F93             >                New_Def  GREATER, ">", Enter_Ptr, is_normal ; ok
 295+ 6F93             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 295+ 6F93             >
 295+ 6F93             >                // dummy db directives used to calculate length of namec
 295+ 6F93 3E          >                db      ">"
 295+ 6F94             >len_NFA         defl    $ - temp_NFA
 295+ 6F94             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 295+ 6F93             >
 295+ 6F93 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 295+ 6F94 3E          >                db      ">"               // name string in 7-bit ascii, but
 295+ 6F95             >                org     $-1                 // alter last byte of Name just above to set
 295+ 6F94 BE          >                db      {b $} | END_BIT     // msb as name end
 295+ 6F95             >
 295+ 6F95 77 6F       >                dw      last_NFA            // Link to previous definition Name
 295+ 6F97             >GREATER:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 295+ 6F97 9D 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 295+ 6F99             >                else
 295+ 6F99 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 295+ 6F99             >                endif           ; ok        // for other definitions it "points" the correct handler
 295+ 6F99             >                // Use of "; ok" to suppress "warning[fwdref]"
 295+ 6F99             >
 295+ 6F99             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 296+ 6F99 12 6B 7B 6F                  dw      SWAP, LESS              // swap <
 297+ 6F9D 99 69                        dw      EXIT                    // ;
 298+ 6F9F              //  ______________________________________________________________________
 299+ 6F9F              //
 300+ 6F9F              // min          n1 n2 -- n3
 301+ 6F9F              // minimum between n1 and n2
 302+ 6F9F                              Colon_Def MIN, "MIN" , is_normal
 302+ 6F9F             >                New_Def  MIN, "MIN", Enter_Ptr, is_normal ; ok
 302+ 6F9F             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 302+ 6F9F             >
 302+ 6F9F             >                // dummy db directives used to calculate length of namec
 302+ 6F9F 4D 49 4E    >                db      "MIN"
 302+ 6FA2             >len_NFA         defl    $ - temp_NFA
 302+ 6FA2             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 302+ 6F9F             >
 302+ 6F9F 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 302+ 6FA0 4D 49 4E    >                db      "MIN"               // name string in 7-bit ascii, but
 302+ 6FA3             >                org     $-1                 // alter last byte of Name just above to set
 302+ 6FA2 CE          >                db      {b $} | END_BIT     // msb as name end
 302+ 6FA3             >
 302+ 6FA3 93 6F       >                dw      last_NFA            // Link to previous definition Name
 302+ 6FA5             >MIN:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 302+ 6FA5 9D 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 302+ 6FA7             >                else
 302+ 6FA7 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 302+ 6FA7             >                endif           ; ok        // for other definitions it "points" the correct handler
 302+ 6FA7             >                // Use of "; ok" to suppress "warning[fwdref]"
 302+ 6FA7             >
 302+ 6FA7             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 303+ 6FA7 80 6B                        dw      TWO_DUP                 // 2dup
 304+ 6FA9 97 6F                        dw      GREATER                 // >
 305+ 6FAB E3 63                        dw      ZBRANCH
 306+ 6FAD 04 00                        dw      Min_Skip - $   // if
 307+ 6FAF 12 6B                        dw          SWAP                //      swap
 308+ 6FB1              Min_Skip:                                       // endif
 309+ 6FB1 EA 6A                        dw      DROP                    // drop
 310+ 6FB3 99 69                        dw      EXIT                    // ;
 311+ 6FB5
 312+ 6FB5              //  ______________________________________________________________________
 313+ 6FB5              //
 314+ 6FB5              // max          n1 n2 -- n3
 315+ 6FB5              // maximum between n1 and n2
 316+ 6FB5                              Colon_Def MAX, "MAX", is_normal
 316+ 6FB5             >                New_Def  MAX, "MAX", Enter_Ptr, is_normal ; ok
 316+ 6FB5             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 316+ 6FB5             >
 316+ 6FB5             >                // dummy db directives used to calculate length of namec
 316+ 6FB5 4D 41 58    >                db      "MAX"
 316+ 6FB8             >len_NFA         defl    $ - temp_NFA
 316+ 6FB8             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 316+ 6FB5             >
 316+ 6FB5 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 316+ 6FB6 4D 41 58    >                db      "MAX"               // name string in 7-bit ascii, but
 316+ 6FB9             >                org     $-1                 // alter last byte of Name just above to set
 316+ 6FB8 D8          >                db      {b $} | END_BIT     // msb as name end
 316+ 6FB9             >
 316+ 6FB9 9F 6F       >                dw      last_NFA            // Link to previous definition Name
 316+ 6FBB             >MAX:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 316+ 6FBB 9D 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 316+ 6FBD             >                else
 316+ 6FBD ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 316+ 6FBD             >                endif           ; ok        // for other definitions it "points" the correct handler
 316+ 6FBD             >                // Use of "; ok" to suppress "warning[fwdref]"
 316+ 6FBD             >
 316+ 6FBD             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 317+ 6FBD 80 6B                        dw      TWO_DUP                 // 2dup
 318+ 6FBF 7B 6F                        dw      LESS                    // <
 319+ 6FC1 E3 63                        dw      ZBRANCH
 320+ 6FC3 04 00                        dw      Max_Skip - $   // if
 321+ 6FC5 12 6B                        dw          SWAP                //      swap
 322+ 6FC7              Max_Skip:                                       // endif
 323+ 6FC7 EA 6A                        dw      DROP                    // drop
 324+ 6FC9 99 69                        dw      EXIT                    // ;
 325+ 6FCB
 326+ 6FCB              //  ______________________________________________________________________
 327+ 6FCB              //
 328+ 6FCB              // ?dup         n -- 0 | n n
 329+ 6FCB              // duplicate if not zero
 330+ 6FCB                              New_Def QDUP, "?DUP", is_code, is_normal
 330+ 6FCB             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 330+ 6FCB             >
 330+ 6FCB             >                // dummy db directives used to calculate length of namec
 330+ 6FCB 3F 44 55 50 >                db      "?DUP"
 330+ 6FCF             >len_NFA         defl    $ - temp_NFA
 330+ 6FCF             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 330+ 6FCB             >
 330+ 6FCB 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 330+ 6FCC 3F 44 55 50 >                db      "?DUP"               // name string in 7-bit ascii, but
 330+ 6FD0             >                org     $-1                 // alter last byte of Name just above to set
 330+ 6FCF D0          >                db      {b $} | END_BIT     // msb as name end
 330+ 6FD0             >
 330+ 6FD0 B5 6F       >                dw      last_NFA            // Link to previous definition Name
 330+ 6FD2             >QDUP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 330+ 6FD2 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
 330+ 6FD2             >                else
 330+ 6FD2 D4 6F       >                dw      $ + 2   ; ok        // is pointed by CFA
 330+ 6FD4             >                endif           ; ok        // for other definitions it "points" the correct handler
 330+ 6FD4             >                // Use of "; ok" to suppress "warning[fwdref]"
 330+ 6FD4             >
 330+ 6FD4             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 331+ 6FD4              QDup_Ptr:
 332+ 6FD4 E1                           pop     hl
 333+ 6FD5 7C                           ld      a, h
 334+ 6FD6 B5                           or      l
 335+ 6FD7 28 01                        jr      z, QDup_Skip
 336+ 6FD9 E5                               push    hl
 337+ 6FDA              QDup_Skip:
 338+ 6FDA                              psh1
 338+ 6FDA E5          >                push    hl
 338+ 6FDB DD E9       >                jp      (ix)
 339+ 6FDD
 340+ 6FDD              //  ______________________________________________________________________
 341+ 6FDD              //
 342+ 6FDD              // -dup         n -- 0 | n n
 343+ 6FDD              // duplicate if not zero
 344+ 6FDD                              New_Def LDUP, "-DUP", QDup_Ptr, is_normal
 344+ 6FDD             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 344+ 6FDD             >
 344+ 6FDD             >                // dummy db directives used to calculate length of namec
 344+ 6FDD 2D 44 55 50 >                db      "-DUP"
 344+ 6FE1             >len_NFA         defl    $ - temp_NFA
 344+ 6FE1             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 344+ 6FDD             >
 344+ 6FDD 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 344+ 6FDE 2D 44 55 50 >                db      "-DUP"               // name string in 7-bit ascii, but
 344+ 6FE2             >                org     $-1                 // alter last byte of Name just above to set
 344+ 6FE1 D0          >                db      {b $} | END_BIT     // msb as name end
 344+ 6FE2             >
 344+ 6FE2 CB 6F       >                dw      last_NFA            // Link to previous definition Name
 344+ 6FE4             >LDUP:          if QDup_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 344+ 6FE4 D4 6F       >                dw      QDup_Ptr ; ok        // for primitive definitions  actual code
 344+ 6FE6             >                else
 344+ 6FE6 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 344+ 6FE6             >                endif           ; ok        // for other definitions it "points" the correct handler
 344+ 6FE6             >                // Use of "; ok" to suppress "warning[fwdref]"
 344+ 6FE6             >
 344+ 6FE6             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 345+ 6FE6
 346+ 6FE6              //  ______________________________________________________________________
 347+ 6FE6              //
 348+ 6FE6              // emit         c --
 349+ 6FE6                              Colon_Def EMIT, "EMIT", is_normal
 349+ 6FE6             >                New_Def  EMIT, "EMIT", Enter_Ptr, is_normal ; ok
 349+ 6FE6             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 349+ 6FE6             >
 349+ 6FE6             >                // dummy db directives used to calculate length of namec
 349+ 6FE6 45 4D 49 54 >                db      "EMIT"
 349+ 6FEA             >len_NFA         defl    $ - temp_NFA
 349+ 6FEA             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 349+ 6FE6             >
 349+ 6FE6 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 349+ 6FE7 45 4D 49 54 >                db      "EMIT"               // name string in 7-bit ascii, but
 349+ 6FEB             >                org     $-1                 // alter last byte of Name just above to set
 349+ 6FEA D4          >                db      {b $} | END_BIT     // msb as name end
 349+ 6FEB             >
 349+ 6FEB DD 6F       >                dw      last_NFA            // Link to previous definition Name
 349+ 6FED             >EMIT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 349+ 6FED 9D 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 349+ 6FEF             >                else
 349+ 6FEF ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 349+ 6FEF             >                endif           ; ok        // for other definitions it "points" the correct handler
 349+ 6FEF             >                // Use of "; ok" to suppress "warning[fwdref]"
 349+ 6FEF             >
 349+ 6FEF             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 350+ 6FEF 32 66                        dw      C_EMIT                      // (?emit)
 351+ 6FF1 D2 6F                        dw      QDUP                        // ?dup
 352+ 6FF3                                                                  // if
 353+ 6FF3 E3 63                        dw      ZBRANCH
 354+ 6FF5 0A 00                        dw      Emit_Skip - $
 355+ 6FF7 FE 65                        dw          EMITC                   //      emitc
 356+ 6FF9 22 6D                        dw          ONE                     //      1
 357+ 6FFB 2B 6E 8F 6B                  dw          OUT, PLUSSTORE        //      out +!
 358+ 6FFF              Emit_Skip:                                          // endif
 359+ 6FFF 99 69                        dw      EXIT                        // ;
 360+ 7001
 361+ 7001              //  ______________________________________________________________________
 362+ 7001              //
 363+ 7001              // space        --
 364+ 7001                              Colon_Def SPACE, "SPACE", is_normal
 364+ 7001             >                New_Def  SPACE, "SPACE", Enter_Ptr, is_normal ; ok
 364+ 7001             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 364+ 7001             >
 364+ 7001             >                // dummy db directives used to calculate length of namec
 364+ 7001 53 50 41 43 >                db      "SPACE"
 364+ 7005 45          >
 364+ 7006             >len_NFA         defl    $ - temp_NFA
 364+ 7006             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 364+ 7001             >
 364+ 7001 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 364+ 7002 53 50 41 43 >                db      "SPACE"               // name string in 7-bit ascii, but
 364+ 7006 45          >
 364+ 7007             >                org     $-1                 // alter last byte of Name just above to set
 364+ 7006 C5          >                db      {b $} | END_BIT     // msb as name end
 364+ 7007             >
 364+ 7007 E6 6F       >                dw      last_NFA            // Link to previous definition Name
 364+ 7009             >SPACE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 364+ 7009 9D 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 364+ 700B             >                else
 364+ 700B ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 364+ 700B             >                endif           ; ok        // for other definitions it "points" the correct handler
 364+ 700B             >                // Use of "; ok" to suppress "warning[fwdref]"
 364+ 700B             >
 364+ 700B             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 365+ 700B 44 6D ED 6F                  dw      BL, EMIT                // bl emit
 366+ 700F 99 69                        dw      EXIT                    // ;
 367+ 7011
 368+ 7011              //  ______________________________________________________________________
 369+ 7011              //
 370+ 7011              // traverse     a n -- a
 371+ 7011              // A dictionary entry is structured as follows
 372+ 7011              // NFA: +0   one byte of word-length (n<32) | some flags (immediate, smudge) | $80
 373+ 7011              //      +1   word name, last character is toggled with $80
 374+ 7011              // LFA: +1+n link to NFA ofprevious  dictionary entry.
 375+ 7011              // CFA: +3+n routine address. Colon definitions here have pointer to code
 376+ 7011              // PFA: +5+n "is_code", definitions have no PFA.
 377+ 7011              //
 378+ 7011                              Colon_Def TRAVERSE, "TRAVERSE", is_normal
 378+ 7011             >                New_Def  TRAVERSE, "TRAVERSE", Enter_Ptr, is_normal ; ok
 378+ 7011             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 378+ 7011             >
 378+ 7011             >                // dummy db directives used to calculate length of namec
 378+ 7011 54 52 41 56 >                db      "TRAVERSE"
 378+ 7015 45 52 53 45 >
 378+ 7019             >len_NFA         defl    $ - temp_NFA
 378+ 7019             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 378+ 7011             >
 378+ 7011 88          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 378+ 7012 54 52 41 56 >                db      "TRAVERSE"               // name string in 7-bit ascii, but
 378+ 7016 45 52 53 45 >
 378+ 701A             >                org     $-1                 // alter last byte of Name just above to set
 378+ 7019 C5          >                db      {b $} | END_BIT     // msb as name end
 378+ 701A             >
 378+ 701A 01 70       >                dw      last_NFA            // Link to previous definition Name
 378+ 701C             >TRAVERSE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 378+ 701C 9D 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 378+ 701E             >                else
 378+ 701E ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 378+ 701E             >                endif           ; ok        // for other definitions it "points" the correct handler
 378+ 701E             >                // Use of "; ok" to suppress "warning[fwdref]"
 378+ 701E             >
 378+ 701E             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 379+ 701E 12 6B                        dw      SWAP                    // swap
 380+ 7020              Traverse_Begin:                                 // begin
 381+ 7020 DA 6A 3F 6A                  dw          OVER, PLUS          //      over +
 382+ 7024 A9 63 7F 00                  dw          LIT, 127            //      127
 383+ 7028 DA 6A CD 6B                  dw          OVER, CFETCH        //      over @
 384+ 702C 7B 6F                        dw          LESS                //      <
 385+ 702E                                                              // until
 386+ 702E E3 63                        dw      ZBRANCH
 387+ 7030 F0 FF                        dw      Traverse_Begin - $
 388+ 7032 F5 6A                        dw      NIP                     //  nip
 389+ 7034 99 69                        dw      EXIT                    //  ;
 390+ 7036
 391+ 7036              //  ______________________________________________________________________
 392+ 7036              //
 393+ 7036              // latest       -- nfa
 394+ 7036                              Colon_Def LATEST, "LATEST", is_normal
 394+ 7036             >                New_Def  LATEST, "LATEST", Enter_Ptr, is_normal ; ok
 394+ 7036             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 394+ 7036             >
 394+ 7036             >                // dummy db directives used to calculate length of namec
 394+ 7036 4C 41 54 45 >                db      "LATEST"
 394+ 703A 53 54       >
 394+ 703C             >len_NFA         defl    $ - temp_NFA
 394+ 703C             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 394+ 7036             >
 394+ 7036 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 394+ 7037 4C 41 54 45 >                db      "LATEST"               // name string in 7-bit ascii, but
 394+ 703B 53 54       >
 394+ 703D             >                org     $-1                 // alter last byte of Name just above to set
 394+ 703C D4          >                db      {b $} | END_BIT     // msb as name end
 394+ 703D             >
 394+ 703D 11 70       >                dw      last_NFA            // Link to previous definition Name
 394+ 703F             >LATEST:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 394+ 703F 9D 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 394+ 7041             >                else
 394+ 7041 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 394+ 7041             >                endif           ; ok        // for other definitions it "points" the correct handler
 394+ 7041             >                // Use of "; ok" to suppress "warning[fwdref]"
 394+ 7041             >
 394+ 7041             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 395+ 7041 5A 6E                        dw      CURRENT                 // current
 396+ 7043 B2 6B B2 6B                  dw      FETCH, FETCH            // @ @
 397+ 7047 99 69                        dw      EXIT                    // ;
 398+ 7049
 399+ 7049              //  ______________________________________________________________________
 400+ 7049              //
 401+ 7049              // lfa          pfa -- lfa
 402+ 7049                              Colon_Def LFA, "LFA", is_normal
 402+ 7049             >                New_Def  LFA, "LFA", Enter_Ptr, is_normal ; ok
 402+ 7049             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 402+ 7049             >
 402+ 7049             >                // dummy db directives used to calculate length of namec
 402+ 7049 4C 46 41    >                db      "LFA"
 402+ 704C             >len_NFA         defl    $ - temp_NFA
 402+ 704C             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 402+ 7049             >
 402+ 7049 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 402+ 704A 4C 46 41    >                db      "LFA"               // name string in 7-bit ascii, but
 402+ 704D             >                org     $-1                 // alter last byte of Name just above to set
 402+ 704C C1          >                db      {b $} | END_BIT     // msb as name end
 402+ 704D             >
 402+ 704D 36 70       >                dw      last_NFA            // Link to previous definition Name
 402+ 704F             >LFA:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 402+ 704F 9D 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 402+ 7051             >                else
 402+ 7051 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 402+ 7051             >                endif           ; ok        // for other definitions it "points" the correct handler
 402+ 7051             >                // Use of "; ok" to suppress "warning[fwdref]"
 402+ 7051             >
 402+ 7051             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 403+ 7051 92 6A                        dw      CELL_MINUS              // cell-
 404+ 7053 92 6A                        dw      CELL_MINUS              // cell-
 405+ 7055 99 69                        dw      EXIT                    // ;
 406+ 7057
 407+ 7057              //  ______________________________________________________________________
 408+ 7057              //
 409+ 7057              // cfa          pfa -- cfa
 410+ 7057                              Colon_Def CFA, "CFA", is_normal
 410+ 7057             >                New_Def  CFA, "CFA", Enter_Ptr, is_normal ; ok
 410+ 7057             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 410+ 7057             >
 410+ 7057             >                // dummy db directives used to calculate length of namec
 410+ 7057 43 46 41    >                db      "CFA"
 410+ 705A             >len_NFA         defl    $ - temp_NFA
 410+ 705A             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 410+ 7057             >
 410+ 7057 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 410+ 7058 43 46 41    >                db      "CFA"               // name string in 7-bit ascii, but
 410+ 705B             >                org     $-1                 // alter last byte of Name just above to set
 410+ 705A C1          >                db      {b $} | END_BIT     // msb as name end
 410+ 705B             >
 410+ 705B 49 70       >                dw      last_NFA            // Link to previous definition Name
 410+ 705D             >CFA:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 410+ 705D 9D 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 410+ 705F             >                else
 410+ 705F ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 410+ 705F             >                endif           ; ok        // for other definitions it "points" the correct handler
 410+ 705F             >                // Use of "; ok" to suppress "warning[fwdref]"
 410+ 705F             >
 410+ 705F             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 411+ 705F 92 6A                        dw      CELL_MINUS              // cell-
 412+ 7061 99 69                        dw      EXIT                    // ;
 413+ 7063
 414+ 7063              //  ______________________________________________________________________
 415+ 7063              //
 416+ 7063              // nfa          pfa -- nfa
 417+ 7063                              Colon_Def NFA, "NFA", is_normal
 417+ 7063             >                New_Def  NFA, "NFA", Enter_Ptr, is_normal ; ok
 417+ 7063             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 417+ 7063             >
 417+ 7063             >                // dummy db directives used to calculate length of namec
 417+ 7063 4E 46 41    >                db      "NFA"
 417+ 7066             >len_NFA         defl    $ - temp_NFA
 417+ 7066             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 417+ 7063             >
 417+ 7063 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 417+ 7064 4E 46 41    >                db      "NFA"               // name string in 7-bit ascii, but
 417+ 7067             >                org     $-1                 // alter last byte of Name just above to set
 417+ 7066 C1          >                db      {b $} | END_BIT     // msb as name end
 417+ 7067             >
 417+ 7067 57 70       >                dw      last_NFA            // Link to previous definition Name
 417+ 7069             >NFA:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 417+ 7069 9D 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 417+ 706B             >                else
 417+ 706B ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 417+ 706B             >                endif           ; ok        // for other definitions it "points" the correct handler
 417+ 706B             >                // Use of "; ok" to suppress "warning[fwdref]"
 417+ 706B             >
 417+ 706B             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 418+ 706B A9 63 05 00                  dw      LIT, 5                  // 5
 419+ 706F 4C 6F                        dw      SUBTRACT                // -
 420+ 7071 3B 6D                        dw      NEG_ONE                 // -1
 421+ 7073 1C 70                        dw      TRAVERSE                // traverse
 422+ 7075 99 69                        dw      EXIT                    // ;
 423+ 7077
 424+ 7077              //  ______________________________________________________________________
 425+ 7077              //
 426+ 7077              // pfa          nfa -- pfa
 427+ 7077                              Colon_Def PFA, "PFA", is_normal
 427+ 7077             >                New_Def  PFA, "PFA", Enter_Ptr, is_normal ; ok
 427+ 7077             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 427+ 7077             >
 427+ 7077             >                // dummy db directives used to calculate length of namec
 427+ 7077 50 46 41    >                db      "PFA"
 427+ 707A             >len_NFA         defl    $ - temp_NFA
 427+ 707A             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 427+ 7077             >
 427+ 7077 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 427+ 7078 50 46 41    >                db      "PFA"               // name string in 7-bit ascii, but
 427+ 707B             >                org     $-1                 // alter last byte of Name just above to set
 427+ 707A C1          >                db      {b $} | END_BIT     // msb as name end
 427+ 707B             >
 427+ 707B 63 70       >                dw      last_NFA            // Link to previous definition Name
 427+ 707D             >PFA:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 427+ 707D 9D 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 427+ 707F             >                else
 427+ 707F ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 427+ 707F             >                endif           ; ok        // for other definitions it "points" the correct handler
 427+ 707F             >                // Use of "; ok" to suppress "warning[fwdref]"
 427+ 707F             >
 427+ 707F             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 428+ 707F 22 6D                        dw      ONE                     // 1
 429+ 7081 1C 70                        dw      TRAVERSE                // traverse
 430+ 7083 A9 63 05 00                  dw      LIT, 5                  // 6
 431+ 7087 3F 6A                        dw      PLUS                    // +
 432+ 7089 99 69                        dw      EXIT                    // ;
 433+ 708B
 434+ 708B              //  ______________________________________________________________________
 435+ 708B              //
 436+ 708B              // >body        cfa -- pfa
 437+ 708B                              Colon_Def TO_BODY, ">BODY", is_normal
 437+ 708B             >                New_Def  TO_BODY, ">BODY", Enter_Ptr, is_normal ; ok
 437+ 708B             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 437+ 708B             >
 437+ 708B             >                // dummy db directives used to calculate length of namec
 437+ 708B 3E 42 4F 44 >                db      ">BODY"
 437+ 708F 59          >
 437+ 7090             >len_NFA         defl    $ - temp_NFA
 437+ 7090             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 437+ 708B             >
 437+ 708B 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 437+ 708C 3E 42 4F 44 >                db      ">BODY"               // name string in 7-bit ascii, but
 437+ 7090 59          >
 437+ 7091             >                org     $-1                 // alter last byte of Name just above to set
 437+ 7090 D9          >                db      {b $} | END_BIT     // msb as name end
 437+ 7091             >
 437+ 7091 77 70       >                dw      last_NFA            // Link to previous definition Name
 437+ 7093             >TO_BODY:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 437+ 7093 9D 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 437+ 7095             >                else
 437+ 7095 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 437+ 7095             >                endif           ; ok        // for other definitions it "points" the correct handler
 437+ 7095             >                // Use of "; ok" to suppress "warning[fwdref]"
 437+ 7095             >
 437+ 7095             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 438+ 7095 88 6A                        dw      CELL_PLUS               // cell+
 439+ 7097 99 69                        dw      EXIT                    // ;
 440+ 7099
 441+ 7099              //  ______________________________________________________________________
 442+ 7099              //
 443+ 7099              // <name        cfa -- nfa
 444+ 7099                              Colon_Def TO_NAME, "<NAME", is_normal
 444+ 7099             >                New_Def  TO_NAME, "<NAME", Enter_Ptr, is_normal ; ok
 444+ 7099             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 444+ 7099             >
 444+ 7099             >                // dummy db directives used to calculate length of namec
 444+ 7099 3C 4E 41 4D >                db      "<NAME"
 444+ 709D 45          >
 444+ 709E             >len_NFA         defl    $ - temp_NFA
 444+ 709E             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 444+ 7099             >
 444+ 7099 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 444+ 709A 3C 4E 41 4D >                db      "<NAME"               // name string in 7-bit ascii, but
 444+ 709E 45          >
 444+ 709F             >                org     $-1                 // alter last byte of Name just above to set
 444+ 709E C5          >                db      {b $} | END_BIT     // msb as name end
 444+ 709F             >
 444+ 709F 8B 70       >                dw      last_NFA            // Link to previous definition Name
 444+ 70A1             >TO_NAME:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 444+ 70A1 9D 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 444+ 70A3             >                else
 444+ 70A3 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 444+ 70A3             >                endif           ; ok        // for other definitions it "points" the correct handler
 444+ 70A3             >                // Use of "; ok" to suppress "warning[fwdref]"
 444+ 70A3             >
 444+ 70A3             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 445+ 70A3 93 70                        dw      TO_BODY                 // >body
 446+ 70A5 69 70                        dw      NFA                     // nfa
 447+ 70A7 99 69                        dw      EXIT                    // ;
 448+ 70A9
 449+ 70A9              //  ______________________________________________________________________
 450+ 70A9              //
 451+ 70A9              // !csp         --
 452+ 70A9              // store in user variable CSP current value of SP. Used at compile-time for syntax checkng
 453+ 70A9                              Colon_Def STORE_CSP, "!CSP", is_normal
 453+ 70A9             >                New_Def  STORE_CSP, "!CSP", Enter_Ptr, is_normal ; ok
 453+ 70A9             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 453+ 70A9             >
 453+ 70A9             >                // dummy db directives used to calculate length of namec
 453+ 70A9 21 43 53 50 >                db      "!CSP"
 453+ 70AD             >len_NFA         defl    $ - temp_NFA
 453+ 70AD             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 453+ 70A9             >
 453+ 70A9 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 453+ 70AA 21 43 53 50 >                db      "!CSP"               // name string in 7-bit ascii, but
 453+ 70AE             >                org     $-1                 // alter last byte of Name just above to set
 453+ 70AD D0          >                db      {b $} | END_BIT     // msb as name end
 453+ 70AE             >
 453+ 70AE 99 70       >                dw      last_NFA            // Link to previous definition Name
 453+ 70B0             >STORE_CSP:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 453+ 70B0 9D 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 453+ 70B2             >                else
 453+ 70B2 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 453+ 70B2             >                endif           ; ok        // for other definitions it "points" the correct handler
 453+ 70B2             >                // Use of "; ok" to suppress "warning[fwdref]"
 453+ 70B2             >
 453+ 70B2             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 454+ 70B2 61 69                        dw      SPFETCH                 // sp@
 455+ 70B4 8A 6E BF 6B                  dw      CSP, STORE              // csp !
 456+ 70B8 99 69                        dw      EXIT                    // ;
 457+ 70BA
 458+ 70BA              //  ______________________________________________________________________
 459+ 70BA              //
 460+ 70BA              // ?error       f n --
 461+ 70BA              // rase error n if flag f it true
 462+ 70BA                              Colon_Def QERROR, "?ERROR", is_normal
 462+ 70BA             >                New_Def  QERROR, "?ERROR", Enter_Ptr, is_normal ; ok
 462+ 70BA             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 462+ 70BA             >
 462+ 70BA             >                // dummy db directives used to calculate length of namec
 462+ 70BA 3F 45 52 52 >                db      "?ERROR"
 462+ 70BE 4F 52       >
 462+ 70C0             >len_NFA         defl    $ - temp_NFA
 462+ 70C0             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 462+ 70BA             >
 462+ 70BA 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 462+ 70BB 3F 45 52 52 >                db      "?ERROR"               // name string in 7-bit ascii, but
 462+ 70BF 4F 52       >
 462+ 70C1             >                org     $-1                 // alter last byte of Name just above to set
 462+ 70C0 D2          >                db      {b $} | END_BIT     // msb as name end
 462+ 70C1             >
 462+ 70C1 A9 70       >                dw      last_NFA            // Link to previous definition Name
 462+ 70C3             >QERROR:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 462+ 70C3 9D 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 462+ 70C5             >                else
 462+ 70C5 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 462+ 70C5             >                endif           ; ok        // for other definitions it "points" the correct handler
 462+ 70C5             >                // Use of "; ok" to suppress "warning[fwdref]"
 462+ 70C5             >
 462+ 70C5             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 463+ 70C5 12 6B                        dw      SWAP                    // swap
 464+ 70C7                                                              // if
 465+ 70C7 E3 63                        dw      ZBRANCH
 466+ 70C9 08 00                        dw      QError_Else - $
 467+ 70CB 30 76                        dw          ERROR               //      error  ( is a forward-ref )
 468+ 70CD                                                              // else
 469+ 70CD CC 63                        dw      BRANCH
 470+ 70CF 04 00                        dw      QError_Endif - $
 471+ 70D1              QError_Else:
 472+ 70D1 EA 6A                        dw          DROP                //      drop
 473+ 70D3              QError_Endif:                                   // endif
 474+ 70D3 99 69                        dw      EXIT                    // ;
 475+ 70D5
 476+ 70D5              //  ______________________________________________________________________
 477+ 70D5              //
 478+ 70D5              // ?comp       --
 479+ 70D5              // raise msg #17 if not compiling
 480+ 70D5                              Colon_Def QCOMP, "?COMP", is_normal
 480+ 70D5             >                New_Def  QCOMP, "?COMP", Enter_Ptr, is_normal ; ok
 480+ 70D5             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 480+ 70D5             >
 480+ 70D5             >                // dummy db directives used to calculate length of namec
 480+ 70D5 3F 43 4F 4D >                db      "?COMP"
 480+ 70D9 50          >
 480+ 70DA             >len_NFA         defl    $ - temp_NFA
 480+ 70DA             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 480+ 70D5             >
 480+ 70D5 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 480+ 70D6 3F 43 4F 4D >                db      "?COMP"               // name string in 7-bit ascii, but
 480+ 70DA 50          >
 480+ 70DB             >                org     $-1                 // alter last byte of Name just above to set
 480+ 70DA D0          >                db      {b $} | END_BIT     // msb as name end
 480+ 70DB             >
 480+ 70DB BA 70       >                dw      last_NFA            // Link to previous definition Name
 480+ 70DD             >QCOMP:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 480+ 70DD 9D 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 480+ 70DF             >                else
 480+ 70DF ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 480+ 70DF             >                endif           ; ok        // for other definitions it "points" the correct handler
 480+ 70DF             >                // Use of "; ok" to suppress "warning[fwdref]"
 480+ 70DF             >
 480+ 70DF             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 481+ 70DF 65 6E B2 6B                  dw      STATE, FETCH            // state @
 482+ 70E3 FC 69                        dw      ZEQUAL                  // 0=
 483+ 70E5 A9 63 11 00                  dw      LIT, 17                 // 17  ( can't be executed )
 484+ 70E9 C3 70                        dw      QERROR                  // ?error
 485+ 70EB 99 69                        dw      EXIT                    // ;
 486+ 70ED
 487+ 70ED              //  ______________________________________________________________________
 488+ 70ED              //
 489+ 70ED              // ?exec       --
 490+ 70ED              // raise msg #18 if compiling
 491+ 70ED                              Colon_Def QEXEC, "?EXEC", is_normal
 491+ 70ED             >                New_Def  QEXEC, "?EXEC", Enter_Ptr, is_normal ; ok
 491+ 70ED             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 491+ 70ED             >
 491+ 70ED             >                // dummy db directives used to calculate length of namec
 491+ 70ED 3F 45 58 45 >                db      "?EXEC"
 491+ 70F1 43          >
 491+ 70F2             >len_NFA         defl    $ - temp_NFA
 491+ 70F2             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 491+ 70ED             >
 491+ 70ED 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 491+ 70EE 3F 45 58 45 >                db      "?EXEC"               // name string in 7-bit ascii, but
 491+ 70F2 43          >
 491+ 70F3             >                org     $-1                 // alter last byte of Name just above to set
 491+ 70F2 C3          >                db      {b $} | END_BIT     // msb as name end
 491+ 70F3             >
 491+ 70F3 D5 70       >                dw      last_NFA            // Link to previous definition Name
 491+ 70F5             >QEXEC:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 491+ 70F5 9D 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 491+ 70F7             >                else
 491+ 70F7 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 491+ 70F7             >                endif           ; ok        // for other definitions it "points" the correct handler
 491+ 70F7             >                // Use of "; ok" to suppress "warning[fwdref]"
 491+ 70F7             >
 491+ 70F7             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 492+ 70F7 65 6E B2 6B                  dw      STATE, FETCH            // state @
 493+ 70FB A9 63 12 00                  dw      LIT, 18                 // 18  ( can't be compiled )
 494+ 70FF C3 70                        dw      QERROR                  // ?error
 495+ 7101 99 69                        dw      EXIT                    // ;
 496+ 7103
 497+ 7103              //  ______________________________________________________________________
 498+ 7103              //
 499+ 7103              // ?pairs       n1 n2 --
 500+ 7103              // raise msg #19 if n1 != n2. Compiler pushes some placeholder to stack for syntax checking
 501+ 7103                              Colon_Def QPAIRS, "?PAIRS", is_normal
 501+ 7103             >                New_Def  QPAIRS, "?PAIRS", Enter_Ptr, is_normal ; ok
 501+ 7103             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 501+ 7103             >
 501+ 7103             >                // dummy db directives used to calculate length of namec
 501+ 7103 3F 50 41 49 >                db      "?PAIRS"
 501+ 7107 52 53       >
 501+ 7109             >len_NFA         defl    $ - temp_NFA
 501+ 7109             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 501+ 7103             >
 501+ 7103 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 501+ 7104 3F 50 41 49 >                db      "?PAIRS"               // name string in 7-bit ascii, but
 501+ 7108 52 53       >
 501+ 710A             >                org     $-1                 // alter last byte of Name just above to set
 501+ 7109 D3          >                db      {b $} | END_BIT     // msb as name end
 501+ 710A             >
 501+ 710A ED 70       >                dw      last_NFA            // Link to previous definition Name
 501+ 710C             >QPAIRS:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 501+ 710C 9D 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 501+ 710E             >                else
 501+ 710E ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 501+ 710E             >                endif           ; ok        // for other definitions it "points" the correct handler
 501+ 710E             >                // Use of "; ok" to suppress "warning[fwdref]"
 501+ 710E             >
 501+ 710E             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 502+ 710E 4C 6F                        dw      SUBTRACT                // -
 503+ 7110 A9 63 13 00                  dw      LIT, 19                 // 18  ( syntax error )
 504+ 7114 C3 70                        dw      QERROR                  // ?error
 505+ 7116 99 69                        dw      EXIT                    // ;
 506+ 7118
 507+ 7118              //  ______________________________________________________________________
 508+ 7118              //
 509+ 7118              // ?csp       --
 510+ 7118              // raise msg #20 if surrent SP in not what previously saved in CSP.
 511+ 7118              // Compiler relies on that for  syntax checking of structures
 512+ 7118                              Colon_Def QCSP, "?CSP", is_normal
 512+ 7118             >                New_Def  QCSP, "?CSP", Enter_Ptr, is_normal ; ok
 512+ 7118             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 512+ 7118             >
 512+ 7118             >                // dummy db directives used to calculate length of namec
 512+ 7118 3F 43 53 50 >                db      "?CSP"
 512+ 711C             >len_NFA         defl    $ - temp_NFA
 512+ 711C             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 512+ 7118             >
 512+ 7118 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 512+ 7119 3F 43 53 50 >                db      "?CSP"               // name string in 7-bit ascii, but
 512+ 711D             >                org     $-1                 // alter last byte of Name just above to set
 512+ 711C D0          >                db      {b $} | END_BIT     // msb as name end
 512+ 711D             >
 512+ 711D 03 71       >                dw      last_NFA            // Link to previous definition Name
 512+ 711F             >QCSP:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 512+ 711F 9D 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 512+ 7121             >                else
 512+ 7121 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 512+ 7121             >                endif           ; ok        // for other definitions it "points" the correct handler
 512+ 7121             >                // Use of "; ok" to suppress "warning[fwdref]"
 512+ 7121             >
 512+ 7121             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 513+ 7121 61 69                        dw      SPFETCH                 // sp@
 514+ 7123 8A 6E B2 6B                  dw      CSP, FETCH              // csp @
 515+ 7127 4C 6F                        dw      SUBTRACT                // -
 516+ 7129 A9 63 14 00                  dw      LIT, 20                 // 20  ( bad definition end )
 517+ 712D C3 70                        dw      QERROR                  // ?error
 518+ 712F 99 69                        dw      EXIT                    // ;
 519+ 7131
 520+ 7131              //  ______________________________________________________________________
 521+ 7131              //
 522+ 7131              // ?loading      --
 523+ 7131              // raise msg #22 if not loading
 524+ 7131                              Colon_Def QLOADING, "?LOADING", is_normal
 524+ 7131             >                New_Def  QLOADING, "?LOADING", Enter_Ptr, is_normal ; ok
 524+ 7131             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 524+ 7131             >
 524+ 7131             >                // dummy db directives used to calculate length of namec
 524+ 7131 3F 4C 4F 41 >                db      "?LOADING"
 524+ 7135 44 49 4E 47 >
 524+ 7139             >len_NFA         defl    $ - temp_NFA
 524+ 7139             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 524+ 7131             >
 524+ 7131 88          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 524+ 7132 3F 4C 4F 41 >                db      "?LOADING"               // name string in 7-bit ascii, but
 524+ 7136 44 49 4E 47 >
 524+ 713A             >                org     $-1                 // alter last byte of Name just above to set
 524+ 7139 C7          >                db      {b $} | END_BIT     // msb as name end
 524+ 713A             >
 524+ 713A 18 71       >                dw      last_NFA            // Link to previous definition Name
 524+ 713C             >QLOADING:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 524+ 713C 9D 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 524+ 713E             >                else
 524+ 713E ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 524+ 713E             >                endif           ; ok        // for other definitions it "points" the correct handler
 524+ 713E             >                // Use of "; ok" to suppress "warning[fwdref]"
 524+ 713E             >
 524+ 713E             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 525+ 713E 19 6E B2 6B                  dw      BLK, FETCH              // blk @
 526+ 7142 FC 69                        dw      ZEQUAL                  // 0=
 527+ 7144 A9 63 16 00                  dw      LIT, 22                 // 22  ( aren't loading now )
 528+ 7148 C3 70                        dw      QERROR                  // ?error
 529+ 714A 99 69                        dw      EXIT                    // ;
 530+ 714C
 531+ 714C              //  ______________________________________________________________________
 532+ 714C              //
 533+ 714C              // compile      --
 534+ 714C              // compiles the following word
 535+ 714C                              Colon_Def COMPILE, "COMPILE", is_normal
 535+ 714C             >                New_Def  COMPILE, "COMPILE", Enter_Ptr, is_normal ; ok
 535+ 714C             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 535+ 714C             >
 535+ 714C             >                // dummy db directives used to calculate length of namec
 535+ 714C 43 4F 4D 50 >                db      "COMPILE"
 535+ 7150 49 4C 45    >
 535+ 7153             >len_NFA         defl    $ - temp_NFA
 535+ 7153             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 535+ 714C             >
 535+ 714C 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 535+ 714D 43 4F 4D 50 >                db      "COMPILE"               // name string in 7-bit ascii, but
 535+ 7151 49 4C 45    >
 535+ 7154             >                org     $-1                 // alter last byte of Name just above to set
 535+ 7153 C5          >                db      {b $} | END_BIT     // msb as name end
 535+ 7154             >
 535+ 7154 31 71       >                dw      last_NFA            // Link to previous definition Name
 535+ 7156             >COMPILE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 535+ 7156 9D 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 535+ 7158             >                else
 535+ 7158 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 535+ 7158             >                endif           ; ok        // for other definitions it "points" the correct handler
 535+ 7158             >                // Use of "; ok" to suppress "warning[fwdref]"
 535+ 7158             >
 535+ 7158             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 536+ 7158 DD 70                        dw      QCOMP                   // ?comp
 537+ 715A DB 69                        dw      R_TO                    // r>
 538+ 715C 1F 6B 88 6A                  dw      DUP, CELL_PLUS          // dup, cell+
 539+ 7160 C7 69                        dw      TO_R                    // >r
 540+ 7162 B2 6B 15 6F                  dw      FETCH, COMMA            // @ ,
 541+ 7166 99 69                        dw      EXIT                    // ;
 542+ 7168
 543+ 7168              //  ______________________________________________________________________
 544+ 7168              //
 545+ 7168              // compile,     --
 546+ 7168              // compiles the following word
 547+ 7168                              Colon_Def COMPILE_XT, "COMPILE,", is_normal
 547+ 7168             >                New_Def  COMPILE_XT, "COMPILE,", Enter_Ptr, is_normal ; ok
 547+ 7168             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 547+ 7168             >
 547+ 7168             >                // dummy db directives used to calculate length of namec
 547+ 7168 43 4F 4D 50 >                db      "COMPILE,"
 547+ 716C 49 4C 45 2C >
 547+ 7170             >len_NFA         defl    $ - temp_NFA
 547+ 7170             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 547+ 7168             >
 547+ 7168 88          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 547+ 7169 43 4F 4D 50 >                db      "COMPILE,"               // name string in 7-bit ascii, but
 547+ 716D 49 4C 45 2C >
 547+ 7171             >                org     $-1                 // alter last byte of Name just above to set
 547+ 7170 AC          >                db      {b $} | END_BIT     // msb as name end
 547+ 7171             >
 547+ 7171 4C 71       >                dw      last_NFA            // Link to previous definition Name
 547+ 7173             >COMPILE_XT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 547+ 7173 9D 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 547+ 7175             >                else
 547+ 7175 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 547+ 7175             >                endif           ; ok        // for other definitions it "points" the correct handler
 547+ 7175             >                // Use of "; ok" to suppress "warning[fwdref]"
 547+ 7175             >
 547+ 7175             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 548+ 7175 DD 70                        dw      QCOMP                   // ?comp
 549+ 7177 15 6F                        dw      COMMA                   // ,
 550+ 7179 99 69                        dw      EXIT                    // ;
 551+ 717B
 552+ 717B              //  ______________________________________________________________________
 553+ 717B              //
 554+ 717B              // [            --
 555+ 717B              // stop compilation
 556+ 717B                              Colon_Def SQUARED_OPEN, "[", is_immediate
 556+ 717B             >                New_Def  SQUARED_OPEN, "[", Enter_Ptr, is_immediate ; ok
 556+ 717B             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 556+ 717B             >
 556+ 717B             >                // dummy db directives used to calculate length of namec
 556+ 717B 5B          >                db      "["
 556+ 717C             >len_NFA         defl    $ - temp_NFA
 556+ 717C             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 556+ 717B             >
 556+ 717B C1          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 556+ 717C 5B          >                db      "["               // name string in 7-bit ascii, but
 556+ 717D             >                org     $-1                 // alter last byte of Name just above to set
 556+ 717C DB          >                db      {b $} | END_BIT     // msb as name end
 556+ 717D             >
 556+ 717D 68 71       >                dw      last_NFA            // Link to previous definition Name
 556+ 717F             >SQUARED_OPEN:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 556+ 717F 9D 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 556+ 7181             >                else
 556+ 7181 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 556+ 7181             >                endif           ; ok        // for other definitions it "points" the correct handler
 556+ 7181             >                // Use of "; ok" to suppress "warning[fwdref]"
 556+ 7181             >
 556+ 7181             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 557+ 7181 1A 6D                        dw      ZERO                    // 0
 558+ 7183 65 6E BF 6B                  dw      STATE, STORE            // state !
 559+ 7187 99 69                        dw      EXIT                    // ; immediate
 560+ 7189
 561+ 7189              //  ______________________________________________________________________
 562+ 7189              //
 563+ 7189              // ]            --
 564+ 7189              // start compilation
 565+ 7189                              Colon_Def SQUARED_CLOSE, "]", is_normal
 565+ 7189             >                New_Def  SQUARED_CLOSE, "]", Enter_Ptr, is_normal ; ok
 565+ 7189             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 565+ 7189             >
 565+ 7189             >                // dummy db directives used to calculate length of namec
 565+ 7189 5D          >                db      "]"
 565+ 718A             >len_NFA         defl    $ - temp_NFA
 565+ 718A             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 565+ 7189             >
 565+ 7189 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 565+ 718A 5D          >                db      "]"               // name string in 7-bit ascii, but
 565+ 718B             >                org     $-1                 // alter last byte of Name just above to set
 565+ 718A DD          >                db      {b $} | END_BIT     // msb as name end
 565+ 718B             >
 565+ 718B 7B 71       >                dw      last_NFA            // Link to previous definition Name
 565+ 718D             >SQUARED_CLOSE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 565+ 718D 9D 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 565+ 718F             >                else
 565+ 718F ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 565+ 718F             >                endif           ; ok        // for other definitions it "points" the correct handler
 565+ 718F             >                // Use of "; ok" to suppress "warning[fwdref]"
 565+ 718F             >
 565+ 718F             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 566+ 718F A9 63 C0 00                  dw      LIT, $C0                // 192
 567+ 7193 65 6E BF 6B                  dw      STATE, STORE            // state !
 568+ 7197 99 69                        dw      EXIT                    // ;
 569+ 7199
 570+ 7199              //  ______________________________________________________________________
 571+ 7199              //
 572+ 7199              // smudge       --
 573+ 7199              // toggle smudge bit of latest definition
 574+ 7199                              Colon_Def SMUDGE, "SMUDGE", is_normal
 574+ 7199             >                New_Def  SMUDGE, "SMUDGE", Enter_Ptr, is_normal ; ok
 574+ 7199             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 574+ 7199             >
 574+ 7199             >                // dummy db directives used to calculate length of namec
 574+ 7199 53 4D 55 44 >                db      "SMUDGE"
 574+ 719D 47 45       >
 574+ 719F             >len_NFA         defl    $ - temp_NFA
 574+ 719F             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 574+ 7199             >
 574+ 7199 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 574+ 719A 53 4D 55 44 >                db      "SMUDGE"               // name string in 7-bit ascii, but
 574+ 719E 47 45       >
 574+ 71A0             >                org     $-1                 // alter last byte of Name just above to set
 574+ 719F C5          >                db      {b $} | END_BIT     // msb as name end
 574+ 71A0             >
 574+ 71A0 89 71       >                dw      last_NFA            // Link to previous definition Name
 574+ 71A2             >SMUDGE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 574+ 71A2 9D 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 574+ 71A4             >                else
 574+ 71A4 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 574+ 71A4             >                endif           ; ok        // for other definitions it "points" the correct handler
 574+ 71A4             >                // Use of "; ok" to suppress "warning[fwdref]"
 574+ 71A4             >
 574+ 71A4             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 575+ 71A4 3F 70                        dw      LATEST                  // latest
 576+ 71A6 A9 63 20 00                  dw      LIT, SMUDGE_BIT         // 32
 577+ 71AA A5 6B                        dw      TOGGLE                  // toggle
 578+ 71AC 99 69                        dw      EXIT                    // ;
 579+ 71AE
 580+ 71AE              //  ______________________________________________________________________
 581+ 71AE              //
 582+ 71AE              // immediate    --
 583+ 71AE              // make immediate the latest definition
 584+ 71AE                              Colon_Def IMMEDIATE, "IMMEDIATE", is_normal
 584+ 71AE             >                New_Def  IMMEDIATE, "IMMEDIATE", Enter_Ptr, is_normal ; ok
 584+ 71AE             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 584+ 71AE             >
 584+ 71AE             >                // dummy db directives used to calculate length of namec
 584+ 71AE 49 4D 4D 45 >                db      "IMMEDIATE"
 584+ 71B2 44 49 41 54 >
 584+ 71B6 45          >
 584+ 71B7             >len_NFA         defl    $ - temp_NFA
 584+ 71B7             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 584+ 71AE             >
 584+ 71AE 89          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 584+ 71AF 49 4D 4D 45 >                db      "IMMEDIATE"               // name string in 7-bit ascii, but
 584+ 71B3 44 49 41 54 >
 584+ 71B7 45          >
 584+ 71B8             >                org     $-1                 // alter last byte of Name just above to set
 584+ 71B7 C5          >                db      {b $} | END_BIT     // msb as name end
 584+ 71B8             >
 584+ 71B8 99 71       >                dw      last_NFA            // Link to previous definition Name
 584+ 71BA             >IMMEDIATE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 584+ 71BA 9D 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 584+ 71BC             >                else
 584+ 71BC ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 584+ 71BC             >                endif           ; ok        // for other definitions it "points" the correct handler
 584+ 71BC             >                // Use of "; ok" to suppress "warning[fwdref]"
 584+ 71BC             >
 584+ 71BC             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 585+ 71BC 3F 70                        dw      LATEST                  // latest
 586+ 71BE A9 63 40 00                  dw      LIT, $40                // 64
 587+ 71C2 A5 6B                        dw      TOGGLE                  // toggle
 588+ 71C4 99 69                        dw      EXIT                    // ;
 589+ 71C6
 590+ 71C6              //  ______________________________________________________________________
 591+ 71C6              //
 592+ 71C6              // hex          --
 593+ 71C6              // change numeration base
 594+ 71C6                              Colon_Def HEX, "HEX", is_normal
 594+ 71C6             >                New_Def  HEX, "HEX", Enter_Ptr, is_normal ; ok
 594+ 71C6             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 594+ 71C6             >
 594+ 71C6             >                // dummy db directives used to calculate length of namec
 594+ 71C6 48 45 58    >                db      "HEX"
 594+ 71C9             >len_NFA         defl    $ - temp_NFA
 594+ 71C9             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 594+ 71C6             >
 594+ 71C6 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 594+ 71C7 48 45 58    >                db      "HEX"               // name string in 7-bit ascii, but
 594+ 71CA             >                org     $-1                 // alter last byte of Name just above to set
 594+ 71C9 D8          >                db      {b $} | END_BIT     // msb as name end
 594+ 71CA             >
 594+ 71CA AE 71       >                dw      last_NFA            // Link to previous definition Name
 594+ 71CC             >HEX:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 594+ 71CC 9D 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 594+ 71CE             >                else
 594+ 71CE ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 594+ 71CE             >                endif           ; ok        // for other definitions it "points" the correct handler
 594+ 71CE             >                // Use of "; ok" to suppress "warning[fwdref]"
 594+ 71CE             >
 594+ 71CE             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 595+ 71CE A9 63 10 00                  dw      LIT, 16                 // 16
 596+ 71D2 6F 6E BF 6B                  dw      BASE, STORE             // base !
 597+ 71D6 99 69                        dw      EXIT                    // ;
 598+ 71D8
 599+ 71D8              //  ______________________________________________________________________
 600+ 71D8              //
 601+ 71D8              // decimal      --
 602+ 71D8              // change numeration base
 603+ 71D8                              Colon_Def DECIMAL, "DECIMAL", is_normal
 603+ 71D8             >                New_Def  DECIMAL, "DECIMAL", Enter_Ptr, is_normal ; ok
 603+ 71D8             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 603+ 71D8             >
 603+ 71D8             >                // dummy db directives used to calculate length of namec
 603+ 71D8 44 45 43 49 >                db      "DECIMAL"
 603+ 71DC 4D 41 4C    >
 603+ 71DF             >len_NFA         defl    $ - temp_NFA
 603+ 71DF             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 603+ 71D8             >
 603+ 71D8 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 603+ 71D9 44 45 43 49 >                db      "DECIMAL"               // name string in 7-bit ascii, but
 603+ 71DD 4D 41 4C    >
 603+ 71E0             >                org     $-1                 // alter last byte of Name just above to set
 603+ 71DF CC          >                db      {b $} | END_BIT     // msb as name end
 603+ 71E0             >
 603+ 71E0 C6 71       >                dw      last_NFA            // Link to previous definition Name
 603+ 71E2             >DECIMAL:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 603+ 71E2 9D 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 603+ 71E4             >                else
 603+ 71E4 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 603+ 71E4             >                endif           ; ok        // for other definitions it "points" the correct handler
 603+ 71E4             >                // Use of "; ok" to suppress "warning[fwdref]"
 603+ 71E4             >
 603+ 71E4             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 604+ 71E4 A9 63 0A 00                  dw      LIT, 10                 // 10
 605+ 71E8 6F 6E BF 6B                  dw      BASE, STORE             // base !
 606+ 71EC 99 69                        dw      EXIT                    // ;
 607+ 71EE
 608+ 71EE              //  ______________________________________________________________________
 609+ 71EE              //
 610+ 71EE              // (;code)       --
 611+ 71EE              // patch to CFA to call/jump to the "following code"
 612+ 71EE                              Colon_Def C_SEMICOLON_CODE, "(;CODE)", is_normal
 612+ 71EE             >                New_Def  C_SEMICOLON_CODE, "(;CODE)", Enter_Ptr, is_normal ; ok
 612+ 71EE             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 612+ 71EE             >
 612+ 71EE             >                // dummy db directives used to calculate length of namec
 612+ 71EE 28 3B 43 4F >                db      "(;CODE)"
 612+ 71F2 44 45 29    >
 612+ 71F5             >len_NFA         defl    $ - temp_NFA
 612+ 71F5             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 612+ 71EE             >
 612+ 71EE 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 612+ 71EF 28 3B 43 4F >                db      "(;CODE)"               // name string in 7-bit ascii, but
 612+ 71F3 44 45 29    >
 612+ 71F6             >                org     $-1                 // alter last byte of Name just above to set
 612+ 71F5 A9          >                db      {b $} | END_BIT     // msb as name end
 612+ 71F6             >
 612+ 71F6 D8 71       >                dw      last_NFA            // Link to previous definition Name
 612+ 71F8             >C_SEMICOLON_CODE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 612+ 71F8 9D 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 612+ 71FA             >                else
 612+ 71FA ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 612+ 71FA             >                endif           ; ok        // for other definitions it "points" the correct handler
 612+ 71FA             >                // Use of "; ok" to suppress "warning[fwdref]"
 612+ 71FA             >
 612+ 71FA             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 613+ 71FA DB 69                        dw      R_TO                    // r>       ( Return Stack has IP to caller's next cell )
 614+ 71FC 3F 70                        dw      LATEST                  // latest   ( Word being defined in this moment )
 615+ 71FE 7D 70 5D 70                  dw      PFA, CFA                // pfa cfa  ( cfa of latest word )
 616+ 7202
 617+ 7202
 618+ 7202
 619+ 7202
 620+ 7202
 621+ 7202 BF 6B                        dw      STORE                   // !
 622+ 7204 99 69                        dw      EXIT                    // ;
 623+ 7206
 624+ 7206              //  ______________________________________________________________________
 625+ 7206              //
 626+ 7206              // ;code        --
 627+ 7206                              Colon_Def SEMICOLON_CODE, ";CODE", is_immediate
 627+ 7206             >                New_Def  SEMICOLON_CODE, ";CODE", Enter_Ptr, is_immediate ; ok
 627+ 7206             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 627+ 7206             >
 627+ 7206             >                // dummy db directives used to calculate length of namec
 627+ 7206 3B 43 4F 44 >                db      ";CODE"
 627+ 720A 45          >
 627+ 720B             >len_NFA         defl    $ - temp_NFA
 627+ 720B             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 627+ 7206             >
 627+ 7206 C5          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 627+ 7207 3B 43 4F 44 >                db      ";CODE"               // name string in 7-bit ascii, but
 627+ 720B 45          >
 627+ 720C             >                org     $-1                 // alter last byte of Name just above to set
 627+ 720B C5          >                db      {b $} | END_BIT     // msb as name end
 627+ 720C             >
 627+ 720C EE 71       >                dw      last_NFA            // Link to previous definition Name
 627+ 720E             >SEMICOLON_CODE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 627+ 720E 9D 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 627+ 7210             >                else
 627+ 7210 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 627+ 7210             >                endif           ; ok        // for other definitions it "points" the correct handler
 627+ 7210             >                // Use of "; ok" to suppress "warning[fwdref]"
 627+ 7210             >
 627+ 7210             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 628+ 7210 1F 71                        dw      QCSP                    // ?csp
 629+ 7212 56 71                        dw      COMPILE                 // compile
 630+ 7214 F8 71                        dw      C_SEMICOLON_CODE        // (;code)
 631+ 7216 7F 71                        dw      SQUARED_OPEN            // [
 632+ 7218 C5 6C                        dw      NOOP                    // noop () can be patched later to ASSEMBLER... )
 633+ 721A 99 69                        dw      EXIT                    // ; immediate
 634+ 721C
 635+ 721C              //  ______________________________________________________________________
 636+ 721C              //
 637+ 721C              // <builds      --
 638+ 721C                              Colon_Def CBUILDS, "<BUILDS", is_normal
 638+ 721C             >                New_Def  CBUILDS, "<BUILDS", Enter_Ptr, is_normal ; ok
 638+ 721C             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 638+ 721C             >
 638+ 721C             >                // dummy db directives used to calculate length of namec
 638+ 721C 3C 42 55 49 >                db      "<BUILDS"
 638+ 7220 4C 44 53    >
 638+ 7223             >len_NFA         defl    $ - temp_NFA
 638+ 7223             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 638+ 721C             >
 638+ 721C 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 638+ 721D 3C 42 55 49 >                db      "<BUILDS"               // name string in 7-bit ascii, but
 638+ 7221 4C 44 53    >
 638+ 7224             >                org     $-1                 // alter last byte of Name just above to set
 638+ 7223 D3          >                db      {b $} | END_BIT     // msb as name end
 638+ 7224             >
 638+ 7224 06 72       >                dw      last_NFA            // Link to previous definition Name
 638+ 7226             >CBUILDS:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 638+ 7226 9D 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 638+ 7228             >                else
 638+ 7228 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 638+ 7228             >                endif           ; ok        // for other definitions it "points" the correct handler
 638+ 7228             >                // Use of "; ok" to suppress "warning[fwdref]"
 638+ 7228             >
 638+ 7228             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 639+ 7228 1A 6D                        dw      ZERO                    // 0
 640+ 722A D4 6C                        dw      CONSTANT                // constant
 641+ 722C 99 69                        dw      EXIT                    // ;
 642+ 722E
 643+ 722E              //  ______________________________________________________________________
 644+ 722E              //
 645+ 722E              // recurse      --
 646+ 722E              //              Colon_Def RECURSE, "RECURSE", is_immediate
 647+ 722E              //              dw      QCOMP                   // ?comp
 648+ 722E              //              dw      LATEST                  // latest
 649+ 722E              //              dw      PFA, CFA                // pfa cfa
 650+ 722E              //              dw      COMMA                   // ,
 651+ 722E              //              dw      EXIT                    // ; immediate
 652+ 722E
 653+ 722E              //  ______________________________________________________________________
 654+ 722E              //
 655+ 722E              // does>     --
 656+ 722E                              Colon_Def DOES_TO, "DOES>", is_normal
 656+ 722E             >                New_Def  DOES_TO, "DOES>", Enter_Ptr, is_normal ; ok
 656+ 722E             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 656+ 722E             >
 656+ 722E             >                // dummy db directives used to calculate length of namec
 656+ 722E 44 4F 45 53 >                db      "DOES>"
 656+ 7232 3E          >
 656+ 7233             >len_NFA         defl    $ - temp_NFA
 656+ 7233             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 656+ 722E             >
 656+ 722E 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 656+ 722F 44 4F 45 53 >                db      "DOES>"               // name string in 7-bit ascii, but
 656+ 7233 3E          >
 656+ 7234             >                org     $-1                 // alter last byte of Name just above to set
 656+ 7233 BE          >                db      {b $} | END_BIT     // msb as name end
 656+ 7234             >
 656+ 7234 1C 72       >                dw      last_NFA            // Link to previous definition Name
 656+ 7236             >DOES_TO:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 656+ 7236 9D 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 656+ 7238             >                else
 656+ 7238 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 656+ 7238             >                endif           ; ok        // for other definitions it "points" the correct handler
 656+ 7238             >                // Use of "; ok" to suppress "warning[fwdref]"
 656+ 7238             >
 656+ 7238             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 657+ 7238 DB 69                        dw      R_TO                    // r>
 658+ 723A 3F 70                        dw      LATEST                  // latest
 659+ 723C 7D 70                        dw      PFA                     // pfa
 660+ 723E BF 6B                        dw      STORE                   // !
 661+ 7240 F8 71                        dw      C_SEMICOLON_CODE        // ;code
 662+ 7242              Does_Ptr:
 663+ 7242                              // via call coded in CFA
 664+ 7242                              ldhlrp
 664+ 7242 2A 96 63    >                ld      hl,(RP_Pointer)
 665+ 7245 2B                           dec     hl                  // push on Return-Stack current Instruction-Pointer
 666+ 7246 70                           ld      (hl), b
 667+ 7247 2B                           dec     hl
 668+ 7248 71                           ld      (hl), c
 669+ 7249                              ldrphl
 669+ 7249 22 96 63    >                ld      (RP_Pointer),hl
 670+ 724C 13                           inc     de
 671+ 724D EB                           ex      de, hl
 672+ 724E 4E                           ld      c, (hl)
 673+ 724F 23                           inc     hl
 674+ 7250 46                           ld      b, (hl)
 675+ 7251 23                           inc     hl
 676+ 7252
 677+ 7252                              psh1
 677+ 7252 E5          >                push    hl
 677+ 7253 DD E9       >                jp      (ix)
 678+ 7255                              // SMUDGE !
 679+ 7255
 680+ 7255              //  ______________________________________________________________________
 681+ 7255              //
 682+ 7255              // count        a -- a2 n
 683+ 7255              // expects a counted string at address a, returns string address and counter
 684+ 7255                              Colon_Def COUNT, "COUNT", is_normal
 684+ 7255             >                New_Def  COUNT, "COUNT", Enter_Ptr, is_normal ; ok
 684+ 7255             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 684+ 7255             >
 684+ 7255             >                // dummy db directives used to calculate length of namec
 684+ 7255 43 4F 55 4E >                db      "COUNT"
 684+ 7259 54          >
 684+ 725A             >len_NFA         defl    $ - temp_NFA
 684+ 725A             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 684+ 7255             >
 684+ 7255 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 684+ 7256 43 4F 55 4E >                db      "COUNT"               // name string in 7-bit ascii, but
 684+ 725A 54          >
 684+ 725B             >                org     $-1                 // alter last byte of Name just above to set
 684+ 725A D4          >                db      {b $} | END_BIT     // msb as name end
 684+ 725B             >
 684+ 725B 2E 72       >                dw      last_NFA            // Link to previous definition Name
 684+ 725D             >COUNT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 684+ 725D 9D 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 684+ 725F             >                else
 684+ 725F ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 684+ 725F             >                endif           ; ok        // for other definitions it "points" the correct handler
 684+ 725F             >                // Use of "; ok" to suppress "warning[fwdref]"
 684+ 725F             >
 684+ 725F             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 685+ 725F 1F 6B                        dw      DUP                     // dup
 686+ 7261 60 6A                        dw      ONE_PLUS                // 1+
 687+ 7263 12 6B CD 6B                  dw      SWAP, CFETCH             // swap @
 688+ 7267 99 69                        dw      EXIT                    // ;
 689+ 7269
 690+ 7269              //  ______________________________________________________________________
 691+ 7269              //
 692+ 7269              // bounds       a n -- a+n n
 693+ 7269              // given an address and a length ( a n ) calculate the bound addresses
 694+ 7269              // suitable for DO-LOOP
 695+ 7269                              Colon_Def BOUNDS, "BOUNDS", is_normal
 695+ 7269             >                New_Def  BOUNDS, "BOUNDS", Enter_Ptr, is_normal ; ok
 695+ 7269             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 695+ 7269             >
 695+ 7269             >                // dummy db directives used to calculate length of namec
 695+ 7269 42 4F 55 4E >                db      "BOUNDS"
 695+ 726D 44 53       >
 695+ 726F             >len_NFA         defl    $ - temp_NFA
 695+ 726F             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 695+ 7269             >
 695+ 7269 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 695+ 726A 42 4F 55 4E >                db      "BOUNDS"               // name string in 7-bit ascii, but
 695+ 726E 44 53       >
 695+ 7270             >                org     $-1                 // alter last byte of Name just above to set
 695+ 726F D3          >                db      {b $} | END_BIT     // msb as name end
 695+ 7270             >
 695+ 7270 55 72       >                dw      last_NFA            // Link to previous definition Name
 695+ 7272             >BOUNDS:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 695+ 7272 9D 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 695+ 7274             >                else
 695+ 7274 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 695+ 7274             >                endif           ; ok        // for other definitions it "points" the correct handler
 695+ 7274             >                // Use of "; ok" to suppress "warning[fwdref]"
 695+ 7274             >
 695+ 7274             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 696+ 7274 DA 6A 3F 6A                  dw      OVER, PLUS, SWAP        // over + swap
 696+ 7278 12 6B
 697+ 727A 99 69                        dw      EXIT                    // ;
 698+ 727C
 699+ 727C              //  ______________________________________________________________________
 700+ 727C              //
 701+ 727C              // type         a n --
 702+ 727C              // Sends to current output channel n characters starting at address a.
 703+ 727C                              Colon_Def TYPE, "TYPE", is_normal
 703+ 727C             >                New_Def  TYPE, "TYPE", Enter_Ptr, is_normal ; ok
 703+ 727C             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 703+ 727C             >
 703+ 727C             >                // dummy db directives used to calculate length of namec
 703+ 727C 54 59 50 45 >                db      "TYPE"
 703+ 7280             >len_NFA         defl    $ - temp_NFA
 703+ 7280             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 703+ 727C             >
 703+ 727C 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 703+ 727D 54 59 50 45 >                db      "TYPE"               // name string in 7-bit ascii, but
 703+ 7281             >                org     $-1                 // alter last byte of Name just above to set
 703+ 7280 C5          >                db      {b $} | END_BIT     // msb as name end
 703+ 7281             >
 703+ 7281 69 72       >                dw      last_NFA            // Link to previous definition Name
 703+ 7283             >TYPE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 703+ 7283 9D 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 703+ 7285             >                else
 703+ 7285 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 703+ 7285             >                endif           ; ok        // for other definitions it "points" the correct handler
 703+ 7285             >                // Use of "; ok" to suppress "warning[fwdref]"
 703+ 7285             >
 703+ 7285             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 704+ 7285 72 72                        dw      BOUNDS                  // bounds
 705+ 7287 42 64                        dw      C_Q_DO                  // ?do
 706+ 7289 0C 00                        dw      Type_Skip - $
 707+ 728B              Type_Loop:
 708+ 728B 7B 64 CD 6B                  dw          I, CFETCH           //      i c@
 709+ 728F ED 6F                        dw          EMIT                //      emit
 710+ 7291 31 64                        dw      C_LOOP                  // loop
 711+ 7293 F8 FF                        dw      Type_Loop - $
 712+ 7295              Type_Skip:
 713+ 7295 99 69                        dw      EXIT                    // ;
 714+ 7297
 715+ 7297              //  ______________________________________________________________________
 716+ 7297              //
 717+ 7297              // leave        --
 718+ 7297              // Compile (leave) to leave current LOOP and jump just after it
 719+ 7297                              Colon_Def LEAVE, "LEAVE", is_immediate
 719+ 7297             >                New_Def  LEAVE, "LEAVE", Enter_Ptr, is_immediate ; ok
 719+ 7297             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 719+ 7297             >
 719+ 7297             >                // dummy db directives used to calculate length of namec
 719+ 7297 4C 45 41 56 >                db      "LEAVE"
 719+ 729B 45          >
 719+ 729C             >len_NFA         defl    $ - temp_NFA
 719+ 729C             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 719+ 7297             >
 719+ 7297 C5          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 719+ 7298 4C 45 41 56 >                db      "LEAVE"               // name string in 7-bit ascii, but
 719+ 729C 45          >
 719+ 729D             >                org     $-1                 // alter last byte of Name just above to set
 719+ 729C C5          >                db      {b $} | END_BIT     // msb as name end
 719+ 729D             >
 719+ 729D 7C 72       >                dw      last_NFA            // Link to previous definition Name
 719+ 729F             >LEAVE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 719+ 729F 9D 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 719+ 72A1             >                else
 719+ 72A1 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 719+ 72A1             >                endif           ; ok        // for other definitions it "points" the correct handler
 719+ 72A1             >                // Use of "; ok" to suppress "warning[fwdref]"
 719+ 72A1             >
 719+ 72A1             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 720+ 72A1 56 71 B1 69                  dw      COMPILE, C_LEAVE       // compile (leave)     \ unloop and branch
 721+ 72A5 F9 6E C7 69                  dw      HERE, TO_R, ZERO, COMMA // here >r 0 ,
 721+ 72A9 1A 6D 15 6F
 722+ 72AD 1A 6D 1A 6D                  dw      ZERO, ZERO
 723+ 72B1 61 69 1F 6B                  dw      SPFETCH, DUP
 724+ 72B5 88 6A 88 6A                  dw      CELL_PLUS, CELL_PLUS
 725+ 72B9 02 6B                        dw      TUCK
 726+ 72BB 8A 6E B2 6B                  dw      CSP, FETCH
 727+ 72BF 12 6B 4C 6F                  dw      SWAP, SUBTRACT
 728+ 72C3 89 68                        dw      CMOVE
 729+ 72C5 8A 6E B2 6B                  dw      CSP, FETCH, CELL_MINUS
 729+ 72C9 92 6A
 730+ 72CB DB 69 DA 6A                  dw      R_TO, OVER, STORE
 730+ 72CF BF 6B
 731+ 72D1 92 6A 1A 6D                  dw      CELL_MINUS, ZERO
 732+ 72D5 12 6B BF 6B                  dw      SWAP, STORE
 733+ 72D9 99 69                        dw      EXIT                    // ;
 734+ 72DB
 735+ 72DB              //  ______________________________________________________________________
 736+ 72DB              //
 737+ 72DB              // -trailing    a n1 -- a n2
 738+ 72DB              // Assumes that an n1 bytes-long string is stored at address a
 739+ 72DB              // and the string contains a space delimited word,
 740+ 72DB              // Finds n2 as the position of the first character after the word.
 741+ 72DB                              Colon_Def LTRAILING, "-TRAILING", is_normal
 741+ 72DB             >                New_Def  LTRAILING, "-TRAILING", Enter_Ptr, is_normal ; ok
 741+ 72DB             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 741+ 72DB             >
 741+ 72DB             >                // dummy db directives used to calculate length of namec
 741+ 72DB 2D 54 52 41 >                db      "-TRAILING"
 741+ 72DF 49 4C 49 4E >
 741+ 72E3 47          >
 741+ 72E4             >len_NFA         defl    $ - temp_NFA
 741+ 72E4             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 741+ 72DB             >
 741+ 72DB 89          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 741+ 72DC 2D 54 52 41 >                db      "-TRAILING"               // name string in 7-bit ascii, but
 741+ 72E0 49 4C 49 4E >
 741+ 72E4 47          >
 741+ 72E5             >                org     $-1                 // alter last byte of Name just above to set
 741+ 72E4 C7          >                db      {b $} | END_BIT     // msb as name end
 741+ 72E5             >
 741+ 72E5 97 72       >                dw      last_NFA            // Link to previous definition Name
 741+ 72E7             >LTRAILING:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 741+ 72E7 9D 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 741+ 72E9             >                else
 741+ 72E9 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 741+ 72E9             >                endif           ; ok        // for other definitions it "points" the correct handler
 741+ 72E9             >                // Use of "; ok" to suppress "warning[fwdref]"
 741+ 72E9             >
 741+ 72E9             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 742+ 72E9 1F 6B 1A 6D                  dw      DUP, ZERO               // dup 0
 743+ 72ED                                                              // do
 744+ 72ED 42 64                        dw      C_Q_DO
 745+ 72EF 20 00                        dw      LTrailing_Leave - $
 746+ 72F1              LTrailing_Loop:
 747+ 72F1 80 6B 3F 6A                  dw          TWO_DUP, PLUS       //      2dup +
 748+ 72F5 6C 6A                        dw          ONE_SUBTRACT        //      1-
 749+ 72F7 CD 6B                        dw          CFETCH              //      c@
 750+ 72F9 44 6D 4C 6F                  dw          BL, SUBTRACT        //      bl -
 751+ 72FD                                                              //      if
 752+ 72FD E3 63                        dw          ZBRANCH
 753+ 72FF 0A 00                        dw          LTrailing_Else - $
 754+ 7301 B1 69                        dw              C_LEAVE         //          leave
 755+ 7303 0C 00                        dw              LTrailing_Leave - $
 756+ 7305 CC 63                        dw          BRANCH              //      else
 757+ 7307 04 00                        dw          LTrailing_Endif - $
 758+ 7309              LTrailing_Else:
 759+ 7309 6C 6A                        dw              ONE_SUBTRACT    //          1-
 760+ 730B              LTrailing_Endif:                                //      endif
 761+ 730B                                                              // loop
 762+ 730B 31 64                        dw      C_LOOP
 763+ 730D E4 FF                        dw      LTrailing_Loop - $
 764+ 730F              LTrailing_Leave:
 765+ 730F 99 69                        dw      EXIT                    // ;
 766+ 7311
 767+ 7311              //  ______________________________________________________________________
 768+ 7311              //
 769+ 7311              // accept       a n1 -- n2
 770+ 7311              // Accepts at most n1 characters from terminal and stores them at address a
 771+ 7311              // CR stops input. A 'nul' is added as trailer.
 772+ 7311              // n2 is the string length. n2 is kept in span user variable also.
 773+ 7311                              Colon_Def ACCEPT, "ACCEPT", is_normal
 773+ 7311             >                New_Def  ACCEPT, "ACCEPT", Enter_Ptr, is_normal ; ok
 773+ 7311             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 773+ 7311             >
 773+ 7311             >                // dummy db directives used to calculate length of namec
 773+ 7311 41 43 43 45 >                db      "ACCEPT"
 773+ 7315 50 54       >
 773+ 7317             >len_NFA         defl    $ - temp_NFA
 773+ 7317             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 773+ 7311             >
 773+ 7311 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 773+ 7312 41 43 43 45 >                db      "ACCEPT"               // name string in 7-bit ascii, but
 773+ 7316 50 54       >
 773+ 7318             >                org     $-1                 // alter last byte of Name just above to set
 773+ 7317 D4          >                db      {b $} | END_BIT     // msb as name end
 773+ 7318             >
 773+ 7318 DB 72       >                dw      last_NFA            // Link to previous definition Name
 773+ 731A             >ACCEPT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 773+ 731A 9D 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 773+ 731C             >                else
 773+ 731C ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 773+ 731C             >                endif           ; ok        // for other definitions it "points" the correct handler
 773+ 731C             >                // Use of "; ok" to suppress "warning[fwdref]"
 773+ 731C             >
 773+ 731C             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 774+ 731C DA 6A 3F 6A                  dw      OVER, PLUS, OVER        //                      ( a  n1+a  a )
 774+ 7320 DA 6A
 775+ 7322 1A 6D 3C 6B                  dw      ZERO, DASH_ROT          //                      ( a  0     a+n1  a )
 776+ 7326                                                              // do
 777+ 7326 42 64                        dw      C_Q_DO
 778+ 7328 8A 00                        dw      Accept_Leave - $
 779+ 732A              Accept_Loop:
 780+ 732A EA 6A 98 66                  dw          DROP, KEY           //      drop key        ( a  c )
 781+ 732E 1F 6B                        dw          DUP                 //      dup             ( a  c  c )
 782+ 7330 A9 63 0E 00                  dw          LIT, $0E            //      0E
 783+ 7334 80 6D                        dw          PLUS_ORIGIN         //      +origin
 784+ 7336 B2 6B                        dw          FETCH               //      @               ( a  c  c  del )
 785+ 7338 5A 6F                        dw          EQUALS              //      =               ( a  c  c==del )
 786+ 733A                                                              //      if
 787+ 733A E3 63                        dw          ZBRANCH
 788+ 733C 2C 00                        dw          Accept_Else_0 - $
 789+ 733E EA 6A                        dw              DROP            //          drop        ( a  )
 790+ 7340 1F 6B 7B 64                  dw              DUP, I, EQUALS  //          dup i =     ( a  a==i )
 790+ 7344 5A 6F
 791+ 7346 22 6D 29 69                  dw              ONE, AND_OP     //          1 and
 792+ 734A 1F 6B                        dw              DUP             //          dup         ( a  a==i  a==i )
 793+ 734C DB 69                        dw              R_TO            //          r> 2 - + r>
 794+ 734E 9F 6A 3F 6A                  dw              TWO_MINUS, PLUS //      ( decrement index by 1 or 2 )
 795+ 7352 C7 69                        dw              TO_R            //
 796+ 7354                                                              //          if
 797+ 7354 E3 63                        dw              ZBRANCH
 798+ 7356 0A 00                        dw              Accept_Else_1 - $
 799+ 7358 A9 63 07 00                  dw                  LIT, 7      //              7       ( a  7 )
 800+ 735C                                                              //          else
 801+ 735C CC 63                        dw              BRANCH
 802+ 735E 06 00                        dw              Accept_Endif_1 - $
 803+ 7360              Accept_Else_1:
 804+ 7360 A9 63 08 00                  dw                  LIT, 8      //              8       ( a  8 )
 805+ 7364              Accept_Endif_1:                                 //          endif
 806+ 7364 CC 63                        dw          BRANCH
 807+ 7366 2E 00                        dw          Accept_Endif_0 - $
 808+ 7368              Accept_Else_0:                                  //      else
 809+ 7368 1F 6B                        dw              DUP             //          dup         ( a  c  c )
 810+ 736A A9 63 0D 00                  dw              LIT, 13         //          13
 811+ 736E 5A 6F                        dw              EQUALS          //          =           ( a  c  c==CR )
 812+ 7370                                                              //          if
 813+ 7370 E3 63                        dw              ZBRANCH
 814+ 7372 0C 00                        dw              Accept_Else_2 - $
 815+ 7374 EA 6A 44 6D                  dw                  DROP, BL    //              drop bl ( a  bl )
 816+ 7378 1A 6D                        dw                  ZERO        //              0       ( a  c  0 )
 817+ 737A                                                              //          else
 818+ 737A CC 63                        dw              BRANCH
 819+ 737C 04 00                        dw              Accept_Endif_2 - $
 820+ 737E              Accept_Else_2:
 821+ 737E 1F 6B                        dw                  DUP         //              dup     ( a  c  c )
 822+ 7380                                                              //          endif
 823+ 7380              Accept_Endif_2:
 824+ 7380 7B 64 DB 6B                  dw              I, CSTORE       //          i           ( a  c )
 825+ 7384 1F 6B 44 6D                  dw              DUP, BL, LESS   //          dup bl <    ( a  c  c<BL )
 825+ 7388 7B 6F
 826+ 738A                                                              //          if
 827+ 738A E3 63                        dw              ZBRANCH
 828+ 738C 08 00                        dw              Accept_Endif_3 - $
 829+ 738E DB 69                        dw                  R_TO        //              r>
 830+ 7390 6C 6A                        dw                  ONE_SUBTRACT//              1-
 831+ 7392 C7 69                        dw                  TO_R        //              >r
 832+ 7394                                                              //          endif
 833+ 7394              Accept_Endif_3:
 834+ 7394              Accept_Endif_0:                                 //      endif
 835+ 7394 ED 6F                        dw          EMIT                //      emit
 836+ 7396 1A 6D 7B 64                  dw          ZERO, I, ONE_PLUS   //      0 i 1+ !
 836+ 739A 60 6A
 837+ 739C BF 6B                        dw          STORE               //          ( zero pad )
 838+ 739E 7B 64                        dw          I                   //      i
 839+ 73A0 7B 64 CD 6B                  dw          I, CFETCH, ZEQUAL   //      i 0= if
 839+ 73A4 FC 69
 840+ 73A6 E3 63                        dw          ZBRANCH             //
 841+ 73A8 06 00                        dw              Accept_Endif_4 - $
 842+ 73AA B1 69                        dw                  C_LEAVE     //              leave
 843+ 73AC 06 00                        dw                  Accept_Leave - $
 844+ 73AE              Accept_Endif_4:                                 //      endif
 845+ 73AE                                                              // loop
 846+ 73AE 31 64                        dw      C_LOOP
 847+ 73B0 7A FF                        dw      Accept_Loop - $
 848+ 73B2              Accept_Leave:
 849+ 73B2 12 6B 4C 6F                  dw      SWAP, SUBTRACT          // swap -
 850+ 73B6 60 6A                        dw      ONE_PLUS                // 1+
 851+ 73B8 1F 6B DA 6E                  dw      DUP, SPAN, STORE        // dup span !
 851+ 73BC BF 6B
 852+ 73BE 99 69                        dw      EXIT                    // ;
 853+ 73C0
 854+ 73C0              //  ______________________________________________________________________
 855+ 73C0              //
 856+ 73C0              // expect      a n --
 857+ 73C0              // Accepts at most n1 characters from terminal and stores them at address a
 858+ 73C0              // CR stops input. A 'nul' is added as trailer.
 859+ 73C0              // n2 is the string length. n2 is kept in span user variable also.
 860+ 73C0              //              Colon_Def EXPECT, "EXPECT", is_normal
 861+ 73C0              //              dw      ACCEPT, DROP            // accept drop
 862+ 73C0              //              dw      EXIT                    // ;
 863+ 73C0
 864+ 73C0              //  ______________________________________________________________________
 865+ 73C0              //
 866+ 73C0              // query        --
 867+ 73C0              // Accept at most 80 character from console. CR stops.
 868+ 73C0              // Text is stored in TIB. Variable IN is zeroed.
 869+ 73C0                              Colon_Def QUERY, "QUERY", is_normal
 869+ 73C0             >                New_Def  QUERY, "QUERY", Enter_Ptr, is_normal ; ok
 869+ 73C0             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 869+ 73C0             >
 869+ 73C0             >                // dummy db directives used to calculate length of namec
 869+ 73C0 51 55 45 52 >                db      "QUERY"
 869+ 73C4 59          >
 869+ 73C5             >len_NFA         defl    $ - temp_NFA
 869+ 73C5             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 869+ 73C0             >
 869+ 73C0 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 869+ 73C1 51 55 45 52 >                db      "QUERY"               // name string in 7-bit ascii, but
 869+ 73C5 59          >
 869+ 73C6             >                org     $-1                 // alter last byte of Name just above to set
 869+ 73C5 D9          >                db      {b $} | END_BIT     // msb as name end
 869+ 73C6             >
 869+ 73C6 11 73       >                dw      last_NFA            // Link to previous definition Name
 869+ 73C8             >QUERY:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 869+ 73C8 9D 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 869+ 73CA             >                else
 869+ 73CA ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 869+ 73CA             >                endif           ; ok        // for other definitions it "points" the correct handler
 869+ 73CA             >                // Use of "; ok" to suppress "warning[fwdref]"
 869+ 73CA             >
 869+ 73CA             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 870+ 73CA AD 6D B2 6B                  dw      TIB, FETCH              // tib @
 871+ 73CE A9 63 50 00                  dw      LIT, 80                 // 80
 872+ 73D2 1A 73 EA 6A                  dw      ACCEPT, DROP            // accept drop
 873+ 73D6 1A 6D 22 6E                  dw      ZERO, TO_IN, STORE      // 0 >in !
 873+ 73DA BF 6B
 874+ 73DC 99 69                        dw      EXIT                    // ;
 875+ 73DE
 876+ 73DE              //  ______________________________________________________________________
 877+ 73DE              //
 878+ 73DE              // fill        a n c --
 879+ 73DE              // If n > 0, fills n locations starting from address a with the value c.
 880+ 73DE                              New_Def FILL, "FILL", is_code, is_normal
 880+ 73DE             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 880+ 73DE             >
 880+ 73DE             >                // dummy db directives used to calculate length of namec
 880+ 73DE 46 49 4C 4C >                db      "FILL"
 880+ 73E2             >len_NFA         defl    $ - temp_NFA
 880+ 73E2             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 880+ 73DE             >
 880+ 73DE 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 880+ 73DF 46 49 4C 4C >                db      "FILL"               // name string in 7-bit ascii, but
 880+ 73E3             >                org     $-1                 // alter last byte of Name just above to set
 880+ 73E2 CC          >                db      {b $} | END_BIT     // msb as name end
 880+ 73E3             >
 880+ 73E3 C0 73       >                dw      last_NFA            // Link to previous definition Name
 880+ 73E5             >FILL:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 880+ 73E5 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
 880+ 73E5             >                else
 880+ 73E5 E7 73       >                dw      $ + 2   ; ok        // is pointed by CFA
 880+ 73E7             >                endif           ; ok        // for other definitions it "points" the correct handler
 880+ 73E7             >                // Use of "; ok" to suppress "warning[fwdref]"
 880+ 73E7             >
 880+ 73E7             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 881+ 73E7 D9                           exx
 882+ 73E8 D1                           pop     de                  // de has character
 883+ 73E9 C1                           pop     bc                  // bc has counter
 884+ 73EA E1                           pop     hl                  // hl has address, save Instruction Pointer
 885+ 73EB              Fill_Loop:
 886+ 73EB 78                               ld      a, b
 887+ 73EC B1                               or      c
 888+ 73ED 28 05                        jr      z, Fill_While_End
 889+ 73EF 73                               ld      (hl), e
 890+ 73F0 0B                               dec     bc
 891+ 73F1 23                               inc     hl
 892+ 73F2 18 F7                        jr      Fill_Loop
 893+ 73F4              Fill_While_End:
 894+ 73F4 D9                           exx
 895+ 73F5
 896+ 73F5                              next
 896+ 73F5 DD E9       >                jp      (ix)
 897+ 73F7
 898+ 73F7              //  ______________________________________________________________________
 899+ 73F7              //
 900+ 73F7              // erase        a n --
 901+ 73F7              // If n > 0, fills n locations starting from address a with 'nul' characters.
 902+ 73F7                              Colon_Def ERASE, "ERASE", is_normal
 902+ 73F7             >                New_Def  ERASE, "ERASE", Enter_Ptr, is_normal ; ok
 902+ 73F7             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 902+ 73F7             >
 902+ 73F7             >                // dummy db directives used to calculate length of namec
 902+ 73F7 45 52 41 53 >                db      "ERASE"
 902+ 73FB 45          >
 902+ 73FC             >len_NFA         defl    $ - temp_NFA
 902+ 73FC             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 902+ 73F7             >
 902+ 73F7 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 902+ 73F8 45 52 41 53 >                db      "ERASE"               // name string in 7-bit ascii, but
 902+ 73FC 45          >
 902+ 73FD             >                org     $-1                 // alter last byte of Name just above to set
 902+ 73FC C5          >                db      {b $} | END_BIT     // msb as name end
 902+ 73FD             >
 902+ 73FD DE 73       >                dw      last_NFA            // Link to previous definition Name
 902+ 73FF             >ERASE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 902+ 73FF 9D 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 902+ 7401             >                else
 902+ 7401 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 902+ 7401             >                endif           ; ok        // for other definitions it "points" the correct handler
 902+ 7401             >                // Use of "; ok" to suppress "warning[fwdref]"
 902+ 7401             >
 902+ 7401             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 903+ 7401 1A 6D E5 73                  dw      ZERO, FILL              // 0 fill
 904+ 7405 99 69                        dw      EXIT                    // ;
 905+ 7407
 906+ 7407              //  ______________________________________________________________________
 907+ 7407              //
 908+ 7407              // blanks       a n --
 909+ 7407              // If n > 0, fills n locations starting from address a with 'nul' characters.
 910+ 7407                              Colon_Def BLANKS, "BLANKS", is_normal
 910+ 7407             >                New_Def  BLANKS, "BLANKS", Enter_Ptr, is_normal ; ok
 910+ 7407             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 910+ 7407             >
 910+ 7407             >                // dummy db directives used to calculate length of namec
 910+ 7407 42 4C 41 4E >                db      "BLANKS"
 910+ 740B 4B 53       >
 910+ 740D             >len_NFA         defl    $ - temp_NFA
 910+ 740D             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 910+ 7407             >
 910+ 7407 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 910+ 7408 42 4C 41 4E >                db      "BLANKS"               // name string in 7-bit ascii, but
 910+ 740C 4B 53       >
 910+ 740E             >                org     $-1                 // alter last byte of Name just above to set
 910+ 740D D3          >                db      {b $} | END_BIT     // msb as name end
 910+ 740E             >
 910+ 740E F7 73       >                dw      last_NFA            // Link to previous definition Name
 910+ 7410             >BLANKS:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 910+ 7410 9D 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 910+ 7412             >                else
 910+ 7412 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 910+ 7412             >                endif           ; ok        // for other definitions it "points" the correct handler
 910+ 7412             >                // Use of "; ok" to suppress "warning[fwdref]"
 910+ 7412             >
 910+ 7412             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 911+ 7412 44 6D E5 73                  dw      BL, FILL                // bl fill
 912+ 7416 99 69                        dw      EXIT                    // ;
 913+ 7418
 914+ 7418              //  ______________________________________________________________________
 915+ 7418              //
 916+ 7418              // hold         c --
 917+ 7418              // Used between <# and #> to insert a character c in numeric formatting.
 918+ 7418                              Colon_Def HOLD, "HOLD", is_normal
 918+ 7418             >                New_Def  HOLD, "HOLD", Enter_Ptr, is_normal ; ok
 918+ 7418             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 918+ 7418             >
 918+ 7418             >                // dummy db directives used to calculate length of namec
 918+ 7418 48 4F 4C 44 >                db      "HOLD"
 918+ 741C             >len_NFA         defl    $ - temp_NFA
 918+ 741C             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 918+ 7418             >
 918+ 7418 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 918+ 7419 48 4F 4C 44 >                db      "HOLD"               // name string in 7-bit ascii, but
 918+ 741D             >                org     $-1                 // alter last byte of Name just above to set
 918+ 741C C4          >                db      {b $} | END_BIT     // msb as name end
 918+ 741D             >
 918+ 741D 07 74       >                dw      last_NFA            // Link to previous definition Name
 918+ 741F             >HOLD:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 918+ 741F 9D 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 918+ 7421             >                else
 918+ 7421 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 918+ 7421             >                endif           ; ok        // for other definitions it "points" the correct handler
 918+ 7421             >                // Use of "; ok" to suppress "warning[fwdref]"
 918+ 7421             >
 918+ 7421             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 919+ 7421 3B 6D                        dw      NEG_ONE                 // -1
 920+ 7423 9B 6E 8F 6B                  dw      HLD, PLUSSTORE          // hld +!
 921+ 7427 9B 6E B2 6B                  dw      HLD, FETCH, CSTORE      // hld @ c!
 921+ 742B DB 6B
 922+ 742D 99 69                        dw      EXIT                    // ;
 923+ 742F
 924+ 742F              //  ______________________________________________________________________
 925+ 742F              //
 926+ 742F              // pad         -- a
 927+ 742F              // leaves the buffer text address. This is at a fixed distance over HERE.
 928+ 742F                              Colon_Def PAD, "PAD", is_normal
 928+ 742F             >                New_Def  PAD, "PAD", Enter_Ptr, is_normal ; ok
 928+ 742F             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 928+ 742F             >
 928+ 742F             >                // dummy db directives used to calculate length of namec
 928+ 742F 50 41 44    >                db      "PAD"
 928+ 7432             >len_NFA         defl    $ - temp_NFA
 928+ 7432             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 928+ 742F             >
 928+ 742F 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 928+ 7430 50 41 44    >                db      "PAD"               // name string in 7-bit ascii, but
 928+ 7433             >                org     $-1                 // alter last byte of Name just above to set
 928+ 7432 C4          >                db      {b $} | END_BIT     // msb as name end
 928+ 7433             >
 928+ 7433 18 74       >                dw      last_NFA            // Link to previous definition Name
 928+ 7435             >PAD:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 928+ 7435 9D 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 928+ 7437             >                else
 928+ 7437 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 928+ 7437             >                endif           ; ok        // for other definitions it "points" the correct handler
 928+ 7437             >                // Use of "; ok" to suppress "warning[fwdref]"
 928+ 7437             >
 928+ 7437             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 929+ 7437 F9 6E                        dw      HERE                    // here
 930+ 7439 A9 63 44 00                  dw      LIT, 68                 // 68
 931+ 743D 3F 6A                        dw      PLUS                    // +
 932+ 743F 99 69                        dw      EXIT                    // ;
 933+ 7441
 934+ 7441              //  ______________________________________________________________________
 935+ 7441              //
 936+ 7441              // word         c -- a
 937+ 7441              // reads characters from input streams until it encouners a c delimiter.
 938+ 7441              // Stores that packet so it starts from HERE
 939+ 7441              // WORD leaves a counter as first byte and ends the packet with two spaces.
 940+ 7441              // Other occurrences of c are ignored.
 941+ 7441              // If BLK is zero, text is taken from terminal buffer TIB.
 942+ 7441              // Otherwise text is taken from the disk-block given by BLK.
 943+ 7441              // "in" variable is incremented of the number of character read.
 944+ 7441              // The number of characters read is given by ENCLOSE.
 945+ 7441                              Colon_Def WORD, "WORD", is_normal
 945+ 7441             >                New_Def  WORD, "WORD", Enter_Ptr, is_normal ; ok
 945+ 7441             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 945+ 7441             >
 945+ 7441             >                // dummy db directives used to calculate length of namec
 945+ 7441 57 4F 52 44 >                db      "WORD"
 945+ 7445             >len_NFA         defl    $ - temp_NFA
 945+ 7445             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 945+ 7441             >
 945+ 7441 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 945+ 7442 57 4F 52 44 >                db      "WORD"               // name string in 7-bit ascii, but
 945+ 7446             >                org     $-1                 // alter last byte of Name just above to set
 945+ 7445 C4          >                db      {b $} | END_BIT     // msb as name end
 945+ 7446             >
 945+ 7446 2F 74       >                dw      last_NFA            // Link to previous definition Name
 945+ 7448             >WORD:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 945+ 7448 9D 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 945+ 744A             >                else
 945+ 744A ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 945+ 744A             >                endif           ; ok        // for other definitions it "points" the correct handler
 945+ 744A             >                // Use of "; ok" to suppress "warning[fwdref]"
 945+ 744A             >
 945+ 744A             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 946+ 744A 19 6E B2 6B                  dw      BLK, FETCH              // blk @
 947+ 744E                                                              // if
 948+ 744E E3 63                        dw      ZBRANCH
 949+ 7450 0C 00                        dw      Word_Else - $
 950+ 7452 19 6E B2 6B                  dw          BLK, FETCH          //      blk @
 951+ 7456 9B 7D                        dw          BLOCK               //      block ( forward )
 952+ 7458                                                              // else
 953+ 7458 CC 63                        dw      BRANCH
 954+ 745A 06 00                        dw      Word_Endif - $
 955+ 745C              Word_Else:
 956+ 745C AD 6D B2 6B                  dw         TIB, FETCH           //      tib @
 957+ 7460              Word_Endif:                                     // endif
 958+ 7460 22 6E B2 6B                  dw      TO_IN, FETCH, PLUS      // >in @ +
 958+ 7464 3F 6A
 959+ 7466 12 6B 69 65                  dw      SWAP, ENCLOSE           // swap enclose
 960+ 746A F9 6E A9 63                  dw      HERE, LIT, 34, BLANKS   // here 34 blanks
 960+ 746E 22 00 10 74
 961+ 7472 22 6E 8F 6B                  dw      TO_IN, PLUSSTORE        // >in @ +
 962+ 7476 DA 6A 4C 6F                  dw      OVER, SUBTRACT, TO_R    // over - >r
 962+ 747A C7 69
 963+ 747C EF 69 F9 6E                  dw      R_OP, HERE, CSTORE      // r here c!
 963+ 7480 DB 6B
 964+ 7482 3F 6A                        dw      PLUS                    // +
 965+ 7484 F9 6E 60 6A                  dw      HERE, ONE_PLUS, R_TO    // here 1+ r>
 965+ 7488 DB 69
 966+ 748A 89 68                        dw      CMOVE                   // cmove
 967+ 748C F9 6E                        dw      HERE                    // here
 968+ 748E 99 69                        dw      EXIT                    // ;
 969+ 7490
 970+ 7490              //  ______________________________________________________________________
 971+ 7490              //
 972+ 7490              // (.")         --
 973+ 7490              // Direct procedure compiled by ." and  .(  It executes TYPE.
 974+ 7490                              Colon_Def C_DOT_QUOTE, '(.")', is_normal
 974+ 7490             >                New_Def  C_DOT_QUOTE, '(.")', Enter_Ptr, is_normal ; ok
 974+ 7490             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 974+ 7490             >
 974+ 7490             >                // dummy db directives used to calculate length of namec
 974+ 7490 28 2E 22 29 >                db      '(.")'
 974+ 7494             >len_NFA         defl    $ - temp_NFA
 974+ 7494             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 974+ 7490             >
 974+ 7490 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 974+ 7491 28 2E 22 29 >                db      '(.")'               // name string in 7-bit ascii, but
 974+ 7495             >                org     $-1                 // alter last byte of Name just above to set
 974+ 7494 A9          >                db      {b $} | END_BIT     // msb as name end
 974+ 7495             >
 974+ 7495 41 74       >                dw      last_NFA            // Link to previous definition Name
 974+ 7497             >C_DOT_QUOTE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 974+ 7497 9D 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 974+ 7499             >                else
 974+ 7499 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 974+ 7499             >                endif           ; ok        // for other definitions it "points" the correct handler
 974+ 7499             >                // Use of "; ok" to suppress "warning[fwdref]"
 974+ 7499             >
 974+ 7499             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 975+ 7499 EF 69 5D 72                  dw      R_OP, COUNT             // r count
 976+ 749D 1F 6B 60 6A                  dw      DUP, ONE_PLUS           // dup 1+
 977+ 74A1 DB 69 3F 6A                  dw      R_TO, PLUS, TO_R        // r> + >r  ( advance IP )
 977+ 74A5 C7 69
 978+ 74A7 83 72                        dw      TYPE                    // type
 979+ 74A9 99 69                        dw      EXIT                    // ;
 980+ 74AB
 981+ 74AB              //  ______________________________________________________________________
 982+ 74AB              //
 983+ 74AB              // char         -- c
 984+ 74AB              // get first character from next input word
 985+ 74AB                              Colon_Def CHAR,  "CHAR", is_normal
 985+ 74AB             >                New_Def  CHAR, "CHAR", Enter_Ptr, is_normal ; ok
 985+ 74AB             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 985+ 74AB             >
 985+ 74AB             >                // dummy db directives used to calculate length of namec
 985+ 74AB 43 48 41 52 >                db      "CHAR"
 985+ 74AF             >len_NFA         defl    $ - temp_NFA
 985+ 74AF             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 985+ 74AB             >
 985+ 74AB 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 985+ 74AC 43 48 41 52 >                db      "CHAR"               // name string in 7-bit ascii, but
 985+ 74B0             >                org     $-1                 // alter last byte of Name just above to set
 985+ 74AF D2          >                db      {b $} | END_BIT     // msb as name end
 985+ 74B0             >
 985+ 74B0 90 74       >                dw      last_NFA            // Link to previous definition Name
 985+ 74B2             >CHAR:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 985+ 74B2 9D 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 985+ 74B4             >                else
 985+ 74B4 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 985+ 74B4             >                endif           ; ok        // for other definitions it "points" the correct handler
 985+ 74B4             >                // Use of "; ok" to suppress "warning[fwdref]"
 985+ 74B4             >
 985+ 74B4             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 986+ 74B4 44 6D 48 74                  dw      BL, WORD                // bl word
 987+ 74B8 60 6A CD 6B                  dw      ONE_PLUS, CFETCH        // 1+ c@
 988+ 74BC 99 69                        dw      EXIT                    // ;
 989+ 74BE
 990+ 74BE              //  ______________________________________________________________________
 991+ 74BE              //
 992+ 74BE              // ,"           --
 993+ 74BE              // compiles a string terminated by " as a counted string from next input stream
 994+ 74BE                              Colon_Def COMMA_QUOTE,  ',"', is_normal
 994+ 74BE             >                New_Def  COMMA_QUOTE, ',"', Enter_Ptr, is_normal ; ok
 994+ 74BE             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 994+ 74BE             >
 994+ 74BE             >                // dummy db directives used to calculate length of namec
 994+ 74BE 2C 22       >                db      ',"'
 994+ 74C0             >len_NFA         defl    $ - temp_NFA
 994+ 74C0             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 994+ 74BE             >
 994+ 74BE 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 994+ 74BF 2C 22       >                db      ',"'               // name string in 7-bit ascii, but
 994+ 74C1             >                org     $-1                 // alter last byte of Name just above to set
 994+ 74C0 A2          >                db      {b $} | END_BIT     // msb as name end
 994+ 74C1             >
 994+ 74C1 AB 74       >                dw      last_NFA            // Link to previous definition Name
 994+ 74C3             >COMMA_QUOTE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 994+ 74C3 9D 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 994+ 74C5             >                else
 994+ 74C5 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 994+ 74C5             >                endif           ; ok        // for other definitions it "points" the correct handler
 994+ 74C5             >                // Use of "; ok" to suppress "warning[fwdref]"
 994+ 74C5             >
 994+ 74C5             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 995+ 74C5 A9 63 22 00                  dw      LIT, DQUOTE_CHAR        // [char] "
 996+ 74C9 48 74                        dw      WORD                    // word
 997+ 74CB CD 6B 60 6A                  dw      CFETCH, ONE_PLUS        // c@ 1+
 998+ 74CF 09 6F                        dw      ALLOT                   // allot
 999+ 74D1 1A 6D 26 6F                  dw      ZERO, CCOMMA            // 0 c,  ( nul-terminated string - useful anyway )
1000+ 74D5 99 69                        dw      EXIT
1001+ 74D7
1002+ 74D7              //  ______________________________________________________________________
1003+ 74D7              //
1004+ 74D7              // .c           c --
1005+ 74D7              // intermediate general purpose string builder, used by ." and .(
1006+ 74D7                              Colon_Def DOT_C,  ".C", is_immediate
1006+ 74D7             >                New_Def  DOT_C, ".C", Enter_Ptr, is_immediate ; ok
1006+ 74D7             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1006+ 74D7             >
1006+ 74D7             >                // dummy db directives used to calculate length of namec
1006+ 74D7 2E 43       >                db      ".C"
1006+ 74D9             >len_NFA         defl    $ - temp_NFA
1006+ 74D9             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1006+ 74D7             >
1006+ 74D7 C2          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
1006+ 74D8 2E 43       >                db      ".C"               // name string in 7-bit ascii, but
1006+ 74DA             >                org     $-1                 // alter last byte of Name just above to set
1006+ 74D9 C3          >                db      {b $} | END_BIT     // msb as name end
1006+ 74DA             >
1006+ 74DA BE 74       >                dw      last_NFA            // Link to previous definition Name
1006+ 74DC             >DOT_C:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1006+ 74DC 9D 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
1006+ 74DE             >                else
1006+ 74DE ~           >                dw      $ + 2   ; ok        // is pointed by CFA
1006+ 74DE             >                endif           ; ok        // for other definitions it "points" the correct handler
1006+ 74DE             >                // Use of "; ok" to suppress "warning[fwdref]"
1006+ 74DE             >
1006+ 74DE             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1007+ 74DE 65 6E B2 6B                  dw      STATE, FETCH            // state @
1008+ 74E2                                                              // if
1009+ 74E2 E3 63                        dw      ZBRANCH
1010+ 74E4 12 00                        dw      Dot_C_Else - $
1011+ 74E6 56 71 97 74                  dw          COMPILE, C_DOT_QUOTE //     compile (.")
1012+ 74EA 48 74 CD 6B                  dw          WORD, CFETCH        //      word c@
1013+ 74EE 60 6A 09 6F                  dw          ONE_PLUS, ALLOT     //      1+ allot
1014+ 74F2                                                              // else
1015+ 74F2 CC 63                        dw      BRANCH
1016+ 74F4 08 00                        dw      Dot_C_Endif - $
1017+ 74F6              Dot_C_Else:
1018+ 74F6 48 74 5D 72                  dw          WORD, COUNT, TYPE   //      word count type
1018+ 74FA 83 72
1019+ 74FC              Dot_C_Endif:                                    // endif
1020+ 74FC 99 69                        dw      EXIT                    ;
1021+ 74FE
1022+ 74FE              //  ______________________________________________________________________
1023+ 74FE              //
1024+ 74FE              // ."           c --
1025+ 74FE                              Colon_Def DOT_QUOTE,  '."', is_immediate
1025+ 74FE             >                New_Def  DOT_QUOTE, '."', Enter_Ptr, is_immediate ; ok
1025+ 74FE             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1025+ 74FE             >
1025+ 74FE             >                // dummy db directives used to calculate length of namec
1025+ 74FE 2E 22       >                db      '."'
1025+ 7500             >len_NFA         defl    $ - temp_NFA
1025+ 7500             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1025+ 74FE             >
1025+ 74FE C2          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
1025+ 74FF 2E 22       >                db      '."'               // name string in 7-bit ascii, but
1025+ 7501             >                org     $-1                 // alter last byte of Name just above to set
1025+ 7500 A2          >                db      {b $} | END_BIT     // msb as name end
1025+ 7501             >
1025+ 7501 D7 74       >                dw      last_NFA            // Link to previous definition Name
1025+ 7503             >DOT_QUOTE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1025+ 7503 9D 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
1025+ 7505             >                else
1025+ 7505 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
1025+ 7505             >                endif           ; ok        // for other definitions it "points" the correct handler
1025+ 7505             >                // Use of "; ok" to suppress "warning[fwdref]"
1025+ 7505             >
1025+ 7505             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1026+ 7505 A9 63 22 00                  dw      LIT, DQUOTE_CHAR        // [char] "
1027+ 7509 DC 74                        dw      DOT_C                   // [compile] .c
1028+ 750B 99 69                        dw      EXIT                    // ; immediate
1029+ 750D
1030+ 750D              //  ______________________________________________________________________
1031+ 750D              //
1032+ 750D              // .(           c --
1033+ 750D                              Colon_Def DOT_BRACKET,  ".(", is_immediate
1033+ 750D             >                New_Def  DOT_BRACKET, ".(", Enter_Ptr, is_immediate ; ok
1033+ 750D             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1033+ 750D             >
1033+ 750D             >                // dummy db directives used to calculate length of namec
1033+ 750D 2E 28       >                db      ".("
1033+ 750F             >len_NFA         defl    $ - temp_NFA
1033+ 750F             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1033+ 750D             >
1033+ 750D C2          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
1033+ 750E 2E 28       >                db      ".("               // name string in 7-bit ascii, but
1033+ 7510             >                org     $-1                 // alter last byte of Name just above to set
1033+ 750F A8          >                db      {b $} | END_BIT     // msb as name end
1033+ 7510             >
1033+ 7510 FE 74       >                dw      last_NFA            // Link to previous definition Name
1033+ 7512             >DOT_BRACKET:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1033+ 7512 9D 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
1033+ 7514             >                else
1033+ 7514 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
1033+ 7514             >                endif           ; ok        // for other definitions it "points" the correct handler
1033+ 7514             >                // Use of "; ok" to suppress "warning[fwdref]"
1033+ 7514             >
1033+ 7514             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1034+ 7514 A9 63 29 00                  dw      LIT, ")"                // [char] )
1035+ 7518 DC 74                        dw      DOT_C                   // [compile] .c
1036+ 751A 99 69                        dw      EXIT                    // ; immediate
1037+ 751C
1038+ 751C              //  ______________________________________________________________________
1039+ 751C              //
1040+ 751C              // (sgn)        a -- a f
1041+ 751C              // determines if char in addr a is a sign (+ or -), and in that case increments
1042+ 751C              // a flag. Returns f as the sign, true for negative, false for positive.
1043+ 751C              // called by NUMBER and (EXP)
1044+ 751C                              Colon_Def CSGN,  "(SGN)", is_normal
1044+ 751C             >                New_Def  CSGN, "(SGN)", Enter_Ptr, is_normal ; ok
1044+ 751C             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1044+ 751C             >
1044+ 751C             >                // dummy db directives used to calculate length of namec
1044+ 751C 28 53 47 4E >                db      "(SGN)"
1044+ 7520 29          >
1044+ 7521             >len_NFA         defl    $ - temp_NFA
1044+ 7521             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1044+ 751C             >
1044+ 751C 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1044+ 751D 28 53 47 4E >                db      "(SGN)"               // name string in 7-bit ascii, but
1044+ 7521 29          >
1044+ 7522             >                org     $-1                 // alter last byte of Name just above to set
1044+ 7521 A9          >                db      {b $} | END_BIT     // msb as name end
1044+ 7522             >
1044+ 7522 0D 75       >                dw      last_NFA            // Link to previous definition Name
1044+ 7524             >CSGN:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1044+ 7524 9D 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
1044+ 7526             >                else
1044+ 7526 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
1044+ 7526             >                endif           ; ok        // for other definitions it "points" the correct handler
1044+ 7526             >                // Use of "; ok" to suppress "warning[fwdref]"
1044+ 7526             >
1044+ 7526             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1045+ 7526 1F 6B 60 6A                  dw      DUP, ONE_PLUS, CFETCH   // dup 1+ c@
1045+ 752A CD 6B
1046+ 752C 1F 6B A9 63                  dw      DUP, LIT, "-", EQUALS   // dup [char] - =
1046+ 7530 2D 00 5A 6F
1047+ 7534                                                              // if
1048+ 7534 E3 63                        dw      ZBRANCH
1049+ 7536 12 00                        dw      CSgn_Else_0 - $
1050+ 7538 EA 6A                        dw          DROP                //      drop
1051+ 753A 60 6A                        dw          ONE_PLUS            //      1+
1052+ 753C 22 6D 78 6E                  dw          ONE, DPL, PLUSSTORE //      1 dpl +!
1052+ 7540 8F 6B
1053+ 7542 22 6D                        dw          ONE                 //      1
1054+ 7544                                                              // else
1055+ 7544 CC 63                        dw      BRANCH
1056+ 7546 16 00                        dw      CSgn_Endif_0 - $
1057+ 7548              CSgn_Else_0:
1058+ 7548 A9 63 2B 00                  dw          LIT, "+", EQUALS    //      [char] + =
1058+ 754C 5A 6F
1059+ 754E                                                              //      if
1060+ 754E E3 63                        dw          ZBRANCH
1061+ 7550 0A 00                        dw          CSgn_Endif_1 - $
1062+ 7552 60 6A                        dw              ONE_PLUS        //          1+
1063+ 7554 22 6D 78 6E                  dw              ONE, DPL        //          1 dpl
1064+ 7558 8F 6B                        dw              PLUSSTORE       //          +!
1065+ 755A              CSgn_Endif_1                                    //      endif
1066+ 755A 1A 6D                        dw          ZERO                //      0
1067+ 755C              CSgn_Endif_0:                                   // endif
1068+ 755C 99 69                        dw      EXIT
1069+ 755E
1070+ 755E              //  ______________________________________________________________________
1071+ 755E              //
1072+ 755E              // (number)     d a -- d1 a1
1073+ 755E              // using the current BASE parse characters stored in address a
1074+ 755E              // accumulating a double precision integer d
1075+ 755E              // the process stops at the first not-convertible character
1076+ 755E              // A double-number is kept in CPU registers as HLDE.
1077+ 755E              // On the stack a double number is treated as two single numbers
1078+ 755E              // where HL is on the top of the stack and DE is the second from top,
1079+ 755E              // so in the stack memory it appears as LHED.
1080+ 755E              // Instead, in 2VARIABLE a double number is stored as EDLH.
1081+ 755E                              Colon_Def CNUMBER,  "(NUMBER)", is_normal
1081+ 755E             >                New_Def  CNUMBER, "(NUMBER)", Enter_Ptr, is_normal ; ok
1081+ 755E             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1081+ 755E             >
1081+ 755E             >                // dummy db directives used to calculate length of namec
1081+ 755E 28 4E 55 4D >                db      "(NUMBER)"
1081+ 7562 42 45 52 29 >
1081+ 7566             >len_NFA         defl    $ - temp_NFA
1081+ 7566             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1081+ 755E             >
1081+ 755E 88          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1081+ 755F 28 4E 55 4D >                db      "(NUMBER)"               // name string in 7-bit ascii, but
1081+ 7563 42 45 52 29 >
1081+ 7567             >                org     $-1                 // alter last byte of Name just above to set
1081+ 7566 A9          >                db      {b $} | END_BIT     // msb as name end
1081+ 7567             >
1081+ 7567 1C 75       >                dw      last_NFA            // Link to previous definition Name
1081+ 7569             >CNUMBER:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1081+ 7569 9D 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
1081+ 756B             >                else
1081+ 756B ~           >                dw      $ + 2   ; ok        // is pointed by CFA
1081+ 756B             >                endif           ; ok        // for other definitions it "points" the correct handler
1081+ 756B             >                // Use of "; ok" to suppress "warning[fwdref]"
1081+ 756B             >
1081+ 756B             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1082+ 756B                                                              // begin
1083+ 756B              CNumber_Begin:
1084+ 756B 60 6A                        dw          ONE_PLUS            //      1+
1085+ 756D 1F 6B C7 69                  dw          DUP, TO_R           //      dup >r
1086+ 7571 CD 6B                        dw          CFETCH              //      @
1087+ 7573 6F 6E B2 6B                  dw          BASE, FETCH         //      base @
1088+ 7577 9C 64                        dw          DIGIT               //      digit
1089+ 7579                                                              // while
1090+ 7579 E3 63                        dw      ZBRANCH
1091+ 757B 2C 00                        dw      CNumber_While_end - $
1092+ 757D 12 6B                        dw          SWAP                //      swap
1093+ 757F 6F 6E B2 6B                  dw          BASE, FETCH         //      base @
1094+ 7583 BC 68                        dw          UM_MUL              //      um*
1095+ 7585 EA 6A 2C 6B                  dw          DROP, ROT           //      drop rot
1096+ 7589 6F 6E B2 6B                  dw          BASE, FETCH         //      base @
1097+ 758D BC 68                        dw          UM_MUL              //      um*
1098+ 758F 4C 6A                        dw          DPLUS               //      d+
1099+ 7591 78 6E B2 6B                  dw          DPL, FETCH          //      dpl @
1100+ 7595 60 6A                        dw          ONE_PLUS            //      1+
1101+ 7597                                                              //      if
1102+ 7597 E3 63                        dw          ZBRANCH
1103+ 7599 08 00                        dw          CNumber_Endif - $
1104+ 759B 22 6D 78 6E                  dw              ONE, DPL        //          1 dpl
1105+ 759F 8F 6B                        dw              PLUSSTORE       //          +!
1106+ 75A1              CNumber_Endif:                                  //      endif
1107+ 75A1 DB 69                        dw             R_TO             //      r>  ( balance rp )
1108+ 75A3 CC 63                        dw      BRANCH
1109+ 75A5 C6 FF                        dw      CNumber_Begin - $
1110+ 75A7              CNumber_While_end:                              // repeat
1111+ 75A7 DB 69                        dw      R_TO                    // r>  ( balance rp on exit while-repeat )
1112+ 75A9 99 69                        dw      EXIT                    // ;
1113+ 75AB
1114+ 75AB              //  ______________________________________________________________________
1115+ 75AB              //
1116+ 75AB              // number       a -- d
1117+ 75AB                              Colon_Def NUMBER,  "NUMBER", is_normal
1117+ 75AB             >                New_Def  NUMBER, "NUMBER", Enter_Ptr, is_normal ; ok
1117+ 75AB             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1117+ 75AB             >
1117+ 75AB             >                // dummy db directives used to calculate length of namec
1117+ 75AB 4E 55 4D 42 >                db      "NUMBER"
1117+ 75AF 45 52       >
1117+ 75B1             >len_NFA         defl    $ - temp_NFA
1117+ 75B1             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1117+ 75AB             >
1117+ 75AB 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1117+ 75AC 4E 55 4D 42 >                db      "NUMBER"               // name string in 7-bit ascii, but
1117+ 75B0 45 52       >
1117+ 75B2             >                org     $-1                 // alter last byte of Name just above to set
1117+ 75B1 D2          >                db      {b $} | END_BIT     // msb as name end
1117+ 75B2             >
1117+ 75B2 5E 75       >                dw      last_NFA            // Link to previous definition Name
1117+ 75B4             >NUMBER:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1117+ 75B4 9D 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
1117+ 75B6             >                else
1117+ 75B6 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
1117+ 75B6             >                endif           ; ok        // for other definitions it "points" the correct handler
1117+ 75B6             >                // Use of "; ok" to suppress "warning[fwdref]"
1117+ 75B6             >
1117+ 75B6             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1118+ 75B6 1A 6D 1A 6D                  dw      ZERO, ZERO              // 0 0
1119+ 75BA 2C 6B                        dw      ROT                     // rot
1120+ 75BC 24 75 C7 69                  dw      CSGN, TO_R              // (sgn) >r
1121+ 75C0 3B 6D 78 6E                  dw      NEG_ONE, DPL, STORE     // -1 dpl !
1121+ 75C4 BF 6B
1122+ 75C6 69 75                        dw      CNUMBER                 // (number)
1123+ 75C8 1F 6B CD 6B                  dw      DUP, CFETCH             // dup c@
1124+ 75CC A9 63 2E 00                  dw      LIT, 46, EQUALS         // [char] . =  ( decimal point )
1124+ 75D0 5A 6F
1125+ 75D2                                                              // if
1126+ 75D2 E3 63                        dw      ZBRANCH
1127+ 75D4 0A 00                        dw      Number_Endif_1 - $
1128+ 75D6 1A 6D 78 6E                  dw          ZERO, DPL, STORE    //      0 dpl !
1128+ 75DA BF 6B
1129+ 75DC 69 75                        dw          CNUMBER             //      (number)
1130+ 75DE              Number_Endif_1:                                 // endif
1131+ 75DE CD 6B 44 6D                  dw      CFETCH, BL              // c@ bl
1132+ 75E2 4C 6F 1A 6D                  dw      SUBTRACT, ZERO, QERROR  // - 0 ?error
1132+ 75E6 C3 70
1133+ 75E8 DB 69                        dw      R_TO                    // r>
1134+ 75EA                                                              // if
1135+ 75EA E3 63                        dw      ZBRANCH
1136+ 75EC 04 00                        dw      Number_Endif_2 - $
1137+ 75EE C0 6A                        dw          DMINUS              //      dminus
1138+ 75F0              Number_Endif_2:                                 // endif
1139+ 75F0 99 69                        dw      EXIT                    // ;
1140+ 75F2
1141+ 75F2              //  ______________________________________________________________________
1142+ 75F2              //
1143+ 75F2              // -find        a -- d
1144+ 75F2                              Colon_Def LFIND,  "-FIND", is_normal
1144+ 75F2             >                New_Def  LFIND, "-FIND", Enter_Ptr, is_normal ; ok
1144+ 75F2             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1144+ 75F2             >
1144+ 75F2             >                // dummy db directives used to calculate length of namec
1144+ 75F2 2D 46 49 4E >                db      "-FIND"
1144+ 75F6 44          >
1144+ 75F7             >len_NFA         defl    $ - temp_NFA
1144+ 75F7             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1144+ 75F2             >
1144+ 75F2 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1144+ 75F3 2D 46 49 4E >                db      "-FIND"               // name string in 7-bit ascii, but
1144+ 75F7 44          >
1144+ 75F8             >                org     $-1                 // alter last byte of Name just above to set
1144+ 75F7 C4          >                db      {b $} | END_BIT     // msb as name end
1144+ 75F8             >
1144+ 75F8 AB 75       >                dw      last_NFA            // Link to previous definition Name
1144+ 75FA             >LFIND:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1144+ 75FA 9D 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
1144+ 75FC             >                else
1144+ 75FC ~           >                dw      $ + 2   ; ok        // is pointed by CFA
1144+ 75FC             >                endif           ; ok        // for other definitions it "points" the correct handler
1144+ 75FC             >                // Use of "; ok" to suppress "warning[fwdref]"
1144+ 75FC             >
1144+ 75FC             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1145+ 75FC 44 6D 48 74                  dw      BL, WORD                // bl word
1146+ 7600 4D 6E B2 6B                  dw      CONTEXT, FETCH, FETCH   // context @ @
1146+ 7604 B2 6B
1147+ 7606 11 65                        dw      C_FIND                  // (find)
1148+ 7608 D2 6F                        dw      QDUP                    // ?dup
1149+ 760A FC 69                        dw      ZEQUAL                  // 0=
1150+ 760C                                                              // if
1151+ 760C E3 63                        dw      ZBRANCH
1152+ 760E 08 00                        dw      LFind_Endif - $
1153+ 7610 F9 6E                        dw          HERE                //      here
1154+ 7612 3F 70                        dw          LATEST              //      latest
1155+ 7614 11 65                        dw          C_FIND              //      (find)
1156+ 7616              LFind_Endif:                                    // endif
1157+ 7616 99 69                        dw      EXIT                    // ;
1158+ 7618
1159+ 7618              //  ______________________________________________________________________
1160+ 7618              //
1161+ 7618              // (abort)      --
1162+ 7618                              Colon_Def CABORT,  "(ABORT)", is_normal
1162+ 7618             >                New_Def  CABORT, "(ABORT)", Enter_Ptr, is_normal ; ok
1162+ 7618             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1162+ 7618             >
1162+ 7618             >                // dummy db directives used to calculate length of namec
1162+ 7618 28 41 42 4F >                db      "(ABORT)"
1162+ 761C 52 54 29    >
1162+ 761F             >len_NFA         defl    $ - temp_NFA
1162+ 761F             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1162+ 7618             >
1162+ 7618 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1162+ 7619 28 41 42 4F >                db      "(ABORT)"               // name string in 7-bit ascii, but
1162+ 761D 52 54 29    >
1162+ 7620             >                org     $-1                 // alter last byte of Name just above to set
1162+ 761F A9          >                db      {b $} | END_BIT     // msb as name end
1162+ 7620             >
1162+ 7620 F2 75       >                dw      last_NFA            // Link to previous definition Name
1162+ 7622             >CABORT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1162+ 7622 9D 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
1162+ 7624             >                else
1162+ 7624 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
1162+ 7624             >                endif           ; ok        // for other definitions it "points" the correct handler
1162+ 7624             >                // Use of "; ok" to suppress "warning[fwdref]"
1162+ 7624             >
1162+ 7624             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1163+ 7624 E9 78                        dw      ABORT                   // abort
1164+ 7626 99 69                        dw      EXIT                    // ;
1165+ 7628
1166+ 7628              //  ______________________________________________________________________
1167+ 7628              //
1168+ 7628              // error        n --
1169+ 7628              // raise an error
1170+ 7628              // if WARNING is 0, prints "MSG#n".
1171+ 7628              // if WARNING is 1, prints line n of screen 4.
1172+ 7628              // if WARNING is -1 does (ABORT) that normally does ABORT
1173+ 7628              // value can be negative or beyond block 4.
1174+ 7628                              Colon_Def ERROR,  "ERROR", is_normal
1174+ 7628             >                New_Def  ERROR, "ERROR", Enter_Ptr, is_normal ; ok
1174+ 7628             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1174+ 7628             >
1174+ 7628             >                // dummy db directives used to calculate length of namec
1174+ 7628 45 52 52 4F >                db      "ERROR"
1174+ 762C 52          >
1174+ 762D             >len_NFA         defl    $ - temp_NFA
1174+ 762D             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1174+ 7628             >
1174+ 7628 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1174+ 7629 45 52 52 4F >                db      "ERROR"               // name string in 7-bit ascii, but
1174+ 762D 52          >
1174+ 762E             >                org     $-1                 // alter last byte of Name just above to set
1174+ 762D D2          >                db      {b $} | END_BIT     // msb as name end
1174+ 762E             >
1174+ 762E 18 76       >                dw      last_NFA            // Link to previous definition Name
1174+ 7630             >ERROR:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1174+ 7630 9D 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
1174+ 7632             >                else
1174+ 7632 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
1174+ 7632             >                endif           ; ok        // for other definitions it "points" the correct handler
1174+ 7632             >                // Use of "; ok" to suppress "warning[fwdref]"
1174+ 7632             >
1174+ 7632             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1175+ 7632 C5 6D B2 6B                  dw      WARNING, FETCH, ZLESS   // warning @ 0<
1175+ 7636 17 6A
1176+ 7638                                                              // if
1177+ 7638 E3 63                        dw      ZBRANCH
1178+ 763A 04 00                        dw      Error_Endif_1 - $
1179+ 763C 22 76                        dw          CABORT              //      (abort)
1180+ 763E              Error_Endif_1:                                  // endif
1181+ 763E F9 6E 5D 72                  dw      HERE, COUNT, TYPE       // here count type
1181+ 7642 83 72
1182+ 7644 97 74                        dw      C_DOT_QUOTE             // .( ? )
1183+ 7646 02 3F 20                     db      2, "? "
1184+ 7649 1A 7B                        dw      MESSAGE                 // message  ( forward )
1185+ 764B 9C 6D B2 6B                  dw      S0, FETCH, SPSTORE      // s0 @ sp!
1185+ 764F 70 69
1186+ 7651 19 6E B2 6B                  dw      BLK, FETCH, QDUP        // blk @ ?dup
1186+ 7655 D2 6F
1187+ 7657                                                              // if
1188+ 7657 E3 63                        dw      ZBRANCH
1189+ 7659 08 00                        dw      Error_Endif_2 - $
1190+ 765B 22 6E B2 6B                  dw          TO_IN, FETCH, SWAP  //      >in @ swap
1190+ 765F 12 6B
1191+ 7661              Error_Endif_2:                                  // endif
1192+ 7661 A8 78                        dw      QUIT                    // quit ( forward )
1193+ 7663 99 69                        dw      EXIT                    // ;
1194+ 7665              //  ______________________________________________________________________
1195+ 7665              //
1196+ 7665              // id.          nfa --
1197+ 7665                              Colon_Def ID_DOT,  "ID.", is_normal
1197+ 7665             >                New_Def  ID_DOT, "ID.", Enter_Ptr, is_normal ; ok
1197+ 7665             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1197+ 7665             >
1197+ 7665             >                // dummy db directives used to calculate length of namec
1197+ 7665 49 44 2E    >                db      "ID."
1197+ 7668             >len_NFA         defl    $ - temp_NFA
1197+ 7668             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1197+ 7665             >
1197+ 7665 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1197+ 7666 49 44 2E    >                db      "ID."               // name string in 7-bit ascii, but
1197+ 7669             >                org     $-1                 // alter last byte of Name just above to set
1197+ 7668 AE          >                db      {b $} | END_BIT     // msb as name end
1197+ 7669             >
1197+ 7669 28 76       >                dw      last_NFA            // Link to previous definition Name
1197+ 766B             >ID_DOT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1197+ 766B 9D 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
1197+ 766D             >                else
1197+ 766D ~           >                dw      $ + 2   ; ok        // is pointed by CFA
1197+ 766D             >                endif           ; ok        // for other definitions it "points" the correct handler
1197+ 766D             >                // Use of "; ok" to suppress "warning[fwdref]"
1197+ 766D             >
1197+ 766D             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1198+ 766D 35 74 A9 63                  dw      PAD, LIT, 32, LIT, 96   // pad 32 96
1198+ 7671 20 00 A9 63
1198+ 7675 60 00
1199+ 7677 E5 73                        dw      FILL                    // fill
1200+ 7679 1F 6B 7D 70                  dw      DUP, PFA, LFA           // dup pfa lfa
1200+ 767D 4F 70
1201+ 767F DA 6A 4C 6F                  dw      OVER, SUBTRACT          // over -
1202+ 7683 35 74 12 6B                  dw      PAD, SWAP               // pad swap
1203+ 7687 89 68                        dw      CMOVE                   // cmove
1204+ 7689 35 74 5D 72                  dw      PAD, COUNT, LIT, $1F    // pad count 01F
1204+ 768D A9 63 1F 00
1205+ 7691 29 69                        dw      AND_OP                  // and  ( use only lower bits )
1206+ 7693 83 72 09 70                  dw      TYPE, SPACE             // type
1207+ 7697 99 69                        dw      EXIT                    // ;
1208+ 7699
1209+ 7699              //  ______________________________________________________________________
1210+ 7699              //
1211+ 7699              // code         -- cccc
1212+ 7699                              Colon_Def CODE,  "CODE", is_normal
1212+ 7699             >                New_Def  CODE, "CODE", Enter_Ptr, is_normal ; ok
1212+ 7699             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1212+ 7699             >
1212+ 7699             >                // dummy db directives used to calculate length of namec
1212+ 7699 43 4F 44 45 >                db      "CODE"
1212+ 769D             >len_NFA         defl    $ - temp_NFA
1212+ 769D             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1212+ 7699             >
1212+ 7699 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1212+ 769A 43 4F 44 45 >                db      "CODE"               // name string in 7-bit ascii, but
1212+ 769E             >                org     $-1                 // alter last byte of Name just above to set
1212+ 769D C5          >                db      {b $} | END_BIT     // msb as name end
1212+ 769E             >
1212+ 769E 65 76       >                dw      last_NFA            // Link to previous definition Name
1212+ 76A0             >CODE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1212+ 76A0 9D 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
1212+ 76A2             >                else
1212+ 76A2 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
1212+ 76A2             >                endif           ; ok        // for other definitions it "points" the correct handler
1212+ 76A2             >                // Use of "; ok" to suppress "warning[fwdref]"
1212+ 76A2             >
1212+ 76A2             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1213+ 76A2 FA 75                        dw      LFIND                   // -find
1214+ 76A4                                                              // if
1215+ 76A4 E3 63                        dw      ZBRANCH
1216+ 76A6 10 00                        dw      Code_Endif - $
1217+ 76A8 EA 6A                        dw          DROP                //      drop
1218+ 76AA A1 70 6B 76                  dw          TO_NAME, ID_DOT     //      >name id.
1219+ 76AE A9 63 04 00                  dw          LIT, 4, MESSAGE     //      4 message
1219+ 76B2 1A 7B
1220+ 76B4 09 70                        dw          SPACE               //      space
1221+ 76B6              Code_Endif:                                     // endif
1222+ 76B6 F9 6E                        dw      HERE                    // here
1223+ 76B8                                                              // ( ---- here begins NFA ---- )
1224+ 76B8 1F 6B CD 6B                  dw      DUP, CFETCH             // dup c@
1225+ 76BC B8 6D B2 6B                  dw      WIDTH, FETCH, MIN       // width @ min  ( max 31 character length )
1225+ 76C0 A5 6F
1226+ 76C2 60 6A 09 6F                  dw      ONE_PLUS, ALLOT         // 1+ allot
1227+ 76C6 1F 6B                        dw      DUP                     // dup
1228+ 76C8 A9 63                        dw      LIT
1229+ 76CA A0 00                        dw      SMUDGE_BIT | END_BIT    // 160
1230+ 76CC A5 6B                        dw      TOGGLE                  // toggle
1231+ 76CE F9 6E 6C 6A                  dw      HERE, ONE_SUBTRACT     // here 1- ( last character )
1232+ 76D2 A9 63 80 00                  dw      LIT, END_BIT, TOGGLE    // 128 toggle
1232+ 76D6 A5 6B
1233+ 76D8                                                              // ( ---- here is LFA ---- )
1234+ 76D8 3F 70 15 6F                  dw      LATEST, COMMA           // latest ,
1235+ 76DC 5A 6E B2 6B                  dw      CURRENT, FETCH, STORE   // current @ ! ( save this word as the latest )
1235+ 76E0 BF 6B
1236+ 76E2 F9 6E 88 6A                  dw      HERE, CELL_PLUS, COMMA  // ( CFA point PFA )
1236+ 76E6 15 6F
1237+ 76E8 99 69                        dw      EXIT                    // ;
1238+ 76EA
1239+ 76EA              //  ______________________________________________________________________
1240+ 76EA              //
1241+ 76EA              // create       -- cccc     ( compile time )
1242+ 76EA              //              -- a        ( run time )
1243+ 76EA                              Colon_Def CREATE,  "CREATE", is_normal
1243+ 76EA             >                New_Def  CREATE, "CREATE", Enter_Ptr, is_normal ; ok
1243+ 76EA             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1243+ 76EA             >
1243+ 76EA             >                // dummy db directives used to calculate length of namec
1243+ 76EA 43 52 45 41 >                db      "CREATE"
1243+ 76EE 54 45       >
1243+ 76F0             >len_NFA         defl    $ - temp_NFA
1243+ 76F0             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1243+ 76EA             >
1243+ 76EA 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1243+ 76EB 43 52 45 41 >                db      "CREATE"               // name string in 7-bit ascii, but
1243+ 76EF 54 45       >
1243+ 76F1             >                org     $-1                 // alter last byte of Name just above to set
1243+ 76F0 C5          >                db      {b $} | END_BIT     // msb as name end
1243+ 76F1             >
1243+ 76F1 99 76       >                dw      last_NFA            // Link to previous definition Name
1243+ 76F3             >CREATE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1243+ 76F3 9D 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
1243+ 76F5             >                else
1243+ 76F5 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
1243+ 76F5             >                endif           ; ok        // for other definitions it "points" the correct handler
1243+ 76F5             >                // Use of "; ok" to suppress "warning[fwdref]"
1243+ 76F5             >
1243+ 76F5             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1244+ 76F5 A0 76 A2 71                  dw      CODE, SMUDGE        // code smudge
1245+ 76F9
1246+ 76F9
1247+ 76F9 F8 71                        dw      C_SEMICOLON_CODE
1248+ 76FB                              // this routine is called from the call coded in CFA
1249+ 76FB              Create_Ptr:
1250+ 76FB 13                           inc     de
1251+ 76FC D5                           push    de                  // balance TOS before overwrite it
1252+ 76FD
1253+ 76FD                              next
1253+ 76FD DD E9       >                jp      (ix)
1254+ 76FF
1255+ 76FF              //  ______________________________________________________________________
1256+ 76FF              //
1257+ 76FF              // [compile]    -- cccc     ( compile time )
1258+ 76FF                              Colon_Def COMPILE_IMMEDIATE,  "[COMPILE]", is_immediate
1258+ 76FF             >                New_Def  COMPILE_IMMEDIATE, "[COMPILE]", Enter_Ptr, is_immediate ; ok
1258+ 76FF             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1258+ 76FF             >
1258+ 76FF             >                // dummy db directives used to calculate length of namec
1258+ 76FF 5B 43 4F 4D >                db      "[COMPILE]"
1258+ 7703 50 49 4C 45 >
1258+ 7707 5D          >
1258+ 7708             >len_NFA         defl    $ - temp_NFA
1258+ 7708             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1258+ 76FF             >
1258+ 76FF C9          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
1258+ 7700 5B 43 4F 4D >                db      "[COMPILE]"               // name string in 7-bit ascii, but
1258+ 7704 50 49 4C 45 >
1258+ 7708 5D          >
1258+ 7709             >                org     $-1                 // alter last byte of Name just above to set
1258+ 7708 DD          >                db      {b $} | END_BIT     // msb as name end
1258+ 7709             >
1258+ 7709 EA 76       >                dw      last_NFA            // Link to previous definition Name
1258+ 770B             >COMPILE_IMMEDIATE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1258+ 770B 9D 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
1258+ 770D             >                else
1258+ 770D ~           >                dw      $ + 2   ; ok        // is pointed by CFA
1258+ 770D             >                endif           ; ok        // for other definitions it "points" the correct handler
1258+ 770D             >                // Use of "; ok" to suppress "warning[fwdref]"
1258+ 770D             >
1258+ 770D             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1259+ 770D FA 75                        dw      LFIND                   // -find      (  cfa  b  f  )
1260+ 770F FC 69                        dw      ZEQUAL                  // 0=         (  cfa  b  )
1261+ 7711 1A 6D C3 70                  dw      ZERO, QERROR            // 0 ?error
1262+ 7715 EA 6A                        dw      DROP                    // drop       (  cfa  )
1263+ 7717 15 6F                        dw      COMMA                   // ,
1264+ 7719 99 69                        dw      EXIT                    // ; immediate
1265+ 771B
1266+ 771B              //  ______________________________________________________________________
1267+ 771B              //
1268+ 771B              // literal      n --      ( compile time )
1269+ 771B                              Colon_Def LITERAL,  "LITERAL", is_immediate
1269+ 771B             >                New_Def  LITERAL, "LITERAL", Enter_Ptr, is_immediate ; ok
1269+ 771B             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1269+ 771B             >
1269+ 771B             >                // dummy db directives used to calculate length of namec
1269+ 771B 4C 49 54 45 >                db      "LITERAL"
1269+ 771F 52 41 4C    >
1269+ 7722             >len_NFA         defl    $ - temp_NFA
1269+ 7722             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1269+ 771B             >
1269+ 771B C7          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
1269+ 771C 4C 49 54 45 >                db      "LITERAL"               // name string in 7-bit ascii, but
1269+ 7720 52 41 4C    >
1269+ 7723             >                org     $-1                 // alter last byte of Name just above to set
1269+ 7722 CC          >                db      {b $} | END_BIT     // msb as name end
1269+ 7723             >
1269+ 7723 FF 76       >                dw      last_NFA            // Link to previous definition Name
1269+ 7725             >LITERAL:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1269+ 7725 9D 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
1269+ 7727             >                else
1269+ 7727 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
1269+ 7727             >                endif           ; ok        // for other definitions it "points" the correct handler
1269+ 7727             >                // Use of "; ok" to suppress "warning[fwdref]"
1269+ 7727             >
1269+ 7727             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1270+ 7727 65 6E B2 6B                  dw      STATE, FETCH            // state @
1271+ 772B                                                              // if
1272+ 772B E3 63                        dw      ZBRANCH
1273+ 772D 08 00                        dw      Literal_Endif - $
1274+ 772F 56 71 A9 63                  dw          COMPILE, LIT        //      compile lit
1275+ 7733 15 6F                        dw          COMMA               //      ,
1276+ 7735              Literal_Endif:                                  // endif
1277+ 7735 99 69                        dw      EXIT                    // ; immediate
1278+ 7737
1279+ 7737              //  ______________________________________________________________________
1280+ 7737              //
1281+ 7737              // dliteral     n --      ( compile time )
1282+ 7737                              Colon_Def DLITERAL,  "DLITERAL", is_immediate
1282+ 7737             >                New_Def  DLITERAL, "DLITERAL", Enter_Ptr, is_immediate ; ok
1282+ 7737             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1282+ 7737             >
1282+ 7737             >                // dummy db directives used to calculate length of namec
1282+ 7737 44 4C 49 54 >                db      "DLITERAL"
1282+ 773B 45 52 41 4C >
1282+ 773F             >len_NFA         defl    $ - temp_NFA
1282+ 773F             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1282+ 7737             >
1282+ 7737 C8          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
1282+ 7738 44 4C 49 54 >                db      "DLITERAL"               // name string in 7-bit ascii, but
1282+ 773C 45 52 41 4C >
1282+ 7740             >                org     $-1                 // alter last byte of Name just above to set
1282+ 773F CC          >                db      {b $} | END_BIT     // msb as name end
1282+ 7740             >
1282+ 7740 1B 77       >                dw      last_NFA            // Link to previous definition Name
1282+ 7742             >DLITERAL:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1282+ 7742 9D 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
1282+ 7744             >                else
1282+ 7744 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
1282+ 7744             >                endif           ; ok        // for other definitions it "points" the correct handler
1282+ 7744             >                // Use of "; ok" to suppress "warning[fwdref]"
1282+ 7744             >
1282+ 7744             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1283+ 7744 65 6E B2 6B                  dw      STATE, FETCH            // state @
1284+ 7748                                                              // if
1285+ 7748 E3 63                        dw      ZBRANCH
1286+ 774A 08 00                        dw      DLiteral_Endif - $
1287+ 774C 12 6B                        dw          SWAP                //      swap
1288+ 774E 25 77 25 77                  dw          LITERAL,  LITERAL   //      [compile] literal [compile] literal
1289+ 7752              DLiteral_Endif:                                 // endif
1290+ 7752 99 69                        dw      EXIT                    // ; immediate
1291+ 7754
1292+ 7754              //  ______________________________________________________________________
1293+ 7754              //
1294+ 7754              // [char]       n --      ( compile time )
1295+ 7754              // inside colon definition, gets first character from next input word
1296+ 7754              // and compiles it as literal.
1297+ 7754                              Colon_Def COMPILE_CHAR,  "[CHAR]", is_immediate
1297+ 7754             >                New_Def  COMPILE_CHAR, "[CHAR]", Enter_Ptr, is_immediate ; ok
1297+ 7754             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1297+ 7754             >
1297+ 7754             >                // dummy db directives used to calculate length of namec
1297+ 7754 5B 43 48 41 >                db      "[CHAR]"
1297+ 7758 52 5D       >
1297+ 775A             >len_NFA         defl    $ - temp_NFA
1297+ 775A             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1297+ 7754             >
1297+ 7754 C6          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
1297+ 7755 5B 43 48 41 >                db      "[CHAR]"               // name string in 7-bit ascii, but
1297+ 7759 52 5D       >
1297+ 775B             >                org     $-1                 // alter last byte of Name just above to set
1297+ 775A DD          >                db      {b $} | END_BIT     // msb as name end
1297+ 775B             >
1297+ 775B 37 77       >                dw      last_NFA            // Link to previous definition Name
1297+ 775D             >COMPILE_CHAR:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1297+ 775D 9D 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
1297+ 775F             >                else
1297+ 775F ~           >                dw      $ + 2   ; ok        // is pointed by CFA
1297+ 775F             >                endif           ; ok        // for other definitions it "points" the correct handler
1297+ 775F             >                // Use of "; ok" to suppress "warning[fwdref]"
1297+ 775F             >
1297+ 775F             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1298+ 775F B2 74 25 77                  dw      CHAR, LITERAL           // char [compile] literal
1299+ 7763 99 69                        dw      EXIT                    // ; immediate
1300+ 7765
1301+ 7765              //  ______________________________________________________________________
1302+ 7765              //
1303+ 7765              // 0x00         n --      ( compile time )
1304+ 7765                              Colon_Def NUL_WORD,  $00, is_immediate
1304+ 7765             >                New_Def  NUL_WORD, $00, Enter_Ptr, is_immediate ; ok
1304+ 7765             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1304+ 7765             >
1304+ 7765             >                // dummy db directives used to calculate length of namec
1304+ 7765 00          >                db      $00
1304+ 7766             >len_NFA         defl    $ - temp_NFA
1304+ 7766             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1304+ 7765             >
1304+ 7765 C1          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
1304+ 7766 00          >                db      $00               // name string in 7-bit ascii, but
1304+ 7767             >                org     $-1                 // alter last byte of Name just above to set
1304+ 7766 80          >                db      {b $} | END_BIT     // msb as name end
1304+ 7767             >
1304+ 7767 54 77       >                dw      last_NFA            // Link to previous definition Name
1304+ 7769             >NUL_WORD:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1304+ 7769 9D 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
1304+ 776B             >                else
1304+ 776B ~           >                dw      $ + 2   ; ok        // is pointed by CFA
1304+ 776B             >                endif           ; ok        // for other definitions it "points" the correct handler
1304+ 776B             >                // Use of "; ok" to suppress "warning[fwdref]"
1304+ 776B             >
1304+ 776B             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1305+ 776B 19 6E B2 6B                  dw      BLK, FETCH, ONE         // blk @ 1
1305+ 776F 22 6D
1306+ 7771 97 6F                        dw      GREATER                 // > if
1307+ 7773                                                              // if
1308+ 7773 E3 63                        dw      ZBRANCH
1309+ 7775 28 00                        dw      Nul_Else_1 - $
1310+ 7777 22 6D 19 6E                  dw          ONE, BLK, PLUSSTORE //      1 blk +!
1310+ 777B 8F 6B
1311+ 777D 1A 6D 22 6E                  dw          ZERO, TO_IN, STORE  //      0 >in !
1311+ 7781 BF 6B
1312+ 7783 19 6E B2 6B                  dw          BLK, FETCH          //      blk @
1313+ 7787 66 6D                        dw          BSCR                //      b/scr
1314+ 7789 6C 6A                        dw          ONE_SUBTRACT        //      1 -
1315+ 778B 29 69                        dw          AND_OP              //      and  ( this is tricky )
1316+ 778D FC 69                        dw          ZEQUAL              //      0=
1317+ 778F                                                              //      if
1318+ 778F E3 63                        dw          ZBRANCH
1319+ 7791 08 00                        dw          Nul_Endif_2 - $
1320+ 7793 F5 70                        dw              QEXEC           //          ?exec
1321+ 7795 DB 69 EA 6A                  dw              R_TO, DROP      //          r> drop
1322+ 7799              Nul_Endif_2:                                    //      endif
1323+ 7799 CC 63                        dw      BRANCH
1324+ 779B 06 00                        dw      Nul_Endif_1 - $
1325+ 779D              Nul_Else_1:                                     // else
1326+ 779D DB 69 EA 6A                  dw          R_TO, DROP          //      r> drop
1327+ 77A1              Nul_Endif_1:                                    // endif
1328+ 77A1 99 69                        dw      EXIT                    // ;
1329+ 77A3
1330+ 77A3              //  ______________________________________________________________________
1331+ 77A3              //
1332+ 77A3              // ?stack       --
1333+ 77A3              // Raise error #1 if stack is empty and you pop it
1334+ 77A3              // Raise error #7 if stack is full.
1335+ 77A3              // This means SP must always stay between HERE and FFFF
1336+ 77A3              // For 128K BANK paging purpose SP must be <= BFE0 and 50 words room
1337+ 77A3              // for Next 8K MMU paging this is $DOE8
1338+ 77A3                              Colon_Def QSTACK, "?STACK", is_normal
1338+ 77A3             >                New_Def  QSTACK, "?STACK", Enter_Ptr, is_normal ; ok
1338+ 77A3             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1338+ 77A3             >
1338+ 77A3             >                // dummy db directives used to calculate length of namec
1338+ 77A3 3F 53 54 41 >                db      "?STACK"
1338+ 77A7 43 4B       >
1338+ 77A9             >len_NFA         defl    $ - temp_NFA
1338+ 77A9             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1338+ 77A3             >
1338+ 77A3 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1338+ 77A4 3F 53 54 41 >                db      "?STACK"               // name string in 7-bit ascii, but
1338+ 77A8 43 4B       >
1338+ 77AA             >                org     $-1                 // alter last byte of Name just above to set
1338+ 77A9 CB          >                db      {b $} | END_BIT     // msb as name end
1338+ 77AA             >
1338+ 77AA 65 77       >                dw      last_NFA            // Link to previous definition Name
1338+ 77AC             >QSTACK:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1338+ 77AC 9D 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
1338+ 77AE             >                else
1338+ 77AE ~           >                dw      $ + 2   ; ok        // is pointed by CFA
1338+ 77AE             >                endif           ; ok        // for other definitions it "points" the correct handler
1338+ 77AE             >                // Use of "; ok" to suppress "warning[fwdref]"
1338+ 77AE             >
1338+ 77AE             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1339+ 77AE 61 69                        dw      SPFETCH                 // sp@
1340+ 77B0 9C 6D B2 6B                  dw      S0, FETCH               // s0 @
1341+ 77B4 12 6B 67 6F                  dw      SWAP, ULESS             // swap u<
1342+ 77B8 22 6D C3 70                  dw      ONE, QERROR             // 1 ?error
1343+ 77BC F9 6E                        dw      HERE                    // here
1344+ 77BE 9C 6D B2 6B                  dw      S0, FETCH, LESS         // s0 @ <
1344+ 77C2 7B 6F
1345+ 77C4                                                              // if
1346+ 77C4 E3 63                        dw      ZBRANCH
1347+ 77C6 14 00                        dw      QStack_Endif - $
1348+ 77C8 61 69                        dw          SPFETCH             //      sp@
1349+ 77CA F9 6E A9 63                  dw          HERE, LIT, 128      //      here 128
1349+ 77CE 80 00
1350+ 77D0 3F 6A 67 6F                  dw          PLUS, ULESS         //      plus u<
1351+ 77D4 A9 63 07 00                  dw          LIT, 7, QERROR      //      7 Cerror
1351+ 77D8 C3 70
1352+ 77DA              QStack_Endif:                                   // endif
1353+ 77DA 99 69                        dw      EXIT                    // ;
1354+ 77DC
1355+ 77DC
# file closed: C:\Zx\CSpect\Projects\vForth15_INDIRECT/source/L1.asm
 111  77DC                              include "L2.asm"
# file opened: C:\Zx\CSpect\Projects\vForth15_INDIRECT/source/L2.asm
   1+ 77DC              //  ______________________________________________________________________
   2+ 77DC              //
   3+ 77DC              //  L2.asm
   4+ 77DC              //
   5+ 77DC              //  Level-2
   6+ 77DC              //  the Forth interpreter, vocabulary, cold/warm start and quit from Forth.
   7+ 77DC              //  ______________________________________________________________________
   8+ 77DC
   9+ 77DC
  10+ 77DC              //  ______________________________________________________________________
  11+ 77DC              //
  12+ 77DC              // interpret    --
  13+ 77DC              // This is the text interpreter.
  14+ 77DC              // It executes or compiles, depending on STATE, the text coming from
  15+ 77DC              // current input stream.
  16+ 77DC              // If the word search fails after parsing CONTEXT and CURRENT vocabulary,
  17+ 77DC              // the word is interpreted as numeric and converted, using current BASE,
  18+ 77DC              // leaving on top of stack a single or double precision number, depending
  19+ 77DC              // on the presence of a decimal point.
  20+ 77DC              // If the number conversion fails, the terminal is notified with ? followed
  21+ 77DC              // by the offending word.
  22+ 77DC                              Colon_Def INTERPRET, "INTERPRET", is_normal
  22+ 77DC             >                New_Def  INTERPRET, "INTERPRET", Enter_Ptr, is_normal ; ok
  22+ 77DC             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  22+ 77DC             >
  22+ 77DC             >                // dummy db directives used to calculate length of namec
  22+ 77DC 49 4E 54 45 >                db      "INTERPRET"
  22+ 77E0 52 50 52 45 >
  22+ 77E4 54          >
  22+ 77E5             >len_NFA         defl    $ - temp_NFA
  22+ 77E5             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  22+ 77DC             >
  22+ 77DC 89          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  22+ 77DD 49 4E 54 45 >                db      "INTERPRET"               // name string in 7-bit ascii, but
  22+ 77E1 52 50 52 45 >
  22+ 77E5 54          >
  22+ 77E6             >                org     $-1                 // alter last byte of Name just above to set
  22+ 77E5 D4          >                db      {b $} | END_BIT     // msb as name end
  22+ 77E6             >
  22+ 77E6 A3 77       >                dw      last_NFA            // Link to previous definition Name
  22+ 77E8             >INTERPRET:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
  22+ 77E8 9D 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
  22+ 77EA             >                else
  22+ 77EA ~           >                dw      $ + 2   ; ok        // is pointed by CFA
  22+ 77EA             >                endif           ; ok        // for other definitions it "points" the correct handler
  22+ 77EA             >                // Use of "; ok" to suppress "warning[fwdref]"
  22+ 77EA             >
  22+ 77EA             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  23+ 77EA
  24+ 77EA              Interpret_Begin:                                        // begin
  25+ 77EA FA 75                        dw          LFIND                       //      -find
  26+ 77EC                                                                      //      if
  27+ 77EC E3 63                        dw          ZBRANCH
  28+ 77EE 1A 00                        dw          Interpret_Else_1 - $
  29+ 77F0 65 6E B2 6B                  dw              STATE, FETCH, LESS      //          state @ <
  29+ 77F4 7B 6F
  30+ 77F6                                                                      //          if
  31+ 77F6 E3 63                        dw              ZBRANCH
  32+ 77F8 08 00                        dw              Interpret_Else_2 - $
  33+ 77FA 73 71                        dw                  COMPILE_XT          //              compile,
  34+ 77FC                                                                      //          else
  35+ 77FC CC 63                        dw              BRANCH
  36+ 77FE 06 00                        dw              Interpret_Endif_2 - $
  37+ 7800              Interpret_Else_2:
  38+ 7800 BE 63 C5 6C                  dw                  EXECUTE, NOOP       //              execute nooop
  39+ 7804              Interpret_Endif_2:                                      //          endif
  40+ 7804                                                                      //      else
  41+ 7804 CC 63                        dw          BRANCH
  42+ 7806 1A 00                        dw          Interpret_Endif_1 - $
  43+ 7808              Interpret_Else_1:
  44+ 7808 F9 6E B4 75                  dw              HERE, NUMBER            //          here number
  45+ 780C 78 6E B2 6B                  dw              DPL, FETCH, ONE_PLUS    //          dpl @ 1+
  45+ 7810 60 6A
  46+ 7812                                                                      //          if
  47+ 7812 E3 63                        dw              ZBRANCH
  48+ 7814 08 00                        dw              Interpret_Else_3 - $
  49+ 7816              //              dw                  NMODE, FETCH        //              nmode @
  50+ 7816              //                                                      //              if
  51+ 7816              //              dw                  ZBRANCH
  52+ 7816              //              dw                  Interpret_Endif_4 - $
  53+ 7816              //              dw                      ONE, ZERO       //                  1 0
  54+ 7816              //              dw                      TWO_DROP        //                  2drop
  55+ 7816              //Interpret_Endif_4:                                      //              endif
  56+ 7816 42 77                        dw                  DLITERAL            //              [compile] dliteral
  57+ 7818                                                                      //          else
  58+ 7818 CC 63                        dw              BRANCH
  59+ 781A 06 00                        dw              Interpret_Endif_3 - $
  60+ 781C              Interpret_Else_3:
  61+ 781C EA 6A                        dw                  DROP                //              drop
  62+ 781E 25 77                        dw                  LITERAL             //              [compile]  literal
  63+ 7820              Interpret_Endif_3:                                      //          endif
  64+ 7820              Interpret_Endif_1:                                      //      endif
  65+ 7820 AC 77                        dw          QSTACK                      //      ?stack
  66+ 7822 1F 67                        dw          QTERMINAL                   //      ?terminal
  67+ 7824                                                                      //      if
  68+ 7824 E3 63                        dw          ZBRANCH
  69+ 7826 04 00                        dw          Interpret_Endif_5 - $
  70+ 7828 22 76                        dw              CABORT                  //          (abort)
  71+ 782A              Interpret_Endif_5:                                      //      endif
  72+ 782A CC 63                        dw      BRANCH
  73+ 782C BE FF                        dw      Interpret_Begin - $
  74+ 782E 99 69                        dw      EXIT                            // ;
  75+ 7830
  76+ 7830              //  ______________________________________________________________________
  77+ 7830              //
  78+ 7830              // vocabulary   -- cccc     ( compile time )
  79+ 7830              // Defining word used in the form   VOCABULARY cccc
  80+ 7830              // creates the word  cccc  that gives the name to the vocabulary.
  81+ 7830              // Giving  cccc  makes the vocabulary CONTEXT so its words are executed first
  82+ 7830              // Giving  cccc DEFINITIONS makes  the vocabulary  CURRENT
  83+ 7830              // so new definitions can be inserted in that vocabulary.
  84+ 7830                              Colon_Def VOCABULARY, "VOCABULARY", is_normal
  84+ 7830             >                New_Def  VOCABULARY, "VOCABULARY", Enter_Ptr, is_normal ; ok
  84+ 7830             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  84+ 7830             >
  84+ 7830             >                // dummy db directives used to calculate length of namec
  84+ 7830 56 4F 43 41 >                db      "VOCABULARY"
  84+ 7834 42 55 4C 41 >
  84+ 7838 52 59       >
  84+ 783A             >len_NFA         defl    $ - temp_NFA
  84+ 783A             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  84+ 7830             >
  84+ 7830 8A          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  84+ 7831 56 4F 43 41 >                db      "VOCABULARY"               // name string in 7-bit ascii, but
  84+ 7835 42 55 4C 41 >
  84+ 7839 52 59       >
  84+ 783B             >                org     $-1                 // alter last byte of Name just above to set
  84+ 783A D9          >                db      {b $} | END_BIT     // msb as name end
  84+ 783B             >
  84+ 783B DC 77       >                dw      last_NFA            // Link to previous definition Name
  84+ 783D             >VOCABULARY:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
  84+ 783D 9D 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
  84+ 783F             >                else
  84+ 783F ~           >                dw      $ + 2   ; ok        // is pointed by CFA
  84+ 783F             >                endif           ; ok        // for other definitions it "points" the correct handler
  84+ 783F             >                // Use of "; ok" to suppress "warning[fwdref]"
  84+ 783F             >
  84+ 783F             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  85+ 783F
  86+ 783F 26 72                        dw      CBUILDS
  87+ 7841
  88+ 7841 A9 63 81 A0                  dw      LIT, $A081, COMMA       // $81A0 ,
  88+ 7845 15 6F
  89+ 7847 5A 6E B2 6B                  dw      CURRENT, FETCH          // current @
  90+ 784B 92 6A 15 6F                  dw      CELL_MINUS, COMMA       // cell- ,
  91+ 784F F9 6E                        dw      HERE                    // here
  92+ 7851 E6 6D B2 6B                  dw      VOC_LINK, FETCH, COMMA  // voc-link @ ,
  92+ 7855 15 6F
  93+ 7857 E6 6D BF 6B                  dw      VOC_LINK, STORE         // voc-link !
  94+ 785B
  95+ 785B 36 72                        dw      DOES_TO                 // does>
  96+ 785D              Vocabulary_Does:
  97+ 785D 88 6A                        dw      CELL_PLUS               // cell+
  98+ 785F 4D 6E BF 6B                  dw      CONTEXT, STORE          // context !
  99+ 7863 99 69                        dw      EXIT                    // ;
 100+ 7865
 101+ 7865              //  ______________________________________________________________________
 102+ 7865              //
 103+ 7865              // forth        --
 104+ 7865              // Name of the first vocabulary.
 105+ 7865              // It makes FORTH the CONTEXT vocabulary.
 106+ 7865              // Until new user vocabulary are defined, new colon-definitions becomes
 107+ 7865              // part of FORTH. It is immediate, so it will executed during the creation
 108+ 7865              // of a colon definition to be able to select the vocabulary.
 109+ 7865
 110+ 7865                              New_Def FORTH, "FORTH", Does_Ptr, is_immediate
 110+ 7865             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 110+ 7865             >
 110+ 7865             >                // dummy db directives used to calculate length of namec
 110+ 7865 46 4F 52 54 >                db      "FORTH"
 110+ 7869 48          >
 110+ 786A             >len_NFA         defl    $ - temp_NFA
 110+ 786A             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 110+ 7865             >
 110+ 7865 C5          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 110+ 7866 46 4F 52 54 >                db      "FORTH"               // name string in 7-bit ascii, but
 110+ 786A 48          >
 110+ 786B             >                org     $-1                 // alter last byte of Name just above to set
 110+ 786A C8          >                db      {b $} | END_BIT     // msb as name end
 110+ 786B             >
 110+ 786B 30 78       >                dw      last_NFA            // Link to previous definition Name
 110+ 786D             >FORTH:          if Does_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 110+ 786D 42 72       >                dw      Does_Ptr ; ok        // for primitive definitions  actual code
 110+ 786F             >                else
 110+ 786F ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 110+ 786F             >                endif           ; ok        // for other definitions it "points" the correct handler
 110+ 786F             >                // Use of "; ok" to suppress "warning[fwdref]"
 110+ 786F             >
 110+ 786F             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 111+ 786F 5D 78                        dw      Vocabulary_Does
 112+ 7871 81 A0                        db      $81, $A0
 113+ 7873              Forth_Latest_Ptr:
 114+ 7873 8C 87                        dw      Here_Dictionary // Fence_Word // Latest_Definition
 115+ 7875              Voclink_Ptr:
 116+ 7875 00 00                        dw      0
 117+ 7877              // Any new vocabulary is structured as follow:
 118+ 7877              // PFA+0 points to DOES> part of VOCABULARY to perform CELL+ CONTEXT !
 119+ 7877              // PFA+2 is 81,A0 i.e. a null-word used as LATEST in the new vocabulary
 120+ 7877              // PFA+4 always contains the LATEST word of this VOCABULARY.
 121+ 7877              //       at creations it points to the null-word of its parent vocabulary
 122+ 7877              //       that is normally FORTH, For example ASSEMBLER points FORTH's null-word
 123+ 7877              // PFA+6 is the pointer that builds up the vocabulary linked list.
 124+ 7877              //       FORTH has 0 here to signal the end of the list and user's variable
 125+ 7877              //       VOC-LINK points to PFA+6 of the newest vocabulary created.
 126+ 7877              //       While FORTH is the only vocabulary, VOC-LINK points to FORTH's PFA+6
 127+ 7877              //       When ASSEMBLER is created, its PFA+6 points to FORTH's PFA+6, and so on
 128+ 7877
 129+ 7877              //  ______________________________________________________________________
 130+ 7877              //
 131+ 7877              // definitions  --
 132+ 7877              // Used in the form  cccc DEFINITIONS
 133+ 7877              // set the CURRENT vocabulary at CONTEXT to insert new definitions in
 134+ 7877              // vocabulary cccc.
 135+ 7877                              Colon_Def DEFINITIONS, "DEFINITIONS", is_normal
 135+ 7877             >                New_Def  DEFINITIONS, "DEFINITIONS", Enter_Ptr, is_normal ; ok
 135+ 7877             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 135+ 7877             >
 135+ 7877             >                // dummy db directives used to calculate length of namec
 135+ 7877 44 45 46 49 >                db      "DEFINITIONS"
 135+ 787B 4E 49 54 49 >
 135+ 787F 4F 4E 53    >
 135+ 7882             >len_NFA         defl    $ - temp_NFA
 135+ 7882             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 135+ 7877             >
 135+ 7877 8B          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 135+ 7878 44 45 46 49 >                db      "DEFINITIONS"               // name string in 7-bit ascii, but
 135+ 787C 4E 49 54 49 >
 135+ 7880 4F 4E 53    >
 135+ 7883             >                org     $-1                 // alter last byte of Name just above to set
 135+ 7882 D3          >                db      {b $} | END_BIT     // msb as name end
 135+ 7883             >
 135+ 7883 65 78       >                dw      last_NFA            // Link to previous definition Name
 135+ 7885             >DEFINITIONS:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 135+ 7885 9D 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 135+ 7887             >                else
 135+ 7887 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 135+ 7887             >                endif           ; ok        // for other definitions it "points" the correct handler
 135+ 7887             >                // Use of "; ok" to suppress "warning[fwdref]"
 135+ 7887             >
 135+ 7887             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 136+ 7887 4D 6E B2 6B                  dw      CONTEXT, FETCH          // context @
 137+ 788B 5A 6E BF 6B                  dw      CURRENT, STORE          // current !
 138+ 788F 99 69                        dw      EXIT                    // ;
 139+ 7891
 140+ 7891              //  ______________________________________________________________________
 141+ 7891              //
 142+ 7891              // (            -- cccc )
 143+ 7891              // the following text is interpreted as a comment until a closing )
 144+ 7891                              Colon_Def COMMENT_BRAKET, "(", is_immediate
 144+ 7891             >                New_Def  COMMENT_BRAKET, "(", Enter_Ptr, is_immediate ; ok
 144+ 7891             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 144+ 7891             >
 144+ 7891             >                // dummy db directives used to calculate length of namec
 144+ 7891 28          >                db      "("
 144+ 7892             >len_NFA         defl    $ - temp_NFA
 144+ 7892             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 144+ 7891             >
 144+ 7891 C1          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 144+ 7892 28          >                db      "("               // name string in 7-bit ascii, but
 144+ 7893             >                org     $-1                 // alter last byte of Name just above to set
 144+ 7892 A8          >                db      {b $} | END_BIT     // msb as name end
 144+ 7893             >
 144+ 7893 77 78       >                dw      last_NFA            // Link to previous definition Name
 144+ 7895             >COMMENT_BRAKET:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 144+ 7895 9D 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 144+ 7897             >                else
 144+ 7897 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 144+ 7897             >                endif           ; ok        // for other definitions it "points" the correct handler
 144+ 7897             >                // Use of "; ok" to suppress "warning[fwdref]"
 144+ 7897             >
 144+ 7897             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 145+ 7897 A9 63 29 00                  dw      LIT, ")"                // [char] )
 146+ 789B 48 74 EA 6A                  dw      WORD, DROP              // word drop
 147+ 789F 99 69                        dw      EXIT                    // ;
 148+ 78A1
 149+ 78A1              //  ______________________________________________________________________
 150+ 78A1              //
 151+ 78A1              // quit         --
 152+ 78A1              // \ Erase the return-stack, stop any compilation and give controlo to the console. No message is issued.
 153+ 78A1                              Colon_Def QUIT, "QUIT", is_normal
 153+ 78A1             >                New_Def  QUIT, "QUIT", Enter_Ptr, is_normal ; ok
 153+ 78A1             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 153+ 78A1             >
 153+ 78A1             >                // dummy db directives used to calculate length of namec
 153+ 78A1 51 55 49 54 >                db      "QUIT"
 153+ 78A5             >len_NFA         defl    $ - temp_NFA
 153+ 78A5             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 153+ 78A1             >
 153+ 78A1 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 153+ 78A2 51 55 49 54 >                db      "QUIT"               // name string in 7-bit ascii, but
 153+ 78A6             >                org     $-1                 // alter last byte of Name just above to set
 153+ 78A5 D4          >                db      {b $} | END_BIT     // msb as name end
 153+ 78A6             >
 153+ 78A6 91 78       >                dw      last_NFA            // Link to previous definition Name
 153+ 78A8             >QUIT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 153+ 78A8 9D 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 153+ 78AA             >                else
 153+ 78AA ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 153+ 78AA             >                endif           ; ok        // for other definitions it "points" the correct handler
 153+ 78AA             >                // Use of "; ok" to suppress "warning[fwdref]"
 153+ 78AA             >
 153+ 78AA             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 154+ 78AA
 155+ 78AA D0 6E B2 6B                  dw      SOURCE_ID, FETCH        // source-id @
 156+ 78AE AB 67 EA 6A                  dw      F_CLOSE, DROP           // f_close drop
 157+ 78B2 1A 6D D0 6E                  dw      ZERO, SOURCE_ID, STORE  // 0 source-id !
 157+ 78B6 BF 6B
 158+ 78B8 1A 6D 19 6E                  dw      ZERO, BLK, STORE        // 0 blk !
 158+ 78BC BF 6B
 159+ 78BE 7F 71                        dw      SQUARED_OPEN            // [compile] [
 160+ 78C0                                                              // begin
 161+ 78C0              Quit_Begin:
 162+ 78C0 A4 6D B2 6B                  dw      R0, FETCH, RPSTORE      //      r0 @ rp!
 162+ 78C4 8A 69
 163+ 78C6 7A 68                        dw      CR                      //      cr
 164+ 78C8 C8 73                        dw      QUERY                   //      query
 165+ 78CA              Next_Breakpoint_1:
 166+ 78CA E8 77                        dw      INTERPRET               //      interpret
 167+ 78CC 65 6E B2 6B                  dw      STATE, FETCH, ZEQUAL    //      state @ 0=
 167+ 78D0 FC 69
 168+ 78D2                                                              //      if
 169+ 78D2 E3 63                        dw      ZBRANCH
 170+ 78D4 07 00                        dw      Quit_Endif - $
 171+ 78D6 97 74                        dw          C_DOT_QUOTE
 172+ 78D8 02 6F 6B                     db          2, "ok"             //          .( ok)
 173+ 78DB              Quit_Endif:                                     //      else
 174+ 78DB                                                              // again
 175+ 78DB CC 63                        dw      BRANCH
 176+ 78DD E3 FF                        dw      Quit_Begin - $
 177+ 78DF 99 69                        dw      EXIT                    // ;
 178+ 78E1
 179+ 78E1              //  ______________________________________________________________________
 180+ 78E1              //
 181+ 78E1              // abort        --
 182+ 78E1                              Colon_Def ABORT, "ABORT", is_normal
 182+ 78E1             >                New_Def  ABORT, "ABORT", Enter_Ptr, is_normal ; ok
 182+ 78E1             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 182+ 78E1             >
 182+ 78E1             >                // dummy db directives used to calculate length of namec
 182+ 78E1 41 42 4F 52 >                db      "ABORT"
 182+ 78E5 54          >
 182+ 78E6             >len_NFA         defl    $ - temp_NFA
 182+ 78E6             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 182+ 78E1             >
 182+ 78E1 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 182+ 78E2 41 42 4F 52 >                db      "ABORT"               // name string in 7-bit ascii, but
 182+ 78E6 54          >
 182+ 78E7             >                org     $-1                 // alter last byte of Name just above to set
 182+ 78E6 D4          >                db      {b $} | END_BIT     // msb as name end
 182+ 78E7             >
 182+ 78E7 A1 78       >                dw      last_NFA            // Link to previous definition Name
 182+ 78E9             >ABORT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 182+ 78E9 9D 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 182+ 78EB             >                else
 182+ 78EB ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 182+ 78EB             >                endif           ; ok        // for other definitions it "points" the correct handler
 182+ 78EB             >                // Use of "; ok" to suppress "warning[fwdref]"
 182+ 78EB             >
 182+ 78EB             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 183+ 78EB 9C 6D B2 6B                  dw      S0, FETCH, SPSTORE      // s0 @ sp!
 183+ 78EF 70 69
 184+ 78F1 E2 71                        dw      DECIMAL                 // decimal
 185+ 78F3 6D 78                        dw      FORTH                   // [compile] forth
 186+ 78F5 85 78                        dw      DEFINITIONS             // definitions
 187+ 78F7              Autoexec_Ptr:
 188+ 78F7 AC 85                        dw      AUTOEXEC                // autoexec, patched to noop
 189+ 78F9 A8 78                        dw      QUIT                    // quit
 190+ 78FB 99 69                        dw      EXIT                    // ;
 191+ 78FD
 192+ 78FD              //  ______________________________________________________________________
 193+ 78FD              //
 194+ 78FD              // warm         --
 195+ 78FD                              Colon_Def WARM, "WARM", is_normal
 195+ 78FD             >                New_Def  WARM, "WARM", Enter_Ptr, is_normal ; ok
 195+ 78FD             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 195+ 78FD             >
 195+ 78FD             >                // dummy db directives used to calculate length of namec
 195+ 78FD 57 41 52 4D >                db      "WARM"
 195+ 7901             >len_NFA         defl    $ - temp_NFA
 195+ 7901             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 195+ 78FD             >
 195+ 78FD 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 195+ 78FE 57 41 52 4D >                db      "WARM"               // name string in 7-bit ascii, but
 195+ 7902             >                org     $-1                 // alter last byte of Name just above to set
 195+ 7901 CD          >                db      {b $} | END_BIT     // msb as name end
 195+ 7902             >
 195+ 7902 E1 78       >                dw      last_NFA            // Link to previous definition Name
 195+ 7904             >WARM:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 195+ 7904 9D 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 195+ 7906             >                else
 195+ 7906 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 195+ 7906             >                endif           ; ok        // for other definitions it "points" the correct handler
 195+ 7906             >                // Use of "; ok" to suppress "warning[fwdref]"
 195+ 7906             >
 195+ 7906             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 196+ 7906 83 7C                        dw      BLK_INIT                // blk-init
 197+ 7908 5F 84                        dw      SPLASH                  // splash
 198+ 790A A9 63 07 00                  dw      LIT, 7, EMIT            // 7 emit
 198+ 790E ED 6F
 199+ 7910 E9 78                        dw      ABORT                   // abort
 200+ 7912 99 69                        dw      EXIT                    // exit
 201+ 7914
 202+ 7914              //  ______________________________________________________________________
 203+ 7914              //
 204+ 7914              // cold         --
 205+ 7914                              Colon_Def COLD, "COLD", is_normal
 205+ 7914             >                New_Def  COLD, "COLD", Enter_Ptr, is_normal ; ok
 205+ 7914             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 205+ 7914             >
 205+ 7914             >                // dummy db directives used to calculate length of namec
 205+ 7914 43 4F 4C 44 >                db      "COLD"
 205+ 7918             >len_NFA         defl    $ - temp_NFA
 205+ 7918             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 205+ 7914             >
 205+ 7914 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 205+ 7915 43 4F 4C 44 >                db      "COLD"               // name string in 7-bit ascii, but
 205+ 7919             >                org     $-1                 // alter last byte of Name just above to set
 205+ 7918 C4          >                db      {b $} | END_BIT     // msb as name end
 205+ 7919             >
 205+ 7919 FD 78       >                dw      last_NFA            // Link to previous definition Name
 205+ 791B             >COLD:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 205+ 791B 9D 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 205+ 791D             >                else
 205+ 791D ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 205+ 791D             >                endif           ; ok        // for other definitions it "points" the correct handler
 205+ 791D             >                // Use of "; ok" to suppress "warning[fwdref]"
 205+ 791D             >
 205+ 791D             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 206+ 791D A9 63 78 63                  dw      LIT, S0_origin          // [ hex $12 +origin ] Literal
 207+ 7921 A9 63 94 63                  dw      LIT, USER_Pointer       // [ hex $3E +origin ] literal
 208+ 7925 B2 6B                        dw      FETCH                   // @
 209+ 7927 A9 63 06 00                  dw      LIT, 6, PLUS            // 6 +
 209+ 792B 3F 6A
 210+ 792D A9 63 14 00                  dw      LIT, 20                 // 20
 211+ 7931 89 68                        dw      CMOVE
 212+ 7933 A9 63 72 63                  dw      LIT, Latest_origin      // [ hex 0C +origin ] literal
 213+ 7937 B2 6B                        dw      FETCH                   // @
 214+ 7939 A9 63 73 78                  dw      LIT, Forth_Latest_Ptr   // [ ' forth >body 4 + ] Literal
 215+ 793D BF 6B                        dw      STORE                   // !
 216+ 793F 1A 6D 10 6E                  dw      ZERO, NMODE, STORE      // 0 nmode !
 216+ 7943 BF 6B
 217+ 7945 F1 6D B2 6B                  dw      FIRST, FETCH, DUP       // first @ dup
 217+ 7949 1F 6B
 218+ 794B A4 6E BF 6B                  dw      USE, STORE              // use !
 219+ 794F AE 6E BF 6B                  dw      PREV, STORE             // prev !
 220+ 7953 A9 63 04 00                  dw      LIT, 4, PLACE, STORE    // 4 place !
 220+ 7957 C1 6E BF 6B
 221+ 795B              //              dw      LIT, 8
 222+ 795B              //              dw      LIT, FLAGS2, CSTORE     // 8 5C6A c!
 223+ 795B 2A 6D EF 6E                  dw      TWO, HP, STORE          // 2 hp !
 223+ 795F BF 6B
 224+ 7961 04 79        Warm_Start:     dw      WARM
 225+ 7963 1B 79        Cold_Start:     dw      COLD
 226+ 7965 99 69                        dw      EXIT
 227+ 7967
 228+ 7967              //  ______________________________________________________________________
 229+ 7967              WarmRoutine:
 230+ 7967              ColdRoutine:
 231+ 7967 DD 21 98 63                  ld      ix, Next_Ptr
 232+ 796B D9                           exx
 233+ 796C E5                           push    hl
 234+ 796D D9                           exx
 235+ 796E
 236+ 796E ED 73 6E 63                  ld      (SP_Basic), sp
 237+ 7972 ED 7B 78 63                  ld      sp, (S0_origin)
 238+ 7976              //              nop
 239+ 7976 2A 7A 63                     ld      hl, (R0_origin)
 240+ 7979              //              nop
 241+ 7979                              ldrphl
 241+ 7979 22 96 63    >                ld      (RP_Pointer),hl
 242+ 797C 01 61 79                     ld      bc, Warm_Start
 243+ 797F 38 02                        jr      c, Warm_Skip
 244+ 7981 03                           inc     bc
 245+ 7982 03                           inc     bc
 246+ 7983              Warm_Skip:
 247+ 7983                              next
 247+ 7983 DD E9       >                jp      (ix)
 248+ 7985
 249+ 7985              //  ______________________________________________________________________
 250+ 7985              //
 251+ 7985              // basic        --
 252+ 7985                              New_Def BASIC, "BASIC", is_code, is_normal
 252+ 7985             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 252+ 7985             >
 252+ 7985             >                // dummy db directives used to calculate length of namec
 252+ 7985 42 41 53 49 >                db      "BASIC"
 252+ 7989 43          >
 252+ 798A             >len_NFA         defl    $ - temp_NFA
 252+ 798A             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 252+ 7985             >
 252+ 7985 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 252+ 7986 42 41 53 49 >                db      "BASIC"               // name string in 7-bit ascii, but
 252+ 798A 43          >
 252+ 798B             >                org     $-1                 // alter last byte of Name just above to set
 252+ 798A C3          >                db      {b $} | END_BIT     // msb as name end
 252+ 798B             >
 252+ 798B 14 79       >                dw      last_NFA            // Link to previous definition Name
 252+ 798D             >BASIC:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 252+ 798D ~           >                dw      runcode ; ok        // for primitive definitions  actual code
 252+ 798D             >                else
 252+ 798D 8F 79       >                dw      $ + 2   ; ok        // is pointed by CFA
 252+ 798F             >                endif           ; ok        // for other definitions it "points" the correct handler
 252+ 798F             >                // Use of "; ok" to suppress "warning[fwdref]"
 252+ 798F             >
 252+ 798F             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 253+ 798F C1                           pop     bc
 254+ 7990 21 00 00                     ld      hl, 0
 255+ 7993 39                           add     hl, sp
 256+ 7994 ED 7B 6E 63                  ld      sp, (SP_Basic)
 257+ 7998              //              nop
 258+ 7998 22 6E 63                     ld      (SP_Basic),hl
 259+ 799B D9                           exx
 260+ 799C E1                           pop     hl
 261+ 799D D9                           exx
 262+ 799E C9                           ret     // to Basic
 263+ 799F
 264+ 799F              //  ______________________________________________________________________
 265+ 799F              //
 266+ 799F              // +-           n1 n2 -- n3
 267+ 799F              // leaves n1 with the sign of n2 as n3.
 268+ 799F                              Colon_Def PLUS_MINUS, "+-", is_normal
 268+ 799F             >                New_Def  PLUS_MINUS, "+-", Enter_Ptr, is_normal ; ok
 268+ 799F             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 268+ 799F             >
 268+ 799F             >                // dummy db directives used to calculate length of namec
 268+ 799F 2B 2D       >                db      "+-"
 268+ 79A1             >len_NFA         defl    $ - temp_NFA
 268+ 79A1             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 268+ 799F             >
 268+ 799F 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 268+ 79A0 2B 2D       >                db      "+-"               // name string in 7-bit ascii, but
 268+ 79A2             >                org     $-1                 // alter last byte of Name just above to set
 268+ 79A1 AD          >                db      {b $} | END_BIT     // msb as name end
 268+ 79A2             >
 268+ 79A2 85 79       >                dw      last_NFA            // Link to previous definition Name
 268+ 79A4             >PLUS_MINUS:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 268+ 79A4 9D 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 268+ 79A6             >                else
 268+ 79A6 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 268+ 79A6             >                endif           ; ok        // for other definitions it "points" the correct handler
 268+ 79A6             >                // Use of "; ok" to suppress "warning[fwdref]"
 268+ 79A6             >
 268+ 79A6             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 269+ 79A6 17 6A                        dw      ZLESS                   // 0<
 270+ 79A8                                                              // if
 271+ 79A8 E3 63                        dw      ZBRANCH
 272+ 79AA 04 00                        dw      Plus_Minus_Endif - $
 273+ 79AC AA 6A                        dw          MINUS               //      minus
 274+ 79AE              Plus_Minus_Endif:                               // endif
 275+ 79AE 99 69                        dw      EXIT                    // ;
 276+ 79B0
 277+ 79B0              //  ______________________________________________________________________
 278+ 79B0              //
 279+ 79B0              // d+-          d1 n -- d2
 280+ 79B0              // leaves d1 with the sign of n as d2.
 281+ 79B0                              Colon_Def DPLUS_MINUS, "D+-", is_normal
 281+ 79B0             >                New_Def  DPLUS_MINUS, "D+-", Enter_Ptr, is_normal ; ok
 281+ 79B0             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 281+ 79B0             >
 281+ 79B0             >                // dummy db directives used to calculate length of namec
 281+ 79B0 44 2B 2D    >                db      "D+-"
 281+ 79B3             >len_NFA         defl    $ - temp_NFA
 281+ 79B3             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 281+ 79B0             >
 281+ 79B0 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 281+ 79B1 44 2B 2D    >                db      "D+-"               // name string in 7-bit ascii, but
 281+ 79B4             >                org     $-1                 // alter last byte of Name just above to set
 281+ 79B3 AD          >                db      {b $} | END_BIT     // msb as name end
 281+ 79B4             >
 281+ 79B4 9F 79       >                dw      last_NFA            // Link to previous definition Name
 281+ 79B6             >DPLUS_MINUS:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 281+ 79B6 9D 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 281+ 79B8             >                else
 281+ 79B8 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 281+ 79B8             >                endif           ; ok        // for other definitions it "points" the correct handler
 281+ 79B8             >                // Use of "; ok" to suppress "warning[fwdref]"
 281+ 79B8             >
 281+ 79B8             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 282+ 79B8 17 6A                        dw      ZLESS                   // 0<
 283+ 79BA                                                              // if
 284+ 79BA E3 63                        dw      ZBRANCH
 285+ 79BC 04 00                        dw      DPlus_Minus_Endif - $
 286+ 79BE C0 6A                        dw          DMINUS              //      dminus
 287+ 79C0              DPlus_Minus_Endif:                              // endif
 288+ 79C0 99 69                        dw      EXIT                    // ;
 289+ 79C2
 290+ 79C2              //  ______________________________________________________________________
 291+ 79C2              //
 292+ 79C2              // abs          n1 -- n2
 293+ 79C2                              Colon_Def ABS_OP, "ABS", is_normal
 293+ 79C2             >                New_Def  ABS_OP, "ABS", Enter_Ptr, is_normal ; ok
 293+ 79C2             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 293+ 79C2             >
 293+ 79C2             >                // dummy db directives used to calculate length of namec
 293+ 79C2 41 42 53    >                db      "ABS"
 293+ 79C5             >len_NFA         defl    $ - temp_NFA
 293+ 79C5             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 293+ 79C2             >
 293+ 79C2 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 293+ 79C3 41 42 53    >                db      "ABS"               // name string in 7-bit ascii, but
 293+ 79C6             >                org     $-1                 // alter last byte of Name just above to set
 293+ 79C5 D3          >                db      {b $} | END_BIT     // msb as name end
 293+ 79C6             >
 293+ 79C6 B0 79       >                dw      last_NFA            // Link to previous definition Name
 293+ 79C8             >ABS_OP:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 293+ 79C8 9D 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 293+ 79CA             >                else
 293+ 79CA ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 293+ 79CA             >                endif           ; ok        // for other definitions it "points" the correct handler
 293+ 79CA             >                // Use of "; ok" to suppress "warning[fwdref]"
 293+ 79CA             >
 293+ 79CA             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 294+ 79CA 1F 6B                        dw      DUP                     // dup
 295+ 79CC A4 79                        dw      PLUS_MINUS              // +-
 296+ 79CE 99 69                        dw      EXIT                    // ;
 297+ 79D0
 298+ 79D0              //  ______________________________________________________________________
 299+ 79D0              //
 300+ 79D0              // dabs         d1 -- d2
 301+ 79D0                              Colon_Def DABS, "DABS", is_normal
 301+ 79D0             >                New_Def  DABS, "DABS", Enter_Ptr, is_normal ; ok
 301+ 79D0             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 301+ 79D0             >
 301+ 79D0             >                // dummy db directives used to calculate length of namec
 301+ 79D0 44 41 42 53 >                db      "DABS"
 301+ 79D4             >len_NFA         defl    $ - temp_NFA
 301+ 79D4             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 301+ 79D0             >
 301+ 79D0 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 301+ 79D1 44 41 42 53 >                db      "DABS"               // name string in 7-bit ascii, but
 301+ 79D5             >                org     $-1                 // alter last byte of Name just above to set
 301+ 79D4 D3          >                db      {b $} | END_BIT     // msb as name end
 301+ 79D5             >
 301+ 79D5 C2 79       >                dw      last_NFA            // Link to previous definition Name
 301+ 79D7             >DABS:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 301+ 79D7 9D 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 301+ 79D9             >                else
 301+ 79D9 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 301+ 79D9             >                endif           ; ok        // for other definitions it "points" the correct handler
 301+ 79D9             >                // Use of "; ok" to suppress "warning[fwdref]"
 301+ 79D9             >
 301+ 79D9             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 302+ 79D9 1F 6B                        dw      DUP                     // dup
 303+ 79DB B6 79                        dw      DPLUS_MINUS             // d+-
 304+ 79DD 99 69                        dw      EXIT                    // ;
 305+ 79DF
 306+ 79DF              //  ______________________________________________________________________
 307+ 79DF              //
 308+ 79DF              // m*           n1 n2 -- d
 309+ 79DF              // multiply two integer giving a double
 310+ 79DF                              Colon_Def MMUL, "M*", is_normal
 310+ 79DF             >                New_Def  MMUL, "M*", Enter_Ptr, is_normal ; ok
 310+ 79DF             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 310+ 79DF             >
 310+ 79DF             >                // dummy db directives used to calculate length of namec
 310+ 79DF 4D 2A       >                db      "M*"
 310+ 79E1             >len_NFA         defl    $ - temp_NFA
 310+ 79E1             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 310+ 79DF             >
 310+ 79DF 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 310+ 79E0 4D 2A       >                db      "M*"               // name string in 7-bit ascii, but
 310+ 79E2             >                org     $-1                 // alter last byte of Name just above to set
 310+ 79E1 AA          >                db      {b $} | END_BIT     // msb as name end
 310+ 79E2             >
 310+ 79E2 D0 79       >                dw      last_NFA            // Link to previous definition Name
 310+ 79E4             >MMUL:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 310+ 79E4 9D 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 310+ 79E6             >                else
 310+ 79E6 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 310+ 79E6             >                endif           ; ok        // for other definitions it "points" the correct handler
 310+ 79E6             >                // Use of "; ok" to suppress "warning[fwdref]"
 310+ 79E6             >
 310+ 79E6             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 311+ 79E6 80 6B 4E 69                  dw      TWO_DUP, XOR_OP, TO_R   // 2dup xor >r
 311+ 79EA C7 69
 312+ 79EC C8 79 12 6B                  dw      ABS_OP, SWAP            // abs swap
 313+ 79F0 C8 79 BC 68                  dw      ABS_OP, UM_MUL          // abs um*
 314+ 79F4 DB 69 B6 79                  dw      R_TO, DPLUS_MINUS       // r> d+-
 315+ 79F8 99 69                        dw      EXIT                    // ;
 316+ 79FA
 317+ 79FA              //  ______________________________________________________________________
 318+ 79FA              //
 319+ 79FA              // sm/rem       d n -- q r
 320+ 79FA              // Symmetric division: divides a double into n giving quotient q and remainder r
 321+ 79FA              // the remainder has the sign of d.
 322+ 79FA                              Colon_Def SMDIVM, "SM/REM", is_normal
 322+ 79FA             >                New_Def  SMDIVM, "SM/REM", Enter_Ptr, is_normal ; ok
 322+ 79FA             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 322+ 79FA             >
 322+ 79FA             >                // dummy db directives used to calculate length of namec
 322+ 79FA 53 4D 2F 52 >                db      "SM/REM"
 322+ 79FE 45 4D       >
 322+ 7A00             >len_NFA         defl    $ - temp_NFA
 322+ 7A00             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 322+ 79FA             >
 322+ 79FA 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 322+ 79FB 53 4D 2F 52 >                db      "SM/REM"               // name string in 7-bit ascii, but
 322+ 79FF 45 4D       >
 322+ 7A01             >                org     $-1                 // alter last byte of Name just above to set
 322+ 7A00 CD          >                db      {b $} | END_BIT     // msb as name end
 322+ 7A01             >
 322+ 7A01 DF 79       >                dw      last_NFA            // Link to previous definition Name
 322+ 7A03             >SMDIVM:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 322+ 7A03 9D 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 322+ 7A05             >                else
 322+ 7A05 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 322+ 7A05             >                endif           ; ok        // for other definitions it "points" the correct handler
 322+ 7A05             >                // Use of "; ok" to suppress "warning[fwdref]"
 322+ 7A05             >
 322+ 7A05             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 323+ 7A05 DA 6A C7 69                  dw      OVER, TO_R, TO_R        // over >r >r
 323+ 7A09 C7 69
 324+ 7A0B D7 79 EF 69                  dw      DABS, R_OP, ABS_OP      // dabs r abs
 324+ 7A0F C8 79
 325+ 7A11 ED 68                        dw      UMDIVMOD                // um/mod
 326+ 7A13 DB 69                        dw      R_TO                    // r>
 327+ 7A15 EF 69 4E 69                  dw      R_OP, XOR_OP            // r xor
 328+ 7A19 A4 79 12 6B                  dw      PLUS_MINUS, SWAP        // +- swap
 329+ 7A1D DB 69                        dw      R_TO                    // r>
 330+ 7A1F A4 79 12 6B                  dw      PLUS_MINUS, SWAP        // +- swap
 331+ 7A23 99 69                        dw      EXIT                    // ;
 332+ 7A25
 333+ 7A25              //  ______________________________________________________________________
 334+ 7A25              //
 335+ 7A25              // fm/mod       d n -- q r
 336+ 7A25              // Floored division: divides a double into n giving quotient q and remainder r
 337+ 7A25              // the remainder has the sign of d.
 338+ 7A25                              Colon_Def FMDIVM, "FM/MOD", is_normal
 338+ 7A25             >                New_Def  FMDIVM, "FM/MOD", Enter_Ptr, is_normal ; ok
 338+ 7A25             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 338+ 7A25             >
 338+ 7A25             >                // dummy db directives used to calculate length of namec
 338+ 7A25 46 4D 2F 4D >                db      "FM/MOD"
 338+ 7A29 4F 44       >
 338+ 7A2B             >len_NFA         defl    $ - temp_NFA
 338+ 7A2B             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 338+ 7A25             >
 338+ 7A25 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 338+ 7A26 46 4D 2F 4D >                db      "FM/MOD"               // name string in 7-bit ascii, but
 338+ 7A2A 4F 44       >
 338+ 7A2C             >                org     $-1                 // alter last byte of Name just above to set
 338+ 7A2B C4          >                db      {b $} | END_BIT     // msb as name end
 338+ 7A2C             >
 338+ 7A2C FA 79       >                dw      last_NFA            // Link to previous definition Name
 338+ 7A2E             >FMDIVM:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 338+ 7A2E 9D 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 338+ 7A30             >                else
 338+ 7A30 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 338+ 7A30             >                endif           ; ok        // for other definitions it "points" the correct handler
 338+ 7A30             >                // Use of "; ok" to suppress "warning[fwdref]"
 338+ 7A30             >
 338+ 7A30             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 339+ 7A30 1F 6B C7 69                  dw      DUP, TO_R               // dup >r
 340+ 7A34 03 7A                        dw      SMDIVM
 341+ 7A36 DA 6A 1F 6B                  dw      OVER, DUP
 342+ 7A3A FC 69 FC 69                  dw      ZEQUAL, ZEQUAL
 343+ 7A3E 12 6B 17 6A                  dw      SWAP, ZLESS
 344+ 7A42 EF 69 17 6A                  dw      R_OP, ZLESS
 345+ 7A46 4E 69 29 69                  dw      XOR_OP, AND_OP
 346+ 7A4A E3 63                        dw      ZBRANCH
 347+ 7A4C 10 00                        dw      Fm_Mod_Else - $
 348+ 7A4E 6C 6A                        dw          ONE_SUBTRACT
 349+ 7A50 12 6B DB 69                  dw          SWAP, R_TO
 350+ 7A54 3F 6A 12 6B                  dw          PLUS, SWAP
 351+ 7A58 CC 63                        dw      BRANCH
 352+ 7A5A 06 00                        dw      Fm_Mod_Endif - $
 353+ 7A5C              Fm_Mod_Else:
 354+ 7A5C DB 69 EA 6A                  dw          R_TO, DROP
 355+ 7A60              Fm_Mod_Endif:
 356+ 7A60 99 69                        dw      EXIT
 357+ 7A62              //              dw      TWO_DUP                 // 2dup
 358+ 7A62              //              dw      XOR_OP, TO_R, TO_R      // xor >r >r
 359+ 7A62              //              dw      DABS, R_OP, ABS_OP      // dabs r abs
 360+ 7A62              //              dw      UMDIVMOD                // um/mod
 361+ 7A62              //              dw      SWAP                    // swap
 362+ 7A62              //              dw      II, ZLESS               // i'
 363+ 7A62              //              dw      ONE, AND_OP, PLUS       // 0< 1 and +
 364+ 7A62              //              dw      R_TO                    // r>
 365+ 7A62              //              dw      PLUS_MINUS, SWAP        // +- swap
 366+ 7A62              //              dw      R_OP                    // r@
 367+ 7A62              //              dw      ZLESS                   // i'
 368+ 7A62              //              dw      ONE, AND_OP, PLUS       // 0< 1 and +
 369+ 7A62              //              dw      R_TO                    // r>
 370+ 7A62              //              dw      PLUS_MINUS              // +- swap
 371+ 7A62              //              dw      EXIT                    // ;
 372+ 7A62
 373+ 7A62              //  ______________________________________________________________________
 374+ 7A62              //
 375+ 7A62              // m/mod        d n -- q r
 376+ 7A62              // multiply two integer giving a double
 377+ 7A62                              Colon_Def MDIVM, "M/MOD", is_normal
 377+ 7A62             >                New_Def  MDIVM, "M/MOD", Enter_Ptr, is_normal ; ok
 377+ 7A62             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 377+ 7A62             >
 377+ 7A62             >                // dummy db directives used to calculate length of namec
 377+ 7A62 4D 2F 4D 4F >                db      "M/MOD"
 377+ 7A66 44          >
 377+ 7A67             >len_NFA         defl    $ - temp_NFA
 377+ 7A67             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 377+ 7A62             >
 377+ 7A62 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 377+ 7A63 4D 2F 4D 4F >                db      "M/MOD"               // name string in 7-bit ascii, but
 377+ 7A67 44          >
 377+ 7A68             >                org     $-1                 // alter last byte of Name just above to set
 377+ 7A67 C4          >                db      {b $} | END_BIT     // msb as name end
 377+ 7A68             >
 377+ 7A68 25 7A       >                dw      last_NFA            // Link to previous definition Name
 377+ 7A6A             >MDIVM:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 377+ 7A6A 9D 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 377+ 7A6C             >                else
 377+ 7A6C ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 377+ 7A6C             >                endif           ; ok        // for other definitions it "points" the correct handler
 377+ 7A6C             >                // Use of "; ok" to suppress "warning[fwdref]"
 377+ 7A6C             >
 377+ 7A6C             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 378+ 7A6C 03 7A                        dw      SMDIVM
 379+ 7A6E 99 69                        dw      EXIT                    // ;
 380+ 7A70
 381+ 7A70              //  ______________________________________________________________________
 382+ 7A70              //
 383+ 7A70              // m/           d n -- q
 384+ 7A70              // multiply two integer giving a double
 385+ 7A70                              Colon_Def MDIV, "M/", is_normal
 385+ 7A70             >                New_Def  MDIV, "M/", Enter_Ptr, is_normal ; ok
 385+ 7A70             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 385+ 7A70             >
 385+ 7A70             >                // dummy db directives used to calculate length of namec
 385+ 7A70 4D 2F       >                db      "M/"
 385+ 7A72             >len_NFA         defl    $ - temp_NFA
 385+ 7A72             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 385+ 7A70             >
 385+ 7A70 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 385+ 7A71 4D 2F       >                db      "M/"               // name string in 7-bit ascii, but
 385+ 7A73             >                org     $-1                 // alter last byte of Name just above to set
 385+ 7A72 AF          >                db      {b $} | END_BIT     // msb as name end
 385+ 7A73             >
 385+ 7A73 62 7A       >                dw      last_NFA            // Link to previous definition Name
 385+ 7A75             >MDIV:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 385+ 7A75 9D 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 385+ 7A77             >                else
 385+ 7A77 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 385+ 7A77             >                endif           ; ok        // for other definitions it "points" the correct handler
 385+ 7A77             >                // Use of "; ok" to suppress "warning[fwdref]"
 385+ 7A77             >
 385+ 7A77             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 386+ 7A77 6A 7A F5 6A                  dw      MDIVM, NIP
 387+ 7A7B 99 69                        dw      EXIT                    // ;
 388+ 7A7D
 389+ 7A7D              //  ______________________________________________________________________
 390+ 7A7D              //
 391+ 7A7D              // *            n1 n2 -- n3
 392+ 7A7D              // multiply two integer
 393+ 7A7D                              Colon_Def MUL, "*", is_normal
 393+ 7A7D             >                New_Def  MUL, "*", Enter_Ptr, is_normal ; ok
 393+ 7A7D             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 393+ 7A7D             >
 393+ 7A7D             >                // dummy db directives used to calculate length of namec
 393+ 7A7D 2A          >                db      "*"
 393+ 7A7E             >len_NFA         defl    $ - temp_NFA
 393+ 7A7E             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 393+ 7A7D             >
 393+ 7A7D 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 393+ 7A7E 2A          >                db      "*"               // name string in 7-bit ascii, but
 393+ 7A7F             >                org     $-1                 // alter last byte of Name just above to set
 393+ 7A7E AA          >                db      {b $} | END_BIT     // msb as name end
 393+ 7A7F             >
 393+ 7A7F 70 7A       >                dw      last_NFA            // Link to previous definition Name
 393+ 7A81             >MUL:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 393+ 7A81 9D 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 393+ 7A83             >                else
 393+ 7A83 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 393+ 7A83             >                endif           ; ok        // for other definitions it "points" the correct handler
 393+ 7A83             >                // Use of "; ok" to suppress "warning[fwdref]"
 393+ 7A83             >
 393+ 7A83             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 394+ 7A83 E4 79 EA 6A                  dw      MMUL, DROP              // m* drop
 395+ 7A87 99 69                        dw      EXIT                    // ;
 396+ 7A89
 397+ 7A89              //  ______________________________________________________________________
 398+ 7A89              //
 399+ 7A89              // /mod         n1 n2 -- n3 n4
 400+ 7A89              // leaves quotient n4 and remainder n3 of the integer division n1 / n2.
 401+ 7A89              // The remainder has the sign of n1
 402+ 7A89                              Colon_Def DIVMOD, "/MOD", is_normal
 402+ 7A89             >                New_Def  DIVMOD, "/MOD", Enter_Ptr, is_normal ; ok
 402+ 7A89             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 402+ 7A89             >
 402+ 7A89             >                // dummy db directives used to calculate length of namec
 402+ 7A89 2F 4D 4F 44 >                db      "/MOD"
 402+ 7A8D             >len_NFA         defl    $ - temp_NFA
 402+ 7A8D             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 402+ 7A89             >
 402+ 7A89 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 402+ 7A8A 2F 4D 4F 44 >                db      "/MOD"               // name string in 7-bit ascii, but
 402+ 7A8E             >                org     $-1                 // alter last byte of Name just above to set
 402+ 7A8D C4          >                db      {b $} | END_BIT     // msb as name end
 402+ 7A8E             >
 402+ 7A8E 7D 7A       >                dw      last_NFA            // Link to previous definition Name
 402+ 7A90             >DIVMOD:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 402+ 7A90 9D 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 402+ 7A92             >                else
 402+ 7A92 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 402+ 7A92             >                endif           ; ok        // for other definitions it "points" the correct handler
 402+ 7A92             >                // Use of "; ok" to suppress "warning[fwdref]"
 402+ 7A92             >
 402+ 7A92             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 403+ 7A92 C7 69 38 6F                  dw      TO_R, S_TO_D, R_TO      // >r s->d r>
 403+ 7A96 DB 69
 404+ 7A98 6A 7A                        dw      MDIVM                   // m/mod
 405+ 7A9A 99 69                        dw      EXIT                    // ;
 406+ 7A9C
 407+ 7A9C              //  ______________________________________________________________________
 408+ 7A9C              //
 409+ 7A9C              // /            n1 n2 -- n3
 410+ 7A9C              // division
 411+ 7A9C                              Colon_Def DIV, "/", is_normal
 411+ 7A9C             >                New_Def  DIV, "/", Enter_Ptr, is_normal ; ok
 411+ 7A9C             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 411+ 7A9C             >
 411+ 7A9C             >                // dummy db directives used to calculate length of namec
 411+ 7A9C 2F          >                db      "/"
 411+ 7A9D             >len_NFA         defl    $ - temp_NFA
 411+ 7A9D             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 411+ 7A9C             >
 411+ 7A9C 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 411+ 7A9D 2F          >                db      "/"               // name string in 7-bit ascii, but
 411+ 7A9E             >                org     $-1                 // alter last byte of Name just above to set
 411+ 7A9D AF          >                db      {b $} | END_BIT     // msb as name end
 411+ 7A9E             >
 411+ 7A9E 89 7A       >                dw      last_NFA            // Link to previous definition Name
 411+ 7AA0             >DIV:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 411+ 7AA0 9D 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 411+ 7AA2             >                else
 411+ 7AA2 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 411+ 7AA2             >                endif           ; ok        // for other definitions it "points" the correct handler
 411+ 7AA2             >                // Use of "; ok" to suppress "warning[fwdref]"
 411+ 7AA2             >
 411+ 7AA2             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 412+ 7AA2 90 7A F5 6A                  dw      DIVMOD, NIP             // /mod nip
 413+ 7AA6 99 69                        dw      EXIT                    // ;
 414+ 7AA8
 415+ 7AA8              //  ______________________________________________________________________
 416+ 7AA8              //
 417+ 7AA8              // mod          n1 n2 -- n3
 418+ 7AA8                              Colon_Def MOD, "MOD", is_normal
 418+ 7AA8             >                New_Def  MOD, "MOD", Enter_Ptr, is_normal ; ok
 418+ 7AA8             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 418+ 7AA8             >
 418+ 7AA8             >                // dummy db directives used to calculate length of namec
 418+ 7AA8 4D 4F 44    >                db      "MOD"
 418+ 7AAB             >len_NFA         defl    $ - temp_NFA
 418+ 7AAB             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 418+ 7AA8             >
 418+ 7AA8 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 418+ 7AA9 4D 4F 44    >                db      "MOD"               // name string in 7-bit ascii, but
 418+ 7AAC             >                org     $-1                 // alter last byte of Name just above to set
 418+ 7AAB C4          >                db      {b $} | END_BIT     // msb as name end
 418+ 7AAC             >
 418+ 7AAC 9C 7A       >                dw      last_NFA            // Link to previous definition Name
 418+ 7AAE             >MOD:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 418+ 7AAE 9D 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 418+ 7AB0             >                else
 418+ 7AB0 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 418+ 7AB0             >                endif           ; ok        // for other definitions it "points" the correct handler
 418+ 7AB0             >                // Use of "; ok" to suppress "warning[fwdref]"
 418+ 7AB0             >
 418+ 7AB0             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 419+ 7AB0 90 7A EA 6A                  dw      DIVMOD, DROP            // /mod drop
 420+ 7AB4 99 69                        dw      EXIT                    // ;
 421+ 7AB6
 422+ 7AB6              //  ______________________________________________________________________
 423+ 7AB6              //
 424+ 7AB6              // */mod        n1 n2 n3 -- n4 n5
 425+ 7AB6              // leaves the quotient n5 and the remainder n4 of the operation
 426+ 7AB6              // (n1 * n2) / n3. The intermediate passage through a double number
 427+ 7AB6              // avoids loss of precision
 428+ 7AB6                              Colon_Def MUL_DIV_MOD, "*/MOD", is_normal
 428+ 7AB6             >                New_Def  MUL_DIV_MOD, "*/MOD", Enter_Ptr, is_normal ; ok
 428+ 7AB6             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 428+ 7AB6             >
 428+ 7AB6             >                // dummy db directives used to calculate length of namec
 428+ 7AB6 2A 2F 4D 4F >                db      "*/MOD"
 428+ 7ABA 44          >
 428+ 7ABB             >len_NFA         defl    $ - temp_NFA
 428+ 7ABB             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 428+ 7AB6             >
 428+ 7AB6 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 428+ 7AB7 2A 2F 4D 4F >                db      "*/MOD"               // name string in 7-bit ascii, but
 428+ 7ABB 44          >
 428+ 7ABC             >                org     $-1                 // alter last byte of Name just above to set
 428+ 7ABB C4          >                db      {b $} | END_BIT     // msb as name end
 428+ 7ABC             >
 428+ 7ABC A8 7A       >                dw      last_NFA            // Link to previous definition Name
 428+ 7ABE             >MUL_DIV_MOD:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 428+ 7ABE 9D 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 428+ 7AC0             >                else
 428+ 7AC0 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 428+ 7AC0             >                endif           ; ok        // for other definitions it "points" the correct handler
 428+ 7AC0             >                // Use of "; ok" to suppress "warning[fwdref]"
 428+ 7AC0             >
 428+ 7AC0             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 429+ 7AC0 C7 69 E4 79                  dw      TO_R, MMUL              // >r  m*
 430+ 7AC4 DB 69 6A 7A                  dw      R_TO, MDIVM             // r>  m/mod
 431+ 7AC8 99 69                        dw      EXIT                    // ;
 432+ 7ACA
 433+ 7ACA              //  ______________________________________________________________________
 434+ 7ACA              //
 435+ 7ACA              // */          n1 n2 n3 -- n4
 436+ 7ACA              // (n1 * n2) / n3. The intermediate passage through a double number avoids loss of precision
 437+ 7ACA                              Colon_Def MUL_DIV, "*/", is_normal
 437+ 7ACA             >                New_Def  MUL_DIV, "*/", Enter_Ptr, is_normal ; ok
 437+ 7ACA             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 437+ 7ACA             >
 437+ 7ACA             >                // dummy db directives used to calculate length of namec
 437+ 7ACA 2A 2F       >                db      "*/"
 437+ 7ACC             >len_NFA         defl    $ - temp_NFA
 437+ 7ACC             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 437+ 7ACA             >
 437+ 7ACA 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 437+ 7ACB 2A 2F       >                db      "*/"               // name string in 7-bit ascii, but
 437+ 7ACD             >                org     $-1                 // alter last byte of Name just above to set
 437+ 7ACC AF          >                db      {b $} | END_BIT     // msb as name end
 437+ 7ACD             >
 437+ 7ACD B6 7A       >                dw      last_NFA            // Link to previous definition Name
 437+ 7ACF             >MUL_DIV:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 437+ 7ACF 9D 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 437+ 7AD1             >                else
 437+ 7AD1 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 437+ 7AD1             >                endif           ; ok        // for other definitions it "points" the correct handler
 437+ 7AD1             >                // Use of "; ok" to suppress "warning[fwdref]"
 437+ 7AD1             >
 437+ 7AD1             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 438+ 7AD1 BE 7A                        dw     MUL_DIV_MOD              // */mod
 439+ 7AD3 F5 6A                        dw     NIP                      // nip
 440+ 7AD5 99 69                        dw     EXIT                     // ;
 441+ 7AD7
 442+ 7AD7
 443+ 7AD7              //  ______________________________________________________________________
 444+ 7AD7              //
 445+ 7AD7              // m/mod        ud1 u2 -- u3 ud4
 446+ 7AD7              // mixed operation: it leaves the remainder u3 and the quotient ud4 of ud1 / u1.
 447+ 7AD7              // All terms are unsigned.
 448+ 7AD7              //              Colon_Def MDIV_MOD, "M/MOD", is_normal
 449+ 7AD7              //              dw      TO_R                    // >r           ( ud1 )
 450+ 7AD7              //              dw      ZERO, R_OP, UMDIVMOD    // 0 r um/mod   ( l rem1 h/r )
 451+ 7AD7              //              dw      R_TO, SWAP, TO_R        // r> swap >r   ( l rem )
 452+ 7AD7              //              dw      UMDIVMOD                // um/mod       ( rem2 l/r )
 453+ 7AD7              //              dw      R_TO                    // r>           ( rem2 l/r h/r )
 454+ 7AD7              //              dw      EXIT                    // ;
 455+ 7AD7
 456+ 7AD7              //  ______________________________________________________________________
 457+ 7AD7              //
 458+ 7AD7              // (line)       n1 n2 -- a b
 459+ 7AD7              // sends the line n1 of block n2 to the disk buffer.
 460+ 7AD7              // it returns the address a and ca counter b = C/L meaning a whole line.
 461+ 7AD7                              Colon_Def CLINE, "(LINE)", is_normal
 461+ 7AD7             >                New_Def  CLINE, "(LINE)", Enter_Ptr, is_normal ; ok
 461+ 7AD7             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 461+ 7AD7             >
 461+ 7AD7             >                // dummy db directives used to calculate length of namec
 461+ 7AD7 28 4C 49 4E >                db      "(LINE)"
 461+ 7ADB 45 29       >
 461+ 7ADD             >len_NFA         defl    $ - temp_NFA
 461+ 7ADD             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 461+ 7AD7             >
 461+ 7AD7 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 461+ 7AD8 28 4C 49 4E >                db      "(LINE)"               // name string in 7-bit ascii, but
 461+ 7ADC 45 29       >
 461+ 7ADE             >                org     $-1                 // alter last byte of Name just above to set
 461+ 7ADD A9          >                db      {b $} | END_BIT     // msb as name end
 461+ 7ADE             >
 461+ 7ADE CA 7A       >                dw      last_NFA            // Link to previous definition Name
 461+ 7AE0             >CLINE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 461+ 7AE0 9D 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 461+ 7AE2             >                else
 461+ 7AE2 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 461+ 7AE2             >                endif           ; ok        // for other definitions it "points" the correct handler
 461+ 7AE2             >                // Use of "; ok" to suppress "warning[fwdref]"
 461+ 7AE2             >
 461+ 7AE2             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 462+ 7AE2 C7 69                        dw      TO_R                    // >r
 463+ 7AE4 C5 6C                        dw      NOOP                    // noop
 464+ 7AE6 4E 6D                        dw      CL                      // c/l
 465+ 7AE8 5A 6D BE 7A                  dw      BBUF, MUL_DIV_MOD       // */mod
 466+ 7AEC DB 69                        dw      R_TO                    // r>
 467+ 7AEE 66 6D 81 7A                  dw      BSCR, MUL, PLUS         // b/scr * +
 467+ 7AF2 3F 6A
 468+ 7AF4 9B 7D                        dw      BLOCK                   // block   ( forward )
 469+ 7AF6 3F 6A                        dw      PLUS                    // +
 470+ 7AF8 C5 6C                        dw      NOOP                    // noop
 471+ 7AFA 4E 6D                        dw      CL                      // c/l
 472+ 7AFC 99 69                        dw      EXIT                    // ;
 473+ 7AFE
 474+ 7AFE              //  ______________________________________________________________________
 475+ 7AFE              //
 476+ 7AFE              // .line        n1 n2 --
 477+ 7AFE              // Sends to output line  n1  of screen n2.
 478+ 7AFE                              Colon_Def DOT_LINE, ".LINE", is_normal
 478+ 7AFE             >                New_Def  DOT_LINE, ".LINE", Enter_Ptr, is_normal ; ok
 478+ 7AFE             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 478+ 7AFE             >
 478+ 7AFE             >                // dummy db directives used to calculate length of namec
 478+ 7AFE 2E 4C 49 4E >                db      ".LINE"
 478+ 7B02 45          >
 478+ 7B03             >len_NFA         defl    $ - temp_NFA
 478+ 7B03             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 478+ 7AFE             >
 478+ 7AFE 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 478+ 7AFF 2E 4C 49 4E >                db      ".LINE"               // name string in 7-bit ascii, but
 478+ 7B03 45          >
 478+ 7B04             >                org     $-1                 // alter last byte of Name just above to set
 478+ 7B03 C5          >                db      {b $} | END_BIT     // msb as name end
 478+ 7B04             >
 478+ 7B04 D7 7A       >                dw      last_NFA            // Link to previous definition Name
 478+ 7B06             >DOT_LINE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 478+ 7B06 9D 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 478+ 7B08             >                else
 478+ 7B08 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 478+ 7B08             >                endif           ; ok        // for other definitions it "points" the correct handler
 478+ 7B08             >                // Use of "; ok" to suppress "warning[fwdref]"
 478+ 7B08             >
 478+ 7B08             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 479+ 7B08 E0 7A E7 72                  dw      CLINE, LTRAILING, TYPE  // (line) -trailing type
 479+ 7B0C 83 72
 480+ 7B0E 99 69                        dw      EXIT                    // ;
 481+ 7B10
 482+ 7B10              //  ______________________________________________________________________
 483+ 7B10              //
 484+ 7B10              // message       n1 n2 --
 485+ 7B10              // prints error message to current channel.
 486+ 7B10              // if WARNING is 0, prints "MSG#n".
 487+ 7B10              // if WARNING is 1, prints line n of screen 4.
 488+ 7B10              // if WARNING is -1, see ERROR
 489+ 7B10              // value can be negative or beyond block 4.
 490+ 7B10                              Colon_Def MESSAGE, "MESSAGE", is_normal
 490+ 7B10             >                New_Def  MESSAGE, "MESSAGE", Enter_Ptr, is_normal ; ok
 490+ 7B10             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 490+ 7B10             >
 490+ 7B10             >                // dummy db directives used to calculate length of namec
 490+ 7B10 4D 45 53 53 >                db      "MESSAGE"
 490+ 7B14 41 47 45    >
 490+ 7B17             >len_NFA         defl    $ - temp_NFA
 490+ 7B17             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 490+ 7B10             >
 490+ 7B10 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 490+ 7B11 4D 45 53 53 >                db      "MESSAGE"               // name string in 7-bit ascii, but
 490+ 7B15 41 47 45    >
 490+ 7B18             >                org     $-1                 // alter last byte of Name just above to set
 490+ 7B17 C5          >                db      {b $} | END_BIT     // msb as name end
 490+ 7B18             >
 490+ 7B18 FE 7A       >                dw      last_NFA            // Link to previous definition Name
 490+ 7B1A             >MESSAGE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 490+ 7B1A 9D 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 490+ 7B1C             >                else
 490+ 7B1C ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 490+ 7B1C             >                endif           ; ok        // for other definitions it "points" the correct handler
 490+ 7B1C             >                // Use of "; ok" to suppress "warning[fwdref]"
 490+ 7B1C             >
 490+ 7B1C             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 491+ 7B1C C5 6D B2 6B                  dw      WARNING, FETCH          // warning @
 492+ 7B20                                                              // if
 493+ 7B20 E3 63                        dw      ZBRANCH
 494+ 7B22 18 00                        dw      Message_Else - $
 495+ 7B24 A9 63 04 00                  dw          LIT, 4              //      4
 496+ 7B28 40 6E B2 6B                  dw          OFFSET, FETCH       //      offset @
 497+ 7B2C 66 6D A0 7A                  dw          BSCR, DIV, SUBTRACT //      b/scr / -
 497+ 7B30 4C 6F
 498+ 7B32 06 7B                        dw          DOT_LINE            //      .line
 499+ 7B34 09 70                        dw          SPACE               //      space
 500+ 7B36                                                              // else
 501+ 7B36
 502+ 7B36 CC 63                        dw      BRANCH
 503+ 7B38 0B 00                        dw      Message_ENdif - $
 504+ 7B3A              Message_Else:
 505+ 7B3A 97 74                        dw          C_DOT_QUOTE         //      .( msg#)
 506+ 7B3C 04 6D 73 67                  db          4, "msg#"
 506+ 7B40 23
 507+ 7B41 58 83                        dw          DOT                 //      .  ( forward )
 508+ 7B43              Message_ENdif:                                  // endif
 509+ 7B43 99 69                        dw      EXIT                    // ;
 510+ 7B45
 511+ 7B45
 512+ 7B45              //  ______________________________________________________________________
 513+ 7B45              //
 514+ 7B45              // device
 515+ 7B45                              Variable_Def DEVICE,   "DEVICE",   2
 515+ 7B45             >                New_Def  DEVICE, "DEVICE", Variable_Ptr, is_normal
 515+ 7B45             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 515+ 7B45             >
 515+ 7B45             >                // dummy db directives used to calculate length of namec
 515+ 7B45 44 45 56 49 >                db      "DEVICE"
 515+ 7B49 43 45       >
 515+ 7B4B             >len_NFA         defl    $ - temp_NFA
 515+ 7B4B             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 515+ 7B45             >
 515+ 7B45 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 515+ 7B46 44 45 56 49 >                db      "DEVICE"               // name string in 7-bit ascii, but
 515+ 7B4A 43 45       >
 515+ 7B4C             >                org     $-1                 // alter last byte of Name just above to set
 515+ 7B4B C5          >                db      {b $} | END_BIT     // msb as name end
 515+ 7B4C             >
 515+ 7B4C 10 7B       >                dw      last_NFA            // Link to previous definition Name
 515+ 7B4E             >DEVICE:          if Variable_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 515+ 7B4E F7 6C       >                dw      Variable_Ptr ; ok        // for primitive definitions  actual code
 515+ 7B50             >                else
 515+ 7B50 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 515+ 7B50             >                endif           ; ok        // for other definitions it "points" the correct handler
 515+ 7B50             >                // Use of "; ok" to suppress "warning[fwdref]"
 515+ 7B50             >
 515+ 7B50             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 515+ 7B50 02 00       >                dw      2
 516+ 7B52
 517+ 7B52              //  ______________________________________________________________________
 518+ 7B52
# file closed: C:\Zx\CSpect\Projects\vForth15_INDIRECT/source/L2.asm
 112  7B52                              include "next-opt1.asm"
# file opened: C:\Zx\CSpect\Projects\vForth15_INDIRECT/source/next-opt1.asm
   1+ 7B52              //  ______________________________________________________________________
   2+ 7B52              //
   3+ 7B52              //  next-opt.asm
   4+ 7B52              //
   5+ 7B52              //  ZX Spectrum Next - peculiar definitions
   6+ 7B52              //  ______________________________________________________________________
   7+ 7B52
   8+ 7B52              //  ______________________________________________________________________
   9+ 7B52              //
  10+ 7B52              // reg@         n -- b
  11+ 7B52              // read Next REGister n giving byte b
  12+ 7B52
  13+ 7B52                              New_Def REG_FETCH, "REG@", is_code, is_normal
  13+ 7B52             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  13+ 7B52             >
  13+ 7B52             >                // dummy db directives used to calculate length of namec
  13+ 7B52 52 45 47 40 >                db      "REG@"
  13+ 7B56             >len_NFA         defl    $ - temp_NFA
  13+ 7B56             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  13+ 7B52             >
  13+ 7B52 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  13+ 7B53 52 45 47 40 >                db      "REG@"               // name string in 7-bit ascii, but
  13+ 7B57             >                org     $-1                 // alter last byte of Name just above to set
  13+ 7B56 C0          >                db      {b $} | END_BIT     // msb as name end
  13+ 7B57             >
  13+ 7B57 45 7B       >                dw      last_NFA            // Link to previous definition Name
  13+ 7B59             >REG_FETCH:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
  13+ 7B59 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
  13+ 7B59             >                else
  13+ 7B59 5B 7B       >                dw      $ + 2   ; ok        // is pointed by CFA
  13+ 7B5B             >                endif           ; ok        // for other definitions it "points" the correct handler
  13+ 7B5B             >                // Use of "; ok" to suppress "warning[fwdref]"
  13+ 7B5B             >
  13+ 7B5B             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  14+ 7B5B D9                           exx
  15+ 7B5C 01 3B 24                     ld      bc, $243B
  16+ 7B5F E1                           pop     hl
  17+ 7B60 ED 69                        out     (c), l
  18+ 7B62 04                           inc     b
  19+ 7B63 ED 68                        in      l,(c)
  20+ 7B65 E5                           push    hl
  21+ 7B66 D9                           exx
  22+ 7B67                              next
  22+ 7B67 DD E9       >                jp      (ix)
  23+ 7B69
  24+ 7B69
  25+ 7B69              //  ______________________________________________________________________
  26+ 7B69              //
  27+ 7B69              // reg!         b n --
  28+ 7B69              // write value b to Next REGister n
  29+ 7B69
  30+ 7B69                              New_Def REG_STORE, "REG!", is_code, is_normal
  30+ 7B69             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  30+ 7B69             >
  30+ 7B69             >                // dummy db directives used to calculate length of namec
  30+ 7B69 52 45 47 21 >                db      "REG!"
  30+ 7B6D             >len_NFA         defl    $ - temp_NFA
  30+ 7B6D             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  30+ 7B69             >
  30+ 7B69 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  30+ 7B6A 52 45 47 21 >                db      "REG!"               // name string in 7-bit ascii, but
  30+ 7B6E             >                org     $-1                 // alter last byte of Name just above to set
  30+ 7B6D A1          >                db      {b $} | END_BIT     // msb as name end
  30+ 7B6E             >
  30+ 7B6E 52 7B       >                dw      last_NFA            // Link to previous definition Name
  30+ 7B70             >REG_STORE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
  30+ 7B70 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
  30+ 7B70             >                else
  30+ 7B70 72 7B       >                dw      $ + 2   ; ok        // is pointed by CFA
  30+ 7B72             >                endif           ; ok        // for other definitions it "points" the correct handler
  30+ 7B72             >                // Use of "; ok" to suppress "warning[fwdref]"
  30+ 7B72             >
  30+ 7B72             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  31+ 7B72 D9                           exx
  32+ 7B73 01 3B 24                     ld      bc, $243B
  33+ 7B76 E1                           pop     hl
  34+ 7B77 ED 69                        out     (c), l
  35+ 7B79 04                           inc     b
  36+ 7B7A E1                           pop     hl
  37+ 7B7B ED 69                        out     (c), l
  38+ 7B7D D9                           exx
  39+ 7B7E                              next
  39+ 7B7E DD E9       >                jp      (ix)
  40+ 7B80
  41+ 7B80
  42+ 7B80              //  ______________________________________________________________________
  43+ 7B80              //
  44+ 7B80              // mmu7@        -- n
  45+ 7B80              // query current page in MMU7 8K-RAM : 0 and 223
  46+ 7B80
  47+ 7B80                              Colon_Def MMU7_FETCH, "MMU7@", is_normal
  47+ 7B80             >                New_Def  MMU7_FETCH, "MMU7@", Enter_Ptr, is_normal ; ok
  47+ 7B80             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  47+ 7B80             >
  47+ 7B80             >                // dummy db directives used to calculate length of namec
  47+ 7B80 4D 4D 55 37 >                db      "MMU7@"
  47+ 7B84 40          >
  47+ 7B85             >len_NFA         defl    $ - temp_NFA
  47+ 7B85             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  47+ 7B80             >
  47+ 7B80 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  47+ 7B81 4D 4D 55 37 >                db      "MMU7@"               // name string in 7-bit ascii, but
  47+ 7B85 40          >
  47+ 7B86             >                org     $-1                 // alter last byte of Name just above to set
  47+ 7B85 C0          >                db      {b $} | END_BIT     // msb as name end
  47+ 7B86             >
  47+ 7B86 69 7B       >                dw      last_NFA            // Link to previous definition Name
  47+ 7B88             >MMU7_FETCH:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
  47+ 7B88 9D 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
  47+ 7B8A             >                else
  47+ 7B8A ~           >                dw      $ + 2   ; ok        // is pointed by CFA
  47+ 7B8A             >                endif           ; ok        // for other definitions it "points" the correct handler
  47+ 7B8A             >                // Use of "; ok" to suppress "warning[fwdref]"
  47+ 7B8A             >
  47+ 7B8A             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  48+ 7B8A A9 63 57 00                  dw      LIT, 87, REG_FETCH
  48+ 7B8E 59 7B
  49+ 7B90 99 69                        dw      EXIT
  50+ 7B92
  51+ 7B92              //  ______________________________________________________________________
  52+ 7B92              //
  53+ 7B92              // mmu7!        n --
  54+ 7B92              // set MMU7 8K-RAM page to n given between 0 and 223
  55+ 7B92              // optimized version that uses NEXTREG n,A Z80n op-code.
  56+ 7B92
  57+ 7B92                              New_Def MMU7_STORE, "MMU7!", is_code, is_normal
  57+ 7B92             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  57+ 7B92             >
  57+ 7B92             >                // dummy db directives used to calculate length of namec
  57+ 7B92 4D 4D 55 37 >                db      "MMU7!"
  57+ 7B96 21          >
  57+ 7B97             >len_NFA         defl    $ - temp_NFA
  57+ 7B97             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  57+ 7B92             >
  57+ 7B92 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  57+ 7B93 4D 4D 55 37 >                db      "MMU7!"               // name string in 7-bit ascii, but
  57+ 7B97 21          >
  57+ 7B98             >                org     $-1                 // alter last byte of Name just above to set
  57+ 7B97 A1          >                db      {b $} | END_BIT     // msb as name end
  57+ 7B98             >
  57+ 7B98 80 7B       >                dw      last_NFA            // Link to previous definition Name
  57+ 7B9A             >MMU7_STORE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
  57+ 7B9A ~           >                dw      runcode ; ok        // for primitive definitions  actual code
  57+ 7B9A             >                else
  57+ 7B9A 9C 7B       >                dw      $ + 2   ; ok        // is pointed by CFA
  57+ 7B9C             >                endif           ; ok        // for other definitions it "points" the correct handler
  57+ 7B9C             >                // Use of "; ok" to suppress "warning[fwdref]"
  57+ 7B9C             >
  57+ 7B9C             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  58+ 7B9C E1                           pop     hl
  59+ 7B9D 7D                           ld      a, l
  60+ 7B9E ED 92 57                     nextreg 87, a
  61+ 7BA1
  62+ 7BA1                              next
  62+ 7BA1 DD E9       >                jp      (ix)
  63+ 7BA3
  64+ 7BA3              //  ______________________________________________________________________
  65+ 7BA3              //
  66+ 7BA3              // >far         ha -- a n
  67+ 7BA3              // decode bits 765 of H as one of the 8K-page between 64 and 71 (40h-47h)
  68+ 7BA3              // take lower bits of H and L as an offset from E000h
  69+ 7BA3              // then return address  a  between E000h-FFFFh
  70+ 7BA3              // and page number n  between 64-71 (40h-47h)
  71+ 7BA3              // For example, in hex:
  72+ 7BA3              //   0000 >FAR  gives  40.E000
  73+ 7BA3              //   1FFF >FAR  gives  40.FFFF
  74+ 7BA3              //   2000 >FAR  gives  41.E000
  75+ 7BA3              //   3FFF >FAR  gives  41.FFFF
  76+ 7BA3              //   EFFF >FAR  gives  47.EFFF
  77+ 7BA3              //   FFFF >FAR  gives  47.FFFF
  78+ 7BA3              //                New_Def TO_FAR, ">FAR", is_code, is_normal
  79+ 7BA3              //                pop     de
  80+ 7BA3              //                ld      a, d
  81+ 7BA3              //                and     $E0
  82+ 7BA3              //                rlca
  83+ 7BA3              //                rlca
  84+ 7BA3              //                rlca
  85+ 7BA3              //                add     $40
  86+ 7BA3              //                ld      l, a
  87+ 7BA3              //                ld      h, 0
  88+ 7BA3              //                ld      a, d
  89+ 7BA3              //                or      $E0
  90+ 7BA3              //                ld      d, a
  91+ 7BA3              //                push    hl
  92+ 7BA3              //                push    de
  93+ 7BA3              //                next
  94+ 7BA3
  95+ 7BA3              //  ______________________________________________________________________
  96+ 7BA3              //
  97+ 7BA3              // <far         a n  -- ha
  98+ 7BA3              // given an address E000-FFFF and a page number n (64-71 or 40h-47h)
  99+ 7BA3              // reverse of >FAR: encodes a FAR address compressing
 100+ 7BA3              // to bits 765 of H, lower bits of HL address offset from E000h
 101+ 7BA3              //                New_Def FROM_FAR, "<FAR", is_code, is_normal
 102+ 7BA3              //                pop     de                  // page number in e
 103+ 7BA3              //                pop     hl                  // address in hl
 104+ 7BA3              //                ld      a, e
 105+ 7BA3              //                sub     $40                 // reduced to 0-7
 106+ 7BA3              //                rrca
 107+ 7BA3              //                rrca
 108+ 7BA3              //                rrca
 109+ 7BA3              //                ld      d, a                // save to d bits 765
 110+ 7BA3              //                ld      a, h                // drops
 111+ 7BA3              //                and     $1F
 112+ 7BA3              //                or      d
 113+ 7BA3              //                ld      h, a
 114+ 7BA3              //
 115+ 7BA3              //                psh1
 116+ 7BA3
 117+ 7BA3              //  ______________________________________________________________________
 118+ 7BA3              //
 119+ 7BA3              // m_p3dos      n1 n2 n3 n4 a -- n5 n6 n7 n8  f
 120+ 7BA3              // NextZXOS call wrapper.
 121+ 7BA3              //  n1 = hl register parameter value
 122+ 7BA3              //  n2 = de register parameter value
 123+ 7BA3              //  n3 = bc register parameter value
 124+ 7BA3              //  n4 =  a register parameter value
 125+ 7BA3              //   a = routine address in ROM 3
 126+ 7BA3              // ----
 127+ 7BA3              //  n5 = hl returned value
 128+ 7BA3              //  n6 = de returned value
 129+ 7BA3              //  n7 = bc returned value
 130+ 7BA3              //  n8 =  a returned value
 131+ 7BA3              //   f
 132+ 7BA3                              New_Def M_P3DOS, "M_P3DOS", is_code, is_normal
 132+ 7BA3             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 132+ 7BA3             >
 132+ 7BA3             >                // dummy db directives used to calculate length of namec
 132+ 7BA3 4D 5F 50 33 >                db      "M_P3DOS"
 132+ 7BA7 44 4F 53    >
 132+ 7BAA             >len_NFA         defl    $ - temp_NFA
 132+ 7BAA             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 132+ 7BA3             >
 132+ 7BA3 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 132+ 7BA4 4D 5F 50 33 >                db      "M_P3DOS"               // name string in 7-bit ascii, but
 132+ 7BA8 44 4F 53    >
 132+ 7BAB             >                org     $-1                 // alter last byte of Name just above to set
 132+ 7BAA D3          >                db      {b $} | END_BIT     // msb as name end
 132+ 7BAB             >
 132+ 7BAB 92 7B       >                dw      last_NFA            // Link to previous definition Name
 132+ 7BAD             >M_P3DOS:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 132+ 7BAD ~           >                dw      runcode ; ok        // for primitive definitions  actual code
 132+ 7BAD             >                else
 132+ 7BAD AF 7B       >                dw      $ + 2   ; ok        // is pointed by CFA
 132+ 7BAF             >                endif           ; ok        // for other definitions it "points" the correct handler
 132+ 7BAF             >                // Use of "; ok" to suppress "warning[fwdref]"
 132+ 7BAF             >
 132+ 7BAF             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 133+ 7BAF D1                           pop     de                  // dos call entry address in de
 134+ 7BB0 E1                           pop     hl                  // a register
 135+ 7BB1 7D                           ld      a, l
 136+ 7BB2 D9                           exx
 137+ 7BB3 C1                           pop     bc
 138+ 7BB4 D1                           pop     de
 139+ 7BB5 E1                           pop     hl
 140+ 7BB6 D9                           exx
 141+ 7BB7
 142+ 7BB7 C5                           push    bc
 143+ 7BB8 DD E5                        push    ix
 144+ 7BBA
 145+ 7BBA              //              ld      (SP_Saved), sp
 146+ 7BBA              //              ld      sp, Cold_origin - 5
 147+ 7BBA 0E 07                        ld      c, 7                // use 7 RAM Bank
 148+ 7BBC
 149+ 7BBC CF                           rst     08
 150+ 7BBD 94                           db      $94
 151+ 7BBE
 152+ 7BBE              //              ld      sp, (SP_Saved)
 153+ 7BBE              //              push    ix
 154+ 7BBE              //              pop     hl
 155+ 7BBE              //              ld      (IX_Echo), hl
 156+ 7BBE DD 22 90 63                  ld      (IX_Echo), ix
 157+ 7BC2              //              nop
 158+ 7BC2 DD E1                        pop     ix
 159+ 7BC4 E3                           ex      (sp), hl            // hl argument and retrieve bc
 160+ 7BC5 D5                           push    de
 161+ 7BC6 C5                           push    bc
 162+ 7BC7 4D                           ld      c, l
 163+ 7BC8 44                           ld      b, h
 164+ 7BC9
 165+ 7BC9 26 00                        ld      h, 0
 166+ 7BCB 6F                           ld      l, a
 167+ 7BCC E5                           push    hl
 168+ 7BCD ED 62                        sbc     hl, hl              // -1 for OK ; 0 for KO but now...
 169+ 7BCF 23                           inc     hl                  //  0 for OK ; 1 for ko
 170+ 7BD0
 171+ 7BD0                              psh1
 171+ 7BD0 E5          >                push    hl
 171+ 7BD1 DD E9       >                jp      (ix)
 172+ 7BD3
 173+ 7BD3              //  ______________________________________________________________________
 174+ 7BD3              //
 175+ 7BD3              // blk-fh
 176+ 7BD3                              Variable_Def BLK_FH,   "BLK-FH",   1
 176+ 7BD3             >                New_Def  BLK_FH, "BLK-FH", Variable_Ptr, is_normal
 176+ 7BD3             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 176+ 7BD3             >
 176+ 7BD3             >                // dummy db directives used to calculate length of namec
 176+ 7BD3 42 4C 4B 2D >                db      "BLK-FH"
 176+ 7BD7 46 48       >
 176+ 7BD9             >len_NFA         defl    $ - temp_NFA
 176+ 7BD9             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 176+ 7BD3             >
 176+ 7BD3 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 176+ 7BD4 42 4C 4B 2D >                db      "BLK-FH"               // name string in 7-bit ascii, but
 176+ 7BD8 46 48       >
 176+ 7BDA             >                org     $-1                 // alter last byte of Name just above to set
 176+ 7BD9 C8          >                db      {b $} | END_BIT     // msb as name end
 176+ 7BDA             >
 176+ 7BDA A3 7B       >                dw      last_NFA            // Link to previous definition Name
 176+ 7BDC             >BLK_FH:          if Variable_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 176+ 7BDC F7 6C       >                dw      Variable_Ptr ; ok        // for primitive definitions  actual code
 176+ 7BDE             >                else
 176+ 7BDE ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 176+ 7BDE             >                endif           ; ok        // for other definitions it "points" the correct handler
 176+ 7BDE             >                // Use of "; ok" to suppress "warning[fwdref]"
 176+ 7BDE             >
 176+ 7BDE             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 176+ 7BDE 01 00       >                dw      1
 177+ 7BE0
 178+ 7BE0                              New_Def BLK_FNAME,   "BLK-FNAME", Create_Ptr, is_normal
 178+ 7BE0             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 178+ 7BE0             >
 178+ 7BE0             >                // dummy db directives used to calculate length of namec
 178+ 7BE0 42 4C 4B 2D >                db      "BLK-FNAME"
 178+ 7BE4 46 4E 41 4D >
 178+ 7BE8 45          >
 178+ 7BE9             >len_NFA         defl    $ - temp_NFA
 178+ 7BE9             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 178+ 7BE0             >
 178+ 7BE0 89          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 178+ 7BE1 42 4C 4B 2D >                db      "BLK-FNAME"               // name string in 7-bit ascii, but
 178+ 7BE5 46 4E 41 4D >
 178+ 7BE9 45          >
 178+ 7BEA             >                org     $-1                 // alter last byte of Name just above to set
 178+ 7BE9 C5          >                db      {b $} | END_BIT     // msb as name end
 178+ 7BEA             >
 178+ 7BEA D3 7B       >                dw      last_NFA            // Link to previous definition Name
 178+ 7BEC             >BLK_FNAME:          if Create_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 178+ 7BEC FB 76       >                dw      Create_Ptr ; ok        // for primitive definitions  actual code
 178+ 7BEE             >                else
 178+ 7BEE ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 178+ 7BEE             >                endif           ; ok        // for other definitions it "points" the correct handler
 178+ 7BEE             >                // Use of "; ok" to suppress "warning[fwdref]"
 178+ 7BEE             >
 178+ 7BEE             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 179+ 7BEE 0E 21 42 6C                  db      14, "!Blocks-64.bin", 0
 179+ 7BF2 6F 63 6B 73
 179+ 7BF6 2D 36 34 2E
 179+ 7BFA 62 69 6E 00
 180+ 7BFE 00 00 00...                  ds      24
 181+ 7C16
 182+ 7C16              //  ______________________________________________________________________
 183+ 7C16              //
 184+ 7C16              // blk-seek     n --
 185+ 7C16              // seek block n  within blocks!.bin  file
 186+ 7C16                              Colon_Def BLK_SEEK, "BLK-SEEK", is_normal
 186+ 7C16             >                New_Def  BLK_SEEK, "BLK-SEEK", Enter_Ptr, is_normal ; ok
 186+ 7C16             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 186+ 7C16             >
 186+ 7C16             >                // dummy db directives used to calculate length of namec
 186+ 7C16 42 4C 4B 2D >                db      "BLK-SEEK"
 186+ 7C1A 53 45 45 4B >
 186+ 7C1E             >len_NFA         defl    $ - temp_NFA
 186+ 7C1E             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 186+ 7C16             >
 186+ 7C16 88          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 186+ 7C17 42 4C 4B 2D >                db      "BLK-SEEK"               // name string in 7-bit ascii, but
 186+ 7C1B 53 45 45 4B >
 186+ 7C1F             >                org     $-1                 // alter last byte of Name just above to set
 186+ 7C1E CB          >                db      {b $} | END_BIT     // msb as name end
 186+ 7C1F             >
 186+ 7C1F E0 7B       >                dw      last_NFA            // Link to previous definition Name
 186+ 7C21             >BLK_SEEK:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 186+ 7C21 9D 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 186+ 7C23             >                else
 186+ 7C23 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 186+ 7C23             >                endif           ; ok        // for other definitions it "points" the correct handler
 186+ 7C23             >                // Use of "; ok" to suppress "warning[fwdref]"
 186+ 7C23             >
 186+ 7C23             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 187+ 7C23 5A 6D E4 79                  dw  BBUF, MMUL
 188+ 7C27 DC 7B B2 6B                  dw  BLK_FH, FETCH
 189+ 7C2B 88 67                        dw  F_SEEK
 190+ 7C2D A9 63 2D 00                  dw  LIT, $2D, QERROR
 190+ 7C31 C3 70
 191+ 7C33 99 69                        dw  EXIT
 192+ 7C35
 193+ 7C35              //  ______________________________________________________________________
 194+ 7C35              //
 195+ 7C35              // blk-read     n --
 196+ 7C35              // seek block n  within blocks!.bin  file
 197+ 7C35                              Colon_Def BLK_READ, "BLK-READ", is_normal
 197+ 7C35             >                New_Def  BLK_READ, "BLK-READ", Enter_Ptr, is_normal ; ok
 197+ 7C35             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 197+ 7C35             >
 197+ 7C35             >                // dummy db directives used to calculate length of namec
 197+ 7C35 42 4C 4B 2D >                db      "BLK-READ"
 197+ 7C39 52 45 41 44 >
 197+ 7C3D             >len_NFA         defl    $ - temp_NFA
 197+ 7C3D             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 197+ 7C35             >
 197+ 7C35 88          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 197+ 7C36 42 4C 4B 2D >                db      "BLK-READ"               // name string in 7-bit ascii, but
 197+ 7C3A 52 45 41 44 >
 197+ 7C3E             >                org     $-1                 // alter last byte of Name just above to set
 197+ 7C3D C4          >                db      {b $} | END_BIT     // msb as name end
 197+ 7C3E             >
 197+ 7C3E 16 7C       >                dw      last_NFA            // Link to previous definition Name
 197+ 7C40             >BLK_READ:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 197+ 7C40 9D 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 197+ 7C42             >                else
 197+ 7C42 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 197+ 7C42             >                endif           ; ok        // for other definitions it "points" the correct handler
 197+ 7C42             >                // Use of "; ok" to suppress "warning[fwdref]"
 197+ 7C42             >
 197+ 7C42             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 198+ 7C42 21 7C                        dw  BLK_SEEK
 199+ 7C44 5A 6D                        dw  BBUF
 200+ 7C46 DC 7B B2 6B                  dw  BLK_FH, FETCH
 201+ 7C4A F4 67                        dw  F_READ
 202+ 7C4C A9 63 2E 00                  dw  LIT, $2E, QERROR
 202+ 7C50 C3 70
 203+ 7C52 EA 6A                        dw  DROP
 204+ 7C54 99 69                        dw  EXIT
 205+ 7C56
 206+ 7C56              //  ______________________________________________________________________
 207+ 7C56              //
 208+ 7C56              // blk-write     n --
 209+ 7C56              // seek block n  within blocks!.bin  file
 210+ 7C56                              Colon_Def BLK_WRITE, "BLK-WRITE", is_normal
 210+ 7C56             >                New_Def  BLK_WRITE, "BLK-WRITE", Enter_Ptr, is_normal ; ok
 210+ 7C56             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 210+ 7C56             >
 210+ 7C56             >                // dummy db directives used to calculate length of namec
 210+ 7C56 42 4C 4B 2D >                db      "BLK-WRITE"
 210+ 7C5A 57 52 49 54 >
 210+ 7C5E 45          >
 210+ 7C5F             >len_NFA         defl    $ - temp_NFA
 210+ 7C5F             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 210+ 7C56             >
 210+ 7C56 89          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 210+ 7C57 42 4C 4B 2D >                db      "BLK-WRITE"               // name string in 7-bit ascii, but
 210+ 7C5B 57 52 49 54 >
 210+ 7C5F 45          >
 210+ 7C60             >                org     $-1                 // alter last byte of Name just above to set
 210+ 7C5F C5          >                db      {b $} | END_BIT     // msb as name end
 210+ 7C60             >
 210+ 7C60 35 7C       >                dw      last_NFA            // Link to previous definition Name
 210+ 7C62             >BLK_WRITE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 210+ 7C62 9D 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 210+ 7C64             >                else
 210+ 7C64 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 210+ 7C64             >                endif           ; ok        // for other definitions it "points" the correct handler
 210+ 7C64             >                // Use of "; ok" to suppress "warning[fwdref]"
 210+ 7C64             >
 210+ 7C64             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 211+ 7C64 21 7C                        dw  BLK_SEEK
 212+ 7C66 5A 6D                        dw  BBUF
 213+ 7C68 DC 7B B2 6B                  dw  BLK_FH, FETCH
 214+ 7C6C 13 68                        dw  F_WRITE
 215+ 7C6E A9 63 2F 00                  dw  LIT, $2F, QERROR
 215+ 7C72 C3 70
 216+ 7C74 EA 6A                        dw  DROP
 217+ 7C76 99 69                        dw  EXIT
 218+ 7C78
 219+ 7C78              //  ______________________________________________________________________
 220+ 7C78              //
 221+ 7C78              // blk-init     n --
 222+ 7C78              // seek block n  within blocks!.bin  file
 223+ 7C78                              Colon_Def BLK_INIT, "BLK-INIT", is_normal
 223+ 7C78             >                New_Def  BLK_INIT, "BLK-INIT", Enter_Ptr, is_normal ; ok
 223+ 7C78             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 223+ 7C78             >
 223+ 7C78             >                // dummy db directives used to calculate length of namec
 223+ 7C78 42 4C 4B 2D >                db      "BLK-INIT"
 223+ 7C7C 49 4E 49 54 >
 223+ 7C80             >len_NFA         defl    $ - temp_NFA
 223+ 7C80             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 223+ 7C78             >
 223+ 7C78 88          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 223+ 7C79 42 4C 4B 2D >                db      "BLK-INIT"               // name string in 7-bit ascii, but
 223+ 7C7D 49 4E 49 54 >
 223+ 7C81             >                org     $-1                 // alter last byte of Name just above to set
 223+ 7C80 D4          >                db      {b $} | END_BIT     // msb as name end
 223+ 7C81             >
 223+ 7C81 56 7C       >                dw      last_NFA            // Link to previous definition Name
 223+ 7C83             >BLK_INIT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 223+ 7C83 9D 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 223+ 7C85             >                else
 223+ 7C85 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 223+ 7C85             >                endif           ; ok        // for other definitions it "points" the correct handler
 223+ 7C85             >                // Use of "; ok" to suppress "warning[fwdref]"
 223+ 7C85             >
 223+ 7C85             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 224+ 7C85 DC 7B B2 6B                  dw  BLK_FH, FETCH, F_CLOSE, DROP
 224+ 7C89 AB 67 EA 6A
 225+ 7C8D EC 7B 60 6A                  dw  BLK_FNAME, ONE_PLUS
 226+ 7C91 F9 6E 32 6D                  dw  HERE, THREE, F_OPEN         // open for update (read+write)
 226+ 7C95 2A 68
 227+ 7C97 A9 63 2C 00                  dw  LIT, $2C, QERROR
 227+ 7C9B C3 70
 228+ 7C9D DC 7B BF 6B                  dw  BLK_FH, STORE
 229+ 7CA1 99 69                        dw  EXIT
 230+ 7CA3
 231+ 7CA3              //  ______________________________________________________________________
 232+ 7CA3              //
 233+ 7CA3              // #sec
 234+ 7CA3              // number of 512 Byte "sector" available on thie sysstem.
 235+ 7CA3              // it addd up to 16 MByte of data that can be used as source or pool for almost anything.
 236+ 7CA3
 237+ 7CA3                              Constant_Def NSEC , "#SEC", 32767
 237+ 7CA3             >                New_Def  NSEC, "#SEC", Constant_Ptr, is_normal
 237+ 7CA3             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 237+ 7CA3             >
 237+ 7CA3             >                // dummy db directives used to calculate length of namec
 237+ 7CA3 23 53 45 43 >                db      "#SEC"
 237+ 7CA7             >len_NFA         defl    $ - temp_NFA
 237+ 7CA7             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 237+ 7CA3             >
 237+ 7CA3 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 237+ 7CA4 23 53 45 43 >                db      "#SEC"               // name string in 7-bit ascii, but
 237+ 7CA8             >                org     $-1                 // alter last byte of Name just above to set
 237+ 7CA7 C3          >                db      {b $} | END_BIT     // msb as name end
 237+ 7CA8             >
 237+ 7CA8 78 7C       >                dw      last_NFA            // Link to previous definition Name
 237+ 7CAA             >NSEC:          if Constant_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 237+ 7CAA DC 6C       >                dw      Constant_Ptr ; ok        // for primitive definitions  actual code
 237+ 7CAC             >                else
 237+ 7CAC ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 237+ 7CAC             >                endif           ; ok        // for other definitions it "points" the correct handler
 237+ 7CAC             >                // Use of "; ok" to suppress "warning[fwdref]"
 237+ 7CAC             >
 237+ 7CAC             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 237+ 7CAC FF 7F       >                dw      32767
 238+ 7CAE
 239+ 7CAE              //  ______________________________________________________________________
 240+ 7CAE
 241+ 7CAE
 242+ 7CAE
# file closed: C:\Zx\CSpect\Projects\vForth15_INDIRECT/source/next-opt1.asm
 113  7CAE                              include "L3.asm"
# file opened: C:\Zx\CSpect\Projects\vForth15_INDIRECT/source/L3.asm
   1+ 7CAE              //  ______________________________________________________________________
   2+ 7CAE              //
   3+ 7CAE              //  L3.asm
   4+ 7CAE              //
   5+ 7CAE              //  Continuation of L2.asm
   6+ 7CAE              //  I/O Block definitions
   7+ 7CAE              //  ______________________________________________________________________
   8+ 7CAE
   9+ 7CAE
  10+ 7CAE              //  ______________________________________________________________________
  11+ 7CAE              //
  12+ 7CAE              // r/w          a n f --
  13+ 7CAE              // read/write block n depending on flag f, true-flag means read, false-flag means write.
  14+ 7CAE                              Colon_Def READ_WRITE, "R/W", is_normal
  14+ 7CAE             >                New_Def  READ_WRITE, "R/W", Enter_Ptr, is_normal ; ok
  14+ 7CAE             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  14+ 7CAE             >
  14+ 7CAE             >                // dummy db directives used to calculate length of namec
  14+ 7CAE 52 2F 57    >                db      "R/W"
  14+ 7CB1             >len_NFA         defl    $ - temp_NFA
  14+ 7CB1             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  14+ 7CAE             >
  14+ 7CAE 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  14+ 7CAF 52 2F 57    >                db      "R/W"               // name string in 7-bit ascii, but
  14+ 7CB2             >                org     $-1                 // alter last byte of Name just above to set
  14+ 7CB1 D7          >                db      {b $} | END_BIT     // msb as name end
  14+ 7CB2             >
  14+ 7CB2 A3 7C       >                dw      last_NFA            // Link to previous definition Name
  14+ 7CB4             >READ_WRITE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
  14+ 7CB4 9D 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
  14+ 7CB6             >                else
  14+ 7CB6 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
  14+ 7CB6             >                endif           ; ok        // for other definitions it "points" the correct handler
  14+ 7CB6             >                // Use of "; ok" to suppress "warning[fwdref]"
  14+ 7CB6             >
  14+ 7CB6             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  15+ 7CB6 C7 69                        dw      TO_R                    // >r
  16+ 7CB8 6C 6A                        dw      ONE_SUBTRACT            // 1-
  17+ 7CBA 1F 6B 17 6A                  dw      DUP, ZLESS              // dup 0<
  18+ 7CBE DA 6A AA 7C                  dw      OVER, NSEC              // over #sec
  19+ 7CC2 6C 6A 97 6F                  dw      ONE_SUBTRACT, GREATER   // 1- >
  20+ 7CC6 3B 69                        dw      OR_OP                   // or
  21+ 7CC8 A9 63 06 00                  dw      LIT, 6, QERROR          // 6 ?error
  21+ 7CCC C3 70
  22+ 7CCE DB 69                        dw      R_TO                    // r>
  23+ 7CD0                                                              // if
  24+ 7CD0 E3 63                        dw      ZBRANCH
  25+ 7CD2 08 00                        dw      Read_Write_Else - $
  26+ 7CD4 40 7C                        dw          BLK_READ            //      blk-read
  27+ 7CD6 CC 63                        dw      BRANCH
  28+ 7CD8 04 00                        dw      Read_Write_Endif - $
  29+ 7CDA              Read_Write_Else:                                // else
  30+ 7CDA 62 7C                        dw          BLK_WRITE           //      blk-write
  31+ 7CDC              Read_Write_Endif:                               // endif
  32+ 7CDC 99 69                        dw      EXIT                    // ;
  33+ 7CDE
  34+ 7CDE
  35+ 7CDE              //  ______________________________________________________________________
  36+ 7CDE              //
  37+ 7CDE              // +buf        a1 -- a2 f
  38+ 7CDE              // advences to next buffer, cyclically rotating along them
  39+ 7CDE                              Colon_Def PBUF, "+BUF", is_normal
  39+ 7CDE             >                New_Def  PBUF, "+BUF", Enter_Ptr, is_normal ; ok
  39+ 7CDE             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  39+ 7CDE             >
  39+ 7CDE             >                // dummy db directives used to calculate length of namec
  39+ 7CDE 2B 42 55 46 >                db      "+BUF"
  39+ 7CE2             >len_NFA         defl    $ - temp_NFA
  39+ 7CE2             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  39+ 7CDE             >
  39+ 7CDE 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  39+ 7CDF 2B 42 55 46 >                db      "+BUF"               // name string in 7-bit ascii, but
  39+ 7CE3             >                org     $-1                 // alter last byte of Name just above to set
  39+ 7CE2 C6          >                db      {b $} | END_BIT     // msb as name end
  39+ 7CE3             >
  39+ 7CE3 AE 7C       >                dw      last_NFA            // Link to previous definition Name
  39+ 7CE5             >PBUF:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
  39+ 7CE5 9D 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
  39+ 7CE7             >                else
  39+ 7CE7 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
  39+ 7CE7             >                endif           ; ok        // for other definitions it "points" the correct handler
  39+ 7CE7             >                // Use of "; ok" to suppress "warning[fwdref]"
  39+ 7CE7             >
  39+ 7CE7             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  40+ 7CE7 A9 63 04 02                  dw      LIT, 516, PLUS          // 516 +
  40+ 7CEB 3F 6A
  41+ 7CED 1F 6B FC 6D                  dw      DUP, LIMIT, FETCH       // dup limit @
  41+ 7CF1 B2 6B
  42+ 7CF3 5A 6F                        dw      EQUALS                  // =
  43+ 7CF5                                                              // if
  44+ 7CF5 E3 63                        dw      ZBRANCH
  45+ 7CF7 08 00                        dw      PBuf_Endif - $
  46+ 7CF9 EA 6A                        dw          DROP                //      drop
  47+ 7CFB F1 6D B2 6B                  dw          FIRST, FETCH        //      first @
  48+ 7CFF              PBuf_Endif:                                     // endif
  49+ 7CFF 1F 6B AE 6E                  dw      DUP, PREV, FETCH        // dup prev @
  49+ 7D03 B2 6B
  50+ 7D05 4C 6F                        dw      SUBTRACT                // -
  51+ 7D07 99 69                        dw      EXIT                    // ;
  52+ 7D09
  53+ 7D09              //  ______________________________________________________________________
  54+ 7D09              //
  55+ 7D09              // update       --
  56+ 7D09              // mark the last used block to be written to disk
  57+ 7D09                              Colon_Def UPDATE, "UPDATE", is_normal
  57+ 7D09             >                New_Def  UPDATE, "UPDATE", Enter_Ptr, is_normal ; ok
  57+ 7D09             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  57+ 7D09             >
  57+ 7D09             >                // dummy db directives used to calculate length of namec
  57+ 7D09 55 50 44 41 >                db      "UPDATE"
  57+ 7D0D 54 45       >
  57+ 7D0F             >len_NFA         defl    $ - temp_NFA
  57+ 7D0F             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  57+ 7D09             >
  57+ 7D09 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  57+ 7D0A 55 50 44 41 >                db      "UPDATE"               // name string in 7-bit ascii, but
  57+ 7D0E 54 45       >
  57+ 7D10             >                org     $-1                 // alter last byte of Name just above to set
  57+ 7D0F C5          >                db      {b $} | END_BIT     // msb as name end
  57+ 7D10             >
  57+ 7D10 DE 7C       >                dw      last_NFA            // Link to previous definition Name
  57+ 7D12             >UPDATE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
  57+ 7D12 9D 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
  57+ 7D14             >                else
  57+ 7D14 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
  57+ 7D14             >                endif           ; ok        // for other definitions it "points" the correct handler
  57+ 7D14             >                // Use of "; ok" to suppress "warning[fwdref]"
  57+ 7D14             >
  57+ 7D14             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  58+ 7D14 AE 6E B2 6B                  dw      PREV, FETCH, FETCH      // prev @ @
  58+ 7D18 B2 6B
  59+ 7D1A A9 63 00 80                  dw      LIT, $8000, OR_OP       // $8000, or
  59+ 7D1E 3B 69
  60+ 7D20 AE 6E B2 6B                  dw      PREV, FETCH, STORE      // prev @ !
  60+ 7D24 BF 6B
  61+ 7D26 99 69                        dw      EXIT                    // ;
  62+ 7D28
  63+ 7D28
  64+ 7D28              //  ______________________________________________________________________
  65+ 7D28              //
  66+ 7D28              // empty-buffers --
  67+ 7D28                              Colon_Def EMPTY_BUFFERS, "EMPTY-BUFFERS", is_normal
  67+ 7D28             >                New_Def  EMPTY_BUFFERS, "EMPTY-BUFFERS", Enter_Ptr, is_normal ; ok
  67+ 7D28             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  67+ 7D28             >
  67+ 7D28             >                // dummy db directives used to calculate length of namec
  67+ 7D28 45 4D 50 54 >                db      "EMPTY-BUFFERS"
  67+ 7D2C 59 2D 42 55 >
  67+ 7D30 46 46 45 52 >
  67+ 7D34 53          >
  67+ 7D35             >len_NFA         defl    $ - temp_NFA
  67+ 7D35             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  67+ 7D28             >
  67+ 7D28 8D          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  67+ 7D29 45 4D 50 54 >                db      "EMPTY-BUFFERS"               // name string in 7-bit ascii, but
  67+ 7D2D 59 2D 42 55 >
  67+ 7D31 46 46 45 52 >
  67+ 7D35 53          >
  67+ 7D36             >                org     $-1                 // alter last byte of Name just above to set
  67+ 7D35 D3          >                db      {b $} | END_BIT     // msb as name end
  67+ 7D36             >
  67+ 7D36 09 7D       >                dw      last_NFA            // Link to previous definition Name
  67+ 7D38             >EMPTY_BUFFERS:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
  67+ 7D38 9D 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
  67+ 7D3A             >                else
  67+ 7D3A ~           >                dw      $ + 2   ; ok        // is pointed by CFA
  67+ 7D3A             >                endif           ; ok        // for other definitions it "points" the correct handler
  67+ 7D3A             >                // Use of "; ok" to suppress "warning[fwdref]"
  67+ 7D3A             >
  67+ 7D3A             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  68+ 7D3A F1 6D B2 6B                  dw      FIRST, FETCH            // first @
  69+ 7D3E FC 6D B2 6B                  dw      LIMIT, FETCH            // limit @
  70+ 7D42 DA 6A 4C 6F                  dw      OVER, SUBTRACT, ERASE   // over - erase
  70+ 7D46 FF 73
  71+ 7D48 99 69                        dw      EXIT                    // ;
  72+ 7D4A
  73+ 7D4A              //  ______________________________________________________________________
  74+ 7D4A              //
  75+ 7D4A              // buffer       n -- a
  76+ 7D4A              // read block n and gives the address to a buffer
  77+ 7D4A              // any block previously inside the buffer, if modified, is rewritten to
  78+ 7D4A              // disk before reading the block n.
  79+ 7D4A
  80+ 7D4A                              Colon_Def BUFFER, "BUFFER", is_normal
  80+ 7D4A             >                New_Def  BUFFER, "BUFFER", Enter_Ptr, is_normal ; ok
  80+ 7D4A             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  80+ 7D4A             >
  80+ 7D4A             >                // dummy db directives used to calculate length of namec
  80+ 7D4A 42 55 46 46 >                db      "BUFFER"
  80+ 7D4E 45 52       >
  80+ 7D50             >len_NFA         defl    $ - temp_NFA
  80+ 7D50             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  80+ 7D4A             >
  80+ 7D4A 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  80+ 7D4B 42 55 46 46 >                db      "BUFFER"               // name string in 7-bit ascii, but
  80+ 7D4F 45 52       >
  80+ 7D51             >                org     $-1                 // alter last byte of Name just above to set
  80+ 7D50 D2          >                db      {b $} | END_BIT     // msb as name end
  80+ 7D51             >
  80+ 7D51 28 7D       >                dw      last_NFA            // Link to previous definition Name
  80+ 7D53             >BUFFER:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
  80+ 7D53 9D 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
  80+ 7D55             >                else
  80+ 7D55 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
  80+ 7D55             >                endif           ; ok        // for other definitions it "points" the correct handler
  80+ 7D55             >                // Use of "; ok" to suppress "warning[fwdref]"
  80+ 7D55             >
  80+ 7D55             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  81+ 7D55 A4 6E B2 6B                  dw      USE, FETCH              // use @
  82+ 7D59 1F 6B C7 69                  dw      DUP, TO_R               // dup >r
  83+ 7D5D                                                              // begin
  84+ 7D5D              Buffer_Begin:
  85+ 7D5D E5 7C                        dw          PBUF                //      +buf
  86+ 7D5F                                                              // until
  87+ 7D5F E3 63                        dw      ZBRANCH
  88+ 7D61 FC FF                        dw      Buffer_Begin - $
  89+ 7D63 A4 6E BF 6B                  dw      USE, STORE              // use !
  90+ 7D67 EF 69 B2 6B                  dw      R_OP, FETCH, ZLESS      // r @ 0<
  90+ 7D6B 17 6A
  91+ 7D6D                                                              // if
  92+ 7D6D E3 63                        dw      ZBRANCH
  93+ 7D6F 14 00                        dw      Buffer_Endif - $
  94+ 7D71 EF 69 88 6A                  dw          R_OP, CELL_PLUS     //      r cell+
  95+ 7D75 EF 69 B2 6B                  dw          R_OP, FETCH         //      r fetch
  96+ 7D79 A9 63 FF 7F                  dw          LIT, $7FFF          //      7FFF
  97+ 7D7D 29 69                        dw          AND_OP              //      and
  98+ 7D7F 1A 6D B4 7C                  dw          ZERO, READ_WRITE    //      0 r/w
  99+ 7D83              Buffer_Endif:                                   // endif
 100+ 7D83 EF 69 BF 6B                  dw      R_OP, STORE             // r !
 101+ 7D87 EF 69 AE 6E                  dw      R_OP, PREV, STORE       // r prev !
 101+ 7D8B BF 6B
 102+ 7D8D DB 69 88 6A                  dw      R_TO, CELL_PLUS         // r> cell+
 103+ 7D91 99 69                        dw      EXIT                    // ;
 104+ 7D93
 105+ 7D93              //  ______________________________________________________________________
 106+ 7D93              //
 107+ 7D93              // block        n -- a
 108+ 7D93              // Leaves the buffer address that contains the block n.
 109+ 7D93              // If the block is not already present, it will be loaded from disk
 110+ 7D93              // The block previously inside the buffer, if modified, is rewritten to
 111+ 7D93              // disk before reading the block n.
 112+ 7D93              // See also BUFFER, R/W, UPDATE, FLUSH.
 113+ 7D93
 114+ 7D93                              Colon_Def BLOCK, "BLOCK", is_normal
 114+ 7D93             >                New_Def  BLOCK, "BLOCK", Enter_Ptr, is_normal ; ok
 114+ 7D93             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 114+ 7D93             >
 114+ 7D93             >                // dummy db directives used to calculate length of namec
 114+ 7D93 42 4C 4F 43 >                db      "BLOCK"
 114+ 7D97 4B          >
 114+ 7D98             >len_NFA         defl    $ - temp_NFA
 114+ 7D98             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 114+ 7D93             >
 114+ 7D93 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 114+ 7D94 42 4C 4F 43 >                db      "BLOCK"               // name string in 7-bit ascii, but
 114+ 7D98 4B          >
 114+ 7D99             >                org     $-1                 // alter last byte of Name just above to set
 114+ 7D98 CB          >                db      {b $} | END_BIT     // msb as name end
 114+ 7D99             >
 114+ 7D99 4A 7D       >                dw      last_NFA            // Link to previous definition Name
 114+ 7D9B             >BLOCK:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 114+ 7D9B 9D 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 114+ 7D9D             >                else
 114+ 7D9D ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 114+ 7D9D             >                endif           ; ok        // for other definitions it "points" the correct handler
 114+ 7D9D             >                // Use of "; ok" to suppress "warning[fwdref]"
 114+ 7D9D             >
 114+ 7D9D             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 115+ 7D9D 40 6E B2 6B                  dw      OFFSET, FETCH           // offset @
 116+ 7DA1 3F 6A C7 69                  dw      PLUS, TO_R              // + >r
 117+ 7DA5 AE 6E B2 6B                  dw      PREV, FETCH             // prev @
 118+ 7DA9 1F 6B B2 6B                  dw      DUP, FETCH              // dup @
 119+ 7DAD EF 69 4C 6F                  dw      R_OP, SUBTRACT          // r -
 120+ 7DB1 1F 6B 3F 6A                  dw      DUP, PLUS               // dup +  ( trick: check equality without most significant bit )
 121+ 7DB5                                                              // if
 122+ 7DB5 E3 63                        dw        ZBRANCH
 123+ 7DB7 32 00                        dw        Block_Endif_1 - $
 124+ 7DB9              Block_Begin:                                    //      begin
 125+ 7DB9 E5 7C FC 69                  dw          PBUF, ZEQUAL        //          +buf 0
 126+ 7DBD                                                              //          if
 127+ 7DBD E3 63                        dw          ZBRANCH
 128+ 7DBF 12 00                        dw          Block_Endif_2 - $
 129+ 7DC1 EA 6A                        dw              DROP            //              drop
 130+ 7DC3 EF 69 53 7D                  dw              R_OP, BUFFER    //              r buffer
 131+ 7DC7 1F 6B                        dw              DUP             //              dup
 132+ 7DC9 EF 69 22 6D                  dw              R_OP, ONE       //              r 1
 133+ 7DCD B4 7C                        dw              READ_WRITE      //              r/w
 134+ 7DCF 9F 6A                        dw              TWO_MINUS       //              2-
 135+ 7DD1              Block_Endif_2:                                  //          endif
 136+ 7DD1 1F 6B B2 6B                  dw          DUP, FETCH, R_OP    //          dup @ r
 136+ 7DD5 EF 69
 137+ 7DD7 4C 6F 1F 6B                  dw          SUBTRACT, DUP       //          - dup
 138+ 7DDB 3F 6A FC 69                  dw          PLUS, ZEQUAL        //          + 0=
 139+ 7DDF                                                              //      until
 140+ 7DDF E3 63                        dw        ZBRANCH
 141+ 7DE1 D8 FF                        dw        Block_Begin - $
 142+ 7DE3 1F 6B AE 6E                  dw        DUP, PREV, STORE      //      dup prev !
 142+ 7DE7 BF 6B
 143+ 7DE9              Block_Endif_1:                                  // endif
 144+ 7DE9 DB 69 EA 6A                  dw      R_TO, DROP, CELL_PLUS   // r> drop cell+
 144+ 7DED 88 6A
 145+ 7DEF 99 69                        dw      EXIT                    // ;
 146+ 7DF1
 147+ 7DF1              //  ______________________________________________________________________
 148+ 7DF1              //
 149+ 7DF1              // #buff        -- n
 150+ 7DF1              // number of buffers available. must be the difference between LIMIT and FIRST divided by 516
 151+ 7DF1                              Constant_Def NBUFF,   "#BUFF", 7
 151+ 7DF1             >                New_Def  NBUFF, "#BUFF", Constant_Ptr, is_normal
 151+ 7DF1             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 151+ 7DF1             >
 151+ 7DF1             >                // dummy db directives used to calculate length of namec
 151+ 7DF1 23 42 55 46 >                db      "#BUFF"
 151+ 7DF5 46          >
 151+ 7DF6             >len_NFA         defl    $ - temp_NFA
 151+ 7DF6             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 151+ 7DF1             >
 151+ 7DF1 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 151+ 7DF2 23 42 55 46 >                db      "#BUFF"               // name string in 7-bit ascii, but
 151+ 7DF6 46          >
 151+ 7DF7             >                org     $-1                 // alter last byte of Name just above to set
 151+ 7DF6 C6          >                db      {b $} | END_BIT     // msb as name end
 151+ 7DF7             >
 151+ 7DF7 93 7D       >                dw      last_NFA            // Link to previous definition Name
 151+ 7DF9             >NBUFF:          if Constant_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 151+ 7DF9 DC 6C       >                dw      Constant_Ptr ; ok        // for primitive definitions  actual code
 151+ 7DFB             >                else
 151+ 7DFB ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 151+ 7DFB             >                endif           ; ok        // for other definitions it "points" the correct handler
 151+ 7DFB             >                // Use of "; ok" to suppress "warning[fwdref]"
 151+ 7DFB             >
 151+ 7DFB             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 151+ 7DFB 07 00       >                dw      7
 152+ 7DFD
 153+ 7DFD              //  ______________________________________________________________________
 154+ 7DFD              //
 155+ 7DFD              // flush        --
 156+ 7DFD                              Colon_Def FLUSH, "FLUSH", is_normal
 156+ 7DFD             >                New_Def  FLUSH, "FLUSH", Enter_Ptr, is_normal ; ok
 156+ 7DFD             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 156+ 7DFD             >
 156+ 7DFD             >                // dummy db directives used to calculate length of namec
 156+ 7DFD 46 4C 55 53 >                db      "FLUSH"
 156+ 7E01 48          >
 156+ 7E02             >len_NFA         defl    $ - temp_NFA
 156+ 7E02             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 156+ 7DFD             >
 156+ 7DFD 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 156+ 7DFE 46 4C 55 53 >                db      "FLUSH"               // name string in 7-bit ascii, but
 156+ 7E02 48          >
 156+ 7E03             >                org     $-1                 // alter last byte of Name just above to set
 156+ 7E02 C8          >                db      {b $} | END_BIT     // msb as name end
 156+ 7E03             >
 156+ 7E03 F1 7D       >                dw      last_NFA            // Link to previous definition Name
 156+ 7E05             >FLUSH:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 156+ 7E05 9D 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 156+ 7E07             >                else
 156+ 7E07 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 156+ 7E07             >                endif           ; ok        // for other definitions it "points" the correct handler
 156+ 7E07             >                // Use of "; ok" to suppress "warning[fwdref]"
 156+ 7E07             >
 156+ 7E07             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 157+ 7E07 F9 7D 60 6A                  dw      NBUFF, ONE_PLUS, ZERO   // #buff 1+ 0
 157+ 7E0B 1A 6D
 158+ 7E0D              Flush_Do:                                       // do
 159+ 7E0D 70 64                        dw      C_DO
 160+ 7E0F 1A 6D 53 7D                  dw      ZERO, BUFFER, DROP      //      0 buffer drop
 160+ 7E13 EA 6A
 161+ 7E15                                                              // loop
 162+ 7E15 31 64 F8 FF                  dw      C_LOOP, Flush_Do - $
 163+ 7E19 DC 7B B2 6B                  dw      BLK_FH, FETCH           // blk-fh @     ( ZX-Next dependance )
 164+ 7E1D BF 67 EA 6A                  dw      F_SYNC, DROP            // f_sync drop
 165+ 7E21 99 69                        dw      EXIT                    // exit
 166+ 7E23
 167+ 7E23              //  ______________________________________________________________________
 168+ 7E23              //
 169+ 7E23              // f_getline    a m fh -- n
 170+ 7E23              // Given an open filehandle read next line (terminated with $0D or $0A)
 171+ 7E23              // Address a is left for subsequent processing
 172+ 7E23              // and n as the actual number of byte read, that is the length of line
 173+ 7E23                              Colon_Def F_GETLINE, "F_GETLINE", is_normal
 173+ 7E23             >                New_Def  F_GETLINE, "F_GETLINE", Enter_Ptr, is_normal ; ok
 173+ 7E23             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 173+ 7E23             >
 173+ 7E23             >                // dummy db directives used to calculate length of namec
 173+ 7E23 46 5F 47 45 >                db      "F_GETLINE"
 173+ 7E27 54 4C 49 4E >
 173+ 7E2B 45          >
 173+ 7E2C             >len_NFA         defl    $ - temp_NFA
 173+ 7E2C             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 173+ 7E23             >
 173+ 7E23 89          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 173+ 7E24 46 5F 47 45 >                db      "F_GETLINE"               // name string in 7-bit ascii, but
 173+ 7E28 54 4C 49 4E >
 173+ 7E2C 45          >
 173+ 7E2D             >                org     $-1                 // alter last byte of Name just above to set
 173+ 7E2C C5          >                db      {b $} | END_BIT     // msb as name end
 173+ 7E2D             >
 173+ 7E2D FD 7D       >                dw      last_NFA            // Link to previous definition Name
 173+ 7E2F             >F_GETLINE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 173+ 7E2F 9D 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 173+ 7E31             >                else
 173+ 7E31 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 173+ 7E31             >                endif           ; ok        // for other definitions it "points" the correct handler
 173+ 7E31             >                // Use of "; ok" to suppress "warning[fwdref]"
 173+ 7E31             >
 173+ 7E31             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 174+ 7E31 C7 69                        dw      TO_R                    // >r               ( a  m  )     \  fh
 175+ 7E33 02 6B                        dw      TUCK                    // tuck             ( m a m )
 176+ 7E35 EF 69 D6 67                  dw      R_OP, F_FGETPOS         // r f_fgetpos      ( m a m d f )
 177+ 7E39 A9 63 2C 00                  dw      LIT, 44, QERROR         // 44 ?error        ( m a m d )
 177+ 7E3D C3 70
 178+ 7E3F
 179+ 7E3F 6E 6B DA 6A                  dw      TWO_SWAP, OVER          // 2swap over       ( m d a m )
 180+ 7E43 60 6A 12 6B                  dw      ONE_PLUS, SWAP          // 1+ swap          ( m d a a+1 m )
 181+ 7E47
 182+ 7E47 EF 69 F4 67                  dw      R_OP, F_READ            // r f_read         ( m d a n f )
 183+ 7E4B A9 63 2E 00                  dw      LIT, 46, QERROR         // 46 ?error        ( m d a n )
 183+ 7E4F C3 70
 184+ 7E51                                                              // if ( at least 1 chr was read )  \  fh
 185+ 7E51 E3 63                        dw      ZBRANCH
 186+ 7E53 3C 00                        dw      FGetline_Else - $
 187+ 7E55 A9 63 0A 00                  dw          LIT, 10, ENCLOSE    //      10 enclose       ( m d a x b x )
 187+ 7E59 69 65
 188+ 7E5B EA 6A F5 6A                  dw          DROP, NIP           //      drop nip         ( m d a b )
 189+ 7E5F 12 6B                        dw          SWAP                //      drop swap        ( m d b a )
 190+ 7E61 A9 63 0D 00                  dw          LIT, 13, ENCLOSE    //      13 enclose       ( m d b a x c x )
 190+ 7E65 69 65
 191+ 7E67 EA 6A F5 6A                  dw          DROP, NIP           //      drop nip         ( m d b a c )
 192+ 7E6B 2C 6B A5 6F                  dw          ROT, MIN            //      rot min          ( m d a n )
 193+ 7E6F 1F 6B DA 6E                  dw          DUP, SPAN, STORE    //      dup span !       ( m d a n )
 193+ 7E73 BF 6B
 194+ 7E75 1F 6B C7 69                  dw          DUP, TO_R           //      dup >r           ( m d a n )      \ fh n
 195+ 7E79 6E 6B DB 69                  dw          TWO_SWAP, R_TO      //      2swap r>         ( m a n d n )    \ fh
 196+ 7E7D 1A 6D 4C 6A                  dw          ZERO, DPLUS         //      0 d+             ( m a n d+n )
 197+ 7E81 DB 69 88 67                  dw          R_TO, F_SEEK        //      r> f_seek        ( m a n f )
 198+ 7E85 A9 63 2D 00                  dw          LIT, 45, QERROR     //      45 ?error        ( m a n )
 198+ 7E89 C3 70
 199+ 7E8B                                                              // else
 200+ 7E8B CC 63                        dw      BRANCH
 201+ 7E8D 0C 00                        dw      FGetline_Endif - $
 202+ 7E8F              FGetline_Else:
 203+ 7E8F DB 69                        dw          R_TO                //      r>              ( m d a fh )
 204+ 7E91 6E 6B 60 6B                  dw          TWO_SWAP, TWO_DROP  //      2swap 2drop     ( m a fh )
 205+ 7E95 EA 6A 1A 6D                  dw          DROP, ZERO          //      drop, 0         ( m a 0 )
 206+ 7E99              FGetline_Endif:                                 // endif
 207+ 7E99 C7 69 1F 6B                  dw      TO_R, DUP, DUP          // >r dup dup           ( m a a a )
 207+ 7E9D 1F 6B
 208+ 7E9F 60 6A 12 6B                  dw      ONE_PLUS, SWAP          // 1+ swap              ( m a a+1 a )
 209+ 7EA3 EF 69 89 68                  dw      R_OP, CMOVE             // r cmove              ( m a )
 210+ 7EA7 80 6B 3F 6A                  dw      TWO_DUP, PLUS           // 2dup +               ( m a m+a )
 211+ 7EAB 1A 6D 12 6B                  dw      ZERO, SWAP              // 0 swap
 212+ 7EAF 92 6A BF 6B                  dw      CELL_MINUS,  STORE      // cell-  !             ( m a )
 213+ 7EB3 EF 69 3F 6A                  dw      R_OP, PLUS, ONE_SUBTRACT// r + 1-               ( m a+n1 )
 213+ 7EB7 6C 6A
 214+ 7EB9 12 6B EF 69                  dw      SWAP, R_OP, SUBTRACT    // swap r -             ( a+n+1 m-n )
 214+ 7EBD 4C 6F
 215+ 7EBF 10 74                        dw      BLANKS                  // blanks
 216+ 7EC1 DB 69                        dw      R_TO                    // r>                   ( n )
 217+ 7EC3 99 69                        dw      EXIT                    // ;
 218+ 7EC5
 219+ 7EC5              //  ______________________________________________________________________
 220+ 7EC5              //
 221+ 7EC5              // f_include    fh --
 222+ 7EC5              // Given a filehandle includes the source from file
 223+ 7EC5                              Colon_Def F_INCLUDE, "F_INCLUDE", is_normal
 223+ 7EC5             >                New_Def  F_INCLUDE, "F_INCLUDE", Enter_Ptr, is_normal ; ok
 223+ 7EC5             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 223+ 7EC5             >
 223+ 7EC5             >                // dummy db directives used to calculate length of namec
 223+ 7EC5 46 5F 49 4E >                db      "F_INCLUDE"
 223+ 7EC9 43 4C 55 44 >
 223+ 7ECD 45          >
 223+ 7ECE             >len_NFA         defl    $ - temp_NFA
 223+ 7ECE             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 223+ 7EC5             >
 223+ 7EC5 89          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 223+ 7EC6 46 5F 49 4E >                db      "F_INCLUDE"               // name string in 7-bit ascii, but
 223+ 7ECA 43 4C 55 44 >
 223+ 7ECE 45          >
 223+ 7ECF             >                org     $-1                 // alter last byte of Name just above to set
 223+ 7ECE C5          >                db      {b $} | END_BIT     // msb as name end
 223+ 7ECF             >
 223+ 7ECF 23 7E       >                dw      last_NFA            // Link to previous definition Name
 223+ 7ED1             >F_INCLUDE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 223+ 7ED1 9D 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 223+ 7ED3             >                else
 223+ 7ED3 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 223+ 7ED3             >                endif           ; ok        // for other definitions it "points" the correct handler
 223+ 7ED3             >                // Use of "; ok" to suppress "warning[fwdref]"
 223+ 7ED3             >
 223+ 7ED3             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 224+ 7ED3 19 6E B2 6B                  dw      BLK, FETCH, TO_R        // blk @ >r
 224+ 7ED7 C7 69
 225+ 7ED9 22 6E B2 6B                  dw      TO_IN, FETCH, TO_R      // >in @ >r
 225+ 7EDD C7 69
 226+ 7EDF D0 6E B2 6B                  dw      SOURCE_ID, FETCH, TO_R  // source-id @ >r
 226+ 7EE3 C7 69
 227+ 7EE5 EF 69                        dw      R_OP                    // r
 228+ 7EE7                                                              // if
 229+ 7EE7 E3 63                        dw      ZBRANCH
 230+ 7EE9 20 00                        dw      FInclude_Else_1 - $
 231+ 7EEB EF 69 D6 67                  dw          R_OP, F_FGETPOS     //      r f_getpos
 232+ 7EEF A9 63 2C 00                  dw          LIT, 44, QERROR     //      44 ?error
 232+ 7EF3 C3 70
 233+ 7EF5 22 6E B2 6B                  dw          TO_IN, FETCH        //      >in @ 2-
 234+ 7EF9 9F 6A                        dw          TWO_MINUS
 235+ 7EFB DA 6E B2 6B                  dw          SPAN, FETCH         //      span @ -
 236+ 7EFF 4C 6F                        dw          SUBTRACT
 237+ 7F01 38 6F 4C 6A                  dw          S_TO_D, DPLUS       //      s>d d+
 238+ 7F05                                                              // else
 239+ 7F05 CC 63                        dw      BRANCH
 240+ 7F07 06 00                        dw      FInclude_Endif_1 - $
 241+ 7F09              FInclude_Else_1:
 242+ 7F09 1A 6D 1A 6D                  dw          ZERO, ZERO          //      0 0
 243+ 7F0D                                                              // endif
 244+ 7F0D              FInclude_Endif_1:
 245+ 7F0D C7 69 C7 69                  dw      TO_R, TO_R              // >r >r
 246+ 7F11 D0 6E BF 6B                  dw      SOURCE_ID, STORE        // source-id !
 247+ 7F15              FInclude_Begin:                                 // begin
 248+ 7F15 22 6D 9B 7D                  dw          ONE, BLOCK, BBUF    //      1 block b/buf
 248+ 7F19 5A 6D
 249+ 7F1B 80 6B 10 74                  dw          TWO_DUP, BLANKS     //      2dup blanks
 250+ 7F1F 12 6B 60 6A                  dw          SWAP, ONE_PLUS      //      swap 1+
 251+ 7F23 12 6B 92 6A                  dw          SWAP, CELL_MINUS    //      swap cell-
 252+ 7F27 D0 6E B2 6B                  dw          SOURCE_ID, FETCH    //      source-id @
 253+ 7F2B 2F 7E                        dw          F_GETLINE           //      f_getline
 254+ 7F2D                                                              // while
 255+ 7F2D E3 63                        dw      ZBRANCH
 256+ 7F2F 14 00                        dw      FInclude_Repeat - $
 257+ 7F31 22 6D 19 6E                  dw          ONE, BLK, STORE     //      1 blk !
 257+ 7F35 BF 6B
 258+ 7F37 1A 6D 22 6E                  dw          ZERO, TO_IN, STORE  //      0 >in !
 258+ 7F3B BF 6B
 259+ 7F3D E8 77                        dw          INTERPRET           //      interpret
 260+ 7F3F CC 63                        dw      BRANCH
 261+ 7F41 D4 FF                        dw      FInclude_Begin - $
 262+ 7F43              FInclude_Repeat:                                // repeat
 263+ 7F43 D0 6E B2 6B                  dw      SOURCE_ID, FETCH        // source-id @
 264+ 7F47 1A 6D D0 6E                  dw      ZERO, SOURCE_ID, STORE  // 0 source-id !
 264+ 7F4B BF 6B
 265+ 7F4D AB 67                        dw      F_CLOSE                 // f_close
 266+ 7F4F A9 63 2A 00                  dw      LIT, 42, QERROR         // 42 ?error
 266+ 7F53 C3 70
 267+ 7F55 DB 69 DB 69                  dw      R_TO, R_TO, R_TO        // r> r> r>
 267+ 7F59 DB 69
 268+ 7F5B 1F 6B D0 6E                  dw      DUP, SOURCE_ID, STORE   // dup source-id !
 268+ 7F5F BF 6B
 269+ 7F61                                                              // if
 270+ 7F61 E3 63                        dw      ZBRANCH
 271+ 7F63 12 00                        dw      FInclude_Else_2 - $
 272+ 7F65 D0 6E B2 6B                  dw          SOURCE_ID, FETCH    //      source-id @
 273+ 7F69 88 67                        dw          F_SEEK              //      f_seek
 274+ 7F6B A9 63 2B 00                  dw          LIT, 43, QERROR     //      43, ?error
 274+ 7F6F C3 70
 275+ 7F71                                                              // else
 276+ 7F71 CC 63                        dw      BRANCH
 277+ 7F73 04 00                        dw      FInclude_Endif_2 - $
 278+ 7F75              FInclude_Else_2:
 279+ 7F75 60 6B                        dw          TWO_DROP            //      2drop
 280+ 7F77              FInclude_Endif_2:                               // endif
 281+ 7F77 DB 69 22 6E                  dw      R_TO, TO_IN, STORE      // r> >in !
 281+ 7F7B BF 6B
 282+ 7F7D DB 69 19 6E                  dw      R_TO, BLK, STORE        // r> blk !
 282+ 7F81 BF 6B
 283+ 7F83 99 69                        dw      EXIT                    // ;
 284+ 7F85
 285+ 7F85              //  ______________________________________________________________________
 286+ 7F85              //
 287+ 7F85              // open<         -- fh
 288+ 7F85              // Open the following filename and return it file-handle
 289+ 7F85              // Used in the form OPEN CCCC
 290+ 7F85                              Colon_Def OPEN_FH, "OPEN<", is_normal
 290+ 7F85             >                New_Def  OPEN_FH, "OPEN<", Enter_Ptr, is_normal ; ok
 290+ 7F85             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 290+ 7F85             >
 290+ 7F85             >                // dummy db directives used to calculate length of namec
 290+ 7F85 4F 50 45 4E >                db      "OPEN<"
 290+ 7F89 3C          >
 290+ 7F8A             >len_NFA         defl    $ - temp_NFA
 290+ 7F8A             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 290+ 7F85             >
 290+ 7F85 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 290+ 7F86 4F 50 45 4E >                db      "OPEN<"               // name string in 7-bit ascii, but
 290+ 7F8A 3C          >
 290+ 7F8B             >                org     $-1                 // alter last byte of Name just above to set
 290+ 7F8A BC          >                db      {b $} | END_BIT     // msb as name end
 290+ 7F8B             >
 290+ 7F8B C5 7E       >                dw      last_NFA            // Link to previous definition Name
 290+ 7F8D             >OPEN_FH:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 290+ 7F8D 9D 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 290+ 7F8F             >                else
 290+ 7F8F ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 290+ 7F8F             >                endif           ; ok        // for other definitions it "points" the correct handler
 290+ 7F8F             >                // Use of "; ok" to suppress "warning[fwdref]"
 290+ 7F8F             >
 290+ 7F8F             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 291+ 7F8F 44 6D                        dw      BL
 292+ 7F91 48 74 5D 72                  dw      WORD, COUNT, OVER       // bl word count over
 292+ 7F95 DA 6A
 293+ 7F97 3F 6A 1A 6D                  dw      PLUS, ZERO, SWAP, STORE // + 0 swap !
 293+ 7F9B 12 6B BF 6B
 294+ 7F9F 35 74 22 6D                  dw      PAD, ONE, F_OPEN        // pad 1 f_open
 294+ 7FA3 2A 68
 295+ 7FA5 A9 63 2B 00                  dw      LIT, 43                 // 43
 296+ 7FA9 C3 70                        dw      QERROR                  // ?error
 297+ 7FAB 99 69                        dw      EXIT                    // ;
 298+ 7FAD
 299+ 7FAD              //  ______________________________________________________________________
 300+ 7FAD              //
 301+ 7FAD              // include      -- cccc
 302+ 7FAD              // Include the following filename
 303+ 7FAD                              Colon_Def INCLUDE, "INCLUDE", is_normal
 303+ 7FAD             >                New_Def  INCLUDE, "INCLUDE", Enter_Ptr, is_normal ; ok
 303+ 7FAD             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 303+ 7FAD             >
 303+ 7FAD             >                // dummy db directives used to calculate length of namec
 303+ 7FAD 49 4E 43 4C >                db      "INCLUDE"
 303+ 7FB1 55 44 45    >
 303+ 7FB4             >len_NFA         defl    $ - temp_NFA
 303+ 7FB4             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 303+ 7FAD             >
 303+ 7FAD 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 303+ 7FAE 49 4E 43 4C >                db      "INCLUDE"               // name string in 7-bit ascii, but
 303+ 7FB2 55 44 45    >
 303+ 7FB5             >                org     $-1                 // alter last byte of Name just above to set
 303+ 7FB4 C5          >                db      {b $} | END_BIT     // msb as name end
 303+ 7FB5             >
 303+ 7FB5 85 7F       >                dw      last_NFA            // Link to previous definition Name
 303+ 7FB7             >INCLUDE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 303+ 7FB7 9D 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 303+ 7FB9             >                else
 303+ 7FB9 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 303+ 7FB9             >                endif           ; ok        // for other definitions it "points" the correct handler
 303+ 7FB9             >                // Use of "; ok" to suppress "warning[fwdref]"
 303+ 7FB9             >
 303+ 7FB9             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 304+ 7FB9 8D 7F                        dw      OPEN_FH                 // open
 305+ 7FBB 1F 6B D1 7E                  dw      DUP, F_INCLUDE          // dup f_include
 306+ 7FBF AB 67 EA 6A                  dw      F_CLOSE, DROP           // f_close drop
 307+ 7FC3 99 69                        dw      EXIT                    // ;
 308+ 7FC5
 309+ 7FC5              //  ______________________________________________________________________
 310+ 7FC5              //
 311+ 7FC5              // needs
 312+ 7FC5              // check for cccc exists in vocabulary
 313+ 7FC5              // if it doesn't then  INCLUDE  inc/cccc.F
 314+ 7FC5
 315+ 7FC5              // temp filename cccc.f as counted string zero-padded
 316+ 7FC5                              New_Def NEEDS_W,   "NEEDS-W", Create_Ptr, is_normal
 316+ 7FC5             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 316+ 7FC5             >
 316+ 7FC5             >                // dummy db directives used to calculate length of namec
 316+ 7FC5 4E 45 45 44 >                db      "NEEDS-W"
 316+ 7FC9 53 2D 57    >
 316+ 7FCC             >len_NFA         defl    $ - temp_NFA
 316+ 7FCC             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 316+ 7FC5             >
 316+ 7FC5 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 316+ 7FC6 4E 45 45 44 >                db      "NEEDS-W"               // name string in 7-bit ascii, but
 316+ 7FCA 53 2D 57    >
 316+ 7FCD             >                org     $-1                 // alter last byte of Name just above to set
 316+ 7FCC D7          >                db      {b $} | END_BIT     // msb as name end
 316+ 7FCD             >
 316+ 7FCD AD 7F       >                dw      last_NFA            // Link to previous definition Name
 316+ 7FCF             >NEEDS_W:          if Create_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 316+ 7FCF FB 76       >                dw      Create_Ptr ; ok        // for primitive definitions  actual code
 316+ 7FD1             >                else
 316+ 7FD1 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 316+ 7FD1             >                endif           ; ok        // for other definitions it "points" the correct handler
 316+ 7FD1             >                // Use of "; ok" to suppress "warning[fwdref]"
 316+ 7FD1             >
 316+ 7FD1             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 317+ 7FD1 00 00 00...                  ds      35                      // 32 + .f + 0x00 = len 35
 318+ 7FF4              // temp complete path+filename
 319+ 7FF4                              New_Def NEEDS_FN,  "NEEDS-FN", Create_Ptr, is_normal
 319+ 7FF4             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 319+ 7FF4             >
 319+ 7FF4             >                // dummy db directives used to calculate length of namec
 319+ 7FF4 4E 45 45 44 >                db      "NEEDS-FN"
 319+ 7FF8 53 2D 46 4E >
 319+ 7FFC             >len_NFA         defl    $ - temp_NFA
 319+ 7FFC             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 319+ 7FF4             >
 319+ 7FF4 88          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 319+ 7FF5 4E 45 45 44 >                db      "NEEDS-FN"               // name string in 7-bit ascii, but
 319+ 7FF9 53 2D 46 4E >
 319+ 7FFD             >                org     $-1                 // alter last byte of Name just above to set
 319+ 7FFC CE          >                db      {b $} | END_BIT     // msb as name end
 319+ 7FFD             >
 319+ 7FFD C5 7F       >                dw      last_NFA            // Link to previous definition Name
 319+ 7FFF             >NEEDS_FN:          if Create_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 319+ 7FFF FB 76       >                dw      Create_Ptr ; ok        // for primitive definitions  actual code
 319+ 8001             >                else
 319+ 8001 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 319+ 8001             >                endif           ; ok        // for other definitions it "points" the correct handler
 319+ 8001             >                // Use of "; ok" to suppress "warning[fwdref]"
 319+ 8001             >
 319+ 8001             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 320+ 8001 00 00 00...                  ds      40
 321+ 8029              // constant path
 322+ 8029                              New_Def NEEDS_INC,  "NEEDS-INC", Create_Ptr, is_normal
 322+ 8029             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 322+ 8029             >
 322+ 8029             >                // dummy db directives used to calculate length of namec
 322+ 8029 4E 45 45 44 >                db      "NEEDS-INC"
 322+ 802D 53 2D 49 4E >
 322+ 8031 43          >
 322+ 8032             >len_NFA         defl    $ - temp_NFA
 322+ 8032             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 322+ 8029             >
 322+ 8029 89          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 322+ 802A 4E 45 45 44 >                db      "NEEDS-INC"               // name string in 7-bit ascii, but
 322+ 802E 53 2D 49 4E >
 322+ 8032 43          >
 322+ 8033             >                org     $-1                 // alter last byte of Name just above to set
 322+ 8032 C3          >                db      {b $} | END_BIT     // msb as name end
 322+ 8033             >
 322+ 8033 F4 7F       >                dw      last_NFA            // Link to previous definition Name
 322+ 8035             >NEEDS_INC:          if Create_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 322+ 8035 FB 76       >                dw      Create_Ptr ; ok        // for primitive definitions  actual code
 322+ 8037             >                else
 322+ 8037 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 322+ 8037             >                endif           ; ok        // for other definitions it "points" the correct handler
 322+ 8037             >                // Use of "; ok" to suppress "warning[fwdref]"
 322+ 8037             >
 322+ 8037             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 323+ 8037 04 69 6E 63                  db      4, "inc/", 0
 323+ 803B 2F 00
 324+ 803D                              New_Def NEEDS_LIB,  "NEEDS-LIB", Create_Ptr, is_normal
 324+ 803D             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 324+ 803D             >
 324+ 803D             >                // dummy db directives used to calculate length of namec
 324+ 803D 4E 45 45 44 >                db      "NEEDS-LIB"
 324+ 8041 53 2D 4C 49 >
 324+ 8045 42          >
 324+ 8046             >len_NFA         defl    $ - temp_NFA
 324+ 8046             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 324+ 803D             >
 324+ 803D 89          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 324+ 803E 4E 45 45 44 >                db      "NEEDS-LIB"               // name string in 7-bit ascii, but
 324+ 8042 53 2D 4C 49 >
 324+ 8046 42          >
 324+ 8047             >                org     $-1                 // alter last byte of Name just above to set
 324+ 8046 C2          >                db      {b $} | END_BIT     // msb as name end
 324+ 8047             >
 324+ 8047 29 80       >                dw      last_NFA            // Link to previous definition Name
 324+ 8049             >NEEDS_LIB:          if Create_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 324+ 8049 FB 76       >                dw      Create_Ptr ; ok        // for primitive definitions  actual code
 324+ 804B             >                else
 324+ 804B ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 324+ 804B             >                endif           ; ok        // for other definitions it "points" the correct handler
 324+ 804B             >                // Use of "; ok" to suppress "warning[fwdref]"
 324+ 804B             >
 324+ 804B             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 325+ 804B 04 6C 69 62                  db      4, "lib/", 0
 325+ 804F 2F 00
 326+ 8051
 327+ 8051              // Concatenate path at a and filename and include it
 328+ 8051              // No error is issued if filename doesn't exist.
 329+ 8051                              Colon_Def NEEDS_SLASH, "NEEDS/", is_normal
 329+ 8051             >                New_Def  NEEDS_SLASH, "NEEDS/", Enter_Ptr, is_normal ; ok
 329+ 8051             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 329+ 8051             >
 329+ 8051             >                // dummy db directives used to calculate length of namec
 329+ 8051 4E 45 45 44 >                db      "NEEDS/"
 329+ 8055 53 2F       >
 329+ 8057             >len_NFA         defl    $ - temp_NFA
 329+ 8057             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 329+ 8051             >
 329+ 8051 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 329+ 8052 4E 45 45 44 >                db      "NEEDS/"               // name string in 7-bit ascii, but
 329+ 8056 53 2F       >
 329+ 8058             >                org     $-1                 // alter last byte of Name just above to set
 329+ 8057 AF          >                db      {b $} | END_BIT     // msb as name end
 329+ 8058             >
 329+ 8058 3D 80       >                dw      last_NFA            // Link to previous definition Name
 329+ 805A             >NEEDS_SLASH:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 329+ 805A 9D 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 329+ 805C             >                else
 329+ 805C ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 329+ 805C             >                endif           ; ok        // for other definitions it "points" the correct handler
 329+ 805C             >                // Use of "; ok" to suppress "warning[fwdref]"
 329+ 805C             >
 329+ 805C             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 330+ 805C 5D 72 02 6B                  dw      COUNT, TUCK             // n a n
 331+ 8060 FF 7F 12 6B                  dw      NEEDS_FN, SWAP, CMOVE   // n        \ Path
 331+ 8064 89 68
 332+ 8066 FF 7F 3F 6A                  dw      NEEDS_FN, PLUS          // a1+n     \ Concat
 333+ 806A CF 7F 60 6A                  dw      NEEDS_W, ONE_PLUS, SWAP
 333+ 806E 12 6B
 334+ 8070 A9 63 23 00                  dw      LIT, 35
 335+ 8074 89 68                        dw      CMOVE
 336+ 8076 FF 7F                        dw      NEEDS_FN
 337+ 8078 35 74 22 6D                  dw      PAD, ONE, F_OPEN
 337+ 807C 2A 68
 338+ 807E FC 69                        dw      ZEQUAL
 339+ 8080 E3 63                        dw      ZBRANCH
 340+ 8082 08 00                        dw      Needs_1 - $
 341+ 8084 D1 7E                        dw          F_INCLUDE
 342+ 8086 CC 63                        dw      BRANCH
 343+ 8088 04 00                        dw      Needs_2 - $
 344+ 808A              Needs_1:
 345+ 808A              //              dw          NEEDS_W, COUNT, TYPE, SPACE
 346+ 808A              //              dw          LIT, 43, MESSAGE
 347+ 808A EA 6A                        dw          DROP
 348+ 808C              Needs_2:
 349+ 808C 99 69                        dw      EXIT                    // ;
 350+ 808E
 351+ 808E
 352+ 808E                              New_Def NCDM,   "NCDM", Create_Ptr, is_normal
 352+ 808E             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 352+ 808E             >
 352+ 808E             >                // dummy db directives used to calculate length of namec
 352+ 808E 4E 43 44 4D >                db      "NCDM"
 352+ 8092             >len_NFA         defl    $ - temp_NFA
 352+ 8092             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 352+ 808E             >
 352+ 808E 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 352+ 808F 4E 43 44 4D >                db      "NCDM"               // name string in 7-bit ascii, but
 352+ 8093             >                org     $-1                 // alter last byte of Name just above to set
 352+ 8092 CD          >                db      {b $} | END_BIT     // msb as name end
 352+ 8093             >
 352+ 8093 51 80       >                dw      last_NFA            // Link to previous definition Name
 352+ 8095             >NCDM:          if Create_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 352+ 8095 FB 76       >                dw      Create_Ptr ; ok        // for primitive definitions  actual code
 352+ 8097             >                else
 352+ 8097 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 352+ 8097             >                endif           ; ok        // for other definitions it "points" the correct handler
 352+ 8097             >                // Use of "; ok" to suppress "warning[fwdref]"
 352+ 8097             >
 352+ 8097             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 353+ 8097 25 5E 25 26                  db $25, $5E, $25, $26, $24, $5F, $7B, $7D, $7E
 353+ 809B 24 5F 7B 7D
 353+ 809F 7E
 354+ 80A0
 355+ 80A0                              New_Def NDOM,   "NDOM", Create_Ptr, is_normal
 355+ 80A0             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 355+ 80A0             >
 355+ 80A0             >                // dummy db directives used to calculate length of namec
 355+ 80A0 4E 44 4F 4D >                db      "NDOM"
 355+ 80A4             >len_NFA         defl    $ - temp_NFA
 355+ 80A4             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 355+ 80A0             >
 355+ 80A0 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 355+ 80A1 4E 44 4F 4D >                db      "NDOM"               // name string in 7-bit ascii, but
 355+ 80A5             >                org     $-1                 // alter last byte of Name just above to set
 355+ 80A4 CD          >                db      {b $} | END_BIT     // msb as name end
 355+ 80A5             >
 355+ 80A5 8E 80       >                dw      last_NFA            // Link to previous definition Name
 355+ 80A7             >NDOM:          if Create_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 355+ 80A7 FB 76       >                dw      Create_Ptr ; ok        // for primitive definitions  actual code
 355+ 80A9             >                else
 355+ 80A9 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 355+ 80A9             >                endif           ; ok        // for other definitions it "points" the correct handler
 355+ 80A9             >                // Use of "; ok" to suppress "warning[fwdref]"
 355+ 80A9             >
 355+ 80A9             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 356+ 80A9 3A 3F 2F 2A                  db $3A, $3F, $2F, $2A, $7C, $5C, $3C, $3E, $22
 356+ 80AD 7C 5C 3C 3E
 356+ 80B1 22
 357+ 80B2
 358+ 80B2
 359+ 80B2              // Replace illegal character in filename using the map here above
 360+ 80B2              // at the moment we need only  "
 361+ 80B2                              Colon_Def NEEDS_CHECK, "NEEDS-CH", is_normal
 361+ 80B2             >                New_Def  NEEDS_CHECK, "NEEDS-CH", Enter_Ptr, is_normal ; ok
 361+ 80B2             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 361+ 80B2             >
 361+ 80B2             >                // dummy db directives used to calculate length of namec
 361+ 80B2 4E 45 45 44 >                db      "NEEDS-CH"
 361+ 80B6 53 2D 43 48 >
 361+ 80BA             >len_NFA         defl    $ - temp_NFA
 361+ 80BA             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 361+ 80B2             >
 361+ 80B2 88          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 361+ 80B3 4E 45 45 44 >                db      "NEEDS-CH"               // name string in 7-bit ascii, but
 361+ 80B7 53 2D 43 48 >
 361+ 80BB             >                org     $-1                 // alter last byte of Name just above to set
 361+ 80BA C8          >                db      {b $} | END_BIT     // msb as name end
 361+ 80BB             >
 361+ 80BB A0 80       >                dw      last_NFA            // Link to previous definition Name
 361+ 80BD             >NEEDS_CHECK:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 361+ 80BD 9D 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 361+ 80BF             >                else
 361+ 80BF ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 361+ 80BF             >                endif           ; ok        // for other definitions it "points" the correct handler
 361+ 80BF             >                // Use of "; ok" to suppress "warning[fwdref]"
 361+ 80BF             >
 361+ 80BF             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 362+ 80BF 5D 72 72 72                  dw      COUNT, BOUNDS
 363+ 80C3 70 64                        dw      C_DO
 364+ 80C5              Needs_3:
 365+ 80C5 95 80 A7 80                  dw          NCDM, NDOM, LIT, 9
 365+ 80C9 A9 63 09 00
 366+ 80CD 7B 64 CD 6B                  dw          I, CFETCH
 367+ 80D1 A3 65                        dw          C_MAP
 368+ 80D3 7B 64 DB 6B                  dw          I, CSTORE
 369+ 80D7              Needs_4:
 370+ 80D7 31 64                        dw      C_LOOP
 371+ 80D9 EC FF                        dw      Needs_3 - $
 372+ 80DB 99 69                        dw      EXIT
 373+ 80DD
 374+ 80DD
 375+ 80DD              // include  "path/cccc.f" if cccc is not defined
 376+ 80DD              // filename cccc.f is temporary stored at NEEDS-W
 377+ 80DD                              Colon_Def NEEDS_PATH, "NEEDS-F", is_normal
 377+ 80DD             >                New_Def  NEEDS_PATH, "NEEDS-F", Enter_Ptr, is_normal ; ok
 377+ 80DD             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 377+ 80DD             >
 377+ 80DD             >                // dummy db directives used to calculate length of namec
 377+ 80DD 4E 45 45 44 >                db      "NEEDS-F"
 377+ 80E1 53 2D 46    >
 377+ 80E4             >len_NFA         defl    $ - temp_NFA
 377+ 80E4             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 377+ 80DD             >
 377+ 80DD 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 377+ 80DE 4E 45 45 44 >                db      "NEEDS-F"               // name string in 7-bit ascii, but
 377+ 80E2 53 2D 46    >
 377+ 80E5             >                org     $-1                 // alter last byte of Name just above to set
 377+ 80E4 C6          >                db      {b $} | END_BIT     // msb as name end
 377+ 80E5             >
 377+ 80E5 B2 80       >                dw      last_NFA            // Link to previous definition Name
 377+ 80E7             >NEEDS_PATH:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 377+ 80E7 9D 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 377+ 80E9             >                else
 377+ 80E9 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 377+ 80E9             >                endif           ; ok        // for other definitions it "points" the correct handler
 377+ 80E9             >                // Use of "; ok" to suppress "warning[fwdref]"
 377+ 80E9             >
 377+ 80E9             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 378+ 80E9 FA 75                        dw      LFIND
 379+ 80EB E3 63                        dw      ZBRANCH
 380+ 80ED 0A 00                        dw      Needs_5 - $
 381+ 80EF
 382+ 80EF EA 6A 60 6B                  dw          DROP, TWO_DROP
 383+ 80F3 CC 63                        dw      BRANCH
 384+ 80F5 2C 00                        dw      Needs_6 - $
 385+ 80F7              Needs_5:
 386+ 80F7 CF 7F                        dw          NEEDS_W
 387+ 80F9 A9 63 23 00                  dw          LIT, 35
 388+ 80FD FF 73                        dw          ERASE                   // a
 389+ 80FF F9 6E CD 6B                  dw          HERE, CFETCH, ONE_PLUS  // a n
 389+ 8103 60 6A
 390+ 8105 F9 6E DA 6A                  dw          HERE, OVER              // a n here n
 391+ 8109 CF 7F 12 6B                  dw          NEEDS_W, SWAP, CMOVE    // a n
 391+ 810D 89 68
 392+ 810F CF 7F BD 80                  dw          NEEDS_W, NEEDS_CHECK
 393+ 8113 CF 7F 3F 6A                  dw          NEEDS_W, PLUS           // a a1+1
 394+ 8117 A9 63 2E 66                  dw          LIT, $662E              // a a1+1 ".F"
 395+ 811B 12 6B BF 6B                  dw          SWAP, STORE             // a
 396+ 811F 5A 80                        dw          NEEDS_SLASH
 397+ 8121              Needs_6:
 398+ 8121 99 69                        dw      EXIT
 399+ 8123
 400+ 8123
 401+ 8123              // check for cccc exists in vocabulary
 402+ 8123              // if it doesn't then  INCLUDE  inc/cccc.F
 403+ 8123              // search in inc subdirectory
 404+ 8123                              Colon_Def NEEDS, "NEEDS", is_normal
 404+ 8123             >                New_Def  NEEDS, "NEEDS", Enter_Ptr, is_normal ; ok
 404+ 8123             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 404+ 8123             >
 404+ 8123             >                // dummy db directives used to calculate length of namec
 404+ 8123 4E 45 45 44 >                db      "NEEDS"
 404+ 8127 53          >
 404+ 8128             >len_NFA         defl    $ - temp_NFA
 404+ 8128             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 404+ 8123             >
 404+ 8123 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 404+ 8124 4E 45 45 44 >                db      "NEEDS"               // name string in 7-bit ascii, but
 404+ 8128 53          >
 404+ 8129             >                org     $-1                 // alter last byte of Name just above to set
 404+ 8128 D3          >                db      {b $} | END_BIT     // msb as name end
 404+ 8129             >
 404+ 8129 DD 80       >                dw      last_NFA            // Link to previous definition Name
 404+ 812B             >NEEDS:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 404+ 812B 9D 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 404+ 812D             >                else
 404+ 812D ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 404+ 812D             >                endif           ; ok        // for other definitions it "points" the correct handler
 404+ 812D             >                // Use of "; ok" to suppress "warning[fwdref]"
 404+ 812D             >
 404+ 812D             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 405+ 812D 22 6E B2 6B                  dw      TO_IN, FETCH
 406+ 8131 1F 6B                        dw      DUP
 407+ 8133 35 80 E7 80                  dw      NEEDS_INC, NEEDS_PATH
 408+ 8137 22 6E BF 6B                  dw      TO_IN, STORE
 409+ 813B 49 80 E7 80                  dw      NEEDS_LIB, NEEDS_PATH
 410+ 813F 22 6E BF 6B                  dw      TO_IN, STORE
 411+ 8143 FA 75                        dw      LFIND
 412+ 8145 E3 63                        dw      ZBRANCH
 413+ 8147 08 00                        dw      Needs_10 - $
 414+ 8149 60 6B                        dw          TWO_DROP
 415+ 814B CC 63                        dw      BRANCH
 416+ 814D 10 00                        dw      Needs_11 - $
 417+ 814F              Needs_10:
 418+ 814F CF 7F 5D 72                  dw      NEEDS_W, COUNT, TYPE, SPACE
 418+ 8153 83 72 09 70
 419+ 8157 A9 63 2B 00                  dw      LIT, 43, MESSAGE
 419+ 815B 1A 7B
 420+ 815D              Needs_11:
 421+ 815D 99 69                        dw      EXIT
 422+ 815F
 423+ 815F
 424+ 815F              //  ______________________________________________________________________
 425+ 815F              //
 426+ 815F              // load+        n --
 427+ 815F                              Colon_Def LOAD_P, "LOAD+", is_normal
 427+ 815F             >                New_Def  LOAD_P, "LOAD+", Enter_Ptr, is_normal ; ok
 427+ 815F             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 427+ 815F             >
 427+ 815F             >                // dummy db directives used to calculate length of namec
 427+ 815F 4C 4F 41 44 >                db      "LOAD+"
 427+ 8163 2B          >
 427+ 8164             >len_NFA         defl    $ - temp_NFA
 427+ 8164             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 427+ 815F             >
 427+ 815F 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 427+ 8160 4C 4F 41 44 >                db      "LOAD+"               // name string in 7-bit ascii, but
 427+ 8164 2B          >
 427+ 8165             >                org     $-1                 // alter last byte of Name just above to set
 427+ 8164 AB          >                db      {b $} | END_BIT     // msb as name end
 427+ 8165             >
 427+ 8165 23 81       >                dw      last_NFA            // Link to previous definition Name
 427+ 8167             >LOAD_P:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 427+ 8167 9D 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 427+ 8169             >                else
 427+ 8169 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 427+ 8169             >                endif           ; ok        // for other definitions it "points" the correct handler
 427+ 8169             >                // Use of "; ok" to suppress "warning[fwdref]"
 427+ 8169             >
 427+ 8169             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 428+ 8169 19 6E B2 6B                  dw      BLK, FETCH, TO_R        // blk @ >r
 428+ 816D C7 69
 429+ 816F 22 6E B2 6B                  dw      TO_IN, FETCH, TO_R      // >in @ >r
 429+ 8173 C7 69
 430+ 8175
 431+ 8175 1A 6D 22 6E                  dw      ZERO, TO_IN, STORE      // 0 >in !
 431+ 8179 BF 6B
 432+ 817B 66 6D 81 7A                  dw      BSCR, MUL, BLK, STORE   // b/scr * blk !
 432+ 817F 19 6E BF 6B
 433+ 8183 E8 77                        dw      INTERPRET               // interpret
 434+ 8185
 435+ 8185 DB 69 22 6E                  dw      R_TO, TO_IN, STORE      // r> >in !
 435+ 8189 BF 6B
 436+ 818B DB 69 19 6E                  dw      R_TO, BLK, STORE        // r> blk !
 436+ 818F BF 6B
 437+ 8191 99 69                        dw      EXIT                    // ;
 438+ 8193
 439+ 8193              //  ______________________________________________________________________
 440+ 8193              //
 441+ 8193              // -->          --
 442+ 8193                              Colon_Def LOAD_NEXT, "-->", is_immediate
 442+ 8193             >                New_Def  LOAD_NEXT, "-->", Enter_Ptr, is_immediate ; ok
 442+ 8193             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 442+ 8193             >
 442+ 8193             >                // dummy db directives used to calculate length of namec
 442+ 8193 2D 2D 3E    >                db      "-->"
 442+ 8196             >len_NFA         defl    $ - temp_NFA
 442+ 8196             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 442+ 8193             >
 442+ 8193 C3          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 442+ 8194 2D 2D 3E    >                db      "-->"               // name string in 7-bit ascii, but
 442+ 8197             >                org     $-1                 // alter last byte of Name just above to set
 442+ 8196 BE          >                db      {b $} | END_BIT     // msb as name end
 442+ 8197             >
 442+ 8197 5F 81       >                dw      last_NFA            // Link to previous definition Name
 442+ 8199             >LOAD_NEXT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 442+ 8199 9D 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 442+ 819B             >                else
 442+ 819B ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 442+ 819B             >                endif           ; ok        // for other definitions it "points" the correct handler
 442+ 819B             >                // Use of "; ok" to suppress "warning[fwdref]"
 442+ 819B             >
 442+ 819B             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 443+ 819B 3C 71                        dw      QLOADING                // ?loading
 444+ 819D 1A 6D 22 6E                  dw      ZERO, TO_IN, STORE      // 0 >in !
 444+ 81A1 BF 6B
 445+ 81A3 66 6D                        dw      BSCR                    // b/scr
 446+ 81A5 19 6E B2 6B                  dw      BLK, FETCH              // blk @
 447+ 81A9 DA 6A                        dw      OVER                    // over
 448+ 81AB AE 7A                        dw      MOD                     // mod
 449+ 81AD 4C 6F                        dw      SUBTRACT                // -
 450+ 81AF 19 6E 8F 6B                  dw      BLK, PLUSSTORE          // +!
 451+ 81B3 99 69                        dw      EXIT                    // ;
 452+ 81B5
 453+ 81B5              //  ______________________________________________________________________
 454+ 81B5              //
 455+ 81B5              // '            -- xt
 456+ 81B5                              Colon_Def TICK, "'", is_normal
 456+ 81B5             >                New_Def  TICK, "'", Enter_Ptr, is_normal ; ok
 456+ 81B5             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 456+ 81B5             >
 456+ 81B5             >                // dummy db directives used to calculate length of namec
 456+ 81B5 27          >                db      "'"
 456+ 81B6             >len_NFA         defl    $ - temp_NFA
 456+ 81B6             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 456+ 81B5             >
 456+ 81B5 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 456+ 81B6 27          >                db      "'"               // name string in 7-bit ascii, but
 456+ 81B7             >                org     $-1                 // alter last byte of Name just above to set
 456+ 81B6 A7          >                db      {b $} | END_BIT     // msb as name end
 456+ 81B7             >
 456+ 81B7 93 81       >                dw      last_NFA            // Link to previous definition Name
 456+ 81B9             >TICK:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 456+ 81B9 9D 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 456+ 81BB             >                else
 456+ 81BB ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 456+ 81BB             >                endif           ; ok        // for other definitions it "points" the correct handler
 456+ 81BB             >                // Use of "; ok" to suppress "warning[fwdref]"
 456+ 81BB             >
 456+ 81BB             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 457+ 81BB FA 75                        dw      LFIND                   // -find
 458+ 81BD FC 69                        dw      ZEQUAL                  // 0=
 459+ 81BF 1A 6D C3 70                  dw      ZERO, QERROR            // 0 ?error
 460+ 81C3 EA 6A                        dw      DROP                    // drop
 461+ 81C5 99 69                        dw      EXIT                    // ;
 462+ 81C7
 463+ 81C7              //  ______________________________________________________________________
 464+ 81C7              //
 465+ 81C7              // forget       -- cccc
 466+ 81C7                              Colon_Def FORGET, "FORGET", is_normal
 466+ 81C7             >                New_Def  FORGET, "FORGET", Enter_Ptr, is_normal ; ok
 466+ 81C7             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 466+ 81C7             >
 466+ 81C7             >                // dummy db directives used to calculate length of namec
 466+ 81C7 46 4F 52 47 >                db      "FORGET"
 466+ 81CB 45 54       >
 466+ 81CD             >len_NFA         defl    $ - temp_NFA
 466+ 81CD             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 466+ 81C7             >
 466+ 81C7 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 466+ 81C8 46 4F 52 47 >                db      "FORGET"               // name string in 7-bit ascii, but
 466+ 81CC 45 54       >
 466+ 81CE             >                org     $-1                 // alter last byte of Name just above to set
 466+ 81CD D4          >                db      {b $} | END_BIT     // msb as name end
 466+ 81CE             >
 466+ 81CE B5 81       >                dw      last_NFA            // Link to previous definition Name
 466+ 81D0             >FORGET:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 466+ 81D0 9D 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 466+ 81D2             >                else
 466+ 81D2 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 466+ 81D2             >                endif           ; ok        // for other definitions it "points" the correct handler
 466+ 81D2             >                // Use of "; ok" to suppress "warning[fwdref]"
 466+ 81D2             >
 466+ 81D2             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 467+ 81D2 5A 6E B2 6B                  dw      CURRENT, FETCH          // current @
 468+ 81D6 4D 6E B2 6B                  dw      CONTEXT, FETCH          // context @
 469+ 81DA 4C 6F A9 63                  dw      SUBTRACT, LIT, 23, QERROR // - 23 ?error
 469+ 81DE 17 00 C3 70
 470+ 81E2 B9 81 93 70                  dw      TICK, TO_BODY           // ' >body
 471+ 81E6 1F 6B D0 6D                  dw      DUP, FENCE, FETCH       // dup fence @
 471+ 81EA B2 6B
 472+ 81EC 67 6F A9 63                  dw      ULESS, LIT, 21, QERROR  // u< 21 ?error
 472+ 81F0 15 00 C3 70
 473+ 81F4 1F 6B 69 70                  dw      DUP, NFA, DP, STORE     // dup nfa dp !
 473+ 81F8 D8 6D BF 6B
 474+ 81FC 4F 70 B2 6B                  dw      LFA, FETCH              // lfa @
 475+ 8200 4D 6E B2 6B                  dw      CONTEXT, FETCH, STORE   // context @ !
 475+ 8204 BF 6B
 476+ 8206 99 69                        dw      EXIT                    // ;
 477+ 8208
 478+ 8208              //  ______________________________________________________________________
 479+ 8208              //
 480+ 8208              // marker       -- cccc
 481+ 8208                              Colon_Def MARKER, "MARKER", is_immediate
 481+ 8208             >                New_Def  MARKER, "MARKER", Enter_Ptr, is_immediate ; ok
 481+ 8208             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 481+ 8208             >
 481+ 8208             >                // dummy db directives used to calculate length of namec
 481+ 8208 4D 41 52 4B >                db      "MARKER"
 481+ 820C 45 52       >
 481+ 820E             >len_NFA         defl    $ - temp_NFA
 481+ 820E             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 481+ 8208             >
 481+ 8208 C6          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 481+ 8209 4D 41 52 4B >                db      "MARKER"               // name string in 7-bit ascii, but
 481+ 820D 45 52       >
 481+ 820F             >                org     $-1                 // alter last byte of Name just above to set
 481+ 820E D2          >                db      {b $} | END_BIT     // msb as name end
 481+ 820F             >
 481+ 820F C7 81       >                dw      last_NFA            // Link to previous definition Name
 481+ 8211             >MARKER:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 481+ 8211 9D 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 481+ 8213             >                else
 481+ 8213 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 481+ 8213             >                endif           ; ok        // for other definitions it "points" the correct handler
 481+ 8213             >                // Use of "; ok" to suppress "warning[fwdref]"
 481+ 8213             >
 481+ 8213             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 482+ 8213 26 72                        dw      CBUILDS
 483+ 8215 E6 6D B2 6B                  dw      VOC_LINK, FETCH, COMMA
 483+ 8219 15 6F
 484+ 821B 5A 6E B2 6B                  dw      CURRENT, FETCH, COMMA
 484+ 821F 15 6F
 485+ 8221 4D 6E B2 6B                  dw      CONTEXT, FETCH, COMMA
 485+ 8225 15 6F
 486+ 8227 3F 70 15 6F                  dw      LATEST, COMMA
 487+ 822B 3F 70 7D 70                  dw      LATEST, PFA, LFA, FETCH, COMMA
 487+ 822F 4F 70 B2 6B
 487+ 8233 15 6F
 488+ 8235 36 72                        dw      DOES_TO
 489+ 8237 1F 6B B2 6B                  dw      DUP, FETCH, VOC_LINK, STORE, CELL_PLUS
 489+ 823B E6 6D BF 6B
 489+ 823F 88 6A
 490+ 8241 1F 6B B2 6B                  dw      DUP, FETCH, CURRENT, STORE, CELL_PLUS
 490+ 8245 5A 6E BF 6B
 490+ 8249 88 6A
 491+ 824B 1F 6B B2 6B                  dw      DUP, FETCH, CONTEXT, STORE, CELL_PLUS
 491+ 824F 4D 6E BF 6B
 491+ 8253 88 6A
 492+ 8255 1F 6B B2 6B                  dw      DUP, FETCH, DP, STORE, CELL_PLUS
 492+ 8259 D8 6D BF 6B
 492+ 825D 88 6A
 493+ 825F B2 6B 5A 6E                  dw           FETCH, CURRENT, FETCH, STORE
 493+ 8263 B2 6B BF 6B
 494+ 8267 99 69                        dw      EXIT
 495+ 8269
 496+ 8269              //  ______________________________________________________________________
 497+ 8269              //
 498+ 8269              // spaces       n --
 499+ 8269                              Colon_Def SPACES, "SPACES", is_normal
 499+ 8269             >                New_Def  SPACES, "SPACES", Enter_Ptr, is_normal ; ok
 499+ 8269             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 499+ 8269             >
 499+ 8269             >                // dummy db directives used to calculate length of namec
 499+ 8269 53 50 41 43 >                db      "SPACES"
 499+ 826D 45 53       >
 499+ 826F             >len_NFA         defl    $ - temp_NFA
 499+ 826F             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 499+ 8269             >
 499+ 8269 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 499+ 826A 53 50 41 43 >                db      "SPACES"               // name string in 7-bit ascii, but
 499+ 826E 45 53       >
 499+ 8270             >                org     $-1                 // alter last byte of Name just above to set
 499+ 826F D3          >                db      {b $} | END_BIT     // msb as name end
 499+ 8270             >
 499+ 8270 08 82       >                dw      last_NFA            // Link to previous definition Name
 499+ 8272             >SPACES:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 499+ 8272 9D 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 499+ 8274             >                else
 499+ 8274 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 499+ 8274             >                endif           ; ok        // for other definitions it "points" the correct handler
 499+ 8274             >                // Use of "; ok" to suppress "warning[fwdref]"
 499+ 8274             >
 499+ 8274             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 500+ 8274 1A 6D BB 6F                  dw      ZERO, MAX
 501+ 8278 1A 6D 42 64                  dw      ZERO, C_Q_DO
 502+ 827C 08 00                        dw      Spaces_Leave - $
 503+ 827E              Spaces_Loop:
 504+ 827E 09 70                        dw          SPACE
 505+ 8280 31 64                        dw      C_LOOP
 506+ 8282 FC FF                        dw      Spaces_Loop - $
 507+ 8284              Spaces_Leave:
 508+ 8284 99 69                        dw      EXIT                    // ;
 509+ 8286
 510+ 8286              //  ______________________________________________________________________
 511+ 8286              //
 512+ 8286              // <#           --
 513+ 8286                              Colon_Def BEGIN_DASH, "<#", is_normal
 513+ 8286             >                New_Def  BEGIN_DASH, "<#", Enter_Ptr, is_normal ; ok
 513+ 8286             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 513+ 8286             >
 513+ 8286             >                // dummy db directives used to calculate length of namec
 513+ 8286 3C 23       >                db      "<#"
 513+ 8288             >len_NFA         defl    $ - temp_NFA
 513+ 8288             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 513+ 8286             >
 513+ 8286 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 513+ 8287 3C 23       >                db      "<#"               // name string in 7-bit ascii, but
 513+ 8289             >                org     $-1                 // alter last byte of Name just above to set
 513+ 8288 A3          >                db      {b $} | END_BIT     // msb as name end
 513+ 8289             >
 513+ 8289 69 82       >                dw      last_NFA            // Link to previous definition Name
 513+ 828B             >BEGIN_DASH:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 513+ 828B 9D 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 513+ 828D             >                else
 513+ 828D ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 513+ 828D             >                endif           ; ok        // for other definitions it "points" the correct handler
 513+ 828D             >                // Use of "; ok" to suppress "warning[fwdref]"
 513+ 828D             >
 513+ 828D             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 514+ 828D 35 74 9B 6E                  dw      PAD, HLD, STORE
 514+ 8291 BF 6B
 515+ 8293 99 69                        dw      EXIT
 516+ 8295
 517+ 8295              //  ______________________________________________________________________
 518+ 8295              //
 519+ 8295              // #>           --
 520+ 8295                              Colon_Def DASH_END, "#>", is_normal
 520+ 8295             >                New_Def  DASH_END, "#>", Enter_Ptr, is_normal ; ok
 520+ 8295             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 520+ 8295             >
 520+ 8295             >                // dummy db directives used to calculate length of namec
 520+ 8295 23 3E       >                db      "#>"
 520+ 8297             >len_NFA         defl    $ - temp_NFA
 520+ 8297             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 520+ 8295             >
 520+ 8295 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 520+ 8296 23 3E       >                db      "#>"               // name string in 7-bit ascii, but
 520+ 8298             >                org     $-1                 // alter last byte of Name just above to set
 520+ 8297 BE          >                db      {b $} | END_BIT     // msb as name end
 520+ 8298             >
 520+ 8298 86 82       >                dw      last_NFA            // Link to previous definition Name
 520+ 829A             >DASH_END:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 520+ 829A 9D 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 520+ 829C             >                else
 520+ 829C ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 520+ 829C             >                endif           ; ok        // for other definitions it "points" the correct handler
 520+ 829C             >                // Use of "; ok" to suppress "warning[fwdref]"
 520+ 829C             >
 520+ 829C             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 521+ 829C 60 6B                        dw      TWO_DROP
 522+ 829E 9B 6E B2 6B                  dw      HLD, FETCH, PAD, OVER, SUBTRACT
 522+ 82A2 35 74 DA 6A
 522+ 82A6 4C 6F
 523+ 82A8 99 69                        dw      EXIT
 524+ 82AA
 525+ 82AA              //  ______________________________________________________________________
 526+ 82AA              //
 527+ 82AA              // sign         n d -- d
 528+ 82AA                              Colon_Def SIGN, "SIGN", is_normal
 528+ 82AA             >                New_Def  SIGN, "SIGN", Enter_Ptr, is_normal ; ok
 528+ 82AA             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 528+ 82AA             >
 528+ 82AA             >                // dummy db directives used to calculate length of namec
 528+ 82AA 53 49 47 4E >                db      "SIGN"
 528+ 82AE             >len_NFA         defl    $ - temp_NFA
 528+ 82AE             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 528+ 82AA             >
 528+ 82AA 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 528+ 82AB 53 49 47 4E >                db      "SIGN"               // name string in 7-bit ascii, but
 528+ 82AF             >                org     $-1                 // alter last byte of Name just above to set
 528+ 82AE CE          >                db      {b $} | END_BIT     // msb as name end
 528+ 82AF             >
 528+ 82AF 95 82       >                dw      last_NFA            // Link to previous definition Name
 528+ 82B1             >SIGN:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 528+ 82B1 9D 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 528+ 82B3             >                else
 528+ 82B3 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 528+ 82B3             >                endif           ; ok        // for other definitions it "points" the correct handler
 528+ 82B3             >                // Use of "; ok" to suppress "warning[fwdref]"
 528+ 82B3             >
 528+ 82B3             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 529+ 82B3 2C 6B 17 6A                  dw      ROT, ZLESS
 530+ 82B7 E3 63                        dw      ZBRANCH
 531+ 82B9 08 00                        dw      Sign_Endif - $
 532+ 82BB A9 63 2D 00                  dw          LIT, 45, HOLD
 532+ 82BF 1F 74
 533+ 82C1              Sign_Endif:
 534+ 82C1 99 69                        dw      EXIT
 535+ 82C3
 536+ 82C3              //  ______________________________________________________________________
 537+ 82C3              //
 538+ 82C3              // #           d1 -- d2
 539+ 82C3                              Colon_Def DASH, "#", is_normal
 539+ 82C3             >                New_Def  DASH, "#", Enter_Ptr, is_normal ; ok
 539+ 82C3             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 539+ 82C3             >
 539+ 82C3             >                // dummy db directives used to calculate length of namec
 539+ 82C3 23          >                db      "#"
 539+ 82C4             >len_NFA         defl    $ - temp_NFA
 539+ 82C4             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 539+ 82C3             >
 539+ 82C3 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 539+ 82C4 23          >                db      "#"               // name string in 7-bit ascii, but
 539+ 82C5             >                org     $-1                 // alter last byte of Name just above to set
 539+ 82C4 A3          >                db      {b $} | END_BIT     // msb as name end
 539+ 82C5             >
 539+ 82C5 AA 82       >                dw      last_NFA            // Link to previous definition Name
 539+ 82C7             >DASH:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 539+ 82C7 9D 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 539+ 82C9             >                else
 539+ 82C9 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 539+ 82C9             >                endif           ; ok        // for other definitions it "points" the correct handler
 539+ 82C9             >                // Use of "; ok" to suppress "warning[fwdref]"
 539+ 82C9             >
 539+ 82C9             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 540+ 82C9 6F 6E B2 6B                  dw      BASE, FETCH
 541+ 82CD
 542+ 82CD C7 69                        dw      TO_R                    // >r           ( ud1 )
 543+ 82CF 1A 6D EF 69                  dw      ZERO, R_OP, UMDIVMOD    // 0 r um/mod   ( l rem1 h/r )
 543+ 82D3 ED 68
 544+ 82D5 DB 69 12 6B                  dw      R_TO, SWAP, TO_R        // r> swap >r   ( l rem )
 544+ 82D9 C7 69
 545+ 82DB ED 68                        dw      UMDIVMOD                // um/mod       ( rem2 l/r )
 546+ 82DD DB 69                        dw      R_TO                    // r>           ( rem2 l/r h/r )
 547+ 82DF
 548+ 82DF 2C 6B                        dw      ROT
 549+ 82E1 A9 63 09 00                  dw      LIT, 9, OVER, LESS
 549+ 82E5 DA 6A 7B 6F
 550+ 82E9 E3 63                        dw      ZBRANCH
 551+ 82EB 08 00                        dw      Dash_Endif - $
 552+ 82ED A9 63 07 00                  dw          LIT, 7, PLUS
 552+ 82F1 3F 6A
 553+ 82F3              Dash_Endif:
 554+ 82F3
 555+ 82F3 A9 63 30 00                  dw      LIT, 48, PLUS, HOLD
 555+ 82F7 3F 6A 1F 74
 556+ 82FB 99 69                        dw      EXIT
 557+ 82FD
 558+ 82FD              //  ______________________________________________________________________
 559+ 82FD              //
 560+ 82FD              // #s           d1 -- d2
 561+ 82FD                              Colon_Def DASHES, "#S", is_normal
 561+ 82FD             >                New_Def  DASHES, "#S", Enter_Ptr, is_normal ; ok
 561+ 82FD             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 561+ 82FD             >
 561+ 82FD             >                // dummy db directives used to calculate length of namec
 561+ 82FD 23 53       >                db      "#S"
 561+ 82FF             >len_NFA         defl    $ - temp_NFA
 561+ 82FF             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 561+ 82FD             >
 561+ 82FD 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 561+ 82FE 23 53       >                db      "#S"               // name string in 7-bit ascii, but
 561+ 8300             >                org     $-1                 // alter last byte of Name just above to set
 561+ 82FF D3          >                db      {b $} | END_BIT     // msb as name end
 561+ 8300             >
 561+ 8300 C3 82       >                dw      last_NFA            // Link to previous definition Name
 561+ 8302             >DASHES:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 561+ 8302 9D 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 561+ 8304             >                else
 561+ 8304 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 561+ 8304             >                endif           ; ok        // for other definitions it "points" the correct handler
 561+ 8304             >                // Use of "; ok" to suppress "warning[fwdref]"
 561+ 8304             >
 561+ 8304             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 562+ 8304              Dashes_Begin:
 563+ 8304 C7 82 80 6B                  dw      DASH, TWO_DUP
 564+ 8308 3B 69 FC 69                  dw          OR_OP, ZEQUAL
 565+ 830C E3 63                        dw      ZBRANCH
 566+ 830E F6 FF                        dw      Dashes_Begin - $
 567+ 8310 99 69                        dw      EXIT
 568+ 8312
 569+ 8312              //  ______________________________________________________________________
 570+ 8312              //
 571+ 8312              // d.r          d n --
 572+ 8312                              Colon_Def D_DOT_R, "D.R", is_normal
 572+ 8312             >                New_Def  D_DOT_R, "D.R", Enter_Ptr, is_normal ; ok
 572+ 8312             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 572+ 8312             >
 572+ 8312             >                // dummy db directives used to calculate length of namec
 572+ 8312 44 2E 52    >                db      "D.R"
 572+ 8315             >len_NFA         defl    $ - temp_NFA
 572+ 8315             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 572+ 8312             >
 572+ 8312 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 572+ 8313 44 2E 52    >                db      "D.R"               // name string in 7-bit ascii, but
 572+ 8316             >                org     $-1                 // alter last byte of Name just above to set
 572+ 8315 D2          >                db      {b $} | END_BIT     // msb as name end
 572+ 8316             >
 572+ 8316 FD 82       >                dw      last_NFA            // Link to previous definition Name
 572+ 8318             >D_DOT_R:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 572+ 8318 9D 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 572+ 831A             >                else
 572+ 831A ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 572+ 831A             >                endif           ; ok        // for other definitions it "points" the correct handler
 572+ 831A             >                // Use of "; ok" to suppress "warning[fwdref]"
 572+ 831A             >
 572+ 831A             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 573+ 831A C7 69                        dw      TO_R
 574+ 831C 02 6B D7 79                  dw      TUCK, DABS
 575+ 8320 8B 82 02 83                  dw      BEGIN_DASH, DASHES, SIGN, DASH_END
 575+ 8324 B1 82 9A 82
 576+ 8328 DB 69                        dw      R_TO
 577+ 832A DA 6A 4C 6F                  dw      OVER, SUBTRACT, SPACES, TYPE
 577+ 832E 72 82 83 72
 578+ 8332 99 69                        dw      EXIT
 579+ 8334
 580+ 8334              //  ______________________________________________________________________
 581+ 8334              //
 582+ 8334              // .r           n1 n2 --
 583+ 8334                              Colon_Def DOT_R, ".R", is_normal
 583+ 8334             >                New_Def  DOT_R, ".R", Enter_Ptr, is_normal ; ok
 583+ 8334             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 583+ 8334             >
 583+ 8334             >                // dummy db directives used to calculate length of namec
 583+ 8334 2E 52       >                db      ".R"
 583+ 8336             >len_NFA         defl    $ - temp_NFA
 583+ 8336             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 583+ 8334             >
 583+ 8334 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 583+ 8335 2E 52       >                db      ".R"               // name string in 7-bit ascii, but
 583+ 8337             >                org     $-1                 // alter last byte of Name just above to set
 583+ 8336 D2          >                db      {b $} | END_BIT     // msb as name end
 583+ 8337             >
 583+ 8337 12 83       >                dw      last_NFA            // Link to previous definition Name
 583+ 8339             >DOT_R:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 583+ 8339 9D 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 583+ 833B             >                else
 583+ 833B ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 583+ 833B             >                endif           ; ok        // for other definitions it "points" the correct handler
 583+ 833B             >                // Use of "; ok" to suppress "warning[fwdref]"
 583+ 833B             >
 583+ 833B             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 584+ 833B C7 69                        dw      TO_R
 585+ 833D 38 6F DB 69                  dw      S_TO_D, R_TO
 586+ 8341 18 83                        dw      D_DOT_R
 587+ 8343 99 69                        dw      EXIT
 588+ 8345
 589+ 8345              //  ______________________________________________________________________
 590+ 8345              //
 591+ 8345              // d.           d --
 592+ 8345                              Colon_Def D_DOT, "D.", is_normal
 592+ 8345             >                New_Def  D_DOT, "D.", Enter_Ptr, is_normal ; ok
 592+ 8345             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 592+ 8345             >
 592+ 8345             >                // dummy db directives used to calculate length of namec
 592+ 8345 44 2E       >                db      "D."
 592+ 8347             >len_NFA         defl    $ - temp_NFA
 592+ 8347             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 592+ 8345             >
 592+ 8345 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 592+ 8346 44 2E       >                db      "D."               // name string in 7-bit ascii, but
 592+ 8348             >                org     $-1                 // alter last byte of Name just above to set
 592+ 8347 AE          >                db      {b $} | END_BIT     // msb as name end
 592+ 8348             >
 592+ 8348 34 83       >                dw      last_NFA            // Link to previous definition Name
 592+ 834A             >D_DOT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 592+ 834A 9D 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 592+ 834C             >                else
 592+ 834C ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 592+ 834C             >                endif           ; ok        // for other definitions it "points" the correct handler
 592+ 834C             >                // Use of "; ok" to suppress "warning[fwdref]"
 592+ 834C             >
 592+ 834C             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 593+ 834C 1A 6D 18 83                  dw      ZERO, D_DOT_R, SPACE
 593+ 8350 09 70
 594+ 8352 99 69                        dw      EXIT
 595+ 8354
 596+ 8354              //  ______________________________________________________________________
 597+ 8354              //
 598+ 8354              // .            n --
 599+ 8354                              Colon_Def DOT, ".", is_normal
 599+ 8354             >                New_Def  DOT, ".", Enter_Ptr, is_normal ; ok
 599+ 8354             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 599+ 8354             >
 599+ 8354             >                // dummy db directives used to calculate length of namec
 599+ 8354 2E          >                db      "."
 599+ 8355             >len_NFA         defl    $ - temp_NFA
 599+ 8355             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 599+ 8354             >
 599+ 8354 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 599+ 8355 2E          >                db      "."               // name string in 7-bit ascii, but
 599+ 8356             >                org     $-1                 // alter last byte of Name just above to set
 599+ 8355 AE          >                db      {b $} | END_BIT     // msb as name end
 599+ 8356             >
 599+ 8356 45 83       >                dw      last_NFA            // Link to previous definition Name
 599+ 8358             >DOT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 599+ 8358 9D 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 599+ 835A             >                else
 599+ 835A ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 599+ 835A             >                endif           ; ok        // for other definitions it "points" the correct handler
 599+ 835A             >                // Use of "; ok" to suppress "warning[fwdref]"
 599+ 835A             >
 599+ 835A             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 600+ 835A 38 6F 4A 83                  dw      S_TO_D, D_DOT
 601+ 835E 99 69                        dw      EXIT
 602+ 8360
 603+ 8360              //  ______________________________________________________________________
 604+ 8360              //
 605+ 8360              // ?            n --
 606+ 8360                              Colon_Def QUESTION, "?", is_normal
 606+ 8360             >                New_Def  QUESTION, "?", Enter_Ptr, is_normal ; ok
 606+ 8360             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 606+ 8360             >
 606+ 8360             >                // dummy db directives used to calculate length of namec
 606+ 8360 3F          >                db      "?"
 606+ 8361             >len_NFA         defl    $ - temp_NFA
 606+ 8361             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 606+ 8360             >
 606+ 8360 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 606+ 8361 3F          >                db      "?"               // name string in 7-bit ascii, but
 606+ 8362             >                org     $-1                 // alter last byte of Name just above to set
 606+ 8361 BF          >                db      {b $} | END_BIT     // msb as name end
 606+ 8362             >
 606+ 8362 54 83       >                dw      last_NFA            // Link to previous definition Name
 606+ 8364             >QUESTION:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 606+ 8364 9D 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 606+ 8366             >                else
 606+ 8366 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 606+ 8366             >                endif           ; ok        // for other definitions it "points" the correct handler
 606+ 8366             >                // Use of "; ok" to suppress "warning[fwdref]"
 606+ 8366             >
 606+ 8366             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 607+ 8366 B2 6B 58 83                  dw      FETCH, DOT
 608+ 836A 99 69                        dw      EXIT
 609+ 836C
 610+ 836C              //  ______________________________________________________________________
 611+ 836C              //
 612+ 836C              // u.           u --
 613+ 836C                              Colon_Def U_DOT, "U.", is_normal
 613+ 836C             >                New_Def  U_DOT, "U.", Enter_Ptr, is_normal ; ok
 613+ 836C             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 613+ 836C             >
 613+ 836C             >                // dummy db directives used to calculate length of namec
 613+ 836C 55 2E       >                db      "U."
 613+ 836E             >len_NFA         defl    $ - temp_NFA
 613+ 836E             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 613+ 836C             >
 613+ 836C 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 613+ 836D 55 2E       >                db      "U."               // name string in 7-bit ascii, but
 613+ 836F             >                org     $-1                 // alter last byte of Name just above to set
 613+ 836E AE          >                db      {b $} | END_BIT     // msb as name end
 613+ 836F             >
 613+ 836F 60 83       >                dw      last_NFA            // Link to previous definition Name
 613+ 8371             >U_DOT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 613+ 8371 9D 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 613+ 8373             >                else
 613+ 8373 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 613+ 8373             >                endif           ; ok        // for other definitions it "points" the correct handler
 613+ 8373             >                // Use of "; ok" to suppress "warning[fwdref]"
 613+ 8373             >
 613+ 8373             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 614+ 8373 1A 6D 4A 83                  dw      ZERO, D_DOT
 615+ 8377 99 69                        dw      EXIT
 616+ 8379
 617+ 8379              //  ______________________________________________________________________
 618+ 8379              //
 619+ 8379              // words        --
 620+ 8379                              Colon_Def WORDS, "WORDS", is_normal
 620+ 8379             >                New_Def  WORDS, "WORDS", Enter_Ptr, is_normal ; ok
 620+ 8379             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 620+ 8379             >
 620+ 8379             >                // dummy db directives used to calculate length of namec
 620+ 8379 57 4F 52 44 >                db      "WORDS"
 620+ 837D 53          >
 620+ 837E             >len_NFA         defl    $ - temp_NFA
 620+ 837E             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 620+ 8379             >
 620+ 8379 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 620+ 837A 57 4F 52 44 >                db      "WORDS"               // name string in 7-bit ascii, but
 620+ 837E 53          >
 620+ 837F             >                org     $-1                 // alter last byte of Name just above to set
 620+ 837E D3          >                db      {b $} | END_BIT     // msb as name end
 620+ 837F             >
 620+ 837F 6C 83       >                dw      last_NFA            // Link to previous definition Name
 620+ 8381             >WORDS:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 620+ 8381 9D 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 620+ 8383             >                else
 620+ 8383 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 620+ 8383             >                endif           ; ok        // for other definitions it "points" the correct handler
 620+ 8383             >                // Use of "; ok" to suppress "warning[fwdref]"
 620+ 8383             >
 620+ 8383             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 621+ 8383 A9 63 80 00                  dw      LIT, 128, OUT, STORE
 621+ 8387 2B 6E BF 6B
 622+ 838B 4D 6E B2 6B                  dw      CONTEXT, FETCH, FETCH
 622+ 838F B2 6B
 623+ 8391              Words_Begin:
 624+ 8391 1F 6B CD 6B                  dw          DUP, CFETCH, LIT, $1F, AND_OP
 624+ 8395 A9 63 1F 00
 624+ 8399 29 69
 625+ 839B 2B 6E B2 6B                  dw          OUT, FETCH, PLUS
 625+ 839F 3F 6A
 626+ 83A1 4E 6D 7B 6F                  dw          CL, LESS, ZEQUAL
 626+ 83A5 FC 69
 627+ 83A7 E3 63                        dw          ZBRANCH
 628+ 83A9 0A 00                        dw          Words_Endif - $
 629+ 83AB 7A 68 1A 6D                  dw              CR, ZERO, OUT, STORE
 629+ 83AF 2B 6E BF 6B
 630+ 83B3              Words_Endif:
 631+ 83B3 1F 6B 6B 76                  dw          DUP, ID_DOT
 632+ 83B7 7D 70 4F 70                  dw          PFA, LFA, FETCH
 632+ 83BB B2 6B
 633+ 83BD 1F 6B FC 69                  dw          DUP, ZEQUAL
 634+ 83C1 1F 67 3B 69                  dw          QTERMINAL, OR_OP
 635+ 83C5 E3 63                        dw      ZBRANCH
 636+ 83C7 CA FF                        dw      Words_Begin - $
 637+ 83C9 EA 6A                        dw      DROP
 638+ 83CB 99 69                        dw      EXIT
 639+ 83CD
 640+ 83CD              //  ______________________________________________________________________
 641+ 83CD              //
 642+ 83CD              // list         n --
 643+ 83CD                              Colon_Def LIST, "LIST", is_normal
 643+ 83CD             >                New_Def  LIST, "LIST", Enter_Ptr, is_normal ; ok
 643+ 83CD             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 643+ 83CD             >
 643+ 83CD             >                // dummy db directives used to calculate length of namec
 643+ 83CD 4C 49 53 54 >                db      "LIST"
 643+ 83D1             >len_NFA         defl    $ - temp_NFA
 643+ 83D1             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 643+ 83CD             >
 643+ 83CD 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 643+ 83CE 4C 49 53 54 >                db      "LIST"               // name string in 7-bit ascii, but
 643+ 83D2             >                org     $-1                 // alter last byte of Name just above to set
 643+ 83D1 D4          >                db      {b $} | END_BIT     // msb as name end
 643+ 83D2             >
 643+ 83D2 79 83       >                dw      last_NFA            // Link to previous definition Name
 643+ 83D4             >LIST:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 643+ 83D4 9D 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 643+ 83D6             >                else
 643+ 83D6 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 643+ 83D6             >                endif           ; ok        // for other definitions it "points" the correct handler
 643+ 83D6             >                // Use of "; ok" to suppress "warning[fwdref]"
 643+ 83D6             >
 643+ 83D6             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 644+ 83D6 E2 71 7A 68                  dw      DECIMAL, CR
 645+ 83DA 1F 6B 34 6E                  dw      DUP, SCR, STORE
 645+ 83DE BF 6B
 646+ 83E0 97 74                        dw      C_DOT_QUOTE
 647+ 83E2 05 53 63 72                  db      5, "Scr# "
 647+ 83E6 23 20
 648+ 83E8 58 83                        dw      DOT
 649+ 83EA 72 6D 1A 6D                  dw      LSCR, ZERO, C_DO
 649+ 83EE 70 64
 650+ 83F0              List_Loop:
 651+ 83F0 7A 68                        dw          CR
 652+ 83F2 7B 64 32 6D                  dw          I, THREE
 653+ 83F6 39 83 09 70                  dw          DOT_R, SPACE
 654+ 83FA 7B 64 34 6E                  dw          I, SCR, FETCH, DOT_LINE
 654+ 83FE B2 6B 06 7B
 655+ 8402 1F 67                        dw          QTERMINAL
 656+ 8404 E3 63                        dw          ZBRANCH
 657+ 8406 06 00                        dw          List_Endif - $
 658+ 8408 B1 69                        dw              C_LEAVE
 659+ 840A 06 00                        dw              List_Leave - $
 660+ 840C              List_Endif:
 661+ 840C 31 64                        dw      C_LOOP
 662+ 840E E2 FF                        dw      List_Loop - $
 663+ 8410              List_Leave:
 664+ 8410 7A 68                        dw      CR
 665+ 8412 99 69                        dw      EXIT
 666+ 8414
 667+ 8414              //  ______________________________________________________________________
 668+ 8414              //
 669+ 8414              // index        n1 n2 --
 670+ 8414                              Colon_Def INDEX, "INDEX", is_normal
 670+ 8414             >                New_Def  INDEX, "INDEX", Enter_Ptr, is_normal ; ok
 670+ 8414             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 670+ 8414             >
 670+ 8414             >                // dummy db directives used to calculate length of namec
 670+ 8414 49 4E 44 45 >                db      "INDEX"
 670+ 8418 58          >
 670+ 8419             >len_NFA         defl    $ - temp_NFA
 670+ 8419             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 670+ 8414             >
 670+ 8414 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 670+ 8415 49 4E 44 45 >                db      "INDEX"               // name string in 7-bit ascii, but
 670+ 8419 58          >
 670+ 841A             >                org     $-1                 // alter last byte of Name just above to set
 670+ 8419 D8          >                db      {b $} | END_BIT     // msb as name end
 670+ 841A             >
 670+ 841A CD 83       >                dw      last_NFA            // Link to previous definition Name
 670+ 841C             >INDEX:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 670+ 841C 9D 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 670+ 841E             >                else
 670+ 841E ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 670+ 841E             >                endif           ; ok        // for other definitions it "points" the correct handler
 670+ 841E             >                // Use of "; ok" to suppress "warning[fwdref]"
 670+ 841E             >
 670+ 841E             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 671+ 841E 60 6A 12 6B                  dw      ONE_PLUS, SWAP, C_DO
 671+ 8422 70 64
 672+ 8424              Index_Loop:
 673+ 8424 7A 68 7B 64                  dw          CR, I, THREE
 673+ 8428 32 6D
 674+ 842A 39 83 09 70                  dw          DOT_R, SPACE
 675+ 842E 1A 6D 7B 64                  dw          ZERO, I, DOT_LINE
 675+ 8432 06 7B
 676+ 8434 1F 67                        dw          QTERMINAL
 677+ 8436 E3 63                        dw          ZBRANCH
 678+ 8438 06 00                        dw          Index_Endif - $
 679+ 843A B1 69                        dw              C_LEAVE
 680+ 843C 06 00                        dw              Index_Leave - $
 681+ 843E              Index_Endif:
 682+ 843E 31 64                        dw      C_LOOP
 683+ 8440 E4 FF                        dw      Index_Loop - $
 684+ 8442              Index_Leave:
 685+ 8442 7A 68                        dw      CR
 686+ 8444 99 69                        dw      EXIT
 687+ 8446
 688+ 8446              //  ______________________________________________________________________
 689+ 8446              //
 690+ 8446              // cls          --
 691+ 8446                              Colon_Def CLS, "CLS", is_normal
 691+ 8446             >                New_Def  CLS, "CLS", Enter_Ptr, is_normal ; ok
 691+ 8446             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 691+ 8446             >
 691+ 8446             >                // dummy db directives used to calculate length of namec
 691+ 8446 43 4C 53    >                db      "CLS"
 691+ 8449             >len_NFA         defl    $ - temp_NFA
 691+ 8449             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 691+ 8446             >
 691+ 8446 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 691+ 8447 43 4C 53    >                db      "CLS"               // name string in 7-bit ascii, but
 691+ 844A             >                org     $-1                 // alter last byte of Name just above to set
 691+ 8449 D3          >                db      {b $} | END_BIT     // msb as name end
 691+ 844A             >
 691+ 844A 14 84       >                dw      last_NFA            // Link to previous definition Name
 691+ 844C             >CLS:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 691+ 844C 9D 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 691+ 844E             >                else
 691+ 844E ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 691+ 844E             >                endif           ; ok        // for other definitions it "points" the correct handler
 691+ 844E             >                // Use of "; ok" to suppress "warning[fwdref]"
 691+ 844E             >
 691+ 844E             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 692+ 844E A9 63 0E 00                  dw      LIT, $0E, EMITC
 692+ 8452 FE 65
 693+ 8454 99 69                        dw      EXIT
 694+ 8456
 695+ 8456              //  ______________________________________________________________________
 696+ 8456              //
 697+ 8456              // splash       --
 698+ 8456                              Colon_Def SPLASH, "SPLASH", is_normal
 698+ 8456             >                New_Def  SPLASH, "SPLASH", Enter_Ptr, is_normal ; ok
 698+ 8456             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 698+ 8456             >
 698+ 8456             >                // dummy db directives used to calculate length of namec
 698+ 8456 53 50 4C 41 >                db      "SPLASH"
 698+ 845A 53 48       >
 698+ 845C             >len_NFA         defl    $ - temp_NFA
 698+ 845C             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 698+ 8456             >
 698+ 8456 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 698+ 8457 53 50 4C 41 >                db      "SPLASH"               // name string in 7-bit ascii, but
 698+ 845B 53 48       >
 698+ 845D             >                org     $-1                 // alter last byte of Name just above to set
 698+ 845C C8          >                db      {b $} | END_BIT     // msb as name end
 698+ 845D             >
 698+ 845D 46 84       >                dw      last_NFA            // Link to previous definition Name
 698+ 845F             >SPLASH:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 698+ 845F 9D 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 698+ 8461             >                else
 698+ 8461 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 698+ 8461             >                endif           ; ok        // for other definitions it "points" the correct handler
 698+ 8461             >                // Use of "; ok" to suppress "warning[fwdref]"
 698+ 8461             >
 698+ 8461             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 699+ 8461 4C 84                        dw      CLS
 700+ 8463 97 74                        dw      C_DOT_QUOTE
 701+ 8465 58                           db      88
 702+ 8466 76 2D 46 6F                  db      "v-Forth 1.52 NextZXOS version", 13
 702+ 846A 72 74 68 20
 702+ 846E 31 2E 35 32
 702+ 8472 20 4E 65 78
 702+ 8476 74 5A 58 4F
 702+ 847A 53 20 76 65
 702+ 847E 72 73 69 6F
 702+ 8482 6E 0D
 703+ 8484 49 6E 64 69                  db      "Indirect Thread - build 20220219", 13
 703+ 8488 72 65 63 74
 703+ 848C 20 54 68 72
 703+ 8490 65 61 64 20
 703+ 8494 2D 20 62 75
 703+ 8498 69 6C 64 20
 703+ 849C 32 30 32 32
 703+ 84A0 30 32 31 39
 703+ 84A4 0D
 704+ 84A5 31 39 39 30                  db      "1990-2022 Matteo Vitturi", 13
 704+ 84A9 2D 32 30 32
 704+ 84AD 32 20 4D 61
 704+ 84B1 74 74 65 6F
 704+ 84B5 20 56 69 74
 704+ 84B9 74 75 72 69
 704+ 84BD 0D
 705+ 84BE 99 69                        dw      EXIT
 706+ 84C0
 707+ 84C0              //  ______________________________________________________________________
 708+ 84C0              //
 709+ 84C0              // video        --
 710+ 84C0                              Colon_Def VIDEO, "VIDEO", is_normal
 710+ 84C0             >                New_Def  VIDEO, "VIDEO", Enter_Ptr, is_normal ; ok
 710+ 84C0             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 710+ 84C0             >
 710+ 84C0             >                // dummy db directives used to calculate length of namec
 710+ 84C0 56 49 44 45 >                db      "VIDEO"
 710+ 84C4 4F          >
 710+ 84C5             >len_NFA         defl    $ - temp_NFA
 710+ 84C5             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 710+ 84C0             >
 710+ 84C0 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 710+ 84C1 56 49 44 45 >                db      "VIDEO"               // name string in 7-bit ascii, but
 710+ 84C5 4F          >
 710+ 84C6             >                org     $-1                 // alter last byte of Name just above to set
 710+ 84C5 CF          >                db      {b $} | END_BIT     // msb as name end
 710+ 84C6             >
 710+ 84C6 56 84       >                dw      last_NFA            // Link to previous definition Name
 710+ 84C8             >VIDEO:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 710+ 84C8 9D 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 710+ 84CA             >                else
 710+ 84CA ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 710+ 84CA             >                endif           ; ok        // for other definitions it "points" the correct handler
 710+ 84CA             >                // Use of "; ok" to suppress "warning[fwdref]"
 710+ 84CA             >
 710+ 84CA             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 711+ 84CA 2A 6D 1F 6B                  dw      TWO, DUP, DEVICE, STORE
 711+ 84CE 4E 7B BF 6B
 712+ 84D2 65 67                        dw      SELECT
 713+ 84D4 99 69                        dw      EXIT
 714+ 84D6
 715+ 84D6              //  ______________________________________________________________________
 716+ 84D6              //
 717+ 84D6              // accept-      a n1 -- n2
 718+ 84D6                              Colon_Def ACCEPT_N, "ACCEPT-", is_normal
 718+ 84D6             >                New_Def  ACCEPT_N, "ACCEPT-", Enter_Ptr, is_normal ; ok
 718+ 84D6             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 718+ 84D6             >
 718+ 84D6             >                // dummy db directives used to calculate length of namec
 718+ 84D6 41 43 43 45 >                db      "ACCEPT-"
 718+ 84DA 50 54 2D    >
 718+ 84DD             >len_NFA         defl    $ - temp_NFA
 718+ 84DD             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 718+ 84D6             >
 718+ 84D6 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 718+ 84D7 41 43 43 45 >                db      "ACCEPT-"               // name string in 7-bit ascii, but
 718+ 84DB 50 54 2D    >
 718+ 84DE             >                org     $-1                 // alter last byte of Name just above to set
 718+ 84DD AD          >                db      {b $} | END_BIT     // msb as name end
 718+ 84DE             >
 718+ 84DE C0 84       >                dw      last_NFA            // Link to previous definition Name
 718+ 84E0             >ACCEPT_N:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 718+ 84E0 9D 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 718+ 84E2             >                else
 718+ 84E2 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 718+ 84E2             >                endif           ; ok        // for other definitions it "points" the correct handler
 718+ 84E2             >                // Use of "; ok" to suppress "warning[fwdref]"
 718+ 84E2             >
 718+ 84E2             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 719+ 84E2 C7 69                        dw      TO_R
 720+ 84E4 1A 6D                        dw      ZERO
 721+ 84E6 12 6B                        dw      SWAP
 722+ 84E8 1F 6B                        dw      DUP
 723+ 84EA DB 69                        dw      R_TO
 724+ 84EC 3F 6A                        dw      PLUS
 725+ 84EE 12 6B                        dw      SWAP
 726+ 84F0 70 64                        dw      C_DO
 727+ 84F2              AcceptN_Loop:
 728+ 84F2 88 7B                        dw          MMU7_FETCH
 729+ 84F4 40 67                        dw          INKEY
 730+ 84F6 12 6B 9A 7B                  dw          SWAP, MMU7_STORE
 731+ 84FA 1F 6B FC 69                  dw          DUP, ZEQUAL
 732+ 84FE E3 63                        dw          ZBRANCH
 733+ 8500 06 00                        dw          AcceptN_Endif_1 - $
 734+ 8502 C8 84 A8 78                  dw              VIDEO, QUIT
 735+ 8506              AcceptN_Endif_1:
 736+ 8506 1F 6B A9 63                  dw          DUP, LIT, 13, EQUALS
 736+ 850A 0D 00 5A 6F
 737+ 850E E3 63                        dw          ZBRANCH
 738+ 8510 06 00                        dw          AcceptN_Endif_2 - $
 739+ 8512 EA 6A 1A 6D                  dw              DROP, ZERO
 740+ 8516              AcceptN_Endif_2:
 741+ 8516 1F 6B A9 63                  dw          DUP, LIT, 10, EQUALS
 741+ 851A 0A 00 5A 6F
 742+ 851E E3 63                        dw          ZBRANCH
 743+ 8520 06 00                        dw          AcceptN_Endif_3 - $
 744+ 8522 EA 6A 1A 6D                  dw              DROP, ZERO
 745+ 8526              AcceptN_Endif_3:
 746+ 8526 7B 64 DB 6B                  dw          I, CSTORE, ONE_PLUS
 746+ 852A 60 6A
 747+ 852C
 748+ 852C 7B 64 CD 6B                  dw          I, CFETCH, ZEQUAL   //      i 0= if
 748+ 8530 FC 69
 749+ 8532 E3 63                        dw          ZBRANCH
 750+ 8534 06 00                        dw              AcceptN_Endif_4 - $
 751+ 8536 B1 69                        dw                  C_LEAVE     //              leave
 752+ 8538 06 00                        dw                  AcceptN_Leave - $
 753+ 853A              AcceptN_Endif_4:                                 //      endif
 754+ 853A
 755+ 853A 31 64                        dw      C_LOOP
 756+ 853C B6 FF                        dw      AcceptN_Loop -$
 757+ 853E              AcceptN_Leave:
 758+ 853E 99 69                        dw      EXIT
 759+ 8540
 760+ 8540              //  ______________________________________________________________________
 761+ 8540              //
 762+ 8540              // load-        n --
 763+ 8540              // Provided that a stream n is OPEN# via the standart BASIC
 764+ 8540              // it accepts text from stream #n to the normal INTERPRET
 765+ 8540              // up to now, text-file must end with QUIT
 766+ 8540                              Colon_Def LOAD_N, "LOAD-", is_normal
 766+ 8540             >                New_Def  LOAD_N, "LOAD-", Enter_Ptr, is_normal ; ok
 766+ 8540             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 766+ 8540             >
 766+ 8540             >                // dummy db directives used to calculate length of namec
 766+ 8540 4C 4F 41 44 >                db      "LOAD-"
 766+ 8544 2D          >
 766+ 8545             >len_NFA         defl    $ - temp_NFA
 766+ 8545             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 766+ 8540             >
 766+ 8540 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 766+ 8541 4C 4F 41 44 >                db      "LOAD-"               // name string in 7-bit ascii, but
 766+ 8545 2D          >
 766+ 8546             >                org     $-1                 // alter last byte of Name just above to set
 766+ 8545 AD          >                db      {b $} | END_BIT     // msb as name end
 766+ 8546             >
 766+ 8546 D6 84       >                dw      last_NFA            // Link to previous definition Name
 766+ 8548             >LOAD_N:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 766+ 8548 9D 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 766+ 854A             >                else
 766+ 854A ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 766+ 854A             >                endif           ; ok        // for other definitions it "points" the correct handler
 766+ 854A             >                // Use of "; ok" to suppress "warning[fwdref]"
 766+ 854A             >
 766+ 854A             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 767+ 854A D0 6E BF 6B                  dw      SOURCE_ID, STORE
 768+ 854E              Load_N_Begin:
 769+ 854E AD 6D B2 6B                  dw          TIB, FETCH
 770+ 8552 1F 6B A9 63                  dw          DUP, LIT, 80
 770+ 8556 50 00
 771+ 8558 80 6B 10 74                  dw          TWO_DUP, BLANKS
 772+ 855C D0 6E B2 6B                  dw          SOURCE_ID, FETCH
 773+ 8560 C8 79 1F 6B                  dw          ABS_OP, DUP, DEVICE, STORE
 773+ 8564 4E 7B BF 6B
 774+ 8568 65 67                        dw          SELECT
 775+ 856A E0 84                        dw          ACCEPT_N
 776+ 856C C8 84                        dw          VIDEO
 777+ 856E 60 6B                        dw          TWO_DROP
 778+ 8570 1A 6D 19 6E                  dw          ZERO, BLK, STORE
 778+ 8574 BF 6B
 779+ 8576 1A 6D 22 6E                  dw          ZERO, TO_IN, STORE
 779+ 857A BF 6B
 780+ 857C E8 77                        dw          INTERPRET
 781+ 857E 1F 67                        dw          QTERMINAL
 782+ 8580 E3 63                        dw      ZBRANCH
 783+ 8582 CC FF                        dw      Load_N_Begin - $
 784+ 8584 99 69                        dw      EXIT
 785+ 8586
 786+ 8586              //  ______________________________________________________________________
 787+ 8586              //
 788+ 8586              // load         n --
 789+ 8586              // if n is positive, it loads screen #n (as usual)
 790+ 8586              // if n is negative, it connects stream #n to the normal INTERPRET
 791+ 8586              // this second way is useful if you want to load any kind of file
 792+ 8586              // provied that it is OPEN# the usual BASIC way.
 793+ 8586                              Colon_Def LOAD, "LOAD", is_normal
 793+ 8586             >                New_Def  LOAD, "LOAD", Enter_Ptr, is_normal ; ok
 793+ 8586             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 793+ 8586             >
 793+ 8586             >                // dummy db directives used to calculate length of namec
 793+ 8586 4C 4F 41 44 >                db      "LOAD"
 793+ 858A             >len_NFA         defl    $ - temp_NFA
 793+ 858A             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 793+ 8586             >
 793+ 8586 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 793+ 8587 4C 4F 41 44 >                db      "LOAD"               // name string in 7-bit ascii, but
 793+ 858B             >                org     $-1                 // alter last byte of Name just above to set
 793+ 858A C4          >                db      {b $} | END_BIT     // msb as name end
 793+ 858B             >
 793+ 858B 40 85       >                dw      last_NFA            // Link to previous definition Name
 793+ 858D             >LOAD:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 793+ 858D 9D 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 793+ 858F             >                else
 793+ 858F ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 793+ 858F             >                endif           ; ok        // for other definitions it "points" the correct handler
 793+ 858F             >                // Use of "; ok" to suppress "warning[fwdref]"
 793+ 858F             >
 793+ 858F             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 794+ 858F 1F 6B 17 6A                  dw      DUP, ZLESS
 795+ 8593 E3 63                        dw      ZBRANCH
 796+ 8595 08 00                        dw      Load_Else - $
 797+ 8597 48 85                        dw          LOAD_N
 798+ 8599 CC 63                        dw      BRANCH
 799+ 859B 04 00                        dw      Load_Endif - $
 800+ 859D              Load_Else:
 801+ 859D 67 81                        dw          LOAD_P
 802+ 859F              Load_Endif:
 803+ 859F 99 69                        dw      EXIT
 804+ 85A1
 805+ 85A1
 806+ 85A1              //  ______________________________________________________________________
 807+ 85A1              //
 808+ 85A1              // autoexec     --
 809+ 85A1              // this word is called the first time the Forth system boot to
 810+ 85A1              // load Screen# 1. Once called it patches itself to prevent furhter runs.
 811+ 85A1                              Colon_Def AUTOEXEC, "AUTOEXEC", is_normal
 811+ 85A1             >                New_Def  AUTOEXEC, "AUTOEXEC", Enter_Ptr, is_normal ; ok
 811+ 85A1             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 811+ 85A1             >
 811+ 85A1             >                // dummy db directives used to calculate length of namec
 811+ 85A1 41 55 54 4F >                db      "AUTOEXEC"
 811+ 85A5 45 58 45 43 >
 811+ 85A9             >len_NFA         defl    $ - temp_NFA
 811+ 85A9             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 811+ 85A1             >
 811+ 85A1 88          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 811+ 85A2 41 55 54 4F >                db      "AUTOEXEC"               // name string in 7-bit ascii, but
 811+ 85A6 45 58 45 43 >
 811+ 85AA             >                org     $-1                 // alter last byte of Name just above to set
 811+ 85A9 C3          >                db      {b $} | END_BIT     // msb as name end
 811+ 85AA             >
 811+ 85AA 86 85       >                dw      last_NFA            // Link to previous definition Name
 811+ 85AC             >AUTOEXEC:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 811+ 85AC 9D 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 811+ 85AE             >                else
 811+ 85AE ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 811+ 85AE             >                endif           ; ok        // for other definitions it "points" the correct handler
 811+ 85AE             >                // Use of "; ok" to suppress "warning[fwdref]"
 811+ 85AE             >
 811+ 85AE             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 812+ 85AE A9 63 0B 00                  dw      LIT, 11
 813+ 85B2 A9 63 C5 6C                  dw      LIT, NOOP
 814+ 85B6 A9 63 F7 78                  dw      LIT, Autoexec_Ptr
 815+ 85BA BF 6B                        dw      STORE
 816+ 85BC 8D 85                        dw      LOAD
 817+ 85BE A8 78                        dw      QUIT
 818+ 85C0 99 69                        dw      EXIT
 819+ 85C2
 820+ 85C2
 821+ 85C2              //  ______________________________________________________________________
 822+ 85C2              //
 823+ 85C2              // bye     --
 824+ 85C2              //
 825+ 85C2                              Colon_Def BYE, "BYE", is_normal
 825+ 85C2             >                New_Def  BYE, "BYE", Enter_Ptr, is_normal ; ok
 825+ 85C2             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 825+ 85C2             >
 825+ 85C2             >                // dummy db directives used to calculate length of namec
 825+ 85C2 42 59 45    >                db      "BYE"
 825+ 85C5             >len_NFA         defl    $ - temp_NFA
 825+ 85C5             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 825+ 85C2             >
 825+ 85C2 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 825+ 85C3 42 59 45    >                db      "BYE"               // name string in 7-bit ascii, but
 825+ 85C6             >                org     $-1                 // alter last byte of Name just above to set
 825+ 85C5 C5          >                db      {b $} | END_BIT     // msb as name end
 825+ 85C6             >
 825+ 85C6 A1 85       >                dw      last_NFA            // Link to previous definition Name
 825+ 85C8             >BYE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 825+ 85C8 9D 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 825+ 85CA             >                else
 825+ 85CA ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 825+ 85CA             >                endif           ; ok        // for other definitions it "points" the correct handler
 825+ 85CA             >                // Use of "; ok" to suppress "warning[fwdref]"
 825+ 85CA             >
 825+ 85CA             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 826+ 85CA 05 7E                        dw      FLUSH
 827+ 85CC 38 7D                        dw      EMPTY_BUFFERS
 828+ 85CE DC 7B B2 6B                  dw      BLK_FH, FETCH, F_CLOSE, DROP
 828+ 85D2 AB 67 EA 6A
 829+ 85D6 1A 6D 80 6D                  dw      ZERO, PLUS_ORIGIN
 830+ 85DA 8D 79                        dw      BASIC
 831+ 85DC
 832+ 85DC              //  ______________________________________________________________________
 833+ 85DC              //
 834+ 85DC              // invv     --
 835+ 85DC              //
 836+ 85DC              //              Colon_Def INVV, "INVV", is_normal
 837+ 85DC              //              dw      LIT, 20, EMITC, ONE, EMITC
 838+ 85DC              //              dw      EXIT
 839+ 85DC
 840+ 85DC              //  ______________________________________________________________________
 841+ 85DC              //
 842+ 85DC              // truv     --
 843+ 85DC              //
 844+ 85DC              //              Colon_Def TRUV, "TRUV", is_normal
 845+ 85DC              //              dw      LIT, 20, EMITC, ZERO, EMITC
 846+ 85DC              //              dw      EXIT
 847+ 85DC
 848+ 85DC              //  ______________________________________________________________________
 849+ 85DC              //
 850+ 85DC              // mark     --
 851+ 85DC              //
 852+ 85DC              //              Colon_Def MARK, "MARK", is_normal
 853+ 85DC              //              dw      INVV, TYPE, TRUV
 854+ 85DC              //              dw      EXIT
 855+ 85DC
 856+ 85DC              //  ______________________________________________________________________
 857+ 85DC              //
 858+ 85DC              // back     --
 859+ 85DC              //
 860+ 85DC                              Colon_Def BACK, "BACK", is_normal
 860+ 85DC             >                New_Def  BACK, "BACK", Enter_Ptr, is_normal ; ok
 860+ 85DC             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 860+ 85DC             >
 860+ 85DC             >                // dummy db directives used to calculate length of namec
 860+ 85DC 42 41 43 4B >                db      "BACK"
 860+ 85E0             >len_NFA         defl    $ - temp_NFA
 860+ 85E0             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 860+ 85DC             >
 860+ 85DC 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 860+ 85DD 42 41 43 4B >                db      "BACK"               // name string in 7-bit ascii, but
 860+ 85E1             >                org     $-1                 // alter last byte of Name just above to set
 860+ 85E0 CB          >                db      {b $} | END_BIT     // msb as name end
 860+ 85E1             >
 860+ 85E1 C2 85       >                dw      last_NFA            // Link to previous definition Name
 860+ 85E3             >BACK:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 860+ 85E3 9D 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 860+ 85E5             >                else
 860+ 85E5 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 860+ 85E5             >                endif           ; ok        // for other definitions it "points" the correct handler
 860+ 85E5             >                // Use of "; ok" to suppress "warning[fwdref]"
 860+ 85E5             >
 860+ 85E5             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 861+ 85E5 F9 6E 4C 6F                  dw      HERE, SUBTRACT, COMMA
 861+ 85E9 15 6F
 862+ 85EB 99 69                        dw      EXIT
 863+ 85ED
 864+ 85ED              //  ______________________________________________________________________
 865+ 85ED              //
 866+ 85ED              // if          ( -- a 2 ) \ compile-time
 867+ 85ED              // IF ... THEN
 868+ 85ED              // IF ... ELSE ... ENDIF
 869+ 85ED                              Colon_Def IF, "IF", is_immediate
 869+ 85ED             >                New_Def  IF, "IF", Enter_Ptr, is_immediate ; ok
 869+ 85ED             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 869+ 85ED             >
 869+ 85ED             >                // dummy db directives used to calculate length of namec
 869+ 85ED 49 46       >                db      "IF"
 869+ 85EF             >len_NFA         defl    $ - temp_NFA
 869+ 85EF             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 869+ 85ED             >
 869+ 85ED C2          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 869+ 85EE 49 46       >                db      "IF"               // name string in 7-bit ascii, but
 869+ 85F0             >                org     $-1                 // alter last byte of Name just above to set
 869+ 85EF C6          >                db      {b $} | END_BIT     // msb as name end
 869+ 85F0             >
 869+ 85F0 DC 85       >                dw      last_NFA            // Link to previous definition Name
 869+ 85F2             >IF:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 869+ 85F2 9D 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 869+ 85F4             >                else
 869+ 85F4 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 869+ 85F4             >                endif           ; ok        // for other definitions it "points" the correct handler
 869+ 85F4             >                // Use of "; ok" to suppress "warning[fwdref]"
 869+ 85F4             >
 869+ 85F4             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 870+ 85F4 56 71 E3 63                  dw      COMPILE, ZBRANCH
 871+ 85F8 F9 6E 1A 6D                  dw      HERE, ZERO, COMMA
 871+ 85FC 15 6F
 872+ 85FE 2A 6D                        dw      TWO
 873+ 8600 99 69                        dw      EXIT
 874+ 8602
 875+ 8602              //  ______________________________________________________________________
 876+ 8602              //
 877+ 8602              // then        ( a 2 -- ) \ compile-time
 878+ 8602              //
 879+ 8602                              Colon_Def THEN, "THEN", is_immediate
 879+ 8602             >                New_Def  THEN, "THEN", Enter_Ptr, is_immediate ; ok
 879+ 8602             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 879+ 8602             >
 879+ 8602             >                // dummy db directives used to calculate length of namec
 879+ 8602 54 48 45 4E >                db      "THEN"
 879+ 8606             >len_NFA         defl    $ - temp_NFA
 879+ 8606             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 879+ 8602             >
 879+ 8602 C4          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 879+ 8603 54 48 45 4E >                db      "THEN"               // name string in 7-bit ascii, but
 879+ 8607             >                org     $-1                 // alter last byte of Name just above to set
 879+ 8606 CE          >                db      {b $} | END_BIT     // msb as name end
 879+ 8607             >
 879+ 8607 ED 85       >                dw      last_NFA            // Link to previous definition Name
 879+ 8609             >THEN:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 879+ 8609 9D 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 879+ 860B             >                else
 879+ 860B ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 879+ 860B             >                endif           ; ok        // for other definitions it "points" the correct handler
 879+ 860B             >                // Use of "; ok" to suppress "warning[fwdref]"
 879+ 860B             >
 879+ 860B             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 880+ 860B DD 70                        dw      QCOMP
 881+ 860D 2A 6D 0C 71                  dw      TWO, QPAIRS
 882+ 8611 F9 6E DA 6A                  dw      HERE, OVER, SUBTRACT, SWAP, STORE
 882+ 8615 4C 6F 12 6B
 882+ 8619 BF 6B
 883+ 861B 99 69                        dw      EXIT
 884+ 861D
 885+ 861D              //  ______________________________________________________________________
 886+ 861D              //
 887+ 861D              // endif       ( a 2 -- ) \ compile-time
 888+ 861D              //
 889+ 861D                              Colon_Def ENDIF, "ENDIF", is_immediate
 889+ 861D             >                New_Def  ENDIF, "ENDIF", Enter_Ptr, is_immediate ; ok
 889+ 861D             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 889+ 861D             >
 889+ 861D             >                // dummy db directives used to calculate length of namec
 889+ 861D 45 4E 44 49 >                db      "ENDIF"
 889+ 8621 46          >
 889+ 8622             >len_NFA         defl    $ - temp_NFA
 889+ 8622             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 889+ 861D             >
 889+ 861D C5          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 889+ 861E 45 4E 44 49 >                db      "ENDIF"               // name string in 7-bit ascii, but
 889+ 8622 46          >
 889+ 8623             >                org     $-1                 // alter last byte of Name just above to set
 889+ 8622 C6          >                db      {b $} | END_BIT     // msb as name end
 889+ 8623             >
 889+ 8623 02 86       >                dw      last_NFA            // Link to previous definition Name
 889+ 8625             >ENDIF:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 889+ 8625 9D 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 889+ 8627             >                else
 889+ 8627 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 889+ 8627             >                endif           ; ok        // for other definitions it "points" the correct handler
 889+ 8627             >                // Use of "; ok" to suppress "warning[fwdref]"
 889+ 8627             >
 889+ 8627             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 890+ 8627 09 86                        dw      THEN
 891+ 8629 99 69                        dw      EXIT
 892+ 862B
 893+ 862B              //  ______________________________________________________________________
 894+ 862B              //
 895+ 862B              // else        ( a1 2 -- a2 2 ) \ compile-time
 896+ 862B              //
 897+ 862B                              Colon_Def ELSE, "ELSE", is_immediate
 897+ 862B             >                New_Def  ELSE, "ELSE", Enter_Ptr, is_immediate ; ok
 897+ 862B             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 897+ 862B             >
 897+ 862B             >                // dummy db directives used to calculate length of namec
 897+ 862B 45 4C 53 45 >                db      "ELSE"
 897+ 862F             >len_NFA         defl    $ - temp_NFA
 897+ 862F             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 897+ 862B             >
 897+ 862B C4          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 897+ 862C 45 4C 53 45 >                db      "ELSE"               // name string in 7-bit ascii, but
 897+ 8630             >                org     $-1                 // alter last byte of Name just above to set
 897+ 862F C5          >                db      {b $} | END_BIT     // msb as name end
 897+ 8630             >
 897+ 8630 1D 86       >                dw      last_NFA            // Link to previous definition Name
 897+ 8632             >ELSE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 897+ 8632 9D 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 897+ 8634             >                else
 897+ 8634 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 897+ 8634             >                endif           ; ok        // for other definitions it "points" the correct handler
 897+ 8634             >                // Use of "; ok" to suppress "warning[fwdref]"
 897+ 8634             >
 897+ 8634             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 898+ 8634 DD 70                        dw      QCOMP
 899+ 8636 2A 6D 0C 71                  dw      TWO, QPAIRS
 900+ 863A 56 71 CC 63                  dw      COMPILE, BRANCH
 901+ 863E F9 6E 1A 6D                  dw      HERE, ZERO, COMMA
 901+ 8642 15 6F
 902+ 8644 12 6B 2A 6D                  dw      SWAP, TWO, ENDIF
 902+ 8648 25 86
 903+ 864A 2A 6D                        dw      TWO
 904+ 864C 99 69                        dw      EXIT
 905+ 864E
 906+ 864E              //  ______________________________________________________________________
 907+ 864E              //
 908+ 864E              // begin        ( -- a 1 ) \ compile-time
 909+ 864E              // BEGIN ... AGAIN
 910+ 864E              // BEGIN ... f UNTIL
 911+ 864E              // BEGIN ... f WHILE ... REPEAT
 912+ 864E                              Colon_Def BEGIN, "BEGIN", is_immediate
 912+ 864E             >                New_Def  BEGIN, "BEGIN", Enter_Ptr, is_immediate ; ok
 912+ 864E             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 912+ 864E             >
 912+ 864E             >                // dummy db directives used to calculate length of namec
 912+ 864E 42 45 47 49 >                db      "BEGIN"
 912+ 8652 4E          >
 912+ 8653             >len_NFA         defl    $ - temp_NFA
 912+ 8653             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 912+ 864E             >
 912+ 864E C5          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 912+ 864F 42 45 47 49 >                db      "BEGIN"               // name string in 7-bit ascii, but
 912+ 8653 4E          >
 912+ 8654             >                org     $-1                 // alter last byte of Name just above to set
 912+ 8653 CE          >                db      {b $} | END_BIT     // msb as name end
 912+ 8654             >
 912+ 8654 2B 86       >                dw      last_NFA            // Link to previous definition Name
 912+ 8656             >BEGIN:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 912+ 8656 9D 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 912+ 8658             >                else
 912+ 8658 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 912+ 8658             >                endif           ; ok        // for other definitions it "points" the correct handler
 912+ 8658             >                // Use of "; ok" to suppress "warning[fwdref]"
 912+ 8658             >
 912+ 8658             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 913+ 8658 DD 70                        dw      QCOMP
 914+ 865A F9 6E                        dw      HERE
 915+ 865C 2A 6D                        dw      TWO
 916+ 865E 99 69                        dw      EXIT
 917+ 8660
 918+ 8660              //  ______________________________________________________________________
 919+ 8660              //
 920+ 8660              // again        ( a 1 -- ) \ compile-time
 921+ 8660                              Colon_Def AGAIN, "AGAIN", is_immediate
 921+ 8660             >                New_Def  AGAIN, "AGAIN", Enter_Ptr, is_immediate ; ok
 921+ 8660             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 921+ 8660             >
 921+ 8660             >                // dummy db directives used to calculate length of namec
 921+ 8660 41 47 41 49 >                db      "AGAIN"
 921+ 8664 4E          >
 921+ 8665             >len_NFA         defl    $ - temp_NFA
 921+ 8665             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 921+ 8660             >
 921+ 8660 C5          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 921+ 8661 41 47 41 49 >                db      "AGAIN"               // name string in 7-bit ascii, but
 921+ 8665 4E          >
 921+ 8666             >                org     $-1                 // alter last byte of Name just above to set
 921+ 8665 CE          >                db      {b $} | END_BIT     // msb as name end
 921+ 8666             >
 921+ 8666 4E 86       >                dw      last_NFA            // Link to previous definition Name
 921+ 8668             >AGAIN:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 921+ 8668 9D 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 921+ 866A             >                else
 921+ 866A ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 921+ 866A             >                endif           ; ok        // for other definitions it "points" the correct handler
 921+ 866A             >                // Use of "; ok" to suppress "warning[fwdref]"
 921+ 866A             >
 921+ 866A             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 922+ 866A DD 70                        dw      QCOMP
 923+ 866C 2A 6D 0C 71                  dw      TWO, QPAIRS
 924+ 8670 56 71 CC 63                  dw      COMPILE, BRANCH
 925+ 8674 E3 85                        dw      BACK
 926+ 8676 99 69                        dw      EXIT
 927+ 8678
 928+ 8678              //  ______________________________________________________________________
 929+ 8678              //
 930+ 8678              // until        ( a 1 -- ) \ compile-time
 931+ 8678                              Colon_Def UNTIL, "UNTIL", is_immediate
 931+ 8678             >                New_Def  UNTIL, "UNTIL", Enter_Ptr, is_immediate ; ok
 931+ 8678             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 931+ 8678             >
 931+ 8678             >                // dummy db directives used to calculate length of namec
 931+ 8678 55 4E 54 49 >                db      "UNTIL"
 931+ 867C 4C          >
 931+ 867D             >len_NFA         defl    $ - temp_NFA
 931+ 867D             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 931+ 8678             >
 931+ 8678 C5          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 931+ 8679 55 4E 54 49 >                db      "UNTIL"               // name string in 7-bit ascii, but
 931+ 867D 4C          >
 931+ 867E             >                org     $-1                 // alter last byte of Name just above to set
 931+ 867D CC          >                db      {b $} | END_BIT     // msb as name end
 931+ 867E             >
 931+ 867E 60 86       >                dw      last_NFA            // Link to previous definition Name
 931+ 8680             >UNTIL:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 931+ 8680 9D 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 931+ 8682             >                else
 931+ 8682 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 931+ 8682             >                endif           ; ok        // for other definitions it "points" the correct handler
 931+ 8682             >                // Use of "; ok" to suppress "warning[fwdref]"
 931+ 8682             >
 931+ 8682             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 932+ 8682 DD 70                        dw      QCOMP
 933+ 8684 2A 6D 0C 71                  dw      TWO, QPAIRS
 934+ 8688 56 71 E3 63                  dw      COMPILE, ZBRANCH
 935+ 868C E3 85                        dw      BACK
 936+ 868E 99 69                        dw      EXIT
 937+ 8690
 938+ 8690              //  ______________________________________________________________________
 939+ 8690              //
 940+ 8690              // end          ( a 1 -- ) \ compile-time
 941+ 8690                              Colon_Def END, "END", is_immediate
 941+ 8690             >                New_Def  END, "END", Enter_Ptr, is_immediate ; ok
 941+ 8690             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 941+ 8690             >
 941+ 8690             >                // dummy db directives used to calculate length of namec
 941+ 8690 45 4E 44    >                db      "END"
 941+ 8693             >len_NFA         defl    $ - temp_NFA
 941+ 8693             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 941+ 8690             >
 941+ 8690 C3          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 941+ 8691 45 4E 44    >                db      "END"               // name string in 7-bit ascii, but
 941+ 8694             >                org     $-1                 // alter last byte of Name just above to set
 941+ 8693 C4          >                db      {b $} | END_BIT     // msb as name end
 941+ 8694             >
 941+ 8694 78 86       >                dw      last_NFA            // Link to previous definition Name
 941+ 8696             >END:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 941+ 8696 9D 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 941+ 8698             >                else
 941+ 8698 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 941+ 8698             >                endif           ; ok        // for other definitions it "points" the correct handler
 941+ 8698             >                // Use of "; ok" to suppress "warning[fwdref]"
 941+ 8698             >
 941+ 8698             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 942+ 8698 80 86                        dw      UNTIL
 943+ 869A 99 69                        dw      EXIT
 944+ 869C
 945+ 869C              //  ______________________________________________________________________
 946+ 869C              //
 947+ 869C              // while        ( a1 1 -- a1 1 a2 4 ) \ compile-time
 948+ 869C                              Colon_Def WHILE, "WHILE", is_immediate
 948+ 869C             >                New_Def  WHILE, "WHILE", Enter_Ptr, is_immediate ; ok
 948+ 869C             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 948+ 869C             >
 948+ 869C             >                // dummy db directives used to calculate length of namec
 948+ 869C 57 48 49 4C >                db      "WHILE"
 948+ 86A0 45          >
 948+ 86A1             >len_NFA         defl    $ - temp_NFA
 948+ 86A1             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 948+ 869C             >
 948+ 869C C5          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 948+ 869D 57 48 49 4C >                db      "WHILE"               // name string in 7-bit ascii, but
 948+ 86A1 45          >
 948+ 86A2             >                org     $-1                 // alter last byte of Name just above to set
 948+ 86A1 C5          >                db      {b $} | END_BIT     // msb as name end
 948+ 86A2             >
 948+ 86A2 90 86       >                dw      last_NFA            // Link to previous definition Name
 948+ 86A4             >WHILE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 948+ 86A4 9D 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 948+ 86A6             >                else
 948+ 86A6 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 948+ 86A6             >                endif           ; ok        // for other definitions it "points" the correct handler
 948+ 86A6             >                // Use of "; ok" to suppress "warning[fwdref]"
 948+ 86A6             >
 948+ 86A6             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 949+ 86A6 F2 85                        dw      IF
 950+ 86A8              //              dw      TWO_PLUS // ( that is 4 )
 951+ 86A8 6E 6B                        dw      TWO_SWAP
 952+ 86AA 99 69                        dw      EXIT
 953+ 86AC
 954+ 86AC              //  ______________________________________________________________________
 955+ 86AC              //
 956+ 86AC              // repeat       ( a1 1 a2 4 -- ) \ compile-time
 957+ 86AC                              Colon_Def REPEAT, "REPEAT", is_immediate
 957+ 86AC             >                New_Def  REPEAT, "REPEAT", Enter_Ptr, is_immediate ; ok
 957+ 86AC             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 957+ 86AC             >
 957+ 86AC             >                // dummy db directives used to calculate length of namec
 957+ 86AC 52 45 50 45 >                db      "REPEAT"
 957+ 86B0 41 54       >
 957+ 86B2             >len_NFA         defl    $ - temp_NFA
 957+ 86B2             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 957+ 86AC             >
 957+ 86AC C6          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 957+ 86AD 52 45 50 45 >                db      "REPEAT"               // name string in 7-bit ascii, but
 957+ 86B1 41 54       >
 957+ 86B3             >                org     $-1                 // alter last byte of Name just above to set
 957+ 86B2 D4          >                db      {b $} | END_BIT     // msb as name end
 957+ 86B3             >
 957+ 86B3 9C 86       >                dw      last_NFA            // Link to previous definition Name
 957+ 86B5             >REPEAT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 957+ 86B5 9D 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 957+ 86B7             >                else
 957+ 86B7 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 957+ 86B7             >                endif           ; ok        // for other definitions it "points" the correct handler
 957+ 86B7             >                // Use of "; ok" to suppress "warning[fwdref]"
 957+ 86B7             >
 957+ 86B7             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 958+ 86B7 68 86                        dw      AGAIN
 959+ 86B9              //              dw      TWO_MINUS
 960+ 86B9 25 86                        dw      ENDIF
 961+ 86BB 99 69                        dw      EXIT
 962+ 86BD
 963+ 86BD              //  ______________________________________________________________________
 964+ 86BD              //
 965+ 86BD              // ?do-
 966+ 86BD              // special version of "BACK" used by ?DO and LOOP
 967+ 86BD                              Colon_Def C_DO_BACK, "?DO-", is_normal
 967+ 86BD             >                New_Def  C_DO_BACK, "?DO-", Enter_Ptr, is_normal ; ok
 967+ 86BD             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 967+ 86BD             >
 967+ 86BD             >                // dummy db directives used to calculate length of namec
 967+ 86BD 3F 44 4F 2D >                db      "?DO-"
 967+ 86C1             >len_NFA         defl    $ - temp_NFA
 967+ 86C1             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 967+ 86BD             >
 967+ 86BD 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 967+ 86BE 3F 44 4F 2D >                db      "?DO-"               // name string in 7-bit ascii, but
 967+ 86C2             >                org     $-1                 // alter last byte of Name just above to set
 967+ 86C1 AD          >                db      {b $} | END_BIT     // msb as name end
 967+ 86C2             >
 967+ 86C2 AC 86       >                dw      last_NFA            // Link to previous definition Name
 967+ 86C4             >C_DO_BACK:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 967+ 86C4 9D 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 967+ 86C6             >                else
 967+ 86C6 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 967+ 86C6             >                endif           ; ok        // for other definitions it "points" the correct handler
 967+ 86C6             >                // Use of "; ok" to suppress "warning[fwdref]"
 967+ 86C6             >
 967+ 86C6             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 968+ 86C6 E3 85                        dw      BACK
 969+ 86C8              CDoBack_Begin:
 970+ 86C8 61 69 8A 6E                  dw      SPFETCH, CSP, FETCH, SUBTRACT
 970+ 86CC B2 6B 4C 6F
 971+ 86D0 E3 63                        dw      ZBRANCH
 972+ 86D2 0A 00                        dw      CDoBack_While - $
 973+ 86D4 78 6A 25 86                  dw          TWO_PLUS, ENDIF
 974+ 86D8 CC 63                        dw      BRANCH
 975+ 86DA EE FF                        dw      CDoBack_Begin - $
 976+ 86DC              CDoBack_While:
 977+ 86DC 1F 71 8A 6E                  dw      QCSP, CSP, STORE
 977+ 86E0 BF 6B
 978+ 86E2 99 69                        dw      EXIT
 979+ 86E4
 980+ 86E4              //  ______________________________________________________________________
 981+ 86E4              //
 982+ 86E4              // do
 983+ 86E4              // DO  ... LOOP
 984+ 86E4              // DO  ... n +LOOP
 985+ 86E4              // ?DO ... LOOP
 986+ 86E4              // ?DO ... n +LOOP
 987+ 86E4                              Colon_Def DO, "DO", is_immediate
 987+ 86E4             >                New_Def  DO, "DO", Enter_Ptr, is_immediate ; ok
 987+ 86E4             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 987+ 86E4             >
 987+ 86E4             >                // dummy db directives used to calculate length of namec
 987+ 86E4 44 4F       >                db      "DO"
 987+ 86E6             >len_NFA         defl    $ - temp_NFA
 987+ 86E6             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 987+ 86E4             >
 987+ 86E4 C2          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 987+ 86E5 44 4F       >                db      "DO"               // name string in 7-bit ascii, but
 987+ 86E7             >                org     $-1                 // alter last byte of Name just above to set
 987+ 86E6 CF          >                db      {b $} | END_BIT     // msb as name end
 987+ 86E7             >
 987+ 86E7 BD 86       >                dw      last_NFA            // Link to previous definition Name
 987+ 86E9             >DO:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 987+ 86E9 9D 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 987+ 86EB             >                else
 987+ 86EB ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 987+ 86EB             >                endif           ; ok        // for other definitions it "points" the correct handler
 987+ 86EB             >                // Use of "; ok" to suppress "warning[fwdref]"
 987+ 86EB             >
 987+ 86EB             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 988+ 86EB 56 71 70 64                  dw      COMPILE, C_DO
 989+ 86EF 8A 6E B2 6B                  dw      CSP, FETCH, STORE_CSP
 989+ 86F3 B0 70
 990+ 86F5 F9 6E 32 6D                  dw      HERE, THREE
 991+ 86F9 99 69                        dw      EXIT
 992+ 86FB
 993+ 86FB              //  ______________________________________________________________________
 994+ 86FB              //
 995+ 86FB              // loop
 996+ 86FB                              Colon_Def LOOP, "LOOP", is_immediate
 996+ 86FB             >                New_Def  LOOP, "LOOP", Enter_Ptr, is_immediate ; ok
 996+ 86FB             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 996+ 86FB             >
 996+ 86FB             >                // dummy db directives used to calculate length of namec
 996+ 86FB 4C 4F 4F 50 >                db      "LOOP"
 996+ 86FF             >len_NFA         defl    $ - temp_NFA
 996+ 86FF             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 996+ 86FB             >
 996+ 86FB C4          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 996+ 86FC 4C 4F 4F 50 >                db      "LOOP"               // name string in 7-bit ascii, but
 996+ 8700             >                org     $-1                 // alter last byte of Name just above to set
 996+ 86FF D0          >                db      {b $} | END_BIT     // msb as name end
 996+ 8700             >
 996+ 8700 E4 86       >                dw      last_NFA            // Link to previous definition Name
 996+ 8702             >LOOP:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 996+ 8702 9D 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 996+ 8704             >                else
 996+ 8704 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 996+ 8704             >                endif           ; ok        // for other definitions it "points" the correct handler
 996+ 8704             >                // Use of "; ok" to suppress "warning[fwdref]"
 996+ 8704             >
 996+ 8704             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 997+ 8704 32 6D 0C 71                  dw      THREE, QPAIRS
 998+ 8708 56 71 31 64                  dw      COMPILE, C_LOOP
 999+ 870C C4 86                        dw      C_DO_BACK
1000+ 870E 99 69                        dw      EXIT
1001+ 8710
1002+ 8710              //  ______________________________________________________________________
1003+ 8710              //
1004+ 8710              // +loop
1005+ 8710                              Colon_Def PLOOP, "+LOOP", is_immediate
1005+ 8710             >                New_Def  PLOOP, "+LOOP", Enter_Ptr, is_immediate ; ok
1005+ 8710             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1005+ 8710             >
1005+ 8710             >                // dummy db directives used to calculate length of namec
1005+ 8710 2B 4C 4F 4F >                db      "+LOOP"
1005+ 8714 50          >
1005+ 8715             >len_NFA         defl    $ - temp_NFA
1005+ 8715             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1005+ 8710             >
1005+ 8710 C5          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
1005+ 8711 2B 4C 4F 4F >                db      "+LOOP"               // name string in 7-bit ascii, but
1005+ 8715 50          >
1005+ 8716             >                org     $-1                 // alter last byte of Name just above to set
1005+ 8715 D0          >                db      {b $} | END_BIT     // msb as name end
1005+ 8716             >
1005+ 8716 FB 86       >                dw      last_NFA            // Link to previous definition Name
1005+ 8718             >PLOOP:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1005+ 8718 9D 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
1005+ 871A             >                else
1005+ 871A ~           >                dw      $ + 2   ; ok        // is pointed by CFA
1005+ 871A             >                endif           ; ok        // for other definitions it "points" the correct handler
1005+ 871A             >                // Use of "; ok" to suppress "warning[fwdref]"
1005+ 871A             >
1005+ 871A             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1006+ 871A 32 6D 0C 71                  dw      THREE, QPAIRS
1007+ 871E 56 71 F9 63                  dw      COMPILE, C_PLOOP
1008+ 8722 C4 86                        dw      C_DO_BACK
1009+ 8724 99 69                        dw      EXIT
1010+ 8726
1011+ 8726              //  ______________________________________________________________________
1012+ 8726              //
1013+ 8726              // ?do
1014+ 8726                              Colon_Def QDO, "?DO", is_immediate
1014+ 8726             >                New_Def  QDO, "?DO", Enter_Ptr, is_immediate ; ok
1014+ 8726             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1014+ 8726             >
1014+ 8726             >                // dummy db directives used to calculate length of namec
1014+ 8726 3F 44 4F    >                db      "?DO"
1014+ 8729             >len_NFA         defl    $ - temp_NFA
1014+ 8729             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1014+ 8726             >
1014+ 8726 C3          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
1014+ 8727 3F 44 4F    >                db      "?DO"               // name string in 7-bit ascii, but
1014+ 872A             >                org     $-1                 // alter last byte of Name just above to set
1014+ 8729 CF          >                db      {b $} | END_BIT     // msb as name end
1014+ 872A             >
1014+ 872A 10 87       >                dw      last_NFA            // Link to previous definition Name
1014+ 872C             >QDO:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1014+ 872C 9D 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
1014+ 872E             >                else
1014+ 872E ~           >                dw      $ + 2   ; ok        // is pointed by CFA
1014+ 872E             >                endif           ; ok        // for other definitions it "points" the correct handler
1014+ 872E             >                // Use of "; ok" to suppress "warning[fwdref]"
1014+ 872E             >
1014+ 872E             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1015+ 872E 56 71 42 64                  dw      COMPILE, C_Q_DO
1016+ 8732 8A 6E B2 6B                  dw      CSP, FETCH, STORE_CSP
1016+ 8736 B0 70
1017+ 8738 F9 6E 1A 6D                  dw      HERE, ZERO, COMMA, ZERO
1017+ 873C 15 6F 1A 6D
1018+ 8740 F9 6E 32 6D                  dw      HERE, THREE
1019+ 8744 99 69                        dw      EXIT
1020+ 8746
1021+ 8746              Latest_Definition:
1022+ 8746              //  ______________________________________________________________________
1023+ 8746              //
1024+ 8746              // \
1025+ 8746                              Colon_Def BACKSLASH, "\\", is_immediate  // this is a single back-slash
1025+ 8746             >                New_Def  BACKSLASH, "\\", Enter_Ptr, is_immediate ; ok
1025+ 8746             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1025+ 8746             >
1025+ 8746             >                // dummy db directives used to calculate length of namec
1025+ 8746 5C          >                db      "\\"
1025+ 8747             >len_NFA         defl    $ - temp_NFA
1025+ 8747             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1025+ 8746             >
1025+ 8746 C1          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
1025+ 8747 5C          >                db      "\\"               // name string in 7-bit ascii, but
1025+ 8748             >                org     $-1                 // alter last byte of Name just above to set
1025+ 8747 DC          >                db      {b $} | END_BIT     // msb as name end
1025+ 8748             >
1025+ 8748 26 87       >                dw      last_NFA            // Link to previous definition Name
1025+ 874A             >BACKSLASH:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1025+ 874A 9D 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
1025+ 874C             >                else
1025+ 874C ~           >                dw      $ + 2   ; ok        // is pointed by CFA
1025+ 874C             >                endif           ; ok        // for other definitions it "points" the correct handler
1025+ 874C             >                // Use of "; ok" to suppress "warning[fwdref]"
1025+ 874C             >
1025+ 874C             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1026+ 874C 19 6E B2 6B                  dw      BLK, FETCH
1027+ 8750 E3 63                        dw      ZBRANCH
1028+ 8752 30 00                        dw      Backslash_Else_1 - $
1029+ 8754 19 6E B2 6B                  dw          BLK, FETCH, ONE, GREATER  // BLOCK 1 is used as temp-line in INCLUDE file
1029+ 8758 22 6D 97 6F
1030+ 875C E3 63                        dw          ZBRANCH
1031+ 875E 18 00                        dw          Backslash_Else_2 - $
1032+ 8760 22 6E B2 6B                  dw              TO_IN, FETCH, CL, MOD, CL
1032+ 8764 4E 6D AE 7A
1032+ 8768 4E 6D
1033+ 876A 12 6B 4C 6F                  dw              SWAP, SUBTRACT, TO_IN, PLUSSTORE
1033+ 876E 22 6E 8F 6B
1034+ 8772 CC 63                        dw          BRANCH
1035+ 8774 0A 00                        dw          Backslash_Endif_2 - $
1036+ 8776              Backslash_Else_2:
1037+ 8776 5A 6D 92 6A                  dw              BBUF, CELL_MINUS, TO_IN, STORE
1037+ 877A 22 6E BF 6B
1038+ 877E              Backslash_Endif_2:
1039+ 877E CC 63                        dw      BRANCH
1040+ 8780 0A 00                        dw      Backslash_Endif_1 - $
1041+ 8782              Backslash_Else_1:
1042+ 8782 A9 63 50 00                  dw          LIT, 80, TO_IN, STORE
1042+ 8786 22 6E BF 6B
1043+ 878A              Backslash_Endif_1:
1044+ 878A 99 69                        dw      EXIT
1045+ 878C
1046+ 878C              Fence_Word:
1047+ 878C              //  ______________________________________________________________________
1048+ 878C              //
1049+ 878C
1050+ 878C 00           Here_Dictionary db      0
1051+ 878D
# file closed: C:\Zx\CSpect\Projects\vForth15_INDIRECT/source/L3.asm
 114  878D
 115  878D              // now we save the compiled file so we can either run it or debug it
 116  878D                              SAVENEX OPEN "output/main.nex", ORIGIN
 117  878D                              SAVENEX CORE 3, 0, 0                                // Next core 3.0.0 required as minimum
 118  878D                              SAVENEX CFG  0
 119  878D                              SAVENEX BANK 2, 0
 120  878D                              SAVENEX AUTO
 121  878D                              SAVENEX CLOSE
 122  878D
 123  878D              //              PAGE 7 ;set 7 page to current slot
 124  878D              //              SAVEBIN "ram7.bin",$C000,$4000 ;- save 4000h begin from C000h of RAM to file
 125  878D              //              SAVEBIN "output/ram2.bin", $8000, 9800 ;- save 3000h begin from 8000h of RAM to file
 126  878D
 127  878D                              SAVETAP "output/F15E.tap", CODE, "forth15e", ORIGIN, 10000
 128  878D
 129  878D                              SAVEBIN "output/forth15E.bin", ORIGIN, 10000
 130  878D
 131  878D                              END
# file closed: C:\Zx\CSpect\Projects\vForth15_INDIRECT/source/main.asm
