# file opened: C:\Zx\CSpect\Projects\vForth15_INDIRECT/source/main.asm
   1  0000              //  ______________________________________________________________________
   2  0000              //
   3  0000              //  main.asm
   4  0000              //  ______________________________________________________________________
   5  0000              //
   6  0000              // v-Forth 1.5 NextZXOS version
   7  0000              // build 20210916
   8  0000              //
   9  0000              //
  10  0000              //  NextZXOS version
  11  0000              //  ______________________________________________________________________
  12  0000              //
  13  0000              //  This work is available as-is with no whatsoever warranty.
  14  0000              //  Copying, modifying and distributing this software is allowed
  15  0000              //  provided that the copyright notice is kept.
  16  0000              //  ______________________________________________________________________
  17  0000              //
  18  0000              //  by Matteo Vitturi, 1990-2021
  19  0000              //
  20  0000              //  https://sites.google.com/view/vforth/vforth15-next
  21  0000              //  https://www.oocities.org/matteo_vitturi/english/index.htm
  22  0000              //
  23  0000              //  This is the complete compiler for v.Forth for SINCLAIR ZX Spectrum Next.
  24  0000              //  Each line of this source list mustn't exceed 80 bytes.
  25  0000              //  Z80N (ZX Spectrum Next) extension is available.
  26  0000              //
  27  0000              //  This list has been tested using the following configuration:
  28  0000              //      - CSpect emulator V.2.12.30
  29  0000              //  ______________________________________________________________________
  30  0000              //
  31  0000              //  Z80 Registers usage map
  32  0000              //
  33  0000              //  AF
  34  0000              //  BC - Instruction Pointer: should be preserved during ROM/OS calls
  35  0000              //  DE - Working
  36  0000              //  HL - Working
  37  0000              //
  38  0000              //  AF'- Sometime used for backup purpose
  39  0000              //  BC'- Not used
  40  0000              //  DE'- Not used
  41  0000              //  HL'- Not used: (saved at startup)
  42  0000              //
  43  0000              //  SP - Calculator Stack Pointer
  44  0000              //  IX - Inner interpreter "next" address pointer. This way jp (ix) is 2T-state faster than JP next
  45  0000              //  IY - (ZX System: must be preserved to interact with standard ROM)
  46  0000              //
  47  0000              //  ______________________________________________________________________
  48  0000              //
  49  0000              //  _________________
  50  0000              //
  51  0000              //  FORTH DEFINITIONS
  52  0000              //  _________________
  53  0000
  54  0000                              OPT     --zxnext
  55  0000              //  ______________________________________________________________________
  56  0000              //
  57  0000              // this controls some debugging code in L0.asm
  58  0000              //  0 for final binary release.
  59  0000              //  1 for debugging with Visual Studio Code and DeZog
  60  0000              // -1 for for binary comparison with Forth generated code.
  61  0000              DEBUGGING       equ     -1
  62  0000              //
  63  0000              //  ______________________________________________________________________
  64  0000
  65  0000                              if ( -1 == DEBUGGING )
  66  0000              ORIGIN          equ     $62E6                   // for binary comparison
  67  0000                              endif
  68  0000              //  ______________________________________________________________________
  69  0000
  70  0000                              if (  0 == DEBUGGING )
  71  0000 ~            ORIGIN          equ     $6366                   // binary
  72  0000                              endif
  73  0000              //  ______________________________________________________________________
  74  0000
  75  0000                              if (  1 == DEBUGGING )
  76  0000 ~            ORIGIN          equ     $8080                   // for DeZog
  77  0000                              endif
  78  0000              //  ______________________________________________________________________
  79  0000
  80  0000                              DEVICE  ZXSPECTRUMNEXT
  81  0000
  82  0000                              ORG     ORIGIN
  83  62E6
  84  62E6                              if ( -1 == DEBUGGING )
  85  62E6 00 00 00...                  ds 128                            // for binary comparison
  86  62EA                              endif
  87  6366
  88  6366              //  ______________________________________________________________________
  89  6366              //
  90  6366              //  Naming convention for Label vs Forth correspondance
  91  6366              //  Forth words are named as they are named for real with some exception to avoid assembler syntax errors.
  92  6366              //    - Leading "0" is converted into "Z_"
  93  6366              //    - Leading "(" is converted into "C_", closing bracket is omitted
  94  6366              //    - Leading numbers are converted in letters: ONE_  TWO_ etc.
  95  6366              //    - Question mark "?" is converted into "Q" or omitted if needed / useful.
  96  6366              //    - Plus sign "+" is converted in _PLUS or ADD_ depending.
  97  6366              //    - Minus sign "-" in L (for Line), MINUS or SUBTRACT depending
  98  6366              //    - Greater-Than sign ">" in _GREATER or TO_ depending
  99  6366              //    - Equal sign "=" is converted in EQUAL
 100  6366              //    - Less-Than sign "<" in _LESS or FROM_ (or TO_ again) depending
 101  6366              //    - Asterisk sign "*" is converted in _MUL or STAR
 102  6366              //    - Slash "/" is converted in _DIV or omitted if it is clear what it means
 103  6366              //    - Exclamation mark "!" is converted in STORE
 104  6366              //    - At-Sign "@" is converted in FETCH
 105  6366              //    - Words that collide with Assembler are normally suffixed with "_OP"
 106  6366
 107  6366                              include "system.asm"
# file opened: C:\Zx\CSpect\Projects\vForth15_INDIRECT/source/system.asm
   1+ 6366              //  ______________________________________________________________________
   2+ 6366              //
   3+ 6366              //  system.asm
   4+ 6366              //  ______________________________________________________________________
   5+ 6366
   6+ 6366              // Registers:
   7+ 6366              //
   8+ 6366              //      BC: Instruction Pointer
   9+ 6366              //      DE:
  10+ 6366              //      HL: W register
  11+ 6366              //      SP: Calc stack Pointer
  12+ 6366              //      IX: Inner-Interpreter Address
  13+ 6366
  14+ 6366              //  ______________________________________________________________________
  15+ 6366              //
  16+ 6366              // ZX-Spectrum standard system variables
  17+ 6366              SCR_CT          equ     $5C8C                   // SCR-CT system variable
  18+ 6366              LASTK           equ     $5C08                   // LASTK system variable
  19+ 6366              BORDCR          equ     $5C48                   // BORDCR system variable
  20+ 6366              FLAGS2          equ     $5C6A                   // for caps-lock
  21+ 6366
  22+ 6366              //  ______________________________________________________________________
  23+ 6366              //
  24+ 6366              // Flag constants
  25+ 6366              TRUE_FLAG       equ     $FFFF
  26+ 6366              FALSE_FLAG      equ     $0000
  27+ 6366
  28+ 6366              //  ______________________________________________________________________
  29+ 6366              //
  30+ 6366              // Ascii char constants
  31+ 6366              NUL_CHAR        equ     $00
  32+ 6366              COMMA_CHAR      equ     $06
  33+ 6366              BACKSPACE_CHAR  equ     $08
  34+ 6366              CR_CHAR         equ     $0D
  35+ 6366              BLANK_CHAR      equ     $20
  36+ 6366              QUOTE_CHAR      equ     "'"
  37+ 6366              DQUOTE_CHAR     equ     '"'
  38+ 6366              UNDERSCORE_CHAR equ     $5F
  39+ 6366              SOLIDBLOCK_CHAR equ     $8F
  40+ 6366              HALFBLOCK_CHAR  equ     $8C
  41+ 6366              LC_A_CHAR       equ     $61                 // lower-case "a"
  42+ 6366              LC_Z_CHAR       equ     $7A                 // lower-case "z"
  43+ 6366
  44+ 6366
  45+ 6366              //  ______________________________________________________________________
  46+ 6366              //
  47+ 6366
  48+ 6366                              // emulate something like:  ld hl,rp
  49+ 6366              ldhlrp          macro
  50+ 6366 ~                            ld      hl,(RP_Pointer)
  51+ 6366                              endm
  52+ 6366
  53+ 6366                              // emulate something like:  ld rp,hl
  54+ 6366              ldrphl          macro
  55+ 6366 ~                            ld      (RP_Pointer),hl
  56+ 6366                              endm
  57+ 6366
  58+ 6366              //  ______________________________________________________________________
  59+ 6366              //
  60+ 6366              //  Inner interpreter next-address pointer. This is 2T-state faster than "jp address"
  61+ 6366              next            macro
  62+ 6366 ~                            jp      (ix)
  63+ 6366                              endm
  64+ 6366
  65+ 6366              psh1            macro
  66+ 6366 ~                            push    hl
  67+ 6366 ~                            jp      (ix)
  68+ 6366                              endm
  69+ 6366
  70+ 6366              psh2            macro
  71+ 6366 ~                            push    de
  72+ 6366 ~                            push    hl
  73+ 6366 ~                            jp      (ix)
  74+ 6366                              endm
  75+ 6366
  76+ 6366              //  ______________________________________________________________________
  77+ 6366              //
  78+ 6366              // Bit constants in length-byte
  79+ 6366
  80+ 6366              SMUDGE_BIT      equ     %00100000               // $20
  81+ 6366              IMMEDIATE_BIT   equ     %01000000               // $40
  82+ 6366              END_BIT         equ     %10000000               // $80
  83+ 6366
  84+ 6366
  85+ 6366              //  ______________________________________________________________________
  86+ 6366              //
  87+ 6366              //  To create Forth words using this (nice) Assembler, we have to use the two following
  88+ 6366              //  pointers
  89+ 6366              temp_NFA        defl    0
  90+ 6366              last_NFA        defl    0
  91+ 6366              len_NFA         defl    0
  92+ 6366
  93+ 6366              is_code         equ     0                   // so the direct machine-code starts at CFA
  94+ 6366              is_normal       equ     0                   // so the direct machine-code starts at CFA
  95+ 6366              is_immediate    equ     IMMEDIATE_BIT       // $40 - the definition is IMMEDIATE.
  96+ 6366
  97+ 6366              //  ______________________________________________________________________
  98+ 6366              //
  99+ 6366              //  Create a new "low-level" definition
 100+ 6366              //  This macro is used in the form  Create FORTH_NAME,n,"forth_name"
 101+ 6366              //  to create a new Forth Dictionary entry the same way Forth itself would do.
 102+ 6366              //  A word begins with a Length-Byte in range 1-31. Top 3 msb are used as flags
 103+ 6366              //  see SMUDGE_BIT and IMMEDIATE_BIT constant above.
 104+ 6366              //  It is followed by the Name of the word, i.e. a string expressed in 7-bit Ascii.
 105+ 6366              //  The last character of the Name must have the msb set to signal the end of it (END_BIT)
 106+ 6366              //  This macro acts much like the standard Forth definition CREATE
 107+ 6366
 108+ 6366              New_Def         macro   label, namec, runcode, bits
 109+ 6366 ~            temp_NFA        defl    $                   // save this NFA address to temp_NFA
 110+ 6366 ~
 111+ 6366 ~                            // dummy db directives used to calculate length of namec
 112+ 6366 ~                            db      namec
 113+ 6366 ~            len_NFA         defl    $ - temp_NFA
 114+ 6366 ~                            org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 115+ 6366 ~
 116+ 6366 ~                            db      len_NFA | END_BIT | bits  // The start of NFA must have msb set to signal the beginning of the sounted string
 117+ 6366 ~                            db      namec               // name string in 7-bit ascii, but
 118+ 6366 ~                            org     $-1                 // alter last byte of Name just above to set
 119+ 6366 ~                            db      {b $} | END_BIT     // msb as name end
 120+ 6366 ~
 121+ 6366 ~                            dw      last_NFA            // Link to previous definition Name
 122+ 6366 ~            label:          if runcode != 0 ; ok        // This is the start address of the direct jp(hl)
 123+ 6366 ~                            dw      runcode ; ok        // for primitive definitions  actual code
 124+ 6366 ~                            else
 125+ 6366 ~                            dw      $ + 2   ; ok        // is pointed by CFA
 126+ 6366 ~                            endif           ; ok        // for other definitions it "points" the correct handler
 127+ 6366 ~                            // Use of "; ok" to suppress "warning[fwdref]"
 128+ 6366 ~
 129+ 6366 ~            last_NFA        defl    temp_NFA            // keep track of NFA saved above
 130+ 6366                              endm
 131+ 6366
 132+ 6366              //  ______________________________________________________________________
 133+ 6366              //
 134+ 6366              // Create a "constant"
 135+ 6366              // The constant value is compiled in first PFA cell
 136+ 6366              Constant_Def    macro   label, namec, constant_value
 137+ 6366 ~                            New_Def  label, namec, Constant_Ptr, is_normal
 138+ 6366 ~                            dw      constant_value
 139+ 6366                              endm
 140+ 6366
 141+ 6366              //  ______________________________________________________________________
 142+ 6366              //
 143+ 6366              // Create a "variable"
 144+ 6366              // The when invoked, a variable returns a pointer, the address of first PFA cell
 145+ 6366              // this allow creation of "variables" which content is  of any length
 146+ 6366              Variable_Def    macro   label, namec, initial_value
 147+ 6366 ~                            New_Def  label, namec, Variable_Ptr, is_normal
 148+ 6366 ~                            dw      initial_value
 149+ 6366                              endm
 150+ 6366
 151+ 6366              //  ______________________________________________________________________
 152+ 6366              //
 153+ 6366              // Create a "user"
 154+ 6366              // It uses a single byte as offset to calculate the address of the variable
 155+ 6366              User_Def        macro   label, namec, offset_value
 156+ 6366 ~                            New_Def  label, namec, User_Ptr, is_normal
 157+ 6366 ~                            db      offset_value
 158+ 6366                              endm
 159+ 6366
 160+ 6366              //  ______________________________________________________________________
 161+ 6366              //
 162+ 6366              // Create a "colon-definition"
 163+ 6366              // The CFA contains a small routine i.e. "call Enter_Ptr".
 164+ 6366              // The PFA, three bytes later, contains the actual Forth definition
 165+ 6366              Colon_Def       macro   label, namec, bits
 166+ 6366 ~                            New_Def  label, namec, Enter_Ptr, bits ; ok
 167+ 6366                              endm
 168+ 6366
 169+ 6366              //  ______________________________________________________________________
 170+ 6366              //
 171+ 6366
 172+ 6366              S0_system:      equ     $D0E8               // Address of top of Calc Stack
 173+ 6366              TIB_system      equ     $D0E8               // TIB grows upwards, Return-Stack downward.
 174+ 6366              R0_system:      equ     $D188               // Address of top of Return Stack. This is S0 + $00A0
 175+ 6366              USER_system:    equ     $D188               // User variables zone.
 176+ 6366              FIRST_system:   equ     $D1E4               // Address of first BUFFER
 177+ 6366              LIMIT_system:   equ     $E000               // Address of first byte beyond last BUFFER
 178+ 6366
# file closed: C:\Zx\CSpect\Projects\vForth15_INDIRECT/source/system.asm
 108  6366                              include "L0.asm"
# file opened: C:\Zx\CSpect\Projects\vForth15_INDIRECT/source/L0.asm
   1+ 6366              //  ______________________________________________________________________
   2+ 6366              //
   3+ 6366              //  L0.asm
   4+ 6366              //
   5+ 6366              //  Origin-Area and Level-0 definitions
   6+ 6366              //  ______________________________________________________________________
   7+ 6366
   8+ 6366
   9+ 6366              Cold_origin:
  10+ 6366 A7                           and     a
  11+ 6367 C3 06 79                     jp      ColdRoutine
  12+ 636A              Warm_origin:
  13+ 636A 37                           scf
  14+ 636B C3 06 79                     jp      WarmRoutine
  15+ 636E
  16+ 636E              // +008
  17+ 636E E6 D0        SP_Basic:       dw      $D0E6               // These are bits with some "standard" meaning... 0101
  18+ 6370
  19+ 6370              // +00A
  20+ 6370 00 0E                        dw      $0E00
  21+ 6372
  22+ 6372              // +00C
  23+ 6372 CC 86        Latest_origin:  dw      Latest_Definition   // Latest word (used in Cold_Start)
  24+ 6374
  25+ 6374              // +00E
  26+ 6374 0C 00        DEL_Char_Ptr:   dw      $000C               // This is the characther used as "Back-Space"
  27+ 6376
  28+ 6376              // +010
  29+ 6376 50 B2        CPU_Id          dw      $B250               // Z80 expressed in base 36
  30+ 6378
  31+ 6378              // +012
  32+ 6378 E8 D0        S0_origin:      dw      S0_system
  33+ 637A 88 D1        R0_origin:      dw      R0_system
  34+ 637C E8 D0        TIB_origin:     dw      TIB_system
  35+ 637E 1F 00        WIDTH_origin:   dw      31
  36+ 6380 01 00        WARNING_origin: dw      1
  37+ 6382 12 87        FENCE_origin:   dw      Fence_Word
  38+ 6384 12 87        DP_origin       dw      Fence_Word
  39+ 6386 14 78        VOCLINK_origin: dw      Voclink_Ptr
  40+ 6388 E4 D1                        dw      FIRST_system
  41+ 638A 00 E0                        dw      LIMIT_system
  42+ 638C
  43+ 638C              // +026
  44+ 638C 8F           Block_Face:     db      SOLIDBLOCK_CHAR     // Caps-Lock   Cursor face
  45+ 638D 8C           Half_Face:      db      HALFBLOCK_CHAR      // Caps-unlock Cursor face
  46+ 638E 5F           Underscore_Face:db      UNDERSCORE_CHAR     // Underscore  Cursor face
  47+ 638F 00                           db      0
  48+ 6390
  49+ 6390              // +02A
  50+ 6390 00 00        IX_Echo:        dw      $0000               // Echo IX after NextOS call
  51+ 6392
  52+ 6392              // +02C
  53+ 6392 00 00        SP_Saved:       dw      $0000               // Saved SP dufing NextOS call
  54+ 6394
  55+ 6394              // +02E
  56+ 6394 88 D1        USER_Pointer:   dw      USER_system
  57+ 6396
  58+ 6396              // +030
  59+ 6396 88 D1        RP_Pointer:     dw      $d188 // R0_system
  60+ 6398
  61+ 6398              // +32
  62+ 6398              // SP_Basic        dw      0
  63+ 6398
  64+ 6398
  65+ 6398              //  ______________________________________________________________________
  66+ 6398
  67+ 6398              // from this point we can use LDHLRP and LDRPHL Assembler macros
  68+ 6398              // instead of their equivalent long sequences.
  69+ 6398
  70+ 6398              //  ______________________________________________________________________
  71+ 6398
  72+ 6398              // address for "next" - inner interpreter
  73+ 6398              // This address must always be pointed by IX
  74+ 6398              // "next" macro simply does a  jp(ix)  instruction
  75+ 6398
  76+ 6398              // Psh2_Ptr:       push    de
  77+ 6398              // Psh1_Ptr:       push    hl
  78+ 6398
  79+ 6398              Next_Ptr:       // This address must always be kept in IX: "next" relies on that
  80+ 6398
  81+ 6398                              if ( 1 == DEBUGGING )
  82+ 6398 ~                            ld      hl, Next_Breakpoint_1
  83+ 6398 ~                            and     a
  84+ 6398 ~                            sbc     hl, bc
  85+ 6398 ~                            jr      nz, Next_Continue
  86+ 6398 ~                            nop // This is where you have to put a real breakpoint to intercept BC values...
  87+ 6398                              endif
  88+ 6398
  89+ 6398              Next_Continue:
  90+ 6398 0A                           ld      a, (bc)
  91+ 6399 03                           inc     bc
  92+ 639A 6F                           ld      l, a
  93+ 639B 0A                           ld      a, (bc)
  94+ 639C 03                           inc     bc
  95+ 639D 67                           ld      h, a                // hl contains a CFA (xt) of word being executed
  96+ 639E
  97+ 639E              // Execute xt i.e. CFA held in HL
  98+ 639E              Exec_Ptr:
  99+ 639E 5E                           ld      e, (hl)
 100+ 639F 23                           inc     hl
 101+ 63A0 56                           ld      d, (hl)
 102+ 63A1 EB                           ex      de, hl
 103+ 63A2 E9                           jp      (hl)                // and jump to it
 104+ 63A3                                                          // there you'll find the real code or a CALL to a ;code part
 105+ 63A3
 106+ 63A3              //  ______________________________________________________________________
 107+ 63A3              //
 108+ 63A3              // lit          -- x
 109+ 63A3              // puts on top of stack the value of the following word.
 110+ 63A3              // it is compiled in colon definition before a literal number
 111+ 63A3
 112+ 63A3                              New_Def  LIT, "LIT", is_code, is_normal
 112+ 63A3             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 112+ 63A3             >
 112+ 63A3             >                // dummy db directives used to calculate length of namec
 112+ 63A3 4C 49 54    >                db      "LIT"
 112+ 63A6             >len_NFA         defl    $ - temp_NFA
 112+ 63A6             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 112+ 63A3             >
 112+ 63A3 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 112+ 63A4 4C 49 54    >                db      "LIT"               // name string in 7-bit ascii, but
 112+ 63A7             >                org     $-1                 // alter last byte of Name just above to set
 112+ 63A6 D4          >                db      {b $} | END_BIT     // msb as name end
 112+ 63A7             >
 112+ 63A7 00 00       >                dw      last_NFA            // Link to previous definition Name
 112+ 63A9             >LIT:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 112+ 63A9 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
 112+ 63A9             >                else
 112+ 63A9 AB 63       >                dw      $ + 2   ; ok        // is pointed by CFA
 112+ 63AB             >                endif           ; ok        // for other definitions it "points" the correct handler
 112+ 63AB             >                // Use of "; ok" to suppress "warning[fwdref]"
 112+ 63AB             >
 112+ 63AB             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 113+ 63AB
 114+ 63AB 0A                           ld      a, (bc)
 115+ 63AC 03                           inc     bc
 116+ 63AD 6F                           ld      l, a
 117+ 63AE 0A                           ld      a, (bc)
 118+ 63AF 03                           inc     bc
 119+ 63B0 67                           ld      h, a
 120+ 63B1                              psh1
 120+ 63B1 E5          >                push    hl
 120+ 63B2 DD E9       >                jp      (ix)
 121+ 63B4
 122+ 63B4              //  ______________________________________________________________________
 123+ 63B4              //
 124+ 63B4              // execute      i*x xt -- j*x
 125+ 63B4              // execution token. usually xt is given by CFA
 126+ 63B4
 127+ 63B4                              New_Def  EXECUTE, "EXECUTE", is_code, is_normal
 127+ 63B4             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 127+ 63B4             >
 127+ 63B4             >                // dummy db directives used to calculate length of namec
 127+ 63B4 45 58 45 43 >                db      "EXECUTE"
 127+ 63B8 55 54 45    >
 127+ 63BB             >len_NFA         defl    $ - temp_NFA
 127+ 63BB             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 127+ 63B4             >
 127+ 63B4 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 127+ 63B5 45 58 45 43 >                db      "EXECUTE"               // name string in 7-bit ascii, but
 127+ 63B9 55 54 45    >
 127+ 63BC             >                org     $-1                 // alter last byte of Name just above to set
 127+ 63BB C5          >                db      {b $} | END_BIT     // msb as name end
 127+ 63BC             >
 127+ 63BC A3 63       >                dw      last_NFA            // Link to previous definition Name
 127+ 63BE             >EXECUTE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 127+ 63BE ~           >                dw      runcode ; ok        // for primitive definitions  actual code
 127+ 63BE             >                else
 127+ 63BE C0 63       >                dw      $ + 2   ; ok        // is pointed by CFA
 127+ 63C0             >                endif           ; ok        // for other definitions it "points" the correct handler
 127+ 63C0             >                // Use of "; ok" to suppress "warning[fwdref]"
 127+ 63C0             >
 127+ 63C0             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 128+ 63C0 E1                           pop     hl
 129+ 63C1 18 DB                        jr      Exec_Ptr
 130+ 63C3
 131+ 63C3
 132+ 63C3              //  ______________________________________________________________________
 133+ 63C3              //
 134+ 63C3              // branch       --
 135+ 63C3              // unconditional branch in colon definition using the following cell as an offset from current IP value
 136+ 63C3              // compiled by ELSE, AGAIN and some other immediate words
 137+ 63C3
 138+ 63C3                              New_Def BRANCH, "BRANCH", is_code, is_normal
 138+ 63C3             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 138+ 63C3             >
 138+ 63C3             >                // dummy db directives used to calculate length of namec
 138+ 63C3 42 52 41 4E >                db      "BRANCH"
 138+ 63C7 43 48       >
 138+ 63C9             >len_NFA         defl    $ - temp_NFA
 138+ 63C9             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 138+ 63C3             >
 138+ 63C3 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 138+ 63C4 42 52 41 4E >                db      "BRANCH"               // name string in 7-bit ascii, but
 138+ 63C8 43 48       >
 138+ 63CA             >                org     $-1                 // alter last byte of Name just above to set
 138+ 63C9 C8          >                db      {b $} | END_BIT     // msb as name end
 138+ 63CA             >
 138+ 63CA B4 63       >                dw      last_NFA            // Link to previous definition Name
 138+ 63CC             >BRANCH:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 138+ 63CC ~           >                dw      runcode ; ok        // for primitive definitions  actual code
 138+ 63CC             >                else
 138+ 63CC CE 63       >                dw      $ + 2   ; ok        // is pointed by CFA
 138+ 63CE             >                endif           ; ok        // for other definitions it "points" the correct handler
 138+ 63CE             >                // Use of "; ok" to suppress "warning[fwdref]"
 138+ 63CE             >
 138+ 63CE             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 139+ 63CE              Branch_Ptr:
 140+ 63CE 60                           ld      h, b
 141+ 63CF 69                           ld      l, c
 142+ 63D0 5E                           ld      e, (hl)
 143+ 63D1 23                           inc     hl
 144+ 63D2 56                           ld      d, (hl)
 145+ 63D3 2B                           dec     hl                  // offset is calculated from current IP
 146+ 63D4 19                           add     hl, de
 147+ 63D5 4D                           ld      c, l
 148+ 63D6 44                           ld      b, h
 149+ 63D7                              next
 149+ 63D7 DD E9       >                jp      (ix)
 150+ 63D9
 151+ 63D9
 152+ 63D9              //  ______________________________________________________________________
 153+ 63D9              //
 154+ 63D9              // 0branch      f --
 155+ 63D9              // conditional branch if the top-of-stack is ZERO or FALSE.
 156+ 63D9              // compiled by IF, UNTIL and some other immediate words
 157+ 63D9
 158+ 63D9                              New_Def ZBRANCH, "0BRANCH", is_code, is_normal
 158+ 63D9             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 158+ 63D9             >
 158+ 63D9             >                // dummy db directives used to calculate length of namec
 158+ 63D9 30 42 52 41 >                db      "0BRANCH"
 158+ 63DD 4E 43 48    >
 158+ 63E0             >len_NFA         defl    $ - temp_NFA
 158+ 63E0             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 158+ 63D9             >
 158+ 63D9 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 158+ 63DA 30 42 52 41 >                db      "0BRANCH"               // name string in 7-bit ascii, but
 158+ 63DE 4E 43 48    >
 158+ 63E1             >                org     $-1                 // alter last byte of Name just above to set
 158+ 63E0 C8          >                db      {b $} | END_BIT     // msb as name end
 158+ 63E1             >
 158+ 63E1 C3 63       >                dw      last_NFA            // Link to previous definition Name
 158+ 63E3             >ZBRANCH:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 158+ 63E3 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
 158+ 63E3             >                else
 158+ 63E3 E5 63       >                dw      $ + 2   ; ok        // is pointed by CFA
 158+ 63E5             >                endif           ; ok        // for other definitions it "points" the correct handler
 158+ 63E5             >                // Use of "; ok" to suppress "warning[fwdref]"
 158+ 63E5             >
 158+ 63E5             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 159+ 63E5              ZBranch_Ptr:
 160+ 63E5 E1                           pop     hl
 161+ 63E6 7D                           ld      a, l
 162+ 63E7 B4                           or      h
 163+ 63E8 CA CE 63                     jp      z, Branch_Ptr
 164+ 63EB 03                           inc     bc                  // if not branch, skip offset cell.
 165+ 63EC 03                           inc     bc
 166+ 63ED                              next
 166+ 63ED DD E9       >                jp      (ix)
 167+ 63EF
 168+ 63EF              //  ______________________________________________________________________
 169+ 63EF              //
 170+ 63EF              // (loop)       --
 171+ 63EF              // compiled by +LOOP. it uses the top two values of return-stack to
 172+ 63EF              // keep track of index and limit
 173+ 63EF                              New_Def C_LOOP, "(LOOP)", is_code, is_normal
 173+ 63EF             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 173+ 63EF             >
 173+ 63EF             >                // dummy db directives used to calculate length of namec
 173+ 63EF 28 4C 4F 4F >                db      "(LOOP)"
 173+ 63F3 50 29       >
 173+ 63F5             >len_NFA         defl    $ - temp_NFA
 173+ 63F5             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 173+ 63EF             >
 173+ 63EF 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 173+ 63F0 28 4C 4F 4F >                db      "(LOOP)"               // name string in 7-bit ascii, but
 173+ 63F4 50 29       >
 173+ 63F6             >                org     $-1                 // alter last byte of Name just above to set
 173+ 63F5 A9          >                db      {b $} | END_BIT     // msb as name end
 173+ 63F6             >
 173+ 63F6 D9 63       >                dw      last_NFA            // Link to previous definition Name
 173+ 63F8             >C_LOOP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 173+ 63F8 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
 173+ 63F8             >                else
 173+ 63F8 FA 63       >                dw      $ + 2   ; ok        // is pointed by CFA
 173+ 63FA             >                endif           ; ok        // for other definitions it "points" the correct handler
 173+ 63FA             >                // Use of "; ok" to suppress "warning[fwdref]"
 173+ 63FA             >
 173+ 63FA             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 174+ 63FA
 175+ 63FA
 176+ 63FA 11 01 00                     ld      de, 1               // bc contains increment of 1
 177+ 63FD
 178+ 63FD              Loop_Ptr:
 179+ 63FD                              ldhlrp                      // ld hl,rp macro 30h +Origin
 179+ 63FD 2A 96 63    >                ld      hl,(RP_Pointer)
 180+ 6400
 181+ 6400 7E                           ld      a, (hl)             // hl points to loop-index, add increment de to it.
 182+ 6401 83                           add     e
 183+ 6402 77                           ld      (hl), a
 184+ 6403 5F                           ld      e, a
 185+ 6404 23                           inc     hl
 186+ 6405 7E                           ld      a, (hl)
 187+ 6406 8A                           adc     d
 188+ 6407 77                           ld      (hl),a
 189+ 6408 23                           inc     hl
 190+ 6409 CB 7A                        bit     7, d                // keep increment-sign just before overwriting d
 191+ 640B 57                           ld      d, a
 192+ 640C
 193+ 640C 20 07                        jr      nz, Loop_NegativeIncrement
 194+ 640E 7B                               ld      a, e
 195+ 640F 96                               sub     (hl)
 196+ 6410 7A                               ld      a, d
 197+ 6411 23                               inc     hl
 198+ 6412 9E                               sbc     (hl)
 199+ 6413 18 05                        jr      Loop_Endif              // else
 200+ 6415
 201+ 6415              Loop_NegativeIncrement:
 202+ 6415 7E                               ld      a, (hl)
 203+ 6416 93                               sub     e
 204+ 6417 23                               inc     hl
 205+ 6418 7E                               ld      a, (hl)
 206+ 6419 9A                               sbc     d
 207+ 641A
 208+ 641A              Loop_Endif:
 209+ 641A FA CE 63                     jp      m, Branch_Ptr       // perform branch consuming following cell
 210+ 641D 23                           inc     hl
 211+ 641E                              ldrphl                      // ld rp,hl macro 30h +Origin
 211+ 641E 22 96 63    >                ld      (RP_Pointer),hl
 212+ 6421
 213+ 6421 03                           inc     bc                  // skip branch-style offset
 214+ 6422 03                           inc     bc
 215+ 6423                              next
 215+ 6423 DD E9       >                jp      (ix)
 216+ 6425
 217+ 6425              //  ______________________________________________________________________
 218+ 6425              //
 219+ 6425              // (+loop)       n --
 220+ 6425              // same as (LOOP) but index is incremented by n (instead of just 1)
 221+ 6425              // compiled by +LOOP.
 222+ 6425                              New_Def C_PLOOP, "(+LOOP)", is_code, is_normal
 222+ 6425             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 222+ 6425             >
 222+ 6425             >                // dummy db directives used to calculate length of namec
 222+ 6425 28 2B 4C 4F >                db      "(+LOOP)"
 222+ 6429 4F 50 29    >
 222+ 642C             >len_NFA         defl    $ - temp_NFA
 222+ 642C             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 222+ 6425             >
 222+ 6425 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 222+ 6426 28 2B 4C 4F >                db      "(+LOOP)"               // name string in 7-bit ascii, but
 222+ 642A 4F 50 29    >
 222+ 642D             >                org     $-1                 // alter last byte of Name just above to set
 222+ 642C A9          >                db      {b $} | END_BIT     // msb as name end
 222+ 642D             >
 222+ 642D EF 63       >                dw      last_NFA            // Link to previous definition Name
 222+ 642F             >C_PLOOP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 222+ 642F ~           >                dw      runcode ; ok        // for primitive definitions  actual code
 222+ 642F             >                else
 222+ 642F 31 64       >                dw      $ + 2   ; ok        // is pointed by CFA
 222+ 6431             >                endif           ; ok        // for other definitions it "points" the correct handler
 222+ 6431             >                // Use of "; ok" to suppress "warning[fwdref]"
 222+ 6431             >
 222+ 6431             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 223+ 6431 D1                           pop     de
 224+ 6432 C3 FD 63                     jp      Loop_Ptr
 225+ 6435
 226+ 6435              //  ______________________________________________________________________
 227+ 6435              //
 228+ 6435              // (?do)        lim ind --
 229+ 6435              // compiled by ?DO to make a loop checking for lim == ind first
 230+ 6435              // at run-time (?DO) must be followed by a BRANCH offset
 231+ 6435              // used to skip the loop if lim == ind
 232+ 6435                              New_Def C_Q_DO, "(?DO)", is_code, is_normal
 232+ 6435             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 232+ 6435             >
 232+ 6435             >                // dummy db directives used to calculate length of namec
 232+ 6435 28 3F 44 4F >                db      "(?DO)"
 232+ 6439 29          >
 232+ 643A             >len_NFA         defl    $ - temp_NFA
 232+ 643A             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 232+ 6435             >
 232+ 6435 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 232+ 6436 28 3F 44 4F >                db      "(?DO)"               // name string in 7-bit ascii, but
 232+ 643A 29          >
 232+ 643B             >                org     $-1                 // alter last byte of Name just above to set
 232+ 643A A9          >                db      {b $} | END_BIT     // msb as name end
 232+ 643B             >
 232+ 643B 25 64       >                dw      last_NFA            // Link to previous definition Name
 232+ 643D             >C_Q_DO:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 232+ 643D ~           >                dw      runcode ; ok        // for primitive definitions  actual code
 232+ 643D             >                else
 232+ 643D 3F 64       >                dw      $ + 2   ; ok        // is pointed by CFA
 232+ 643F             >                endif           ; ok        // for other definitions it "points" the correct handler
 232+ 643F             >                // Use of "; ok" to suppress "warning[fwdref]"
 232+ 643F             >
 232+ 643F             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 233+ 643F D1                           pop     de                  // de has the index
 234+ 6440 E1                           pop     hl                  // hl has the limit
 235+ 6441 E5                           push    hl
 236+ 6442 D5                           push    de
 237+ 6443 A7                           and     a                   // reset carry flag
 238+ 6444 ED 52                        sbc     hl, de              // compute limit - index
 239+ 6446 20 05                        jr      nz, Do_Ptr          // if zero then don't even begin loop
 240+ 6448 D1                               pop     de
 241+ 6449 E1                               pop     hl
 242+ 644A
 243+ 644A C3 CE 63                         jp      Branch_Ptr          // perform branch consuming following cell
 244+ 644D              Do_Ptr:
 245+ 644D                              ldhlrp                      // prepare RP
 245+ 644D 2A 96 63    >                ld      hl,(RP_Pointer)
 246+ 6450 2B                           dec     hl
 247+ 6451 2B                           dec     hl
 248+ 6452 2B                           dec     hl
 249+ 6453 2B                           dec     hl
 250+ 6454                              ldrphl
 250+ 6454 22 96 63    >                ld      (RP_Pointer),hl
 251+ 6457
 252+ 6457                              // store index as top RP
 253+ 6457 D1                           pop     de
 254+ 6458 73                           ld      (hl), e
 255+ 6459 23                           inc     hl
 256+ 645A 72                           ld      (hl), d
 257+ 645B 23                           inc     hl
 258+ 645C                              // stores lim as second from top RP
 259+ 645C D1                           pop     de
 260+ 645D 73                           ld      (hl), e
 261+ 645E 23                           inc     hl
 262+ 645F 72                           ld      (hl), d
 263+ 6460
 264+ 6460                              // skip branch-style offseet
 265+ 6460 03                           inc     bc
 266+ 6461 03                           inc     bc
 267+ 6462                              next
 267+ 6462 DD E9       >                jp      (ix)
 268+ 6464
 269+ 6464              //  ______________________________________________________________________
 270+ 6464              //
 271+ 6464              // (do)        lim ind --
 272+ 6464              // compiled by DO to make a loop checking for lim == ind first
 273+ 6464              // this is a simpler version of (?DO)
 274+ 6464                              New_Def C_DO, "(DO)", is_code, is_normal
 274+ 6464             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 274+ 6464             >
 274+ 6464             >                // dummy db directives used to calculate length of namec
 274+ 6464 28 44 4F 29 >                db      "(DO)"
 274+ 6468             >len_NFA         defl    $ - temp_NFA
 274+ 6468             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 274+ 6464             >
 274+ 6464 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 274+ 6465 28 44 4F 29 >                db      "(DO)"               // name string in 7-bit ascii, but
 274+ 6469             >                org     $-1                 // alter last byte of Name just above to set
 274+ 6468 A9          >                db      {b $} | END_BIT     // msb as name end
 274+ 6469             >
 274+ 6469 35 64       >                dw      last_NFA            // Link to previous definition Name
 274+ 646B             >C_DO:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 274+ 646B ~           >                dw      runcode ; ok        // for primitive definitions  actual code
 274+ 646B             >                else
 274+ 646B 6D 64       >                dw      $ + 2   ; ok        // is pointed by CFA
 274+ 646D             >                endif           ; ok        // for other definitions it "points" the correct handler
 274+ 646D             >                // Use of "; ok" to suppress "warning[fwdref]"
 274+ 646D             >
 274+ 646D             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 275+ 646D 0B                           dec     bc                  // prepare IP beforehand
 276+ 646E 0B                           dec     bc                  // to balance the two final inc bc in (?do)
 277+ 646F C3 4D 64                     jp      Do_Ptr
 278+ 6472
 279+ 6472              //  ______________________________________________________________________
 280+ 6472              //
 281+ 6472              // i            -- n
 282+ 6472              // used between DO and LOOP or between DO e +LOOP to copy on top of stack
 283+ 6472              // the current value of the index-loop
 284+ 6472                              New_Def I, "I", is_code, is_normal
 284+ 6472             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 284+ 6472             >
 284+ 6472             >                // dummy db directives used to calculate length of namec
 284+ 6472 49          >                db      "I"
 284+ 6473             >len_NFA         defl    $ - temp_NFA
 284+ 6473             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 284+ 6472             >
 284+ 6472 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 284+ 6473 49          >                db      "I"               // name string in 7-bit ascii, but
 284+ 6474             >                org     $-1                 // alter last byte of Name just above to set
 284+ 6473 C9          >                db      {b $} | END_BIT     // msb as name end
 284+ 6474             >
 284+ 6474 64 64       >                dw      last_NFA            // Link to previous definition Name
 284+ 6476             >I:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 284+ 6476 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
 284+ 6476             >                else
 284+ 6476 78 64       >                dw      $ + 2   ; ok        // is pointed by CFA
 284+ 6478             >                endif           ; ok        // for other definitions it "points" the correct handler
 284+ 6478             >                // Use of "; ok" to suppress "warning[fwdref]"
 284+ 6478             >
 284+ 6478             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 285+ 6478              I_Ptr:
 286+ 6478
 287+ 6478                              ldhlrp
 287+ 6478 2A 96 63    >                ld      hl,(RP_Pointer)
 288+ 647B 5E                           ld      e, (hl)
 289+ 647C 23                           inc     hl
 290+ 647D 56                           ld      d, (hl)
 291+ 647E D5                           push    de
 292+ 647F                              next
 292+ 647F DD E9       >                jp      (ix)
 293+ 6481
 294+ 6481              //  ______________________________________________________________________
 295+ 6481              //
 296+ 6481              // digit        c n -- u 1  |  0
 297+ 6481              // convert a character c using base n
 298+ 6481              // returns a unsigned number and a true flag
 299+ 6481              // or just a false flag if the conversion fails
 300+ 6481                              New_Def DIGIT, "DIGIT", is_code, is_normal
 300+ 6481             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 300+ 6481             >
 300+ 6481             >                // dummy db directives used to calculate length of namec
 300+ 6481 44 49 47 49 >                db      "DIGIT"
 300+ 6485 54          >
 300+ 6486             >len_NFA         defl    $ - temp_NFA
 300+ 6486             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 300+ 6481             >
 300+ 6481 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 300+ 6482 44 49 47 49 >                db      "DIGIT"               // name string in 7-bit ascii, but
 300+ 6486 54          >
 300+ 6487             >                org     $-1                 // alter last byte of Name just above to set
 300+ 6486 D4          >                db      {b $} | END_BIT     // msb as name end
 300+ 6487             >
 300+ 6487 72 64       >                dw      last_NFA            // Link to previous definition Name
 300+ 6489             >DIGIT:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 300+ 6489 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
 300+ 6489             >                else
 300+ 6489 8B 64       >                dw      $ + 2   ; ok        // is pointed by CFA
 300+ 648B             >                endif           ; ok        // for other definitions it "points" the correct handler
 300+ 648B             >                // Use of "; ok" to suppress "warning[fwdref]"
 300+ 648B             >
 300+ 648B             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 301+ 648B E1                           pop     hl                  // l has the base
 302+ 648C D1                           pop     de                  // e has the digit
 303+ 648D 7B                           ld      a, e
 304+ 648E FE 60                        cp      $60                 // check if lowercase
 305+ 6490 38 02                        jr      c, Digit_Uppercase
 306+ 6492 D6 20                            sub     $20                 // quick'n'dirty uppercase
 307+ 6494              Digit_Uppercase:
 308+ 6494 D6 30                        sub     $30
 309+ 6496 38 15                        jr      c, Digit_Fail       // fail when character < "0"
 310+ 6498 FE 0A                            cp      $0A
 311+ 649A 38 06                            jr      c, Digit_Decimal    // perhaps is not decimal
 312+ 649C D6 07                                sub     7                   // try hex and subtract 7
 313+ 649E FE 0A                                cp      $0A
 314+ 64A0 38 0B                                jr      c,  Digit_Fail      // it is not hex !
 315+ 64A2
 316+ 64A2              Digit_Decimal:
 317+ 64A2                              // compare digit
 318+ 64A2 BD                           cp      l                   // compare with base
 319+ 64A3
 320+ 64A3 30 08                        jr      nc, Digit_Fail      // fail when greater than base
 321+ 64A5 5F                               ld      e, a                // digit is returned as second from TOS
 322+ 64A6 21 01 00                         ld      hl, 1
 323+ 64A9
 324+ 64A9                                  psh2
 324+ 64A9 D5          >                push    de
 324+ 64AA E5          >                push    hl
 324+ 64AB DD E9       >                jp      (ix)
 325+ 64AD              Digit_Fail:
 326+ 64AD 21 00 00                     ld      hl, 0
 327+ 64B0                              psh1
 327+ 64B0 E5          >                push    hl
 327+ 64B1 DD E9       >                jp      (ix)
 328+ 64B3
 329+ 64B3              //  ______________________________________________________________________
 330+ 64B3              //
 331+ 64B3              //  parametric uppercase routine
 332+ 64B3              //  depending on the following op-code the routine can be by-passed
 333+ 64B3              //  changing the behaviour of some callers.
 334+ 64B3              //  If it is "ret" then the system is Case-Sensitive
 335+ 64B3              //  If it is "Nop" then the system is Case-Insensitive
 336+ 64B3              //  Only A register is touched.
 337+ 64B3 00           Case_Sensitive: nop                         // Default is case-insensitive.
 338+ 64B4              Case_Upper:
 339+ 64B4 FE 61                        cp      LC_A_CHAR           // lower-case "a"
 340+ 64B6 D8                           ret     c                   // no change if A < "a"
 341+ 64B7 FE 7B                        cp      LC_Z_CHAR + 1       // lower-case "z" + 1
 342+ 64B9 D0                           ret     nc                  // no change if A > "z"
 343+ 64BA D6 20                        sub     $20                 // Make uppercase if A in ["a".."z"]
 344+ 64BC C9                           ret
 345+ 64BD
 346+ 64BD              //  ______________________________________________________________________
 347+ 64BD              //
 348+ 64BD              //  caseon      --
 349+ 64BD              // set system case-sensitivity on
 350+ 64BD              // it patches a RET/NOP at the beginning of the uppercase-routine
 351+ 64BD                              New_Def CASEON, "CASEON", is_code, is_normal
 351+ 64BD             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 351+ 64BD             >
 351+ 64BD             >                // dummy db directives used to calculate length of namec
 351+ 64BD 43 41 53 45 >                db      "CASEON"
 351+ 64C1 4F 4E       >
 351+ 64C3             >len_NFA         defl    $ - temp_NFA
 351+ 64C3             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 351+ 64BD             >
 351+ 64BD 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 351+ 64BE 43 41 53 45 >                db      "CASEON"               // name string in 7-bit ascii, but
 351+ 64C2 4F 4E       >
 351+ 64C4             >                org     $-1                 // alter last byte of Name just above to set
 351+ 64C3 CE          >                db      {b $} | END_BIT     // msb as name end
 351+ 64C4             >
 351+ 64C4 81 64       >                dw      last_NFA            // Link to previous definition Name
 351+ 64C6             >CASEON:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 351+ 64C6 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
 351+ 64C6             >                else
 351+ 64C6 C8 64       >                dw      $ + 2   ; ok        // is pointed by CFA
 351+ 64C8             >                endif           ; ok        // for other definitions it "points" the correct handler
 351+ 64C8             >                // Use of "; ok" to suppress "warning[fwdref]"
 351+ 64C8             >
 351+ 64C8             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 352+ 64C8 3E C9                        ld      a, $C9              // "ret"
 353+ 64CA 32 B3 64                     ld      (Case_Sensitive), a
 354+ 64CD                              next
 354+ 64CD DD E9       >                jp      (ix)
 355+ 64CF
 356+ 64CF              //  ______________________________________________________________________
 357+ 64CF              //
 358+ 64CF              //  caseoff     --
 359+ 64CF              // set system case-sensitivity on
 360+ 64CF              // it patches a RET/NOP at the beginning of the uppercase-routine
 361+ 64CF                              New_Def CASEOFF, "CASEOFF", is_code, is_normal
 361+ 64CF             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 361+ 64CF             >
 361+ 64CF             >                // dummy db directives used to calculate length of namec
 361+ 64CF 43 41 53 45 >                db      "CASEOFF"
 361+ 64D3 4F 46 46    >
 361+ 64D6             >len_NFA         defl    $ - temp_NFA
 361+ 64D6             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 361+ 64CF             >
 361+ 64CF 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 361+ 64D0 43 41 53 45 >                db      "CASEOFF"               // name string in 7-bit ascii, but
 361+ 64D4 4F 46 46    >
 361+ 64D7             >                org     $-1                 // alter last byte of Name just above to set
 361+ 64D6 C6          >                db      {b $} | END_BIT     // msb as name end
 361+ 64D7             >
 361+ 64D7 BD 64       >                dw      last_NFA            // Link to previous definition Name
 361+ 64D9             >CASEOFF:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 361+ 64D9 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
 361+ 64D9             >                else
 361+ 64D9 DB 64       >                dw      $ + 2   ; ok        // is pointed by CFA
 361+ 64DB             >                endif           ; ok        // for other definitions it "points" the correct handler
 361+ 64DB             >                // Use of "; ok" to suppress "warning[fwdref]"
 361+ 64DB             >
 361+ 64DB             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 362+ 64DB 3E 00                        ld      a, $00              // "nop"
 363+ 64DD 32 B3 64                     ld      (Case_Sensitive), a
 364+ 64E0                              next
 364+ 64E0 DD E9       >                jp      (ix)
 365+ 64E2
 366+ 64E2              //  ______________________________________________________________________
 367+ 64E2              //
 368+ 64E2              //  upper       c1 -- c1 | c2
 369+ 64E2              // character on top of stack is forced to Uppercase.
 370+ 64E2                              New_Def UPPER, "UPPER", is_code, is_normal
 370+ 64E2             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 370+ 64E2             >
 370+ 64E2             >                // dummy db directives used to calculate length of namec
 370+ 64E2 55 50 50 45 >                db      "UPPER"
 370+ 64E6 52          >
 370+ 64E7             >len_NFA         defl    $ - temp_NFA
 370+ 64E7             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 370+ 64E2             >
 370+ 64E2 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 370+ 64E3 55 50 50 45 >                db      "UPPER"               // name string in 7-bit ascii, but
 370+ 64E7 52          >
 370+ 64E8             >                org     $-1                 // alter last byte of Name just above to set
 370+ 64E7 D2          >                db      {b $} | END_BIT     // msb as name end
 370+ 64E8             >
 370+ 64E8 CF 64       >                dw      last_NFA            // Link to previous definition Name
 370+ 64EA             >UPPER:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 370+ 64EA ~           >                dw      runcode ; ok        // for primitive definitions  actual code
 370+ 64EA             >                else
 370+ 64EA EC 64       >                dw      $ + 2   ; ok        // is pointed by CFA
 370+ 64EC             >                endif           ; ok        // for other definitions it "points" the correct handler
 370+ 64EC             >                // Use of "; ok" to suppress "warning[fwdref]"
 370+ 64EC             >
 370+ 64EC             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 371+ 64EC E1                           pop     hl
 372+ 64ED 7D                           ld      a, l
 373+ 64EE CD B4 64                     call    Case_Upper
 374+ 64F1 6F                           ld      l, a
 375+ 64F2
 376+ 64F2                              psh1
 376+ 64F2 E5          >                push    hl
 376+ 64F3 DD E9       >                jp      (ix)
 377+ 64F5
 378+ 64F5              //  ______________________________________________________________________
 379+ 64F5              //
 380+ 64F5              // (find)       addr voc -- addr 0 | cfa b 1
 381+ 64F5              // vocabulary search,
 382+ 64F5              // - voc is starting word's NFA
 383+ 64F5              // - addr is the string to be searched for
 384+ 64F5              // On success, it returns the CFA of found word, the first NFA byte
 385+ 64F5              // (which contains length and some flags) and a true flag.
 386+ 64F5              // On fail, a false flag  (no more: leaves addr unchanged)
 387+ 64F5                              New_Def C_FIND, "(FIND)", is_code, is_normal
 387+ 64F5             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 387+ 64F5             >
 387+ 64F5             >                // dummy db directives used to calculate length of namec
 387+ 64F5 28 46 49 4E >                db      "(FIND)"
 387+ 64F9 44 29       >
 387+ 64FB             >len_NFA         defl    $ - temp_NFA
 387+ 64FB             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 387+ 64F5             >
 387+ 64F5 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 387+ 64F6 28 46 49 4E >                db      "(FIND)"               // name string in 7-bit ascii, but
 387+ 64FA 44 29       >
 387+ 64FC             >                org     $-1                 // alter last byte of Name just above to set
 387+ 64FB A9          >                db      {b $} | END_BIT     // msb as name end
 387+ 64FC             >
 387+ 64FC E2 64       >                dw      last_NFA            // Link to previous definition Name
 387+ 64FE             >C_FIND:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 387+ 64FE ~           >                dw      runcode ; ok        // for primitive definitions  actual code
 387+ 64FE             >                else
 387+ 64FE 00 65       >                dw      $ + 2   ; ok        // is pointed by CFA
 387+ 6500             >                endif           ; ok        // for other definitions it "points" the correct handler
 387+ 6500             >                // Use of "; ok" to suppress "warning[fwdref]"
 387+ 6500             >
 387+ 6500             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 388+ 6500                                                              // de has dictionary pointer
 389+ 6500 D1                               pop     de
 390+ 6501              Find_VocabularyLoop:
 391+ 6501 E1                               pop     hl                  // string pointer to search for
 392+ 6502 E5                               push    hl                  // keep it on stack too for the end.
 393+ 6503 1A                               ld      a, (de)             // save NFA length byte
 394+ 6504 08                               ex      af,af'              // for later use (!)
 395+ 6505 1A                               ld      a, (de)             // reload NFA length byte
 396+ 6506 AE                               xor     (hl)                // check if same length
 397+ 6507 E6 3F                            and     $3F                 // by resetting 3 high bits (flags)
 398+ 6509                                  // word an text haven't the same length, skip to next vocabulary entry
 399+ 6509 20 2C                            jr      nz, Find_DifferentLenght
 400+ 650B
 401+ 650B              Find_ThisWord:  // begin loop
 402+ 650B 23                                   inc     hl
 403+ 650C 13                                   inc     de
 404+ 650D 1A                                   ld      a, (de)
 405+ 650E                                      // case insensitive option - begin
 406+ 650E C5                                   push    bc
 407+ 650F E6 80                                and     $80                 // split A in msb and the rest
 408+ 6511 47                                   ld      b, a
 409+ 6512 1A                                   ld      a, (de)
 410+ 6513 E6 7F                                and     $7F                 // ... the rest (lower 7 bits)
 411+ 6515 CD B3 64                             call    Case_Sensitive      // uppercase routine
 412+ 6518 4F                                   ld      c, a
 413+ 6519 7E                                   ld      a, (hl)
 414+ 651A CD B3 64                             call    Case_Sensitive      // uppercase routine
 415+ 651D A9                                   xor     c
 416+ 651E A8                                   xor     b
 417+ 651F C1                                   pop     bc
 418+ 6520                                      // case insensitive option - end
 419+ 6520 87                                   add     a                   // ignore msb during compare
 420+ 6521 20 12                                jr      nz, Find_DidntMatch  // jump if doesn't match (*)
 421+ 6523
 422+ 6523                                  // loop back until last byte msb is found set
 423+ 6523                                  // that bit marks the ending char of this word
 424+ 6523 30 E6                            jr      nc, Find_ThisWord
 425+ 6525
 426+ 6525                                  // match found !
 427+ 6525 21 03 00                             ld      hl, 3               // 3 bytes for CFA offset to skip LFA
 428+ 6528 19                                   add     hl, de
 429+ 6529 E3                                   ex      (sp), hl            // CFA on stack and drop addr
 430+ 652A 08                                   ex      af, af'             // retrieve NFA byte (!)
 431+ 652B 5F                                   ld      e, a
 432+ 652C 16 00                                ld      d, 0
 433+ 652E
 434+ 652E
 435+ 652E 21 01 00                             ld      hl, 1
 436+ 6531                                      psh2
 436+ 6531 D5          >                push    de
 436+ 6532 E5          >                push    hl
 436+ 6533 DD E9       >                jp      (ix)
 437+ 6535
 438+ 6535              Find_DidntMatch: // didn't match (*)
 439+ 6535 38 05                            jr      c,  Find_WordEnd   // jump if not end of word (**)
 440+ 6537
 441+ 6537              Find_DifferentLenght:
 442+ 6537                              // consume chars until the end of the word
 443+ 6537                              // that is last byte msb is found set
 444+ 6537 13                               inc     de
 445+ 6538 1A                               ld      a, (de)
 446+ 6539 87                               add     a, a
 447+ 653A 30 FB                        jr      nc, Find_DifferentLenght
 448+ 653C
 449+ 653C              Find_WordEnd:   // word-end  found (**)
 450+ 653C                              // take LFA and use it
 451+ 653C 13                           inc     de
 452+ 653D EB                           ex      de, hl
 453+ 653E 5E                           ld      e, (hl)
 454+ 653F 23                           inc     hl
 455+ 6540 56                           ld      d, (hl)
 456+ 6541 7A                           ld      a, d
 457+ 6542 B3                           or      e
 458+ 6543
 459+ 6543                          // loop until end of vocabulary
 460+ 6543 20 BC                    jr      nz, Find_VocabularyLoop
 461+ 6545
 462+ 6545 E1                       pop     hl              // with this, it leaves addr unchanged
 463+ 6546 21 00 00                 ld      hl, FALSE_FLAG
 464+ 6549
 465+ 6549                          psh1
 465+ 6549 E5          >                push    hl
 465+ 654A DD E9       >                jp      (ix)
 466+ 654C
 467+ 654C              //  ______________________________________________________________________
 468+ 654C              //
 469+ 654C              // enclose      a c -- a  n1 n2 n3
 470+ 654C              // starting from a, using delimiter c, determines the offsets:
 471+ 654C              //   n1   the first character non-delimiter
 472+ 654C              //   n2   the first delimiter after the text
 473+ 654C              //   n3   the first character non enclosed.
 474+ 654C              // This procedure does not go beyond a 'nul' ASCII (0x00) that represents
 475+ 654C              // an uncoditional delimiter.
 476+ 654C              // Examples:
 477+ 654C              //   i:	c  c  x  x  x  c  x	 -- 2  5  6
 478+ 654C              //  ii:	c  c  x  x  x  'nul' -- 2  5  5
 479+ 654C              // iii:	c  c  'nul'          -- 2  3  2
 480+ 654C                              New_Def ENCLOSE, "ENCLOSE", is_code, is_normal
 480+ 654C             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 480+ 654C             >
 480+ 654C             >                // dummy db directives used to calculate length of namec
 480+ 654C 45 4E 43 4C >                db      "ENCLOSE"
 480+ 6550 4F 53 45    >
 480+ 6553             >len_NFA         defl    $ - temp_NFA
 480+ 6553             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 480+ 654C             >
 480+ 654C 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 480+ 654D 45 4E 43 4C >                db      "ENCLOSE"               // name string in 7-bit ascii, but
 480+ 6551 4F 53 45    >
 480+ 6554             >                org     $-1                 // alter last byte of Name just above to set
 480+ 6553 C5          >                db      {b $} | END_BIT     // msb as name end
 480+ 6554             >
 480+ 6554 F5 64       >                dw      last_NFA            // Link to previous definition Name
 480+ 6556             >ENCLOSE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 480+ 6556 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
 480+ 6556             >                else
 480+ 6556 58 65       >                dw      $ + 2   ; ok        // is pointed by CFA
 480+ 6558             >                endif           ; ok        // for other definitions it "points" the correct handler
 480+ 6558             >                // Use of "; ok" to suppress "warning[fwdref]"
 480+ 6558             >
 480+ 6558             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 481+ 6558 D1                           pop     de                  //  e has the character
 482+ 6559 E1                           pop     hl                  // hl has the string address
 483+ 655A E5                           push    hl
 484+ 655B 7B                           ld      a, e
 485+ 655C 11 FF FF                     ld      de, -1              // let's start from -1
 486+ 655F 2B                           dec     hl
 487+ 6560              Enclose_NonDelimiter:
 488+ 6560                              // find first non delimiter
 489+ 6560 23                               inc     hl
 490+ 6561 13                               inc     de
 491+ 6562 BE                               cp      (hl)
 492+ 6563 28 FB                        jr      z, Enclose_NonDelimiter
 493+ 6565 D5                           push    de
 494+ 6566
 495+ 6566 C5                           push    bc                  // save Instruction Pointer
 496+ 6567
 497+ 6567 4F                           ld      c, a                // save char
 498+ 6568 7E                           ld      a, (hl)
 499+ 6569 A7                           and     a                   // stop if 0x00
 500+ 656A 20 07                        jr      nz, Enclose_NextChar
 501+ 656C
 502+ 656C                              /// case iii. no more character in string
 503+ 656C C1                               pop     bc                  // restore Instruction Pointer
 504+ 656D 13                               inc     de
 505+ 656E D5                               push    de
 506+ 656F 1B                               dec     de
 507+ 6570 D5                               push    de
 508+ 6571                                  next
 508+ 6571 DD E9       >                jp      (ix)
 509+ 6573              Enclose_NextChar:
 510+ 6573 79                               ld      a, c
 511+ 6574 23                               inc     hl
 512+ 6575 13                               inc     de
 513+ 6576 BE                               cp      (hl)
 514+ 6577 20 06                            jr      nz, Enclose_NonSeparator
 515+ 6579
 516+ 6579                                      // case i. first non enclosed
 517+ 6579 C1                                   pop     bc                  // restore Instruction Pointer
 518+ 657A D5                                   push    de
 519+ 657B 13                                   inc     de
 520+ 657C D5                                   push    de
 521+ 657D                                      next
 521+ 657D DD E9       >                jp      (ix)
 522+ 657F              Enclose_NonSeparator:
 523+ 657F 7E                               ld      a, (hl)
 524+ 6580 A7                               and     a
 525+ 6581 20 F0                        jr      nz, Enclose_NextChar
 526+ 6583
 527+ 6583                              // case ii. separator & terminator
 528+ 6583 C1                           pop     bc                  // restore Instruction Pointer
 529+ 6584 D5                           push    de
 530+ 6585 D5                           push    de
 531+ 6586                              next
 531+ 6586 DD E9       >                jp      (ix)
 532+ 6588
 533+ 6588              //  ______________________________________________________________________
 534+ 6588              //
 535+ 6588              // (map)        a2 a1 n c1 -- c2
 536+ 6588              // translate character c1 using mapping string a2 and a2
 537+ 6588              // if c1 is not present within string a1 then
 538+ 6588              // c2 = c2 if it is not translated. n is the length of both a1 and a2.
 539+ 6588                              New_Def C_MAP, "(MAP)", is_code, is_normal
 539+ 6588             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 539+ 6588             >
 539+ 6588             >                // dummy db directives used to calculate length of namec
 539+ 6588 28 4D 41 50 >                db      "(MAP)"
 539+ 658C 29          >
 539+ 658D             >len_NFA         defl    $ - temp_NFA
 539+ 658D             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 539+ 6588             >
 539+ 6588 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 539+ 6589 28 4D 41 50 >                db      "(MAP)"               // name string in 7-bit ascii, but
 539+ 658D 29          >
 539+ 658E             >                org     $-1                 // alter last byte of Name just above to set
 539+ 658D A9          >                db      {b $} | END_BIT     // msb as name end
 539+ 658E             >
 539+ 658E 4C 65       >                dw      last_NFA            // Link to previous definition Name
 539+ 6590             >C_MAP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 539+ 6590 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
 539+ 6590             >                else
 539+ 6590 92 65       >                dw      $ + 2   ; ok        // is pointed by CFA
 539+ 6592             >                endif           ; ok        // for other definitions it "points" the correct handler
 539+ 6592             >                // Use of "; ok" to suppress "warning[fwdref]"
 539+ 6592             >
 539+ 6592             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 540+ 6592 D9                           exx
 541+ 6593 E1                           pop     hl
 542+ 6594 7D                           ld      a, l
 543+ 6595 C1                           pop     bc
 544+ 6596 E1                           pop     hl
 545+ 6597 50                           ld      d, b
 546+ 6598 59                           ld      e, c
 547+ 6599 ED B1                        cpir
 548+ 659B E1                           pop     hl
 549+ 659C 20 05                        jr      nz, C_Map_Then
 549+ 659E
 550+ 659E 19                               add     hl, de
 551+ 659F 2B                               dec     hl
 552+ 65A0 ED 42                            sbc     hl, bc
 553+ 65A2 7E                               ld      a, (hl)
 554+ 65A3              C_Map_Then:
 555+ 65A3 6F                           ld      l, a
 556+ 65A4 26 00                        ld      h, 0
 557+ 65A6 E5                           push    hl
 558+ 65A7 D9                           exx
 559+ 65A8                              next
 559+ 65A8 DD E9       >                jp      (ix)
 560+ 65AA
 561+ 65AA              //  ______________________________________________________________________
 562+ 65AA              //
 563+ 65AA              // (compare)    a1 a2 n -- b
 564+ 65AA              // this word performs a lexicographic compare of n bytes of text at address a1
 565+ 65AA              // with n bytes of text at address a2. It returns numeric a value:
 566+ 65AA              //  0 : if strings are equal
 567+ 65AA              // +1 : if string at a1 greater than string at a2
 568+ 65AA              // -1 : if string at a1 less than string at a2
 569+ 65AA              // strings can be 256 bytes in length at most.
 570+ 65AA                              New_Def C_COMPARE, "(COMPARE)", is_code, is_normal
 570+ 65AA             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 570+ 65AA             >
 570+ 65AA             >                // dummy db directives used to calculate length of namec
 570+ 65AA 28 43 4F 4D >                db      "(COMPARE)"
 570+ 65AE 50 41 52 45 >
 570+ 65B2 29          >
 570+ 65B3             >len_NFA         defl    $ - temp_NFA
 570+ 65B3             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 570+ 65AA             >
 570+ 65AA 89          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 570+ 65AB 28 43 4F 4D >                db      "(COMPARE)"               // name string in 7-bit ascii, but
 570+ 65AF 50 41 52 45 >
 570+ 65B3 29          >
 570+ 65B4             >                org     $-1                 // alter last byte of Name just above to set
 570+ 65B3 A9          >                db      {b $} | END_BIT     // msb as name end
 570+ 65B4             >
 570+ 65B4 88 65       >                dw      last_NFA            // Link to previous definition Name
 570+ 65B6             >C_COMPARE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 570+ 65B6 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
 570+ 65B6             >                else
 570+ 65B6 B8 65       >                dw      $ + 2   ; ok        // is pointed by CFA
 570+ 65B8             >                endif           ; ok        // for other definitions it "points" the correct handler
 570+ 65B8             >                // Use of "; ok" to suppress "warning[fwdref]"
 570+ 65B8             >
 570+ 65B8             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 571+ 65B8 E1                           pop     hl                  // Number of bytes
 572+ 65B9 7D                           ld      a, l
 573+ 65BA E1                           pop     hl                  // hl points string a2
 574+ 65BB D1                           pop     de                  // hl points string a1
 575+ 65BC C5                           push    bc                  // Instruction pointer on stack
 576+ 65BD 47                           ld      b, a
 577+ 65BE              C_Compare_Loop:
 578+ 65BE 7E                               ld      a, (hl)
 579+ 65BF CD B3 64                         call    Case_Sensitive
 580+ 65C2 4F                               ld      c, a
 581+ 65C3 1A                               ld      a, (de)
 582+ 65C4 CD B3 64                         call    Case_Sensitive
 583+ 65C7 B9                               cp      c
 584+ 65C8 13                               inc     de
 585+ 65C9 23                               inc     hl
 586+ 65CA 28 0E                            jr      z, C_Compare_Equal
 587+ 65CC 38 05                                jr      c, C_Compare_NotLessThan  // If LessThan
 588+ 65CE 21 01 00                                 ld      hl, 1               // a1 gt a2
 589+ 65D1 18 03                                jr      C_Compare_Then      // Else
 590+ 65D3              C_Compare_NotLessThan:
 591+ 65D3 21 FF FF                                 ld      hl, -1              // a1 lt a2
 592+ 65D6              C_Compare_Then:                                 // Endif
 593+ 65D6 C1                                   pop     bc              // restore Instruction Pointer
 594+ 65D7
 595+ 65D7                                      psh1
 595+ 65D7 E5          >                push    hl
 595+ 65D8 DD E9       >                jp      (ix)
 596+ 65DA
 597+ 65DA              C_Compare_Equal:
 598+ 65DA 10 E2                        djnz    C_Compare_Loop
 599+ 65DC 21 00 00                     ld      hl, 0               // a1 eq a2
 600+ 65DF C1                           pop     bc                  // restore Instruction Pointer
 601+ 65E0
 602+ 65E0                              psh1
 602+ 65E0 E5          >                push    hl
 602+ 65E1 DD E9       >                jp      (ix)
 603+ 65E3
 604+ 65E3              //  ______________________________________________________________________
 605+ 65E3              //
 606+ 65E3              // emitc        c --
 607+ 65E3              // low level emit, calls ROM routine at #10 to send a character to
 608+ 65E3              // the the current channel (see SELECT to change stream-channel)
 609+ 65E3                              New_Def EMITC, "EMITC", is_code, is_normal
 609+ 65E3             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 609+ 65E3             >
 609+ 65E3             >                // dummy db directives used to calculate length of namec
 609+ 65E3 45 4D 49 54 >                db      "EMITC"
 609+ 65E7 43          >
 609+ 65E8             >len_NFA         defl    $ - temp_NFA
 609+ 65E8             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 609+ 65E3             >
 609+ 65E3 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 609+ 65E4 45 4D 49 54 >                db      "EMITC"               // name string in 7-bit ascii, but
 609+ 65E8 43          >
 609+ 65E9             >                org     $-1                 // alter last byte of Name just above to set
 609+ 65E8 C3          >                db      {b $} | END_BIT     // msb as name end
 609+ 65E9             >
 609+ 65E9 AA 65       >                dw      last_NFA            // Link to previous definition Name
 609+ 65EB             >EMITC:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 609+ 65EB ~           >                dw      runcode ; ok        // for primitive definitions  actual code
 609+ 65EB             >                else
 609+ 65EB ED 65       >                dw      $ + 2   ; ok        // is pointed by CFA
 609+ 65ED             >                endif           ; ok        // for other definitions it "points" the correct handler
 609+ 65ED             >                // Use of "; ok" to suppress "warning[fwdref]"
 609+ 65ED             >
 609+ 65ED             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 610+ 65ED E1                           pop     hl
 611+ 65EE 7D                           ld      a, l
 612+ 65EF              Emitc_Ptr:
 613+ 65EF C5                           push    bc
 614+ 65F0 DD E5                        push    ix
 615+ 65F2 D7                           rst     $10
 616+ 65F3 DD E1                        pop     ix
 617+ 65F5 C1                           pop     bc
 618+ 65F6 3E FF                        ld      a, 255            // max possible
 619+ 65F8 32 8C 5C                     ld      (SCR_CT), a
 620+ 65FB
 621+ 65FB                              next
 621+ 65FB DD E9       >                jp      (ix)
 622+ 65FD
 623+ 65FD              Emitc_Vec:
 624+ 65FD 42 66                        dw      C_Emit_Printable  // comma
 625+ 65FF 48 66                        dw      C_Emit_Bel        // bel
 626+ 6601 42 66                        dw      C_Emit_Printable  // bs
 627+ 6603 5D 66                        dw      C_Emit_Tab        // tab
 628+ 6605 42 66                        dw      C_Emit_Printable  // cr
 629+ 6607 63 66                        dw      C_Emit_NL         // lf (unix newline)
 630+ 6609 42 66                        dw      C_Emit_Printable  // blank
 631+ 660B 42 66                        dw      C_Emit_Printable  // blank
 632+ 660D
 633+ 660D              Emit_Selector_Start:
 634+ 660D 06                           db      $06                 // comma
 635+ 660E 07                           db      $07                 // bel
 636+ 660F 08                           db      $08                 // bs
 637+ 6610 09                           db      $09                 // tab
 638+ 6611 0D                           db      $0D                 // cr
 639+ 6612 0A                           db      $0A                 // lf (unix newline)
 640+ 6613 20                           db      $20
 641+ 6614              Emit_Selector_End:
 642+ 6614 20                           db      $20
 643+ 6615
 644+ 6615              //  ______________________________________________________________________
 645+ 6615              //
 646+ 6615              // (?emit)      c1 -- c2 | c1
 647+ 6615              // decode a character to be sent via EMIT
 648+ 6615              // search first the Emit_Selector table, if found jump to the corresponding routine in Emit_Vector
 649+ 6615              // the routine should resolve anything and convert the character anyway.
 650+ 6615                              New_Def C_EMIT, "(?EMIT)", is_code, is_normal
 650+ 6615             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 650+ 6615             >
 650+ 6615             >                // dummy db directives used to calculate length of namec
 650+ 6615 28 3F 45 4D >                db      "(?EMIT)"
 650+ 6619 49 54 29    >
 650+ 661C             >len_NFA         defl    $ - temp_NFA
 650+ 661C             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 650+ 6615             >
 650+ 6615 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 650+ 6616 28 3F 45 4D >                db      "(?EMIT)"               // name string in 7-bit ascii, but
 650+ 661A 49 54 29    >
 650+ 661D             >                org     $-1                 // alter last byte of Name just above to set
 650+ 661C A9          >                db      {b $} | END_BIT     // msb as name end
 650+ 661D             >
 650+ 661D E3 65       >                dw      last_NFA            // Link to previous definition Name
 650+ 661F             >C_EMIT:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 650+ 661F ~           >                dw      runcode ; ok        // for primitive definitions  actual code
 650+ 661F             >                else
 650+ 661F 21 66       >                dw      $ + 2   ; ok        // is pointed by CFA
 650+ 6621             >                endif           ; ok        // for other definitions it "points" the correct handler
 650+ 6621             >                // Use of "; ok" to suppress "warning[fwdref]"
 650+ 6621             >
 650+ 6621             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 651+ 6621 D1                           pop     de
 652+ 6622 7B                           ld      a, e                //  de has c1
 653+ 6623 E6 7F                        and     $7F                 // 7-bit ascii only
 654+ 6625 C5                           push    bc                  // save Instruction Pointer
 655+ 6626 01 08 00                     ld      bc, Emit_Selector_End - Emit_Selector_Start + 1
 656+ 6629 21 14 66                     ld      hl, Emit_Selector_End
 657+ 662C ED B9                        cpdr                        // search for c1 in Emit_Selector table, backward
 658+ 662E 20 0B                        jr      nz, C_Emit_Not_Found
 659+ 6630                                  // Found then decode it
 660+ 6630 21 FD 65                         ld      hl, Emitc_Vec
 661+ 6633 09                               add     hl, bc
 662+ 6634 09                               add     hl, bc
 663+ 6635 5E                               ld      e, (hl)
 664+ 6636 23                               inc     hl
 665+ 6637 56                               ld      d, (hl)
 666+ 6638 EB                               ex      de, hl
 667+ 6639 C1                               pop     bc                  // restore Instruction Pointer
 668+ 663A E9                               jp      (hl)                // one of the following labels
 669+ 663B              C_Emit_Not_Found:
 670+ 663B C1                           pop     bc                  // restore Instruction Pointer
 671+ 663C FE 20                        cp      BLANK_CHAR          // cp $20 non-printable check
 672+ 663E 30 02                        jr      nc, C_Emit_Printable
 673+ 6640 3E 00                            ld      a, NUL_CHAR         // NUL is never "printed"
 674+ 6642              C_Emit_Printable:
 675+ 6642 6F                           ld      l, a
 676+ 6643 26 00                        ld      h, 0
 677+ 6645
 678+ 6645                              psh1
 678+ 6645 E5          >                push    hl
 678+ 6646 DD E9       >                jp      (ix)
 679+ 6648
 680+ 6648              C_Emit_Bel:
 681+ 6648 C5                           push    bc                  // save Instruction Pointer
 682+ 6649 11 00 01                     ld      de, $0100
 683+ 664C 21 00 02                     ld      hl, $0200
 684+ 664F DD E5                        push    ix                  // save Next Pointer
 685+ 6651 CD B6 03                     call    $03B6               // bleep Standard-ROM routine
 686+ 6654 DD E1                        pop     ix                  // restore Next Pointer
 687+ 6656 C1                           pop     bc                  // restore Instruction Pointer
 688+ 6657 21 00 00                     ld      hl, NUL_CHAR
 689+ 665A
 690+ 665A                              psh1
 690+ 665A E5          >                push    hl
 690+ 665B DD E9       >                jp      (ix)
 691+ 665D
 692+ 665D 21 06 00     C_Emit_Tab:     ld      hl, COMMA_CHAR
 693+ 6660
 694+ 6660                              psh1
 694+ 6660 E5          >                push    hl
 694+ 6661 DD E9       >                jp      (ix)
 695+ 6663
 696+ 6663 21 0D 00     C_Emit_NL       ld      hl, CR_CHAR           // 0x0A --> 0x0D  à la Spectrum
 697+ 6666
 698+ 6666                              psh1
 698+ 6666 E5          >                push    hl
 698+ 6667 DD E9       >                jp      (ix)
 699+ 6669
 700+ 6669              //  ______________________________________________________________________
 701+ 6669
 702+ 6669              Key_Table:
 703+ 6669 E2                           db      $E2                 //  0: STOP  --> SYMBOL+A : ~
 704+ 666A C3                           db      $C3                 //  1: NOT   --> SYMBOL+S : |
 705+ 666B CD                           db      $CD                 //  2: STEP  --> SYMBOl+D : //
 706+ 666C CC                           db      $CC                 //  3: TO    --> SYMBOL+F : {
 707+ 666D CB                           db      $CB                 //  4: THEN  --> SYMBOL+G : }
 708+ 666E C6                           db      $C6                 //  5: AND   --> SYMBOL+Y : [
 709+ 666F C5                           db      $C5                 //  6: OR    --> SYMBOL+U : ]
 710+ 6670 AC                           db      $AC                 //  7: AT    --> SYMBOL+I : (C) copyright symbol
 711+ 6671 C7                           db      $C7                 //  8: <=    --> same as SHIFT-1 [EDIT]
 712+ 6672 C8                           db      $C8                 //  9: >=    --> same as SHIFT-0 [BACKSPACE]
 713+ 6673 C9                           db      $C9                 // 10: <>    --> SYMBOL+W is the same as CAPS (toggle) SHIFT+2
 714+ 6674              Key_MapTo:
 715+ 6674 06                           db      $06                 // 10: SYMBOL+W is the same as CAPS (toggle) SHIFT+2
 716+ 6675 0C                           db      $0C                 //  9: same as SHIFT-0 [BACKSPACE]
 717+ 6676 07                           db      $07                 //  8: same as SHIFT-1 [EDIT]
 718+ 6677 7F                           db      $7F                 //  7: SYMBOL+I : (C) copyright symbol
 719+ 6678 5D                           db      $5D                 //  6: SYMBOL+U : ]
 720+ 6679 5B                           db      $5B                 //  5: SYMBOL+Y : [
 721+ 667A 7D                           db      $7D                 //  4: SYMBOL+G : }
 722+ 667B 7B                           db      $7B                 //  3: SYMBOL+F : {
 723+ 667C 5C                           db      $5C                 //  2: SYMBOl+D : //
 724+ 667D 7C                           db      $7C                 //  1: SYMBOL+S : |
 725+ 667E 7E                           db      $7E                 //  0: SYMBOL+A : ~
 726+ 667F
 727+ 667F              //  ______________________________________________________________________
 728+ 667F              //
 729+ 667F              // key          -- c
 730+ 667F              // wait for a keypress
 731+ 667F              // This definition need Standard ROM Interrupt to be served
 732+ 667F
 733+ 667F                              New_Def KEY, "KEY", is_code, is_normal
 733+ 667F             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 733+ 667F             >
 733+ 667F             >                // dummy db directives used to calculate length of namec
 733+ 667F 4B 45 59    >                db      "KEY"
 733+ 6682             >len_NFA         defl    $ - temp_NFA
 733+ 6682             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 733+ 667F             >
 733+ 667F 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 733+ 6680 4B 45 59    >                db      "KEY"               // name string in 7-bit ascii, but
 733+ 6683             >                org     $-1                 // alter last byte of Name just above to set
 733+ 6682 D9          >                db      {b $} | END_BIT     // msb as name end
 733+ 6683             >
 733+ 6683 15 66       >                dw      last_NFA            // Link to previous definition Name
 733+ 6685             >KEY:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 733+ 6685 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
 733+ 6685             >                else
 733+ 6685 87 66       >                dw      $ + 2   ; ok        // is pointed by CFA
 733+ 6687             >                endif           ; ok        // for other definitions it "points" the correct handler
 733+ 6687             >                // Use of "; ok" to suppress "warning[fwdref]"
 733+ 6687             >
 733+ 6687             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 734+ 6687
 735+ 6687 C5                           push    bc                  // save Instruction Pointer
 736+ 6688 DD E5                        push    ix
 737+ 668A
 738+ 668A ED 73 92 63                  ld      (SP_Saved), sp      // be sure to not to be paged out.
 739+ 668E 31 61 63                     ld      sp, Cold_origin - 5 // maybe $4000 in the future...
 740+ 6691 FD CB 01 AE                  res     5, (iy + 1)         // FLAGS (5C3A+1)
 741+ 6695
 742+ 6695              Key_Wait:
 743+ 6695 76                               halt
 744+ 6696 3E 02                            ld      a, 2                // selec channel #2 (Upper Video)
 745+ 6698 CD 01 16                         call    $1601               // SELECT Standard-ROM Routine
 746+ 669B
 747+ 669B                                  // software-flash: flips face every 320 ms
 748+ 669B 3E 10                            ld      a, $10              // Timing based
 749+ 669D FD A6 3E                         and     (iy + $3E)          // FRAMES (5C3A+3E)
 750+ 66A0
 751+ 66A0 3A 8C 63                         ld      a, (Block_Face)     // see origin.asm
 752+ 66A3 20 0C                            jr      nz, Key_Cursor
 753+ 66A5 3A 8D 63                             ld      a, (Half_Face)      // see origin.asm
 754+ 66A8 FD CB 30 5E                          bit     3, (iy + $30)       // FLAGS2 (5C3A+$30) that is CAPS-LOCK
 755+ 66AC 28 03                                jr      z, Key_Cursor
 756+ 66AE 3A 8E 63                                 ld      a, (Underscore_Face) // see origin
 757+ 66B1              Key_Cursor:
 758+ 66B1 D7                               rst     $10
 759+ 66B2 3E 08                            ld      a, BACKSPACE_CHAR    // backspace
 760+ 66B4 D7                               rst     $10
 761+ 66B5
 762+ 66B5 FD CB 01 6E                      bit     5, (iy + 1)         // FLAGS (5C3A+1)
 763+ 66B9 28 DA                        jr      z, Key_Wait
 764+ 66BB
 765+ 66BB 76                           halt    // this is to sync flashing cursor.
 766+ 66BC
 767+ 66BC 3E 20                        ld      a, BLANK_CHAR       // space to blank cursor
 768+ 66BE D7                           rst     $10
 769+ 66BF 3E 08                        ld      a, BACKSPACE_CHAR   // backspace
 770+ 66C1 D7                           rst     $10
 771+ 66C2 3A 08 5C                     ld      a, (LASTK)          // get typed character (5C08)
 772+ 66C5
 773+ 66C5                              // decode character from above table
 774+ 66C5 21 69 66                     ld      hl, Key_Table
 775+ 66C8 01 0B 00                     ld      bc, $000B
 776+ 66CB ED B1                        cpir
 777+ 66CD 20 05                        jr      nz, Key_DontMap
 778+ 66CF 21 74 66                         ld      hl, Key_MapTo
 779+ 66D2 09                               add     hl, bc
 780+ 66D3 7E                               ld      a, (hl)
 781+ 66D4 FE 06        Key_DontMap:    cp      $06                 // CAPS-LOCK management
 782+ 66D6 20 09                        jr      nz, Key_NoCapsLock
 783+ 66D8 21 6A 5C                         ld      hl, $5C6A           // FLAGS2
 784+ 66DB 7E                               ld      a, (hl)
 785+ 66DC EE 08                            xor     $08
 786+ 66DE 77                               ld      (hl), a
 787+ 66DF 3E 00                            ld      a, NUL_CHAR
 788+ 66E1 6F           Key_NoCapsLock: ld      l, a
 789+ 66E2 26 00                        ld      h, 0                // Prepare TOS
 790+ 66E4
 791+ 66E4 3A 48 5C                     ld      a, ($5C48)          // BORDCR system variable
 792+ 66E7 1F                           rra
 793+ 66E8 1F                           rra
 794+ 66E9 1F                           rra
 795+ 66EA F6 18                        or      $18                 // quick'n'dirty click
 796+ 66EC D3 FE                        out     ($fe), a
 797+ 66EE 06 00                        ld      b, 0
 798+ 66F0 10 FE                        djnz    $                   // wait loop
 799+ 66F2 EE 18                        xor     $18
 800+ 66F4 D3 FE                        out     ($fe), a
 801+ 66F6
 802+ 66F6 ED 7B 92 63                  ld      sp, (SP_Saved)
 803+ 66FA
 804+ 66FA DD E1                        pop     ix
 805+ 66FC C1                           pop     bc                  // Restore Instruction Pointer
 806+ 66FD
 807+ 66FD                              psh1
 807+ 66FD E5          >                push    hl
 807+ 66FE DD E9       >                jp      (ix)
 808+ 6700
 809+ 6700              //  ______________________________________________________________________
 810+ 6700              //
 811+ 6700              // ?terminal    -- FALSE | TRUE
 812+ 6700              // test for BREAK keypress
 813+ 6700                              New_Def QTERMINAL, "?TERMINAL", is_code, is_normal
 813+ 6700             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 813+ 6700             >
 813+ 6700             >                // dummy db directives used to calculate length of namec
 813+ 6700 3F 54 45 52 >                db      "?TERMINAL"
 813+ 6704 4D 49 4E 41 >
 813+ 6708 4C          >
 813+ 6709             >len_NFA         defl    $ - temp_NFA
 813+ 6709             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 813+ 6700             >
 813+ 6700 89          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 813+ 6701 3F 54 45 52 >                db      "?TERMINAL"               // name string in 7-bit ascii, but
 813+ 6705 4D 49 4E 41 >
 813+ 6709 4C          >
 813+ 670A             >                org     $-1                 // alter last byte of Name just above to set
 813+ 6709 CC          >                db      {b $} | END_BIT     // msb as name end
 813+ 670A             >
 813+ 670A 7F 66       >                dw      last_NFA            // Link to previous definition Name
 813+ 670C             >QTERMINAL:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 813+ 670C ~           >                dw      runcode ; ok        // for primitive definitions  actual code
 813+ 670C             >                else
 813+ 670C 0E 67       >                dw      $ + 2   ; ok        // is pointed by CFA
 813+ 670E             >                endif           ; ok        // for other definitions it "points" the correct handler
 813+ 670E             >                // Use of "; ok" to suppress "warning[fwdref]"
 813+ 670E             >
 813+ 670E             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 814+ 670E 21 00 00                     ld      hl, 0
 815+ 6711 ED 73 92 63                  ld      (SP_Saved), sp
 816+ 6715 31 61 63                     ld      sp, Cold_origin - 5
 817+ 6718 CD 54 1F                     call    $1F54
 818+ 671B ED 7B 92 63                  ld      sp, (SP_Saved)
 819+ 671F
 820+ 671F 38 01                        jr      c, QTerminal_NoBreak
 821+ 6721 2B                               dec     hl                  // quick TRUE_FLAG
 822+ 6722              QTerminal_NoBreak:
 823+ 6722
 824+ 6722                              psh1
 824+ 6722 E5          >                push    hl
 824+ 6723 DD E9       >                jp      (ix)
 825+ 6725
 826+ 6725
 827+ 6725              //  ______________________________________________________________________
 828+ 6725              //
 829+ 6725              // ZX Spectrum Next - Low Level disk primitives.
 830+ 6725              // this include is "here" for backward compatibility
 831+ 6725
 832+ 6725                              include "next-opt0.asm"
# file opened: C:\Zx\CSpect\Projects\vForth15_INDIRECT/source/next-opt0.asm
   1++6725              //  ______________________________________________________________________
   2++6725              //
   3++6725              //  next-opt.asm
   4++6725              //
   5++6725              //  ZX Spectrum Next - peculiar definitions
   6++6725              //  ______________________________________________________________________
   7++6725
   8++6725              //  ______________________________________________________________________
   9++6725              //
  10++6725              // f_seek       d u -- f
  11++6725              // Seek to position d in file-handle u.
  12++6725              // Return a false-flag 0 on success, True flag on error
  13++6725                              New_Def F_SEEK, "F_SEEK", is_code, is_normal
  13++6725             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  13++6725             >
  13++6725             >                // dummy db directives used to calculate length of namec
  13++6725 46 5F 53 45 >                db      "F_SEEK"
  13++6729 45 4B       >
  13++672B             >len_NFA         defl    $ - temp_NFA
  13++672B             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  13++6725             >
  13++6725 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  13++6726 46 5F 53 45 >                db      "F_SEEK"               // name string in 7-bit ascii, but
  13++672A 45 4B       >
  13++672C             >                org     $-1                 // alter last byte of Name just above to set
  13++672B CB          >                db      {b $} | END_BIT     // msb as name end
  13++672C             >
  13++672C 00 67       >                dw      last_NFA            // Link to previous definition Name
  13++672E             >F_SEEK:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
  13++672E ~           >                dw      runcode ; ok        // for primitive definitions  actual code
  13++672E             >                else
  13++672E 30 67       >                dw      $ + 2   ; ok        // is pointed by CFA
  13++6730             >                endif           ; ok        // for other definitions it "points" the correct handler
  13++6730             >                // Use of "; ok" to suppress "warning[fwdref]"
  13++6730             >
  13++6730             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  14++6730 E1                           pop     hl                  // file-handle
  15++6731 7D                           ld      a, l                // file-handle
  16++6732 60                           ld      h, b                // save Intruction Pointer
  17++6733 69                           ld      l, c
  18++6734 C1                           pop     bc                  // bc has high-word of d
  19++6735 D1                           pop     de
  20++6736 DD E5                        push    ix
  21++6738 E5                           push    hl                  // save Instruction Pointer
  22++6739 DD 21 00 00                  ld      ix, 0
  23++673D CF                           rst     $08
  24++673E 9F                           db      $9F
  25++673F C1                           pop     bc                  // restore Instruction Pointer
  26++6740 DD E1                        pop     ix
  27++6742 ED 62                        sbc     hl, hl              // to get 0 or -1
  28++6744
  29++6744                              psh1
  29++6744 E5          >                push    hl
  29++6745 DD E9       >                jp      (ix)
  30++6747
  31++6747              //  ______________________________________________________________________
  32++6747              //
  33++6747              // f_fgetpos    u -- d f
  34++6747              // Seek to position d in file-handle u.
  35++6747              // Return a false-flag 0 on success, True flag on error
  36++6747                              New_Def F_FGETPOS, "F_FGETPOS", is_code, is_normal
  36++6747             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  36++6747             >
  36++6747             >                // dummy db directives used to calculate length of namec
  36++6747 46 5F 46 47 >                db      "F_FGETPOS"
  36++674B 45 54 50 4F >
  36++674F 53          >
  36++6750             >len_NFA         defl    $ - temp_NFA
  36++6750             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  36++6747             >
  36++6747 89          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  36++6748 46 5F 46 47 >                db      "F_FGETPOS"               // name string in 7-bit ascii, but
  36++674C 45 54 50 4F >
  36++6750 53          >
  36++6751             >                org     $-1                 // alter last byte of Name just above to set
  36++6750 D3          >                db      {b $} | END_BIT     // msb as name end
  36++6751             >
  36++6751 25 67       >                dw      last_NFA            // Link to previous definition Name
  36++6753             >F_FGETPOS:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
  36++6753 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
  36++6753             >                else
  36++6753 55 67       >                dw      $ + 2   ; ok        // is pointed by CFA
  36++6755             >                endif           ; ok        // for other definitions it "points" the correct handler
  36++6755             >                // Use of "; ok" to suppress "warning[fwdref]"
  36++6755             >
  36++6755             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  37++6755 E1                           pop     hl
  38++6756 7D                           ld      a, l                // file-handle
  39++6757 DD E5                        push    ix
  40++6759 C5                           push    bc
  41++675A CF                           rst     $08
  42++675B A0                           db      $A0
  43++675C E1                           pop     hl                  // restore Instruction Pointer
  44++675D DD E1                        pop     ix
  45++675F D5                           push    de
  46++6760 C5                           push    bc
  47++6761 44                           ld      b, h                // restore Instruction Pointer
  48++6762 4D                           ld      c, l
  49++6763 ED 62                        sbc     hl, hl
  50++6765
  51++6765                              psh1
  51++6765 E5          >                push    hl
  51++6766 DD E9       >                jp      (ix)
  52++6768
  53++6768              //  ______________________________________________________________________
  54++6768              //
  55++6768              // f_read       a b u -- n f
  56++6768              // Read b bytes from file-handle u to address a
  57++6768              // Return the actual number n of bytes read
  58++6768              // Return 0 on success, True flag on error
  59++6768                              New_Def F_READ, "F_READ", is_code, is_normal
  59++6768             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  59++6768             >
  59++6768             >                // dummy db directives used to calculate length of namec
  59++6768 46 5F 52 45 >                db      "F_READ"
  59++676C 41 44       >
  59++676E             >len_NFA         defl    $ - temp_NFA
  59++676E             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  59++6768             >
  59++6768 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  59++6769 46 5F 52 45 >                db      "F_READ"               // name string in 7-bit ascii, but
  59++676D 41 44       >
  59++676F             >                org     $-1                 // alter last byte of Name just above to set
  59++676E C4          >                db      {b $} | END_BIT     // msb as name end
  59++676F             >
  59++676F 47 67       >                dw      last_NFA            // Link to previous definition Name
  59++6771             >F_READ:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
  59++6771 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
  59++6771             >                else
  59++6771 73 67       >                dw      $ + 2   ; ok        // is pointed by CFA
  59++6773             >                endif           ; ok        // for other definitions it "points" the correct handler
  59++6773             >                // Use of "; ok" to suppress "warning[fwdref]"
  59++6773             >
  59++6773             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  60++6773
  61++6773 50                           ld      d, b
  62++6774 59                           ld      e, c
  63++6775 E1                           pop     hl
  64++6776 7D                           ld      a, l                // file-handle
  65++6777 C1                           pop     bc                  // bc has bytes to read
  66++6778 DD E3                        ex      (sp), ix            // ix has address
  67++677A D5                           push    de                  // Save Instruction pointer
  68++677B CF                           rst     $08
  69++677C 9D                           db      $9D
  70++677D C1                           pop     bc                  // Restore Instruction pointer
  71++677E DD E1                        pop     ix                  // Restore ix
  72++6780 D5                           push    de                  // bytes written
  73++6781 ED 62                        sbc     hl, hl
  74++6783
  75++6783                              psh1
  75++6783 E5          >                push    hl
  75++6784 DD E9       >                jp      (ix)
  76++6786
  77++6786              //  ______________________________________________________________________
  78++6786              //
  79++6786              // f_write      a b u -- n f
  80++6786              // Write bytes currently stored at address a to file-handle u.
  81++6786              // Return the actual n bytes written and 0 on success, True flag on error.
  82++6786                              New_Def F_WRITE, "F_WRITE", is_code, is_normal
  82++6786             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  82++6786             >
  82++6786             >                // dummy db directives used to calculate length of namec
  82++6786 46 5F 57 52 >                db      "F_WRITE"
  82++678A 49 54 45    >
  82++678D             >len_NFA         defl    $ - temp_NFA
  82++678D             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  82++6786             >
  82++6786 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  82++6787 46 5F 57 52 >                db      "F_WRITE"               // name string in 7-bit ascii, but
  82++678B 49 54 45    >
  82++678E             >                org     $-1                 // alter last byte of Name just above to set
  82++678D C5          >                db      {b $} | END_BIT     // msb as name end
  82++678E             >
  82++678E 68 67       >                dw      last_NFA            // Link to previous definition Name
  82++6790             >F_WRITE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
  82++6790 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
  82++6790             >                else
  82++6790 92 67       >                dw      $ + 2   ; ok        // is pointed by CFA
  82++6792             >                endif           ; ok        // for other definitions it "points" the correct handler
  82++6792             >                // Use of "; ok" to suppress "warning[fwdref]"
  82++6792             >
  82++6792             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  83++6792
  84++6792 50                           ld      d, b
  85++6793 59                           ld      e, c
  86++6794 E1                           pop     hl
  87++6795 7D                           ld      a, l                // file-handle
  88++6796 C1                           pop     bc                  // bc has bytes to read
  89++6797 DD E3                        ex      (sp), ix            // ix has address
  90++6799 D5                           push    de                  // Save Instruction pointer
  91++679A CF                           rst     $08
  92++679B 9E                           db      $9E
  93++679C C1                           pop     bc                  // Restore Instruction pointer
  94++679D DD E1                        pop     ix                  // Restore ix
  95++679F D5                           push    de                  // bytes written
  96++67A0 ED 62                        sbc     hl, hl
  97++67A2
  98++67A2                              psh1
  98++67A2 E5          >                push    hl
  98++67A3 DD E9       >                jp      (ix)
  99++67A5
 100++67A5              //  ______________________________________________________________________
 101++67A5              //
 102++67A5              // f_close      u -- f
 103++67A5              // Close file-handle u.
 104++67A5              // Return 0 on success, True flag on error
 105++67A5
 106++67A5                              New_Def F_CLOSE, "F_CLOSE", is_code, is_normal
 106++67A5             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 106++67A5             >
 106++67A5             >                // dummy db directives used to calculate length of namec
 106++67A5 46 5F 43 4C >                db      "F_CLOSE"
 106++67A9 4F 53 45    >
 106++67AC             >len_NFA         defl    $ - temp_NFA
 106++67AC             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 106++67A5             >
 106++67A5 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 106++67A6 46 5F 43 4C >                db      "F_CLOSE"               // name string in 7-bit ascii, but
 106++67AA 4F 53 45    >
 106++67AD             >                org     $-1                 // alter last byte of Name just above to set
 106++67AC C5          >                db      {b $} | END_BIT     // msb as name end
 106++67AD             >
 106++67AD 86 67       >                dw      last_NFA            // Link to previous definition Name
 106++67AF             >F_CLOSE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 106++67AF ~           >                dw      runcode ; ok        // for primitive definitions  actual code
 106++67AF             >                else
 106++67AF B1 67       >                dw      $ + 2   ; ok        // is pointed by CFA
 106++67B1             >                endif           ; ok        // for other definitions it "points" the correct handler
 106++67B1             >                // Use of "; ok" to suppress "warning[fwdref]"
 106++67B1             >
 106++67B1             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 107++67B1
 108++67B1 E1                           pop     hl
 109++67B2 7D                           ld      a, l                // file-handle
 110++67B3 DD E5                        push    ix
 111++67B5 C5                           push    bc                  // Save Instruction pointer
 112++67B6 CF                           rst     $08
 113++67B7 9B                           db      $9B
 114++67B8 C1                           pop     bc
 115++67B9 DD E1                        pop     ix
 116++67BB ED 62                        sbc     hl, hl
 117++67BD
 118++67BD                              psh1
 118++67BD E5          >                push    hl
 118++67BE DD E9       >                jp      (ix)
 119++67C0
 120++67C0              //  ______________________________________________________________________
 121++67C0              //
 122++67C0              // f_open       a1 a2 b -- u f
 123++67C0              // open a file
 124++67C0              // a1 (filespec) is a null-terminated string, such as produced by ," definition
 125++67C0              // a2 is address to an 8-byte header data used in some cases.
 126++67C0              // b is access mode-byte, that is a combination of:
 127++67C0              // any/all of:
 128++67C0              //   esx_mode_read          $01 request read access
 129++67C0              //   esx_mode_write         $02 request write access
 130++67C0              //   esx_mode_use_header    $40 read/write +3DOS header
 131++67C0              // plus one of:
 132++67C0              //   esx_mode_open_exist    $00 only open existing file
 133++67C0              //   esx_mode_open_creat    $08 open existing or create file
 134++67C0              //   esx_mode_creat_noexist $04 create new file, error if exists
 135++67C0              //   esx_mode_creat_trunc   $0c create new file, delete existing
 136++67C0              // Return file-handle u and 0 on success, True flag on error
 137++67C0                              New_Def F_OPEN, "F_OPEN", is_code, is_normal
 137++67C0             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 137++67C0             >
 137++67C0             >                // dummy db directives used to calculate length of namec
 137++67C0 46 5F 4F 50 >                db      "F_OPEN"
 137++67C4 45 4E       >
 137++67C6             >len_NFA         defl    $ - temp_NFA
 137++67C6             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 137++67C0             >
 137++67C0 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 137++67C1 46 5F 4F 50 >                db      "F_OPEN"               // name string in 7-bit ascii, but
 137++67C5 45 4E       >
 137++67C7             >                org     $-1                 // alter last byte of Name just above to set
 137++67C6 CE          >                db      {b $} | END_BIT     // msb as name end
 137++67C7             >
 137++67C7 A5 67       >                dw      last_NFA            // Link to previous definition Name
 137++67C9             >F_OPEN:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 137++67C9 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
 137++67C9             >                else
 137++67C9 CB 67       >                dw      $ + 2   ; ok        // is pointed by CFA
 137++67CB             >                endif           ; ok        // for other definitions it "points" the correct handler
 137++67CB             >                // Use of "; ok" to suppress "warning[fwdref]"
 137++67CB             >
 137++67CB             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 138++67CB 60                           ld      h, b                // Save Instruction pointer
 139++67CC 69                           ld      l, c
 140++67CD C1                           pop     bc                  // file-mode
 141++67CE 41                           ld      b, c                // file-mode
 142++67CF D1                           pop     de                  // 8-bytes buffer if any
 143++67D0 DD E3                        ex      (sp), ix            // filespec nul-terminated
 144++67D2 E5                           push    hl                  // Save Instruction pointer
 145++67D3 3E 2A                        ld      a, "*"
 146++67D5 CF                           rst     $08
 147++67D6 9A                           db      $9A
 148++67D7 C1                           pop     bc
 149++67D8 DD E1                        pop     ix
 150++67DA ED 62                        sbc     hl, hl
 151++67DC 5F                           ld      e, a
 152++67DD 16 00                        ld      d, 0
 153++67DF
 154++67DF
 155++67DF                              psh2
 155++67DF D5          >                push    de
 155++67E0 E5          >                push    hl
 155++67E1 DD E9       >                jp      (ix)
 156++67E3
 157++67E3              //   \ CREATE FILENAME ," test.txt"   \ new Counted String
 158++67E3              //   \ FILENAME 1+ PAD 1 F_OPEN
 159++67E3              //   \ DROP
 160++67E3              //   \ F_CLOSE
 161++67E3
 162++67E3              //  ______________________________________________________________________
 163++67E3              //
 164++67E3              // f_sync      u -- f
 165++67E3              // Close file-handle u.
 166++67E3              // Return 0 on success, True flag on error
 167++67E3
 168++67E3                              New_Def F_SYNC, "F_SYNC", is_code, is_normal
 168++67E3             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 168++67E3             >
 168++67E3             >                // dummy db directives used to calculate length of namec
 168++67E3 46 5F 53 59 >                db      "F_SYNC"
 168++67E7 4E 43       >
 168++67E9             >len_NFA         defl    $ - temp_NFA
 168++67E9             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 168++67E3             >
 168++67E3 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 168++67E4 46 5F 53 59 >                db      "F_SYNC"               // name string in 7-bit ascii, but
 168++67E8 4E 43       >
 168++67EA             >                org     $-1                 // alter last byte of Name just above to set
 168++67E9 C3          >                db      {b $} | END_BIT     // msb as name end
 168++67EA             >
 168++67EA C0 67       >                dw      last_NFA            // Link to previous definition Name
 168++67EC             >F_SYNC:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 168++67EC ~           >                dw      runcode ; ok        // for primitive definitions  actual code
 168++67EC             >                else
 168++67EC EE 67       >                dw      $ + 2   ; ok        // is pointed by CFA
 168++67EE             >                endif           ; ok        // for other definitions it "points" the correct handler
 168++67EE             >                // Use of "; ok" to suppress "warning[fwdref]"
 168++67EE             >
 168++67EE             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 169++67EE E1                           pop     hl
 170++67EF 7D                           ld      a, l                // file-handle
 171++67F0 DD E5                        push    ix
 172++67F2 C5                           push    bc
 173++67F3 CF                           rst     $08
 174++67F4 9C                           db      $9C
 175++67F5 C1                           pop     bc
 176++67F6 DD E1                        pop     ix
 177++67F8 ED 62                        sbc     hl, hl
 178++67FA
 179++67FA                              psh1
 179++67FA E5          >                push    hl
 179++67FB DD E9       >                jp      (ix)
 180++67FD
# file closed: C:\Zx\CSpect\Projects\vForth15_INDIRECT/source/next-opt0.asm
 833+ 67FD
 834+ 67FD
 835+ 67FD              //  ______________________________________________________________________
 836+ 67FD              //
 837+ 67FD              // cr           --
 838+ 67FD              // send a CR via EMITC
 839+ 67FD                              New_Def CR, "CR", is_code, is_normal
 839+ 67FD             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 839+ 67FD             >
 839+ 67FD             >                // dummy db directives used to calculate length of namec
 839+ 67FD 43 52       >                db      "CR"
 839+ 67FF             >len_NFA         defl    $ - temp_NFA
 839+ 67FF             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 839+ 67FD             >
 839+ 67FD 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 839+ 67FE 43 52       >                db      "CR"               // name string in 7-bit ascii, but
 839+ 6800             >                org     $-1                 // alter last byte of Name just above to set
 839+ 67FF D2          >                db      {b $} | END_BIT     // msb as name end
 839+ 6800             >
 839+ 6800 E3 67       >                dw      last_NFA            // Link to previous definition Name
 839+ 6802             >CR:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 839+ 6802 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
 839+ 6802             >                else
 839+ 6802 04 68       >                dw      $ + 2   ; ok        // is pointed by CFA
 839+ 6804             >                endif           ; ok        // for other definitions it "points" the correct handler
 839+ 6804             >                // Use of "; ok" to suppress "warning[fwdref]"
 839+ 6804             >
 839+ 6804             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 840+ 6804
 841+ 6804 3E 0D                        ld      a, CR_CHAR
 842+ 6806 C3 EF 65                     jp      Emitc_Ptr
 843+ 6809
 844+ 6809              //  ______________________________________________________________________
 845+ 6809              //
 846+ 6809              // cmove    a1 a2 u --
 847+ 6809              // If u > 0, moves memory content starting at address a1 for n bytes long
 848+ 6809              // storing then starting at address addr2.
 849+ 6809              // The content of a1 is moved first. See CMOVE> also.
 850+ 6809                              New_Def CMOVE, "CMOVE", is_code, is_normal
 850+ 6809             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 850+ 6809             >
 850+ 6809             >                // dummy db directives used to calculate length of namec
 850+ 6809 43 4D 4F 56 >                db      "CMOVE"
 850+ 680D 45          >
 850+ 680E             >len_NFA         defl    $ - temp_NFA
 850+ 680E             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 850+ 6809             >
 850+ 6809 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 850+ 680A 43 4D 4F 56 >                db      "CMOVE"               // name string in 7-bit ascii, but
 850+ 680E 45          >
 850+ 680F             >                org     $-1                 // alter last byte of Name just above to set
 850+ 680E C5          >                db      {b $} | END_BIT     // msb as name end
 850+ 680F             >
 850+ 680F FD 67       >                dw      last_NFA            // Link to previous definition Name
 850+ 6811             >CMOVE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 850+ 6811 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
 850+ 6811             >                else
 850+ 6811 13 68       >                dw      $ + 2   ; ok        // is pointed by CFA
 850+ 6813             >                endif           ; ok        // for other definitions it "points" the correct handler
 850+ 6813             >                // Use of "; ok" to suppress "warning[fwdref]"
 850+ 6813             >
 850+ 6813             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 851+ 6813 60                           ld      h, b
 852+ 6814 69                           ld      l, c
 853+ 6815
 854+ 6815 C1                           pop     bc                  // bc has counter
 855+ 6816 D1                           pop     de                  // de now has dest
 856+ 6817 E3                           ex      (sp), hl            // hl has source, save Instruction Pointer
 857+ 6818 78                           ld      a, b
 858+ 6819 B1                           or      c
 859+ 681A 28 02                        jr      z, Cmove_NoMove
 860+ 681C ED B0                            ldir
 861+ 681E              Cmove_NoMove:
 862+ 681E C1                           pop     bc                  // Restore Instruction Pointer
 863+ 681F
 864+ 681F                              next
 864+ 681F DD E9       >                jp      (ix)
 865+ 6821
 866+ 6821              //  ______________________________________________________________________
 867+ 6821              //
 868+ 6821              // cmove>    a1 a2 u --
 869+ 6821              // If u > 0, moves memory content starting at address a1 for n bytes long
 870+ 6821              // storing then starting at address addr2.
 871+ 6821              // The content of a1 is moved last. See cmove.
 872+ 6821                              New_Def CMOVE_TO, "CMOVE>", is_code, is_normal
 872+ 6821             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 872+ 6821             >
 872+ 6821             >                // dummy db directives used to calculate length of namec
 872+ 6821 43 4D 4F 56 >                db      "CMOVE>"
 872+ 6825 45 3E       >
 872+ 6827             >len_NFA         defl    $ - temp_NFA
 872+ 6827             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 872+ 6821             >
 872+ 6821 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 872+ 6822 43 4D 4F 56 >                db      "CMOVE>"               // name string in 7-bit ascii, but
 872+ 6826 45 3E       >
 872+ 6828             >                org     $-1                 // alter last byte of Name just above to set
 872+ 6827 BE          >                db      {b $} | END_BIT     // msb as name end
 872+ 6828             >
 872+ 6828 09 68       >                dw      last_NFA            // Link to previous definition Name
 872+ 682A             >CMOVE_TO:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 872+ 682A ~           >                dw      runcode ; ok        // for primitive definitions  actual code
 872+ 682A             >                else
 872+ 682A 2C 68       >                dw      $ + 2   ; ok        // is pointed by CFA
 872+ 682C             >                endif           ; ok        // for other definitions it "points" the correct handler
 872+ 682C             >                // Use of "; ok" to suppress "warning[fwdref]"
 872+ 682C             >
 872+ 682C             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 873+ 682C 60                           ld      h, b
 874+ 682D 69                           ld      l, c
 875+ 682E
 876+ 682E C1                           pop     bc                  // bc has counter
 877+ 682F D1                           pop     de                  // de has dest
 878+ 6830 E3                           ex      (sp), hl            // hl has source, save Instruction Pointer
 879+ 6831 78                           ld      a, b
 880+ 6832 B1                           or      c
 881+ 6833 28 08                        jr      z, CmoveV_NoMove
 882+ 6835 EB                               ex      de, hl              // compute address to
 883+ 6836 09                               add     hl, bc              // operate backward
 884+ 6837 2B                               dec     hl
 885+ 6838 EB                               ex      de, hl
 886+ 6839 09                               add     hl, bc
 887+ 683A 2B                               dec     hl
 888+ 683B ED B8                            lddr                        // backward
 889+ 683D              CmoveV_NoMove:
 890+ 683D C1                           pop     bc                  // Restore Instruction Pointer
 891+ 683E
 892+ 683E                              next
 892+ 683E DD E9       >                jp      (ix)
 893+ 6840
 894+ 6840              //  ______________________________________________________________________
 895+ 6840              //
 896+ 6840              // um*      u1 u2 -- ud
 897+ 6840              // Unsigned multiplication
 898+ 6840              // A double-integer is kept in CPU registers as DEHL then pushed on stack.
 899+ 6840              // On the stack a double number is treated as two single numbers
 900+ 6840              // where DE is on the top of the stack and HL is the second from top,
 901+ 6840              // Instead, in 2VARIABLE a double number is stored as EDLH.
 902+ 6840              // this definition could use "MUL" Z80N new op-code.
 903+ 6840                              New_Def UM_MUL, "UM*", is_code, is_normal
 903+ 6840             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 903+ 6840             >
 903+ 6840             >                // dummy db directives used to calculate length of namec
 903+ 6840 55 4D 2A    >                db      "UM*"
 903+ 6843             >len_NFA         defl    $ - temp_NFA
 903+ 6843             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 903+ 6840             >
 903+ 6840 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 903+ 6841 55 4D 2A    >                db      "UM*"               // name string in 7-bit ascii, but
 903+ 6844             >                org     $-1                 // alter last byte of Name just above to set
 903+ 6843 AA          >                db      {b $} | END_BIT     // msb as name end
 903+ 6844             >
 903+ 6844 21 68       >                dw      last_NFA            // Link to previous definition Name
 903+ 6846             >UM_MUL:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 903+ 6846 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
 903+ 6846             >                else
 903+ 6846 48 68       >                dw      $ + 2   ; ok        // is pointed by CFA
 903+ 6848             >                endif           ; ok        // for other definitions it "points" the correct handler
 903+ 6848             >                // Use of "; ok" to suppress "warning[fwdref]"
 903+ 6848             >
 903+ 6848             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 904+ 6848 D1                           pop     de                    // de has u2 operand
 905+ 6849 E1                           pop     hl                    // hl has u1 operand
 906+ 684A C5                           push    bc                    // Save Instruction Pointer
 907+ 684B 45                           ld      b, l
 908+ 684C 4B                           ld      c, e
 909+ 684D 5D                           ld      e, l
 910+ 684E 6A                           ld      l, d
 911+ 684F E5                           push    hl
 912+ 6850 69                           ld      l, c
 913+ 6851 ED 30                        mul
 914+ 6853 EB                           ex      de, hl
 915+ 6854 ED 30                        mul
 916+ 6856 AF                           xor     a
 917+ 6857 19                           add     hl, de
 918+ 6858 8F                           adc     a
 919+ 6859 59                           ld      e, c
 920+ 685A 50                           ld      d, b
 921+ 685B ED 30                        mul
 922+ 685D 47                           ld      b, a
 923+ 685E 4C                           ld      c, h
 924+ 685F 7A                           ld      a, d
 925+ 6860 85                           add     l
 926+ 6861 67                           ld      h, a
 927+ 6862 6B                           ld      l, e
 928+ 6863 D1                           pop     de
 929+ 6864 ED 30                        mul
 930+ 6866 EB                           ex      de, hl
 931+ 6867 ED 4A                        adc     hl, bc
 932+ 6869 C1                           pop     bc
 933+ 686A D5                           push    de
 934+ 686B E5                           push    hl
 935+ 686C                              next
 935+ 686C DD E9       >                jp      (ix)
 936+ 686E
 937+ 686E              //  ______________________________________________________________________
 938+ 686E              //
 939+ 686E              // um/mod      ud u1 -- q r
 940+ 686E              // divides ud into u1 giving quotient q and remainder r
 941+ 686E              // algorithm takes 16 bit at a time starting from msb
 942+ 686E              // DE grows from lsb upward with quotient result
 943+ 686E              // HL keeps the remainder at each stage of division
 944+ 686E              // each loop 'lowers' the next binary digit to form the current dividend
 945+ 686E                              New_Def UMDIVMOD, "UM/MOD", is_code, is_normal
 945+ 686E             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 945+ 686E             >
 945+ 686E             >                // dummy db directives used to calculate length of namec
 945+ 686E 55 4D 2F 4D >                db      "UM/MOD"
 945+ 6872 4F 44       >
 945+ 6874             >len_NFA         defl    $ - temp_NFA
 945+ 6874             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 945+ 686E             >
 945+ 686E 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 945+ 686F 55 4D 2F 4D >                db      "UM/MOD"               // name string in 7-bit ascii, but
 945+ 6873 4F 44       >
 945+ 6875             >                org     $-1                 // alter last byte of Name just above to set
 945+ 6874 C4          >                db      {b $} | END_BIT     // msb as name end
 945+ 6875             >
 945+ 6875 40 68       >                dw      last_NFA            // Link to previous definition Name
 945+ 6877             >UMDIVMOD:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 945+ 6877 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
 945+ 6877             >                else
 945+ 6877 79 68       >                dw      $ + 2   ; ok        // is pointed by CFA
 945+ 6879             >                endif           ; ok        // for other definitions it "points" the correct handler
 945+ 6879             >                // Use of "; ok" to suppress "warning[fwdref]"
 945+ 6879             >
 945+ 6879             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 946+ 6879 60                           ld      h, b
 947+ 687A 69                           ld      l, c                    // Save Instruction Pointer
 948+ 687B
 949+ 687B C1                           pop     bc                      // divisor
 950+ 687C
 951+ 687C D1                           pop     de                      // < high part
 952+ 687D E3                           ex      (sp), hl                // < low part and > save bc
 953+ 687E EB                           ex      de, hl                  //
 954+ 687F 7D                           ld      a, l                    // check without changing arguments
 955+ 6880 91                           sub     c                       // if divisor is greater than high part
 956+ 6881 7C                           ld      a, h                    // so quotient will be in range
 957+ 6882 98                           sbc     a, b
 958+ 6883 30 23                        jr      nc, Um_DivMod_OutOfRange
 959+ 6885 3E 10                            ld      a, 16
 960+ 6887              Um_DivMod_Loop:
 961+ 6887 A7                                   and     a
 962+ 6888 CB 13                                rl      e
 963+ 688A CB 12                                rl      d
 964+ 688C CB 15                                rl      l
 965+ 688E CB 14                                rl      h
 966+ 6890 30 05                                jr      nc, Um_DivMod_Carry
 967+ 6892 A7                                       and     a
 968+ 6893 ED 42                                    sbc     hl, bc
 969+ 6895 18 07                                jr      Um_DivMod_Endif    // else
 970+ 6897              Um_DivMod_Carry:
 971+ 6897 A7                                       and     a
 972+ 6898 ED 42                                    sbc     hl, bc
 973+ 689A 30 02                                    jr      nc, Um_DivMod_Endif
 974+ 689C 09                                           add     hl, bc
 975+ 689D 1B                                           dec     de
 976+ 689E              Um_DivMod_Endif:                                   // endif
 977+ 689E 13                                   inc     de
 978+ 689F 3D                                   dec     a
 979+ 68A0 20 E5                            jr      nz, Um_DivMod_Loop
 980+ 68A2 EB                               ex      de, hl
 981+ 68A3              Um_DivMod_Bailout:
 982+ 68A3 C1                               pop     bc                  // restore Instruction Pointer
 983+ 68A4 D5                               push    de                  // de := remanider
 984+ 68A5 E5                               push    hl                  // hl := quotient
 985+ 68A6                                  next
 985+ 68A6 DD E9       >                jp      (ix)
 986+ 68A8
 987+ 68A8              Um_DivMod_OutOfRange:
 988+ 68A8 21 FF FF                     ld      hl, -1
 989+ 68AB 54                           ld      d, h
 990+ 68AC 5D                           ld      e, l
 991+ 68AD 18 F4                        jr      Um_DivMod_Bailout
 992+ 68AF
 993+ 68AF              //  ______________________________________________________________________
 994+ 68AF              //
 995+ 68AF              // and          n1 n2 -- n3
 996+ 68AF              // bit logical AND. Returns n3 as n1 & n2
 997+ 68AF                              New_Def AND_OP, "AND", is_code, is_normal
 997+ 68AF             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 997+ 68AF             >
 997+ 68AF             >                // dummy db directives used to calculate length of namec
 997+ 68AF 41 4E 44    >                db      "AND"
 997+ 68B2             >len_NFA         defl    $ - temp_NFA
 997+ 68B2             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 997+ 68AF             >
 997+ 68AF 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 997+ 68B0 41 4E 44    >                db      "AND"               // name string in 7-bit ascii, but
 997+ 68B3             >                org     $-1                 // alter last byte of Name just above to set
 997+ 68B2 C4          >                db      {b $} | END_BIT     // msb as name end
 997+ 68B3             >
 997+ 68B3 6E 68       >                dw      last_NFA            // Link to previous definition Name
 997+ 68B5             >AND_OP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 997+ 68B5 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
 997+ 68B5             >                else
 997+ 68B5 B7 68       >                dw      $ + 2   ; ok        // is pointed by CFA
 997+ 68B7             >                endif           ; ok        // for other definitions it "points" the correct handler
 997+ 68B7             >                // Use of "; ok" to suppress "warning[fwdref]"
 997+ 68B7             >
 997+ 68B7             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 998+ 68B7 D1                           pop     de
 999+ 68B8 E1                           pop     hl
1000+ 68B9 7B                           ld      a, e
1001+ 68BA A5                           and     l
1002+ 68BB 6F                           ld      l, a
1003+ 68BC 7A                           ld      a, d
1004+ 68BD A4                           and     h
1005+ 68BE 67                           ld      h, a
1006+ 68BF
1007+ 68BF                              psh1
1007+ 68BF E5          >                push    hl
1007+ 68C0 DD E9       >                jp      (ix)
1008+ 68C2
1009+ 68C2              //  ______________________________________________________________________
1010+ 68C2              //
1011+ 68C2              // or           n1 n2 -- n3
1012+ 68C2              // bit logical OR. Returns n3 as n1 | n2
1013+ 68C2                              New_Def OR_OP, "OR", is_code, is_normal
1013+ 68C2             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1013+ 68C2             >
1013+ 68C2             >                // dummy db directives used to calculate length of namec
1013+ 68C2 4F 52       >                db      "OR"
1013+ 68C4             >len_NFA         defl    $ - temp_NFA
1013+ 68C4             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1013+ 68C2             >
1013+ 68C2 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1013+ 68C3 4F 52       >                db      "OR"               // name string in 7-bit ascii, but
1013+ 68C5             >                org     $-1                 // alter last byte of Name just above to set
1013+ 68C4 D2          >                db      {b $} | END_BIT     // msb as name end
1013+ 68C5             >
1013+ 68C5 AF 68       >                dw      last_NFA            // Link to previous definition Name
1013+ 68C7             >OR_OP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1013+ 68C7 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1013+ 68C7             >                else
1013+ 68C7 C9 68       >                dw      $ + 2   ; ok        // is pointed by CFA
1013+ 68C9             >                endif           ; ok        // for other definitions it "points" the correct handler
1013+ 68C9             >                // Use of "; ok" to suppress "warning[fwdref]"
1013+ 68C9             >
1013+ 68C9             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1014+ 68C9 D1                           pop     de
1015+ 68CA E1                           pop     hl
1016+ 68CB 7B                           ld      a, e
1017+ 68CC B5                           or      l
1018+ 68CD 6F                           ld      l, a
1019+ 68CE 7A                           ld      a, d
1020+ 68CF B4                           or      h
1021+ 68D0 67                           ld      h, a
1022+ 68D1
1023+ 68D1                              psh1
1023+ 68D1 E5          >                push    hl
1023+ 68D2 DD E9       >                jp      (ix)
1024+ 68D4
1025+ 68D4              //  ______________________________________________________________________
1026+ 68D4              //
1027+ 68D4              // xor          n1 n2 -- n3
1028+ 68D4              // bit logical OR. Returns n3 as n1 ^ n2
1029+ 68D4                              New_Def XOR_OP, "XOR", is_code, is_normal
1029+ 68D4             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1029+ 68D4             >
1029+ 68D4             >                // dummy db directives used to calculate length of namec
1029+ 68D4 58 4F 52    >                db      "XOR"
1029+ 68D7             >len_NFA         defl    $ - temp_NFA
1029+ 68D7             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1029+ 68D4             >
1029+ 68D4 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1029+ 68D5 58 4F 52    >                db      "XOR"               // name string in 7-bit ascii, but
1029+ 68D8             >                org     $-1                 // alter last byte of Name just above to set
1029+ 68D7 D2          >                db      {b $} | END_BIT     // msb as name end
1029+ 68D8             >
1029+ 68D8 C2 68       >                dw      last_NFA            // Link to previous definition Name
1029+ 68DA             >XOR_OP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1029+ 68DA ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1029+ 68DA             >                else
1029+ 68DA DC 68       >                dw      $ + 2   ; ok        // is pointed by CFA
1029+ 68DC             >                endif           ; ok        // for other definitions it "points" the correct handler
1029+ 68DC             >                // Use of "; ok" to suppress "warning[fwdref]"
1029+ 68DC             >
1029+ 68DC             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1030+ 68DC D1                           pop     de
1031+ 68DD E1                           pop     hl
1032+ 68DE 7B                           ld      a, e
1033+ 68DF AD                           xor     l
1034+ 68E0 6F                           ld      l, a
1035+ 68E1 7A                           ld      a, d
1036+ 68E2 AC                           xor     h
1037+ 68E3 67                           ld      h, a
1038+ 68E4
1039+ 68E4                              psh1
1039+ 68E4 E5          >                push    hl
1039+ 68E5 DD E9       >                jp      (ix)
1040+ 68E7
1041+ 68E7              //  ______________________________________________________________________
1042+ 68E7              //
1043+ 68E7              // sp@      -- a
1044+ 68E7              // returns on top of stack the value of SP before execution
1045+ 68E7                              New_Def SPFETCH, "SP@", is_code, is_normal
1045+ 68E7             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1045+ 68E7             >
1045+ 68E7             >                // dummy db directives used to calculate length of namec
1045+ 68E7 53 50 40    >                db      "SP@"
1045+ 68EA             >len_NFA         defl    $ - temp_NFA
1045+ 68EA             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1045+ 68E7             >
1045+ 68E7 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1045+ 68E8 53 50 40    >                db      "SP@"               // name string in 7-bit ascii, but
1045+ 68EB             >                org     $-1                 // alter last byte of Name just above to set
1045+ 68EA C0          >                db      {b $} | END_BIT     // msb as name end
1045+ 68EB             >
1045+ 68EB D4 68       >                dw      last_NFA            // Link to previous definition Name
1045+ 68ED             >SPFETCH:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1045+ 68ED ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1045+ 68ED             >                else
1045+ 68ED EF 68       >                dw      $ + 2   ; ok        // is pointed by CFA
1045+ 68EF             >                endif           ; ok        // for other definitions it "points" the correct handler
1045+ 68EF             >                // Use of "; ok" to suppress "warning[fwdref]"
1045+ 68EF             >
1045+ 68EF             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1046+ 68EF
1047+ 68EF 21 00 00                     ld      hl, 0
1048+ 68F2 39                           add     hl, sp
1049+ 68F3
1050+ 68F3                              psh1
1050+ 68F3 E5          >                push    hl
1050+ 68F4 DD E9       >                jp      (ix)
1051+ 68F6
1052+ 68F6              //  ______________________________________________________________________
1053+ 68F6              //
1054+ 68F6              // sp!      a --
1055+ 68F6              // restore SP to the initial value passed
1056+ 68F6              // normally it is S0, i.e. the word at offset 6 and 7 of user variabiles area.
1057+ 68F6                              New_Def SPSTORE, "SP!", is_code, is_normal
1057+ 68F6             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1057+ 68F6             >
1057+ 68F6             >                // dummy db directives used to calculate length of namec
1057+ 68F6 53 50 21    >                db      "SP!"
1057+ 68F9             >len_NFA         defl    $ - temp_NFA
1057+ 68F9             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1057+ 68F6             >
1057+ 68F6 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1057+ 68F7 53 50 21    >                db      "SP!"               // name string in 7-bit ascii, but
1057+ 68FA             >                org     $-1                 // alter last byte of Name just above to set
1057+ 68F9 A1          >                db      {b $} | END_BIT     // msb as name end
1057+ 68FA             >
1057+ 68FA E7 68       >                dw      last_NFA            // Link to previous definition Name
1057+ 68FC             >SPSTORE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1057+ 68FC ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1057+ 68FC             >                else
1057+ 68FC FE 68       >                dw      $ + 2   ; ok        // is pointed by CFA
1057+ 68FE             >                endif           ; ok        // for other definitions it "points" the correct handler
1057+ 68FE             >                // Use of "; ok" to suppress "warning[fwdref]"
1057+ 68FE             >
1057+ 68FE             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1058+ 68FE E1                           pop     hl
1059+ 68FF F9                           ld      sp, hl
1060+ 6900
1061+ 6900                              next
1061+ 6900 DD E9       >                jp      (ix)
1062+ 6902
1063+ 6902              //  ______________________________________________________________________
1064+ 6902              //
1065+ 6902              // rp@      -- a
1066+ 6902              // returns on top of stack the value of Return-Pointer
1067+ 6902                              New_Def RPFETCH, "RP@", is_code, is_normal
1067+ 6902             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1067+ 6902             >
1067+ 6902             >                // dummy db directives used to calculate length of namec
1067+ 6902 52 50 40    >                db      "RP@"
1067+ 6905             >len_NFA         defl    $ - temp_NFA
1067+ 6905             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1067+ 6902             >
1067+ 6902 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1067+ 6903 52 50 40    >                db      "RP@"               // name string in 7-bit ascii, but
1067+ 6906             >                org     $-1                 // alter last byte of Name just above to set
1067+ 6905 C0          >                db      {b $} | END_BIT     // msb as name end
1067+ 6906             >
1067+ 6906 F6 68       >                dw      last_NFA            // Link to previous definition Name
1067+ 6908             >RPFETCH:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1067+ 6908 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1067+ 6908             >                else
1067+ 6908 0A 69       >                dw      $ + 2   ; ok        // is pointed by CFA
1067+ 690A             >                endif           ; ok        // for other definitions it "points" the correct handler
1067+ 690A             >                // Use of "; ok" to suppress "warning[fwdref]"
1067+ 690A             >
1067+ 690A             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1068+ 690A
1069+ 690A                              ldhlrp
1069+ 690A 2A 96 63    >                ld      hl,(RP_Pointer)
1070+ 690D
1071+ 690D                              psh1
1071+ 690D E5          >                push    hl
1071+ 690E DD E9       >                jp      (ix)
1072+ 6910
1073+ 6910              //  ______________________________________________________________________
1074+ 6910              //
1075+ 6910              // rp!      a --
1076+ 6910              // restore RP to the initial value passed
1077+ 6910              // normally it is R0 @, i.e. the word at offset 8 of user variabiles area.
1078+ 6910                              New_Def RPSTORE, "RP!", is_code, is_normal
1078+ 6910             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1078+ 6910             >
1078+ 6910             >                // dummy db directives used to calculate length of namec
1078+ 6910 52 50 21    >                db      "RP!"
1078+ 6913             >len_NFA         defl    $ - temp_NFA
1078+ 6913             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1078+ 6910             >
1078+ 6910 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1078+ 6911 52 50 21    >                db      "RP!"               // name string in 7-bit ascii, but
1078+ 6914             >                org     $-1                 // alter last byte of Name just above to set
1078+ 6913 A1          >                db      {b $} | END_BIT     // msb as name end
1078+ 6914             >
1078+ 6914 02 69       >                dw      last_NFA            // Link to previous definition Name
1078+ 6916             >RPSTORE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1078+ 6916 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1078+ 6916             >                else
1078+ 6916 18 69       >                dw      $ + 2   ; ok        // is pointed by CFA
1078+ 6918             >                endif           ; ok        // for other definitions it "points" the correct handler
1078+ 6918             >                // Use of "; ok" to suppress "warning[fwdref]"
1078+ 6918             >
1078+ 6918             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1079+ 6918 E1                           pop     hl
1080+ 6919                              ldrphl
1080+ 6919 22 96 63    >                ld      (RP_Pointer),hl
1081+ 691C
1082+ 691C                              next
1082+ 691C DD E9       >                jp      (ix)
1083+ 691E
1084+ 691E              //  ______________________________________________________________________
1085+ 691E              //
1086+ 691E              // exit      --
1087+ 691E              // exits back to the caller word
1088+ 691E                              New_Def EXIT, "EXIT", is_code, is_normal
1088+ 691E             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1088+ 691E             >
1088+ 691E             >                // dummy db directives used to calculate length of namec
1088+ 691E 45 58 49 54 >                db      "EXIT"
1088+ 6922             >len_NFA         defl    $ - temp_NFA
1088+ 6922             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1088+ 691E             >
1088+ 691E 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1088+ 691F 45 58 49 54 >                db      "EXIT"               // name string in 7-bit ascii, but
1088+ 6923             >                org     $-1                 // alter last byte of Name just above to set
1088+ 6922 D4          >                db      {b $} | END_BIT     // msb as name end
1088+ 6923             >
1088+ 6923 10 69       >                dw      last_NFA            // Link to previous definition Name
1088+ 6925             >EXIT:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1088+ 6925 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1088+ 6925             >                else
1088+ 6925 27 69       >                dw      $ + 2   ; ok        // is pointed by CFA
1088+ 6927             >                endif           ; ok        // for other definitions it "points" the correct handler
1088+ 6927             >                // Use of "; ok" to suppress "warning[fwdref]"
1088+ 6927             >
1088+ 6927             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1089+ 6927                              ldhlrp                      // Get Return Stack Pointer
1089+ 6927 2A 96 63    >                ld      hl,(RP_Pointer)
1090+ 692A 4E                           ld      c, (hl)             // pop Instruction Pointer
1091+ 692B 23                           inc     hl                  // from Return Stack
1092+ 692C 46                           ld      b, (hl)
1093+ 692D 23                           inc     hl
1094+ 692E                              ldrphl                      // Set Return Stack Pointer
1094+ 692E 22 96 63    >                ld      (RP_Pointer),hl
1095+ 6931                              next
1095+ 6931 DD E9       >                jp      (ix)
1096+ 6933
1097+ 6933              //  ______________________________________________________________________
1098+ 6933              //
1099+ 6933              // lastl      --
1100+ 6933              // exits back to the caller word
1101+ 6933              //              New_Def EXIT, "LASTL", is_code, is_normal
1102+ 6933              //              ldhlrp                      // Get Return Stack Pointer
1103+ 6933              //              ld      e, (hl)             // pop Instruction Pointer
1104+ 6933              //              inc     hl                  // from Return Stack
1105+ 6933              //              ld      d, (hl)
1106+ 6933              //              inc     hl
1107+ 6933              //              ld      (hl), e
1108+ 6933              //              inc     hl
1109+ 6933              //              ld      (hl), d
1110+ 6933              //              next
1111+ 6933
1112+ 6933              //  ______________________________________________________________________
1113+ 6933              //
1114+ 6933              // (leave)        --
1115+ 6933              // compiled by LEAVE
1116+ 6933              // this forces to exit from loop and jump past
1117+ 6933                              New_Def C_LEAVE, "(LEAVE)", is_code, is_normal
1117+ 6933             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1117+ 6933             >
1117+ 6933             >                // dummy db directives used to calculate length of namec
1117+ 6933 28 4C 45 41 >                db      "(LEAVE)"
1117+ 6937 56 45 29    >
1117+ 693A             >len_NFA         defl    $ - temp_NFA
1117+ 693A             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1117+ 6933             >
1117+ 6933 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1117+ 6934 28 4C 45 41 >                db      "(LEAVE)"               // name string in 7-bit ascii, but
1117+ 6938 56 45 29    >
1117+ 693B             >                org     $-1                 // alter last byte of Name just above to set
1117+ 693A A9          >                db      {b $} | END_BIT     // msb as name end
1117+ 693B             >
1117+ 693B 1E 69       >                dw      last_NFA            // Link to previous definition Name
1117+ 693D             >C_LEAVE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1117+ 693D ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1117+ 693D             >                else
1117+ 693D 3F 69       >                dw      $ + 2   ; ok        // is pointed by CFA
1117+ 693F             >                endif           ; ok        // for other definitions it "points" the correct handler
1117+ 693F             >                // Use of "; ok" to suppress "warning[fwdref]"
1117+ 693F             >
1117+ 693F             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1118+ 693F
1119+ 693F                              ldhlrp
1119+ 693F 2A 96 63    >                ld      hl,(RP_Pointer)
1120+ 6942 11 04 00                     ld      de, 4
1121+ 6945 19                           add     hl, de
1122+ 6946                              ldrphl
1122+ 6946 22 96 63    >                ld      (RP_Pointer),hl
1123+ 6949
1124+ 6949 C3 CE 63                     jp      Branch_Ptr       // perform branch consuming following cell
1125+ 694C                              next
1125+ 694C DD E9       >                jp      (ix)
1126+ 694E
1127+ 694E              //  ______________________________________________________________________
1128+ 694E              //
1129+ 694E              // >r      n --
1130+ 694E              // pop from calculator-stack and push into return-stack
1131+ 694E                              New_Def TO_R, ">R", is_code, is_normal
1131+ 694E             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1131+ 694E             >
1131+ 694E             >                // dummy db directives used to calculate length of namec
1131+ 694E 3E 52       >                db      ">R"
1131+ 6950             >len_NFA         defl    $ - temp_NFA
1131+ 6950             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1131+ 694E             >
1131+ 694E 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1131+ 694F 3E 52       >                db      ">R"               // name string in 7-bit ascii, but
1131+ 6951             >                org     $-1                 // alter last byte of Name just above to set
1131+ 6950 D2          >                db      {b $} | END_BIT     // msb as name end
1131+ 6951             >
1131+ 6951 33 69       >                dw      last_NFA            // Link to previous definition Name
1131+ 6953             >TO_R:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1131+ 6953 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1131+ 6953             >                else
1131+ 6953 55 69       >                dw      $ + 2   ; ok        // is pointed by CFA
1131+ 6955             >                endif           ; ok        // for other definitions it "points" the correct handler
1131+ 6955             >                // Use of "; ok" to suppress "warning[fwdref]"
1131+ 6955             >
1131+ 6955             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1132+ 6955 D1                           pop     de
1133+ 6956                              ldhlrp
1133+ 6956 2A 96 63    >                ld      hl,(RP_Pointer)
1134+ 6959 2B                           dec     hl
1135+ 695A 72                           ld      (hl), d             // store current TOS
1136+ 695B 2B                           dec     hl                  // to Return Stack
1137+ 695C 73                           ld      (hl), e
1138+ 695D                              ldrphl
1138+ 695D 22 96 63    >                ld      (RP_Pointer),hl
1139+ 6960
1140+ 6960                              next
1140+ 6960 DD E9       >                jp      (ix)
1141+ 6962
1142+ 6962              //  ______________________________________________________________________
1143+ 6962              //
1144+ 6962              // r>      -- n
1145+ 6962              // pop from return-stack and push into calculator-stack
1146+ 6962                              New_Def R_TO, "R>", is_code, is_normal
1146+ 6962             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1146+ 6962             >
1146+ 6962             >                // dummy db directives used to calculate length of namec
1146+ 6962 52 3E       >                db      "R>"
1146+ 6964             >len_NFA         defl    $ - temp_NFA
1146+ 6964             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1146+ 6962             >
1146+ 6962 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1146+ 6963 52 3E       >                db      "R>"               // name string in 7-bit ascii, but
1146+ 6965             >                org     $-1                 // alter last byte of Name just above to set
1146+ 6964 BE          >                db      {b $} | END_BIT     // msb as name end
1146+ 6965             >
1146+ 6965 4E 69       >                dw      last_NFA            // Link to previous definition Name
1146+ 6967             >R_TO:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1146+ 6967 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1146+ 6967             >                else
1146+ 6967 69 69       >                dw      $ + 2   ; ok        // is pointed by CFA
1146+ 6969             >                endif           ; ok        // for other definitions it "points" the correct handler
1146+ 6969             >                // Use of "; ok" to suppress "warning[fwdref]"
1146+ 6969             >
1146+ 6969             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1147+ 6969
1148+ 6969                              ldhlrp
1148+ 6969 2A 96 63    >                ld      hl,(RP_Pointer)
1149+ 696C 5E                           ld      e, (hl)             // retrieve from Return Stack
1150+ 696D 23                           inc     hl
1151+ 696E 56                           ld      d, (hl)
1152+ 696F 23                           inc     hl
1153+ 6970                              ldrphl
1153+ 6970 22 96 63    >                ld      (RP_Pointer),hl
1154+ 6973 D5                           push    de
1155+ 6974                              next
1155+ 6974 DD E9       >                jp      (ix)
1156+ 6976
1157+ 6976              //  ______________________________________________________________________
1158+ 6976              //
1159+ 6976              // r            -- n
1160+ 6976              // return on top of stack the value of top of return-stack
1161+ 6976              // Since this is the same as I, we alter R's CFA to jump there
1162+ 6976                              New_Def R_OP, "R@", I_Ptr, is_normal
1162+ 6976             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1162+ 6976             >
1162+ 6976             >                // dummy db directives used to calculate length of namec
1162+ 6976 52 40       >                db      "R@"
1162+ 6978             >len_NFA         defl    $ - temp_NFA
1162+ 6978             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1162+ 6976             >
1162+ 6976 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1162+ 6977 52 40       >                db      "R@"               // name string in 7-bit ascii, but
1162+ 6979             >                org     $-1                 // alter last byte of Name just above to set
1162+ 6978 C0          >                db      {b $} | END_BIT     // msb as name end
1162+ 6979             >
1162+ 6979 62 69       >                dw      last_NFA            // Link to previous definition Name
1162+ 697B             >R_OP:          if I_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1162+ 697B 78 64       >                dw      I_Ptr ; ok        // for primitive definitions  actual code
1162+ 697D             >                else
1162+ 697D ~           >                dw      $ + 2   ; ok        // is pointed by CFA
1162+ 697D             >                endif           ; ok        // for other definitions it "points" the correct handler
1162+ 697D             >                // Use of "; ok" to suppress "warning[fwdref]"
1162+ 697D             >
1162+ 697D             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1163+ 697D
1164+ 697D              //  ______________________________________________________________________
1165+ 697D              //
1166+ 697D              // r            -- n
1167+ 697D              // return on top of stack the value of top of return-stack
1168+ 697D              // Since this is the same as I, we alter R's CFA to jump there
1169+ 697D                              New_Def R_OLD, "R", I_Ptr, is_normal
1169+ 697D             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1169+ 697D             >
1169+ 697D             >                // dummy db directives used to calculate length of namec
1169+ 697D 52          >                db      "R"
1169+ 697E             >len_NFA         defl    $ - temp_NFA
1169+ 697E             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1169+ 697D             >
1169+ 697D 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1169+ 697E 52          >                db      "R"               // name string in 7-bit ascii, but
1169+ 697F             >                org     $-1                 // alter last byte of Name just above to set
1169+ 697E D2          >                db      {b $} | END_BIT     // msb as name end
1169+ 697F             >
1169+ 697F 76 69       >                dw      last_NFA            // Link to previous definition Name
1169+ 6981             >R_OLD:          if I_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1169+ 6981 78 64       >                dw      I_Ptr ; ok        // for primitive definitions  actual code
1169+ 6983             >                else
1169+ 6983 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
1169+ 6983             >                endif           ; ok        // for other definitions it "points" the correct handler
1169+ 6983             >                // Use of "; ok" to suppress "warning[fwdref]"
1169+ 6983             >
1169+ 6983             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1170+ 6983
1171+ 6983              //  ______________________________________________________________________
1172+ 6983              //
1173+ 6983              // 0=           n -- f
1174+ 6983              // true (non zero) if n is zero, false (0) elsewere
1175+ 6983                              New_Def ZEQUAL, "0=", is_code, is_normal
1175+ 6983             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1175+ 6983             >
1175+ 6983             >                // dummy db directives used to calculate length of namec
1175+ 6983 30 3D       >                db      "0="
1175+ 6985             >len_NFA         defl    $ - temp_NFA
1175+ 6985             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1175+ 6983             >
1175+ 6983 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1175+ 6984 30 3D       >                db      "0="               // name string in 7-bit ascii, but
1175+ 6986             >                org     $-1                 // alter last byte of Name just above to set
1175+ 6985 BD          >                db      {b $} | END_BIT     // msb as name end
1175+ 6986             >
1175+ 6986 7D 69       >                dw      last_NFA            // Link to previous definition Name
1175+ 6988             >ZEQUAL:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1175+ 6988 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1175+ 6988             >                else
1175+ 6988 8A 69       >                dw      $ + 2   ; ok        // is pointed by CFA
1175+ 698A             >                endif           ; ok        // for other definitions it "points" the correct handler
1175+ 698A             >                // Use of "; ok" to suppress "warning[fwdref]"
1175+ 698A             >
1175+ 698A             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1176+ 698A              Zero_Equal:
1177+ 698A E1                           pop     hl
1178+ 698B 7D                           ld      a, l
1179+ 698C B4                           or      h
1180+ 698D 21 00 00                     ld      hl, FALSE_FLAG
1181+ 6990 20 01                        jr      nz, ZEqual_Skip
1182+ 6992 2B                               dec     hl
1183+ 6993              ZEqual_Skip:
1184+ 6993                              psh1
1184+ 6993 E5          >                push    hl
1184+ 6994 DD E9       >                jp      (ix)
1185+ 6996
1186+ 6996              //  ______________________________________________________________________
1187+ 6996              //
1188+ 6996              // not         a1 -- a2
1189+ 6996              // increment by 2 top of stack
1190+ 6996                              New_Def NOT_OP, "NOT", Zero_Equal, is_normal
1190+ 6996             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1190+ 6996             >
1190+ 6996             >                // dummy db directives used to calculate length of namec
1190+ 6996 4E 4F 54    >                db      "NOT"
1190+ 6999             >len_NFA         defl    $ - temp_NFA
1190+ 6999             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1190+ 6996             >
1190+ 6996 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1190+ 6997 4E 4F 54    >                db      "NOT"               // name string in 7-bit ascii, but
1190+ 699A             >                org     $-1                 // alter last byte of Name just above to set
1190+ 6999 D4          >                db      {b $} | END_BIT     // msb as name end
1190+ 699A             >
1190+ 699A 83 69       >                dw      last_NFA            // Link to previous definition Name
1190+ 699C             >NOT_OP:          if Zero_Equal != 0 ; ok        // This is the start address of the direct jp(hl)
1190+ 699C 8A 69       >                dw      Zero_Equal ; ok        // for primitive definitions  actual code
1190+ 699E             >                else
1190+ 699E ~           >                dw      $ + 2   ; ok        // is pointed by CFA
1190+ 699E             >                endif           ; ok        // for other definitions it "points" the correct handler
1190+ 699E             >                // Use of "; ok" to suppress "warning[fwdref]"
1190+ 699E             >
1190+ 699E             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1191+ 699E
1192+ 699E              //  ______________________________________________________________________
1193+ 699E              //
1194+ 699E              // 0<           n -- f
1195+ 699E              // true (non zero) if n is less than zero, false (0) elsewere
1196+ 699E                              New_Def ZLESS, "0<", is_code, is_normal
1196+ 699E             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1196+ 699E             >
1196+ 699E             >                // dummy db directives used to calculate length of namec
1196+ 699E 30 3C       >                db      "0<"
1196+ 69A0             >len_NFA         defl    $ - temp_NFA
1196+ 69A0             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1196+ 699E             >
1196+ 699E 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1196+ 699F 30 3C       >                db      "0<"               // name string in 7-bit ascii, but
1196+ 69A1             >                org     $-1                 // alter last byte of Name just above to set
1196+ 69A0 BC          >                db      {b $} | END_BIT     // msb as name end
1196+ 69A1             >
1196+ 69A1 96 69       >                dw      last_NFA            // Link to previous definition Name
1196+ 69A3             >ZLESS:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1196+ 69A3 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1196+ 69A3             >                else
1196+ 69A3 A5 69       >                dw      $ + 2   ; ok        // is pointed by CFA
1196+ 69A5             >                endif           ; ok        // for other definitions it "points" the correct handler
1196+ 69A5             >                // Use of "; ok" to suppress "warning[fwdref]"
1196+ 69A5             >
1196+ 69A5             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1197+ 69A5 E1                           pop     hl
1198+ 69A6 29                           add     hl, hl
1199+ 69A7 21 00 00                     ld      hl, 0
1200+ 69AA 30 01                        jr      nc, ZLess_Skip
1201+ 69AC 2B                               dec     hl
1202+ 69AD              ZLess_Skip:
1203+ 69AD                              psh1
1203+ 69AD E5          >                push    hl
1203+ 69AE DD E9       >                jp      (ix)
1204+ 69B0
1205+ 69B0              //  ______________________________________________________________________
1206+ 69B0              //
1207+ 69B0              // 0>           n -- f
1208+ 69B0              // true (non zero) if n is less than zero, false (0) elsewere
1209+ 69B0                              New_Def ZGREATER, "0>", is_code, is_normal
1209+ 69B0             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1209+ 69B0             >
1209+ 69B0             >                // dummy db directives used to calculate length of namec
1209+ 69B0 30 3E       >                db      "0>"
1209+ 69B2             >len_NFA         defl    $ - temp_NFA
1209+ 69B2             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1209+ 69B0             >
1209+ 69B0 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1209+ 69B1 30 3E       >                db      "0>"               // name string in 7-bit ascii, but
1209+ 69B3             >                org     $-1                 // alter last byte of Name just above to set
1209+ 69B2 BE          >                db      {b $} | END_BIT     // msb as name end
1209+ 69B3             >
1209+ 69B3 9E 69       >                dw      last_NFA            // Link to previous definition Name
1209+ 69B5             >ZGREATER:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1209+ 69B5 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1209+ 69B5             >                else
1209+ 69B5 B7 69       >                dw      $ + 2   ; ok        // is pointed by CFA
1209+ 69B7             >                endif           ; ok        // for other definitions it "points" the correct handler
1209+ 69B7             >                // Use of "; ok" to suppress "warning[fwdref]"
1209+ 69B7             >
1209+ 69B7             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1210+ 69B7 E1                           pop     hl
1211+ 69B8 7D                           ld      a, l
1212+ 69B9 B4                           or      h
1213+ 69BA 29                           add     hl, hl
1214+ 69BB 21 00 00                     ld      hl, FALSE_FLAG
1215+ 69BE 38 04                        jr      c, ZGreater_Skip
1216+ 69C0 A7                               and     a
1217+ 69C1 28 01                            jr      z, ZGreater_Skip
1218+ 69C3 2B                                   dec     hl
1219+ 69C4              ZGreater_Skip:
1220+ 69C4                              psh1
1220+ 69C4 E5          >                push    hl
1220+ 69C5 DD E9       >                jp      (ix)
1221+ 69C7
1222+ 69C7              //  ______________________________________________________________________
1223+ 69C7              //
1224+ 69C7              // +            n1 n2 -- n3
1225+ 69C7              // returns the unsigned sum of two top values
1226+ 69C7                              New_Def PLUS, "+", is_code, is_normal
1226+ 69C7             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1226+ 69C7             >
1226+ 69C7             >                // dummy db directives used to calculate length of namec
1226+ 69C7 2B          >                db      "+"
1226+ 69C8             >len_NFA         defl    $ - temp_NFA
1226+ 69C8             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1226+ 69C7             >
1226+ 69C7 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1226+ 69C8 2B          >                db      "+"               // name string in 7-bit ascii, but
1226+ 69C9             >                org     $-1                 // alter last byte of Name just above to set
1226+ 69C8 AB          >                db      {b $} | END_BIT     // msb as name end
1226+ 69C9             >
1226+ 69C9 B0 69       >                dw      last_NFA            // Link to previous definition Name
1226+ 69CB             >PLUS:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1226+ 69CB ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1226+ 69CB             >                else
1226+ 69CB CD 69       >                dw      $ + 2   ; ok        // is pointed by CFA
1226+ 69CD             >                endif           ; ok        // for other definitions it "points" the correct handler
1226+ 69CD             >                // Use of "; ok" to suppress "warning[fwdref]"
1226+ 69CD             >
1226+ 69CD             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1227+ 69CD E1                           pop     hl
1228+ 69CE D1                           pop     de
1229+ 69CF 19                           add     hl, de
1230+ 69D0
1231+ 69D0                              psh1
1231+ 69D0 E5          >                push    hl
1231+ 69D1 DD E9       >                jp      (ix)
1232+ 69D3
1233+ 69D3
1234+ 69D3              //  ______________________________________________________________________
1235+ 69D3              //
1236+ 69D3              // d+           d1 d2 -- d3
1237+ 69D3              // returns the unsigned sum of two top double-numbers
1238+ 69D3              //      d2  d1
1239+ 69D3              //      h l h l
1240+ 69D3              // SP   LHEDLHED
1241+ 69D3              // SP  +01234567
1242+ 69D3                              New_Def DPLUS, "D+", is_code, is_normal
1242+ 69D3             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1242+ 69D3             >
1242+ 69D3             >                // dummy db directives used to calculate length of namec
1242+ 69D3 44 2B       >                db      "D+"
1242+ 69D5             >len_NFA         defl    $ - temp_NFA
1242+ 69D5             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1242+ 69D3             >
1242+ 69D3 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1242+ 69D4 44 2B       >                db      "D+"               // name string in 7-bit ascii, but
1242+ 69D6             >                org     $-1                 // alter last byte of Name just above to set
1242+ 69D5 AB          >                db      {b $} | END_BIT     // msb as name end
1242+ 69D6             >
1242+ 69D6 C7 69       >                dw      last_NFA            // Link to previous definition Name
1242+ 69D8             >DPLUS:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1242+ 69D8 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1242+ 69D8             >                else
1242+ 69D8 DA 69       >                dw      $ + 2   ; ok        // is pointed by CFA
1242+ 69DA             >                endif           ; ok        // for other definitions it "points" the correct handler
1242+ 69DA             >                // Use of "; ok" to suppress "warning[fwdref]"
1242+ 69DA             >
1242+ 69DA             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1243+ 69DA
1244+ 69DA 21 07 00                     ld      hl, 7
1245+ 69DD 39                           add     hl, sp
1246+ 69DE 56                           ld      d, (hl)
1247+ 69DF 70                           ld      (hl), b             // Save IP
1248+ 69E0 2B                           dec     hl
1249+ 69E1 5E                           ld      e, (hl)
1250+ 69E2 71                           ld      (hl), c             // de := d1.L
1251+ 69E3 C1                           pop     bc                  // bc := d2.H
1252+ 69E4 E1                           pop     hl                  // hl := d2.L
1253+ 69E5 19                           add     hl, de              // hl := d2.L + d1.L
1254+ 69E6 EB                           ex      de, hl              // de := lower
1255+ 69E7 E1                           pop     hl                  // d1.H
1256+ 69E8 ED 4A                        adc     hl, bc              // d1.H + d2.H
1257+ 69EA C1                           pop     bc                  // Restore IP
1258+ 69EB
1259+ 69EB
1260+ 69EB                              psh2
1260+ 69EB D5          >                push    de
1260+ 69EC E5          >                push    hl
1260+ 69ED DD E9       >                jp      (ix)
1261+ 69EF
1262+ 69EF              //  ______________________________________________________________________
1263+ 69EF              //
1264+ 69EF              // 1+           n1 -- n2
1265+ 69EF              // increment by 1 top of stack
1266+ 69EF                              New_Def ONE_PLUS, "1+", is_code, is_normal
1266+ 69EF             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1266+ 69EF             >
1266+ 69EF             >                // dummy db directives used to calculate length of namec
1266+ 69EF 31 2B       >                db      "1+"
1266+ 69F1             >len_NFA         defl    $ - temp_NFA
1266+ 69F1             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1266+ 69EF             >
1266+ 69EF 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1266+ 69F0 31 2B       >                db      "1+"               // name string in 7-bit ascii, but
1266+ 69F2             >                org     $-1                 // alter last byte of Name just above to set
1266+ 69F1 AB          >                db      {b $} | END_BIT     // msb as name end
1266+ 69F2             >
1266+ 69F2 D3 69       >                dw      last_NFA            // Link to previous definition Name
1266+ 69F4             >ONE_PLUS:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1266+ 69F4 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1266+ 69F4             >                else
1266+ 69F4 F6 69       >                dw      $ + 2   ; ok        // is pointed by CFA
1266+ 69F6             >                endif           ; ok        // for other definitions it "points" the correct handler
1266+ 69F6             >                // Use of "; ok" to suppress "warning[fwdref]"
1266+ 69F6             >
1266+ 69F6             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1267+ 69F6 E1                           pop     hl
1268+ 69F7 23                           inc     hl
1269+ 69F8
1270+ 69F8                              psh1
1270+ 69F8 E5          >                push    hl
1270+ 69F9 DD E9       >                jp      (ix)
1271+ 69FB
1272+ 69FB              //  ______________________________________________________________________
1273+ 69FB              //
1274+ 69FB              // 1-           n1 -- n2
1275+ 69FB              // decrement by 1 top of stack
1276+ 69FB                              New_Def ONE_SUBTRACT, "1-", is_code, is_normal
1276+ 69FB             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1276+ 69FB             >
1276+ 69FB             >                // dummy db directives used to calculate length of namec
1276+ 69FB 31 2D       >                db      "1-"
1276+ 69FD             >len_NFA         defl    $ - temp_NFA
1276+ 69FD             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1276+ 69FB             >
1276+ 69FB 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1276+ 69FC 31 2D       >                db      "1-"               // name string in 7-bit ascii, but
1276+ 69FE             >                org     $-1                 // alter last byte of Name just above to set
1276+ 69FD AD          >                db      {b $} | END_BIT     // msb as name end
1276+ 69FE             >
1276+ 69FE EF 69       >                dw      last_NFA            // Link to previous definition Name
1276+ 6A00             >ONE_SUBTRACT:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1276+ 6A00 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1276+ 6A00             >                else
1276+ 6A00 02 6A       >                dw      $ + 2   ; ok        // is pointed by CFA
1276+ 6A02             >                endif           ; ok        // for other definitions it "points" the correct handler
1276+ 6A02             >                // Use of "; ok" to suppress "warning[fwdref]"
1276+ 6A02             >
1276+ 6A02             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1277+ 6A02 E1                           pop     hl
1278+ 6A03 2B                           dec     hl
1279+ 6A04
1280+ 6A04                              psh1
1280+ 6A04 E5          >                push    hl
1280+ 6A05 DD E9       >                jp      (ix)
1281+ 6A07
1282+ 6A07              //  ______________________________________________________________________
1283+ 6A07              //
1284+ 6A07              // 2+           n1 -- n2
1285+ 6A07              // increment by 2 top of stack
1286+ 6A07                              New_Def TWO_PLUS, "2+", is_code, is_normal
1286+ 6A07             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1286+ 6A07             >
1286+ 6A07             >                // dummy db directives used to calculate length of namec
1286+ 6A07 32 2B       >                db      "2+"
1286+ 6A09             >len_NFA         defl    $ - temp_NFA
1286+ 6A09             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1286+ 6A07             >
1286+ 6A07 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1286+ 6A08 32 2B       >                db      "2+"               // name string in 7-bit ascii, but
1286+ 6A0A             >                org     $-1                 // alter last byte of Name just above to set
1286+ 6A09 AB          >                db      {b $} | END_BIT     // msb as name end
1286+ 6A0A             >
1286+ 6A0A FB 69       >                dw      last_NFA            // Link to previous definition Name
1286+ 6A0C             >TWO_PLUS:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1286+ 6A0C ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1286+ 6A0C             >                else
1286+ 6A0C 0E 6A       >                dw      $ + 2   ; ok        // is pointed by CFA
1286+ 6A0E             >                endif           ; ok        // for other definitions it "points" the correct handler
1286+ 6A0E             >                // Use of "; ok" to suppress "warning[fwdref]"
1286+ 6A0E             >
1286+ 6A0E             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1287+ 6A0E              Two_Plus:
1288+ 6A0E E1                           pop     hl
1289+ 6A0F 23                           inc     hl
1290+ 6A10 23                           inc     hl
1291+ 6A11
1292+ 6A11                              psh1
1292+ 6A11 E5          >                push    hl
1292+ 6A12 DD E9       >                jp      (ix)
1293+ 6A14
1294+ 6A14              //  ______________________________________________________________________
1295+ 6A14              //
1296+ 6A14              // cell+        a1 -- a2
1297+ 6A14              // increment by 2 top of stack
1298+ 6A14                              New_Def CELL_PLUS, "CELL+", Two_Plus, is_normal
1298+ 6A14             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1298+ 6A14             >
1298+ 6A14             >                // dummy db directives used to calculate length of namec
1298+ 6A14 43 45 4C 4C >                db      "CELL+"
1298+ 6A18 2B          >
1298+ 6A19             >len_NFA         defl    $ - temp_NFA
1298+ 6A19             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1298+ 6A14             >
1298+ 6A14 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1298+ 6A15 43 45 4C 4C >                db      "CELL+"               // name string in 7-bit ascii, but
1298+ 6A19 2B          >
1298+ 6A1A             >                org     $-1                 // alter last byte of Name just above to set
1298+ 6A19 AB          >                db      {b $} | END_BIT     // msb as name end
1298+ 6A1A             >
1298+ 6A1A 07 6A       >                dw      last_NFA            // Link to previous definition Name
1298+ 6A1C             >CELL_PLUS:          if Two_Plus != 0 ; ok        // This is the start address of the direct jp(hl)
1298+ 6A1C 0E 6A       >                dw      Two_Plus ; ok        // for primitive definitions  actual code
1298+ 6A1E             >                else
1298+ 6A1E ~           >                dw      $ + 2   ; ok        // is pointed by CFA
1298+ 6A1E             >                endif           ; ok        // for other definitions it "points" the correct handler
1298+ 6A1E             >                // Use of "; ok" to suppress "warning[fwdref]"
1298+ 6A1E             >
1298+ 6A1E             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1299+ 6A1E
1300+ 6A1E              //  ______________________________________________________________________
1301+ 6A1E              //
1302+ 6A1E              // align        a1 -- a2
1303+ 6A1E              // align memory : not used
1304+ 6A1E              //              New_Def ALIGN_ADDR, "ALIGN", is_code, is_normal
1305+ 6A1E              //            next
1306+ 6A1E
1307+ 6A1E              //  ______________________________________________________________________
1308+ 6A1E              //
1309+ 6A1E              // cell-        a1 -- a2
1310+ 6A1E              // decrement by 2 top of stack
1311+ 6A1E                              New_Def CELL_MINUS, "CELL-", is_code, is_normal
1311+ 6A1E             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1311+ 6A1E             >
1311+ 6A1E             >                // dummy db directives used to calculate length of namec
1311+ 6A1E 43 45 4C 4C >                db      "CELL-"
1311+ 6A22 2D          >
1311+ 6A23             >len_NFA         defl    $ - temp_NFA
1311+ 6A23             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1311+ 6A1E             >
1311+ 6A1E 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1311+ 6A1F 43 45 4C 4C >                db      "CELL-"               // name string in 7-bit ascii, but
1311+ 6A23 2D          >
1311+ 6A24             >                org     $-1                 // alter last byte of Name just above to set
1311+ 6A23 AD          >                db      {b $} | END_BIT     // msb as name end
1311+ 6A24             >
1311+ 6A24 14 6A       >                dw      last_NFA            // Link to previous definition Name
1311+ 6A26             >CELL_MINUS:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1311+ 6A26 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1311+ 6A26             >                else
1311+ 6A26 28 6A       >                dw      $ + 2   ; ok        // is pointed by CFA
1311+ 6A28             >                endif           ; ok        // for other definitions it "points" the correct handler
1311+ 6A28             >                // Use of "; ok" to suppress "warning[fwdref]"
1311+ 6A28             >
1311+ 6A28             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1312+ 6A28              CellMinus:
1313+ 6A28 E1                           pop     hl
1314+ 6A29 2B                           dec     hl
1315+ 6A2A 2B                           dec     hl
1316+ 6A2B
1317+ 6A2B                              psh1
1317+ 6A2B E5          >                push    hl
1317+ 6A2C DD E9       >                jp      (ix)
1318+ 6A2E
1319+ 6A2E              //  ______________________________________________________________________
1320+ 6A2E              //
1321+ 6A2E              // 2-           a1 -- a2
1322+ 6A2E              // decrement by 2 top of stack
1323+ 6A2E                              New_Def TWO_MINUS, "2-", CellMinus, is_normal
1323+ 6A2E             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1323+ 6A2E             >
1323+ 6A2E             >                // dummy db directives used to calculate length of namec
1323+ 6A2E 32 2D       >                db      "2-"
1323+ 6A30             >len_NFA         defl    $ - temp_NFA
1323+ 6A30             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1323+ 6A2E             >
1323+ 6A2E 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1323+ 6A2F 32 2D       >                db      "2-"               // name string in 7-bit ascii, but
1323+ 6A31             >                org     $-1                 // alter last byte of Name just above to set
1323+ 6A30 AD          >                db      {b $} | END_BIT     // msb as name end
1323+ 6A31             >
1323+ 6A31 1E 6A       >                dw      last_NFA            // Link to previous definition Name
1323+ 6A33             >TWO_MINUS:          if CellMinus != 0 ; ok        // This is the start address of the direct jp(hl)
1323+ 6A33 28 6A       >                dw      CellMinus ; ok        // for primitive definitions  actual code
1323+ 6A35             >                else
1323+ 6A35 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
1323+ 6A35             >                endif           ; ok        // for other definitions it "points" the correct handler
1323+ 6A35             >                // Use of "; ok" to suppress "warning[fwdref]"
1323+ 6A35             >
1323+ 6A35             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1324+ 6A35
1325+ 6A35              //  ______________________________________________________________________
1326+ 6A35              //
1327+ 6A35              // negate        n1 -- n2
1328+ 6A35              // change the sign of number
1329+ 6A35                              New_Def MINUS, "NEGATE", is_code, is_normal
1329+ 6A35             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1329+ 6A35             >
1329+ 6A35             >                // dummy db directives used to calculate length of namec
1329+ 6A35 4E 45 47 41 >                db      "NEGATE"
1329+ 6A39 54 45       >
1329+ 6A3B             >len_NFA         defl    $ - temp_NFA
1329+ 6A3B             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1329+ 6A35             >
1329+ 6A35 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1329+ 6A36 4E 45 47 41 >                db      "NEGATE"               // name string in 7-bit ascii, but
1329+ 6A3A 54 45       >
1329+ 6A3C             >                org     $-1                 // alter last byte of Name just above to set
1329+ 6A3B C5          >                db      {b $} | END_BIT     // msb as name end
1329+ 6A3C             >
1329+ 6A3C 2E 6A       >                dw      last_NFA            // Link to previous definition Name
1329+ 6A3E             >MINUS:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1329+ 6A3E ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1329+ 6A3E             >                else
1329+ 6A3E 40 6A       >                dw      $ + 2   ; ok        // is pointed by CFA
1329+ 6A40             >                endif           ; ok        // for other definitions it "points" the correct handler
1329+ 6A40             >                // Use of "; ok" to suppress "warning[fwdref]"
1329+ 6A40             >
1329+ 6A40             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1330+ 6A40 21 00 00                     ld      hl, 0               // subtract from 0
1331+ 6A43 D1                           pop     de
1332+ 6A44 B7                           or      a
1333+ 6A45 ED 52                        sbc     hl, de
1334+ 6A47
1335+ 6A47                              psh1
1335+ 6A47 E5          >                push    hl
1335+ 6A48 DD E9       >                jp      (ix)
1336+ 6A4A
1337+ 6A4A              //  ______________________________________________________________________
1338+ 6A4A              //
1339+ 6A4A              // dminus       d1 -- d2
1340+ 6A4A              // change the sign of a double number
1341+ 6A4A                              New_Def DMINUS, "DNEGATE", is_code, is_normal
1341+ 6A4A             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1341+ 6A4A             >
1341+ 6A4A             >                // dummy db directives used to calculate length of namec
1341+ 6A4A 44 4E 45 47 >                db      "DNEGATE"
1341+ 6A4E 41 54 45    >
1341+ 6A51             >len_NFA         defl    $ - temp_NFA
1341+ 6A51             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1341+ 6A4A             >
1341+ 6A4A 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1341+ 6A4B 44 4E 45 47 >                db      "DNEGATE"               // name string in 7-bit ascii, but
1341+ 6A4F 41 54 45    >
1341+ 6A52             >                org     $-1                 // alter last byte of Name just above to set
1341+ 6A51 C5          >                db      {b $} | END_BIT     // msb as name end
1341+ 6A52             >
1341+ 6A52 35 6A       >                dw      last_NFA            // Link to previous definition Name
1341+ 6A54             >DMINUS:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1341+ 6A54 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1341+ 6A54             >                else
1341+ 6A54 56 6A       >                dw      $ + 2   ; ok        // is pointed by CFA
1341+ 6A56             >                endif           ; ok        // for other definitions it "points" the correct handler
1341+ 6A56             >                // Use of "; ok" to suppress "warning[fwdref]"
1341+ 6A56             >
1341+ 6A56             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1342+ 6A56 E1                           pop     hl                  // d1.H
1343+ 6A57 D1                           pop     de                  // d1.L
1344+ 6A58 C5                           push    bc                  // Save Instruction Pointer
1345+ 6A59 44                           ld      b, h
1346+ 6A5A 4D                           ld      c, l                // bc := d1.L
1347+ 6A5B AF                           xor     a
1348+ 6A5C 67                           ld      h, a
1349+ 6A5D 6F                           ld      l, a
1350+ 6A5E ED 52                        sbc     hl, de              // subtact from zero
1351+ 6A60 D1                           pop     de                  // Retrieve Instruction Pointer
1352+ 6A61 E5                           push    hl                  // > d2-L
1353+ 6A62 67                           ld      h, a
1354+ 6A63 6F                           ld      l, a
1355+ 6A64 ED 42                        sbc     hl, bc              // subtract from zero with carry
1356+ 6A66                                                          // > d2-H
1357+ 6A66 42                           ld      b, d
1358+ 6A67 4B                           ld      c, e
1359+ 6A68                              psh1
1359+ 6A68 E5          >                push    hl
1359+ 6A69 DD E9       >                jp      (ix)
1360+ 6A6B
1361+ 6A6B              //  ______________________________________________________________________
1362+ 6A6B              //
1363+ 6A6B              // over         n1 n2 -- n1 n2 n1
1364+ 6A6B              // copy the second value of stack and put it on top.
1365+ 6A6B                              New_Def OVER, "OVER", is_code, is_normal
1365+ 6A6B             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1365+ 6A6B             >
1365+ 6A6B             >                // dummy db directives used to calculate length of namec
1365+ 6A6B 4F 56 45 52 >                db      "OVER"
1365+ 6A6F             >len_NFA         defl    $ - temp_NFA
1365+ 6A6F             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1365+ 6A6B             >
1365+ 6A6B 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1365+ 6A6C 4F 56 45 52 >                db      "OVER"               // name string in 7-bit ascii, but
1365+ 6A70             >                org     $-1                 // alter last byte of Name just above to set
1365+ 6A6F D2          >                db      {b $} | END_BIT     // msb as name end
1365+ 6A70             >
1365+ 6A70 4A 6A       >                dw      last_NFA            // Link to previous definition Name
1365+ 6A72             >OVER:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1365+ 6A72 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1365+ 6A72             >                else
1365+ 6A72 74 6A       >                dw      $ + 2   ; ok        // is pointed by CFA
1365+ 6A74             >                endif           ; ok        // for other definitions it "points" the correct handler
1365+ 6A74             >                // Use of "; ok" to suppress "warning[fwdref]"
1365+ 6A74             >
1365+ 6A74             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1366+ 6A74 D1                           pop     de                  //   n2
1367+ 6A75 E1                           pop     hl                  // < n1
1368+ 6A76 E5                           push    hl                  // > n1
1369+ 6A77 D5                           push    de                  // > n2
1370+ 6A78 E5                           push    hl                  // > n1
1371+ 6A79                              next
1371+ 6A79 DD E9       >                jp      (ix)
1372+ 6A7B
1373+ 6A7B              //  ______________________________________________________________________
1374+ 6A7B              //
1375+ 6A7B              // drop         n1 --
1376+ 6A7B              // drops the top of stack
1377+ 6A7B                              New_Def DROP, "DROP", is_code, is_normal
1377+ 6A7B             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1377+ 6A7B             >
1377+ 6A7B             >                // dummy db directives used to calculate length of namec
1377+ 6A7B 44 52 4F 50 >                db      "DROP"
1377+ 6A7F             >len_NFA         defl    $ - temp_NFA
1377+ 6A7F             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1377+ 6A7B             >
1377+ 6A7B 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1377+ 6A7C 44 52 4F 50 >                db      "DROP"               // name string in 7-bit ascii, but
1377+ 6A80             >                org     $-1                 // alter last byte of Name just above to set
1377+ 6A7F D0          >                db      {b $} | END_BIT     // msb as name end
1377+ 6A80             >
1377+ 6A80 6B 6A       >                dw      last_NFA            // Link to previous definition Name
1377+ 6A82             >DROP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1377+ 6A82 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1377+ 6A82             >                else
1377+ 6A82 84 6A       >                dw      $ + 2   ; ok        // is pointed by CFA
1377+ 6A84             >                endif           ; ok        // for other definitions it "points" the correct handler
1377+ 6A84             >                // Use of "; ok" to suppress "warning[fwdref]"
1377+ 6A84             >
1377+ 6A84             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1378+ 6A84 E1                           pop     hl                  // < n1 and discard previous TOS
1379+ 6A85                              next
1379+ 6A85 DD E9       >                jp      (ix)
1380+ 6A87
1381+ 6A87              //  ______________________________________________________________________
1382+ 6A87              //
1383+ 6A87              // nip          n1 n2 -- n2
1384+ 6A87              // drops the second elemento on the stack
1385+ 6A87                              New_Def NIP, "NIP", is_code, is_normal
1385+ 6A87             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1385+ 6A87             >
1385+ 6A87             >                // dummy db directives used to calculate length of namec
1385+ 6A87 4E 49 50    >                db      "NIP"
1385+ 6A8A             >len_NFA         defl    $ - temp_NFA
1385+ 6A8A             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1385+ 6A87             >
1385+ 6A87 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1385+ 6A88 4E 49 50    >                db      "NIP"               // name string in 7-bit ascii, but
1385+ 6A8B             >                org     $-1                 // alter last byte of Name just above to set
1385+ 6A8A D0          >                db      {b $} | END_BIT     // msb as name end
1385+ 6A8B             >
1385+ 6A8B 7B 6A       >                dw      last_NFA            // Link to previous definition Name
1385+ 6A8D             >NIP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1385+ 6A8D ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1385+ 6A8D             >                else
1385+ 6A8D 8F 6A       >                dw      $ + 2   ; ok        // is pointed by CFA
1385+ 6A8F             >                endif           ; ok        // for other definitions it "points" the correct handler
1385+ 6A8F             >                // Use of "; ok" to suppress "warning[fwdref]"
1385+ 6A8F             >
1385+ 6A8F             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1386+ 6A8F
1387+ 6A8F E1                           pop     hl                  // < n1 discarded
1388+ 6A90 E3                           ex      (sp), hl
1389+ 6A91                              next
1389+ 6A91 DD E9       >                jp      (ix)
1390+ 6A93
1391+ 6A93              //  ______________________________________________________________________
1392+ 6A93              //
1393+ 6A93              // tuck         n1 n2 -- n2 n1 n2
1394+ 6A93              // copy the top element after the second.
1395+ 6A93                              New_Def TUCK, "TUCK", is_code, is_normal
1395+ 6A93             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1395+ 6A93             >
1395+ 6A93             >                // dummy db directives used to calculate length of namec
1395+ 6A93 54 55 43 4B >                db      "TUCK"
1395+ 6A97             >len_NFA         defl    $ - temp_NFA
1395+ 6A97             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1395+ 6A93             >
1395+ 6A93 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1395+ 6A94 54 55 43 4B >                db      "TUCK"               // name string in 7-bit ascii, but
1395+ 6A98             >                org     $-1                 // alter last byte of Name just above to set
1395+ 6A97 CB          >                db      {b $} | END_BIT     // msb as name end
1395+ 6A98             >
1395+ 6A98 87 6A       >                dw      last_NFA            // Link to previous definition Name
1395+ 6A9A             >TUCK:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1395+ 6A9A ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1395+ 6A9A             >                else
1395+ 6A9A 9C 6A       >                dw      $ + 2   ; ok        // is pointed by CFA
1395+ 6A9C             >                endif           ; ok        // for other definitions it "points" the correct handler
1395+ 6A9C             >                // Use of "; ok" to suppress "warning[fwdref]"
1395+ 6A9C             >
1395+ 6A9C             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1396+ 6A9C E1                           pop     hl
1397+ 6A9D D1                           pop     de                  // < n1
1398+ 6A9E E5                           push    hl                  // > n2  and TOS
1399+ 6A9F D5                           push    de                  // > n1
1400+ 6AA0 E5                           push    hl
1401+ 6AA1                              next
1401+ 6AA1 DD E9       >                jp      (ix)
1402+ 6AA3
1403+ 6AA3              //  ______________________________________________________________________
1404+ 6AA3              //
1405+ 6AA3              // swap         n1 n2 -- n2 n1
1406+ 6AA3              // swaps the two values on top of stack
1407+ 6AA3                              New_Def SWAP, "SWAP", is_code, is_normal
1407+ 6AA3             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1407+ 6AA3             >
1407+ 6AA3             >                // dummy db directives used to calculate length of namec
1407+ 6AA3 53 57 41 50 >                db      "SWAP"
1407+ 6AA7             >len_NFA         defl    $ - temp_NFA
1407+ 6AA7             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1407+ 6AA3             >
1407+ 6AA3 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1407+ 6AA4 53 57 41 50 >                db      "SWAP"               // name string in 7-bit ascii, but
1407+ 6AA8             >                org     $-1                 // alter last byte of Name just above to set
1407+ 6AA7 D0          >                db      {b $} | END_BIT     // msb as name end
1407+ 6AA8             >
1407+ 6AA8 93 6A       >                dw      last_NFA            // Link to previous definition Name
1407+ 6AAA             >SWAP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1407+ 6AAA ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1407+ 6AAA             >                else
1407+ 6AAA AC 6A       >                dw      $ + 2   ; ok        // is pointed by CFA
1407+ 6AAC             >                endif           ; ok        // for other definitions it "points" the correct handler
1407+ 6AAC             >                // Use of "; ok" to suppress "warning[fwdref]"
1407+ 6AAC             >
1407+ 6AAC             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1408+ 6AAC E1                           pop     hl                  // < n1
1409+ 6AAD E3                           ex      (sp),hl             // > n2
1410+ 6AAE E5                           push    hl                  // copy n1 to TOS
1411+ 6AAF                              next
1411+ 6AAF DD E9       >                jp      (ix)
1412+ 6AB1
1413+ 6AB1              //  ______________________________________________________________________
1414+ 6AB1              //
1415+ 6AB1              // dup         n -- n n
1416+ 6AB1              // duplicates the top value of stack
1417+ 6AB1                              New_Def DUP, "DUP", is_code, is_normal
1417+ 6AB1             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1417+ 6AB1             >
1417+ 6AB1             >                // dummy db directives used to calculate length of namec
1417+ 6AB1 44 55 50    >                db      "DUP"
1417+ 6AB4             >len_NFA         defl    $ - temp_NFA
1417+ 6AB4             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1417+ 6AB1             >
1417+ 6AB1 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1417+ 6AB2 44 55 50    >                db      "DUP"               // name string in 7-bit ascii, but
1417+ 6AB5             >                org     $-1                 // alter last byte of Name just above to set
1417+ 6AB4 D0          >                db      {b $} | END_BIT     // msb as name end
1417+ 6AB5             >
1417+ 6AB5 A3 6A       >                dw      last_NFA            // Link to previous definition Name
1417+ 6AB7             >DUP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1417+ 6AB7 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1417+ 6AB7             >                else
1417+ 6AB7 B9 6A       >                dw      $ + 2   ; ok        // is pointed by CFA
1417+ 6AB9             >                endif           ; ok        // for other definitions it "points" the correct handler
1417+ 6AB9             >                // Use of "; ok" to suppress "warning[fwdref]"
1417+ 6AB9             >
1417+ 6AB9             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1418+ 6AB9 E1                           pop     hl
1419+ 6ABA E5                           push    hl                  // > n duplicate TOS
1420+ 6ABB E5                           push    hl
1421+ 6ABC                              next
1421+ 6ABC DD E9       >                jp      (ix)
1422+ 6ABE
1423+ 6ABE              //  ______________________________________________________________________
1424+ 6ABE              //
1425+ 6ABE              // rot         n1 n2 n3 -- n2 n3 n1
1426+ 6ABE              // Rotates the 3 top values of stack by picking the 3rd in access-order
1427+ 6ABE              // and putting it on top. The other two are shifted down one place.
1428+ 6ABE                              New_Def ROT, "ROT", is_code, is_normal
1428+ 6ABE             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1428+ 6ABE             >
1428+ 6ABE             >                // dummy db directives used to calculate length of namec
1428+ 6ABE 52 4F 54    >                db      "ROT"
1428+ 6AC1             >len_NFA         defl    $ - temp_NFA
1428+ 6AC1             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1428+ 6ABE             >
1428+ 6ABE 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1428+ 6ABF 52 4F 54    >                db      "ROT"               // name string in 7-bit ascii, but
1428+ 6AC2             >                org     $-1                 // alter last byte of Name just above to set
1428+ 6AC1 D4          >                db      {b $} | END_BIT     // msb as name end
1428+ 6AC2             >
1428+ 6AC2 B1 6A       >                dw      last_NFA            // Link to previous definition Name
1428+ 6AC4             >ROT:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1428+ 6AC4 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1428+ 6AC4             >                else
1428+ 6AC4 C6 6A       >                dw      $ + 2   ; ok        // is pointed by CFA
1428+ 6AC6             >                endif           ; ok        // for other definitions it "points" the correct handler
1428+ 6AC6             >                // Use of "; ok" to suppress "warning[fwdref]"
1428+ 6AC6             >
1428+ 6AC6             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1429+ 6AC6 D1                           pop     de                  // < n3
1430+ 6AC7 E1                           pop     hl                  // < n2
1431+ 6AC8 E3                           ex      (sp),hl             // > n2 < n1
1432+ 6AC9 D5                           push    de                  // > n3
1433+ 6ACA E5                           push    hl                  // copy n1 to TOS
1434+ 6ACB                              next
1434+ 6ACB DD E9       >                jp      (ix)
1435+ 6ACD
1436+ 6ACD              //  ______________________________________________________________________
1437+ 6ACD              //
1438+ 6ACD              // -rot         n1 n2 n3 -- n3 n1 n2
1439+ 6ACD              // Rotates the 3 top values of stack by picking the 1st in access-order
1440+ 6ACD              // and putting back to 3rd place. The other two are shifted down one place.
1441+ 6ACD                              New_Def DASH_ROT, "-ROT", is_code, is_normal
1441+ 6ACD             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1441+ 6ACD             >
1441+ 6ACD             >                // dummy db directives used to calculate length of namec
1441+ 6ACD 2D 52 4F 54 >                db      "-ROT"
1441+ 6AD1             >len_NFA         defl    $ - temp_NFA
1441+ 6AD1             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1441+ 6ACD             >
1441+ 6ACD 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1441+ 6ACE 2D 52 4F 54 >                db      "-ROT"               // name string in 7-bit ascii, but
1441+ 6AD2             >                org     $-1                 // alter last byte of Name just above to set
1441+ 6AD1 D4          >                db      {b $} | END_BIT     // msb as name end
1441+ 6AD2             >
1441+ 6AD2 BE 6A       >                dw      last_NFA            // Link to previous definition Name
1441+ 6AD4             >DASH_ROT:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1441+ 6AD4 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1441+ 6AD4             >                else
1441+ 6AD4 D6 6A       >                dw      $ + 2   ; ok        // is pointed by CFA
1441+ 6AD6             >                endif           ; ok        // for other definitions it "points" the correct handler
1441+ 6AD6             >                // Use of "; ok" to suppress "warning[fwdref]"
1441+ 6AD6             >
1441+ 6AD6             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1442+ 6AD6 E1                           pop     hl                  // < n3
1443+ 6AD7 D1                           pop     de                  // < n2
1444+ 6AD8 E3                           ex      (sp),hl             // > n3 < n1
1445+ 6AD9 E5                           push    hl                  // > n1
1446+ 6ADA D5                           push    de                  // copy n3 to TOS
1447+ 6ADB                              next
1447+ 6ADB DD E9       >                jp      (ix)
1448+ 6ADD
1449+ 6ADD              //  ______________________________________________________________________
1450+ 6ADD              //
1451+ 6ADD              // pick        n1 -- nx
1452+ 6ADD              // picks the nth element from TOS
1453+ 6ADD                              New_Def PICK, "PICK", is_code, is_normal
1453+ 6ADD             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1453+ 6ADD             >
1453+ 6ADD             >                // dummy db directives used to calculate length of namec
1453+ 6ADD 50 49 43 4B >                db      "PICK"
1453+ 6AE1             >len_NFA         defl    $ - temp_NFA
1453+ 6AE1             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1453+ 6ADD             >
1453+ 6ADD 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1453+ 6ADE 50 49 43 4B >                db      "PICK"               // name string in 7-bit ascii, but
1453+ 6AE2             >                org     $-1                 // alter last byte of Name just above to set
1453+ 6AE1 CB          >                db      {b $} | END_BIT     // msb as name end
1453+ 6AE2             >
1453+ 6AE2 CD 6A       >                dw      last_NFA            // Link to previous definition Name
1453+ 6AE4             >PICK:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1453+ 6AE4 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1453+ 6AE4             >                else
1453+ 6AE4 E6 6A       >                dw      $ + 2   ; ok        // is pointed by CFA
1453+ 6AE6             >                endif           ; ok        // for other definitions it "points" the correct handler
1453+ 6AE6             >                // Use of "; ok" to suppress "warning[fwdref]"
1453+ 6AE6             >
1453+ 6AE6             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1454+ 6AE6 E1                           pop     hl                  // take TOS as index
1455+ 6AE7 29                           add     hl, hl              // as cells
1456+ 6AE8 39                           add     hl, sp              // from Stack Pointer
1457+ 6AE9 7E                           ld      a, (hl)             // replace TOS
1458+ 6AEA 23                           inc     hl
1459+ 6AEB 66                           ld      h, (hl)
1460+ 6AEC 6F                           ld      l, a
1461+ 6AED
1462+ 6AED                              psh1
1462+ 6AED E5          >                push    hl
1462+ 6AEE DD E9       >                jp      (ix)
1463+ 6AF0
1464+ 6AF0
1465+ 6AF0              //  ______________________________________________________________________
1466+ 6AF0              //
1467+ 6AF0              // 2over        d1 d2 -- d1 d2 d1
1468+ 6AF0              //              n1 n2 n3 n4 -- n1 n2 n3 n4 n1 n2
1469+ 6AF0              // copy the second double of stack and put on top.
1470+ 6AF0              //              New_Def TWO_OVER, "2OVER", is_code, is_normal
1471+ 6AF0              //
1472+ 6AF0              //              ld      hl, 7
1473+ 6AF0              //              add     hl, sp
1474+ 6AF0              //              ld      d, (hl)
1475+ 6AF0              //              dec     hl
1476+ 6AF0              //              ld      e, (hl)             // d1-L
1477+ 6AF0              //              push    de
1478+ 6AF0              //              dec     hl
1479+ 6AF0              //              ld      d, (hl)
1480+ 6AF0              //              dec     hl
1481+ 6AF0              //              ld      e, (hl)             // d1-H
1482+ 6AF0              //              push    de
1483+ 6AF0              //              next
1484+ 6AF0
1485+ 6AF0              //  ______________________________________________________________________
1486+ 6AF0              //
1487+ 6AF0              // 2drop        d --
1488+ 6AF0              //              n1 n2 --
1489+ 6AF0              // drops the top double from stack
1490+ 6AF0                              New_Def TWO_DROP, "2DROP", is_code, is_normal
1490+ 6AF0             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1490+ 6AF0             >
1490+ 6AF0             >                // dummy db directives used to calculate length of namec
1490+ 6AF0 32 44 52 4F >                db      "2DROP"
1490+ 6AF4 50          >
1490+ 6AF5             >len_NFA         defl    $ - temp_NFA
1490+ 6AF5             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1490+ 6AF0             >
1490+ 6AF0 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1490+ 6AF1 32 44 52 4F >                db      "2DROP"               // name string in 7-bit ascii, but
1490+ 6AF5 50          >
1490+ 6AF6             >                org     $-1                 // alter last byte of Name just above to set
1490+ 6AF5 D0          >                db      {b $} | END_BIT     // msb as name end
1490+ 6AF6             >
1490+ 6AF6 DD 6A       >                dw      last_NFA            // Link to previous definition Name
1490+ 6AF8             >TWO_DROP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1490+ 6AF8 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1490+ 6AF8             >                else
1490+ 6AF8 FA 6A       >                dw      $ + 2   ; ok        // is pointed by CFA
1490+ 6AFA             >                endif           ; ok        // for other definitions it "points" the correct handler
1490+ 6AFA             >                // Use of "; ok" to suppress "warning[fwdref]"
1490+ 6AFA             >
1490+ 6AFA             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1491+ 6AFA E1                           pop     hl
1492+ 6AFB E1                           pop     hl
1493+ 6AFC                              next
1493+ 6AFC DD E9       >                jp      (ix)
1494+ 6AFE
1495+ 6AFE              //  ______________________________________________________________________
1496+ 6AFE              //
1497+ 6AFE              // 2nip         d1 d2 -- d2
1498+ 6AFE              //              n1 n2 n3 n4 -- n3 n4
1499+ 6AFE              // drops the second double on the stack
1500+ 6AFE              //              New_Def TWO_NIP, 4, "2nip"
1501+ 6AFE              //              ...
1502+ 6AFE
1503+ 6AFE              //  ______________________________________________________________________
1504+ 6AFE              //
1505+ 6AFE              // 2tuck         d1 d2 -- d2 d1 d2
1506+ 6AFE              // copy the top element after the second.
1507+ 6AFE              //              New_Def TWO_TUCK, 5, "2tuck"
1508+ 6AFE              //              ...
1509+ 6AFE
1510+ 6AFE              //  ______________________________________________________________________
1511+ 6AFE              //
1512+ 6AFE              // 2swap         d1 d2 -- d2 d1
1513+ 6AFE              //               n1 n2 n3 n4 -- n3 n4 n1 n2
1514+ 6AFE              // swaps the two doubles on top of stack
1515+ 6AFE                              New_Def TWO_SWAP, "2SWAP", is_code, is_normal
1515+ 6AFE             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1515+ 6AFE             >
1515+ 6AFE             >                // dummy db directives used to calculate length of namec
1515+ 6AFE 32 53 57 41 >                db      "2SWAP"
1515+ 6B02 50          >
1515+ 6B03             >len_NFA         defl    $ - temp_NFA
1515+ 6B03             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1515+ 6AFE             >
1515+ 6AFE 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1515+ 6AFF 32 53 57 41 >                db      "2SWAP"               // name string in 7-bit ascii, but
1515+ 6B03 50          >
1515+ 6B04             >                org     $-1                 // alter last byte of Name just above to set
1515+ 6B03 D0          >                db      {b $} | END_BIT     // msb as name end
1515+ 6B04             >
1515+ 6B04 F0 6A       >                dw      last_NFA            // Link to previous definition Name
1515+ 6B06             >TWO_SWAP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1515+ 6B06 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1515+ 6B06             >                else
1515+ 6B06 08 6B       >                dw      $ + 2   ; ok        // is pointed by CFA
1515+ 6B08             >                endif           ; ok        // for other definitions it "points" the correct handler
1515+ 6B08             >                // Use of "; ok" to suppress "warning[fwdref]"
1515+ 6B08             >
1515+ 6B08             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1516+ 6B08 F1                           pop     af                  //   d2-H
1517+ 6B09 E1                           pop     hl                  // < d2-L
1518+ 6B0A D1                           pop     de                  // < d1-H
1519+ 6B0B E3                           ex      (sp), hl            // < d1-L > d2-L
1520+ 6B0C F5                           push    af                  // > d2-H
1521+ 6B0D E5                           push    hl                  // > d1-L
1522+ 6B0E D5                           push    de
1523+ 6B0F
1524+ 6B0F                              next
1524+ 6B0F DD E9       >                jp      (ix)
1525+ 6B11
1526+ 6B11              //  ______________________________________________________________________
1527+ 6B11              //
1528+ 6B11              // 2dup         d -- d d
1529+ 6B11              //              n1 n2 -- n1 n2 n1 n2
1530+ 6B11              // duplicates the top double of stack
1531+ 6B11                              New_Def TWO_DUP, "2DUP", is_code, is_normal
1531+ 6B11             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1531+ 6B11             >
1531+ 6B11             >                // dummy db directives used to calculate length of namec
1531+ 6B11 32 44 55 50 >                db      "2DUP"
1531+ 6B15             >len_NFA         defl    $ - temp_NFA
1531+ 6B15             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1531+ 6B11             >
1531+ 6B11 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1531+ 6B12 32 44 55 50 >                db      "2DUP"               // name string in 7-bit ascii, but
1531+ 6B16             >                org     $-1                 // alter last byte of Name just above to set
1531+ 6B15 D0          >                db      {b $} | END_BIT     // msb as name end
1531+ 6B16             >
1531+ 6B16 FE 6A       >                dw      last_NFA            // Link to previous definition Name
1531+ 6B18             >TWO_DUP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1531+ 6B18 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1531+ 6B18             >                else
1531+ 6B18 1A 6B       >                dw      $ + 2   ; ok        // is pointed by CFA
1531+ 6B1A             >                endif           ; ok        // for other definitions it "points" the correct handler
1531+ 6B1A             >                // Use of "; ok" to suppress "warning[fwdref]"
1531+ 6B1A             >
1531+ 6B1A             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1532+ 6B1A E1                           pop     hl                  // < d-H
1533+ 6B1B D1                           pop     de                  // < d-L
1534+ 6B1C D5                           push    de                  // < d-L
1535+ 6B1D E5                           push    hl                  // > d-H
1536+ 6B1E D5                           push    de                  // > d-L
1537+ 6B1F E5                           push    hl                  // > d-H
1538+ 6B20                              next
1538+ 6B20 DD E9       >                jp      (ix)
1539+ 6B22
1540+ 6B22              //  ______________________________________________________________________
1541+ 6B22              //
1542+ 6B22              // 2rot         d1 d2 d3 -- d2 d3 d1
1543+ 6B22              //              n1 n2 n3 n4 n5 n6 -- n3 n4 n5 n6 n1 n2
1544+ 6B22              // Rotates the 3 top doubles of stack by picking the 3rd in access-order
1545+ 6B22              // and putting it on top. The other two are shifted down one place.
1546+ 6B22              //              New_Def TWO?ROT, 4, "2rot"
1547+ 6B22              //              ...
1548+ 6B22              //              New_Def TWO_ROT, "2ROT", is_code, is_normal
1549+ 6B22              //
1550+ 6B22              //      d3  |d2  |d1  |
1551+ 6B22              //      h l |h l |h l |
1552+ 6B22              // SP   LHED|LHED|LHED|
1553+ 6B22              // SP  +0123|4567|89ab|
1554+ 6B22              //              ld      hl, $000B
1555+ 6B22              //              add     hl, sp
1556+ 6B22              //              ld      d, (hl)
1557+ 6B22              //              dec     hl
1558+ 6B22              //              ld      e, (hl)
1559+ 6B22              //              dec     hl
1560+ 6B22              //              push    de
1561+ 6B22              //              ld      d, (hl)
1562+ 6B22              //              dec     hl
1563+ 6B22              //              ld      e, (hl)
1564+ 6B22              //              dec     hl
1565+ 6B22              //              push    de
1566+ 6B22
1567+ 6B22              //      d1  |d3  |d2  |d1  |
1568+ 6B22              //      h l |h l |h l |h l |
1569+ 6B22              // SP   LHED|LHED|LHED|LHED|
1570+ 6B22              // SP       +0123|4567|89ab|
1571+ 6B22
1572+ 6B22              //              ld      d, h
1573+ 6B22              //              ld      e, l
1574+ 6B22              //              inc     de
1575+ 6B22              //              inc     de
1576+ 6B22              //              inc     de
1577+ 6B22              //              inc     de
1578+ 6B22              //              push    bc
1579+ 6B22              //              ld      bc, $000C
1580+ 6B22              //              lddr
1581+ 6B22              //              pop     bc
1582+ 6B22              //              pop     de
1583+ 6B22              //              pop     de
1584+ 6B22              //
1585+ 6B22              //              next
1586+ 6B22
1587+ 6B22
1588+ 6B22              //  ______________________________________________________________________
1589+ 6B22              //
1590+ 6B22              // +!           n a --
1591+ 6B22              // Sums to the content of address a the number n.
1592+ 6B22              // It is the same of  a @ n + a !
1593+ 6B22                              New_Def PLUSSTORE, "+!", is_code, is_normal
1593+ 6B22             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1593+ 6B22             >
1593+ 6B22             >                // dummy db directives used to calculate length of namec
1593+ 6B22 2B 21       >                db      "+!"
1593+ 6B24             >len_NFA         defl    $ - temp_NFA
1593+ 6B24             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1593+ 6B22             >
1593+ 6B22 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1593+ 6B23 2B 21       >                db      "+!"               // name string in 7-bit ascii, but
1593+ 6B25             >                org     $-1                 // alter last byte of Name just above to set
1593+ 6B24 A1          >                db      {b $} | END_BIT     // msb as name end
1593+ 6B25             >
1593+ 6B25 11 6B       >                dw      last_NFA            // Link to previous definition Name
1593+ 6B27             >PLUSSTORE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1593+ 6B27 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1593+ 6B27             >                else
1593+ 6B27 29 6B       >                dw      $ + 2   ; ok        // is pointed by CFA
1593+ 6B29             >                endif           ; ok        // for other definitions it "points" the correct handler
1593+ 6B29             >                // Use of "; ok" to suppress "warning[fwdref]"
1593+ 6B29             >
1593+ 6B29             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1594+ 6B29 E1                           pop     hl                  // hl is the address
1595+ 6B2A D1                           pop     de                  // de is the number
1596+ 6B2B 7E                           ld      a, (hl)
1597+ 6B2C 83                           add     e
1598+ 6B2D 77                           ld      (hl), a
1599+ 6B2E 23                           inc     hl
1600+ 6B2F 7E                           ld      a, (hl)
1601+ 6B30 8A                           adc     d
1602+ 6B31 77                           ld      (hl), a
1603+ 6B32
1604+ 6B32                              next
1604+ 6B32 DD E9       >                jp      (ix)
1605+ 6B34
1606+ 6B34              //  ______________________________________________________________________
1607+ 6B34              //
1608+ 6B34              // toggle       a n --
1609+ 6B34              // Complements (xor) the byte at addrress  a  with the model n.
1610+ 6B34                              New_Def TOGGLE, "TOGGLE", is_code, is_normal
1610+ 6B34             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1610+ 6B34             >
1610+ 6B34             >                // dummy db directives used to calculate length of namec
1610+ 6B34 54 4F 47 47 >                db      "TOGGLE"
1610+ 6B38 4C 45       >
1610+ 6B3A             >len_NFA         defl    $ - temp_NFA
1610+ 6B3A             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1610+ 6B34             >
1610+ 6B34 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1610+ 6B35 54 4F 47 47 >                db      "TOGGLE"               // name string in 7-bit ascii, but
1610+ 6B39 4C 45       >
1610+ 6B3B             >                org     $-1                 // alter last byte of Name just above to set
1610+ 6B3A C5          >                db      {b $} | END_BIT     // msb as name end
1610+ 6B3B             >
1610+ 6B3B 22 6B       >                dw      last_NFA            // Link to previous definition Name
1610+ 6B3D             >TOGGLE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1610+ 6B3D ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1610+ 6B3D             >                else
1610+ 6B3D 3F 6B       >                dw      $ + 2   ; ok        // is pointed by CFA
1610+ 6B3F             >                endif           ; ok        // for other definitions it "points" the correct handler
1610+ 6B3F             >                // Use of "; ok" to suppress "warning[fwdref]"
1610+ 6B3F             >
1610+ 6B3F             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1611+ 6B3F D1                           pop     de
1612+ 6B40 E1                           pop     hl
1613+ 6B41 7E                           ld      a, (hl)
1614+ 6B42 AB                           xor     e
1615+ 6B43 77                           ld      (hl), a
1616+ 6B44
1617+ 6B44                              next
1617+ 6B44 DD E9       >                jp      (ix)
1618+ 6B46
1619+ 6B46              //  ______________________________________________________________________
1620+ 6B46              //
1621+ 6B46              // @            a -- n
1622+ 6B46              // fetch 16 bit number n from address a. Z80 keeps high byte is in high memory
1623+ 6B46                              New_Def FETCH, "@", is_code, is_normal
1623+ 6B46             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1623+ 6B46             >
1623+ 6B46             >                // dummy db directives used to calculate length of namec
1623+ 6B46 40          >                db      "@"
1623+ 6B47             >len_NFA         defl    $ - temp_NFA
1623+ 6B47             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1623+ 6B46             >
1623+ 6B46 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1623+ 6B47 40          >                db      "@"               // name string in 7-bit ascii, but
1623+ 6B48             >                org     $-1                 // alter last byte of Name just above to set
1623+ 6B47 C0          >                db      {b $} | END_BIT     // msb as name end
1623+ 6B48             >
1623+ 6B48 34 6B       >                dw      last_NFA            // Link to previous definition Name
1623+ 6B4A             >FETCH:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1623+ 6B4A ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1623+ 6B4A             >                else
1623+ 6B4A 4C 6B       >                dw      $ + 2   ; ok        // is pointed by CFA
1623+ 6B4C             >                endif           ; ok        // for other definitions it "points" the correct handler
1623+ 6B4C             >                // Use of "; ok" to suppress "warning[fwdref]"
1623+ 6B4C             >
1623+ 6B4C             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1624+ 6B4C E1                           pop     hl
1625+ 6B4D 5E                           ld      e, (hl)             // low-byte
1626+ 6B4E 23                           inc     hl
1627+ 6B4F 56                           ld      d, (hl)             // high-byte
1628+ 6B50 D5                           push    de
1629+ 6B51                              next
1629+ 6B51 DD E9       >                jp      (ix)
1630+ 6B53
1631+ 6B53              //  ______________________________________________________________________
1632+ 6B53              //
1633+ 6B53              // !            n a --
1634+ 6B53              // store 16 bit number n from address a. Z80 keeps high byte is in high memory
1635+ 6B53                              New_Def STORE, "!", is_code, is_normal
1635+ 6B53             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1635+ 6B53             >
1635+ 6B53             >                // dummy db directives used to calculate length of namec
1635+ 6B53 21          >                db      "!"
1635+ 6B54             >len_NFA         defl    $ - temp_NFA
1635+ 6B54             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1635+ 6B53             >
1635+ 6B53 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1635+ 6B54 21          >                db      "!"               // name string in 7-bit ascii, but
1635+ 6B55             >                org     $-1                 // alter last byte of Name just above to set
1635+ 6B54 A1          >                db      {b $} | END_BIT     // msb as name end
1635+ 6B55             >
1635+ 6B55 46 6B       >                dw      last_NFA            // Link to previous definition Name
1635+ 6B57             >STORE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1635+ 6B57 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1635+ 6B57             >                else
1635+ 6B57 59 6B       >                dw      $ + 2   ; ok        // is pointed by CFA
1635+ 6B59             >                endif           ; ok        // for other definitions it "points" the correct handler
1635+ 6B59             >                // Use of "; ok" to suppress "warning[fwdref]"
1635+ 6B59             >
1635+ 6B59             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1636+ 6B59 E1                           pop     hl                  // address
1637+ 6B5A D1                           pop     de                  // < n
1638+ 6B5B 73                           ld      (hl), e             // low-byte
1639+ 6B5C 23                           inc     hl
1640+ 6B5D 72                           ld      (hl), d             // high-byte
1641+ 6B5E
1642+ 6B5E                              next
1642+ 6B5E DD E9       >                jp      (ix)
1643+ 6B60
1644+ 6B60              //  ______________________________________________________________________
1645+ 6B60              //
1646+ 6B60              // c@           a -- c
1647+ 6B60              // fetch a character n from address a
1648+ 6B60                              New_Def CFETCH, "C@", is_code, is_normal
1648+ 6B60             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1648+ 6B60             >
1648+ 6B60             >                // dummy db directives used to calculate length of namec
1648+ 6B60 43 40       >                db      "C@"
1648+ 6B62             >len_NFA         defl    $ - temp_NFA
1648+ 6B62             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1648+ 6B60             >
1648+ 6B60 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1648+ 6B61 43 40       >                db      "C@"               // name string in 7-bit ascii, but
1648+ 6B63             >                org     $-1                 // alter last byte of Name just above to set
1648+ 6B62 C0          >                db      {b $} | END_BIT     // msb as name end
1648+ 6B63             >
1648+ 6B63 53 6B       >                dw      last_NFA            // Link to previous definition Name
1648+ 6B65             >CFETCH:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1648+ 6B65 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1648+ 6B65             >                else
1648+ 6B65 67 6B       >                dw      $ + 2   ; ok        // is pointed by CFA
1648+ 6B67             >                endif           ; ok        // for other definitions it "points" the correct handler
1648+ 6B67             >                // Use of "; ok" to suppress "warning[fwdref]"
1648+ 6B67             >
1648+ 6B67             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1649+ 6B67 E1                           pop     hl
1650+ 6B68 6E                           ld      l, (hl)             // low-byte
1651+ 6B69 26 00                        ld      h, 0
1652+ 6B6B
1653+ 6B6B                              psh1
1653+ 6B6B E5          >                push    hl
1653+ 6B6C DD E9       >                jp      (ix)
1654+ 6B6E
1655+ 6B6E              //  ______________________________________________________________________
1656+ 6B6E              //
1657+ 6B6E              // c!           c a --
1658+ 6B6E              // fetch 16 bit number n from address a. Z80 keeps high byte is in high memory
1659+ 6B6E                              New_Def CSTORE, "C!", is_code, is_normal
1659+ 6B6E             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1659+ 6B6E             >
1659+ 6B6E             >                // dummy db directives used to calculate length of namec
1659+ 6B6E 43 21       >                db      "C!"
1659+ 6B70             >len_NFA         defl    $ - temp_NFA
1659+ 6B70             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1659+ 6B6E             >
1659+ 6B6E 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1659+ 6B6F 43 21       >                db      "C!"               // name string in 7-bit ascii, but
1659+ 6B71             >                org     $-1                 // alter last byte of Name just above to set
1659+ 6B70 A1          >                db      {b $} | END_BIT     // msb as name end
1659+ 6B71             >
1659+ 6B71 60 6B       >                dw      last_NFA            // Link to previous definition Name
1659+ 6B73             >CSTORE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1659+ 6B73 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1659+ 6B73             >                else
1659+ 6B73 75 6B       >                dw      $ + 2   ; ok        // is pointed by CFA
1659+ 6B75             >                endif           ; ok        // for other definitions it "points" the correct handler
1659+ 6B75             >                // Use of "; ok" to suppress "warning[fwdref]"
1659+ 6B75             >
1659+ 6B75             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1660+ 6B75 E1                           pop     hl                  // < address
1661+ 6B76 D1                           pop     de
1662+ 6B77 73                           ld      (hl), e             // low-byte
1663+ 6B78
1664+ 6B78                              next
1664+ 6B78 DD E9       >                jp      (ix)
1665+ 6B7A
1666+ 6B7A              //  ______________________________________________________________________
1667+ 6B7A              //
1668+ 6B7A              // 2@           a -- d
1669+ 6B7A              // fetch a 32 bits number d from address a and leaves it on top of the
1670+ 6B7A              // stack as two single numbers, high part as top of the stack.
1671+ 6B7A              // A double number is normally kept in CPU registers as HLDE.
1672+ 6B7A              // On stack a double number is treated as two single numbers
1673+ 6B7A              // where BC is on the top of the stack and HL is the second from top,
1674+ 6B7A              // so the sign of the number can be checked on top of stack
1675+ 6B7A              // and in the stack memory it appears as LHED.
1676+ 6B7A                              New_Def TWO_FETCH, "2@", is_code, is_normal
1676+ 6B7A             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1676+ 6B7A             >
1676+ 6B7A             >                // dummy db directives used to calculate length of namec
1676+ 6B7A 32 40       >                db      "2@"
1676+ 6B7C             >len_NFA         defl    $ - temp_NFA
1676+ 6B7C             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1676+ 6B7A             >
1676+ 6B7A 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1676+ 6B7B 32 40       >                db      "2@"               // name string in 7-bit ascii, but
1676+ 6B7D             >                org     $-1                 // alter last byte of Name just above to set
1676+ 6B7C C0          >                db      {b $} | END_BIT     // msb as name end
1676+ 6B7D             >
1676+ 6B7D 6E 6B       >                dw      last_NFA            // Link to previous definition Name
1676+ 6B7F             >TWO_FETCH:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1676+ 6B7F ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1676+ 6B7F             >                else
1676+ 6B7F 81 6B       >                dw      $ + 2   ; ok        // is pointed by CFA
1676+ 6B81             >                endif           ; ok        // for other definitions it "points" the correct handler
1676+ 6B81             >                // Use of "; ok" to suppress "warning[fwdref]"
1676+ 6B81             >
1676+ 6B81             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1677+ 6B81 E1                           pop     hl                  // address
1678+ 6B82 5E                           ld      e, (hl)             // low-byte
1679+ 6B83 23                           inc     hl
1680+ 6B84 56                           ld      d, (hl)             // high-byte
1681+ 6B85
1682+ 6B85 23                           inc     hl
1683+ 6B86 7E                           ld      a, (hl)             // low-byte
1684+ 6B87 23                           inc     hl
1685+ 6B88 66                           ld      h, (hl)             // high-byte
1686+ 6B89 6F                           ld      l, a
1687+ 6B8A E5                           push    hl
1688+ 6B8B D5                           push    de
1689+ 6B8C                              next
1689+ 6B8C DD E9       >                jp      (ix)
1690+ 6B8E
1691+ 6B8E              //  ______________________________________________________________________
1692+ 6B8E              //
1693+ 6B8E              // 2!           d a --
1694+ 6B8E              // stores a 32 bits number d from address a and leaves it on top of the
1695+ 6B8E              // stack as two single numbers, high part as top of the stack.
1696+ 6B8E              // A double number is normally kept in CPU registers as HLDE.
1697+ 6B8E              // On stack a double number is treated as two single numbers
1698+ 6B8E              // where BC is on the top of the stack and HL is the second from top,
1699+ 6B8E              // so the sign of the number can be checked on top of stack
1700+ 6B8E              // and in the stack memory it appears as LHED.
1701+ 6B8E                              New_Def TWO_STORE, "2!", is_code, is_normal
1701+ 6B8E             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1701+ 6B8E             >
1701+ 6B8E             >                // dummy db directives used to calculate length of namec
1701+ 6B8E 32 21       >                db      "2!"
1701+ 6B90             >len_NFA         defl    $ - temp_NFA
1701+ 6B90             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1701+ 6B8E             >
1701+ 6B8E 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1701+ 6B8F 32 21       >                db      "2!"               // name string in 7-bit ascii, but
1701+ 6B91             >                org     $-1                 // alter last byte of Name just above to set
1701+ 6B90 A1          >                db      {b $} | END_BIT     // msb as name end
1701+ 6B91             >
1701+ 6B91 7A 6B       >                dw      last_NFA            // Link to previous definition Name
1701+ 6B93             >TWO_STORE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1701+ 6B93 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1701+ 6B93             >                else
1701+ 6B93 95 6B       >                dw      $ + 2   ; ok        // is pointed by CFA
1701+ 6B95             >                endif           ; ok        // for other definitions it "points" the correct handler
1701+ 6B95             >                // Use of "; ok" to suppress "warning[fwdref]"
1701+ 6B95             >
1701+ 6B95             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1702+ 6B95 60                           ld      h, b
1703+ 6B96 69                           ld      l, c
1704+ 6B97 D1                           pop     de                  // de has address
1705+ 6B98 C1                           pop     bc                  // < high-part
1706+ 6B99 E3                           ex      (sp), hl            // < low-part > Instruction Pointer
1707+ 6B9A EB                           ex      de, hl
1708+ 6B9B 71                           ld      (hl), c
1709+ 6B9C 23                           inc     hl
1710+ 6B9D 70                           ld      (hl), b
1711+ 6B9E 23                           inc     hl
1712+ 6B9F 73                           ld      (hl), e
1713+ 6BA0 23                           inc     hl
1714+ 6BA1 72                           ld      (hl), d
1715+ 6BA2 C1                           pop     bc                  // Restore Instruction Pointer
1716+ 6BA3
1717+ 6BA3                              next
1717+ 6BA3 DD E9       >                jp      (ix)
1718+ 6BA5
1719+ 6BA5              //  ______________________________________________________________________
1720+ 6BA5              //
1721+ 6BA5              // p@           a -- c
1722+ 6BA5              // Read one byte from port a and leave the result on top of stack
1723+ 6BA5                              New_Def PFETCH, "P@", is_code, is_normal
1723+ 6BA5             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1723+ 6BA5             >
1723+ 6BA5             >                // dummy db directives used to calculate length of namec
1723+ 6BA5 50 40       >                db      "P@"
1723+ 6BA7             >len_NFA         defl    $ - temp_NFA
1723+ 6BA7             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1723+ 6BA5             >
1723+ 6BA5 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1723+ 6BA6 50 40       >                db      "P@"               // name string in 7-bit ascii, but
1723+ 6BA8             >                org     $-1                 // alter last byte of Name just above to set
1723+ 6BA7 C0          >                db      {b $} | END_BIT     // msb as name end
1723+ 6BA8             >
1723+ 6BA8 8E 6B       >                dw      last_NFA            // Link to previous definition Name
1723+ 6BAA             >PFETCH:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1723+ 6BAA ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1723+ 6BAA             >                else
1723+ 6BAA AC 6B       >                dw      $ + 2   ; ok        // is pointed by CFA
1723+ 6BAC             >                endif           ; ok        // for other definitions it "points" the correct handler
1723+ 6BAC             >                // Use of "; ok" to suppress "warning[fwdref]"
1723+ 6BAC             >
1723+ 6BAC             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1724+ 6BAC 50                           ld      d, b
1725+ 6BAD 59                           ld      e, c
1726+ 6BAE
1727+ 6BAE C1                           pop     bc
1728+ 6BAF 26 00                        ld      h, 0
1729+ 6BB1 ED 68                        in      l, (c)
1730+ 6BB3 42                           ld      b, d
1731+ 6BB4 4B                           ld      c, e
1732+ 6BB5                              psh1
1732+ 6BB5 E5          >                push    hl
1732+ 6BB6 DD E9       >                jp      (ix)
1733+ 6BB8
1734+ 6BB8              //  ______________________________________________________________________
1735+ 6BB8              //
1736+ 6BB8              // p!           c a --
1737+ 6BB8              // Send one byte (top of stack) to port a
1738+ 6BB8                              New_Def PSTORE, "P!", is_code, is_normal
1738+ 6BB8             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1738+ 6BB8             >
1738+ 6BB8             >                // dummy db directives used to calculate length of namec
1738+ 6BB8 50 21       >                db      "P!"
1738+ 6BBA             >len_NFA         defl    $ - temp_NFA
1738+ 6BBA             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1738+ 6BB8             >
1738+ 6BB8 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1738+ 6BB9 50 21       >                db      "P!"               // name string in 7-bit ascii, but
1738+ 6BBB             >                org     $-1                 // alter last byte of Name just above to set
1738+ 6BBA A1          >                db      {b $} | END_BIT     // msb as name end
1738+ 6BBB             >
1738+ 6BBB A5 6B       >                dw      last_NFA            // Link to previous definition Name
1738+ 6BBD             >PSTORE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1738+ 6BBD ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1738+ 6BBD             >                else
1738+ 6BBD BF 6B       >                dw      $ + 2   ; ok        // is pointed by CFA
1738+ 6BBF             >                endif           ; ok        // for other definitions it "points" the correct handler
1738+ 6BBF             >                // Use of "; ok" to suppress "warning[fwdref]"
1738+ 6BBF             >
1738+ 6BBF             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1739+ 6BBF 50                           ld      d, b
1740+ 6BC0 59                           ld      e, c
1741+ 6BC1
1742+ 6BC1 C1                           pop     bc
1743+ 6BC2 E1                           pop     hl                  // < c
1744+ 6BC3 ED 69                        out     (c), l              // low-byte
1745+ 6BC5 42                           ld      b, d
1746+ 6BC6 4B                           ld      c, e
1747+ 6BC7
1748+ 6BC7                              next
1748+ 6BC7 DD E9       >                jp      (ix)
1749+ 6BC9
1750+ 6BC9
1751+ 6BC9              //  ______________________________________________________________________
1752+ 6BC9              //
1753+ 6BC9              // 2*           n1 -- n2
1754+ 6BC9              // doubles the number at top of stack
1755+ 6BC9                              New_Def TWO_MUL, "2*", is_code, is_normal
1755+ 6BC9             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1755+ 6BC9             >
1755+ 6BC9             >                // dummy db directives used to calculate length of namec
1755+ 6BC9 32 2A       >                db      "2*"
1755+ 6BCB             >len_NFA         defl    $ - temp_NFA
1755+ 6BCB             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1755+ 6BC9             >
1755+ 6BC9 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1755+ 6BCA 32 2A       >                db      "2*"               // name string in 7-bit ascii, but
1755+ 6BCC             >                org     $-1                 // alter last byte of Name just above to set
1755+ 6BCB AA          >                db      {b $} | END_BIT     // msb as name end
1755+ 6BCC             >
1755+ 6BCC B8 6B       >                dw      last_NFA            // Link to previous definition Name
1755+ 6BCE             >TWO_MUL:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1755+ 6BCE ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1755+ 6BCE             >                else
1755+ 6BCE D0 6B       >                dw      $ + 2   ; ok        // is pointed by CFA
1755+ 6BD0             >                endif           ; ok        // for other definitions it "points" the correct handler
1755+ 6BD0             >                // Use of "; ok" to suppress "warning[fwdref]"
1755+ 6BD0             >
1755+ 6BD0             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1756+ 6BD0              Two_Mul_Ptr:
1757+ 6BD0 E1                           pop     hl
1758+ 6BD1 29                           add     hl, hl
1759+ 6BD2
1760+ 6BD2                              psh1
1760+ 6BD2 E5          >                push    hl
1760+ 6BD3 DD E9       >                jp      (ix)
1761+ 6BD5
1762+ 6BD5              //  ______________________________________________________________________
1763+ 6BD5              //
1764+ 6BD5              // 2/           n1 -- n2
1765+ 6BD5              // halves the top of stack, sign is unchanged
1766+ 6BD5                              New_Def TWO_DIV, "2/", is_code, is_normal
1766+ 6BD5             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1766+ 6BD5             >
1766+ 6BD5             >                // dummy db directives used to calculate length of namec
1766+ 6BD5 32 2F       >                db      "2/"
1766+ 6BD7             >len_NFA         defl    $ - temp_NFA
1766+ 6BD7             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1766+ 6BD5             >
1766+ 6BD5 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1766+ 6BD6 32 2F       >                db      "2/"               // name string in 7-bit ascii, but
1766+ 6BD8             >                org     $-1                 // alter last byte of Name just above to set
1766+ 6BD7 AF          >                db      {b $} | END_BIT     // msb as name end
1766+ 6BD8             >
1766+ 6BD8 C9 6B       >                dw      last_NFA            // Link to previous definition Name
1766+ 6BDA             >TWO_DIV:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1766+ 6BDA ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1766+ 6BDA             >                else
1766+ 6BDA DC 6B       >                dw      $ + 2   ; ok        // is pointed by CFA
1766+ 6BDC             >                endif           ; ok        // for other definitions it "points" the correct handler
1766+ 6BDC             >                // Use of "; ok" to suppress "warning[fwdref]"
1766+ 6BDC             >
1766+ 6BDC             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1767+ 6BDC E1                           pop     hl
1768+ 6BDD CB 2C                        sra     h
1769+ 6BDF CB 1D                        rr      l
1770+ 6BE1
1771+ 6BE1                              psh1
1771+ 6BE1 E5          >                push    hl
1771+ 6BE2 DD E9       >                jp      (ix)
1772+ 6BE4
1773+ 6BE4              //  ______________________________________________________________________
1774+ 6BE4              //
1775+ 6BE4              // lshift       n1 u -- n2
1776+ 6BE4              // bit left shift of u bits
1777+ 6BE4                              New_Def LSHIFT, "LSHIFT", is_code, is_normal
1777+ 6BE4             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1777+ 6BE4             >
1777+ 6BE4             >                // dummy db directives used to calculate length of namec
1777+ 6BE4 4C 53 48 49 >                db      "LSHIFT"
1777+ 6BE8 46 54       >
1777+ 6BEA             >len_NFA         defl    $ - temp_NFA
1777+ 6BEA             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1777+ 6BE4             >
1777+ 6BE4 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1777+ 6BE5 4C 53 48 49 >                db      "LSHIFT"               // name string in 7-bit ascii, but
1777+ 6BE9 46 54       >
1777+ 6BEB             >                org     $-1                 // alter last byte of Name just above to set
1777+ 6BEA D4          >                db      {b $} | END_BIT     // msb as name end
1777+ 6BEB             >
1777+ 6BEB D5 6B       >                dw      last_NFA            // Link to previous definition Name
1777+ 6BED             >LSHIFT:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1777+ 6BED ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1777+ 6BED             >                else
1777+ 6BED EF 6B       >                dw      $ + 2   ; ok        // is pointed by CFA
1777+ 6BEF             >                endif           ; ok        // for other definitions it "points" the correct handler
1777+ 6BEF             >                // Use of "; ok" to suppress "warning[fwdref]"
1777+ 6BEF             >
1777+ 6BEF             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1778+ 6BEF D1                           pop     de
1779+ 6BF0
1780+ 6BF0 E1                           pop     hl
1781+ 6BF1 7B                           ld      a, e
1782+ 6BF2 B7                           or      a
1783+ 6BF3 28 04                        jr      z, Lshift_Zero
1784+ 6BF5              Lshift_Loop:
1785+ 6BF5 29                                   add     hl, hl
1786+ 6BF6 3D                                   dec     a
1787+ 6BF7 20 FC                            jr      nz, Lshift_Loop
1788+ 6BF9              Lshift_Zero:
1789+ 6BF9
1790+ 6BF9
1791+ 6BF9                              psh1
1791+ 6BF9 E5          >                push    hl
1791+ 6BFA DD E9       >                jp      (ix)
1792+ 6BFC
1793+ 6BFC              //  ______________________________________________________________________
1794+ 6BFC              //
1795+ 6BFC              // rshift       n1 u -- n2
1796+ 6BFC              // bit right shift of u bits
1797+ 6BFC                              New_Def RSHIFT, "RSHIFT", is_code, is_normal
1797+ 6BFC             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1797+ 6BFC             >
1797+ 6BFC             >                // dummy db directives used to calculate length of namec
1797+ 6BFC 52 53 48 49 >                db      "RSHIFT"
1797+ 6C00 46 54       >
1797+ 6C02             >len_NFA         defl    $ - temp_NFA
1797+ 6C02             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1797+ 6BFC             >
1797+ 6BFC 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1797+ 6BFD 52 53 48 49 >                db      "RSHIFT"               // name string in 7-bit ascii, but
1797+ 6C01 46 54       >
1797+ 6C03             >                org     $-1                 // alter last byte of Name just above to set
1797+ 6C02 D4          >                db      {b $} | END_BIT     // msb as name end
1797+ 6C03             >
1797+ 6C03 E4 6B       >                dw      last_NFA            // Link to previous definition Name
1797+ 6C05             >RSHIFT:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1797+ 6C05 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1797+ 6C05             >                else
1797+ 6C05 07 6C       >                dw      $ + 2   ; ok        // is pointed by CFA
1797+ 6C07             >                endif           ; ok        // for other definitions it "points" the correct handler
1797+ 6C07             >                // Use of "; ok" to suppress "warning[fwdref]"
1797+ 6C07             >
1797+ 6C07             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1798+ 6C07 D1                           pop     de
1799+ 6C08
1800+ 6C08 E1                           pop     hl
1801+ 6C09 7B                           ld      a, e
1802+ 6C0A B7                           or      a
1803+ 6C0B 28 07                        jr      z, Rshift_Zero
1804+ 6C0D              Rshift_Loop:
1805+ 6C0D CB 3C                                srl     h
1806+ 6C0F CB 1D                                rr      l
1807+ 6C11 3D                                   dec     a
1808+ 6C12 20 F9                            jr      nz, Rshift_Loop
1809+ 6C14              Rshift_Zero:
1810+ 6C14
1811+ 6C14
1812+ 6C14                              psh1
1812+ 6C14 E5          >                push    hl
1812+ 6C15 DD E9       >                jp      (ix)
1813+ 6C17
1814+ 6C17              //  ______________________________________________________________________
1815+ 6C17              //
1816+ 6C17              // cells        n1 -- n2
1817+ 6C17              // decrement by 2 top of stack
1818+ 6C17                              New_Def CELLS, "CELLS", Two_Mul_Ptr, is_normal
1818+ 6C17             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1818+ 6C17             >
1818+ 6C17             >                // dummy db directives used to calculate length of namec
1818+ 6C17 43 45 4C 4C >                db      "CELLS"
1818+ 6C1B 53          >
1818+ 6C1C             >len_NFA         defl    $ - temp_NFA
1818+ 6C1C             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1818+ 6C17             >
1818+ 6C17 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1818+ 6C18 43 45 4C 4C >                db      "CELLS"               // name string in 7-bit ascii, but
1818+ 6C1C 53          >
1818+ 6C1D             >                org     $-1                 // alter last byte of Name just above to set
1818+ 6C1C D3          >                db      {b $} | END_BIT     // msb as name end
1818+ 6C1D             >
1818+ 6C1D FC 6B       >                dw      last_NFA            // Link to previous definition Name
1818+ 6C1F             >CELLS:          if Two_Mul_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1818+ 6C1F D0 6B       >                dw      Two_Mul_Ptr ; ok        // for primitive definitions  actual code
1818+ 6C21             >                else
1818+ 6C21 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
1818+ 6C21             >                endif           ; ok        // for other definitions it "points" the correct handler
1818+ 6C21             >                // Use of "; ok" to suppress "warning[fwdref]"
1818+ 6C21             >
1818+ 6C21             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1819+ 6C21
1820+ 6C21
1821+ 6C21              //  ______________________________________________________________________
1822+ 6C21
# file closed: C:\Zx\CSpect\Projects\vForth15_INDIRECT/source/L0.asm
 109  6C21                              include "L1.asm"
# file opened: C:\Zx\CSpect\Projects\vForth15_INDIRECT/source/L1.asm
   1+ 6C21              //  ______________________________________________________________________
   2+ 6C21              //
   3+ 6C21              //  L1.asm
   4+ 6C21              //
   5+ 6C21              //  Level-1 definitions and derivate
   6+ 6C21              //  ______________________________________________________________________
   7+ 6C21
   8+ 6C21              //  ______________________________________________________________________
   9+ 6C21              //
  10+ 6C21              // :            -- cccc     ( compile time )
  11+ 6C21              //              i*x -- j*x  ( run time )
  12+ 6C21              // Colon Definition
  13+ 6C21                              Colon_Def COLON, ":", is_immediate      // has forward-ref
  13+ 6C21             >                New_Def  COLON, ":", Enter_Ptr, is_immediate ; ok
  13+ 6C21             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  13+ 6C21             >
  13+ 6C21             >                // dummy db directives used to calculate length of namec
  13+ 6C21 3A          >                db      ":"
  13+ 6C22             >len_NFA         defl    $ - temp_NFA
  13+ 6C22             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  13+ 6C21             >
  13+ 6C21 C1          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
  13+ 6C22 3A          >                db      ":"               // name string in 7-bit ascii, but
  13+ 6C23             >                org     $-1                 // alter last byte of Name just above to set
  13+ 6C22 BA          >                db      {b $} | END_BIT     // msb as name end
  13+ 6C23             >
  13+ 6C23 17 6C       >                dw      last_NFA            // Link to previous definition Name
  13+ 6C25             >COLON:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
  13+ 6C25 3B 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
  13+ 6C27             >                else
  13+ 6C27 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
  13+ 6C27             >                endif           ; ok        // for other definitions it "points" the correct handler
  13+ 6C27             >                // Use of "; ok" to suppress "warning[fwdref]"
  13+ 6C27             >
  13+ 6C27             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  14+ 6C27
  15+ 6C27 91 70                        dw      QEXEC                   // ?exec
  16+ 6C29 4C 70                        dw      STORE_CSP               // !csp
  17+ 6C2B F6 6D 4A 6B                  dw      CURRENT, FETCH          // current @
  18+ 6C2F E9 6D 57 6B                  dw      CONTEXT, STORE          // context !
  19+ 6C33 92 76                        dw      CREATE                  // create  ( forward )
  20+ 6C35 3E 71                        dw      SMUDGE                  // dmudge
  21+ 6C37 29 71                        dw      SQUARED_CLOSE           // ]
  22+ 6C39 94 71                        dw      C_SEMICOLON_CODE        // ;code ( change the 3-bytes CFA of defining word to call Enter_Ptr )
  23+ 6C3B                                                              // ... immediate
  24+ 6C3B              Enter_Ptr:
  25+ 6C3B                              // via call coded in CFA
  26+ 6C3B                              ldhlrp
  26+ 6C3B 2A 96 63    >                ld      hl,(RP_Pointer)
  27+ 6C3E 2B                           dec     hl                  // push on Return-Stack current Instruction-Pointer
  28+ 6C3F 70                           ld      (hl), b
  29+ 6C40 2B                           dec     hl
  30+ 6C41 71                           ld      (hl), c
  31+ 6C42                              ldrphl
  31+ 6C42 22 96 63    >                ld      (RP_Pointer),hl
  32+ 6C45 13                           inc     de
  33+ 6C46 4B                           ld      c, e
  34+ 6C47 42                           ld      b, d
  35+ 6C48                              next
  35+ 6C48 DD E9       >                jp      (ix)
  36+ 6C4A
  37+ 6C4A              //  ______________________________________________________________________
  38+ 6C4A              //
  39+ 6C4A              // ;            --
  40+ 6C4A              // Semicolon. End of Colon-Definition. Stack must be balanced.
  41+ 6C4A                              Colon_Def SEMICOLON, ";", is_immediate   // has forward-ref
  41+ 6C4A             >                New_Def  SEMICOLON, ";", Enter_Ptr, is_immediate ; ok
  41+ 6C4A             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  41+ 6C4A             >
  41+ 6C4A             >                // dummy db directives used to calculate length of namec
  41+ 6C4A 3B          >                db      ";"
  41+ 6C4B             >len_NFA         defl    $ - temp_NFA
  41+ 6C4B             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  41+ 6C4A             >
  41+ 6C4A C1          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
  41+ 6C4B 3B          >                db      ";"               // name string in 7-bit ascii, but
  41+ 6C4C             >                org     $-1                 // alter last byte of Name just above to set
  41+ 6C4B BB          >                db      {b $} | END_BIT     // msb as name end
  41+ 6C4C             >
  41+ 6C4C 21 6C       >                dw      last_NFA            // Link to previous definition Name
  41+ 6C4E             >SEMICOLON:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
  41+ 6C4E 3B 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
  41+ 6C50             >                else
  41+ 6C50 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
  41+ 6C50             >                endif           ; ok        // for other definitions it "points" the correct handler
  41+ 6C50             >                // Use of "; ok" to suppress "warning[fwdref]"
  41+ 6C50             >
  41+ 6C50             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  42+ 6C50
  43+ 6C50 BB 70                        dw      QCSP                    // ?csp
  44+ 6C52 F2 70 25 69                  dw      COMPILE, EXIT           // [compile] ;s
  45+ 6C56 3E 71                        dw      SMUDGE                  // smudge
  46+ 6C58 1B 71                        dw      SQUARED_OPEN            // [
  47+ 6C5A 25 69                        dw      EXIT                    // ; immediate
  48+ 6C5C
  49+ 6C5C              //  ______________________________________________________________________
  50+ 6C5C              //
  51+ 6C5C              // noop         --
  52+ 6C5C
  53+ 6C5C                              Colon_Def NOOP, "NOOP", is_normal
  53+ 6C5C             >                New_Def  NOOP, "NOOP", Enter_Ptr, is_normal ; ok
  53+ 6C5C             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  53+ 6C5C             >
  53+ 6C5C             >                // dummy db directives used to calculate length of namec
  53+ 6C5C 4E 4F 4F 50 >                db      "NOOP"
  53+ 6C60             >len_NFA         defl    $ - temp_NFA
  53+ 6C60             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  53+ 6C5C             >
  53+ 6C5C 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  53+ 6C5D 4E 4F 4F 50 >                db      "NOOP"               // name string in 7-bit ascii, but
  53+ 6C61             >                org     $-1                 // alter last byte of Name just above to set
  53+ 6C60 D0          >                db      {b $} | END_BIT     // msb as name end
  53+ 6C61             >
  53+ 6C61 4A 6C       >                dw      last_NFA            // Link to previous definition Name
  53+ 6C63             >NOOP:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
  53+ 6C63 3B 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
  53+ 6C65             >                else
  53+ 6C65 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
  53+ 6C65             >                endif           ; ok        // for other definitions it "points" the correct handler
  53+ 6C65             >                // Use of "; ok" to suppress "warning[fwdref]"
  53+ 6C65             >
  53+ 6C65             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  54+ 6C65 25 69                        dw      EXIT
  55+ 6C67
  56+ 6C67              //  ______________________________________________________________________
  57+ 6C67              //
  58+ 6C67              // constant     n -- cccc     ( compile time )
  59+ 6C67              //              -- n          ( run time )
  60+ 6C67              // Constant definition.
  61+ 6C67                              Colon_Def CONSTANT, "CONSTANT", is_normal   // has forward-ref
  61+ 6C67             >                New_Def  CONSTANT, "CONSTANT", Enter_Ptr, is_normal ; ok
  61+ 6C67             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  61+ 6C67             >
  61+ 6C67             >                // dummy db directives used to calculate length of namec
  61+ 6C67 43 4F 4E 53 >                db      "CONSTANT"
  61+ 6C6B 54 41 4E 54 >
  61+ 6C6F             >len_NFA         defl    $ - temp_NFA
  61+ 6C6F             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  61+ 6C67             >
  61+ 6C67 88          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  61+ 6C68 43 4F 4E 53 >                db      "CONSTANT"               // name string in 7-bit ascii, but
  61+ 6C6C 54 41 4E 54 >
  61+ 6C70             >                org     $-1                 // alter last byte of Name just above to set
  61+ 6C6F D4          >                db      {b $} | END_BIT     // msb as name end
  61+ 6C70             >
  61+ 6C70 5C 6C       >                dw      last_NFA            // Link to previous definition Name
  61+ 6C72             >CONSTANT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
  61+ 6C72 3B 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
  61+ 6C74             >                else
  61+ 6C74 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
  61+ 6C74             >                endif           ; ok        // for other definitions it "points" the correct handler
  61+ 6C74             >                // Use of "; ok" to suppress "warning[fwdref]"
  61+ 6C74             >
  61+ 6C74             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  62+ 6C74
  63+ 6C74 92 76                        dw      CREATE                  // create
  64+ 6C76 B1 6E                        dw      COMMA                   // ,    ( at PFA then, store the value )
  65+ 6C78 94 71                        dw      C_SEMICOLON_CODE        // ;code (  changes the 3-bytes CFA to call Constant_Ptr )
  66+ 6C7A              Constant_Ptr:
  67+ 6C7A
  68+ 6C7A 13                           inc     de
  69+ 6C7B EB                           ex      de, hl
  70+ 6C7C
  71+ 6C7C 5E                           ld      e, (hl)
  72+ 6C7D 23                           inc     hl
  73+ 6C7E 56                           ld      d, (hl)
  74+ 6C7F D5                           push    de
  75+ 6C80                              next
  75+ 6C80 DD E9       >                jp      (ix)
  76+ 6C82
  77+ 6C82              //  ______________________________________________________________________
  78+ 6C82              //
  79+ 6C82              // variable     n -- cccc     ( compile time )
  80+ 6C82              //              -- a          ( run time )
  81+ 6C82              // Variable definition, n is the initial value.
  82+ 6C82                              Colon_Def VARIABLE, "VARIABLE", is_normal   // has forward-ref
  82+ 6C82             >                New_Def  VARIABLE, "VARIABLE", Enter_Ptr, is_normal ; ok
  82+ 6C82             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  82+ 6C82             >
  82+ 6C82             >                // dummy db directives used to calculate length of namec
  82+ 6C82 56 41 52 49 >                db      "VARIABLE"
  82+ 6C86 41 42 4C 45 >
  82+ 6C8A             >len_NFA         defl    $ - temp_NFA
  82+ 6C8A             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  82+ 6C82             >
  82+ 6C82 88          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  82+ 6C83 56 41 52 49 >                db      "VARIABLE"               // name string in 7-bit ascii, but
  82+ 6C87 41 42 4C 45 >
  82+ 6C8B             >                org     $-1                 // alter last byte of Name just above to set
  82+ 6C8A C5          >                db      {b $} | END_BIT     // msb as name end
  82+ 6C8B             >
  82+ 6C8B 67 6C       >                dw      last_NFA            // Link to previous definition Name
  82+ 6C8D             >VARIABLE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
  82+ 6C8D 3B 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
  82+ 6C8F             >                else
  82+ 6C8F ~           >                dw      $ + 2   ; ok        // is pointed by CFA
  82+ 6C8F             >                endif           ; ok        // for other definitions it "points" the correct handler
  82+ 6C8F             >                // Use of "; ok" to suppress "warning[fwdref]"
  82+ 6C8F             >
  82+ 6C8F             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  83+ 6C8F
  84+ 6C8F 72 6C                        dw      CONSTANT                // constant
  85+ 6C91 94 71                        dw      C_SEMICOLON_CODE        // ;code ( changes the 3-bytes CFA to call Variable_Ptr )
  86+ 6C93              Variable_Ptr:
  87+ 6C93
  88+ 6C93 13                           inc     de
  89+ 6C94 D5                           push    de                  // balance TOS before overwrite it
  90+ 6C95
  91+ 6C95                              next
  91+ 6C95 DD E9       >                jp      (ix)
  92+ 6C97
  93+ 6C97              //  ______________________________________________________________________
  94+ 6C97              //
  95+ 6C97              // user         b -- cccc     ( compile time )
  96+ 6C97              //              -- a          ( run time )
  97+ 6C97              // User variable definition
  98+ 6C97                              Colon_Def USER, "USER", is_normal
  98+ 6C97             >                New_Def  USER, "USER", Enter_Ptr, is_normal ; ok
  98+ 6C97             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  98+ 6C97             >
  98+ 6C97             >                // dummy db directives used to calculate length of namec
  98+ 6C97 55 53 45 52 >                db      "USER"
  98+ 6C9B             >len_NFA         defl    $ - temp_NFA
  98+ 6C9B             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  98+ 6C97             >
  98+ 6C97 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  98+ 6C98 55 53 45 52 >                db      "USER"               // name string in 7-bit ascii, but
  98+ 6C9C             >                org     $-1                 // alter last byte of Name just above to set
  98+ 6C9B D2          >                db      {b $} | END_BIT     // msb as name end
  98+ 6C9C             >
  98+ 6C9C 82 6C       >                dw      last_NFA            // Link to previous definition Name
  98+ 6C9E             >USER:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
  98+ 6C9E 3B 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
  98+ 6CA0             >                else
  98+ 6CA0 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
  98+ 6CA0             >                endif           ; ok        // for other definitions it "points" the correct handler
  98+ 6CA0             >                // Use of "; ok" to suppress "warning[fwdref]"
  98+ 6CA0             >
  98+ 6CA0             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  99+ 6CA0
 100+ 6CA0 92 76                        dw      CREATE                  // create
 101+ 6CA2 C2 6E                        dw      CCOMMA                  // c,
 102+ 6CA4 94 71                        dw      C_SEMICOLON_CODE        // ;code () changes the 3-bytes CFA to call User_Ptr )
 103+ 6CA6
 104+ 6CA6
 105+ 6CA6              User_Ptr:
 106+ 6CA6                              // via call coded in CFA
 107+ 6CA6 13                           inc     de
 108+ 6CA7 EB                           ex      de, hl
 109+ 6CA8 5E                           ld      e, (hl)
 110+ 6CA9 16 00                        ld      d, 0
 111+ 6CAB 2A 94 63                     ld      hl, (USER_Pointer)
 112+ 6CAE 19                           add     hl, de
 113+ 6CAF
 114+ 6CAF                              psh1
 114+ 6CAF E5          >                push    hl
 114+ 6CB0 DD E9       >                jp      (ix)
 115+ 6CB2
 116+ 6CB2              //  ______________________________________________________________________
 117+ 6CB2              //
 118+ 6CB2                              Constant_Def ZERO       ,   "0"     ,   0
 118+ 6CB2             >                New_Def  ZERO, "0", Constant_Ptr, is_normal
 118+ 6CB2             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 118+ 6CB2             >
 118+ 6CB2             >                // dummy db directives used to calculate length of namec
 118+ 6CB2 30          >                db      "0"
 118+ 6CB3             >len_NFA         defl    $ - temp_NFA
 118+ 6CB3             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 118+ 6CB2             >
 118+ 6CB2 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 118+ 6CB3 30          >                db      "0"               // name string in 7-bit ascii, but
 118+ 6CB4             >                org     $-1                 // alter last byte of Name just above to set
 118+ 6CB3 B0          >                db      {b $} | END_BIT     // msb as name end
 118+ 6CB4             >
 118+ 6CB4 97 6C       >                dw      last_NFA            // Link to previous definition Name
 118+ 6CB6             >ZERO:          if Constant_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 118+ 6CB6 7A 6C       >                dw      Constant_Ptr ; ok        // for primitive definitions  actual code
 118+ 6CB8             >                else
 118+ 6CB8 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 118+ 6CB8             >                endif           ; ok        // for other definitions it "points" the correct handler
 118+ 6CB8             >                // Use of "; ok" to suppress "warning[fwdref]"
 118+ 6CB8             >
 118+ 6CB8             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 118+ 6CB8 00 00       >                dw      0
 119+ 6CBA                              Constant_Def ONE        ,   "1"     ,   1
 119+ 6CBA             >                New_Def  ONE, "1", Constant_Ptr, is_normal
 119+ 6CBA             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 119+ 6CBA             >
 119+ 6CBA             >                // dummy db directives used to calculate length of namec
 119+ 6CBA 31          >                db      "1"
 119+ 6CBB             >len_NFA         defl    $ - temp_NFA
 119+ 6CBB             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 119+ 6CBA             >
 119+ 6CBA 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 119+ 6CBB 31          >                db      "1"               // name string in 7-bit ascii, but
 119+ 6CBC             >                org     $-1                 // alter last byte of Name just above to set
 119+ 6CBB B1          >                db      {b $} | END_BIT     // msb as name end
 119+ 6CBC             >
 119+ 6CBC B2 6C       >                dw      last_NFA            // Link to previous definition Name
 119+ 6CBE             >ONE:          if Constant_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 119+ 6CBE 7A 6C       >                dw      Constant_Ptr ; ok        // for primitive definitions  actual code
 119+ 6CC0             >                else
 119+ 6CC0 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 119+ 6CC0             >                endif           ; ok        // for other definitions it "points" the correct handler
 119+ 6CC0             >                // Use of "; ok" to suppress "warning[fwdref]"
 119+ 6CC0             >
 119+ 6CC0             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 119+ 6CC0 01 00       >                dw      1
 120+ 6CC2                              Constant_Def TWO        ,   "2"     ,   2
 120+ 6CC2             >                New_Def  TWO, "2", Constant_Ptr, is_normal
 120+ 6CC2             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 120+ 6CC2             >
 120+ 6CC2             >                // dummy db directives used to calculate length of namec
 120+ 6CC2 32          >                db      "2"
 120+ 6CC3             >len_NFA         defl    $ - temp_NFA
 120+ 6CC3             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 120+ 6CC2             >
 120+ 6CC2 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 120+ 6CC3 32          >                db      "2"               // name string in 7-bit ascii, but
 120+ 6CC4             >                org     $-1                 // alter last byte of Name just above to set
 120+ 6CC3 B2          >                db      {b $} | END_BIT     // msb as name end
 120+ 6CC4             >
 120+ 6CC4 BA 6C       >                dw      last_NFA            // Link to previous definition Name
 120+ 6CC6             >TWO:          if Constant_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 120+ 6CC6 7A 6C       >                dw      Constant_Ptr ; ok        // for primitive definitions  actual code
 120+ 6CC8             >                else
 120+ 6CC8 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 120+ 6CC8             >                endif           ; ok        // for other definitions it "points" the correct handler
 120+ 6CC8             >                // Use of "; ok" to suppress "warning[fwdref]"
 120+ 6CC8             >
 120+ 6CC8             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 120+ 6CC8 02 00       >                dw      2
 121+ 6CCA                              Constant_Def THREE      ,   "3"     ,   3
 121+ 6CCA             >                New_Def  THREE, "3", Constant_Ptr, is_normal
 121+ 6CCA             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 121+ 6CCA             >
 121+ 6CCA             >                // dummy db directives used to calculate length of namec
 121+ 6CCA 33          >                db      "3"
 121+ 6CCB             >len_NFA         defl    $ - temp_NFA
 121+ 6CCB             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 121+ 6CCA             >
 121+ 6CCA 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 121+ 6CCB 33          >                db      "3"               // name string in 7-bit ascii, but
 121+ 6CCC             >                org     $-1                 // alter last byte of Name just above to set
 121+ 6CCB B3          >                db      {b $} | END_BIT     // msb as name end
 121+ 6CCC             >
 121+ 6CCC C2 6C       >                dw      last_NFA            // Link to previous definition Name
 121+ 6CCE             >THREE:          if Constant_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 121+ 6CCE 7A 6C       >                dw      Constant_Ptr ; ok        // for primitive definitions  actual code
 121+ 6CD0             >                else
 121+ 6CD0 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 121+ 6CD0             >                endif           ; ok        // for other definitions it "points" the correct handler
 121+ 6CD0             >                // Use of "; ok" to suppress "warning[fwdref]"
 121+ 6CD0             >
 121+ 6CD0             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 121+ 6CD0 03 00       >                dw      3
 122+ 6CD2                              Constant_Def NEG_ONE    ,   "-1"    ,  -1
 122+ 6CD2             >                New_Def  NEG_ONE, "-1", Constant_Ptr, is_normal
 122+ 6CD2             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 122+ 6CD2             >
 122+ 6CD2             >                // dummy db directives used to calculate length of namec
 122+ 6CD2 2D 31       >                db      "-1"
 122+ 6CD4             >len_NFA         defl    $ - temp_NFA
 122+ 6CD4             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 122+ 6CD2             >
 122+ 6CD2 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 122+ 6CD3 2D 31       >                db      "-1"               // name string in 7-bit ascii, but
 122+ 6CD5             >                org     $-1                 // alter last byte of Name just above to set
 122+ 6CD4 B1          >                db      {b $} | END_BIT     // msb as name end
 122+ 6CD5             >
 122+ 6CD5 CA 6C       >                dw      last_NFA            // Link to previous definition Name
 122+ 6CD7             >NEG_ONE:          if Constant_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 122+ 6CD7 7A 6C       >                dw      Constant_Ptr ; ok        // for primitive definitions  actual code
 122+ 6CD9             >                else
 122+ 6CD9 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 122+ 6CD9             >                endif           ; ok        // for other definitions it "points" the correct handler
 122+ 6CD9             >                // Use of "; ok" to suppress "warning[fwdref]"
 122+ 6CD9             >
 122+ 6CD9             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 122+ 6CD9 FF FF       >                dw      -1
 123+ 6CDB                              Constant_Def BL         ,   "BL"    , $20
 123+ 6CDB             >                New_Def  BL, "BL", Constant_Ptr, is_normal
 123+ 6CDB             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 123+ 6CDB             >
 123+ 6CDB             >                // dummy db directives used to calculate length of namec
 123+ 6CDB 42 4C       >                db      "BL"
 123+ 6CDD             >len_NFA         defl    $ - temp_NFA
 123+ 6CDD             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 123+ 6CDB             >
 123+ 6CDB 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 123+ 6CDC 42 4C       >                db      "BL"               // name string in 7-bit ascii, but
 123+ 6CDE             >                org     $-1                 // alter last byte of Name just above to set
 123+ 6CDD CC          >                db      {b $} | END_BIT     // msb as name end
 123+ 6CDE             >
 123+ 6CDE D2 6C       >                dw      last_NFA            // Link to previous definition Name
 123+ 6CE0             >BL:          if Constant_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 123+ 6CE0 7A 6C       >                dw      Constant_Ptr ; ok        // for primitive definitions  actual code
 123+ 6CE2             >                else
 123+ 6CE2 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 123+ 6CE2             >                endif           ; ok        // for other definitions it "points" the correct handler
 123+ 6CE2             >                // Use of "; ok" to suppress "warning[fwdref]"
 123+ 6CE2             >
 123+ 6CE2             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 123+ 6CE2 20 00       >                dw      $20
 124+ 6CE4                              Constant_Def CL         ,   "C/L"   ,  64
 124+ 6CE4             >                New_Def  CL, "C/L", Constant_Ptr, is_normal
 124+ 6CE4             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 124+ 6CE4             >
 124+ 6CE4             >                // dummy db directives used to calculate length of namec
 124+ 6CE4 43 2F 4C    >                db      "C/L"
 124+ 6CE7             >len_NFA         defl    $ - temp_NFA
 124+ 6CE7             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 124+ 6CE4             >
 124+ 6CE4 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 124+ 6CE5 43 2F 4C    >                db      "C/L"               // name string in 7-bit ascii, but
 124+ 6CE8             >                org     $-1                 // alter last byte of Name just above to set
 124+ 6CE7 CC          >                db      {b $} | END_BIT     // msb as name end
 124+ 6CE8             >
 124+ 6CE8 DB 6C       >                dw      last_NFA            // Link to previous definition Name
 124+ 6CEA             >CL:          if Constant_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 124+ 6CEA 7A 6C       >                dw      Constant_Ptr ; ok        // for primitive definitions  actual code
 124+ 6CEC             >                else
 124+ 6CEC ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 124+ 6CEC             >                endif           ; ok        // for other definitions it "points" the correct handler
 124+ 6CEC             >                // Use of "; ok" to suppress "warning[fwdref]"
 124+ 6CEC             >
 124+ 6CEC             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 124+ 6CEC 40 00       >                dw      64
 125+ 6CEE                              Constant_Def BBUF       ,   "B/BUF" , 512
 125+ 6CEE             >                New_Def  BBUF, "B/BUF", Constant_Ptr, is_normal
 125+ 6CEE             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 125+ 6CEE             >
 125+ 6CEE             >                // dummy db directives used to calculate length of namec
 125+ 6CEE 42 2F 42 55 >                db      "B/BUF"
 125+ 6CF2 46          >
 125+ 6CF3             >len_NFA         defl    $ - temp_NFA
 125+ 6CF3             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 125+ 6CEE             >
 125+ 6CEE 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 125+ 6CEF 42 2F 42 55 >                db      "B/BUF"               // name string in 7-bit ascii, but
 125+ 6CF3 46          >
 125+ 6CF4             >                org     $-1                 // alter last byte of Name just above to set
 125+ 6CF3 C6          >                db      {b $} | END_BIT     // msb as name end
 125+ 6CF4             >
 125+ 6CF4 E4 6C       >                dw      last_NFA            // Link to previous definition Name
 125+ 6CF6             >BBUF:          if Constant_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 125+ 6CF6 7A 6C       >                dw      Constant_Ptr ; ok        // for primitive definitions  actual code
 125+ 6CF8             >                else
 125+ 6CF8 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 125+ 6CF8             >                endif           ; ok        // for other definitions it "points" the correct handler
 125+ 6CF8             >                // Use of "; ok" to suppress "warning[fwdref]"
 125+ 6CF8             >
 125+ 6CF8             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 125+ 6CF8 00 02       >                dw      512
 126+ 6CFA                              Constant_Def BSCR       ,   "B/SCR" ,   2
 126+ 6CFA             >                New_Def  BSCR, "B/SCR", Constant_Ptr, is_normal
 126+ 6CFA             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 126+ 6CFA             >
 126+ 6CFA             >                // dummy db directives used to calculate length of namec
 126+ 6CFA 42 2F 53 43 >                db      "B/SCR"
 126+ 6CFE 52          >
 126+ 6CFF             >len_NFA         defl    $ - temp_NFA
 126+ 6CFF             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 126+ 6CFA             >
 126+ 6CFA 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 126+ 6CFB 42 2F 53 43 >                db      "B/SCR"               // name string in 7-bit ascii, but
 126+ 6CFF 52          >
 126+ 6D00             >                org     $-1                 // alter last byte of Name just above to set
 126+ 6CFF D2          >                db      {b $} | END_BIT     // msb as name end
 126+ 6D00             >
 126+ 6D00 EE 6C       >                dw      last_NFA            // Link to previous definition Name
 126+ 6D02             >BSCR:          if Constant_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 126+ 6D02 7A 6C       >                dw      Constant_Ptr ; ok        // for primitive definitions  actual code
 126+ 6D04             >                else
 126+ 6D04 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 126+ 6D04             >                endif           ; ok        // for other definitions it "points" the correct handler
 126+ 6D04             >                // Use of "; ok" to suppress "warning[fwdref]"
 126+ 6D04             >
 126+ 6D04             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 126+ 6D04 02 00       >                dw      2
 127+ 6D06                              Constant_Def LSCR       ,   "L/SCR" ,  16
 127+ 6D06             >                New_Def  LSCR, "L/SCR", Constant_Ptr, is_normal
 127+ 6D06             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 127+ 6D06             >
 127+ 6D06             >                // dummy db directives used to calculate length of namec
 127+ 6D06 4C 2F 53 43 >                db      "L/SCR"
 127+ 6D0A 52          >
 127+ 6D0B             >len_NFA         defl    $ - temp_NFA
 127+ 6D0B             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 127+ 6D06             >
 127+ 6D06 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 127+ 6D07 4C 2F 53 43 >                db      "L/SCR"               // name string in 7-bit ascii, but
 127+ 6D0B 52          >
 127+ 6D0C             >                org     $-1                 // alter last byte of Name just above to set
 127+ 6D0B D2          >                db      {b $} | END_BIT     // msb as name end
 127+ 6D0C             >
 127+ 6D0C FA 6C       >                dw      last_NFA            // Link to previous definition Name
 127+ 6D0E             >LSCR:          if Constant_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 127+ 6D0E 7A 6C       >                dw      Constant_Ptr ; ok        // for primitive definitions  actual code
 127+ 6D10             >                else
 127+ 6D10 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 127+ 6D10             >                endif           ; ok        // for other definitions it "points" the correct handler
 127+ 6D10             >                // Use of "; ok" to suppress "warning[fwdref]"
 127+ 6D10             >
 127+ 6D10             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 127+ 6D10 10 00       >                dw      16
 128+ 6D12
 129+ 6D12              //  ______________________________________________________________________
 130+ 6D12              //
 131+ 6D12              // +origin         --
 132+ 6D12                              Colon_Def PLUS_ORIGIN, "+ORIGIN", is_normal
 132+ 6D12             >                New_Def  PLUS_ORIGIN, "+ORIGIN", Enter_Ptr, is_normal ; ok
 132+ 6D12             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 132+ 6D12             >
 132+ 6D12             >                // dummy db directives used to calculate length of namec
 132+ 6D12 2B 4F 52 49 >                db      "+ORIGIN"
 132+ 6D16 47 49 4E    >
 132+ 6D19             >len_NFA         defl    $ - temp_NFA
 132+ 6D19             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 132+ 6D12             >
 132+ 6D12 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 132+ 6D13 2B 4F 52 49 >                db      "+ORIGIN"               // name string in 7-bit ascii, but
 132+ 6D17 47 49 4E    >
 132+ 6D1A             >                org     $-1                 // alter last byte of Name just above to set
 132+ 6D19 CE          >                db      {b $} | END_BIT     // msb as name end
 132+ 6D1A             >
 132+ 6D1A 06 6D       >                dw      last_NFA            // Link to previous definition Name
 132+ 6D1C             >PLUS_ORIGIN:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 132+ 6D1C 3B 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 132+ 6D1E             >                else
 132+ 6D1E ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 132+ 6D1E             >                endif           ; ok        // for other definitions it "points" the correct handler
 132+ 6D1E             >                // Use of "; ok" to suppress "warning[fwdref]"
 132+ 6D1E             >
 132+ 6D1E             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 133+ 6D1E A9 63 66 63                  dw      LIT, Cold_origin        // [ hex 6366 ] literal
 134+ 6D22 CB 69                        dw      PLUS                    // +
 135+ 6D24 25 69                        dw      EXIT                    // ;
 136+ 6D26
 137+ 6D26              //  ______________________________________________________________________
 138+ 6D26              //
 139+ 6D26                              Constant_Def CNEXT      ,   "(NEXT)", Next_Ptr
 139+ 6D26             >                New_Def  CNEXT, "(NEXT)", Constant_Ptr, is_normal
 139+ 6D26             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 139+ 6D26             >
 139+ 6D26             >                // dummy db directives used to calculate length of namec
 139+ 6D26 28 4E 45 58 >                db      "(NEXT)"
 139+ 6D2A 54 29       >
 139+ 6D2C             >len_NFA         defl    $ - temp_NFA
 139+ 6D2C             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 139+ 6D26             >
 139+ 6D26 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 139+ 6D27 28 4E 45 58 >                db      "(NEXT)"               // name string in 7-bit ascii, but
 139+ 6D2B 54 29       >
 139+ 6D2D             >                org     $-1                 // alter last byte of Name just above to set
 139+ 6D2C A9          >                db      {b $} | END_BIT     // msb as name end
 139+ 6D2D             >
 139+ 6D2D 12 6D       >                dw      last_NFA            // Link to previous definition Name
 139+ 6D2F             >CNEXT:          if Constant_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 139+ 6D2F 7A 6C       >                dw      Constant_Ptr ; ok        // for primitive definitions  actual code
 139+ 6D31             >                else
 139+ 6D31 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 139+ 6D31             >                endif           ; ok        // for other definitions it "points" the correct handler
 139+ 6D31             >                // Use of "; ok" to suppress "warning[fwdref]"
 139+ 6D31             >
 139+ 6D31             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 139+ 6D31 98 63       >                dw      Next_Ptr
 140+ 6D33
 141+ 6D33              //  ______________________________________________________________________
 142+ 6D33              //
 143+ 6D33
 144+ 6D33                              User_Def S0         , "S0"        , 06 // starting value of Stack-Pointer
 144+ 6D33             >                New_Def  S0, "S0", User_Ptr, is_normal
 144+ 6D33             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 144+ 6D33             >
 144+ 6D33             >                // dummy db directives used to calculate length of namec
 144+ 6D33 53 30       >                db      "S0"
 144+ 6D35             >len_NFA         defl    $ - temp_NFA
 144+ 6D35             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 144+ 6D33             >
 144+ 6D33 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 144+ 6D34 53 30       >                db      "S0"               // name string in 7-bit ascii, but
 144+ 6D36             >                org     $-1                 // alter last byte of Name just above to set
 144+ 6D35 B0          >                db      {b $} | END_BIT     // msb as name end
 144+ 6D36             >
 144+ 6D36 26 6D       >                dw      last_NFA            // Link to previous definition Name
 144+ 6D38             >S0:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 144+ 6D38 A6 6C       >                dw      User_Ptr ; ok        // for primitive definitions  actual code
 144+ 6D3A             >                else
 144+ 6D3A ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 144+ 6D3A             >                endif           ; ok        // for other definitions it "points" the correct handler
 144+ 6D3A             >                // Use of "; ok" to suppress "warning[fwdref]"
 144+ 6D3A             >
 144+ 6D3A             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 144+ 6D3A 06          >                db      06
 145+ 6D3B                              User_Def R0         , "R0"        , 08 // starting value of Return-Pointer
 145+ 6D3B             >                New_Def  R0, "R0", User_Ptr, is_normal
 145+ 6D3B             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 145+ 6D3B             >
 145+ 6D3B             >                // dummy db directives used to calculate length of namec
 145+ 6D3B 52 30       >                db      "R0"
 145+ 6D3D             >len_NFA         defl    $ - temp_NFA
 145+ 6D3D             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 145+ 6D3B             >
 145+ 6D3B 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 145+ 6D3C 52 30       >                db      "R0"               // name string in 7-bit ascii, but
 145+ 6D3E             >                org     $-1                 // alter last byte of Name just above to set
 145+ 6D3D B0          >                db      {b $} | END_BIT     // msb as name end
 145+ 6D3E             >
 145+ 6D3E 33 6D       >                dw      last_NFA            // Link to previous definition Name
 145+ 6D40             >R0:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 145+ 6D40 A6 6C       >                dw      User_Ptr ; ok        // for primitive definitions  actual code
 145+ 6D42             >                else
 145+ 6D42 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 145+ 6D42             >                endif           ; ok        // for other definitions it "points" the correct handler
 145+ 6D42             >                // Use of "; ok" to suppress "warning[fwdref]"
 145+ 6D42             >
 145+ 6D42             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 145+ 6D42 08          >                db      08
 146+ 6D43                              User_Def TIB        , "TIB"       , 10 // input terminal buffer address
 146+ 6D43             >                New_Def  TIB, "TIB", User_Ptr, is_normal
 146+ 6D43             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 146+ 6D43             >
 146+ 6D43             >                // dummy db directives used to calculate length of namec
 146+ 6D43 54 49 42    >                db      "TIB"
 146+ 6D46             >len_NFA         defl    $ - temp_NFA
 146+ 6D46             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 146+ 6D43             >
 146+ 6D43 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 146+ 6D44 54 49 42    >                db      "TIB"               // name string in 7-bit ascii, but
 146+ 6D47             >                org     $-1                 // alter last byte of Name just above to set
 146+ 6D46 C2          >                db      {b $} | END_BIT     // msb as name end
 146+ 6D47             >
 146+ 6D47 3B 6D       >                dw      last_NFA            // Link to previous definition Name
 146+ 6D49             >TIB:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 146+ 6D49 A6 6C       >                dw      User_Ptr ; ok        // for primitive definitions  actual code
 146+ 6D4B             >                else
 146+ 6D4B ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 146+ 6D4B             >                endif           ; ok        // for other definitions it "points" the correct handler
 146+ 6D4B             >                // Use of "; ok" to suppress "warning[fwdref]"
 146+ 6D4B             >
 146+ 6D4B             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 146+ 6D4B 0A          >                db      10
 147+ 6D4C                              User_Def WIDTH      , "WIDTH"     , 12 // maximum number of characters for a word name
 147+ 6D4C             >                New_Def  WIDTH, "WIDTH", User_Ptr, is_normal
 147+ 6D4C             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 147+ 6D4C             >
 147+ 6D4C             >                // dummy db directives used to calculate length of namec
 147+ 6D4C 57 49 44 54 >                db      "WIDTH"
 147+ 6D50 48          >
 147+ 6D51             >len_NFA         defl    $ - temp_NFA
 147+ 6D51             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 147+ 6D4C             >
 147+ 6D4C 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 147+ 6D4D 57 49 44 54 >                db      "WIDTH"               // name string in 7-bit ascii, but
 147+ 6D51 48          >
 147+ 6D52             >                org     $-1                 // alter last byte of Name just above to set
 147+ 6D51 C8          >                db      {b $} | END_BIT     // msb as name end
 147+ 6D52             >
 147+ 6D52 43 6D       >                dw      last_NFA            // Link to previous definition Name
 147+ 6D54             >WIDTH:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 147+ 6D54 A6 6C       >                dw      User_Ptr ; ok        // for primitive definitions  actual code
 147+ 6D56             >                else
 147+ 6D56 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 147+ 6D56             >                endif           ; ok        // for other definitions it "points" the correct handler
 147+ 6D56             >                // Use of "; ok" to suppress "warning[fwdref]"
 147+ 6D56             >
 147+ 6D56             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 147+ 6D56 0C          >                db      12
 148+ 6D57                              User_Def WARNING    , "WARNING"   , 14 // error reporting method: 0 base, 1 verbose
 148+ 6D57             >                New_Def  WARNING, "WARNING", User_Ptr, is_normal
 148+ 6D57             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 148+ 6D57             >
 148+ 6D57             >                // dummy db directives used to calculate length of namec
 148+ 6D57 57 41 52 4E >                db      "WARNING"
 148+ 6D5B 49 4E 47    >
 148+ 6D5E             >len_NFA         defl    $ - temp_NFA
 148+ 6D5E             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 148+ 6D57             >
 148+ 6D57 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 148+ 6D58 57 41 52 4E >                db      "WARNING"               // name string in 7-bit ascii, but
 148+ 6D5C 49 4E 47    >
 148+ 6D5F             >                org     $-1                 // alter last byte of Name just above to set
 148+ 6D5E C7          >                db      {b $} | END_BIT     // msb as name end
 148+ 6D5F             >
 148+ 6D5F 4C 6D       >                dw      last_NFA            // Link to previous definition Name
 148+ 6D61             >WARNING:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 148+ 6D61 A6 6C       >                dw      User_Ptr ; ok        // for primitive definitions  actual code
 148+ 6D63             >                else
 148+ 6D63 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 148+ 6D63             >                endif           ; ok        // for other definitions it "points" the correct handler
 148+ 6D63             >                // Use of "; ok" to suppress "warning[fwdref]"
 148+ 6D63             >
 148+ 6D63             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 148+ 6D63 0E          >                db      14
 149+ 6D64                              User_Def FENCE      , "FENCE"     , 16 // minimum address where FORGET can work
 149+ 6D64             >                New_Def  FENCE, "FENCE", User_Ptr, is_normal
 149+ 6D64             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 149+ 6D64             >
 149+ 6D64             >                // dummy db directives used to calculate length of namec
 149+ 6D64 46 45 4E 43 >                db      "FENCE"
 149+ 6D68 45          >
 149+ 6D69             >len_NFA         defl    $ - temp_NFA
 149+ 6D69             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 149+ 6D64             >
 149+ 6D64 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 149+ 6D65 46 45 4E 43 >                db      "FENCE"               // name string in 7-bit ascii, but
 149+ 6D69 45          >
 149+ 6D6A             >                org     $-1                 // alter last byte of Name just above to set
 149+ 6D69 C5          >                db      {b $} | END_BIT     // msb as name end
 149+ 6D6A             >
 149+ 6D6A 57 6D       >                dw      last_NFA            // Link to previous definition Name
 149+ 6D6C             >FENCE:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 149+ 6D6C A6 6C       >                dw      User_Ptr ; ok        // for primitive definitions  actual code
 149+ 6D6E             >                else
 149+ 6D6E ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 149+ 6D6E             >                endif           ; ok        // for other definitions it "points" the correct handler
 149+ 6D6E             >                // Use of "; ok" to suppress "warning[fwdref]"
 149+ 6D6E             >
 149+ 6D6E             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 149+ 6D6E 10          >                db      16
 150+ 6D6F                              User_Def DP         , "DP"        , 18 // Dictionary Pointer
 150+ 6D6F             >                New_Def  DP, "DP", User_Ptr, is_normal
 150+ 6D6F             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 150+ 6D6F             >
 150+ 6D6F             >                // dummy db directives used to calculate length of namec
 150+ 6D6F 44 50       >                db      "DP"
 150+ 6D71             >len_NFA         defl    $ - temp_NFA
 150+ 6D71             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 150+ 6D6F             >
 150+ 6D6F 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 150+ 6D70 44 50       >                db      "DP"               // name string in 7-bit ascii, but
 150+ 6D72             >                org     $-1                 // alter last byte of Name just above to set
 150+ 6D71 D0          >                db      {b $} | END_BIT     // msb as name end
 150+ 6D72             >
 150+ 6D72 64 6D       >                dw      last_NFA            // Link to previous definition Name
 150+ 6D74             >DP:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 150+ 6D74 A6 6C       >                dw      User_Ptr ; ok        // for primitive definitions  actual code
 150+ 6D76             >                else
 150+ 6D76 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 150+ 6D76             >                endif           ; ok        // for other definitions it "points" the correct handler
 150+ 6D76             >                // Use of "; ok" to suppress "warning[fwdref]"
 150+ 6D76             >
 150+ 6D76             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 150+ 6D76 12          >                db      18
 151+ 6D77                              User_Def VOC_LINK   , "VOC-LINK"  , 20 // pointer to the latest vocabulary
 151+ 6D77             >                New_Def  VOC_LINK, "VOC-LINK", User_Ptr, is_normal
 151+ 6D77             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 151+ 6D77             >
 151+ 6D77             >                // dummy db directives used to calculate length of namec
 151+ 6D77 56 4F 43 2D >                db      "VOC-LINK"
 151+ 6D7B 4C 49 4E 4B >
 151+ 6D7F             >len_NFA         defl    $ - temp_NFA
 151+ 6D7F             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 151+ 6D77             >
 151+ 6D77 88          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 151+ 6D78 56 4F 43 2D >                db      "VOC-LINK"               // name string in 7-bit ascii, but
 151+ 6D7C 4C 49 4E 4B >
 151+ 6D80             >                org     $-1                 // alter last byte of Name just above to set
 151+ 6D7F CB          >                db      {b $} | END_BIT     // msb as name end
 151+ 6D80             >
 151+ 6D80 6F 6D       >                dw      last_NFA            // Link to previous definition Name
 151+ 6D82             >VOC_LINK:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 151+ 6D82 A6 6C       >                dw      User_Ptr ; ok        // for primitive definitions  actual code
 151+ 6D84             >                else
 151+ 6D84 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 151+ 6D84             >                endif           ; ok        // for other definitions it "points" the correct handler
 151+ 6D84             >                // Use of "; ok" to suppress "warning[fwdref]"
 151+ 6D84             >
 151+ 6D84             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 151+ 6D84 14          >                db      20
 152+ 6D85                              User_Def FIRST      , "FIRST"     , 22 // address of first buffer
 152+ 6D85             >                New_Def  FIRST, "FIRST", User_Ptr, is_normal
 152+ 6D85             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 152+ 6D85             >
 152+ 6D85             >                // dummy db directives used to calculate length of namec
 152+ 6D85 46 49 52 53 >                db      "FIRST"
 152+ 6D89 54          >
 152+ 6D8A             >len_NFA         defl    $ - temp_NFA
 152+ 6D8A             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 152+ 6D85             >
 152+ 6D85 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 152+ 6D86 46 49 52 53 >                db      "FIRST"               // name string in 7-bit ascii, but
 152+ 6D8A 54          >
 152+ 6D8B             >                org     $-1                 // alter last byte of Name just above to set
 152+ 6D8A D4          >                db      {b $} | END_BIT     // msb as name end
 152+ 6D8B             >
 152+ 6D8B 77 6D       >                dw      last_NFA            // Link to previous definition Name
 152+ 6D8D             >FIRST:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 152+ 6D8D A6 6C       >                dw      User_Ptr ; ok        // for primitive definitions  actual code
 152+ 6D8F             >                else
 152+ 6D8F ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 152+ 6D8F             >                endif           ; ok        // for other definitions it "points" the correct handler
 152+ 6D8F             >                // Use of "; ok" to suppress "warning[fwdref]"
 152+ 6D8F             >
 152+ 6D8F             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 152+ 6D8F 16          >                db      22
 153+ 6D90                              User_Def LIMIT      , "LIMIT"     , 24 // address of last buffer
 153+ 6D90             >                New_Def  LIMIT, "LIMIT", User_Ptr, is_normal
 153+ 6D90             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 153+ 6D90             >
 153+ 6D90             >                // dummy db directives used to calculate length of namec
 153+ 6D90 4C 49 4D 49 >                db      "LIMIT"
 153+ 6D94 54          >
 153+ 6D95             >len_NFA         defl    $ - temp_NFA
 153+ 6D95             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 153+ 6D90             >
 153+ 6D90 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 153+ 6D91 4C 49 4D 49 >                db      "LIMIT"               // name string in 7-bit ascii, but
 153+ 6D95 54          >
 153+ 6D96             >                org     $-1                 // alter last byte of Name just above to set
 153+ 6D95 D4          >                db      {b $} | END_BIT     // msb as name end
 153+ 6D96             >
 153+ 6D96 85 6D       >                dw      last_NFA            // Link to previous definition Name
 153+ 6D98             >LIMIT:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 153+ 6D98 A6 6C       >                dw      User_Ptr ; ok        // for primitive definitions  actual code
 153+ 6D9A             >                else
 153+ 6D9A ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 153+ 6D9A             >                endif           ; ok        // for other definitions it "points" the correct handler
 153+ 6D9A             >                // Use of "; ok" to suppress "warning[fwdref]"
 153+ 6D9A             >
 153+ 6D9A             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 153+ 6D9A 18          >                db      24
 154+ 6D9B                              User_Def EXP        , "EXP"       , 26 // keeps the exponent in number conversion
 154+ 6D9B             >                New_Def  EXP, "EXP", User_Ptr, is_normal
 154+ 6D9B             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 154+ 6D9B             >
 154+ 6D9B             >                // dummy db directives used to calculate length of namec
 154+ 6D9B 45 58 50    >                db      "EXP"
 154+ 6D9E             >len_NFA         defl    $ - temp_NFA
 154+ 6D9E             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 154+ 6D9B             >
 154+ 6D9B 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 154+ 6D9C 45 58 50    >                db      "EXP"               // name string in 7-bit ascii, but
 154+ 6D9F             >                org     $-1                 // alter last byte of Name just above to set
 154+ 6D9E D0          >                db      {b $} | END_BIT     // msb as name end
 154+ 6D9F             >
 154+ 6D9F 90 6D       >                dw      last_NFA            // Link to previous definition Name
 154+ 6DA1             >EXP:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 154+ 6DA1 A6 6C       >                dw      User_Ptr ; ok        // for primitive definitions  actual code
 154+ 6DA3             >                else
 154+ 6DA3 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 154+ 6DA3             >                endif           ; ok        // for other definitions it "points" the correct handler
 154+ 6DA3             >                // Use of "; ok" to suppress "warning[fwdref]"
 154+ 6DA3             >
 154+ 6DA3             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 154+ 6DA3 1A          >                db      26
 155+ 6DA4                              User_Def NMODE      , "NMODE"     , 28 // number mode: 0 integer, 1 floating point
 155+ 6DA4             >                New_Def  NMODE, "NMODE", User_Ptr, is_normal
 155+ 6DA4             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 155+ 6DA4             >
 155+ 6DA4             >                // dummy db directives used to calculate length of namec
 155+ 6DA4 4E 4D 4F 44 >                db      "NMODE"
 155+ 6DA8 45          >
 155+ 6DA9             >len_NFA         defl    $ - temp_NFA
 155+ 6DA9             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 155+ 6DA4             >
 155+ 6DA4 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 155+ 6DA5 4E 4D 4F 44 >                db      "NMODE"               // name string in 7-bit ascii, but
 155+ 6DA9 45          >
 155+ 6DAA             >                org     $-1                 // alter last byte of Name just above to set
 155+ 6DA9 C5          >                db      {b $} | END_BIT     // msb as name end
 155+ 6DAA             >
 155+ 6DAA 9B 6D       >                dw      last_NFA            // Link to previous definition Name
 155+ 6DAC             >NMODE:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 155+ 6DAC A6 6C       >                dw      User_Ptr ; ok        // for primitive definitions  actual code
 155+ 6DAE             >                else
 155+ 6DAE ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 155+ 6DAE             >                endif           ; ok        // for other definitions it "points" the correct handler
 155+ 6DAE             >                // Use of "; ok" to suppress "warning[fwdref]"
 155+ 6DAE             >
 155+ 6DAE             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 155+ 6DAE 1C          >                db      28
 156+ 6DAF                              User_Def BLK        , "BLK"       , 30 // block number to be interpreted. 0 for terminal
 156+ 6DAF             >                New_Def  BLK, "BLK", User_Ptr, is_normal
 156+ 6DAF             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 156+ 6DAF             >
 156+ 6DAF             >                // dummy db directives used to calculate length of namec
 156+ 6DAF 42 4C 4B    >                db      "BLK"
 156+ 6DB2             >len_NFA         defl    $ - temp_NFA
 156+ 6DB2             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 156+ 6DAF             >
 156+ 6DAF 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 156+ 6DB0 42 4C 4B    >                db      "BLK"               // name string in 7-bit ascii, but
 156+ 6DB3             >                org     $-1                 // alter last byte of Name just above to set
 156+ 6DB2 CB          >                db      {b $} | END_BIT     // msb as name end
 156+ 6DB3             >
 156+ 6DB3 A4 6D       >                dw      last_NFA            // Link to previous definition Name
 156+ 6DB5             >BLK:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 156+ 6DB5 A6 6C       >                dw      User_Ptr ; ok        // for primitive definitions  actual code
 156+ 6DB7             >                else
 156+ 6DB7 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 156+ 6DB7             >                endif           ; ok        // for other definitions it "points" the correct handler
 156+ 6DB7             >                // Use of "; ok" to suppress "warning[fwdref]"
 156+ 6DB7             >
 156+ 6DB7             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 156+ 6DB7 1E          >                db      30
 157+ 6DB8                              User_Def TO_IN      , ">IN"       , 32 // incremented when consuming input buffer
 157+ 6DB8             >                New_Def  TO_IN, ">IN", User_Ptr, is_normal
 157+ 6DB8             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 157+ 6DB8             >
 157+ 6DB8             >                // dummy db directives used to calculate length of namec
 157+ 6DB8 3E 49 4E    >                db      ">IN"
 157+ 6DBB             >len_NFA         defl    $ - temp_NFA
 157+ 6DBB             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 157+ 6DB8             >
 157+ 6DB8 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 157+ 6DB9 3E 49 4E    >                db      ">IN"               // name string in 7-bit ascii, but
 157+ 6DBC             >                org     $-1                 // alter last byte of Name just above to set
 157+ 6DBB CE          >                db      {b $} | END_BIT     // msb as name end
 157+ 6DBC             >
 157+ 6DBC AF 6D       >                dw      last_NFA            // Link to previous definition Name
 157+ 6DBE             >TO_IN:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 157+ 6DBE A6 6C       >                dw      User_Ptr ; ok        // for primitive definitions  actual code
 157+ 6DC0             >                else
 157+ 6DC0 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 157+ 6DC0             >                endif           ; ok        // for other definitions it "points" the correct handler
 157+ 6DC0             >                // Use of "; ok" to suppress "warning[fwdref]"
 157+ 6DC0             >
 157+ 6DC0             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 157+ 6DC0 20          >                db      32
 158+ 6DC1                              User_Def OUT        , "OUT"       , 34 // incremented when sending to output
 158+ 6DC1             >                New_Def  OUT, "OUT", User_Ptr, is_normal
 158+ 6DC1             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 158+ 6DC1             >
 158+ 6DC1             >                // dummy db directives used to calculate length of namec
 158+ 6DC1 4F 55 54    >                db      "OUT"
 158+ 6DC4             >len_NFA         defl    $ - temp_NFA
 158+ 6DC4             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 158+ 6DC1             >
 158+ 6DC1 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 158+ 6DC2 4F 55 54    >                db      "OUT"               // name string in 7-bit ascii, but
 158+ 6DC5             >                org     $-1                 // alter last byte of Name just above to set
 158+ 6DC4 D4          >                db      {b $} | END_BIT     // msb as name end
 158+ 6DC5             >
 158+ 6DC5 B8 6D       >                dw      last_NFA            // Link to previous definition Name
 158+ 6DC7             >OUT:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 158+ 6DC7 A6 6C       >                dw      User_Ptr ; ok        // for primitive definitions  actual code
 158+ 6DC9             >                else
 158+ 6DC9 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 158+ 6DC9             >                endif           ; ok        // for other definitions it "points" the correct handler
 158+ 6DC9             >                // Use of "; ok" to suppress "warning[fwdref]"
 158+ 6DC9             >
 158+ 6DC9             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 158+ 6DC9 22          >                db      34
 159+ 6DCA                              User_Def SCR        , "SCR"       , 36 // latest screen retreieved by LIST
 159+ 6DCA             >                New_Def  SCR, "SCR", User_Ptr, is_normal
 159+ 6DCA             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 159+ 6DCA             >
 159+ 6DCA             >                // dummy db directives used to calculate length of namec
 159+ 6DCA 53 43 52    >                db      "SCR"
 159+ 6DCD             >len_NFA         defl    $ - temp_NFA
 159+ 6DCD             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 159+ 6DCA             >
 159+ 6DCA 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 159+ 6DCB 53 43 52    >                db      "SCR"               // name string in 7-bit ascii, but
 159+ 6DCE             >                org     $-1                 // alter last byte of Name just above to set
 159+ 6DCD D2          >                db      {b $} | END_BIT     // msb as name end
 159+ 6DCE             >
 159+ 6DCE C1 6D       >                dw      last_NFA            // Link to previous definition Name
 159+ 6DD0             >SCR:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 159+ 6DD0 A6 6C       >                dw      User_Ptr ; ok        // for primitive definitions  actual code
 159+ 6DD2             >                else
 159+ 6DD2 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 159+ 6DD2             >                endif           ; ok        // for other definitions it "points" the correct handler
 159+ 6DD2             >                // Use of "; ok" to suppress "warning[fwdref]"
 159+ 6DD2             >
 159+ 6DD2             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 159+ 6DD2 24          >                db      36
 160+ 6DD3                              User_Def OFFSET     , "OFFSET"    , 38 //
 160+ 6DD3             >                New_Def  OFFSET, "OFFSET", User_Ptr, is_normal
 160+ 6DD3             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 160+ 6DD3             >
 160+ 6DD3             >                // dummy db directives used to calculate length of namec
 160+ 6DD3 4F 46 46 53 >                db      "OFFSET"
 160+ 6DD7 45 54       >
 160+ 6DD9             >len_NFA         defl    $ - temp_NFA
 160+ 6DD9             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 160+ 6DD3             >
 160+ 6DD3 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 160+ 6DD4 4F 46 46 53 >                db      "OFFSET"               // name string in 7-bit ascii, but
 160+ 6DD8 45 54       >
 160+ 6DDA             >                org     $-1                 // alter last byte of Name just above to set
 160+ 6DD9 D4          >                db      {b $} | END_BIT     // msb as name end
 160+ 6DDA             >
 160+ 6DDA CA 6D       >                dw      last_NFA            // Link to previous definition Name
 160+ 6DDC             >OFFSET:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 160+ 6DDC A6 6C       >                dw      User_Ptr ; ok        // for primitive definitions  actual code
 160+ 6DDE             >                else
 160+ 6DDE ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 160+ 6DDE             >                endif           ; ok        // for other definitions it "points" the correct handler
 160+ 6DDE             >                // Use of "; ok" to suppress "warning[fwdref]"
 160+ 6DDE             >
 160+ 6DDE             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 160+ 6DDE 26          >                db      38
 161+ 6DDF                              User_Def CONTEXT    , "CONTEXT"   , 40 // pointer to the vocabulary where search begins
 161+ 6DDF             >                New_Def  CONTEXT, "CONTEXT", User_Ptr, is_normal
 161+ 6DDF             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 161+ 6DDF             >
 161+ 6DDF             >                // dummy db directives used to calculate length of namec
 161+ 6DDF 43 4F 4E 54 >                db      "CONTEXT"
 161+ 6DE3 45 58 54    >
 161+ 6DE6             >len_NFA         defl    $ - temp_NFA
 161+ 6DE6             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 161+ 6DDF             >
 161+ 6DDF 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 161+ 6DE0 43 4F 4E 54 >                db      "CONTEXT"               // name string in 7-bit ascii, but
 161+ 6DE4 45 58 54    >
 161+ 6DE7             >                org     $-1                 // alter last byte of Name just above to set
 161+ 6DE6 D4          >                db      {b $} | END_BIT     // msb as name end
 161+ 6DE7             >
 161+ 6DE7 D3 6D       >                dw      last_NFA            // Link to previous definition Name
 161+ 6DE9             >CONTEXT:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 161+ 6DE9 A6 6C       >                dw      User_Ptr ; ok        // for primitive definitions  actual code
 161+ 6DEB             >                else
 161+ 6DEB ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 161+ 6DEB             >                endif           ; ok        // for other definitions it "points" the correct handler
 161+ 6DEB             >                // Use of "; ok" to suppress "warning[fwdref]"
 161+ 6DEB             >
 161+ 6DEB             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 161+ 6DEB 28          >                db      40
 162+ 6DEC                              User_Def CURRENT    , "CURRENT"   , 42 // pointer to the vocabulary where search continues
 162+ 6DEC             >                New_Def  CURRENT, "CURRENT", User_Ptr, is_normal
 162+ 6DEC             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 162+ 6DEC             >
 162+ 6DEC             >                // dummy db directives used to calculate length of namec
 162+ 6DEC 43 55 52 52 >                db      "CURRENT"
 162+ 6DF0 45 4E 54    >
 162+ 6DF3             >len_NFA         defl    $ - temp_NFA
 162+ 6DF3             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 162+ 6DEC             >
 162+ 6DEC 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 162+ 6DED 43 55 52 52 >                db      "CURRENT"               // name string in 7-bit ascii, but
 162+ 6DF1 45 4E 54    >
 162+ 6DF4             >                org     $-1                 // alter last byte of Name just above to set
 162+ 6DF3 D4          >                db      {b $} | END_BIT     // msb as name end
 162+ 6DF4             >
 162+ 6DF4 DF 6D       >                dw      last_NFA            // Link to previous definition Name
 162+ 6DF6             >CURRENT:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 162+ 6DF6 A6 6C       >                dw      User_Ptr ; ok        // for primitive definitions  actual code
 162+ 6DF8             >                else
 162+ 6DF8 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 162+ 6DF8             >                endif           ; ok        // for other definitions it "points" the correct handler
 162+ 6DF8             >                // Use of "; ok" to suppress "warning[fwdref]"
 162+ 6DF8             >
 162+ 6DF8             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 162+ 6DF8 2A          >                db      42
 163+ 6DF9                              User_Def STATE      , "STATE"     , 44 // compilation status. 0 interpreting.
 163+ 6DF9             >                New_Def  STATE, "STATE", User_Ptr, is_normal
 163+ 6DF9             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 163+ 6DF9             >
 163+ 6DF9             >                // dummy db directives used to calculate length of namec
 163+ 6DF9 53 54 41 54 >                db      "STATE"
 163+ 6DFD 45          >
 163+ 6DFE             >len_NFA         defl    $ - temp_NFA
 163+ 6DFE             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 163+ 6DF9             >
 163+ 6DF9 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 163+ 6DFA 53 54 41 54 >                db      "STATE"               // name string in 7-bit ascii, but
 163+ 6DFE 45          >
 163+ 6DFF             >                org     $-1                 // alter last byte of Name just above to set
 163+ 6DFE C5          >                db      {b $} | END_BIT     // msb as name end
 163+ 6DFF             >
 163+ 6DFF EC 6D       >                dw      last_NFA            // Link to previous definition Name
 163+ 6E01             >STATE:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 163+ 6E01 A6 6C       >                dw      User_Ptr ; ok        // for primitive definitions  actual code
 163+ 6E03             >                else
 163+ 6E03 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 163+ 6E03             >                endif           ; ok        // for other definitions it "points" the correct handler
 163+ 6E03             >                // Use of "; ok" to suppress "warning[fwdref]"
 163+ 6E03             >
 163+ 6E03             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 163+ 6E03 2C          >                db      44
 164+ 6E04                              User_Def BASE       , "BASE"      , 46 //
 164+ 6E04             >                New_Def  BASE, "BASE", User_Ptr, is_normal
 164+ 6E04             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 164+ 6E04             >
 164+ 6E04             >                // dummy db directives used to calculate length of namec
 164+ 6E04 42 41 53 45 >                db      "BASE"
 164+ 6E08             >len_NFA         defl    $ - temp_NFA
 164+ 6E08             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 164+ 6E04             >
 164+ 6E04 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 164+ 6E05 42 41 53 45 >                db      "BASE"               // name string in 7-bit ascii, but
 164+ 6E09             >                org     $-1                 // alter last byte of Name just above to set
 164+ 6E08 C5          >                db      {b $} | END_BIT     // msb as name end
 164+ 6E09             >
 164+ 6E09 F9 6D       >                dw      last_NFA            // Link to previous definition Name
 164+ 6E0B             >BASE:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 164+ 6E0B A6 6C       >                dw      User_Ptr ; ok        // for primitive definitions  actual code
 164+ 6E0D             >                else
 164+ 6E0D ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 164+ 6E0D             >                endif           ; ok        // for other definitions it "points" the correct handler
 164+ 6E0D             >                // Use of "; ok" to suppress "warning[fwdref]"
 164+ 6E0D             >
 164+ 6E0D             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 164+ 6E0D 2E          >                db      46
 165+ 6E0E                              User_Def DPL        , "DPL"       , 48 // number of digits after decimal point in conversion
 165+ 6E0E             >                New_Def  DPL, "DPL", User_Ptr, is_normal
 165+ 6E0E             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 165+ 6E0E             >
 165+ 6E0E             >                // dummy db directives used to calculate length of namec
 165+ 6E0E 44 50 4C    >                db      "DPL"
 165+ 6E11             >len_NFA         defl    $ - temp_NFA
 165+ 6E11             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 165+ 6E0E             >
 165+ 6E0E 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 165+ 6E0F 44 50 4C    >                db      "DPL"               // name string in 7-bit ascii, but
 165+ 6E12             >                org     $-1                 // alter last byte of Name just above to set
 165+ 6E11 CC          >                db      {b $} | END_BIT     // msb as name end
 165+ 6E12             >
 165+ 6E12 04 6E       >                dw      last_NFA            // Link to previous definition Name
 165+ 6E14             >DPL:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 165+ 6E14 A6 6C       >                dw      User_Ptr ; ok        // for primitive definitions  actual code
 165+ 6E16             >                else
 165+ 6E16 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 165+ 6E16             >                endif           ; ok        // for other definitions it "points" the correct handler
 165+ 6E16             >                // Use of "; ok" to suppress "warning[fwdref]"
 165+ 6E16             >
 165+ 6E16             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 165+ 6E16 30          >                db      48
 166+ 6E17                              User_Def FLD        , "FLD"       , 50 // output field width
 166+ 6E17             >                New_Def  FLD, "FLD", User_Ptr, is_normal
 166+ 6E17             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 166+ 6E17             >
 166+ 6E17             >                // dummy db directives used to calculate length of namec
 166+ 6E17 46 4C 44    >                db      "FLD"
 166+ 6E1A             >len_NFA         defl    $ - temp_NFA
 166+ 6E1A             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 166+ 6E17             >
 166+ 6E17 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 166+ 6E18 46 4C 44    >                db      "FLD"               // name string in 7-bit ascii, but
 166+ 6E1B             >                org     $-1                 // alter last byte of Name just above to set
 166+ 6E1A C4          >                db      {b $} | END_BIT     // msb as name end
 166+ 6E1B             >
 166+ 6E1B 0E 6E       >                dw      last_NFA            // Link to previous definition Name
 166+ 6E1D             >FLD:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 166+ 6E1D A6 6C       >                dw      User_Ptr ; ok        // for primitive definitions  actual code
 166+ 6E1F             >                else
 166+ 6E1F ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 166+ 6E1F             >                endif           ; ok        // for other definitions it "points" the correct handler
 166+ 6E1F             >                // Use of "; ok" to suppress "warning[fwdref]"
 166+ 6E1F             >
 166+ 6E1F             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 166+ 6E1F 32          >                db      50
 167+ 6E20                              User_Def CSP        , "CSP"       , 52 // used to temporary store Stack-Pointer value
 167+ 6E20             >                New_Def  CSP, "CSP", User_Ptr, is_normal
 167+ 6E20             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 167+ 6E20             >
 167+ 6E20             >                // dummy db directives used to calculate length of namec
 167+ 6E20 43 53 50    >                db      "CSP"
 167+ 6E23             >len_NFA         defl    $ - temp_NFA
 167+ 6E23             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 167+ 6E20             >
 167+ 6E20 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 167+ 6E21 43 53 50    >                db      "CSP"               // name string in 7-bit ascii, but
 167+ 6E24             >                org     $-1                 // alter last byte of Name just above to set
 167+ 6E23 D0          >                db      {b $} | END_BIT     // msb as name end
 167+ 6E24             >
 167+ 6E24 17 6E       >                dw      last_NFA            // Link to previous definition Name
 167+ 6E26             >CSP:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 167+ 6E26 A6 6C       >                dw      User_Ptr ; ok        // for primitive definitions  actual code
 167+ 6E28             >                else
 167+ 6E28 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 167+ 6E28             >                endif           ; ok        // for other definitions it "points" the correct handler
 167+ 6E28             >                // Use of "; ok" to suppress "warning[fwdref]"
 167+ 6E28             >
 167+ 6E28             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 167+ 6E28 34          >                db      52
 168+ 6E29                              User_Def RSHARP     , "R#"        , 54 // location of editing cursor
 168+ 6E29             >                New_Def  RSHARP, "R#", User_Ptr, is_normal
 168+ 6E29             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 168+ 6E29             >
 168+ 6E29             >                // dummy db directives used to calculate length of namec
 168+ 6E29 52 23       >                db      "R#"
 168+ 6E2B             >len_NFA         defl    $ - temp_NFA
 168+ 6E2B             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 168+ 6E29             >
 168+ 6E29 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 168+ 6E2A 52 23       >                db      "R#"               // name string in 7-bit ascii, but
 168+ 6E2C             >                org     $-1                 // alter last byte of Name just above to set
 168+ 6E2B A3          >                db      {b $} | END_BIT     // msb as name end
 168+ 6E2C             >
 168+ 6E2C 20 6E       >                dw      last_NFA            // Link to previous definition Name
 168+ 6E2E             >RSHARP:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 168+ 6E2E A6 6C       >                dw      User_Ptr ; ok        // for primitive definitions  actual code
 168+ 6E30             >                else
 168+ 6E30 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 168+ 6E30             >                endif           ; ok        // for other definitions it "points" the correct handler
 168+ 6E30             >                // Use of "; ok" to suppress "warning[fwdref]"
 168+ 6E30             >
 168+ 6E30             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 168+ 6E30 36          >                db      54
 169+ 6E31                              User_Def HLD        , "HLD"       , 56 // last character during a number conversion output
 169+ 6E31             >                New_Def  HLD, "HLD", User_Ptr, is_normal
 169+ 6E31             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 169+ 6E31             >
 169+ 6E31             >                // dummy db directives used to calculate length of namec
 169+ 6E31 48 4C 44    >                db      "HLD"
 169+ 6E34             >len_NFA         defl    $ - temp_NFA
 169+ 6E34             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 169+ 6E31             >
 169+ 6E31 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 169+ 6E32 48 4C 44    >                db      "HLD"               // name string in 7-bit ascii, but
 169+ 6E35             >                org     $-1                 // alter last byte of Name just above to set
 169+ 6E34 C4          >                db      {b $} | END_BIT     // msb as name end
 169+ 6E35             >
 169+ 6E35 29 6E       >                dw      last_NFA            // Link to previous definition Name
 169+ 6E37             >HLD:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 169+ 6E37 A6 6C       >                dw      User_Ptr ; ok        // for primitive definitions  actual code
 169+ 6E39             >                else
 169+ 6E39 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 169+ 6E39             >                endif           ; ok        // for other definitions it "points" the correct handler
 169+ 6E39             >                // Use of "; ok" to suppress "warning[fwdref]"
 169+ 6E39             >
 169+ 6E39             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 169+ 6E39 38          >                db      56
 170+ 6E3A                              User_Def USE        , "USE"       , 58 // address of last used block
 170+ 6E3A             >                New_Def  USE, "USE", User_Ptr, is_normal
 170+ 6E3A             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 170+ 6E3A             >
 170+ 6E3A             >                // dummy db directives used to calculate length of namec
 170+ 6E3A 55 53 45    >                db      "USE"
 170+ 6E3D             >len_NFA         defl    $ - temp_NFA
 170+ 6E3D             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 170+ 6E3A             >
 170+ 6E3A 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 170+ 6E3B 55 53 45    >                db      "USE"               // name string in 7-bit ascii, but
 170+ 6E3E             >                org     $-1                 // alter last byte of Name just above to set
 170+ 6E3D C5          >                db      {b $} | END_BIT     // msb as name end
 170+ 6E3E             >
 170+ 6E3E 31 6E       >                dw      last_NFA            // Link to previous definition Name
 170+ 6E40             >USE:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 170+ 6E40 A6 6C       >                dw      User_Ptr ; ok        // for primitive definitions  actual code
 170+ 6E42             >                else
 170+ 6E42 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 170+ 6E42             >                endif           ; ok        // for other definitions it "points" the correct handler
 170+ 6E42             >                // Use of "; ok" to suppress "warning[fwdref]"
 170+ 6E42             >
 170+ 6E42             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 170+ 6E42 3A          >                db      58
 171+ 6E43                              User_Def PREV       , "PREV"      , 60 // address of previous used block
 171+ 6E43             >                New_Def  PREV, "PREV", User_Ptr, is_normal
 171+ 6E43             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 171+ 6E43             >
 171+ 6E43             >                // dummy db directives used to calculate length of namec
 171+ 6E43 50 52 45 56 >                db      "PREV"
 171+ 6E47             >len_NFA         defl    $ - temp_NFA
 171+ 6E47             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 171+ 6E43             >
 171+ 6E43 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 171+ 6E44 50 52 45 56 >                db      "PREV"               // name string in 7-bit ascii, but
 171+ 6E48             >                org     $-1                 // alter last byte of Name just above to set
 171+ 6E47 D6          >                db      {b $} | END_BIT     // msb as name end
 171+ 6E48             >
 171+ 6E48 3A 6E       >                dw      last_NFA            // Link to previous definition Name
 171+ 6E4A             >PREV:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 171+ 6E4A A6 6C       >                dw      User_Ptr ; ok        // for primitive definitions  actual code
 171+ 6E4C             >                else
 171+ 6E4C ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 171+ 6E4C             >                endif           ; ok        // for other definitions it "points" the correct handler
 171+ 6E4C             >                // Use of "; ok" to suppress "warning[fwdref]"
 171+ 6E4C             >
 171+ 6E4C             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 171+ 6E4C 3C          >                db      60
 172+ 6E4D                              User_Def LP         , "LP"        , 62 // line printer (not used)
 172+ 6E4D             >                New_Def  LP, "LP", User_Ptr, is_normal
 172+ 6E4D             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 172+ 6E4D             >
 172+ 6E4D             >                // dummy db directives used to calculate length of namec
 172+ 6E4D 4C 50       >                db      "LP"
 172+ 6E4F             >len_NFA         defl    $ - temp_NFA
 172+ 6E4F             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 172+ 6E4D             >
 172+ 6E4D 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 172+ 6E4E 4C 50       >                db      "LP"               // name string in 7-bit ascii, but
 172+ 6E50             >                org     $-1                 // alter last byte of Name just above to set
 172+ 6E4F D0          >                db      {b $} | END_BIT     // msb as name end
 172+ 6E50             >
 172+ 6E50 43 6E       >                dw      last_NFA            // Link to previous definition Name
 172+ 6E52             >LP:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 172+ 6E52 A6 6C       >                dw      User_Ptr ; ok        // for primitive definitions  actual code
 172+ 6E54             >                else
 172+ 6E54 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 172+ 6E54             >                endif           ; ok        // for other definitions it "points" the correct handler
 172+ 6E54             >                // Use of "; ok" to suppress "warning[fwdref]"
 172+ 6E54             >
 172+ 6E54             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 172+ 6E54 3E          >                db      62
 173+ 6E55                              User_Def PLACE      , "PLACE"     , 64 // number of digits after decimal point in output
 173+ 6E55             >                New_Def  PLACE, "PLACE", User_Ptr, is_normal
 173+ 6E55             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 173+ 6E55             >
 173+ 6E55             >                // dummy db directives used to calculate length of namec
 173+ 6E55 50 4C 41 43 >                db      "PLACE"
 173+ 6E59 45          >
 173+ 6E5A             >len_NFA         defl    $ - temp_NFA
 173+ 6E5A             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 173+ 6E55             >
 173+ 6E55 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 173+ 6E56 50 4C 41 43 >                db      "PLACE"               // name string in 7-bit ascii, but
 173+ 6E5A 45          >
 173+ 6E5B             >                org     $-1                 // alter last byte of Name just above to set
 173+ 6E5A C5          >                db      {b $} | END_BIT     // msb as name end
 173+ 6E5B             >
 173+ 6E5B 4D 6E       >                dw      last_NFA            // Link to previous definition Name
 173+ 6E5D             >PLACE:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 173+ 6E5D A6 6C       >                dw      User_Ptr ; ok        // for primitive definitions  actual code
 173+ 6E5F             >                else
 173+ 6E5F ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 173+ 6E5F             >                endif           ; ok        // for other definitions it "points" the correct handler
 173+ 6E5F             >                // Use of "; ok" to suppress "warning[fwdref]"
 173+ 6E5F             >
 173+ 6E5F             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 173+ 6E5F 40          >                db      64
 174+ 6E60                              User_Def SOURCE_ID  , "SOURCE-ID" , 66 // data-stream number in INCLUDE and LOAD-
 174+ 6E60             >                New_Def  SOURCE_ID, "SOURCE-ID", User_Ptr, is_normal
 174+ 6E60             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 174+ 6E60             >
 174+ 6E60             >                // dummy db directives used to calculate length of namec
 174+ 6E60 53 4F 55 52 >                db      "SOURCE-ID"
 174+ 6E64 43 45 2D 49 >
 174+ 6E68 44          >
 174+ 6E69             >len_NFA         defl    $ - temp_NFA
 174+ 6E69             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 174+ 6E60             >
 174+ 6E60 89          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 174+ 6E61 53 4F 55 52 >                db      "SOURCE-ID"               // name string in 7-bit ascii, but
 174+ 6E65 43 45 2D 49 >
 174+ 6E69 44          >
 174+ 6E6A             >                org     $-1                 // alter last byte of Name just above to set
 174+ 6E69 C4          >                db      {b $} | END_BIT     // msb as name end
 174+ 6E6A             >
 174+ 6E6A 55 6E       >                dw      last_NFA            // Link to previous definition Name
 174+ 6E6C             >SOURCE_ID:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 174+ 6E6C A6 6C       >                dw      User_Ptr ; ok        // for primitive definitions  actual code
 174+ 6E6E             >                else
 174+ 6E6E ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 174+ 6E6E             >                endif           ; ok        // for other definitions it "points" the correct handler
 174+ 6E6E             >                // Use of "; ok" to suppress "warning[fwdref]"
 174+ 6E6E             >
 174+ 6E6E             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 174+ 6E6E 42          >                db      66
 175+ 6E6F                              User_Def SPAN       , "SPAN"      , 68 // number of character of last EXPECT
 175+ 6E6F             >                New_Def  SPAN, "SPAN", User_Ptr, is_normal
 175+ 6E6F             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 175+ 6E6F             >
 175+ 6E6F             >                // dummy db directives used to calculate length of namec
 175+ 6E6F 53 50 41 4E >                db      "SPAN"
 175+ 6E73             >len_NFA         defl    $ - temp_NFA
 175+ 6E73             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 175+ 6E6F             >
 175+ 6E6F 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 175+ 6E70 53 50 41 4E >                db      "SPAN"               // name string in 7-bit ascii, but
 175+ 6E74             >                org     $-1                 // alter last byte of Name just above to set
 175+ 6E73 CE          >                db      {b $} | END_BIT     // msb as name end
 175+ 6E74             >
 175+ 6E74 60 6E       >                dw      last_NFA            // Link to previous definition Name
 175+ 6E76             >SPAN:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 175+ 6E76 A6 6C       >                dw      User_Ptr ; ok        // for primitive definitions  actual code
 175+ 6E78             >                else
 175+ 6E78 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 175+ 6E78             >                endif           ; ok        // for other definitions it "points" the correct handler
 175+ 6E78             >                // Use of "; ok" to suppress "warning[fwdref]"
 175+ 6E78             >
 175+ 6E78             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 175+ 6E78 44          >                db      68
 176+ 6E79                              User_Def HANDLER    , "HANDLER"   , 70 // Used by THROW-CATCH
 176+ 6E79             >                New_Def  HANDLER, "HANDLER", User_Ptr, is_normal
 176+ 6E79             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 176+ 6E79             >
 176+ 6E79             >                // dummy db directives used to calculate length of namec
 176+ 6E79 48 41 4E 44 >                db      "HANDLER"
 176+ 6E7D 4C 45 52    >
 176+ 6E80             >len_NFA         defl    $ - temp_NFA
 176+ 6E80             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 176+ 6E79             >
 176+ 6E79 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 176+ 6E7A 48 41 4E 44 >                db      "HANDLER"               // name string in 7-bit ascii, but
 176+ 6E7E 4C 45 52    >
 176+ 6E81             >                org     $-1                 // alter last byte of Name just above to set
 176+ 6E80 D2          >                db      {b $} | END_BIT     // msb as name end
 176+ 6E81             >
 176+ 6E81 6F 6E       >                dw      last_NFA            // Link to previous definition Name
 176+ 6E83             >HANDLER:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 176+ 6E83 A6 6C       >                dw      User_Ptr ; ok        // for primitive definitions  actual code
 176+ 6E85             >                else
 176+ 6E85 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 176+ 6E85             >                endif           ; ok        // for other definitions it "points" the correct handler
 176+ 6E85             >                // Use of "; ok" to suppress "warning[fwdref]"
 176+ 6E85             >
 176+ 6E85             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 176+ 6E85 46          >                db      70
 177+ 6E86                              User_Def HP         , "HP"        , 72 // heap-pointer address
 177+ 6E86             >                New_Def  HP, "HP", User_Ptr, is_normal
 177+ 6E86             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 177+ 6E86             >
 177+ 6E86             >                // dummy db directives used to calculate length of namec
 177+ 6E86 48 50       >                db      "HP"
 177+ 6E88             >len_NFA         defl    $ - temp_NFA
 177+ 6E88             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 177+ 6E86             >
 177+ 6E86 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 177+ 6E87 48 50       >                db      "HP"               // name string in 7-bit ascii, but
 177+ 6E89             >                org     $-1                 // alter last byte of Name just above to set
 177+ 6E88 D0          >                db      {b $} | END_BIT     // msb as name end
 177+ 6E89             >
 177+ 6E89 79 6E       >                dw      last_NFA            // Link to previous definition Name
 177+ 6E8B             >HP:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 177+ 6E8B A6 6C       >                dw      User_Ptr ; ok        // for primitive definitions  actual code
 177+ 6E8D             >                else
 177+ 6E8D ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 177+ 6E8D             >                endif           ; ok        // for other definitions it "points" the correct handler
 177+ 6E8D             >                // Use of "; ok" to suppress "warning[fwdref]"
 177+ 6E8D             >
 177+ 6E8D             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 177+ 6E8D 48          >                db      72
 178+ 6E8E
 179+ 6E8E              //  ______________________________________________________________________
 180+ 6E8E              //
 181+ 6E8E              // here         -- a
 182+ 6E8E                              Colon_Def HERE, "HERE", is_normal
 182+ 6E8E             >                New_Def  HERE, "HERE", Enter_Ptr, is_normal ; ok
 182+ 6E8E             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 182+ 6E8E             >
 182+ 6E8E             >                // dummy db directives used to calculate length of namec
 182+ 6E8E 48 45 52 45 >                db      "HERE"
 182+ 6E92             >len_NFA         defl    $ - temp_NFA
 182+ 6E92             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 182+ 6E8E             >
 182+ 6E8E 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 182+ 6E8F 48 45 52 45 >                db      "HERE"               // name string in 7-bit ascii, but
 182+ 6E93             >                org     $-1                 // alter last byte of Name just above to set
 182+ 6E92 C5          >                db      {b $} | END_BIT     // msb as name end
 182+ 6E93             >
 182+ 6E93 86 6E       >                dw      last_NFA            // Link to previous definition Name
 182+ 6E95             >HERE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 182+ 6E95 3B 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 182+ 6E97             >                else
 182+ 6E97 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 182+ 6E97             >                endif           ; ok        // for other definitions it "points" the correct handler
 182+ 6E97             >                // Use of "; ok" to suppress "warning[fwdref]"
 182+ 6E97             >
 182+ 6E97             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 183+ 6E97 74 6D 4A 6B                  dw      DP, FETCH               // dp @
 184+ 6E9B 25 69                        dw      EXIT                    // ;
 185+ 6E9D
 186+ 6E9D              //  ______________________________________________________________________
 187+ 6E9D              //
 188+ 6E9D              // allot        n --
 189+ 6E9D                              Colon_Def ALLOT, "ALLOT", is_normal
 189+ 6E9D             >                New_Def  ALLOT, "ALLOT", Enter_Ptr, is_normal ; ok
 189+ 6E9D             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 189+ 6E9D             >
 189+ 6E9D             >                // dummy db directives used to calculate length of namec
 189+ 6E9D 41 4C 4C 4F >                db      "ALLOT"
 189+ 6EA1 54          >
 189+ 6EA2             >len_NFA         defl    $ - temp_NFA
 189+ 6EA2             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 189+ 6E9D             >
 189+ 6E9D 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 189+ 6E9E 41 4C 4C 4F >                db      "ALLOT"               // name string in 7-bit ascii, but
 189+ 6EA2 54          >
 189+ 6EA3             >                org     $-1                 // alter last byte of Name just above to set
 189+ 6EA2 D4          >                db      {b $} | END_BIT     // msb as name end
 189+ 6EA3             >
 189+ 6EA3 8E 6E       >                dw      last_NFA            // Link to previous definition Name
 189+ 6EA5             >ALLOT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 189+ 6EA5 3B 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 189+ 6EA7             >                else
 189+ 6EA7 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 189+ 6EA7             >                endif           ; ok        // for other definitions it "points" the correct handler
 189+ 6EA7             >                // Use of "; ok" to suppress "warning[fwdref]"
 189+ 6EA7             >
 189+ 6EA7             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 190+ 6EA7 74 6D 27 6B                  dw      DP,  PLUSSTORE          // dp +!
 191+ 6EAB 25 69                        dw      EXIT                    // ;
 192+ 6EAD
 193+ 6EAD              //  ______________________________________________________________________
 194+ 6EAD              //
 195+ 6EAD              // comma        n --
 196+ 6EAD                              Colon_Def COMMA, ",", is_normal
 196+ 6EAD             >                New_Def  COMMA, ",", Enter_Ptr, is_normal ; ok
 196+ 6EAD             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 196+ 6EAD             >
 196+ 6EAD             >                // dummy db directives used to calculate length of namec
 196+ 6EAD 2C          >                db      ","
 196+ 6EAE             >len_NFA         defl    $ - temp_NFA
 196+ 6EAE             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 196+ 6EAD             >
 196+ 6EAD 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 196+ 6EAE 2C          >                db      ","               // name string in 7-bit ascii, but
 196+ 6EAF             >                org     $-1                 // alter last byte of Name just above to set
 196+ 6EAE AC          >                db      {b $} | END_BIT     // msb as name end
 196+ 6EAF             >
 196+ 6EAF 9D 6E       >                dw      last_NFA            // Link to previous definition Name
 196+ 6EB1             >COMMA:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 196+ 6EB1 3B 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 196+ 6EB3             >                else
 196+ 6EB3 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 196+ 6EB3             >                endif           ; ok        // for other definitions it "points" the correct handler
 196+ 6EB3             >                // Use of "; ok" to suppress "warning[fwdref]"
 196+ 6EB3             >
 196+ 6EB3             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 197+ 6EB3 95 6E 57 6B                  dw      HERE, STORE             // here !
 198+ 6EB7 C6 6C A5 6E                  dw      TWO, ALLOT              // 2 allot
 199+ 6EBB 25 69                        dw      EXIT                    // ;
 200+ 6EBD
 201+ 6EBD              //  ______________________________________________________________________
 202+ 6EBD              //
 203+ 6EBD              // ccomma       c --
 204+ 6EBD                              Colon_Def CCOMMA, "C,", is_normal
 204+ 6EBD             >                New_Def  CCOMMA, "C,", Enter_Ptr, is_normal ; ok
 204+ 6EBD             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 204+ 6EBD             >
 204+ 6EBD             >                // dummy db directives used to calculate length of namec
 204+ 6EBD 43 2C       >                db      "C,"
 204+ 6EBF             >len_NFA         defl    $ - temp_NFA
 204+ 6EBF             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 204+ 6EBD             >
 204+ 6EBD 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 204+ 6EBE 43 2C       >                db      "C,"               // name string in 7-bit ascii, but
 204+ 6EC0             >                org     $-1                 // alter last byte of Name just above to set
 204+ 6EBF AC          >                db      {b $} | END_BIT     // msb as name end
 204+ 6EC0             >
 204+ 6EC0 AD 6E       >                dw      last_NFA            // Link to previous definition Name
 204+ 6EC2             >CCOMMA:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 204+ 6EC2 3B 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 204+ 6EC4             >                else
 204+ 6EC4 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 204+ 6EC4             >                endif           ; ok        // for other definitions it "points" the correct handler
 204+ 6EC4             >                // Use of "; ok" to suppress "warning[fwdref]"
 204+ 6EC4             >
 204+ 6EC4             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 205+ 6EC4 95 6E 73 6B                  dw      HERE, CSTORE            // here c!
 206+ 6EC8 BE 6C A5 6E                  dw      ONE, ALLOT              // 1 allot
 207+ 6ECC 25 69                        dw      EXIT                    // ;
 208+ 6ECE
 209+ 6ECE              //  ______________________________________________________________________
 210+ 6ECE              //
 211+ 6ECE              // s>d          n -- d
 212+ 6ECE              // converts a single precision integer in a double precision
 213+ 6ECE                              New_Def S_TO_D, "S>D", is_code, is_normal
 213+ 6ECE             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 213+ 6ECE             >
 213+ 6ECE             >                // dummy db directives used to calculate length of namec
 213+ 6ECE 53 3E 44    >                db      "S>D"
 213+ 6ED1             >len_NFA         defl    $ - temp_NFA
 213+ 6ED1             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 213+ 6ECE             >
 213+ 6ECE 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 213+ 6ECF 53 3E 44    >                db      "S>D"               // name string in 7-bit ascii, but
 213+ 6ED2             >                org     $-1                 // alter last byte of Name just above to set
 213+ 6ED1 C4          >                db      {b $} | END_BIT     // msb as name end
 213+ 6ED2             >
 213+ 6ED2 BD 6E       >                dw      last_NFA            // Link to previous definition Name
 213+ 6ED4             >S_TO_D:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 213+ 6ED4 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
 213+ 6ED4             >                else
 213+ 6ED4 D6 6E       >                dw      $ + 2   ; ok        // is pointed by CFA
 213+ 6ED6             >                endif           ; ok        // for other definitions it "points" the correct handler
 213+ 6ED6             >                // Use of "; ok" to suppress "warning[fwdref]"
 213+ 6ED6             >
 213+ 6ED6             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 214+ 6ED6 D1                           pop     de
 215+ 6ED7 21 00 00                     ld      hl, 0
 216+ 6EDA 7A                           ld      a, d
 217+ 6EDB E6 80                        and     $80
 218+ 6EDD 28 01                        jr      z, S_to_D_Skip
 219+ 6EDF 2B                           dec     hl                  // $FFFF
 220+ 6EE0              S_to_D_Skip:
 221+ 6EE0 D5                           push    de
 222+ 6EE1 E5                           push    hl
 223+ 6EE2                              next
 223+ 6EE2 DD E9       >                jp      (ix)
 224+ 6EE4
 225+ 6EE4              //  ______________________________________________________________________
 226+ 6EE4              //
 227+ 6EE4              // -            n1 n2 -- n3
 228+ 6EE4              // subtraction
 229+ 6EE4                              New_Def SUBTRACT, "-", is_code, is_normal
 229+ 6EE4             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 229+ 6EE4             >
 229+ 6EE4             >                // dummy db directives used to calculate length of namec
 229+ 6EE4 2D          >                db      "-"
 229+ 6EE5             >len_NFA         defl    $ - temp_NFA
 229+ 6EE5             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 229+ 6EE4             >
 229+ 6EE4 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 229+ 6EE5 2D          >                db      "-"               // name string in 7-bit ascii, but
 229+ 6EE6             >                org     $-1                 // alter last byte of Name just above to set
 229+ 6EE5 AD          >                db      {b $} | END_BIT     // msb as name end
 229+ 6EE6             >
 229+ 6EE6 CE 6E       >                dw      last_NFA            // Link to previous definition Name
 229+ 6EE8             >SUBTRACT:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 229+ 6EE8 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
 229+ 6EE8             >                else
 229+ 6EE8 EA 6E       >                dw      $ + 2   ; ok        // is pointed by CFA
 229+ 6EEA             >                endif           ; ok        // for other definitions it "points" the correct handler
 229+ 6EEA             >                // Use of "; ok" to suppress "warning[fwdref]"
 229+ 6EEA             >
 229+ 6EEA             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 230+ 6EEA D1                           pop     de
 231+ 6EEB E1                           pop     hl
 232+ 6EEC A7                           and     a
 233+ 6EED ED 52                        sbc     hl, de
 234+ 6EEF
 235+ 6EEF                              psh1
 235+ 6EEF E5          >                push    hl
 235+ 6EF0 DD E9       >                jp      (ix)
 236+ 6EF2
 237+ 6EF2              //  ______________________________________________________________________
 238+ 6EF2              //
 239+ 6EF2              // =            n1 n2 -- n3
 240+ 6EF2              // equals
 241+ 6EF2                              Colon_Def EQUALS, "=", is_normal
 241+ 6EF2             >                New_Def  EQUALS, "=", Enter_Ptr, is_normal ; ok
 241+ 6EF2             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 241+ 6EF2             >
 241+ 6EF2             >                // dummy db directives used to calculate length of namec
 241+ 6EF2 3D          >                db      "="
 241+ 6EF3             >len_NFA         defl    $ - temp_NFA
 241+ 6EF3             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 241+ 6EF2             >
 241+ 6EF2 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 241+ 6EF3 3D          >                db      "="               // name string in 7-bit ascii, but
 241+ 6EF4             >                org     $-1                 // alter last byte of Name just above to set
 241+ 6EF3 BD          >                db      {b $} | END_BIT     // msb as name end
 241+ 6EF4             >
 241+ 6EF4 E4 6E       >                dw      last_NFA            // Link to previous definition Name
 241+ 6EF6             >EQUALS:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 241+ 6EF6 3B 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 241+ 6EF8             >                else
 241+ 6EF8 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 241+ 6EF8             >                endif           ; ok        // for other definitions it "points" the correct handler
 241+ 6EF8             >                // Use of "; ok" to suppress "warning[fwdref]"
 241+ 6EF8             >
 241+ 6EF8             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 242+ 6EF8 E8 6E 88 69                  dw      SUBTRACT, ZEQUAL        // - 0=
 243+ 6EFC 25 69                        dw      EXIT                    // ;
 244+ 6EFE
 245+ 6EFE              //  ______________________________________________________________________
 246+ 6EFE              //
 247+ 6EFE              // u<           u1 u2 -- u3
 248+ 6EFE              // unsigned less-than
 249+ 6EFE                              New_Def ULESS, "U<", is_code, is_normal
 249+ 6EFE             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 249+ 6EFE             >
 249+ 6EFE             >                // dummy db directives used to calculate length of namec
 249+ 6EFE 55 3C       >                db      "U<"
 249+ 6F00             >len_NFA         defl    $ - temp_NFA
 249+ 6F00             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 249+ 6EFE             >
 249+ 6EFE 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 249+ 6EFF 55 3C       >                db      "U<"               // name string in 7-bit ascii, but
 249+ 6F01             >                org     $-1                 // alter last byte of Name just above to set
 249+ 6F00 BC          >                db      {b $} | END_BIT     // msb as name end
 249+ 6F01             >
 249+ 6F01 F2 6E       >                dw      last_NFA            // Link to previous definition Name
 249+ 6F03             >ULESS:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 249+ 6F03 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
 249+ 6F03             >                else
 249+ 6F03 05 6F       >                dw      $ + 2   ; ok        // is pointed by CFA
 249+ 6F05             >                endif           ; ok        // for other definitions it "points" the correct handler
 249+ 6F05             >                // Use of "; ok" to suppress "warning[fwdref]"
 249+ 6F05             >
 249+ 6F05             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 250+ 6F05 D1                           pop     de
 251+ 6F06 E1                           pop     hl
 252+ 6F07 A7                           and     a
 253+ 6F08 ED 52                        sbc     hl, de
 254+ 6F0A 21 FF FF                     ld      hl, -1
 255+ 6F0D 38 01                        jr      c, ULess_Skip
 256+ 6F0F 23                               inc     hl
 257+ 6F10              ULess_Skip:
 258+ 6F10
 259+ 6F10                              psh1
 259+ 6F10 E5          >                push    hl
 259+ 6F11 DD E9       >                jp      (ix)
 260+ 6F13
 261+ 6F13              //  ______________________________________________________________________
 262+ 6F13              //
 263+ 6F13              // <           n1 n2 -- n3
 264+ 6F13              // less-than
 265+ 6F13                              New_Def LESS, "<", is_code, is_normal
 265+ 6F13             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 265+ 6F13             >
 265+ 6F13             >                // dummy db directives used to calculate length of namec
 265+ 6F13 3C          >                db      "<"
 265+ 6F14             >len_NFA         defl    $ - temp_NFA
 265+ 6F14             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 265+ 6F13             >
 265+ 6F13 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 265+ 6F14 3C          >                db      "<"               // name string in 7-bit ascii, but
 265+ 6F15             >                org     $-1                 // alter last byte of Name just above to set
 265+ 6F14 BC          >                db      {b $} | END_BIT     // msb as name end
 265+ 6F15             >
 265+ 6F15 FE 6E       >                dw      last_NFA            // Link to previous definition Name
 265+ 6F17             >LESS:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 265+ 6F17 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
 265+ 6F17             >                else
 265+ 6F17 19 6F       >                dw      $ + 2   ; ok        // is pointed by CFA
 265+ 6F19             >                endif           ; ok        // for other definitions it "points" the correct handler
 265+ 6F19             >                // Use of "; ok" to suppress "warning[fwdref]"
 265+ 6F19             >
 265+ 6F19             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 266+ 6F19 D1                           pop     de
 267+ 6F1A E1                           pop     hl
 268+ 6F1B 7C                           ld      a, h
 269+ 6F1C EE 80                        xor     $80
 270+ 6F1E 67                           ld      h, a
 271+ 6F1F 7A                           ld      a, d
 272+ 6F20 EE 80                        xor     $80
 273+ 6F22 57                           ld      d, a
 274+ 6F23 A7                           and     a
 275+ 6F24 ED 52                        sbc     hl, de
 276+ 6F26 21 FF FF                     ld      hl, -1
 277+ 6F29 38 01                        jr      c, Less_Skip
 278+ 6F2B 23                               inc     hl
 279+ 6F2C              Less_Skip:
 280+ 6F2C
 281+ 6F2C                              psh1
 281+ 6F2C E5          >                push    hl
 281+ 6F2D DD E9       >                jp      (ix)
 282+ 6F2F
 283+ 6F2F              //  ______________________________________________________________________
 284+ 6F2F              //
 285+ 6F2F              // >            n1 n2 -- n3
 286+ 6F2F              // greater than
 287+ 6F2F                              Colon_Def GREATER, ">", is_normal
 287+ 6F2F             >                New_Def  GREATER, ">", Enter_Ptr, is_normal ; ok
 287+ 6F2F             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 287+ 6F2F             >
 287+ 6F2F             >                // dummy db directives used to calculate length of namec
 287+ 6F2F 3E          >                db      ">"
 287+ 6F30             >len_NFA         defl    $ - temp_NFA
 287+ 6F30             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 287+ 6F2F             >
 287+ 6F2F 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 287+ 6F30 3E          >                db      ">"               // name string in 7-bit ascii, but
 287+ 6F31             >                org     $-1                 // alter last byte of Name just above to set
 287+ 6F30 BE          >                db      {b $} | END_BIT     // msb as name end
 287+ 6F31             >
 287+ 6F31 13 6F       >                dw      last_NFA            // Link to previous definition Name
 287+ 6F33             >GREATER:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 287+ 6F33 3B 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 287+ 6F35             >                else
 287+ 6F35 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 287+ 6F35             >                endif           ; ok        // for other definitions it "points" the correct handler
 287+ 6F35             >                // Use of "; ok" to suppress "warning[fwdref]"
 287+ 6F35             >
 287+ 6F35             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 288+ 6F35 AA 6A 17 6F                  dw      SWAP, LESS              // swap <
 289+ 6F39 25 69                        dw      EXIT                    // ;
 290+ 6F3B              //  ______________________________________________________________________
 291+ 6F3B              //
 292+ 6F3B              // min          n1 n2 -- n3
 293+ 6F3B              // minimum between n1 and n2
 294+ 6F3B                              Colon_Def MIN, "MIN" , is_normal
 294+ 6F3B             >                New_Def  MIN, "MIN", Enter_Ptr, is_normal ; ok
 294+ 6F3B             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 294+ 6F3B             >
 294+ 6F3B             >                // dummy db directives used to calculate length of namec
 294+ 6F3B 4D 49 4E    >                db      "MIN"
 294+ 6F3E             >len_NFA         defl    $ - temp_NFA
 294+ 6F3E             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 294+ 6F3B             >
 294+ 6F3B 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 294+ 6F3C 4D 49 4E    >                db      "MIN"               // name string in 7-bit ascii, but
 294+ 6F3F             >                org     $-1                 // alter last byte of Name just above to set
 294+ 6F3E CE          >                db      {b $} | END_BIT     // msb as name end
 294+ 6F3F             >
 294+ 6F3F 2F 6F       >                dw      last_NFA            // Link to previous definition Name
 294+ 6F41             >MIN:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 294+ 6F41 3B 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 294+ 6F43             >                else
 294+ 6F43 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 294+ 6F43             >                endif           ; ok        // for other definitions it "points" the correct handler
 294+ 6F43             >                // Use of "; ok" to suppress "warning[fwdref]"
 294+ 6F43             >
 294+ 6F43             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 295+ 6F43 18 6B                        dw      TWO_DUP                 // 2dup
 296+ 6F45 33 6F                        dw      GREATER                 // >
 297+ 6F47 E3 63                        dw      ZBRANCH
 298+ 6F49 04 00                        dw      Min_Skip - $   // if
 299+ 6F4B AA 6A                        dw          SWAP                //      swap
 300+ 6F4D              Min_Skip:                                       // endif
 301+ 6F4D 82 6A                        dw      DROP                    // drop
 302+ 6F4F 25 69                        dw      EXIT                    // ;
 303+ 6F51
 304+ 6F51              //  ______________________________________________________________________
 305+ 6F51              //
 306+ 6F51              // max          n1 n2 -- n3
 307+ 6F51              // maximum between n1 and n2
 308+ 6F51                              Colon_Def MAX, "MAX", is_normal
 308+ 6F51             >                New_Def  MAX, "MAX", Enter_Ptr, is_normal ; ok
 308+ 6F51             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 308+ 6F51             >
 308+ 6F51             >                // dummy db directives used to calculate length of namec
 308+ 6F51 4D 41 58    >                db      "MAX"
 308+ 6F54             >len_NFA         defl    $ - temp_NFA
 308+ 6F54             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 308+ 6F51             >
 308+ 6F51 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 308+ 6F52 4D 41 58    >                db      "MAX"               // name string in 7-bit ascii, but
 308+ 6F55             >                org     $-1                 // alter last byte of Name just above to set
 308+ 6F54 D8          >                db      {b $} | END_BIT     // msb as name end
 308+ 6F55             >
 308+ 6F55 3B 6F       >                dw      last_NFA            // Link to previous definition Name
 308+ 6F57             >MAX:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 308+ 6F57 3B 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 308+ 6F59             >                else
 308+ 6F59 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 308+ 6F59             >                endif           ; ok        // for other definitions it "points" the correct handler
 308+ 6F59             >                // Use of "; ok" to suppress "warning[fwdref]"
 308+ 6F59             >
 308+ 6F59             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 309+ 6F59 18 6B                        dw      TWO_DUP                 // 2dup
 310+ 6F5B 17 6F                        dw      LESS                    // <
 311+ 6F5D E3 63                        dw      ZBRANCH
 312+ 6F5F 04 00                        dw      Max_Skip - $   // if
 313+ 6F61 AA 6A                        dw          SWAP                //      swap
 314+ 6F63              Max_Skip:                                       // endif
 315+ 6F63 82 6A                        dw      DROP                    // drop
 316+ 6F65 25 69                        dw      EXIT                    // ;
 317+ 6F67
 318+ 6F67              //  ______________________________________________________________________
 319+ 6F67              //
 320+ 6F67              // ?dup         n -- 0 | n n
 321+ 6F67              // duplicate if not zero
 322+ 6F67                              New_Def QDUP, "?DUP", is_code, is_normal
 322+ 6F67             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 322+ 6F67             >
 322+ 6F67             >                // dummy db directives used to calculate length of namec
 322+ 6F67 3F 44 55 50 >                db      "?DUP"
 322+ 6F6B             >len_NFA         defl    $ - temp_NFA
 322+ 6F6B             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 322+ 6F67             >
 322+ 6F67 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 322+ 6F68 3F 44 55 50 >                db      "?DUP"               // name string in 7-bit ascii, but
 322+ 6F6C             >                org     $-1                 // alter last byte of Name just above to set
 322+ 6F6B D0          >                db      {b $} | END_BIT     // msb as name end
 322+ 6F6C             >
 322+ 6F6C 51 6F       >                dw      last_NFA            // Link to previous definition Name
 322+ 6F6E             >QDUP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 322+ 6F6E ~           >                dw      runcode ; ok        // for primitive definitions  actual code
 322+ 6F6E             >                else
 322+ 6F6E 70 6F       >                dw      $ + 2   ; ok        // is pointed by CFA
 322+ 6F70             >                endif           ; ok        // for other definitions it "points" the correct handler
 322+ 6F70             >                // Use of "; ok" to suppress "warning[fwdref]"
 322+ 6F70             >
 322+ 6F70             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 323+ 6F70              QDup_Ptr:
 324+ 6F70 E1                           pop     hl
 325+ 6F71 7C                           ld      a, h
 326+ 6F72 B5                           or      l
 327+ 6F73 28 01                        jr      z, QDup_Skip
 328+ 6F75 E5                               push    hl
 329+ 6F76              QDup_Skip:
 330+ 6F76                              psh1
 330+ 6F76 E5          >                push    hl
 330+ 6F77 DD E9       >                jp      (ix)
 331+ 6F79
 332+ 6F79              //  ______________________________________________________________________
 333+ 6F79              //
 334+ 6F79              // -dup         n -- 0 | n n
 335+ 6F79              // duplicate if not zero
 336+ 6F79                              New_Def LDUP, "-DUP", QDup_Ptr, is_normal
 336+ 6F79             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 336+ 6F79             >
 336+ 6F79             >                // dummy db directives used to calculate length of namec
 336+ 6F79 2D 44 55 50 >                db      "-DUP"
 336+ 6F7D             >len_NFA         defl    $ - temp_NFA
 336+ 6F7D             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 336+ 6F79             >
 336+ 6F79 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 336+ 6F7A 2D 44 55 50 >                db      "-DUP"               // name string in 7-bit ascii, but
 336+ 6F7E             >                org     $-1                 // alter last byte of Name just above to set
 336+ 6F7D D0          >                db      {b $} | END_BIT     // msb as name end
 336+ 6F7E             >
 336+ 6F7E 67 6F       >                dw      last_NFA            // Link to previous definition Name
 336+ 6F80             >LDUP:          if QDup_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 336+ 6F80 70 6F       >                dw      QDup_Ptr ; ok        // for primitive definitions  actual code
 336+ 6F82             >                else
 336+ 6F82 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 336+ 6F82             >                endif           ; ok        // for other definitions it "points" the correct handler
 336+ 6F82             >                // Use of "; ok" to suppress "warning[fwdref]"
 336+ 6F82             >
 336+ 6F82             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 337+ 6F82
 338+ 6F82              //  ______________________________________________________________________
 339+ 6F82              //
 340+ 6F82              // emit         c --
 341+ 6F82                              Colon_Def EMIT, "EMIT", is_normal
 341+ 6F82             >                New_Def  EMIT, "EMIT", Enter_Ptr, is_normal ; ok
 341+ 6F82             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 341+ 6F82             >
 341+ 6F82             >                // dummy db directives used to calculate length of namec
 341+ 6F82 45 4D 49 54 >                db      "EMIT"
 341+ 6F86             >len_NFA         defl    $ - temp_NFA
 341+ 6F86             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 341+ 6F82             >
 341+ 6F82 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 341+ 6F83 45 4D 49 54 >                db      "EMIT"               // name string in 7-bit ascii, but
 341+ 6F87             >                org     $-1                 // alter last byte of Name just above to set
 341+ 6F86 D4          >                db      {b $} | END_BIT     // msb as name end
 341+ 6F87             >
 341+ 6F87 79 6F       >                dw      last_NFA            // Link to previous definition Name
 341+ 6F89             >EMIT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 341+ 6F89 3B 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 341+ 6F8B             >                else
 341+ 6F8B ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 341+ 6F8B             >                endif           ; ok        // for other definitions it "points" the correct handler
 341+ 6F8B             >                // Use of "; ok" to suppress "warning[fwdref]"
 341+ 6F8B             >
 341+ 6F8B             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 342+ 6F8B 1F 66                        dw      C_EMIT                      // (?emit)
 343+ 6F8D 6E 6F                        dw      QDUP                        // ?dup
 344+ 6F8F                                                                  // if
 345+ 6F8F E3 63                        dw      ZBRANCH
 346+ 6F91 0A 00                        dw      Emit_Skip - $
 347+ 6F93 EB 65                        dw          EMITC                   //      emitc
 348+ 6F95 BE 6C                        dw          ONE                     //      1
 349+ 6F97 C7 6D 27 6B                  dw          OUT, PLUSSTORE        //      out +!
 350+ 6F9B              Emit_Skip:                                          // endif
 351+ 6F9B 25 69                        dw      EXIT                        // ;
 352+ 6F9D
 353+ 6F9D              //  ______________________________________________________________________
 354+ 6F9D              //
 355+ 6F9D              // space        --
 356+ 6F9D                              Colon_Def SPACE, "SPACE", is_normal
 356+ 6F9D             >                New_Def  SPACE, "SPACE", Enter_Ptr, is_normal ; ok
 356+ 6F9D             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 356+ 6F9D             >
 356+ 6F9D             >                // dummy db directives used to calculate length of namec
 356+ 6F9D 53 50 41 43 >                db      "SPACE"
 356+ 6FA1 45          >
 356+ 6FA2             >len_NFA         defl    $ - temp_NFA
 356+ 6FA2             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 356+ 6F9D             >
 356+ 6F9D 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 356+ 6F9E 53 50 41 43 >                db      "SPACE"               // name string in 7-bit ascii, but
 356+ 6FA2 45          >
 356+ 6FA3             >                org     $-1                 // alter last byte of Name just above to set
 356+ 6FA2 C5          >                db      {b $} | END_BIT     // msb as name end
 356+ 6FA3             >
 356+ 6FA3 82 6F       >                dw      last_NFA            // Link to previous definition Name
 356+ 6FA5             >SPACE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 356+ 6FA5 3B 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 356+ 6FA7             >                else
 356+ 6FA7 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 356+ 6FA7             >                endif           ; ok        // for other definitions it "points" the correct handler
 356+ 6FA7             >                // Use of "; ok" to suppress "warning[fwdref]"
 356+ 6FA7             >
 356+ 6FA7             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 357+ 6FA7 E0 6C 89 6F                  dw      BL, EMIT                // bl emit
 358+ 6FAB 25 69                        dw      EXIT                    // ;
 359+ 6FAD
 360+ 6FAD              //  ______________________________________________________________________
 361+ 6FAD              //
 362+ 6FAD              // traverse     a n -- a
 363+ 6FAD              // A dictionary entry is structured as follows
 364+ 6FAD              // NFA: +0   one byte of word-length (n<32) | some flags (immediate, smudge) | $80
 365+ 6FAD              //      +1   word name, last character is toggled with $80
 366+ 6FAD              // LFA: +1+n link to NFA ofprevious  dictionary entry.
 367+ 6FAD              // CFA: +3+n routine address. Colon definitions here have pointer to code
 368+ 6FAD              // PFA: +5+n "is_code", definitions have no PFA.
 369+ 6FAD              //
 370+ 6FAD                              Colon_Def TRAVERSE, "TRAVERSE", is_normal
 370+ 6FAD             >                New_Def  TRAVERSE, "TRAVERSE", Enter_Ptr, is_normal ; ok
 370+ 6FAD             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 370+ 6FAD             >
 370+ 6FAD             >                // dummy db directives used to calculate length of namec
 370+ 6FAD 54 52 41 56 >                db      "TRAVERSE"
 370+ 6FB1 45 52 53 45 >
 370+ 6FB5             >len_NFA         defl    $ - temp_NFA
 370+ 6FB5             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 370+ 6FAD             >
 370+ 6FAD 88          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 370+ 6FAE 54 52 41 56 >                db      "TRAVERSE"               // name string in 7-bit ascii, but
 370+ 6FB2 45 52 53 45 >
 370+ 6FB6             >                org     $-1                 // alter last byte of Name just above to set
 370+ 6FB5 C5          >                db      {b $} | END_BIT     // msb as name end
 370+ 6FB6             >
 370+ 6FB6 9D 6F       >                dw      last_NFA            // Link to previous definition Name
 370+ 6FB8             >TRAVERSE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 370+ 6FB8 3B 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 370+ 6FBA             >                else
 370+ 6FBA ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 370+ 6FBA             >                endif           ; ok        // for other definitions it "points" the correct handler
 370+ 6FBA             >                // Use of "; ok" to suppress "warning[fwdref]"
 370+ 6FBA             >
 370+ 6FBA             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 371+ 6FBA AA 6A                        dw      SWAP                    // swap
 372+ 6FBC              Traverse_Begin:                                 // begin
 373+ 6FBC 72 6A CB 69                  dw          OVER, PLUS          //      over +
 374+ 6FC0 A9 63 7F 00                  dw          LIT, 127            //      127
 375+ 6FC4 72 6A 65 6B                  dw          OVER, CFETCH        //      over @
 376+ 6FC8 17 6F                        dw          LESS                //      <
 377+ 6FCA                                                              // until
 378+ 6FCA E3 63                        dw      ZBRANCH
 379+ 6FCC F0 FF                        dw      Traverse_Begin - $
 380+ 6FCE 8D 6A                        dw      NIP                     //  nip
 381+ 6FD0 25 69                        dw      EXIT                    //  ;
 382+ 6FD2
 383+ 6FD2              //  ______________________________________________________________________
 384+ 6FD2              //
 385+ 6FD2              // latest       -- nfa
 386+ 6FD2                              Colon_Def LATEST, "LATEST", is_normal
 386+ 6FD2             >                New_Def  LATEST, "LATEST", Enter_Ptr, is_normal ; ok
 386+ 6FD2             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 386+ 6FD2             >
 386+ 6FD2             >                // dummy db directives used to calculate length of namec
 386+ 6FD2 4C 41 54 45 >                db      "LATEST"
 386+ 6FD6 53 54       >
 386+ 6FD8             >len_NFA         defl    $ - temp_NFA
 386+ 6FD8             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 386+ 6FD2             >
 386+ 6FD2 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 386+ 6FD3 4C 41 54 45 >                db      "LATEST"               // name string in 7-bit ascii, but
 386+ 6FD7 53 54       >
 386+ 6FD9             >                org     $-1                 // alter last byte of Name just above to set
 386+ 6FD8 D4          >                db      {b $} | END_BIT     // msb as name end
 386+ 6FD9             >
 386+ 6FD9 AD 6F       >                dw      last_NFA            // Link to previous definition Name
 386+ 6FDB             >LATEST:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 386+ 6FDB 3B 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 386+ 6FDD             >                else
 386+ 6FDD ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 386+ 6FDD             >                endif           ; ok        // for other definitions it "points" the correct handler
 386+ 6FDD             >                // Use of "; ok" to suppress "warning[fwdref]"
 386+ 6FDD             >
 386+ 6FDD             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 387+ 6FDD F6 6D                        dw      CURRENT                 // current
 388+ 6FDF 4A 6B 4A 6B                  dw      FETCH, FETCH            // @ @
 389+ 6FE3 25 69                        dw      EXIT                    // ;
 390+ 6FE5
 391+ 6FE5              //  ______________________________________________________________________
 392+ 6FE5              //
 393+ 6FE5              // lfa          pfa -- lfa
 394+ 6FE5                              Colon_Def LFA, "LFA", is_normal
 394+ 6FE5             >                New_Def  LFA, "LFA", Enter_Ptr, is_normal ; ok
 394+ 6FE5             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 394+ 6FE5             >
 394+ 6FE5             >                // dummy db directives used to calculate length of namec
 394+ 6FE5 4C 46 41    >                db      "LFA"
 394+ 6FE8             >len_NFA         defl    $ - temp_NFA
 394+ 6FE8             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 394+ 6FE5             >
 394+ 6FE5 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 394+ 6FE6 4C 46 41    >                db      "LFA"               // name string in 7-bit ascii, but
 394+ 6FE9             >                org     $-1                 // alter last byte of Name just above to set
 394+ 6FE8 C1          >                db      {b $} | END_BIT     // msb as name end
 394+ 6FE9             >
 394+ 6FE9 D2 6F       >                dw      last_NFA            // Link to previous definition Name
 394+ 6FEB             >LFA:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 394+ 6FEB 3B 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 394+ 6FED             >                else
 394+ 6FED ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 394+ 6FED             >                endif           ; ok        // for other definitions it "points" the correct handler
 394+ 6FED             >                // Use of "; ok" to suppress "warning[fwdref]"
 394+ 6FED             >
 394+ 6FED             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 395+ 6FED 26 6A                        dw      CELL_MINUS              // cell-
 396+ 6FEF 26 6A                        dw      CELL_MINUS              // cell-
 397+ 6FF1 25 69                        dw      EXIT                    // ;
 398+ 6FF3
 399+ 6FF3              //  ______________________________________________________________________
 400+ 6FF3              //
 401+ 6FF3              // cfa          pfa -- cfa
 402+ 6FF3                              Colon_Def CFA, "CFA", is_normal
 402+ 6FF3             >                New_Def  CFA, "CFA", Enter_Ptr, is_normal ; ok
 402+ 6FF3             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 402+ 6FF3             >
 402+ 6FF3             >                // dummy db directives used to calculate length of namec
 402+ 6FF3 43 46 41    >                db      "CFA"
 402+ 6FF6             >len_NFA         defl    $ - temp_NFA
 402+ 6FF6             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 402+ 6FF3             >
 402+ 6FF3 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 402+ 6FF4 43 46 41    >                db      "CFA"               // name string in 7-bit ascii, but
 402+ 6FF7             >                org     $-1                 // alter last byte of Name just above to set
 402+ 6FF6 C1          >                db      {b $} | END_BIT     // msb as name end
 402+ 6FF7             >
 402+ 6FF7 E5 6F       >                dw      last_NFA            // Link to previous definition Name
 402+ 6FF9             >CFA:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 402+ 6FF9 3B 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 402+ 6FFB             >                else
 402+ 6FFB ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 402+ 6FFB             >                endif           ; ok        // for other definitions it "points" the correct handler
 402+ 6FFB             >                // Use of "; ok" to suppress "warning[fwdref]"
 402+ 6FFB             >
 402+ 6FFB             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 403+ 6FFB 26 6A                        dw      CELL_MINUS              // cell-
 404+ 6FFD 25 69                        dw      EXIT                    // ;
 405+ 6FFF
 406+ 6FFF              //  ______________________________________________________________________
 407+ 6FFF              //
 408+ 6FFF              // nfa          pfa -- nfa
 409+ 6FFF                              Colon_Def NFA, "NFA", is_normal
 409+ 6FFF             >                New_Def  NFA, "NFA", Enter_Ptr, is_normal ; ok
 409+ 6FFF             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 409+ 6FFF             >
 409+ 6FFF             >                // dummy db directives used to calculate length of namec
 409+ 6FFF 4E 46 41    >                db      "NFA"
 409+ 7002             >len_NFA         defl    $ - temp_NFA
 409+ 7002             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 409+ 6FFF             >
 409+ 6FFF 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 409+ 7000 4E 46 41    >                db      "NFA"               // name string in 7-bit ascii, but
 409+ 7003             >                org     $-1                 // alter last byte of Name just above to set
 409+ 7002 C1          >                db      {b $} | END_BIT     // msb as name end
 409+ 7003             >
 409+ 7003 F3 6F       >                dw      last_NFA            // Link to previous definition Name
 409+ 7005             >NFA:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 409+ 7005 3B 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 409+ 7007             >                else
 409+ 7007 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 409+ 7007             >                endif           ; ok        // for other definitions it "points" the correct handler
 409+ 7007             >                // Use of "; ok" to suppress "warning[fwdref]"
 409+ 7007             >
 409+ 7007             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 410+ 7007 A9 63 05 00                  dw      LIT, 5                  // 5
 411+ 700B E8 6E                        dw      SUBTRACT                // -
 412+ 700D D7 6C                        dw      NEG_ONE                 // -1
 413+ 700F B8 6F                        dw      TRAVERSE                // traverse
 414+ 7011 25 69                        dw      EXIT                    // ;
 415+ 7013
 416+ 7013              //  ______________________________________________________________________
 417+ 7013              //
 418+ 7013              // pfa          nfa -- pfa
 419+ 7013                              Colon_Def PFA, "PFA", is_normal
 419+ 7013             >                New_Def  PFA, "PFA", Enter_Ptr, is_normal ; ok
 419+ 7013             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 419+ 7013             >
 419+ 7013             >                // dummy db directives used to calculate length of namec
 419+ 7013 50 46 41    >                db      "PFA"
 419+ 7016             >len_NFA         defl    $ - temp_NFA
 419+ 7016             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 419+ 7013             >
 419+ 7013 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 419+ 7014 50 46 41    >                db      "PFA"               // name string in 7-bit ascii, but
 419+ 7017             >                org     $-1                 // alter last byte of Name just above to set
 419+ 7016 C1          >                db      {b $} | END_BIT     // msb as name end
 419+ 7017             >
 419+ 7017 FF 6F       >                dw      last_NFA            // Link to previous definition Name
 419+ 7019             >PFA:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 419+ 7019 3B 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 419+ 701B             >                else
 419+ 701B ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 419+ 701B             >                endif           ; ok        // for other definitions it "points" the correct handler
 419+ 701B             >                // Use of "; ok" to suppress "warning[fwdref]"
 419+ 701B             >
 419+ 701B             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 420+ 701B BE 6C                        dw      ONE                     // 1
 421+ 701D B8 6F                        dw      TRAVERSE                // traverse
 422+ 701F A9 63 05 00                  dw      LIT, 5                  // 6
 423+ 7023 CB 69                        dw      PLUS                    // +
 424+ 7025 25 69                        dw      EXIT                    // ;
 425+ 7027
 426+ 7027              //  ______________________________________________________________________
 427+ 7027              //
 428+ 7027              // >body        cfa -- pfa
 429+ 7027                              Colon_Def TO_BODY, ">BODY", is_normal
 429+ 7027             >                New_Def  TO_BODY, ">BODY", Enter_Ptr, is_normal ; ok
 429+ 7027             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 429+ 7027             >
 429+ 7027             >                // dummy db directives used to calculate length of namec
 429+ 7027 3E 42 4F 44 >                db      ">BODY"
 429+ 702B 59          >
 429+ 702C             >len_NFA         defl    $ - temp_NFA
 429+ 702C             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 429+ 7027             >
 429+ 7027 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 429+ 7028 3E 42 4F 44 >                db      ">BODY"               // name string in 7-bit ascii, but
 429+ 702C 59          >
 429+ 702D             >                org     $-1                 // alter last byte of Name just above to set
 429+ 702C D9          >                db      {b $} | END_BIT     // msb as name end
 429+ 702D             >
 429+ 702D 13 70       >                dw      last_NFA            // Link to previous definition Name
 429+ 702F             >TO_BODY:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 429+ 702F 3B 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 429+ 7031             >                else
 429+ 7031 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 429+ 7031             >                endif           ; ok        // for other definitions it "points" the correct handler
 429+ 7031             >                // Use of "; ok" to suppress "warning[fwdref]"
 429+ 7031             >
 429+ 7031             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 430+ 7031 1C 6A                        dw      CELL_PLUS               // cell+
 431+ 7033 25 69                        dw      EXIT                    // ;
 432+ 7035
 433+ 7035              //  ______________________________________________________________________
 434+ 7035              //
 435+ 7035              // <name        cfa -- nfa
 436+ 7035                              Colon_Def TO_NAME, "<NAME", is_normal
 436+ 7035             >                New_Def  TO_NAME, "<NAME", Enter_Ptr, is_normal ; ok
 436+ 7035             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 436+ 7035             >
 436+ 7035             >                // dummy db directives used to calculate length of namec
 436+ 7035 3C 4E 41 4D >                db      "<NAME"
 436+ 7039 45          >
 436+ 703A             >len_NFA         defl    $ - temp_NFA
 436+ 703A             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 436+ 7035             >
 436+ 7035 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 436+ 7036 3C 4E 41 4D >                db      "<NAME"               // name string in 7-bit ascii, but
 436+ 703A 45          >
 436+ 703B             >                org     $-1                 // alter last byte of Name just above to set
 436+ 703A C5          >                db      {b $} | END_BIT     // msb as name end
 436+ 703B             >
 436+ 703B 27 70       >                dw      last_NFA            // Link to previous definition Name
 436+ 703D             >TO_NAME:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 436+ 703D 3B 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 436+ 703F             >                else
 436+ 703F ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 436+ 703F             >                endif           ; ok        // for other definitions it "points" the correct handler
 436+ 703F             >                // Use of "; ok" to suppress "warning[fwdref]"
 436+ 703F             >
 436+ 703F             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 437+ 703F 2F 70                        dw      TO_BODY                 // >body
 438+ 7041 05 70                        dw      NFA                     // nfa
 439+ 7043 25 69                        dw      EXIT                    // ;
 440+ 7045
 441+ 7045              //  ______________________________________________________________________
 442+ 7045              //
 443+ 7045              // !csp         --
 444+ 7045              // store in user variable CSP current value of SP. Used at compile-time for syntax checkng
 445+ 7045                              Colon_Def STORE_CSP, "!CSP", is_normal
 445+ 7045             >                New_Def  STORE_CSP, "!CSP", Enter_Ptr, is_normal ; ok
 445+ 7045             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 445+ 7045             >
 445+ 7045             >                // dummy db directives used to calculate length of namec
 445+ 7045 21 43 53 50 >                db      "!CSP"
 445+ 7049             >len_NFA         defl    $ - temp_NFA
 445+ 7049             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 445+ 7045             >
 445+ 7045 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 445+ 7046 21 43 53 50 >                db      "!CSP"               // name string in 7-bit ascii, but
 445+ 704A             >                org     $-1                 // alter last byte of Name just above to set
 445+ 7049 D0          >                db      {b $} | END_BIT     // msb as name end
 445+ 704A             >
 445+ 704A 35 70       >                dw      last_NFA            // Link to previous definition Name
 445+ 704C             >STORE_CSP:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 445+ 704C 3B 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 445+ 704E             >                else
 445+ 704E ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 445+ 704E             >                endif           ; ok        // for other definitions it "points" the correct handler
 445+ 704E             >                // Use of "; ok" to suppress "warning[fwdref]"
 445+ 704E             >
 445+ 704E             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 446+ 704E ED 68                        dw      SPFETCH                 // sp@
 447+ 7050 26 6E 57 6B                  dw      CSP, STORE              // csp !
 448+ 7054 25 69                        dw      EXIT                    // ;
 449+ 7056
 450+ 7056              //  ______________________________________________________________________
 451+ 7056              //
 452+ 7056              // ?error       f n --
 453+ 7056              // rase error n if flag f it true
 454+ 7056                              Colon_Def QERROR, "?ERROR", is_normal
 454+ 7056             >                New_Def  QERROR, "?ERROR", Enter_Ptr, is_normal ; ok
 454+ 7056             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 454+ 7056             >
 454+ 7056             >                // dummy db directives used to calculate length of namec
 454+ 7056 3F 45 52 52 >                db      "?ERROR"
 454+ 705A 4F 52       >
 454+ 705C             >len_NFA         defl    $ - temp_NFA
 454+ 705C             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 454+ 7056             >
 454+ 7056 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 454+ 7057 3F 45 52 52 >                db      "?ERROR"               // name string in 7-bit ascii, but
 454+ 705B 4F 52       >
 454+ 705D             >                org     $-1                 // alter last byte of Name just above to set
 454+ 705C D2          >                db      {b $} | END_BIT     // msb as name end
 454+ 705D             >
 454+ 705D 45 70       >                dw      last_NFA            // Link to previous definition Name
 454+ 705F             >QERROR:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 454+ 705F 3B 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 454+ 7061             >                else
 454+ 7061 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 454+ 7061             >                endif           ; ok        // for other definitions it "points" the correct handler
 454+ 7061             >                // Use of "; ok" to suppress "warning[fwdref]"
 454+ 7061             >
 454+ 7061             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 455+ 7061 AA 6A                        dw      SWAP                    // swap
 456+ 7063                                                              // if
 457+ 7063 E3 63                        dw      ZBRANCH
 458+ 7065 08 00                        dw      QError_Else - $
 459+ 7067 CF 75                        dw          ERROR               //      error  ( is a forward-ref )
 460+ 7069                                                              // else
 461+ 7069 CC 63                        dw      BRANCH
 462+ 706B 04 00                        dw      QError_Endif - $
 463+ 706D              QError_Else:
 464+ 706D 82 6A                        dw          DROP                //      drop
 465+ 706F              QError_Endif:                                   // endif
 466+ 706F 25 69                        dw      EXIT                    // ;
 467+ 7071
 468+ 7071              //  ______________________________________________________________________
 469+ 7071              //
 470+ 7071              // ?comp       --
 471+ 7071              // raise msg #17 if not compiling
 472+ 7071                              Colon_Def QCOMP, "?COMP", is_normal
 472+ 7071             >                New_Def  QCOMP, "?COMP", Enter_Ptr, is_normal ; ok
 472+ 7071             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 472+ 7071             >
 472+ 7071             >                // dummy db directives used to calculate length of namec
 472+ 7071 3F 43 4F 4D >                db      "?COMP"
 472+ 7075 50          >
 472+ 7076             >len_NFA         defl    $ - temp_NFA
 472+ 7076             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 472+ 7071             >
 472+ 7071 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 472+ 7072 3F 43 4F 4D >                db      "?COMP"               // name string in 7-bit ascii, but
 472+ 7076 50          >
 472+ 7077             >                org     $-1                 // alter last byte of Name just above to set
 472+ 7076 D0          >                db      {b $} | END_BIT     // msb as name end
 472+ 7077             >
 472+ 7077 56 70       >                dw      last_NFA            // Link to previous definition Name
 472+ 7079             >QCOMP:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 472+ 7079 3B 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 472+ 707B             >                else
 472+ 707B ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 472+ 707B             >                endif           ; ok        // for other definitions it "points" the correct handler
 472+ 707B             >                // Use of "; ok" to suppress "warning[fwdref]"
 472+ 707B             >
 472+ 707B             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 473+ 707B 01 6E 4A 6B                  dw      STATE, FETCH            // state @
 474+ 707F 88 69                        dw      ZEQUAL                  // 0=
 475+ 7081 A9 63 11 00                  dw      LIT, 17                 // 17  ( can't be executed )
 476+ 7085 5F 70                        dw      QERROR                  // ?error
 477+ 7087 25 69                        dw      EXIT                    // ;
 478+ 7089
 479+ 7089              //  ______________________________________________________________________
 480+ 7089              //
 481+ 7089              // ?exec       --
 482+ 7089              // raise msg #18 if compiling
 483+ 7089                              Colon_Def QEXEC, "?EXEC", is_normal
 483+ 7089             >                New_Def  QEXEC, "?EXEC", Enter_Ptr, is_normal ; ok
 483+ 7089             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 483+ 7089             >
 483+ 7089             >                // dummy db directives used to calculate length of namec
 483+ 7089 3F 45 58 45 >                db      "?EXEC"
 483+ 708D 43          >
 483+ 708E             >len_NFA         defl    $ - temp_NFA
 483+ 708E             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 483+ 7089             >
 483+ 7089 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 483+ 708A 3F 45 58 45 >                db      "?EXEC"               // name string in 7-bit ascii, but
 483+ 708E 43          >
 483+ 708F             >                org     $-1                 // alter last byte of Name just above to set
 483+ 708E C3          >                db      {b $} | END_BIT     // msb as name end
 483+ 708F             >
 483+ 708F 71 70       >                dw      last_NFA            // Link to previous definition Name
 483+ 7091             >QEXEC:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 483+ 7091 3B 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 483+ 7093             >                else
 483+ 7093 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 483+ 7093             >                endif           ; ok        // for other definitions it "points" the correct handler
 483+ 7093             >                // Use of "; ok" to suppress "warning[fwdref]"
 483+ 7093             >
 483+ 7093             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 484+ 7093 01 6E 4A 6B                  dw      STATE, FETCH            // state @
 485+ 7097 A9 63 12 00                  dw      LIT, 18                 // 18  ( can't be compiled )
 486+ 709B 5F 70                        dw      QERROR                  // ?error
 487+ 709D 25 69                        dw      EXIT                    // ;
 488+ 709F
 489+ 709F              //  ______________________________________________________________________
 490+ 709F              //
 491+ 709F              // ?pairs       n1 n2 --
 492+ 709F              // raise msg #19 if n1 != n2. Compiler pushes some placeholder to stack for syntax checking
 493+ 709F                              Colon_Def QPAIRS, "?PAIRS", is_normal
 493+ 709F             >                New_Def  QPAIRS, "?PAIRS", Enter_Ptr, is_normal ; ok
 493+ 709F             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 493+ 709F             >
 493+ 709F             >                // dummy db directives used to calculate length of namec
 493+ 709F 3F 50 41 49 >                db      "?PAIRS"
 493+ 70A3 52 53       >
 493+ 70A5             >len_NFA         defl    $ - temp_NFA
 493+ 70A5             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 493+ 709F             >
 493+ 709F 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 493+ 70A0 3F 50 41 49 >                db      "?PAIRS"               // name string in 7-bit ascii, but
 493+ 70A4 52 53       >
 493+ 70A6             >                org     $-1                 // alter last byte of Name just above to set
 493+ 70A5 D3          >                db      {b $} | END_BIT     // msb as name end
 493+ 70A6             >
 493+ 70A6 89 70       >                dw      last_NFA            // Link to previous definition Name
 493+ 70A8             >QPAIRS:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 493+ 70A8 3B 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 493+ 70AA             >                else
 493+ 70AA ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 493+ 70AA             >                endif           ; ok        // for other definitions it "points" the correct handler
 493+ 70AA             >                // Use of "; ok" to suppress "warning[fwdref]"
 493+ 70AA             >
 493+ 70AA             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 494+ 70AA E8 6E                        dw      SUBTRACT                // -
 495+ 70AC A9 63 13 00                  dw      LIT, 19                 // 18  ( syntax error )
 496+ 70B0 5F 70                        dw      QERROR                  // ?error
 497+ 70B2 25 69                        dw      EXIT                    // ;
 498+ 70B4
 499+ 70B4              //  ______________________________________________________________________
 500+ 70B4              //
 501+ 70B4              // ?csp       --
 502+ 70B4              // raise msg #20 if surrent SP in not what previously saved in CSP.
 503+ 70B4              // Compiler relies on that for  syntax checking of structures
 504+ 70B4                              Colon_Def QCSP, "?CSP", is_normal
 504+ 70B4             >                New_Def  QCSP, "?CSP", Enter_Ptr, is_normal ; ok
 504+ 70B4             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 504+ 70B4             >
 504+ 70B4             >                // dummy db directives used to calculate length of namec
 504+ 70B4 3F 43 53 50 >                db      "?CSP"
 504+ 70B8             >len_NFA         defl    $ - temp_NFA
 504+ 70B8             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 504+ 70B4             >
 504+ 70B4 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 504+ 70B5 3F 43 53 50 >                db      "?CSP"               // name string in 7-bit ascii, but
 504+ 70B9             >                org     $-1                 // alter last byte of Name just above to set
 504+ 70B8 D0          >                db      {b $} | END_BIT     // msb as name end
 504+ 70B9             >
 504+ 70B9 9F 70       >                dw      last_NFA            // Link to previous definition Name
 504+ 70BB             >QCSP:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 504+ 70BB 3B 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 504+ 70BD             >                else
 504+ 70BD ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 504+ 70BD             >                endif           ; ok        // for other definitions it "points" the correct handler
 504+ 70BD             >                // Use of "; ok" to suppress "warning[fwdref]"
 504+ 70BD             >
 504+ 70BD             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 505+ 70BD ED 68                        dw      SPFETCH                 // sp@
 506+ 70BF 26 6E 4A 6B                  dw      CSP, FETCH              // csp @
 507+ 70C3 E8 6E                        dw      SUBTRACT                // -
 508+ 70C5 A9 63 14 00                  dw      LIT, 20                 // 20  ( bad definition end )
 509+ 70C9 5F 70                        dw      QERROR                  // ?error
 510+ 70CB 25 69                        dw      EXIT                    // ;
 511+ 70CD
 512+ 70CD              //  ______________________________________________________________________
 513+ 70CD              //
 514+ 70CD              // ?loading      --
 515+ 70CD              // raise msg #22 if not loading
 516+ 70CD                              Colon_Def QLOADING, "?LOADING", is_normal
 516+ 70CD             >                New_Def  QLOADING, "?LOADING", Enter_Ptr, is_normal ; ok
 516+ 70CD             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 516+ 70CD             >
 516+ 70CD             >                // dummy db directives used to calculate length of namec
 516+ 70CD 3F 4C 4F 41 >                db      "?LOADING"
 516+ 70D1 44 49 4E 47 >
 516+ 70D5             >len_NFA         defl    $ - temp_NFA
 516+ 70D5             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 516+ 70CD             >
 516+ 70CD 88          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 516+ 70CE 3F 4C 4F 41 >                db      "?LOADING"               // name string in 7-bit ascii, but
 516+ 70D2 44 49 4E 47 >
 516+ 70D6             >                org     $-1                 // alter last byte of Name just above to set
 516+ 70D5 C7          >                db      {b $} | END_BIT     // msb as name end
 516+ 70D6             >
 516+ 70D6 B4 70       >                dw      last_NFA            // Link to previous definition Name
 516+ 70D8             >QLOADING:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 516+ 70D8 3B 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 516+ 70DA             >                else
 516+ 70DA ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 516+ 70DA             >                endif           ; ok        // for other definitions it "points" the correct handler
 516+ 70DA             >                // Use of "; ok" to suppress "warning[fwdref]"
 516+ 70DA             >
 516+ 70DA             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 517+ 70DA B5 6D 4A 6B                  dw      BLK, FETCH              // blk @
 518+ 70DE 88 69                        dw      ZEQUAL                  // 0=
 519+ 70E0 A9 63 16 00                  dw      LIT, 22                 // 22  ( aren't loading now )
 520+ 70E4 5F 70                        dw      QERROR                  // ?error
 521+ 70E6 25 69                        dw      EXIT                    // ;
 522+ 70E8
 523+ 70E8              //  ______________________________________________________________________
 524+ 70E8              //
 525+ 70E8              // compile      --
 526+ 70E8              // compiles the following word
 527+ 70E8                              Colon_Def COMPILE, "COMPILE", is_normal
 527+ 70E8             >                New_Def  COMPILE, "COMPILE", Enter_Ptr, is_normal ; ok
 527+ 70E8             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 527+ 70E8             >
 527+ 70E8             >                // dummy db directives used to calculate length of namec
 527+ 70E8 43 4F 4D 50 >                db      "COMPILE"
 527+ 70EC 49 4C 45    >
 527+ 70EF             >len_NFA         defl    $ - temp_NFA
 527+ 70EF             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 527+ 70E8             >
 527+ 70E8 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 527+ 70E9 43 4F 4D 50 >                db      "COMPILE"               // name string in 7-bit ascii, but
 527+ 70ED 49 4C 45    >
 527+ 70F0             >                org     $-1                 // alter last byte of Name just above to set
 527+ 70EF C5          >                db      {b $} | END_BIT     // msb as name end
 527+ 70F0             >
 527+ 70F0 CD 70       >                dw      last_NFA            // Link to previous definition Name
 527+ 70F2             >COMPILE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 527+ 70F2 3B 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 527+ 70F4             >                else
 527+ 70F4 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 527+ 70F4             >                endif           ; ok        // for other definitions it "points" the correct handler
 527+ 70F4             >                // Use of "; ok" to suppress "warning[fwdref]"
 527+ 70F4             >
 527+ 70F4             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 528+ 70F4 79 70                        dw      QCOMP                   // ?comp
 529+ 70F6 67 69                        dw      R_TO                    // r>
 530+ 70F8 B7 6A 1C 6A                  dw      DUP, CELL_PLUS          // dup, cell+
 531+ 70FC 53 69                        dw      TO_R                    // >r
 532+ 70FE 4A 6B B1 6E                  dw      FETCH, COMMA            // @ ,
 533+ 7102 25 69                        dw      EXIT                    // ;
 534+ 7104
 535+ 7104              //  ______________________________________________________________________
 536+ 7104              //
 537+ 7104              // compile,     --
 538+ 7104              // compiles the following word
 539+ 7104                              Colon_Def COMPILE_XT, "COMPILE,", is_normal
 539+ 7104             >                New_Def  COMPILE_XT, "COMPILE,", Enter_Ptr, is_normal ; ok
 539+ 7104             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 539+ 7104             >
 539+ 7104             >                // dummy db directives used to calculate length of namec
 539+ 7104 43 4F 4D 50 >                db      "COMPILE,"
 539+ 7108 49 4C 45 2C >
 539+ 710C             >len_NFA         defl    $ - temp_NFA
 539+ 710C             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 539+ 7104             >
 539+ 7104 88          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 539+ 7105 43 4F 4D 50 >                db      "COMPILE,"               // name string in 7-bit ascii, but
 539+ 7109 49 4C 45 2C >
 539+ 710D             >                org     $-1                 // alter last byte of Name just above to set
 539+ 710C AC          >                db      {b $} | END_BIT     // msb as name end
 539+ 710D             >
 539+ 710D E8 70       >                dw      last_NFA            // Link to previous definition Name
 539+ 710F             >COMPILE_XT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 539+ 710F 3B 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 539+ 7111             >                else
 539+ 7111 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 539+ 7111             >                endif           ; ok        // for other definitions it "points" the correct handler
 539+ 7111             >                // Use of "; ok" to suppress "warning[fwdref]"
 539+ 7111             >
 539+ 7111             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 540+ 7111 79 70                        dw      QCOMP                   // ?comp
 541+ 7113 B1 6E                        dw      COMMA                   // ,
 542+ 7115 25 69                        dw      EXIT                    // ;
 543+ 7117
 544+ 7117              //  ______________________________________________________________________
 545+ 7117              //
 546+ 7117              // [            --
 547+ 7117              // stop compilation
 548+ 7117                              Colon_Def SQUARED_OPEN, "[", is_immediate
 548+ 7117             >                New_Def  SQUARED_OPEN, "[", Enter_Ptr, is_immediate ; ok
 548+ 7117             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 548+ 7117             >
 548+ 7117             >                // dummy db directives used to calculate length of namec
 548+ 7117 5B          >                db      "["
 548+ 7118             >len_NFA         defl    $ - temp_NFA
 548+ 7118             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 548+ 7117             >
 548+ 7117 C1          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 548+ 7118 5B          >                db      "["               // name string in 7-bit ascii, but
 548+ 7119             >                org     $-1                 // alter last byte of Name just above to set
 548+ 7118 DB          >                db      {b $} | END_BIT     // msb as name end
 548+ 7119             >
 548+ 7119 04 71       >                dw      last_NFA            // Link to previous definition Name
 548+ 711B             >SQUARED_OPEN:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 548+ 711B 3B 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 548+ 711D             >                else
 548+ 711D ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 548+ 711D             >                endif           ; ok        // for other definitions it "points" the correct handler
 548+ 711D             >                // Use of "; ok" to suppress "warning[fwdref]"
 548+ 711D             >
 548+ 711D             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 549+ 711D B6 6C                        dw      ZERO                    // 0
 550+ 711F 01 6E 57 6B                  dw      STATE, STORE            // state !
 551+ 7123 25 69                        dw      EXIT                    // ; immediate
 552+ 7125
 553+ 7125              //  ______________________________________________________________________
 554+ 7125              //
 555+ 7125              // ]            --
 556+ 7125              // start compilation
 557+ 7125                              Colon_Def SQUARED_CLOSE, "]", is_normal
 557+ 7125             >                New_Def  SQUARED_CLOSE, "]", Enter_Ptr, is_normal ; ok
 557+ 7125             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 557+ 7125             >
 557+ 7125             >                // dummy db directives used to calculate length of namec
 557+ 7125 5D          >                db      "]"
 557+ 7126             >len_NFA         defl    $ - temp_NFA
 557+ 7126             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 557+ 7125             >
 557+ 7125 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 557+ 7126 5D          >                db      "]"               // name string in 7-bit ascii, but
 557+ 7127             >                org     $-1                 // alter last byte of Name just above to set
 557+ 7126 DD          >                db      {b $} | END_BIT     // msb as name end
 557+ 7127             >
 557+ 7127 17 71       >                dw      last_NFA            // Link to previous definition Name
 557+ 7129             >SQUARED_CLOSE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 557+ 7129 3B 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 557+ 712B             >                else
 557+ 712B ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 557+ 712B             >                endif           ; ok        // for other definitions it "points" the correct handler
 557+ 712B             >                // Use of "; ok" to suppress "warning[fwdref]"
 557+ 712B             >
 557+ 712B             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 558+ 712B A9 63 C0 00                  dw      LIT, $C0                // 192
 559+ 712F 01 6E 57 6B                  dw      STATE, STORE            // state !
 560+ 7133 25 69                        dw      EXIT                    // ;
 561+ 7135
 562+ 7135              //  ______________________________________________________________________
 563+ 7135              //
 564+ 7135              // smudge       --
 565+ 7135              // toggle smudge bit of latest definition
 566+ 7135                              Colon_Def SMUDGE, "SMUDGE", is_normal
 566+ 7135             >                New_Def  SMUDGE, "SMUDGE", Enter_Ptr, is_normal ; ok
 566+ 7135             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 566+ 7135             >
 566+ 7135             >                // dummy db directives used to calculate length of namec
 566+ 7135 53 4D 55 44 >                db      "SMUDGE"
 566+ 7139 47 45       >
 566+ 713B             >len_NFA         defl    $ - temp_NFA
 566+ 713B             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 566+ 7135             >
 566+ 7135 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 566+ 7136 53 4D 55 44 >                db      "SMUDGE"               // name string in 7-bit ascii, but
 566+ 713A 47 45       >
 566+ 713C             >                org     $-1                 // alter last byte of Name just above to set
 566+ 713B C5          >                db      {b $} | END_BIT     // msb as name end
 566+ 713C             >
 566+ 713C 25 71       >                dw      last_NFA            // Link to previous definition Name
 566+ 713E             >SMUDGE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 566+ 713E 3B 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 566+ 7140             >                else
 566+ 7140 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 566+ 7140             >                endif           ; ok        // for other definitions it "points" the correct handler
 566+ 7140             >                // Use of "; ok" to suppress "warning[fwdref]"
 566+ 7140             >
 566+ 7140             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 567+ 7140 DB 6F                        dw      LATEST                  // latest
 568+ 7142 A9 63 20 00                  dw      LIT, SMUDGE_BIT         // 32
 569+ 7146 3D 6B                        dw      TOGGLE                  // toggle
 570+ 7148 25 69                        dw      EXIT                    // ;
 571+ 714A
 572+ 714A              //  ______________________________________________________________________
 573+ 714A              //
 574+ 714A              // immediate    --
 575+ 714A              // make immediate the latest definition
 576+ 714A                              Colon_Def IMMEDIATE, "IMMEDIATE", is_normal
 576+ 714A             >                New_Def  IMMEDIATE, "IMMEDIATE", Enter_Ptr, is_normal ; ok
 576+ 714A             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 576+ 714A             >
 576+ 714A             >                // dummy db directives used to calculate length of namec
 576+ 714A 49 4D 4D 45 >                db      "IMMEDIATE"
 576+ 714E 44 49 41 54 >
 576+ 7152 45          >
 576+ 7153             >len_NFA         defl    $ - temp_NFA
 576+ 7153             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 576+ 714A             >
 576+ 714A 89          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 576+ 714B 49 4D 4D 45 >                db      "IMMEDIATE"               // name string in 7-bit ascii, but
 576+ 714F 44 49 41 54 >
 576+ 7153 45          >
 576+ 7154             >                org     $-1                 // alter last byte of Name just above to set
 576+ 7153 C5          >                db      {b $} | END_BIT     // msb as name end
 576+ 7154             >
 576+ 7154 35 71       >                dw      last_NFA            // Link to previous definition Name
 576+ 7156             >IMMEDIATE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 576+ 7156 3B 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 576+ 7158             >                else
 576+ 7158 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 576+ 7158             >                endif           ; ok        // for other definitions it "points" the correct handler
 576+ 7158             >                // Use of "; ok" to suppress "warning[fwdref]"
 576+ 7158             >
 576+ 7158             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 577+ 7158 DB 6F                        dw      LATEST                  // latest
 578+ 715A A9 63 40 00                  dw      LIT, $40                // 64
 579+ 715E 3D 6B                        dw      TOGGLE                  // toggle
 580+ 7160 25 69                        dw      EXIT                    // ;
 581+ 7162
 582+ 7162              //  ______________________________________________________________________
 583+ 7162              //
 584+ 7162              // hex          --
 585+ 7162              // change numeration base
 586+ 7162                              Colon_Def HEX, "HEX", is_normal
 586+ 7162             >                New_Def  HEX, "HEX", Enter_Ptr, is_normal ; ok
 586+ 7162             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 586+ 7162             >
 586+ 7162             >                // dummy db directives used to calculate length of namec
 586+ 7162 48 45 58    >                db      "HEX"
 586+ 7165             >len_NFA         defl    $ - temp_NFA
 586+ 7165             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 586+ 7162             >
 586+ 7162 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 586+ 7163 48 45 58    >                db      "HEX"               // name string in 7-bit ascii, but
 586+ 7166             >                org     $-1                 // alter last byte of Name just above to set
 586+ 7165 D8          >                db      {b $} | END_BIT     // msb as name end
 586+ 7166             >
 586+ 7166 4A 71       >                dw      last_NFA            // Link to previous definition Name
 586+ 7168             >HEX:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 586+ 7168 3B 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 586+ 716A             >                else
 586+ 716A ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 586+ 716A             >                endif           ; ok        // for other definitions it "points" the correct handler
 586+ 716A             >                // Use of "; ok" to suppress "warning[fwdref]"
 586+ 716A             >
 586+ 716A             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 587+ 716A A9 63 10 00                  dw      LIT, 16                 // 16
 588+ 716E 0B 6E 57 6B                  dw      BASE, STORE             // base !
 589+ 7172 25 69                        dw      EXIT                    // ;
 590+ 7174
 591+ 7174              //  ______________________________________________________________________
 592+ 7174              //
 593+ 7174              // decimal      --
 594+ 7174              // change numeration base
 595+ 7174                              Colon_Def DECIMAL, "DECIMAL", is_normal
 595+ 7174             >                New_Def  DECIMAL, "DECIMAL", Enter_Ptr, is_normal ; ok
 595+ 7174             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 595+ 7174             >
 595+ 7174             >                // dummy db directives used to calculate length of namec
 595+ 7174 44 45 43 49 >                db      "DECIMAL"
 595+ 7178 4D 41 4C    >
 595+ 717B             >len_NFA         defl    $ - temp_NFA
 595+ 717B             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 595+ 7174             >
 595+ 7174 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 595+ 7175 44 45 43 49 >                db      "DECIMAL"               // name string in 7-bit ascii, but
 595+ 7179 4D 41 4C    >
 595+ 717C             >                org     $-1                 // alter last byte of Name just above to set
 595+ 717B CC          >                db      {b $} | END_BIT     // msb as name end
 595+ 717C             >
 595+ 717C 62 71       >                dw      last_NFA            // Link to previous definition Name
 595+ 717E             >DECIMAL:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 595+ 717E 3B 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 595+ 7180             >                else
 595+ 7180 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 595+ 7180             >                endif           ; ok        // for other definitions it "points" the correct handler
 595+ 7180             >                // Use of "; ok" to suppress "warning[fwdref]"
 595+ 7180             >
 595+ 7180             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 596+ 7180 A9 63 0A 00                  dw      LIT, 10                 // 10
 597+ 7184 0B 6E 57 6B                  dw      BASE, STORE             // base !
 598+ 7188 25 69                        dw      EXIT                    // ;
 599+ 718A
 600+ 718A              //  ______________________________________________________________________
 601+ 718A              //
 602+ 718A              // (;code)       --
 603+ 718A              // patch to CFA to call/jump to the "following code"
 604+ 718A                              Colon_Def C_SEMICOLON_CODE, "(;CODE)", is_normal
 604+ 718A             >                New_Def  C_SEMICOLON_CODE, "(;CODE)", Enter_Ptr, is_normal ; ok
 604+ 718A             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 604+ 718A             >
 604+ 718A             >                // dummy db directives used to calculate length of namec
 604+ 718A 28 3B 43 4F >                db      "(;CODE)"
 604+ 718E 44 45 29    >
 604+ 7191             >len_NFA         defl    $ - temp_NFA
 604+ 7191             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 604+ 718A             >
 604+ 718A 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 604+ 718B 28 3B 43 4F >                db      "(;CODE)"               // name string in 7-bit ascii, but
 604+ 718F 44 45 29    >
 604+ 7192             >                org     $-1                 // alter last byte of Name just above to set
 604+ 7191 A9          >                db      {b $} | END_BIT     // msb as name end
 604+ 7192             >
 604+ 7192 74 71       >                dw      last_NFA            // Link to previous definition Name
 604+ 7194             >C_SEMICOLON_CODE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 604+ 7194 3B 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 604+ 7196             >                else
 604+ 7196 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 604+ 7196             >                endif           ; ok        // for other definitions it "points" the correct handler
 604+ 7196             >                // Use of "; ok" to suppress "warning[fwdref]"
 604+ 7196             >
 604+ 7196             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 605+ 7196 67 69                        dw      R_TO                    // r>       ( Return Stack has IP to caller's next cell )
 606+ 7198 DB 6F                        dw      LATEST                  // latest   ( Word being defined in this moment )
 607+ 719A 19 70 F9 6F                  dw      PFA, CFA                // pfa cfa  ( cfa of latest word )
 608+ 719E
 609+ 719E
 610+ 719E
 611+ 719E
 612+ 719E
 613+ 719E 57 6B                        dw      STORE                   // !
 614+ 71A0 25 69                        dw      EXIT                    // ;
 615+ 71A2
 616+ 71A2              //  ______________________________________________________________________
 617+ 71A2              //
 618+ 71A2              // ;code        --
 619+ 71A2                              Colon_Def SEMICOLON_CODE, ";CODE", is_immediate
 619+ 71A2             >                New_Def  SEMICOLON_CODE, ";CODE", Enter_Ptr, is_immediate ; ok
 619+ 71A2             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 619+ 71A2             >
 619+ 71A2             >                // dummy db directives used to calculate length of namec
 619+ 71A2 3B 43 4F 44 >                db      ";CODE"
 619+ 71A6 45          >
 619+ 71A7             >len_NFA         defl    $ - temp_NFA
 619+ 71A7             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 619+ 71A2             >
 619+ 71A2 C5          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 619+ 71A3 3B 43 4F 44 >                db      ";CODE"               // name string in 7-bit ascii, but
 619+ 71A7 45          >
 619+ 71A8             >                org     $-1                 // alter last byte of Name just above to set
 619+ 71A7 C5          >                db      {b $} | END_BIT     // msb as name end
 619+ 71A8             >
 619+ 71A8 8A 71       >                dw      last_NFA            // Link to previous definition Name
 619+ 71AA             >SEMICOLON_CODE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 619+ 71AA 3B 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 619+ 71AC             >                else
 619+ 71AC ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 619+ 71AC             >                endif           ; ok        // for other definitions it "points" the correct handler
 619+ 71AC             >                // Use of "; ok" to suppress "warning[fwdref]"
 619+ 71AC             >
 619+ 71AC             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 620+ 71AC BB 70                        dw      QCSP                    // ?csp
 621+ 71AE F2 70                        dw      COMPILE                 // compile
 622+ 71B0 94 71                        dw      C_SEMICOLON_CODE        // (;code)
 623+ 71B2 1B 71                        dw      SQUARED_OPEN            // [
 624+ 71B4 63 6C                        dw      NOOP                    // noop () can be patched later to ASSEMBLER... )
 625+ 71B6 25 69                        dw      EXIT                    // ; immediate
 626+ 71B8
 627+ 71B8              //  ______________________________________________________________________
 628+ 71B8              //
 629+ 71B8              // <builds      --
 630+ 71B8                              Colon_Def CBUILDS, "<BUILDS", is_normal
 630+ 71B8             >                New_Def  CBUILDS, "<BUILDS", Enter_Ptr, is_normal ; ok
 630+ 71B8             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 630+ 71B8             >
 630+ 71B8             >                // dummy db directives used to calculate length of namec
 630+ 71B8 3C 42 55 49 >                db      "<BUILDS"
 630+ 71BC 4C 44 53    >
 630+ 71BF             >len_NFA         defl    $ - temp_NFA
 630+ 71BF             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 630+ 71B8             >
 630+ 71B8 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 630+ 71B9 3C 42 55 49 >                db      "<BUILDS"               // name string in 7-bit ascii, but
 630+ 71BD 4C 44 53    >
 630+ 71C0             >                org     $-1                 // alter last byte of Name just above to set
 630+ 71BF D3          >                db      {b $} | END_BIT     // msb as name end
 630+ 71C0             >
 630+ 71C0 A2 71       >                dw      last_NFA            // Link to previous definition Name
 630+ 71C2             >CBUILDS:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 630+ 71C2 3B 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 630+ 71C4             >                else
 630+ 71C4 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 630+ 71C4             >                endif           ; ok        // for other definitions it "points" the correct handler
 630+ 71C4             >                // Use of "; ok" to suppress "warning[fwdref]"
 630+ 71C4             >
 630+ 71C4             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 631+ 71C4 B6 6C                        dw      ZERO                    // 0
 632+ 71C6 72 6C                        dw      CONSTANT                // constant
 633+ 71C8 25 69                        dw      EXIT                    // ;
 634+ 71CA
 635+ 71CA              //  ______________________________________________________________________
 636+ 71CA              //
 637+ 71CA              // recurse      --
 638+ 71CA              //              Colon_Def RECURSE, "RECURSE", is_immediate
 639+ 71CA              //              dw      QCOMP                   // ?comp
 640+ 71CA              //              dw      LATEST                  // latest
 641+ 71CA              //              dw      PFA, CFA                // pfa cfa
 642+ 71CA              //              dw      COMMA                   // ,
 643+ 71CA              //              dw      EXIT                    // ; immediate
 644+ 71CA
 645+ 71CA              //  ______________________________________________________________________
 646+ 71CA              //
 647+ 71CA              // does>     --
 648+ 71CA                              Colon_Def DOES_TO, "DOES>", is_normal
 648+ 71CA             >                New_Def  DOES_TO, "DOES>", Enter_Ptr, is_normal ; ok
 648+ 71CA             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 648+ 71CA             >
 648+ 71CA             >                // dummy db directives used to calculate length of namec
 648+ 71CA 44 4F 45 53 >                db      "DOES>"
 648+ 71CE 3E          >
 648+ 71CF             >len_NFA         defl    $ - temp_NFA
 648+ 71CF             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 648+ 71CA             >
 648+ 71CA 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 648+ 71CB 44 4F 45 53 >                db      "DOES>"               // name string in 7-bit ascii, but
 648+ 71CF 3E          >
 648+ 71D0             >                org     $-1                 // alter last byte of Name just above to set
 648+ 71CF BE          >                db      {b $} | END_BIT     // msb as name end
 648+ 71D0             >
 648+ 71D0 B8 71       >                dw      last_NFA            // Link to previous definition Name
 648+ 71D2             >DOES_TO:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 648+ 71D2 3B 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 648+ 71D4             >                else
 648+ 71D4 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 648+ 71D4             >                endif           ; ok        // for other definitions it "points" the correct handler
 648+ 71D4             >                // Use of "; ok" to suppress "warning[fwdref]"
 648+ 71D4             >
 648+ 71D4             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 649+ 71D4 67 69                        dw      R_TO                    // r>
 650+ 71D6 DB 6F                        dw      LATEST                  // latest
 651+ 71D8 19 70                        dw      PFA                     // pfa
 652+ 71DA 57 6B                        dw      STORE                   // !
 653+ 71DC 94 71                        dw      C_SEMICOLON_CODE        // ;code
 654+ 71DE              Does_Ptr:
 655+ 71DE                              // via call coded in CFA
 656+ 71DE                              ldhlrp
 656+ 71DE 2A 96 63    >                ld      hl,(RP_Pointer)
 657+ 71E1 2B                           dec     hl                  // push on Return-Stack current Instruction-Pointer
 658+ 71E2 70                           ld      (hl), b
 659+ 71E3 2B                           dec     hl
 660+ 71E4 71                           ld      (hl), c
 661+ 71E5                              ldrphl
 661+ 71E5 22 96 63    >                ld      (RP_Pointer),hl
 662+ 71E8 13                           inc     de
 663+ 71E9 EB                           ex      de, hl
 664+ 71EA 4E                           ld      c, (hl)
 665+ 71EB 23                           inc     hl
 666+ 71EC 46                           ld      b, (hl)
 667+ 71ED 23                           inc     hl
 668+ 71EE
 669+ 71EE                              psh1
 669+ 71EE E5          >                push    hl
 669+ 71EF DD E9       >                jp      (ix)
 670+ 71F1                              // SMUDGE !
 671+ 71F1
 672+ 71F1              //  ______________________________________________________________________
 673+ 71F1              //
 674+ 71F1              // count        a -- a2 n
 675+ 71F1              // expects a counted string at address a, returns string address and counter
 676+ 71F1                              Colon_Def COUNT, "COUNT", is_normal
 676+ 71F1             >                New_Def  COUNT, "COUNT", Enter_Ptr, is_normal ; ok
 676+ 71F1             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 676+ 71F1             >
 676+ 71F1             >                // dummy db directives used to calculate length of namec
 676+ 71F1 43 4F 55 4E >                db      "COUNT"
 676+ 71F5 54          >
 676+ 71F6             >len_NFA         defl    $ - temp_NFA
 676+ 71F6             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 676+ 71F1             >
 676+ 71F1 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 676+ 71F2 43 4F 55 4E >                db      "COUNT"               // name string in 7-bit ascii, but
 676+ 71F6 54          >
 676+ 71F7             >                org     $-1                 // alter last byte of Name just above to set
 676+ 71F6 D4          >                db      {b $} | END_BIT     // msb as name end
 676+ 71F7             >
 676+ 71F7 CA 71       >                dw      last_NFA            // Link to previous definition Name
 676+ 71F9             >COUNT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 676+ 71F9 3B 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 676+ 71FB             >                else
 676+ 71FB ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 676+ 71FB             >                endif           ; ok        // for other definitions it "points" the correct handler
 676+ 71FB             >                // Use of "; ok" to suppress "warning[fwdref]"
 676+ 71FB             >
 676+ 71FB             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 677+ 71FB B7 6A                        dw      DUP                     // dup
 678+ 71FD F4 69                        dw      ONE_PLUS                // 1+
 679+ 71FF AA 6A 65 6B                  dw      SWAP, CFETCH             // swap @
 680+ 7203 25 69                        dw      EXIT                    // ;
 681+ 7205
 682+ 7205              //  ______________________________________________________________________
 683+ 7205              //
 684+ 7205              // bounds       a n -- a+n n
 685+ 7205              // given an address and a length ( a n ) calculate the bound addresses
 686+ 7205              // suitable for DO-LOOP
 687+ 7205                              Colon_Def BOUNDS, "BOUNDS", is_normal
 687+ 7205             >                New_Def  BOUNDS, "BOUNDS", Enter_Ptr, is_normal ; ok
 687+ 7205             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 687+ 7205             >
 687+ 7205             >                // dummy db directives used to calculate length of namec
 687+ 7205 42 4F 55 4E >                db      "BOUNDS"
 687+ 7209 44 53       >
 687+ 720B             >len_NFA         defl    $ - temp_NFA
 687+ 720B             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 687+ 7205             >
 687+ 7205 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 687+ 7206 42 4F 55 4E >                db      "BOUNDS"               // name string in 7-bit ascii, but
 687+ 720A 44 53       >
 687+ 720C             >                org     $-1                 // alter last byte of Name just above to set
 687+ 720B D3          >                db      {b $} | END_BIT     // msb as name end
 687+ 720C             >
 687+ 720C F1 71       >                dw      last_NFA            // Link to previous definition Name
 687+ 720E             >BOUNDS:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 687+ 720E 3B 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 687+ 7210             >                else
 687+ 7210 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 687+ 7210             >                endif           ; ok        // for other definitions it "points" the correct handler
 687+ 7210             >                // Use of "; ok" to suppress "warning[fwdref]"
 687+ 7210             >
 687+ 7210             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 688+ 7210 72 6A CB 69                  dw      OVER, PLUS, SWAP        // over + swap
 688+ 7214 AA 6A
 689+ 7216 25 69                        dw      EXIT                    // ;
 690+ 7218
 691+ 7218              //  ______________________________________________________________________
 692+ 7218              //
 693+ 7218              // type         a n --
 694+ 7218              // Sends to current output channel n characters starting at address a.
 695+ 7218                              Colon_Def TYPE, "TYPE", is_normal
 695+ 7218             >                New_Def  TYPE, "TYPE", Enter_Ptr, is_normal ; ok
 695+ 7218             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 695+ 7218             >
 695+ 7218             >                // dummy db directives used to calculate length of namec
 695+ 7218 54 59 50 45 >                db      "TYPE"
 695+ 721C             >len_NFA         defl    $ - temp_NFA
 695+ 721C             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 695+ 7218             >
 695+ 7218 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 695+ 7219 54 59 50 45 >                db      "TYPE"               // name string in 7-bit ascii, but
 695+ 721D             >                org     $-1                 // alter last byte of Name just above to set
 695+ 721C C5          >                db      {b $} | END_BIT     // msb as name end
 695+ 721D             >
 695+ 721D 05 72       >                dw      last_NFA            // Link to previous definition Name
 695+ 721F             >TYPE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 695+ 721F 3B 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 695+ 7221             >                else
 695+ 7221 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 695+ 7221             >                endif           ; ok        // for other definitions it "points" the correct handler
 695+ 7221             >                // Use of "; ok" to suppress "warning[fwdref]"
 695+ 7221             >
 695+ 7221             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 696+ 7221 0E 72                        dw      BOUNDS                  // bounds
 697+ 7223 3D 64                        dw      C_Q_DO                  // ?do
 698+ 7225 0C 00                        dw      Type_Skip - $
 699+ 7227              Type_Loop:
 700+ 7227 76 64 65 6B                  dw          I, CFETCH           //      i c@
 701+ 722B 89 6F                        dw          EMIT                //      emit
 702+ 722D F8 63                        dw      C_LOOP                  // loop
 703+ 722F F8 FF                        dw      Type_Loop - $
 704+ 7231              Type_Skip:
 705+ 7231 25 69                        dw      EXIT                    // ;
 706+ 7233
 707+ 7233              //  ______________________________________________________________________
 708+ 7233              //
 709+ 7233              // leave        --
 710+ 7233              // Compile (leave) to leave current LOOP and jump just after it
 711+ 7233                              Colon_Def LEAVE, "LEAVE", is_immediate
 711+ 7233             >                New_Def  LEAVE, "LEAVE", Enter_Ptr, is_immediate ; ok
 711+ 7233             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 711+ 7233             >
 711+ 7233             >                // dummy db directives used to calculate length of namec
 711+ 7233 4C 45 41 56 >                db      "LEAVE"
 711+ 7237 45          >
 711+ 7238             >len_NFA         defl    $ - temp_NFA
 711+ 7238             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 711+ 7233             >
 711+ 7233 C5          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 711+ 7234 4C 45 41 56 >                db      "LEAVE"               // name string in 7-bit ascii, but
 711+ 7238 45          >
 711+ 7239             >                org     $-1                 // alter last byte of Name just above to set
 711+ 7238 C5          >                db      {b $} | END_BIT     // msb as name end
 711+ 7239             >
 711+ 7239 18 72       >                dw      last_NFA            // Link to previous definition Name
 711+ 723B             >LEAVE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 711+ 723B 3B 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 711+ 723D             >                else
 711+ 723D ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 711+ 723D             >                endif           ; ok        // for other definitions it "points" the correct handler
 711+ 723D             >                // Use of "; ok" to suppress "warning[fwdref]"
 711+ 723D             >
 711+ 723D             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 712+ 723D F2 70 3D 69                  dw      COMPILE, C_LEAVE       // compile (leave)     \ unloop and branch
 713+ 7241 95 6E 53 69                  dw      HERE, TO_R, ZERO, COMMA // here >r 0 ,
 713+ 7245 B6 6C B1 6E
 714+ 7249 B6 6C B6 6C                  dw      ZERO, ZERO
 715+ 724D ED 68 B7 6A                  dw      SPFETCH, DUP
 716+ 7251 1C 6A 1C 6A                  dw      CELL_PLUS, CELL_PLUS
 717+ 7255 9A 6A                        dw      TUCK
 718+ 7257 26 6E 4A 6B                  dw      CSP, FETCH
 719+ 725B AA 6A E8 6E                  dw      SWAP, SUBTRACT
 720+ 725F 11 68                        dw      CMOVE
 721+ 7261 26 6E 4A 6B                  dw      CSP, FETCH, CELL_MINUS
 721+ 7265 26 6A
 722+ 7267 67 69 72 6A                  dw      R_TO, OVER, STORE
 722+ 726B 57 6B
 723+ 726D 26 6A B6 6C                  dw      CELL_MINUS, ZERO
 724+ 7271 AA 6A 57 6B                  dw      SWAP, STORE
 725+ 7275 25 69                        dw      EXIT                    // ;
 726+ 7277
 727+ 7277              //  ______________________________________________________________________
 728+ 7277              //
 729+ 7277              // -trailing    a n1 -- a n2
 730+ 7277              // Assumes that an n1 bytes-long string is stored at address a
 731+ 7277              // and the string contains a space delimited word,
 732+ 7277              // Finds n2 as the position of the first character after the word.
 733+ 7277                              Colon_Def LTRAILING, "-TRAILING", is_normal
 733+ 7277             >                New_Def  LTRAILING, "-TRAILING", Enter_Ptr, is_normal ; ok
 733+ 7277             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 733+ 7277             >
 733+ 7277             >                // dummy db directives used to calculate length of namec
 733+ 7277 2D 54 52 41 >                db      "-TRAILING"
 733+ 727B 49 4C 49 4E >
 733+ 727F 47          >
 733+ 7280             >len_NFA         defl    $ - temp_NFA
 733+ 7280             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 733+ 7277             >
 733+ 7277 89          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 733+ 7278 2D 54 52 41 >                db      "-TRAILING"               // name string in 7-bit ascii, but
 733+ 727C 49 4C 49 4E >
 733+ 7280 47          >
 733+ 7281             >                org     $-1                 // alter last byte of Name just above to set
 733+ 7280 C7          >                db      {b $} | END_BIT     // msb as name end
 733+ 7281             >
 733+ 7281 33 72       >                dw      last_NFA            // Link to previous definition Name
 733+ 7283             >LTRAILING:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 733+ 7283 3B 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 733+ 7285             >                else
 733+ 7285 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 733+ 7285             >                endif           ; ok        // for other definitions it "points" the correct handler
 733+ 7285             >                // Use of "; ok" to suppress "warning[fwdref]"
 733+ 7285             >
 733+ 7285             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 734+ 7285 B7 6A B6 6C                  dw      DUP, ZERO               // dup 0
 735+ 7289                                                              // do
 736+ 7289 3D 64                        dw      C_Q_DO
 737+ 728B 20 00                        dw      LTrailing_Leave - $
 738+ 728D              LTrailing_Loop:
 739+ 728D 18 6B CB 69                  dw          TWO_DUP, PLUS       //      2dup +
 740+ 7291 00 6A                        dw          ONE_SUBTRACT        //      1-
 741+ 7293 65 6B                        dw          CFETCH              //      c@
 742+ 7295 E0 6C E8 6E                  dw          BL, SUBTRACT        //      bl -
 743+ 7299                                                              //      if
 744+ 7299 E3 63                        dw          ZBRANCH
 745+ 729B 0A 00                        dw          LTrailing_Else - $
 746+ 729D 3D 69                        dw              C_LEAVE         //          leave
 747+ 729F 0C 00                        dw              LTrailing_Leave - $
 748+ 72A1 CC 63                        dw          BRANCH              //      else
 749+ 72A3 04 00                        dw          LTrailing_Endif - $
 750+ 72A5              LTrailing_Else:
 751+ 72A5 00 6A                        dw              ONE_SUBTRACT    //          1-
 752+ 72A7              LTrailing_Endif:                                //      endif
 753+ 72A7                                                              // loop
 754+ 72A7 F8 63                        dw      C_LOOP
 755+ 72A9 E4 FF                        dw      LTrailing_Loop - $
 756+ 72AB              LTrailing_Leave:
 757+ 72AB 25 69                        dw      EXIT                    // ;
 758+ 72AD
 759+ 72AD              //  ______________________________________________________________________
 760+ 72AD              //
 761+ 72AD              // accept       a n1 -- n2
 762+ 72AD              // Accepts at most n1 characters from terminal and stores them at address a
 763+ 72AD              // CR stops input. A 'nul' is added as trailer.
 764+ 72AD              // n2 is the string length. n2 is kept in span user variable also.
 765+ 72AD                              Colon_Def ACCEPT, "ACCEPT", is_normal
 765+ 72AD             >                New_Def  ACCEPT, "ACCEPT", Enter_Ptr, is_normal ; ok
 765+ 72AD             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 765+ 72AD             >
 765+ 72AD             >                // dummy db directives used to calculate length of namec
 765+ 72AD 41 43 43 45 >                db      "ACCEPT"
 765+ 72B1 50 54       >
 765+ 72B3             >len_NFA         defl    $ - temp_NFA
 765+ 72B3             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 765+ 72AD             >
 765+ 72AD 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 765+ 72AE 41 43 43 45 >                db      "ACCEPT"               // name string in 7-bit ascii, but
 765+ 72B2 50 54       >
 765+ 72B4             >                org     $-1                 // alter last byte of Name just above to set
 765+ 72B3 D4          >                db      {b $} | END_BIT     // msb as name end
 765+ 72B4             >
 765+ 72B4 77 72       >                dw      last_NFA            // Link to previous definition Name
 765+ 72B6             >ACCEPT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 765+ 72B6 3B 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 765+ 72B8             >                else
 765+ 72B8 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 765+ 72B8             >                endif           ; ok        // for other definitions it "points" the correct handler
 765+ 72B8             >                // Use of "; ok" to suppress "warning[fwdref]"
 765+ 72B8             >
 765+ 72B8             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 766+ 72B8 72 6A CB 69                  dw      OVER, PLUS, OVER        //                      ( a  n1+a  a )
 766+ 72BC 72 6A
 767+ 72BE B6 6C D4 6A                  dw      ZERO, DASH_ROT          //                      ( a  0     a+n1  a )
 768+ 72C2                                                              // do
 769+ 72C2 3D 64                        dw      C_Q_DO
 770+ 72C4 8C 00                        dw      Accept_Leave - $
 771+ 72C6              Accept_Loop:
 772+ 72C6 82 6A 85 66                  dw          DROP, KEY           //      drop key        ( a  c )
 773+ 72CA B7 6A                        dw          DUP                 //      dup             ( a  c  c )
 774+ 72CC A9 63 0E 00                  dw          LIT, $0E            //      0E
 775+ 72D0 1C 6D                        dw          PLUS_ORIGIN         //      +origin
 776+ 72D2 4A 6B                        dw          FETCH               //      @               ( a  c  c  del )
 777+ 72D4 F6 6E                        dw          EQUALS              //      =               ( a  c  c==del )
 778+ 72D6                                                              //      if
 779+ 72D6 E3 63                        dw          ZBRANCH
 780+ 72D8 2E 00                        dw          Accept_Else_0 - $
 781+ 72DA 82 6A                        dw              DROP            //          drop        ( a  )
 782+ 72DC B7 6A 76 64                  dw              DUP, I, EQUALS  //          dup i =     ( a  a==i )
 782+ 72E0 F6 6E
 783+ 72E2 BE 6C B5 68                  dw              ONE, AND_OP     //          1 and
 784+ 72E6 B7 6A                        dw              DUP             //          dup         ( a  a==i  a==i )
 785+ 72E8 67 69                        dw              R_TO            //          r> 2 - + r>
 786+ 72EA C6 6C E8 6E                  dw              TWO, SUBTRACT, PLUS //      ( decrement index by 1 or 2 )
 786+ 72EE CB 69
 787+ 72F0 53 69                        dw              TO_R            //
 788+ 72F2                                                              //          if
 789+ 72F2 E3 63                        dw              ZBRANCH
 790+ 72F4 0A 00                        dw              Accept_Else_1 - $
 791+ 72F6 A9 63 07 00                  dw                  LIT, 7      //              7       ( a  7 )
 792+ 72FA                                                              //          else
 793+ 72FA CC 63                        dw              BRANCH
 794+ 72FC 06 00                        dw              Accept_Endif_1 - $
 795+ 72FE              Accept_Else_1:
 796+ 72FE A9 63 08 00                  dw                  LIT, 8      //              8       ( a  8 )
 797+ 7302              Accept_Endif_1:                                 //          endif
 798+ 7302 CC 63                        dw          BRANCH
 799+ 7304 2E 00                        dw          Accept_Endif_0 - $
 800+ 7306              Accept_Else_0:                                  //      else
 801+ 7306 B7 6A                        dw              DUP             //          dup         ( a  c  c )
 802+ 7308 A9 63 0D 00                  dw              LIT, 13         //          13
 803+ 730C F6 6E                        dw              EQUALS          //          =           ( a  c  c==CR )
 804+ 730E                                                              //          if
 805+ 730E E3 63                        dw              ZBRANCH
 806+ 7310 0C 00                        dw              Accept_Else_2 - $
 807+ 7312 82 6A E0 6C                  dw                  DROP, BL    //              drop bl ( a  bl )
 808+ 7316 B6 6C                        dw                  ZERO        //              0       ( a  c  0 )
 809+ 7318                                                              //          else
 810+ 7318 CC 63                        dw              BRANCH
 811+ 731A 04 00                        dw              Accept_Endif_2 - $
 812+ 731C              Accept_Else_2:
 813+ 731C B7 6A                        dw                  DUP         //              dup     ( a  c  c )
 814+ 731E                                                              //          endif
 815+ 731E              Accept_Endif_2:
 816+ 731E 76 64 73 6B                  dw              I, CSTORE       //          i           ( a  c )
 817+ 7322 B7 6A E0 6C                  dw              DUP, BL, LESS   //          dup bl <    ( a  c  c<BL )
 817+ 7326 17 6F
 818+ 7328                                                              //          if
 819+ 7328 E3 63                        dw              ZBRANCH
 820+ 732A 08 00                        dw              Accept_Endif_3 - $
 821+ 732C 67 69                        dw                  R_TO        //              r>
 822+ 732E 00 6A                        dw                  ONE_SUBTRACT//              1-
 823+ 7330 53 69                        dw                  TO_R        //              >r
 824+ 7332                                                              //          endif
 825+ 7332              Accept_Endif_3:
 826+ 7332              Accept_Endif_0:                                 //      endif
 827+ 7332 89 6F                        dw          EMIT                //      emit
 828+ 7334 B6 6C 76 64                  dw          ZERO, I, ONE_PLUS   //      0 i 1+ !
 828+ 7338 F4 69
 829+ 733A 57 6B                        dw          STORE               //          ( zero pad )
 830+ 733C 76 64                        dw          I                   //      i
 831+ 733E 76 64 65 6B                  dw          I, CFETCH, ZEQUAL   //      i 0= if
 831+ 7342 88 69
 832+ 7344 E3 63                        dw          ZBRANCH             //
 833+ 7346 06 00                        dw              Accept_Endif_4 - $
 834+ 7348 3D 69                        dw                  C_LEAVE     //              leave
 835+ 734A 06 00                        dw                  Accept_Leave - $
 836+ 734C              Accept_Endif_4:                                 //      endif
 837+ 734C                                                              // loop
 838+ 734C F8 63                        dw      C_LOOP
 839+ 734E 78 FF                        dw      Accept_Loop - $
 840+ 7350              Accept_Leave:
 841+ 7350 AA 6A E8 6E                  dw      SWAP, SUBTRACT          // swap -
 842+ 7354 F4 69                        dw      ONE_PLUS                // 1+
 843+ 7356 B7 6A 76 6E                  dw      DUP, SPAN, STORE        // dup span !
 843+ 735A 57 6B
 844+ 735C 25 69                        dw      EXIT                    // ;
 845+ 735E
 846+ 735E              //  ______________________________________________________________________
 847+ 735E              //
 848+ 735E              // expect      a n --
 849+ 735E              // Accepts at most n1 characters from terminal and stores them at address a
 850+ 735E              // CR stops input. A 'nul' is added as trailer.
 851+ 735E              // n2 is the string length. n2 is kept in span user variable also.
 852+ 735E              //              Colon_Def EXPECT, "EXPECT", is_normal
 853+ 735E              //              dw      ACCEPT, DROP            // accept drop
 854+ 735E              //              dw      EXIT                    // ;
 855+ 735E
 856+ 735E              //  ______________________________________________________________________
 857+ 735E              //
 858+ 735E              // query        --
 859+ 735E              // Accept at most 80 character from console. CR stops.
 860+ 735E              // Text is stored in TIB. Variable IN is zeroed.
 861+ 735E                              Colon_Def QUERY, "QUERY", is_normal
 861+ 735E             >                New_Def  QUERY, "QUERY", Enter_Ptr, is_normal ; ok
 861+ 735E             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 861+ 735E             >
 861+ 735E             >                // dummy db directives used to calculate length of namec
 861+ 735E 51 55 45 52 >                db      "QUERY"
 861+ 7362 59          >
 861+ 7363             >len_NFA         defl    $ - temp_NFA
 861+ 7363             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 861+ 735E             >
 861+ 735E 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 861+ 735F 51 55 45 52 >                db      "QUERY"               // name string in 7-bit ascii, but
 861+ 7363 59          >
 861+ 7364             >                org     $-1                 // alter last byte of Name just above to set
 861+ 7363 D9          >                db      {b $} | END_BIT     // msb as name end
 861+ 7364             >
 861+ 7364 AD 72       >                dw      last_NFA            // Link to previous definition Name
 861+ 7366             >QUERY:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 861+ 7366 3B 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 861+ 7368             >                else
 861+ 7368 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 861+ 7368             >                endif           ; ok        // for other definitions it "points" the correct handler
 861+ 7368             >                // Use of "; ok" to suppress "warning[fwdref]"
 861+ 7368             >
 861+ 7368             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 862+ 7368 49 6D 4A 6B                  dw      TIB, FETCH              // tib @
 863+ 736C A9 63 50 00                  dw      LIT, 80                 // 80
 864+ 7370 B6 72 82 6A                  dw      ACCEPT, DROP            // accept drop
 865+ 7374 B6 6C BE 6D                  dw      ZERO, TO_IN, STORE      // 0 >in !
 865+ 7378 57 6B
 866+ 737A 25 69                        dw      EXIT                    // ;
 867+ 737C
 868+ 737C              //  ______________________________________________________________________
 869+ 737C              //
 870+ 737C              // fill        a n c --
 871+ 737C              // If n > 0, fills n locations starting from address a with the value c.
 872+ 737C                              New_Def FILL, "FILL", is_code, is_normal
 872+ 737C             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 872+ 737C             >
 872+ 737C             >                // dummy db directives used to calculate length of namec
 872+ 737C 46 49 4C 4C >                db      "FILL"
 872+ 7380             >len_NFA         defl    $ - temp_NFA
 872+ 7380             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 872+ 737C             >
 872+ 737C 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 872+ 737D 46 49 4C 4C >                db      "FILL"               // name string in 7-bit ascii, but
 872+ 7381             >                org     $-1                 // alter last byte of Name just above to set
 872+ 7380 CC          >                db      {b $} | END_BIT     // msb as name end
 872+ 7381             >
 872+ 7381 5E 73       >                dw      last_NFA            // Link to previous definition Name
 872+ 7383             >FILL:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 872+ 7383 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
 872+ 7383             >                else
 872+ 7383 85 73       >                dw      $ + 2   ; ok        // is pointed by CFA
 872+ 7385             >                endif           ; ok        // for other definitions it "points" the correct handler
 872+ 7385             >                // Use of "; ok" to suppress "warning[fwdref]"
 872+ 7385             >
 872+ 7385             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 873+ 7385 69                           ld      l, c
 874+ 7386 60                           ld      h, b
 875+ 7387 D1                           pop     de                  // de has character
 876+ 7388 C1                           pop     bc                  // bc has counter
 877+ 7389 E3                           ex      (sp), hl            // hl has address, save Instruction Pointer
 878+ 738A              Fill_Loop:
 879+ 738A 78                               ld      a, b
 880+ 738B B1                               or      c
 881+ 738C 28 05                        jr      z, Fill_While_End
 882+ 738E 73                               ld      (hl), e
 883+ 738F 0B                               dec     bc
 884+ 7390 23                               inc     hl
 885+ 7391 18 F7                        jr      Fill_Loop
 886+ 7393              Fill_While_End:
 887+ 7393 C1                           pop     bc                  // Restore Instruction Pointer
 888+ 7394
 889+ 7394                              next
 889+ 7394 DD E9       >                jp      (ix)
 890+ 7396
 891+ 7396              //  ______________________________________________________________________
 892+ 7396              //
 893+ 7396              // erase        a n --
 894+ 7396              // If n > 0, fills n locations starting from address a with 'nul' characters.
 895+ 7396                              Colon_Def ERASE, "ERASE", is_normal
 895+ 7396             >                New_Def  ERASE, "ERASE", Enter_Ptr, is_normal ; ok
 895+ 7396             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 895+ 7396             >
 895+ 7396             >                // dummy db directives used to calculate length of namec
 895+ 7396 45 52 41 53 >                db      "ERASE"
 895+ 739A 45          >
 895+ 739B             >len_NFA         defl    $ - temp_NFA
 895+ 739B             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 895+ 7396             >
 895+ 7396 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 895+ 7397 45 52 41 53 >                db      "ERASE"               // name string in 7-bit ascii, but
 895+ 739B 45          >
 895+ 739C             >                org     $-1                 // alter last byte of Name just above to set
 895+ 739B C5          >                db      {b $} | END_BIT     // msb as name end
 895+ 739C             >
 895+ 739C 7C 73       >                dw      last_NFA            // Link to previous definition Name
 895+ 739E             >ERASE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 895+ 739E 3B 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 895+ 73A0             >                else
 895+ 73A0 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 895+ 73A0             >                endif           ; ok        // for other definitions it "points" the correct handler
 895+ 73A0             >                // Use of "; ok" to suppress "warning[fwdref]"
 895+ 73A0             >
 895+ 73A0             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 896+ 73A0 B6 6C 83 73                  dw      ZERO, FILL              // 0 fill
 897+ 73A4 25 69                        dw      EXIT                    // ;
 898+ 73A6
 899+ 73A6              //  ______________________________________________________________________
 900+ 73A6              //
 901+ 73A6              // blanks       a n --
 902+ 73A6              // If n > 0, fills n locations starting from address a with 'nul' characters.
 903+ 73A6                              Colon_Def BLANKS, "BLANKS", is_normal
 903+ 73A6             >                New_Def  BLANKS, "BLANKS", Enter_Ptr, is_normal ; ok
 903+ 73A6             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 903+ 73A6             >
 903+ 73A6             >                // dummy db directives used to calculate length of namec
 903+ 73A6 42 4C 41 4E >                db      "BLANKS"
 903+ 73AA 4B 53       >
 903+ 73AC             >len_NFA         defl    $ - temp_NFA
 903+ 73AC             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 903+ 73A6             >
 903+ 73A6 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 903+ 73A7 42 4C 41 4E >                db      "BLANKS"               // name string in 7-bit ascii, but
 903+ 73AB 4B 53       >
 903+ 73AD             >                org     $-1                 // alter last byte of Name just above to set
 903+ 73AC D3          >                db      {b $} | END_BIT     // msb as name end
 903+ 73AD             >
 903+ 73AD 96 73       >                dw      last_NFA            // Link to previous definition Name
 903+ 73AF             >BLANKS:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 903+ 73AF 3B 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 903+ 73B1             >                else
 903+ 73B1 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 903+ 73B1             >                endif           ; ok        // for other definitions it "points" the correct handler
 903+ 73B1             >                // Use of "; ok" to suppress "warning[fwdref]"
 903+ 73B1             >
 903+ 73B1             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 904+ 73B1 E0 6C 83 73                  dw      BL, FILL                // bl fill
 905+ 73B5 25 69                        dw      EXIT                    // ;
 906+ 73B7
 907+ 73B7              //  ______________________________________________________________________
 908+ 73B7              //
 909+ 73B7              // hold         c --
 910+ 73B7              // Used between <# and #> to insert a character c in numeric formatting.
 911+ 73B7                              Colon_Def HOLD, "HOLD", is_normal
 911+ 73B7             >                New_Def  HOLD, "HOLD", Enter_Ptr, is_normal ; ok
 911+ 73B7             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 911+ 73B7             >
 911+ 73B7             >                // dummy db directives used to calculate length of namec
 911+ 73B7 48 4F 4C 44 >                db      "HOLD"
 911+ 73BB             >len_NFA         defl    $ - temp_NFA
 911+ 73BB             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 911+ 73B7             >
 911+ 73B7 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 911+ 73B8 48 4F 4C 44 >                db      "HOLD"               // name string in 7-bit ascii, but
 911+ 73BC             >                org     $-1                 // alter last byte of Name just above to set
 911+ 73BB C4          >                db      {b $} | END_BIT     // msb as name end
 911+ 73BC             >
 911+ 73BC A6 73       >                dw      last_NFA            // Link to previous definition Name
 911+ 73BE             >HOLD:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 911+ 73BE 3B 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 911+ 73C0             >                else
 911+ 73C0 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 911+ 73C0             >                endif           ; ok        // for other definitions it "points" the correct handler
 911+ 73C0             >                // Use of "; ok" to suppress "warning[fwdref]"
 911+ 73C0             >
 911+ 73C0             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 912+ 73C0 D7 6C                        dw      NEG_ONE                 // -1
 913+ 73C2 37 6E 27 6B                  dw      HLD, PLUSSTORE          // hld +!
 914+ 73C6 37 6E 4A 6B                  dw      HLD, FETCH, CSTORE      // hld @ c!
 914+ 73CA 73 6B
 915+ 73CC 25 69                        dw      EXIT                    // ;
 916+ 73CE
 917+ 73CE              //  ______________________________________________________________________
 918+ 73CE              //
 919+ 73CE              // pad         -- a
 920+ 73CE              // leaves the buffer text address. This is at a fixed distance over HERE.
 921+ 73CE                              Colon_Def PAD, "PAD", is_normal
 921+ 73CE             >                New_Def  PAD, "PAD", Enter_Ptr, is_normal ; ok
 921+ 73CE             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 921+ 73CE             >
 921+ 73CE             >                // dummy db directives used to calculate length of namec
 921+ 73CE 50 41 44    >                db      "PAD"
 921+ 73D1             >len_NFA         defl    $ - temp_NFA
 921+ 73D1             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 921+ 73CE             >
 921+ 73CE 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 921+ 73CF 50 41 44    >                db      "PAD"               // name string in 7-bit ascii, but
 921+ 73D2             >                org     $-1                 // alter last byte of Name just above to set
 921+ 73D1 C4          >                db      {b $} | END_BIT     // msb as name end
 921+ 73D2             >
 921+ 73D2 B7 73       >                dw      last_NFA            // Link to previous definition Name
 921+ 73D4             >PAD:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 921+ 73D4 3B 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 921+ 73D6             >                else
 921+ 73D6 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 921+ 73D6             >                endif           ; ok        // for other definitions it "points" the correct handler
 921+ 73D6             >                // Use of "; ok" to suppress "warning[fwdref]"
 921+ 73D6             >
 921+ 73D6             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 922+ 73D6 95 6E                        dw      HERE                    // here
 923+ 73D8 A9 63 44 00                  dw      LIT, 68                 // 68
 924+ 73DC CB 69                        dw      PLUS                    // +
 925+ 73DE 25 69                        dw      EXIT                    // ;
 926+ 73E0
 927+ 73E0              //  ______________________________________________________________________
 928+ 73E0              //
 929+ 73E0              // word         c -- a
 930+ 73E0              // reads characters from input streams until it encouners a c delimiter.
 931+ 73E0              // Stores that packet so it starts from HERE
 932+ 73E0              // WORD leaves a counter as first byte and ends the packet with two spaces.
 933+ 73E0              // Other occurrences of c are ignored.
 934+ 73E0              // If BLK is zero, text is taken from terminal buffer TIB.
 935+ 73E0              // Otherwise text is taken from the disk-block given by BLK.
 936+ 73E0              // "in" variable is incremented of the number of character read.
 937+ 73E0              // The number of characters read is given by ENCLOSE.
 938+ 73E0                              Colon_Def WORD, "WORD", is_normal
 938+ 73E0             >                New_Def  WORD, "WORD", Enter_Ptr, is_normal ; ok
 938+ 73E0             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 938+ 73E0             >
 938+ 73E0             >                // dummy db directives used to calculate length of namec
 938+ 73E0 57 4F 52 44 >                db      "WORD"
 938+ 73E4             >len_NFA         defl    $ - temp_NFA
 938+ 73E4             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 938+ 73E0             >
 938+ 73E0 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 938+ 73E1 57 4F 52 44 >                db      "WORD"               // name string in 7-bit ascii, but
 938+ 73E5             >                org     $-1                 // alter last byte of Name just above to set
 938+ 73E4 C4          >                db      {b $} | END_BIT     // msb as name end
 938+ 73E5             >
 938+ 73E5 CE 73       >                dw      last_NFA            // Link to previous definition Name
 938+ 73E7             >WORD:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 938+ 73E7 3B 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 938+ 73E9             >                else
 938+ 73E9 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 938+ 73E9             >                endif           ; ok        // for other definitions it "points" the correct handler
 938+ 73E9             >                // Use of "; ok" to suppress "warning[fwdref]"
 938+ 73E9             >
 938+ 73E9             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 939+ 73E9 B5 6D 4A 6B                  dw      BLK, FETCH              // blk @
 940+ 73ED                                                              // if
 941+ 73ED E3 63                        dw      ZBRANCH
 942+ 73EF 0C 00                        dw      Word_Else - $
 943+ 73F1 B5 6D 4A 6B                  dw          BLK, FETCH          //      blk @
 944+ 73F5 42 7D                        dw          BLOCK               //      block ( forward )
 945+ 73F7                                                              // else
 946+ 73F7 CC 63                        dw      BRANCH
 947+ 73F9 06 00                        dw      Word_Endif - $
 948+ 73FB              Word_Else:
 949+ 73FB 49 6D 4A 6B                  dw         TIB, FETCH           //      tib @
 950+ 73FF              Word_Endif:                                     // endif
 951+ 73FF BE 6D 4A 6B                  dw      TO_IN, FETCH, PLUS      // >in @ +
 951+ 7403 CB 69
 952+ 7405 AA 6A 56 65                  dw      SWAP, ENCLOSE           // swap enclose
 953+ 7409 95 6E A9 63                  dw      HERE, LIT, 34, BLANKS   // here 34 blanks
 953+ 740D 22 00 AF 73
 954+ 7411 BE 6D 27 6B                  dw      TO_IN, PLUSSTORE        // >in @ +
 955+ 7415 72 6A E8 6E                  dw      OVER, SUBTRACT, TO_R    // over - >r
 955+ 7419 53 69
 956+ 741B 7B 69 95 6E                  dw      R_OP, HERE, CSTORE      // r here c!
 956+ 741F 73 6B
 957+ 7421 CB 69                        dw      PLUS                    // +
 958+ 7423 95 6E F4 69                  dw      HERE, ONE_PLUS, R_TO    // here 1+ r>
 958+ 7427 67 69
 959+ 7429 11 68                        dw      CMOVE                   // cmove
 960+ 742B 95 6E                        dw      HERE                    // here
 961+ 742D 25 69                        dw      EXIT                    // ;
 962+ 742F
 963+ 742F              //  ______________________________________________________________________
 964+ 742F              //
 965+ 742F              // (.")         --
 966+ 742F              // Direct procedure compiled by ." and  .(  It executes TYPE.
 967+ 742F                              Colon_Def C_DOT_QUOTE, '(.")', is_normal
 967+ 742F             >                New_Def  C_DOT_QUOTE, '(.")', Enter_Ptr, is_normal ; ok
 967+ 742F             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 967+ 742F             >
 967+ 742F             >                // dummy db directives used to calculate length of namec
 967+ 742F 28 2E 22 29 >                db      '(.")'
 967+ 7433             >len_NFA         defl    $ - temp_NFA
 967+ 7433             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 967+ 742F             >
 967+ 742F 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 967+ 7430 28 2E 22 29 >                db      '(.")'               // name string in 7-bit ascii, but
 967+ 7434             >                org     $-1                 // alter last byte of Name just above to set
 967+ 7433 A9          >                db      {b $} | END_BIT     // msb as name end
 967+ 7434             >
 967+ 7434 E0 73       >                dw      last_NFA            // Link to previous definition Name
 967+ 7436             >C_DOT_QUOTE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 967+ 7436 3B 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 967+ 7438             >                else
 967+ 7438 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 967+ 7438             >                endif           ; ok        // for other definitions it "points" the correct handler
 967+ 7438             >                // Use of "; ok" to suppress "warning[fwdref]"
 967+ 7438             >
 967+ 7438             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 968+ 7438 7B 69 F9 71                  dw      R_OP, COUNT             // r count
 969+ 743C B7 6A F4 69                  dw      DUP, ONE_PLUS           // dup 1+
 970+ 7440 67 69 CB 69                  dw      R_TO, PLUS, TO_R        // r> + >r  ( advance IP )
 970+ 7444 53 69
 971+ 7446 1F 72                        dw      TYPE                    // type
 972+ 7448 25 69                        dw      EXIT                    // ;
 973+ 744A
 974+ 744A              //  ______________________________________________________________________
 975+ 744A              //
 976+ 744A              // char         -- c
 977+ 744A              // get first character from next input word
 978+ 744A                              Colon_Def CHAR,  "CHAR", is_normal
 978+ 744A             >                New_Def  CHAR, "CHAR", Enter_Ptr, is_normal ; ok
 978+ 744A             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 978+ 744A             >
 978+ 744A             >                // dummy db directives used to calculate length of namec
 978+ 744A 43 48 41 52 >                db      "CHAR"
 978+ 744E             >len_NFA         defl    $ - temp_NFA
 978+ 744E             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 978+ 744A             >
 978+ 744A 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 978+ 744B 43 48 41 52 >                db      "CHAR"               // name string in 7-bit ascii, but
 978+ 744F             >                org     $-1                 // alter last byte of Name just above to set
 978+ 744E D2          >                db      {b $} | END_BIT     // msb as name end
 978+ 744F             >
 978+ 744F 2F 74       >                dw      last_NFA            // Link to previous definition Name
 978+ 7451             >CHAR:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 978+ 7451 3B 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 978+ 7453             >                else
 978+ 7453 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 978+ 7453             >                endif           ; ok        // for other definitions it "points" the correct handler
 978+ 7453             >                // Use of "; ok" to suppress "warning[fwdref]"
 978+ 7453             >
 978+ 7453             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 979+ 7453 E0 6C E7 73                  dw      BL, WORD                // bl word
 980+ 7457 F4 69 65 6B                  dw      ONE_PLUS, CFETCH        // 1+ c@
 981+ 745B 25 69                        dw      EXIT                    // ;
 982+ 745D
 983+ 745D              //  ______________________________________________________________________
 984+ 745D              //
 985+ 745D              // ,"           --
 986+ 745D              // compiles a string terminated by " as a counted string from next input stream
 987+ 745D                              Colon_Def COMMA_QUOTE,  ',"', is_normal
 987+ 745D             >                New_Def  COMMA_QUOTE, ',"', Enter_Ptr, is_normal ; ok
 987+ 745D             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 987+ 745D             >
 987+ 745D             >                // dummy db directives used to calculate length of namec
 987+ 745D 2C 22       >                db      ',"'
 987+ 745F             >len_NFA         defl    $ - temp_NFA
 987+ 745F             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 987+ 745D             >
 987+ 745D 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 987+ 745E 2C 22       >                db      ',"'               // name string in 7-bit ascii, but
 987+ 7460             >                org     $-1                 // alter last byte of Name just above to set
 987+ 745F A2          >                db      {b $} | END_BIT     // msb as name end
 987+ 7460             >
 987+ 7460 4A 74       >                dw      last_NFA            // Link to previous definition Name
 987+ 7462             >COMMA_QUOTE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 987+ 7462 3B 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 987+ 7464             >                else
 987+ 7464 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 987+ 7464             >                endif           ; ok        // for other definitions it "points" the correct handler
 987+ 7464             >                // Use of "; ok" to suppress "warning[fwdref]"
 987+ 7464             >
 987+ 7464             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 988+ 7464 A9 63 22 00                  dw      LIT, DQUOTE_CHAR        // [char] "
 989+ 7468 E7 73                        dw      WORD                    // word
 990+ 746A 65 6B F4 69                  dw      CFETCH, ONE_PLUS        // c@ 1+
 991+ 746E A5 6E                        dw      ALLOT                   // allot
 992+ 7470 B6 6C C2 6E                  dw      ZERO, CCOMMA            // 0 c,  ( nul-terminated string - useful anyway )
 993+ 7474 25 69                        dw      EXIT
 994+ 7476
 995+ 7476              //  ______________________________________________________________________
 996+ 7476              //
 997+ 7476              // .c           c --
 998+ 7476              // intermediate general purpose string builder, used by ." and .(
 999+ 7476                              Colon_Def DOT_C,  ".C", is_immediate
 999+ 7476             >                New_Def  DOT_C, ".C", Enter_Ptr, is_immediate ; ok
 999+ 7476             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 999+ 7476             >
 999+ 7476             >                // dummy db directives used to calculate length of namec
 999+ 7476 2E 43       >                db      ".C"
 999+ 7478             >len_NFA         defl    $ - temp_NFA
 999+ 7478             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 999+ 7476             >
 999+ 7476 C2          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 999+ 7477 2E 43       >                db      ".C"               // name string in 7-bit ascii, but
 999+ 7479             >                org     $-1                 // alter last byte of Name just above to set
 999+ 7478 C3          >                db      {b $} | END_BIT     // msb as name end
 999+ 7479             >
 999+ 7479 5D 74       >                dw      last_NFA            // Link to previous definition Name
 999+ 747B             >DOT_C:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 999+ 747B 3B 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 999+ 747D             >                else
 999+ 747D ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 999+ 747D             >                endif           ; ok        // for other definitions it "points" the correct handler
 999+ 747D             >                // Use of "; ok" to suppress "warning[fwdref]"
 999+ 747D             >
 999+ 747D             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1000+ 747D 01 6E 4A 6B                  dw      STATE, FETCH            // state @
1001+ 7481                                                              // if
1002+ 7481 E3 63                        dw      ZBRANCH
1003+ 7483 12 00                        dw      Dot_C_Else - $
1004+ 7485 F2 70 36 74                  dw          COMPILE, C_DOT_QUOTE //     compile (.")
1005+ 7489 E7 73 65 6B                  dw          WORD, CFETCH        //      word c@
1006+ 748D F4 69 A5 6E                  dw          ONE_PLUS, ALLOT     //      1+ allot
1007+ 7491                                                              // else
1008+ 7491 CC 63                        dw      BRANCH
1009+ 7493 08 00                        dw      Dot_C_Endif - $
1010+ 7495              Dot_C_Else:
1011+ 7495 E7 73 F9 71                  dw          WORD, COUNT, TYPE   //      word count type
1011+ 7499 1F 72
1012+ 749B              Dot_C_Endif:                                    // endif
1013+ 749B 25 69                        dw      EXIT                    ;
1014+ 749D
1015+ 749D              //  ______________________________________________________________________
1016+ 749D              //
1017+ 749D              // ."           c --
1018+ 749D                              Colon_Def DOT_QUOTE,  '."', is_immediate
1018+ 749D             >                New_Def  DOT_QUOTE, '."', Enter_Ptr, is_immediate ; ok
1018+ 749D             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1018+ 749D             >
1018+ 749D             >                // dummy db directives used to calculate length of namec
1018+ 749D 2E 22       >                db      '."'
1018+ 749F             >len_NFA         defl    $ - temp_NFA
1018+ 749F             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1018+ 749D             >
1018+ 749D C2          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
1018+ 749E 2E 22       >                db      '."'               // name string in 7-bit ascii, but
1018+ 74A0             >                org     $-1                 // alter last byte of Name just above to set
1018+ 749F A2          >                db      {b $} | END_BIT     // msb as name end
1018+ 74A0             >
1018+ 74A0 76 74       >                dw      last_NFA            // Link to previous definition Name
1018+ 74A2             >DOT_QUOTE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1018+ 74A2 3B 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
1018+ 74A4             >                else
1018+ 74A4 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
1018+ 74A4             >                endif           ; ok        // for other definitions it "points" the correct handler
1018+ 74A4             >                // Use of "; ok" to suppress "warning[fwdref]"
1018+ 74A4             >
1018+ 74A4             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1019+ 74A4 A9 63 22 00                  dw      LIT, DQUOTE_CHAR        // [char] "
1020+ 74A8 7B 74                        dw      DOT_C                   // [compile] .c
1021+ 74AA 25 69                        dw      EXIT                    // ; immediate
1022+ 74AC
1023+ 74AC              //  ______________________________________________________________________
1024+ 74AC              //
1025+ 74AC              // .(           c --
1026+ 74AC                              Colon_Def DOT_BRACKET,  ".(", is_immediate
1026+ 74AC             >                New_Def  DOT_BRACKET, ".(", Enter_Ptr, is_immediate ; ok
1026+ 74AC             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1026+ 74AC             >
1026+ 74AC             >                // dummy db directives used to calculate length of namec
1026+ 74AC 2E 28       >                db      ".("
1026+ 74AE             >len_NFA         defl    $ - temp_NFA
1026+ 74AE             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1026+ 74AC             >
1026+ 74AC C2          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
1026+ 74AD 2E 28       >                db      ".("               // name string in 7-bit ascii, but
1026+ 74AF             >                org     $-1                 // alter last byte of Name just above to set
1026+ 74AE A8          >                db      {b $} | END_BIT     // msb as name end
1026+ 74AF             >
1026+ 74AF 9D 74       >                dw      last_NFA            // Link to previous definition Name
1026+ 74B1             >DOT_BRACKET:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1026+ 74B1 3B 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
1026+ 74B3             >                else
1026+ 74B3 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
1026+ 74B3             >                endif           ; ok        // for other definitions it "points" the correct handler
1026+ 74B3             >                // Use of "; ok" to suppress "warning[fwdref]"
1026+ 74B3             >
1026+ 74B3             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1027+ 74B3 A9 63 29 00                  dw      LIT, ")"                // [char] )
1028+ 74B7 7B 74                        dw      DOT_C                   // [compile] .c
1029+ 74B9 25 69                        dw      EXIT                    // ; immediate
1030+ 74BB
1031+ 74BB              //  ______________________________________________________________________
1032+ 74BB              //
1033+ 74BB              // (sgn)        a -- a f
1034+ 74BB              // determines if char in addr a is a sign (+ or -), and in that case increments
1035+ 74BB              // a flag. Returns f as the sign, true for negative, false for positive.
1036+ 74BB              // called by NUMBER and (EXP)
1037+ 74BB                              Colon_Def CSGN,  "(SGN)", is_normal
1037+ 74BB             >                New_Def  CSGN, "(SGN)", Enter_Ptr, is_normal ; ok
1037+ 74BB             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1037+ 74BB             >
1037+ 74BB             >                // dummy db directives used to calculate length of namec
1037+ 74BB 28 53 47 4E >                db      "(SGN)"
1037+ 74BF 29          >
1037+ 74C0             >len_NFA         defl    $ - temp_NFA
1037+ 74C0             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1037+ 74BB             >
1037+ 74BB 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1037+ 74BC 28 53 47 4E >                db      "(SGN)"               // name string in 7-bit ascii, but
1037+ 74C0 29          >
1037+ 74C1             >                org     $-1                 // alter last byte of Name just above to set
1037+ 74C0 A9          >                db      {b $} | END_BIT     // msb as name end
1037+ 74C1             >
1037+ 74C1 AC 74       >                dw      last_NFA            // Link to previous definition Name
1037+ 74C3             >CSGN:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1037+ 74C3 3B 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
1037+ 74C5             >                else
1037+ 74C5 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
1037+ 74C5             >                endif           ; ok        // for other definitions it "points" the correct handler
1037+ 74C5             >                // Use of "; ok" to suppress "warning[fwdref]"
1037+ 74C5             >
1037+ 74C5             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1038+ 74C5 B7 6A F4 69                  dw      DUP, ONE_PLUS, CFETCH   // dup 1+ c@
1038+ 74C9 65 6B
1039+ 74CB B7 6A A9 63                  dw      DUP, LIT, "-", EQUALS   // dup [char] - =
1039+ 74CF 2D 00 F6 6E
1040+ 74D3                                                              // if
1041+ 74D3 E3 63                        dw      ZBRANCH
1042+ 74D5 12 00                        dw      CSgn_Else_0 - $
1043+ 74D7 82 6A                        dw          DROP                //      drop
1044+ 74D9 F4 69                        dw          ONE_PLUS            //      1+
1045+ 74DB BE 6C 14 6E                  dw          ONE, DPL, PLUSSTORE //      1 dpl +!
1045+ 74DF 27 6B
1046+ 74E1 BE 6C                        dw          ONE                 //      1
1047+ 74E3                                                              // else
1048+ 74E3 CC 63                        dw      BRANCH
1049+ 74E5 16 00                        dw      CSgn_Endif_0 - $
1050+ 74E7              CSgn_Else_0:
1051+ 74E7 A9 63 2B 00                  dw          LIT, "+", EQUALS    //      [char] + =
1051+ 74EB F6 6E
1052+ 74ED                                                              //      if
1053+ 74ED E3 63                        dw          ZBRANCH
1054+ 74EF 0A 00                        dw          CSgn_Endif_1 - $
1055+ 74F1 F4 69                        dw              ONE_PLUS        //          1+
1056+ 74F3 BE 6C 14 6E                  dw              ONE, DPL        //          1 dpl
1057+ 74F7 27 6B                        dw              PLUSSTORE       //          +!
1058+ 74F9              CSgn_Endif_1                                    //      endif
1059+ 74F9 B6 6C                        dw          ZERO                //      0
1060+ 74FB              CSgn_Endif_0:                                   // endif
1061+ 74FB 25 69                        dw      EXIT
1062+ 74FD
1063+ 74FD              //  ______________________________________________________________________
1064+ 74FD              //
1065+ 74FD              // (number)     d a -- d1 a1
1066+ 74FD              // using the current BASE parse characters stored in address a
1067+ 74FD              // accumulating a double precision integer d
1068+ 74FD              // the process stops at the first not-convertible character
1069+ 74FD              // A double-number is kept in CPU registers as HLDE.
1070+ 74FD              // On the stack a double number is treated as two single numbers
1071+ 74FD              // where HL is on the top of the stack and DE is the second from top,
1072+ 74FD              // so in the stack memory it appears as LHED.
1073+ 74FD              // Instead, in 2VARIABLE a double number is stored as EDLH.
1074+ 74FD                              Colon_Def CNUMBER,  "(NUMBER)", is_normal
1074+ 74FD             >                New_Def  CNUMBER, "(NUMBER)", Enter_Ptr, is_normal ; ok
1074+ 74FD             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1074+ 74FD             >
1074+ 74FD             >                // dummy db directives used to calculate length of namec
1074+ 74FD 28 4E 55 4D >                db      "(NUMBER)"
1074+ 7501 42 45 52 29 >
1074+ 7505             >len_NFA         defl    $ - temp_NFA
1074+ 7505             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1074+ 74FD             >
1074+ 74FD 88          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1074+ 74FE 28 4E 55 4D >                db      "(NUMBER)"               // name string in 7-bit ascii, but
1074+ 7502 42 45 52 29 >
1074+ 7506             >                org     $-1                 // alter last byte of Name just above to set
1074+ 7505 A9          >                db      {b $} | END_BIT     // msb as name end
1074+ 7506             >
1074+ 7506 BB 74       >                dw      last_NFA            // Link to previous definition Name
1074+ 7508             >CNUMBER:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1074+ 7508 3B 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
1074+ 750A             >                else
1074+ 750A ~           >                dw      $ + 2   ; ok        // is pointed by CFA
1074+ 750A             >                endif           ; ok        // for other definitions it "points" the correct handler
1074+ 750A             >                // Use of "; ok" to suppress "warning[fwdref]"
1074+ 750A             >
1074+ 750A             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1075+ 750A                                                              // begin
1076+ 750A              CNumber_Begin:
1077+ 750A F4 69                        dw          ONE_PLUS            //      1+
1078+ 750C B7 6A 53 69                  dw          DUP, TO_R           //      dup >r
1079+ 7510 65 6B                        dw          CFETCH              //      @
1080+ 7512 0B 6E 4A 6B                  dw          BASE, FETCH         //      base @
1081+ 7516 89 64                        dw          DIGIT               //      digit
1082+ 7518                                                              // while
1083+ 7518 E3 63                        dw      ZBRANCH
1084+ 751A 2C 00                        dw      CNumber_While_end - $
1085+ 751C AA 6A                        dw          SWAP                //      swap
1086+ 751E 0B 6E 4A 6B                  dw          BASE, FETCH         //      base @
1087+ 7522 46 68                        dw          UM_MUL              //      um*
1088+ 7524 82 6A C4 6A                  dw          DROP, ROT           //      drop rot
1089+ 7528 0B 6E 4A 6B                  dw          BASE, FETCH         //      base @
1090+ 752C 46 68                        dw          UM_MUL              //      um*
1091+ 752E D8 69                        dw          DPLUS               //      d+
1092+ 7530 14 6E 4A 6B                  dw          DPL, FETCH          //      dpl @
1093+ 7534 F4 69                        dw          ONE_PLUS            //      1+
1094+ 7536                                                              //      if
1095+ 7536 E3 63                        dw          ZBRANCH
1096+ 7538 08 00                        dw          CNumber_Endif - $
1097+ 753A BE 6C 14 6E                  dw              ONE, DPL        //          1 dpl
1098+ 753E 27 6B                        dw              PLUSSTORE       //          +!
1099+ 7540              CNumber_Endif:                                  //      endif
1100+ 7540 67 69                        dw             R_TO             //      r>  ( balance rp )
1101+ 7542 CC 63                        dw      BRANCH
1102+ 7544 C6 FF                        dw      CNumber_Begin - $
1103+ 7546              CNumber_While_end:                              // repeat
1104+ 7546 67 69                        dw      R_TO                    // r>  ( balance rp on exit while-repeat )
1105+ 7548 25 69                        dw      EXIT                    // ;
1106+ 754A
1107+ 754A              //  ______________________________________________________________________
1108+ 754A              //
1109+ 754A              // number       a -- d
1110+ 754A                              Colon_Def NUMBER,  "NUMBER", is_normal
1110+ 754A             >                New_Def  NUMBER, "NUMBER", Enter_Ptr, is_normal ; ok
1110+ 754A             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1110+ 754A             >
1110+ 754A             >                // dummy db directives used to calculate length of namec
1110+ 754A 4E 55 4D 42 >                db      "NUMBER"
1110+ 754E 45 52       >
1110+ 7550             >len_NFA         defl    $ - temp_NFA
1110+ 7550             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1110+ 754A             >
1110+ 754A 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1110+ 754B 4E 55 4D 42 >                db      "NUMBER"               // name string in 7-bit ascii, but
1110+ 754F 45 52       >
1110+ 7551             >                org     $-1                 // alter last byte of Name just above to set
1110+ 7550 D2          >                db      {b $} | END_BIT     // msb as name end
1110+ 7551             >
1110+ 7551 FD 74       >                dw      last_NFA            // Link to previous definition Name
1110+ 7553             >NUMBER:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1110+ 7553 3B 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
1110+ 7555             >                else
1110+ 7555 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
1110+ 7555             >                endif           ; ok        // for other definitions it "points" the correct handler
1110+ 7555             >                // Use of "; ok" to suppress "warning[fwdref]"
1110+ 7555             >
1110+ 7555             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1111+ 7555 B6 6C B6 6C                  dw      ZERO, ZERO              // 0 0
1112+ 7559 C4 6A                        dw      ROT                     // rot
1113+ 755B C3 74 53 69                  dw      CSGN, TO_R              // (sgn) >r
1114+ 755F D7 6C 14 6E                  dw      NEG_ONE, DPL, STORE     // -1 dpl !
1114+ 7563 57 6B
1115+ 7565 08 75                        dw      CNUMBER                 // (number)
1116+ 7567 B7 6A 65 6B                  dw      DUP, CFETCH             // dup c@
1117+ 756B A9 63 2E 00                  dw      LIT, 46, EQUALS         // [char] . =  ( decimal point )
1117+ 756F F6 6E
1118+ 7571                                                              // if
1119+ 7571 E3 63                        dw      ZBRANCH
1120+ 7573 0A 00                        dw      Number_Endif_1 - $
1121+ 7575 B6 6C 14 6E                  dw          ZERO, DPL, STORE    //      0 dpl !
1121+ 7579 57 6B
1122+ 757B 08 75                        dw          CNUMBER             //      (number)
1123+ 757D              Number_Endif_1:                                 // endif
1124+ 757D 65 6B E0 6C                  dw      CFETCH, BL              // c@ bl
1125+ 7581 E8 6E B6 6C                  dw      SUBTRACT, ZERO, QERROR  // - 0 ?error
1125+ 7585 5F 70
1126+ 7587 67 69                        dw      R_TO                    // r>
1127+ 7589                                                              // if
1128+ 7589 E3 63                        dw      ZBRANCH
1129+ 758B 04 00                        dw      Number_Endif_2 - $
1130+ 758D 54 6A                        dw          DMINUS              //      dminus
1131+ 758F              Number_Endif_2:                                 // endif
1132+ 758F 25 69                        dw      EXIT                    // ;
1133+ 7591
1134+ 7591              //  ______________________________________________________________________
1135+ 7591              //
1136+ 7591              // -find        a -- d
1137+ 7591                              Colon_Def LFIND,  "-FIND", is_normal
1137+ 7591             >                New_Def  LFIND, "-FIND", Enter_Ptr, is_normal ; ok
1137+ 7591             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1137+ 7591             >
1137+ 7591             >                // dummy db directives used to calculate length of namec
1137+ 7591 2D 46 49 4E >                db      "-FIND"
1137+ 7595 44          >
1137+ 7596             >len_NFA         defl    $ - temp_NFA
1137+ 7596             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1137+ 7591             >
1137+ 7591 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1137+ 7592 2D 46 49 4E >                db      "-FIND"               // name string in 7-bit ascii, but
1137+ 7596 44          >
1137+ 7597             >                org     $-1                 // alter last byte of Name just above to set
1137+ 7596 C4          >                db      {b $} | END_BIT     // msb as name end
1137+ 7597             >
1137+ 7597 4A 75       >                dw      last_NFA            // Link to previous definition Name
1137+ 7599             >LFIND:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1137+ 7599 3B 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
1137+ 759B             >                else
1137+ 759B ~           >                dw      $ + 2   ; ok        // is pointed by CFA
1137+ 759B             >                endif           ; ok        // for other definitions it "points" the correct handler
1137+ 759B             >                // Use of "; ok" to suppress "warning[fwdref]"
1137+ 759B             >
1137+ 759B             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1138+ 759B E0 6C E7 73                  dw      BL, WORD                // bl word
1139+ 759F E9 6D 4A 6B                  dw      CONTEXT, FETCH, FETCH   // context @ @
1139+ 75A3 4A 6B
1140+ 75A5 FE 64                        dw      C_FIND                  // (find)
1141+ 75A7 6E 6F                        dw      QDUP                    // ?dup
1142+ 75A9 88 69                        dw      ZEQUAL                  // 0=
1143+ 75AB                                                              // if
1144+ 75AB E3 63                        dw      ZBRANCH
1145+ 75AD 08 00                        dw      LFind_Endif - $
1146+ 75AF 95 6E                        dw          HERE                //      here
1147+ 75B1 DB 6F                        dw          LATEST              //      latest
1148+ 75B3 FE 64                        dw          C_FIND              //      (find)
1149+ 75B5              LFind_Endif:                                    // endif
1150+ 75B5 25 69                        dw      EXIT                    // ;
1151+ 75B7
1152+ 75B7              //  ______________________________________________________________________
1153+ 75B7              //
1154+ 75B7              // (abort)      --
1155+ 75B7                              Colon_Def CABORT,  "(ABORT)", is_normal
1155+ 75B7             >                New_Def  CABORT, "(ABORT)", Enter_Ptr, is_normal ; ok
1155+ 75B7             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1155+ 75B7             >
1155+ 75B7             >                // dummy db directives used to calculate length of namec
1155+ 75B7 28 41 42 4F >                db      "(ABORT)"
1155+ 75BB 52 54 29    >
1155+ 75BE             >len_NFA         defl    $ - temp_NFA
1155+ 75BE             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1155+ 75B7             >
1155+ 75B7 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1155+ 75B8 28 41 42 4F >                db      "(ABORT)"               // name string in 7-bit ascii, but
1155+ 75BC 52 54 29    >
1155+ 75BF             >                org     $-1                 // alter last byte of Name just above to set
1155+ 75BE A9          >                db      {b $} | END_BIT     // msb as name end
1155+ 75BF             >
1155+ 75BF 91 75       >                dw      last_NFA            // Link to previous definition Name
1155+ 75C1             >CABORT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1155+ 75C1 3B 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
1155+ 75C3             >                else
1155+ 75C3 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
1155+ 75C3             >                endif           ; ok        // for other definitions it "points" the correct handler
1155+ 75C3             >                // Use of "; ok" to suppress "warning[fwdref]"
1155+ 75C3             >
1155+ 75C3             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1156+ 75C3 88 78                        dw      ABORT                   // abort
1157+ 75C5 25 69                        dw      EXIT                    // ;
1158+ 75C7
1159+ 75C7              //  ______________________________________________________________________
1160+ 75C7              //
1161+ 75C7              // error        n --
1162+ 75C7              // raise an error
1163+ 75C7              // if WARNING is 0, prints "MSG#n".
1164+ 75C7              // if WARNING is 1, prints line n of screen 4.
1165+ 75C7              // if WARNING is -1 does (ABORT) that normally does ABORT
1166+ 75C7              // value can be negative or beyond block 4.
1167+ 75C7                              Colon_Def ERROR,  "ERROR", is_normal
1167+ 75C7             >                New_Def  ERROR, "ERROR", Enter_Ptr, is_normal ; ok
1167+ 75C7             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1167+ 75C7             >
1167+ 75C7             >                // dummy db directives used to calculate length of namec
1167+ 75C7 45 52 52 4F >                db      "ERROR"
1167+ 75CB 52          >
1167+ 75CC             >len_NFA         defl    $ - temp_NFA
1167+ 75CC             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1167+ 75C7             >
1167+ 75C7 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1167+ 75C8 45 52 52 4F >                db      "ERROR"               // name string in 7-bit ascii, but
1167+ 75CC 52          >
1167+ 75CD             >                org     $-1                 // alter last byte of Name just above to set
1167+ 75CC D2          >                db      {b $} | END_BIT     // msb as name end
1167+ 75CD             >
1167+ 75CD B7 75       >                dw      last_NFA            // Link to previous definition Name
1167+ 75CF             >ERROR:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1167+ 75CF 3B 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
1167+ 75D1             >                else
1167+ 75D1 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
1167+ 75D1             >                endif           ; ok        // for other definitions it "points" the correct handler
1167+ 75D1             >                // Use of "; ok" to suppress "warning[fwdref]"
1167+ 75D1             >
1167+ 75D1             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1168+ 75D1 61 6D 4A 6B                  dw      WARNING, FETCH, ZLESS   // warning @ 0<
1168+ 75D5 A3 69
1169+ 75D7                                                              // if
1170+ 75D7 E3 63                        dw      ZBRANCH
1171+ 75D9 04 00                        dw      Error_Endif_1 - $
1172+ 75DB C1 75                        dw          CABORT              //      (abort)
1173+ 75DD              Error_Endif_1:                                  // endif
1174+ 75DD 95 6E F9 71                  dw      HERE, COUNT, TYPE       // here count type
1174+ 75E1 1F 72
1175+ 75E3 36 74                        dw      C_DOT_QUOTE             // .( ? )
1176+ 75E5 02 3F 20                     db      2, "? "
1177+ 75E8 6D 7A                        dw      MESSAGE                 // message  ( forward )
1178+ 75EA 38 6D 4A 6B                  dw      S0, FETCH, SPSTORE      // s0 @ sp!
1178+ 75EE FC 68
1179+ 75F0 B5 6D 4A 6B                  dw      BLK, FETCH, QDUP        // blk @ ?dup
1179+ 75F4 6E 6F
1180+ 75F6                                                              // if
1181+ 75F6 E3 63                        dw      ZBRANCH
1182+ 75F8 08 00                        dw      Error_Endif_2 - $
1183+ 75FA BE 6D 4A 6B                  dw          TO_IN, FETCH, SWAP  //      >in @ swap
1183+ 75FE AA 6A
1184+ 7600              Error_Endif_2:                                  // endif
1185+ 7600 47 78                        dw      QUIT                    // quit ( forward )
1186+ 7602 25 69                        dw      EXIT                    // ;
1187+ 7604              //  ______________________________________________________________________
1188+ 7604              //
1189+ 7604              // id.          nfa --
1190+ 7604                              Colon_Def ID_DOT,  "ID.", is_normal
1190+ 7604             >                New_Def  ID_DOT, "ID.", Enter_Ptr, is_normal ; ok
1190+ 7604             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1190+ 7604             >
1190+ 7604             >                // dummy db directives used to calculate length of namec
1190+ 7604 49 44 2E    >                db      "ID."
1190+ 7607             >len_NFA         defl    $ - temp_NFA
1190+ 7607             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1190+ 7604             >
1190+ 7604 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1190+ 7605 49 44 2E    >                db      "ID."               // name string in 7-bit ascii, but
1190+ 7608             >                org     $-1                 // alter last byte of Name just above to set
1190+ 7607 AE          >                db      {b $} | END_BIT     // msb as name end
1190+ 7608             >
1190+ 7608 C7 75       >                dw      last_NFA            // Link to previous definition Name
1190+ 760A             >ID_DOT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1190+ 760A 3B 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
1190+ 760C             >                else
1190+ 760C ~           >                dw      $ + 2   ; ok        // is pointed by CFA
1190+ 760C             >                endif           ; ok        // for other definitions it "points" the correct handler
1190+ 760C             >                // Use of "; ok" to suppress "warning[fwdref]"
1190+ 760C             >
1190+ 760C             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1191+ 760C D4 73 A9 63                  dw      PAD, LIT, 32, LIT, 96   // pad 32 96
1191+ 7610 20 00 A9 63
1191+ 7614 60 00
1192+ 7616 83 73                        dw      FILL                    // fill
1193+ 7618 B7 6A 19 70                  dw      DUP, PFA, LFA           // dup pfa lfa
1193+ 761C EB 6F
1194+ 761E 72 6A E8 6E                  dw      OVER, SUBTRACT          // over -
1195+ 7622 D4 73 AA 6A                  dw      PAD, SWAP               // pad swap
1196+ 7626 11 68                        dw      CMOVE                   // cmove
1197+ 7628 D4 73 F9 71                  dw      PAD, COUNT, LIT, $1F    // pad count 01F
1197+ 762C A9 63 1F 00
1198+ 7630 B5 68                        dw      AND_OP                  // and  ( use only lower bits )
1199+ 7632 1F 72 A5 6F                  dw      TYPE, SPACE             // type
1200+ 7636 25 69                        dw      EXIT                    // ;
1201+ 7638
1202+ 7638              //  ______________________________________________________________________
1203+ 7638              //
1204+ 7638              // code         -- cccc
1205+ 7638                              Colon_Def CODE,  "CODE", is_normal
1205+ 7638             >                New_Def  CODE, "CODE", Enter_Ptr, is_normal ; ok
1205+ 7638             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1205+ 7638             >
1205+ 7638             >                // dummy db directives used to calculate length of namec
1205+ 7638 43 4F 44 45 >                db      "CODE"
1205+ 763C             >len_NFA         defl    $ - temp_NFA
1205+ 763C             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1205+ 7638             >
1205+ 7638 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1205+ 7639 43 4F 44 45 >                db      "CODE"               // name string in 7-bit ascii, but
1205+ 763D             >                org     $-1                 // alter last byte of Name just above to set
1205+ 763C C5          >                db      {b $} | END_BIT     // msb as name end
1205+ 763D             >
1205+ 763D 04 76       >                dw      last_NFA            // Link to previous definition Name
1205+ 763F             >CODE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1205+ 763F 3B 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
1205+ 7641             >                else
1205+ 7641 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
1205+ 7641             >                endif           ; ok        // for other definitions it "points" the correct handler
1205+ 7641             >                // Use of "; ok" to suppress "warning[fwdref]"
1205+ 7641             >
1205+ 7641             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1206+ 7641 99 75                        dw      LFIND                   // -find
1207+ 7643                                                              // if
1208+ 7643 E3 63                        dw      ZBRANCH
1209+ 7645 10 00                        dw      Code_Endif - $
1210+ 7647 82 6A                        dw          DROP                //      drop
1211+ 7649 3D 70 0A 76                  dw          TO_NAME, ID_DOT     //      >name id.
1212+ 764D A9 63 04 00                  dw          LIT, 4, MESSAGE     //      4 message
1212+ 7651 6D 7A
1213+ 7653 A5 6F                        dw          SPACE               //      space
1214+ 7655              Code_Endif:                                     // endif
1215+ 7655 95 6E                        dw      HERE                    // here
1216+ 7657                                                              // ( ---- here begins NFA ---- )
1217+ 7657 B7 6A 65 6B                  dw      DUP, CFETCH             // dup c@
1218+ 765B 54 6D 4A 6B                  dw      WIDTH, FETCH, MIN       // width @ min  ( max 31 character length )
1218+ 765F 41 6F
1219+ 7661 F4 69 A5 6E                  dw      ONE_PLUS, ALLOT         // 1+ allot
1220+ 7665 B7 6A                        dw      DUP                     // dup
1221+ 7667 A9 63                        dw      LIT
1222+ 7669 A0 00                        dw      SMUDGE_BIT | END_BIT    // 160
1223+ 766B 3D 6B                        dw      TOGGLE                  // toggle
1224+ 766D 95 6E 00 6A                  dw      HERE, ONE_SUBTRACT     // here 1- ( last character )
1225+ 7671 A9 63 80 00                  dw      LIT, END_BIT, TOGGLE    // 128 toggle
1225+ 7675 3D 6B
1226+ 7677                                                              // ( ---- here is LFA ---- )
1227+ 7677 DB 6F B1 6E                  dw      LATEST, COMMA           // latest ,
1228+ 767B F6 6D 4A 6B                  dw      CURRENT, FETCH, STORE   // current @ ! ( save this word as the latest )
1228+ 767F 57 6B
1229+ 7681 95 6E 1C 6A                  dw      HERE, CELL_PLUS, COMMA  // ( CFA point PFA )
1229+ 7685 B1 6E
1230+ 7687 25 69                        dw      EXIT                    // ;
1231+ 7689
1232+ 7689              //  ______________________________________________________________________
1233+ 7689              //
1234+ 7689              // create       -- cccc     ( compile time )
1235+ 7689              //              -- a        ( run time )
1236+ 7689                              Colon_Def CREATE,  "CREATE", is_normal
1236+ 7689             >                New_Def  CREATE, "CREATE", Enter_Ptr, is_normal ; ok
1236+ 7689             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1236+ 7689             >
1236+ 7689             >                // dummy db directives used to calculate length of namec
1236+ 7689 43 52 45 41 >                db      "CREATE"
1236+ 768D 54 45       >
1236+ 768F             >len_NFA         defl    $ - temp_NFA
1236+ 768F             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1236+ 7689             >
1236+ 7689 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1236+ 768A 43 52 45 41 >                db      "CREATE"               // name string in 7-bit ascii, but
1236+ 768E 54 45       >
1236+ 7690             >                org     $-1                 // alter last byte of Name just above to set
1236+ 768F C5          >                db      {b $} | END_BIT     // msb as name end
1236+ 7690             >
1236+ 7690 38 76       >                dw      last_NFA            // Link to previous definition Name
1236+ 7692             >CREATE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1236+ 7692 3B 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
1236+ 7694             >                else
1236+ 7694 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
1236+ 7694             >                endif           ; ok        // for other definitions it "points" the correct handler
1236+ 7694             >                // Use of "; ok" to suppress "warning[fwdref]"
1236+ 7694             >
1236+ 7694             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1237+ 7694 3F 76 3E 71                  dw      CODE, SMUDGE        // code smudge
1238+ 7698
1239+ 7698
1240+ 7698 94 71                        dw      C_SEMICOLON_CODE
1241+ 769A                              // this routine is called from the call coded in CFA
1242+ 769A              Create_Ptr:
1243+ 769A 13                           inc     de
1244+ 769B D5                           push    de                  // balance TOS before overwrite it
1245+ 769C
1246+ 769C                              next
1246+ 769C DD E9       >                jp      (ix)
1247+ 769E
1248+ 769E              //  ______________________________________________________________________
1249+ 769E              //
1250+ 769E              // [compile]    -- cccc     ( compile time )
1251+ 769E                              Colon_Def COMPILE_IMMEDIATE,  "[COMPILE]", is_immediate
1251+ 769E             >                New_Def  COMPILE_IMMEDIATE, "[COMPILE]", Enter_Ptr, is_immediate ; ok
1251+ 769E             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1251+ 769E             >
1251+ 769E             >                // dummy db directives used to calculate length of namec
1251+ 769E 5B 43 4F 4D >                db      "[COMPILE]"
1251+ 76A2 50 49 4C 45 >
1251+ 76A6 5D          >
1251+ 76A7             >len_NFA         defl    $ - temp_NFA
1251+ 76A7             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1251+ 769E             >
1251+ 769E C9          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
1251+ 769F 5B 43 4F 4D >                db      "[COMPILE]"               // name string in 7-bit ascii, but
1251+ 76A3 50 49 4C 45 >
1251+ 76A7 5D          >
1251+ 76A8             >                org     $-1                 // alter last byte of Name just above to set
1251+ 76A7 DD          >                db      {b $} | END_BIT     // msb as name end
1251+ 76A8             >
1251+ 76A8 89 76       >                dw      last_NFA            // Link to previous definition Name
1251+ 76AA             >COMPILE_IMMEDIATE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1251+ 76AA 3B 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
1251+ 76AC             >                else
1251+ 76AC ~           >                dw      $ + 2   ; ok        // is pointed by CFA
1251+ 76AC             >                endif           ; ok        // for other definitions it "points" the correct handler
1251+ 76AC             >                // Use of "; ok" to suppress "warning[fwdref]"
1251+ 76AC             >
1251+ 76AC             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1252+ 76AC 99 75                        dw      LFIND                   // -find      (  cfa  b  f  )
1253+ 76AE 88 69                        dw      ZEQUAL                  // 0=         (  cfa  b  )
1254+ 76B0 B6 6C 5F 70                  dw      ZERO, QERROR            // 0 ?error
1255+ 76B4 82 6A                        dw      DROP                    // drop       (  cfa  )
1256+ 76B6 B1 6E                        dw      COMMA                   // ,
1257+ 76B8 25 69                        dw      EXIT                    // ; immediate
1258+ 76BA
1259+ 76BA              //  ______________________________________________________________________
1260+ 76BA              //
1261+ 76BA              // literal      n --      ( compile time )
1262+ 76BA                              Colon_Def LITERAL,  "LITERAL", is_immediate
1262+ 76BA             >                New_Def  LITERAL, "LITERAL", Enter_Ptr, is_immediate ; ok
1262+ 76BA             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1262+ 76BA             >
1262+ 76BA             >                // dummy db directives used to calculate length of namec
1262+ 76BA 4C 49 54 45 >                db      "LITERAL"
1262+ 76BE 52 41 4C    >
1262+ 76C1             >len_NFA         defl    $ - temp_NFA
1262+ 76C1             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1262+ 76BA             >
1262+ 76BA C7          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
1262+ 76BB 4C 49 54 45 >                db      "LITERAL"               // name string in 7-bit ascii, but
1262+ 76BF 52 41 4C    >
1262+ 76C2             >                org     $-1                 // alter last byte of Name just above to set
1262+ 76C1 CC          >                db      {b $} | END_BIT     // msb as name end
1262+ 76C2             >
1262+ 76C2 9E 76       >                dw      last_NFA            // Link to previous definition Name
1262+ 76C4             >LITERAL:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1262+ 76C4 3B 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
1262+ 76C6             >                else
1262+ 76C6 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
1262+ 76C6             >                endif           ; ok        // for other definitions it "points" the correct handler
1262+ 76C6             >                // Use of "; ok" to suppress "warning[fwdref]"
1262+ 76C6             >
1262+ 76C6             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1263+ 76C6 01 6E 4A 6B                  dw      STATE, FETCH            // state @
1264+ 76CA                                                              // if
1265+ 76CA E3 63                        dw      ZBRANCH
1266+ 76CC 08 00                        dw      Literal_Endif - $
1267+ 76CE F2 70 A9 63                  dw          COMPILE, LIT        //      compile lit
1268+ 76D2 B1 6E                        dw          COMMA               //      ,
1269+ 76D4              Literal_Endif:                                  // endif
1270+ 76D4 25 69                        dw      EXIT                    // ; immediate
1271+ 76D6
1272+ 76D6              //  ______________________________________________________________________
1273+ 76D6              //
1274+ 76D6              // dliteral     n --      ( compile time )
1275+ 76D6                              Colon_Def DLITERAL,  "DLITERAL", is_immediate
1275+ 76D6             >                New_Def  DLITERAL, "DLITERAL", Enter_Ptr, is_immediate ; ok
1275+ 76D6             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1275+ 76D6             >
1275+ 76D6             >                // dummy db directives used to calculate length of namec
1275+ 76D6 44 4C 49 54 >                db      "DLITERAL"
1275+ 76DA 45 52 41 4C >
1275+ 76DE             >len_NFA         defl    $ - temp_NFA
1275+ 76DE             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1275+ 76D6             >
1275+ 76D6 C8          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
1275+ 76D7 44 4C 49 54 >                db      "DLITERAL"               // name string in 7-bit ascii, but
1275+ 76DB 45 52 41 4C >
1275+ 76DF             >                org     $-1                 // alter last byte of Name just above to set
1275+ 76DE CC          >                db      {b $} | END_BIT     // msb as name end
1275+ 76DF             >
1275+ 76DF BA 76       >                dw      last_NFA            // Link to previous definition Name
1275+ 76E1             >DLITERAL:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1275+ 76E1 3B 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
1275+ 76E3             >                else
1275+ 76E3 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
1275+ 76E3             >                endif           ; ok        // for other definitions it "points" the correct handler
1275+ 76E3             >                // Use of "; ok" to suppress "warning[fwdref]"
1275+ 76E3             >
1275+ 76E3             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1276+ 76E3 01 6E 4A 6B                  dw      STATE, FETCH            // state @
1277+ 76E7                                                              // if
1278+ 76E7 E3 63                        dw      ZBRANCH
1279+ 76E9 08 00                        dw      DLiteral_Endif - $
1280+ 76EB AA 6A                        dw          SWAP                //      swap
1281+ 76ED C4 76 C4 76                  dw          LITERAL,  LITERAL   //      [compile] literal [compile] literal
1282+ 76F1              DLiteral_Endif:                                 // endif
1283+ 76F1 25 69                        dw      EXIT                    // ; immediate
1284+ 76F3
1285+ 76F3              //  ______________________________________________________________________
1286+ 76F3              //
1287+ 76F3              // [char]       n --      ( compile time )
1288+ 76F3              // inside colon definition, gets first character from next input word
1289+ 76F3              // and compiles it as literal.
1290+ 76F3                              Colon_Def COMPILE_CHAR,  "[CHAR]", is_immediate
1290+ 76F3             >                New_Def  COMPILE_CHAR, "[CHAR]", Enter_Ptr, is_immediate ; ok
1290+ 76F3             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1290+ 76F3             >
1290+ 76F3             >                // dummy db directives used to calculate length of namec
1290+ 76F3 5B 43 48 41 >                db      "[CHAR]"
1290+ 76F7 52 5D       >
1290+ 76F9             >len_NFA         defl    $ - temp_NFA
1290+ 76F9             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1290+ 76F3             >
1290+ 76F3 C6          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
1290+ 76F4 5B 43 48 41 >                db      "[CHAR]"               // name string in 7-bit ascii, but
1290+ 76F8 52 5D       >
1290+ 76FA             >                org     $-1                 // alter last byte of Name just above to set
1290+ 76F9 DD          >                db      {b $} | END_BIT     // msb as name end
1290+ 76FA             >
1290+ 76FA D6 76       >                dw      last_NFA            // Link to previous definition Name
1290+ 76FC             >COMPILE_CHAR:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1290+ 76FC 3B 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
1290+ 76FE             >                else
1290+ 76FE ~           >                dw      $ + 2   ; ok        // is pointed by CFA
1290+ 76FE             >                endif           ; ok        // for other definitions it "points" the correct handler
1290+ 76FE             >                // Use of "; ok" to suppress "warning[fwdref]"
1290+ 76FE             >
1290+ 76FE             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1291+ 76FE 51 74 C4 76                  dw      CHAR, LITERAL           // char [compile] literal
1292+ 7702 25 69                        dw      EXIT                    // ; immediate
1293+ 7704
1294+ 7704              //  ______________________________________________________________________
1295+ 7704              //
1296+ 7704              // 0x00         n --      ( compile time )
1297+ 7704                              Colon_Def NUL_WORD,  $00, is_immediate
1297+ 7704             >                New_Def  NUL_WORD, $00, Enter_Ptr, is_immediate ; ok
1297+ 7704             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1297+ 7704             >
1297+ 7704             >                // dummy db directives used to calculate length of namec
1297+ 7704 00          >                db      $00
1297+ 7705             >len_NFA         defl    $ - temp_NFA
1297+ 7705             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1297+ 7704             >
1297+ 7704 C1          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
1297+ 7705 00          >                db      $00               // name string in 7-bit ascii, but
1297+ 7706             >                org     $-1                 // alter last byte of Name just above to set
1297+ 7705 80          >                db      {b $} | END_BIT     // msb as name end
1297+ 7706             >
1297+ 7706 F3 76       >                dw      last_NFA            // Link to previous definition Name
1297+ 7708             >NUL_WORD:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1297+ 7708 3B 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
1297+ 770A             >                else
1297+ 770A ~           >                dw      $ + 2   ; ok        // is pointed by CFA
1297+ 770A             >                endif           ; ok        // for other definitions it "points" the correct handler
1297+ 770A             >                // Use of "; ok" to suppress "warning[fwdref]"
1297+ 770A             >
1297+ 770A             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1298+ 770A B5 6D 4A 6B                  dw      BLK, FETCH, ONE         // blk @ 1
1298+ 770E BE 6C
1299+ 7710 33 6F                        dw      GREATER                 // > if
1300+ 7712                                                              // if
1301+ 7712 E3 63                        dw      ZBRANCH
1302+ 7714 28 00                        dw      Nul_Else_1 - $
1303+ 7716 BE 6C B5 6D                  dw          ONE, BLK, PLUSSTORE //      1 blk +!
1303+ 771A 27 6B
1304+ 771C B6 6C BE 6D                  dw          ZERO, TO_IN, STORE  //      0 >in !
1304+ 7720 57 6B
1305+ 7722 B5 6D 4A 6B                  dw          BLK, FETCH          //      blk @
1306+ 7726 02 6D                        dw          BSCR                //      b/scr
1307+ 7728 00 6A                        dw          ONE_SUBTRACT        //      1 -
1308+ 772A B5 68                        dw          AND_OP              //      and  ( this is tricky )
1309+ 772C 88 69                        dw          ZEQUAL              //      0=
1310+ 772E                                                              //      if
1311+ 772E E3 63                        dw          ZBRANCH
1312+ 7730 08 00                        dw          Nul_Endif_2 - $
1313+ 7732 91 70                        dw              QEXEC           //          ?exec
1314+ 7734 67 69 82 6A                  dw              R_TO, DROP      //          r> drop
1315+ 7738              Nul_Endif_2:                                    //      endif
1316+ 7738 CC 63                        dw      BRANCH
1317+ 773A 06 00                        dw      Nul_Endif_1 - $
1318+ 773C              Nul_Else_1:                                     // else
1319+ 773C 67 69 82 6A                  dw          R_TO, DROP          //      r> drop
1320+ 7740              Nul_Endif_1:                                    // endif
1321+ 7740 25 69                        dw      EXIT                    // ;
1322+ 7742
1323+ 7742              //  ______________________________________________________________________
1324+ 7742              //
1325+ 7742              // ?stack       --
1326+ 7742              // Raise error #1 if stack is empty and you pop it
1327+ 7742              // Raise error #7 if stack is full.
1328+ 7742              // This means SP must always stay between HERE and FFFF
1329+ 7742              // For 128K BANK paging purpose SP must be <= BFE0 and 50 words room
1330+ 7742              // for Next 8K MMU paging this is $DOE8
1331+ 7742                              Colon_Def QSTACK, "?STACK", is_normal
1331+ 7742             >                New_Def  QSTACK, "?STACK", Enter_Ptr, is_normal ; ok
1331+ 7742             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1331+ 7742             >
1331+ 7742             >                // dummy db directives used to calculate length of namec
1331+ 7742 3F 53 54 41 >                db      "?STACK"
1331+ 7746 43 4B       >
1331+ 7748             >len_NFA         defl    $ - temp_NFA
1331+ 7748             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1331+ 7742             >
1331+ 7742 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1331+ 7743 3F 53 54 41 >                db      "?STACK"               // name string in 7-bit ascii, but
1331+ 7747 43 4B       >
1331+ 7749             >                org     $-1                 // alter last byte of Name just above to set
1331+ 7748 CB          >                db      {b $} | END_BIT     // msb as name end
1331+ 7749             >
1331+ 7749 04 77       >                dw      last_NFA            // Link to previous definition Name
1331+ 774B             >QSTACK:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1331+ 774B 3B 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
1331+ 774D             >                else
1331+ 774D ~           >                dw      $ + 2   ; ok        // is pointed by CFA
1331+ 774D             >                endif           ; ok        // for other definitions it "points" the correct handler
1331+ 774D             >                // Use of "; ok" to suppress "warning[fwdref]"
1331+ 774D             >
1331+ 774D             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1332+ 774D ED 68                        dw      SPFETCH                 // sp@
1333+ 774F 38 6D 4A 6B                  dw      S0, FETCH               // s0 @
1334+ 7753 AA 6A 03 6F                  dw      SWAP, ULESS             // swap u<
1335+ 7757 BE 6C 5F 70                  dw      ONE, QERROR             // 1 ?error
1336+ 775B 95 6E                        dw      HERE                    // here
1337+ 775D 38 6D 4A 6B                  dw      S0, FETCH, LESS         // s0 @ <
1337+ 7761 17 6F
1338+ 7763                                                              // if
1339+ 7763 E3 63                        dw      ZBRANCH
1340+ 7765 14 00                        dw      QStack_Endif - $
1341+ 7767 ED 68                        dw          SPFETCH             //      sp@
1342+ 7769 95 6E A9 63                  dw          HERE, LIT, 128      //      here 128
1342+ 776D 80 00
1343+ 776F CB 69 03 6F                  dw          PLUS, ULESS         //      plus u<
1344+ 7773 A9 63 07 00                  dw          LIT, 7, QERROR      //      7 Cerror
1344+ 7777 5F 70
1345+ 7779              QStack_Endif:                                   // endif
1346+ 7779 25 69                        dw      EXIT                    // ;
1347+ 777B
1348+ 777B
# file closed: C:\Zx\CSpect\Projects\vForth15_INDIRECT/source/L1.asm
 110  777B                              include "L2.asm"
# file opened: C:\Zx\CSpect\Projects\vForth15_INDIRECT/source/L2.asm
   1+ 777B              //  ______________________________________________________________________
   2+ 777B              //
   3+ 777B              //  L2.asm
   4+ 777B              //
   5+ 777B              //  Level-2
   6+ 777B              //  the Forth interpreter, vocabulary, cold/warm start and quit from Forth.
   7+ 777B              //  ______________________________________________________________________
   8+ 777B
   9+ 777B
  10+ 777B              //  ______________________________________________________________________
  11+ 777B              //
  12+ 777B              // interpret    --
  13+ 777B              // This is the text interpreter.
  14+ 777B              // It executes or compiles, depending on STATE, the text coming from
  15+ 777B              // current input stream.
  16+ 777B              // If the word search fails after parsing CONTEXT and CURRENT vocabulary,
  17+ 777B              // the word is interpreted as numeric and converted, using current BASE,
  18+ 777B              // leaving on top of stack a single or double precision number, depending
  19+ 777B              // on the presence of a decimal point.
  20+ 777B              // If the number conversion fails, the terminal is notified with ? followed
  21+ 777B              // by the offending word.
  22+ 777B                              Colon_Def INTERPRET, "INTERPRET", is_normal
  22+ 777B             >                New_Def  INTERPRET, "INTERPRET", Enter_Ptr, is_normal ; ok
  22+ 777B             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  22+ 777B             >
  22+ 777B             >                // dummy db directives used to calculate length of namec
  22+ 777B 49 4E 54 45 >                db      "INTERPRET"
  22+ 777F 52 50 52 45 >
  22+ 7783 54          >
  22+ 7784             >len_NFA         defl    $ - temp_NFA
  22+ 7784             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  22+ 777B             >
  22+ 777B 89          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  22+ 777C 49 4E 54 45 >                db      "INTERPRET"               // name string in 7-bit ascii, but
  22+ 7780 52 50 52 45 >
  22+ 7784 54          >
  22+ 7785             >                org     $-1                 // alter last byte of Name just above to set
  22+ 7784 D4          >                db      {b $} | END_BIT     // msb as name end
  22+ 7785             >
  22+ 7785 42 77       >                dw      last_NFA            // Link to previous definition Name
  22+ 7787             >INTERPRET:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
  22+ 7787 3B 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
  22+ 7789             >                else
  22+ 7789 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
  22+ 7789             >                endif           ; ok        // for other definitions it "points" the correct handler
  22+ 7789             >                // Use of "; ok" to suppress "warning[fwdref]"
  22+ 7789             >
  22+ 7789             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  23+ 7789
  24+ 7789              Interpret_Begin:                                        // begin
  25+ 7789 99 75                        dw          LFIND                       //      -find
  26+ 778B                                                                      //      if
  27+ 778B E3 63                        dw          ZBRANCH
  28+ 778D 1A 00                        dw          Interpret_Else_1 - $
  29+ 778F 01 6E 4A 6B                  dw              STATE, FETCH, LESS      //          state @ <
  29+ 7793 17 6F
  30+ 7795                                                                      //          if
  31+ 7795 E3 63                        dw              ZBRANCH
  32+ 7797 08 00                        dw              Interpret_Else_2 - $
  33+ 7799 0F 71                        dw                  COMPILE_XT          //              compile,
  34+ 779B                                                                      //          else
  35+ 779B CC 63                        dw              BRANCH
  36+ 779D 06 00                        dw              Interpret_Endif_2 - $
  37+ 779F              Interpret_Else_2:
  38+ 779F BE 63 63 6C                  dw                  EXECUTE, NOOP       //              execute nooop
  39+ 77A3              Interpret_Endif_2:                                      //          endif
  40+ 77A3                                                                      //      else
  41+ 77A3 CC 63                        dw          BRANCH
  42+ 77A5 1A 00                        dw          Interpret_Endif_1 - $
  43+ 77A7              Interpret_Else_1:
  44+ 77A7 95 6E 53 75                  dw              HERE, NUMBER            //          here number
  45+ 77AB 14 6E 4A 6B                  dw              DPL, FETCH, ONE_PLUS    //          dpl @ 1+
  45+ 77AF F4 69
  46+ 77B1                                                                      //          if
  47+ 77B1 E3 63                        dw              ZBRANCH
  48+ 77B3 08 00                        dw              Interpret_Else_3 - $
  49+ 77B5              //              dw                  NMODE, FETCH        //              nmode @
  50+ 77B5              //                                                      //              if
  51+ 77B5              //              dw                  ZBRANCH
  52+ 77B5              //              dw                  Interpret_Endif_4 - $
  53+ 77B5              //              dw                      ONE, ZERO       //                  1 0
  54+ 77B5              //              dw                      TWO_DROP        //                  2drop
  55+ 77B5              //Interpret_Endif_4:                                      //              endif
  56+ 77B5 E1 76                        dw                  DLITERAL            //              [compile] dliteral
  57+ 77B7                                                                      //          else
  58+ 77B7 CC 63                        dw              BRANCH
  59+ 77B9 06 00                        dw              Interpret_Endif_3 - $
  60+ 77BB              Interpret_Else_3:
  61+ 77BB 82 6A                        dw                  DROP                //              drop
  62+ 77BD C4 76                        dw                  LITERAL             //              [compile]  literal
  63+ 77BF              Interpret_Endif_3:                                      //          endif
  64+ 77BF              Interpret_Endif_1:                                      //      endif
  65+ 77BF 4B 77                        dw          QSTACK                      //      ?stack
  66+ 77C1 0C 67                        dw          QTERMINAL                   //      ?terminal
  67+ 77C3                                                                      //      if
  68+ 77C3 E3 63                        dw          ZBRANCH
  69+ 77C5 04 00                        dw          Interpret_Endif_5 - $
  70+ 77C7 C1 75                        dw              CABORT                  //          (abort)
  71+ 77C9              Interpret_Endif_5:                                      //      endif
  72+ 77C9 CC 63                        dw      BRANCH
  73+ 77CB BE FF                        dw      Interpret_Begin - $
  74+ 77CD 25 69                        dw      EXIT                            // ;
  75+ 77CF
  76+ 77CF              //  ______________________________________________________________________
  77+ 77CF              //
  78+ 77CF              // vocabulary   -- cccc     ( compile time )
  79+ 77CF              // Defining word used in the form   VOCABULARY cccc
  80+ 77CF              // creates the word  cccc  that gives the name to the vocabulary.
  81+ 77CF              // Giving  cccc  makes the vocabulary CONTEXT so its words are executed first
  82+ 77CF              // Giving  cccc DEFINITIONS makes  the vocabulary  CURRENT
  83+ 77CF              // so new definitions can be inserted in that vocabulary.
  84+ 77CF                              Colon_Def VOCABULARY, "VOCABULARY", is_normal
  84+ 77CF             >                New_Def  VOCABULARY, "VOCABULARY", Enter_Ptr, is_normal ; ok
  84+ 77CF             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  84+ 77CF             >
  84+ 77CF             >                // dummy db directives used to calculate length of namec
  84+ 77CF 56 4F 43 41 >                db      "VOCABULARY"
  84+ 77D3 42 55 4C 41 >
  84+ 77D7 52 59       >
  84+ 77D9             >len_NFA         defl    $ - temp_NFA
  84+ 77D9             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  84+ 77CF             >
  84+ 77CF 8A          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  84+ 77D0 56 4F 43 41 >                db      "VOCABULARY"               // name string in 7-bit ascii, but
  84+ 77D4 42 55 4C 41 >
  84+ 77D8 52 59       >
  84+ 77DA             >                org     $-1                 // alter last byte of Name just above to set
  84+ 77D9 D9          >                db      {b $} | END_BIT     // msb as name end
  84+ 77DA             >
  84+ 77DA 7B 77       >                dw      last_NFA            // Link to previous definition Name
  84+ 77DC             >VOCABULARY:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
  84+ 77DC 3B 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
  84+ 77DE             >                else
  84+ 77DE ~           >                dw      $ + 2   ; ok        // is pointed by CFA
  84+ 77DE             >                endif           ; ok        // for other definitions it "points" the correct handler
  84+ 77DE             >                // Use of "; ok" to suppress "warning[fwdref]"
  84+ 77DE             >
  84+ 77DE             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  85+ 77DE
  86+ 77DE C2 71                        dw      CBUILDS
  87+ 77E0
  88+ 77E0 A9 63 81 A0                  dw      LIT, $A081, COMMA       // $81A0 ,
  88+ 77E4 B1 6E
  89+ 77E6 F6 6D 4A 6B                  dw      CURRENT, FETCH          // current @
  90+ 77EA 26 6A B1 6E                  dw      CELL_MINUS, COMMA       // cell- ,
  91+ 77EE 95 6E                        dw      HERE                    // here
  92+ 77F0 82 6D 4A 6B                  dw      VOC_LINK, FETCH, COMMA  // voc-link @ ,
  92+ 77F4 B1 6E
  93+ 77F6 82 6D 57 6B                  dw      VOC_LINK, STORE         // voc-link !
  94+ 77FA
  95+ 77FA D2 71                        dw      DOES_TO                 // does>
  96+ 77FC              Vocabulary_Does:
  97+ 77FC 1C 6A                        dw      CELL_PLUS               // cell+
  98+ 77FE E9 6D 57 6B                  dw      CONTEXT, STORE          // context !
  99+ 7802 25 69                        dw      EXIT                    // ;
 100+ 7804
 101+ 7804              //  ______________________________________________________________________
 102+ 7804              //
 103+ 7804              // forth        --
 104+ 7804              // Name of the first vocabulary.
 105+ 7804              // It makes FORTH the CONTEXT vocabulary.
 106+ 7804              // Until new user vocabulary are defined, new colon-definitions becomes
 107+ 7804              // part of FORTH. It is immediate, so it will executed during the creation
 108+ 7804              // of a colon definition to be able to select the vocabulary.
 109+ 7804
 110+ 7804                              New_Def FORTH, "FORTH", Does_Ptr, is_immediate
 110+ 7804             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 110+ 7804             >
 110+ 7804             >                // dummy db directives used to calculate length of namec
 110+ 7804 46 4F 52 54 >                db      "FORTH"
 110+ 7808 48          >
 110+ 7809             >len_NFA         defl    $ - temp_NFA
 110+ 7809             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 110+ 7804             >
 110+ 7804 C5          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 110+ 7805 46 4F 52 54 >                db      "FORTH"               // name string in 7-bit ascii, but
 110+ 7809 48          >
 110+ 780A             >                org     $-1                 // alter last byte of Name just above to set
 110+ 7809 C8          >                db      {b $} | END_BIT     // msb as name end
 110+ 780A             >
 110+ 780A CF 77       >                dw      last_NFA            // Link to previous definition Name
 110+ 780C             >FORTH:          if Does_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 110+ 780C DE 71       >                dw      Does_Ptr ; ok        // for primitive definitions  actual code
 110+ 780E             >                else
 110+ 780E ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 110+ 780E             >                endif           ; ok        // for other definitions it "points" the correct handler
 110+ 780E             >                // Use of "; ok" to suppress "warning[fwdref]"
 110+ 780E             >
 110+ 780E             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 111+ 780E FC 77                        dw      Vocabulary_Does
 112+ 7810 81 A0                        db      $81, $A0
 113+ 7812              Forth_Latest_Ptr:
 114+ 7812 12 87                        dw      Here_Dictionary // Fence_Word // Latest_Definition
 115+ 7814              Voclink_Ptr:
 116+ 7814 00 00                        dw      0
 117+ 7816              // Any new vocabulary is structured as follow:
 118+ 7816              // PFA+0 points to DOES> part of VOCABULARY to perform CELL+ CONTEXT !
 119+ 7816              // PFA+2 is 81,A0 i.e. a null-word used as LATEST in the new vocabulary
 120+ 7816              // PFA+4 always contains the LATEST word of this VOCABULARY.
 121+ 7816              //       at creations it points to the null-word of its parent vocabulary
 122+ 7816              //       that is normally FORTH, For example ASSEMBLER points FORTH's null-word
 123+ 7816              // PFA+6 is the pointer that builds up the vocabulary linked list.
 124+ 7816              //       FORTH has 0 here to signal the end of the list and user's variable
 125+ 7816              //       VOC-LINK points to PFA+6 of the newest vocabulary created.
 126+ 7816              //       While FORTH is the only vocabulary, VOC-LINK points to FORTH's PFA+6
 127+ 7816              //       When ASSEMBLER is created, its PFA+6 points to FORTH's PFA+6, and so on
 128+ 7816
 129+ 7816              //  ______________________________________________________________________
 130+ 7816              //
 131+ 7816              // definitions  --
 132+ 7816              // Used in the form  cccc DEFINITIONS
 133+ 7816              // set the CURRENT vocabulary at CONTEXT to insert new definitions in
 134+ 7816              // vocabulary cccc.
 135+ 7816                              Colon_Def DEFINITIONS, "DEFINITIONS", is_normal
 135+ 7816             >                New_Def  DEFINITIONS, "DEFINITIONS", Enter_Ptr, is_normal ; ok
 135+ 7816             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 135+ 7816             >
 135+ 7816             >                // dummy db directives used to calculate length of namec
 135+ 7816 44 45 46 49 >                db      "DEFINITIONS"
 135+ 781A 4E 49 54 49 >
 135+ 781E 4F 4E 53    >
 135+ 7821             >len_NFA         defl    $ - temp_NFA
 135+ 7821             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 135+ 7816             >
 135+ 7816 8B          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 135+ 7817 44 45 46 49 >                db      "DEFINITIONS"               // name string in 7-bit ascii, but
 135+ 781B 4E 49 54 49 >
 135+ 781F 4F 4E 53    >
 135+ 7822             >                org     $-1                 // alter last byte of Name just above to set
 135+ 7821 D3          >                db      {b $} | END_BIT     // msb as name end
 135+ 7822             >
 135+ 7822 04 78       >                dw      last_NFA            // Link to previous definition Name
 135+ 7824             >DEFINITIONS:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 135+ 7824 3B 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 135+ 7826             >                else
 135+ 7826 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 135+ 7826             >                endif           ; ok        // for other definitions it "points" the correct handler
 135+ 7826             >                // Use of "; ok" to suppress "warning[fwdref]"
 135+ 7826             >
 135+ 7826             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 136+ 7826 E9 6D 4A 6B                  dw      CONTEXT, FETCH          // context @
 137+ 782A F6 6D 57 6B                  dw      CURRENT, STORE          // current !
 138+ 782E 25 69                        dw      EXIT                    // ;
 139+ 7830
 140+ 7830              //  ______________________________________________________________________
 141+ 7830              //
 142+ 7830              // (            -- cccc )
 143+ 7830              // the following text is interpreted as a comment until a closing )
 144+ 7830                              Colon_Def COMMENT_BRAKET, "(", is_immediate
 144+ 7830             >                New_Def  COMMENT_BRAKET, "(", Enter_Ptr, is_immediate ; ok
 144+ 7830             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 144+ 7830             >
 144+ 7830             >                // dummy db directives used to calculate length of namec
 144+ 7830 28          >                db      "("
 144+ 7831             >len_NFA         defl    $ - temp_NFA
 144+ 7831             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 144+ 7830             >
 144+ 7830 C1          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 144+ 7831 28          >                db      "("               // name string in 7-bit ascii, but
 144+ 7832             >                org     $-1                 // alter last byte of Name just above to set
 144+ 7831 A8          >                db      {b $} | END_BIT     // msb as name end
 144+ 7832             >
 144+ 7832 16 78       >                dw      last_NFA            // Link to previous definition Name
 144+ 7834             >COMMENT_BRAKET:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 144+ 7834 3B 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 144+ 7836             >                else
 144+ 7836 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 144+ 7836             >                endif           ; ok        // for other definitions it "points" the correct handler
 144+ 7836             >                // Use of "; ok" to suppress "warning[fwdref]"
 144+ 7836             >
 144+ 7836             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 145+ 7836 A9 63 29 00                  dw      LIT, ")"                // [char] )
 146+ 783A E7 73 82 6A                  dw      WORD, DROP              // word drop
 147+ 783E 25 69                        dw      EXIT                    // ;
 148+ 7840
 149+ 7840              //  ______________________________________________________________________
 150+ 7840              //
 151+ 7840              // quit         --
 152+ 7840              // \ Erase the return-stack, stop any compilation and give controlo to the console. No message is issued.
 153+ 7840                              Colon_Def QUIT, "QUIT", is_normal
 153+ 7840             >                New_Def  QUIT, "QUIT", Enter_Ptr, is_normal ; ok
 153+ 7840             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 153+ 7840             >
 153+ 7840             >                // dummy db directives used to calculate length of namec
 153+ 7840 51 55 49 54 >                db      "QUIT"
 153+ 7844             >len_NFA         defl    $ - temp_NFA
 153+ 7844             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 153+ 7840             >
 153+ 7840 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 153+ 7841 51 55 49 54 >                db      "QUIT"               // name string in 7-bit ascii, but
 153+ 7845             >                org     $-1                 // alter last byte of Name just above to set
 153+ 7844 D4          >                db      {b $} | END_BIT     // msb as name end
 153+ 7845             >
 153+ 7845 30 78       >                dw      last_NFA            // Link to previous definition Name
 153+ 7847             >QUIT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 153+ 7847 3B 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 153+ 7849             >                else
 153+ 7849 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 153+ 7849             >                endif           ; ok        // for other definitions it "points" the correct handler
 153+ 7849             >                // Use of "; ok" to suppress "warning[fwdref]"
 153+ 7849             >
 153+ 7849             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 154+ 7849
 155+ 7849 6C 6E 4A 6B                  dw      SOURCE_ID, FETCH        // source-id @
 156+ 784D AF 67 82 6A                  dw      F_CLOSE, DROP           // f_close drop
 157+ 7851 B6 6C 6C 6E                  dw      ZERO, SOURCE_ID, STORE  // 0 source-id !
 157+ 7855 57 6B
 158+ 7857 B6 6C B5 6D                  dw      ZERO, BLK, STORE        // 0 blk !
 158+ 785B 57 6B
 159+ 785D 1B 71                        dw      SQUARED_OPEN            // [compile] [
 160+ 785F                                                              // begin
 161+ 785F              Quit_Begin:
 162+ 785F 40 6D 4A 6B                  dw      R0, FETCH, RPSTORE      //      r0 @ rp!
 162+ 7863 16 69
 163+ 7865 02 68                        dw      CR                      //      cr
 164+ 7867 66 73                        dw      QUERY                   //      query
 165+ 7869              Next_Breakpoint_1:
 166+ 7869 87 77                        dw      INTERPRET               //      interpret
 167+ 786B 01 6E 4A 6B                  dw      STATE, FETCH, ZEQUAL    //      state @ 0=
 167+ 786F 88 69
 168+ 7871                                                              //      if
 169+ 7871 E3 63                        dw      ZBRANCH
 170+ 7873 07 00                        dw      Quit_Endif - $
 171+ 7875 36 74                        dw          C_DOT_QUOTE
 172+ 7877 02 6F 6B                     db          2, "ok"             //          .( ok)
 173+ 787A              Quit_Endif:                                     //      else
 174+ 787A                                                              // again
 175+ 787A CC 63                        dw      BRANCH
 176+ 787C E3 FF                        dw      Quit_Begin - $
 177+ 787E 25 69                        dw      EXIT                    // ;
 178+ 7880
 179+ 7880              //  ______________________________________________________________________
 180+ 7880              //
 181+ 7880              // abort        --
 182+ 7880                              Colon_Def ABORT, "ABORT", is_normal
 182+ 7880             >                New_Def  ABORT, "ABORT", Enter_Ptr, is_normal ; ok
 182+ 7880             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 182+ 7880             >
 182+ 7880             >                // dummy db directives used to calculate length of namec
 182+ 7880 41 42 4F 52 >                db      "ABORT"
 182+ 7884 54          >
 182+ 7885             >len_NFA         defl    $ - temp_NFA
 182+ 7885             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 182+ 7880             >
 182+ 7880 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 182+ 7881 41 42 4F 52 >                db      "ABORT"               // name string in 7-bit ascii, but
 182+ 7885 54          >
 182+ 7886             >                org     $-1                 // alter last byte of Name just above to set
 182+ 7885 D4          >                db      {b $} | END_BIT     // msb as name end
 182+ 7886             >
 182+ 7886 40 78       >                dw      last_NFA            // Link to previous definition Name
 182+ 7888             >ABORT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 182+ 7888 3B 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 182+ 788A             >                else
 182+ 788A ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 182+ 788A             >                endif           ; ok        // for other definitions it "points" the correct handler
 182+ 788A             >                // Use of "; ok" to suppress "warning[fwdref]"
 182+ 788A             >
 182+ 788A             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 183+ 788A 38 6D 4A 6B                  dw      S0, FETCH, SPSTORE      // s0 @ sp!
 183+ 788E FC 68
 184+ 7890 7E 71                        dw      DECIMAL                 // decimal
 185+ 7892 0C 78                        dw      FORTH                   // [compile] forth
 186+ 7894 24 78                        dw      DEFINITIONS             // definitions
 187+ 7896              Autoexec_Ptr:
 188+ 7896 2C 85                        dw      AUTOEXEC                // autoexec, patched to noop
 189+ 7898 47 78                        dw      QUIT                    // quit
 190+ 789A 25 69                        dw      EXIT                    // ;
 191+ 789C
 192+ 789C              //  ______________________________________________________________________
 193+ 789C              //
 194+ 789C              // warm         --
 195+ 789C                              Colon_Def WARM, "WARM", is_normal
 195+ 789C             >                New_Def  WARM, "WARM", Enter_Ptr, is_normal ; ok
 195+ 789C             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 195+ 789C             >
 195+ 789C             >                // dummy db directives used to calculate length of namec
 195+ 789C 57 41 52 4D >                db      "WARM"
 195+ 78A0             >len_NFA         defl    $ - temp_NFA
 195+ 78A0             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 195+ 789C             >
 195+ 789C 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 195+ 789D 57 41 52 4D >                db      "WARM"               // name string in 7-bit ascii, but
 195+ 78A1             >                org     $-1                 // alter last byte of Name just above to set
 195+ 78A0 CD          >                db      {b $} | END_BIT     // msb as name end
 195+ 78A1             >
 195+ 78A1 80 78       >                dw      last_NFA            // Link to previous definition Name
 195+ 78A3             >WARM:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 195+ 78A3 3B 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 195+ 78A5             >                else
 195+ 78A5 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 195+ 78A5             >                endif           ; ok        // for other definitions it "points" the correct handler
 195+ 78A5             >                // Use of "; ok" to suppress "warning[fwdref]"
 195+ 78A5             >
 195+ 78A5             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 196+ 78A5 2A 7C                        dw      BLK_INIT                // blk-init
 197+ 78A7 F2 83                        dw      SPLASH                  // splash
 198+ 78A9 A9 63 07 00                  dw      LIT, 7, EMIT            // 7 emit
 198+ 78AD 89 6F
 199+ 78AF 88 78                        dw      ABORT                   // abort
 200+ 78B1 25 69                        dw      EXIT                    // exit
 201+ 78B3
 202+ 78B3              //  ______________________________________________________________________
 203+ 78B3              //
 204+ 78B3              // cold         --
 205+ 78B3                              Colon_Def COLD, "COLD", is_normal
 205+ 78B3             >                New_Def  COLD, "COLD", Enter_Ptr, is_normal ; ok
 205+ 78B3             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 205+ 78B3             >
 205+ 78B3             >                // dummy db directives used to calculate length of namec
 205+ 78B3 43 4F 4C 44 >                db      "COLD"
 205+ 78B7             >len_NFA         defl    $ - temp_NFA
 205+ 78B7             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 205+ 78B3             >
 205+ 78B3 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 205+ 78B4 43 4F 4C 44 >                db      "COLD"               // name string in 7-bit ascii, but
 205+ 78B8             >                org     $-1                 // alter last byte of Name just above to set
 205+ 78B7 C4          >                db      {b $} | END_BIT     // msb as name end
 205+ 78B8             >
 205+ 78B8 9C 78       >                dw      last_NFA            // Link to previous definition Name
 205+ 78BA             >COLD:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 205+ 78BA 3B 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 205+ 78BC             >                else
 205+ 78BC ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 205+ 78BC             >                endif           ; ok        // for other definitions it "points" the correct handler
 205+ 78BC             >                // Use of "; ok" to suppress "warning[fwdref]"
 205+ 78BC             >
 205+ 78BC             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 206+ 78BC A9 63 78 63                  dw      LIT, S0_origin          // [ hex $12 +origin ] Literal
 207+ 78C0 A9 63 94 63                  dw      LIT, USER_Pointer       // [ hex $3E +origin ] literal
 208+ 78C4 4A 6B                        dw      FETCH                   // @
 209+ 78C6 A9 63 06 00                  dw      LIT, 6, PLUS            // 6 +
 209+ 78CA CB 69
 210+ 78CC A9 63 14 00                  dw      LIT, 20                 // 20
 211+ 78D0 11 68                        dw      CMOVE
 212+ 78D2 A9 63 72 63                  dw      LIT, Latest_origin      // [ hex 0C +origin ] literal
 213+ 78D6 4A 6B                        dw      FETCH                   // @
 214+ 78D8 A9 63 12 78                  dw      LIT, Forth_Latest_Ptr   // [ ' forth >body 4 + ] Literal
 215+ 78DC 57 6B                        dw      STORE                   // !
 216+ 78DE B6 6C AC 6D                  dw      ZERO, NMODE, STORE      // 0 nmode !
 216+ 78E2 57 6B
 217+ 78E4 8D 6D 4A 6B                  dw      FIRST, FETCH, DUP       // first @ dup
 217+ 78E8 B7 6A
 218+ 78EA 40 6E 57 6B                  dw      USE, STORE              // use !
 219+ 78EE 4A 6E 57 6B                  dw      PREV, STORE             // prev !
 220+ 78F2 A9 63 04 00                  dw      LIT, 4, PLACE, STORE    // 4 place !
 220+ 78F6 5D 6E 57 6B
 221+ 78FA              //              dw      LIT, 8
 222+ 78FA              //              dw      LIT, FLAGS2, CSTORE     // 8 5C6A c!
 223+ 78FA C6 6C 8B 6E                  dw      TWO, HP, STORE          // 2 hp !
 223+ 78FE 57 6B
 224+ 7900 A3 78        Warm_Start:     dw      WARM
 225+ 7902 BA 78        Cold_Start:     dw      COLD
 226+ 7904 25 69                        dw      EXIT
 227+ 7906
 228+ 7906              //  ______________________________________________________________________
 229+ 7906              WarmRoutine:
 230+ 7906              ColdRoutine:
 231+ 7906 DD 21 98 63                  ld      ix, Next_Ptr
 232+ 790A D9                           exx
 233+ 790B E5                           push    hl
 234+ 790C D9                           exx
 235+ 790D
 236+ 790D ED 73 6E 63                  ld      (SP_Basic), sp
 237+ 7911 ED 7B 78 63                  ld      sp, (S0_origin)
 238+ 7915              //              nop
 239+ 7915 2A 7A 63                     ld      hl, (R0_origin)
 240+ 7918              //              nop
 241+ 7918                              ldrphl
 241+ 7918 22 96 63    >                ld      (RP_Pointer),hl
 242+ 791B 01 00 79                     ld      bc, Warm_Start
 243+ 791E 38 02                        jr      c, Warm_Skip
 244+ 7920 03                           inc     bc
 245+ 7921 03                           inc     bc
 246+ 7922              Warm_Skip:
 247+ 7922                              next
 247+ 7922 DD E9       >                jp      (ix)
 248+ 7924
 249+ 7924              //  ______________________________________________________________________
 250+ 7924              //
 251+ 7924              // basic        --
 252+ 7924                              New_Def BASIC, "BASIC", is_code, is_normal
 252+ 7924             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 252+ 7924             >
 252+ 7924             >                // dummy db directives used to calculate length of namec
 252+ 7924 42 41 53 49 >                db      "BASIC"
 252+ 7928 43          >
 252+ 7929             >len_NFA         defl    $ - temp_NFA
 252+ 7929             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 252+ 7924             >
 252+ 7924 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 252+ 7925 42 41 53 49 >                db      "BASIC"               // name string in 7-bit ascii, but
 252+ 7929 43          >
 252+ 792A             >                org     $-1                 // alter last byte of Name just above to set
 252+ 7929 C3          >                db      {b $} | END_BIT     // msb as name end
 252+ 792A             >
 252+ 792A B3 78       >                dw      last_NFA            // Link to previous definition Name
 252+ 792C             >BASIC:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 252+ 792C ~           >                dw      runcode ; ok        // for primitive definitions  actual code
 252+ 792C             >                else
 252+ 792C 2E 79       >                dw      $ + 2   ; ok        // is pointed by CFA
 252+ 792E             >                endif           ; ok        // for other definitions it "points" the correct handler
 252+ 792E             >                // Use of "; ok" to suppress "warning[fwdref]"
 252+ 792E             >
 252+ 792E             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 253+ 792E C1                           pop     bc
 254+ 792F 21 00 00                     ld      hl, 0
 255+ 7932 39                           add     hl, sp
 256+ 7933 ED 7B 6E 63                  ld      sp, (SP_Basic)
 257+ 7937              //              nop
 258+ 7937 22 6E 63                     ld      (SP_Basic),hl
 259+ 793A D9                           exx
 260+ 793B E1                           pop     hl
 261+ 793C D9                           exx
 262+ 793D C9                           ret     // to Basic
 263+ 793E
 264+ 793E              //  ______________________________________________________________________
 265+ 793E              //
 266+ 793E              // +-           n1 n2 -- n3
 267+ 793E              // leaves n1 with the sign of n2 as n3.
 268+ 793E                              Colon_Def PLUS_MINUS, "+-", is_normal
 268+ 793E             >                New_Def  PLUS_MINUS, "+-", Enter_Ptr, is_normal ; ok
 268+ 793E             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 268+ 793E             >
 268+ 793E             >                // dummy db directives used to calculate length of namec
 268+ 793E 2B 2D       >                db      "+-"
 268+ 7940             >len_NFA         defl    $ - temp_NFA
 268+ 7940             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 268+ 793E             >
 268+ 793E 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 268+ 793F 2B 2D       >                db      "+-"               // name string in 7-bit ascii, but
 268+ 7941             >                org     $-1                 // alter last byte of Name just above to set
 268+ 7940 AD          >                db      {b $} | END_BIT     // msb as name end
 268+ 7941             >
 268+ 7941 24 79       >                dw      last_NFA            // Link to previous definition Name
 268+ 7943             >PLUS_MINUS:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 268+ 7943 3B 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 268+ 7945             >                else
 268+ 7945 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 268+ 7945             >                endif           ; ok        // for other definitions it "points" the correct handler
 268+ 7945             >                // Use of "; ok" to suppress "warning[fwdref]"
 268+ 7945             >
 268+ 7945             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 269+ 7945 A3 69                        dw      ZLESS                   // 0<
 270+ 7947                                                              // if
 271+ 7947 E3 63                        dw      ZBRANCH
 272+ 7949 04 00                        dw      Plus_Minus_Endif - $
 273+ 794B 3E 6A                        dw          MINUS               //      minus
 274+ 794D              Plus_Minus_Endif:                               // endif
 275+ 794D 25 69                        dw      EXIT                    // ;
 276+ 794F
 277+ 794F              //  ______________________________________________________________________
 278+ 794F              //
 279+ 794F              // d+-          d1 n -- d2
 280+ 794F              // leaves d1 with the sign of n as d2.
 281+ 794F                              Colon_Def DPLUS_MINUS, "D+-", is_normal
 281+ 794F             >                New_Def  DPLUS_MINUS, "D+-", Enter_Ptr, is_normal ; ok
 281+ 794F             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 281+ 794F             >
 281+ 794F             >                // dummy db directives used to calculate length of namec
 281+ 794F 44 2B 2D    >                db      "D+-"
 281+ 7952             >len_NFA         defl    $ - temp_NFA
 281+ 7952             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 281+ 794F             >
 281+ 794F 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 281+ 7950 44 2B 2D    >                db      "D+-"               // name string in 7-bit ascii, but
 281+ 7953             >                org     $-1                 // alter last byte of Name just above to set
 281+ 7952 AD          >                db      {b $} | END_BIT     // msb as name end
 281+ 7953             >
 281+ 7953 3E 79       >                dw      last_NFA            // Link to previous definition Name
 281+ 7955             >DPLUS_MINUS:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 281+ 7955 3B 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 281+ 7957             >                else
 281+ 7957 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 281+ 7957             >                endif           ; ok        // for other definitions it "points" the correct handler
 281+ 7957             >                // Use of "; ok" to suppress "warning[fwdref]"
 281+ 7957             >
 281+ 7957             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 282+ 7957 A3 69                        dw      ZLESS                   // 0<
 283+ 7959                                                              // if
 284+ 7959 E3 63                        dw      ZBRANCH
 285+ 795B 04 00                        dw      DPlus_Minus_Endif - $
 286+ 795D 54 6A                        dw          DMINUS              //      dminus
 287+ 795F              DPlus_Minus_Endif:                              // endif
 288+ 795F 25 69                        dw      EXIT                    // ;
 289+ 7961
 290+ 7961              //  ______________________________________________________________________
 291+ 7961              //
 292+ 7961              // abs          n1 -- n2
 293+ 7961                              Colon_Def ABS_OP, "ABS", is_normal
 293+ 7961             >                New_Def  ABS_OP, "ABS", Enter_Ptr, is_normal ; ok
 293+ 7961             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 293+ 7961             >
 293+ 7961             >                // dummy db directives used to calculate length of namec
 293+ 7961 41 42 53    >                db      "ABS"
 293+ 7964             >len_NFA         defl    $ - temp_NFA
 293+ 7964             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 293+ 7961             >
 293+ 7961 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 293+ 7962 41 42 53    >                db      "ABS"               // name string in 7-bit ascii, but
 293+ 7965             >                org     $-1                 // alter last byte of Name just above to set
 293+ 7964 D3          >                db      {b $} | END_BIT     // msb as name end
 293+ 7965             >
 293+ 7965 4F 79       >                dw      last_NFA            // Link to previous definition Name
 293+ 7967             >ABS_OP:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 293+ 7967 3B 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 293+ 7969             >                else
 293+ 7969 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 293+ 7969             >                endif           ; ok        // for other definitions it "points" the correct handler
 293+ 7969             >                // Use of "; ok" to suppress "warning[fwdref]"
 293+ 7969             >
 293+ 7969             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 294+ 7969 B7 6A                        dw      DUP                     // dup
 295+ 796B 43 79                        dw      PLUS_MINUS              // +-
 296+ 796D 25 69                        dw      EXIT                    // ;
 297+ 796F
 298+ 796F              //  ______________________________________________________________________
 299+ 796F              //
 300+ 796F              // dabs         d1 -- d2
 301+ 796F                              Colon_Def DABS, "DABS", is_normal
 301+ 796F             >                New_Def  DABS, "DABS", Enter_Ptr, is_normal ; ok
 301+ 796F             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 301+ 796F             >
 301+ 796F             >                // dummy db directives used to calculate length of namec
 301+ 796F 44 41 42 53 >                db      "DABS"
 301+ 7973             >len_NFA         defl    $ - temp_NFA
 301+ 7973             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 301+ 796F             >
 301+ 796F 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 301+ 7970 44 41 42 53 >                db      "DABS"               // name string in 7-bit ascii, but
 301+ 7974             >                org     $-1                 // alter last byte of Name just above to set
 301+ 7973 D3          >                db      {b $} | END_BIT     // msb as name end
 301+ 7974             >
 301+ 7974 61 79       >                dw      last_NFA            // Link to previous definition Name
 301+ 7976             >DABS:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 301+ 7976 3B 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 301+ 7978             >                else
 301+ 7978 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 301+ 7978             >                endif           ; ok        // for other definitions it "points" the correct handler
 301+ 7978             >                // Use of "; ok" to suppress "warning[fwdref]"
 301+ 7978             >
 301+ 7978             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 302+ 7978 B7 6A                        dw      DUP                     // dup
 303+ 797A 55 79                        dw      DPLUS_MINUS             // d+-
 304+ 797C 25 69                        dw      EXIT                    // ;
 305+ 797E
 306+ 797E              //  ______________________________________________________________________
 307+ 797E              //
 308+ 797E              // m*           n1 n2 -- d
 309+ 797E              // multiply two integer giving a double
 310+ 797E                              Colon_Def MMUL, "M*", is_normal
 310+ 797E             >                New_Def  MMUL, "M*", Enter_Ptr, is_normal ; ok
 310+ 797E             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 310+ 797E             >
 310+ 797E             >                // dummy db directives used to calculate length of namec
 310+ 797E 4D 2A       >                db      "M*"
 310+ 7980             >len_NFA         defl    $ - temp_NFA
 310+ 7980             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 310+ 797E             >
 310+ 797E 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 310+ 797F 4D 2A       >                db      "M*"               // name string in 7-bit ascii, but
 310+ 7981             >                org     $-1                 // alter last byte of Name just above to set
 310+ 7980 AA          >                db      {b $} | END_BIT     // msb as name end
 310+ 7981             >
 310+ 7981 6F 79       >                dw      last_NFA            // Link to previous definition Name
 310+ 7983             >MMUL:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 310+ 7983 3B 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 310+ 7985             >                else
 310+ 7985 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 310+ 7985             >                endif           ; ok        // for other definitions it "points" the correct handler
 310+ 7985             >                // Use of "; ok" to suppress "warning[fwdref]"
 310+ 7985             >
 310+ 7985             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 311+ 7985 18 6B DA 68                  dw      TWO_DUP, XOR_OP, TO_R   // 2dup xor >r
 311+ 7989 53 69
 312+ 798B 67 79 AA 6A                  dw      ABS_OP, SWAP            // abs swap
 313+ 798F 67 79 46 68                  dw      ABS_OP, UM_MUL          // abs um*
 314+ 7993 67 69 55 79                  dw      R_TO, DPLUS_MINUS       // r> d+-
 315+ 7997 25 69                        dw      EXIT                    // ;
 316+ 7999
 317+ 7999              //  ______________________________________________________________________
 318+ 7999              //
 319+ 7999              // m/mod        d n -- q r
 320+ 7999              // multiply two integer giving a double
 321+ 7999                              Colon_Def MDIVM, "M/MOD", is_normal
 321+ 7999             >                New_Def  MDIVM, "M/MOD", Enter_Ptr, is_normal ; ok
 321+ 7999             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 321+ 7999             >
 321+ 7999             >                // dummy db directives used to calculate length of namec
 321+ 7999 4D 2F 4D 4F >                db      "M/MOD"
 321+ 799D 44          >
 321+ 799E             >len_NFA         defl    $ - temp_NFA
 321+ 799E             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 321+ 7999             >
 321+ 7999 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 321+ 799A 4D 2F 4D 4F >                db      "M/MOD"               // name string in 7-bit ascii, but
 321+ 799E 44          >
 321+ 799F             >                org     $-1                 // alter last byte of Name just above to set
 321+ 799E C4          >                db      {b $} | END_BIT     // msb as name end
 321+ 799F             >
 321+ 799F 7E 79       >                dw      last_NFA            // Link to previous definition Name
 321+ 79A1             >MDIVM:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 321+ 79A1 3B 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 321+ 79A3             >                else
 321+ 79A3 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 321+ 79A3             >                endif           ; ok        // for other definitions it "points" the correct handler
 321+ 79A3             >                // Use of "; ok" to suppress "warning[fwdref]"
 321+ 79A3             >
 321+ 79A3             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 322+ 79A3 72 6A 53 69                  dw      OVER, TO_R, TO_R        // over >r >r
 322+ 79A7 53 69
 323+ 79A9 76 79 7B 69                  dw      DABS, R_OP, ABS_OP      // dabs r abs
 323+ 79AD 67 79
 324+ 79AF 77 68                        dw      UMDIVMOD                // um/mod
 325+ 79B1 67 69                        dw      R_TO                    // r>
 326+ 79B3 7B 69 DA 68                  dw      R_OP, XOR_OP            // r xor
 327+ 79B7 43 79 AA 6A                  dw      PLUS_MINUS, SWAP        // +- swap
 328+ 79BB 67 69                        dw      R_TO                    // r>
 329+ 79BD 43 79 AA 6A                  dw      PLUS_MINUS, SWAP        // +- swap
 330+ 79C1 25 69                        dw      EXIT                    // ;
 331+ 79C3
 332+ 79C3              //  ______________________________________________________________________
 333+ 79C3              //
 334+ 79C3              // m/           d n -- q
 335+ 79C3              // multiply two integer giving a double
 336+ 79C3                              Colon_Def MDIV, "M/", is_normal
 336+ 79C3             >                New_Def  MDIV, "M/", Enter_Ptr, is_normal ; ok
 336+ 79C3             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 336+ 79C3             >
 336+ 79C3             >                // dummy db directives used to calculate length of namec
 336+ 79C3 4D 2F       >                db      "M/"
 336+ 79C5             >len_NFA         defl    $ - temp_NFA
 336+ 79C5             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 336+ 79C3             >
 336+ 79C3 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 336+ 79C4 4D 2F       >                db      "M/"               // name string in 7-bit ascii, but
 336+ 79C6             >                org     $-1                 // alter last byte of Name just above to set
 336+ 79C5 AF          >                db      {b $} | END_BIT     // msb as name end
 336+ 79C6             >
 336+ 79C6 99 79       >                dw      last_NFA            // Link to previous definition Name
 336+ 79C8             >MDIV:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 336+ 79C8 3B 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 336+ 79CA             >                else
 336+ 79CA ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 336+ 79CA             >                endif           ; ok        // for other definitions it "points" the correct handler
 336+ 79CA             >                // Use of "; ok" to suppress "warning[fwdref]"
 336+ 79CA             >
 336+ 79CA             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 337+ 79CA A1 79 8D 6A                  dw      MDIVM, NIP
 338+ 79CE 25 69                        dw      EXIT                    // ;
 339+ 79D0
 340+ 79D0              //  ______________________________________________________________________
 341+ 79D0              //
 342+ 79D0              // *            n1 n2 -- n3
 343+ 79D0              // multiply two integer
 344+ 79D0                              Colon_Def MUL, "*", is_normal
 344+ 79D0             >                New_Def  MUL, "*", Enter_Ptr, is_normal ; ok
 344+ 79D0             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 344+ 79D0             >
 344+ 79D0             >                // dummy db directives used to calculate length of namec
 344+ 79D0 2A          >                db      "*"
 344+ 79D1             >len_NFA         defl    $ - temp_NFA
 344+ 79D1             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 344+ 79D0             >
 344+ 79D0 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 344+ 79D1 2A          >                db      "*"               // name string in 7-bit ascii, but
 344+ 79D2             >                org     $-1                 // alter last byte of Name just above to set
 344+ 79D1 AA          >                db      {b $} | END_BIT     // msb as name end
 344+ 79D2             >
 344+ 79D2 C3 79       >                dw      last_NFA            // Link to previous definition Name
 344+ 79D4             >MUL:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 344+ 79D4 3B 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 344+ 79D6             >                else
 344+ 79D6 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 344+ 79D6             >                endif           ; ok        // for other definitions it "points" the correct handler
 344+ 79D6             >                // Use of "; ok" to suppress "warning[fwdref]"
 344+ 79D6             >
 344+ 79D6             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 345+ 79D6 83 79 82 6A                  dw      MMUL, DROP              // m* drop
 346+ 79DA 25 69                        dw      EXIT                    // ;
 347+ 79DC
 348+ 79DC              //  ______________________________________________________________________
 349+ 79DC              //
 350+ 79DC              // /mod         n1 n2 -- n3 n4
 351+ 79DC              // leaves quotient n4 and remainder n3 of the integer division n1 / n2.
 352+ 79DC              // The remainder has the sign of n1
 353+ 79DC                              Colon_Def DIVMOD, "/MOD", is_normal
 353+ 79DC             >                New_Def  DIVMOD, "/MOD", Enter_Ptr, is_normal ; ok
 353+ 79DC             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 353+ 79DC             >
 353+ 79DC             >                // dummy db directives used to calculate length of namec
 353+ 79DC 2F 4D 4F 44 >                db      "/MOD"
 353+ 79E0             >len_NFA         defl    $ - temp_NFA
 353+ 79E0             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 353+ 79DC             >
 353+ 79DC 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 353+ 79DD 2F 4D 4F 44 >                db      "/MOD"               // name string in 7-bit ascii, but
 353+ 79E1             >                org     $-1                 // alter last byte of Name just above to set
 353+ 79E0 C4          >                db      {b $} | END_BIT     // msb as name end
 353+ 79E1             >
 353+ 79E1 D0 79       >                dw      last_NFA            // Link to previous definition Name
 353+ 79E3             >DIVMOD:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 353+ 79E3 3B 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 353+ 79E5             >                else
 353+ 79E5 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 353+ 79E5             >                endif           ; ok        // for other definitions it "points" the correct handler
 353+ 79E5             >                // Use of "; ok" to suppress "warning[fwdref]"
 353+ 79E5             >
 353+ 79E5             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 354+ 79E5 53 69 D4 6E                  dw      TO_R, S_TO_D, R_TO      // >r s->d r>
 354+ 79E9 67 69
 355+ 79EB A1 79                        dw      MDIVM                   // m/mod
 356+ 79ED 25 69                        dw      EXIT                    // ;
 357+ 79EF
 358+ 79EF              //  ______________________________________________________________________
 359+ 79EF              //
 360+ 79EF              // /            n1 n2 -- n3
 361+ 79EF              // division
 362+ 79EF                              Colon_Def DIV, "/", is_normal
 362+ 79EF             >                New_Def  DIV, "/", Enter_Ptr, is_normal ; ok
 362+ 79EF             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 362+ 79EF             >
 362+ 79EF             >                // dummy db directives used to calculate length of namec
 362+ 79EF 2F          >                db      "/"
 362+ 79F0             >len_NFA         defl    $ - temp_NFA
 362+ 79F0             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 362+ 79EF             >
 362+ 79EF 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 362+ 79F0 2F          >                db      "/"               // name string in 7-bit ascii, but
 362+ 79F1             >                org     $-1                 // alter last byte of Name just above to set
 362+ 79F0 AF          >                db      {b $} | END_BIT     // msb as name end
 362+ 79F1             >
 362+ 79F1 DC 79       >                dw      last_NFA            // Link to previous definition Name
 362+ 79F3             >DIV:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 362+ 79F3 3B 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 362+ 79F5             >                else
 362+ 79F5 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 362+ 79F5             >                endif           ; ok        // for other definitions it "points" the correct handler
 362+ 79F5             >                // Use of "; ok" to suppress "warning[fwdref]"
 362+ 79F5             >
 362+ 79F5             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 363+ 79F5 E3 79 8D 6A                  dw      DIVMOD, NIP             // /mod nip
 364+ 79F9 25 69                        dw      EXIT                    // ;
 365+ 79FB
 366+ 79FB              //  ______________________________________________________________________
 367+ 79FB              //
 368+ 79FB              // mod          n1 n2 -- n3
 369+ 79FB                              Colon_Def MOD, "MOD", is_normal
 369+ 79FB             >                New_Def  MOD, "MOD", Enter_Ptr, is_normal ; ok
 369+ 79FB             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 369+ 79FB             >
 369+ 79FB             >                // dummy db directives used to calculate length of namec
 369+ 79FB 4D 4F 44    >                db      "MOD"
 369+ 79FE             >len_NFA         defl    $ - temp_NFA
 369+ 79FE             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 369+ 79FB             >
 369+ 79FB 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 369+ 79FC 4D 4F 44    >                db      "MOD"               // name string in 7-bit ascii, but
 369+ 79FF             >                org     $-1                 // alter last byte of Name just above to set
 369+ 79FE C4          >                db      {b $} | END_BIT     // msb as name end
 369+ 79FF             >
 369+ 79FF EF 79       >                dw      last_NFA            // Link to previous definition Name
 369+ 7A01             >MOD:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 369+ 7A01 3B 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 369+ 7A03             >                else
 369+ 7A03 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 369+ 7A03             >                endif           ; ok        // for other definitions it "points" the correct handler
 369+ 7A03             >                // Use of "; ok" to suppress "warning[fwdref]"
 369+ 7A03             >
 369+ 7A03             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 370+ 7A03 E3 79 82 6A                  dw      DIVMOD, DROP            // /mod drop
 371+ 7A07 25 69                        dw      EXIT                    // ;
 372+ 7A09
 373+ 7A09              //  ______________________________________________________________________
 374+ 7A09              //
 375+ 7A09              // */mod        n1 n2 n3 -- n4 n5
 376+ 7A09              // leaves the quotient n5 and the remainder n4 of the operation
 377+ 7A09              // (n1 * n2) / n3. The intermediate passage through a double number
 378+ 7A09              // avoids loss of precision
 379+ 7A09                              Colon_Def MUL_DIV_MOD, "*/MOD", is_normal
 379+ 7A09             >                New_Def  MUL_DIV_MOD, "*/MOD", Enter_Ptr, is_normal ; ok
 379+ 7A09             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 379+ 7A09             >
 379+ 7A09             >                // dummy db directives used to calculate length of namec
 379+ 7A09 2A 2F 4D 4F >                db      "*/MOD"
 379+ 7A0D 44          >
 379+ 7A0E             >len_NFA         defl    $ - temp_NFA
 379+ 7A0E             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 379+ 7A09             >
 379+ 7A09 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 379+ 7A0A 2A 2F 4D 4F >                db      "*/MOD"               // name string in 7-bit ascii, but
 379+ 7A0E 44          >
 379+ 7A0F             >                org     $-1                 // alter last byte of Name just above to set
 379+ 7A0E C4          >                db      {b $} | END_BIT     // msb as name end
 379+ 7A0F             >
 379+ 7A0F FB 79       >                dw      last_NFA            // Link to previous definition Name
 379+ 7A11             >MUL_DIV_MOD:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 379+ 7A11 3B 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 379+ 7A13             >                else
 379+ 7A13 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 379+ 7A13             >                endif           ; ok        // for other definitions it "points" the correct handler
 379+ 7A13             >                // Use of "; ok" to suppress "warning[fwdref]"
 379+ 7A13             >
 379+ 7A13             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 380+ 7A13 53 69 83 79                  dw      TO_R, MMUL              // >r  m*
 381+ 7A17 67 69 A1 79                  dw      R_TO, MDIVM             // r>  m/mod
 382+ 7A1B 25 69                        dw      EXIT                    // ;
 383+ 7A1D
 384+ 7A1D              //  ______________________________________________________________________
 385+ 7A1D              //
 386+ 7A1D              // */          n1 n2 n3 -- n4
 387+ 7A1D              // (n1 * n2) / n3. The intermediate passage through a double number avoids loss of precision
 388+ 7A1D                              Colon_Def MUL_DIV, "*/", is_normal
 388+ 7A1D             >                New_Def  MUL_DIV, "*/", Enter_Ptr, is_normal ; ok
 388+ 7A1D             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 388+ 7A1D             >
 388+ 7A1D             >                // dummy db directives used to calculate length of namec
 388+ 7A1D 2A 2F       >                db      "*/"
 388+ 7A1F             >len_NFA         defl    $ - temp_NFA
 388+ 7A1F             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 388+ 7A1D             >
 388+ 7A1D 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 388+ 7A1E 2A 2F       >                db      "*/"               // name string in 7-bit ascii, but
 388+ 7A20             >                org     $-1                 // alter last byte of Name just above to set
 388+ 7A1F AF          >                db      {b $} | END_BIT     // msb as name end
 388+ 7A20             >
 388+ 7A20 09 7A       >                dw      last_NFA            // Link to previous definition Name
 388+ 7A22             >MUL_DIV:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 388+ 7A22 3B 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 388+ 7A24             >                else
 388+ 7A24 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 388+ 7A24             >                endif           ; ok        // for other definitions it "points" the correct handler
 388+ 7A24             >                // Use of "; ok" to suppress "warning[fwdref]"
 388+ 7A24             >
 388+ 7A24             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 389+ 7A24 11 7A                        dw     MUL_DIV_MOD              // */mod
 390+ 7A26 8D 6A                        dw     NIP                      // nip
 391+ 7A28 25 69                        dw     EXIT                     // ;
 392+ 7A2A
 393+ 7A2A
 394+ 7A2A              //  ______________________________________________________________________
 395+ 7A2A              //
 396+ 7A2A              // m/mod        ud1 u2 -- u3 ud4
 397+ 7A2A              // mixed operation: it leaves the remainder u3 and the quotient ud4 of ud1 / u1.
 398+ 7A2A              // All terms are unsigned.
 399+ 7A2A              //              Colon_Def MDIV_MOD, "M/MOD", is_normal
 400+ 7A2A              //              dw      TO_R                    // >r           ( ud1 )
 401+ 7A2A              //              dw      ZERO, R_OP, UMDIVMOD    // 0 r um/mod   ( l rem1 h/r )
 402+ 7A2A              //              dw      R_TO, SWAP, TO_R        // r> swap >r   ( l rem )
 403+ 7A2A              //              dw      UMDIVMOD                // um/mod       ( rem2 l/r )
 404+ 7A2A              //              dw      R_TO                    // r>           ( rem2 l/r h/r )
 405+ 7A2A              //              dw      EXIT                    // ;
 406+ 7A2A
 407+ 7A2A              //  ______________________________________________________________________
 408+ 7A2A              //
 409+ 7A2A              // (line)       n1 n2 -- a b
 410+ 7A2A              // sends the line n1 of block n2 to the disk buffer.
 411+ 7A2A              // it returns the address a and ca counter b = C/L meaning a whole line.
 412+ 7A2A                              Colon_Def CLINE, "(LINE)", is_normal
 412+ 7A2A             >                New_Def  CLINE, "(LINE)", Enter_Ptr, is_normal ; ok
 412+ 7A2A             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 412+ 7A2A             >
 412+ 7A2A             >                // dummy db directives used to calculate length of namec
 412+ 7A2A 28 4C 49 4E >                db      "(LINE)"
 412+ 7A2E 45 29       >
 412+ 7A30             >len_NFA         defl    $ - temp_NFA
 412+ 7A30             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 412+ 7A2A             >
 412+ 7A2A 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 412+ 7A2B 28 4C 49 4E >                db      "(LINE)"               // name string in 7-bit ascii, but
 412+ 7A2F 45 29       >
 412+ 7A31             >                org     $-1                 // alter last byte of Name just above to set
 412+ 7A30 A9          >                db      {b $} | END_BIT     // msb as name end
 412+ 7A31             >
 412+ 7A31 1D 7A       >                dw      last_NFA            // Link to previous definition Name
 412+ 7A33             >CLINE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 412+ 7A33 3B 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 412+ 7A35             >                else
 412+ 7A35 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 412+ 7A35             >                endif           ; ok        // for other definitions it "points" the correct handler
 412+ 7A35             >                // Use of "; ok" to suppress "warning[fwdref]"
 412+ 7A35             >
 412+ 7A35             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 413+ 7A35 53 69                        dw      TO_R                    // >r
 414+ 7A37 63 6C                        dw      NOOP                    // noop
 415+ 7A39 EA 6C                        dw      CL                      // c/l
 416+ 7A3B F6 6C 11 7A                  dw      BBUF, MUL_DIV_MOD       // */mod
 417+ 7A3F 67 69                        dw      R_TO                    // r>
 418+ 7A41 02 6D D4 79                  dw      BSCR, MUL, PLUS         // b/scr * +
 418+ 7A45 CB 69
 419+ 7A47 42 7D                        dw      BLOCK                   // block   ( forward )
 420+ 7A49 CB 69                        dw      PLUS                    // +
 421+ 7A4B 63 6C                        dw      NOOP                    // noop
 422+ 7A4D EA 6C                        dw      CL                      // c/l
 423+ 7A4F 25 69                        dw      EXIT                    // ;
 424+ 7A51
 425+ 7A51              //  ______________________________________________________________________
 426+ 7A51              //
 427+ 7A51              // .line        n1 n2 --
 428+ 7A51              // Sends to output line  n1  of screen n2.
 429+ 7A51                              Colon_Def DOT_LINE, ".LINE", is_normal
 429+ 7A51             >                New_Def  DOT_LINE, ".LINE", Enter_Ptr, is_normal ; ok
 429+ 7A51             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 429+ 7A51             >
 429+ 7A51             >                // dummy db directives used to calculate length of namec
 429+ 7A51 2E 4C 49 4E >                db      ".LINE"
 429+ 7A55 45          >
 429+ 7A56             >len_NFA         defl    $ - temp_NFA
 429+ 7A56             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 429+ 7A51             >
 429+ 7A51 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 429+ 7A52 2E 4C 49 4E >                db      ".LINE"               // name string in 7-bit ascii, but
 429+ 7A56 45          >
 429+ 7A57             >                org     $-1                 // alter last byte of Name just above to set
 429+ 7A56 C5          >                db      {b $} | END_BIT     // msb as name end
 429+ 7A57             >
 429+ 7A57 2A 7A       >                dw      last_NFA            // Link to previous definition Name
 429+ 7A59             >DOT_LINE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 429+ 7A59 3B 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 429+ 7A5B             >                else
 429+ 7A5B ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 429+ 7A5B             >                endif           ; ok        // for other definitions it "points" the correct handler
 429+ 7A5B             >                // Use of "; ok" to suppress "warning[fwdref]"
 429+ 7A5B             >
 429+ 7A5B             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 430+ 7A5B 33 7A 83 72                  dw      CLINE, LTRAILING, TYPE  // (line) -trailing type
 430+ 7A5F 1F 72
 431+ 7A61 25 69                        dw      EXIT                    // ;
 432+ 7A63
 433+ 7A63              //  ______________________________________________________________________
 434+ 7A63              //
 435+ 7A63              // message       n1 n2 --
 436+ 7A63              // prints error message to current channel.
 437+ 7A63              // if WARNING is 0, prints "MSG#n".
 438+ 7A63              // if WARNING is 1, prints line n of screen 4.
 439+ 7A63              // if WARNING is -1, see ERROR
 440+ 7A63              // value can be negative or beyond block 4.
 441+ 7A63                              Colon_Def MESSAGE, "MESSAGE", is_normal
 441+ 7A63             >                New_Def  MESSAGE, "MESSAGE", Enter_Ptr, is_normal ; ok
 441+ 7A63             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 441+ 7A63             >
 441+ 7A63             >                // dummy db directives used to calculate length of namec
 441+ 7A63 4D 45 53 53 >                db      "MESSAGE"
 441+ 7A67 41 47 45    >
 441+ 7A6A             >len_NFA         defl    $ - temp_NFA
 441+ 7A6A             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 441+ 7A63             >
 441+ 7A63 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 441+ 7A64 4D 45 53 53 >                db      "MESSAGE"               // name string in 7-bit ascii, but
 441+ 7A68 41 47 45    >
 441+ 7A6B             >                org     $-1                 // alter last byte of Name just above to set
 441+ 7A6A C5          >                db      {b $} | END_BIT     // msb as name end
 441+ 7A6B             >
 441+ 7A6B 51 7A       >                dw      last_NFA            // Link to previous definition Name
 441+ 7A6D             >MESSAGE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 441+ 7A6D 3B 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 441+ 7A6F             >                else
 441+ 7A6F ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 441+ 7A6F             >                endif           ; ok        // for other definitions it "points" the correct handler
 441+ 7A6F             >                // Use of "; ok" to suppress "warning[fwdref]"
 441+ 7A6F             >
 441+ 7A6F             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 442+ 7A6F 61 6D 4A 6B                  dw      WARNING, FETCH          // warning @
 443+ 7A73                                                              // if
 444+ 7A73 E3 63                        dw      ZBRANCH
 445+ 7A75 18 00                        dw      Message_Else - $
 446+ 7A77 A9 63 04 00                  dw          LIT, 4              //      4
 447+ 7A7B DC 6D 4A 6B                  dw          OFFSET, FETCH       //      offset @
 448+ 7A7F 02 6D F3 79                  dw          BSCR, DIV, SUBTRACT //      b/scr / -
 448+ 7A83 E8 6E
 449+ 7A85 59 7A                        dw          DOT_LINE            //      .line
 450+ 7A87 A5 6F                        dw          SPACE               //      space
 451+ 7A89                                                              // else
 452+ 7A89
 453+ 7A89 CC 63                        dw      BRANCH
 454+ 7A8B 0B 00                        dw      Message_ENdif - $
 455+ 7A8D              Message_Else:
 456+ 7A8D 36 74                        dw          C_DOT_QUOTE         //      .( msg#)
 457+ 7A8F 04 6D 73 67                  db          4, "msg#"
 457+ 7A93 23
 458+ 7A94 EB 82                        dw          DOT                 //      .  ( forward )
 459+ 7A96              Message_ENdif:                                  // endif
 460+ 7A96 25 69                        dw      EXIT                    // ;
 461+ 7A98
 462+ 7A98
 463+ 7A98              //  ______________________________________________________________________
 464+ 7A98              //
 465+ 7A98              // device
 466+ 7A98                              Variable_Def DEVICE,   "DEVICE",   2
 466+ 7A98             >                New_Def  DEVICE, "DEVICE", Variable_Ptr, is_normal
 466+ 7A98             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 466+ 7A98             >
 466+ 7A98             >                // dummy db directives used to calculate length of namec
 466+ 7A98 44 45 56 49 >                db      "DEVICE"
 466+ 7A9C 43 45       >
 466+ 7A9E             >len_NFA         defl    $ - temp_NFA
 466+ 7A9E             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 466+ 7A98             >
 466+ 7A98 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 466+ 7A99 44 45 56 49 >                db      "DEVICE"               // name string in 7-bit ascii, but
 466+ 7A9D 43 45       >
 466+ 7A9F             >                org     $-1                 // alter last byte of Name just above to set
 466+ 7A9E C5          >                db      {b $} | END_BIT     // msb as name end
 466+ 7A9F             >
 466+ 7A9F 63 7A       >                dw      last_NFA            // Link to previous definition Name
 466+ 7AA1             >DEVICE:          if Variable_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 466+ 7AA1 93 6C       >                dw      Variable_Ptr ; ok        // for primitive definitions  actual code
 466+ 7AA3             >                else
 466+ 7AA3 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 466+ 7AA3             >                endif           ; ok        // for other definitions it "points" the correct handler
 466+ 7AA3             >                // Use of "; ok" to suppress "warning[fwdref]"
 466+ 7AA3             >
 466+ 7AA3             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 466+ 7AA3 02 00       >                dw      2
 467+ 7AA5
 468+ 7AA5              //  ______________________________________________________________________
 469+ 7AA5              //
 470+ 7AA5              // inkey        -- c | 0
 471+ 7AA5              // call ROM inkey$ routine, returns c or "zero".
 472+ 7AA5
 473+ 7AA5                              New_Def INKEY, "INKEY", is_code, is_normal
 473+ 7AA5             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 473+ 7AA5             >
 473+ 7AA5             >                // dummy db directives used to calculate length of namec
 473+ 7AA5 49 4E 4B 45 >                db      "INKEY"
 473+ 7AA9 59          >
 473+ 7AAA             >len_NFA         defl    $ - temp_NFA
 473+ 7AAA             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 473+ 7AA5             >
 473+ 7AA5 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 473+ 7AA6 49 4E 4B 45 >                db      "INKEY"               // name string in 7-bit ascii, but
 473+ 7AAA 59          >
 473+ 7AAB             >                org     $-1                 // alter last byte of Name just above to set
 473+ 7AAA D9          >                db      {b $} | END_BIT     // msb as name end
 473+ 7AAB             >
 473+ 7AAB 98 7A       >                dw      last_NFA            // Link to previous definition Name
 473+ 7AAD             >INKEY:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 473+ 7AAD ~           >                dw      runcode ; ok        // for primitive definitions  actual code
 473+ 7AAD             >                else
 473+ 7AAD AF 7A       >                dw      $ + 2   ; ok        // is pointed by CFA
 473+ 7AAF             >                endif           ; ok        // for other definitions it "points" the correct handler
 473+ 7AAF             >                // Use of "; ok" to suppress "warning[fwdref]"
 473+ 7AAF             >
 473+ 7AAF             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 474+ 7AAF
 475+ 7AAF C5                           push    bc
 476+ 7AB0 ED 73 92 63                  ld      (SP_Saved), sp
 477+ 7AB4 31 61 63                     ld      sp, Cold_origin - 5
 478+ 7AB7 DD E5                        push    ix
 479+ 7AB9 CD E6 15                     call    $15E6                   // instead of 15E9
 480+ 7ABC DD E1                        pop     ix
 481+ 7ABE ED 7B 92 63                  ld      sp, (SP_Saved)
 482+ 7AC2 6F                           ld      l, a
 483+ 7AC3 26 00                        ld      h, 0
 484+ 7AC5 C1                           pop     bc
 485+ 7AC6                              psh1
 485+ 7AC6 E5          >                push    hl
 485+ 7AC7 DD E9       >                jp      (ix)
 486+ 7AC9
 487+ 7AC9              //  ______________________________________________________________________
 488+ 7AC9              //
 489+ 7AC9              // select      n --
 490+ 7AC9              // selects the given channel number
 491+ 7AC9
 492+ 7AC9                              New_Def SELECT, "SELECT", is_code, is_normal
 492+ 7AC9             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 492+ 7AC9             >
 492+ 7AC9             >                // dummy db directives used to calculate length of namec
 492+ 7AC9 53 45 4C 45 >                db      "SELECT"
 492+ 7ACD 43 54       >
 492+ 7ACF             >len_NFA         defl    $ - temp_NFA
 492+ 7ACF             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 492+ 7AC9             >
 492+ 7AC9 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 492+ 7ACA 53 45 4C 45 >                db      "SELECT"               // name string in 7-bit ascii, but
 492+ 7ACE 43 54       >
 492+ 7AD0             >                org     $-1                 // alter last byte of Name just above to set
 492+ 7ACF D4          >                db      {b $} | END_BIT     // msb as name end
 492+ 7AD0             >
 492+ 7AD0 A5 7A       >                dw      last_NFA            // Link to previous definition Name
 492+ 7AD2             >SELECT:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 492+ 7AD2 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
 492+ 7AD2             >                else
 492+ 7AD2 D4 7A       >                dw      $ + 2   ; ok        // is pointed by CFA
 492+ 7AD4             >                endif           ; ok        // for other definitions it "points" the correct handler
 492+ 7AD4             >                // Use of "; ok" to suppress "warning[fwdref]"
 492+ 7AD4             >
 492+ 7AD4             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 493+ 7AD4 E1                           pop     hl
 494+ 7AD5 C5                           push    bc
 495+ 7AD6 7D                           ld      a, l
 496+ 7AD7 ED 73 92 63                  ld      (SP_Saved), sp
 497+ 7ADB 31 61 63                     ld      sp, Cold_origin - 5
 498+ 7ADE DD E5                        push    ix
 499+ 7AE0 CD 01 16                     call    $1601
 500+ 7AE3 DD E1                        pop     ix
 501+ 7AE5 ED 7B 92 63                  ld      sp, (SP_Saved)
 502+ 7AE9 C1                           pop     bc
 503+ 7AEA
 504+ 7AEA                              next
 504+ 7AEA DD E9       >                jp      (ix)
 505+ 7AEC
 506+ 7AEC              //  ______________________________________________________________________
 507+ 7AEC
# file closed: C:\Zx\CSpect\Projects\vForth15_INDIRECT/source/L2.asm
 111  7AEC                              include "next-opt1.asm"
# file opened: C:\Zx\CSpect\Projects\vForth15_INDIRECT/source/next-opt1.asm
   1+ 7AEC              //  ______________________________________________________________________
   2+ 7AEC              //
   3+ 7AEC              //  next-opt.asm
   4+ 7AEC              //
   5+ 7AEC              //  ZX Spectrum Next - peculiar definitions
   6+ 7AEC              //  ______________________________________________________________________
   7+ 7AEC
   8+ 7AEC              //  ______________________________________________________________________
   9+ 7AEC              //
  10+ 7AEC              // reg@         n -- b
  11+ 7AEC              // read Next REGister n giving byte b
  12+ 7AEC
  13+ 7AEC                              Colon_Def REG_FETCH, "REG@", is_normal
  13+ 7AEC             >                New_Def  REG_FETCH, "REG@", Enter_Ptr, is_normal ; ok
  13+ 7AEC             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  13+ 7AEC             >
  13+ 7AEC             >                // dummy db directives used to calculate length of namec
  13+ 7AEC 52 45 47 40 >                db      "REG@"
  13+ 7AF0             >len_NFA         defl    $ - temp_NFA
  13+ 7AF0             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  13+ 7AEC             >
  13+ 7AEC 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  13+ 7AED 52 45 47 40 >                db      "REG@"               // name string in 7-bit ascii, but
  13+ 7AF1             >                org     $-1                 // alter last byte of Name just above to set
  13+ 7AF0 C0          >                db      {b $} | END_BIT     // msb as name end
  13+ 7AF1             >
  13+ 7AF1 C9 7A       >                dw      last_NFA            // Link to previous definition Name
  13+ 7AF3             >REG_FETCH:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
  13+ 7AF3 3B 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
  13+ 7AF5             >                else
  13+ 7AF5 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
  13+ 7AF5             >                endif           ; ok        // for other definitions it "points" the correct handler
  13+ 7AF5             >                // Use of "; ok" to suppress "warning[fwdref]"
  13+ 7AF5             >
  13+ 7AF5             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  14+ 7AF5 A9 63 3B 24                  dw      LIT, $243B
  15+ 7AF9 BD 6B                        dw      PSTORE
  16+ 7AFB A9 63 3B 25                  dw      LIT, $253B
  17+ 7AFF AA 6B                        dw      PFETCH
  18+ 7B01 25 69                        dw      EXIT
  19+ 7B03
  20+ 7B03              //  ______________________________________________________________________
  21+ 7B03              //
  22+ 7B03              // reg!         b n --
  23+ 7B03              // write value b to Next REGister n
  24+ 7B03
  25+ 7B03                              Colon_Def REG_STORE, "REG!", is_normal
  25+ 7B03             >                New_Def  REG_STORE, "REG!", Enter_Ptr, is_normal ; ok
  25+ 7B03             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  25+ 7B03             >
  25+ 7B03             >                // dummy db directives used to calculate length of namec
  25+ 7B03 52 45 47 21 >                db      "REG!"
  25+ 7B07             >len_NFA         defl    $ - temp_NFA
  25+ 7B07             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  25+ 7B03             >
  25+ 7B03 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  25+ 7B04 52 45 47 21 >                db      "REG!"               // name string in 7-bit ascii, but
  25+ 7B08             >                org     $-1                 // alter last byte of Name just above to set
  25+ 7B07 A1          >                db      {b $} | END_BIT     // msb as name end
  25+ 7B08             >
  25+ 7B08 EC 7A       >                dw      last_NFA            // Link to previous definition Name
  25+ 7B0A             >REG_STORE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
  25+ 7B0A 3B 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
  25+ 7B0C             >                else
  25+ 7B0C ~           >                dw      $ + 2   ; ok        // is pointed by CFA
  25+ 7B0C             >                endif           ; ok        // for other definitions it "points" the correct handler
  25+ 7B0C             >                // Use of "; ok" to suppress "warning[fwdref]"
  25+ 7B0C             >
  25+ 7B0C             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  26+ 7B0C A9 63 3B 24                  dw      LIT, $243B
  27+ 7B10 BD 6B                        dw      PSTORE
  28+ 7B12 A9 63 3B 25                  dw      LIT, $253B
  29+ 7B16 BD 6B                        dw      PSTORE
  30+ 7B18 25 69                        dw      EXIT
  31+ 7B1A
  32+ 7B1A              //  ______________________________________________________________________
  33+ 7B1A              //
  34+ 7B1A              // mmu7@        -- n
  35+ 7B1A              // query current page in MMU7 8K-RAM : 0 and 223
  36+ 7B1A
  37+ 7B1A                              Colon_Def MMU7_FETCH, "MMU7@", is_normal
  37+ 7B1A             >                New_Def  MMU7_FETCH, "MMU7@", Enter_Ptr, is_normal ; ok
  37+ 7B1A             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  37+ 7B1A             >
  37+ 7B1A             >                // dummy db directives used to calculate length of namec
  37+ 7B1A 4D 4D 55 37 >                db      "MMU7@"
  37+ 7B1E 40          >
  37+ 7B1F             >len_NFA         defl    $ - temp_NFA
  37+ 7B1F             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  37+ 7B1A             >
  37+ 7B1A 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  37+ 7B1B 4D 4D 55 37 >                db      "MMU7@"               // name string in 7-bit ascii, but
  37+ 7B1F 40          >
  37+ 7B20             >                org     $-1                 // alter last byte of Name just above to set
  37+ 7B1F C0          >                db      {b $} | END_BIT     // msb as name end
  37+ 7B20             >
  37+ 7B20 03 7B       >                dw      last_NFA            // Link to previous definition Name
  37+ 7B22             >MMU7_FETCH:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
  37+ 7B22 3B 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
  37+ 7B24             >                else
  37+ 7B24 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
  37+ 7B24             >                endif           ; ok        // for other definitions it "points" the correct handler
  37+ 7B24             >                // Use of "; ok" to suppress "warning[fwdref]"
  37+ 7B24             >
  37+ 7B24             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  38+ 7B24 A9 63 57 00                  dw      LIT, 87, REG_FETCH
  38+ 7B28 F3 7A
  39+ 7B2A 25 69                        dw      EXIT
  40+ 7B2C
  41+ 7B2C              //  ______________________________________________________________________
  42+ 7B2C              //
  43+ 7B2C              // mmu7!        n --
  44+ 7B2C              // set MMU7 8K-RAM page to n given between 0 and 223
  45+ 7B2C              // optimized version that uses NEXTREG n,A Z80n op-code.
  46+ 7B2C
  47+ 7B2C                              New_Def MMU7_STORE, "MMU7!", is_code, is_normal
  47+ 7B2C             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  47+ 7B2C             >
  47+ 7B2C             >                // dummy db directives used to calculate length of namec
  47+ 7B2C 4D 4D 55 37 >                db      "MMU7!"
  47+ 7B30 21          >
  47+ 7B31             >len_NFA         defl    $ - temp_NFA
  47+ 7B31             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  47+ 7B2C             >
  47+ 7B2C 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  47+ 7B2D 4D 4D 55 37 >                db      "MMU7!"               // name string in 7-bit ascii, but
  47+ 7B31 21          >
  47+ 7B32             >                org     $-1                 // alter last byte of Name just above to set
  47+ 7B31 A1          >                db      {b $} | END_BIT     // msb as name end
  47+ 7B32             >
  47+ 7B32 1A 7B       >                dw      last_NFA            // Link to previous definition Name
  47+ 7B34             >MMU7_STORE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
  47+ 7B34 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
  47+ 7B34             >                else
  47+ 7B34 36 7B       >                dw      $ + 2   ; ok        // is pointed by CFA
  47+ 7B36             >                endif           ; ok        // for other definitions it "points" the correct handler
  47+ 7B36             >                // Use of "; ok" to suppress "warning[fwdref]"
  47+ 7B36             >
  47+ 7B36             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  48+ 7B36 E1                           pop     hl
  49+ 7B37 7D                           ld      a, l
  50+ 7B38 ED 92 57                     nextreg 87, a
  51+ 7B3B
  52+ 7B3B                              next
  52+ 7B3B DD E9       >                jp      (ix)
  53+ 7B3D
  54+ 7B3D              //  ______________________________________________________________________
  55+ 7B3D              //
  56+ 7B3D              // >far         ha -- a n
  57+ 7B3D              // decode bits 765 of H as one of the 8K-page between 64 and 71 (40h-47h)
  58+ 7B3D              // take lower bits of H and L as an offset from E000h
  59+ 7B3D              // then return address  a  between E000h-FFFFh
  60+ 7B3D              // and page number n  between 64-71 (40h-47h)
  61+ 7B3D              // For example, in hex:
  62+ 7B3D              //   0000 >FAR  gives  40.E000
  63+ 7B3D              //   1FFF >FAR  gives  40.FFFF
  64+ 7B3D              //   2000 >FAR  gives  41.E000
  65+ 7B3D              //   3FFF >FAR  gives  41.FFFF
  66+ 7B3D              //   EFFF >FAR  gives  47.EFFF
  67+ 7B3D              //   FFFF >FAR  gives  47.FFFF
  68+ 7B3D              //                New_Def TO_FAR, ">FAR", is_code, is_normal
  69+ 7B3D              //                pop     de
  70+ 7B3D              //                ld      a, d
  71+ 7B3D              //                and     $E0
  72+ 7B3D              //                rlca
  73+ 7B3D              //                rlca
  74+ 7B3D              //                rlca
  75+ 7B3D              //                add     $40
  76+ 7B3D              //                ld      l, a
  77+ 7B3D              //                ld      h, 0
  78+ 7B3D              //                ld      a, d
  79+ 7B3D              //                or      $E0
  80+ 7B3D              //                ld      d, a
  81+ 7B3D              //                push    hl
  82+ 7B3D              //                push    de
  83+ 7B3D              //                next
  84+ 7B3D
  85+ 7B3D              //  ______________________________________________________________________
  86+ 7B3D              //
  87+ 7B3D              // <far         a n  -- ha
  88+ 7B3D              // given an address E000-FFFF and a page number n (64-71 or 40h-47h)
  89+ 7B3D              // reverse of >FAR: encodes a FAR address compressing
  90+ 7B3D              // to bits 765 of H, lower bits of HL address offset from E000h
  91+ 7B3D              //                New_Def FROM_FAR, "<FAR", is_code, is_normal
  92+ 7B3D              //                pop     de                  // page number in e
  93+ 7B3D              //                pop     hl                  // address in hl
  94+ 7B3D              //                ld      a, e
  95+ 7B3D              //                sub     $40                 // reduced to 0-7
  96+ 7B3D              //                rrca
  97+ 7B3D              //                rrca
  98+ 7B3D              //                rrca
  99+ 7B3D              //                ld      d, a                // save to d bits 765
 100+ 7B3D              //                ld      a, h                // drops
 101+ 7B3D              //                and     $1F
 102+ 7B3D              //                or      d
 103+ 7B3D              //                ld      h, a
 104+ 7B3D              //
 105+ 7B3D              //                psh1
 106+ 7B3D
 107+ 7B3D              //  ______________________________________________________________________
 108+ 7B3D              //
 109+ 7B3D              // m_p3dos      n1 n2 n3 n4 a -- n5 n6 n7 n8  f
 110+ 7B3D              // NextZXOS call wrapper.
 111+ 7B3D              //  n1 = hl register parameter value
 112+ 7B3D              //  n2 = de register parameter value
 113+ 7B3D              //  n3 = bc register parameter value
 114+ 7B3D              //  n4 =  a register parameter value
 115+ 7B3D              //   a = routine address in ROM 3
 116+ 7B3D              // ----
 117+ 7B3D              //  n5 = hl returned value
 118+ 7B3D              //  n6 = de returned value
 119+ 7B3D              //  n7 = bc returned value
 120+ 7B3D              //  n8 =  a returned value
 121+ 7B3D              //   f
 122+ 7B3D                              New_Def M_P3DOS, "M_P3DOS", is_code, is_normal
 122+ 7B3D             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 122+ 7B3D             >
 122+ 7B3D             >                // dummy db directives used to calculate length of namec
 122+ 7B3D 4D 5F 50 33 >                db      "M_P3DOS"
 122+ 7B41 44 4F 53    >
 122+ 7B44             >len_NFA         defl    $ - temp_NFA
 122+ 7B44             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 122+ 7B3D             >
 122+ 7B3D 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 122+ 7B3E 4D 5F 50 33 >                db      "M_P3DOS"               // name string in 7-bit ascii, but
 122+ 7B42 44 4F 53    >
 122+ 7B45             >                org     $-1                 // alter last byte of Name just above to set
 122+ 7B44 D3          >                db      {b $} | END_BIT     // msb as name end
 122+ 7B45             >
 122+ 7B45 2C 7B       >                dw      last_NFA            // Link to previous definition Name
 122+ 7B47             >M_P3DOS:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 122+ 7B47 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
 122+ 7B47             >                else
 122+ 7B47 49 7B       >                dw      $ + 2   ; ok        // is pointed by CFA
 122+ 7B49             >                endif           ; ok        // for other definitions it "points" the correct handler
 122+ 7B49             >                // Use of "; ok" to suppress "warning[fwdref]"
 122+ 7B49             >
 122+ 7B49             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 123+ 7B49 D1                           pop     de                  // dos call entry address in de
 124+ 7B4A E1                           pop     hl                  // a register
 125+ 7B4B 7D                           ld      a, l
 126+ 7B4C D9                           exx
 127+ 7B4D C1                           pop     bc
 128+ 7B4E D1                           pop     de
 129+ 7B4F E1                           pop     hl
 130+ 7B50 D9                           exx
 131+ 7B51
 132+ 7B51 C5                           push    bc
 133+ 7B52 DD E5                        push    ix
 134+ 7B54
 135+ 7B54 ED 73 92 63                  ld      (SP_Saved), sp
 136+ 7B58 31 61 63                     ld      sp, Cold_origin - 5
 137+ 7B5B 0E 07                        ld      c, 7                // use 7 RAM Bank
 138+ 7B5D
 139+ 7B5D CF                           rst     08
 140+ 7B5E 94                           db      $94
 141+ 7B5F
 142+ 7B5F ED 7B 92 63                  ld      sp, (SP_Saved)
 143+ 7B63 DD E5                        push    ix
 144+ 7B65 E1                           pop     hl
 145+ 7B66 22 90 63                     ld      (IX_Echo), hl
 146+ 7B69              //              nop
 147+ 7B69 DD E1                        pop     ix
 148+ 7B6B E3                           ex      (sp), hl            // hl argument and retrieve bc
 149+ 7B6C D5                           push    de
 150+ 7B6D C5                           push    bc
 151+ 7B6E 4D                           ld      c, l
 152+ 7B6F 44                           ld      b, h
 153+ 7B70
 154+ 7B70 26 00                        ld      h, 0
 155+ 7B72 6F                           ld      l, a
 156+ 7B73 E5                           push    hl
 157+ 7B74 ED 62                        sbc     hl, hl              // -1 for OK ; 0 for KO but now...
 158+ 7B76 23                           inc     hl                  //  0 for OK ; 1 for ko
 159+ 7B77
 160+ 7B77                              psh1
 160+ 7B77 E5          >                push    hl
 160+ 7B78 DD E9       >                jp      (ix)
 161+ 7B7A
 162+ 7B7A              //  ______________________________________________________________________
 163+ 7B7A              //
 164+ 7B7A              // blk-fh
 165+ 7B7A                              Variable_Def BLK_FH,   "BLK-FH",   1
 165+ 7B7A             >                New_Def  BLK_FH, "BLK-FH", Variable_Ptr, is_normal
 165+ 7B7A             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 165+ 7B7A             >
 165+ 7B7A             >                // dummy db directives used to calculate length of namec
 165+ 7B7A 42 4C 4B 2D >                db      "BLK-FH"
 165+ 7B7E 46 48       >
 165+ 7B80             >len_NFA         defl    $ - temp_NFA
 165+ 7B80             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 165+ 7B7A             >
 165+ 7B7A 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 165+ 7B7B 42 4C 4B 2D >                db      "BLK-FH"               // name string in 7-bit ascii, but
 165+ 7B7F 46 48       >
 165+ 7B81             >                org     $-1                 // alter last byte of Name just above to set
 165+ 7B80 C8          >                db      {b $} | END_BIT     // msb as name end
 165+ 7B81             >
 165+ 7B81 3D 7B       >                dw      last_NFA            // Link to previous definition Name
 165+ 7B83             >BLK_FH:          if Variable_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 165+ 7B83 93 6C       >                dw      Variable_Ptr ; ok        // for primitive definitions  actual code
 165+ 7B85             >                else
 165+ 7B85 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 165+ 7B85             >                endif           ; ok        // for other definitions it "points" the correct handler
 165+ 7B85             >                // Use of "; ok" to suppress "warning[fwdref]"
 165+ 7B85             >
 165+ 7B85             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 165+ 7B85 01 00       >                dw      1
 166+ 7B87
 167+ 7B87                              New_Def BLK_FNAME,   "BLK-FNAME", Create_Ptr, is_normal
 167+ 7B87             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 167+ 7B87             >
 167+ 7B87             >                // dummy db directives used to calculate length of namec
 167+ 7B87 42 4C 4B 2D >                db      "BLK-FNAME"
 167+ 7B8B 46 4E 41 4D >
 167+ 7B8F 45          >
 167+ 7B90             >len_NFA         defl    $ - temp_NFA
 167+ 7B90             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 167+ 7B87             >
 167+ 7B87 89          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 167+ 7B88 42 4C 4B 2D >                db      "BLK-FNAME"               // name string in 7-bit ascii, but
 167+ 7B8C 46 4E 41 4D >
 167+ 7B90 45          >
 167+ 7B91             >                org     $-1                 // alter last byte of Name just above to set
 167+ 7B90 C5          >                db      {b $} | END_BIT     // msb as name end
 167+ 7B91             >
 167+ 7B91 7A 7B       >                dw      last_NFA            // Link to previous definition Name
 167+ 7B93             >BLK_FNAME:          if Create_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 167+ 7B93 9A 76       >                dw      Create_Ptr ; ok        // for primitive definitions  actual code
 167+ 7B95             >                else
 167+ 7B95 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 167+ 7B95             >                endif           ; ok        // for other definitions it "points" the correct handler
 167+ 7B95             >                // Use of "; ok" to suppress "warning[fwdref]"
 167+ 7B95             >
 167+ 7B95             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 168+ 7B95 0E 21 42 6C                  db      14, "!Blocks-64.bin", 0
 168+ 7B99 6F 63 6B 73
 168+ 7B9D 2D 36 34 2E
 168+ 7BA1 62 69 6E 00
 169+ 7BA5 00 00 00...                  ds      24
 170+ 7BBD
 171+ 7BBD              //  ______________________________________________________________________
 172+ 7BBD              //
 173+ 7BBD              // blk-seek     n --
 174+ 7BBD              // seek block n  within blocks!.bin  file
 175+ 7BBD                              Colon_Def BLK_SEEK, "BLK-SEEK", is_normal
 175+ 7BBD             >                New_Def  BLK_SEEK, "BLK-SEEK", Enter_Ptr, is_normal ; ok
 175+ 7BBD             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 175+ 7BBD             >
 175+ 7BBD             >                // dummy db directives used to calculate length of namec
 175+ 7BBD 42 4C 4B 2D >                db      "BLK-SEEK"
 175+ 7BC1 53 45 45 4B >
 175+ 7BC5             >len_NFA         defl    $ - temp_NFA
 175+ 7BC5             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 175+ 7BBD             >
 175+ 7BBD 88          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 175+ 7BBE 42 4C 4B 2D >                db      "BLK-SEEK"               // name string in 7-bit ascii, but
 175+ 7BC2 53 45 45 4B >
 175+ 7BC6             >                org     $-1                 // alter last byte of Name just above to set
 175+ 7BC5 CB          >                db      {b $} | END_BIT     // msb as name end
 175+ 7BC6             >
 175+ 7BC6 87 7B       >                dw      last_NFA            // Link to previous definition Name
 175+ 7BC8             >BLK_SEEK:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 175+ 7BC8 3B 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 175+ 7BCA             >                else
 175+ 7BCA ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 175+ 7BCA             >                endif           ; ok        // for other definitions it "points" the correct handler
 175+ 7BCA             >                // Use of "; ok" to suppress "warning[fwdref]"
 175+ 7BCA             >
 175+ 7BCA             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 176+ 7BCA F6 6C 83 79                  dw  BBUF, MMUL
 177+ 7BCE 83 7B 4A 6B                  dw  BLK_FH, FETCH
 178+ 7BD2 2E 67                        dw  F_SEEK
 179+ 7BD4 A9 63 2D 00                  dw  LIT, $2D, QERROR
 179+ 7BD8 5F 70
 180+ 7BDA 25 69                        dw  EXIT
 181+ 7BDC
 182+ 7BDC              //  ______________________________________________________________________
 183+ 7BDC              //
 184+ 7BDC              // blk-read     n --
 185+ 7BDC              // seek block n  within blocks!.bin  file
 186+ 7BDC                              Colon_Def BLK_READ, "BLK-READ", is_normal
 186+ 7BDC             >                New_Def  BLK_READ, "BLK-READ", Enter_Ptr, is_normal ; ok
 186+ 7BDC             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 186+ 7BDC             >
 186+ 7BDC             >                // dummy db directives used to calculate length of namec
 186+ 7BDC 42 4C 4B 2D >                db      "BLK-READ"
 186+ 7BE0 52 45 41 44 >
 186+ 7BE4             >len_NFA         defl    $ - temp_NFA
 186+ 7BE4             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 186+ 7BDC             >
 186+ 7BDC 88          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 186+ 7BDD 42 4C 4B 2D >                db      "BLK-READ"               // name string in 7-bit ascii, but
 186+ 7BE1 52 45 41 44 >
 186+ 7BE5             >                org     $-1                 // alter last byte of Name just above to set
 186+ 7BE4 C4          >                db      {b $} | END_BIT     // msb as name end
 186+ 7BE5             >
 186+ 7BE5 BD 7B       >                dw      last_NFA            // Link to previous definition Name
 186+ 7BE7             >BLK_READ:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 186+ 7BE7 3B 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 186+ 7BE9             >                else
 186+ 7BE9 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 186+ 7BE9             >                endif           ; ok        // for other definitions it "points" the correct handler
 186+ 7BE9             >                // Use of "; ok" to suppress "warning[fwdref]"
 186+ 7BE9             >
 186+ 7BE9             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 187+ 7BE9 C8 7B                        dw  BLK_SEEK
 188+ 7BEB F6 6C                        dw  BBUF
 189+ 7BED 83 7B 4A 6B                  dw  BLK_FH, FETCH
 190+ 7BF1 71 67                        dw  F_READ
 191+ 7BF3 A9 63 2E 00                  dw  LIT, $2E, QERROR
 191+ 7BF7 5F 70
 192+ 7BF9 82 6A                        dw  DROP
 193+ 7BFB 25 69                        dw  EXIT
 194+ 7BFD
 195+ 7BFD              //  ______________________________________________________________________
 196+ 7BFD              //
 197+ 7BFD              // blk-write     n --
 198+ 7BFD              // seek block n  within blocks!.bin  file
 199+ 7BFD                              Colon_Def BLK_WRITE, "BLK-WRITE", is_normal
 199+ 7BFD             >                New_Def  BLK_WRITE, "BLK-WRITE", Enter_Ptr, is_normal ; ok
 199+ 7BFD             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 199+ 7BFD             >
 199+ 7BFD             >                // dummy db directives used to calculate length of namec
 199+ 7BFD 42 4C 4B 2D >                db      "BLK-WRITE"
 199+ 7C01 57 52 49 54 >
 199+ 7C05 45          >
 199+ 7C06             >len_NFA         defl    $ - temp_NFA
 199+ 7C06             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 199+ 7BFD             >
 199+ 7BFD 89          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 199+ 7BFE 42 4C 4B 2D >                db      "BLK-WRITE"               // name string in 7-bit ascii, but
 199+ 7C02 57 52 49 54 >
 199+ 7C06 45          >
 199+ 7C07             >                org     $-1                 // alter last byte of Name just above to set
 199+ 7C06 C5          >                db      {b $} | END_BIT     // msb as name end
 199+ 7C07             >
 199+ 7C07 DC 7B       >                dw      last_NFA            // Link to previous definition Name
 199+ 7C09             >BLK_WRITE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 199+ 7C09 3B 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 199+ 7C0B             >                else
 199+ 7C0B ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 199+ 7C0B             >                endif           ; ok        // for other definitions it "points" the correct handler
 199+ 7C0B             >                // Use of "; ok" to suppress "warning[fwdref]"
 199+ 7C0B             >
 199+ 7C0B             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 200+ 7C0B C8 7B                        dw  BLK_SEEK
 201+ 7C0D F6 6C                        dw  BBUF
 202+ 7C0F 83 7B 4A 6B                  dw  BLK_FH, FETCH
 203+ 7C13 90 67                        dw  F_WRITE
 204+ 7C15 A9 63 2F 00                  dw  LIT, $2F, QERROR
 204+ 7C19 5F 70
 205+ 7C1B 82 6A                        dw  DROP
 206+ 7C1D 25 69                        dw  EXIT
 207+ 7C1F
 208+ 7C1F              //  ______________________________________________________________________
 209+ 7C1F              //
 210+ 7C1F              // blk-init     n --
 211+ 7C1F              // seek block n  within blocks!.bin  file
 212+ 7C1F                              Colon_Def BLK_INIT, "BLK-INIT", is_normal
 212+ 7C1F             >                New_Def  BLK_INIT, "BLK-INIT", Enter_Ptr, is_normal ; ok
 212+ 7C1F             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 212+ 7C1F             >
 212+ 7C1F             >                // dummy db directives used to calculate length of namec
 212+ 7C1F 42 4C 4B 2D >                db      "BLK-INIT"
 212+ 7C23 49 4E 49 54 >
 212+ 7C27             >len_NFA         defl    $ - temp_NFA
 212+ 7C27             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 212+ 7C1F             >
 212+ 7C1F 88          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 212+ 7C20 42 4C 4B 2D >                db      "BLK-INIT"               // name string in 7-bit ascii, but
 212+ 7C24 49 4E 49 54 >
 212+ 7C28             >                org     $-1                 // alter last byte of Name just above to set
 212+ 7C27 D4          >                db      {b $} | END_BIT     // msb as name end
 212+ 7C28             >
 212+ 7C28 FD 7B       >                dw      last_NFA            // Link to previous definition Name
 212+ 7C2A             >BLK_INIT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 212+ 7C2A 3B 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 212+ 7C2C             >                else
 212+ 7C2C ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 212+ 7C2C             >                endif           ; ok        // for other definitions it "points" the correct handler
 212+ 7C2C             >                // Use of "; ok" to suppress "warning[fwdref]"
 212+ 7C2C             >
 212+ 7C2C             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 213+ 7C2C 83 7B 4A 6B                  dw  BLK_FH, FETCH, F_CLOSE, DROP
 213+ 7C30 AF 67 82 6A
 214+ 7C34 93 7B F4 69                  dw  BLK_FNAME, ONE_PLUS
 215+ 7C38 95 6E CE 6C                  dw  HERE, THREE, F_OPEN         // open for update (read+write)
 215+ 7C3C C9 67
 216+ 7C3E A9 63 2C 00                  dw  LIT, $2C, QERROR
 216+ 7C42 5F 70
 217+ 7C44 83 7B 57 6B                  dw  BLK_FH, STORE
 218+ 7C48 25 69                        dw  EXIT
 219+ 7C4A
 220+ 7C4A              //  ______________________________________________________________________
 221+ 7C4A              //
 222+ 7C4A              // #sec
 223+ 7C4A              // number of 512 Byte "sector" available on thie sysstem.
 224+ 7C4A              // it addd up to 16 MByte of data that can be used as source or pool for almost anything.
 225+ 7C4A
 226+ 7C4A                              Constant_Def NSEC , "#SEC", 32767
 226+ 7C4A             >                New_Def  NSEC, "#SEC", Constant_Ptr, is_normal
 226+ 7C4A             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 226+ 7C4A             >
 226+ 7C4A             >                // dummy db directives used to calculate length of namec
 226+ 7C4A 23 53 45 43 >                db      "#SEC"
 226+ 7C4E             >len_NFA         defl    $ - temp_NFA
 226+ 7C4E             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 226+ 7C4A             >
 226+ 7C4A 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 226+ 7C4B 23 53 45 43 >                db      "#SEC"               // name string in 7-bit ascii, but
 226+ 7C4F             >                org     $-1                 // alter last byte of Name just above to set
 226+ 7C4E C3          >                db      {b $} | END_BIT     // msb as name end
 226+ 7C4F             >
 226+ 7C4F 1F 7C       >                dw      last_NFA            // Link to previous definition Name
 226+ 7C51             >NSEC:          if Constant_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 226+ 7C51 7A 6C       >                dw      Constant_Ptr ; ok        // for primitive definitions  actual code
 226+ 7C53             >                else
 226+ 7C53 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 226+ 7C53             >                endif           ; ok        // for other definitions it "points" the correct handler
 226+ 7C53             >                // Use of "; ok" to suppress "warning[fwdref]"
 226+ 7C53             >
 226+ 7C53             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 226+ 7C53 FF 7F       >                dw      32767
 227+ 7C55
 228+ 7C55              //  ______________________________________________________________________
 229+ 7C55
 230+ 7C55
 231+ 7C55
# file closed: C:\Zx\CSpect\Projects\vForth15_INDIRECT/source/next-opt1.asm
 112  7C55                              include "L3.asm"
# file opened: C:\Zx\CSpect\Projects\vForth15_INDIRECT/source/L3.asm
   1+ 7C55              //  ______________________________________________________________________
   2+ 7C55              //
   3+ 7C55              //  L3.asm
   4+ 7C55              //
   5+ 7C55              //  Continuation of L2.asm
   6+ 7C55              //  I/O Block definitions
   7+ 7C55              //  ______________________________________________________________________
   8+ 7C55
   9+ 7C55
  10+ 7C55              //  ______________________________________________________________________
  11+ 7C55              //
  12+ 7C55              // r/w          a n f --
  13+ 7C55              // read/write block n depending on flag f, true-flag means read, false-flag means write.
  14+ 7C55                              Colon_Def READ_WRITE, "R/W", is_normal
  14+ 7C55             >                New_Def  READ_WRITE, "R/W", Enter_Ptr, is_normal ; ok
  14+ 7C55             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  14+ 7C55             >
  14+ 7C55             >                // dummy db directives used to calculate length of namec
  14+ 7C55 52 2F 57    >                db      "R/W"
  14+ 7C58             >len_NFA         defl    $ - temp_NFA
  14+ 7C58             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  14+ 7C55             >
  14+ 7C55 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  14+ 7C56 52 2F 57    >                db      "R/W"               // name string in 7-bit ascii, but
  14+ 7C59             >                org     $-1                 // alter last byte of Name just above to set
  14+ 7C58 D7          >                db      {b $} | END_BIT     // msb as name end
  14+ 7C59             >
  14+ 7C59 4A 7C       >                dw      last_NFA            // Link to previous definition Name
  14+ 7C5B             >READ_WRITE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
  14+ 7C5B 3B 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
  14+ 7C5D             >                else
  14+ 7C5D ~           >                dw      $ + 2   ; ok        // is pointed by CFA
  14+ 7C5D             >                endif           ; ok        // for other definitions it "points" the correct handler
  14+ 7C5D             >                // Use of "; ok" to suppress "warning[fwdref]"
  14+ 7C5D             >
  14+ 7C5D             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  15+ 7C5D 53 69                        dw      TO_R                    // >r
  16+ 7C5F 00 6A                        dw      ONE_SUBTRACT            // 1-
  17+ 7C61 B7 6A A3 69                  dw      DUP, ZLESS              // dup 0<
  18+ 7C65 72 6A 51 7C                  dw      OVER, NSEC              // over #sec
  19+ 7C69 00 6A 33 6F                  dw      ONE_SUBTRACT, GREATER   // 1- >
  20+ 7C6D C7 68                        dw      OR_OP                   // or
  21+ 7C6F A9 63 06 00                  dw      LIT, 6, QERROR          // 6 ?error
  21+ 7C73 5F 70
  22+ 7C75 67 69                        dw      R_TO                    // r>
  23+ 7C77                                                              // if
  24+ 7C77 E3 63                        dw      ZBRANCH
  25+ 7C79 08 00                        dw      Read_Write_Else - $
  26+ 7C7B E7 7B                        dw          BLK_READ            //      blk-read
  27+ 7C7D CC 63                        dw      BRANCH
  28+ 7C7F 04 00                        dw      Read_Write_Endif - $
  29+ 7C81              Read_Write_Else:                                // else
  30+ 7C81 09 7C                        dw          BLK_WRITE           //      blk-write
  31+ 7C83              Read_Write_Endif:                               // endif
  32+ 7C83 25 69                        dw      EXIT                    // ;
  33+ 7C85
  34+ 7C85
  35+ 7C85              //  ______________________________________________________________________
  36+ 7C85              //
  37+ 7C85              // +buf        a1 -- a2 f
  38+ 7C85              // advences to next buffer, cyclically rotating along them
  39+ 7C85                              Colon_Def PBUF, "+BUF", is_normal
  39+ 7C85             >                New_Def  PBUF, "+BUF", Enter_Ptr, is_normal ; ok
  39+ 7C85             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  39+ 7C85             >
  39+ 7C85             >                // dummy db directives used to calculate length of namec
  39+ 7C85 2B 42 55 46 >                db      "+BUF"
  39+ 7C89             >len_NFA         defl    $ - temp_NFA
  39+ 7C89             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  39+ 7C85             >
  39+ 7C85 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  39+ 7C86 2B 42 55 46 >                db      "+BUF"               // name string in 7-bit ascii, but
  39+ 7C8A             >                org     $-1                 // alter last byte of Name just above to set
  39+ 7C89 C6          >                db      {b $} | END_BIT     // msb as name end
  39+ 7C8A             >
  39+ 7C8A 55 7C       >                dw      last_NFA            // Link to previous definition Name
  39+ 7C8C             >PBUF:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
  39+ 7C8C 3B 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
  39+ 7C8E             >                else
  39+ 7C8E ~           >                dw      $ + 2   ; ok        // is pointed by CFA
  39+ 7C8E             >                endif           ; ok        // for other definitions it "points" the correct handler
  39+ 7C8E             >                // Use of "; ok" to suppress "warning[fwdref]"
  39+ 7C8E             >
  39+ 7C8E             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  40+ 7C8E A9 63 04 02                  dw      LIT, 516, PLUS          // 516 +
  40+ 7C92 CB 69
  41+ 7C94 B7 6A 98 6D                  dw      DUP, LIMIT, FETCH       // dup limit @
  41+ 7C98 4A 6B
  42+ 7C9A F6 6E                        dw      EQUALS                  // =
  43+ 7C9C                                                              // if
  44+ 7C9C E3 63                        dw      ZBRANCH
  45+ 7C9E 08 00                        dw      PBuf_Endif - $
  46+ 7CA0 82 6A                        dw          DROP                //      drop
  47+ 7CA2 8D 6D 4A 6B                  dw          FIRST, FETCH        //      first @
  48+ 7CA6              PBuf_Endif:                                     // endif
  49+ 7CA6 B7 6A 4A 6E                  dw      DUP, PREV, FETCH        // dup prev @
  49+ 7CAA 4A 6B
  50+ 7CAC E8 6E                        dw      SUBTRACT                // -
  51+ 7CAE 25 69                        dw      EXIT                    // ;
  52+ 7CB0
  53+ 7CB0              //  ______________________________________________________________________
  54+ 7CB0              //
  55+ 7CB0              // update       --
  56+ 7CB0              // mark the last used block to be written to disk
  57+ 7CB0                              Colon_Def UPDATE, "UPDATE", is_normal
  57+ 7CB0             >                New_Def  UPDATE, "UPDATE", Enter_Ptr, is_normal ; ok
  57+ 7CB0             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  57+ 7CB0             >
  57+ 7CB0             >                // dummy db directives used to calculate length of namec
  57+ 7CB0 55 50 44 41 >                db      "UPDATE"
  57+ 7CB4 54 45       >
  57+ 7CB6             >len_NFA         defl    $ - temp_NFA
  57+ 7CB6             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  57+ 7CB0             >
  57+ 7CB0 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  57+ 7CB1 55 50 44 41 >                db      "UPDATE"               // name string in 7-bit ascii, but
  57+ 7CB5 54 45       >
  57+ 7CB7             >                org     $-1                 // alter last byte of Name just above to set
  57+ 7CB6 C5          >                db      {b $} | END_BIT     // msb as name end
  57+ 7CB7             >
  57+ 7CB7 85 7C       >                dw      last_NFA            // Link to previous definition Name
  57+ 7CB9             >UPDATE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
  57+ 7CB9 3B 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
  57+ 7CBB             >                else
  57+ 7CBB ~           >                dw      $ + 2   ; ok        // is pointed by CFA
  57+ 7CBB             >                endif           ; ok        // for other definitions it "points" the correct handler
  57+ 7CBB             >                // Use of "; ok" to suppress "warning[fwdref]"
  57+ 7CBB             >
  57+ 7CBB             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  58+ 7CBB 4A 6E 4A 6B                  dw      PREV, FETCH, FETCH      // prev @ @
  58+ 7CBF 4A 6B
  59+ 7CC1 A9 63 00 80                  dw      LIT, $8000, OR_OP       // $8000, or
  59+ 7CC5 C7 68
  60+ 7CC7 4A 6E 4A 6B                  dw      PREV, FETCH, STORE      // prev @ !
  60+ 7CCB 57 6B
  61+ 7CCD 25 69                        dw      EXIT                    // ;
  62+ 7CCF
  63+ 7CCF
  64+ 7CCF              //  ______________________________________________________________________
  65+ 7CCF              //
  66+ 7CCF              // empty-buffers --
  67+ 7CCF                              Colon_Def EMPTY_BUFFERS, "EMPTY-BUFFERS", is_normal
  67+ 7CCF             >                New_Def  EMPTY_BUFFERS, "EMPTY-BUFFERS", Enter_Ptr, is_normal ; ok
  67+ 7CCF             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  67+ 7CCF             >
  67+ 7CCF             >                // dummy db directives used to calculate length of namec
  67+ 7CCF 45 4D 50 54 >                db      "EMPTY-BUFFERS"
  67+ 7CD3 59 2D 42 55 >
  67+ 7CD7 46 46 45 52 >
  67+ 7CDB 53          >
  67+ 7CDC             >len_NFA         defl    $ - temp_NFA
  67+ 7CDC             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  67+ 7CCF             >
  67+ 7CCF 8D          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  67+ 7CD0 45 4D 50 54 >                db      "EMPTY-BUFFERS"               // name string in 7-bit ascii, but
  67+ 7CD4 59 2D 42 55 >
  67+ 7CD8 46 46 45 52 >
  67+ 7CDC 53          >
  67+ 7CDD             >                org     $-1                 // alter last byte of Name just above to set
  67+ 7CDC D3          >                db      {b $} | END_BIT     // msb as name end
  67+ 7CDD             >
  67+ 7CDD B0 7C       >                dw      last_NFA            // Link to previous definition Name
  67+ 7CDF             >EMPTY_BUFFERS:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
  67+ 7CDF 3B 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
  67+ 7CE1             >                else
  67+ 7CE1 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
  67+ 7CE1             >                endif           ; ok        // for other definitions it "points" the correct handler
  67+ 7CE1             >                // Use of "; ok" to suppress "warning[fwdref]"
  67+ 7CE1             >
  67+ 7CE1             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  68+ 7CE1 8D 6D 4A 6B                  dw      FIRST, FETCH            // first @
  69+ 7CE5 98 6D 4A 6B                  dw      LIMIT, FETCH            // limit @
  70+ 7CE9 72 6A E8 6E                  dw      OVER, SUBTRACT, ERASE   // over - erase
  70+ 7CED 9E 73
  71+ 7CEF 25 69                        dw      EXIT                    // ;
  72+ 7CF1
  73+ 7CF1              //  ______________________________________________________________________
  74+ 7CF1              //
  75+ 7CF1              // buffer       n -- a
  76+ 7CF1              // read block n and gives the address to a buffer
  77+ 7CF1              // any block previously inside the buffer, if modified, is rewritten to
  78+ 7CF1              // disk before reading the block n.
  79+ 7CF1
  80+ 7CF1                              Colon_Def BUFFER, "BUFFER", is_normal
  80+ 7CF1             >                New_Def  BUFFER, "BUFFER", Enter_Ptr, is_normal ; ok
  80+ 7CF1             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  80+ 7CF1             >
  80+ 7CF1             >                // dummy db directives used to calculate length of namec
  80+ 7CF1 42 55 46 46 >                db      "BUFFER"
  80+ 7CF5 45 52       >
  80+ 7CF7             >len_NFA         defl    $ - temp_NFA
  80+ 7CF7             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  80+ 7CF1             >
  80+ 7CF1 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  80+ 7CF2 42 55 46 46 >                db      "BUFFER"               // name string in 7-bit ascii, but
  80+ 7CF6 45 52       >
  80+ 7CF8             >                org     $-1                 // alter last byte of Name just above to set
  80+ 7CF7 D2          >                db      {b $} | END_BIT     // msb as name end
  80+ 7CF8             >
  80+ 7CF8 CF 7C       >                dw      last_NFA            // Link to previous definition Name
  80+ 7CFA             >BUFFER:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
  80+ 7CFA 3B 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
  80+ 7CFC             >                else
  80+ 7CFC ~           >                dw      $ + 2   ; ok        // is pointed by CFA
  80+ 7CFC             >                endif           ; ok        // for other definitions it "points" the correct handler
  80+ 7CFC             >                // Use of "; ok" to suppress "warning[fwdref]"
  80+ 7CFC             >
  80+ 7CFC             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  81+ 7CFC 40 6E 4A 6B                  dw      USE, FETCH              // use @
  82+ 7D00 B7 6A 53 69                  dw      DUP, TO_R               // dup >r
  83+ 7D04                                                              // begin
  84+ 7D04              Buffer_Begin:
  85+ 7D04 8C 7C                        dw          PBUF                //      +buf
  86+ 7D06                                                              // until
  87+ 7D06 E3 63                        dw      ZBRANCH
  88+ 7D08 FC FF                        dw      Buffer_Begin - $
  89+ 7D0A 40 6E 57 6B                  dw      USE, STORE              // use !
  90+ 7D0E 7B 69 4A 6B                  dw      R_OP, FETCH, ZLESS      // r @ 0<
  90+ 7D12 A3 69
  91+ 7D14                                                              // if
  92+ 7D14 E3 63                        dw      ZBRANCH
  93+ 7D16 14 00                        dw      Buffer_Endif - $
  94+ 7D18 7B 69 1C 6A                  dw          R_OP, CELL_PLUS     //      r cell+
  95+ 7D1C 7B 69 4A 6B                  dw          R_OP, FETCH         //      r fetch
  96+ 7D20 A9 63 FF 7F                  dw          LIT, $7FFF          //      7FFF
  97+ 7D24 B5 68                        dw          AND_OP              //      and
  98+ 7D26 B6 6C 5B 7C                  dw          ZERO, READ_WRITE    //      0 r/w
  99+ 7D2A              Buffer_Endif:                                   // endif
 100+ 7D2A 7B 69 57 6B                  dw      R_OP, STORE             // r !
 101+ 7D2E 7B 69 4A 6E                  dw      R_OP, PREV, STORE       // r prev !
 101+ 7D32 57 6B
 102+ 7D34 67 69 1C 6A                  dw      R_TO, CELL_PLUS         // r> cell+
 103+ 7D38 25 69                        dw      EXIT                    // ;
 104+ 7D3A
 105+ 7D3A              //  ______________________________________________________________________
 106+ 7D3A              //
 107+ 7D3A              // block        n -- a
 108+ 7D3A              // Leaves the buffer address that contains the block n.
 109+ 7D3A              // If the block is not already present, it will be loaded from disk
 110+ 7D3A              // The block previously inside the buffer, if modified, is rewritten to
 111+ 7D3A              // disk before reading the block n.
 112+ 7D3A              // See also BUFFER, R/W, UPDATE, FLUSH.
 113+ 7D3A
 114+ 7D3A                              Colon_Def BLOCK, "BLOCK", is_normal
 114+ 7D3A             >                New_Def  BLOCK, "BLOCK", Enter_Ptr, is_normal ; ok
 114+ 7D3A             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 114+ 7D3A             >
 114+ 7D3A             >                // dummy db directives used to calculate length of namec
 114+ 7D3A 42 4C 4F 43 >                db      "BLOCK"
 114+ 7D3E 4B          >
 114+ 7D3F             >len_NFA         defl    $ - temp_NFA
 114+ 7D3F             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 114+ 7D3A             >
 114+ 7D3A 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 114+ 7D3B 42 4C 4F 43 >                db      "BLOCK"               // name string in 7-bit ascii, but
 114+ 7D3F 4B          >
 114+ 7D40             >                org     $-1                 // alter last byte of Name just above to set
 114+ 7D3F CB          >                db      {b $} | END_BIT     // msb as name end
 114+ 7D40             >
 114+ 7D40 F1 7C       >                dw      last_NFA            // Link to previous definition Name
 114+ 7D42             >BLOCK:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 114+ 7D42 3B 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 114+ 7D44             >                else
 114+ 7D44 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 114+ 7D44             >                endif           ; ok        // for other definitions it "points" the correct handler
 114+ 7D44             >                // Use of "; ok" to suppress "warning[fwdref]"
 114+ 7D44             >
 114+ 7D44             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 115+ 7D44 DC 6D 4A 6B                  dw      OFFSET, FETCH           // offset @
 116+ 7D48 CB 69 53 69                  dw      PLUS, TO_R              // + >r
 117+ 7D4C 4A 6E 4A 6B                  dw      PREV, FETCH             // prev @
 118+ 7D50 B7 6A 4A 6B                  dw      DUP, FETCH              // dup @
 119+ 7D54 7B 69 E8 6E                  dw      R_OP, SUBTRACT          // r -
 120+ 7D58 B7 6A CB 69                  dw      DUP, PLUS               // dup +  ( trick: check equality without most significant bit )
 121+ 7D5C                                                              // if
 122+ 7D5C E3 63                        dw        ZBRANCH
 123+ 7D5E 34 00                        dw        Block_Endif_1 - $
 124+ 7D60              Block_Begin:                                    //      begin
 125+ 7D60 8C 7C 88 69                  dw          PBUF, ZEQUAL        //          +buf 0
 126+ 7D64                                                              //          if
 127+ 7D64 E3 63                        dw          ZBRANCH
 128+ 7D66 14 00                        dw          Block_Endif_2 - $
 129+ 7D68 82 6A                        dw              DROP            //              drop
 130+ 7D6A 7B 69 FA 7C                  dw              R_OP, BUFFER    //              r buffer
 131+ 7D6E B7 6A                        dw              DUP             //              dup
 132+ 7D70 7B 69 BE 6C                  dw              R_OP, ONE       //              r 1
 133+ 7D74 5B 7C                        dw              READ_WRITE      //              r/w
 134+ 7D76 C6 6C E8 6E                  dw              TWO, SUBTRACT   //              2 -
 135+ 7D7A              Block_Endif_2:                                  //          endif
 136+ 7D7A B7 6A 4A 6B                  dw          DUP, FETCH, R_OP    //          dup @ r
 136+ 7D7E 7B 69
 137+ 7D80 E8 6E B7 6A                  dw          SUBTRACT, DUP       //          - dup
 138+ 7D84 CB 69 88 69                  dw          PLUS, ZEQUAL        //          + 0=
 139+ 7D88                                                              //      until
 140+ 7D88 E3 63                        dw        ZBRANCH
 141+ 7D8A D6 FF                        dw        Block_Begin - $
 142+ 7D8C B7 6A 4A 6E                  dw        DUP, PREV, STORE      //      dup prev !
 142+ 7D90 57 6B
 143+ 7D92              Block_Endif_1:                                  // endif
 144+ 7D92 67 69 82 6A                  dw      R_TO, DROP, CELL_PLUS   // r> drop cell+
 144+ 7D96 1C 6A
 145+ 7D98 25 69                        dw      EXIT                    // ;
 146+ 7D9A
 147+ 7D9A              //  ______________________________________________________________________
 148+ 7D9A              //
 149+ 7D9A              // #buff        -- n
 150+ 7D9A              // number of buffers available. must be the difference between LIMIT and FIRST divided by 516
 151+ 7D9A                              Constant_Def NBUFF,   "#BUFF", 7
 151+ 7D9A             >                New_Def  NBUFF, "#BUFF", Constant_Ptr, is_normal
 151+ 7D9A             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 151+ 7D9A             >
 151+ 7D9A             >                // dummy db directives used to calculate length of namec
 151+ 7D9A 23 42 55 46 >                db      "#BUFF"
 151+ 7D9E 46          >
 151+ 7D9F             >len_NFA         defl    $ - temp_NFA
 151+ 7D9F             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 151+ 7D9A             >
 151+ 7D9A 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 151+ 7D9B 23 42 55 46 >                db      "#BUFF"               // name string in 7-bit ascii, but
 151+ 7D9F 46          >
 151+ 7DA0             >                org     $-1                 // alter last byte of Name just above to set
 151+ 7D9F C6          >                db      {b $} | END_BIT     // msb as name end
 151+ 7DA0             >
 151+ 7DA0 3A 7D       >                dw      last_NFA            // Link to previous definition Name
 151+ 7DA2             >NBUFF:          if Constant_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 151+ 7DA2 7A 6C       >                dw      Constant_Ptr ; ok        // for primitive definitions  actual code
 151+ 7DA4             >                else
 151+ 7DA4 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 151+ 7DA4             >                endif           ; ok        // for other definitions it "points" the correct handler
 151+ 7DA4             >                // Use of "; ok" to suppress "warning[fwdref]"
 151+ 7DA4             >
 151+ 7DA4             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 151+ 7DA4 07 00       >                dw      7
 152+ 7DA6
 153+ 7DA6              //  ______________________________________________________________________
 154+ 7DA6              //
 155+ 7DA6              // flush        --
 156+ 7DA6                              Colon_Def FLUSH, "FLUSH", is_normal
 156+ 7DA6             >                New_Def  FLUSH, "FLUSH", Enter_Ptr, is_normal ; ok
 156+ 7DA6             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 156+ 7DA6             >
 156+ 7DA6             >                // dummy db directives used to calculate length of namec
 156+ 7DA6 46 4C 55 53 >                db      "FLUSH"
 156+ 7DAA 48          >
 156+ 7DAB             >len_NFA         defl    $ - temp_NFA
 156+ 7DAB             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 156+ 7DA6             >
 156+ 7DA6 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 156+ 7DA7 46 4C 55 53 >                db      "FLUSH"               // name string in 7-bit ascii, but
 156+ 7DAB 48          >
 156+ 7DAC             >                org     $-1                 // alter last byte of Name just above to set
 156+ 7DAB C8          >                db      {b $} | END_BIT     // msb as name end
 156+ 7DAC             >
 156+ 7DAC 9A 7D       >                dw      last_NFA            // Link to previous definition Name
 156+ 7DAE             >FLUSH:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 156+ 7DAE 3B 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 156+ 7DB0             >                else
 156+ 7DB0 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 156+ 7DB0             >                endif           ; ok        // for other definitions it "points" the correct handler
 156+ 7DB0             >                // Use of "; ok" to suppress "warning[fwdref]"
 156+ 7DB0             >
 156+ 7DB0             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 157+ 7DB0 A2 7D F4 69                  dw      NBUFF, ONE_PLUS, ZERO   // #buff 1+ 0
 157+ 7DB4 B6 6C
 158+ 7DB6              Flush_Do:                                       // do
 159+ 7DB6 6B 64                        dw      C_DO
 160+ 7DB8 B6 6C FA 7C                  dw      ZERO, BUFFER, DROP      //      0 buffer drop
 160+ 7DBC 82 6A
 161+ 7DBE                                                              // loop
 162+ 7DBE F8 63 F8 FF                  dw      C_LOOP, Flush_Do - $
 163+ 7DC2 83 7B 4A 6B                  dw      BLK_FH, FETCH           // blk-fh @     ( ZX-Next dependance )
 164+ 7DC6 EC 67 82 6A                  dw      F_SYNC, DROP            // f_sync drop
 165+ 7DCA 25 69                        dw      EXIT                    // exit
 166+ 7DCC
 167+ 7DCC              //  ______________________________________________________________________
 168+ 7DCC              //
 169+ 7DCC              // f_getline    a m fh -- n
 170+ 7DCC              // Given an open filehandle read next line (terminated with $0D or $0A)
 171+ 7DCC              // Address a is left for subsequent processing
 172+ 7DCC              // and n as the actual number of byte read, that is the length of line
 173+ 7DCC                              Colon_Def F_GETLINE, "F_GETLINE", is_normal
 173+ 7DCC             >                New_Def  F_GETLINE, "F_GETLINE", Enter_Ptr, is_normal ; ok
 173+ 7DCC             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 173+ 7DCC             >
 173+ 7DCC             >                // dummy db directives used to calculate length of namec
 173+ 7DCC 46 5F 47 45 >                db      "F_GETLINE"
 173+ 7DD0 54 4C 49 4E >
 173+ 7DD4 45          >
 173+ 7DD5             >len_NFA         defl    $ - temp_NFA
 173+ 7DD5             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 173+ 7DCC             >
 173+ 7DCC 89          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 173+ 7DCD 46 5F 47 45 >                db      "F_GETLINE"               // name string in 7-bit ascii, but
 173+ 7DD1 54 4C 49 4E >
 173+ 7DD5 45          >
 173+ 7DD6             >                org     $-1                 // alter last byte of Name just above to set
 173+ 7DD5 C5          >                db      {b $} | END_BIT     // msb as name end
 173+ 7DD6             >
 173+ 7DD6 A6 7D       >                dw      last_NFA            // Link to previous definition Name
 173+ 7DD8             >F_GETLINE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 173+ 7DD8 3B 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 173+ 7DDA             >                else
 173+ 7DDA ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 173+ 7DDA             >                endif           ; ok        // for other definitions it "points" the correct handler
 173+ 7DDA             >                // Use of "; ok" to suppress "warning[fwdref]"
 173+ 7DDA             >
 173+ 7DDA             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 174+ 7DDA 53 69                        dw      TO_R                    // >r               ( a  m  )     \  fh
 175+ 7DDC 9A 6A                        dw      TUCK                    // tuck             ( m a m )
 176+ 7DDE 7B 69 53 67                  dw      R_OP, F_FGETPOS         // r f_fgetpos      ( m a m d f )
 177+ 7DE2 A9 63 2C 00                  dw      LIT, 44, QERROR         // 44 ?error        ( m a m d )
 177+ 7DE6 5F 70
 178+ 7DE8
 179+ 7DE8 06 6B 72 6A                  dw      TWO_SWAP, OVER          // 2swap over       ( m d a m )
 180+ 7DEC F4 69 AA 6A                  dw      ONE_PLUS, SWAP          // 1+ swap          ( m d a a+1 m )
 181+ 7DF0
 182+ 7DF0 7B 69 71 67                  dw      R_OP, F_READ            // r f_read         ( m d a n f )
 183+ 7DF4 A9 63 2E 00                  dw      LIT, 46, QERROR         // 46 ?error        ( m d a n )
 183+ 7DF8 5F 70
 184+ 7DFA                                                              // if ( at least 1 chr was read )  \  fh
 185+ 7DFA E3 63                        dw      ZBRANCH
 186+ 7DFC 36 00                        dw      FGetline_Else - $
 187+ 7DFE A9 63 0A 00                  dw          LIT, 10, ENCLOSE    //      10 enclose       ( m d a x b x )
 187+ 7E02 56 65
 188+ 7E04 82 6A 8D 6A                  dw          DROP, NIP           //      drop nip         ( m d a b )
 189+ 7E08 AA 6A                        dw          SWAP                //      drop swap        ( m d b a )
 190+ 7E0A A9 63 0D 00                  dw          LIT, 13, ENCLOSE    //      13 enclose       ( m d b a x c x )
 190+ 7E0E 56 65
 191+ 7E10 82 6A 8D 6A                  dw          DROP, NIP           //      drop nip         ( m d b a c )
 192+ 7E14 C4 6A 41 6F                  dw          ROT, MIN            //      rot min          ( m d a n )
 193+ 7E18 B7 6A 53 69                  dw          DUP, TO_R           //      dup >r           ( m d a n )      \ fh n
 194+ 7E1C 06 6B 67 69                  dw          TWO_SWAP, R_TO      //      2swap r>         ( m a n d n )    \ fh
 195+ 7E20 B6 6C D8 69                  dw          ZERO, DPLUS         //      0 d+             ( m a n d+n )
 196+ 7E24 67 69 2E 67                  dw          R_TO, F_SEEK        //      r> f_seek        ( m a n f )
 197+ 7E28 A9 63 2D 00                  dw          LIT, 45, QERROR     //      45 ?error        ( m a n )
 197+ 7E2C 5F 70
 198+ 7E2E                                                              // else
 199+ 7E2E CC 63                        dw      BRANCH
 200+ 7E30 0C 00                        dw      FGetline_Endif - $
 201+ 7E32              FGetline_Else:
 202+ 7E32 67 69                        dw          R_TO                //      r>              ( m d a fh )
 203+ 7E34 06 6B F8 6A                  dw          TWO_SWAP, TWO_DROP  //      2swap 2drop     ( m a fh )
 204+ 7E38 82 6A B6 6C                  dw          DROP, ZERO          //      drop, 0         ( m a 0 )
 205+ 7E3C              FGetline_Endif:                                 // endif
 206+ 7E3C 53 69 B7 6A                  dw      TO_R, DUP, DUP          // >r dup dup           ( m a a a )
 206+ 7E40 B7 6A
 207+ 7E42 F4 69 AA 6A                  dw      ONE_PLUS, SWAP          // 1+ swap              ( m a a+1 a )
 208+ 7E46 7B 69 11 68                  dw      R_OP, CMOVE             // r cmove              ( m a )
 209+ 7E4A 18 6B CB 69                  dw      TWO_DUP, PLUS           // 2dup +               ( m a m+a )
 210+ 7E4E B6 6C AA 6A                  dw      ZERO, SWAP              // 0 swap
 211+ 7E52 26 6A 57 6B                  dw      CELL_MINUS,  STORE      // cell-  !             ( m a )
 212+ 7E56 7B 69 CB 69                  dw      R_OP, PLUS, ONE_SUBTRACT// r + 1-               ( m a+n1 )
 212+ 7E5A 00 6A
 213+ 7E5C AA 6A 7B 69                  dw      SWAP, R_OP, SUBTRACT    // swap r -             ( a+n+1 m-n )
 213+ 7E60 E8 6E
 214+ 7E62 AF 73                        dw      BLANKS                  // blanks
 215+ 7E64 67 69                        dw      R_TO                    // r>                   ( n )
 216+ 7E66 25 69                        dw      EXIT                    // ;
 217+ 7E68
 218+ 7E68              //  ______________________________________________________________________
 219+ 7E68              //
 220+ 7E68              // f_include    fh --
 221+ 7E68              // Given a filehandle includes the source from file
 222+ 7E68                              Colon_Def F_INCLUDE, "F_INCLUDE", is_normal
 222+ 7E68             >                New_Def  F_INCLUDE, "F_INCLUDE", Enter_Ptr, is_normal ; ok
 222+ 7E68             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 222+ 7E68             >
 222+ 7E68             >                // dummy db directives used to calculate length of namec
 222+ 7E68 46 5F 49 4E >                db      "F_INCLUDE"
 222+ 7E6C 43 4C 55 44 >
 222+ 7E70 45          >
 222+ 7E71             >len_NFA         defl    $ - temp_NFA
 222+ 7E71             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 222+ 7E68             >
 222+ 7E68 89          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 222+ 7E69 46 5F 49 4E >                db      "F_INCLUDE"               // name string in 7-bit ascii, but
 222+ 7E6D 43 4C 55 44 >
 222+ 7E71 45          >
 222+ 7E72             >                org     $-1                 // alter last byte of Name just above to set
 222+ 7E71 C5          >                db      {b $} | END_BIT     // msb as name end
 222+ 7E72             >
 222+ 7E72 CC 7D       >                dw      last_NFA            // Link to previous definition Name
 222+ 7E74             >F_INCLUDE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 222+ 7E74 3B 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 222+ 7E76             >                else
 222+ 7E76 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 222+ 7E76             >                endif           ; ok        // for other definitions it "points" the correct handler
 222+ 7E76             >                // Use of "; ok" to suppress "warning[fwdref]"
 222+ 7E76             >
 222+ 7E76             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 223+ 7E76 B5 6D 4A 6B                  dw      BLK, FETCH, TO_R        // blk @ >r
 223+ 7E7A 53 69
 224+ 7E7C BE 6D 4A 6B                  dw      TO_IN, FETCH, TO_R      // >in @ >r
 224+ 7E80 53 69
 225+ 7E82 6C 6E 4A 6B                  dw      SOURCE_ID, FETCH, TO_R  // source-id @ >r
 225+ 7E86 53 69
 226+ 7E88 7B 69                        dw      R_OP                    // r
 227+ 7E8A                                                              // if
 228+ 7E8A E3 63                        dw      ZBRANCH
 229+ 7E8C 10 00                        dw      FInclude_Else_1 - $
 230+ 7E8E 7B 69 53 67                  dw          R_OP, F_FGETPOS     //      r f_getpos
 231+ 7E92 A9 63 2C 00                  dw          LIT, 44, QERROR     //      44 ?error
 231+ 7E96 5F 70
 232+ 7E98                                                              // else
 233+ 7E98 CC 63                        dw      BRANCH
 234+ 7E9A 06 00                        dw      FInclude_Endif_1 - $
 235+ 7E9C              FInclude_Else_1:
 236+ 7E9C B6 6C B6 6C                  dw          ZERO, ZERO          //      0 0
 237+ 7EA0                                                              // endif
 238+ 7EA0              FInclude_Endif_1:
 239+ 7EA0 53 69 53 69                  dw      TO_R, TO_R              // >r >r
 240+ 7EA4 6C 6E 57 6B                  dw      SOURCE_ID, STORE        // source-id !
 241+ 7EA8              FInclude_Begin:                                 // begin
 242+ 7EA8 BE 6C 42 7D                  dw          ONE, BLOCK, BBUF    //      1 block b/buf
 242+ 7EAC F6 6C
 243+ 7EAE 18 6B AF 73                  dw          TWO_DUP, BLANKS     //      2dup blanks
 244+ 7EB2 AA 6A F4 69                  dw          SWAP, ONE_PLUS      //      swap 1+
 245+ 7EB6 AA 6A 26 6A                  dw          SWAP, CELL_MINUS    //      swap cell-
 246+ 7EBA 6C 6E 4A 6B                  dw          SOURCE_ID, FETCH    //      source-id @
 247+ 7EBE D8 7D                        dw          F_GETLINE           //      f_getline
 248+ 7EC0                                                              // while
 249+ 7EC0 E3 63                        dw      ZBRANCH
 250+ 7EC2 14 00                        dw      FInclude_Repeat - $
 251+ 7EC4 BE 6C B5 6D                  dw          ONE, BLK, STORE     //      1 blk !
 251+ 7EC8 57 6B
 252+ 7ECA B6 6C BE 6D                  dw          ZERO, TO_IN, STORE  //      0 >in !
 252+ 7ECE 57 6B
 253+ 7ED0 87 77                        dw          INTERPRET           //      interpret
 254+ 7ED2 CC 63                        dw      BRANCH
 255+ 7ED4 D4 FF                        dw      FInclude_Begin - $
 256+ 7ED6              FInclude_Repeat:                                // repeat
 257+ 7ED6 6C 6E 4A 6B                  dw      SOURCE_ID, FETCH        // source-id @
 258+ 7EDA B6 6C 6C 6E                  dw      ZERO, SOURCE_ID, STORE  // 0 source-id !
 258+ 7EDE 57 6B
 259+ 7EE0 AF 67                        dw      F_CLOSE                 // f_close
 260+ 7EE2 A9 63 2A 00                  dw      LIT, 42, QERROR         // 42 ?error
 260+ 7EE6 5F 70
 261+ 7EE8 67 69 67 69                  dw      R_TO, R_TO, R_TO        // r> r> r>
 261+ 7EEC 67 69
 262+ 7EEE B7 6A 6C 6E                  dw      DUP, SOURCE_ID, STORE   // dup source-id !
 262+ 7EF2 57 6B
 263+ 7EF4                                                              // if
 264+ 7EF4 E3 63                        dw      ZBRANCH
 265+ 7EF6 12 00                        dw      FInclude_Else_2 - $
 266+ 7EF8 6C 6E 4A 6B                  dw          SOURCE_ID, FETCH    //      source-id @
 267+ 7EFC 2E 67                        dw          F_SEEK              //      f_seek
 268+ 7EFE A9 63 2B 00                  dw          LIT, 43, QERROR     //      43, ?error
 268+ 7F02 5F 70
 269+ 7F04                                                              // else
 270+ 7F04 CC 63                        dw      BRANCH
 271+ 7F06 04 00                        dw      FInclude_Endif_2 - $
 272+ 7F08              FInclude_Else_2:
 273+ 7F08 F8 6A                        dw          TWO_DROP            //      2drop
 274+ 7F0A              FInclude_Endif_2:                               // endif
 275+ 7F0A 67 69 BE 6D                  dw      R_TO, TO_IN, STORE      // r> >in !
 275+ 7F0E 57 6B
 276+ 7F10 67 69 B5 6D                  dw      R_TO, BLK, STORE        // r> blk !
 276+ 7F14 57 6B
 277+ 7F16 25 69                        dw      EXIT                    // ;
 278+ 7F18
 279+ 7F18              //  ______________________________________________________________________
 280+ 7F18              //
 281+ 7F18              // open<         -- fh
 282+ 7F18              // Open the following filename and return it file-handle
 283+ 7F18              // Used in the form OPEN CCCC
 284+ 7F18                              Colon_Def OPEN_FH, "OPEN<", is_normal
 284+ 7F18             >                New_Def  OPEN_FH, "OPEN<", Enter_Ptr, is_normal ; ok
 284+ 7F18             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 284+ 7F18             >
 284+ 7F18             >                // dummy db directives used to calculate length of namec
 284+ 7F18 4F 50 45 4E >                db      "OPEN<"
 284+ 7F1C 3C          >
 284+ 7F1D             >len_NFA         defl    $ - temp_NFA
 284+ 7F1D             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 284+ 7F18             >
 284+ 7F18 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 284+ 7F19 4F 50 45 4E >                db      "OPEN<"               // name string in 7-bit ascii, but
 284+ 7F1D 3C          >
 284+ 7F1E             >                org     $-1                 // alter last byte of Name just above to set
 284+ 7F1D BC          >                db      {b $} | END_BIT     // msb as name end
 284+ 7F1E             >
 284+ 7F1E 68 7E       >                dw      last_NFA            // Link to previous definition Name
 284+ 7F20             >OPEN_FH:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 284+ 7F20 3B 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 284+ 7F22             >                else
 284+ 7F22 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 284+ 7F22             >                endif           ; ok        // for other definitions it "points" the correct handler
 284+ 7F22             >                // Use of "; ok" to suppress "warning[fwdref]"
 284+ 7F22             >
 284+ 7F22             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 285+ 7F22 E0 6C                        dw      BL
 286+ 7F24 E7 73 F9 71                  dw      WORD, COUNT, OVER       // bl word count over
 286+ 7F28 72 6A
 287+ 7F2A CB 69 B6 6C                  dw      PLUS, ZERO, SWAP, STORE // + 0 swap !
 287+ 7F2E AA 6A 57 6B
 288+ 7F32 D4 73 BE 6C                  dw      PAD, ONE, F_OPEN        // pad 1 f_open
 288+ 7F36 C9 67
 289+ 7F38 A9 63 2B 00                  dw      LIT, 43                 // 43
 290+ 7F3C 5F 70                        dw      QERROR                  // ?error
 291+ 7F3E 25 69                        dw      EXIT                    // ;
 292+ 7F40
 293+ 7F40              //  ______________________________________________________________________
 294+ 7F40              //
 295+ 7F40              // include      -- cccc
 296+ 7F40              // Include the following filename
 297+ 7F40                              Colon_Def INCLUDE, "INCLUDE", is_normal
 297+ 7F40             >                New_Def  INCLUDE, "INCLUDE", Enter_Ptr, is_normal ; ok
 297+ 7F40             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 297+ 7F40             >
 297+ 7F40             >                // dummy db directives used to calculate length of namec
 297+ 7F40 49 4E 43 4C >                db      "INCLUDE"
 297+ 7F44 55 44 45    >
 297+ 7F47             >len_NFA         defl    $ - temp_NFA
 297+ 7F47             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 297+ 7F40             >
 297+ 7F40 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 297+ 7F41 49 4E 43 4C >                db      "INCLUDE"               // name string in 7-bit ascii, but
 297+ 7F45 55 44 45    >
 297+ 7F48             >                org     $-1                 // alter last byte of Name just above to set
 297+ 7F47 C5          >                db      {b $} | END_BIT     // msb as name end
 297+ 7F48             >
 297+ 7F48 18 7F       >                dw      last_NFA            // Link to previous definition Name
 297+ 7F4A             >INCLUDE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 297+ 7F4A 3B 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 297+ 7F4C             >                else
 297+ 7F4C ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 297+ 7F4C             >                endif           ; ok        // for other definitions it "points" the correct handler
 297+ 7F4C             >                // Use of "; ok" to suppress "warning[fwdref]"
 297+ 7F4C             >
 297+ 7F4C             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 298+ 7F4C 20 7F                        dw      OPEN_FH                 // open
 299+ 7F4E B7 6A 74 7E                  dw      DUP, F_INCLUDE          // dup f_include
 300+ 7F52 AF 67 82 6A                  dw      F_CLOSE, DROP           // f_close drop
 301+ 7F56 25 69                        dw      EXIT                    // ;
 302+ 7F58
 303+ 7F58              //  ______________________________________________________________________
 304+ 7F58              //
 305+ 7F58              // needs
 306+ 7F58              // check for cccc exists in vocabulary
 307+ 7F58              // if it doesn't then  INCLUDE  inc/cccc.F
 308+ 7F58
 309+ 7F58              // temp filename cccc.f as counted string zero-padded
 310+ 7F58                              New_Def NEEDS_W,   "NEEDS-W", Create_Ptr, is_normal
 310+ 7F58             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 310+ 7F58             >
 310+ 7F58             >                // dummy db directives used to calculate length of namec
 310+ 7F58 4E 45 45 44 >                db      "NEEDS-W"
 310+ 7F5C 53 2D 57    >
 310+ 7F5F             >len_NFA         defl    $ - temp_NFA
 310+ 7F5F             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 310+ 7F58             >
 310+ 7F58 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 310+ 7F59 4E 45 45 44 >                db      "NEEDS-W"               // name string in 7-bit ascii, but
 310+ 7F5D 53 2D 57    >
 310+ 7F60             >                org     $-1                 // alter last byte of Name just above to set
 310+ 7F5F D7          >                db      {b $} | END_BIT     // msb as name end
 310+ 7F60             >
 310+ 7F60 40 7F       >                dw      last_NFA            // Link to previous definition Name
 310+ 7F62             >NEEDS_W:          if Create_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 310+ 7F62 9A 76       >                dw      Create_Ptr ; ok        // for primitive definitions  actual code
 310+ 7F64             >                else
 310+ 7F64 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 310+ 7F64             >                endif           ; ok        // for other definitions it "points" the correct handler
 310+ 7F64             >                // Use of "; ok" to suppress "warning[fwdref]"
 310+ 7F64             >
 310+ 7F64             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 311+ 7F64 00 00 00...                  ds      35                      // 32 + .f + 0x00 = len 35
 312+ 7F87              // temp complete path+filename
 313+ 7F87                              New_Def NEEDS_FN,  "NEEDS-FN", Create_Ptr, is_normal
 313+ 7F87             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 313+ 7F87             >
 313+ 7F87             >                // dummy db directives used to calculate length of namec
 313+ 7F87 4E 45 45 44 >                db      "NEEDS-FN"
 313+ 7F8B 53 2D 46 4E >
 313+ 7F8F             >len_NFA         defl    $ - temp_NFA
 313+ 7F8F             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 313+ 7F87             >
 313+ 7F87 88          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 313+ 7F88 4E 45 45 44 >                db      "NEEDS-FN"               // name string in 7-bit ascii, but
 313+ 7F8C 53 2D 46 4E >
 313+ 7F90             >                org     $-1                 // alter last byte of Name just above to set
 313+ 7F8F CE          >                db      {b $} | END_BIT     // msb as name end
 313+ 7F90             >
 313+ 7F90 58 7F       >                dw      last_NFA            // Link to previous definition Name
 313+ 7F92             >NEEDS_FN:          if Create_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 313+ 7F92 9A 76       >                dw      Create_Ptr ; ok        // for primitive definitions  actual code
 313+ 7F94             >                else
 313+ 7F94 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 313+ 7F94             >                endif           ; ok        // for other definitions it "points" the correct handler
 313+ 7F94             >                // Use of "; ok" to suppress "warning[fwdref]"
 313+ 7F94             >
 313+ 7F94             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 314+ 7F94 00 00 00...                  ds      40
 315+ 7FBC              // constant path
 316+ 7FBC                              New_Def NEEDS_INC,  "NEEDS-INC", Create_Ptr, is_normal
 316+ 7FBC             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 316+ 7FBC             >
 316+ 7FBC             >                // dummy db directives used to calculate length of namec
 316+ 7FBC 4E 45 45 44 >                db      "NEEDS-INC"
 316+ 7FC0 53 2D 49 4E >
 316+ 7FC4 43          >
 316+ 7FC5             >len_NFA         defl    $ - temp_NFA
 316+ 7FC5             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 316+ 7FBC             >
 316+ 7FBC 89          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 316+ 7FBD 4E 45 45 44 >                db      "NEEDS-INC"               // name string in 7-bit ascii, but
 316+ 7FC1 53 2D 49 4E >
 316+ 7FC5 43          >
 316+ 7FC6             >                org     $-1                 // alter last byte of Name just above to set
 316+ 7FC5 C3          >                db      {b $} | END_BIT     // msb as name end
 316+ 7FC6             >
 316+ 7FC6 87 7F       >                dw      last_NFA            // Link to previous definition Name
 316+ 7FC8             >NEEDS_INC:          if Create_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 316+ 7FC8 9A 76       >                dw      Create_Ptr ; ok        // for primitive definitions  actual code
 316+ 7FCA             >                else
 316+ 7FCA ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 316+ 7FCA             >                endif           ; ok        // for other definitions it "points" the correct handler
 316+ 7FCA             >                // Use of "; ok" to suppress "warning[fwdref]"
 316+ 7FCA             >
 316+ 7FCA             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 317+ 7FCA 04 69 6E 63                  db      4, "inc/", 0
 317+ 7FCE 2F 00
 318+ 7FD0                              New_Def NEEDS_LIB,  "NEEDS-LIB", Create_Ptr, is_normal
 318+ 7FD0             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 318+ 7FD0             >
 318+ 7FD0             >                // dummy db directives used to calculate length of namec
 318+ 7FD0 4E 45 45 44 >                db      "NEEDS-LIB"
 318+ 7FD4 53 2D 4C 49 >
 318+ 7FD8 42          >
 318+ 7FD9             >len_NFA         defl    $ - temp_NFA
 318+ 7FD9             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 318+ 7FD0             >
 318+ 7FD0 89          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 318+ 7FD1 4E 45 45 44 >                db      "NEEDS-LIB"               // name string in 7-bit ascii, but
 318+ 7FD5 53 2D 4C 49 >
 318+ 7FD9 42          >
 318+ 7FDA             >                org     $-1                 // alter last byte of Name just above to set
 318+ 7FD9 C2          >                db      {b $} | END_BIT     // msb as name end
 318+ 7FDA             >
 318+ 7FDA BC 7F       >                dw      last_NFA            // Link to previous definition Name
 318+ 7FDC             >NEEDS_LIB:          if Create_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 318+ 7FDC 9A 76       >                dw      Create_Ptr ; ok        // for primitive definitions  actual code
 318+ 7FDE             >                else
 318+ 7FDE ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 318+ 7FDE             >                endif           ; ok        // for other definitions it "points" the correct handler
 318+ 7FDE             >                // Use of "; ok" to suppress "warning[fwdref]"
 318+ 7FDE             >
 318+ 7FDE             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 319+ 7FDE 04 6C 69 62                  db      4, "lib/", 0
 319+ 7FE2 2F 00
 320+ 7FE4
 321+ 7FE4              // Concatenate path at a and filename and include it
 322+ 7FE4              // No error is issued if filename doesn't exist.
 323+ 7FE4                              Colon_Def NEEDS_SLASH, "NEEDS/", is_normal
 323+ 7FE4             >                New_Def  NEEDS_SLASH, "NEEDS/", Enter_Ptr, is_normal ; ok
 323+ 7FE4             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 323+ 7FE4             >
 323+ 7FE4             >                // dummy db directives used to calculate length of namec
 323+ 7FE4 4E 45 45 44 >                db      "NEEDS/"
 323+ 7FE8 53 2F       >
 323+ 7FEA             >len_NFA         defl    $ - temp_NFA
 323+ 7FEA             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 323+ 7FE4             >
 323+ 7FE4 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 323+ 7FE5 4E 45 45 44 >                db      "NEEDS/"               // name string in 7-bit ascii, but
 323+ 7FE9 53 2F       >
 323+ 7FEB             >                org     $-1                 // alter last byte of Name just above to set
 323+ 7FEA AF          >                db      {b $} | END_BIT     // msb as name end
 323+ 7FEB             >
 323+ 7FEB D0 7F       >                dw      last_NFA            // Link to previous definition Name
 323+ 7FED             >NEEDS_SLASH:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 323+ 7FED 3B 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 323+ 7FEF             >                else
 323+ 7FEF ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 323+ 7FEF             >                endif           ; ok        // for other definitions it "points" the correct handler
 323+ 7FEF             >                // Use of "; ok" to suppress "warning[fwdref]"
 323+ 7FEF             >
 323+ 7FEF             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 324+ 7FEF F9 71 9A 6A                  dw      COUNT, TUCK             // n a n
 325+ 7FF3 92 7F AA 6A                  dw      NEEDS_FN, SWAP, CMOVE   // n        \ Path
 325+ 7FF7 11 68
 326+ 7FF9 92 7F CB 69                  dw      NEEDS_FN, PLUS          // a1+n     \ Concat
 327+ 7FFD 62 7F F4 69                  dw      NEEDS_W, ONE_PLUS, SWAP
 327+ 8001 AA 6A
 328+ 8003 A9 63 23 00                  dw      LIT, 35
 329+ 8007 11 68                        dw      CMOVE
 330+ 8009 92 7F                        dw      NEEDS_FN
 331+ 800B D4 73 BE 6C                  dw      PAD, ONE, F_OPEN
 331+ 800F C9 67
 332+ 8011 88 69                        dw      ZEQUAL
 333+ 8013 E3 63                        dw      ZBRANCH
 334+ 8015 08 00                        dw      Needs_1 - $
 335+ 8017 74 7E                        dw          F_INCLUDE
 336+ 8019 CC 63                        dw      BRANCH
 337+ 801B 04 00                        dw      Needs_2 - $
 338+ 801D              Needs_1:
 339+ 801D              //              dw          NEEDS_W, COUNT, TYPE, SPACE
 340+ 801D              //              dw          LIT, 43, MESSAGE
 341+ 801D 82 6A                        dw          DROP
 342+ 801F              Needs_2:
 343+ 801F 25 69                        dw      EXIT                    // ;
 344+ 8021
 345+ 8021
 346+ 8021                              New_Def NCDM,   "NCDM", Create_Ptr, is_normal
 346+ 8021             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 346+ 8021             >
 346+ 8021             >                // dummy db directives used to calculate length of namec
 346+ 8021 4E 43 44 4D >                db      "NCDM"
 346+ 8025             >len_NFA         defl    $ - temp_NFA
 346+ 8025             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 346+ 8021             >
 346+ 8021 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 346+ 8022 4E 43 44 4D >                db      "NCDM"               // name string in 7-bit ascii, but
 346+ 8026             >                org     $-1                 // alter last byte of Name just above to set
 346+ 8025 CD          >                db      {b $} | END_BIT     // msb as name end
 346+ 8026             >
 346+ 8026 E4 7F       >                dw      last_NFA            // Link to previous definition Name
 346+ 8028             >NCDM:          if Create_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 346+ 8028 9A 76       >                dw      Create_Ptr ; ok        // for primitive definitions  actual code
 346+ 802A             >                else
 346+ 802A ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 346+ 802A             >                endif           ; ok        // for other definitions it "points" the correct handler
 346+ 802A             >                // Use of "; ok" to suppress "warning[fwdref]"
 346+ 802A             >
 346+ 802A             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 347+ 802A 25 5E 25 26                  db $25, $5E, $25, $26, $24, $5F, $7B, $7D, $7E
 347+ 802E 24 5F 7B 7D
 347+ 8032 7E
 348+ 8033
 349+ 8033                              New_Def NDOM,   "NDOM", Create_Ptr, is_normal
 349+ 8033             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 349+ 8033             >
 349+ 8033             >                // dummy db directives used to calculate length of namec
 349+ 8033 4E 44 4F 4D >                db      "NDOM"
 349+ 8037             >len_NFA         defl    $ - temp_NFA
 349+ 8037             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 349+ 8033             >
 349+ 8033 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 349+ 8034 4E 44 4F 4D >                db      "NDOM"               // name string in 7-bit ascii, but
 349+ 8038             >                org     $-1                 // alter last byte of Name just above to set
 349+ 8037 CD          >                db      {b $} | END_BIT     // msb as name end
 349+ 8038             >
 349+ 8038 21 80       >                dw      last_NFA            // Link to previous definition Name
 349+ 803A             >NDOM:          if Create_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 349+ 803A 9A 76       >                dw      Create_Ptr ; ok        // for primitive definitions  actual code
 349+ 803C             >                else
 349+ 803C ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 349+ 803C             >                endif           ; ok        // for other definitions it "points" the correct handler
 349+ 803C             >                // Use of "; ok" to suppress "warning[fwdref]"
 349+ 803C             >
 349+ 803C             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 350+ 803C 3A 3F 2F 2A                  db $3A, $3F, $2F, $2A, $7C, $5C, $3C, $3E, $22
 350+ 8040 7C 5C 3C 3E
 350+ 8044 22
 351+ 8045
 352+ 8045
 353+ 8045              // Replace illegal character in filename using the map here above
 354+ 8045              // at the moment we need only  "
 355+ 8045                              Colon_Def NEEDS_CHECK, "NEEDS-CH", is_normal
 355+ 8045             >                New_Def  NEEDS_CHECK, "NEEDS-CH", Enter_Ptr, is_normal ; ok
 355+ 8045             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 355+ 8045             >
 355+ 8045             >                // dummy db directives used to calculate length of namec
 355+ 8045 4E 45 45 44 >                db      "NEEDS-CH"
 355+ 8049 53 2D 43 48 >
 355+ 804D             >len_NFA         defl    $ - temp_NFA
 355+ 804D             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 355+ 8045             >
 355+ 8045 88          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 355+ 8046 4E 45 45 44 >                db      "NEEDS-CH"               // name string in 7-bit ascii, but
 355+ 804A 53 2D 43 48 >
 355+ 804E             >                org     $-1                 // alter last byte of Name just above to set
 355+ 804D C8          >                db      {b $} | END_BIT     // msb as name end
 355+ 804E             >
 355+ 804E 33 80       >                dw      last_NFA            // Link to previous definition Name
 355+ 8050             >NEEDS_CHECK:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 355+ 8050 3B 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 355+ 8052             >                else
 355+ 8052 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 355+ 8052             >                endif           ; ok        // for other definitions it "points" the correct handler
 355+ 8052             >                // Use of "; ok" to suppress "warning[fwdref]"
 355+ 8052             >
 355+ 8052             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 356+ 8052 F9 71 0E 72                  dw      COUNT, BOUNDS
 357+ 8056 6B 64                        dw      C_DO
 358+ 8058              Needs_3:
 359+ 8058 28 80 3A 80                  dw          NCDM, NDOM, LIT, 9
 359+ 805C A9 63 09 00
 360+ 8060 76 64 65 6B                  dw          I, CFETCH
 361+ 8064 90 65                        dw          C_MAP
 362+ 8066 76 64 73 6B                  dw          I, CSTORE
 363+ 806A              Needs_4:
 364+ 806A F8 63                        dw      C_LOOP
 365+ 806C EC FF                        dw      Needs_3 - $
 366+ 806E 25 69                        dw      EXIT
 367+ 8070
 368+ 8070
 369+ 8070              // include  "path/cccc.f" if cccc is not defined
 370+ 8070              // filename cccc.f is temporary stored at NEEDS-W
 371+ 8070                              Colon_Def NEEDS_PATH, "NEEDS-F", is_normal
 371+ 8070             >                New_Def  NEEDS_PATH, "NEEDS-F", Enter_Ptr, is_normal ; ok
 371+ 8070             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 371+ 8070             >
 371+ 8070             >                // dummy db directives used to calculate length of namec
 371+ 8070 4E 45 45 44 >                db      "NEEDS-F"
 371+ 8074 53 2D 46    >
 371+ 8077             >len_NFA         defl    $ - temp_NFA
 371+ 8077             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 371+ 8070             >
 371+ 8070 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 371+ 8071 4E 45 45 44 >                db      "NEEDS-F"               // name string in 7-bit ascii, but
 371+ 8075 53 2D 46    >
 371+ 8078             >                org     $-1                 // alter last byte of Name just above to set
 371+ 8077 C6          >                db      {b $} | END_BIT     // msb as name end
 371+ 8078             >
 371+ 8078 45 80       >                dw      last_NFA            // Link to previous definition Name
 371+ 807A             >NEEDS_PATH:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 371+ 807A 3B 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 371+ 807C             >                else
 371+ 807C ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 371+ 807C             >                endif           ; ok        // for other definitions it "points" the correct handler
 371+ 807C             >                // Use of "; ok" to suppress "warning[fwdref]"
 371+ 807C             >
 371+ 807C             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 372+ 807C 99 75                        dw      LFIND
 373+ 807E E3 63                        dw      ZBRANCH
 374+ 8080 0A 00                        dw      Needs_5 - $
 375+ 8082
 376+ 8082 82 6A F8 6A                  dw          DROP, TWO_DROP
 377+ 8086 CC 63                        dw      BRANCH
 378+ 8088 2C 00                        dw      Needs_6 - $
 379+ 808A              Needs_5:
 380+ 808A 62 7F                        dw          NEEDS_W
 381+ 808C A9 63 23 00                  dw          LIT, 35
 382+ 8090 9E 73                        dw          ERASE                   // a
 383+ 8092 95 6E 65 6B                  dw          HERE, CFETCH, ONE_PLUS  // a n
 383+ 8096 F4 69
 384+ 8098 95 6E 72 6A                  dw          HERE, OVER              // a n here n
 385+ 809C 62 7F AA 6A                  dw          NEEDS_W, SWAP, CMOVE    // a n
 385+ 80A0 11 68
 386+ 80A2 62 7F 50 80                  dw          NEEDS_W, NEEDS_CHECK
 387+ 80A6 62 7F CB 69                  dw          NEEDS_W, PLUS           // a a1+1
 388+ 80AA A9 63 2E 66                  dw          LIT, $662E              // a a1+1 ".F"
 389+ 80AE AA 6A 57 6B                  dw          SWAP, STORE             // a
 390+ 80B2 ED 7F                        dw          NEEDS_SLASH
 391+ 80B4              Needs_6:
 392+ 80B4 25 69                        dw      EXIT
 393+ 80B6
 394+ 80B6
 395+ 80B6              // check for cccc exists in vocabulary
 396+ 80B6              // if it doesn't then  INCLUDE  inc/cccc.F
 397+ 80B6              // search in inc subdirectory
 398+ 80B6                              Colon_Def NEEDS, "NEEDS", is_normal
 398+ 80B6             >                New_Def  NEEDS, "NEEDS", Enter_Ptr, is_normal ; ok
 398+ 80B6             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 398+ 80B6             >
 398+ 80B6             >                // dummy db directives used to calculate length of namec
 398+ 80B6 4E 45 45 44 >                db      "NEEDS"
 398+ 80BA 53          >
 398+ 80BB             >len_NFA         defl    $ - temp_NFA
 398+ 80BB             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 398+ 80B6             >
 398+ 80B6 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 398+ 80B7 4E 45 45 44 >                db      "NEEDS"               // name string in 7-bit ascii, but
 398+ 80BB 53          >
 398+ 80BC             >                org     $-1                 // alter last byte of Name just above to set
 398+ 80BB D3          >                db      {b $} | END_BIT     // msb as name end
 398+ 80BC             >
 398+ 80BC 70 80       >                dw      last_NFA            // Link to previous definition Name
 398+ 80BE             >NEEDS:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 398+ 80BE 3B 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 398+ 80C0             >                else
 398+ 80C0 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 398+ 80C0             >                endif           ; ok        // for other definitions it "points" the correct handler
 398+ 80C0             >                // Use of "; ok" to suppress "warning[fwdref]"
 398+ 80C0             >
 398+ 80C0             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 399+ 80C0 BE 6D 4A 6B                  dw      TO_IN, FETCH
 400+ 80C4 B7 6A                        dw      DUP
 401+ 80C6 C8 7F 7A 80                  dw      NEEDS_INC, NEEDS_PATH
 402+ 80CA BE 6D 57 6B                  dw      TO_IN, STORE
 403+ 80CE DC 7F 7A 80                  dw      NEEDS_LIB, NEEDS_PATH
 404+ 80D2 BE 6D 57 6B                  dw      TO_IN, STORE
 405+ 80D6 99 75                        dw      LFIND
 406+ 80D8 E3 63                        dw      ZBRANCH
 407+ 80DA 08 00                        dw      Needs_10 - $
 408+ 80DC F8 6A                        dw          TWO_DROP
 409+ 80DE CC 63                        dw      BRANCH
 410+ 80E0 10 00                        dw      Needs_11 - $
 411+ 80E2              Needs_10:
 412+ 80E2 62 7F F9 71                  dw      NEEDS_W, COUNT, TYPE, SPACE
 412+ 80E6 1F 72 A5 6F
 413+ 80EA A9 63 2B 00                  dw      LIT, 43, MESSAGE
 413+ 80EE 6D 7A
 414+ 80F0              Needs_11:
 415+ 80F0 25 69                        dw      EXIT
 416+ 80F2
 417+ 80F2
 418+ 80F2              //  ______________________________________________________________________
 419+ 80F2              //
 420+ 80F2              // load+        n --
 421+ 80F2                              Colon_Def LOAD_P, "LOAD+", is_normal
 421+ 80F2             >                New_Def  LOAD_P, "LOAD+", Enter_Ptr, is_normal ; ok
 421+ 80F2             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 421+ 80F2             >
 421+ 80F2             >                // dummy db directives used to calculate length of namec
 421+ 80F2 4C 4F 41 44 >                db      "LOAD+"
 421+ 80F6 2B          >
 421+ 80F7             >len_NFA         defl    $ - temp_NFA
 421+ 80F7             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 421+ 80F2             >
 421+ 80F2 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 421+ 80F3 4C 4F 41 44 >                db      "LOAD+"               // name string in 7-bit ascii, but
 421+ 80F7 2B          >
 421+ 80F8             >                org     $-1                 // alter last byte of Name just above to set
 421+ 80F7 AB          >                db      {b $} | END_BIT     // msb as name end
 421+ 80F8             >
 421+ 80F8 B6 80       >                dw      last_NFA            // Link to previous definition Name
 421+ 80FA             >LOAD_P:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 421+ 80FA 3B 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 421+ 80FC             >                else
 421+ 80FC ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 421+ 80FC             >                endif           ; ok        // for other definitions it "points" the correct handler
 421+ 80FC             >                // Use of "; ok" to suppress "warning[fwdref]"
 421+ 80FC             >
 421+ 80FC             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 422+ 80FC B5 6D 4A 6B                  dw      BLK, FETCH, TO_R        // blk @ >r
 422+ 8100 53 69
 423+ 8102 BE 6D 4A 6B                  dw      TO_IN, FETCH, TO_R      // >in @ >r
 423+ 8106 53 69
 424+ 8108
 425+ 8108 B6 6C BE 6D                  dw      ZERO, TO_IN, STORE      // 0 >in !
 425+ 810C 57 6B
 426+ 810E 02 6D D4 79                  dw      BSCR, MUL, BLK, STORE   // b/scr * blk !
 426+ 8112 B5 6D 57 6B
 427+ 8116 87 77                        dw      INTERPRET               // interpret
 428+ 8118
 429+ 8118 67 69 BE 6D                  dw      R_TO, TO_IN, STORE      // r> >in !
 429+ 811C 57 6B
 430+ 811E 67 69 B5 6D                  dw      R_TO, BLK, STORE        // r> blk !
 430+ 8122 57 6B
 431+ 8124 25 69                        dw      EXIT                    // ;
 432+ 8126
 433+ 8126              //  ______________________________________________________________________
 434+ 8126              //
 435+ 8126              // -->          --
 436+ 8126                              Colon_Def LOAD_NEXT, "-->", is_immediate
 436+ 8126             >                New_Def  LOAD_NEXT, "-->", Enter_Ptr, is_immediate ; ok
 436+ 8126             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 436+ 8126             >
 436+ 8126             >                // dummy db directives used to calculate length of namec
 436+ 8126 2D 2D 3E    >                db      "-->"
 436+ 8129             >len_NFA         defl    $ - temp_NFA
 436+ 8129             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 436+ 8126             >
 436+ 8126 C3          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 436+ 8127 2D 2D 3E    >                db      "-->"               // name string in 7-bit ascii, but
 436+ 812A             >                org     $-1                 // alter last byte of Name just above to set
 436+ 8129 BE          >                db      {b $} | END_BIT     // msb as name end
 436+ 812A             >
 436+ 812A F2 80       >                dw      last_NFA            // Link to previous definition Name
 436+ 812C             >LOAD_NEXT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 436+ 812C 3B 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 436+ 812E             >                else
 436+ 812E ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 436+ 812E             >                endif           ; ok        // for other definitions it "points" the correct handler
 436+ 812E             >                // Use of "; ok" to suppress "warning[fwdref]"
 436+ 812E             >
 436+ 812E             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 437+ 812E D8 70                        dw      QLOADING                // ?loading
 438+ 8130 B6 6C BE 6D                  dw      ZERO, TO_IN, STORE      // 0 >in !
 438+ 8134 57 6B
 439+ 8136 02 6D                        dw      BSCR                    // b/scr
 440+ 8138 B5 6D 4A 6B                  dw      BLK, FETCH              // blk @
 441+ 813C 72 6A                        dw      OVER                    // over
 442+ 813E 01 7A                        dw      MOD                     // mod
 443+ 8140 E8 6E                        dw      SUBTRACT                // -
 444+ 8142 B5 6D 27 6B                  dw      BLK, PLUSSTORE          // +!
 445+ 8146 25 69                        dw      EXIT                    // ;
 446+ 8148
 447+ 8148              //  ______________________________________________________________________
 448+ 8148              //
 449+ 8148              // '            -- xt
 450+ 8148                              Colon_Def TICK, "'", is_normal
 450+ 8148             >                New_Def  TICK, "'", Enter_Ptr, is_normal ; ok
 450+ 8148             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 450+ 8148             >
 450+ 8148             >                // dummy db directives used to calculate length of namec
 450+ 8148 27          >                db      "'"
 450+ 8149             >len_NFA         defl    $ - temp_NFA
 450+ 8149             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 450+ 8148             >
 450+ 8148 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 450+ 8149 27          >                db      "'"               // name string in 7-bit ascii, but
 450+ 814A             >                org     $-1                 // alter last byte of Name just above to set
 450+ 8149 A7          >                db      {b $} | END_BIT     // msb as name end
 450+ 814A             >
 450+ 814A 26 81       >                dw      last_NFA            // Link to previous definition Name
 450+ 814C             >TICK:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 450+ 814C 3B 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 450+ 814E             >                else
 450+ 814E ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 450+ 814E             >                endif           ; ok        // for other definitions it "points" the correct handler
 450+ 814E             >                // Use of "; ok" to suppress "warning[fwdref]"
 450+ 814E             >
 450+ 814E             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 451+ 814E 99 75                        dw      LFIND                   // -find
 452+ 8150 88 69                        dw      ZEQUAL                  // 0=
 453+ 8152 B6 6C 5F 70                  dw      ZERO, QERROR            // 0 ?error
 454+ 8156 82 6A                        dw      DROP                    // drop
 455+ 8158 25 69                        dw      EXIT                    // ;
 456+ 815A
 457+ 815A              //  ______________________________________________________________________
 458+ 815A              //
 459+ 815A              // forget       -- cccc
 460+ 815A                              Colon_Def FORGET, "FORGET", is_normal
 460+ 815A             >                New_Def  FORGET, "FORGET", Enter_Ptr, is_normal ; ok
 460+ 815A             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 460+ 815A             >
 460+ 815A             >                // dummy db directives used to calculate length of namec
 460+ 815A 46 4F 52 47 >                db      "FORGET"
 460+ 815E 45 54       >
 460+ 8160             >len_NFA         defl    $ - temp_NFA
 460+ 8160             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 460+ 815A             >
 460+ 815A 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 460+ 815B 46 4F 52 47 >                db      "FORGET"               // name string in 7-bit ascii, but
 460+ 815F 45 54       >
 460+ 8161             >                org     $-1                 // alter last byte of Name just above to set
 460+ 8160 D4          >                db      {b $} | END_BIT     // msb as name end
 460+ 8161             >
 460+ 8161 48 81       >                dw      last_NFA            // Link to previous definition Name
 460+ 8163             >FORGET:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 460+ 8163 3B 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 460+ 8165             >                else
 460+ 8165 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 460+ 8165             >                endif           ; ok        // for other definitions it "points" the correct handler
 460+ 8165             >                // Use of "; ok" to suppress "warning[fwdref]"
 460+ 8165             >
 460+ 8165             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 461+ 8165 F6 6D 4A 6B                  dw      CURRENT, FETCH          // current @
 462+ 8169 E9 6D 4A 6B                  dw      CONTEXT, FETCH          // context @
 463+ 816D E8 6E A9 63                  dw      SUBTRACT, LIT, 23, QERROR // - 23 ?error
 463+ 8171 17 00 5F 70
 464+ 8175 4C 81 2F 70                  dw      TICK, TO_BODY           // ' >body
 465+ 8179 B7 6A 6C 6D                  dw      DUP, FENCE, FETCH       // dup fence @
 465+ 817D 4A 6B
 466+ 817F 03 6F A9 63                  dw      ULESS, LIT, 21, QERROR  // u< 21 ?error
 466+ 8183 15 00 5F 70
 467+ 8187 B7 6A 05 70                  dw      DUP, NFA, DP, STORE     // dup nfa dp !
 467+ 818B 74 6D 57 6B
 468+ 818F EB 6F 4A 6B                  dw      LFA, FETCH              // lfa @
 469+ 8193 E9 6D 4A 6B                  dw      CONTEXT, FETCH, STORE   // context @ !
 469+ 8197 57 6B
 470+ 8199 25 69                        dw      EXIT                    // ;
 471+ 819B
 472+ 819B              //  ______________________________________________________________________
 473+ 819B              //
 474+ 819B              // marker       -- cccc
 475+ 819B                              Colon_Def MARKER, "MARKER", is_immediate
 475+ 819B             >                New_Def  MARKER, "MARKER", Enter_Ptr, is_immediate ; ok
 475+ 819B             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 475+ 819B             >
 475+ 819B             >                // dummy db directives used to calculate length of namec
 475+ 819B 4D 41 52 4B >                db      "MARKER"
 475+ 819F 45 52       >
 475+ 81A1             >len_NFA         defl    $ - temp_NFA
 475+ 81A1             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 475+ 819B             >
 475+ 819B C6          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 475+ 819C 4D 41 52 4B >                db      "MARKER"               // name string in 7-bit ascii, but
 475+ 81A0 45 52       >
 475+ 81A2             >                org     $-1                 // alter last byte of Name just above to set
 475+ 81A1 D2          >                db      {b $} | END_BIT     // msb as name end
 475+ 81A2             >
 475+ 81A2 5A 81       >                dw      last_NFA            // Link to previous definition Name
 475+ 81A4             >MARKER:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 475+ 81A4 3B 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 475+ 81A6             >                else
 475+ 81A6 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 475+ 81A6             >                endif           ; ok        // for other definitions it "points" the correct handler
 475+ 81A6             >                // Use of "; ok" to suppress "warning[fwdref]"
 475+ 81A6             >
 475+ 81A6             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 476+ 81A6 C2 71                        dw      CBUILDS
 477+ 81A8 82 6D 4A 6B                  dw      VOC_LINK, FETCH, COMMA
 477+ 81AC B1 6E
 478+ 81AE F6 6D 4A 6B                  dw      CURRENT, FETCH, COMMA
 478+ 81B2 B1 6E
 479+ 81B4 E9 6D 4A 6B                  dw      CONTEXT, FETCH, COMMA
 479+ 81B8 B1 6E
 480+ 81BA DB 6F B1 6E                  dw      LATEST, COMMA
 481+ 81BE DB 6F 19 70                  dw      LATEST, PFA, LFA, FETCH, COMMA
 481+ 81C2 EB 6F 4A 6B
 481+ 81C6 B1 6E
 482+ 81C8 D2 71                        dw      DOES_TO
 483+ 81CA B7 6A 4A 6B                  dw      DUP, FETCH, VOC_LINK, STORE, CELL_PLUS
 483+ 81CE 82 6D 57 6B
 483+ 81D2 1C 6A
 484+ 81D4 B7 6A 4A 6B                  dw      DUP, FETCH, CURRENT, STORE, CELL_PLUS
 484+ 81D8 F6 6D 57 6B
 484+ 81DC 1C 6A
 485+ 81DE B7 6A 4A 6B                  dw      DUP, FETCH, CONTEXT, STORE, CELL_PLUS
 485+ 81E2 E9 6D 57 6B
 485+ 81E6 1C 6A
 486+ 81E8 B7 6A 4A 6B                  dw      DUP, FETCH, DP, STORE, CELL_PLUS
 486+ 81EC 74 6D 57 6B
 486+ 81F0 1C 6A
 487+ 81F2 4A 6B F6 6D                  dw           FETCH, CURRENT, FETCH, STORE
 487+ 81F6 4A 6B 57 6B
 488+ 81FA 25 69                        dw      EXIT
 489+ 81FC
 490+ 81FC              //  ______________________________________________________________________
 491+ 81FC              //
 492+ 81FC              // spaces       n --
 493+ 81FC                              Colon_Def SPACES, "SPACES", is_normal
 493+ 81FC             >                New_Def  SPACES, "SPACES", Enter_Ptr, is_normal ; ok
 493+ 81FC             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 493+ 81FC             >
 493+ 81FC             >                // dummy db directives used to calculate length of namec
 493+ 81FC 53 50 41 43 >                db      "SPACES"
 493+ 8200 45 53       >
 493+ 8202             >len_NFA         defl    $ - temp_NFA
 493+ 8202             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 493+ 81FC             >
 493+ 81FC 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 493+ 81FD 53 50 41 43 >                db      "SPACES"               // name string in 7-bit ascii, but
 493+ 8201 45 53       >
 493+ 8203             >                org     $-1                 // alter last byte of Name just above to set
 493+ 8202 D3          >                db      {b $} | END_BIT     // msb as name end
 493+ 8203             >
 493+ 8203 9B 81       >                dw      last_NFA            // Link to previous definition Name
 493+ 8205             >SPACES:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 493+ 8205 3B 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 493+ 8207             >                else
 493+ 8207 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 493+ 8207             >                endif           ; ok        // for other definitions it "points" the correct handler
 493+ 8207             >                // Use of "; ok" to suppress "warning[fwdref]"
 493+ 8207             >
 493+ 8207             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 494+ 8207 B6 6C 57 6F                  dw      ZERO, MAX
 495+ 820B B6 6C 3D 64                  dw      ZERO, C_Q_DO
 496+ 820F 08 00                        dw      Spaces_Leave - $
 497+ 8211              Spaces_Loop:
 498+ 8211 A5 6F                        dw          SPACE
 499+ 8213 F8 63                        dw      C_LOOP
 500+ 8215 FC FF                        dw      Spaces_Loop - $
 501+ 8217              Spaces_Leave:
 502+ 8217 25 69                        dw      EXIT                    // ;
 503+ 8219
 504+ 8219              //  ______________________________________________________________________
 505+ 8219              //
 506+ 8219              // <#           --
 507+ 8219                              Colon_Def BEGIN_DASH, "<#", is_normal
 507+ 8219             >                New_Def  BEGIN_DASH, "<#", Enter_Ptr, is_normal ; ok
 507+ 8219             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 507+ 8219             >
 507+ 8219             >                // dummy db directives used to calculate length of namec
 507+ 8219 3C 23       >                db      "<#"
 507+ 821B             >len_NFA         defl    $ - temp_NFA
 507+ 821B             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 507+ 8219             >
 507+ 8219 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 507+ 821A 3C 23       >                db      "<#"               // name string in 7-bit ascii, but
 507+ 821C             >                org     $-1                 // alter last byte of Name just above to set
 507+ 821B A3          >                db      {b $} | END_BIT     // msb as name end
 507+ 821C             >
 507+ 821C FC 81       >                dw      last_NFA            // Link to previous definition Name
 507+ 821E             >BEGIN_DASH:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 507+ 821E 3B 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 507+ 8220             >                else
 507+ 8220 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 507+ 8220             >                endif           ; ok        // for other definitions it "points" the correct handler
 507+ 8220             >                // Use of "; ok" to suppress "warning[fwdref]"
 507+ 8220             >
 507+ 8220             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 508+ 8220 D4 73 37 6E                  dw      PAD, HLD, STORE
 508+ 8224 57 6B
 509+ 8226 25 69                        dw      EXIT
 510+ 8228
 511+ 8228              //  ______________________________________________________________________
 512+ 8228              //
 513+ 8228              // #>           --
 514+ 8228                              Colon_Def DASH_END, "#>", is_normal
 514+ 8228             >                New_Def  DASH_END, "#>", Enter_Ptr, is_normal ; ok
 514+ 8228             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 514+ 8228             >
 514+ 8228             >                // dummy db directives used to calculate length of namec
 514+ 8228 23 3E       >                db      "#>"
 514+ 822A             >len_NFA         defl    $ - temp_NFA
 514+ 822A             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 514+ 8228             >
 514+ 8228 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 514+ 8229 23 3E       >                db      "#>"               // name string in 7-bit ascii, but
 514+ 822B             >                org     $-1                 // alter last byte of Name just above to set
 514+ 822A BE          >                db      {b $} | END_BIT     // msb as name end
 514+ 822B             >
 514+ 822B 19 82       >                dw      last_NFA            // Link to previous definition Name
 514+ 822D             >DASH_END:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 514+ 822D 3B 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 514+ 822F             >                else
 514+ 822F ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 514+ 822F             >                endif           ; ok        // for other definitions it "points" the correct handler
 514+ 822F             >                // Use of "; ok" to suppress "warning[fwdref]"
 514+ 822F             >
 514+ 822F             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 515+ 822F F8 6A                        dw      TWO_DROP
 516+ 8231 37 6E 4A 6B                  dw      HLD, FETCH, PAD, OVER, SUBTRACT
 516+ 8235 D4 73 72 6A
 516+ 8239 E8 6E
 517+ 823B 25 69                        dw      EXIT
 518+ 823D
 519+ 823D              //  ______________________________________________________________________
 520+ 823D              //
 521+ 823D              // sign         n d -- d
 522+ 823D                              Colon_Def SIGN, "SIGN", is_normal
 522+ 823D             >                New_Def  SIGN, "SIGN", Enter_Ptr, is_normal ; ok
 522+ 823D             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 522+ 823D             >
 522+ 823D             >                // dummy db directives used to calculate length of namec
 522+ 823D 53 49 47 4E >                db      "SIGN"
 522+ 8241             >len_NFA         defl    $ - temp_NFA
 522+ 8241             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 522+ 823D             >
 522+ 823D 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 522+ 823E 53 49 47 4E >                db      "SIGN"               // name string in 7-bit ascii, but
 522+ 8242             >                org     $-1                 // alter last byte of Name just above to set
 522+ 8241 CE          >                db      {b $} | END_BIT     // msb as name end
 522+ 8242             >
 522+ 8242 28 82       >                dw      last_NFA            // Link to previous definition Name
 522+ 8244             >SIGN:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 522+ 8244 3B 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 522+ 8246             >                else
 522+ 8246 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 522+ 8246             >                endif           ; ok        // for other definitions it "points" the correct handler
 522+ 8246             >                // Use of "; ok" to suppress "warning[fwdref]"
 522+ 8246             >
 522+ 8246             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 523+ 8246 C4 6A A3 69                  dw      ROT, ZLESS
 524+ 824A E3 63                        dw      ZBRANCH
 525+ 824C 08 00                        dw      Sign_Endif - $
 526+ 824E A9 63 2D 00                  dw          LIT, 45, HOLD
 526+ 8252 BE 73
 527+ 8254              Sign_Endif:
 528+ 8254 25 69                        dw      EXIT
 529+ 8256
 530+ 8256              //  ______________________________________________________________________
 531+ 8256              //
 532+ 8256              // #           d1 -- d2
 533+ 8256                              Colon_Def DASH, "#", is_normal
 533+ 8256             >                New_Def  DASH, "#", Enter_Ptr, is_normal ; ok
 533+ 8256             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 533+ 8256             >
 533+ 8256             >                // dummy db directives used to calculate length of namec
 533+ 8256 23          >                db      "#"
 533+ 8257             >len_NFA         defl    $ - temp_NFA
 533+ 8257             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 533+ 8256             >
 533+ 8256 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 533+ 8257 23          >                db      "#"               // name string in 7-bit ascii, but
 533+ 8258             >                org     $-1                 // alter last byte of Name just above to set
 533+ 8257 A3          >                db      {b $} | END_BIT     // msb as name end
 533+ 8258             >
 533+ 8258 3D 82       >                dw      last_NFA            // Link to previous definition Name
 533+ 825A             >DASH:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 533+ 825A 3B 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 533+ 825C             >                else
 533+ 825C ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 533+ 825C             >                endif           ; ok        // for other definitions it "points" the correct handler
 533+ 825C             >                // Use of "; ok" to suppress "warning[fwdref]"
 533+ 825C             >
 533+ 825C             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 534+ 825C 0B 6E 4A 6B                  dw      BASE, FETCH
 535+ 8260
 536+ 8260 53 69                        dw      TO_R                    // >r           ( ud1 )
 537+ 8262 B6 6C 7B 69                  dw      ZERO, R_OP, UMDIVMOD    // 0 r um/mod   ( l rem1 h/r )
 537+ 8266 77 68
 538+ 8268 67 69 AA 6A                  dw      R_TO, SWAP, TO_R        // r> swap >r   ( l rem )
 538+ 826C 53 69
 539+ 826E 77 68                        dw      UMDIVMOD                // um/mod       ( rem2 l/r )
 540+ 8270 67 69                        dw      R_TO                    // r>           ( rem2 l/r h/r )
 541+ 8272
 542+ 8272 C4 6A                        dw      ROT
 543+ 8274 A9 63 09 00                  dw      LIT, 9, OVER, LESS
 543+ 8278 72 6A 17 6F
 544+ 827C E3 63                        dw      ZBRANCH
 545+ 827E 08 00                        dw      Dash_Endif - $
 546+ 8280 A9 63 07 00                  dw          LIT, 7, PLUS
 546+ 8284 CB 69
 547+ 8286              Dash_Endif:
 548+ 8286
 549+ 8286 A9 63 30 00                  dw      LIT, 48, PLUS, HOLD
 549+ 828A CB 69 BE 73
 550+ 828E 25 69                        dw      EXIT
 551+ 8290
 552+ 8290              //  ______________________________________________________________________
 553+ 8290              //
 554+ 8290              // #s           d1 -- d2
 555+ 8290                              Colon_Def DASHES, "#S", is_normal
 555+ 8290             >                New_Def  DASHES, "#S", Enter_Ptr, is_normal ; ok
 555+ 8290             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 555+ 8290             >
 555+ 8290             >                // dummy db directives used to calculate length of namec
 555+ 8290 23 53       >                db      "#S"
 555+ 8292             >len_NFA         defl    $ - temp_NFA
 555+ 8292             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 555+ 8290             >
 555+ 8290 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 555+ 8291 23 53       >                db      "#S"               // name string in 7-bit ascii, but
 555+ 8293             >                org     $-1                 // alter last byte of Name just above to set
 555+ 8292 D3          >                db      {b $} | END_BIT     // msb as name end
 555+ 8293             >
 555+ 8293 56 82       >                dw      last_NFA            // Link to previous definition Name
 555+ 8295             >DASHES:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 555+ 8295 3B 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 555+ 8297             >                else
 555+ 8297 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 555+ 8297             >                endif           ; ok        // for other definitions it "points" the correct handler
 555+ 8297             >                // Use of "; ok" to suppress "warning[fwdref]"
 555+ 8297             >
 555+ 8297             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 556+ 8297              Dashes_Begin:
 557+ 8297 5A 82 18 6B                  dw      DASH, TWO_DUP
 558+ 829B C7 68 88 69                  dw          OR_OP, ZEQUAL
 559+ 829F E3 63                        dw      ZBRANCH
 560+ 82A1 F6 FF                        dw      Dashes_Begin - $
 561+ 82A3 25 69                        dw      EXIT
 562+ 82A5
 563+ 82A5              //  ______________________________________________________________________
 564+ 82A5              //
 565+ 82A5              // d.r          d n --
 566+ 82A5                              Colon_Def D_DOT_R, "D.R", is_normal
 566+ 82A5             >                New_Def  D_DOT_R, "D.R", Enter_Ptr, is_normal ; ok
 566+ 82A5             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 566+ 82A5             >
 566+ 82A5             >                // dummy db directives used to calculate length of namec
 566+ 82A5 44 2E 52    >                db      "D.R"
 566+ 82A8             >len_NFA         defl    $ - temp_NFA
 566+ 82A8             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 566+ 82A5             >
 566+ 82A5 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 566+ 82A6 44 2E 52    >                db      "D.R"               // name string in 7-bit ascii, but
 566+ 82A9             >                org     $-1                 // alter last byte of Name just above to set
 566+ 82A8 D2          >                db      {b $} | END_BIT     // msb as name end
 566+ 82A9             >
 566+ 82A9 90 82       >                dw      last_NFA            // Link to previous definition Name
 566+ 82AB             >D_DOT_R:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 566+ 82AB 3B 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 566+ 82AD             >                else
 566+ 82AD ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 566+ 82AD             >                endif           ; ok        // for other definitions it "points" the correct handler
 566+ 82AD             >                // Use of "; ok" to suppress "warning[fwdref]"
 566+ 82AD             >
 566+ 82AD             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 567+ 82AD 53 69                        dw      TO_R
 568+ 82AF 9A 6A 76 79                  dw      TUCK, DABS
 569+ 82B3 1E 82 95 82                  dw      BEGIN_DASH, DASHES, SIGN, DASH_END
 569+ 82B7 44 82 2D 82
 570+ 82BB 67 69                        dw      R_TO
 571+ 82BD 72 6A E8 6E                  dw      OVER, SUBTRACT, SPACES, TYPE
 571+ 82C1 05 82 1F 72
 572+ 82C5 25 69                        dw      EXIT
 573+ 82C7
 574+ 82C7              //  ______________________________________________________________________
 575+ 82C7              //
 576+ 82C7              // .r           n1 n2 --
 577+ 82C7                              Colon_Def DOT_R, ".R", is_normal
 577+ 82C7             >                New_Def  DOT_R, ".R", Enter_Ptr, is_normal ; ok
 577+ 82C7             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 577+ 82C7             >
 577+ 82C7             >                // dummy db directives used to calculate length of namec
 577+ 82C7 2E 52       >                db      ".R"
 577+ 82C9             >len_NFA         defl    $ - temp_NFA
 577+ 82C9             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 577+ 82C7             >
 577+ 82C7 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 577+ 82C8 2E 52       >                db      ".R"               // name string in 7-bit ascii, but
 577+ 82CA             >                org     $-1                 // alter last byte of Name just above to set
 577+ 82C9 D2          >                db      {b $} | END_BIT     // msb as name end
 577+ 82CA             >
 577+ 82CA A5 82       >                dw      last_NFA            // Link to previous definition Name
 577+ 82CC             >DOT_R:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 577+ 82CC 3B 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 577+ 82CE             >                else
 577+ 82CE ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 577+ 82CE             >                endif           ; ok        // for other definitions it "points" the correct handler
 577+ 82CE             >                // Use of "; ok" to suppress "warning[fwdref]"
 577+ 82CE             >
 577+ 82CE             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 578+ 82CE 53 69                        dw      TO_R
 579+ 82D0 D4 6E 67 69                  dw      S_TO_D, R_TO
 580+ 82D4 AB 82                        dw      D_DOT_R
 581+ 82D6 25 69                        dw      EXIT
 582+ 82D8
 583+ 82D8              //  ______________________________________________________________________
 584+ 82D8              //
 585+ 82D8              // d.           d --
 586+ 82D8                              Colon_Def D_DOT, "D.", is_normal
 586+ 82D8             >                New_Def  D_DOT, "D.", Enter_Ptr, is_normal ; ok
 586+ 82D8             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 586+ 82D8             >
 586+ 82D8             >                // dummy db directives used to calculate length of namec
 586+ 82D8 44 2E       >                db      "D."
 586+ 82DA             >len_NFA         defl    $ - temp_NFA
 586+ 82DA             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 586+ 82D8             >
 586+ 82D8 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 586+ 82D9 44 2E       >                db      "D."               // name string in 7-bit ascii, but
 586+ 82DB             >                org     $-1                 // alter last byte of Name just above to set
 586+ 82DA AE          >                db      {b $} | END_BIT     // msb as name end
 586+ 82DB             >
 586+ 82DB C7 82       >                dw      last_NFA            // Link to previous definition Name
 586+ 82DD             >D_DOT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 586+ 82DD 3B 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 586+ 82DF             >                else
 586+ 82DF ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 586+ 82DF             >                endif           ; ok        // for other definitions it "points" the correct handler
 586+ 82DF             >                // Use of "; ok" to suppress "warning[fwdref]"
 586+ 82DF             >
 586+ 82DF             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 587+ 82DF B6 6C AB 82                  dw      ZERO, D_DOT_R, SPACE
 587+ 82E3 A5 6F
 588+ 82E5 25 69                        dw      EXIT
 589+ 82E7
 590+ 82E7              //  ______________________________________________________________________
 591+ 82E7              //
 592+ 82E7              // .            n --
 593+ 82E7                              Colon_Def DOT, ".", is_normal
 593+ 82E7             >                New_Def  DOT, ".", Enter_Ptr, is_normal ; ok
 593+ 82E7             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 593+ 82E7             >
 593+ 82E7             >                // dummy db directives used to calculate length of namec
 593+ 82E7 2E          >                db      "."
 593+ 82E8             >len_NFA         defl    $ - temp_NFA
 593+ 82E8             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 593+ 82E7             >
 593+ 82E7 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 593+ 82E8 2E          >                db      "."               // name string in 7-bit ascii, but
 593+ 82E9             >                org     $-1                 // alter last byte of Name just above to set
 593+ 82E8 AE          >                db      {b $} | END_BIT     // msb as name end
 593+ 82E9             >
 593+ 82E9 D8 82       >                dw      last_NFA            // Link to previous definition Name
 593+ 82EB             >DOT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 593+ 82EB 3B 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 593+ 82ED             >                else
 593+ 82ED ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 593+ 82ED             >                endif           ; ok        // for other definitions it "points" the correct handler
 593+ 82ED             >                // Use of "; ok" to suppress "warning[fwdref]"
 593+ 82ED             >
 593+ 82ED             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 594+ 82ED D4 6E DD 82                  dw      S_TO_D, D_DOT
 595+ 82F1 25 69                        dw      EXIT
 596+ 82F3
 597+ 82F3              //  ______________________________________________________________________
 598+ 82F3              //
 599+ 82F3              // ?            n --
 600+ 82F3                              Colon_Def QUESTION, "?", is_normal
 600+ 82F3             >                New_Def  QUESTION, "?", Enter_Ptr, is_normal ; ok
 600+ 82F3             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 600+ 82F3             >
 600+ 82F3             >                // dummy db directives used to calculate length of namec
 600+ 82F3 3F          >                db      "?"
 600+ 82F4             >len_NFA         defl    $ - temp_NFA
 600+ 82F4             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 600+ 82F3             >
 600+ 82F3 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 600+ 82F4 3F          >                db      "?"               // name string in 7-bit ascii, but
 600+ 82F5             >                org     $-1                 // alter last byte of Name just above to set
 600+ 82F4 BF          >                db      {b $} | END_BIT     // msb as name end
 600+ 82F5             >
 600+ 82F5 E7 82       >                dw      last_NFA            // Link to previous definition Name
 600+ 82F7             >QUESTION:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 600+ 82F7 3B 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 600+ 82F9             >                else
 600+ 82F9 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 600+ 82F9             >                endif           ; ok        // for other definitions it "points" the correct handler
 600+ 82F9             >                // Use of "; ok" to suppress "warning[fwdref]"
 600+ 82F9             >
 600+ 82F9             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 601+ 82F9 4A 6B EB 82                  dw      FETCH, DOT
 602+ 82FD 25 69                        dw      EXIT
 603+ 82FF
 604+ 82FF              //  ______________________________________________________________________
 605+ 82FF              //
 606+ 82FF              // u.           u --
 607+ 82FF                              Colon_Def U_DOT, "U.", is_normal
 607+ 82FF             >                New_Def  U_DOT, "U.", Enter_Ptr, is_normal ; ok
 607+ 82FF             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 607+ 82FF             >
 607+ 82FF             >                // dummy db directives used to calculate length of namec
 607+ 82FF 55 2E       >                db      "U."
 607+ 8301             >len_NFA         defl    $ - temp_NFA
 607+ 8301             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 607+ 82FF             >
 607+ 82FF 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 607+ 8300 55 2E       >                db      "U."               // name string in 7-bit ascii, but
 607+ 8302             >                org     $-1                 // alter last byte of Name just above to set
 607+ 8301 AE          >                db      {b $} | END_BIT     // msb as name end
 607+ 8302             >
 607+ 8302 F3 82       >                dw      last_NFA            // Link to previous definition Name
 607+ 8304             >U_DOT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 607+ 8304 3B 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 607+ 8306             >                else
 607+ 8306 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 607+ 8306             >                endif           ; ok        // for other definitions it "points" the correct handler
 607+ 8306             >                // Use of "; ok" to suppress "warning[fwdref]"
 607+ 8306             >
 607+ 8306             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 608+ 8306 B6 6C DD 82                  dw      ZERO, D_DOT
 609+ 830A 25 69                        dw      EXIT
 610+ 830C
 611+ 830C              //  ______________________________________________________________________
 612+ 830C              //
 613+ 830C              // words        --
 614+ 830C                              Colon_Def WORDS, "WORDS", is_normal
 614+ 830C             >                New_Def  WORDS, "WORDS", Enter_Ptr, is_normal ; ok
 614+ 830C             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 614+ 830C             >
 614+ 830C             >                // dummy db directives used to calculate length of namec
 614+ 830C 57 4F 52 44 >                db      "WORDS"
 614+ 8310 53          >
 614+ 8311             >len_NFA         defl    $ - temp_NFA
 614+ 8311             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 614+ 830C             >
 614+ 830C 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 614+ 830D 57 4F 52 44 >                db      "WORDS"               // name string in 7-bit ascii, but
 614+ 8311 53          >
 614+ 8312             >                org     $-1                 // alter last byte of Name just above to set
 614+ 8311 D3          >                db      {b $} | END_BIT     // msb as name end
 614+ 8312             >
 614+ 8312 FF 82       >                dw      last_NFA            // Link to previous definition Name
 614+ 8314             >WORDS:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 614+ 8314 3B 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 614+ 8316             >                else
 614+ 8316 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 614+ 8316             >                endif           ; ok        // for other definitions it "points" the correct handler
 614+ 8316             >                // Use of "; ok" to suppress "warning[fwdref]"
 614+ 8316             >
 614+ 8316             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 615+ 8316 A9 63 80 00                  dw      LIT, 128, OUT, STORE
 615+ 831A C7 6D 57 6B
 616+ 831E E9 6D 4A 6B                  dw      CONTEXT, FETCH, FETCH
 616+ 8322 4A 6B
 617+ 8324              Words_Begin:
 618+ 8324 B7 6A 65 6B                  dw          DUP, CFETCH, LIT, $1F, AND_OP
 618+ 8328 A9 63 1F 00
 618+ 832C B5 68
 619+ 832E C7 6D 4A 6B                  dw          OUT, FETCH, PLUS
 619+ 8332 CB 69
 620+ 8334 EA 6C 17 6F                  dw          CL, LESS, ZEQUAL
 620+ 8338 88 69
 621+ 833A E3 63                        dw          ZBRANCH
 622+ 833C 0A 00                        dw          Words_Endif - $
 623+ 833E 02 68 B6 6C                  dw              CR, ZERO, OUT, STORE
 623+ 8342 C7 6D 57 6B
 624+ 8346              Words_Endif:
 625+ 8346 B7 6A 0A 76                  dw          DUP, ID_DOT
 626+ 834A 19 70 EB 6F                  dw          PFA, LFA, FETCH
 626+ 834E 4A 6B
 627+ 8350 B7 6A 88 69                  dw          DUP, ZEQUAL
 628+ 8354 0C 67 C7 68                  dw          QTERMINAL, OR_OP
 629+ 8358 E3 63                        dw      ZBRANCH
 630+ 835A CA FF                        dw      Words_Begin - $
 631+ 835C 82 6A                        dw      DROP
 632+ 835E 25 69                        dw      EXIT
 633+ 8360
 634+ 8360              //  ______________________________________________________________________
 635+ 8360              //
 636+ 8360              // list         n --
 637+ 8360                              Colon_Def LIST, "LIST", is_normal
 637+ 8360             >                New_Def  LIST, "LIST", Enter_Ptr, is_normal ; ok
 637+ 8360             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 637+ 8360             >
 637+ 8360             >                // dummy db directives used to calculate length of namec
 637+ 8360 4C 49 53 54 >                db      "LIST"
 637+ 8364             >len_NFA         defl    $ - temp_NFA
 637+ 8364             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 637+ 8360             >
 637+ 8360 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 637+ 8361 4C 49 53 54 >                db      "LIST"               // name string in 7-bit ascii, but
 637+ 8365             >                org     $-1                 // alter last byte of Name just above to set
 637+ 8364 D4          >                db      {b $} | END_BIT     // msb as name end
 637+ 8365             >
 637+ 8365 0C 83       >                dw      last_NFA            // Link to previous definition Name
 637+ 8367             >LIST:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 637+ 8367 3B 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 637+ 8369             >                else
 637+ 8369 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 637+ 8369             >                endif           ; ok        // for other definitions it "points" the correct handler
 637+ 8369             >                // Use of "; ok" to suppress "warning[fwdref]"
 637+ 8369             >
 637+ 8369             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 638+ 8369 7E 71 02 68                  dw      DECIMAL, CR
 639+ 836D B7 6A D0 6D                  dw      DUP, SCR, STORE
 639+ 8371 57 6B
 640+ 8373 36 74                        dw      C_DOT_QUOTE
 641+ 8375 05 53 63 72                  db      5, "Scr# "
 641+ 8379 23 20
 642+ 837B EB 82                        dw      DOT
 643+ 837D 0E 6D B6 6C                  dw      LSCR, ZERO, C_DO
 643+ 8381 6B 64
 644+ 8383              List_Loop:
 645+ 8383 02 68                        dw          CR
 646+ 8385 76 64 CE 6C                  dw          I, THREE
 647+ 8389 CC 82 A5 6F                  dw          DOT_R, SPACE
 648+ 838D 76 64 D0 6D                  dw          I, SCR, FETCH, DOT_LINE
 648+ 8391 4A 6B 59 7A
 649+ 8395 0C 67                        dw          QTERMINAL
 650+ 8397 E3 63                        dw          ZBRANCH
 651+ 8399 06 00                        dw          List_Endif - $
 652+ 839B 3D 69                        dw              C_LEAVE
 653+ 839D 06 00                        dw              List_Leave - $
 654+ 839F              List_Endif:
 655+ 839F F8 63                        dw      C_LOOP
 656+ 83A1 E2 FF                        dw      List_Loop - $
 657+ 83A3              List_Leave:
 658+ 83A3 02 68                        dw      CR
 659+ 83A5 25 69                        dw      EXIT
 660+ 83A7
 661+ 83A7              //  ______________________________________________________________________
 662+ 83A7              //
 663+ 83A7              // index        n1 n2 --
 664+ 83A7                              Colon_Def INDEX, "INDEX", is_normal
 664+ 83A7             >                New_Def  INDEX, "INDEX", Enter_Ptr, is_normal ; ok
 664+ 83A7             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 664+ 83A7             >
 664+ 83A7             >                // dummy db directives used to calculate length of namec
 664+ 83A7 49 4E 44 45 >                db      "INDEX"
 664+ 83AB 58          >
 664+ 83AC             >len_NFA         defl    $ - temp_NFA
 664+ 83AC             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 664+ 83A7             >
 664+ 83A7 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 664+ 83A8 49 4E 44 45 >                db      "INDEX"               // name string in 7-bit ascii, but
 664+ 83AC 58          >
 664+ 83AD             >                org     $-1                 // alter last byte of Name just above to set
 664+ 83AC D8          >                db      {b $} | END_BIT     // msb as name end
 664+ 83AD             >
 664+ 83AD 60 83       >                dw      last_NFA            // Link to previous definition Name
 664+ 83AF             >INDEX:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 664+ 83AF 3B 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 664+ 83B1             >                else
 664+ 83B1 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 664+ 83B1             >                endif           ; ok        // for other definitions it "points" the correct handler
 664+ 83B1             >                // Use of "; ok" to suppress "warning[fwdref]"
 664+ 83B1             >
 664+ 83B1             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 665+ 83B1 F4 69 AA 6A                  dw      ONE_PLUS, SWAP, C_DO
 665+ 83B5 6B 64
 666+ 83B7              Index_Loop:
 667+ 83B7 02 68 76 64                  dw          CR, I, THREE
 667+ 83BB CE 6C
 668+ 83BD CC 82 A5 6F                  dw          DOT_R, SPACE
 669+ 83C1 B6 6C 76 64                  dw          ZERO, I, DOT_LINE
 669+ 83C5 59 7A
 670+ 83C7 0C 67                        dw          QTERMINAL
 671+ 83C9 E3 63                        dw          ZBRANCH
 672+ 83CB 06 00                        dw          Index_Endif - $
 673+ 83CD 3D 69                        dw              C_LEAVE
 674+ 83CF 06 00                        dw              Index_Leave - $
 675+ 83D1              Index_Endif:
 676+ 83D1 F8 63                        dw      C_LOOP
 677+ 83D3 E4 FF                        dw      Index_Loop - $
 678+ 83D5              Index_Leave:
 679+ 83D5 02 68                        dw      CR
 680+ 83D7 25 69                        dw      EXIT
 681+ 83D9
 682+ 83D9              //  ______________________________________________________________________
 683+ 83D9              //
 684+ 83D9              // cls          --
 685+ 83D9                              Colon_Def CLS, "CLS", is_normal
 685+ 83D9             >                New_Def  CLS, "CLS", Enter_Ptr, is_normal ; ok
 685+ 83D9             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 685+ 83D9             >
 685+ 83D9             >                // dummy db directives used to calculate length of namec
 685+ 83D9 43 4C 53    >                db      "CLS"
 685+ 83DC             >len_NFA         defl    $ - temp_NFA
 685+ 83DC             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 685+ 83D9             >
 685+ 83D9 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 685+ 83DA 43 4C 53    >                db      "CLS"               // name string in 7-bit ascii, but
 685+ 83DD             >                org     $-1                 // alter last byte of Name just above to set
 685+ 83DC D3          >                db      {b $} | END_BIT     // msb as name end
 685+ 83DD             >
 685+ 83DD A7 83       >                dw      last_NFA            // Link to previous definition Name
 685+ 83DF             >CLS:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 685+ 83DF 3B 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 685+ 83E1             >                else
 685+ 83E1 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 685+ 83E1             >                endif           ; ok        // for other definitions it "points" the correct handler
 685+ 83E1             >                // Use of "; ok" to suppress "warning[fwdref]"
 685+ 83E1             >
 685+ 83E1             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 686+ 83E1 A9 63 0E 00                  dw      LIT, $0E, EMITC
 686+ 83E5 EB 65
 687+ 83E7 25 69                        dw      EXIT
 688+ 83E9
 689+ 83E9              //  ______________________________________________________________________
 690+ 83E9              //
 691+ 83E9              // splash       --
 692+ 83E9                              Colon_Def SPLASH, "SPLASH", is_normal
 692+ 83E9             >                New_Def  SPLASH, "SPLASH", Enter_Ptr, is_normal ; ok
 692+ 83E9             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 692+ 83E9             >
 692+ 83E9             >                // dummy db directives used to calculate length of namec
 692+ 83E9 53 50 4C 41 >                db      "SPLASH"
 692+ 83ED 53 48       >
 692+ 83EF             >len_NFA         defl    $ - temp_NFA
 692+ 83EF             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 692+ 83E9             >
 692+ 83E9 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 692+ 83EA 53 50 4C 41 >                db      "SPLASH"               // name string in 7-bit ascii, but
 692+ 83EE 53 48       >
 692+ 83F0             >                org     $-1                 // alter last byte of Name just above to set
 692+ 83EF C8          >                db      {b $} | END_BIT     // msb as name end
 692+ 83F0             >
 692+ 83F0 D9 83       >                dw      last_NFA            // Link to previous definition Name
 692+ 83F2             >SPLASH:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 692+ 83F2 3B 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 692+ 83F4             >                else
 692+ 83F4 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 692+ 83F4             >                endif           ; ok        // for other definitions it "points" the correct handler
 692+ 83F4             >                // Use of "; ok" to suppress "warning[fwdref]"
 692+ 83F4             >
 692+ 83F4             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 693+ 83F4 DF 83                        dw      CLS
 694+ 83F6 36 74                        dw      C_DOT_QUOTE
 695+ 83F8 45                           db      69
 696+ 83F9 76 2D 46 6F                  db      "v-Forth 1.5 NextZXOS version", 13
 696+ 83FD 72 74 68 20
 696+ 8401 31 2E 35 20
 696+ 8405 4E 65 78 74
 696+ 8409 5A 58 4F 53
 696+ 840D 20 76 65 72
 696+ 8411 73 69 6F 6E
 696+ 8415 0D
 697+ 8416 62 75 69 6C                  db      "build 20210916", 13
 697+ 841A 64 20 32 30
 697+ 841E 32 31 30 39
 697+ 8422 31 36 0D
 698+ 8425 31 39 39 30                  db      "1990-2021 Matteo Vitturi", 13
 698+ 8429 2D 32 30 32
 698+ 842D 31 20 4D 61
 698+ 8431 74 74 65 6F
 698+ 8435 20 56 69 74
 698+ 8439 74 75 72 69
 698+ 843D 0D
 699+ 843E 25 69                        dw      EXIT
 700+ 8440
 701+ 8440              //  ______________________________________________________________________
 702+ 8440              //
 703+ 8440              // video        --
 704+ 8440                              Colon_Def VIDEO, "VIDEO", is_normal
 704+ 8440             >                New_Def  VIDEO, "VIDEO", Enter_Ptr, is_normal ; ok
 704+ 8440             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 704+ 8440             >
 704+ 8440             >                // dummy db directives used to calculate length of namec
 704+ 8440 56 49 44 45 >                db      "VIDEO"
 704+ 8444 4F          >
 704+ 8445             >len_NFA         defl    $ - temp_NFA
 704+ 8445             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 704+ 8440             >
 704+ 8440 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 704+ 8441 56 49 44 45 >                db      "VIDEO"               // name string in 7-bit ascii, but
 704+ 8445 4F          >
 704+ 8446             >                org     $-1                 // alter last byte of Name just above to set
 704+ 8445 CF          >                db      {b $} | END_BIT     // msb as name end
 704+ 8446             >
 704+ 8446 E9 83       >                dw      last_NFA            // Link to previous definition Name
 704+ 8448             >VIDEO:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 704+ 8448 3B 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 704+ 844A             >                else
 704+ 844A ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 704+ 844A             >                endif           ; ok        // for other definitions it "points" the correct handler
 704+ 844A             >                // Use of "; ok" to suppress "warning[fwdref]"
 704+ 844A             >
 704+ 844A             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 705+ 844A C6 6C B7 6A                  dw      TWO, DUP, DEVICE, STORE
 705+ 844E A1 7A 57 6B
 706+ 8452 D2 7A                        dw      SELECT
 707+ 8454 25 69                        dw      EXIT
 708+ 8456
 709+ 8456              //  ______________________________________________________________________
 710+ 8456              //
 711+ 8456              // accept-      a n1 -- n2
 712+ 8456                              Colon_Def ACCEPT_N, "ACCEPT-", is_normal
 712+ 8456             >                New_Def  ACCEPT_N, "ACCEPT-", Enter_Ptr, is_normal ; ok
 712+ 8456             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 712+ 8456             >
 712+ 8456             >                // dummy db directives used to calculate length of namec
 712+ 8456 41 43 43 45 >                db      "ACCEPT-"
 712+ 845A 50 54 2D    >
 712+ 845D             >len_NFA         defl    $ - temp_NFA
 712+ 845D             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 712+ 8456             >
 712+ 8456 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 712+ 8457 41 43 43 45 >                db      "ACCEPT-"               // name string in 7-bit ascii, but
 712+ 845B 50 54 2D    >
 712+ 845E             >                org     $-1                 // alter last byte of Name just above to set
 712+ 845D AD          >                db      {b $} | END_BIT     // msb as name end
 712+ 845E             >
 712+ 845E 40 84       >                dw      last_NFA            // Link to previous definition Name
 712+ 8460             >ACCEPT_N:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 712+ 8460 3B 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 712+ 8462             >                else
 712+ 8462 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 712+ 8462             >                endif           ; ok        // for other definitions it "points" the correct handler
 712+ 8462             >                // Use of "; ok" to suppress "warning[fwdref]"
 712+ 8462             >
 712+ 8462             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 713+ 8462 53 69                        dw      TO_R
 714+ 8464 B6 6C                        dw      ZERO
 715+ 8466 AA 6A                        dw      SWAP
 716+ 8468 B7 6A                        dw      DUP
 717+ 846A 67 69                        dw      R_TO
 718+ 846C CB 69                        dw      PLUS
 719+ 846E AA 6A                        dw      SWAP
 720+ 8470 6B 64                        dw      C_DO
 721+ 8472              AcceptN_Loop:
 722+ 8472 22 7B                        dw          MMU7_FETCH
 723+ 8474 AD 7A                        dw          INKEY
 724+ 8476 AA 6A 34 7B                  dw          SWAP, MMU7_STORE
 725+ 847A B7 6A 88 69                  dw          DUP, ZEQUAL
 726+ 847E E3 63                        dw          ZBRANCH
 727+ 8480 06 00                        dw          AcceptN_Endif_1 - $
 728+ 8482 48 84 47 78                  dw              VIDEO, QUIT
 729+ 8486              AcceptN_Endif_1:
 730+ 8486 B7 6A A9 63                  dw          DUP, LIT, 13, EQUALS
 730+ 848A 0D 00 F6 6E
 731+ 848E E3 63                        dw          ZBRANCH
 732+ 8490 06 00                        dw          AcceptN_Endif_2 - $
 733+ 8492 82 6A B6 6C                  dw              DROP, ZERO
 734+ 8496              AcceptN_Endif_2:
 735+ 8496 B7 6A A9 63                  dw          DUP, LIT, 10, EQUALS
 735+ 849A 0A 00 F6 6E
 736+ 849E E3 63                        dw          ZBRANCH
 737+ 84A0 06 00                        dw          AcceptN_Endif_3 - $
 738+ 84A2 82 6A B6 6C                  dw              DROP, ZERO
 739+ 84A6              AcceptN_Endif_3:
 740+ 84A6 76 64 73 6B                  dw          I, CSTORE, ONE_PLUS
 740+ 84AA F4 69
 741+ 84AC
 742+ 84AC 76 64 65 6B                  dw          I, CFETCH, ZEQUAL   //      i 0= if
 742+ 84B0 88 69
 743+ 84B2 E3 63                        dw          ZBRANCH
 744+ 84B4 06 00                        dw              AcceptN_Endif_4 - $
 745+ 84B6 3D 69                        dw                  C_LEAVE     //              leave
 746+ 84B8 06 00                        dw                  AcceptN_Leave - $
 747+ 84BA              AcceptN_Endif_4:                                 //      endif
 748+ 84BA
 749+ 84BA F8 63                        dw      C_LOOP
 750+ 84BC B6 FF                        dw      AcceptN_Loop -$
 751+ 84BE              AcceptN_Leave:
 752+ 84BE 25 69                        dw      EXIT
 753+ 84C0
 754+ 84C0              //  ______________________________________________________________________
 755+ 84C0              //
 756+ 84C0              // load-        n --
 757+ 84C0              // Provided that a stream n is OPEN# via the standart BASIC
 758+ 84C0              // it accepts text from stream #n to the normal INTERPRET
 759+ 84C0              // up to now, text-file must end with QUIT
 760+ 84C0                              Colon_Def LOAD_N, "LOAD-", is_normal
 760+ 84C0             >                New_Def  LOAD_N, "LOAD-", Enter_Ptr, is_normal ; ok
 760+ 84C0             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 760+ 84C0             >
 760+ 84C0             >                // dummy db directives used to calculate length of namec
 760+ 84C0 4C 4F 41 44 >                db      "LOAD-"
 760+ 84C4 2D          >
 760+ 84C5             >len_NFA         defl    $ - temp_NFA
 760+ 84C5             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 760+ 84C0             >
 760+ 84C0 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 760+ 84C1 4C 4F 41 44 >                db      "LOAD-"               // name string in 7-bit ascii, but
 760+ 84C5 2D          >
 760+ 84C6             >                org     $-1                 // alter last byte of Name just above to set
 760+ 84C5 AD          >                db      {b $} | END_BIT     // msb as name end
 760+ 84C6             >
 760+ 84C6 56 84       >                dw      last_NFA            // Link to previous definition Name
 760+ 84C8             >LOAD_N:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 760+ 84C8 3B 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 760+ 84CA             >                else
 760+ 84CA ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 760+ 84CA             >                endif           ; ok        // for other definitions it "points" the correct handler
 760+ 84CA             >                // Use of "; ok" to suppress "warning[fwdref]"
 760+ 84CA             >
 760+ 84CA             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 761+ 84CA 6C 6E 57 6B                  dw      SOURCE_ID, STORE
 762+ 84CE              Load_N_Begin:
 763+ 84CE 49 6D 4A 6B                  dw          TIB, FETCH
 764+ 84D2 B7 6A A9 63                  dw          DUP, LIT, 80
 764+ 84D6 50 00
 765+ 84D8 18 6B AF 73                  dw          TWO_DUP, BLANKS
 766+ 84DC 6C 6E 4A 6B                  dw          SOURCE_ID, FETCH
 767+ 84E0 67 79 B7 6A                  dw          ABS_OP, DUP, DEVICE, STORE
 767+ 84E4 A1 7A 57 6B
 768+ 84E8 D2 7A                        dw          SELECT
 769+ 84EA 60 84                        dw          ACCEPT_N
 770+ 84EC 48 84                        dw          VIDEO
 771+ 84EE F8 6A                        dw          TWO_DROP
 772+ 84F0 B6 6C B5 6D                  dw          ZERO, BLK, STORE
 772+ 84F4 57 6B
 773+ 84F6 B6 6C BE 6D                  dw          ZERO, TO_IN, STORE
 773+ 84FA 57 6B
 774+ 84FC 87 77                        dw          INTERPRET
 775+ 84FE 0C 67                        dw          QTERMINAL
 776+ 8500 E3 63                        dw      ZBRANCH
 777+ 8502 CC FF                        dw      Load_N_Begin - $
 778+ 8504 25 69                        dw      EXIT
 779+ 8506
 780+ 8506              //  ______________________________________________________________________
 781+ 8506              //
 782+ 8506              // load         n --
 783+ 8506              // if n is positive, it loads screen #n (as usual)
 784+ 8506              // if n is negative, it connects stream #n to the normal INTERPRET
 785+ 8506              // this second way is useful if you want to load any kind of file
 786+ 8506              // provied that it is OPEN# the usual BASIC way.
 787+ 8506                              Colon_Def LOAD, "LOAD", is_normal
 787+ 8506             >                New_Def  LOAD, "LOAD", Enter_Ptr, is_normal ; ok
 787+ 8506             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 787+ 8506             >
 787+ 8506             >                // dummy db directives used to calculate length of namec
 787+ 8506 4C 4F 41 44 >                db      "LOAD"
 787+ 850A             >len_NFA         defl    $ - temp_NFA
 787+ 850A             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 787+ 8506             >
 787+ 8506 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 787+ 8507 4C 4F 41 44 >                db      "LOAD"               // name string in 7-bit ascii, but
 787+ 850B             >                org     $-1                 // alter last byte of Name just above to set
 787+ 850A C4          >                db      {b $} | END_BIT     // msb as name end
 787+ 850B             >
 787+ 850B C0 84       >                dw      last_NFA            // Link to previous definition Name
 787+ 850D             >LOAD:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 787+ 850D 3B 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 787+ 850F             >                else
 787+ 850F ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 787+ 850F             >                endif           ; ok        // for other definitions it "points" the correct handler
 787+ 850F             >                // Use of "; ok" to suppress "warning[fwdref]"
 787+ 850F             >
 787+ 850F             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 788+ 850F B7 6A A3 69                  dw      DUP, ZLESS
 789+ 8513 E3 63                        dw      ZBRANCH
 790+ 8515 08 00                        dw      Load_Else - $
 791+ 8517 C8 84                        dw          LOAD_N
 792+ 8519 CC 63                        dw      BRANCH
 793+ 851B 04 00                        dw      Load_Endif - $
 794+ 851D              Load_Else:
 795+ 851D FA 80                        dw          LOAD_P
 796+ 851F              Load_Endif:
 797+ 851F 25 69                        dw      EXIT
 798+ 8521
 799+ 8521
 800+ 8521              //  ______________________________________________________________________
 801+ 8521              //
 802+ 8521              // autoexec     --
 803+ 8521              // this word is called the first time the Forth system boot to
 804+ 8521              // load Screen# 1. Once called it patches itself to prevent furhter runs.
 805+ 8521                              Colon_Def AUTOEXEC, "AUTOEXEC", is_normal
 805+ 8521             >                New_Def  AUTOEXEC, "AUTOEXEC", Enter_Ptr, is_normal ; ok
 805+ 8521             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 805+ 8521             >
 805+ 8521             >                // dummy db directives used to calculate length of namec
 805+ 8521 41 55 54 4F >                db      "AUTOEXEC"
 805+ 8525 45 58 45 43 >
 805+ 8529             >len_NFA         defl    $ - temp_NFA
 805+ 8529             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 805+ 8521             >
 805+ 8521 88          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 805+ 8522 41 55 54 4F >                db      "AUTOEXEC"               // name string in 7-bit ascii, but
 805+ 8526 45 58 45 43 >
 805+ 852A             >                org     $-1                 // alter last byte of Name just above to set
 805+ 8529 C3          >                db      {b $} | END_BIT     // msb as name end
 805+ 852A             >
 805+ 852A 06 85       >                dw      last_NFA            // Link to previous definition Name
 805+ 852C             >AUTOEXEC:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 805+ 852C 3B 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 805+ 852E             >                else
 805+ 852E ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 805+ 852E             >                endif           ; ok        // for other definitions it "points" the correct handler
 805+ 852E             >                // Use of "; ok" to suppress "warning[fwdref]"
 805+ 852E             >
 805+ 852E             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 806+ 852E A9 63 0B 00                  dw      LIT, 11
 807+ 8532 A9 63 63 6C                  dw      LIT, NOOP
 808+ 8536 A9 63 96 78                  dw      LIT, Autoexec_Ptr
 809+ 853A 57 6B                        dw      STORE
 810+ 853C 0D 85                        dw      LOAD
 811+ 853E 47 78                        dw      QUIT
 812+ 8540 25 69                        dw      EXIT
 813+ 8542
 814+ 8542
 815+ 8542              //  ______________________________________________________________________
 816+ 8542              //
 817+ 8542              // bye     --
 818+ 8542              //
 819+ 8542                              Colon_Def BYE, "BYE", is_normal
 819+ 8542             >                New_Def  BYE, "BYE", Enter_Ptr, is_normal ; ok
 819+ 8542             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 819+ 8542             >
 819+ 8542             >                // dummy db directives used to calculate length of namec
 819+ 8542 42 59 45    >                db      "BYE"
 819+ 8545             >len_NFA         defl    $ - temp_NFA
 819+ 8545             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 819+ 8542             >
 819+ 8542 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 819+ 8543 42 59 45    >                db      "BYE"               // name string in 7-bit ascii, but
 819+ 8546             >                org     $-1                 // alter last byte of Name just above to set
 819+ 8545 C5          >                db      {b $} | END_BIT     // msb as name end
 819+ 8546             >
 819+ 8546 21 85       >                dw      last_NFA            // Link to previous definition Name
 819+ 8548             >BYE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 819+ 8548 3B 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 819+ 854A             >                else
 819+ 854A ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 819+ 854A             >                endif           ; ok        // for other definitions it "points" the correct handler
 819+ 854A             >                // Use of "; ok" to suppress "warning[fwdref]"
 819+ 854A             >
 819+ 854A             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 820+ 854A AE 7D                        dw      FLUSH
 821+ 854C DF 7C                        dw      EMPTY_BUFFERS
 822+ 854E 83 7B 4A 6B                  dw      BLK_FH, FETCH, F_CLOSE, DROP
 822+ 8552 AF 67 82 6A
 823+ 8556 B6 6C 1C 6D                  dw      ZERO, PLUS_ORIGIN
 824+ 855A 2C 79                        dw      BASIC
 825+ 855C
 826+ 855C              //  ______________________________________________________________________
 827+ 855C              //
 828+ 855C              // invv     --
 829+ 855C              //
 830+ 855C              //              Colon_Def INVV, "INVV", is_normal
 831+ 855C              //              dw      LIT, 20, EMITC, ONE, EMITC
 832+ 855C              //              dw      EXIT
 833+ 855C
 834+ 855C              //  ______________________________________________________________________
 835+ 855C              //
 836+ 855C              // truv     --
 837+ 855C              //
 838+ 855C              //              Colon_Def TRUV, "TRUV", is_normal
 839+ 855C              //              dw      LIT, 20, EMITC, ZERO, EMITC
 840+ 855C              //              dw      EXIT
 841+ 855C
 842+ 855C              //  ______________________________________________________________________
 843+ 855C              //
 844+ 855C              // mark     --
 845+ 855C              //
 846+ 855C              //              Colon_Def MARK, "MARK", is_normal
 847+ 855C              //              dw      INVV, TYPE, TRUV
 848+ 855C              //              dw      EXIT
 849+ 855C
 850+ 855C              //  ______________________________________________________________________
 851+ 855C              //
 852+ 855C              // back     --
 853+ 855C              //
 854+ 855C                              Colon_Def BACK, "BACK", is_normal
 854+ 855C             >                New_Def  BACK, "BACK", Enter_Ptr, is_normal ; ok
 854+ 855C             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 854+ 855C             >
 854+ 855C             >                // dummy db directives used to calculate length of namec
 854+ 855C 42 41 43 4B >                db      "BACK"
 854+ 8560             >len_NFA         defl    $ - temp_NFA
 854+ 8560             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 854+ 855C             >
 854+ 855C 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 854+ 855D 42 41 43 4B >                db      "BACK"               // name string in 7-bit ascii, but
 854+ 8561             >                org     $-1                 // alter last byte of Name just above to set
 854+ 8560 CB          >                db      {b $} | END_BIT     // msb as name end
 854+ 8561             >
 854+ 8561 42 85       >                dw      last_NFA            // Link to previous definition Name
 854+ 8563             >BACK:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 854+ 8563 3B 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 854+ 8565             >                else
 854+ 8565 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 854+ 8565             >                endif           ; ok        // for other definitions it "points" the correct handler
 854+ 8565             >                // Use of "; ok" to suppress "warning[fwdref]"
 854+ 8565             >
 854+ 8565             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 855+ 8565 95 6E E8 6E                  dw      HERE, SUBTRACT, COMMA
 855+ 8569 B1 6E
 856+ 856B 25 69                        dw      EXIT
 857+ 856D
 858+ 856D              //  ______________________________________________________________________
 859+ 856D              //
 860+ 856D              // if          ( -- a 2 ) \ compile-time
 861+ 856D              // IF ... THEN
 862+ 856D              // IF ... ELSE ... ENDIF
 863+ 856D                              Colon_Def IF, "IF", is_immediate
 863+ 856D             >                New_Def  IF, "IF", Enter_Ptr, is_immediate ; ok
 863+ 856D             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 863+ 856D             >
 863+ 856D             >                // dummy db directives used to calculate length of namec
 863+ 856D 49 46       >                db      "IF"
 863+ 856F             >len_NFA         defl    $ - temp_NFA
 863+ 856F             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 863+ 856D             >
 863+ 856D C2          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 863+ 856E 49 46       >                db      "IF"               // name string in 7-bit ascii, but
 863+ 8570             >                org     $-1                 // alter last byte of Name just above to set
 863+ 856F C6          >                db      {b $} | END_BIT     // msb as name end
 863+ 8570             >
 863+ 8570 5C 85       >                dw      last_NFA            // Link to previous definition Name
 863+ 8572             >IF:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 863+ 8572 3B 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 863+ 8574             >                else
 863+ 8574 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 863+ 8574             >                endif           ; ok        // for other definitions it "points" the correct handler
 863+ 8574             >                // Use of "; ok" to suppress "warning[fwdref]"
 863+ 8574             >
 863+ 8574             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 864+ 8574 F2 70 E3 63                  dw      COMPILE, ZBRANCH
 865+ 8578 95 6E B6 6C                  dw      HERE, ZERO, COMMA
 865+ 857C B1 6E
 866+ 857E C6 6C                        dw      TWO
 867+ 8580 25 69                        dw      EXIT
 868+ 8582
 869+ 8582              //  ______________________________________________________________________
 870+ 8582              //
 871+ 8582              // endif        ( a 2 -- ) \ compile-time
 872+ 8582              //
 873+ 8582                              Colon_Def ENDIF, "ENDIF", is_immediate
 873+ 8582             >                New_Def  ENDIF, "ENDIF", Enter_Ptr, is_immediate ; ok
 873+ 8582             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 873+ 8582             >
 873+ 8582             >                // dummy db directives used to calculate length of namec
 873+ 8582 45 4E 44 49 >                db      "ENDIF"
 873+ 8586 46          >
 873+ 8587             >len_NFA         defl    $ - temp_NFA
 873+ 8587             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 873+ 8582             >
 873+ 8582 C5          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 873+ 8583 45 4E 44 49 >                db      "ENDIF"               // name string in 7-bit ascii, but
 873+ 8587 46          >
 873+ 8588             >                org     $-1                 // alter last byte of Name just above to set
 873+ 8587 C6          >                db      {b $} | END_BIT     // msb as name end
 873+ 8588             >
 873+ 8588 6D 85       >                dw      last_NFA            // Link to previous definition Name
 873+ 858A             >ENDIF:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 873+ 858A 3B 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 873+ 858C             >                else
 873+ 858C ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 873+ 858C             >                endif           ; ok        // for other definitions it "points" the correct handler
 873+ 858C             >                // Use of "; ok" to suppress "warning[fwdref]"
 873+ 858C             >
 873+ 858C             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 874+ 858C 79 70                        dw      QCOMP
 875+ 858E C6 6C A8 70                  dw      TWO, QPAIRS
 876+ 8592 95 6E 72 6A                  dw      HERE, OVER, SUBTRACT, SWAP, STORE
 876+ 8596 E8 6E AA 6A
 876+ 859A 57 6B
 877+ 859C 25 69                        dw      EXIT
 878+ 859E
 879+ 859E              //  ______________________________________________________________________
 880+ 859E              //
 881+ 859E              // then        ( a 2 -- ) \ compile-time
 882+ 859E              //
 883+ 859E                              Colon_Def THEN, "THEN", is_immediate
 883+ 859E             >                New_Def  THEN, "THEN", Enter_Ptr, is_immediate ; ok
 883+ 859E             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 883+ 859E             >
 883+ 859E             >                // dummy db directives used to calculate length of namec
 883+ 859E 54 48 45 4E >                db      "THEN"
 883+ 85A2             >len_NFA         defl    $ - temp_NFA
 883+ 85A2             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 883+ 859E             >
 883+ 859E C4          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 883+ 859F 54 48 45 4E >                db      "THEN"               // name string in 7-bit ascii, but
 883+ 85A3             >                org     $-1                 // alter last byte of Name just above to set
 883+ 85A2 CE          >                db      {b $} | END_BIT     // msb as name end
 883+ 85A3             >
 883+ 85A3 82 85       >                dw      last_NFA            // Link to previous definition Name
 883+ 85A5             >THEN:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 883+ 85A5 3B 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 883+ 85A7             >                else
 883+ 85A7 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 883+ 85A7             >                endif           ; ok        // for other definitions it "points" the correct handler
 883+ 85A7             >                // Use of "; ok" to suppress "warning[fwdref]"
 883+ 85A7             >
 883+ 85A7             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 884+ 85A7 8A 85                        dw      ENDIF
 885+ 85A9 25 69                        dw      EXIT
 886+ 85AB
 887+ 85AB              //  ______________________________________________________________________
 888+ 85AB              //
 889+ 85AB              // else        ( a1 2 -- a2 2 ) \ compile-time
 890+ 85AB              //
 891+ 85AB                              Colon_Def ELSE, "ELSE", is_immediate
 891+ 85AB             >                New_Def  ELSE, "ELSE", Enter_Ptr, is_immediate ; ok
 891+ 85AB             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 891+ 85AB             >
 891+ 85AB             >                // dummy db directives used to calculate length of namec
 891+ 85AB 45 4C 53 45 >                db      "ELSE"
 891+ 85AF             >len_NFA         defl    $ - temp_NFA
 891+ 85AF             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 891+ 85AB             >
 891+ 85AB C4          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 891+ 85AC 45 4C 53 45 >                db      "ELSE"               // name string in 7-bit ascii, but
 891+ 85B0             >                org     $-1                 // alter last byte of Name just above to set
 891+ 85AF C5          >                db      {b $} | END_BIT     // msb as name end
 891+ 85B0             >
 891+ 85B0 9E 85       >                dw      last_NFA            // Link to previous definition Name
 891+ 85B2             >ELSE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 891+ 85B2 3B 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 891+ 85B4             >                else
 891+ 85B4 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 891+ 85B4             >                endif           ; ok        // for other definitions it "points" the correct handler
 891+ 85B4             >                // Use of "; ok" to suppress "warning[fwdref]"
 891+ 85B4             >
 891+ 85B4             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 892+ 85B4 79 70                        dw      QCOMP
 893+ 85B6 C6 6C A8 70                  dw      TWO, QPAIRS
 894+ 85BA F2 70 CC 63                  dw      COMPILE, BRANCH
 895+ 85BE 95 6E B6 6C                  dw      HERE, ZERO, COMMA
 895+ 85C2 B1 6E
 896+ 85C4 AA 6A C6 6C                  dw      SWAP, TWO, ENDIF
 896+ 85C8 8A 85
 897+ 85CA C6 6C                        dw      TWO
 898+ 85CC 25 69                        dw      EXIT
 899+ 85CE
 900+ 85CE              //  ______________________________________________________________________
 901+ 85CE              //
 902+ 85CE              // begin        ( -- a 1 ) \ compile-time
 903+ 85CE              // BEGIN ... AGAIN
 904+ 85CE              // BEGIN ... f UNTIL
 905+ 85CE              // BEGIN ... f WHILE ... REPEAT
 906+ 85CE                              Colon_Def BEGIN, "BEGIN", is_immediate
 906+ 85CE             >                New_Def  BEGIN, "BEGIN", Enter_Ptr, is_immediate ; ok
 906+ 85CE             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 906+ 85CE             >
 906+ 85CE             >                // dummy db directives used to calculate length of namec
 906+ 85CE 42 45 47 49 >                db      "BEGIN"
 906+ 85D2 4E          >
 906+ 85D3             >len_NFA         defl    $ - temp_NFA
 906+ 85D3             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 906+ 85CE             >
 906+ 85CE C5          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 906+ 85CF 42 45 47 49 >                db      "BEGIN"               // name string in 7-bit ascii, but
 906+ 85D3 4E          >
 906+ 85D4             >                org     $-1                 // alter last byte of Name just above to set
 906+ 85D3 CE          >                db      {b $} | END_BIT     // msb as name end
 906+ 85D4             >
 906+ 85D4 AB 85       >                dw      last_NFA            // Link to previous definition Name
 906+ 85D6             >BEGIN:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 906+ 85D6 3B 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 906+ 85D8             >                else
 906+ 85D8 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 906+ 85D8             >                endif           ; ok        // for other definitions it "points" the correct handler
 906+ 85D8             >                // Use of "; ok" to suppress "warning[fwdref]"
 906+ 85D8             >
 906+ 85D8             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 907+ 85D8 79 70                        dw      QCOMP
 908+ 85DA 95 6E                        dw      HERE
 909+ 85DC BE 6C                        dw      ONE
 910+ 85DE 25 69                        dw      EXIT
 911+ 85E0
 912+ 85E0              //  ______________________________________________________________________
 913+ 85E0              //
 914+ 85E0              // again        ( a 1 -- ) \ compile-time
 915+ 85E0                              Colon_Def AGAIN, "AGAIN", is_immediate
 915+ 85E0             >                New_Def  AGAIN, "AGAIN", Enter_Ptr, is_immediate ; ok
 915+ 85E0             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 915+ 85E0             >
 915+ 85E0             >                // dummy db directives used to calculate length of namec
 915+ 85E0 41 47 41 49 >                db      "AGAIN"
 915+ 85E4 4E          >
 915+ 85E5             >len_NFA         defl    $ - temp_NFA
 915+ 85E5             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 915+ 85E0             >
 915+ 85E0 C5          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 915+ 85E1 41 47 41 49 >                db      "AGAIN"               // name string in 7-bit ascii, but
 915+ 85E5 4E          >
 915+ 85E6             >                org     $-1                 // alter last byte of Name just above to set
 915+ 85E5 CE          >                db      {b $} | END_BIT     // msb as name end
 915+ 85E6             >
 915+ 85E6 CE 85       >                dw      last_NFA            // Link to previous definition Name
 915+ 85E8             >AGAIN:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 915+ 85E8 3B 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 915+ 85EA             >                else
 915+ 85EA ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 915+ 85EA             >                endif           ; ok        // for other definitions it "points" the correct handler
 915+ 85EA             >                // Use of "; ok" to suppress "warning[fwdref]"
 915+ 85EA             >
 915+ 85EA             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 916+ 85EA 79 70                        dw      QCOMP
 917+ 85EC BE 6C A8 70                  dw      ONE, QPAIRS
 918+ 85F0 F2 70 CC 63                  dw      COMPILE, BRANCH
 919+ 85F4 63 85                        dw      BACK
 920+ 85F6 25 69                        dw      EXIT
 921+ 85F8
 922+ 85F8              //  ______________________________________________________________________
 923+ 85F8              //
 924+ 85F8              // until        ( a 1 -- ) \ compile-time
 925+ 85F8                              Colon_Def UNTIL, "UNTIL", is_immediate
 925+ 85F8             >                New_Def  UNTIL, "UNTIL", Enter_Ptr, is_immediate ; ok
 925+ 85F8             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 925+ 85F8             >
 925+ 85F8             >                // dummy db directives used to calculate length of namec
 925+ 85F8 55 4E 54 49 >                db      "UNTIL"
 925+ 85FC 4C          >
 925+ 85FD             >len_NFA         defl    $ - temp_NFA
 925+ 85FD             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 925+ 85F8             >
 925+ 85F8 C5          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 925+ 85F9 55 4E 54 49 >                db      "UNTIL"               // name string in 7-bit ascii, but
 925+ 85FD 4C          >
 925+ 85FE             >                org     $-1                 // alter last byte of Name just above to set
 925+ 85FD CC          >                db      {b $} | END_BIT     // msb as name end
 925+ 85FE             >
 925+ 85FE E0 85       >                dw      last_NFA            // Link to previous definition Name
 925+ 8600             >UNTIL:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 925+ 8600 3B 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 925+ 8602             >                else
 925+ 8602 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 925+ 8602             >                endif           ; ok        // for other definitions it "points" the correct handler
 925+ 8602             >                // Use of "; ok" to suppress "warning[fwdref]"
 925+ 8602             >
 925+ 8602             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 926+ 8602 79 70                        dw      QCOMP
 927+ 8604 BE 6C A8 70                  dw      ONE, QPAIRS
 928+ 8608 F2 70 E3 63                  dw      COMPILE, ZBRANCH
 929+ 860C 63 85                        dw      BACK
 930+ 860E 25 69                        dw      EXIT
 931+ 8610
 932+ 8610              //  ______________________________________________________________________
 933+ 8610              //
 934+ 8610              // end          ( a 1 -- ) \ compile-time
 935+ 8610                              Colon_Def END, "END", is_immediate
 935+ 8610             >                New_Def  END, "END", Enter_Ptr, is_immediate ; ok
 935+ 8610             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 935+ 8610             >
 935+ 8610             >                // dummy db directives used to calculate length of namec
 935+ 8610 45 4E 44    >                db      "END"
 935+ 8613             >len_NFA         defl    $ - temp_NFA
 935+ 8613             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 935+ 8610             >
 935+ 8610 C3          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 935+ 8611 45 4E 44    >                db      "END"               // name string in 7-bit ascii, but
 935+ 8614             >                org     $-1                 // alter last byte of Name just above to set
 935+ 8613 C4          >                db      {b $} | END_BIT     // msb as name end
 935+ 8614             >
 935+ 8614 F8 85       >                dw      last_NFA            // Link to previous definition Name
 935+ 8616             >END:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 935+ 8616 3B 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 935+ 8618             >                else
 935+ 8618 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 935+ 8618             >                endif           ; ok        // for other definitions it "points" the correct handler
 935+ 8618             >                // Use of "; ok" to suppress "warning[fwdref]"
 935+ 8618             >
 935+ 8618             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 936+ 8618 00 86                        dw      UNTIL
 937+ 861A 25 69                        dw      EXIT
 938+ 861C
 939+ 861C              //  ______________________________________________________________________
 940+ 861C              //
 941+ 861C              // while        ( a1 1 -- a1 1 a2 4 ) \ compile-time
 942+ 861C                              Colon_Def WHILE, "WHILE", is_immediate
 942+ 861C             >                New_Def  WHILE, "WHILE", Enter_Ptr, is_immediate ; ok
 942+ 861C             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 942+ 861C             >
 942+ 861C             >                // dummy db directives used to calculate length of namec
 942+ 861C 57 48 49 4C >                db      "WHILE"
 942+ 8620 45          >
 942+ 8621             >len_NFA         defl    $ - temp_NFA
 942+ 8621             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 942+ 861C             >
 942+ 861C C5          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 942+ 861D 57 48 49 4C >                db      "WHILE"               // name string in 7-bit ascii, but
 942+ 8621 45          >
 942+ 8622             >                org     $-1                 // alter last byte of Name just above to set
 942+ 8621 C5          >                db      {b $} | END_BIT     // msb as name end
 942+ 8622             >
 942+ 8622 10 86       >                dw      last_NFA            // Link to previous definition Name
 942+ 8624             >WHILE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 942+ 8624 3B 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 942+ 8626             >                else
 942+ 8626 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 942+ 8626             >                endif           ; ok        // for other definitions it "points" the correct handler
 942+ 8626             >                // Use of "; ok" to suppress "warning[fwdref]"
 942+ 8626             >
 942+ 8626             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 943+ 8626 72 85                        dw      IF
 944+ 8628 0C 6A                        dw      TWO_PLUS // ( that is 4 )
 945+ 862A 25 69                        dw      EXIT
 946+ 862C
 947+ 862C              //  ______________________________________________________________________
 948+ 862C              //
 949+ 862C              // repeat       ( a1 1 a2 4 -- ) \ compile-time
 950+ 862C                              Colon_Def REPEAT, "REPEAT", is_immediate
 950+ 862C             >                New_Def  REPEAT, "REPEAT", Enter_Ptr, is_immediate ; ok
 950+ 862C             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 950+ 862C             >
 950+ 862C             >                // dummy db directives used to calculate length of namec
 950+ 862C 52 45 50 45 >                db      "REPEAT"
 950+ 8630 41 54       >
 950+ 8632             >len_NFA         defl    $ - temp_NFA
 950+ 8632             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 950+ 862C             >
 950+ 862C C6          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 950+ 862D 52 45 50 45 >                db      "REPEAT"               // name string in 7-bit ascii, but
 950+ 8631 41 54       >
 950+ 8633             >                org     $-1                 // alter last byte of Name just above to set
 950+ 8632 D4          >                db      {b $} | END_BIT     // msb as name end
 950+ 8633             >
 950+ 8633 1C 86       >                dw      last_NFA            // Link to previous definition Name
 950+ 8635             >REPEAT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 950+ 8635 3B 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 950+ 8637             >                else
 950+ 8637 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 950+ 8637             >                endif           ; ok        // for other definitions it "points" the correct handler
 950+ 8637             >                // Use of "; ok" to suppress "warning[fwdref]"
 950+ 8637             >
 950+ 8637             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 951+ 8637 06 6B                        dw      TWO_SWAP
 952+ 8639 E8 85                        dw      AGAIN
 953+ 863B C6 6C E8 6E                  dw      TWO, SUBTRACT
 954+ 863F 8A 85                        dw      ENDIF
 955+ 8641 25 69                        dw      EXIT
 956+ 8643
 957+ 8643              //  ______________________________________________________________________
 958+ 8643              //
 959+ 8643              // ?do-
 960+ 8643              // special version of "BACK" used by ?DO and LOOP
 961+ 8643                              Colon_Def C_DO_BACK, "?DO-", is_normal
 961+ 8643             >                New_Def  C_DO_BACK, "?DO-", Enter_Ptr, is_normal ; ok
 961+ 8643             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 961+ 8643             >
 961+ 8643             >                // dummy db directives used to calculate length of namec
 961+ 8643 3F 44 4F 2D >                db      "?DO-"
 961+ 8647             >len_NFA         defl    $ - temp_NFA
 961+ 8647             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 961+ 8643             >
 961+ 8643 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 961+ 8644 3F 44 4F 2D >                db      "?DO-"               // name string in 7-bit ascii, but
 961+ 8648             >                org     $-1                 // alter last byte of Name just above to set
 961+ 8647 AD          >                db      {b $} | END_BIT     // msb as name end
 961+ 8648             >
 961+ 8648 2C 86       >                dw      last_NFA            // Link to previous definition Name
 961+ 864A             >C_DO_BACK:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 961+ 864A 3B 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 961+ 864C             >                else
 961+ 864C ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 961+ 864C             >                endif           ; ok        // for other definitions it "points" the correct handler
 961+ 864C             >                // Use of "; ok" to suppress "warning[fwdref]"
 961+ 864C             >
 961+ 864C             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 962+ 864C 63 85                        dw      BACK
 963+ 864E              CDoBack_Begin:
 964+ 864E ED 68 26 6E                  dw      SPFETCH, CSP, FETCH, SUBTRACT
 964+ 8652 4A 6B E8 6E
 965+ 8656 E3 63                        dw      ZBRANCH
 966+ 8658 0A 00                        dw      CDoBack_While - $
 967+ 865A 0C 6A 8A 85                  dw          TWO_PLUS, ENDIF
 968+ 865E CC 63                        dw      BRANCH
 969+ 8660 EE FF                        dw      CDoBack_Begin - $
 970+ 8662              CDoBack_While:
 971+ 8662 BB 70 26 6E                  dw      QCSP, CSP, STORE
 971+ 8666 57 6B
 972+ 8668 25 69                        dw      EXIT
 973+ 866A
 974+ 866A              //  ______________________________________________________________________
 975+ 866A              //
 976+ 866A              // do
 977+ 866A              // DO  ... LOOP
 978+ 866A              // DO  ... n +LOOP
 979+ 866A              // ?DO ... LOOP
 980+ 866A              // ?DO ... n +LOOP
 981+ 866A                              Colon_Def DO, "DO", is_immediate
 981+ 866A             >                New_Def  DO, "DO", Enter_Ptr, is_immediate ; ok
 981+ 866A             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 981+ 866A             >
 981+ 866A             >                // dummy db directives used to calculate length of namec
 981+ 866A 44 4F       >                db      "DO"
 981+ 866C             >len_NFA         defl    $ - temp_NFA
 981+ 866C             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 981+ 866A             >
 981+ 866A C2          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 981+ 866B 44 4F       >                db      "DO"               // name string in 7-bit ascii, but
 981+ 866D             >                org     $-1                 // alter last byte of Name just above to set
 981+ 866C CF          >                db      {b $} | END_BIT     // msb as name end
 981+ 866D             >
 981+ 866D 43 86       >                dw      last_NFA            // Link to previous definition Name
 981+ 866F             >DO:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 981+ 866F 3B 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 981+ 8671             >                else
 981+ 8671 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 981+ 8671             >                endif           ; ok        // for other definitions it "points" the correct handler
 981+ 8671             >                // Use of "; ok" to suppress "warning[fwdref]"
 981+ 8671             >
 981+ 8671             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 982+ 8671 F2 70 6B 64                  dw      COMPILE, C_DO
 983+ 8675 26 6E 4A 6B                  dw      CSP, FETCH, STORE_CSP
 983+ 8679 4C 70
 984+ 867B 95 6E CE 6C                  dw      HERE, THREE
 985+ 867F 25 69                        dw      EXIT
 986+ 8681
 987+ 8681              //  ______________________________________________________________________
 988+ 8681              //
 989+ 8681              // loop
 990+ 8681                              Colon_Def LOOP, "LOOP", is_immediate
 990+ 8681             >                New_Def  LOOP, "LOOP", Enter_Ptr, is_immediate ; ok
 990+ 8681             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 990+ 8681             >
 990+ 8681             >                // dummy db directives used to calculate length of namec
 990+ 8681 4C 4F 4F 50 >                db      "LOOP"
 990+ 8685             >len_NFA         defl    $ - temp_NFA
 990+ 8685             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 990+ 8681             >
 990+ 8681 C4          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 990+ 8682 4C 4F 4F 50 >                db      "LOOP"               // name string in 7-bit ascii, but
 990+ 8686             >                org     $-1                 // alter last byte of Name just above to set
 990+ 8685 D0          >                db      {b $} | END_BIT     // msb as name end
 990+ 8686             >
 990+ 8686 6A 86       >                dw      last_NFA            // Link to previous definition Name
 990+ 8688             >LOOP:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 990+ 8688 3B 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 990+ 868A             >                else
 990+ 868A ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 990+ 868A             >                endif           ; ok        // for other definitions it "points" the correct handler
 990+ 868A             >                // Use of "; ok" to suppress "warning[fwdref]"
 990+ 868A             >
 990+ 868A             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 991+ 868A CE 6C A8 70                  dw      THREE, QPAIRS
 992+ 868E F2 70 F8 63                  dw      COMPILE, C_LOOP
 993+ 8692 4A 86                        dw      C_DO_BACK
 994+ 8694 25 69                        dw      EXIT
 995+ 8696
 996+ 8696              //  ______________________________________________________________________
 997+ 8696              //
 998+ 8696              // +loop
 999+ 8696                              Colon_Def PLOOP, "+LOOP", is_immediate
 999+ 8696             >                New_Def  PLOOP, "+LOOP", Enter_Ptr, is_immediate ; ok
 999+ 8696             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 999+ 8696             >
 999+ 8696             >                // dummy db directives used to calculate length of namec
 999+ 8696 2B 4C 4F 4F >                db      "+LOOP"
 999+ 869A 50          >
 999+ 869B             >len_NFA         defl    $ - temp_NFA
 999+ 869B             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 999+ 8696             >
 999+ 8696 C5          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 999+ 8697 2B 4C 4F 4F >                db      "+LOOP"               // name string in 7-bit ascii, but
 999+ 869B 50          >
 999+ 869C             >                org     $-1                 // alter last byte of Name just above to set
 999+ 869B D0          >                db      {b $} | END_BIT     // msb as name end
 999+ 869C             >
 999+ 869C 81 86       >                dw      last_NFA            // Link to previous definition Name
 999+ 869E             >PLOOP:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 999+ 869E 3B 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 999+ 86A0             >                else
 999+ 86A0 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 999+ 86A0             >                endif           ; ok        // for other definitions it "points" the correct handler
 999+ 86A0             >                // Use of "; ok" to suppress "warning[fwdref]"
 999+ 86A0             >
 999+ 86A0             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1000+ 86A0 CE 6C A8 70                  dw      THREE, QPAIRS
1001+ 86A4 F2 70 2F 64                  dw      COMPILE, C_PLOOP
1002+ 86A8 4A 86                        dw      C_DO_BACK
1003+ 86AA 25 69                        dw      EXIT
1004+ 86AC
1005+ 86AC              //  ______________________________________________________________________
1006+ 86AC              //
1007+ 86AC              // ?do
1008+ 86AC                              Colon_Def QDO, "?DO", is_immediate
1008+ 86AC             >                New_Def  QDO, "?DO", Enter_Ptr, is_immediate ; ok
1008+ 86AC             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1008+ 86AC             >
1008+ 86AC             >                // dummy db directives used to calculate length of namec
1008+ 86AC 3F 44 4F    >                db      "?DO"
1008+ 86AF             >len_NFA         defl    $ - temp_NFA
1008+ 86AF             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1008+ 86AC             >
1008+ 86AC C3          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
1008+ 86AD 3F 44 4F    >                db      "?DO"               // name string in 7-bit ascii, but
1008+ 86B0             >                org     $-1                 // alter last byte of Name just above to set
1008+ 86AF CF          >                db      {b $} | END_BIT     // msb as name end
1008+ 86B0             >
1008+ 86B0 96 86       >                dw      last_NFA            // Link to previous definition Name
1008+ 86B2             >QDO:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1008+ 86B2 3B 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
1008+ 86B4             >                else
1008+ 86B4 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
1008+ 86B4             >                endif           ; ok        // for other definitions it "points" the correct handler
1008+ 86B4             >                // Use of "; ok" to suppress "warning[fwdref]"
1008+ 86B4             >
1008+ 86B4             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1009+ 86B4 F2 70 3D 64                  dw      COMPILE, C_Q_DO
1010+ 86B8 26 6E 4A 6B                  dw      CSP, FETCH, STORE_CSP
1010+ 86BC 4C 70
1011+ 86BE 95 6E B6 6C                  dw      HERE, ZERO, COMMA, ZERO
1011+ 86C2 B1 6E B6 6C
1012+ 86C6 95 6E CE 6C                  dw      HERE, THREE
1013+ 86CA 25 69                        dw      EXIT
1014+ 86CC
1015+ 86CC              Latest_Definition:
1016+ 86CC              //  ______________________________________________________________________
1017+ 86CC              //
1018+ 86CC              // \
1019+ 86CC                              Colon_Def BACKSLASH, "\\", is_immediate  // this is a single back-slash
1019+ 86CC             >                New_Def  BACKSLASH, "\\", Enter_Ptr, is_immediate ; ok
1019+ 86CC             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1019+ 86CC             >
1019+ 86CC             >                // dummy db directives used to calculate length of namec
1019+ 86CC 5C          >                db      "\\"
1019+ 86CD             >len_NFA         defl    $ - temp_NFA
1019+ 86CD             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1019+ 86CC             >
1019+ 86CC C1          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
1019+ 86CD 5C          >                db      "\\"               // name string in 7-bit ascii, but
1019+ 86CE             >                org     $-1                 // alter last byte of Name just above to set
1019+ 86CD DC          >                db      {b $} | END_BIT     // msb as name end
1019+ 86CE             >
1019+ 86CE AC 86       >                dw      last_NFA            // Link to previous definition Name
1019+ 86D0             >BACKSLASH:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1019+ 86D0 3B 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
1019+ 86D2             >                else
1019+ 86D2 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
1019+ 86D2             >                endif           ; ok        // for other definitions it "points" the correct handler
1019+ 86D2             >                // Use of "; ok" to suppress "warning[fwdref]"
1019+ 86D2             >
1019+ 86D2             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1020+ 86D2 B5 6D 4A 6B                  dw      BLK, FETCH
1021+ 86D6 E3 63                        dw      ZBRANCH
1022+ 86D8 30 00                        dw      Backslash_Else_1 - $
1023+ 86DA B5 6D 4A 6B                  dw          BLK, FETCH, ONE, GREATER  // BLOCK 1 is used as temp-line in INCLUDE file
1023+ 86DE BE 6C 33 6F
1024+ 86E2 E3 63                        dw          ZBRANCH
1025+ 86E4 18 00                        dw          Backslash_Else_2 - $
1026+ 86E6 BE 6D 4A 6B                  dw              TO_IN, FETCH, CL, MOD, CL
1026+ 86EA EA 6C 01 7A
1026+ 86EE EA 6C
1027+ 86F0 AA 6A E8 6E                  dw              SWAP, SUBTRACT, TO_IN, PLUSSTORE
1027+ 86F4 BE 6D 27 6B
1028+ 86F8 CC 63                        dw          BRANCH
1029+ 86FA 0A 00                        dw          Backslash_Endif_2 - $
1030+ 86FC              Backslash_Else_2:
1031+ 86FC F6 6C 26 6A                  dw              BBUF, CELL_MINUS, TO_IN, STORE
1031+ 8700 BE 6D 57 6B
1032+ 8704              Backslash_Endif_2:
1033+ 8704 CC 63                        dw      BRANCH
1034+ 8706 0A 00                        dw      Backslash_Endif_1 - $
1035+ 8708              Backslash_Else_1:
1036+ 8708 A9 63 50 00                  dw          LIT, 80, TO_IN, STORE
1036+ 870C BE 6D 57 6B
1037+ 8710              Backslash_Endif_1:
1038+ 8710 25 69                        dw      EXIT
1039+ 8712
1040+ 8712              Fence_Word:
1041+ 8712              //  ______________________________________________________________________
1042+ 8712              //
1043+ 8712
1044+ 8712 00           Here_Dictionary db      0
1045+ 8713
# file closed: C:\Zx\CSpect\Projects\vForth15_INDIRECT/source/L3.asm
 113  8713
 114  8713              // now we save the compiled file so we can either run it or debug it
 115  8713                              SAVENEX OPEN "output/main.nex", ORIGIN
 116  8713                              SAVENEX CORE 3, 0, 0                                // Next core 3.0.0 required as minimum
 117  8713                              SAVENEX CFG  0
 118  8713                              SAVENEX BANK 2, 0
 119  8713                              SAVENEX AUTO
 120  8713                              SAVENEX CLOSE
 121  8713
 122  8713              //              PAGE 7 ;set 7 page to current slot
 123  8713              //              SAVEBIN "ram7.bin",$C000,$4000 ;- save 4000h begin from C000h of RAM to file
 124  8713              //              SAVEBIN "output/ram2.bin", $8000, 9800 ;- save 3000h begin from 8000h of RAM to file
 125  8713
 126  8713                              SAVETAP "output/F15e.tap", CODE, "forth15e", ORIGIN, 10000
 127  8713
 128  8713                              SAVEBIN "output/forth15e.bin", ORIGIN, 10000
 129  8713
 130  8713                              END
# file closed: C:\Zx\CSpect\Projects\vForth15_INDIRECT/source/main.asm
