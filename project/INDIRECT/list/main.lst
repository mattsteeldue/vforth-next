# file opened: C:\Zx\CSpect\Projects\vForth15_INDIRECT/source/main.asm
   1  0000              //  ______________________________________________________________________
   2  0000              //
   3  0000              //  main.asm
   4  0000              //  ______________________________________________________________________
   5  0000              //
   6  0000              //  v-Forth 1.5 NextZXOS version
   7  0000              //  build 20220528
   8  0000              //
   9  0000              //  Inirect-Thread version.
  10  0000              //
  11  0000              //  NextZXOS version
  12  0000              //  ______________________________________________________________________
  13  0000              //
  14  0000              //  This work is available as-is with no whatsoever warranty.
  15  0000              //  Copying, modifying and distributing this software is allowed
  16  0000              //  provided that the copyright notice is kept.
  17  0000              //  ______________________________________________________________________
  18  0000              //
  19  0000              //  by Matteo Vitturi, 1990-2022
  20  0000              //
  21  0000              //  https://sites.google.com/view/vforth/vforth15-next
  22  0000              //  https://www.oocities.org/matteo_vitturi/english/index.htm
  23  0000              //
  24  0000              //  This is the complete compiler for v.Forth for SINCLAIR ZX Spectrum Next.
  25  0000              //  Each line of this source list mustn't exceed 80 bytes.
  26  0000              //  Z80N (ZX Spectrum Next) extension is available.
  27  0000              //
  28  0000              //  This list has been tested using the following configuration:
  29  0000              //      - CSpect emulator V.2.12.30
  30  0000              //  ______________________________________________________________________
  31  0000              //
  32  0000              //  Z80 Registers usage map
  33  0000              //
  34  0000              //  AF
  35  0000              //  BC - Instruction Pointer: should be preserved during ROM/OS calls
  36  0000              //  DE - Working
  37  0000              //  HL - Working
  38  0000              //
  39  0000              //  AF'- Sometime used for backup purpose
  40  0000              //  BC'- Not used
  41  0000              //  DE'- Not used
  42  0000              //  HL'- Not used: (saved at startup)
  43  0000              //
  44  0000              //  SP - Calculator Stack Pointer
  45  0000              //  IX - Inner interpreter "next" address pointer. This way jp (ix) is 2T-state faster than JP next
  46  0000              //  IY - (ZX System: must be preserved to interact with standard ROM)
  47  0000              //
  48  0000              //  ______________________________________________________________________
  49  0000              //
  50  0000              //  _________________
  51  0000              //
  52  0000              //  FORTH DEFINITIONS
  53  0000              //  _________________
  54  0000
  55  0000                              OPT     --zxnext
  56  0000              //  ______________________________________________________________________
  57  0000              //
  58  0000              // this controls some debugging code in L0.asm
  59  0000              //  0 for final binary release.
  60  0000              //  1 for debugging with Visual Studio Code and DeZog
  61  0000              // -1 for for binary comparison with Forth generated code.
  62  0000              DEBUGGING       equ     -1
  63  0000              //
  64  0000              //  ______________________________________________________________________
  65  0000
  66  0000                              if ( -1 == DEBUGGING )
  67  0000              ORIGIN          equ     $62E6                   // for binary comparison
  68  0000                              endif
  69  0000              //  ______________________________________________________________________
  70  0000
  71  0000                              if (  0 == DEBUGGING )
  72  0000 ~            ORIGIN          equ     $6366                   // binary
  73  0000                              endif
  74  0000              //  ______________________________________________________________________
  75  0000
  76  0000                              if (  1 == DEBUGGING )
  77  0000 ~            ORIGIN          equ     $8080                   // for DeZog
  78  0000                              endif
  79  0000              //  ______________________________________________________________________
  80  0000
  81  0000                              DEVICE  ZXSPECTRUMNEXT
  82  0000
  83  0000                              ORG     ORIGIN
  84  62E6
  85  62E6                              if ( -1 == DEBUGGING )
  86  62E6 00 00 00...                  ds 128                            // for binary comparison
  87  62EA                              endif
  88  6366
  89  6366              //  ______________________________________________________________________
  90  6366              //
  91  6366              //  Naming convention for Label vs Forth correspondance
  92  6366              //  Forth words are named as they are named for real with some exception to avoid assembler syntax errors.
  93  6366              //    - Leading "0" is converted into "Z_"
  94  6366              //    - Leading "(" is converted into "C_", closing bracket is omitted
  95  6366              //    - Leading numbers are converted in letters: ONE_  TWO_ etc.
  96  6366              //    - Question mark "?" is converted into "Q" or omitted if needed / useful.
  97  6366              //    - Plus sign "+" is converted in _PLUS or ADD_ depending.
  98  6366              //    - Minus sign "-" in L (for Line), MINUS or SUBTRACT depending
  99  6366              //    - Greater-Than sign ">" in _GREATER or TO_ depending
 100  6366              //    - Equal sign "=" is converted in EQUAL
 101  6366              //    - Less-Than sign "<" in _LESS or FROM_ (or TO_ again) depending
 102  6366              //    - Asterisk sign "*" is converted in _MUL or STAR
 103  6366              //    - Slash "/" is converted in _DIV or omitted if it is clear what it means
 104  6366              //    - Exclamation mark "!" is converted in STORE
 105  6366              //    - At-Sign "@" is converted in FETCH
 106  6366              //    - Words that collide with Assembler are normally suffixed with "_OP"
 107  6366
 108  6366                              include "system.asm"
# file opened: C:\Zx\CSpect\Projects\vForth15_INDIRECT/source/system.asm
   1+ 6366              //  ______________________________________________________________________
   2+ 6366              //
   3+ 6366              //  system.asm
   4+ 6366              //  ______________________________________________________________________
   5+ 6366
   6+ 6366              // Registers:
   7+ 6366              //
   8+ 6366              //      BC: Instruction Pointer
   9+ 6366              //      DE:
  10+ 6366              //      HL: W register
  11+ 6366              //      SP: Calc stack Pointer
  12+ 6366              //      IX: Inner-Interpreter Address
  13+ 6366
  14+ 6366              //  ______________________________________________________________________
  15+ 6366              //
  16+ 6366              // ZX-Spectrum standard system variables
  17+ 6366              SCR_CT          equ     $5C8C                   // SCR-CT system variable
  18+ 6366              LASTK           equ     $5C08                   // LASTK system variable
  19+ 6366              BORDCR          equ     $5C48                   // BORDCR system variable
  20+ 6366              FLAGS2          equ     $5C6A                   // for caps-lock
  21+ 6366
  22+ 6366              //  ______________________________________________________________________
  23+ 6366              //
  24+ 6366              // Flag constants
  25+ 6366              TRUE_FLAG       equ     $FFFF
  26+ 6366              FALSE_FLAG      equ     $0000
  27+ 6366
  28+ 6366              //  ______________________________________________________________________
  29+ 6366              //
  30+ 6366              // Ascii char constants
  31+ 6366              NUL_CHAR        equ     $00
  32+ 6366              COMMA_CHAR      equ     $06
  33+ 6366              BACKSPACE_CHAR  equ     $08
  34+ 6366              CR_CHAR         equ     $0D
  35+ 6366              BLANK_CHAR      equ     $20
  36+ 6366              QUOTE_CHAR      equ     "'"
  37+ 6366              DQUOTE_CHAR     equ     '"'
  38+ 6366              UNDERSCORE_CHAR equ     $5F
  39+ 6366              SOLIDBLOCK_CHAR equ     $8F
  40+ 6366              HALFBLOCK_CHAR  equ     $8C
  41+ 6366              LC_A_CHAR       equ     $61                 // lower-case "a"
  42+ 6366              LC_Z_CHAR       equ     $7A                 // lower-case "z"
  43+ 6366
  44+ 6366
  45+ 6366              //  ______________________________________________________________________
  46+ 6366              //
  47+ 6366
  48+ 6366                              // emulate something like:  ld hl,rp
  49+ 6366              ldhlrp          macro
  50+ 6366 ~                            ld      hl,(RP_Pointer)
  51+ 6366                              endm
  52+ 6366
  53+ 6366                              // emulate something like:  ld rp,hl
  54+ 6366              ldrphl          macro
  55+ 6366 ~                            ld      (RP_Pointer),hl
  56+ 6366                              endm
  57+ 6366
  58+ 6366              //  ______________________________________________________________________
  59+ 6366              //
  60+ 6366              //  Inner interpreter next-address pointer. This is 2T-state faster than "jp address"
  61+ 6366              next            macro
  62+ 6366 ~                            jp      (ix)
  63+ 6366                              endm
  64+ 6366
  65+ 6366              psh1            macro
  66+ 6366 ~                            push    hl
  67+ 6366 ~                            jp      (ix)
  68+ 6366                              endm
  69+ 6366
  70+ 6366              psh2            macro
  71+ 6366 ~                            push    de
  72+ 6366 ~                            push    hl
  73+ 6366 ~                            jp      (ix)
  74+ 6366                              endm
  75+ 6366
  76+ 6366              //  ______________________________________________________________________
  77+ 6366              //
  78+ 6366              // Bit constants in length-byte
  79+ 6366
  80+ 6366              SMUDGE_BIT      equ     %00100000               // $20
  81+ 6366              IMMEDIATE_BIT   equ     %01000000               // $40
  82+ 6366              END_BIT         equ     %10000000               // $80
  83+ 6366
  84+ 6366
  85+ 6366              //  ______________________________________________________________________
  86+ 6366              //
  87+ 6366              //  To create Forth words using this (nice) Assembler, we have to use the two following
  88+ 6366              //  pointers
  89+ 6366              temp_NFA        defl    0
  90+ 6366              last_NFA        defl    0
  91+ 6366              len_NFA         defl    0
  92+ 6366
  93+ 6366              is_code         equ     0                   // so the direct machine-code starts at CFA
  94+ 6366              is_normal       equ     0                   // so the direct machine-code starts at CFA
  95+ 6366              is_immediate    equ     IMMEDIATE_BIT       // $40 - the definition is IMMEDIATE.
  96+ 6366
  97+ 6366              //  ______________________________________________________________________
  98+ 6366              //
  99+ 6366              //  Create a new "low-level" definition
 100+ 6366              //  This macro is used in the form  Create FORTH_NAME,n,"forth_name"
 101+ 6366              //  to create a new Forth Dictionary entry the same way Forth itself would do.
 102+ 6366              //  A word begins with a Length-Byte in range 1-31. Top 3 msb are used as flags
 103+ 6366              //  see SMUDGE_BIT and IMMEDIATE_BIT constant above.
 104+ 6366              //  It is followed by the Name of the word, i.e. a string expressed in 7-bit Ascii.
 105+ 6366              //  The last character of the Name must have the msb set to signal the end of it (END_BIT)
 106+ 6366              //  This macro acts much like the standard Forth definition CREATE
 107+ 6366
 108+ 6366              New_Def         macro   label, namec, runcode, bits
 109+ 6366 ~            temp_NFA        defl    $                   // save this NFA address to temp_NFA
 110+ 6366 ~
 111+ 6366 ~                            // dummy db directives used to calculate length of namec
 112+ 6366 ~                            db      namec
 113+ 6366 ~            len_NFA         defl    $ - temp_NFA
 114+ 6366 ~                            org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 115+ 6366 ~
 116+ 6366 ~                            db      len_NFA | END_BIT | bits  // The start of NFA must have msb set to signal the beginning of the sounted string
 117+ 6366 ~                            db      namec               // name string in 7-bit ascii, but
 118+ 6366 ~                            org     $-1                 // alter last byte of Name just above to set
 119+ 6366 ~                            db      {b $} | END_BIT     // msb as name end
 120+ 6366 ~
 121+ 6366 ~                            dw      last_NFA            // Link to previous definition Name
 122+ 6366 ~            label:          if runcode != 0 ; ok        // This is the start address of the direct jp(hl)
 123+ 6366 ~                            dw      runcode ; ok        // for primitive definitions  actual code
 124+ 6366 ~                            else
 125+ 6366 ~                            dw      $ + 2   ; ok        // is pointed by CFA
 126+ 6366 ~                            endif           ; ok        // for other definitions it "points" the correct handler
 127+ 6366 ~                            // Use of "; ok" to suppress "warning[fwdref]"
 128+ 6366 ~
 129+ 6366 ~            last_NFA        defl    temp_NFA            // keep track of NFA saved above
 130+ 6366                              endm
 131+ 6366
 132+ 6366              //  ______________________________________________________________________
 133+ 6366              //
 134+ 6366              // Create a "constant"
 135+ 6366              // The constant value is compiled in first PFA cell
 136+ 6366              Constant_Def    macro   label, namec, constant_value
 137+ 6366 ~                            New_Def  label, namec, Constant_Ptr, is_normal
 138+ 6366 ~                            dw      constant_value
 139+ 6366                              endm
 140+ 6366
 141+ 6366              //  ______________________________________________________________________
 142+ 6366              //
 143+ 6366              // Create a "variable"
 144+ 6366              // The when invoked, a variable returns a pointer, the address of first PFA cell
 145+ 6366              // this allow creation of "variables" which content is  of any length
 146+ 6366              Variable_Def    macro   label, namec, initial_value
 147+ 6366 ~                            New_Def  label, namec, Variable_Ptr, is_normal
 148+ 6366 ~                            dw      initial_value
 149+ 6366                              endm
 150+ 6366
 151+ 6366              //  ______________________________________________________________________
 152+ 6366              //
 153+ 6366              // Create a "user"
 154+ 6366              // It uses a single byte as offset to calculate the address of the variable
 155+ 6366              User_Def        macro   label, namec, offset_value
 156+ 6366 ~                            New_Def  label, namec, User_Ptr, is_normal
 157+ 6366 ~                            db      offset_value
 158+ 6366                              endm
 159+ 6366
 160+ 6366              //  ______________________________________________________________________
 161+ 6366              //
 162+ 6366              // Create a "colon-definition"
 163+ 6366              // The CFA contains a small routine i.e. "call Enter_Ptr".
 164+ 6366              // The PFA, three bytes later, contains the actual Forth definition
 165+ 6366              Colon_Def       macro   label, namec, bits
 166+ 6366 ~                            New_Def  label, namec, Enter_Ptr, bits ; ok
 167+ 6366                              endm
 168+ 6366
 169+ 6366              //  ______________________________________________________________________
 170+ 6366              //
 171+ 6366
 172+ 6366              S0_system:      equ     $D0E8               // Address of top of Calc Stack
 173+ 6366              TIB_system      equ     $D0E8               // TIB grows upwards, Return-Stack downward.
 174+ 6366              R0_system:      equ     $D188               // Address of top of Return Stack. This is S0 + $00A0
 175+ 6366              USER_system:    equ     $D188               // User variables zone.
 176+ 6366              FIRST_system:   equ     $D1E4               // Address of first BUFFER
 177+ 6366              LIMIT_system:   equ     $E000               // Address of first byte beyond last BUFFER
 178+ 6366
# file closed: C:\Zx\CSpect\Projects\vForth15_INDIRECT/source/system.asm
 109  6366                              include "L0.asm"
# file opened: C:\Zx\CSpect\Projects\vForth15_INDIRECT/source/L0.asm
   1+ 6366              //  ______________________________________________________________________
   2+ 6366              //
   3+ 6366              //  L0.asm
   4+ 6366              //
   5+ 6366              //  Origin-Area and Level-0 definitions
   6+ 6366              //  ______________________________________________________________________
   7+ 6366
   8+ 6366
   9+ 6366              Cold_origin:
  10+ 6366 A7                           and     a
  11+ 6367 C3 42 79                     jp      ColdRoutine
  12+ 636A              Warm_origin:
  13+ 636A 37                           scf
  14+ 636B C3 42 79                     jp      WarmRoutine
  15+ 636E
  16+ 636E              // +008
  17+ 636E E6 D0        SP_Basic:       dw      $D0E6               // These are bits with some "standard" meaning... 0101
  18+ 6370
  19+ 6370              // +00A
  20+ 6370 00 0E                        dw      $0E00
  21+ 6372
  22+ 6372              // +00C
  23+ 6372 23 87        Latest_origin:  dw      Latest_Definition   // Latest word (used in Cold_Start)
  24+ 6374
  25+ 6374              // +00E
  26+ 6374 0C 00        DEL_Char_Ptr:   dw      $000C               // This is the characther used as "Back-Space"
  27+ 6376
  28+ 6376              // +010
  29+ 6376 50 B2        CPU_Id          dw      $B250               // Z80 expressed in base 36
  30+ 6378
  31+ 6378              // +012
  32+ 6378 E8 D0        S0_origin:      dw      S0_system
  33+ 637A 88 D1        R0_origin:      dw      R0_system
  34+ 637C E8 D0        TIB_origin:     dw      TIB_system
  35+ 637E 1F 00        WIDTH_origin:   dw      31
  36+ 6380 01 00        WARNING_origin: dw      1
  37+ 6382 69 87        FENCE_origin:   dw      Fence_Word
  38+ 6384 69 87        DP_origin       dw      Fence_Word
  39+ 6386 50 78        VOCLINK_origin: dw      Voclink_Ptr
  40+ 6388 E4 D1                        dw      FIRST_system
  41+ 638A 00 E0                        dw      LIMIT_system
  42+ 638C
  43+ 638C              // +026
  44+ 638C 8F           Block_Face:     db      SOLIDBLOCK_CHAR     // Caps-Lock   Cursor face
  45+ 638D 8C           Half_Face:      db      HALFBLOCK_CHAR      // Caps-unlock Cursor face
  46+ 638E 5F           Underscore_Face:db      UNDERSCORE_CHAR     // Underscore  Cursor face
  47+ 638F 00                           db      0
  48+ 6390
  49+ 6390              // +02A
  50+ 6390 00 00        IX_Echo:        dw      $0000               // Echo IX after NextOS call
  51+ 6392
  52+ 6392              // +02C
  53+ 6392 00 00        SP_Saved:       dw      $0000               // Saved SP dufing NextOS call
  54+ 6394
  55+ 6394              // +02E
  56+ 6394 88 D1        USER_Pointer:   dw      USER_system
  57+ 6396
  58+ 6396              // +030
  59+ 6396 88 D1        RP_Pointer:     dw      $d188 // R0_system
  60+ 6398
  61+ 6398              // +32
  62+ 6398              // SP_Basic        dw      0
  63+ 6398
  64+ 6398
  65+ 6398              //  ______________________________________________________________________
  66+ 6398
  67+ 6398              // from this point we can use LDHLRP and LDRPHL Assembler macros
  68+ 6398              // instead of their equivalent long sequences.
  69+ 6398
  70+ 6398              //  ______________________________________________________________________
  71+ 6398
  72+ 6398              // address for "next" - inner interpreter
  73+ 6398              // This address must always be pointed by IX
  74+ 6398              // "next" macro simply does a  jp(ix)  instruction
  75+ 6398
  76+ 6398              // Psh2_Ptr:       push    de
  77+ 6398              // Psh1_Ptr:       push    hl
  78+ 6398
  79+ 6398              Next_Ptr:       // This address must always be kept in IX: "next" relies on that
  80+ 6398
  81+ 6398                              if ( 1 == DEBUGGING )
  82+ 6398 ~                            ld      hl, Next_Breakpoint_1
  83+ 6398 ~                            and     a
  84+ 6398 ~                            sbc     hl, bc
  85+ 6398 ~                            jr      nz, Next_Continue
  86+ 6398 ~                            nop // This is where you have to put a real breakpoint to intercept BC values...
  87+ 6398                              endif
  88+ 6398
  89+ 6398              Next_Continue:
  90+ 6398 0A                           ld      a, (bc)
  91+ 6399 03                           inc     bc
  92+ 639A 6F                           ld      l, a
  93+ 639B 0A                           ld      a, (bc)
  94+ 639C 03                           inc     bc
  95+ 639D 67                           ld      h, a                // hl contains a CFA (xt) of word being executed
  96+ 639E
  97+ 639E              // Execute xt i.e. CFA held in HL
  98+ 639E              Exec_Ptr:
  99+ 639E 5E                           ld      e, (hl)
 100+ 639F 23                           inc     hl
 101+ 63A0 56                           ld      d, (hl)
 102+ 63A1 EB                           ex      de, hl
 103+ 63A2 E9                           jp      (hl)                // and jump to it
 104+ 63A3                                                          // there you'll find the real code or a CALL to a ;code part
 105+ 63A3
 106+ 63A3              //  ______________________________________________________________________
 107+ 63A3              //
 108+ 63A3              // lit          -- x
 109+ 63A3              // puts on top of stack the value of the following word.
 110+ 63A3              // it is compiled in colon definition before a literal number
 111+ 63A3
 112+ 63A3                              New_Def  LIT, "LIT", is_code, is_normal
 112+ 63A3             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 112+ 63A3             >
 112+ 63A3             >                // dummy db directives used to calculate length of namec
 112+ 63A3 4C 49 54    >                db      "LIT"
 112+ 63A6             >len_NFA         defl    $ - temp_NFA
 112+ 63A6             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 112+ 63A3             >
 112+ 63A3 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 112+ 63A4 4C 49 54    >                db      "LIT"               // name string in 7-bit ascii, but
 112+ 63A7             >                org     $-1                 // alter last byte of Name just above to set
 112+ 63A6 D4          >                db      {b $} | END_BIT     // msb as name end
 112+ 63A7             >
 112+ 63A7 00 00       >                dw      last_NFA            // Link to previous definition Name
 112+ 63A9             >LIT:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 112+ 63A9 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
 112+ 63A9             >                else
 112+ 63A9 AB 63       >                dw      $ + 2   ; ok        // is pointed by CFA
 112+ 63AB             >                endif           ; ok        // for other definitions it "points" the correct handler
 112+ 63AB             >                // Use of "; ok" to suppress "warning[fwdref]"
 112+ 63AB             >
 112+ 63AB             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 113+ 63AB
 114+ 63AB 0A                           ld      a, (bc)
 115+ 63AC 03                           inc     bc
 116+ 63AD 6F                           ld      l, a
 117+ 63AE 0A                           ld      a, (bc)
 118+ 63AF 03                           inc     bc
 119+ 63B0 67                           ld      h, a
 120+ 63B1                              psh1
 120+ 63B1 E5          >                push    hl
 120+ 63B2 DD E9       >                jp      (ix)
 121+ 63B4
 122+ 63B4              //  ______________________________________________________________________
 123+ 63B4              //
 124+ 63B4              // execute      i*x xt -- j*x
 125+ 63B4              // execution token. usually xt is given by CFA
 126+ 63B4
 127+ 63B4                              New_Def  EXECUTE, "EXECUTE", is_code, is_normal
 127+ 63B4             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 127+ 63B4             >
 127+ 63B4             >                // dummy db directives used to calculate length of namec
 127+ 63B4 45 58 45 43 >                db      "EXECUTE"
 127+ 63B8 55 54 45    >
 127+ 63BB             >len_NFA         defl    $ - temp_NFA
 127+ 63BB             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 127+ 63B4             >
 127+ 63B4 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 127+ 63B5 45 58 45 43 >                db      "EXECUTE"               // name string in 7-bit ascii, but
 127+ 63B9 55 54 45    >
 127+ 63BC             >                org     $-1                 // alter last byte of Name just above to set
 127+ 63BB C5          >                db      {b $} | END_BIT     // msb as name end
 127+ 63BC             >
 127+ 63BC A3 63       >                dw      last_NFA            // Link to previous definition Name
 127+ 63BE             >EXECUTE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 127+ 63BE ~           >                dw      runcode ; ok        // for primitive definitions  actual code
 127+ 63BE             >                else
 127+ 63BE C0 63       >                dw      $ + 2   ; ok        // is pointed by CFA
 127+ 63C0             >                endif           ; ok        // for other definitions it "points" the correct handler
 127+ 63C0             >                // Use of "; ok" to suppress "warning[fwdref]"
 127+ 63C0             >
 127+ 63C0             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 128+ 63C0 E1                           pop     hl
 129+ 63C1 18 DB                        jr      Exec_Ptr
 130+ 63C3
 131+ 63C3
 132+ 63C3              //  ______________________________________________________________________
 133+ 63C3              //
 134+ 63C3              // (+loop)       --
 135+ 63C3              // compiled by +LOOP. it uses the top two values of return-stack to
 136+ 63C3              // keep track of index and limit, they are accessed via I and I'
 137+ 63C3                              New_Def C_PLOOP, "(+LOOP)", is_code, is_normal
 137+ 63C3             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 137+ 63C3             >
 137+ 63C3             >                // dummy db directives used to calculate length of namec
 137+ 63C3 28 2B 4C 4F >                db      "(+LOOP)"
 137+ 63C7 4F 50 29    >
 137+ 63CA             >len_NFA         defl    $ - temp_NFA
 137+ 63CA             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 137+ 63C3             >
 137+ 63C3 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 137+ 63C4 28 2B 4C 4F >                db      "(+LOOP)"               // name string in 7-bit ascii, but
 137+ 63C8 4F 50 29    >
 137+ 63CB             >                org     $-1                 // alter last byte of Name just above to set
 137+ 63CA A9          >                db      {b $} | END_BIT     // msb as name end
 137+ 63CB             >
 137+ 63CB B4 63       >                dw      last_NFA            // Link to previous definition Name
 137+ 63CD             >C_PLOOP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 137+ 63CD ~           >                dw      runcode ; ok        // for primitive definitions  actual code
 137+ 63CD             >                else
 137+ 63CD CF 63       >                dw      $ + 2   ; ok        // is pointed by CFA
 137+ 63CF             >                endif           ; ok        // for other definitions it "points" the correct handler
 137+ 63CF             >                // Use of "; ok" to suppress "warning[fwdref]"
 137+ 63CF             >
 137+ 63CF             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 138+ 63CF
 139+ 63CF              Loop_Ptr:
 140+ 63CF D9                           exx
 141+ 63D0                              ldhlrp                      // ld hl,rp macro 30h +Origin
 141+ 63D0 2A 96 63    >                ld      hl,(RP_Pointer)
 142+ 63D3
 143+ 63D3 C1                           pop     bc                  // bc is increment
 144+ 63D4
 145+ 63D4 5E                           ld      e, (hl)             // hl points to loop-index, add increment to it.
 146+ 63D5 7B                           ld      a, e                // de keeps index before increment.
 147+ 63D6 81                           add     c
 148+ 63D7 77                           ld      (hl), a
 149+ 63D8 23                           inc     hl
 150+ 63D9 56                           ld      d, (hl)
 151+ 63DA 7A                           ld      a, d
 152+ 63DB 88                           adc     b
 153+ 63DC 77                           ld      (hl),a
 154+ 63DD 23                           inc     hl
 155+ 63DE
 156+ 63DE 7B                           ld      a, e
 157+ 63DF 96                           sub     (hl)
 158+ 63E0 5F                           ld      e, a
 159+ 63E1 23                           inc     hl
 160+ 63E2 7A                           ld      a, d
 161+ 63E3 9E                           sbc     (hl)
 162+ 63E4 57                           ld      d, a                // DE is index - limit : limit is the "new zero"
 163+ 63E5
 164+ 63E5 EB                           ex      de, hl
 165+ 63E6 09                           add     hl, bc
 166+ 63E7
 167+ 63E7 CB 78                        bit     7, b                // keep increment-sign just before overwriting d
 168+ 63E9 28 01                        jr      z, Loop_NegativeIncrement
 169+ 63EB 3F                               ccf
 170+ 63EC              Loop_NegativeIncrement:
 171+ 63EC 38 03                        jr      c, Loop_Endif
 172+ 63EE D9                               exx
 173+ 63EF 18 26                            jr      Branch_Ptr      // perform branch consuming following cell
 174+ 63F1              Loop_Endif:
 175+ 63F1 EB                           ex      de, hl
 176+ 63F2 23                           inc     hl
 177+ 63F3                              ldrphl                      // ld rp,hl macro 30h +Origin
 177+ 63F3 22 96 63    >                ld      (RP_Pointer),hl
 178+ 63F6 D9                           exx
 179+ 63F7 03                           inc     bc                  // skip branch-style offset
 180+ 63F8 03                           inc     bc
 181+ 63F9                              next
 181+ 63F9 DD E9       >                jp      (ix)
 182+ 63FB
 183+ 63FB              //  ______________________________________________________________________
 184+ 63FB              //
 185+ 63FB              // (loop)       n --
 186+ 63FB              // same as (LOOP) but index is incremented by 1
 187+ 63FB              // compiled by LOOP.
 188+ 63FB                              New_Def C_LOOP, "(LOOP)", is_code, is_normal
 188+ 63FB             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 188+ 63FB             >
 188+ 63FB             >                // dummy db directives used to calculate length of namec
 188+ 63FB 28 4C 4F 4F >                db      "(LOOP)"
 188+ 63FF 50 29       >
 188+ 6401             >len_NFA         defl    $ - temp_NFA
 188+ 6401             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 188+ 63FB             >
 188+ 63FB 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 188+ 63FC 28 4C 4F 4F >                db      "(LOOP)"               // name string in 7-bit ascii, but
 188+ 6400 50 29       >
 188+ 6402             >                org     $-1                 // alter last byte of Name just above to set
 188+ 6401 A9          >                db      {b $} | END_BIT     // msb as name end
 188+ 6402             >
 188+ 6402 C3 63       >                dw      last_NFA            // Link to previous definition Name
 188+ 6404             >C_LOOP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 188+ 6404 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
 188+ 6404             >                else
 188+ 6404 06 64       >                dw      $ + 2   ; ok        // is pointed by CFA
 188+ 6406             >                endif           ; ok        // for other definitions it "points" the correct handler
 188+ 6406             >                // Use of "; ok" to suppress "warning[fwdref]"
 188+ 6406             >
 188+ 6406             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 189+ 6406 ED 8A 00 01                  push    1
 190+ 640A 18 C3                        jr      Loop_Ptr
 191+ 640C
 192+ 640C              //  ______________________________________________________________________
 193+ 640C              //
 194+ 640C              // branch       --
 195+ 640C              // unconditional branch in colon definition using the following cell as an offset from current IP value
 196+ 640C              // compiled by ELSE, AGAIN and some other immediate words
 197+ 640C
 198+ 640C                              New_Def BRANCH, "BRANCH", is_code, is_normal
 198+ 640C             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 198+ 640C             >
 198+ 640C             >                // dummy db directives used to calculate length of namec
 198+ 640C 42 52 41 4E >                db      "BRANCH"
 198+ 6410 43 48       >
 198+ 6412             >len_NFA         defl    $ - temp_NFA
 198+ 6412             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 198+ 640C             >
 198+ 640C 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 198+ 640D 42 52 41 4E >                db      "BRANCH"               // name string in 7-bit ascii, but
 198+ 6411 43 48       >
 198+ 6413             >                org     $-1                 // alter last byte of Name just above to set
 198+ 6412 C8          >                db      {b $} | END_BIT     // msb as name end
 198+ 6413             >
 198+ 6413 FB 63       >                dw      last_NFA            // Link to previous definition Name
 198+ 6415             >BRANCH:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 198+ 6415 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
 198+ 6415             >                else
 198+ 6415 17 64       >                dw      $ + 2   ; ok        // is pointed by CFA
 198+ 6417             >                endif           ; ok        // for other definitions it "points" the correct handler
 198+ 6417             >                // Use of "; ok" to suppress "warning[fwdref]"
 198+ 6417             >
 198+ 6417             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 199+ 6417              Branch_Ptr:
 200+ 6417 60                           ld      h, b
 201+ 6418 69                           ld      l, c
 202+ 6419 5E                           ld      e, (hl)
 203+ 641A 23                           inc     hl
 204+ 641B 56                           ld      d, (hl)
 205+ 641C 2B                           dec     hl                  // offset is calculated from current IP
 206+ 641D 19                           add     hl, de
 207+ 641E 4D                           ld      c, l
 208+ 641F 44                           ld      b, h
 209+ 6420                              next
 209+ 6420 DD E9       >                jp      (ix)
 210+ 6422
 211+ 6422
 212+ 6422              //  ______________________________________________________________________
 213+ 6422              //
 214+ 6422              // 0branch      f --
 215+ 6422              // conditional branch if the top-of-stack is ZERO or FALSE.
 216+ 6422              // compiled by IF, UNTIL and some other immediate words
 217+ 6422
 218+ 6422                              New_Def ZBRANCH, "0BRANCH", is_code, is_normal
 218+ 6422             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 218+ 6422             >
 218+ 6422             >                // dummy db directives used to calculate length of namec
 218+ 6422 30 42 52 41 >                db      "0BRANCH"
 218+ 6426 4E 43 48    >
 218+ 6429             >len_NFA         defl    $ - temp_NFA
 218+ 6429             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 218+ 6422             >
 218+ 6422 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 218+ 6423 30 42 52 41 >                db      "0BRANCH"               // name string in 7-bit ascii, but
 218+ 6427 4E 43 48    >
 218+ 642A             >                org     $-1                 // alter last byte of Name just above to set
 218+ 6429 C8          >                db      {b $} | END_BIT     // msb as name end
 218+ 642A             >
 218+ 642A 0C 64       >                dw      last_NFA            // Link to previous definition Name
 218+ 642C             >ZBRANCH:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 218+ 642C ~           >                dw      runcode ; ok        // for primitive definitions  actual code
 218+ 642C             >                else
 218+ 642C 2E 64       >                dw      $ + 2   ; ok        // is pointed by CFA
 218+ 642E             >                endif           ; ok        // for other definitions it "points" the correct handler
 218+ 642E             >                // Use of "; ok" to suppress "warning[fwdref]"
 218+ 642E             >
 218+ 642E             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 219+ 642E              ZBranch_Ptr:
 220+ 642E E1                           pop     hl
 221+ 642F 7D                           ld      a, l
 222+ 6430 B4                           or      h
 223+ 6431 28 E4                        jr      z, Branch_Ptr
 224+ 6433 03                           inc     bc                  // if not branch, skip offset cell.
 225+ 6434 03                           inc     bc
 226+ 6435                              next
 226+ 6435 DD E9       >                jp      (ix)
 227+ 6437
 228+ 6437              //  ______________________________________________________________________
 229+ 6437              //
 230+ 6437              // (leave)        --
 231+ 6437              // compiled by LEAVE
 232+ 6437              // this forces to exit from loop and jump past
 233+ 6437                              New_Def C_LEAVE, "(LEAVE)", is_code, is_normal
 233+ 6437             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 233+ 6437             >
 233+ 6437             >                // dummy db directives used to calculate length of namec
 233+ 6437 28 4C 45 41 >                db      "(LEAVE)"
 233+ 643B 56 45 29    >
 233+ 643E             >len_NFA         defl    $ - temp_NFA
 233+ 643E             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 233+ 6437             >
 233+ 6437 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 233+ 6438 28 4C 45 41 >                db      "(LEAVE)"               // name string in 7-bit ascii, but
 233+ 643C 56 45 29    >
 233+ 643F             >                org     $-1                 // alter last byte of Name just above to set
 233+ 643E A9          >                db      {b $} | END_BIT     // msb as name end
 233+ 643F             >
 233+ 643F 22 64       >                dw      last_NFA            // Link to previous definition Name
 233+ 6441             >C_LEAVE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 233+ 6441 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
 233+ 6441             >                else
 233+ 6441 43 64       >                dw      $ + 2   ; ok        // is pointed by CFA
 233+ 6443             >                endif           ; ok        // for other definitions it "points" the correct handler
 233+ 6443             >                // Use of "; ok" to suppress "warning[fwdref]"
 233+ 6443             >
 233+ 6443             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 234+ 6443
 235+ 6443                              ldhlrp
 235+ 6443 2A 96 63    >                ld      hl,(RP_Pointer)
 236+ 6446 11 04 00                     ld      de, 4
 237+ 6449 19                           add     hl, de
 238+ 644A                              ldrphl
 238+ 644A 22 96 63    >                ld      (RP_Pointer),hl
 239+ 644D
 240+ 644D 18 C8                        jr      Branch_Ptr       // perform branch consuming following cell
 241+ 644F                              next
 241+ 644F DD E9       >                jp      (ix)
 242+ 6451
 243+ 6451              //  ______________________________________________________________________
 244+ 6451              //
 245+ 6451              // (?do)        lim ind --
 246+ 6451              // compiled by ?DO to make a loop checking for lim == ind first
 247+ 6451              // at run-time (?DO) must be followed by a BRANCH offset
 248+ 6451              // used to skip the loop if lim == ind
 249+ 6451                              New_Def C_Q_DO, "(?DO)", is_code, is_normal
 249+ 6451             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 249+ 6451             >
 249+ 6451             >                // dummy db directives used to calculate length of namec
 249+ 6451 28 3F 44 4F >                db      "(?DO)"
 249+ 6455 29          >
 249+ 6456             >len_NFA         defl    $ - temp_NFA
 249+ 6456             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 249+ 6451             >
 249+ 6451 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 249+ 6452 28 3F 44 4F >                db      "(?DO)"               // name string in 7-bit ascii, but
 249+ 6456 29          >
 249+ 6457             >                org     $-1                 // alter last byte of Name just above to set
 249+ 6456 A9          >                db      {b $} | END_BIT     // msb as name end
 249+ 6457             >
 249+ 6457 37 64       >                dw      last_NFA            // Link to previous definition Name
 249+ 6459             >C_Q_DO:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 249+ 6459 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
 249+ 6459             >                else
 249+ 6459 5B 64       >                dw      $ + 2   ; ok        // is pointed by CFA
 249+ 645B             >                endif           ; ok        // for other definitions it "points" the correct handler
 249+ 645B             >                // Use of "; ok" to suppress "warning[fwdref]"
 249+ 645B             >
 249+ 645B             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 250+ 645B D1                           pop     de                  // de has the index
 251+ 645C E1                           pop     hl                  // hl has the limit
 252+ 645D E5                           push    hl
 253+ 645E D5                           push    de
 254+ 645F A7                           and     a                   // reset carry flag
 255+ 6460 ED 52                        sbc     hl, de              // compute limit - index
 256+ 6462 20 04                        jr      nz, Do_Ptr          // if zero then don't even begin loop
 257+ 6464 D1                               pop     de
 258+ 6465 E1                               pop     hl
 259+ 6466
 260+ 6466 18 AF                            jr      Branch_Ptr          // perform branch consuming following cell
 261+ 6468              Do_Ptr:
 262+ 6468                              ldhlrp                      // prepare RP
 262+ 6468 2A 96 63    >                ld      hl,(RP_Pointer)
 263+ 646B 2B                           dec     hl
 264+ 646C 2B                           dec     hl
 265+ 646D 2B                           dec     hl
 266+ 646E 2B                           dec     hl
 267+ 646F                              ldrphl
 267+ 646F 22 96 63    >                ld      (RP_Pointer),hl
 268+ 6472
 269+ 6472                              // store index as top RP
 270+ 6472 D1                           pop     de
 271+ 6473 73                           ld      (hl), e
 272+ 6474 23                           inc     hl
 273+ 6475 72                           ld      (hl), d
 274+ 6476 23                           inc     hl
 275+ 6477                              // stores lim as second from top RP
 276+ 6477 D1                           pop     de
 277+ 6478 73                           ld      (hl), e
 278+ 6479 23                           inc     hl
 279+ 647A 72                           ld      (hl), d
 280+ 647B
 281+ 647B                              // skip branch-style offseet
 282+ 647B 03                           inc     bc
 283+ 647C 03                           inc     bc
 284+ 647D                              next
 284+ 647D DD E9       >                jp      (ix)
 285+ 647F
 286+ 647F              //  ______________________________________________________________________
 287+ 647F              //
 288+ 647F              // (do)        lim ind --
 289+ 647F              // compiled by DO to make a loop checking for lim == ind first
 290+ 647F              // this is a simpler version of (?DO)
 291+ 647F                              New_Def C_DO, "(DO)", is_code, is_normal
 291+ 647F             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 291+ 647F             >
 291+ 647F             >                // dummy db directives used to calculate length of namec
 291+ 647F 28 44 4F 29 >                db      "(DO)"
 291+ 6483             >len_NFA         defl    $ - temp_NFA
 291+ 6483             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 291+ 647F             >
 291+ 647F 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 291+ 6480 28 44 4F 29 >                db      "(DO)"               // name string in 7-bit ascii, but
 291+ 6484             >                org     $-1                 // alter last byte of Name just above to set
 291+ 6483 A9          >                db      {b $} | END_BIT     // msb as name end
 291+ 6484             >
 291+ 6484 51 64       >                dw      last_NFA            // Link to previous definition Name
 291+ 6486             >C_DO:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 291+ 6486 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
 291+ 6486             >                else
 291+ 6486 88 64       >                dw      $ + 2   ; ok        // is pointed by CFA
 291+ 6488             >                endif           ; ok        // for other definitions it "points" the correct handler
 291+ 6488             >                // Use of "; ok" to suppress "warning[fwdref]"
 291+ 6488             >
 291+ 6488             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 292+ 6488 0B                           dec     bc                  // prepare IP beforehand
 293+ 6489 0B                           dec     bc                  // to balance the two final inc bc in (?do)
 294+ 648A 18 DC                        jr      Do_Ptr
 295+ 648C
 296+ 648C              //  ______________________________________________________________________
 297+ 648C              //
 298+ 648C              // i            -- n
 299+ 648C              // used between DO and LOOP or between DO e +LOOP to copy on top of stack
 300+ 648C              // the current value of the index-loop
 301+ 648C                              New_Def I, "I", is_code, is_normal
 301+ 648C             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 301+ 648C             >
 301+ 648C             >                // dummy db directives used to calculate length of namec
 301+ 648C 49          >                db      "I"
 301+ 648D             >len_NFA         defl    $ - temp_NFA
 301+ 648D             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 301+ 648C             >
 301+ 648C 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 301+ 648D 49          >                db      "I"               // name string in 7-bit ascii, but
 301+ 648E             >                org     $-1                 // alter last byte of Name just above to set
 301+ 648D C9          >                db      {b $} | END_BIT     // msb as name end
 301+ 648E             >
 301+ 648E 7F 64       >                dw      last_NFA            // Link to previous definition Name
 301+ 6490             >I:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 301+ 6490 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
 301+ 6490             >                else
 301+ 6490 92 64       >                dw      $ + 2   ; ok        // is pointed by CFA
 301+ 6492             >                endif           ; ok        // for other definitions it "points" the correct handler
 301+ 6492             >                // Use of "; ok" to suppress "warning[fwdref]"
 301+ 6492             >
 301+ 6492             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 302+ 6492              I_Ptr:
 303+ 6492
 304+ 6492                              ldhlrp
 304+ 6492 2A 96 63    >                ld      hl,(RP_Pointer)
 305+ 6495              I_Ptr_prime
 306+ 6495 5E                           ld      e, (hl)
 307+ 6496 23                           inc     hl
 308+ 6497 56                           ld      d, (hl)
 309+ 6498 D5                           push    de
 310+ 6499                              next
 310+ 6499 DD E9       >                jp      (ix)
 311+ 649B
 312+ 649B              //  ______________________________________________________________________
 313+ 649B              //
 314+ 649B              // i'            -- n
 315+ 649B              // used between DO and LOOP or between DO e +LOOP to copy on top of stack
 316+ 649B              // the limit of the index-loop
 317+ 649B
 318+ 649B                              New_Def II, "I'", is_code, is_normal
 318+ 649B             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 318+ 649B             >
 318+ 649B             >                // dummy db directives used to calculate length of namec
 318+ 649B 49 27       >                db      "I'"
 318+ 649D             >len_NFA         defl    $ - temp_NFA
 318+ 649D             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 318+ 649B             >
 318+ 649B 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 318+ 649C 49 27       >                db      "I'"               // name string in 7-bit ascii, but
 318+ 649E             >                org     $-1                 // alter last byte of Name just above to set
 318+ 649D A7          >                db      {b $} | END_BIT     // msb as name end
 318+ 649E             >
 318+ 649E 8C 64       >                dw      last_NFA            // Link to previous definition Name
 318+ 64A0             >II:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 318+ 64A0 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
 318+ 64A0             >                else
 318+ 64A0 A2 64       >                dw      $ + 2   ; ok        // is pointed by CFA
 318+ 64A2             >                endif           ; ok        // for other definitions it "points" the correct handler
 318+ 64A2             >                // Use of "; ok" to suppress "warning[fwdref]"
 318+ 64A2             >
 318+ 64A2             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 319+ 64A2                              ldhlrp
 319+ 64A2 2A 96 63    >                ld      hl,(RP_Pointer)
 320+ 64A5 23                           inc     hl
 321+ 64A6 23                           inc     hl
 322+ 64A7 18 EC                        jr      I_Ptr_prime
 323+ 64A9
 324+ 64A9
 325+ 64A9              //  ______________________________________________________________________
 326+ 64A9              //
 327+ 64A9              // digit        c n -- u 1  |  0
 328+ 64A9              // convert a character c using base n
 329+ 64A9              // returns a unsigned number and a true flag
 330+ 64A9              // or just a false flag if the conversion fails
 331+ 64A9                              New_Def DIGIT, "DIGIT", is_code, is_normal
 331+ 64A9             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 331+ 64A9             >
 331+ 64A9             >                // dummy db directives used to calculate length of namec
 331+ 64A9 44 49 47 49 >                db      "DIGIT"
 331+ 64AD 54          >
 331+ 64AE             >len_NFA         defl    $ - temp_NFA
 331+ 64AE             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 331+ 64A9             >
 331+ 64A9 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 331+ 64AA 44 49 47 49 >                db      "DIGIT"               // name string in 7-bit ascii, but
 331+ 64AE 54          >
 331+ 64AF             >                org     $-1                 // alter last byte of Name just above to set
 331+ 64AE D4          >                db      {b $} | END_BIT     // msb as name end
 331+ 64AF             >
 331+ 64AF 9B 64       >                dw      last_NFA            // Link to previous definition Name
 331+ 64B1             >DIGIT:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 331+ 64B1 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
 331+ 64B1             >                else
 331+ 64B1 B3 64       >                dw      $ + 2   ; ok        // is pointed by CFA
 331+ 64B3             >                endif           ; ok        // for other definitions it "points" the correct handler
 331+ 64B3             >                // Use of "; ok" to suppress "warning[fwdref]"
 331+ 64B3             >
 331+ 64B3             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 332+ 64B3 E1                           pop     hl                  // l has the base
 333+ 64B4 D1                           pop     de                  // e has the digit
 334+ 64B5 7B                           ld      a, e
 335+ 64B6 FE 60                        cp      $60                 // check if lowercase
 336+ 64B8 38 02                        jr      c, Digit_Uppercase
 337+ 64BA D6 20                            sub     $20                 // quick'n'dirty uppercase
 338+ 64BC              Digit_Uppercase:
 339+ 64BC D6 30                        sub     $30
 340+ 64BE 38 15                        jr      c, Digit_Fail       // fail when character < "0"
 341+ 64C0 FE 0A                            cp      $0A
 342+ 64C2 38 06                            jr      c, Digit_Decimal    // perhaps is not decimal
 343+ 64C4 D6 07                                sub     7                   // try hex and subtract 7
 344+ 64C6 FE 0A                                cp      $0A
 345+ 64C8 38 0B                                jr      c,  Digit_Fail      // it is not hex !
 346+ 64CA
 347+ 64CA              Digit_Decimal:
 348+ 64CA                              // compare digit
 349+ 64CA BD                           cp      l                   // compare with base
 350+ 64CB
 351+ 64CB 30 08                        jr      nc, Digit_Fail      // fail when greater than base
 352+ 64CD 5F                               ld      e, a                // digit is returned as second from TOS
 353+ 64CE 21 01 00                         ld      hl, 1
 354+ 64D1
 355+ 64D1                                  psh2
 355+ 64D1 D5          >                push    de
 355+ 64D2 E5          >                push    hl
 355+ 64D3 DD E9       >                jp      (ix)
 356+ 64D5              Digit_Fail:
 357+ 64D5 21 00 00                     ld      hl, 0
 358+ 64D8                              psh1
 358+ 64D8 E5          >                push    hl
 358+ 64D9 DD E9       >                jp      (ix)
 359+ 64DB
 360+ 64DB              //  ______________________________________________________________________
 361+ 64DB              //
 362+ 64DB              //  parametric uppercase routine
 363+ 64DB              //  depending on the following op-code the routine can be by-passed
 364+ 64DB              //  changing the behaviour of some callers.
 365+ 64DB              //  If it is "ret" then the system is Case-Sensitive
 366+ 64DB              //  If it is "Nop" then the system is Case-Insensitive
 367+ 64DB              //  Only A register is touched.
 368+ 64DB 00           Case_Sensitive: nop                         // Default is case-insensitive.
 369+ 64DC              Case_Upper:
 370+ 64DC FE 61                        cp      LC_A_CHAR           // lower-case "a"
 371+ 64DE D8                           ret     c                   // no change if A < "a"
 372+ 64DF FE 7B                        cp      LC_Z_CHAR + 1       // lower-case "z" + 1
 373+ 64E1 D0                           ret     nc                  // no change if A > "z"
 374+ 64E2 D6 20                        sub     $20                 // Make uppercase if A in ["a".."z"]
 375+ 64E4 C9                           ret
 376+ 64E5
 377+ 64E5              //  ______________________________________________________________________
 378+ 64E5              //
 379+ 64E5              //  caseon      --
 380+ 64E5              // set system case-sensitivity on
 381+ 64E5              // it patches a RET/NOP at the beginning of the uppercase-routine
 382+ 64E5                              New_Def CASEON, "CASEON", is_code, is_normal
 382+ 64E5             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 382+ 64E5             >
 382+ 64E5             >                // dummy db directives used to calculate length of namec
 382+ 64E5 43 41 53 45 >                db      "CASEON"
 382+ 64E9 4F 4E       >
 382+ 64EB             >len_NFA         defl    $ - temp_NFA
 382+ 64EB             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 382+ 64E5             >
 382+ 64E5 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 382+ 64E6 43 41 53 45 >                db      "CASEON"               // name string in 7-bit ascii, but
 382+ 64EA 4F 4E       >
 382+ 64EC             >                org     $-1                 // alter last byte of Name just above to set
 382+ 64EB CE          >                db      {b $} | END_BIT     // msb as name end
 382+ 64EC             >
 382+ 64EC A9 64       >                dw      last_NFA            // Link to previous definition Name
 382+ 64EE             >CASEON:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 382+ 64EE ~           >                dw      runcode ; ok        // for primitive definitions  actual code
 382+ 64EE             >                else
 382+ 64EE F0 64       >                dw      $ + 2   ; ok        // is pointed by CFA
 382+ 64F0             >                endif           ; ok        // for other definitions it "points" the correct handler
 382+ 64F0             >                // Use of "; ok" to suppress "warning[fwdref]"
 382+ 64F0             >
 382+ 64F0             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 383+ 64F0 3E C9                        ld      a, $C9              // "ret"
 384+ 64F2 32 DB 64                     ld      (Case_Sensitive), a
 385+ 64F5                              next
 385+ 64F5 DD E9       >                jp      (ix)
 386+ 64F7
 387+ 64F7              //  ______________________________________________________________________
 388+ 64F7              //
 389+ 64F7              //  caseoff     --
 390+ 64F7              // set system case-sensitivity on
 391+ 64F7              // it patches a RET/NOP at the beginning of the uppercase-routine
 392+ 64F7                              New_Def CASEOFF, "CASEOFF", is_code, is_normal
 392+ 64F7             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 392+ 64F7             >
 392+ 64F7             >                // dummy db directives used to calculate length of namec
 392+ 64F7 43 41 53 45 >                db      "CASEOFF"
 392+ 64FB 4F 46 46    >
 392+ 64FE             >len_NFA         defl    $ - temp_NFA
 392+ 64FE             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 392+ 64F7             >
 392+ 64F7 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 392+ 64F8 43 41 53 45 >                db      "CASEOFF"               // name string in 7-bit ascii, but
 392+ 64FC 4F 46 46    >
 392+ 64FF             >                org     $-1                 // alter last byte of Name just above to set
 392+ 64FE C6          >                db      {b $} | END_BIT     // msb as name end
 392+ 64FF             >
 392+ 64FF E5 64       >                dw      last_NFA            // Link to previous definition Name
 392+ 6501             >CASEOFF:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 392+ 6501 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
 392+ 6501             >                else
 392+ 6501 03 65       >                dw      $ + 2   ; ok        // is pointed by CFA
 392+ 6503             >                endif           ; ok        // for other definitions it "points" the correct handler
 392+ 6503             >                // Use of "; ok" to suppress "warning[fwdref]"
 392+ 6503             >
 392+ 6503             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 393+ 6503 3E 00                        ld      a, $00              // "nop"
 394+ 6505 32 DB 64                     ld      (Case_Sensitive), a
 395+ 6508                              next
 395+ 6508 DD E9       >                jp      (ix)
 396+ 650A
 397+ 650A              //  ______________________________________________________________________
 398+ 650A              //
 399+ 650A              //  upper       c1 -- c1 | c2
 400+ 650A              // character on top of stack is forced to Uppercase.
 401+ 650A                              New_Def UPPER, "UPPER", is_code, is_normal
 401+ 650A             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 401+ 650A             >
 401+ 650A             >                // dummy db directives used to calculate length of namec
 401+ 650A 55 50 50 45 >                db      "UPPER"
 401+ 650E 52          >
 401+ 650F             >len_NFA         defl    $ - temp_NFA
 401+ 650F             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 401+ 650A             >
 401+ 650A 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 401+ 650B 55 50 50 45 >                db      "UPPER"               // name string in 7-bit ascii, but
 401+ 650F 52          >
 401+ 6510             >                org     $-1                 // alter last byte of Name just above to set
 401+ 650F D2          >                db      {b $} | END_BIT     // msb as name end
 401+ 6510             >
 401+ 6510 F7 64       >                dw      last_NFA            // Link to previous definition Name
 401+ 6512             >UPPER:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 401+ 6512 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
 401+ 6512             >                else
 401+ 6512 14 65       >                dw      $ + 2   ; ok        // is pointed by CFA
 401+ 6514             >                endif           ; ok        // for other definitions it "points" the correct handler
 401+ 6514             >                // Use of "; ok" to suppress "warning[fwdref]"
 401+ 6514             >
 401+ 6514             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 402+ 6514 E1                           pop     hl
 403+ 6515 7D                           ld      a, l
 404+ 6516 CD DC 64                     call    Case_Upper
 405+ 6519 6F                           ld      l, a
 406+ 651A
 407+ 651A                              psh1
 407+ 651A E5          >                push    hl
 407+ 651B DD E9       >                jp      (ix)
 408+ 651D
 409+ 651D              //  ______________________________________________________________________
 410+ 651D              //
 411+ 651D              // (find)       addr voc -- addr 0 | cfa b 1
 412+ 651D              // vocabulary search,
 413+ 651D              // - voc is starting word's NFA
 414+ 651D              // - addr is the string to be searched for
 415+ 651D              // On success, it returns the CFA of found word, the first NFA byte
 416+ 651D              // (which contains length and some flags) and a true flag.
 417+ 651D              // On fail, a false flag  (no more: leaves addr unchanged)
 418+ 651D                              New_Def C_FIND, "(FIND)", is_code, is_normal
 418+ 651D             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 418+ 651D             >
 418+ 651D             >                // dummy db directives used to calculate length of namec
 418+ 651D 28 46 49 4E >                db      "(FIND)"
 418+ 6521 44 29       >
 418+ 6523             >len_NFA         defl    $ - temp_NFA
 418+ 6523             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 418+ 651D             >
 418+ 651D 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 418+ 651E 28 46 49 4E >                db      "(FIND)"               // name string in 7-bit ascii, but
 418+ 6522 44 29       >
 418+ 6524             >                org     $-1                 // alter last byte of Name just above to set
 418+ 6523 A9          >                db      {b $} | END_BIT     // msb as name end
 418+ 6524             >
 418+ 6524 0A 65       >                dw      last_NFA            // Link to previous definition Name
 418+ 6526             >C_FIND:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 418+ 6526 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
 418+ 6526             >                else
 418+ 6526 28 65       >                dw      $ + 2   ; ok        // is pointed by CFA
 418+ 6528             >                endif           ; ok        // for other definitions it "points" the correct handler
 418+ 6528             >                // Use of "; ok" to suppress "warning[fwdref]"
 418+ 6528             >
 418+ 6528             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 419+ 6528                                                              // de has dictionary pointer
 420+ 6528 D1                               pop     de
 421+ 6529              Find_VocabularyLoop:
 422+ 6529 E1                               pop     hl                  // string pointer to search for
 423+ 652A E5                               push    hl                  // keep it on stack too for the end.
 424+ 652B 1A                               ld      a, (de)             // save NFA length byte
 425+ 652C 08                               ex      af,af'              // for later use (!)
 426+ 652D 1A                               ld      a, (de)             // reload NFA length byte
 427+ 652E AE                               xor     (hl)                // check if same length
 428+ 652F E6 3F                            and     $3F                 // by resetting 3 high bits (flags)
 429+ 6531                                  // word an text haven't the same length, skip to next vocabulary entry
 430+ 6531 20 2C                            jr      nz, Find_DifferentLenght
 431+ 6533
 432+ 6533              Find_ThisWord:  // begin loop
 433+ 6533 23                                   inc     hl
 434+ 6534 13                                   inc     de
 435+ 6535 1A                                   ld      a, (de)
 436+ 6536                                      // case insensitive option - begin
 437+ 6536 C5                                   push    bc
 438+ 6537 E6 80                                and     $80                 // split A in msb and the rest
 439+ 6539 47                                   ld      b, a
 440+ 653A 1A                                   ld      a, (de)
 441+ 653B E6 7F                                and     $7F                 // ... the rest (lower 7 bits)
 442+ 653D CD DB 64                             call    Case_Sensitive      // uppercase routine
 443+ 6540 4F                                   ld      c, a
 444+ 6541 7E                                   ld      a, (hl)
 445+ 6542 CD DB 64                             call    Case_Sensitive      // uppercase routine
 446+ 6545 A9                                   xor     c
 447+ 6546 A8                                   xor     b
 448+ 6547 C1                                   pop     bc
 449+ 6548                                      // case insensitive option - end
 450+ 6548 87                                   add     a                   // ignore msb during compare
 451+ 6549 20 12                                jr      nz, Find_DidntMatch  // jump if doesn't match (*)
 452+ 654B
 453+ 654B                                  // loop back until last byte msb is found set
 454+ 654B                                  // that bit marks the ending char of this word
 455+ 654B 30 E6                            jr      nc, Find_ThisWord
 456+ 654D
 457+ 654D                                  // match found !
 458+ 654D 21 03 00                             ld      hl, 3               // 3 bytes for CFA offset to skip LFA
 459+ 6550 19                                   add     hl, de
 460+ 6551 E3                                   ex      (sp), hl            // CFA on stack and drop addr
 461+ 6552 08                                   ex      af, af'             // retrieve NFA byte (!)
 462+ 6553 5F                                   ld      e, a
 463+ 6554 16 00                                ld      d, 0
 464+ 6556
 465+ 6556
 466+ 6556 21 01 00                             ld      hl, 1
 467+ 6559                                      psh2
 467+ 6559 D5          >                push    de
 467+ 655A E5          >                push    hl
 467+ 655B DD E9       >                jp      (ix)
 468+ 655D
 469+ 655D              Find_DidntMatch: // didn't match (*)
 470+ 655D 38 05                            jr      c,  Find_WordEnd   // jump if not end of word (**)
 471+ 655F
 472+ 655F              Find_DifferentLenght:
 473+ 655F                              // consume chars until the end of the word
 474+ 655F                              // that is last byte msb is found set
 475+ 655F 13                               inc     de
 476+ 6560 1A                               ld      a, (de)
 477+ 6561 87                               add     a, a
 478+ 6562 30 FB                        jr      nc, Find_DifferentLenght
 479+ 6564
 480+ 6564              Find_WordEnd:   // word-end  found (**)
 481+ 6564                              // take LFA and use it
 482+ 6564 13                           inc     de
 483+ 6565 EB                           ex      de, hl
 484+ 6566 5E                           ld      e, (hl)
 485+ 6567 23                           inc     hl
 486+ 6568 56                           ld      d, (hl)
 487+ 6569 7A                           ld      a, d
 488+ 656A B3                           or      e
 489+ 656B
 490+ 656B                          // loop until end of vocabulary
 491+ 656B 20 BC                    jr      nz, Find_VocabularyLoop
 492+ 656D
 493+ 656D E1                       pop     hl              // with this, it leaves addr unchanged
 494+ 656E 21 00 00                 ld      hl, FALSE_FLAG
 495+ 6571
 496+ 6571                          psh1
 496+ 6571 E5          >                push    hl
 496+ 6572 DD E9       >                jp      (ix)
 497+ 6574
 498+ 6574              //  ______________________________________________________________________
 499+ 6574              //
 500+ 6574              // enclose      a c -- a  n1 n2 n3
 501+ 6574              // starting from a, using delimiter c, determines the offsets:
 502+ 6574              //   n1   the first character non-delimiter
 503+ 6574              //   n2   the first delimiter after the text
 504+ 6574              //   n3   the first character non enclosed.
 505+ 6574              // This procedure does not go beyond a 'nul' ASCII (0x00) that represents
 506+ 6574              // an uncoditional delimiter.
 507+ 6574              // Examples:
 508+ 6574              //   i:	c  c  x  x  x  c  x	 -- 2  5  6
 509+ 6574              //  ii:	c  c  x  x  x  'nul' -- 2  5  5
 510+ 6574              // iii:	c  c  'nul'          -- 2  3  2
 511+ 6574                              New_Def ENCLOSE, "ENCLOSE", is_code, is_normal
 511+ 6574             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 511+ 6574             >
 511+ 6574             >                // dummy db directives used to calculate length of namec
 511+ 6574 45 4E 43 4C >                db      "ENCLOSE"
 511+ 6578 4F 53 45    >
 511+ 657B             >len_NFA         defl    $ - temp_NFA
 511+ 657B             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 511+ 6574             >
 511+ 6574 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 511+ 6575 45 4E 43 4C >                db      "ENCLOSE"               // name string in 7-bit ascii, but
 511+ 6579 4F 53 45    >
 511+ 657C             >                org     $-1                 // alter last byte of Name just above to set
 511+ 657B C5          >                db      {b $} | END_BIT     // msb as name end
 511+ 657C             >
 511+ 657C 1D 65       >                dw      last_NFA            // Link to previous definition Name
 511+ 657E             >ENCLOSE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 511+ 657E ~           >                dw      runcode ; ok        // for primitive definitions  actual code
 511+ 657E             >                else
 511+ 657E 80 65       >                dw      $ + 2   ; ok        // is pointed by CFA
 511+ 6580             >                endif           ; ok        // for other definitions it "points" the correct handler
 511+ 6580             >                // Use of "; ok" to suppress "warning[fwdref]"
 511+ 6580             >
 511+ 6580             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 512+ 6580 D1                           pop     de                  //  e has the character
 513+ 6581 E1                           pop     hl                  // hl has the string address
 514+ 6582 E5                           push    hl
 515+ 6583 7B                           ld      a, e
 516+ 6584 11 FF FF                     ld      de, -1              // let's start from -1
 517+ 6587 2B                           dec     hl
 518+ 6588              Enclose_NonDelimiter:
 519+ 6588                              // find first non delimiter
 520+ 6588 23                               inc     hl
 521+ 6589 13                               inc     de
 522+ 658A BE                               cp      (hl)
 523+ 658B 28 FB                        jr      z, Enclose_NonDelimiter
 524+ 658D D5                           push    de
 525+ 658E
 526+ 658E C5                           push    bc                  // save Instruction Pointer
 527+ 658F
 528+ 658F 4F                           ld      c, a                // save char
 529+ 6590 7E                           ld      a, (hl)
 530+ 6591 A7                           and     a                   // stop if 0x00
 531+ 6592 20 07                        jr      nz, Enclose_NextChar
 532+ 6594
 533+ 6594                              /// case iii. no more character in string
 534+ 6594 C1                               pop     bc                  // restore Instruction Pointer
 535+ 6595 13                               inc     de
 536+ 6596 D5                               push    de
 537+ 6597 1B                               dec     de
 538+ 6598 D5                               push    de
 539+ 6599                                  next
 539+ 6599 DD E9       >                jp      (ix)
 540+ 659B              Enclose_NextChar:
 541+ 659B 79                               ld      a, c
 542+ 659C 23                               inc     hl
 543+ 659D 13                               inc     de
 544+ 659E BE                               cp      (hl)
 545+ 659F 20 06                            jr      nz, Enclose_NonSeparator
 546+ 65A1
 547+ 65A1                                      // case i. first non enclosed
 548+ 65A1 C1                                   pop     bc                  // restore Instruction Pointer
 549+ 65A2 D5                                   push    de
 550+ 65A3 13                                   inc     de
 551+ 65A4 D5                                   push    de
 552+ 65A5                                      next
 552+ 65A5 DD E9       >                jp      (ix)
 553+ 65A7              Enclose_NonSeparator:
 554+ 65A7 7E                               ld      a, (hl)
 555+ 65A8 A7                               and     a
 556+ 65A9 20 F0                        jr      nz, Enclose_NextChar
 557+ 65AB
 558+ 65AB                              // case ii. separator & terminator
 559+ 65AB C1                           pop     bc                  // restore Instruction Pointer
 560+ 65AC D5                           push    de
 561+ 65AD D5                           push    de
 562+ 65AE                              next
 562+ 65AE DD E9       >                jp      (ix)
 563+ 65B0
 564+ 65B0              //  ______________________________________________________________________
 565+ 65B0              //
 566+ 65B0              // (map)        a2 a1 n c1 -- c2
 567+ 65B0              // translate character c1 using mapping string a2 and a2
 568+ 65B0              // if c1 is not present within string a1 then
 569+ 65B0              // c2 = c2 if it is not translated. n is the length of both a1 and a2.
 570+ 65B0                              New_Def C_MAP, "(MAP)", is_code, is_normal
 570+ 65B0             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 570+ 65B0             >
 570+ 65B0             >                // dummy db directives used to calculate length of namec
 570+ 65B0 28 4D 41 50 >                db      "(MAP)"
 570+ 65B4 29          >
 570+ 65B5             >len_NFA         defl    $ - temp_NFA
 570+ 65B5             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 570+ 65B0             >
 570+ 65B0 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 570+ 65B1 28 4D 41 50 >                db      "(MAP)"               // name string in 7-bit ascii, but
 570+ 65B5 29          >
 570+ 65B6             >                org     $-1                 // alter last byte of Name just above to set
 570+ 65B5 A9          >                db      {b $} | END_BIT     // msb as name end
 570+ 65B6             >
 570+ 65B6 74 65       >                dw      last_NFA            // Link to previous definition Name
 570+ 65B8             >C_MAP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 570+ 65B8 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
 570+ 65B8             >                else
 570+ 65B8 BA 65       >                dw      $ + 2   ; ok        // is pointed by CFA
 570+ 65BA             >                endif           ; ok        // for other definitions it "points" the correct handler
 570+ 65BA             >                // Use of "; ok" to suppress "warning[fwdref]"
 570+ 65BA             >
 570+ 65BA             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 571+ 65BA D9                           exx
 572+ 65BB E1                           pop     hl
 573+ 65BC 7D                           ld      a, l
 574+ 65BD C1                           pop     bc
 575+ 65BE E1                           pop     hl
 576+ 65BF 50                           ld      d, b
 577+ 65C0 59                           ld      e, c
 578+ 65C1 ED B1                        cpir
 579+ 65C3 E1                           pop     hl
 580+ 65C4 20 05                        jr      nz, C_Map_Then
 580+ 65C6
 581+ 65C6 19                               add     hl, de
 582+ 65C7 2B                               dec     hl
 583+ 65C8 ED 42                            sbc     hl, bc
 584+ 65CA 7E                               ld      a, (hl)
 585+ 65CB              C_Map_Then:
 586+ 65CB 6F                           ld      l, a
 587+ 65CC 26 00                        ld      h, 0
 588+ 65CE E5                           push    hl
 589+ 65CF D9                           exx
 590+ 65D0                              next
 590+ 65D0 DD E9       >                jp      (ix)
 591+ 65D2
 592+ 65D2              //  ______________________________________________________________________
 593+ 65D2              //
 594+ 65D2              // (compare)    a1 a2 n -- b
 595+ 65D2              // this word performs a lexicographic compare of n bytes of text at address a1
 596+ 65D2              // with n bytes of text at address a2. It returns numeric a value:
 597+ 65D2              //  0 : if strings are equal
 598+ 65D2              // +1 : if string at a1 greater than string at a2
 599+ 65D2              // -1 : if string at a1 less than string at a2
 600+ 65D2              // strings can be 256 bytes in length at most.
 601+ 65D2                              New_Def C_COMPARE, "(COMPARE)", is_code, is_normal
 601+ 65D2             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 601+ 65D2             >
 601+ 65D2             >                // dummy db directives used to calculate length of namec
 601+ 65D2 28 43 4F 4D >                db      "(COMPARE)"
 601+ 65D6 50 41 52 45 >
 601+ 65DA 29          >
 601+ 65DB             >len_NFA         defl    $ - temp_NFA
 601+ 65DB             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 601+ 65D2             >
 601+ 65D2 89          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 601+ 65D3 28 43 4F 4D >                db      "(COMPARE)"               // name string in 7-bit ascii, but
 601+ 65D7 50 41 52 45 >
 601+ 65DB 29          >
 601+ 65DC             >                org     $-1                 // alter last byte of Name just above to set
 601+ 65DB A9          >                db      {b $} | END_BIT     // msb as name end
 601+ 65DC             >
 601+ 65DC B0 65       >                dw      last_NFA            // Link to previous definition Name
 601+ 65DE             >C_COMPARE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 601+ 65DE ~           >                dw      runcode ; ok        // for primitive definitions  actual code
 601+ 65DE             >                else
 601+ 65DE E0 65       >                dw      $ + 2   ; ok        // is pointed by CFA
 601+ 65E0             >                endif           ; ok        // for other definitions it "points" the correct handler
 601+ 65E0             >                // Use of "; ok" to suppress "warning[fwdref]"
 601+ 65E0             >
 601+ 65E0             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 602+ 65E0 D9                           exx
 603+ 65E1 E1                           pop     hl                  // Number of bytes
 604+ 65E2 7D                           ld      a, l
 605+ 65E3 E1                           pop     hl                  // hl points string a2
 606+ 65E4 D1                           pop     de                  // hl points string a1
 607+ 65E5              //              push    bc                  // Instruction pointer on stack
 608+ 65E5 47                           ld      b, a
 609+ 65E6              C_Compare_Loop:
 610+ 65E6 7E                               ld      a, (hl)
 611+ 65E7 CD DB 64                         call    Case_Sensitive
 612+ 65EA 4F                               ld      c, a
 613+ 65EB 1A                               ld      a, (de)
 614+ 65EC CD DB 64                         call    Case_Sensitive
 615+ 65EF B9                               cp      c
 616+ 65F0 13                               inc     de
 617+ 65F1 23                               inc     hl
 618+ 65F2 28 0E                            jr      z, C_Compare_Equal
 619+ 65F4 38 05                                jr      c, C_Compare_NotLessThan  // If LessThan
 620+ 65F6 21 01 00                                 ld      hl, 1               // a1 gt a2
 621+ 65F9 18 03                                jr      C_Compare_Then      // Else
 622+ 65FB              C_Compare_NotLessThan:
 623+ 65FB 21 FF FF                                 ld      hl, -1              // a1 lt a2
 624+ 65FE              C_Compare_Then:                                 // Endif
 625+ 65FE              //                      pop     bc              // restore Instruction Pointer
 626+ 65FE E5                                   push    hl
 627+ 65FF D9                                   exx
 628+ 6600
 629+ 6600                                      next
 629+ 6600 DD E9       >                jp      (ix)
 630+ 6602
 631+ 6602              C_Compare_Equal:
 632+ 6602 10 E2                        djnz    C_Compare_Loop
 633+ 6604 21 00 00                     ld      hl, 0               // a1 eq a2
 634+ 6607              //              pop     bc                  // restore Instruction Pointer
 635+ 6607 E5                           push    hl
 636+ 6608 D9                           exx
 637+ 6609
 638+ 6609                              next
 638+ 6609 DD E9       >                jp      (ix)
 639+ 660B
 640+ 660B              //  ______________________________________________________________________
 641+ 660B              //
 642+ 660B              // emitc        c --
 643+ 660B              // low level emit, calls ROM routine at #10 to send a character to
 644+ 660B              // the the current channel (see SELECT to change stream-channel)
 645+ 660B                              New_Def EMITC, "EMITC", is_code, is_normal
 645+ 660B             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 645+ 660B             >
 645+ 660B             >                // dummy db directives used to calculate length of namec
 645+ 660B 45 4D 49 54 >                db      "EMITC"
 645+ 660F 43          >
 645+ 6610             >len_NFA         defl    $ - temp_NFA
 645+ 6610             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 645+ 660B             >
 645+ 660B 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 645+ 660C 45 4D 49 54 >                db      "EMITC"               // name string in 7-bit ascii, but
 645+ 6610 43          >
 645+ 6611             >                org     $-1                 // alter last byte of Name just above to set
 645+ 6610 C3          >                db      {b $} | END_BIT     // msb as name end
 645+ 6611             >
 645+ 6611 D2 65       >                dw      last_NFA            // Link to previous definition Name
 645+ 6613             >EMITC:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 645+ 6613 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
 645+ 6613             >                else
 645+ 6613 15 66       >                dw      $ + 2   ; ok        // is pointed by CFA
 645+ 6615             >                endif           ; ok        // for other definitions it "points" the correct handler
 645+ 6615             >                // Use of "; ok" to suppress "warning[fwdref]"
 645+ 6615             >
 645+ 6615             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 646+ 6615 E1                           pop     hl
 647+ 6616 7D                           ld      a, l
 648+ 6617              Emitc_Ptr:
 649+ 6617 C5                           push    bc
 650+ 6618 DD E5                        push    ix
 651+ 661A D7                           rst     $10
 652+ 661B DD E1                        pop     ix
 653+ 661D C1                           pop     bc
 654+ 661E 3E FF                        ld      a, 255            // max possible
 655+ 6620 32 8C 5C                     ld      (SCR_CT), a
 656+ 6623
 657+ 6623                              next
 657+ 6623 DD E9       >                jp      (ix)
 658+ 6625
 659+ 6625              //  ______________________________________________________________________
 660+ 6625              //
 661+ 6625              // cr           --
 662+ 6625              // send a CR via EMITC
 663+ 6625                              New_Def CR, "CR", is_code, is_normal
 663+ 6625             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 663+ 6625             >
 663+ 6625             >                // dummy db directives used to calculate length of namec
 663+ 6625 43 52       >                db      "CR"
 663+ 6627             >len_NFA         defl    $ - temp_NFA
 663+ 6627             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 663+ 6625             >
 663+ 6625 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 663+ 6626 43 52       >                db      "CR"               // name string in 7-bit ascii, but
 663+ 6628             >                org     $-1                 // alter last byte of Name just above to set
 663+ 6627 D2          >                db      {b $} | END_BIT     // msb as name end
 663+ 6628             >
 663+ 6628 0B 66       >                dw      last_NFA            // Link to previous definition Name
 663+ 662A             >CR:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 663+ 662A ~           >                dw      runcode ; ok        // for primitive definitions  actual code
 663+ 662A             >                else
 663+ 662A 2C 66       >                dw      $ + 2   ; ok        // is pointed by CFA
 663+ 662C             >                endif           ; ok        // for other definitions it "points" the correct handler
 663+ 662C             >                // Use of "; ok" to suppress "warning[fwdref]"
 663+ 662C             >
 663+ 662C             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 664+ 662C
 665+ 662C 3E 0D                        ld      a, CR_CHAR
 666+ 662E 18 E7                        jr      Emitc_Ptr
 667+ 6630
 668+ 6630              Emitc_Vec:
 669+ 6630 75 66                        dw      C_Emit_Printable  // comma
 670+ 6632 7B 66                        dw      C_Emit_Bel        // bel
 671+ 6634 75 66                        dw      C_Emit_Printable  // bs
 672+ 6636 90 66                        dw      C_Emit_Tab        // tab
 673+ 6638 75 66                        dw      C_Emit_Printable  // cr
 674+ 663A 96 66                        dw      C_Emit_NL         // lf (unix newline)
 675+ 663C 75 66                        dw      C_Emit_Printable  // blank
 676+ 663E 75 66                        dw      C_Emit_Printable  // blank
 677+ 6640
 678+ 6640              Emit_Selector_Start:
 679+ 6640 06                           db      $06                 // comma
 680+ 6641 07                           db      $07                 // bel
 681+ 6642 08                           db      $08                 // bs
 682+ 6643 09                           db      $09                 // tab
 683+ 6644 0D                           db      $0D                 // cr
 684+ 6645 0A                           db      $0A                 // lf (unix newline)
 685+ 6646 20                           db      $20
 686+ 6647              Emit_Selector_End:
 687+ 6647 20                           db      $20
 688+ 6648
 689+ 6648              //  ______________________________________________________________________
 690+ 6648              //
 691+ 6648              // (?emit)      c1 -- c2 | c1
 692+ 6648              // decode a character to be sent via EMIT
 693+ 6648              // search first the Emit_Selector table, if found jump to the corresponding routine in Emit_Vector
 694+ 6648              // the routine should resolve anything and convert the character anyway.
 695+ 6648                              New_Def C_EMIT, "(?EMIT)", is_code, is_normal
 695+ 6648             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 695+ 6648             >
 695+ 6648             >                // dummy db directives used to calculate length of namec
 695+ 6648 28 3F 45 4D >                db      "(?EMIT)"
 695+ 664C 49 54 29    >
 695+ 664F             >len_NFA         defl    $ - temp_NFA
 695+ 664F             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 695+ 6648             >
 695+ 6648 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 695+ 6649 28 3F 45 4D >                db      "(?EMIT)"               // name string in 7-bit ascii, but
 695+ 664D 49 54 29    >
 695+ 6650             >                org     $-1                 // alter last byte of Name just above to set
 695+ 664F A9          >                db      {b $} | END_BIT     // msb as name end
 695+ 6650             >
 695+ 6650 25 66       >                dw      last_NFA            // Link to previous definition Name
 695+ 6652             >C_EMIT:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 695+ 6652 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
 695+ 6652             >                else
 695+ 6652 54 66       >                dw      $ + 2   ; ok        // is pointed by CFA
 695+ 6654             >                endif           ; ok        // for other definitions it "points" the correct handler
 695+ 6654             >                // Use of "; ok" to suppress "warning[fwdref]"
 695+ 6654             >
 695+ 6654             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 696+ 6654 D1                           pop     de
 697+ 6655 7B                           ld      a, e                //  de has c1
 698+ 6656 E6 7F                        and     $7F                 // 7-bit ascii only
 699+ 6658 C5                           push    bc                  // save Instruction Pointer
 700+ 6659 01 08 00                     ld      bc, Emit_Selector_End - Emit_Selector_Start + 1
 701+ 665C 21 47 66                     ld      hl, Emit_Selector_End
 702+ 665F ED B9                        cpdr                        // search for c1 in Emit_Selector table, backward
 703+ 6661 20 0B                        jr      nz, C_Emit_Not_Found
 704+ 6663                                  // Found then decode it
 705+ 6663 21 30 66                         ld      hl, Emitc_Vec
 706+ 6666 09                               add     hl, bc
 707+ 6667 09                               add     hl, bc
 708+ 6668 5E                               ld      e, (hl)
 709+ 6669 23                               inc     hl
 710+ 666A 56                               ld      d, (hl)
 711+ 666B EB                               ex      de, hl
 712+ 666C C1                               pop     bc                  // restore Instruction Pointer
 713+ 666D E9                               jp      (hl)                // one of the following labels
 714+ 666E              C_Emit_Not_Found:
 715+ 666E C1                           pop     bc                  // restore Instruction Pointer
 716+ 666F FE 20                        cp      BLANK_CHAR          // cp $20 non-printable check
 717+ 6671 30 02                        jr      nc, C_Emit_Printable
 718+ 6673 3E 00                            ld      a, NUL_CHAR         // NUL is never "printed"
 719+ 6675              C_Emit_Printable:
 720+ 6675 6F                           ld      l, a
 721+ 6676 26 00                        ld      h, 0
 722+ 6678
 723+ 6678                              psh1
 723+ 6678 E5          >                push    hl
 723+ 6679 DD E9       >                jp      (ix)
 724+ 667B
 725+ 667B              C_Emit_Bel:
 726+ 667B C5                           push    bc                  // save Instruction Pointer
 727+ 667C 11 00 01                     ld      de, $0100
 728+ 667F 21 00 02                     ld      hl, $0200
 729+ 6682 DD E5                        push    ix                  // save Next Pointer
 730+ 6684 CD B6 03                     call    $03B6               // bleep Standard-ROM routine
 731+ 6687 DD E1                        pop     ix                  // restore Next Pointer
 732+ 6689 C1                           pop     bc                  // restore Instruction Pointer
 733+ 668A 21 00 00                     ld      hl, NUL_CHAR
 734+ 668D
 735+ 668D                              psh1
 735+ 668D E5          >                push    hl
 735+ 668E DD E9       >                jp      (ix)
 736+ 6690
 737+ 6690 21 06 00     C_Emit_Tab:     ld      hl, COMMA_CHAR
 738+ 6693
 739+ 6693                              psh1
 739+ 6693 E5          >                push    hl
 739+ 6694 DD E9       >                jp      (ix)
 740+ 6696
 741+ 6696 21 0D 00     C_Emit_NL       ld      hl, CR_CHAR           // 0x0A --> 0x0D  à la Spectrum
 742+ 6699
 743+ 6699                              psh1
 743+ 6699 E5          >                push    hl
 743+ 669A DD E9       >                jp      (ix)
 744+ 669C
 745+ 669C              //  ______________________________________________________________________
 746+ 669C
 747+ 669C              Key_Table:
 748+ 669C E2                           db      $E2                 //  0: STOP  --> SYMBOL+A : ~
 749+ 669D C3                           db      $C3                 //  1: NOT   --> SYMBOL+S : |
 750+ 669E CD                           db      $CD                 //  2: STEP  --> SYMBOl+D : //
 751+ 669F CC                           db      $CC                 //  3: TO    --> SYMBOL+F : {
 752+ 66A0 CB                           db      $CB                 //  4: THEN  --> SYMBOL+G : }
 753+ 66A1 C6                           db      $C6                 //  5: AND   --> SYMBOL+Y : [
 754+ 66A2 C5                           db      $C5                 //  6: OR    --> SYMBOL+U : ]
 755+ 66A3 AC                           db      $AC                 //  7: AT    --> SYMBOL+I : (C) copyright symbol
 756+ 66A4 C7                           db      $C7                 //  8: <=    --> same as SHIFT-1 [EDIT]
 757+ 66A5 C8                           db      $C8                 //  9: >=    --> same as SHIFT-0 [BACKSPACE]
 758+ 66A6 C9                           db      $C9                 // 10: <>    --> SYMBOL+W is the same as CAPS (toggle) SHIFT+2
 759+ 66A7              Key_MapTo:
 760+ 66A7 06                           db      $06                 // 10: SYMBOL+W is the same as CAPS (toggle) SHIFT+2
 761+ 66A8 0C                           db      $0C                 //  9: same as SHIFT-0 [BACKSPACE]
 762+ 66A9 07                           db      $07                 //  8: same as SHIFT-1 [EDIT]
 763+ 66AA 7F                           db      $7F                 //  7: SYMBOL+I : (C) copyright symbol
 764+ 66AB 5D                           db      $5D                 //  6: SYMBOL+U : ]
 765+ 66AC 5B                           db      $5B                 //  5: SYMBOL+Y : [
 766+ 66AD 7D                           db      $7D                 //  4: SYMBOL+G : }
 767+ 66AE 7B                           db      $7B                 //  3: SYMBOL+F : {
 768+ 66AF 5C                           db      $5C                 //  2: SYMBOl+D : //
 769+ 66B0 7C                           db      $7C                 //  1: SYMBOL+S : |
 770+ 66B1 7E                           db      $7E                 //  0: SYMBOL+A : ~
 771+ 66B2
 772+ 66B2              //  ______________________________________________________________________
 773+ 66B2              //
 774+ 66B2              // key          -- c
 775+ 66B2              // wait for a keypress
 776+ 66B2              // This definition need Standard ROM Interrupt to be served
 777+ 66B2
 778+ 66B2                              New_Def KEY, "KEY", is_code, is_normal
 778+ 66B2             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 778+ 66B2             >
 778+ 66B2             >                // dummy db directives used to calculate length of namec
 778+ 66B2 4B 45 59    >                db      "KEY"
 778+ 66B5             >len_NFA         defl    $ - temp_NFA
 778+ 66B5             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 778+ 66B2             >
 778+ 66B2 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 778+ 66B3 4B 45 59    >                db      "KEY"               // name string in 7-bit ascii, but
 778+ 66B6             >                org     $-1                 // alter last byte of Name just above to set
 778+ 66B5 D9          >                db      {b $} | END_BIT     // msb as name end
 778+ 66B6             >
 778+ 66B6 48 66       >                dw      last_NFA            // Link to previous definition Name
 778+ 66B8             >KEY:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 778+ 66B8 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
 778+ 66B8             >                else
 778+ 66B8 BA 66       >                dw      $ + 2   ; ok        // is pointed by CFA
 778+ 66BA             >                endif           ; ok        // for other definitions it "points" the correct handler
 778+ 66BA             >                // Use of "; ok" to suppress "warning[fwdref]"
 778+ 66BA             >
 778+ 66BA             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 779+ 66BA
 780+ 66BA C5                           push    bc                  // save Instruction Pointer
 781+ 66BB DD E5                        push    ix
 782+ 66BD
 783+ 66BD ED 73 92 63                  ld      (SP_Saved), sp      // be sure to not to be paged out.
 784+ 66C1 31 61 63                     ld      sp, Cold_origin - 5 // maybe $4000 in the future...
 785+ 66C4 FD CB 01 AE                  res     5, (iy + 1)         // FLAGS (5C3A+1)
 786+ 66C8
 787+ 66C8              Key_Wait:
 788+ 66C8 76                               halt
 789+ 66C9 3E 02                            ld      a, 2                // selec channel #2 (Upper Video)
 790+ 66CB CD 01 16                         call    $1601               // SELECT Standard-ROM Routine
 791+ 66CE
 792+ 66CE                                  // software-flash: flips face every 320 ms
 793+ 66CE 3E 10                            ld      a, $10              // Timing based
 794+ 66D0 FD A6 3E                         and     (iy + $3E)          // FRAMES (5C3A+3E)
 795+ 66D3
 796+ 66D3 3A 8C 63                         ld      a, (Block_Face)     // see origin.asm
 797+ 66D6 20 0C                            jr      nz, Key_Cursor
 798+ 66D8 3A 8D 63                             ld      a, (Half_Face)      // see origin.asm
 799+ 66DB FD CB 30 5E                          bit     3, (iy + $30)       // FLAGS2 (5C3A+$30) that is CAPS-LOCK
 800+ 66DF 28 03                                jr      z, Key_Cursor
 801+ 66E1 3A 8E 63                                 ld      a, (Underscore_Face) // see origin
 802+ 66E4              Key_Cursor:
 803+ 66E4 D7                               rst     $10
 804+ 66E5 3E 08                            ld      a, BACKSPACE_CHAR    // backspace
 805+ 66E7 D7                               rst     $10
 806+ 66E8
 807+ 66E8 FD CB 01 6E                      bit     5, (iy + 1)         // FLAGS (5C3A+1)
 808+ 66EC 28 DA                        jr      z, Key_Wait
 809+ 66EE
 810+ 66EE 76                           halt    // this is to sync flashing cursor.
 811+ 66EF
 812+ 66EF 3E 20                        ld      a, BLANK_CHAR       // space to blank cursor
 813+ 66F1 D7                           rst     $10
 814+ 66F2 3E 08                        ld      a, BACKSPACE_CHAR   // backspace
 815+ 66F4 D7                           rst     $10
 816+ 66F5 3A 08 5C                     ld      a, (LASTK)          // get typed character (5C08)
 817+ 66F8
 818+ 66F8                              // decode character from above table
 819+ 66F8 21 9C 66                     ld      hl, Key_Table
 820+ 66FB 01 0B 00                     ld      bc, $000B
 821+ 66FE ED B1                        cpir
 822+ 6700 20 05                        jr      nz, Key_DontMap
 823+ 6702 21 A7 66                         ld      hl, Key_MapTo
 824+ 6705 09                               add     hl, bc
 825+ 6706 7E                               ld      a, (hl)
 826+ 6707 FE 06        Key_DontMap:    cp      $06                 // CAPS-LOCK management
 827+ 6709 20 09                        jr      nz, Key_NoCapsLock
 828+ 670B 21 6A 5C                         ld      hl, $5C6A           // FLAGS2
 829+ 670E 7E                               ld      a, (hl)
 830+ 670F EE 08                            xor     $08
 831+ 6711 77                               ld      (hl), a
 832+ 6712 3E 00                            ld      a, NUL_CHAR
 833+ 6714 6F           Key_NoCapsLock: ld      l, a
 834+ 6715 26 00                        ld      h, 0                // Prepare TOS
 835+ 6717
 836+ 6717 3A 48 5C                     ld      a, ($5C48)          // BORDCR system variable
 837+ 671A 1F                           rra
 838+ 671B 1F                           rra
 839+ 671C 1F                           rra
 840+ 671D F6 18                        or      $18                 // quick'n'dirty click
 841+ 671F D3 FE                        out     ($fe), a
 842+ 6721 06 00                        ld      b, 0
 843+ 6723 10 FE                        djnz    $                   // wait loop
 844+ 6725 EE 18                        xor     $18
 845+ 6727 D3 FE                        out     ($fe), a
 846+ 6729
 847+ 6729 ED 7B 92 63                  ld      sp, (SP_Saved)
 848+ 672D
 849+ 672D DD E1                        pop     ix
 850+ 672F C1                           pop     bc                  // Restore Instruction Pointer
 851+ 6730
 852+ 6730                              psh1
 852+ 6730 E5          >                push    hl
 852+ 6731 DD E9       >                jp      (ix)
 853+ 6733
 854+ 6733              //  ______________________________________________________________________
 855+ 6733              //
 856+ 6733              // ?terminal    -- FALSE | TRUE
 857+ 6733              // test for BREAK keypress
 858+ 6733                              New_Def QTERMINAL, "?TERMINAL", is_code, is_normal
 858+ 6733             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 858+ 6733             >
 858+ 6733             >                // dummy db directives used to calculate length of namec
 858+ 6733 3F 54 45 52 >                db      "?TERMINAL"
 858+ 6737 4D 49 4E 41 >
 858+ 673B 4C          >
 858+ 673C             >len_NFA         defl    $ - temp_NFA
 858+ 673C             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 858+ 6733             >
 858+ 6733 89          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 858+ 6734 3F 54 45 52 >                db      "?TERMINAL"               // name string in 7-bit ascii, but
 858+ 6738 4D 49 4E 41 >
 858+ 673C 4C          >
 858+ 673D             >                org     $-1                 // alter last byte of Name just above to set
 858+ 673C CC          >                db      {b $} | END_BIT     // msb as name end
 858+ 673D             >
 858+ 673D B2 66       >                dw      last_NFA            // Link to previous definition Name
 858+ 673F             >QTERMINAL:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 858+ 673F ~           >                dw      runcode ; ok        // for primitive definitions  actual code
 858+ 673F             >                else
 858+ 673F 41 67       >                dw      $ + 2   ; ok        // is pointed by CFA
 858+ 6741             >                endif           ; ok        // for other definitions it "points" the correct handler
 858+ 6741             >                // Use of "; ok" to suppress "warning[fwdref]"
 858+ 6741             >
 858+ 6741             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 859+ 6741 D9                           exx
 860+ 6742 01 FE 7F                     ld      bc, $7ffe
 861+ 6745 ED 50                        in      d, (c)
 862+ 6747 41                           ld      b, c
 863+ 6748 ED 78                        in      a, (c)
 864+ 674A B2                           or       d
 865+ 674B 1F                           rra
 866+ 674C 3F                           ccf
 867+ 674D ED 62                        sbc     hl, hl
 868+ 674F E5                           push    hl
 869+ 6750 D9                           exx
 870+ 6751                              next
 870+ 6751 DD E9       >                jp      (ix)
 871+ 6753
 872+ 6753
 873+ 6753              //  ______________________________________________________________________
 874+ 6753              //
 875+ 6753              // inkey        -- c | 0
 876+ 6753              // call ROM inkey$ routine, returns c or "zero".
 877+ 6753
 878+ 6753                              New_Def INKEY, "INKEY", is_code, is_normal
 878+ 6753             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 878+ 6753             >
 878+ 6753             >                // dummy db directives used to calculate length of namec
 878+ 6753 49 4E 4B 45 >                db      "INKEY"
 878+ 6757 59          >
 878+ 6758             >len_NFA         defl    $ - temp_NFA
 878+ 6758             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 878+ 6753             >
 878+ 6753 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 878+ 6754 49 4E 4B 45 >                db      "INKEY"               // name string in 7-bit ascii, but
 878+ 6758 59          >
 878+ 6759             >                org     $-1                 // alter last byte of Name just above to set
 878+ 6758 D9          >                db      {b $} | END_BIT     // msb as name end
 878+ 6759             >
 878+ 6759 33 67       >                dw      last_NFA            // Link to previous definition Name
 878+ 675B             >INKEY:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 878+ 675B ~           >                dw      runcode ; ok        // for primitive definitions  actual code
 878+ 675B             >                else
 878+ 675B 5D 67       >                dw      $ + 2   ; ok        // is pointed by CFA
 878+ 675D             >                endif           ; ok        // for other definitions it "points" the correct handler
 878+ 675D             >                // Use of "; ok" to suppress "warning[fwdref]"
 878+ 675D             >
 878+ 675D             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 879+ 675D
 880+ 675D C5                           push    bc
 881+ 675E ED 73 92 63                  ld      (SP_Saved), sp
 882+ 6762 31 61 63                     ld      sp, Cold_origin - 5
 883+ 6765 DD E5                        push    ix
 884+ 6767 CD E6 15                     call    $15E6                   // instead of 15E9
 885+ 676A DD E1                        pop     ix
 886+ 676C ED 7B 92 63                  ld      sp, (SP_Saved)
 887+ 6770 6F                           ld      l, a
 888+ 6771 26 00                        ld      h, 0
 889+ 6773 C1                           pop     bc
 890+ 6774                              psh1
 890+ 6774 E5          >                push    hl
 890+ 6775 DD E9       >                jp      (ix)
 891+ 6777
 892+ 6777              //  ______________________________________________________________________
 893+ 6777              //
 894+ 6777              // select      n --
 895+ 6777              // selects the given channel number
 896+ 6777
 897+ 6777                              New_Def SELECT, "SELECT", is_code, is_normal
 897+ 6777             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 897+ 6777             >
 897+ 6777             >                // dummy db directives used to calculate length of namec
 897+ 6777 53 45 4C 45 >                db      "SELECT"
 897+ 677B 43 54       >
 897+ 677D             >len_NFA         defl    $ - temp_NFA
 897+ 677D             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 897+ 6777             >
 897+ 6777 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 897+ 6778 53 45 4C 45 >                db      "SELECT"               // name string in 7-bit ascii, but
 897+ 677C 43 54       >
 897+ 677E             >                org     $-1                 // alter last byte of Name just above to set
 897+ 677D D4          >                db      {b $} | END_BIT     // msb as name end
 897+ 677E             >
 897+ 677E 53 67       >                dw      last_NFA            // Link to previous definition Name
 897+ 6780             >SELECT:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 897+ 6780 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
 897+ 6780             >                else
 897+ 6780 82 67       >                dw      $ + 2   ; ok        // is pointed by CFA
 897+ 6782             >                endif           ; ok        // for other definitions it "points" the correct handler
 897+ 6782             >                // Use of "; ok" to suppress "warning[fwdref]"
 897+ 6782             >
 897+ 6782             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 898+ 6782 E1                           pop     hl
 899+ 6783 C5                           push    bc
 900+ 6784 7D                           ld      a, l
 901+ 6785 ED 73 92 63                  ld      (SP_Saved), sp
 902+ 6789 31 61 63                     ld      sp, Cold_origin - 5
 903+ 678C DD E5                        push    ix
 904+ 678E CD 01 16                     call    $1601
 905+ 6791 DD E1                        pop     ix
 906+ 6793 ED 7B 92 63                  ld      sp, (SP_Saved)
 907+ 6797 C1                           pop     bc
 908+ 6798
 909+ 6798                              next
 909+ 6798 DD E9       >                jp      (ix)
 910+ 679A
 911+ 679A              //  ______________________________________________________________________
 912+ 679A              //
 913+ 679A              // ZX Spectrum Next - Low Level disk primitives.
 914+ 679A              // this include is "here" for backward compatibility
 915+ 679A
 916+ 679A                              include "next-opt0.asm"
# file opened: C:\Zx\CSpect\Projects\vForth15_INDIRECT/source/next-opt0.asm
   1++679A              //  ______________________________________________________________________
   2++679A              //
   3++679A              //  next-opt.asm
   4++679A              //
   5++679A              //  ZX Spectrum Next - peculiar definitions
   6++679A              //  ______________________________________________________________________
   7++679A
   8++679A              //  ______________________________________________________________________
   9++679A              //
  10++679A              // f_seek       d u -- f
  11++679A              // Seek to position d in file-handle u.
  12++679A              // Return a false-flag 0 on success, True flag on error
  13++679A                              New_Def F_SEEK, "F_SEEK", is_code, is_normal
  13++679A             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  13++679A             >
  13++679A             >                // dummy db directives used to calculate length of namec
  13++679A 46 5F 53 45 >                db      "F_SEEK"
  13++679E 45 4B       >
  13++67A0             >len_NFA         defl    $ - temp_NFA
  13++67A0             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  13++679A             >
  13++679A 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  13++679B 46 5F 53 45 >                db      "F_SEEK"               // name string in 7-bit ascii, but
  13++679F 45 4B       >
  13++67A1             >                org     $-1                 // alter last byte of Name just above to set
  13++67A0 CB          >                db      {b $} | END_BIT     // msb as name end
  13++67A1             >
  13++67A1 77 67       >                dw      last_NFA            // Link to previous definition Name
  13++67A3             >F_SEEK:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
  13++67A3 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
  13++67A3             >                else
  13++67A3 A5 67       >                dw      $ + 2   ; ok        // is pointed by CFA
  13++67A5             >                endif           ; ok        // for other definitions it "points" the correct handler
  13++67A5             >                // Use of "; ok" to suppress "warning[fwdref]"
  13++67A5             >
  13++67A5             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  14++67A5 E1                           pop     hl                  // file-handle
  15++67A6 7D                           ld      a, l                // file-handle
  16++67A7 60                           ld      h, b                // save Intruction Pointer
  17++67A8 69                           ld      l, c
  18++67A9 C1                           pop     bc                  // bc has high-word of d
  19++67AA D1                           pop     de
  20++67AB DD E5                        push    ix
  21++67AD E5                           push    hl                  // save Instruction Pointer
  22++67AE DD 21 00 00                  ld      ix, 0
  23++67B2 CF                           rst     $08
  24++67B3 9F                           db      $9F
  25++67B4              F_Seek_Exit:
  26++67B4 C1                           pop     bc                  // restore Instruction Pointer
  27++67B5 DD E1                        pop     ix
  28++67B7 ED 62                        sbc     hl, hl              // to get 0 or -1
  29++67B9
  30++67B9                              psh1
  30++67B9 E5          >                push    hl
  30++67BA DD E9       >                jp      (ix)
  31++67BC
  32++67BC              //  ______________________________________________________________________
  33++67BC              //
  34++67BC              // f_close      u -- f
  35++67BC              // Close file-handle u.
  36++67BC              // Return 0 on success, True flag on error
  37++67BC
  38++67BC                              New_Def F_CLOSE, "F_CLOSE", is_code, is_normal
  38++67BC             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  38++67BC             >
  38++67BC             >                // dummy db directives used to calculate length of namec
  38++67BC 46 5F 43 4C >                db      "F_CLOSE"
  38++67C0 4F 53 45    >
  38++67C3             >len_NFA         defl    $ - temp_NFA
  38++67C3             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  38++67BC             >
  38++67BC 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  38++67BD 46 5F 43 4C >                db      "F_CLOSE"               // name string in 7-bit ascii, but
  38++67C1 4F 53 45    >
  38++67C4             >                org     $-1                 // alter last byte of Name just above to set
  38++67C3 C5          >                db      {b $} | END_BIT     // msb as name end
  38++67C4             >
  38++67C4 9A 67       >                dw      last_NFA            // Link to previous definition Name
  38++67C6             >F_CLOSE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
  38++67C6 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
  38++67C6             >                else
  38++67C6 C8 67       >                dw      $ + 2   ; ok        // is pointed by CFA
  38++67C8             >                endif           ; ok        // for other definitions it "points" the correct handler
  38++67C8             >                // Use of "; ok" to suppress "warning[fwdref]"
  38++67C8             >
  38++67C8             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  39++67C8
  40++67C8 E1                           pop     hl
  41++67C9 7D                           ld      a, l                // file-handle
  42++67CA DD E5                        push    ix
  43++67CC C5                           push    bc                  // Save Instruction pointer
  44++67CD CF                           rst     $08
  45++67CE 9B                           db      $9B
  46++67CF 18 E3                        jr      F_Seek_Exit
  47++67D1              //              pop     bc
  48++67D1              //              pop     ix
  49++67D1              //              sbc     hl, hl
  50++67D1              //              psh1
  51++67D1
  52++67D1              //  ______________________________________________________________________
  53++67D1              //
  54++67D1              // f_sync      u -- f
  55++67D1              // Close file-handle u.
  56++67D1              // Return 0 on success, True flag on error
  57++67D1
  58++67D1                              New_Def F_SYNC, "F_SYNC", is_code, is_normal
  58++67D1             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  58++67D1             >
  58++67D1             >                // dummy db directives used to calculate length of namec
  58++67D1 46 5F 53 59 >                db      "F_SYNC"
  58++67D5 4E 43       >
  58++67D7             >len_NFA         defl    $ - temp_NFA
  58++67D7             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  58++67D1             >
  58++67D1 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  58++67D2 46 5F 53 59 >                db      "F_SYNC"               // name string in 7-bit ascii, but
  58++67D6 4E 43       >
  58++67D8             >                org     $-1                 // alter last byte of Name just above to set
  58++67D7 C3          >                db      {b $} | END_BIT     // msb as name end
  58++67D8             >
  58++67D8 BC 67       >                dw      last_NFA            // Link to previous definition Name
  58++67DA             >F_SYNC:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
  58++67DA ~           >                dw      runcode ; ok        // for primitive definitions  actual code
  58++67DA             >                else
  58++67DA DC 67       >                dw      $ + 2   ; ok        // is pointed by CFA
  58++67DC             >                endif           ; ok        // for other definitions it "points" the correct handler
  58++67DC             >                // Use of "; ok" to suppress "warning[fwdref]"
  58++67DC             >
  58++67DC             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  59++67DC E1                           pop     hl
  60++67DD 7D                           ld      a, l                // file-handle
  61++67DE DD E5                        push    ix
  62++67E0 C5                           push    bc
  63++67E1 CF                           rst     $08
  64++67E2 9C                           db      $9C
  65++67E3 18 CF                        jr      F_Seek_Exit
  66++67E5              //              pop     bc
  67++67E5              //              pop     ix
  68++67E5              //              sbc     hl, hl
  69++67E5              //              psh1
  70++67E5
  71++67E5              //  ______________________________________________________________________
  72++67E5              //
  73++67E5              // f_fgetpos    u -- d f
  74++67E5              // Seek to position d in file-handle u.
  75++67E5              // Return a false-flag 0 on success, True flag on error
  76++67E5                              New_Def F_FGETPOS, "F_FGETPOS", is_code, is_normal
  76++67E5             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  76++67E5             >
  76++67E5             >                // dummy db directives used to calculate length of namec
  76++67E5 46 5F 46 47 >                db      "F_FGETPOS"
  76++67E9 45 54 50 4F >
  76++67ED 53          >
  76++67EE             >len_NFA         defl    $ - temp_NFA
  76++67EE             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  76++67E5             >
  76++67E5 89          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  76++67E6 46 5F 46 47 >                db      "F_FGETPOS"               // name string in 7-bit ascii, but
  76++67EA 45 54 50 4F >
  76++67EE 53          >
  76++67EF             >                org     $-1                 // alter last byte of Name just above to set
  76++67EE D3          >                db      {b $} | END_BIT     // msb as name end
  76++67EF             >
  76++67EF D1 67       >                dw      last_NFA            // Link to previous definition Name
  76++67F1             >F_FGETPOS:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
  76++67F1 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
  76++67F1             >                else
  76++67F1 F3 67       >                dw      $ + 2   ; ok        // is pointed by CFA
  76++67F3             >                endif           ; ok        // for other definitions it "points" the correct handler
  76++67F3             >                // Use of "; ok" to suppress "warning[fwdref]"
  76++67F3             >
  76++67F3             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  77++67F3 E1                           pop     hl
  78++67F4 7D                           ld      a, l                // file-handle
  79++67F5 DD E5                        push    ix
  80++67F7 C5                           push    bc
  81++67F8 CF                           rst     $08
  82++67F9 A0                           db      $A0
  83++67FA E1                           pop     hl                  // restore Instruction Pointer
  84++67FB DD E1                        pop     ix
  85++67FD D5                           push    de
  86++67FE C5                           push    bc
  87++67FF 44                           ld      b, h                // restore Instruction Pointer
  88++6800 4D                           ld      c, l
  89++6801 ED 62                        sbc     hl, hl
  90++6803
  91++6803                              psh1
  91++6803 E5          >                push    hl
  91++6804 DD E9       >                jp      (ix)
  92++6806
  93++6806              //  ______________________________________________________________________
  94++6806              //
  95++6806              // f_read       a b u -- n f
  96++6806              // Read b bytes from file-handle u to address a
  97++6806              // Return the actual number n of bytes read
  98++6806              // Return 0 on success, True flag on error
  99++6806                              New_Def F_READ, "F_READ", is_code, is_normal
  99++6806             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  99++6806             >
  99++6806             >                // dummy db directives used to calculate length of namec
  99++6806 46 5F 52 45 >                db      "F_READ"
  99++680A 41 44       >
  99++680C             >len_NFA         defl    $ - temp_NFA
  99++680C             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  99++6806             >
  99++6806 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  99++6807 46 5F 52 45 >                db      "F_READ"               // name string in 7-bit ascii, but
  99++680B 41 44       >
  99++680D             >                org     $-1                 // alter last byte of Name just above to set
  99++680C C4          >                db      {b $} | END_BIT     // msb as name end
  99++680D             >
  99++680D E5 67       >                dw      last_NFA            // Link to previous definition Name
  99++680F             >F_READ:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
  99++680F ~           >                dw      runcode ; ok        // for primitive definitions  actual code
  99++680F             >                else
  99++680F 11 68       >                dw      $ + 2   ; ok        // is pointed by CFA
  99++6811             >                endif           ; ok        // for other definitions it "points" the correct handler
  99++6811             >                // Use of "; ok" to suppress "warning[fwdref]"
  99++6811             >
  99++6811             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 100++6811
 101++6811 50                           ld      d, b
 102++6812 59                           ld      e, c
 103++6813 E1                           pop     hl
 104++6814 7D                           ld      a, l                // file-handle
 105++6815 C1                           pop     bc                  // bc has bytes to read
 106++6816 DD E3                        ex      (sp), ix            // ix has address
 107++6818 D5                           push    de                  // Save Instruction pointer
 108++6819 CF                           rst     $08
 109++681A 9D                           db      $9D
 110++681B              F_Read_Exit:
 111++681B C1                           pop     bc                  // Restore Instruction pointer
 112++681C DD E1                        pop     ix                  // Restore ix
 113++681E D5                           push    de                  // bytes written
 114++681F ED 62                        sbc     hl, hl
 115++6821
 116++6821                              psh1
 116++6821 E5          >                push    hl
 116++6822 DD E9       >                jp      (ix)
 117++6824
 118++6824              //  ______________________________________________________________________
 119++6824              //
 120++6824              // f_write      a b u -- n f
 121++6824              // Write bytes currently stored at address a to file-handle u.
 122++6824              // Return the actual n bytes written and 0 on success, True flag on error.
 123++6824                              New_Def F_WRITE, "F_WRITE", is_code, is_normal
 123++6824             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 123++6824             >
 123++6824             >                // dummy db directives used to calculate length of namec
 123++6824 46 5F 57 52 >                db      "F_WRITE"
 123++6828 49 54 45    >
 123++682B             >len_NFA         defl    $ - temp_NFA
 123++682B             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 123++6824             >
 123++6824 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 123++6825 46 5F 57 52 >                db      "F_WRITE"               // name string in 7-bit ascii, but
 123++6829 49 54 45    >
 123++682C             >                org     $-1                 // alter last byte of Name just above to set
 123++682B C5          >                db      {b $} | END_BIT     // msb as name end
 123++682C             >
 123++682C 06 68       >                dw      last_NFA            // Link to previous definition Name
 123++682E             >F_WRITE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 123++682E ~           >                dw      runcode ; ok        // for primitive definitions  actual code
 123++682E             >                else
 123++682E 30 68       >                dw      $ + 2   ; ok        // is pointed by CFA
 123++6830             >                endif           ; ok        // for other definitions it "points" the correct handler
 123++6830             >                // Use of "; ok" to suppress "warning[fwdref]"
 123++6830             >
 123++6830             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 124++6830
 125++6830 50                           ld      d, b
 126++6831 59                           ld      e, c
 127++6832 E1                           pop     hl
 128++6833 7D                           ld      a, l                // file-handle
 129++6834 C1                           pop     bc                  // bc has bytes to read
 130++6835 DD E3                        ex      (sp), ix            // ix has address
 131++6837 D5                           push    de                  // Save Instruction pointer
 132++6838 CF                           rst     $08
 133++6839 9E                           db      $9E
 134++683A 18 DF                        jr F_Read_Exit
 135++683C              //              pop     bc                  // Restore Instruction pointer
 136++683C              //              pop     ix                  // Restore ix
 137++683C              //              push    de                  // bytes written
 138++683C              //              sbc     hl, hl
 139++683C              //
 140++683C              //              psh1
 141++683C
 142++683C              //  ______________________________________________________________________
 143++683C              //
 144++683C              // f_open       a1 a2 b -- u f
 145++683C              // open a file
 146++683C              // a1 (filespec) is a null-terminated string, such as produced by ," definition
 147++683C              // a2 is address to an 8-byte header data used in some cases.
 148++683C              // b is access mode-byte, that is a combination of:
 149++683C              // any/all of:
 150++683C              //   esx_mode_read          $01 request read access
 151++683C              //   esx_mode_write         $02 request write access
 152++683C              //   esx_mode_use_header    $40 read/write +3DOS header
 153++683C              // plus one of:
 154++683C              //   esx_mode_open_exist    $00 only open existing file
 155++683C              //   esx_mode_open_creat    $08 open existing or create file
 156++683C              //   esx_mode_creat_noexist $04 create new file, error if exists
 157++683C              //   esx_mode_creat_trunc   $0c create new file, delete existing
 158++683C              // Return file-handle u and 0 on success, True flag on error
 159++683C                              New_Def F_OPEN, "F_OPEN", is_code, is_normal
 159++683C             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 159++683C             >
 159++683C             >                // dummy db directives used to calculate length of namec
 159++683C 46 5F 4F 50 >                db      "F_OPEN"
 159++6840 45 4E       >
 159++6842             >len_NFA         defl    $ - temp_NFA
 159++6842             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 159++683C             >
 159++683C 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 159++683D 46 5F 4F 50 >                db      "F_OPEN"               // name string in 7-bit ascii, but
 159++6841 45 4E       >
 159++6843             >                org     $-1                 // alter last byte of Name just above to set
 159++6842 CE          >                db      {b $} | END_BIT     // msb as name end
 159++6843             >
 159++6843 24 68       >                dw      last_NFA            // Link to previous definition Name
 159++6845             >F_OPEN:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 159++6845 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
 159++6845             >                else
 159++6845 47 68       >                dw      $ + 2   ; ok        // is pointed by CFA
 159++6847             >                endif           ; ok        // for other definitions it "points" the correct handler
 159++6847             >                // Use of "; ok" to suppress "warning[fwdref]"
 159++6847             >
 159++6847             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 160++6847 60                           ld      h, b                // Save Instruction pointer
 161++6848 69                           ld      l, c
 162++6849 C1                           pop     bc                  // file-mode
 163++684A 41                           ld      b, c                // file-mode
 164++684B D1                           pop     de                  // 8-bytes buffer if any
 165++684C DD E3                        ex      (sp), ix            // filespec nul-terminated
 166++684E E5                           push    hl                  // Save Instruction pointer
 167++684F 3E 2A                        ld      a, "*"
 168++6851 CF                           rst     $08
 169++6852 9A                           db      $9A
 170++6853              F_Open_Exit:
 171++6853 5F                           ld      e, a
 172++6854 16 00                        ld      d, 0
 173++6856 18 C3                        jr      F_Read_Exit
 174++6858
 175++6858              //   \ CREATE FILENAME ," test.txt"   \ new Counted String
 176++6858              //   \ FILENAME 1+ PAD 1 F_OPEN
 177++6858              //   \ DROP
 178++6858              //   \ F_CLOSE
 179++6858
 180++6858
 181++6858              //  ______________________________________________________________________
 182++6858              //
 183++6858              // f_opendir    a1 a2 b -- u f
 184++6858              // open a file
 185++6858                              New_Def F_OPENDIR, "F_OPENDIR", is_code, is_normal
 185++6858             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 185++6858             >
 185++6858             >                // dummy db directives used to calculate length of namec
 185++6858 46 5F 4F 50 >                db      "F_OPENDIR"
 185++685C 45 4E 44 49 >
 185++6860 52          >
 185++6861             >len_NFA         defl    $ - temp_NFA
 185++6861             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 185++6858             >
 185++6858 89          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 185++6859 46 5F 4F 50 >                db      "F_OPENDIR"               // name string in 7-bit ascii, but
 185++685D 45 4E 44 49 >
 185++6861 52          >
 185++6862             >                org     $-1                 // alter last byte of Name just above to set
 185++6861 D2          >                db      {b $} | END_BIT     // msb as name end
 185++6862             >
 185++6862 3C 68       >                dw      last_NFA            // Link to previous definition Name
 185++6864             >F_OPENDIR:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 185++6864 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
 185++6864             >                else
 185++6864 66 68       >                dw      $ + 2   ; ok        // is pointed by CFA
 185++6866             >                endif           ; ok        // for other definitions it "points" the correct handler
 185++6866             >                // Use of "; ok" to suppress "warning[fwdref]"
 185++6866             >
 185++6866             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 186++6866 DD E3                        ex      (sp), ix            // filespec nul-terminated
 187++6868 C5                           push    bc                  // Save Instruction pointer
 188++6869 06 10                        ld      b, $10              // file-mode
 189++686B 3E 43                        ld      a, "C"
 190++686D CF                           rst     $08
 191++686E A3                           db      $A3
 192++686F 18 E2                        jr      F_Open_Exit
 193++6871
 194++6871
 195++6871              //  ______________________________________________________________________
 196++6871              //
 197++6871              // f_readdir    a1 a2 b -- u f
 198++6871              // open a file
 199++6871                              New_Def F_READDIR, "F_READDIR", is_code, is_normal
 199++6871             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 199++6871             >
 199++6871             >                // dummy db directives used to calculate length of namec
 199++6871 46 5F 52 45 >                db      "F_READDIR"
 199++6875 41 44 44 49 >
 199++6879 52          >
 199++687A             >len_NFA         defl    $ - temp_NFA
 199++687A             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 199++6871             >
 199++6871 89          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 199++6872 46 5F 52 45 >                db      "F_READDIR"               // name string in 7-bit ascii, but
 199++6876 41 44 44 49 >
 199++687A 52          >
 199++687B             >                org     $-1                 // alter last byte of Name just above to set
 199++687A D2          >                db      {b $} | END_BIT     // msb as name end
 199++687B             >
 199++687B 58 68       >                dw      last_NFA            // Link to previous definition Name
 199++687D             >F_READDIR:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 199++687D ~           >                dw      runcode ; ok        // for primitive definitions  actual code
 199++687D             >                else
 199++687D 7F 68       >                dw      $ + 2   ; ok        // is pointed by CFA
 199++687F             >                endif           ; ok        // for other definitions it "points" the correct handler
 199++687F             >                // Use of "; ok" to suppress "warning[fwdref]"
 199++687F             >
 199++687F             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 200++687F E1                           pop     hl
 201++6880 7D                           ld      a, l
 202++6881 D1                           pop     de
 203++6882 DD E3                        ex      (sp), ix            // filespec nul-terminated
 204++6884 C5                           push    bc                  // Save Instruction pointer
 205++6885 CF                           rst     $08
 206++6886 A4                           db      $A4
 207++6887 18 CA                        jr      F_Open_Exit
 208++6889
# file closed: C:\Zx\CSpect\Projects\vForth15_INDIRECT/source/next-opt0.asm
 917+ 6889
 918+ 6889
 919+ 6889              //  ______________________________________________________________________
 920+ 6889              //
 921+ 6889              // cmove    a1 a2 u --
 922+ 6889              // If u > 0, moves memory content starting at address a1 for n bytes long
 923+ 6889              // storing then starting at address addr2.
 924+ 6889              // The content of a1 is moved first. See CMOVE> also.
 925+ 6889                              New_Def CMOVE, "CMOVE", is_code, is_normal
 925+ 6889             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 925+ 6889             >
 925+ 6889             >                // dummy db directives used to calculate length of namec
 925+ 6889 43 4D 4F 56 >                db      "CMOVE"
 925+ 688D 45          >
 925+ 688E             >len_NFA         defl    $ - temp_NFA
 925+ 688E             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 925+ 6889             >
 925+ 6889 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 925+ 688A 43 4D 4F 56 >                db      "CMOVE"               // name string in 7-bit ascii, but
 925+ 688E 45          >
 925+ 688F             >                org     $-1                 // alter last byte of Name just above to set
 925+ 688E C5          >                db      {b $} | END_BIT     // msb as name end
 925+ 688F             >
 925+ 688F 71 68       >                dw      last_NFA            // Link to previous definition Name
 925+ 6891             >CMOVE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 925+ 6891 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
 925+ 6891             >                else
 925+ 6891 93 68       >                dw      $ + 2   ; ok        // is pointed by CFA
 925+ 6893             >                endif           ; ok        // for other definitions it "points" the correct handler
 925+ 6893             >                // Use of "; ok" to suppress "warning[fwdref]"
 925+ 6893             >
 925+ 6893             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 926+ 6893 D9                           exx
 927+ 6894 C1                           pop     bc                  // bc has counter
 928+ 6895 D1                           pop     de                  // de now has dest
 929+ 6896 E1                           pop     hl                  // hl has source, save Instruction Pointer
 930+ 6897 78                           ld      a, b
 931+ 6898 B1                           or      c
 932+ 6899 28 02                        jr      z, Cmove_NoMove
 933+ 689B ED B0                            ldir
 934+ 689D              Cmove_NoMove:
 935+ 689D D9                           exx
 936+ 689E                              next
 936+ 689E DD E9       >                jp      (ix)
 937+ 68A0
 938+ 68A0              //  ______________________________________________________________________
 939+ 68A0              //
 940+ 68A0              // cmove>    a1 a2 u --
 941+ 68A0              // If u > 0, moves memory content starting at address a1 for n bytes long
 942+ 68A0              // storing then starting at address addr2.
 943+ 68A0              // The content of a1 is moved last. See cmove.
 944+ 68A0                              New_Def CMOVE_TO, "CMOVE>", is_code, is_normal
 944+ 68A0             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 944+ 68A0             >
 944+ 68A0             >                // dummy db directives used to calculate length of namec
 944+ 68A0 43 4D 4F 56 >                db      "CMOVE>"
 944+ 68A4 45 3E       >
 944+ 68A6             >len_NFA         defl    $ - temp_NFA
 944+ 68A6             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 944+ 68A0             >
 944+ 68A0 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 944+ 68A1 43 4D 4F 56 >                db      "CMOVE>"               // name string in 7-bit ascii, but
 944+ 68A5 45 3E       >
 944+ 68A7             >                org     $-1                 // alter last byte of Name just above to set
 944+ 68A6 BE          >                db      {b $} | END_BIT     // msb as name end
 944+ 68A7             >
 944+ 68A7 89 68       >                dw      last_NFA            // Link to previous definition Name
 944+ 68A9             >CMOVE_TO:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 944+ 68A9 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
 944+ 68A9             >                else
 944+ 68A9 AB 68       >                dw      $ + 2   ; ok        // is pointed by CFA
 944+ 68AB             >                endif           ; ok        // for other definitions it "points" the correct handler
 944+ 68AB             >                // Use of "; ok" to suppress "warning[fwdref]"
 944+ 68AB             >
 944+ 68AB             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 945+ 68AB D9                           exx
 946+ 68AC C1                           pop     bc                  // bc has counter
 947+ 68AD D1                           pop     de                  // de has dest
 948+ 68AE E1                           pop     hl                  // hl has source, save Instruction Pointer
 949+ 68AF 78                           ld      a, b
 950+ 68B0 B1                           or      c
 951+ 68B1 28 08                        jr      z, CmoveV_NoMove
 952+ 68B3 EB                               ex      de, hl              // compute address to
 953+ 68B4 09                               add     hl, bc              // operate backward
 954+ 68B5 2B                               dec     hl
 955+ 68B6 EB                               ex      de, hl
 956+ 68B7 09                               add     hl, bc
 957+ 68B8 2B                               dec     hl
 958+ 68B9 ED B8                            lddr                        // backward
 959+ 68BB              CmoveV_NoMove:
 960+ 68BB D9                           exx
 961+ 68BC                              next
 961+ 68BC DD E9       >                jp      (ix)
 962+ 68BE
 963+ 68BE              //  ______________________________________________________________________
 964+ 68BE              //
 965+ 68BE              // um*      u1 u2 -- ud
 966+ 68BE              // Unsigned multiplication
 967+ 68BE              // A double-integer is kept in CPU registers as DEHL then pushed on stack.
 968+ 68BE              // On the stack a double number is treated as two single numbers
 969+ 68BE              // where DE is on the top of the stack and HL is the second from top,
 970+ 68BE              // Instead, in 2VARIABLE a double number is stored as EDLH.
 971+ 68BE              // this definition could use "MUL" Z80N new op-code.
 972+ 68BE                              New_Def UM_MUL, "UM*", is_code, is_normal
 972+ 68BE             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 972+ 68BE             >
 972+ 68BE             >                // dummy db directives used to calculate length of namec
 972+ 68BE 55 4D 2A    >                db      "UM*"
 972+ 68C1             >len_NFA         defl    $ - temp_NFA
 972+ 68C1             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 972+ 68BE             >
 972+ 68BE 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 972+ 68BF 55 4D 2A    >                db      "UM*"               // name string in 7-bit ascii, but
 972+ 68C2             >                org     $-1                 // alter last byte of Name just above to set
 972+ 68C1 AA          >                db      {b $} | END_BIT     // msb as name end
 972+ 68C2             >
 972+ 68C2 A0 68       >                dw      last_NFA            // Link to previous definition Name
 972+ 68C4             >UM_MUL:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 972+ 68C4 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
 972+ 68C4             >                else
 972+ 68C4 C6 68       >                dw      $ + 2   ; ok        // is pointed by CFA
 972+ 68C6             >                endif           ; ok        // for other definitions it "points" the correct handler
 972+ 68C6             >                // Use of "; ok" to suppress "warning[fwdref]"
 972+ 68C6             >
 972+ 68C6             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 973+ 68C6 D9                           exx
 974+ 68C7 D1                           pop     de                    // de has u2 operand
 975+ 68C8 E1                           pop     hl                    // hl has u1 operand
 976+ 68C9 45                           ld      b, l
 977+ 68CA 4B                           ld      c, e
 978+ 68CB 5D                           ld      e, l
 979+ 68CC 6A                           ld      l, d
 980+ 68CD E5                           push    hl
 981+ 68CE 69                           ld      l, c
 982+ 68CF ED 30                        mul
 983+ 68D1 EB                           ex      de, hl
 984+ 68D2 ED 30                        mul
 985+ 68D4 AF                           xor     a
 986+ 68D5 19                           add     hl, de
 987+ 68D6 8F                           adc     a
 988+ 68D7 59                           ld      e, c
 989+ 68D8 50                           ld      d, b
 990+ 68D9 ED 30                        mul
 991+ 68DB 47                           ld      b, a
 992+ 68DC 4C                           ld      c, h
 993+ 68DD 7A                           ld      a, d
 994+ 68DE 85                           add     l
 995+ 68DF 67                           ld      h, a
 996+ 68E0 6B                           ld      l, e
 997+ 68E1 D1                           pop     de
 998+ 68E2 ED 30                        mul
 999+ 68E4 EB                           ex      de, hl
1000+ 68E5 ED 4A                        adc     hl, bc
1001+ 68E7 D5                           push    de
1002+ 68E8 E5                           push    hl
1003+ 68E9 D9                           exx
1004+ 68EA                              next
1004+ 68EA DD E9       >                jp      (ix)
1005+ 68EC
1006+ 68EC              //  ______________________________________________________________________
1007+ 68EC              //
1008+ 68EC              // um/mod      ud u1 -- q r
1009+ 68EC              // divides ud into u1 giving quotient q and remainder r
1010+ 68EC              // algorithm takes 16 bit at a time starting from msb
1011+ 68EC              // DE grows from lsb upward with quotient result
1012+ 68EC              // HL keeps the remainder at each stage of division
1013+ 68EC              // each loop 'lowers' the next binary digit to form the current dividend
1014+ 68EC                              New_Def UMDIVMOD, "UM/MOD", is_code, is_normal
1014+ 68EC             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1014+ 68EC             >
1014+ 68EC             >                // dummy db directives used to calculate length of namec
1014+ 68EC 55 4D 2F 4D >                db      "UM/MOD"
1014+ 68F0 4F 44       >
1014+ 68F2             >len_NFA         defl    $ - temp_NFA
1014+ 68F2             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1014+ 68EC             >
1014+ 68EC 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1014+ 68ED 55 4D 2F 4D >                db      "UM/MOD"               // name string in 7-bit ascii, but
1014+ 68F1 4F 44       >
1014+ 68F3             >                org     $-1                 // alter last byte of Name just above to set
1014+ 68F2 C4          >                db      {b $} | END_BIT     // msb as name end
1014+ 68F3             >
1014+ 68F3 BE 68       >                dw      last_NFA            // Link to previous definition Name
1014+ 68F5             >UMDIVMOD:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1014+ 68F5 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1014+ 68F5             >                else
1014+ 68F5 F7 68       >                dw      $ + 2   ; ok        // is pointed by CFA
1014+ 68F7             >                endif           ; ok        // for other definitions it "points" the correct handler
1014+ 68F7             >                // Use of "; ok" to suppress "warning[fwdref]"
1014+ 68F7             >
1014+ 68F7             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1015+ 68F7 D9                           exx
1016+ 68F8 C1                           pop     bc                      // divisor
1017+ 68F9
1018+ 68F9 E1                           pop     hl                      // < high part
1019+ 68FA D1                           pop     de                      // < low part and
1020+ 68FB
1021+ 68FB 7D                           ld      a, l                    // check without changing arguments
1022+ 68FC 91                           sub     c                       // if divisor is greater than high part
1023+ 68FD 7C                           ld      a, h                    // so quotient will be in range
1024+ 68FE 98                           sbc     a, b
1025+ 68FF 30 20                        jr      nc, Um_DivMod_OutOfRange
1026+ 6901 3E 10                            ld      a, 16
1027+ 6903              Um_DivMod_Loop:
1028+ 6903 CB 23                                sla     e
1029+ 6905 CB 12                                rl      d
1030+ 6907 ED 6A                                adc     hl, hl
1031+ 6909 30 05                                jr      nc, Um_DivMod_Carry
1032+ 690B A7                                       and     a
1033+ 690C ED 42                                    sbc     hl, bc
1034+ 690E 18 07                                jr      Um_DivMod_Endif    // else
1035+ 6910              Um_DivMod_Carry:
1036+ 6910 A7                                       and     a
1037+ 6911 ED 42                                    sbc     hl, bc
1038+ 6913 30 02                                    jr      nc, Um_DivMod_Endif
1039+ 6915 09                                           add     hl, bc
1040+ 6916 1B                                           dec     de
1041+ 6917              Um_DivMod_Endif:                                   // endif
1042+ 6917 13                                   inc     de
1043+ 6918 3D                                   dec     a
1044+ 6919 20 E8                            jr      nz, Um_DivMod_Loop
1045+ 691B EB                               ex      de, hl
1046+ 691C              Um_DivMod_Bailout:
1047+ 691C D5                               push    de                  // de := remanider
1048+ 691D E5                               push    hl                  // hl := quotient
1049+ 691E D9                               exx
1050+ 691F                                  next
1050+ 691F DD E9       >                jp      (ix)
1051+ 6921
1052+ 6921              Um_DivMod_OutOfRange:
1053+ 6921 21 FF FF                     ld      hl, -1
1054+ 6924 54                           ld      d, h
1055+ 6925 5D                           ld      e, l
1056+ 6926 18 F4                        jr      Um_DivMod_Bailout
1057+ 6928
1058+ 6928              //  ______________________________________________________________________
1059+ 6928              //
1060+ 6928              // and          n1 n2 -- n3
1061+ 6928              // bit logical AND. Returns n3 as n1 & n2
1062+ 6928                              New_Def AND_OP, "AND", is_code, is_normal
1062+ 6928             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1062+ 6928             >
1062+ 6928             >                // dummy db directives used to calculate length of namec
1062+ 6928 41 4E 44    >                db      "AND"
1062+ 692B             >len_NFA         defl    $ - temp_NFA
1062+ 692B             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1062+ 6928             >
1062+ 6928 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1062+ 6929 41 4E 44    >                db      "AND"               // name string in 7-bit ascii, but
1062+ 692C             >                org     $-1                 // alter last byte of Name just above to set
1062+ 692B C4          >                db      {b $} | END_BIT     // msb as name end
1062+ 692C             >
1062+ 692C EC 68       >                dw      last_NFA            // Link to previous definition Name
1062+ 692E             >AND_OP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1062+ 692E ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1062+ 692E             >                else
1062+ 692E 30 69       >                dw      $ + 2   ; ok        // is pointed by CFA
1062+ 6930             >                endif           ; ok        // for other definitions it "points" the correct handler
1062+ 6930             >                // Use of "; ok" to suppress "warning[fwdref]"
1062+ 6930             >
1062+ 6930             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1063+ 6930 D1                           pop     de
1064+ 6931 E1                           pop     hl
1065+ 6932 7B                           ld      a, e
1066+ 6933 A5                           and     l
1067+ 6934 6F                           ld      l, a
1068+ 6935 7A                           ld      a, d
1069+ 6936 A4                           and     h
1070+ 6937 67                           ld      h, a
1071+ 6938
1072+ 6938                              psh1
1072+ 6938 E5          >                push    hl
1072+ 6939 DD E9       >                jp      (ix)
1073+ 693B
1074+ 693B              //  ______________________________________________________________________
1075+ 693B              //
1076+ 693B              // or           n1 n2 -- n3
1077+ 693B              // bit logical OR. Returns n3 as n1 | n2
1078+ 693B                              New_Def OR_OP, "OR", is_code, is_normal
1078+ 693B             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1078+ 693B             >
1078+ 693B             >                // dummy db directives used to calculate length of namec
1078+ 693B 4F 52       >                db      "OR"
1078+ 693D             >len_NFA         defl    $ - temp_NFA
1078+ 693D             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1078+ 693B             >
1078+ 693B 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1078+ 693C 4F 52       >                db      "OR"               // name string in 7-bit ascii, but
1078+ 693E             >                org     $-1                 // alter last byte of Name just above to set
1078+ 693D D2          >                db      {b $} | END_BIT     // msb as name end
1078+ 693E             >
1078+ 693E 28 69       >                dw      last_NFA            // Link to previous definition Name
1078+ 6940             >OR_OP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1078+ 6940 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1078+ 6940             >                else
1078+ 6940 42 69       >                dw      $ + 2   ; ok        // is pointed by CFA
1078+ 6942             >                endif           ; ok        // for other definitions it "points" the correct handler
1078+ 6942             >                // Use of "; ok" to suppress "warning[fwdref]"
1078+ 6942             >
1078+ 6942             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1079+ 6942 D1                           pop     de
1080+ 6943 E1                           pop     hl
1081+ 6944 7B                           ld      a, e
1082+ 6945 B5                           or      l
1083+ 6946 6F                           ld      l, a
1084+ 6947 7A                           ld      a, d
1085+ 6948 B4                           or      h
1086+ 6949 67                           ld      h, a
1087+ 694A
1088+ 694A                              psh1
1088+ 694A E5          >                push    hl
1088+ 694B DD E9       >                jp      (ix)
1089+ 694D
1090+ 694D              //  ______________________________________________________________________
1091+ 694D              //
1092+ 694D              // xor          n1 n2 -- n3
1093+ 694D              // bit logical OR. Returns n3 as n1 ^ n2
1094+ 694D                              New_Def XOR_OP, "XOR", is_code, is_normal
1094+ 694D             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1094+ 694D             >
1094+ 694D             >                // dummy db directives used to calculate length of namec
1094+ 694D 58 4F 52    >                db      "XOR"
1094+ 6950             >len_NFA         defl    $ - temp_NFA
1094+ 6950             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1094+ 694D             >
1094+ 694D 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1094+ 694E 58 4F 52    >                db      "XOR"               // name string in 7-bit ascii, but
1094+ 6951             >                org     $-1                 // alter last byte of Name just above to set
1094+ 6950 D2          >                db      {b $} | END_BIT     // msb as name end
1094+ 6951             >
1094+ 6951 3B 69       >                dw      last_NFA            // Link to previous definition Name
1094+ 6953             >XOR_OP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1094+ 6953 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1094+ 6953             >                else
1094+ 6953 55 69       >                dw      $ + 2   ; ok        // is pointed by CFA
1094+ 6955             >                endif           ; ok        // for other definitions it "points" the correct handler
1094+ 6955             >                // Use of "; ok" to suppress "warning[fwdref]"
1094+ 6955             >
1094+ 6955             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1095+ 6955 D1                           pop     de
1096+ 6956 E1                           pop     hl
1097+ 6957 7B                           ld      a, e
1098+ 6958 AD                           xor     l
1099+ 6959 6F                           ld      l, a
1100+ 695A 7A                           ld      a, d
1101+ 695B AC                           xor     h
1102+ 695C 67                           ld      h, a
1103+ 695D
1104+ 695D                              psh1
1104+ 695D E5          >                push    hl
1104+ 695E DD E9       >                jp      (ix)
1105+ 6960
1106+ 6960              //  ______________________________________________________________________
1107+ 6960              //
1108+ 6960              // sp@      -- a
1109+ 6960              // returns on top of stack the value of SP before execution
1110+ 6960                              New_Def SPFETCH, "SP@", is_code, is_normal
1110+ 6960             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1110+ 6960             >
1110+ 6960             >                // dummy db directives used to calculate length of namec
1110+ 6960 53 50 40    >                db      "SP@"
1110+ 6963             >len_NFA         defl    $ - temp_NFA
1110+ 6963             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1110+ 6960             >
1110+ 6960 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1110+ 6961 53 50 40    >                db      "SP@"               // name string in 7-bit ascii, but
1110+ 6964             >                org     $-1                 // alter last byte of Name just above to set
1110+ 6963 C0          >                db      {b $} | END_BIT     // msb as name end
1110+ 6964             >
1110+ 6964 4D 69       >                dw      last_NFA            // Link to previous definition Name
1110+ 6966             >SPFETCH:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1110+ 6966 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1110+ 6966             >                else
1110+ 6966 68 69       >                dw      $ + 2   ; ok        // is pointed by CFA
1110+ 6968             >                endif           ; ok        // for other definitions it "points" the correct handler
1110+ 6968             >                // Use of "; ok" to suppress "warning[fwdref]"
1110+ 6968             >
1110+ 6968             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1111+ 6968
1112+ 6968 21 00 00                     ld      hl, 0
1113+ 696B 39                           add     hl, sp
1114+ 696C
1115+ 696C                              psh1
1115+ 696C E5          >                push    hl
1115+ 696D DD E9       >                jp      (ix)
1116+ 696F
1117+ 696F              //  ______________________________________________________________________
1118+ 696F              //
1119+ 696F              // sp!      a --
1120+ 696F              // restore SP to the initial value passed
1121+ 696F              // normally it is S0, i.e. the word at offset 6 and 7 of user variabiles area.
1122+ 696F                              New_Def SPSTORE, "SP!", is_code, is_normal
1122+ 696F             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1122+ 696F             >
1122+ 696F             >                // dummy db directives used to calculate length of namec
1122+ 696F 53 50 21    >                db      "SP!"
1122+ 6972             >len_NFA         defl    $ - temp_NFA
1122+ 6972             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1122+ 696F             >
1122+ 696F 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1122+ 6970 53 50 21    >                db      "SP!"               // name string in 7-bit ascii, but
1122+ 6973             >                org     $-1                 // alter last byte of Name just above to set
1122+ 6972 A1          >                db      {b $} | END_BIT     // msb as name end
1122+ 6973             >
1122+ 6973 60 69       >                dw      last_NFA            // Link to previous definition Name
1122+ 6975             >SPSTORE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1122+ 6975 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1122+ 6975             >                else
1122+ 6975 77 69       >                dw      $ + 2   ; ok        // is pointed by CFA
1122+ 6977             >                endif           ; ok        // for other definitions it "points" the correct handler
1122+ 6977             >                // Use of "; ok" to suppress "warning[fwdref]"
1122+ 6977             >
1122+ 6977             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1123+ 6977 E1                           pop     hl
1124+ 6978 F9                           ld      sp, hl
1125+ 6979
1126+ 6979                              next
1126+ 6979 DD E9       >                jp      (ix)
1127+ 697B
1128+ 697B              //  ______________________________________________________________________
1129+ 697B              //
1130+ 697B              // rp@      -- a
1131+ 697B              // returns on top of stack the value of Return-Pointer
1132+ 697B                              New_Def RPFETCH, "RP@", is_code, is_normal
1132+ 697B             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1132+ 697B             >
1132+ 697B             >                // dummy db directives used to calculate length of namec
1132+ 697B 52 50 40    >                db      "RP@"
1132+ 697E             >len_NFA         defl    $ - temp_NFA
1132+ 697E             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1132+ 697B             >
1132+ 697B 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1132+ 697C 52 50 40    >                db      "RP@"               // name string in 7-bit ascii, but
1132+ 697F             >                org     $-1                 // alter last byte of Name just above to set
1132+ 697E C0          >                db      {b $} | END_BIT     // msb as name end
1132+ 697F             >
1132+ 697F 6F 69       >                dw      last_NFA            // Link to previous definition Name
1132+ 6981             >RPFETCH:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1132+ 6981 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1132+ 6981             >                else
1132+ 6981 83 69       >                dw      $ + 2   ; ok        // is pointed by CFA
1132+ 6983             >                endif           ; ok        // for other definitions it "points" the correct handler
1132+ 6983             >                // Use of "; ok" to suppress "warning[fwdref]"
1132+ 6983             >
1132+ 6983             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1133+ 6983
1134+ 6983                              ldhlrp
1134+ 6983 2A 96 63    >                ld      hl,(RP_Pointer)
1135+ 6986
1136+ 6986                              psh1
1136+ 6986 E5          >                push    hl
1136+ 6987 DD E9       >                jp      (ix)
1137+ 6989
1138+ 6989              //  ______________________________________________________________________
1139+ 6989              //
1140+ 6989              // rp!      a --
1141+ 6989              // restore RP to the initial value passed
1142+ 6989              // normally it is R0 @, i.e. the word at offset 8 of user variabiles area.
1143+ 6989                              New_Def RPSTORE, "RP!", is_code, is_normal
1143+ 6989             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1143+ 6989             >
1143+ 6989             >                // dummy db directives used to calculate length of namec
1143+ 6989 52 50 21    >                db      "RP!"
1143+ 698C             >len_NFA         defl    $ - temp_NFA
1143+ 698C             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1143+ 6989             >
1143+ 6989 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1143+ 698A 52 50 21    >                db      "RP!"               // name string in 7-bit ascii, but
1143+ 698D             >                org     $-1                 // alter last byte of Name just above to set
1143+ 698C A1          >                db      {b $} | END_BIT     // msb as name end
1143+ 698D             >
1143+ 698D 7B 69       >                dw      last_NFA            // Link to previous definition Name
1143+ 698F             >RPSTORE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1143+ 698F ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1143+ 698F             >                else
1143+ 698F 91 69       >                dw      $ + 2   ; ok        // is pointed by CFA
1143+ 6991             >                endif           ; ok        // for other definitions it "points" the correct handler
1143+ 6991             >                // Use of "; ok" to suppress "warning[fwdref]"
1143+ 6991             >
1143+ 6991             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1144+ 6991 E1                           pop     hl
1145+ 6992                              ldrphl
1145+ 6992 22 96 63    >                ld      (RP_Pointer),hl
1146+ 6995
1147+ 6995                              next
1147+ 6995 DD E9       >                jp      (ix)
1148+ 6997
1149+ 6997              //  ______________________________________________________________________
1150+ 6997              //
1151+ 6997              // exit      --
1152+ 6997              // exits back to the caller word
1153+ 6997                              New_Def EXIT, "EXIT", is_code, is_normal
1153+ 6997             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1153+ 6997             >
1153+ 6997             >                // dummy db directives used to calculate length of namec
1153+ 6997 45 58 49 54 >                db      "EXIT"
1153+ 699B             >len_NFA         defl    $ - temp_NFA
1153+ 699B             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1153+ 6997             >
1153+ 6997 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1153+ 6998 45 58 49 54 >                db      "EXIT"               // name string in 7-bit ascii, but
1153+ 699C             >                org     $-1                 // alter last byte of Name just above to set
1153+ 699B D4          >                db      {b $} | END_BIT     // msb as name end
1153+ 699C             >
1153+ 699C 89 69       >                dw      last_NFA            // Link to previous definition Name
1153+ 699E             >EXIT:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1153+ 699E ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1153+ 699E             >                else
1153+ 699E A0 69       >                dw      $ + 2   ; ok        // is pointed by CFA
1153+ 69A0             >                endif           ; ok        // for other definitions it "points" the correct handler
1153+ 69A0             >                // Use of "; ok" to suppress "warning[fwdref]"
1153+ 69A0             >
1153+ 69A0             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1154+ 69A0                              ldhlrp                      // Get Return Stack Pointer
1154+ 69A0 2A 96 63    >                ld      hl,(RP_Pointer)
1155+ 69A3 4E                           ld      c, (hl)             // pop Instruction Pointer
1156+ 69A4 23                           inc     hl                  // from Return Stack
1157+ 69A5 46                           ld      b, (hl)
1158+ 69A6 23                           inc     hl
1159+ 69A7                              ldrphl                      // Set Return Stack Pointer
1159+ 69A7 22 96 63    >                ld      (RP_Pointer),hl
1160+ 69AA                              next
1160+ 69AA DD E9       >                jp      (ix)
1161+ 69AC
1162+ 69AC              //  ______________________________________________________________________
1163+ 69AC              //
1164+ 69AC              // lastl      --
1165+ 69AC              // exits back to the caller word
1166+ 69AC              //              New_Def EXIT, "LASTL", is_code, is_normal
1167+ 69AC              //              ldhlrp                      // Get Return Stack Pointer
1168+ 69AC              //              ld      e, (hl)             // pop Instruction Pointer
1169+ 69AC              //              inc     hl                  // from Return Stack
1170+ 69AC              //              ld      d, (hl)
1171+ 69AC              //              inc     hl
1172+ 69AC              //              ld      (hl), e
1173+ 69AC              //              inc     hl
1174+ 69AC              //              ld      (hl), d
1175+ 69AC              //              next
1176+ 69AC
1177+ 69AC              //  ______________________________________________________________________
1178+ 69AC              //
1179+ 69AC              // >r      n --
1180+ 69AC              // pop from calculator-stack and push into return-stack
1181+ 69AC                              New_Def TO_R, ">R", is_code, is_normal
1181+ 69AC             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1181+ 69AC             >
1181+ 69AC             >                // dummy db directives used to calculate length of namec
1181+ 69AC 3E 52       >                db      ">R"
1181+ 69AE             >len_NFA         defl    $ - temp_NFA
1181+ 69AE             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1181+ 69AC             >
1181+ 69AC 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1181+ 69AD 3E 52       >                db      ">R"               // name string in 7-bit ascii, but
1181+ 69AF             >                org     $-1                 // alter last byte of Name just above to set
1181+ 69AE D2          >                db      {b $} | END_BIT     // msb as name end
1181+ 69AF             >
1181+ 69AF 97 69       >                dw      last_NFA            // Link to previous definition Name
1181+ 69B1             >TO_R:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1181+ 69B1 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1181+ 69B1             >                else
1181+ 69B1 B3 69       >                dw      $ + 2   ; ok        // is pointed by CFA
1181+ 69B3             >                endif           ; ok        // for other definitions it "points" the correct handler
1181+ 69B3             >                // Use of "; ok" to suppress "warning[fwdref]"
1181+ 69B3             >
1181+ 69B3             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1182+ 69B3 D1                           pop     de
1183+ 69B4                              ldhlrp
1183+ 69B4 2A 96 63    >                ld      hl,(RP_Pointer)
1184+ 69B7 2B                           dec     hl
1185+ 69B8 72                           ld      (hl), d             // store current TOS
1186+ 69B9 2B                           dec     hl                  // to Return Stack
1187+ 69BA 73                           ld      (hl), e
1188+ 69BB                              ldrphl
1188+ 69BB 22 96 63    >                ld      (RP_Pointer),hl
1189+ 69BE
1190+ 69BE                              next
1190+ 69BE DD E9       >                jp      (ix)
1191+ 69C0
1192+ 69C0              //  ______________________________________________________________________
1193+ 69C0              //
1194+ 69C0              // r>      -- n
1195+ 69C0              // pop from return-stack and push into calculator-stack
1196+ 69C0                              New_Def R_TO, "R>", is_code, is_normal
1196+ 69C0             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1196+ 69C0             >
1196+ 69C0             >                // dummy db directives used to calculate length of namec
1196+ 69C0 52 3E       >                db      "R>"
1196+ 69C2             >len_NFA         defl    $ - temp_NFA
1196+ 69C2             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1196+ 69C0             >
1196+ 69C0 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1196+ 69C1 52 3E       >                db      "R>"               // name string in 7-bit ascii, but
1196+ 69C3             >                org     $-1                 // alter last byte of Name just above to set
1196+ 69C2 BE          >                db      {b $} | END_BIT     // msb as name end
1196+ 69C3             >
1196+ 69C3 AC 69       >                dw      last_NFA            // Link to previous definition Name
1196+ 69C5             >R_TO:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1196+ 69C5 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1196+ 69C5             >                else
1196+ 69C5 C7 69       >                dw      $ + 2   ; ok        // is pointed by CFA
1196+ 69C7             >                endif           ; ok        // for other definitions it "points" the correct handler
1196+ 69C7             >                // Use of "; ok" to suppress "warning[fwdref]"
1196+ 69C7             >
1196+ 69C7             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1197+ 69C7
1198+ 69C7                              ldhlrp
1198+ 69C7 2A 96 63    >                ld      hl,(RP_Pointer)
1199+ 69CA 5E                           ld      e, (hl)             // retrieve from Return Stack
1200+ 69CB 23                           inc     hl
1201+ 69CC 56                           ld      d, (hl)
1202+ 69CD 23                           inc     hl
1203+ 69CE                              ldrphl
1203+ 69CE 22 96 63    >                ld      (RP_Pointer),hl
1204+ 69D1 D5                           push    de
1205+ 69D2                              next
1205+ 69D2 DD E9       >                jp      (ix)
1206+ 69D4
1207+ 69D4              //  ______________________________________________________________________
1208+ 69D4              //
1209+ 69D4              // r@            -- n
1210+ 69D4              // return on top of stack the value of top of return-stack
1211+ 69D4              // Since this is the same as I, we alter R's CFA to jump there
1212+ 69D4                              New_Def R_OP, "R@", I_Ptr, is_normal
1212+ 69D4             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1212+ 69D4             >
1212+ 69D4             >                // dummy db directives used to calculate length of namec
1212+ 69D4 52 40       >                db      "R@"
1212+ 69D6             >len_NFA         defl    $ - temp_NFA
1212+ 69D6             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1212+ 69D4             >
1212+ 69D4 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1212+ 69D5 52 40       >                db      "R@"               // name string in 7-bit ascii, but
1212+ 69D7             >                org     $-1                 // alter last byte of Name just above to set
1212+ 69D6 C0          >                db      {b $} | END_BIT     // msb as name end
1212+ 69D7             >
1212+ 69D7 C0 69       >                dw      last_NFA            // Link to previous definition Name
1212+ 69D9             >R_OP:          if I_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1212+ 69D9 92 64       >                dw      I_Ptr ; ok        // for primitive definitions  actual code
1212+ 69DB             >                else
1212+ 69DB ~           >                dw      $ + 2   ; ok        // is pointed by CFA
1212+ 69DB             >                endif           ; ok        // for other definitions it "points" the correct handler
1212+ 69DB             >                // Use of "; ok" to suppress "warning[fwdref]"
1212+ 69DB             >
1212+ 69DB             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1213+ 69DB
1214+ 69DB              //  ______________________________________________________________________
1215+ 69DB              //
1216+ 69DB              // r            -- n
1217+ 69DB              // return on top of stack the value of top of return-stack
1218+ 69DB              // Since this is the same as I, we alter R's CFA to jump there
1219+ 69DB              //              New_Def R_OLD, "R", I_Ptr, is_normal
1220+ 69DB
1221+ 69DB              //  ______________________________________________________________________
1222+ 69DB              //
1223+ 69DB              // 0=           n -- f
1224+ 69DB              // true (non zero) if n is zero, false (0) elsewere
1225+ 69DB                              New_Def ZEQUAL, "0=", is_code, is_normal
1225+ 69DB             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1225+ 69DB             >
1225+ 69DB             >                // dummy db directives used to calculate length of namec
1225+ 69DB 30 3D       >                db      "0="
1225+ 69DD             >len_NFA         defl    $ - temp_NFA
1225+ 69DD             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1225+ 69DB             >
1225+ 69DB 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1225+ 69DC 30 3D       >                db      "0="               // name string in 7-bit ascii, but
1225+ 69DE             >                org     $-1                 // alter last byte of Name just above to set
1225+ 69DD BD          >                db      {b $} | END_BIT     // msb as name end
1225+ 69DE             >
1225+ 69DE D4 69       >                dw      last_NFA            // Link to previous definition Name
1225+ 69E0             >ZEQUAL:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1225+ 69E0 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1225+ 69E0             >                else
1225+ 69E0 E2 69       >                dw      $ + 2   ; ok        // is pointed by CFA
1225+ 69E2             >                endif           ; ok        // for other definitions it "points" the correct handler
1225+ 69E2             >                // Use of "; ok" to suppress "warning[fwdref]"
1225+ 69E2             >
1225+ 69E2             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1226+ 69E2              Zero_Equal:
1227+ 69E2 E1                           pop     hl
1228+ 69E3 7D                           ld      a, l
1229+ 69E4 B4                           or      h
1230+ 69E5 21 00 00                     ld      hl, FALSE_FLAG
1231+ 69E8 20 01                        jr      nz, ZEqual_Skip
1232+ 69EA 2B                               dec     hl
1233+ 69EB              ZEqual_Skip:
1234+ 69EB                              psh1
1234+ 69EB E5          >                push    hl
1234+ 69EC DD E9       >                jp      (ix)
1235+ 69EE
1236+ 69EE              //  ______________________________________________________________________
1237+ 69EE              //
1238+ 69EE              // not         a1 -- a2
1239+ 69EE              // increment by 2 top of stack
1240+ 69EE                              New_Def NOT_OP, "NOT", Zero_Equal, is_normal
1240+ 69EE             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1240+ 69EE             >
1240+ 69EE             >                // dummy db directives used to calculate length of namec
1240+ 69EE 4E 4F 54    >                db      "NOT"
1240+ 69F1             >len_NFA         defl    $ - temp_NFA
1240+ 69F1             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1240+ 69EE             >
1240+ 69EE 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1240+ 69EF 4E 4F 54    >                db      "NOT"               // name string in 7-bit ascii, but
1240+ 69F2             >                org     $-1                 // alter last byte of Name just above to set
1240+ 69F1 D4          >                db      {b $} | END_BIT     // msb as name end
1240+ 69F2             >
1240+ 69F2 DB 69       >                dw      last_NFA            // Link to previous definition Name
1240+ 69F4             >NOT_OP:          if Zero_Equal != 0 ; ok        // This is the start address of the direct jp(hl)
1240+ 69F4 E2 69       >                dw      Zero_Equal ; ok        // for primitive definitions  actual code
1240+ 69F6             >                else
1240+ 69F6 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
1240+ 69F6             >                endif           ; ok        // for other definitions it "points" the correct handler
1240+ 69F6             >                // Use of "; ok" to suppress "warning[fwdref]"
1240+ 69F6             >
1240+ 69F6             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1241+ 69F6
1242+ 69F6              //  ______________________________________________________________________
1243+ 69F6              //
1244+ 69F6              // 0<           n -- f
1245+ 69F6              // true (non zero) if n is less than zero, false (0) elsewere
1246+ 69F6                              New_Def ZLESS, "0<", is_code, is_normal
1246+ 69F6             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1246+ 69F6             >
1246+ 69F6             >                // dummy db directives used to calculate length of namec
1246+ 69F6 30 3C       >                db      "0<"
1246+ 69F8             >len_NFA         defl    $ - temp_NFA
1246+ 69F8             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1246+ 69F6             >
1246+ 69F6 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1246+ 69F7 30 3C       >                db      "0<"               // name string in 7-bit ascii, but
1246+ 69F9             >                org     $-1                 // alter last byte of Name just above to set
1246+ 69F8 BC          >                db      {b $} | END_BIT     // msb as name end
1246+ 69F9             >
1246+ 69F9 EE 69       >                dw      last_NFA            // Link to previous definition Name
1246+ 69FB             >ZLESS:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1246+ 69FB ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1246+ 69FB             >                else
1246+ 69FB FD 69       >                dw      $ + 2   ; ok        // is pointed by CFA
1246+ 69FD             >                endif           ; ok        // for other definitions it "points" the correct handler
1246+ 69FD             >                // Use of "; ok" to suppress "warning[fwdref]"
1246+ 69FD             >
1246+ 69FD             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1247+ 69FD E1                           pop     hl
1248+ 69FE 29                           add     hl, hl
1249+ 69FF 21 00 00                     ld      hl, 0
1250+ 6A02 30 01                        jr      nc, ZLess_Skip
1251+ 6A04 2B                               dec     hl
1252+ 6A05              ZLess_Skip:
1253+ 6A05                              psh1
1253+ 6A05 E5          >                push    hl
1253+ 6A06 DD E9       >                jp      (ix)
1254+ 6A08
1255+ 6A08              //  ______________________________________________________________________
1256+ 6A08              //
1257+ 6A08              // 0>           n -- f
1258+ 6A08              // true (non zero) if n is less than zero, false (0) elsewere
1259+ 6A08                              New_Def ZGREATER, "0>", is_code, is_normal
1259+ 6A08             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1259+ 6A08             >
1259+ 6A08             >                // dummy db directives used to calculate length of namec
1259+ 6A08 30 3E       >                db      "0>"
1259+ 6A0A             >len_NFA         defl    $ - temp_NFA
1259+ 6A0A             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1259+ 6A08             >
1259+ 6A08 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1259+ 6A09 30 3E       >                db      "0>"               // name string in 7-bit ascii, but
1259+ 6A0B             >                org     $-1                 // alter last byte of Name just above to set
1259+ 6A0A BE          >                db      {b $} | END_BIT     // msb as name end
1259+ 6A0B             >
1259+ 6A0B F6 69       >                dw      last_NFA            // Link to previous definition Name
1259+ 6A0D             >ZGREATER:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1259+ 6A0D ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1259+ 6A0D             >                else
1259+ 6A0D 0F 6A       >                dw      $ + 2   ; ok        // is pointed by CFA
1259+ 6A0F             >                endif           ; ok        // for other definitions it "points" the correct handler
1259+ 6A0F             >                // Use of "; ok" to suppress "warning[fwdref]"
1259+ 6A0F             >
1259+ 6A0F             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1260+ 6A0F E1                           pop     hl
1261+ 6A10 7D                           ld      a, l
1262+ 6A11 B4                           or      h
1263+ 6A12 29                           add     hl, hl
1264+ 6A13 21 00 00                     ld      hl, FALSE_FLAG
1265+ 6A16 38 04                        jr      c, ZGreater_Skip
1266+ 6A18 A7                               and     a
1267+ 6A19 28 01                            jr      z, ZGreater_Skip
1268+ 6A1B 2B                                   dec     hl
1269+ 6A1C              ZGreater_Skip:
1270+ 6A1C                              psh1
1270+ 6A1C E5          >                push    hl
1270+ 6A1D DD E9       >                jp      (ix)
1271+ 6A1F
1272+ 6A1F              //  ______________________________________________________________________
1273+ 6A1F              //
1274+ 6A1F              // +            n1 n2 -- n3
1275+ 6A1F              // returns the unsigned sum of two top values
1276+ 6A1F                              New_Def PLUS, "+", is_code, is_normal
1276+ 6A1F             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1276+ 6A1F             >
1276+ 6A1F             >                // dummy db directives used to calculate length of namec
1276+ 6A1F 2B          >                db      "+"
1276+ 6A20             >len_NFA         defl    $ - temp_NFA
1276+ 6A20             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1276+ 6A1F             >
1276+ 6A1F 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1276+ 6A20 2B          >                db      "+"               // name string in 7-bit ascii, but
1276+ 6A21             >                org     $-1                 // alter last byte of Name just above to set
1276+ 6A20 AB          >                db      {b $} | END_BIT     // msb as name end
1276+ 6A21             >
1276+ 6A21 08 6A       >                dw      last_NFA            // Link to previous definition Name
1276+ 6A23             >PLUS:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1276+ 6A23 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1276+ 6A23             >                else
1276+ 6A23 25 6A       >                dw      $ + 2   ; ok        // is pointed by CFA
1276+ 6A25             >                endif           ; ok        // for other definitions it "points" the correct handler
1276+ 6A25             >                // Use of "; ok" to suppress "warning[fwdref]"
1276+ 6A25             >
1276+ 6A25             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1277+ 6A25 E1                           pop     hl
1278+ 6A26 D1                           pop     de
1279+ 6A27 19                           add     hl, de
1280+ 6A28
1281+ 6A28                              psh1
1281+ 6A28 E5          >                push    hl
1281+ 6A29 DD E9       >                jp      (ix)
1282+ 6A2B
1283+ 6A2B
1284+ 6A2B              //  ______________________________________________________________________
1285+ 6A2B              //
1286+ 6A2B              // d+           d1 d2 -- d3
1287+ 6A2B              // returns the unsigned sum of two top double-numbers
1288+ 6A2B              //      d2  d1
1289+ 6A2B              //      h l h l
1290+ 6A2B              // SP   LHEDLHED
1291+ 6A2B              // SP  +01234567
1292+ 6A2B                              New_Def DPLUS, "D+", is_code, is_normal
1292+ 6A2B             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1292+ 6A2B             >
1292+ 6A2B             >                // dummy db directives used to calculate length of namec
1292+ 6A2B 44 2B       >                db      "D+"
1292+ 6A2D             >len_NFA         defl    $ - temp_NFA
1292+ 6A2D             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1292+ 6A2B             >
1292+ 6A2B 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1292+ 6A2C 44 2B       >                db      "D+"               // name string in 7-bit ascii, but
1292+ 6A2E             >                org     $-1                 // alter last byte of Name just above to set
1292+ 6A2D AB          >                db      {b $} | END_BIT     // msb as name end
1292+ 6A2E             >
1292+ 6A2E 1F 6A       >                dw      last_NFA            // Link to previous definition Name
1292+ 6A30             >DPLUS:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1292+ 6A30 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1292+ 6A30             >                else
1292+ 6A30 32 6A       >                dw      $ + 2   ; ok        // is pointed by CFA
1292+ 6A32             >                endif           ; ok        // for other definitions it "points" the correct handler
1292+ 6A32             >                // Use of "; ok" to suppress "warning[fwdref]"
1292+ 6A32             >
1292+ 6A32             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1293+ 6A32
1294+ 6A32 D9                           exx
1295+ 6A33 C1                           pop     bc                  // bc := d2.H
1296+ 6A34 D1                           pop     de                  // hl := d2.L
1297+ 6A35 E1                           pop     hl                  // d1.H
1298+ 6A36 E3                           ex      (sp), hl            // d1.L
1299+ 6A37 19                           add     hl, de              // hl := d2.L + d1.L
1300+ 6A38 E3                           ex      (sp), hl            // d1.H
1301+ 6A39 ED 4A                        adc     hl, bc              // d1.H + d2.H
1302+ 6A3B E5                           push    hl
1303+ 6A3C D9                           exx
1304+ 6A3D                              next
1304+ 6A3D DD E9       >                jp      (ix)
1305+ 6A3F
1306+ 6A3F              //  ______________________________________________________________________
1307+ 6A3F              //
1308+ 6A3F              // 1+           n1 -- n2
1309+ 6A3F              // increment by 1 top of stack
1310+ 6A3F                              New_Def ONE_PLUS, "1+", is_code, is_normal
1310+ 6A3F             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1310+ 6A3F             >
1310+ 6A3F             >                // dummy db directives used to calculate length of namec
1310+ 6A3F 31 2B       >                db      "1+"
1310+ 6A41             >len_NFA         defl    $ - temp_NFA
1310+ 6A41             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1310+ 6A3F             >
1310+ 6A3F 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1310+ 6A40 31 2B       >                db      "1+"               // name string in 7-bit ascii, but
1310+ 6A42             >                org     $-1                 // alter last byte of Name just above to set
1310+ 6A41 AB          >                db      {b $} | END_BIT     // msb as name end
1310+ 6A42             >
1310+ 6A42 2B 6A       >                dw      last_NFA            // Link to previous definition Name
1310+ 6A44             >ONE_PLUS:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1310+ 6A44 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1310+ 6A44             >                else
1310+ 6A44 46 6A       >                dw      $ + 2   ; ok        // is pointed by CFA
1310+ 6A46             >                endif           ; ok        // for other definitions it "points" the correct handler
1310+ 6A46             >                // Use of "; ok" to suppress "warning[fwdref]"
1310+ 6A46             >
1310+ 6A46             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1311+ 6A46 E1                           pop     hl
1312+ 6A47 23                           inc     hl
1313+ 6A48
1314+ 6A48                              psh1
1314+ 6A48 E5          >                push    hl
1314+ 6A49 DD E9       >                jp      (ix)
1315+ 6A4B
1316+ 6A4B              //  ______________________________________________________________________
1317+ 6A4B              //
1318+ 6A4B              // 1-           n1 -- n2
1319+ 6A4B              // decrement by 1 top of stack
1320+ 6A4B                              New_Def ONE_SUBTRACT, "1-", is_code, is_normal
1320+ 6A4B             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1320+ 6A4B             >
1320+ 6A4B             >                // dummy db directives used to calculate length of namec
1320+ 6A4B 31 2D       >                db      "1-"
1320+ 6A4D             >len_NFA         defl    $ - temp_NFA
1320+ 6A4D             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1320+ 6A4B             >
1320+ 6A4B 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1320+ 6A4C 31 2D       >                db      "1-"               // name string in 7-bit ascii, but
1320+ 6A4E             >                org     $-1                 // alter last byte of Name just above to set
1320+ 6A4D AD          >                db      {b $} | END_BIT     // msb as name end
1320+ 6A4E             >
1320+ 6A4E 3F 6A       >                dw      last_NFA            // Link to previous definition Name
1320+ 6A50             >ONE_SUBTRACT:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1320+ 6A50 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1320+ 6A50             >                else
1320+ 6A50 52 6A       >                dw      $ + 2   ; ok        // is pointed by CFA
1320+ 6A52             >                endif           ; ok        // for other definitions it "points" the correct handler
1320+ 6A52             >                // Use of "; ok" to suppress "warning[fwdref]"
1320+ 6A52             >
1320+ 6A52             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1321+ 6A52 E1                           pop     hl
1322+ 6A53 2B                           dec     hl
1323+ 6A54
1324+ 6A54                              psh1
1324+ 6A54 E5          >                push    hl
1324+ 6A55 DD E9       >                jp      (ix)
1325+ 6A57
1326+ 6A57              //  ______________________________________________________________________
1327+ 6A57              //
1328+ 6A57              // 2+           n1 -- n2
1329+ 6A57              // increment by 2 top of stack
1330+ 6A57                              New_Def TWO_PLUS, "2+", is_code, is_normal
1330+ 6A57             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1330+ 6A57             >
1330+ 6A57             >                // dummy db directives used to calculate length of namec
1330+ 6A57 32 2B       >                db      "2+"
1330+ 6A59             >len_NFA         defl    $ - temp_NFA
1330+ 6A59             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1330+ 6A57             >
1330+ 6A57 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1330+ 6A58 32 2B       >                db      "2+"               // name string in 7-bit ascii, but
1330+ 6A5A             >                org     $-1                 // alter last byte of Name just above to set
1330+ 6A59 AB          >                db      {b $} | END_BIT     // msb as name end
1330+ 6A5A             >
1330+ 6A5A 4B 6A       >                dw      last_NFA            // Link to previous definition Name
1330+ 6A5C             >TWO_PLUS:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1330+ 6A5C ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1330+ 6A5C             >                else
1330+ 6A5C 5E 6A       >                dw      $ + 2   ; ok        // is pointed by CFA
1330+ 6A5E             >                endif           ; ok        // for other definitions it "points" the correct handler
1330+ 6A5E             >                // Use of "; ok" to suppress "warning[fwdref]"
1330+ 6A5E             >
1330+ 6A5E             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1331+ 6A5E              Two_Plus:
1332+ 6A5E E1                           pop     hl
1333+ 6A5F 23                           inc     hl
1334+ 6A60 23                           inc     hl
1335+ 6A61
1336+ 6A61                              psh1
1336+ 6A61 E5          >                push    hl
1336+ 6A62 DD E9       >                jp      (ix)
1337+ 6A64
1338+ 6A64              //  ______________________________________________________________________
1339+ 6A64              //
1340+ 6A64              // cell+        a1 -- a2
1341+ 6A64              // increment by 2 top of stack
1342+ 6A64                              New_Def CELL_PLUS, "CELL+", Two_Plus, is_normal
1342+ 6A64             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1342+ 6A64             >
1342+ 6A64             >                // dummy db directives used to calculate length of namec
1342+ 6A64 43 45 4C 4C >                db      "CELL+"
1342+ 6A68 2B          >
1342+ 6A69             >len_NFA         defl    $ - temp_NFA
1342+ 6A69             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1342+ 6A64             >
1342+ 6A64 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1342+ 6A65 43 45 4C 4C >                db      "CELL+"               // name string in 7-bit ascii, but
1342+ 6A69 2B          >
1342+ 6A6A             >                org     $-1                 // alter last byte of Name just above to set
1342+ 6A69 AB          >                db      {b $} | END_BIT     // msb as name end
1342+ 6A6A             >
1342+ 6A6A 57 6A       >                dw      last_NFA            // Link to previous definition Name
1342+ 6A6C             >CELL_PLUS:          if Two_Plus != 0 ; ok        // This is the start address of the direct jp(hl)
1342+ 6A6C 5E 6A       >                dw      Two_Plus ; ok        // for primitive definitions  actual code
1342+ 6A6E             >                else
1342+ 6A6E ~           >                dw      $ + 2   ; ok        // is pointed by CFA
1342+ 6A6E             >                endif           ; ok        // for other definitions it "points" the correct handler
1342+ 6A6E             >                // Use of "; ok" to suppress "warning[fwdref]"
1342+ 6A6E             >
1342+ 6A6E             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1343+ 6A6E
1344+ 6A6E              //  ______________________________________________________________________
1345+ 6A6E              //
1346+ 6A6E              // align        a1 -- a2
1347+ 6A6E              // align memory : not used
1348+ 6A6E              //              New_Def ALIGN_ADDR, "ALIGN", is_code, is_normal
1349+ 6A6E              //            next
1350+ 6A6E
1351+ 6A6E              //  ______________________________________________________________________
1352+ 6A6E              //
1353+ 6A6E              // cell-        a1 -- a2
1354+ 6A6E              // decrement by 2 top of stack
1355+ 6A6E                              New_Def CELL_MINUS, "CELL-", is_code, is_normal
1355+ 6A6E             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1355+ 6A6E             >
1355+ 6A6E             >                // dummy db directives used to calculate length of namec
1355+ 6A6E 43 45 4C 4C >                db      "CELL-"
1355+ 6A72 2D          >
1355+ 6A73             >len_NFA         defl    $ - temp_NFA
1355+ 6A73             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1355+ 6A6E             >
1355+ 6A6E 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1355+ 6A6F 43 45 4C 4C >                db      "CELL-"               // name string in 7-bit ascii, but
1355+ 6A73 2D          >
1355+ 6A74             >                org     $-1                 // alter last byte of Name just above to set
1355+ 6A73 AD          >                db      {b $} | END_BIT     // msb as name end
1355+ 6A74             >
1355+ 6A74 64 6A       >                dw      last_NFA            // Link to previous definition Name
1355+ 6A76             >CELL_MINUS:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1355+ 6A76 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1355+ 6A76             >                else
1355+ 6A76 78 6A       >                dw      $ + 2   ; ok        // is pointed by CFA
1355+ 6A78             >                endif           ; ok        // for other definitions it "points" the correct handler
1355+ 6A78             >                // Use of "; ok" to suppress "warning[fwdref]"
1355+ 6A78             >
1355+ 6A78             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1356+ 6A78              CellMinus:
1357+ 6A78 E1                           pop     hl
1358+ 6A79 2B                           dec     hl
1359+ 6A7A 2B                           dec     hl
1360+ 6A7B E5                           push    hl
1361+ 6A7C                              next
1361+ 6A7C DD E9       >                jp      (ix)
1362+ 6A7E
1363+ 6A7E              //  ______________________________________________________________________
1364+ 6A7E              //
1365+ 6A7E              // 2-           a1 -- a2
1366+ 6A7E              // decrement by 2 top of stack
1367+ 6A7E                              New_Def TWO_MINUS, "2-", CellMinus, is_normal
1367+ 6A7E             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1367+ 6A7E             >
1367+ 6A7E             >                // dummy db directives used to calculate length of namec
1367+ 6A7E 32 2D       >                db      "2-"
1367+ 6A80             >len_NFA         defl    $ - temp_NFA
1367+ 6A80             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1367+ 6A7E             >
1367+ 6A7E 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1367+ 6A7F 32 2D       >                db      "2-"               // name string in 7-bit ascii, but
1367+ 6A81             >                org     $-1                 // alter last byte of Name just above to set
1367+ 6A80 AD          >                db      {b $} | END_BIT     // msb as name end
1367+ 6A81             >
1367+ 6A81 6E 6A       >                dw      last_NFA            // Link to previous definition Name
1367+ 6A83             >TWO_MINUS:          if CellMinus != 0 ; ok        // This is the start address of the direct jp(hl)
1367+ 6A83 78 6A       >                dw      CellMinus ; ok        // for primitive definitions  actual code
1367+ 6A85             >                else
1367+ 6A85 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
1367+ 6A85             >                endif           ; ok        // for other definitions it "points" the correct handler
1367+ 6A85             >                // Use of "; ok" to suppress "warning[fwdref]"
1367+ 6A85             >
1367+ 6A85             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1368+ 6A85
1369+ 6A85              //  ______________________________________________________________________
1370+ 6A85              //
1371+ 6A85              // negate        n1 -- n2
1372+ 6A85              // change the sign of number
1373+ 6A85                              New_Def MINUS, "NEGATE", is_code, is_normal
1373+ 6A85             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1373+ 6A85             >
1373+ 6A85             >                // dummy db directives used to calculate length of namec
1373+ 6A85 4E 45 47 41 >                db      "NEGATE"
1373+ 6A89 54 45       >
1373+ 6A8B             >len_NFA         defl    $ - temp_NFA
1373+ 6A8B             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1373+ 6A85             >
1373+ 6A85 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1373+ 6A86 4E 45 47 41 >                db      "NEGATE"               // name string in 7-bit ascii, but
1373+ 6A8A 54 45       >
1373+ 6A8C             >                org     $-1                 // alter last byte of Name just above to set
1373+ 6A8B C5          >                db      {b $} | END_BIT     // msb as name end
1373+ 6A8C             >
1373+ 6A8C 7E 6A       >                dw      last_NFA            // Link to previous definition Name
1373+ 6A8E             >MINUS:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1373+ 6A8E ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1373+ 6A8E             >                else
1373+ 6A8E 90 6A       >                dw      $ + 2   ; ok        // is pointed by CFA
1373+ 6A90             >                endif           ; ok        // for other definitions it "points" the correct handler
1373+ 6A90             >                // Use of "; ok" to suppress "warning[fwdref]"
1373+ 6A90             >
1373+ 6A90             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1374+ 6A90 21 00 00                     ld      hl, 0               // subtract from 0
1375+ 6A93 D1                           pop     de
1376+ 6A94 B7                           or      a
1377+ 6A95 ED 52                        sbc     hl, de
1378+ 6A97
1379+ 6A97                              psh1
1379+ 6A97 E5          >                push    hl
1379+ 6A98 DD E9       >                jp      (ix)
1380+ 6A9A
1381+ 6A9A              //  ______________________________________________________________________
1382+ 6A9A              //
1383+ 6A9A              // dnegate      d1 -- d2
1384+ 6A9A              // change the sign of a double number
1385+ 6A9A                              New_Def DMINUS, "DNEGATE", is_code, is_normal
1385+ 6A9A             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1385+ 6A9A             >
1385+ 6A9A             >                // dummy db directives used to calculate length of namec
1385+ 6A9A 44 4E 45 47 >                db      "DNEGATE"
1385+ 6A9E 41 54 45    >
1385+ 6AA1             >len_NFA         defl    $ - temp_NFA
1385+ 6AA1             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1385+ 6A9A             >
1385+ 6A9A 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1385+ 6A9B 44 4E 45 47 >                db      "DNEGATE"               // name string in 7-bit ascii, but
1385+ 6A9F 41 54 45    >
1385+ 6AA2             >                org     $-1                 // alter last byte of Name just above to set
1385+ 6AA1 C5          >                db      {b $} | END_BIT     // msb as name end
1385+ 6AA2             >
1385+ 6AA2 85 6A       >                dw      last_NFA            // Link to previous definition Name
1385+ 6AA4             >DMINUS:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1385+ 6AA4 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1385+ 6AA4             >                else
1385+ 6AA4 A6 6A       >                dw      $ + 2   ; ok        // is pointed by CFA
1385+ 6AA6             >                endif           ; ok        // for other definitions it "points" the correct handler
1385+ 6AA6             >                // Use of "; ok" to suppress "warning[fwdref]"
1385+ 6AA6             >
1385+ 6AA6             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1386+ 6AA6 D9                           exx
1387+ 6AA7 C1                           pop     bc                  // d1.H
1388+ 6AA8 D1                           pop     de                  // d1.L
1389+ 6AA9 AF                           xor     a
1390+ 6AAA 67                           ld      h, a
1391+ 6AAB 6F                           ld      l, a
1392+ 6AAC ED 52                        sbc     hl, de              // subtact from zero
1393+ 6AAE E5                           push    hl                  // > d2-L
1394+ 6AAF 67                           ld      h, a
1395+ 6AB0 6F                           ld      l, a
1396+ 6AB1 ED 42                        sbc     hl, bc              // subtract from zero with carry
1397+ 6AB3                                                          // > d2-H
1398+ 6AB3 E5                           push    hl
1399+ 6AB4 D9                           exx
1400+ 6AB5                              next
1400+ 6AB5 DD E9       >                jp      (ix)
1401+ 6AB7
1402+ 6AB7              //  ______________________________________________________________________
1403+ 6AB7              //
1404+ 6AB7              // over         n1 n2 -- n1 n2 n1
1405+ 6AB7              // copy the second value of stack and put it on top.
1406+ 6AB7                              New_Def OVER, "OVER", is_code, is_normal
1406+ 6AB7             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1406+ 6AB7             >
1406+ 6AB7             >                // dummy db directives used to calculate length of namec
1406+ 6AB7 4F 56 45 52 >                db      "OVER"
1406+ 6ABB             >len_NFA         defl    $ - temp_NFA
1406+ 6ABB             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1406+ 6AB7             >
1406+ 6AB7 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1406+ 6AB8 4F 56 45 52 >                db      "OVER"               // name string in 7-bit ascii, but
1406+ 6ABC             >                org     $-1                 // alter last byte of Name just above to set
1406+ 6ABB D2          >                db      {b $} | END_BIT     // msb as name end
1406+ 6ABC             >
1406+ 6ABC 9A 6A       >                dw      last_NFA            // Link to previous definition Name
1406+ 6ABE             >OVER:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1406+ 6ABE ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1406+ 6ABE             >                else
1406+ 6ABE C0 6A       >                dw      $ + 2   ; ok        // is pointed by CFA
1406+ 6AC0             >                endif           ; ok        // for other definitions it "points" the correct handler
1406+ 6AC0             >                // Use of "; ok" to suppress "warning[fwdref]"
1406+ 6AC0             >
1406+ 6AC0             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1407+ 6AC0 D1                           pop     de                  //   n2
1408+ 6AC1 E1                           pop     hl                  // < n1
1409+ 6AC2 E5                           push    hl                  // > n1
1410+ 6AC3 D5                           push    de                  // > n2
1411+ 6AC4 E5                           push    hl                  // > n1
1412+ 6AC5                              next
1412+ 6AC5 DD E9       >                jp      (ix)
1413+ 6AC7
1414+ 6AC7              //  ______________________________________________________________________
1415+ 6AC7              //
1416+ 6AC7              // drop         n1 --
1417+ 6AC7              // drops the top of stack
1418+ 6AC7                              New_Def DROP, "DROP", is_code, is_normal
1418+ 6AC7             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1418+ 6AC7             >
1418+ 6AC7             >                // dummy db directives used to calculate length of namec
1418+ 6AC7 44 52 4F 50 >                db      "DROP"
1418+ 6ACB             >len_NFA         defl    $ - temp_NFA
1418+ 6ACB             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1418+ 6AC7             >
1418+ 6AC7 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1418+ 6AC8 44 52 4F 50 >                db      "DROP"               // name string in 7-bit ascii, but
1418+ 6ACC             >                org     $-1                 // alter last byte of Name just above to set
1418+ 6ACB D0          >                db      {b $} | END_BIT     // msb as name end
1418+ 6ACC             >
1418+ 6ACC B7 6A       >                dw      last_NFA            // Link to previous definition Name
1418+ 6ACE             >DROP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1418+ 6ACE ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1418+ 6ACE             >                else
1418+ 6ACE D0 6A       >                dw      $ + 2   ; ok        // is pointed by CFA
1418+ 6AD0             >                endif           ; ok        // for other definitions it "points" the correct handler
1418+ 6AD0             >                // Use of "; ok" to suppress "warning[fwdref]"
1418+ 6AD0             >
1418+ 6AD0             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1419+ 6AD0 E1                           pop     hl                  // < n1 and discard previous TOS
1420+ 6AD1                              next
1420+ 6AD1 DD E9       >                jp      (ix)
1421+ 6AD3
1422+ 6AD3              //  ______________________________________________________________________
1423+ 6AD3              //
1424+ 6AD3              // nip          n1 n2 -- n2
1425+ 6AD3              // drops the second elemento on the stack
1426+ 6AD3                              New_Def NIP, "NIP", is_code, is_normal
1426+ 6AD3             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1426+ 6AD3             >
1426+ 6AD3             >                // dummy db directives used to calculate length of namec
1426+ 6AD3 4E 49 50    >                db      "NIP"
1426+ 6AD6             >len_NFA         defl    $ - temp_NFA
1426+ 6AD6             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1426+ 6AD3             >
1426+ 6AD3 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1426+ 6AD4 4E 49 50    >                db      "NIP"               // name string in 7-bit ascii, but
1426+ 6AD7             >                org     $-1                 // alter last byte of Name just above to set
1426+ 6AD6 D0          >                db      {b $} | END_BIT     // msb as name end
1426+ 6AD7             >
1426+ 6AD7 C7 6A       >                dw      last_NFA            // Link to previous definition Name
1426+ 6AD9             >NIP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1426+ 6AD9 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1426+ 6AD9             >                else
1426+ 6AD9 DB 6A       >                dw      $ + 2   ; ok        // is pointed by CFA
1426+ 6ADB             >                endif           ; ok        // for other definitions it "points" the correct handler
1426+ 6ADB             >                // Use of "; ok" to suppress "warning[fwdref]"
1426+ 6ADB             >
1426+ 6ADB             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1427+ 6ADB
1428+ 6ADB E1                           pop     hl                  // < n1 discarded
1429+ 6ADC E3                           ex      (sp), hl
1430+ 6ADD                              next
1430+ 6ADD DD E9       >                jp      (ix)
1431+ 6ADF
1432+ 6ADF              //  ______________________________________________________________________
1433+ 6ADF              //
1434+ 6ADF              // tuck         n1 n2 -- n2 n1 n2
1435+ 6ADF              // copy the top element after the second.
1436+ 6ADF                              New_Def TUCK, "TUCK", is_code, is_normal
1436+ 6ADF             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1436+ 6ADF             >
1436+ 6ADF             >                // dummy db directives used to calculate length of namec
1436+ 6ADF 54 55 43 4B >                db      "TUCK"
1436+ 6AE3             >len_NFA         defl    $ - temp_NFA
1436+ 6AE3             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1436+ 6ADF             >
1436+ 6ADF 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1436+ 6AE0 54 55 43 4B >                db      "TUCK"               // name string in 7-bit ascii, but
1436+ 6AE4             >                org     $-1                 // alter last byte of Name just above to set
1436+ 6AE3 CB          >                db      {b $} | END_BIT     // msb as name end
1436+ 6AE4             >
1436+ 6AE4 D3 6A       >                dw      last_NFA            // Link to previous definition Name
1436+ 6AE6             >TUCK:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1436+ 6AE6 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1436+ 6AE6             >                else
1436+ 6AE6 E8 6A       >                dw      $ + 2   ; ok        // is pointed by CFA
1436+ 6AE8             >                endif           ; ok        // for other definitions it "points" the correct handler
1436+ 6AE8             >                // Use of "; ok" to suppress "warning[fwdref]"
1436+ 6AE8             >
1436+ 6AE8             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1437+ 6AE8 E1                           pop     hl
1438+ 6AE9 D1                           pop     de                  // < n1
1439+ 6AEA E5                           push    hl                  // > n2  and TOS
1440+ 6AEB D5                           push    de                  // > n1
1441+ 6AEC E5                           push    hl
1442+ 6AED                              next
1442+ 6AED DD E9       >                jp      (ix)
1443+ 6AEF
1444+ 6AEF              //  ______________________________________________________________________
1445+ 6AEF              //
1446+ 6AEF              // swap         n1 n2 -- n2 n1
1447+ 6AEF              // swaps the two values on top of stack
1448+ 6AEF                              New_Def SWAP, "SWAP", is_code, is_normal
1448+ 6AEF             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1448+ 6AEF             >
1448+ 6AEF             >                // dummy db directives used to calculate length of namec
1448+ 6AEF 53 57 41 50 >                db      "SWAP"
1448+ 6AF3             >len_NFA         defl    $ - temp_NFA
1448+ 6AF3             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1448+ 6AEF             >
1448+ 6AEF 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1448+ 6AF0 53 57 41 50 >                db      "SWAP"               // name string in 7-bit ascii, but
1448+ 6AF4             >                org     $-1                 // alter last byte of Name just above to set
1448+ 6AF3 D0          >                db      {b $} | END_BIT     // msb as name end
1448+ 6AF4             >
1448+ 6AF4 DF 6A       >                dw      last_NFA            // Link to previous definition Name
1448+ 6AF6             >SWAP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1448+ 6AF6 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1448+ 6AF6             >                else
1448+ 6AF6 F8 6A       >                dw      $ + 2   ; ok        // is pointed by CFA
1448+ 6AF8             >                endif           ; ok        // for other definitions it "points" the correct handler
1448+ 6AF8             >                // Use of "; ok" to suppress "warning[fwdref]"
1448+ 6AF8             >
1448+ 6AF8             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1449+ 6AF8 E1                           pop     hl                  // < n1
1450+ 6AF9 E3                           ex      (sp),hl             // > n2
1451+ 6AFA E5                           push    hl                  // copy n1 to TOS
1452+ 6AFB                              next
1452+ 6AFB DD E9       >                jp      (ix)
1453+ 6AFD
1454+ 6AFD              //  ______________________________________________________________________
1455+ 6AFD              //
1456+ 6AFD              // dup         n -- n n
1457+ 6AFD              // duplicates the top value of stack
1458+ 6AFD                              New_Def DUP, "DUP", is_code, is_normal
1458+ 6AFD             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1458+ 6AFD             >
1458+ 6AFD             >                // dummy db directives used to calculate length of namec
1458+ 6AFD 44 55 50    >                db      "DUP"
1458+ 6B00             >len_NFA         defl    $ - temp_NFA
1458+ 6B00             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1458+ 6AFD             >
1458+ 6AFD 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1458+ 6AFE 44 55 50    >                db      "DUP"               // name string in 7-bit ascii, but
1458+ 6B01             >                org     $-1                 // alter last byte of Name just above to set
1458+ 6B00 D0          >                db      {b $} | END_BIT     // msb as name end
1458+ 6B01             >
1458+ 6B01 EF 6A       >                dw      last_NFA            // Link to previous definition Name
1458+ 6B03             >DUP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1458+ 6B03 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1458+ 6B03             >                else
1458+ 6B03 05 6B       >                dw      $ + 2   ; ok        // is pointed by CFA
1458+ 6B05             >                endif           ; ok        // for other definitions it "points" the correct handler
1458+ 6B05             >                // Use of "; ok" to suppress "warning[fwdref]"
1458+ 6B05             >
1458+ 6B05             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1459+ 6B05 E1                           pop     hl
1460+ 6B06 E5                           push    hl                  // > n duplicate TOS
1461+ 6B07 E5                           push    hl
1462+ 6B08                              next
1462+ 6B08 DD E9       >                jp      (ix)
1463+ 6B0A
1464+ 6B0A              //  ______________________________________________________________________
1465+ 6B0A              //
1466+ 6B0A              // rot         n1 n2 n3 -- n2 n3 n1
1467+ 6B0A              // Rotates the 3 top values of stack by picking the 3rd in access-order
1468+ 6B0A              // and putting it on top. The other two are shifted down one place.
1469+ 6B0A                              New_Def ROT, "ROT", is_code, is_normal
1469+ 6B0A             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1469+ 6B0A             >
1469+ 6B0A             >                // dummy db directives used to calculate length of namec
1469+ 6B0A 52 4F 54    >                db      "ROT"
1469+ 6B0D             >len_NFA         defl    $ - temp_NFA
1469+ 6B0D             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1469+ 6B0A             >
1469+ 6B0A 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1469+ 6B0B 52 4F 54    >                db      "ROT"               // name string in 7-bit ascii, but
1469+ 6B0E             >                org     $-1                 // alter last byte of Name just above to set
1469+ 6B0D D4          >                db      {b $} | END_BIT     // msb as name end
1469+ 6B0E             >
1469+ 6B0E FD 6A       >                dw      last_NFA            // Link to previous definition Name
1469+ 6B10             >ROT:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1469+ 6B10 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1469+ 6B10             >                else
1469+ 6B10 12 6B       >                dw      $ + 2   ; ok        // is pointed by CFA
1469+ 6B12             >                endif           ; ok        // for other definitions it "points" the correct handler
1469+ 6B12             >                // Use of "; ok" to suppress "warning[fwdref]"
1469+ 6B12             >
1469+ 6B12             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1470+ 6B12 D1                           pop     de                  // < n3
1471+ 6B13 E1                           pop     hl                  // < n2
1472+ 6B14 E3                           ex      (sp),hl             // > n2 < n1
1473+ 6B15 D5                           push    de                  // > n3
1474+ 6B16 E5                           push    hl                  // copy n1 to TOS
1475+ 6B17                              next
1475+ 6B17 DD E9       >                jp      (ix)
1476+ 6B19
1477+ 6B19              //  ______________________________________________________________________
1478+ 6B19              //
1479+ 6B19              // -rot         n1 n2 n3 -- n3 n1 n2
1480+ 6B19              // Rotates the 3 top values of stack by picking the 1st in access-order
1481+ 6B19              // and putting back to 3rd place. The other two are shifted down one place.
1482+ 6B19                              New_Def DASH_ROT, "-ROT", is_code, is_normal
1482+ 6B19             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1482+ 6B19             >
1482+ 6B19             >                // dummy db directives used to calculate length of namec
1482+ 6B19 2D 52 4F 54 >                db      "-ROT"
1482+ 6B1D             >len_NFA         defl    $ - temp_NFA
1482+ 6B1D             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1482+ 6B19             >
1482+ 6B19 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1482+ 6B1A 2D 52 4F 54 >                db      "-ROT"               // name string in 7-bit ascii, but
1482+ 6B1E             >                org     $-1                 // alter last byte of Name just above to set
1482+ 6B1D D4          >                db      {b $} | END_BIT     // msb as name end
1482+ 6B1E             >
1482+ 6B1E 0A 6B       >                dw      last_NFA            // Link to previous definition Name
1482+ 6B20             >DASH_ROT:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1482+ 6B20 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1482+ 6B20             >                else
1482+ 6B20 22 6B       >                dw      $ + 2   ; ok        // is pointed by CFA
1482+ 6B22             >                endif           ; ok        // for other definitions it "points" the correct handler
1482+ 6B22             >                // Use of "; ok" to suppress "warning[fwdref]"
1482+ 6B22             >
1482+ 6B22             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1483+ 6B22 E1                           pop     hl                  // < n3
1484+ 6B23 D1                           pop     de                  // < n2
1485+ 6B24 E3                           ex      (sp),hl             // > n3 < n1
1486+ 6B25 E5                           push    hl                  // > n1
1487+ 6B26 D5                           push    de                  // copy n3 to TOS
1488+ 6B27                              next
1488+ 6B27 DD E9       >                jp      (ix)
1489+ 6B29
1490+ 6B29              //  ______________________________________________________________________
1491+ 6B29              //
1492+ 6B29              // pick        n1 -- nx
1493+ 6B29              // picks the nth element from TOS
1494+ 6B29                              New_Def PICK, "PICK", is_code, is_normal
1494+ 6B29             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1494+ 6B29             >
1494+ 6B29             >                // dummy db directives used to calculate length of namec
1494+ 6B29 50 49 43 4B >                db      "PICK"
1494+ 6B2D             >len_NFA         defl    $ - temp_NFA
1494+ 6B2D             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1494+ 6B29             >
1494+ 6B29 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1494+ 6B2A 50 49 43 4B >                db      "PICK"               // name string in 7-bit ascii, but
1494+ 6B2E             >                org     $-1                 // alter last byte of Name just above to set
1494+ 6B2D CB          >                db      {b $} | END_BIT     // msb as name end
1494+ 6B2E             >
1494+ 6B2E 19 6B       >                dw      last_NFA            // Link to previous definition Name
1494+ 6B30             >PICK:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1494+ 6B30 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1494+ 6B30             >                else
1494+ 6B30 32 6B       >                dw      $ + 2   ; ok        // is pointed by CFA
1494+ 6B32             >                endif           ; ok        // for other definitions it "points" the correct handler
1494+ 6B32             >                // Use of "; ok" to suppress "warning[fwdref]"
1494+ 6B32             >
1494+ 6B32             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1495+ 6B32 E1                           pop     hl                  // take TOS as index
1496+ 6B33 29                           add     hl, hl              // as cells
1497+ 6B34 39                           add     hl, sp              // from Stack Pointer
1498+ 6B35 7E                           ld      a, (hl)             // replace TOS
1499+ 6B36 23                           inc     hl
1500+ 6B37 66                           ld      h, (hl)
1501+ 6B38 6F                           ld      l, a
1502+ 6B39
1503+ 6B39                              psh1
1503+ 6B39 E5          >                push    hl
1503+ 6B3A DD E9       >                jp      (ix)
1504+ 6B3C
1505+ 6B3C
1506+ 6B3C              //  ______________________________________________________________________
1507+ 6B3C              //
1508+ 6B3C              // roll        n1 n2 n3 ... n -- n2 n3 ... n1
1509+ 6B3C              // picks the nth element from TOS
1510+ 6B3C              //              New_Def ROLL, "ROLL", is_code, is_normal
1511+ 6B3C              //              exx                     // we need all registers free
1512+ 6B3C              //              pop     hl              // number of cells to roll
1513+ 6B3C              //              ld      a, h
1514+ 6B3C              //              or       l
1515+ 6B3C              //              jr      z, Roll_Zero
1516+ 6B3C              //                  add     hl, hl              // number of bytes to move
1517+ 6B3C              //                  ld      b, h
1518+ 6B3C              //                  ld      c, l
1519+ 6B3C              //                  add     hl, sp          // address of n1
1520+ 6B3C              //                  ld      a, (hl)         // take n1 into a and a,
1521+ 6B3C              //                  inc     hl
1522+ 6B3C              //                  ex      af, af'
1523+ 6B3C              //                  ld      a, (hl)         // take n1 into a and a,
1524+ 6B3C              //                  ld      d, h
1525+ 6B3C              //                  ld      e, l
1526+ 6B3C              //                  dec     hl
1527+ 6B3C              //                  dec     hl
1528+ 6B3C              //                  lddr
1529+ 6B3C              //                  ex      de, hl
1530+ 6B3C              //                  ld      (hl), a
1531+ 6B3C              //                  dec     hl
1532+ 6B3C              //                  ex      af, af'
1533+ 6B3C              //                  ld      (hl), a
1534+ 6B3C              //Roll_Zero:
1535+ 6B3C              //              exx
1536+ 6B3C              //              next
1537+ 6B3C
1538+ 6B3C
1539+ 6B3C              //  ______________________________________________________________________
1540+ 6B3C              //
1541+ 6B3C              // 2over        d1 d2 -- d1 d2 d1
1542+ 6B3C              //              n1 n2 n3 n4 -- n1 n2 n3 n4 n1 n2
1543+ 6B3C              // copy the second double of stack and put on top.
1544+ 6B3C              //              New_Def TWO_OVER, "2OVER", is_code, is_normal
1545+ 6B3C              //
1546+ 6B3C              //              ld      hl, 7
1547+ 6B3C              //              add     hl, sp
1548+ 6B3C              //              ld      d, (hl)
1549+ 6B3C              //              dec     hl
1550+ 6B3C              //              ld      e, (hl)             // d1-L
1551+ 6B3C              //              push    de
1552+ 6B3C              //              dec     hl
1553+ 6B3C              //              ld      d, (hl)
1554+ 6B3C              //              dec     hl
1555+ 6B3C              //              ld      e, (hl)             // d1-H
1556+ 6B3C              //              push    de
1557+ 6B3C              //              next
1558+ 6B3C
1559+ 6B3C              //  ______________________________________________________________________
1560+ 6B3C              //
1561+ 6B3C              // 2drop        d --
1562+ 6B3C              //              n1 n2 --
1563+ 6B3C              // drops the top double from stack
1564+ 6B3C                              New_Def TWO_DROP, "2DROP", is_code, is_normal
1564+ 6B3C             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1564+ 6B3C             >
1564+ 6B3C             >                // dummy db directives used to calculate length of namec
1564+ 6B3C 32 44 52 4F >                db      "2DROP"
1564+ 6B40 50          >
1564+ 6B41             >len_NFA         defl    $ - temp_NFA
1564+ 6B41             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1564+ 6B3C             >
1564+ 6B3C 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1564+ 6B3D 32 44 52 4F >                db      "2DROP"               // name string in 7-bit ascii, but
1564+ 6B41 50          >
1564+ 6B42             >                org     $-1                 // alter last byte of Name just above to set
1564+ 6B41 D0          >                db      {b $} | END_BIT     // msb as name end
1564+ 6B42             >
1564+ 6B42 29 6B       >                dw      last_NFA            // Link to previous definition Name
1564+ 6B44             >TWO_DROP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1564+ 6B44 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1564+ 6B44             >                else
1564+ 6B44 46 6B       >                dw      $ + 2   ; ok        // is pointed by CFA
1564+ 6B46             >                endif           ; ok        // for other definitions it "points" the correct handler
1564+ 6B46             >                // Use of "; ok" to suppress "warning[fwdref]"
1564+ 6B46             >
1564+ 6B46             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1565+ 6B46 E1                           pop     hl
1566+ 6B47 E1                           pop     hl
1567+ 6B48                              next
1567+ 6B48 DD E9       >                jp      (ix)
1568+ 6B4A
1569+ 6B4A              //  ______________________________________________________________________
1570+ 6B4A              //
1571+ 6B4A              // 2nip         d1 d2 -- d2
1572+ 6B4A              //              n1 n2 n3 n4 -- n3 n4
1573+ 6B4A              // drops the second double on the stack
1574+ 6B4A              //              New_Def TWO_NIP, 4, "2nip"
1575+ 6B4A              //              ...
1576+ 6B4A
1577+ 6B4A              //  ______________________________________________________________________
1578+ 6B4A              //
1579+ 6B4A              // 2tuck         d1 d2 -- d2 d1 d2
1580+ 6B4A              // copy the top element after the second.
1581+ 6B4A              //              New_Def TWO_TUCK, 5, "2tuck"
1582+ 6B4A              //              ...
1583+ 6B4A
1584+ 6B4A              //  ______________________________________________________________________
1585+ 6B4A              //
1586+ 6B4A              // 2swap         d1 d2 -- d2 d1
1587+ 6B4A              //               n1 n2 n3 n4 -- n3 n4 n1 n2
1588+ 6B4A              // swaps the two doubles on top of stack
1589+ 6B4A                              New_Def TWO_SWAP, "2SWAP", is_code, is_normal
1589+ 6B4A             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1589+ 6B4A             >
1589+ 6B4A             >                // dummy db directives used to calculate length of namec
1589+ 6B4A 32 53 57 41 >                db      "2SWAP"
1589+ 6B4E 50          >
1589+ 6B4F             >len_NFA         defl    $ - temp_NFA
1589+ 6B4F             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1589+ 6B4A             >
1589+ 6B4A 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1589+ 6B4B 32 53 57 41 >                db      "2SWAP"               // name string in 7-bit ascii, but
1589+ 6B4F 50          >
1589+ 6B50             >                org     $-1                 // alter last byte of Name just above to set
1589+ 6B4F D0          >                db      {b $} | END_BIT     // msb as name end
1589+ 6B50             >
1589+ 6B50 3C 6B       >                dw      last_NFA            // Link to previous definition Name
1589+ 6B52             >TWO_SWAP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1589+ 6B52 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1589+ 6B52             >                else
1589+ 6B52 54 6B       >                dw      $ + 2   ; ok        // is pointed by CFA
1589+ 6B54             >                endif           ; ok        // for other definitions it "points" the correct handler
1589+ 6B54             >                // Use of "; ok" to suppress "warning[fwdref]"
1589+ 6B54             >
1589+ 6B54             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1590+ 6B54 F1                           pop     af                  //   d2-H
1591+ 6B55 E1                           pop     hl                  // < d2-L
1592+ 6B56 D1                           pop     de                  // < d1-H
1593+ 6B57 E3                           ex      (sp), hl            // < d1-L > d2-L
1594+ 6B58 F5                           push    af                  // > d2-H
1595+ 6B59 E5                           push    hl                  // > d1-L
1596+ 6B5A D5                           push    de
1597+ 6B5B
1598+ 6B5B                              next
1598+ 6B5B DD E9       >                jp      (ix)
1599+ 6B5D
1600+ 6B5D              //  ______________________________________________________________________
1601+ 6B5D              //
1602+ 6B5D              // 2dup         d -- d d
1603+ 6B5D              //              n1 n2 -- n1 n2 n1 n2
1604+ 6B5D              // duplicates the top double of stack
1605+ 6B5D                              New_Def TWO_DUP, "2DUP", is_code, is_normal
1605+ 6B5D             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1605+ 6B5D             >
1605+ 6B5D             >                // dummy db directives used to calculate length of namec
1605+ 6B5D 32 44 55 50 >                db      "2DUP"
1605+ 6B61             >len_NFA         defl    $ - temp_NFA
1605+ 6B61             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1605+ 6B5D             >
1605+ 6B5D 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1605+ 6B5E 32 44 55 50 >                db      "2DUP"               // name string in 7-bit ascii, but
1605+ 6B62             >                org     $-1                 // alter last byte of Name just above to set
1605+ 6B61 D0          >                db      {b $} | END_BIT     // msb as name end
1605+ 6B62             >
1605+ 6B62 4A 6B       >                dw      last_NFA            // Link to previous definition Name
1605+ 6B64             >TWO_DUP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1605+ 6B64 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1605+ 6B64             >                else
1605+ 6B64 66 6B       >                dw      $ + 2   ; ok        // is pointed by CFA
1605+ 6B66             >                endif           ; ok        // for other definitions it "points" the correct handler
1605+ 6B66             >                // Use of "; ok" to suppress "warning[fwdref]"
1605+ 6B66             >
1605+ 6B66             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1606+ 6B66 E1                           pop     hl                  // < d-H
1607+ 6B67 D1                           pop     de                  // < d-L
1608+ 6B68 D5                           push    de                  // < d-L
1609+ 6B69 E5                           push    hl                  // > d-H
1610+ 6B6A D5                           push    de                  // > d-L
1611+ 6B6B E5                           push    hl                  // > d-H
1612+ 6B6C                              next
1612+ 6B6C DD E9       >                jp      (ix)
1613+ 6B6E
1614+ 6B6E              //  ______________________________________________________________________
1615+ 6B6E              //
1616+ 6B6E              // 2rot         d1 d2 d3 -- d2 d3 d1
1617+ 6B6E              //              n1 n2 n3 n4 n5 n6 -- n3 n4 n5 n6 n1 n2
1618+ 6B6E              // Rotates the 3 top doubles of stack by picking the 3rd in access-order
1619+ 6B6E              // and putting it on top. The other two are shifted down one place.
1620+ 6B6E              //              New_Def TWO?ROT, 4, "2rot"
1621+ 6B6E              //              ...
1622+ 6B6E              //              New_Def TWO_ROT, "2ROT", is_code, is_normal
1623+ 6B6E              //
1624+ 6B6E              //      d3  |d2  |d1  |
1625+ 6B6E              //      h l |h l |h l |
1626+ 6B6E              // SP   LHED|LHED|LHED|
1627+ 6B6E              // SP  +0123|4567|89ab|
1628+ 6B6E              //              ld      hl, $000B
1629+ 6B6E              //              add     hl, sp
1630+ 6B6E              //              ld      d, (hl)
1631+ 6B6E              //              dec     hl
1632+ 6B6E              //              ld      e, (hl)
1633+ 6B6E              //              dec     hl
1634+ 6B6E              //              push    de
1635+ 6B6E              //              ld      d, (hl)
1636+ 6B6E              //              dec     hl
1637+ 6B6E              //              ld      e, (hl)
1638+ 6B6E              //              dec     hl
1639+ 6B6E              //              push    de
1640+ 6B6E
1641+ 6B6E              //      d1  |d3  |d2  |d1  |
1642+ 6B6E              //      h l |h l |h l |h l |
1643+ 6B6E              // SP   LHED|LHED|LHED|LHED|
1644+ 6B6E              // SP       +0123|4567|89ab|
1645+ 6B6E
1646+ 6B6E              //              ld      d, h
1647+ 6B6E              //              ld      e, l
1648+ 6B6E              //              inc     de
1649+ 6B6E              //              inc     de
1650+ 6B6E              //              inc     de
1651+ 6B6E              //              inc     de
1652+ 6B6E              //              push    bc
1653+ 6B6E              //              ld      bc, $000C
1654+ 6B6E              //              lddr
1655+ 6B6E              //              pop     bc
1656+ 6B6E              //              pop     de
1657+ 6B6E              //              pop     de
1658+ 6B6E              //
1659+ 6B6E              //              next
1660+ 6B6E
1661+ 6B6E
1662+ 6B6E              //  ______________________________________________________________________
1663+ 6B6E              //
1664+ 6B6E              // +!           n a --
1665+ 6B6E              // Sums to the content of address a the number n.
1666+ 6B6E              // It is the same of  a @ n + a !
1667+ 6B6E                              New_Def PLUSSTORE, "+!", is_code, is_normal
1667+ 6B6E             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1667+ 6B6E             >
1667+ 6B6E             >                // dummy db directives used to calculate length of namec
1667+ 6B6E 2B 21       >                db      "+!"
1667+ 6B70             >len_NFA         defl    $ - temp_NFA
1667+ 6B70             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1667+ 6B6E             >
1667+ 6B6E 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1667+ 6B6F 2B 21       >                db      "+!"               // name string in 7-bit ascii, but
1667+ 6B71             >                org     $-1                 // alter last byte of Name just above to set
1667+ 6B70 A1          >                db      {b $} | END_BIT     // msb as name end
1667+ 6B71             >
1667+ 6B71 5D 6B       >                dw      last_NFA            // Link to previous definition Name
1667+ 6B73             >PLUSSTORE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1667+ 6B73 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1667+ 6B73             >                else
1667+ 6B73 75 6B       >                dw      $ + 2   ; ok        // is pointed by CFA
1667+ 6B75             >                endif           ; ok        // for other definitions it "points" the correct handler
1667+ 6B75             >                // Use of "; ok" to suppress "warning[fwdref]"
1667+ 6B75             >
1667+ 6B75             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1668+ 6B75 E1                           pop     hl                  // hl is the address
1669+ 6B76 D1                           pop     de                  // de is the number
1670+ 6B77 7E                           ld      a, (hl)
1671+ 6B78 83                           add     e
1672+ 6B79 77                           ld      (hl), a
1673+ 6B7A 23                           inc     hl
1674+ 6B7B 7E                           ld      a, (hl)
1675+ 6B7C 8A                           adc     d
1676+ 6B7D 77                           ld      (hl), a
1677+ 6B7E
1678+ 6B7E                              next
1678+ 6B7E DD E9       >                jp      (ix)
1679+ 6B80
1680+ 6B80              //  ______________________________________________________________________
1681+ 6B80              //
1682+ 6B80              // toggle       a n --
1683+ 6B80              // Complements (xor) the byte at addrress  a  with the model n.
1684+ 6B80                              New_Def TOGGLE, "TOGGLE", is_code, is_normal
1684+ 6B80             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1684+ 6B80             >
1684+ 6B80             >                // dummy db directives used to calculate length of namec
1684+ 6B80 54 4F 47 47 >                db      "TOGGLE"
1684+ 6B84 4C 45       >
1684+ 6B86             >len_NFA         defl    $ - temp_NFA
1684+ 6B86             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1684+ 6B80             >
1684+ 6B80 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1684+ 6B81 54 4F 47 47 >                db      "TOGGLE"               // name string in 7-bit ascii, but
1684+ 6B85 4C 45       >
1684+ 6B87             >                org     $-1                 // alter last byte of Name just above to set
1684+ 6B86 C5          >                db      {b $} | END_BIT     // msb as name end
1684+ 6B87             >
1684+ 6B87 6E 6B       >                dw      last_NFA            // Link to previous definition Name
1684+ 6B89             >TOGGLE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1684+ 6B89 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1684+ 6B89             >                else
1684+ 6B89 8B 6B       >                dw      $ + 2   ; ok        // is pointed by CFA
1684+ 6B8B             >                endif           ; ok        // for other definitions it "points" the correct handler
1684+ 6B8B             >                // Use of "; ok" to suppress "warning[fwdref]"
1684+ 6B8B             >
1684+ 6B8B             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1685+ 6B8B D1                           pop     de
1686+ 6B8C E1                           pop     hl
1687+ 6B8D 7E                           ld      a, (hl)
1688+ 6B8E AB                           xor     e
1689+ 6B8F 77                           ld      (hl), a
1690+ 6B90
1691+ 6B90                              next
1691+ 6B90 DD E9       >                jp      (ix)
1692+ 6B92
1693+ 6B92              //  ______________________________________________________________________
1694+ 6B92              //
1695+ 6B92              // @            a -- n
1696+ 6B92              // fetch 16 bit number n from address a. Z80 keeps high byte is in high memory
1697+ 6B92                              New_Def FETCH, "@", is_code, is_normal
1697+ 6B92             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1697+ 6B92             >
1697+ 6B92             >                // dummy db directives used to calculate length of namec
1697+ 6B92 40          >                db      "@"
1697+ 6B93             >len_NFA         defl    $ - temp_NFA
1697+ 6B93             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1697+ 6B92             >
1697+ 6B92 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1697+ 6B93 40          >                db      "@"               // name string in 7-bit ascii, but
1697+ 6B94             >                org     $-1                 // alter last byte of Name just above to set
1697+ 6B93 C0          >                db      {b $} | END_BIT     // msb as name end
1697+ 6B94             >
1697+ 6B94 80 6B       >                dw      last_NFA            // Link to previous definition Name
1697+ 6B96             >FETCH:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1697+ 6B96 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1697+ 6B96             >                else
1697+ 6B96 98 6B       >                dw      $ + 2   ; ok        // is pointed by CFA
1697+ 6B98             >                endif           ; ok        // for other definitions it "points" the correct handler
1697+ 6B98             >                // Use of "; ok" to suppress "warning[fwdref]"
1697+ 6B98             >
1697+ 6B98             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1698+ 6B98 E1                           pop     hl
1699+ 6B99 5E                           ld      e, (hl)             // low-byte
1700+ 6B9A 23                           inc     hl
1701+ 6B9B 56                           ld      d, (hl)             // high-byte
1702+ 6B9C D5                           push    de
1703+ 6B9D                              next
1703+ 6B9D DD E9       >                jp      (ix)
1704+ 6B9F
1705+ 6B9F              //  ______________________________________________________________________
1706+ 6B9F              //
1707+ 6B9F              // !            n a --
1708+ 6B9F              // store 16 bit number n from address a. Z80 keeps high byte is in high memory
1709+ 6B9F                              New_Def STORE, "!", is_code, is_normal
1709+ 6B9F             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1709+ 6B9F             >
1709+ 6B9F             >                // dummy db directives used to calculate length of namec
1709+ 6B9F 21          >                db      "!"
1709+ 6BA0             >len_NFA         defl    $ - temp_NFA
1709+ 6BA0             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1709+ 6B9F             >
1709+ 6B9F 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1709+ 6BA0 21          >                db      "!"               // name string in 7-bit ascii, but
1709+ 6BA1             >                org     $-1                 // alter last byte of Name just above to set
1709+ 6BA0 A1          >                db      {b $} | END_BIT     // msb as name end
1709+ 6BA1             >
1709+ 6BA1 92 6B       >                dw      last_NFA            // Link to previous definition Name
1709+ 6BA3             >STORE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1709+ 6BA3 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1709+ 6BA3             >                else
1709+ 6BA3 A5 6B       >                dw      $ + 2   ; ok        // is pointed by CFA
1709+ 6BA5             >                endif           ; ok        // for other definitions it "points" the correct handler
1709+ 6BA5             >                // Use of "; ok" to suppress "warning[fwdref]"
1709+ 6BA5             >
1709+ 6BA5             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1710+ 6BA5 E1                           pop     hl                  // address
1711+ 6BA6 D1                           pop     de                  // < n
1712+ 6BA7 73                           ld      (hl), e             // low-byte
1713+ 6BA8 23                           inc     hl
1714+ 6BA9 72                           ld      (hl), d             // high-byte
1715+ 6BAA
1716+ 6BAA                              next
1716+ 6BAA DD E9       >                jp      (ix)
1717+ 6BAC
1718+ 6BAC              //  ______________________________________________________________________
1719+ 6BAC              //
1720+ 6BAC              // c@           a -- c
1721+ 6BAC              // fetch a character n from address a
1722+ 6BAC                              New_Def CFETCH, "C@", is_code, is_normal
1722+ 6BAC             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1722+ 6BAC             >
1722+ 6BAC             >                // dummy db directives used to calculate length of namec
1722+ 6BAC 43 40       >                db      "C@"
1722+ 6BAE             >len_NFA         defl    $ - temp_NFA
1722+ 6BAE             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1722+ 6BAC             >
1722+ 6BAC 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1722+ 6BAD 43 40       >                db      "C@"               // name string in 7-bit ascii, but
1722+ 6BAF             >                org     $-1                 // alter last byte of Name just above to set
1722+ 6BAE C0          >                db      {b $} | END_BIT     // msb as name end
1722+ 6BAF             >
1722+ 6BAF 9F 6B       >                dw      last_NFA            // Link to previous definition Name
1722+ 6BB1             >CFETCH:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1722+ 6BB1 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1722+ 6BB1             >                else
1722+ 6BB1 B3 6B       >                dw      $ + 2   ; ok        // is pointed by CFA
1722+ 6BB3             >                endif           ; ok        // for other definitions it "points" the correct handler
1722+ 6BB3             >                // Use of "; ok" to suppress "warning[fwdref]"
1722+ 6BB3             >
1722+ 6BB3             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1723+ 6BB3 E1                           pop     hl
1724+ 6BB4 6E                           ld      l, (hl)             // low-byte
1725+ 6BB5 26 00                        ld      h, 0
1726+ 6BB7
1727+ 6BB7                              psh1
1727+ 6BB7 E5          >                push    hl
1727+ 6BB8 DD E9       >                jp      (ix)
1728+ 6BBA
1729+ 6BBA              //  ______________________________________________________________________
1730+ 6BBA              //
1731+ 6BBA              // c!           c a --
1732+ 6BBA              // fetch 16 bit number n from address a. Z80 keeps high byte is in high memory
1733+ 6BBA                              New_Def CSTORE, "C!", is_code, is_normal
1733+ 6BBA             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1733+ 6BBA             >
1733+ 6BBA             >                // dummy db directives used to calculate length of namec
1733+ 6BBA 43 21       >                db      "C!"
1733+ 6BBC             >len_NFA         defl    $ - temp_NFA
1733+ 6BBC             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1733+ 6BBA             >
1733+ 6BBA 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1733+ 6BBB 43 21       >                db      "C!"               // name string in 7-bit ascii, but
1733+ 6BBD             >                org     $-1                 // alter last byte of Name just above to set
1733+ 6BBC A1          >                db      {b $} | END_BIT     // msb as name end
1733+ 6BBD             >
1733+ 6BBD AC 6B       >                dw      last_NFA            // Link to previous definition Name
1733+ 6BBF             >CSTORE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1733+ 6BBF ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1733+ 6BBF             >                else
1733+ 6BBF C1 6B       >                dw      $ + 2   ; ok        // is pointed by CFA
1733+ 6BC1             >                endif           ; ok        // for other definitions it "points" the correct handler
1733+ 6BC1             >                // Use of "; ok" to suppress "warning[fwdref]"
1733+ 6BC1             >
1733+ 6BC1             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1734+ 6BC1 E1                           pop     hl                  // < address
1735+ 6BC2 D1                           pop     de
1736+ 6BC3 73                           ld      (hl), e             // low-byte
1737+ 6BC4
1738+ 6BC4                              next
1738+ 6BC4 DD E9       >                jp      (ix)
1739+ 6BC6
1740+ 6BC6              //  ______________________________________________________________________
1741+ 6BC6              //
1742+ 6BC6              // 2@           a -- d
1743+ 6BC6              // fetch a 32 bits number d from address a and leaves it on top of the
1744+ 6BC6              // stack as two single numbers, high part as top of the stack.
1745+ 6BC6              // A double number is normally kept in CPU registers as HLDE.
1746+ 6BC6              // On stack a double number is treated as two single numbers
1747+ 6BC6              // where BC is on the top of the stack and HL is the second from top,
1748+ 6BC6              // so the sign of the number can be checked on top of stack
1749+ 6BC6              // and in the stack memory it appears as LHED.
1750+ 6BC6                              New_Def TWO_FETCH, "2@", is_code, is_normal
1750+ 6BC6             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1750+ 6BC6             >
1750+ 6BC6             >                // dummy db directives used to calculate length of namec
1750+ 6BC6 32 40       >                db      "2@"
1750+ 6BC8             >len_NFA         defl    $ - temp_NFA
1750+ 6BC8             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1750+ 6BC6             >
1750+ 6BC6 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1750+ 6BC7 32 40       >                db      "2@"               // name string in 7-bit ascii, but
1750+ 6BC9             >                org     $-1                 // alter last byte of Name just above to set
1750+ 6BC8 C0          >                db      {b $} | END_BIT     // msb as name end
1750+ 6BC9             >
1750+ 6BC9 BA 6B       >                dw      last_NFA            // Link to previous definition Name
1750+ 6BCB             >TWO_FETCH:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1750+ 6BCB ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1750+ 6BCB             >                else
1750+ 6BCB CD 6B       >                dw      $ + 2   ; ok        // is pointed by CFA
1750+ 6BCD             >                endif           ; ok        // for other definitions it "points" the correct handler
1750+ 6BCD             >                // Use of "; ok" to suppress "warning[fwdref]"
1750+ 6BCD             >
1750+ 6BCD             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1751+ 6BCD E1                           pop     hl                  // address
1752+ 6BCE 5E                           ld      e, (hl)             // low-byte
1753+ 6BCF 23                           inc     hl
1754+ 6BD0 56                           ld      d, (hl)             // high-byte
1755+ 6BD1
1756+ 6BD1 23                           inc     hl
1757+ 6BD2 7E                           ld      a, (hl)             // low-byte
1758+ 6BD3 23                           inc     hl
1759+ 6BD4 66                           ld      h, (hl)             // high-byte
1760+ 6BD5 6F                           ld      l, a
1761+ 6BD6 E5                           push    hl
1762+ 6BD7 D5                           push    de
1763+ 6BD8                              next
1763+ 6BD8 DD E9       >                jp      (ix)
1764+ 6BDA
1765+ 6BDA              //  ______________________________________________________________________
1766+ 6BDA              //
1767+ 6BDA              // 2!           d a --
1768+ 6BDA              // stores a 32 bits number d from address a and leaves it on top of the
1769+ 6BDA              // stack as two single numbers, high part as top of the stack.
1770+ 6BDA              // A double number is normally kept in CPU registers as HLDE.
1771+ 6BDA              // On stack a double number is treated as two single numbers
1772+ 6BDA              // where BC is on the top of the stack and HL is the second from top,
1773+ 6BDA              // so the sign of the number can be checked on top of stack
1774+ 6BDA              // and in the stack memory it appears as LHED.
1775+ 6BDA                              New_Def TWO_STORE, "2!", is_code, is_normal
1775+ 6BDA             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1775+ 6BDA             >
1775+ 6BDA             >                // dummy db directives used to calculate length of namec
1775+ 6BDA 32 21       >                db      "2!"
1775+ 6BDC             >len_NFA         defl    $ - temp_NFA
1775+ 6BDC             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1775+ 6BDA             >
1775+ 6BDA 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1775+ 6BDB 32 21       >                db      "2!"               // name string in 7-bit ascii, but
1775+ 6BDD             >                org     $-1                 // alter last byte of Name just above to set
1775+ 6BDC A1          >                db      {b $} | END_BIT     // msb as name end
1775+ 6BDD             >
1775+ 6BDD C6 6B       >                dw      last_NFA            // Link to previous definition Name
1775+ 6BDF             >TWO_STORE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1775+ 6BDF ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1775+ 6BDF             >                else
1775+ 6BDF E1 6B       >                dw      $ + 2   ; ok        // is pointed by CFA
1775+ 6BE1             >                endif           ; ok        // for other definitions it "points" the correct handler
1775+ 6BE1             >                // Use of "; ok" to suppress "warning[fwdref]"
1775+ 6BE1             >
1775+ 6BE1             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1776+ 6BE1 D9                           exx
1777+ 6BE2 E1                           pop     hl                  // address
1778+ 6BE3 C1                           pop     bc                  // < high-part
1779+ 6BE4 D1                           pop     de                  // < low-part > Instruction Pointer
1780+ 6BE5 71                           ld      (hl), c
1781+ 6BE6 23                           inc     hl
1782+ 6BE7 70                           ld      (hl), b
1783+ 6BE8 23                           inc     hl
1784+ 6BE9 73                           ld      (hl), e
1785+ 6BEA 23                           inc     hl
1786+ 6BEB 72                           ld      (hl), d
1787+ 6BEC D9                           exx
1788+ 6BED                              next
1788+ 6BED DD E9       >                jp      (ix)
1789+ 6BEF
1790+ 6BEF              //  ______________________________________________________________________
1791+ 6BEF              //
1792+ 6BEF              // p@           a -- c
1793+ 6BEF              // Read one byte from port a and leave the result on top of stack
1794+ 6BEF                              New_Def PFETCH, "P@", is_code, is_normal
1794+ 6BEF             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1794+ 6BEF             >
1794+ 6BEF             >                // dummy db directives used to calculate length of namec
1794+ 6BEF 50 40       >                db      "P@"
1794+ 6BF1             >len_NFA         defl    $ - temp_NFA
1794+ 6BF1             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1794+ 6BEF             >
1794+ 6BEF 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1794+ 6BF0 50 40       >                db      "P@"               // name string in 7-bit ascii, but
1794+ 6BF2             >                org     $-1                 // alter last byte of Name just above to set
1794+ 6BF1 C0          >                db      {b $} | END_BIT     // msb as name end
1794+ 6BF2             >
1794+ 6BF2 DA 6B       >                dw      last_NFA            // Link to previous definition Name
1794+ 6BF4             >PFETCH:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1794+ 6BF4 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1794+ 6BF4             >                else
1794+ 6BF4 F6 6B       >                dw      $ + 2   ; ok        // is pointed by CFA
1794+ 6BF6             >                endif           ; ok        // for other definitions it "points" the correct handler
1794+ 6BF6             >                // Use of "; ok" to suppress "warning[fwdref]"
1794+ 6BF6             >
1794+ 6BF6             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1795+ 6BF6 D9                           exx
1796+ 6BF7 C1                           pop     bc
1797+ 6BF8 26 00                        ld      h, 0
1798+ 6BFA ED 68                        in      l, (c)
1799+ 6BFC E5                           push    hl
1800+ 6BFD D9                           exx
1801+ 6BFE                              next
1801+ 6BFE DD E9       >                jp      (ix)
1802+ 6C00
1803+ 6C00              //  ______________________________________________________________________
1804+ 6C00              //
1805+ 6C00              // p!           c a --
1806+ 6C00              // Send one byte (top of stack) to port a
1807+ 6C00                              New_Def PSTORE, "P!", is_code, is_normal
1807+ 6C00             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1807+ 6C00             >
1807+ 6C00             >                // dummy db directives used to calculate length of namec
1807+ 6C00 50 21       >                db      "P!"
1807+ 6C02             >len_NFA         defl    $ - temp_NFA
1807+ 6C02             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1807+ 6C00             >
1807+ 6C00 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1807+ 6C01 50 21       >                db      "P!"               // name string in 7-bit ascii, but
1807+ 6C03             >                org     $-1                 // alter last byte of Name just above to set
1807+ 6C02 A1          >                db      {b $} | END_BIT     // msb as name end
1807+ 6C03             >
1807+ 6C03 EF 6B       >                dw      last_NFA            // Link to previous definition Name
1807+ 6C05             >PSTORE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1807+ 6C05 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1807+ 6C05             >                else
1807+ 6C05 07 6C       >                dw      $ + 2   ; ok        // is pointed by CFA
1807+ 6C07             >                endif           ; ok        // for other definitions it "points" the correct handler
1807+ 6C07             >                // Use of "; ok" to suppress "warning[fwdref]"
1807+ 6C07             >
1807+ 6C07             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1808+ 6C07 D9                           exx
1809+ 6C08 C1                           pop     bc
1810+ 6C09 E1                           pop     hl                  // < c
1811+ 6C0A ED 69                        out     (c), l              // low-byte
1812+ 6C0C D9                           exx
1813+ 6C0D                              next
1813+ 6C0D DD E9       >                jp      (ix)
1814+ 6C0F
1815+ 6C0F
1816+ 6C0F              //  ______________________________________________________________________
1817+ 6C0F              //
1818+ 6C0F              // 2*           n1 -- n2
1819+ 6C0F              // doubles the number at top of stack
1820+ 6C0F                              New_Def TWO_MUL, "2*", is_code, is_normal
1820+ 6C0F             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1820+ 6C0F             >
1820+ 6C0F             >                // dummy db directives used to calculate length of namec
1820+ 6C0F 32 2A       >                db      "2*"
1820+ 6C11             >len_NFA         defl    $ - temp_NFA
1820+ 6C11             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1820+ 6C0F             >
1820+ 6C0F 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1820+ 6C10 32 2A       >                db      "2*"               // name string in 7-bit ascii, but
1820+ 6C12             >                org     $-1                 // alter last byte of Name just above to set
1820+ 6C11 AA          >                db      {b $} | END_BIT     // msb as name end
1820+ 6C12             >
1820+ 6C12 00 6C       >                dw      last_NFA            // Link to previous definition Name
1820+ 6C14             >TWO_MUL:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1820+ 6C14 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1820+ 6C14             >                else
1820+ 6C14 16 6C       >                dw      $ + 2   ; ok        // is pointed by CFA
1820+ 6C16             >                endif           ; ok        // for other definitions it "points" the correct handler
1820+ 6C16             >                // Use of "; ok" to suppress "warning[fwdref]"
1820+ 6C16             >
1820+ 6C16             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1821+ 6C16              Two_Mul_Ptr:
1822+ 6C16 E1                           pop     hl
1823+ 6C17 29                           add     hl, hl
1824+ 6C18
1825+ 6C18                              psh1
1825+ 6C18 E5          >                push    hl
1825+ 6C19 DD E9       >                jp      (ix)
1826+ 6C1B
1827+ 6C1B              //  ______________________________________________________________________
1828+ 6C1B              //
1829+ 6C1B              // 2/           n1 -- n2
1830+ 6C1B              // halves the top of stack, sign is unchanged
1831+ 6C1B                              New_Def TWO_DIV, "2/", is_code, is_normal
1831+ 6C1B             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1831+ 6C1B             >
1831+ 6C1B             >                // dummy db directives used to calculate length of namec
1831+ 6C1B 32 2F       >                db      "2/"
1831+ 6C1D             >len_NFA         defl    $ - temp_NFA
1831+ 6C1D             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1831+ 6C1B             >
1831+ 6C1B 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1831+ 6C1C 32 2F       >                db      "2/"               // name string in 7-bit ascii, but
1831+ 6C1E             >                org     $-1                 // alter last byte of Name just above to set
1831+ 6C1D AF          >                db      {b $} | END_BIT     // msb as name end
1831+ 6C1E             >
1831+ 6C1E 0F 6C       >                dw      last_NFA            // Link to previous definition Name
1831+ 6C20             >TWO_DIV:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1831+ 6C20 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1831+ 6C20             >                else
1831+ 6C20 22 6C       >                dw      $ + 2   ; ok        // is pointed by CFA
1831+ 6C22             >                endif           ; ok        // for other definitions it "points" the correct handler
1831+ 6C22             >                // Use of "; ok" to suppress "warning[fwdref]"
1831+ 6C22             >
1831+ 6C22             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1832+ 6C22 E1                           pop     hl
1833+ 6C23 CB 2C                        sra     h
1834+ 6C25 CB 1D                        rr      l
1835+ 6C27
1836+ 6C27                              psh1
1836+ 6C27 E5          >                push    hl
1836+ 6C28 DD E9       >                jp      (ix)
1837+ 6C2A
1838+ 6C2A              //  ______________________________________________________________________
1839+ 6C2A              //
1840+ 6C2A              // lshift       n1 u -- n2
1841+ 6C2A              // bit left shift of u bits
1842+ 6C2A                              New_Def LSHIFT, "LSHIFT", is_code, is_normal
1842+ 6C2A             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1842+ 6C2A             >
1842+ 6C2A             >                // dummy db directives used to calculate length of namec
1842+ 6C2A 4C 53 48 49 >                db      "LSHIFT"
1842+ 6C2E 46 54       >
1842+ 6C30             >len_NFA         defl    $ - temp_NFA
1842+ 6C30             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1842+ 6C2A             >
1842+ 6C2A 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1842+ 6C2B 4C 53 48 49 >                db      "LSHIFT"               // name string in 7-bit ascii, but
1842+ 6C2F 46 54       >
1842+ 6C31             >                org     $-1                 // alter last byte of Name just above to set
1842+ 6C30 D4          >                db      {b $} | END_BIT     // msb as name end
1842+ 6C31             >
1842+ 6C31 1B 6C       >                dw      last_NFA            // Link to previous definition Name
1842+ 6C33             >LSHIFT:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1842+ 6C33 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1842+ 6C33             >                else
1842+ 6C33 35 6C       >                dw      $ + 2   ; ok        // is pointed by CFA
1842+ 6C35             >                endif           ; ok        // for other definitions it "points" the correct handler
1842+ 6C35             >                // Use of "; ok" to suppress "warning[fwdref]"
1842+ 6C35             >
1842+ 6C35             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1843+ 6C35 D1                           pop     de
1844+ 6C36
1845+ 6C36 E1                           pop     hl
1846+ 6C37 7B                           ld      a, e
1847+ 6C38 B7                           or      a
1848+ 6C39 28 04                        jr      z, Lshift_Zero
1849+ 6C3B              Lshift_Loop:
1850+ 6C3B 29                                   add     hl, hl
1851+ 6C3C 3D                                   dec     a
1852+ 6C3D 20 FC                            jr      nz, Lshift_Loop
1853+ 6C3F              Lshift_Zero:
1854+ 6C3F
1855+ 6C3F
1856+ 6C3F                              psh1
1856+ 6C3F E5          >                push    hl
1856+ 6C40 DD E9       >                jp      (ix)
1857+ 6C42
1858+ 6C42              //  ______________________________________________________________________
1859+ 6C42              //
1860+ 6C42              // rshift       n1 u -- n2
1861+ 6C42              // bit right shift of u bits
1862+ 6C42                              New_Def RSHIFT, "RSHIFT", is_code, is_normal
1862+ 6C42             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1862+ 6C42             >
1862+ 6C42             >                // dummy db directives used to calculate length of namec
1862+ 6C42 52 53 48 49 >                db      "RSHIFT"
1862+ 6C46 46 54       >
1862+ 6C48             >len_NFA         defl    $ - temp_NFA
1862+ 6C48             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1862+ 6C42             >
1862+ 6C42 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1862+ 6C43 52 53 48 49 >                db      "RSHIFT"               // name string in 7-bit ascii, but
1862+ 6C47 46 54       >
1862+ 6C49             >                org     $-1                 // alter last byte of Name just above to set
1862+ 6C48 D4          >                db      {b $} | END_BIT     // msb as name end
1862+ 6C49             >
1862+ 6C49 2A 6C       >                dw      last_NFA            // Link to previous definition Name
1862+ 6C4B             >RSHIFT:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1862+ 6C4B ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1862+ 6C4B             >                else
1862+ 6C4B 4D 6C       >                dw      $ + 2   ; ok        // is pointed by CFA
1862+ 6C4D             >                endif           ; ok        // for other definitions it "points" the correct handler
1862+ 6C4D             >                // Use of "; ok" to suppress "warning[fwdref]"
1862+ 6C4D             >
1862+ 6C4D             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1863+ 6C4D D1                           pop     de
1864+ 6C4E
1865+ 6C4E E1                           pop     hl
1866+ 6C4F 7B                           ld      a, e
1867+ 6C50 B7                           or      a
1868+ 6C51 28 07                        jr      z, Rshift_Zero
1869+ 6C53              Rshift_Loop:
1870+ 6C53 CB 3C                                srl     h
1871+ 6C55 CB 1D                                rr      l
1872+ 6C57 3D                                   dec     a
1873+ 6C58 20 F9                            jr      nz, Rshift_Loop
1874+ 6C5A              Rshift_Zero:
1875+ 6C5A
1876+ 6C5A
1877+ 6C5A                              psh1
1877+ 6C5A E5          >                push    hl
1877+ 6C5B DD E9       >                jp      (ix)
1878+ 6C5D
1879+ 6C5D              //  ______________________________________________________________________
1880+ 6C5D              //
1881+ 6C5D              // cells        n1 -- n2
1882+ 6C5D              // decrement by 2 top of stack
1883+ 6C5D                              New_Def CELLS, "CELLS", Two_Mul_Ptr, is_normal
1883+ 6C5D             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1883+ 6C5D             >
1883+ 6C5D             >                // dummy db directives used to calculate length of namec
1883+ 6C5D 43 45 4C 4C >                db      "CELLS"
1883+ 6C61 53          >
1883+ 6C62             >len_NFA         defl    $ - temp_NFA
1883+ 6C62             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1883+ 6C5D             >
1883+ 6C5D 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1883+ 6C5E 43 45 4C 4C >                db      "CELLS"               // name string in 7-bit ascii, but
1883+ 6C62 53          >
1883+ 6C63             >                org     $-1                 // alter last byte of Name just above to set
1883+ 6C62 D3          >                db      {b $} | END_BIT     // msb as name end
1883+ 6C63             >
1883+ 6C63 42 6C       >                dw      last_NFA            // Link to previous definition Name
1883+ 6C65             >CELLS:          if Two_Mul_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1883+ 6C65 16 6C       >                dw      Two_Mul_Ptr ; ok        // for primitive definitions  actual code
1883+ 6C67             >                else
1883+ 6C67 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
1883+ 6C67             >                endif           ; ok        // for other definitions it "points" the correct handler
1883+ 6C67             >                // Use of "; ok" to suppress "warning[fwdref]"
1883+ 6C67             >
1883+ 6C67             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1884+ 6C67
1885+ 6C67
1886+ 6C67              //  ______________________________________________________________________
1887+ 6C67
# file closed: C:\Zx\CSpect\Projects\vForth15_INDIRECT/source/L0.asm
 110  6C67                              include "L1.asm"
# file opened: C:\Zx\CSpect\Projects\vForth15_INDIRECT/source/L1.asm
   1+ 6C67              //  ______________________________________________________________________
   2+ 6C67              //
   3+ 6C67              //  L1.asm
   4+ 6C67              //
   5+ 6C67              //  Level-1 definitions and derivate
   6+ 6C67              //  ______________________________________________________________________
   7+ 6C67
   8+ 6C67              //  ______________________________________________________________________
   9+ 6C67              //
  10+ 6C67              // :            -- cccc     ( compile time )
  11+ 6C67              //              i*x -- j*x  ( run time )
  12+ 6C67              // Colon Definition
  13+ 6C67                              Colon_Def COLON, ":", is_immediate      // has forward-ref
  13+ 6C67             >                New_Def  COLON, ":", Enter_Ptr, is_immediate ; ok
  13+ 6C67             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  13+ 6C67             >
  13+ 6C67             >                // dummy db directives used to calculate length of namec
  13+ 6C67 3A          >                db      ":"
  13+ 6C68             >len_NFA         defl    $ - temp_NFA
  13+ 6C68             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  13+ 6C67             >
  13+ 6C67 C1          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
  13+ 6C68 3A          >                db      ":"               // name string in 7-bit ascii, but
  13+ 6C69             >                org     $-1                 // alter last byte of Name just above to set
  13+ 6C68 BA          >                db      {b $} | END_BIT     // msb as name end
  13+ 6C69             >
  13+ 6C69 5D 6C       >                dw      last_NFA            // Link to previous definition Name
  13+ 6C6B             >COLON:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
  13+ 6C6B 81 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
  13+ 6C6D             >                else
  13+ 6C6D ~           >                dw      $ + 2   ; ok        // is pointed by CFA
  13+ 6C6D             >                endif           ; ok        // for other definitions it "points" the correct handler
  13+ 6C6D             >                // Use of "; ok" to suppress "warning[fwdref]"
  13+ 6C6D             >
  13+ 6C6D             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  14+ 6C6D
  15+ 6C6D D4 70                        dw      QEXEC                   // ?exec
  16+ 6C6F 8F 70                        dw      STORE_CSP               // !csp
  17+ 6C71 3E 6E 96 6B                  dw      CURRENT, FETCH          // current @
  18+ 6C75 31 6E A3 6B                  dw      CONTEXT, STORE          // context !
  19+ 6C79 CE 76                        dw      CREATE                  // create  ( forward )
  20+ 6C7B 81 71                        dw      SMUDGE                  // dmudge
  21+ 6C7D 6C 71                        dw      SQUARED_CLOSE           // ]
  22+ 6C7F D7 71                        dw      C_SEMICOLON_CODE        // ;code ( change the 3-bytes CFA of defining word to call Enter_Ptr )
  23+ 6C81                                                              // ... immediate
  24+ 6C81              Enter_Ptr:
  25+ 6C81                              // via call coded in CFA
  26+ 6C81                              ldhlrp
  26+ 6C81 2A 96 63    >                ld      hl,(RP_Pointer)
  27+ 6C84 2B                           dec     hl                  // push on Return-Stack current Instruction-Pointer
  28+ 6C85 70                           ld      (hl), b
  29+ 6C86 2B                           dec     hl
  30+ 6C87 71                           ld      (hl), c
  31+ 6C88                              ldrphl
  31+ 6C88 22 96 63    >                ld      (RP_Pointer),hl
  32+ 6C8B 13                           inc     de
  33+ 6C8C 4B                           ld      c, e
  34+ 6C8D 42                           ld      b, d
  35+ 6C8E                              next
  35+ 6C8E DD E9       >                jp      (ix)
  36+ 6C90
  37+ 6C90              //  ______________________________________________________________________
  38+ 6C90              //
  39+ 6C90              // ;            --
  40+ 6C90              // Semicolon. End of Colon-Definition. Stack must be balanced.
  41+ 6C90                              Colon_Def SEMICOLON, ";", is_immediate   // has forward-ref
  41+ 6C90             >                New_Def  SEMICOLON, ";", Enter_Ptr, is_immediate ; ok
  41+ 6C90             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  41+ 6C90             >
  41+ 6C90             >                // dummy db directives used to calculate length of namec
  41+ 6C90 3B          >                db      ";"
  41+ 6C91             >len_NFA         defl    $ - temp_NFA
  41+ 6C91             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  41+ 6C90             >
  41+ 6C90 C1          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
  41+ 6C91 3B          >                db      ";"               // name string in 7-bit ascii, but
  41+ 6C92             >                org     $-1                 // alter last byte of Name just above to set
  41+ 6C91 BB          >                db      {b $} | END_BIT     // msb as name end
  41+ 6C92             >
  41+ 6C92 67 6C       >                dw      last_NFA            // Link to previous definition Name
  41+ 6C94             >SEMICOLON:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
  41+ 6C94 81 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
  41+ 6C96             >                else
  41+ 6C96 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
  41+ 6C96             >                endif           ; ok        // for other definitions it "points" the correct handler
  41+ 6C96             >                // Use of "; ok" to suppress "warning[fwdref]"
  41+ 6C96             >
  41+ 6C96             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  42+ 6C96
  43+ 6C96 FE 70                        dw      QCSP                    // ?csp
  44+ 6C98 35 71 9E 69                  dw      COMPILE, EXIT           // [compile] ;s
  45+ 6C9C 81 71                        dw      SMUDGE                  // smudge
  46+ 6C9E 5E 71                        dw      SQUARED_OPEN            // [
  47+ 6CA0 9E 69                        dw      EXIT                    // ; immediate
  48+ 6CA2
  49+ 6CA2              //  ______________________________________________________________________
  50+ 6CA2              //
  51+ 6CA2              // noop         --
  52+ 6CA2                              New_Def NOOP, "NOOP", is_code, is_normal
  52+ 6CA2             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  52+ 6CA2             >
  52+ 6CA2             >                // dummy db directives used to calculate length of namec
  52+ 6CA2 4E 4F 4F 50 >                db      "NOOP"
  52+ 6CA6             >len_NFA         defl    $ - temp_NFA
  52+ 6CA6             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  52+ 6CA2             >
  52+ 6CA2 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  52+ 6CA3 4E 4F 4F 50 >                db      "NOOP"               // name string in 7-bit ascii, but
  52+ 6CA7             >                org     $-1                 // alter last byte of Name just above to set
  52+ 6CA6 D0          >                db      {b $} | END_BIT     // msb as name end
  52+ 6CA7             >
  52+ 6CA7 90 6C       >                dw      last_NFA            // Link to previous definition Name
  52+ 6CA9             >NOOP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
  52+ 6CA9 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
  52+ 6CA9             >                else
  52+ 6CA9 AB 6C       >                dw      $ + 2   ; ok        // is pointed by CFA
  52+ 6CAB             >                endif           ; ok        // for other definitions it "points" the correct handler
  52+ 6CAB             >                // Use of "; ok" to suppress "warning[fwdref]"
  52+ 6CAB             >
  52+ 6CAB             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  53+ 6CAB                              next
  53+ 6CAB DD E9       >                jp      (ix)
  54+ 6CAD
  55+ 6CAD              //  ______________________________________________________________________
  56+ 6CAD              //
  57+ 6CAD              // constant     n -- cccc     ( compile time )
  58+ 6CAD              //              -- n          ( run time )
  59+ 6CAD              // Constant definition.
  60+ 6CAD                              Colon_Def CONSTANT, "CONSTANT", is_normal   // has forward-ref
  60+ 6CAD             >                New_Def  CONSTANT, "CONSTANT", Enter_Ptr, is_normal ; ok
  60+ 6CAD             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  60+ 6CAD             >
  60+ 6CAD             >                // dummy db directives used to calculate length of namec
  60+ 6CAD 43 4F 4E 53 >                db      "CONSTANT"
  60+ 6CB1 54 41 4E 54 >
  60+ 6CB5             >len_NFA         defl    $ - temp_NFA
  60+ 6CB5             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  60+ 6CAD             >
  60+ 6CAD 88          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  60+ 6CAE 43 4F 4E 53 >                db      "CONSTANT"               // name string in 7-bit ascii, but
  60+ 6CB2 54 41 4E 54 >
  60+ 6CB6             >                org     $-1                 // alter last byte of Name just above to set
  60+ 6CB5 D4          >                db      {b $} | END_BIT     // msb as name end
  60+ 6CB6             >
  60+ 6CB6 A2 6C       >                dw      last_NFA            // Link to previous definition Name
  60+ 6CB8             >CONSTANT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
  60+ 6CB8 81 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
  60+ 6CBA             >                else
  60+ 6CBA ~           >                dw      $ + 2   ; ok        // is pointed by CFA
  60+ 6CBA             >                endif           ; ok        // for other definitions it "points" the correct handler
  60+ 6CBA             >                // Use of "; ok" to suppress "warning[fwdref]"
  60+ 6CBA             >
  60+ 6CBA             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  61+ 6CBA
  62+ 6CBA CE 76                        dw      CREATE                  // create
  63+ 6CBC F9 6E                        dw      COMMA                   // ,    ( at PFA then, store the value )
  64+ 6CBE D7 71                        dw      C_SEMICOLON_CODE        // ;code (  changes the 3-bytes CFA to call Constant_Ptr )
  65+ 6CC0              Constant_Ptr:
  66+ 6CC0
  67+ 6CC0 13                           inc     de
  68+ 6CC1 EB                           ex      de, hl
  69+ 6CC2
  70+ 6CC2 5E                           ld      e, (hl)
  71+ 6CC3 23                           inc     hl
  72+ 6CC4 56                           ld      d, (hl)
  73+ 6CC5 D5                           push    de
  74+ 6CC6                              next
  74+ 6CC6 DD E9       >                jp      (ix)
  75+ 6CC8
  76+ 6CC8              //  ______________________________________________________________________
  77+ 6CC8              //
  78+ 6CC8              // variable     n -- cccc     ( compile time )
  79+ 6CC8              //              -- a          ( run time )
  80+ 6CC8              // Variable definition, n is the initial value.
  81+ 6CC8                              Colon_Def VARIABLE, "VARIABLE", is_normal   // has forward-ref
  81+ 6CC8             >                New_Def  VARIABLE, "VARIABLE", Enter_Ptr, is_normal ; ok
  81+ 6CC8             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  81+ 6CC8             >
  81+ 6CC8             >                // dummy db directives used to calculate length of namec
  81+ 6CC8 56 41 52 49 >                db      "VARIABLE"
  81+ 6CCC 41 42 4C 45 >
  81+ 6CD0             >len_NFA         defl    $ - temp_NFA
  81+ 6CD0             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  81+ 6CC8             >
  81+ 6CC8 88          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  81+ 6CC9 56 41 52 49 >                db      "VARIABLE"               // name string in 7-bit ascii, but
  81+ 6CCD 41 42 4C 45 >
  81+ 6CD1             >                org     $-1                 // alter last byte of Name just above to set
  81+ 6CD0 C5          >                db      {b $} | END_BIT     // msb as name end
  81+ 6CD1             >
  81+ 6CD1 AD 6C       >                dw      last_NFA            // Link to previous definition Name
  81+ 6CD3             >VARIABLE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
  81+ 6CD3 81 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
  81+ 6CD5             >                else
  81+ 6CD5 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
  81+ 6CD5             >                endif           ; ok        // for other definitions it "points" the correct handler
  81+ 6CD5             >                // Use of "; ok" to suppress "warning[fwdref]"
  81+ 6CD5             >
  81+ 6CD5             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  82+ 6CD5
  83+ 6CD5 FE 6C                        dw      ZERO
  84+ 6CD7 B8 6C                        dw      CONSTANT                // constant
  85+ 6CD9 D7 71                        dw      C_SEMICOLON_CODE        // ;code ( changes the 3-bytes CFA to call Variable_Ptr )
  86+ 6CDB              Variable_Ptr:
  87+ 6CDB
  88+ 6CDB 13                           inc     de
  89+ 6CDC D5                           push    de                  // balance TOS before overwrite it
  90+ 6CDD
  91+ 6CDD                              next
  91+ 6CDD DD E9       >                jp      (ix)
  92+ 6CDF
  93+ 6CDF              //  ______________________________________________________________________
  94+ 6CDF              //
  95+ 6CDF              // user         b -- cccc     ( compile time )
  96+ 6CDF              //              -- a          ( run time )
  97+ 6CDF              // User variable definition
  98+ 6CDF                              Colon_Def USER, "USER", is_normal
  98+ 6CDF             >                New_Def  USER, "USER", Enter_Ptr, is_normal ; ok
  98+ 6CDF             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  98+ 6CDF             >
  98+ 6CDF             >                // dummy db directives used to calculate length of namec
  98+ 6CDF 55 53 45 52 >                db      "USER"
  98+ 6CE3             >len_NFA         defl    $ - temp_NFA
  98+ 6CE3             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  98+ 6CDF             >
  98+ 6CDF 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  98+ 6CE0 55 53 45 52 >                db      "USER"               // name string in 7-bit ascii, but
  98+ 6CE4             >                org     $-1                 // alter last byte of Name just above to set
  98+ 6CE3 D2          >                db      {b $} | END_BIT     // msb as name end
  98+ 6CE4             >
  98+ 6CE4 C8 6C       >                dw      last_NFA            // Link to previous definition Name
  98+ 6CE6             >USER:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
  98+ 6CE6 81 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
  98+ 6CE8             >                else
  98+ 6CE8 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
  98+ 6CE8             >                endif           ; ok        // for other definitions it "points" the correct handler
  98+ 6CE8             >                // Use of "; ok" to suppress "warning[fwdref]"
  98+ 6CE8             >
  98+ 6CE8             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  99+ 6CE8
 100+ 6CE8 CE 76                        dw      CREATE                  // create
 101+ 6CEA 0A 6F                        dw      CCOMMA                  // c,
 102+ 6CEC D7 71                        dw      C_SEMICOLON_CODE        // ;code () changes the 3-bytes CFA to call User_Ptr )
 103+ 6CEE
 104+ 6CEE
 105+ 6CEE              User_Ptr:
 106+ 6CEE                              // via call coded in CFA
 107+ 6CEE 13                           inc     de
 108+ 6CEF EB                           ex      de, hl
 109+ 6CF0 5E                           ld      e, (hl)
 110+ 6CF1 16 00                        ld      d, 0
 111+ 6CF3 2A 94 63                     ld      hl, (USER_Pointer)
 112+ 6CF6 19                           add     hl, de
 113+ 6CF7
 114+ 6CF7                              psh1
 114+ 6CF7 E5          >                push    hl
 114+ 6CF8 DD E9       >                jp      (ix)
 115+ 6CFA
 116+ 6CFA              //  ______________________________________________________________________
 117+ 6CFA              //
 118+ 6CFA                              Constant_Def ZERO       ,   "0"     ,   0
 118+ 6CFA             >                New_Def  ZERO, "0", Constant_Ptr, is_normal
 118+ 6CFA             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 118+ 6CFA             >
 118+ 6CFA             >                // dummy db directives used to calculate length of namec
 118+ 6CFA 30          >                db      "0"
 118+ 6CFB             >len_NFA         defl    $ - temp_NFA
 118+ 6CFB             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 118+ 6CFA             >
 118+ 6CFA 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 118+ 6CFB 30          >                db      "0"               // name string in 7-bit ascii, but
 118+ 6CFC             >                org     $-1                 // alter last byte of Name just above to set
 118+ 6CFB B0          >                db      {b $} | END_BIT     // msb as name end
 118+ 6CFC             >
 118+ 6CFC DF 6C       >                dw      last_NFA            // Link to previous definition Name
 118+ 6CFE             >ZERO:          if Constant_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 118+ 6CFE C0 6C       >                dw      Constant_Ptr ; ok        // for primitive definitions  actual code
 118+ 6D00             >                else
 118+ 6D00 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 118+ 6D00             >                endif           ; ok        // for other definitions it "points" the correct handler
 118+ 6D00             >                // Use of "; ok" to suppress "warning[fwdref]"
 118+ 6D00             >
 118+ 6D00             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 118+ 6D00 00 00       >                dw      0
 119+ 6D02                              Constant_Def ONE        ,   "1"     ,   1
 119+ 6D02             >                New_Def  ONE, "1", Constant_Ptr, is_normal
 119+ 6D02             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 119+ 6D02             >
 119+ 6D02             >                // dummy db directives used to calculate length of namec
 119+ 6D02 31          >                db      "1"
 119+ 6D03             >len_NFA         defl    $ - temp_NFA
 119+ 6D03             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 119+ 6D02             >
 119+ 6D02 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 119+ 6D03 31          >                db      "1"               // name string in 7-bit ascii, but
 119+ 6D04             >                org     $-1                 // alter last byte of Name just above to set
 119+ 6D03 B1          >                db      {b $} | END_BIT     // msb as name end
 119+ 6D04             >
 119+ 6D04 FA 6C       >                dw      last_NFA            // Link to previous definition Name
 119+ 6D06             >ONE:          if Constant_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 119+ 6D06 C0 6C       >                dw      Constant_Ptr ; ok        // for primitive definitions  actual code
 119+ 6D08             >                else
 119+ 6D08 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 119+ 6D08             >                endif           ; ok        // for other definitions it "points" the correct handler
 119+ 6D08             >                // Use of "; ok" to suppress "warning[fwdref]"
 119+ 6D08             >
 119+ 6D08             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 119+ 6D08 01 00       >                dw      1
 120+ 6D0A                              Constant_Def TWO        ,   "2"     ,   2
 120+ 6D0A             >                New_Def  TWO, "2", Constant_Ptr, is_normal
 120+ 6D0A             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 120+ 6D0A             >
 120+ 6D0A             >                // dummy db directives used to calculate length of namec
 120+ 6D0A 32          >                db      "2"
 120+ 6D0B             >len_NFA         defl    $ - temp_NFA
 120+ 6D0B             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 120+ 6D0A             >
 120+ 6D0A 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 120+ 6D0B 32          >                db      "2"               // name string in 7-bit ascii, but
 120+ 6D0C             >                org     $-1                 // alter last byte of Name just above to set
 120+ 6D0B B2          >                db      {b $} | END_BIT     // msb as name end
 120+ 6D0C             >
 120+ 6D0C 02 6D       >                dw      last_NFA            // Link to previous definition Name
 120+ 6D0E             >TWO:          if Constant_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 120+ 6D0E C0 6C       >                dw      Constant_Ptr ; ok        // for primitive definitions  actual code
 120+ 6D10             >                else
 120+ 6D10 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 120+ 6D10             >                endif           ; ok        // for other definitions it "points" the correct handler
 120+ 6D10             >                // Use of "; ok" to suppress "warning[fwdref]"
 120+ 6D10             >
 120+ 6D10             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 120+ 6D10 02 00       >                dw      2
 121+ 6D12                              Constant_Def THREE      ,   "3"     ,   3
 121+ 6D12             >                New_Def  THREE, "3", Constant_Ptr, is_normal
 121+ 6D12             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 121+ 6D12             >
 121+ 6D12             >                // dummy db directives used to calculate length of namec
 121+ 6D12 33          >                db      "3"
 121+ 6D13             >len_NFA         defl    $ - temp_NFA
 121+ 6D13             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 121+ 6D12             >
 121+ 6D12 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 121+ 6D13 33          >                db      "3"               // name string in 7-bit ascii, but
 121+ 6D14             >                org     $-1                 // alter last byte of Name just above to set
 121+ 6D13 B3          >                db      {b $} | END_BIT     // msb as name end
 121+ 6D14             >
 121+ 6D14 0A 6D       >                dw      last_NFA            // Link to previous definition Name
 121+ 6D16             >THREE:          if Constant_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 121+ 6D16 C0 6C       >                dw      Constant_Ptr ; ok        // for primitive definitions  actual code
 121+ 6D18             >                else
 121+ 6D18 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 121+ 6D18             >                endif           ; ok        // for other definitions it "points" the correct handler
 121+ 6D18             >                // Use of "; ok" to suppress "warning[fwdref]"
 121+ 6D18             >
 121+ 6D18             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 121+ 6D18 03 00       >                dw      3
 122+ 6D1A                              Constant_Def NEG_ONE    ,   "-1"    ,  -1
 122+ 6D1A             >                New_Def  NEG_ONE, "-1", Constant_Ptr, is_normal
 122+ 6D1A             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 122+ 6D1A             >
 122+ 6D1A             >                // dummy db directives used to calculate length of namec
 122+ 6D1A 2D 31       >                db      "-1"
 122+ 6D1C             >len_NFA         defl    $ - temp_NFA
 122+ 6D1C             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 122+ 6D1A             >
 122+ 6D1A 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 122+ 6D1B 2D 31       >                db      "-1"               // name string in 7-bit ascii, but
 122+ 6D1D             >                org     $-1                 // alter last byte of Name just above to set
 122+ 6D1C B1          >                db      {b $} | END_BIT     // msb as name end
 122+ 6D1D             >
 122+ 6D1D 12 6D       >                dw      last_NFA            // Link to previous definition Name
 122+ 6D1F             >NEG_ONE:          if Constant_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 122+ 6D1F C0 6C       >                dw      Constant_Ptr ; ok        // for primitive definitions  actual code
 122+ 6D21             >                else
 122+ 6D21 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 122+ 6D21             >                endif           ; ok        // for other definitions it "points" the correct handler
 122+ 6D21             >                // Use of "; ok" to suppress "warning[fwdref]"
 122+ 6D21             >
 122+ 6D21             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 122+ 6D21 FF FF       >                dw      -1
 123+ 6D23                              Constant_Def BL         ,   "BL"    , $20
 123+ 6D23             >                New_Def  BL, "BL", Constant_Ptr, is_normal
 123+ 6D23             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 123+ 6D23             >
 123+ 6D23             >                // dummy db directives used to calculate length of namec
 123+ 6D23 42 4C       >                db      "BL"
 123+ 6D25             >len_NFA         defl    $ - temp_NFA
 123+ 6D25             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 123+ 6D23             >
 123+ 6D23 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 123+ 6D24 42 4C       >                db      "BL"               // name string in 7-bit ascii, but
 123+ 6D26             >                org     $-1                 // alter last byte of Name just above to set
 123+ 6D25 CC          >                db      {b $} | END_BIT     // msb as name end
 123+ 6D26             >
 123+ 6D26 1A 6D       >                dw      last_NFA            // Link to previous definition Name
 123+ 6D28             >BL:          if Constant_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 123+ 6D28 C0 6C       >                dw      Constant_Ptr ; ok        // for primitive definitions  actual code
 123+ 6D2A             >                else
 123+ 6D2A ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 123+ 6D2A             >                endif           ; ok        // for other definitions it "points" the correct handler
 123+ 6D2A             >                // Use of "; ok" to suppress "warning[fwdref]"
 123+ 6D2A             >
 123+ 6D2A             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 123+ 6D2A 20 00       >                dw      $20
 124+ 6D2C                              Constant_Def CL         ,   "C/L"   ,  64
 124+ 6D2C             >                New_Def  CL, "C/L", Constant_Ptr, is_normal
 124+ 6D2C             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 124+ 6D2C             >
 124+ 6D2C             >                // dummy db directives used to calculate length of namec
 124+ 6D2C 43 2F 4C    >                db      "C/L"
 124+ 6D2F             >len_NFA         defl    $ - temp_NFA
 124+ 6D2F             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 124+ 6D2C             >
 124+ 6D2C 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 124+ 6D2D 43 2F 4C    >                db      "C/L"               // name string in 7-bit ascii, but
 124+ 6D30             >                org     $-1                 // alter last byte of Name just above to set
 124+ 6D2F CC          >                db      {b $} | END_BIT     // msb as name end
 124+ 6D30             >
 124+ 6D30 23 6D       >                dw      last_NFA            // Link to previous definition Name
 124+ 6D32             >CL:          if Constant_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 124+ 6D32 C0 6C       >                dw      Constant_Ptr ; ok        // for primitive definitions  actual code
 124+ 6D34             >                else
 124+ 6D34 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 124+ 6D34             >                endif           ; ok        // for other definitions it "points" the correct handler
 124+ 6D34             >                // Use of "; ok" to suppress "warning[fwdref]"
 124+ 6D34             >
 124+ 6D34             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 124+ 6D34 40 00       >                dw      64
 125+ 6D36                              Constant_Def BBUF       ,   "B/BUF" , 512
 125+ 6D36             >                New_Def  BBUF, "B/BUF", Constant_Ptr, is_normal
 125+ 6D36             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 125+ 6D36             >
 125+ 6D36             >                // dummy db directives used to calculate length of namec
 125+ 6D36 42 2F 42 55 >                db      "B/BUF"
 125+ 6D3A 46          >
 125+ 6D3B             >len_NFA         defl    $ - temp_NFA
 125+ 6D3B             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 125+ 6D36             >
 125+ 6D36 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 125+ 6D37 42 2F 42 55 >                db      "B/BUF"               // name string in 7-bit ascii, but
 125+ 6D3B 46          >
 125+ 6D3C             >                org     $-1                 // alter last byte of Name just above to set
 125+ 6D3B C6          >                db      {b $} | END_BIT     // msb as name end
 125+ 6D3C             >
 125+ 6D3C 2C 6D       >                dw      last_NFA            // Link to previous definition Name
 125+ 6D3E             >BBUF:          if Constant_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 125+ 6D3E C0 6C       >                dw      Constant_Ptr ; ok        // for primitive definitions  actual code
 125+ 6D40             >                else
 125+ 6D40 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 125+ 6D40             >                endif           ; ok        // for other definitions it "points" the correct handler
 125+ 6D40             >                // Use of "; ok" to suppress "warning[fwdref]"
 125+ 6D40             >
 125+ 6D40             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 125+ 6D40 00 02       >                dw      512
 126+ 6D42                              Constant_Def BSCR       ,   "B/SCR" ,   2
 126+ 6D42             >                New_Def  BSCR, "B/SCR", Constant_Ptr, is_normal
 126+ 6D42             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 126+ 6D42             >
 126+ 6D42             >                // dummy db directives used to calculate length of namec
 126+ 6D42 42 2F 53 43 >                db      "B/SCR"
 126+ 6D46 52          >
 126+ 6D47             >len_NFA         defl    $ - temp_NFA
 126+ 6D47             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 126+ 6D42             >
 126+ 6D42 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 126+ 6D43 42 2F 53 43 >                db      "B/SCR"               // name string in 7-bit ascii, but
 126+ 6D47 52          >
 126+ 6D48             >                org     $-1                 // alter last byte of Name just above to set
 126+ 6D47 D2          >                db      {b $} | END_BIT     // msb as name end
 126+ 6D48             >
 126+ 6D48 36 6D       >                dw      last_NFA            // Link to previous definition Name
 126+ 6D4A             >BSCR:          if Constant_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 126+ 6D4A C0 6C       >                dw      Constant_Ptr ; ok        // for primitive definitions  actual code
 126+ 6D4C             >                else
 126+ 6D4C ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 126+ 6D4C             >                endif           ; ok        // for other definitions it "points" the correct handler
 126+ 6D4C             >                // Use of "; ok" to suppress "warning[fwdref]"
 126+ 6D4C             >
 126+ 6D4C             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 126+ 6D4C 02 00       >                dw      2
 127+ 6D4E                              Constant_Def LSCR       ,   "L/SCR" ,  16
 127+ 6D4E             >                New_Def  LSCR, "L/SCR", Constant_Ptr, is_normal
 127+ 6D4E             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 127+ 6D4E             >
 127+ 6D4E             >                // dummy db directives used to calculate length of namec
 127+ 6D4E 4C 2F 53 43 >                db      "L/SCR"
 127+ 6D52 52          >
 127+ 6D53             >len_NFA         defl    $ - temp_NFA
 127+ 6D53             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 127+ 6D4E             >
 127+ 6D4E 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 127+ 6D4F 4C 2F 53 43 >                db      "L/SCR"               // name string in 7-bit ascii, but
 127+ 6D53 52          >
 127+ 6D54             >                org     $-1                 // alter last byte of Name just above to set
 127+ 6D53 D2          >                db      {b $} | END_BIT     // msb as name end
 127+ 6D54             >
 127+ 6D54 42 6D       >                dw      last_NFA            // Link to previous definition Name
 127+ 6D56             >LSCR:          if Constant_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 127+ 6D56 C0 6C       >                dw      Constant_Ptr ; ok        // for primitive definitions  actual code
 127+ 6D58             >                else
 127+ 6D58 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 127+ 6D58             >                endif           ; ok        // for other definitions it "points" the correct handler
 127+ 6D58             >                // Use of "; ok" to suppress "warning[fwdref]"
 127+ 6D58             >
 127+ 6D58             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 127+ 6D58 10 00       >                dw      16
 128+ 6D5A
 129+ 6D5A              //  ______________________________________________________________________
 130+ 6D5A              //
 131+ 6D5A              // +origin         --
 132+ 6D5A              //              Colon_Def PLUS_ORIGIN, "+ORIGIN", is_normal
 133+ 6D5A              //              dw      LIT, Cold_origin        // [ hex 6366 ] literal
 134+ 6D5A              //              dw      PLUS                    // +
 135+ 6D5A              //              dw      EXIT                    // ;
 136+ 6D5A                              New_Def PLUS_ORIGIN, "+ORIGIN", is_code, is_normal
 136+ 6D5A             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 136+ 6D5A             >
 136+ 6D5A             >                // dummy db directives used to calculate length of namec
 136+ 6D5A 2B 4F 52 49 >                db      "+ORIGIN"
 136+ 6D5E 47 49 4E    >
 136+ 6D61             >len_NFA         defl    $ - temp_NFA
 136+ 6D61             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 136+ 6D5A             >
 136+ 6D5A 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 136+ 6D5B 2B 4F 52 49 >                db      "+ORIGIN"               // name string in 7-bit ascii, but
 136+ 6D5F 47 49 4E    >
 136+ 6D62             >                org     $-1                 // alter last byte of Name just above to set
 136+ 6D61 CE          >                db      {b $} | END_BIT     // msb as name end
 136+ 6D62             >
 136+ 6D62 4E 6D       >                dw      last_NFA            // Link to previous definition Name
 136+ 6D64             >PLUS_ORIGIN:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 136+ 6D64 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
 136+ 6D64             >                else
 136+ 6D64 66 6D       >                dw      $ + 2   ; ok        // is pointed by CFA
 136+ 6D66             >                endif           ; ok        // for other definitions it "points" the correct handler
 136+ 6D66             >                // Use of "; ok" to suppress "warning[fwdref]"
 136+ 6D66             >
 136+ 6D66             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 137+ 6D66 E1                           pop     hl
 138+ 6D67 11 66 63                     ld      de,  Cold_origin
 139+ 6D6A 19                           add     hl, de
 140+ 6D6B E5                           push    hl
 141+ 6D6C                              next
 141+ 6D6C DD E9       >                jp      (ix)
 142+ 6D6E
 143+ 6D6E
 144+ 6D6E              //  ______________________________________________________________________
 145+ 6D6E              //
 146+ 6D6E                              Constant_Def CNEXT      ,   "(NEXT)", Next_Ptr
 146+ 6D6E             >                New_Def  CNEXT, "(NEXT)", Constant_Ptr, is_normal
 146+ 6D6E             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 146+ 6D6E             >
 146+ 6D6E             >                // dummy db directives used to calculate length of namec
 146+ 6D6E 28 4E 45 58 >                db      "(NEXT)"
 146+ 6D72 54 29       >
 146+ 6D74             >len_NFA         defl    $ - temp_NFA
 146+ 6D74             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 146+ 6D6E             >
 146+ 6D6E 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 146+ 6D6F 28 4E 45 58 >                db      "(NEXT)"               // name string in 7-bit ascii, but
 146+ 6D73 54 29       >
 146+ 6D75             >                org     $-1                 // alter last byte of Name just above to set
 146+ 6D74 A9          >                db      {b $} | END_BIT     // msb as name end
 146+ 6D75             >
 146+ 6D75 5A 6D       >                dw      last_NFA            // Link to previous definition Name
 146+ 6D77             >CNEXT:          if Constant_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 146+ 6D77 C0 6C       >                dw      Constant_Ptr ; ok        // for primitive definitions  actual code
 146+ 6D79             >                else
 146+ 6D79 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 146+ 6D79             >                endif           ; ok        // for other definitions it "points" the correct handler
 146+ 6D79             >                // Use of "; ok" to suppress "warning[fwdref]"
 146+ 6D79             >
 146+ 6D79             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 146+ 6D79 98 63       >                dw      Next_Ptr
 147+ 6D7B
 148+ 6D7B              //  ______________________________________________________________________
 149+ 6D7B              //
 150+ 6D7B
 151+ 6D7B                              User_Def S0         , "S0"        , 06 // starting value of Stack-Pointer
 151+ 6D7B             >                New_Def  S0, "S0", User_Ptr, is_normal
 151+ 6D7B             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 151+ 6D7B             >
 151+ 6D7B             >                // dummy db directives used to calculate length of namec
 151+ 6D7B 53 30       >                db      "S0"
 151+ 6D7D             >len_NFA         defl    $ - temp_NFA
 151+ 6D7D             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 151+ 6D7B             >
 151+ 6D7B 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 151+ 6D7C 53 30       >                db      "S0"               // name string in 7-bit ascii, but
 151+ 6D7E             >                org     $-1                 // alter last byte of Name just above to set
 151+ 6D7D B0          >                db      {b $} | END_BIT     // msb as name end
 151+ 6D7E             >
 151+ 6D7E 6E 6D       >                dw      last_NFA            // Link to previous definition Name
 151+ 6D80             >S0:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 151+ 6D80 EE 6C       >                dw      User_Ptr ; ok        // for primitive definitions  actual code
 151+ 6D82             >                else
 151+ 6D82 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 151+ 6D82             >                endif           ; ok        // for other definitions it "points" the correct handler
 151+ 6D82             >                // Use of "; ok" to suppress "warning[fwdref]"
 151+ 6D82             >
 151+ 6D82             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 151+ 6D82 06          >                db      06
 152+ 6D83                              User_Def R0         , "R0"        , 08 // starting value of Return-Pointer
 152+ 6D83             >                New_Def  R0, "R0", User_Ptr, is_normal
 152+ 6D83             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 152+ 6D83             >
 152+ 6D83             >                // dummy db directives used to calculate length of namec
 152+ 6D83 52 30       >                db      "R0"
 152+ 6D85             >len_NFA         defl    $ - temp_NFA
 152+ 6D85             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 152+ 6D83             >
 152+ 6D83 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 152+ 6D84 52 30       >                db      "R0"               // name string in 7-bit ascii, but
 152+ 6D86             >                org     $-1                 // alter last byte of Name just above to set
 152+ 6D85 B0          >                db      {b $} | END_BIT     // msb as name end
 152+ 6D86             >
 152+ 6D86 7B 6D       >                dw      last_NFA            // Link to previous definition Name
 152+ 6D88             >R0:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 152+ 6D88 EE 6C       >                dw      User_Ptr ; ok        // for primitive definitions  actual code
 152+ 6D8A             >                else
 152+ 6D8A ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 152+ 6D8A             >                endif           ; ok        // for other definitions it "points" the correct handler
 152+ 6D8A             >                // Use of "; ok" to suppress "warning[fwdref]"
 152+ 6D8A             >
 152+ 6D8A             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 152+ 6D8A 08          >                db      08
 153+ 6D8B                              User_Def TIB        , "TIB"       , 10 // input terminal buffer address
 153+ 6D8B             >                New_Def  TIB, "TIB", User_Ptr, is_normal
 153+ 6D8B             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 153+ 6D8B             >
 153+ 6D8B             >                // dummy db directives used to calculate length of namec
 153+ 6D8B 54 49 42    >                db      "TIB"
 153+ 6D8E             >len_NFA         defl    $ - temp_NFA
 153+ 6D8E             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 153+ 6D8B             >
 153+ 6D8B 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 153+ 6D8C 54 49 42    >                db      "TIB"               // name string in 7-bit ascii, but
 153+ 6D8F             >                org     $-1                 // alter last byte of Name just above to set
 153+ 6D8E C2          >                db      {b $} | END_BIT     // msb as name end
 153+ 6D8F             >
 153+ 6D8F 83 6D       >                dw      last_NFA            // Link to previous definition Name
 153+ 6D91             >TIB:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 153+ 6D91 EE 6C       >                dw      User_Ptr ; ok        // for primitive definitions  actual code
 153+ 6D93             >                else
 153+ 6D93 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 153+ 6D93             >                endif           ; ok        // for other definitions it "points" the correct handler
 153+ 6D93             >                // Use of "; ok" to suppress "warning[fwdref]"
 153+ 6D93             >
 153+ 6D93             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 153+ 6D93 0A          >                db      10
 154+ 6D94                              User_Def WIDTH      , "WIDTH"     , 12 // maximum number of characters for a word name
 154+ 6D94             >                New_Def  WIDTH, "WIDTH", User_Ptr, is_normal
 154+ 6D94             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 154+ 6D94             >
 154+ 6D94             >                // dummy db directives used to calculate length of namec
 154+ 6D94 57 49 44 54 >                db      "WIDTH"
 154+ 6D98 48          >
 154+ 6D99             >len_NFA         defl    $ - temp_NFA
 154+ 6D99             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 154+ 6D94             >
 154+ 6D94 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 154+ 6D95 57 49 44 54 >                db      "WIDTH"               // name string in 7-bit ascii, but
 154+ 6D99 48          >
 154+ 6D9A             >                org     $-1                 // alter last byte of Name just above to set
 154+ 6D99 C8          >                db      {b $} | END_BIT     // msb as name end
 154+ 6D9A             >
 154+ 6D9A 8B 6D       >                dw      last_NFA            // Link to previous definition Name
 154+ 6D9C             >WIDTH:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 154+ 6D9C EE 6C       >                dw      User_Ptr ; ok        // for primitive definitions  actual code
 154+ 6D9E             >                else
 154+ 6D9E ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 154+ 6D9E             >                endif           ; ok        // for other definitions it "points" the correct handler
 154+ 6D9E             >                // Use of "; ok" to suppress "warning[fwdref]"
 154+ 6D9E             >
 154+ 6D9E             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 154+ 6D9E 0C          >                db      12
 155+ 6D9F                              User_Def WARNING    , "WARNING"   , 14 // error reporting method: 0 base, 1 verbose
 155+ 6D9F             >                New_Def  WARNING, "WARNING", User_Ptr, is_normal
 155+ 6D9F             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 155+ 6D9F             >
 155+ 6D9F             >                // dummy db directives used to calculate length of namec
 155+ 6D9F 57 41 52 4E >                db      "WARNING"
 155+ 6DA3 49 4E 47    >
 155+ 6DA6             >len_NFA         defl    $ - temp_NFA
 155+ 6DA6             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 155+ 6D9F             >
 155+ 6D9F 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 155+ 6DA0 57 41 52 4E >                db      "WARNING"               // name string in 7-bit ascii, but
 155+ 6DA4 49 4E 47    >
 155+ 6DA7             >                org     $-1                 // alter last byte of Name just above to set
 155+ 6DA6 C7          >                db      {b $} | END_BIT     // msb as name end
 155+ 6DA7             >
 155+ 6DA7 94 6D       >                dw      last_NFA            // Link to previous definition Name
 155+ 6DA9             >WARNING:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 155+ 6DA9 EE 6C       >                dw      User_Ptr ; ok        // for primitive definitions  actual code
 155+ 6DAB             >                else
 155+ 6DAB ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 155+ 6DAB             >                endif           ; ok        // for other definitions it "points" the correct handler
 155+ 6DAB             >                // Use of "; ok" to suppress "warning[fwdref]"
 155+ 6DAB             >
 155+ 6DAB             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 155+ 6DAB 0E          >                db      14
 156+ 6DAC                              User_Def FENCE      , "FENCE"     , 16 // minimum address where FORGET can work
 156+ 6DAC             >                New_Def  FENCE, "FENCE", User_Ptr, is_normal
 156+ 6DAC             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 156+ 6DAC             >
 156+ 6DAC             >                // dummy db directives used to calculate length of namec
 156+ 6DAC 46 45 4E 43 >                db      "FENCE"
 156+ 6DB0 45          >
 156+ 6DB1             >len_NFA         defl    $ - temp_NFA
 156+ 6DB1             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 156+ 6DAC             >
 156+ 6DAC 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 156+ 6DAD 46 45 4E 43 >                db      "FENCE"               // name string in 7-bit ascii, but
 156+ 6DB1 45          >
 156+ 6DB2             >                org     $-1                 // alter last byte of Name just above to set
 156+ 6DB1 C5          >                db      {b $} | END_BIT     // msb as name end
 156+ 6DB2             >
 156+ 6DB2 9F 6D       >                dw      last_NFA            // Link to previous definition Name
 156+ 6DB4             >FENCE:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 156+ 6DB4 EE 6C       >                dw      User_Ptr ; ok        // for primitive definitions  actual code
 156+ 6DB6             >                else
 156+ 6DB6 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 156+ 6DB6             >                endif           ; ok        // for other definitions it "points" the correct handler
 156+ 6DB6             >                // Use of "; ok" to suppress "warning[fwdref]"
 156+ 6DB6             >
 156+ 6DB6             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 156+ 6DB6 10          >                db      16
 157+ 6DB7                              User_Def DP         , "DP"        , 18 // Dictionary Pointer
 157+ 6DB7             >                New_Def  DP, "DP", User_Ptr, is_normal
 157+ 6DB7             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 157+ 6DB7             >
 157+ 6DB7             >                // dummy db directives used to calculate length of namec
 157+ 6DB7 44 50       >                db      "DP"
 157+ 6DB9             >len_NFA         defl    $ - temp_NFA
 157+ 6DB9             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 157+ 6DB7             >
 157+ 6DB7 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 157+ 6DB8 44 50       >                db      "DP"               // name string in 7-bit ascii, but
 157+ 6DBA             >                org     $-1                 // alter last byte of Name just above to set
 157+ 6DB9 D0          >                db      {b $} | END_BIT     // msb as name end
 157+ 6DBA             >
 157+ 6DBA AC 6D       >                dw      last_NFA            // Link to previous definition Name
 157+ 6DBC             >DP:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 157+ 6DBC EE 6C       >                dw      User_Ptr ; ok        // for primitive definitions  actual code
 157+ 6DBE             >                else
 157+ 6DBE ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 157+ 6DBE             >                endif           ; ok        // for other definitions it "points" the correct handler
 157+ 6DBE             >                // Use of "; ok" to suppress "warning[fwdref]"
 157+ 6DBE             >
 157+ 6DBE             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 157+ 6DBE 12          >                db      18
 158+ 6DBF                              User_Def VOC_LINK   , "VOC-LINK"  , 20 // pointer to the latest vocabulary
 158+ 6DBF             >                New_Def  VOC_LINK, "VOC-LINK", User_Ptr, is_normal
 158+ 6DBF             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 158+ 6DBF             >
 158+ 6DBF             >                // dummy db directives used to calculate length of namec
 158+ 6DBF 56 4F 43 2D >                db      "VOC-LINK"
 158+ 6DC3 4C 49 4E 4B >
 158+ 6DC7             >len_NFA         defl    $ - temp_NFA
 158+ 6DC7             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 158+ 6DBF             >
 158+ 6DBF 88          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 158+ 6DC0 56 4F 43 2D >                db      "VOC-LINK"               // name string in 7-bit ascii, but
 158+ 6DC4 4C 49 4E 4B >
 158+ 6DC8             >                org     $-1                 // alter last byte of Name just above to set
 158+ 6DC7 CB          >                db      {b $} | END_BIT     // msb as name end
 158+ 6DC8             >
 158+ 6DC8 B7 6D       >                dw      last_NFA            // Link to previous definition Name
 158+ 6DCA             >VOC_LINK:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 158+ 6DCA EE 6C       >                dw      User_Ptr ; ok        // for primitive definitions  actual code
 158+ 6DCC             >                else
 158+ 6DCC ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 158+ 6DCC             >                endif           ; ok        // for other definitions it "points" the correct handler
 158+ 6DCC             >                // Use of "; ok" to suppress "warning[fwdref]"
 158+ 6DCC             >
 158+ 6DCC             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 158+ 6DCC 14          >                db      20
 159+ 6DCD                              User_Def FIRST      , "FIRST"     , 22 // address of first buffer
 159+ 6DCD             >                New_Def  FIRST, "FIRST", User_Ptr, is_normal
 159+ 6DCD             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 159+ 6DCD             >
 159+ 6DCD             >                // dummy db directives used to calculate length of namec
 159+ 6DCD 46 49 52 53 >                db      "FIRST"
 159+ 6DD1 54          >
 159+ 6DD2             >len_NFA         defl    $ - temp_NFA
 159+ 6DD2             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 159+ 6DCD             >
 159+ 6DCD 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 159+ 6DCE 46 49 52 53 >                db      "FIRST"               // name string in 7-bit ascii, but
 159+ 6DD2 54          >
 159+ 6DD3             >                org     $-1                 // alter last byte of Name just above to set
 159+ 6DD2 D4          >                db      {b $} | END_BIT     // msb as name end
 159+ 6DD3             >
 159+ 6DD3 BF 6D       >                dw      last_NFA            // Link to previous definition Name
 159+ 6DD5             >FIRST:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 159+ 6DD5 EE 6C       >                dw      User_Ptr ; ok        // for primitive definitions  actual code
 159+ 6DD7             >                else
 159+ 6DD7 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 159+ 6DD7             >                endif           ; ok        // for other definitions it "points" the correct handler
 159+ 6DD7             >                // Use of "; ok" to suppress "warning[fwdref]"
 159+ 6DD7             >
 159+ 6DD7             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 159+ 6DD7 16          >                db      22
 160+ 6DD8                              User_Def LIMIT      , "LIMIT"     , 24 // address of last buffer
 160+ 6DD8             >                New_Def  LIMIT, "LIMIT", User_Ptr, is_normal
 160+ 6DD8             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 160+ 6DD8             >
 160+ 6DD8             >                // dummy db directives used to calculate length of namec
 160+ 6DD8 4C 49 4D 49 >                db      "LIMIT"
 160+ 6DDC 54          >
 160+ 6DDD             >len_NFA         defl    $ - temp_NFA
 160+ 6DDD             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 160+ 6DD8             >
 160+ 6DD8 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 160+ 6DD9 4C 49 4D 49 >                db      "LIMIT"               // name string in 7-bit ascii, but
 160+ 6DDD 54          >
 160+ 6DDE             >                org     $-1                 // alter last byte of Name just above to set
 160+ 6DDD D4          >                db      {b $} | END_BIT     // msb as name end
 160+ 6DDE             >
 160+ 6DDE CD 6D       >                dw      last_NFA            // Link to previous definition Name
 160+ 6DE0             >LIMIT:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 160+ 6DE0 EE 6C       >                dw      User_Ptr ; ok        // for primitive definitions  actual code
 160+ 6DE2             >                else
 160+ 6DE2 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 160+ 6DE2             >                endif           ; ok        // for other definitions it "points" the correct handler
 160+ 6DE2             >                // Use of "; ok" to suppress "warning[fwdref]"
 160+ 6DE2             >
 160+ 6DE2             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 160+ 6DE2 18          >                db      24
 161+ 6DE3                              User_Def EXP        , "EXP"       , 26 // keeps the exponent in number conversion
 161+ 6DE3             >                New_Def  EXP, "EXP", User_Ptr, is_normal
 161+ 6DE3             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 161+ 6DE3             >
 161+ 6DE3             >                // dummy db directives used to calculate length of namec
 161+ 6DE3 45 58 50    >                db      "EXP"
 161+ 6DE6             >len_NFA         defl    $ - temp_NFA
 161+ 6DE6             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 161+ 6DE3             >
 161+ 6DE3 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 161+ 6DE4 45 58 50    >                db      "EXP"               // name string in 7-bit ascii, but
 161+ 6DE7             >                org     $-1                 // alter last byte of Name just above to set
 161+ 6DE6 D0          >                db      {b $} | END_BIT     // msb as name end
 161+ 6DE7             >
 161+ 6DE7 D8 6D       >                dw      last_NFA            // Link to previous definition Name
 161+ 6DE9             >EXP:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 161+ 6DE9 EE 6C       >                dw      User_Ptr ; ok        // for primitive definitions  actual code
 161+ 6DEB             >                else
 161+ 6DEB ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 161+ 6DEB             >                endif           ; ok        // for other definitions it "points" the correct handler
 161+ 6DEB             >                // Use of "; ok" to suppress "warning[fwdref]"
 161+ 6DEB             >
 161+ 6DEB             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 161+ 6DEB 1A          >                db      26
 162+ 6DEC                              User_Def NMODE      , "NMODE"     , 28 // number mode: 0 integer, 1 floating point
 162+ 6DEC             >                New_Def  NMODE, "NMODE", User_Ptr, is_normal
 162+ 6DEC             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 162+ 6DEC             >
 162+ 6DEC             >                // dummy db directives used to calculate length of namec
 162+ 6DEC 4E 4D 4F 44 >                db      "NMODE"
 162+ 6DF0 45          >
 162+ 6DF1             >len_NFA         defl    $ - temp_NFA
 162+ 6DF1             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 162+ 6DEC             >
 162+ 6DEC 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 162+ 6DED 4E 4D 4F 44 >                db      "NMODE"               // name string in 7-bit ascii, but
 162+ 6DF1 45          >
 162+ 6DF2             >                org     $-1                 // alter last byte of Name just above to set
 162+ 6DF1 C5          >                db      {b $} | END_BIT     // msb as name end
 162+ 6DF2             >
 162+ 6DF2 E3 6D       >                dw      last_NFA            // Link to previous definition Name
 162+ 6DF4             >NMODE:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 162+ 6DF4 EE 6C       >                dw      User_Ptr ; ok        // for primitive definitions  actual code
 162+ 6DF6             >                else
 162+ 6DF6 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 162+ 6DF6             >                endif           ; ok        // for other definitions it "points" the correct handler
 162+ 6DF6             >                // Use of "; ok" to suppress "warning[fwdref]"
 162+ 6DF6             >
 162+ 6DF6             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 162+ 6DF6 1C          >                db      28
 163+ 6DF7                              User_Def BLK        , "BLK"       , 30 // block number to be interpreted. 0 for terminal
 163+ 6DF7             >                New_Def  BLK, "BLK", User_Ptr, is_normal
 163+ 6DF7             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 163+ 6DF7             >
 163+ 6DF7             >                // dummy db directives used to calculate length of namec
 163+ 6DF7 42 4C 4B    >                db      "BLK"
 163+ 6DFA             >len_NFA         defl    $ - temp_NFA
 163+ 6DFA             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 163+ 6DF7             >
 163+ 6DF7 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 163+ 6DF8 42 4C 4B    >                db      "BLK"               // name string in 7-bit ascii, but
 163+ 6DFB             >                org     $-1                 // alter last byte of Name just above to set
 163+ 6DFA CB          >                db      {b $} | END_BIT     // msb as name end
 163+ 6DFB             >
 163+ 6DFB EC 6D       >                dw      last_NFA            // Link to previous definition Name
 163+ 6DFD             >BLK:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 163+ 6DFD EE 6C       >                dw      User_Ptr ; ok        // for primitive definitions  actual code
 163+ 6DFF             >                else
 163+ 6DFF ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 163+ 6DFF             >                endif           ; ok        // for other definitions it "points" the correct handler
 163+ 6DFF             >                // Use of "; ok" to suppress "warning[fwdref]"
 163+ 6DFF             >
 163+ 6DFF             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 163+ 6DFF 1E          >                db      30
 164+ 6E00                              User_Def TO_IN      , ">IN"       , 32 // incremented when consuming input buffer
 164+ 6E00             >                New_Def  TO_IN, ">IN", User_Ptr, is_normal
 164+ 6E00             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 164+ 6E00             >
 164+ 6E00             >                // dummy db directives used to calculate length of namec
 164+ 6E00 3E 49 4E    >                db      ">IN"
 164+ 6E03             >len_NFA         defl    $ - temp_NFA
 164+ 6E03             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 164+ 6E00             >
 164+ 6E00 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 164+ 6E01 3E 49 4E    >                db      ">IN"               // name string in 7-bit ascii, but
 164+ 6E04             >                org     $-1                 // alter last byte of Name just above to set
 164+ 6E03 CE          >                db      {b $} | END_BIT     // msb as name end
 164+ 6E04             >
 164+ 6E04 F7 6D       >                dw      last_NFA            // Link to previous definition Name
 164+ 6E06             >TO_IN:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 164+ 6E06 EE 6C       >                dw      User_Ptr ; ok        // for primitive definitions  actual code
 164+ 6E08             >                else
 164+ 6E08 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 164+ 6E08             >                endif           ; ok        // for other definitions it "points" the correct handler
 164+ 6E08             >                // Use of "; ok" to suppress "warning[fwdref]"
 164+ 6E08             >
 164+ 6E08             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 164+ 6E08 20          >                db      32
 165+ 6E09                              User_Def OUT        , "OUT"       , 34 // incremented when sending to output
 165+ 6E09             >                New_Def  OUT, "OUT", User_Ptr, is_normal
 165+ 6E09             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 165+ 6E09             >
 165+ 6E09             >                // dummy db directives used to calculate length of namec
 165+ 6E09 4F 55 54    >                db      "OUT"
 165+ 6E0C             >len_NFA         defl    $ - temp_NFA
 165+ 6E0C             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 165+ 6E09             >
 165+ 6E09 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 165+ 6E0A 4F 55 54    >                db      "OUT"               // name string in 7-bit ascii, but
 165+ 6E0D             >                org     $-1                 // alter last byte of Name just above to set
 165+ 6E0C D4          >                db      {b $} | END_BIT     // msb as name end
 165+ 6E0D             >
 165+ 6E0D 00 6E       >                dw      last_NFA            // Link to previous definition Name
 165+ 6E0F             >OUT:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 165+ 6E0F EE 6C       >                dw      User_Ptr ; ok        // for primitive definitions  actual code
 165+ 6E11             >                else
 165+ 6E11 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 165+ 6E11             >                endif           ; ok        // for other definitions it "points" the correct handler
 165+ 6E11             >                // Use of "; ok" to suppress "warning[fwdref]"
 165+ 6E11             >
 165+ 6E11             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 165+ 6E11 22          >                db      34
 166+ 6E12                              User_Def SCR        , "SCR"       , 36 // latest screen retreieved by LIST
 166+ 6E12             >                New_Def  SCR, "SCR", User_Ptr, is_normal
 166+ 6E12             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 166+ 6E12             >
 166+ 6E12             >                // dummy db directives used to calculate length of namec
 166+ 6E12 53 43 52    >                db      "SCR"
 166+ 6E15             >len_NFA         defl    $ - temp_NFA
 166+ 6E15             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 166+ 6E12             >
 166+ 6E12 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 166+ 6E13 53 43 52    >                db      "SCR"               // name string in 7-bit ascii, but
 166+ 6E16             >                org     $-1                 // alter last byte of Name just above to set
 166+ 6E15 D2          >                db      {b $} | END_BIT     // msb as name end
 166+ 6E16             >
 166+ 6E16 09 6E       >                dw      last_NFA            // Link to previous definition Name
 166+ 6E18             >SCR:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 166+ 6E18 EE 6C       >                dw      User_Ptr ; ok        // for primitive definitions  actual code
 166+ 6E1A             >                else
 166+ 6E1A ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 166+ 6E1A             >                endif           ; ok        // for other definitions it "points" the correct handler
 166+ 6E1A             >                // Use of "; ok" to suppress "warning[fwdref]"
 166+ 6E1A             >
 166+ 6E1A             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 166+ 6E1A 24          >                db      36
 167+ 6E1B                              User_Def OFFSET     , "OFFSET"    , 38 //
 167+ 6E1B             >                New_Def  OFFSET, "OFFSET", User_Ptr, is_normal
 167+ 6E1B             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 167+ 6E1B             >
 167+ 6E1B             >                // dummy db directives used to calculate length of namec
 167+ 6E1B 4F 46 46 53 >                db      "OFFSET"
 167+ 6E1F 45 54       >
 167+ 6E21             >len_NFA         defl    $ - temp_NFA
 167+ 6E21             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 167+ 6E1B             >
 167+ 6E1B 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 167+ 6E1C 4F 46 46 53 >                db      "OFFSET"               // name string in 7-bit ascii, but
 167+ 6E20 45 54       >
 167+ 6E22             >                org     $-1                 // alter last byte of Name just above to set
 167+ 6E21 D4          >                db      {b $} | END_BIT     // msb as name end
 167+ 6E22             >
 167+ 6E22 12 6E       >                dw      last_NFA            // Link to previous definition Name
 167+ 6E24             >OFFSET:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 167+ 6E24 EE 6C       >                dw      User_Ptr ; ok        // for primitive definitions  actual code
 167+ 6E26             >                else
 167+ 6E26 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 167+ 6E26             >                endif           ; ok        // for other definitions it "points" the correct handler
 167+ 6E26             >                // Use of "; ok" to suppress "warning[fwdref]"
 167+ 6E26             >
 167+ 6E26             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 167+ 6E26 26          >                db      38
 168+ 6E27                              User_Def CONTEXT    , "CONTEXT"   , 40 // pointer to the vocabulary where search begins
 168+ 6E27             >                New_Def  CONTEXT, "CONTEXT", User_Ptr, is_normal
 168+ 6E27             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 168+ 6E27             >
 168+ 6E27             >                // dummy db directives used to calculate length of namec
 168+ 6E27 43 4F 4E 54 >                db      "CONTEXT"
 168+ 6E2B 45 58 54    >
 168+ 6E2E             >len_NFA         defl    $ - temp_NFA
 168+ 6E2E             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 168+ 6E27             >
 168+ 6E27 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 168+ 6E28 43 4F 4E 54 >                db      "CONTEXT"               // name string in 7-bit ascii, but
 168+ 6E2C 45 58 54    >
 168+ 6E2F             >                org     $-1                 // alter last byte of Name just above to set
 168+ 6E2E D4          >                db      {b $} | END_BIT     // msb as name end
 168+ 6E2F             >
 168+ 6E2F 1B 6E       >                dw      last_NFA            // Link to previous definition Name
 168+ 6E31             >CONTEXT:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 168+ 6E31 EE 6C       >                dw      User_Ptr ; ok        // for primitive definitions  actual code
 168+ 6E33             >                else
 168+ 6E33 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 168+ 6E33             >                endif           ; ok        // for other definitions it "points" the correct handler
 168+ 6E33             >                // Use of "; ok" to suppress "warning[fwdref]"
 168+ 6E33             >
 168+ 6E33             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 168+ 6E33 28          >                db      40
 169+ 6E34                              User_Def CURRENT    , "CURRENT"   , 42 // pointer to the vocabulary where search continues
 169+ 6E34             >                New_Def  CURRENT, "CURRENT", User_Ptr, is_normal
 169+ 6E34             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 169+ 6E34             >
 169+ 6E34             >                // dummy db directives used to calculate length of namec
 169+ 6E34 43 55 52 52 >                db      "CURRENT"
 169+ 6E38 45 4E 54    >
 169+ 6E3B             >len_NFA         defl    $ - temp_NFA
 169+ 6E3B             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 169+ 6E34             >
 169+ 6E34 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 169+ 6E35 43 55 52 52 >                db      "CURRENT"               // name string in 7-bit ascii, but
 169+ 6E39 45 4E 54    >
 169+ 6E3C             >                org     $-1                 // alter last byte of Name just above to set
 169+ 6E3B D4          >                db      {b $} | END_BIT     // msb as name end
 169+ 6E3C             >
 169+ 6E3C 27 6E       >                dw      last_NFA            // Link to previous definition Name
 169+ 6E3E             >CURRENT:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 169+ 6E3E EE 6C       >                dw      User_Ptr ; ok        // for primitive definitions  actual code
 169+ 6E40             >                else
 169+ 6E40 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 169+ 6E40             >                endif           ; ok        // for other definitions it "points" the correct handler
 169+ 6E40             >                // Use of "; ok" to suppress "warning[fwdref]"
 169+ 6E40             >
 169+ 6E40             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 169+ 6E40 2A          >                db      42
 170+ 6E41                              User_Def STATE      , "STATE"     , 44 // compilation status. 0 interpreting.
 170+ 6E41             >                New_Def  STATE, "STATE", User_Ptr, is_normal
 170+ 6E41             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 170+ 6E41             >
 170+ 6E41             >                // dummy db directives used to calculate length of namec
 170+ 6E41 53 54 41 54 >                db      "STATE"
 170+ 6E45 45          >
 170+ 6E46             >len_NFA         defl    $ - temp_NFA
 170+ 6E46             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 170+ 6E41             >
 170+ 6E41 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 170+ 6E42 53 54 41 54 >                db      "STATE"               // name string in 7-bit ascii, but
 170+ 6E46 45          >
 170+ 6E47             >                org     $-1                 // alter last byte of Name just above to set
 170+ 6E46 C5          >                db      {b $} | END_BIT     // msb as name end
 170+ 6E47             >
 170+ 6E47 34 6E       >                dw      last_NFA            // Link to previous definition Name
 170+ 6E49             >STATE:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 170+ 6E49 EE 6C       >                dw      User_Ptr ; ok        // for primitive definitions  actual code
 170+ 6E4B             >                else
 170+ 6E4B ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 170+ 6E4B             >                endif           ; ok        // for other definitions it "points" the correct handler
 170+ 6E4B             >                // Use of "; ok" to suppress "warning[fwdref]"
 170+ 6E4B             >
 170+ 6E4B             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 170+ 6E4B 2C          >                db      44
 171+ 6E4C                              User_Def BASE       , "BASE"      , 46 //
 171+ 6E4C             >                New_Def  BASE, "BASE", User_Ptr, is_normal
 171+ 6E4C             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 171+ 6E4C             >
 171+ 6E4C             >                // dummy db directives used to calculate length of namec
 171+ 6E4C 42 41 53 45 >                db      "BASE"
 171+ 6E50             >len_NFA         defl    $ - temp_NFA
 171+ 6E50             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 171+ 6E4C             >
 171+ 6E4C 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 171+ 6E4D 42 41 53 45 >                db      "BASE"               // name string in 7-bit ascii, but
 171+ 6E51             >                org     $-1                 // alter last byte of Name just above to set
 171+ 6E50 C5          >                db      {b $} | END_BIT     // msb as name end
 171+ 6E51             >
 171+ 6E51 41 6E       >                dw      last_NFA            // Link to previous definition Name
 171+ 6E53             >BASE:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 171+ 6E53 EE 6C       >                dw      User_Ptr ; ok        // for primitive definitions  actual code
 171+ 6E55             >                else
 171+ 6E55 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 171+ 6E55             >                endif           ; ok        // for other definitions it "points" the correct handler
 171+ 6E55             >                // Use of "; ok" to suppress "warning[fwdref]"
 171+ 6E55             >
 171+ 6E55             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 171+ 6E55 2E          >                db      46
 172+ 6E56                              User_Def DPL        , "DPL"       , 48 // number of digits after decimal point in conversion
 172+ 6E56             >                New_Def  DPL, "DPL", User_Ptr, is_normal
 172+ 6E56             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 172+ 6E56             >
 172+ 6E56             >                // dummy db directives used to calculate length of namec
 172+ 6E56 44 50 4C    >                db      "DPL"
 172+ 6E59             >len_NFA         defl    $ - temp_NFA
 172+ 6E59             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 172+ 6E56             >
 172+ 6E56 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 172+ 6E57 44 50 4C    >                db      "DPL"               // name string in 7-bit ascii, but
 172+ 6E5A             >                org     $-1                 // alter last byte of Name just above to set
 172+ 6E59 CC          >                db      {b $} | END_BIT     // msb as name end
 172+ 6E5A             >
 172+ 6E5A 4C 6E       >                dw      last_NFA            // Link to previous definition Name
 172+ 6E5C             >DPL:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 172+ 6E5C EE 6C       >                dw      User_Ptr ; ok        // for primitive definitions  actual code
 172+ 6E5E             >                else
 172+ 6E5E ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 172+ 6E5E             >                endif           ; ok        // for other definitions it "points" the correct handler
 172+ 6E5E             >                // Use of "; ok" to suppress "warning[fwdref]"
 172+ 6E5E             >
 172+ 6E5E             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 172+ 6E5E 30          >                db      48
 173+ 6E5F                              User_Def FLD        , "FLD"       , 50 // output field width
 173+ 6E5F             >                New_Def  FLD, "FLD", User_Ptr, is_normal
 173+ 6E5F             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 173+ 6E5F             >
 173+ 6E5F             >                // dummy db directives used to calculate length of namec
 173+ 6E5F 46 4C 44    >                db      "FLD"
 173+ 6E62             >len_NFA         defl    $ - temp_NFA
 173+ 6E62             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 173+ 6E5F             >
 173+ 6E5F 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 173+ 6E60 46 4C 44    >                db      "FLD"               // name string in 7-bit ascii, but
 173+ 6E63             >                org     $-1                 // alter last byte of Name just above to set
 173+ 6E62 C4          >                db      {b $} | END_BIT     // msb as name end
 173+ 6E63             >
 173+ 6E63 56 6E       >                dw      last_NFA            // Link to previous definition Name
 173+ 6E65             >FLD:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 173+ 6E65 EE 6C       >                dw      User_Ptr ; ok        // for primitive definitions  actual code
 173+ 6E67             >                else
 173+ 6E67 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 173+ 6E67             >                endif           ; ok        // for other definitions it "points" the correct handler
 173+ 6E67             >                // Use of "; ok" to suppress "warning[fwdref]"
 173+ 6E67             >
 173+ 6E67             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 173+ 6E67 32          >                db      50
 174+ 6E68                              User_Def CSP        , "CSP"       , 52 // used to temporary store Stack-Pointer value
 174+ 6E68             >                New_Def  CSP, "CSP", User_Ptr, is_normal
 174+ 6E68             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 174+ 6E68             >
 174+ 6E68             >                // dummy db directives used to calculate length of namec
 174+ 6E68 43 53 50    >                db      "CSP"
 174+ 6E6B             >len_NFA         defl    $ - temp_NFA
 174+ 6E6B             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 174+ 6E68             >
 174+ 6E68 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 174+ 6E69 43 53 50    >                db      "CSP"               // name string in 7-bit ascii, but
 174+ 6E6C             >                org     $-1                 // alter last byte of Name just above to set
 174+ 6E6B D0          >                db      {b $} | END_BIT     // msb as name end
 174+ 6E6C             >
 174+ 6E6C 5F 6E       >                dw      last_NFA            // Link to previous definition Name
 174+ 6E6E             >CSP:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 174+ 6E6E EE 6C       >                dw      User_Ptr ; ok        // for primitive definitions  actual code
 174+ 6E70             >                else
 174+ 6E70 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 174+ 6E70             >                endif           ; ok        // for other definitions it "points" the correct handler
 174+ 6E70             >                // Use of "; ok" to suppress "warning[fwdref]"
 174+ 6E70             >
 174+ 6E70             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 174+ 6E70 34          >                db      52
 175+ 6E71                              User_Def RSHARP     , "R#"        , 54 // location of editing cursor
 175+ 6E71             >                New_Def  RSHARP, "R#", User_Ptr, is_normal
 175+ 6E71             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 175+ 6E71             >
 175+ 6E71             >                // dummy db directives used to calculate length of namec
 175+ 6E71 52 23       >                db      "R#"
 175+ 6E73             >len_NFA         defl    $ - temp_NFA
 175+ 6E73             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 175+ 6E71             >
 175+ 6E71 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 175+ 6E72 52 23       >                db      "R#"               // name string in 7-bit ascii, but
 175+ 6E74             >                org     $-1                 // alter last byte of Name just above to set
 175+ 6E73 A3          >                db      {b $} | END_BIT     // msb as name end
 175+ 6E74             >
 175+ 6E74 68 6E       >                dw      last_NFA            // Link to previous definition Name
 175+ 6E76             >RSHARP:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 175+ 6E76 EE 6C       >                dw      User_Ptr ; ok        // for primitive definitions  actual code
 175+ 6E78             >                else
 175+ 6E78 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 175+ 6E78             >                endif           ; ok        // for other definitions it "points" the correct handler
 175+ 6E78             >                // Use of "; ok" to suppress "warning[fwdref]"
 175+ 6E78             >
 175+ 6E78             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 175+ 6E78 36          >                db      54
 176+ 6E79                              User_Def HLD        , "HLD"       , 56 // last character during a number conversion output
 176+ 6E79             >                New_Def  HLD, "HLD", User_Ptr, is_normal
 176+ 6E79             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 176+ 6E79             >
 176+ 6E79             >                // dummy db directives used to calculate length of namec
 176+ 6E79 48 4C 44    >                db      "HLD"
 176+ 6E7C             >len_NFA         defl    $ - temp_NFA
 176+ 6E7C             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 176+ 6E79             >
 176+ 6E79 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 176+ 6E7A 48 4C 44    >                db      "HLD"               // name string in 7-bit ascii, but
 176+ 6E7D             >                org     $-1                 // alter last byte of Name just above to set
 176+ 6E7C C4          >                db      {b $} | END_BIT     // msb as name end
 176+ 6E7D             >
 176+ 6E7D 71 6E       >                dw      last_NFA            // Link to previous definition Name
 176+ 6E7F             >HLD:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 176+ 6E7F EE 6C       >                dw      User_Ptr ; ok        // for primitive definitions  actual code
 176+ 6E81             >                else
 176+ 6E81 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 176+ 6E81             >                endif           ; ok        // for other definitions it "points" the correct handler
 176+ 6E81             >                // Use of "; ok" to suppress "warning[fwdref]"
 176+ 6E81             >
 176+ 6E81             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 176+ 6E81 38          >                db      56
 177+ 6E82                              User_Def USE        , "USE"       , 58 // address of last used block
 177+ 6E82             >                New_Def  USE, "USE", User_Ptr, is_normal
 177+ 6E82             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 177+ 6E82             >
 177+ 6E82             >                // dummy db directives used to calculate length of namec
 177+ 6E82 55 53 45    >                db      "USE"
 177+ 6E85             >len_NFA         defl    $ - temp_NFA
 177+ 6E85             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 177+ 6E82             >
 177+ 6E82 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 177+ 6E83 55 53 45    >                db      "USE"               // name string in 7-bit ascii, but
 177+ 6E86             >                org     $-1                 // alter last byte of Name just above to set
 177+ 6E85 C5          >                db      {b $} | END_BIT     // msb as name end
 177+ 6E86             >
 177+ 6E86 79 6E       >                dw      last_NFA            // Link to previous definition Name
 177+ 6E88             >USE:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 177+ 6E88 EE 6C       >                dw      User_Ptr ; ok        // for primitive definitions  actual code
 177+ 6E8A             >                else
 177+ 6E8A ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 177+ 6E8A             >                endif           ; ok        // for other definitions it "points" the correct handler
 177+ 6E8A             >                // Use of "; ok" to suppress "warning[fwdref]"
 177+ 6E8A             >
 177+ 6E8A             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 177+ 6E8A 3A          >                db      58
 178+ 6E8B                              User_Def PREV       , "PREV"      , 60 // address of previous used block
 178+ 6E8B             >                New_Def  PREV, "PREV", User_Ptr, is_normal
 178+ 6E8B             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 178+ 6E8B             >
 178+ 6E8B             >                // dummy db directives used to calculate length of namec
 178+ 6E8B 50 52 45 56 >                db      "PREV"
 178+ 6E8F             >len_NFA         defl    $ - temp_NFA
 178+ 6E8F             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 178+ 6E8B             >
 178+ 6E8B 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 178+ 6E8C 50 52 45 56 >                db      "PREV"               // name string in 7-bit ascii, but
 178+ 6E90             >                org     $-1                 // alter last byte of Name just above to set
 178+ 6E8F D6          >                db      {b $} | END_BIT     // msb as name end
 178+ 6E90             >
 178+ 6E90 82 6E       >                dw      last_NFA            // Link to previous definition Name
 178+ 6E92             >PREV:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 178+ 6E92 EE 6C       >                dw      User_Ptr ; ok        // for primitive definitions  actual code
 178+ 6E94             >                else
 178+ 6E94 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 178+ 6E94             >                endif           ; ok        // for other definitions it "points" the correct handler
 178+ 6E94             >                // Use of "; ok" to suppress "warning[fwdref]"
 178+ 6E94             >
 178+ 6E94             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 178+ 6E94 3C          >                db      60
 179+ 6E95                              User_Def LP         , "LP"        , 62 // line printer (not used)
 179+ 6E95             >                New_Def  LP, "LP", User_Ptr, is_normal
 179+ 6E95             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 179+ 6E95             >
 179+ 6E95             >                // dummy db directives used to calculate length of namec
 179+ 6E95 4C 50       >                db      "LP"
 179+ 6E97             >len_NFA         defl    $ - temp_NFA
 179+ 6E97             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 179+ 6E95             >
 179+ 6E95 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 179+ 6E96 4C 50       >                db      "LP"               // name string in 7-bit ascii, but
 179+ 6E98             >                org     $-1                 // alter last byte of Name just above to set
 179+ 6E97 D0          >                db      {b $} | END_BIT     // msb as name end
 179+ 6E98             >
 179+ 6E98 8B 6E       >                dw      last_NFA            // Link to previous definition Name
 179+ 6E9A             >LP:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 179+ 6E9A EE 6C       >                dw      User_Ptr ; ok        // for primitive definitions  actual code
 179+ 6E9C             >                else
 179+ 6E9C ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 179+ 6E9C             >                endif           ; ok        // for other definitions it "points" the correct handler
 179+ 6E9C             >                // Use of "; ok" to suppress "warning[fwdref]"
 179+ 6E9C             >
 179+ 6E9C             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 179+ 6E9C 3E          >                db      62
 180+ 6E9D                              User_Def PLACE      , "PLACE"     , 64 // number of digits after decimal point in output
 180+ 6E9D             >                New_Def  PLACE, "PLACE", User_Ptr, is_normal
 180+ 6E9D             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 180+ 6E9D             >
 180+ 6E9D             >                // dummy db directives used to calculate length of namec
 180+ 6E9D 50 4C 41 43 >                db      "PLACE"
 180+ 6EA1 45          >
 180+ 6EA2             >len_NFA         defl    $ - temp_NFA
 180+ 6EA2             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 180+ 6E9D             >
 180+ 6E9D 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 180+ 6E9E 50 4C 41 43 >                db      "PLACE"               // name string in 7-bit ascii, but
 180+ 6EA2 45          >
 180+ 6EA3             >                org     $-1                 // alter last byte of Name just above to set
 180+ 6EA2 C5          >                db      {b $} | END_BIT     // msb as name end
 180+ 6EA3             >
 180+ 6EA3 95 6E       >                dw      last_NFA            // Link to previous definition Name
 180+ 6EA5             >PLACE:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 180+ 6EA5 EE 6C       >                dw      User_Ptr ; ok        // for primitive definitions  actual code
 180+ 6EA7             >                else
 180+ 6EA7 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 180+ 6EA7             >                endif           ; ok        // for other definitions it "points" the correct handler
 180+ 6EA7             >                // Use of "; ok" to suppress "warning[fwdref]"
 180+ 6EA7             >
 180+ 6EA7             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 180+ 6EA7 40          >                db      64
 181+ 6EA8                              User_Def SOURCE_ID  , "SOURCE-ID" , 66 // data-stream number in INCLUDE and LOAD-
 181+ 6EA8             >                New_Def  SOURCE_ID, "SOURCE-ID", User_Ptr, is_normal
 181+ 6EA8             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 181+ 6EA8             >
 181+ 6EA8             >                // dummy db directives used to calculate length of namec
 181+ 6EA8 53 4F 55 52 >                db      "SOURCE-ID"
 181+ 6EAC 43 45 2D 49 >
 181+ 6EB0 44          >
 181+ 6EB1             >len_NFA         defl    $ - temp_NFA
 181+ 6EB1             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 181+ 6EA8             >
 181+ 6EA8 89          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 181+ 6EA9 53 4F 55 52 >                db      "SOURCE-ID"               // name string in 7-bit ascii, but
 181+ 6EAD 43 45 2D 49 >
 181+ 6EB1 44          >
 181+ 6EB2             >                org     $-1                 // alter last byte of Name just above to set
 181+ 6EB1 C4          >                db      {b $} | END_BIT     // msb as name end
 181+ 6EB2             >
 181+ 6EB2 9D 6E       >                dw      last_NFA            // Link to previous definition Name
 181+ 6EB4             >SOURCE_ID:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 181+ 6EB4 EE 6C       >                dw      User_Ptr ; ok        // for primitive definitions  actual code
 181+ 6EB6             >                else
 181+ 6EB6 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 181+ 6EB6             >                endif           ; ok        // for other definitions it "points" the correct handler
 181+ 6EB6             >                // Use of "; ok" to suppress "warning[fwdref]"
 181+ 6EB6             >
 181+ 6EB6             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 181+ 6EB6 42          >                db      66
 182+ 6EB7                              User_Def SPAN       , "SPAN"      , 68 // number of character of last EXPECT
 182+ 6EB7             >                New_Def  SPAN, "SPAN", User_Ptr, is_normal
 182+ 6EB7             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 182+ 6EB7             >
 182+ 6EB7             >                // dummy db directives used to calculate length of namec
 182+ 6EB7 53 50 41 4E >                db      "SPAN"
 182+ 6EBB             >len_NFA         defl    $ - temp_NFA
 182+ 6EBB             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 182+ 6EB7             >
 182+ 6EB7 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 182+ 6EB8 53 50 41 4E >                db      "SPAN"               // name string in 7-bit ascii, but
 182+ 6EBC             >                org     $-1                 // alter last byte of Name just above to set
 182+ 6EBB CE          >                db      {b $} | END_BIT     // msb as name end
 182+ 6EBC             >
 182+ 6EBC A8 6E       >                dw      last_NFA            // Link to previous definition Name
 182+ 6EBE             >SPAN:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 182+ 6EBE EE 6C       >                dw      User_Ptr ; ok        // for primitive definitions  actual code
 182+ 6EC0             >                else
 182+ 6EC0 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 182+ 6EC0             >                endif           ; ok        // for other definitions it "points" the correct handler
 182+ 6EC0             >                // Use of "; ok" to suppress "warning[fwdref]"
 182+ 6EC0             >
 182+ 6EC0             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 182+ 6EC0 44          >                db      68
 183+ 6EC1                              User_Def HANDLER    , "HANDLER"   , 70 // Used by THROW-CATCH
 183+ 6EC1             >                New_Def  HANDLER, "HANDLER", User_Ptr, is_normal
 183+ 6EC1             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 183+ 6EC1             >
 183+ 6EC1             >                // dummy db directives used to calculate length of namec
 183+ 6EC1 48 41 4E 44 >                db      "HANDLER"
 183+ 6EC5 4C 45 52    >
 183+ 6EC8             >len_NFA         defl    $ - temp_NFA
 183+ 6EC8             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 183+ 6EC1             >
 183+ 6EC1 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 183+ 6EC2 48 41 4E 44 >                db      "HANDLER"               // name string in 7-bit ascii, but
 183+ 6EC6 4C 45 52    >
 183+ 6EC9             >                org     $-1                 // alter last byte of Name just above to set
 183+ 6EC8 D2          >                db      {b $} | END_BIT     // msb as name end
 183+ 6EC9             >
 183+ 6EC9 B7 6E       >                dw      last_NFA            // Link to previous definition Name
 183+ 6ECB             >HANDLER:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 183+ 6ECB EE 6C       >                dw      User_Ptr ; ok        // for primitive definitions  actual code
 183+ 6ECD             >                else
 183+ 6ECD ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 183+ 6ECD             >                endif           ; ok        // for other definitions it "points" the correct handler
 183+ 6ECD             >                // Use of "; ok" to suppress "warning[fwdref]"
 183+ 6ECD             >
 183+ 6ECD             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 183+ 6ECD 46          >                db      70
 184+ 6ECE                              User_Def HP         , "HP"        , 72 // heap-pointer address
 184+ 6ECE             >                New_Def  HP, "HP", User_Ptr, is_normal
 184+ 6ECE             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 184+ 6ECE             >
 184+ 6ECE             >                // dummy db directives used to calculate length of namec
 184+ 6ECE 48 50       >                db      "HP"
 184+ 6ED0             >len_NFA         defl    $ - temp_NFA
 184+ 6ED0             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 184+ 6ECE             >
 184+ 6ECE 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 184+ 6ECF 48 50       >                db      "HP"               // name string in 7-bit ascii, but
 184+ 6ED1             >                org     $-1                 // alter last byte of Name just above to set
 184+ 6ED0 D0          >                db      {b $} | END_BIT     // msb as name end
 184+ 6ED1             >
 184+ 6ED1 C1 6E       >                dw      last_NFA            // Link to previous definition Name
 184+ 6ED3             >HP:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 184+ 6ED3 EE 6C       >                dw      User_Ptr ; ok        // for primitive definitions  actual code
 184+ 6ED5             >                else
 184+ 6ED5 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 184+ 6ED5             >                endif           ; ok        // for other definitions it "points" the correct handler
 184+ 6ED5             >                // Use of "; ok" to suppress "warning[fwdref]"
 184+ 6ED5             >
 184+ 6ED5             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 184+ 6ED5 48          >                db      72
 185+ 6ED6
 186+ 6ED6              //  ______________________________________________________________________
 187+ 6ED6              //
 188+ 6ED6              // here         -- a
 189+ 6ED6                              Colon_Def HERE, "HERE", is_normal
 189+ 6ED6             >                New_Def  HERE, "HERE", Enter_Ptr, is_normal ; ok
 189+ 6ED6             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 189+ 6ED6             >
 189+ 6ED6             >                // dummy db directives used to calculate length of namec
 189+ 6ED6 48 45 52 45 >                db      "HERE"
 189+ 6EDA             >len_NFA         defl    $ - temp_NFA
 189+ 6EDA             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 189+ 6ED6             >
 189+ 6ED6 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 189+ 6ED7 48 45 52 45 >                db      "HERE"               // name string in 7-bit ascii, but
 189+ 6EDB             >                org     $-1                 // alter last byte of Name just above to set
 189+ 6EDA C5          >                db      {b $} | END_BIT     // msb as name end
 189+ 6EDB             >
 189+ 6EDB CE 6E       >                dw      last_NFA            // Link to previous definition Name
 189+ 6EDD             >HERE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 189+ 6EDD 81 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 189+ 6EDF             >                else
 189+ 6EDF ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 189+ 6EDF             >                endif           ; ok        // for other definitions it "points" the correct handler
 189+ 6EDF             >                // Use of "; ok" to suppress "warning[fwdref]"
 189+ 6EDF             >
 189+ 6EDF             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 190+ 6EDF BC 6D 96 6B                  dw      DP, FETCH               // dp @
 191+ 6EE3 9E 69                        dw      EXIT                    // ;
 192+ 6EE5
 193+ 6EE5              //  ______________________________________________________________________
 194+ 6EE5              //
 195+ 6EE5              // allot        n --
 196+ 6EE5                              Colon_Def ALLOT, "ALLOT", is_normal
 196+ 6EE5             >                New_Def  ALLOT, "ALLOT", Enter_Ptr, is_normal ; ok
 196+ 6EE5             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 196+ 6EE5             >
 196+ 6EE5             >                // dummy db directives used to calculate length of namec
 196+ 6EE5 41 4C 4C 4F >                db      "ALLOT"
 196+ 6EE9 54          >
 196+ 6EEA             >len_NFA         defl    $ - temp_NFA
 196+ 6EEA             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 196+ 6EE5             >
 196+ 6EE5 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 196+ 6EE6 41 4C 4C 4F >                db      "ALLOT"               // name string in 7-bit ascii, but
 196+ 6EEA 54          >
 196+ 6EEB             >                org     $-1                 // alter last byte of Name just above to set
 196+ 6EEA D4          >                db      {b $} | END_BIT     // msb as name end
 196+ 6EEB             >
 196+ 6EEB D6 6E       >                dw      last_NFA            // Link to previous definition Name
 196+ 6EED             >ALLOT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 196+ 6EED 81 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 196+ 6EEF             >                else
 196+ 6EEF ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 196+ 6EEF             >                endif           ; ok        // for other definitions it "points" the correct handler
 196+ 6EEF             >                // Use of "; ok" to suppress "warning[fwdref]"
 196+ 6EEF             >
 196+ 6EEF             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 197+ 6EEF BC 6D 73 6B                  dw      DP,  PLUSSTORE          // dp +!
 198+ 6EF3 9E 69                        dw      EXIT                    // ;
 199+ 6EF5
 200+ 6EF5              //  ______________________________________________________________________
 201+ 6EF5              //
 202+ 6EF5              // comma        n --
 203+ 6EF5                              Colon_Def COMMA, ",", is_normal
 203+ 6EF5             >                New_Def  COMMA, ",", Enter_Ptr, is_normal ; ok
 203+ 6EF5             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 203+ 6EF5             >
 203+ 6EF5             >                // dummy db directives used to calculate length of namec
 203+ 6EF5 2C          >                db      ","
 203+ 6EF6             >len_NFA         defl    $ - temp_NFA
 203+ 6EF6             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 203+ 6EF5             >
 203+ 6EF5 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 203+ 6EF6 2C          >                db      ","               // name string in 7-bit ascii, but
 203+ 6EF7             >                org     $-1                 // alter last byte of Name just above to set
 203+ 6EF6 AC          >                db      {b $} | END_BIT     // msb as name end
 203+ 6EF7             >
 203+ 6EF7 E5 6E       >                dw      last_NFA            // Link to previous definition Name
 203+ 6EF9             >COMMA:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 203+ 6EF9 81 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 203+ 6EFB             >                else
 203+ 6EFB ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 203+ 6EFB             >                endif           ; ok        // for other definitions it "points" the correct handler
 203+ 6EFB             >                // Use of "; ok" to suppress "warning[fwdref]"
 203+ 6EFB             >
 203+ 6EFB             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 204+ 6EFB DD 6E A3 6B                  dw      HERE, STORE             // here !
 205+ 6EFF 0E 6D ED 6E                  dw      TWO, ALLOT              // 2 allot
 206+ 6F03 9E 69                        dw      EXIT                    // ;
 207+ 6F05
 208+ 6F05              //  ______________________________________________________________________
 209+ 6F05              //
 210+ 6F05              // ccomma       c --
 211+ 6F05                              Colon_Def CCOMMA, "C,", is_normal
 211+ 6F05             >                New_Def  CCOMMA, "C,", Enter_Ptr, is_normal ; ok
 211+ 6F05             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 211+ 6F05             >
 211+ 6F05             >                // dummy db directives used to calculate length of namec
 211+ 6F05 43 2C       >                db      "C,"
 211+ 6F07             >len_NFA         defl    $ - temp_NFA
 211+ 6F07             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 211+ 6F05             >
 211+ 6F05 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 211+ 6F06 43 2C       >                db      "C,"               // name string in 7-bit ascii, but
 211+ 6F08             >                org     $-1                 // alter last byte of Name just above to set
 211+ 6F07 AC          >                db      {b $} | END_BIT     // msb as name end
 211+ 6F08             >
 211+ 6F08 F5 6E       >                dw      last_NFA            // Link to previous definition Name
 211+ 6F0A             >CCOMMA:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 211+ 6F0A 81 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 211+ 6F0C             >                else
 211+ 6F0C ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 211+ 6F0C             >                endif           ; ok        // for other definitions it "points" the correct handler
 211+ 6F0C             >                // Use of "; ok" to suppress "warning[fwdref]"
 211+ 6F0C             >
 211+ 6F0C             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 212+ 6F0C DD 6E BF 6B                  dw      HERE, CSTORE            // here c!
 213+ 6F10 06 6D ED 6E                  dw      ONE, ALLOT              // 1 allot
 214+ 6F14 9E 69                        dw      EXIT                    // ;
 215+ 6F16
 216+ 6F16              //  ______________________________________________________________________
 217+ 6F16              //
 218+ 6F16              // s>d          n -- d
 219+ 6F16              // converts a single precision integer in a double precision
 220+ 6F16                              New_Def S_TO_D, "S>D", is_code, is_normal
 220+ 6F16             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 220+ 6F16             >
 220+ 6F16             >                // dummy db directives used to calculate length of namec
 220+ 6F16 53 3E 44    >                db      "S>D"
 220+ 6F19             >len_NFA         defl    $ - temp_NFA
 220+ 6F19             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 220+ 6F16             >
 220+ 6F16 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 220+ 6F17 53 3E 44    >                db      "S>D"               // name string in 7-bit ascii, but
 220+ 6F1A             >                org     $-1                 // alter last byte of Name just above to set
 220+ 6F19 C4          >                db      {b $} | END_BIT     // msb as name end
 220+ 6F1A             >
 220+ 6F1A 05 6F       >                dw      last_NFA            // Link to previous definition Name
 220+ 6F1C             >S_TO_D:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 220+ 6F1C ~           >                dw      runcode ; ok        // for primitive definitions  actual code
 220+ 6F1C             >                else
 220+ 6F1C 1E 6F       >                dw      $ + 2   ; ok        // is pointed by CFA
 220+ 6F1E             >                endif           ; ok        // for other definitions it "points" the correct handler
 220+ 6F1E             >                // Use of "; ok" to suppress "warning[fwdref]"
 220+ 6F1E             >
 220+ 6F1E             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 221+ 6F1E D1                           pop     de
 222+ 6F1F 21 00 00                     ld      hl, 0
 223+ 6F22 7A                           ld      a, d
 224+ 6F23 E6 80                        and     $80
 225+ 6F25 28 01                        jr      z, S_to_D_Skip
 226+ 6F27 2B                           dec     hl                  // $FFFF
 227+ 6F28              S_to_D_Skip:
 228+ 6F28 D5                           push    de
 229+ 6F29 E5                           push    hl
 230+ 6F2A                              next
 230+ 6F2A DD E9       >                jp      (ix)
 231+ 6F2C
 232+ 6F2C              //  ______________________________________________________________________
 233+ 6F2C              //
 234+ 6F2C              // -            n1 n2 -- n3
 235+ 6F2C              // subtraction
 236+ 6F2C                              New_Def SUBTRACT, "-", is_code, is_normal
 236+ 6F2C             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 236+ 6F2C             >
 236+ 6F2C             >                // dummy db directives used to calculate length of namec
 236+ 6F2C 2D          >                db      "-"
 236+ 6F2D             >len_NFA         defl    $ - temp_NFA
 236+ 6F2D             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 236+ 6F2C             >
 236+ 6F2C 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 236+ 6F2D 2D          >                db      "-"               // name string in 7-bit ascii, but
 236+ 6F2E             >                org     $-1                 // alter last byte of Name just above to set
 236+ 6F2D AD          >                db      {b $} | END_BIT     // msb as name end
 236+ 6F2E             >
 236+ 6F2E 16 6F       >                dw      last_NFA            // Link to previous definition Name
 236+ 6F30             >SUBTRACT:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 236+ 6F30 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
 236+ 6F30             >                else
 236+ 6F30 32 6F       >                dw      $ + 2   ; ok        // is pointed by CFA
 236+ 6F32             >                endif           ; ok        // for other definitions it "points" the correct handler
 236+ 6F32             >                // Use of "; ok" to suppress "warning[fwdref]"
 236+ 6F32             >
 236+ 6F32             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 237+ 6F32 D1                           pop     de
 238+ 6F33 E1                           pop     hl
 239+ 6F34 A7                           and     a
 240+ 6F35 ED 52                        sbc     hl, de
 241+ 6F37
 242+ 6F37                              psh1
 242+ 6F37 E5          >                push    hl
 242+ 6F38 DD E9       >                jp      (ix)
 243+ 6F3A
 244+ 6F3A              //  ______________________________________________________________________
 245+ 6F3A              //
 246+ 6F3A              // =            n1 n2 -- n3
 247+ 6F3A              // equals
 248+ 6F3A                              Colon_Def EQUALS, "=", is_normal
 248+ 6F3A             >                New_Def  EQUALS, "=", Enter_Ptr, is_normal ; ok
 248+ 6F3A             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 248+ 6F3A             >
 248+ 6F3A             >                // dummy db directives used to calculate length of namec
 248+ 6F3A 3D          >                db      "="
 248+ 6F3B             >len_NFA         defl    $ - temp_NFA
 248+ 6F3B             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 248+ 6F3A             >
 248+ 6F3A 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 248+ 6F3B 3D          >                db      "="               // name string in 7-bit ascii, but
 248+ 6F3C             >                org     $-1                 // alter last byte of Name just above to set
 248+ 6F3B BD          >                db      {b $} | END_BIT     // msb as name end
 248+ 6F3C             >
 248+ 6F3C 2C 6F       >                dw      last_NFA            // Link to previous definition Name
 248+ 6F3E             >EQUALS:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 248+ 6F3E 81 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 248+ 6F40             >                else
 248+ 6F40 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 248+ 6F40             >                endif           ; ok        // for other definitions it "points" the correct handler
 248+ 6F40             >                // Use of "; ok" to suppress "warning[fwdref]"
 248+ 6F40             >
 248+ 6F40             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 249+ 6F40 30 6F E0 69                  dw      SUBTRACT, ZEQUAL        // - 0=
 250+ 6F44 9E 69                        dw      EXIT                    // ;
 251+ 6F46
 252+ 6F46              //  ______________________________________________________________________
 253+ 6F46              //
 254+ 6F46              // u<           u1 u2 -- u3
 255+ 6F46              // unsigned less-than
 256+ 6F46                              New_Def ULESS, "U<", is_code, is_normal
 256+ 6F46             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 256+ 6F46             >
 256+ 6F46             >                // dummy db directives used to calculate length of namec
 256+ 6F46 55 3C       >                db      "U<"
 256+ 6F48             >len_NFA         defl    $ - temp_NFA
 256+ 6F48             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 256+ 6F46             >
 256+ 6F46 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 256+ 6F47 55 3C       >                db      "U<"               // name string in 7-bit ascii, but
 256+ 6F49             >                org     $-1                 // alter last byte of Name just above to set
 256+ 6F48 BC          >                db      {b $} | END_BIT     // msb as name end
 256+ 6F49             >
 256+ 6F49 3A 6F       >                dw      last_NFA            // Link to previous definition Name
 256+ 6F4B             >ULESS:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 256+ 6F4B ~           >                dw      runcode ; ok        // for primitive definitions  actual code
 256+ 6F4B             >                else
 256+ 6F4B 4D 6F       >                dw      $ + 2   ; ok        // is pointed by CFA
 256+ 6F4D             >                endif           ; ok        // for other definitions it "points" the correct handler
 256+ 6F4D             >                // Use of "; ok" to suppress "warning[fwdref]"
 256+ 6F4D             >
 256+ 6F4D             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 257+ 6F4D D1                           pop     de
 258+ 6F4E E1                           pop     hl
 259+ 6F4F A7                           and     a
 260+ 6F50 ED 52                        sbc     hl, de
 261+ 6F52 21 FF FF                     ld      hl, -1
 262+ 6F55 38 01                        jr      c, ULess_Skip
 263+ 6F57 23                               inc     hl
 264+ 6F58              ULess_Skip:
 265+ 6F58
 266+ 6F58                              psh1
 266+ 6F58 E5          >                push    hl
 266+ 6F59 DD E9       >                jp      (ix)
 267+ 6F5B
 268+ 6F5B              //  ______________________________________________________________________
 269+ 6F5B              //
 270+ 6F5B              // <           n1 n2 -- n3
 271+ 6F5B              // less-than
 272+ 6F5B                              New_Def LESS, "<", is_code, is_normal
 272+ 6F5B             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 272+ 6F5B             >
 272+ 6F5B             >                // dummy db directives used to calculate length of namec
 272+ 6F5B 3C          >                db      "<"
 272+ 6F5C             >len_NFA         defl    $ - temp_NFA
 272+ 6F5C             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 272+ 6F5B             >
 272+ 6F5B 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 272+ 6F5C 3C          >                db      "<"               // name string in 7-bit ascii, but
 272+ 6F5D             >                org     $-1                 // alter last byte of Name just above to set
 272+ 6F5C BC          >                db      {b $} | END_BIT     // msb as name end
 272+ 6F5D             >
 272+ 6F5D 46 6F       >                dw      last_NFA            // Link to previous definition Name
 272+ 6F5F             >LESS:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 272+ 6F5F ~           >                dw      runcode ; ok        // for primitive definitions  actual code
 272+ 6F5F             >                else
 272+ 6F5F 61 6F       >                dw      $ + 2   ; ok        // is pointed by CFA
 272+ 6F61             >                endif           ; ok        // for other definitions it "points" the correct handler
 272+ 6F61             >                // Use of "; ok" to suppress "warning[fwdref]"
 272+ 6F61             >
 272+ 6F61             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 273+ 6F61 D1                           pop     de
 274+ 6F62 E1                           pop     hl
 275+ 6F63 7C                           ld      a, h
 276+ 6F64 EE 80                        xor     $80
 277+ 6F66 67                           ld      h, a
 278+ 6F67 7A                           ld      a, d
 279+ 6F68 EE 80                        xor     $80
 280+ 6F6A 57                           ld      d, a
 281+ 6F6B              //              and     a
 282+ 6F6B ED 52                        sbc     hl, de
 283+ 6F6D ED 62                        sbc     hl, hl
 284+ 6F6F                              psh1
 284+ 6F6F E5          >                push    hl
 284+ 6F70 DD E9       >                jp      (ix)
 285+ 6F72
 286+ 6F72              //  ______________________________________________________________________
 287+ 6F72              //
 288+ 6F72              // >            n1 n2 -- n3
 289+ 6F72              // greater than
 290+ 6F72                              Colon_Def GREATER, ">", is_normal
 290+ 6F72             >                New_Def  GREATER, ">", Enter_Ptr, is_normal ; ok
 290+ 6F72             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 290+ 6F72             >
 290+ 6F72             >                // dummy db directives used to calculate length of namec
 290+ 6F72 3E          >                db      ">"
 290+ 6F73             >len_NFA         defl    $ - temp_NFA
 290+ 6F73             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 290+ 6F72             >
 290+ 6F72 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 290+ 6F73 3E          >                db      ">"               // name string in 7-bit ascii, but
 290+ 6F74             >                org     $-1                 // alter last byte of Name just above to set
 290+ 6F73 BE          >                db      {b $} | END_BIT     // msb as name end
 290+ 6F74             >
 290+ 6F74 5B 6F       >                dw      last_NFA            // Link to previous definition Name
 290+ 6F76             >GREATER:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 290+ 6F76 81 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 290+ 6F78             >                else
 290+ 6F78 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 290+ 6F78             >                endif           ; ok        // for other definitions it "points" the correct handler
 290+ 6F78             >                // Use of "; ok" to suppress "warning[fwdref]"
 290+ 6F78             >
 290+ 6F78             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 291+ 6F78 F6 6A 5F 6F                  dw      SWAP, LESS              // swap <
 292+ 6F7C 9E 69                        dw      EXIT                    // ;
 293+ 6F7E              //  ______________________________________________________________________
 294+ 6F7E              //
 295+ 6F7E              // min          n1 n2 -- n3
 296+ 6F7E              // minimum between n1 and n2
 297+ 6F7E                              Colon_Def MIN, "MIN" , is_normal
 297+ 6F7E             >                New_Def  MIN, "MIN", Enter_Ptr, is_normal ; ok
 297+ 6F7E             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 297+ 6F7E             >
 297+ 6F7E             >                // dummy db directives used to calculate length of namec
 297+ 6F7E 4D 49 4E    >                db      "MIN"
 297+ 6F81             >len_NFA         defl    $ - temp_NFA
 297+ 6F81             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 297+ 6F7E             >
 297+ 6F7E 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 297+ 6F7F 4D 49 4E    >                db      "MIN"               // name string in 7-bit ascii, but
 297+ 6F82             >                org     $-1                 // alter last byte of Name just above to set
 297+ 6F81 CE          >                db      {b $} | END_BIT     // msb as name end
 297+ 6F82             >
 297+ 6F82 72 6F       >                dw      last_NFA            // Link to previous definition Name
 297+ 6F84             >MIN:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 297+ 6F84 81 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 297+ 6F86             >                else
 297+ 6F86 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 297+ 6F86             >                endif           ; ok        // for other definitions it "points" the correct handler
 297+ 6F86             >                // Use of "; ok" to suppress "warning[fwdref]"
 297+ 6F86             >
 297+ 6F86             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 298+ 6F86 64 6B                        dw      TWO_DUP                 // 2dup
 299+ 6F88 76 6F                        dw      GREATER                 // >
 300+ 6F8A 2C 64                        dw      ZBRANCH
 301+ 6F8C 04 00                        dw      Min_Skip - $   // if
 302+ 6F8E F6 6A                        dw          SWAP                //      swap
 303+ 6F90              Min_Skip:                                       // endif
 304+ 6F90 CE 6A                        dw      DROP                    // drop
 305+ 6F92 9E 69                        dw      EXIT                    // ;
 306+ 6F94
 307+ 6F94              //  ______________________________________________________________________
 308+ 6F94              //
 309+ 6F94              // max          n1 n2 -- n3
 310+ 6F94              // maximum between n1 and n2
 311+ 6F94                              Colon_Def MAX, "MAX", is_normal
 311+ 6F94             >                New_Def  MAX, "MAX", Enter_Ptr, is_normal ; ok
 311+ 6F94             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 311+ 6F94             >
 311+ 6F94             >                // dummy db directives used to calculate length of namec
 311+ 6F94 4D 41 58    >                db      "MAX"
 311+ 6F97             >len_NFA         defl    $ - temp_NFA
 311+ 6F97             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 311+ 6F94             >
 311+ 6F94 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 311+ 6F95 4D 41 58    >                db      "MAX"               // name string in 7-bit ascii, but
 311+ 6F98             >                org     $-1                 // alter last byte of Name just above to set
 311+ 6F97 D8          >                db      {b $} | END_BIT     // msb as name end
 311+ 6F98             >
 311+ 6F98 7E 6F       >                dw      last_NFA            // Link to previous definition Name
 311+ 6F9A             >MAX:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 311+ 6F9A 81 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 311+ 6F9C             >                else
 311+ 6F9C ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 311+ 6F9C             >                endif           ; ok        // for other definitions it "points" the correct handler
 311+ 6F9C             >                // Use of "; ok" to suppress "warning[fwdref]"
 311+ 6F9C             >
 311+ 6F9C             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 312+ 6F9C 64 6B                        dw      TWO_DUP                 // 2dup
 313+ 6F9E 5F 6F                        dw      LESS                    // <
 314+ 6FA0 2C 64                        dw      ZBRANCH
 315+ 6FA2 04 00                        dw      Max_Skip - $   // if
 316+ 6FA4 F6 6A                        dw          SWAP                //      swap
 317+ 6FA6              Max_Skip:                                       // endif
 318+ 6FA6 CE 6A                        dw      DROP                    // drop
 319+ 6FA8 9E 69                        dw      EXIT                    // ;
 320+ 6FAA
 321+ 6FAA              //  ______________________________________________________________________
 322+ 6FAA              //
 323+ 6FAA              // ?dup         n -- 0 | n n
 324+ 6FAA              // duplicate if not zero
 325+ 6FAA                              New_Def QDUP, "?DUP", is_code, is_normal
 325+ 6FAA             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 325+ 6FAA             >
 325+ 6FAA             >                // dummy db directives used to calculate length of namec
 325+ 6FAA 3F 44 55 50 >                db      "?DUP"
 325+ 6FAE             >len_NFA         defl    $ - temp_NFA
 325+ 6FAE             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 325+ 6FAA             >
 325+ 6FAA 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 325+ 6FAB 3F 44 55 50 >                db      "?DUP"               // name string in 7-bit ascii, but
 325+ 6FAF             >                org     $-1                 // alter last byte of Name just above to set
 325+ 6FAE D0          >                db      {b $} | END_BIT     // msb as name end
 325+ 6FAF             >
 325+ 6FAF 94 6F       >                dw      last_NFA            // Link to previous definition Name
 325+ 6FB1             >QDUP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 325+ 6FB1 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
 325+ 6FB1             >                else
 325+ 6FB1 B3 6F       >                dw      $ + 2   ; ok        // is pointed by CFA
 325+ 6FB3             >                endif           ; ok        // for other definitions it "points" the correct handler
 325+ 6FB3             >                // Use of "; ok" to suppress "warning[fwdref]"
 325+ 6FB3             >
 325+ 6FB3             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 326+ 6FB3              QDup_Ptr:
 327+ 6FB3 E1                           pop     hl
 328+ 6FB4 7C                           ld      a, h
 329+ 6FB5 B5                           or      l
 330+ 6FB6 28 01                        jr      z, QDup_Skip
 331+ 6FB8 E5                               push    hl
 332+ 6FB9              QDup_Skip:
 333+ 6FB9                              psh1
 333+ 6FB9 E5          >                push    hl
 333+ 6FBA DD E9       >                jp      (ix)
 334+ 6FBC
 335+ 6FBC              //  ______________________________________________________________________
 336+ 6FBC              //
 337+ 6FBC              // -dup         n -- 0 | n n
 338+ 6FBC              // duplicate if not zero
 339+ 6FBC                              New_Def LDUP, "-DUP", QDup_Ptr, is_normal
 339+ 6FBC             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 339+ 6FBC             >
 339+ 6FBC             >                // dummy db directives used to calculate length of namec
 339+ 6FBC 2D 44 55 50 >                db      "-DUP"
 339+ 6FC0             >len_NFA         defl    $ - temp_NFA
 339+ 6FC0             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 339+ 6FBC             >
 339+ 6FBC 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 339+ 6FBD 2D 44 55 50 >                db      "-DUP"               // name string in 7-bit ascii, but
 339+ 6FC1             >                org     $-1                 // alter last byte of Name just above to set
 339+ 6FC0 D0          >                db      {b $} | END_BIT     // msb as name end
 339+ 6FC1             >
 339+ 6FC1 AA 6F       >                dw      last_NFA            // Link to previous definition Name
 339+ 6FC3             >LDUP:          if QDup_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 339+ 6FC3 B3 6F       >                dw      QDup_Ptr ; ok        // for primitive definitions  actual code
 339+ 6FC5             >                else
 339+ 6FC5 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 339+ 6FC5             >                endif           ; ok        // for other definitions it "points" the correct handler
 339+ 6FC5             >                // Use of "; ok" to suppress "warning[fwdref]"
 339+ 6FC5             >
 339+ 6FC5             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 340+ 6FC5
 341+ 6FC5              //  ______________________________________________________________________
 342+ 6FC5              //
 343+ 6FC5              // emit         c --
 344+ 6FC5                              Colon_Def EMIT, "EMIT", is_normal
 344+ 6FC5             >                New_Def  EMIT, "EMIT", Enter_Ptr, is_normal ; ok
 344+ 6FC5             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 344+ 6FC5             >
 344+ 6FC5             >                // dummy db directives used to calculate length of namec
 344+ 6FC5 45 4D 49 54 >                db      "EMIT"
 344+ 6FC9             >len_NFA         defl    $ - temp_NFA
 344+ 6FC9             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 344+ 6FC5             >
 344+ 6FC5 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 344+ 6FC6 45 4D 49 54 >                db      "EMIT"               // name string in 7-bit ascii, but
 344+ 6FCA             >                org     $-1                 // alter last byte of Name just above to set
 344+ 6FC9 D4          >                db      {b $} | END_BIT     // msb as name end
 344+ 6FCA             >
 344+ 6FCA BC 6F       >                dw      last_NFA            // Link to previous definition Name
 344+ 6FCC             >EMIT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 344+ 6FCC 81 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 344+ 6FCE             >                else
 344+ 6FCE ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 344+ 6FCE             >                endif           ; ok        // for other definitions it "points" the correct handler
 344+ 6FCE             >                // Use of "; ok" to suppress "warning[fwdref]"
 344+ 6FCE             >
 344+ 6FCE             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 345+ 6FCE 52 66                        dw      C_EMIT                      // (?emit)
 346+ 6FD0 B1 6F                        dw      QDUP                        // ?dup
 347+ 6FD2                                                                  // if
 348+ 6FD2 2C 64                        dw      ZBRANCH
 349+ 6FD4 0A 00                        dw      Emit_Skip - $
 350+ 6FD6 13 66                        dw          EMITC                   //      emitc
 351+ 6FD8 06 6D                        dw          ONE                     //      1
 352+ 6FDA 0F 6E 73 6B                  dw          OUT, PLUSSTORE        //      out +!
 353+ 6FDE              Emit_Skip:                                          // endif
 354+ 6FDE 9E 69                        dw      EXIT                        // ;
 355+ 6FE0
 356+ 6FE0              //  ______________________________________________________________________
 357+ 6FE0              //
 358+ 6FE0              // space        --
 359+ 6FE0                              Colon_Def SPACE, "SPACE", is_normal
 359+ 6FE0             >                New_Def  SPACE, "SPACE", Enter_Ptr, is_normal ; ok
 359+ 6FE0             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 359+ 6FE0             >
 359+ 6FE0             >                // dummy db directives used to calculate length of namec
 359+ 6FE0 53 50 41 43 >                db      "SPACE"
 359+ 6FE4 45          >
 359+ 6FE5             >len_NFA         defl    $ - temp_NFA
 359+ 6FE5             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 359+ 6FE0             >
 359+ 6FE0 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 359+ 6FE1 53 50 41 43 >                db      "SPACE"               // name string in 7-bit ascii, but
 359+ 6FE5 45          >
 359+ 6FE6             >                org     $-1                 // alter last byte of Name just above to set
 359+ 6FE5 C5          >                db      {b $} | END_BIT     // msb as name end
 359+ 6FE6             >
 359+ 6FE6 C5 6F       >                dw      last_NFA            // Link to previous definition Name
 359+ 6FE8             >SPACE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 359+ 6FE8 81 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 359+ 6FEA             >                else
 359+ 6FEA ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 359+ 6FEA             >                endif           ; ok        // for other definitions it "points" the correct handler
 359+ 6FEA             >                // Use of "; ok" to suppress "warning[fwdref]"
 359+ 6FEA             >
 359+ 6FEA             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 360+ 6FEA 28 6D CC 6F                  dw      BL, EMIT                // bl emit
 361+ 6FEE 9E 69                        dw      EXIT                    // ;
 362+ 6FF0
 363+ 6FF0              //  ______________________________________________________________________
 364+ 6FF0              //
 365+ 6FF0              // traverse     a n -- a
 366+ 6FF0              // A dictionary entry is structured as follows
 367+ 6FF0              // NFA: +0   one byte of word-length (n<32) | some flags (immediate, smudge) | $80
 368+ 6FF0              //      +1   word name, last character is toggled with $80
 369+ 6FF0              // LFA: +1+n link to NFA ofprevious  dictionary entry.
 370+ 6FF0              // CFA: +3+n routine address. Colon definitions here have pointer to code
 371+ 6FF0              // PFA: +5+n "is_code", definitions have no PFA.
 372+ 6FF0              //
 373+ 6FF0                              Colon_Def TRAVERSE, "TRAVERSE", is_normal
 373+ 6FF0             >                New_Def  TRAVERSE, "TRAVERSE", Enter_Ptr, is_normal ; ok
 373+ 6FF0             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 373+ 6FF0             >
 373+ 6FF0             >                // dummy db directives used to calculate length of namec
 373+ 6FF0 54 52 41 56 >                db      "TRAVERSE"
 373+ 6FF4 45 52 53 45 >
 373+ 6FF8             >len_NFA         defl    $ - temp_NFA
 373+ 6FF8             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 373+ 6FF0             >
 373+ 6FF0 88          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 373+ 6FF1 54 52 41 56 >                db      "TRAVERSE"               // name string in 7-bit ascii, but
 373+ 6FF5 45 52 53 45 >
 373+ 6FF9             >                org     $-1                 // alter last byte of Name just above to set
 373+ 6FF8 C5          >                db      {b $} | END_BIT     // msb as name end
 373+ 6FF9             >
 373+ 6FF9 E0 6F       >                dw      last_NFA            // Link to previous definition Name
 373+ 6FFB             >TRAVERSE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 373+ 6FFB 81 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 373+ 6FFD             >                else
 373+ 6FFD ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 373+ 6FFD             >                endif           ; ok        // for other definitions it "points" the correct handler
 373+ 6FFD             >                // Use of "; ok" to suppress "warning[fwdref]"
 373+ 6FFD             >
 373+ 6FFD             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 374+ 6FFD F6 6A                        dw      SWAP                    // swap
 375+ 6FFF              Traverse_Begin:                                 // begin
 376+ 6FFF BE 6A 23 6A                  dw          OVER, PLUS          //      over +
 377+ 7003 A9 63 7F 00                  dw          LIT, 127            //      127
 378+ 7007 BE 6A B1 6B                  dw          OVER, CFETCH        //      over @
 379+ 700B 5F 6F                        dw          LESS                //      <
 380+ 700D                                                              // until
 381+ 700D 2C 64                        dw      ZBRANCH
 382+ 700F F0 FF                        dw      Traverse_Begin - $
 383+ 7011 D9 6A                        dw      NIP                     //  nip
 384+ 7013 9E 69                        dw      EXIT                    //  ;
 385+ 7015
 386+ 7015              //  ______________________________________________________________________
 387+ 7015              //
 388+ 7015              // latest       -- nfa
 389+ 7015                              Colon_Def LATEST, "LATEST", is_normal
 389+ 7015             >                New_Def  LATEST, "LATEST", Enter_Ptr, is_normal ; ok
 389+ 7015             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 389+ 7015             >
 389+ 7015             >                // dummy db directives used to calculate length of namec
 389+ 7015 4C 41 54 45 >                db      "LATEST"
 389+ 7019 53 54       >
 389+ 701B             >len_NFA         defl    $ - temp_NFA
 389+ 701B             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 389+ 7015             >
 389+ 7015 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 389+ 7016 4C 41 54 45 >                db      "LATEST"               // name string in 7-bit ascii, but
 389+ 701A 53 54       >
 389+ 701C             >                org     $-1                 // alter last byte of Name just above to set
 389+ 701B D4          >                db      {b $} | END_BIT     // msb as name end
 389+ 701C             >
 389+ 701C F0 6F       >                dw      last_NFA            // Link to previous definition Name
 389+ 701E             >LATEST:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 389+ 701E 81 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 389+ 7020             >                else
 389+ 7020 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 389+ 7020             >                endif           ; ok        // for other definitions it "points" the correct handler
 389+ 7020             >                // Use of "; ok" to suppress "warning[fwdref]"
 389+ 7020             >
 389+ 7020             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 390+ 7020 3E 6E                        dw      CURRENT                 // current
 391+ 7022 96 6B 96 6B                  dw      FETCH, FETCH            // @ @
 392+ 7026 9E 69                        dw      EXIT                    // ;
 393+ 7028
 394+ 7028              //  ______________________________________________________________________
 395+ 7028              //
 396+ 7028              // lfa          pfa -- lfa
 397+ 7028                              Colon_Def LFA, "LFA", is_normal
 397+ 7028             >                New_Def  LFA, "LFA", Enter_Ptr, is_normal ; ok
 397+ 7028             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 397+ 7028             >
 397+ 7028             >                // dummy db directives used to calculate length of namec
 397+ 7028 4C 46 41    >                db      "LFA"
 397+ 702B             >len_NFA         defl    $ - temp_NFA
 397+ 702B             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 397+ 7028             >
 397+ 7028 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 397+ 7029 4C 46 41    >                db      "LFA"               // name string in 7-bit ascii, but
 397+ 702C             >                org     $-1                 // alter last byte of Name just above to set
 397+ 702B C1          >                db      {b $} | END_BIT     // msb as name end
 397+ 702C             >
 397+ 702C 15 70       >                dw      last_NFA            // Link to previous definition Name
 397+ 702E             >LFA:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 397+ 702E 81 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 397+ 7030             >                else
 397+ 7030 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 397+ 7030             >                endif           ; ok        // for other definitions it "points" the correct handler
 397+ 7030             >                // Use of "; ok" to suppress "warning[fwdref]"
 397+ 7030             >
 397+ 7030             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 398+ 7030 76 6A                        dw      CELL_MINUS              // cell-
 399+ 7032 76 6A                        dw      CELL_MINUS              // cell-
 400+ 7034 9E 69                        dw      EXIT                    // ;
 401+ 7036
 402+ 7036              //  ______________________________________________________________________
 403+ 7036              //
 404+ 7036              // cfa          pfa -- cfa
 405+ 7036                              Colon_Def CFA, "CFA", is_normal
 405+ 7036             >                New_Def  CFA, "CFA", Enter_Ptr, is_normal ; ok
 405+ 7036             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 405+ 7036             >
 405+ 7036             >                // dummy db directives used to calculate length of namec
 405+ 7036 43 46 41    >                db      "CFA"
 405+ 7039             >len_NFA         defl    $ - temp_NFA
 405+ 7039             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 405+ 7036             >
 405+ 7036 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 405+ 7037 43 46 41    >                db      "CFA"               // name string in 7-bit ascii, but
 405+ 703A             >                org     $-1                 // alter last byte of Name just above to set
 405+ 7039 C1          >                db      {b $} | END_BIT     // msb as name end
 405+ 703A             >
 405+ 703A 28 70       >                dw      last_NFA            // Link to previous definition Name
 405+ 703C             >CFA:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 405+ 703C 81 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 405+ 703E             >                else
 405+ 703E ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 405+ 703E             >                endif           ; ok        // for other definitions it "points" the correct handler
 405+ 703E             >                // Use of "; ok" to suppress "warning[fwdref]"
 405+ 703E             >
 405+ 703E             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 406+ 703E 76 6A                        dw      CELL_MINUS              // cell-
 407+ 7040 9E 69                        dw      EXIT                    // ;
 408+ 7042
 409+ 7042              //  ______________________________________________________________________
 410+ 7042              //
 411+ 7042              // nfa          pfa -- nfa
 412+ 7042                              Colon_Def NFA, "NFA", is_normal
 412+ 7042             >                New_Def  NFA, "NFA", Enter_Ptr, is_normal ; ok
 412+ 7042             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 412+ 7042             >
 412+ 7042             >                // dummy db directives used to calculate length of namec
 412+ 7042 4E 46 41    >                db      "NFA"
 412+ 7045             >len_NFA         defl    $ - temp_NFA
 412+ 7045             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 412+ 7042             >
 412+ 7042 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 412+ 7043 4E 46 41    >                db      "NFA"               // name string in 7-bit ascii, but
 412+ 7046             >                org     $-1                 // alter last byte of Name just above to set
 412+ 7045 C1          >                db      {b $} | END_BIT     // msb as name end
 412+ 7046             >
 412+ 7046 36 70       >                dw      last_NFA            // Link to previous definition Name
 412+ 7048             >NFA:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 412+ 7048 81 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 412+ 704A             >                else
 412+ 704A ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 412+ 704A             >                endif           ; ok        // for other definitions it "points" the correct handler
 412+ 704A             >                // Use of "; ok" to suppress "warning[fwdref]"
 412+ 704A             >
 412+ 704A             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 413+ 704A A9 63 05 00                  dw      LIT, 5                  // 5
 414+ 704E 30 6F                        dw      SUBTRACT                // -
 415+ 7050 1F 6D                        dw      NEG_ONE                 // -1
 416+ 7052 FB 6F                        dw      TRAVERSE                // traverse
 417+ 7054 9E 69                        dw      EXIT                    // ;
 418+ 7056
 419+ 7056              //  ______________________________________________________________________
 420+ 7056              //
 421+ 7056              // pfa          nfa -- pfa
 422+ 7056                              Colon_Def PFA, "PFA", is_normal
 422+ 7056             >                New_Def  PFA, "PFA", Enter_Ptr, is_normal ; ok
 422+ 7056             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 422+ 7056             >
 422+ 7056             >                // dummy db directives used to calculate length of namec
 422+ 7056 50 46 41    >                db      "PFA"
 422+ 7059             >len_NFA         defl    $ - temp_NFA
 422+ 7059             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 422+ 7056             >
 422+ 7056 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 422+ 7057 50 46 41    >                db      "PFA"               // name string in 7-bit ascii, but
 422+ 705A             >                org     $-1                 // alter last byte of Name just above to set
 422+ 7059 C1          >                db      {b $} | END_BIT     // msb as name end
 422+ 705A             >
 422+ 705A 42 70       >                dw      last_NFA            // Link to previous definition Name
 422+ 705C             >PFA:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 422+ 705C 81 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 422+ 705E             >                else
 422+ 705E ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 422+ 705E             >                endif           ; ok        // for other definitions it "points" the correct handler
 422+ 705E             >                // Use of "; ok" to suppress "warning[fwdref]"
 422+ 705E             >
 422+ 705E             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 423+ 705E 06 6D                        dw      ONE                     // 1
 424+ 7060 FB 6F                        dw      TRAVERSE                // traverse
 425+ 7062 A9 63 05 00                  dw      LIT, 5                  // 6
 426+ 7066 23 6A                        dw      PLUS                    // +
 427+ 7068 9E 69                        dw      EXIT                    // ;
 428+ 706A
 429+ 706A              //  ______________________________________________________________________
 430+ 706A              //
 431+ 706A              // >body        cfa -- pfa
 432+ 706A                              Colon_Def TO_BODY, ">BODY", is_normal
 432+ 706A             >                New_Def  TO_BODY, ">BODY", Enter_Ptr, is_normal ; ok
 432+ 706A             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 432+ 706A             >
 432+ 706A             >                // dummy db directives used to calculate length of namec
 432+ 706A 3E 42 4F 44 >                db      ">BODY"
 432+ 706E 59          >
 432+ 706F             >len_NFA         defl    $ - temp_NFA
 432+ 706F             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 432+ 706A             >
 432+ 706A 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 432+ 706B 3E 42 4F 44 >                db      ">BODY"               // name string in 7-bit ascii, but
 432+ 706F 59          >
 432+ 7070             >                org     $-1                 // alter last byte of Name just above to set
 432+ 706F D9          >                db      {b $} | END_BIT     // msb as name end
 432+ 7070             >
 432+ 7070 56 70       >                dw      last_NFA            // Link to previous definition Name
 432+ 7072             >TO_BODY:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 432+ 7072 81 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 432+ 7074             >                else
 432+ 7074 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 432+ 7074             >                endif           ; ok        // for other definitions it "points" the correct handler
 432+ 7074             >                // Use of "; ok" to suppress "warning[fwdref]"
 432+ 7074             >
 432+ 7074             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 433+ 7074 6C 6A                        dw      CELL_PLUS               // cell+
 434+ 7076 9E 69                        dw      EXIT                    // ;
 435+ 7078
 436+ 7078              //  ______________________________________________________________________
 437+ 7078              //
 438+ 7078              // <name        cfa -- nfa
 439+ 7078                              Colon_Def TO_NAME, "<NAME", is_normal
 439+ 7078             >                New_Def  TO_NAME, "<NAME", Enter_Ptr, is_normal ; ok
 439+ 7078             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 439+ 7078             >
 439+ 7078             >                // dummy db directives used to calculate length of namec
 439+ 7078 3C 4E 41 4D >                db      "<NAME"
 439+ 707C 45          >
 439+ 707D             >len_NFA         defl    $ - temp_NFA
 439+ 707D             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 439+ 7078             >
 439+ 7078 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 439+ 7079 3C 4E 41 4D >                db      "<NAME"               // name string in 7-bit ascii, but
 439+ 707D 45          >
 439+ 707E             >                org     $-1                 // alter last byte of Name just above to set
 439+ 707D C5          >                db      {b $} | END_BIT     // msb as name end
 439+ 707E             >
 439+ 707E 6A 70       >                dw      last_NFA            // Link to previous definition Name
 439+ 7080             >TO_NAME:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 439+ 7080 81 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 439+ 7082             >                else
 439+ 7082 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 439+ 7082             >                endif           ; ok        // for other definitions it "points" the correct handler
 439+ 7082             >                // Use of "; ok" to suppress "warning[fwdref]"
 439+ 7082             >
 439+ 7082             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 440+ 7082 72 70                        dw      TO_BODY                 // >body
 441+ 7084 48 70                        dw      NFA                     // nfa
 442+ 7086 9E 69                        dw      EXIT                    // ;
 443+ 7088
 444+ 7088              //  ______________________________________________________________________
 445+ 7088              //
 446+ 7088              // !csp         --
 447+ 7088              // store in user variable CSP current value of SP. Used at compile-time for syntax checkng
 448+ 7088                              Colon_Def STORE_CSP, "!CSP", is_normal
 448+ 7088             >                New_Def  STORE_CSP, "!CSP", Enter_Ptr, is_normal ; ok
 448+ 7088             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 448+ 7088             >
 448+ 7088             >                // dummy db directives used to calculate length of namec
 448+ 7088 21 43 53 50 >                db      "!CSP"
 448+ 708C             >len_NFA         defl    $ - temp_NFA
 448+ 708C             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 448+ 7088             >
 448+ 7088 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 448+ 7089 21 43 53 50 >                db      "!CSP"               // name string in 7-bit ascii, but
 448+ 708D             >                org     $-1                 // alter last byte of Name just above to set
 448+ 708C D0          >                db      {b $} | END_BIT     // msb as name end
 448+ 708D             >
 448+ 708D 78 70       >                dw      last_NFA            // Link to previous definition Name
 448+ 708F             >STORE_CSP:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 448+ 708F 81 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 448+ 7091             >                else
 448+ 7091 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 448+ 7091             >                endif           ; ok        // for other definitions it "points" the correct handler
 448+ 7091             >                // Use of "; ok" to suppress "warning[fwdref]"
 448+ 7091             >
 448+ 7091             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 449+ 7091 66 69                        dw      SPFETCH                 // sp@
 450+ 7093 6E 6E A3 6B                  dw      CSP, STORE              // csp !
 451+ 7097 9E 69                        dw      EXIT                    // ;
 452+ 7099
 453+ 7099              //  ______________________________________________________________________
 454+ 7099              //
 455+ 7099              // ?error       f n --
 456+ 7099              // rase error n if flag f it true
 457+ 7099                              Colon_Def QERROR, "?ERROR", is_normal
 457+ 7099             >                New_Def  QERROR, "?ERROR", Enter_Ptr, is_normal ; ok
 457+ 7099             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 457+ 7099             >
 457+ 7099             >                // dummy db directives used to calculate length of namec
 457+ 7099 3F 45 52 52 >                db      "?ERROR"
 457+ 709D 4F 52       >
 457+ 709F             >len_NFA         defl    $ - temp_NFA
 457+ 709F             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 457+ 7099             >
 457+ 7099 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 457+ 709A 3F 45 52 52 >                db      "?ERROR"               // name string in 7-bit ascii, but
 457+ 709E 4F 52       >
 457+ 70A0             >                org     $-1                 // alter last byte of Name just above to set
 457+ 709F D2          >                db      {b $} | END_BIT     // msb as name end
 457+ 70A0             >
 457+ 70A0 88 70       >                dw      last_NFA            // Link to previous definition Name
 457+ 70A2             >QERROR:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 457+ 70A2 81 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 457+ 70A4             >                else
 457+ 70A4 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 457+ 70A4             >                endif           ; ok        // for other definitions it "points" the correct handler
 457+ 70A4             >                // Use of "; ok" to suppress "warning[fwdref]"
 457+ 70A4             >
 457+ 70A4             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 458+ 70A4 F6 6A                        dw      SWAP                    // swap
 459+ 70A6                                                              // if
 460+ 70A6 2C 64                        dw      ZBRANCH
 461+ 70A8 08 00                        dw      QError_Else - $
 462+ 70AA 0B 76                        dw          ERROR               //      error  ( is a forward-ref )
 463+ 70AC                                                              // else
 464+ 70AC 15 64                        dw      BRANCH
 465+ 70AE 04 00                        dw      QError_Endif - $
 466+ 70B0              QError_Else:
 467+ 70B0 CE 6A                        dw          DROP                //      drop
 468+ 70B2              QError_Endif:                                   // endif
 469+ 70B2 9E 69                        dw      EXIT                    // ;
 470+ 70B4
 471+ 70B4              //  ______________________________________________________________________
 472+ 70B4              //
 473+ 70B4              // ?comp       --
 474+ 70B4              // raise msg #17 if not compiling
 475+ 70B4                              Colon_Def QCOMP, "?COMP", is_normal
 475+ 70B4             >                New_Def  QCOMP, "?COMP", Enter_Ptr, is_normal ; ok
 475+ 70B4             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 475+ 70B4             >
 475+ 70B4             >                // dummy db directives used to calculate length of namec
 475+ 70B4 3F 43 4F 4D >                db      "?COMP"
 475+ 70B8 50          >
 475+ 70B9             >len_NFA         defl    $ - temp_NFA
 475+ 70B9             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 475+ 70B4             >
 475+ 70B4 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 475+ 70B5 3F 43 4F 4D >                db      "?COMP"               // name string in 7-bit ascii, but
 475+ 70B9 50          >
 475+ 70BA             >                org     $-1                 // alter last byte of Name just above to set
 475+ 70B9 D0          >                db      {b $} | END_BIT     // msb as name end
 475+ 70BA             >
 475+ 70BA 99 70       >                dw      last_NFA            // Link to previous definition Name
 475+ 70BC             >QCOMP:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 475+ 70BC 81 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 475+ 70BE             >                else
 475+ 70BE ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 475+ 70BE             >                endif           ; ok        // for other definitions it "points" the correct handler
 475+ 70BE             >                // Use of "; ok" to suppress "warning[fwdref]"
 475+ 70BE             >
 475+ 70BE             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 476+ 70BE 49 6E 96 6B                  dw      STATE, FETCH            // state @
 477+ 70C2 E0 69                        dw      ZEQUAL                  // 0=
 478+ 70C4 A9 63 11 00                  dw      LIT, 17                 // 17  ( can't be executed )
 479+ 70C8 A2 70                        dw      QERROR                  // ?error
 480+ 70CA 9E 69                        dw      EXIT                    // ;
 481+ 70CC
 482+ 70CC              //  ______________________________________________________________________
 483+ 70CC              //
 484+ 70CC              // ?exec       --
 485+ 70CC              // raise msg #18 if compiling
 486+ 70CC                              Colon_Def QEXEC, "?EXEC", is_normal
 486+ 70CC             >                New_Def  QEXEC, "?EXEC", Enter_Ptr, is_normal ; ok
 486+ 70CC             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 486+ 70CC             >
 486+ 70CC             >                // dummy db directives used to calculate length of namec
 486+ 70CC 3F 45 58 45 >                db      "?EXEC"
 486+ 70D0 43          >
 486+ 70D1             >len_NFA         defl    $ - temp_NFA
 486+ 70D1             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 486+ 70CC             >
 486+ 70CC 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 486+ 70CD 3F 45 58 45 >                db      "?EXEC"               // name string in 7-bit ascii, but
 486+ 70D1 43          >
 486+ 70D2             >                org     $-1                 // alter last byte of Name just above to set
 486+ 70D1 C3          >                db      {b $} | END_BIT     // msb as name end
 486+ 70D2             >
 486+ 70D2 B4 70       >                dw      last_NFA            // Link to previous definition Name
 486+ 70D4             >QEXEC:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 486+ 70D4 81 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 486+ 70D6             >                else
 486+ 70D6 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 486+ 70D6             >                endif           ; ok        // for other definitions it "points" the correct handler
 486+ 70D6             >                // Use of "; ok" to suppress "warning[fwdref]"
 486+ 70D6             >
 486+ 70D6             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 487+ 70D6 49 6E 96 6B                  dw      STATE, FETCH            // state @
 488+ 70DA A9 63 12 00                  dw      LIT, 18                 // 18  ( can't be compiled )
 489+ 70DE A2 70                        dw      QERROR                  // ?error
 490+ 70E0 9E 69                        dw      EXIT                    // ;
 491+ 70E2
 492+ 70E2              //  ______________________________________________________________________
 493+ 70E2              //
 494+ 70E2              // ?pairs       n1 n2 --
 495+ 70E2              // raise msg #19 if n1 != n2. Compiler pushes some placeholder to stack for syntax checking
 496+ 70E2                              Colon_Def QPAIRS, "?PAIRS", is_normal
 496+ 70E2             >                New_Def  QPAIRS, "?PAIRS", Enter_Ptr, is_normal ; ok
 496+ 70E2             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 496+ 70E2             >
 496+ 70E2             >                // dummy db directives used to calculate length of namec
 496+ 70E2 3F 50 41 49 >                db      "?PAIRS"
 496+ 70E6 52 53       >
 496+ 70E8             >len_NFA         defl    $ - temp_NFA
 496+ 70E8             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 496+ 70E2             >
 496+ 70E2 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 496+ 70E3 3F 50 41 49 >                db      "?PAIRS"               // name string in 7-bit ascii, but
 496+ 70E7 52 53       >
 496+ 70E9             >                org     $-1                 // alter last byte of Name just above to set
 496+ 70E8 D3          >                db      {b $} | END_BIT     // msb as name end
 496+ 70E9             >
 496+ 70E9 CC 70       >                dw      last_NFA            // Link to previous definition Name
 496+ 70EB             >QPAIRS:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 496+ 70EB 81 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 496+ 70ED             >                else
 496+ 70ED ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 496+ 70ED             >                endif           ; ok        // for other definitions it "points" the correct handler
 496+ 70ED             >                // Use of "; ok" to suppress "warning[fwdref]"
 496+ 70ED             >
 496+ 70ED             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 497+ 70ED 30 6F                        dw      SUBTRACT                // -
 498+ 70EF A9 63 13 00                  dw      LIT, 19                 // 18  ( syntax error )
 499+ 70F3 A2 70                        dw      QERROR                  // ?error
 500+ 70F5 9E 69                        dw      EXIT                    // ;
 501+ 70F7
 502+ 70F7              //  ______________________________________________________________________
 503+ 70F7              //
 504+ 70F7              // ?csp       --
 505+ 70F7              // raise msg #20 if surrent SP in not what previously saved in CSP.
 506+ 70F7              // Compiler relies on that for  syntax checking of structures
 507+ 70F7                              Colon_Def QCSP, "?CSP", is_normal
 507+ 70F7             >                New_Def  QCSP, "?CSP", Enter_Ptr, is_normal ; ok
 507+ 70F7             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 507+ 70F7             >
 507+ 70F7             >                // dummy db directives used to calculate length of namec
 507+ 70F7 3F 43 53 50 >                db      "?CSP"
 507+ 70FB             >len_NFA         defl    $ - temp_NFA
 507+ 70FB             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 507+ 70F7             >
 507+ 70F7 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 507+ 70F8 3F 43 53 50 >                db      "?CSP"               // name string in 7-bit ascii, but
 507+ 70FC             >                org     $-1                 // alter last byte of Name just above to set
 507+ 70FB D0          >                db      {b $} | END_BIT     // msb as name end
 507+ 70FC             >
 507+ 70FC E2 70       >                dw      last_NFA            // Link to previous definition Name
 507+ 70FE             >QCSP:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 507+ 70FE 81 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 507+ 7100             >                else
 507+ 7100 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 507+ 7100             >                endif           ; ok        // for other definitions it "points" the correct handler
 507+ 7100             >                // Use of "; ok" to suppress "warning[fwdref]"
 507+ 7100             >
 507+ 7100             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 508+ 7100 66 69                        dw      SPFETCH                 // sp@
 509+ 7102 6E 6E 96 6B                  dw      CSP, FETCH              // csp @
 510+ 7106 30 6F                        dw      SUBTRACT                // -
 511+ 7108 A9 63 14 00                  dw      LIT, 20                 // 20  ( bad definition end )
 512+ 710C A2 70                        dw      QERROR                  // ?error
 513+ 710E 9E 69                        dw      EXIT                    // ;
 514+ 7110
 515+ 7110              //  ______________________________________________________________________
 516+ 7110              //
 517+ 7110              // ?loading      --
 518+ 7110              // raise msg #22 if not loading
 519+ 7110                              Colon_Def QLOADING, "?LOADING", is_normal
 519+ 7110             >                New_Def  QLOADING, "?LOADING", Enter_Ptr, is_normal ; ok
 519+ 7110             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 519+ 7110             >
 519+ 7110             >                // dummy db directives used to calculate length of namec
 519+ 7110 3F 4C 4F 41 >                db      "?LOADING"
 519+ 7114 44 49 4E 47 >
 519+ 7118             >len_NFA         defl    $ - temp_NFA
 519+ 7118             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 519+ 7110             >
 519+ 7110 88          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 519+ 7111 3F 4C 4F 41 >                db      "?LOADING"               // name string in 7-bit ascii, but
 519+ 7115 44 49 4E 47 >
 519+ 7119             >                org     $-1                 // alter last byte of Name just above to set
 519+ 7118 C7          >                db      {b $} | END_BIT     // msb as name end
 519+ 7119             >
 519+ 7119 F7 70       >                dw      last_NFA            // Link to previous definition Name
 519+ 711B             >QLOADING:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 519+ 711B 81 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 519+ 711D             >                else
 519+ 711D ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 519+ 711D             >                endif           ; ok        // for other definitions it "points" the correct handler
 519+ 711D             >                // Use of "; ok" to suppress "warning[fwdref]"
 519+ 711D             >
 519+ 711D             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 520+ 711D FD 6D 96 6B                  dw      BLK, FETCH              // blk @
 521+ 7121 E0 69                        dw      ZEQUAL                  // 0=
 522+ 7123 A9 63 16 00                  dw      LIT, 22                 // 22  ( aren't loading now )
 523+ 7127 A2 70                        dw      QERROR                  // ?error
 524+ 7129 9E 69                        dw      EXIT                    // ;
 525+ 712B
 526+ 712B              //  ______________________________________________________________________
 527+ 712B              //
 528+ 712B              // compile      --
 529+ 712B              // compiles the following word
 530+ 712B                              Colon_Def COMPILE, "COMPILE", is_normal
 530+ 712B             >                New_Def  COMPILE, "COMPILE", Enter_Ptr, is_normal ; ok
 530+ 712B             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 530+ 712B             >
 530+ 712B             >                // dummy db directives used to calculate length of namec
 530+ 712B 43 4F 4D 50 >                db      "COMPILE"
 530+ 712F 49 4C 45    >
 530+ 7132             >len_NFA         defl    $ - temp_NFA
 530+ 7132             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 530+ 712B             >
 530+ 712B 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 530+ 712C 43 4F 4D 50 >                db      "COMPILE"               // name string in 7-bit ascii, but
 530+ 7130 49 4C 45    >
 530+ 7133             >                org     $-1                 // alter last byte of Name just above to set
 530+ 7132 C5          >                db      {b $} | END_BIT     // msb as name end
 530+ 7133             >
 530+ 7133 10 71       >                dw      last_NFA            // Link to previous definition Name
 530+ 7135             >COMPILE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 530+ 7135 81 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 530+ 7137             >                else
 530+ 7137 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 530+ 7137             >                endif           ; ok        // for other definitions it "points" the correct handler
 530+ 7137             >                // Use of "; ok" to suppress "warning[fwdref]"
 530+ 7137             >
 530+ 7137             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 531+ 7137 BC 70                        dw      QCOMP                   // ?comp
 532+ 7139 C5 69                        dw      R_TO                    // r>
 533+ 713B 03 6B 6C 6A                  dw      DUP, CELL_PLUS          // dup, cell+
 534+ 713F B1 69                        dw      TO_R                    // >r
 535+ 7141 96 6B F9 6E                  dw      FETCH, COMMA            // @ ,
 536+ 7145 9E 69                        dw      EXIT                    // ;
 537+ 7147
 538+ 7147              //  ______________________________________________________________________
 539+ 7147              //
 540+ 7147              // compile,     --
 541+ 7147              // compiles the following word
 542+ 7147                              Colon_Def COMPILE_XT, "COMPILE,", is_normal
 542+ 7147             >                New_Def  COMPILE_XT, "COMPILE,", Enter_Ptr, is_normal ; ok
 542+ 7147             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 542+ 7147             >
 542+ 7147             >                // dummy db directives used to calculate length of namec
 542+ 7147 43 4F 4D 50 >                db      "COMPILE,"
 542+ 714B 49 4C 45 2C >
 542+ 714F             >len_NFA         defl    $ - temp_NFA
 542+ 714F             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 542+ 7147             >
 542+ 7147 88          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 542+ 7148 43 4F 4D 50 >                db      "COMPILE,"               // name string in 7-bit ascii, but
 542+ 714C 49 4C 45 2C >
 542+ 7150             >                org     $-1                 // alter last byte of Name just above to set
 542+ 714F AC          >                db      {b $} | END_BIT     // msb as name end
 542+ 7150             >
 542+ 7150 2B 71       >                dw      last_NFA            // Link to previous definition Name
 542+ 7152             >COMPILE_XT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 542+ 7152 81 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 542+ 7154             >                else
 542+ 7154 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 542+ 7154             >                endif           ; ok        // for other definitions it "points" the correct handler
 542+ 7154             >                // Use of "; ok" to suppress "warning[fwdref]"
 542+ 7154             >
 542+ 7154             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 543+ 7154 BC 70                        dw      QCOMP                   // ?comp
 544+ 7156 F9 6E                        dw      COMMA                   // ,
 545+ 7158 9E 69                        dw      EXIT                    // ;
 546+ 715A
 547+ 715A              //  ______________________________________________________________________
 548+ 715A              //
 549+ 715A              // [            --
 550+ 715A              // stop compilation
 551+ 715A                              Colon_Def SQUARED_OPEN, "[", is_immediate
 551+ 715A             >                New_Def  SQUARED_OPEN, "[", Enter_Ptr, is_immediate ; ok
 551+ 715A             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 551+ 715A             >
 551+ 715A             >                // dummy db directives used to calculate length of namec
 551+ 715A 5B          >                db      "["
 551+ 715B             >len_NFA         defl    $ - temp_NFA
 551+ 715B             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 551+ 715A             >
 551+ 715A C1          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 551+ 715B 5B          >                db      "["               // name string in 7-bit ascii, but
 551+ 715C             >                org     $-1                 // alter last byte of Name just above to set
 551+ 715B DB          >                db      {b $} | END_BIT     // msb as name end
 551+ 715C             >
 551+ 715C 47 71       >                dw      last_NFA            // Link to previous definition Name
 551+ 715E             >SQUARED_OPEN:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 551+ 715E 81 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 551+ 7160             >                else
 551+ 7160 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 551+ 7160             >                endif           ; ok        // for other definitions it "points" the correct handler
 551+ 7160             >                // Use of "; ok" to suppress "warning[fwdref]"
 551+ 7160             >
 551+ 7160             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 552+ 7160 FE 6C                        dw      ZERO                    // 0
 553+ 7162 49 6E A3 6B                  dw      STATE, STORE            // state !
 554+ 7166 9E 69                        dw      EXIT                    // ; immediate
 555+ 7168
 556+ 7168              //  ______________________________________________________________________
 557+ 7168              //
 558+ 7168              // ]            --
 559+ 7168              // start compilation
 560+ 7168                              Colon_Def SQUARED_CLOSE, "]", is_normal
 560+ 7168             >                New_Def  SQUARED_CLOSE, "]", Enter_Ptr, is_normal ; ok
 560+ 7168             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 560+ 7168             >
 560+ 7168             >                // dummy db directives used to calculate length of namec
 560+ 7168 5D          >                db      "]"
 560+ 7169             >len_NFA         defl    $ - temp_NFA
 560+ 7169             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 560+ 7168             >
 560+ 7168 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 560+ 7169 5D          >                db      "]"               // name string in 7-bit ascii, but
 560+ 716A             >                org     $-1                 // alter last byte of Name just above to set
 560+ 7169 DD          >                db      {b $} | END_BIT     // msb as name end
 560+ 716A             >
 560+ 716A 5A 71       >                dw      last_NFA            // Link to previous definition Name
 560+ 716C             >SQUARED_CLOSE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 560+ 716C 81 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 560+ 716E             >                else
 560+ 716E ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 560+ 716E             >                endif           ; ok        // for other definitions it "points" the correct handler
 560+ 716E             >                // Use of "; ok" to suppress "warning[fwdref]"
 560+ 716E             >
 560+ 716E             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 561+ 716E A9 63 C0 00                  dw      LIT, $C0                // 192
 562+ 7172 49 6E A3 6B                  dw      STATE, STORE            // state !
 563+ 7176 9E 69                        dw      EXIT                    // ;
 564+ 7178
 565+ 7178              //  ______________________________________________________________________
 566+ 7178              //
 567+ 7178              // smudge       --
 568+ 7178              // toggle smudge bit of latest definition
 569+ 7178                              Colon_Def SMUDGE, "SMUDGE", is_normal
 569+ 7178             >                New_Def  SMUDGE, "SMUDGE", Enter_Ptr, is_normal ; ok
 569+ 7178             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 569+ 7178             >
 569+ 7178             >                // dummy db directives used to calculate length of namec
 569+ 7178 53 4D 55 44 >                db      "SMUDGE"
 569+ 717C 47 45       >
 569+ 717E             >len_NFA         defl    $ - temp_NFA
 569+ 717E             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 569+ 7178             >
 569+ 7178 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 569+ 7179 53 4D 55 44 >                db      "SMUDGE"               // name string in 7-bit ascii, but
 569+ 717D 47 45       >
 569+ 717F             >                org     $-1                 // alter last byte of Name just above to set
 569+ 717E C5          >                db      {b $} | END_BIT     // msb as name end
 569+ 717F             >
 569+ 717F 68 71       >                dw      last_NFA            // Link to previous definition Name
 569+ 7181             >SMUDGE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 569+ 7181 81 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 569+ 7183             >                else
 569+ 7183 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 569+ 7183             >                endif           ; ok        // for other definitions it "points" the correct handler
 569+ 7183             >                // Use of "; ok" to suppress "warning[fwdref]"
 569+ 7183             >
 569+ 7183             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 570+ 7183 1E 70                        dw      LATEST                  // latest
 571+ 7185 A9 63 20 00                  dw      LIT, SMUDGE_BIT         // 32
 572+ 7189 89 6B                        dw      TOGGLE                  // toggle
 573+ 718B 9E 69                        dw      EXIT                    // ;
 574+ 718D
 575+ 718D              //  ______________________________________________________________________
 576+ 718D              //
 577+ 718D              // immediate    --
 578+ 718D              // make immediate the latest definition
 579+ 718D                              Colon_Def IMMEDIATE, "IMMEDIATE", is_normal
 579+ 718D             >                New_Def  IMMEDIATE, "IMMEDIATE", Enter_Ptr, is_normal ; ok
 579+ 718D             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 579+ 718D             >
 579+ 718D             >                // dummy db directives used to calculate length of namec
 579+ 718D 49 4D 4D 45 >                db      "IMMEDIATE"
 579+ 7191 44 49 41 54 >
 579+ 7195 45          >
 579+ 7196             >len_NFA         defl    $ - temp_NFA
 579+ 7196             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 579+ 718D             >
 579+ 718D 89          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 579+ 718E 49 4D 4D 45 >                db      "IMMEDIATE"               // name string in 7-bit ascii, but
 579+ 7192 44 49 41 54 >
 579+ 7196 45          >
 579+ 7197             >                org     $-1                 // alter last byte of Name just above to set
 579+ 7196 C5          >                db      {b $} | END_BIT     // msb as name end
 579+ 7197             >
 579+ 7197 78 71       >                dw      last_NFA            // Link to previous definition Name
 579+ 7199             >IMMEDIATE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 579+ 7199 81 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 579+ 719B             >                else
 579+ 719B ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 579+ 719B             >                endif           ; ok        // for other definitions it "points" the correct handler
 579+ 719B             >                // Use of "; ok" to suppress "warning[fwdref]"
 579+ 719B             >
 579+ 719B             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 580+ 719B 1E 70                        dw      LATEST                  // latest
 581+ 719D A9 63 40 00                  dw      LIT, $40                // 64
 582+ 71A1 89 6B                        dw      TOGGLE                  // toggle
 583+ 71A3 9E 69                        dw      EXIT                    // ;
 584+ 71A5
 585+ 71A5              //  ______________________________________________________________________
 586+ 71A5              //
 587+ 71A5              // hex          --
 588+ 71A5              // change numeration base
 589+ 71A5                              Colon_Def HEX, "HEX", is_normal
 589+ 71A5             >                New_Def  HEX, "HEX", Enter_Ptr, is_normal ; ok
 589+ 71A5             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 589+ 71A5             >
 589+ 71A5             >                // dummy db directives used to calculate length of namec
 589+ 71A5 48 45 58    >                db      "HEX"
 589+ 71A8             >len_NFA         defl    $ - temp_NFA
 589+ 71A8             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 589+ 71A5             >
 589+ 71A5 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 589+ 71A6 48 45 58    >                db      "HEX"               // name string in 7-bit ascii, but
 589+ 71A9             >                org     $-1                 // alter last byte of Name just above to set
 589+ 71A8 D8          >                db      {b $} | END_BIT     // msb as name end
 589+ 71A9             >
 589+ 71A9 8D 71       >                dw      last_NFA            // Link to previous definition Name
 589+ 71AB             >HEX:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 589+ 71AB 81 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 589+ 71AD             >                else
 589+ 71AD ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 589+ 71AD             >                endif           ; ok        // for other definitions it "points" the correct handler
 589+ 71AD             >                // Use of "; ok" to suppress "warning[fwdref]"
 589+ 71AD             >
 589+ 71AD             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 590+ 71AD A9 63 10 00                  dw      LIT, 16                 // 16
 591+ 71B1 53 6E A3 6B                  dw      BASE, STORE             // base !
 592+ 71B5 9E 69                        dw      EXIT                    // ;
 593+ 71B7
 594+ 71B7              //  ______________________________________________________________________
 595+ 71B7              //
 596+ 71B7              // decimal      --
 597+ 71B7              // change numeration base
 598+ 71B7                              Colon_Def DECIMAL, "DECIMAL", is_normal
 598+ 71B7             >                New_Def  DECIMAL, "DECIMAL", Enter_Ptr, is_normal ; ok
 598+ 71B7             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 598+ 71B7             >
 598+ 71B7             >                // dummy db directives used to calculate length of namec
 598+ 71B7 44 45 43 49 >                db      "DECIMAL"
 598+ 71BB 4D 41 4C    >
 598+ 71BE             >len_NFA         defl    $ - temp_NFA
 598+ 71BE             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 598+ 71B7             >
 598+ 71B7 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 598+ 71B8 44 45 43 49 >                db      "DECIMAL"               // name string in 7-bit ascii, but
 598+ 71BC 4D 41 4C    >
 598+ 71BF             >                org     $-1                 // alter last byte of Name just above to set
 598+ 71BE CC          >                db      {b $} | END_BIT     // msb as name end
 598+ 71BF             >
 598+ 71BF A5 71       >                dw      last_NFA            // Link to previous definition Name
 598+ 71C1             >DECIMAL:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 598+ 71C1 81 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 598+ 71C3             >                else
 598+ 71C3 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 598+ 71C3             >                endif           ; ok        // for other definitions it "points" the correct handler
 598+ 71C3             >                // Use of "; ok" to suppress "warning[fwdref]"
 598+ 71C3             >
 598+ 71C3             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 599+ 71C3 A9 63 0A 00                  dw      LIT, 10                 // 10
 600+ 71C7 53 6E A3 6B                  dw      BASE, STORE             // base !
 601+ 71CB 9E 69                        dw      EXIT                    // ;
 602+ 71CD
 603+ 71CD              //  ______________________________________________________________________
 604+ 71CD              //
 605+ 71CD              // (;code)       --
 606+ 71CD              // patch to CFA to call/jump to the "following code"
 607+ 71CD                              Colon_Def C_SEMICOLON_CODE, "(;CODE)", is_normal
 607+ 71CD             >                New_Def  C_SEMICOLON_CODE, "(;CODE)", Enter_Ptr, is_normal ; ok
 607+ 71CD             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 607+ 71CD             >
 607+ 71CD             >                // dummy db directives used to calculate length of namec
 607+ 71CD 28 3B 43 4F >                db      "(;CODE)"
 607+ 71D1 44 45 29    >
 607+ 71D4             >len_NFA         defl    $ - temp_NFA
 607+ 71D4             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 607+ 71CD             >
 607+ 71CD 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 607+ 71CE 28 3B 43 4F >                db      "(;CODE)"               // name string in 7-bit ascii, but
 607+ 71D2 44 45 29    >
 607+ 71D5             >                org     $-1                 // alter last byte of Name just above to set
 607+ 71D4 A9          >                db      {b $} | END_BIT     // msb as name end
 607+ 71D5             >
 607+ 71D5 B7 71       >                dw      last_NFA            // Link to previous definition Name
 607+ 71D7             >C_SEMICOLON_CODE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 607+ 71D7 81 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 607+ 71D9             >                else
 607+ 71D9 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 607+ 71D9             >                endif           ; ok        // for other definitions it "points" the correct handler
 607+ 71D9             >                // Use of "; ok" to suppress "warning[fwdref]"
 607+ 71D9             >
 607+ 71D9             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 608+ 71D9 C5 69                        dw      R_TO                    // r>       ( Return Stack has IP to caller's next cell )
 609+ 71DB 1E 70                        dw      LATEST                  // latest   ( Word being defined in this moment )
 610+ 71DD 5C 70 3C 70                  dw      PFA, CFA                // pfa cfa  ( cfa of latest word )
 611+ 71E1
 612+ 71E1
 613+ 71E1
 614+ 71E1
 615+ 71E1
 616+ 71E1 A3 6B                        dw      STORE                   // !
 617+ 71E3 9E 69                        dw      EXIT                    // ;
 618+ 71E5
 619+ 71E5              //  ______________________________________________________________________
 620+ 71E5              //
 621+ 71E5              // ;code        --
 622+ 71E5                              Colon_Def SEMICOLON_CODE, ";CODE", is_immediate
 622+ 71E5             >                New_Def  SEMICOLON_CODE, ";CODE", Enter_Ptr, is_immediate ; ok
 622+ 71E5             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 622+ 71E5             >
 622+ 71E5             >                // dummy db directives used to calculate length of namec
 622+ 71E5 3B 43 4F 44 >                db      ";CODE"
 622+ 71E9 45          >
 622+ 71EA             >len_NFA         defl    $ - temp_NFA
 622+ 71EA             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 622+ 71E5             >
 622+ 71E5 C5          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 622+ 71E6 3B 43 4F 44 >                db      ";CODE"               // name string in 7-bit ascii, but
 622+ 71EA 45          >
 622+ 71EB             >                org     $-1                 // alter last byte of Name just above to set
 622+ 71EA C5          >                db      {b $} | END_BIT     // msb as name end
 622+ 71EB             >
 622+ 71EB CD 71       >                dw      last_NFA            // Link to previous definition Name
 622+ 71ED             >SEMICOLON_CODE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 622+ 71ED 81 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 622+ 71EF             >                else
 622+ 71EF ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 622+ 71EF             >                endif           ; ok        // for other definitions it "points" the correct handler
 622+ 71EF             >                // Use of "; ok" to suppress "warning[fwdref]"
 622+ 71EF             >
 622+ 71EF             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 623+ 71EF FE 70                        dw      QCSP                    // ?csp
 624+ 71F1 35 71                        dw      COMPILE                 // compile
 625+ 71F3 D7 71                        dw      C_SEMICOLON_CODE        // (;code)
 626+ 71F5 5E 71                        dw      SQUARED_OPEN            // [
 627+ 71F7 A9 6C                        dw      NOOP                    // noop () can be patched later to ASSEMBLER... )
 628+ 71F9 9E 69                        dw      EXIT                    // ; immediate
 629+ 71FB
 630+ 71FB              //  ______________________________________________________________________
 631+ 71FB              //
 632+ 71FB              // <builds      --
 633+ 71FB                              Colon_Def CBUILDS, "<BUILDS", is_normal
 633+ 71FB             >                New_Def  CBUILDS, "<BUILDS", Enter_Ptr, is_normal ; ok
 633+ 71FB             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 633+ 71FB             >
 633+ 71FB             >                // dummy db directives used to calculate length of namec
 633+ 71FB 3C 42 55 49 >                db      "<BUILDS"
 633+ 71FF 4C 44 53    >
 633+ 7202             >len_NFA         defl    $ - temp_NFA
 633+ 7202             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 633+ 71FB             >
 633+ 71FB 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 633+ 71FC 3C 42 55 49 >                db      "<BUILDS"               // name string in 7-bit ascii, but
 633+ 7200 4C 44 53    >
 633+ 7203             >                org     $-1                 // alter last byte of Name just above to set
 633+ 7202 D3          >                db      {b $} | END_BIT     // msb as name end
 633+ 7203             >
 633+ 7203 E5 71       >                dw      last_NFA            // Link to previous definition Name
 633+ 7205             >CBUILDS:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 633+ 7205 81 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 633+ 7207             >                else
 633+ 7207 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 633+ 7207             >                endif           ; ok        // for other definitions it "points" the correct handler
 633+ 7207             >                // Use of "; ok" to suppress "warning[fwdref]"
 633+ 7207             >
 633+ 7207             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 634+ 7207 FE 6C                        dw      ZERO                    // 0
 635+ 7209 B8 6C                        dw      CONSTANT                // constant
 636+ 720B 9E 69                        dw      EXIT                    // ;
 637+ 720D
 638+ 720D              //  ______________________________________________________________________
 639+ 720D              //
 640+ 720D              // recurse      --
 641+ 720D              //              Colon_Def RECURSE, "RECURSE", is_immediate
 642+ 720D              //              dw      QCOMP                   // ?comp
 643+ 720D              //              dw      LATEST                  // latest
 644+ 720D              //              dw      PFA, CFA                // pfa cfa
 645+ 720D              //              dw      COMMA                   // ,
 646+ 720D              //              dw      EXIT                    // ; immediate
 647+ 720D
 648+ 720D              //  ______________________________________________________________________
 649+ 720D              //
 650+ 720D              // does>     --
 651+ 720D                              Colon_Def DOES_TO, "DOES>", is_normal
 651+ 720D             >                New_Def  DOES_TO, "DOES>", Enter_Ptr, is_normal ; ok
 651+ 720D             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 651+ 720D             >
 651+ 720D             >                // dummy db directives used to calculate length of namec
 651+ 720D 44 4F 45 53 >                db      "DOES>"
 651+ 7211 3E          >
 651+ 7212             >len_NFA         defl    $ - temp_NFA
 651+ 7212             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 651+ 720D             >
 651+ 720D 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 651+ 720E 44 4F 45 53 >                db      "DOES>"               // name string in 7-bit ascii, but
 651+ 7212 3E          >
 651+ 7213             >                org     $-1                 // alter last byte of Name just above to set
 651+ 7212 BE          >                db      {b $} | END_BIT     // msb as name end
 651+ 7213             >
 651+ 7213 FB 71       >                dw      last_NFA            // Link to previous definition Name
 651+ 7215             >DOES_TO:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 651+ 7215 81 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 651+ 7217             >                else
 651+ 7217 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 651+ 7217             >                endif           ; ok        // for other definitions it "points" the correct handler
 651+ 7217             >                // Use of "; ok" to suppress "warning[fwdref]"
 651+ 7217             >
 651+ 7217             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 652+ 7217 C5 69                        dw      R_TO                    // r>
 653+ 7219 1E 70                        dw      LATEST                  // latest
 654+ 721B 5C 70                        dw      PFA                     // pfa
 655+ 721D A3 6B                        dw      STORE                   // !
 656+ 721F D7 71                        dw      C_SEMICOLON_CODE        // ;code
 657+ 7221              Does_Ptr:
 658+ 7221                              // via call coded in CFA
 659+ 7221                              ldhlrp
 659+ 7221 2A 96 63    >                ld      hl,(RP_Pointer)
 660+ 7224 2B                           dec     hl                  // push on Return-Stack current Instruction-Pointer
 661+ 7225 70                           ld      (hl), b
 662+ 7226 2B                           dec     hl
 663+ 7227 71                           ld      (hl), c
 664+ 7228                              ldrphl
 664+ 7228 22 96 63    >                ld      (RP_Pointer),hl
 665+ 722B 13                           inc     de
 666+ 722C EB                           ex      de, hl
 667+ 722D 4E                           ld      c, (hl)
 668+ 722E 23                           inc     hl
 669+ 722F 46                           ld      b, (hl)
 670+ 7230 23                           inc     hl
 671+ 7231
 672+ 7231                              psh1
 672+ 7231 E5          >                push    hl
 672+ 7232 DD E9       >                jp      (ix)
 673+ 7234                              // SMUDGE !
 674+ 7234
 675+ 7234              //  ______________________________________________________________________
 676+ 7234              //
 677+ 7234              // count        a -- a2 n
 678+ 7234              // expects a counted string at address a, returns string address and counter
 679+ 7234                              New_Def COUNT, "COUNT", is_code, is_normal
 679+ 7234             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 679+ 7234             >
 679+ 7234             >                // dummy db directives used to calculate length of namec
 679+ 7234 43 4F 55 4E >                db      "COUNT"
 679+ 7238 54          >
 679+ 7239             >len_NFA         defl    $ - temp_NFA
 679+ 7239             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 679+ 7234             >
 679+ 7234 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 679+ 7235 43 4F 55 4E >                db      "COUNT"               // name string in 7-bit ascii, but
 679+ 7239 54          >
 679+ 723A             >                org     $-1                 // alter last byte of Name just above to set
 679+ 7239 D4          >                db      {b $} | END_BIT     // msb as name end
 679+ 723A             >
 679+ 723A 0D 72       >                dw      last_NFA            // Link to previous definition Name
 679+ 723C             >COUNT:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 679+ 723C ~           >                dw      runcode ; ok        // for primitive definitions  actual code
 679+ 723C             >                else
 679+ 723C 3E 72       >                dw      $ + 2   ; ok        // is pointed by CFA
 679+ 723E             >                endif           ; ok        // for other definitions it "points" the correct handler
 679+ 723E             >                // Use of "; ok" to suppress "warning[fwdref]"
 679+ 723E             >
 679+ 723E             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 680+ 723E E1                           pop     hl
 681+ 723F 5E                           ld      e, (hl)
 682+ 7240 16 00                        ld      d, 0
 683+ 7242 23                           inc     hl
 684+ 7243              Count_Ptr:
 685+ 7243 E5                           push    hl
 686+ 7244 D5                           push    de
 687+ 7245                              next
 687+ 7245 DD E9       >                jp      (ix)
 688+ 7247
 689+ 7247
 690+ 7247              //  ______________________________________________________________________
 691+ 7247              //
 692+ 7247              // bounds       a n -- a+n n
 693+ 7247              // given an address and a length ( a n ) calculate the bound addresses
 694+ 7247              // suitable for DO-LOOP
 695+ 7247                              New_Def BOUNDS, "BOUNDS", is_code, is_normal
 695+ 7247             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 695+ 7247             >
 695+ 7247             >                // dummy db directives used to calculate length of namec
 695+ 7247 42 4F 55 4E >                db      "BOUNDS"
 695+ 724B 44 53       >
 695+ 724D             >len_NFA         defl    $ - temp_NFA
 695+ 724D             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 695+ 7247             >
 695+ 7247 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 695+ 7248 42 4F 55 4E >                db      "BOUNDS"               // name string in 7-bit ascii, but
 695+ 724C 44 53       >
 695+ 724E             >                org     $-1                 // alter last byte of Name just above to set
 695+ 724D D3          >                db      {b $} | END_BIT     // msb as name end
 695+ 724E             >
 695+ 724E 34 72       >                dw      last_NFA            // Link to previous definition Name
 695+ 7250             >BOUNDS:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 695+ 7250 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
 695+ 7250             >                else
 695+ 7250 52 72       >                dw      $ + 2   ; ok        // is pointed by CFA
 695+ 7252             >                endif           ; ok        // for other definitions it "points" the correct handler
 695+ 7252             >                // Use of "; ok" to suppress "warning[fwdref]"
 695+ 7252             >
 695+ 7252             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 696+ 7252 E1                           pop     hl
 697+ 7253 D1                           pop     de
 698+ 7254 19                           add     hl, de
 699+ 7255 18 EC                        jr      Count_Ptr
 700+ 7257
 701+ 7257              //  ______________________________________________________________________
 702+ 7257              //
 703+ 7257              // type         a n --
 704+ 7257              // Sends to current output channel n characters starting at address a.
 705+ 7257                              Colon_Def TYPE, "TYPE", is_normal
 705+ 7257             >                New_Def  TYPE, "TYPE", Enter_Ptr, is_normal ; ok
 705+ 7257             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 705+ 7257             >
 705+ 7257             >                // dummy db directives used to calculate length of namec
 705+ 7257 54 59 50 45 >                db      "TYPE"
 705+ 725B             >len_NFA         defl    $ - temp_NFA
 705+ 725B             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 705+ 7257             >
 705+ 7257 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 705+ 7258 54 59 50 45 >                db      "TYPE"               // name string in 7-bit ascii, but
 705+ 725C             >                org     $-1                 // alter last byte of Name just above to set
 705+ 725B C5          >                db      {b $} | END_BIT     // msb as name end
 705+ 725C             >
 705+ 725C 47 72       >                dw      last_NFA            // Link to previous definition Name
 705+ 725E             >TYPE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 705+ 725E 81 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 705+ 7260             >                else
 705+ 7260 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 705+ 7260             >                endif           ; ok        // for other definitions it "points" the correct handler
 705+ 7260             >                // Use of "; ok" to suppress "warning[fwdref]"
 705+ 7260             >
 705+ 7260             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 706+ 7260 50 72                        dw      BOUNDS                  // bounds
 707+ 7262 59 64                        dw      C_Q_DO                  // ?do
 708+ 7264 0C 00                        dw      Type_Skip - $
 709+ 7266              Type_Loop:
 710+ 7266 90 64 B1 6B                  dw          I, CFETCH           //      i c@
 711+ 726A CC 6F                        dw          EMIT                //      emit
 712+ 726C 04 64                        dw      C_LOOP                  // loop
 713+ 726E F8 FF                        dw      Type_Loop - $
 714+ 7270              Type_Skip:
 715+ 7270 9E 69                        dw      EXIT                    // ;
 716+ 7272
 717+ 7272              //  ______________________________________________________________________
 718+ 7272              //
 719+ 7272              // leave        --
 720+ 7272              // Compile (leave) to leave current LOOP and jump just after it
 721+ 7272                              Colon_Def LEAVE, "LEAVE", is_immediate
 721+ 7272             >                New_Def  LEAVE, "LEAVE", Enter_Ptr, is_immediate ; ok
 721+ 7272             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 721+ 7272             >
 721+ 7272             >                // dummy db directives used to calculate length of namec
 721+ 7272 4C 45 41 56 >                db      "LEAVE"
 721+ 7276 45          >
 721+ 7277             >len_NFA         defl    $ - temp_NFA
 721+ 7277             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 721+ 7272             >
 721+ 7272 C5          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 721+ 7273 4C 45 41 56 >                db      "LEAVE"               // name string in 7-bit ascii, but
 721+ 7277 45          >
 721+ 7278             >                org     $-1                 // alter last byte of Name just above to set
 721+ 7277 C5          >                db      {b $} | END_BIT     // msb as name end
 721+ 7278             >
 721+ 7278 57 72       >                dw      last_NFA            // Link to previous definition Name
 721+ 727A             >LEAVE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 721+ 727A 81 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 721+ 727C             >                else
 721+ 727C ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 721+ 727C             >                endif           ; ok        // for other definitions it "points" the correct handler
 721+ 727C             >                // Use of "; ok" to suppress "warning[fwdref]"
 721+ 727C             >
 721+ 727C             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 722+ 727C 35 71 41 64                  dw      COMPILE, C_LEAVE       // compile (leave)     \ unloop and branch
 723+ 7280 DD 6E B1 69                  dw      HERE, TO_R, ZERO, COMMA // here >r 0 ,
 723+ 7284 FE 6C F9 6E
 724+ 7288 FE 6C FE 6C                  dw      ZERO, ZERO
 725+ 728C 66 69 03 6B                  dw      SPFETCH, DUP
 726+ 7290 6C 6A 6C 6A                  dw      CELL_PLUS, CELL_PLUS
 727+ 7294 E6 6A                        dw      TUCK
 728+ 7296 6E 6E 96 6B                  dw      CSP, FETCH
 729+ 729A F6 6A 30 6F                  dw      SWAP, SUBTRACT
 730+ 729E 91 68                        dw      CMOVE
 731+ 72A0 6E 6E 96 6B                  dw      CSP, FETCH, CELL_MINUS
 731+ 72A4 76 6A
 732+ 72A6 C5 69 BE 6A                  dw      R_TO, OVER, STORE
 732+ 72AA A3 6B
 733+ 72AC 76 6A FE 6C                  dw      CELL_MINUS, ZERO
 734+ 72B0 F6 6A A3 6B                  dw      SWAP, STORE
 735+ 72B4 9E 69                        dw      EXIT                    // ;
 736+ 72B6
 737+ 72B6              //  ______________________________________________________________________
 738+ 72B6              //
 739+ 72B6              // -trailing    a n1 -- a n2
 740+ 72B6              // Assumes that an n1 bytes-long string is stored at address a
 741+ 72B6              // and the string contains a space delimited word,
 742+ 72B6              // Finds n2 as the position of the first character after the word.
 743+ 72B6                              Colon_Def LTRAILING, "-TRAILING", is_normal
 743+ 72B6             >                New_Def  LTRAILING, "-TRAILING", Enter_Ptr, is_normal ; ok
 743+ 72B6             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 743+ 72B6             >
 743+ 72B6             >                // dummy db directives used to calculate length of namec
 743+ 72B6 2D 54 52 41 >                db      "-TRAILING"
 743+ 72BA 49 4C 49 4E >
 743+ 72BE 47          >
 743+ 72BF             >len_NFA         defl    $ - temp_NFA
 743+ 72BF             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 743+ 72B6             >
 743+ 72B6 89          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 743+ 72B7 2D 54 52 41 >                db      "-TRAILING"               // name string in 7-bit ascii, but
 743+ 72BB 49 4C 49 4E >
 743+ 72BF 47          >
 743+ 72C0             >                org     $-1                 // alter last byte of Name just above to set
 743+ 72BF C7          >                db      {b $} | END_BIT     // msb as name end
 743+ 72C0             >
 743+ 72C0 72 72       >                dw      last_NFA            // Link to previous definition Name
 743+ 72C2             >LTRAILING:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 743+ 72C2 81 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 743+ 72C4             >                else
 743+ 72C4 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 743+ 72C4             >                endif           ; ok        // for other definitions it "points" the correct handler
 743+ 72C4             >                // Use of "; ok" to suppress "warning[fwdref]"
 743+ 72C4             >
 743+ 72C4             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 744+ 72C4 03 6B FE 6C                  dw      DUP, ZERO               // dup 0
 745+ 72C8                                                              // do
 746+ 72C8 59 64                        dw      C_Q_DO
 747+ 72CA 20 00                        dw      LTrailing_Leave - $
 748+ 72CC              LTrailing_Loop:
 749+ 72CC 64 6B 23 6A                  dw          TWO_DUP, PLUS       //      2dup +
 750+ 72D0 50 6A                        dw          ONE_SUBTRACT        //      1-
 751+ 72D2 B1 6B                        dw          CFETCH              //      c@
 752+ 72D4 28 6D 30 6F                  dw          BL, SUBTRACT        //      bl -
 753+ 72D8                                                              //      if
 754+ 72D8 2C 64                        dw          ZBRANCH
 755+ 72DA 0A 00                        dw          LTrailing_Else - $
 756+ 72DC 41 64                        dw              C_LEAVE         //          leave
 757+ 72DE 0C 00                        dw              LTrailing_Leave - $
 758+ 72E0 15 64                        dw          BRANCH              //      else
 759+ 72E2 04 00                        dw          LTrailing_Endif - $
 760+ 72E4              LTrailing_Else:
 761+ 72E4 50 6A                        dw              ONE_SUBTRACT    //          1-
 762+ 72E6              LTrailing_Endif:                                //      endif
 763+ 72E6                                                              // loop
 764+ 72E6 04 64                        dw      C_LOOP
 765+ 72E8 E4 FF                        dw      LTrailing_Loop - $
 766+ 72EA              LTrailing_Leave:
 767+ 72EA 9E 69                        dw      EXIT                    // ;
 768+ 72EC
 769+ 72EC              //  ______________________________________________________________________
 770+ 72EC              //
 771+ 72EC              // accept       a n1 -- n2
 772+ 72EC              // Accepts at most n1 characters from terminal and stores them at address a
 773+ 72EC              // CR stops input. A 'nul' is added as trailer.
 774+ 72EC              // n2 is the string length. n2 is kept in span user variable also.
 775+ 72EC                              Colon_Def ACCEPT, "ACCEPT", is_normal
 775+ 72EC             >                New_Def  ACCEPT, "ACCEPT", Enter_Ptr, is_normal ; ok
 775+ 72EC             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 775+ 72EC             >
 775+ 72EC             >                // dummy db directives used to calculate length of namec
 775+ 72EC 41 43 43 45 >                db      "ACCEPT"
 775+ 72F0 50 54       >
 775+ 72F2             >len_NFA         defl    $ - temp_NFA
 775+ 72F2             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 775+ 72EC             >
 775+ 72EC 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 775+ 72ED 41 43 43 45 >                db      "ACCEPT"               // name string in 7-bit ascii, but
 775+ 72F1 50 54       >
 775+ 72F3             >                org     $-1                 // alter last byte of Name just above to set
 775+ 72F2 D4          >                db      {b $} | END_BIT     // msb as name end
 775+ 72F3             >
 775+ 72F3 B6 72       >                dw      last_NFA            // Link to previous definition Name
 775+ 72F5             >ACCEPT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 775+ 72F5 81 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 775+ 72F7             >                else
 775+ 72F7 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 775+ 72F7             >                endif           ; ok        // for other definitions it "points" the correct handler
 775+ 72F7             >                // Use of "; ok" to suppress "warning[fwdref]"
 775+ 72F7             >
 775+ 72F7             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 776+ 72F7 BE 6A 23 6A                  dw      OVER, PLUS, OVER        //                      ( a  n1+a  a )
 776+ 72FB BE 6A
 777+ 72FD FE 6C 20 6B                  dw      ZERO, DASH_ROT          //                      ( a  0     a+n1  a )
 778+ 7301                                                              // do
 779+ 7301 59 64                        dw      C_Q_DO
 780+ 7303 8A 00                        dw      Accept_Leave - $
 781+ 7305              Accept_Loop:
 782+ 7305 CE 6A B8 66                  dw          DROP, KEY           //      drop key        ( a  c )
 783+ 7309 03 6B                        dw          DUP                 //      dup             ( a  c  c )
 784+ 730B A9 63 0E 00                  dw          LIT, $0E            //      0E
 785+ 730F 64 6D                        dw          PLUS_ORIGIN         //      +origin
 786+ 7311 96 6B                        dw          FETCH               //      @               ( a  c  c  del )
 787+ 7313 3E 6F                        dw          EQUALS              //      =               ( a  c  c==del )
 788+ 7315                                                              //      if
 789+ 7315 2C 64                        dw          ZBRANCH
 790+ 7317 2C 00                        dw          Accept_Else_0 - $
 791+ 7319 CE 6A                        dw              DROP            //          drop        ( a  )
 792+ 731B 03 6B 90 64                  dw              DUP, I, EQUALS  //          dup i =     ( a  a==i )
 792+ 731F 3E 6F
 793+ 7321 06 6D 2E 69                  dw              ONE, AND_OP     //          1 and
 794+ 7325 03 6B                        dw              DUP             //          dup         ( a  a==i  a==i )
 795+ 7327 C5 69                        dw              R_TO            //          r> 2 - + r>
 796+ 7329 83 6A 23 6A                  dw              TWO_MINUS, PLUS //      ( decrement index by 1 or 2 )
 797+ 732D B1 69                        dw              TO_R            //
 798+ 732F                                                              //          if
 799+ 732F 2C 64                        dw              ZBRANCH
 800+ 7331 0A 00                        dw              Accept_Else_1 - $
 801+ 7333 A9 63 07 00                  dw                  LIT, 7      //              7       ( a  7 )
 802+ 7337                                                              //          else
 803+ 7337 15 64                        dw              BRANCH
 804+ 7339 06 00                        dw              Accept_Endif_1 - $
 805+ 733B              Accept_Else_1:
 806+ 733B A9 63 08 00                  dw                  LIT, 8      //              8       ( a  8 )
 807+ 733F              Accept_Endif_1:                                 //          endif
 808+ 733F 15 64                        dw          BRANCH
 809+ 7341 2E 00                        dw          Accept_Endif_0 - $
 810+ 7343              Accept_Else_0:                                  //      else
 811+ 7343 03 6B                        dw              DUP             //          dup         ( a  c  c )
 812+ 7345 A9 63 0D 00                  dw              LIT, 13         //          13
 813+ 7349 3E 6F                        dw              EQUALS          //          =           ( a  c  c==CR )
 814+ 734B                                                              //          if
 815+ 734B 2C 64                        dw              ZBRANCH
 816+ 734D 0C 00                        dw              Accept_Else_2 - $
 817+ 734F CE 6A 28 6D                  dw                  DROP, BL    //              drop bl ( a  bl )
 818+ 7353 FE 6C                        dw                  ZERO        //              0       ( a  c  0 )
 819+ 7355                                                              //          else
 820+ 7355 15 64                        dw              BRANCH
 821+ 7357 04 00                        dw              Accept_Endif_2 - $
 822+ 7359              Accept_Else_2:
 823+ 7359 03 6B                        dw                  DUP         //              dup     ( a  c  c )
 824+ 735B                                                              //          endif
 825+ 735B              Accept_Endif_2:
 826+ 735B 90 64 BF 6B                  dw              I, CSTORE       //          i           ( a  c )
 827+ 735F 03 6B 28 6D                  dw              DUP, BL, LESS   //          dup bl <    ( a  c  c<BL )
 827+ 7363 5F 6F
 828+ 7365                                                              //          if
 829+ 7365 2C 64                        dw              ZBRANCH
 830+ 7367 08 00                        dw              Accept_Endif_3 - $
 831+ 7369 C5 69                        dw                  R_TO        //              r>
 832+ 736B 50 6A                        dw                  ONE_SUBTRACT//              1-
 833+ 736D B1 69                        dw                  TO_R        //              >r
 834+ 736F                                                              //          endif
 835+ 736F              Accept_Endif_3:
 836+ 736F              Accept_Endif_0:                                 //      endif
 837+ 736F CC 6F                        dw          EMIT                //      emit
 838+ 7371 FE 6C 90 64                  dw          ZERO, I, ONE_PLUS   //      0 i 1+ !
 838+ 7375 44 6A
 839+ 7377 A3 6B                        dw          STORE               //          ( zero pad )
 840+ 7379 90 64                        dw          I                   //      i
 841+ 737B 90 64 B1 6B                  dw          I, CFETCH, ZEQUAL   //      i 0= if
 841+ 737F E0 69
 842+ 7381 2C 64                        dw          ZBRANCH             //
 843+ 7383 06 00                        dw              Accept_Endif_4 - $
 844+ 7385 41 64                        dw                  C_LEAVE     //              leave
 845+ 7387 06 00                        dw                  Accept_Leave - $
 846+ 7389              Accept_Endif_4:                                 //      endif
 847+ 7389                                                              // loop
 848+ 7389 04 64                        dw      C_LOOP
 849+ 738B 7A FF                        dw      Accept_Loop - $
 850+ 738D              Accept_Leave:
 851+ 738D F6 6A 30 6F                  dw      SWAP, SUBTRACT          // swap -
 852+ 7391 44 6A                        dw      ONE_PLUS                // 1+
 853+ 7393 03 6B BE 6E                  dw      DUP, SPAN, STORE        // dup span !
 853+ 7397 A3 6B
 854+ 7399 9E 69                        dw      EXIT                    // ;
 855+ 739B
 856+ 739B              //  ______________________________________________________________________
 857+ 739B              //
 858+ 739B              // expect      a n --
 859+ 739B              // Accepts at most n1 characters from terminal and stores them at address a
 860+ 739B              // CR stops input. A 'nul' is added as trailer.
 861+ 739B              // n2 is the string length. n2 is kept in span user variable also.
 862+ 739B              //              Colon_Def EXPECT, "EXPECT", is_normal
 863+ 739B              //              dw      ACCEPT, DROP            // accept drop
 864+ 739B              //              dw      EXIT                    // ;
 865+ 739B
 866+ 739B              //  ______________________________________________________________________
 867+ 739B              //
 868+ 739B              // query        --
 869+ 739B              // Accept at most 80 character from console. CR stops.
 870+ 739B              // Text is stored in TIB. Variable IN is zeroed.
 871+ 739B                              Colon_Def QUERY, "QUERY", is_normal
 871+ 739B             >                New_Def  QUERY, "QUERY", Enter_Ptr, is_normal ; ok
 871+ 739B             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 871+ 739B             >
 871+ 739B             >                // dummy db directives used to calculate length of namec
 871+ 739B 51 55 45 52 >                db      "QUERY"
 871+ 739F 59          >
 871+ 73A0             >len_NFA         defl    $ - temp_NFA
 871+ 73A0             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 871+ 739B             >
 871+ 739B 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 871+ 739C 51 55 45 52 >                db      "QUERY"               // name string in 7-bit ascii, but
 871+ 73A0 59          >
 871+ 73A1             >                org     $-1                 // alter last byte of Name just above to set
 871+ 73A0 D9          >                db      {b $} | END_BIT     // msb as name end
 871+ 73A1             >
 871+ 73A1 EC 72       >                dw      last_NFA            // Link to previous definition Name
 871+ 73A3             >QUERY:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 871+ 73A3 81 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 871+ 73A5             >                else
 871+ 73A5 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 871+ 73A5             >                endif           ; ok        // for other definitions it "points" the correct handler
 871+ 73A5             >                // Use of "; ok" to suppress "warning[fwdref]"
 871+ 73A5             >
 871+ 73A5             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 872+ 73A5 91 6D 96 6B                  dw      TIB, FETCH              // tib @
 873+ 73A9 A9 63 50 00                  dw      LIT, 80                 // 80
 874+ 73AD F5 72 CE 6A                  dw      ACCEPT, DROP            // accept drop
 875+ 73B1 FE 6C 06 6E                  dw      ZERO, TO_IN, STORE      // 0 >in !
 875+ 73B5 A3 6B
 876+ 73B7 9E 69                        dw      EXIT                    // ;
 877+ 73B9
 878+ 73B9              //  ______________________________________________________________________
 879+ 73B9              //
 880+ 73B9              // fill        a n c --
 881+ 73B9              // If n > 0, fills n locations starting from address a with the value c.
 882+ 73B9                              New_Def FILL, "FILL", is_code, is_normal
 882+ 73B9             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 882+ 73B9             >
 882+ 73B9             >                // dummy db directives used to calculate length of namec
 882+ 73B9 46 49 4C 4C >                db      "FILL"
 882+ 73BD             >len_NFA         defl    $ - temp_NFA
 882+ 73BD             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 882+ 73B9             >
 882+ 73B9 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 882+ 73BA 46 49 4C 4C >                db      "FILL"               // name string in 7-bit ascii, but
 882+ 73BE             >                org     $-1                 // alter last byte of Name just above to set
 882+ 73BD CC          >                db      {b $} | END_BIT     // msb as name end
 882+ 73BE             >
 882+ 73BE 9B 73       >                dw      last_NFA            // Link to previous definition Name
 882+ 73C0             >FILL:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 882+ 73C0 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
 882+ 73C0             >                else
 882+ 73C0 C2 73       >                dw      $ + 2   ; ok        // is pointed by CFA
 882+ 73C2             >                endif           ; ok        // for other definitions it "points" the correct handler
 882+ 73C2             >                // Use of "; ok" to suppress "warning[fwdref]"
 882+ 73C2             >
 882+ 73C2             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 883+ 73C2 D9                           exx
 884+ 73C3 D1                           pop     de                  // de has character
 885+ 73C4 C1                           pop     bc                  // bc has counter
 886+ 73C5 E1                           pop     hl                  // hl has address, save Instruction Pointer
 887+ 73C6              Fill_Loop:
 888+ 73C6 78                               ld      a, b
 889+ 73C7 B1                               or      c
 890+ 73C8 28 05                        jr      z, Fill_While_End
 891+ 73CA 73                               ld      (hl), e
 892+ 73CB 0B                               dec     bc
 893+ 73CC 23                               inc     hl
 894+ 73CD 18 F7                        jr      Fill_Loop
 895+ 73CF              Fill_While_End:
 896+ 73CF D9                           exx
 897+ 73D0
 898+ 73D0                              next
 898+ 73D0 DD E9       >                jp      (ix)
 899+ 73D2
 900+ 73D2              //  ______________________________________________________________________
 901+ 73D2              //
 902+ 73D2              // erase        a n --
 903+ 73D2              // If n > 0, fills n locations starting from address a with 'nul' characters.
 904+ 73D2                              Colon_Def ERASE, "ERASE", is_normal
 904+ 73D2             >                New_Def  ERASE, "ERASE", Enter_Ptr, is_normal ; ok
 904+ 73D2             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 904+ 73D2             >
 904+ 73D2             >                // dummy db directives used to calculate length of namec
 904+ 73D2 45 52 41 53 >                db      "ERASE"
 904+ 73D6 45          >
 904+ 73D7             >len_NFA         defl    $ - temp_NFA
 904+ 73D7             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 904+ 73D2             >
 904+ 73D2 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 904+ 73D3 45 52 41 53 >                db      "ERASE"               // name string in 7-bit ascii, but
 904+ 73D7 45          >
 904+ 73D8             >                org     $-1                 // alter last byte of Name just above to set
 904+ 73D7 C5          >                db      {b $} | END_BIT     // msb as name end
 904+ 73D8             >
 904+ 73D8 B9 73       >                dw      last_NFA            // Link to previous definition Name
 904+ 73DA             >ERASE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 904+ 73DA 81 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 904+ 73DC             >                else
 904+ 73DC ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 904+ 73DC             >                endif           ; ok        // for other definitions it "points" the correct handler
 904+ 73DC             >                // Use of "; ok" to suppress "warning[fwdref]"
 904+ 73DC             >
 904+ 73DC             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 905+ 73DC FE 6C C0 73                  dw      ZERO, FILL              // 0 fill
 906+ 73E0 9E 69                        dw      EXIT                    // ;
 907+ 73E2
 908+ 73E2              //  ______________________________________________________________________
 909+ 73E2              //
 910+ 73E2              // blanks       a n --
 911+ 73E2              // If n > 0, fills n locations starting from address a with 'nul' characters.
 912+ 73E2                              Colon_Def BLANKS, "BLANKS", is_normal
 912+ 73E2             >                New_Def  BLANKS, "BLANKS", Enter_Ptr, is_normal ; ok
 912+ 73E2             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 912+ 73E2             >
 912+ 73E2             >                // dummy db directives used to calculate length of namec
 912+ 73E2 42 4C 41 4E >                db      "BLANKS"
 912+ 73E6 4B 53       >
 912+ 73E8             >len_NFA         defl    $ - temp_NFA
 912+ 73E8             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 912+ 73E2             >
 912+ 73E2 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 912+ 73E3 42 4C 41 4E >                db      "BLANKS"               // name string in 7-bit ascii, but
 912+ 73E7 4B 53       >
 912+ 73E9             >                org     $-1                 // alter last byte of Name just above to set
 912+ 73E8 D3          >                db      {b $} | END_BIT     // msb as name end
 912+ 73E9             >
 912+ 73E9 D2 73       >                dw      last_NFA            // Link to previous definition Name
 912+ 73EB             >BLANKS:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 912+ 73EB 81 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 912+ 73ED             >                else
 912+ 73ED ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 912+ 73ED             >                endif           ; ok        // for other definitions it "points" the correct handler
 912+ 73ED             >                // Use of "; ok" to suppress "warning[fwdref]"
 912+ 73ED             >
 912+ 73ED             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 913+ 73ED 28 6D C0 73                  dw      BL, FILL                // bl fill
 914+ 73F1 9E 69                        dw      EXIT                    // ;
 915+ 73F3
 916+ 73F3              //  ______________________________________________________________________
 917+ 73F3              //
 918+ 73F3              // hold         c --
 919+ 73F3              // Used between <# and #> to insert a character c in numeric formatting.
 920+ 73F3                              Colon_Def HOLD, "HOLD", is_normal
 920+ 73F3             >                New_Def  HOLD, "HOLD", Enter_Ptr, is_normal ; ok
 920+ 73F3             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 920+ 73F3             >
 920+ 73F3             >                // dummy db directives used to calculate length of namec
 920+ 73F3 48 4F 4C 44 >                db      "HOLD"
 920+ 73F7             >len_NFA         defl    $ - temp_NFA
 920+ 73F7             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 920+ 73F3             >
 920+ 73F3 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 920+ 73F4 48 4F 4C 44 >                db      "HOLD"               // name string in 7-bit ascii, but
 920+ 73F8             >                org     $-1                 // alter last byte of Name just above to set
 920+ 73F7 C4          >                db      {b $} | END_BIT     // msb as name end
 920+ 73F8             >
 920+ 73F8 E2 73       >                dw      last_NFA            // Link to previous definition Name
 920+ 73FA             >HOLD:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 920+ 73FA 81 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 920+ 73FC             >                else
 920+ 73FC ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 920+ 73FC             >                endif           ; ok        // for other definitions it "points" the correct handler
 920+ 73FC             >                // Use of "; ok" to suppress "warning[fwdref]"
 920+ 73FC             >
 920+ 73FC             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 921+ 73FC 1F 6D                        dw      NEG_ONE                 // -1
 922+ 73FE 7F 6E 73 6B                  dw      HLD, PLUSSTORE          // hld +!
 923+ 7402 7F 6E 96 6B                  dw      HLD, FETCH, CSTORE      // hld @ c!
 923+ 7406 BF 6B
 924+ 7408 9E 69                        dw      EXIT                    // ;
 925+ 740A
 926+ 740A              //  ______________________________________________________________________
 927+ 740A              //
 928+ 740A              // pad         -- a
 929+ 740A              // leaves the buffer text address. This is at a fixed distance over HERE.
 930+ 740A                              Colon_Def PAD, "PAD", is_normal
 930+ 740A             >                New_Def  PAD, "PAD", Enter_Ptr, is_normal ; ok
 930+ 740A             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 930+ 740A             >
 930+ 740A             >                // dummy db directives used to calculate length of namec
 930+ 740A 50 41 44    >                db      "PAD"
 930+ 740D             >len_NFA         defl    $ - temp_NFA
 930+ 740D             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 930+ 740A             >
 930+ 740A 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 930+ 740B 50 41 44    >                db      "PAD"               // name string in 7-bit ascii, but
 930+ 740E             >                org     $-1                 // alter last byte of Name just above to set
 930+ 740D C4          >                db      {b $} | END_BIT     // msb as name end
 930+ 740E             >
 930+ 740E F3 73       >                dw      last_NFA            // Link to previous definition Name
 930+ 7410             >PAD:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 930+ 7410 81 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 930+ 7412             >                else
 930+ 7412 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 930+ 7412             >                endif           ; ok        // for other definitions it "points" the correct handler
 930+ 7412             >                // Use of "; ok" to suppress "warning[fwdref]"
 930+ 7412             >
 930+ 7412             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 931+ 7412 DD 6E                        dw      HERE                    // here
 932+ 7414 A9 63 44 00                  dw      LIT, 68                 // 68
 933+ 7418 23 6A                        dw      PLUS                    // +
 934+ 741A 9E 69                        dw      EXIT                    // ;
 935+ 741C
 936+ 741C              //  ______________________________________________________________________
 937+ 741C              //
 938+ 741C              // word         c -- a
 939+ 741C              // reads characters from input streams until it encouners a c delimiter.
 940+ 741C              // Stores that packet so it starts from HERE
 941+ 741C              // WORD leaves a counter as first byte and ends the packet with two spaces.
 942+ 741C              // Other occurrences of c are ignored.
 943+ 741C              // If BLK is zero, text is taken from terminal buffer TIB.
 944+ 741C              // Otherwise text is taken from the disk-block given by BLK.
 945+ 741C              // "in" variable is incremented of the number of character read.
 946+ 741C              // The number of characters read is given by ENCLOSE.
 947+ 741C                              Colon_Def WORD, "WORD", is_normal
 947+ 741C             >                New_Def  WORD, "WORD", Enter_Ptr, is_normal ; ok
 947+ 741C             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 947+ 741C             >
 947+ 741C             >                // dummy db directives used to calculate length of namec
 947+ 741C 57 4F 52 44 >                db      "WORD"
 947+ 7420             >len_NFA         defl    $ - temp_NFA
 947+ 7420             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 947+ 741C             >
 947+ 741C 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 947+ 741D 57 4F 52 44 >                db      "WORD"               // name string in 7-bit ascii, but
 947+ 7421             >                org     $-1                 // alter last byte of Name just above to set
 947+ 7420 C4          >                db      {b $} | END_BIT     // msb as name end
 947+ 7421             >
 947+ 7421 0A 74       >                dw      last_NFA            // Link to previous definition Name
 947+ 7423             >WORD:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 947+ 7423 81 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 947+ 7425             >                else
 947+ 7425 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 947+ 7425             >                endif           ; ok        // for other definitions it "points" the correct handler
 947+ 7425             >                // Use of "; ok" to suppress "warning[fwdref]"
 947+ 7425             >
 947+ 7425             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 948+ 7425 FD 6D 96 6B                  dw      BLK, FETCH              // blk @
 949+ 7429                                                              // if
 950+ 7429 2C 64                        dw      ZBRANCH
 951+ 742B 0C 00                        dw      Word_Else - $
 952+ 742D FD 6D 96 6B                  dw          BLK, FETCH          //      blk @
 953+ 7431 76 7D                        dw          BLOCK               //      block ( forward )
 954+ 7433                                                              // else
 955+ 7433 15 64                        dw      BRANCH
 956+ 7435 06 00                        dw      Word_Endif - $
 957+ 7437              Word_Else:
 958+ 7437 91 6D 96 6B                  dw         TIB, FETCH           //      tib @
 959+ 743B              Word_Endif:                                     // endif
 960+ 743B 06 6E 96 6B                  dw      TO_IN, FETCH, PLUS      // >in @ +
 960+ 743F 23 6A
 961+ 7441 F6 6A 7E 65                  dw      SWAP, ENCLOSE           // swap enclose
 962+ 7445 DD 6E A9 63                  dw      HERE, LIT, 34, BLANKS   // here 34 blanks
 962+ 7449 22 00 EB 73
 963+ 744D 06 6E 73 6B                  dw      TO_IN, PLUSSTORE        // >in @ +
 964+ 7451 BE 6A 30 6F                  dw      OVER, SUBTRACT, TO_R    // over - >r
 964+ 7455 B1 69
 965+ 7457 D9 69 DD 6E                  dw      R_OP, HERE, CSTORE      // r here c!
 965+ 745B BF 6B
 966+ 745D 23 6A                        dw      PLUS                    // +
 967+ 745F DD 6E 44 6A                  dw      HERE, ONE_PLUS, R_TO    // here 1+ r>
 967+ 7463 C5 69
 968+ 7465 91 68                        dw      CMOVE                   // cmove
 969+ 7467 DD 6E                        dw      HERE                    // here
 970+ 7469 9E 69                        dw      EXIT                    // ;
 971+ 746B
 972+ 746B              //  ______________________________________________________________________
 973+ 746B              //
 974+ 746B              // (.")         --
 975+ 746B              // Direct procedure compiled by ." and  .(  It executes TYPE.
 976+ 746B                              Colon_Def C_DOT_QUOTE, '(.")', is_normal
 976+ 746B             >                New_Def  C_DOT_QUOTE, '(.")', Enter_Ptr, is_normal ; ok
 976+ 746B             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 976+ 746B             >
 976+ 746B             >                // dummy db directives used to calculate length of namec
 976+ 746B 28 2E 22 29 >                db      '(.")'
 976+ 746F             >len_NFA         defl    $ - temp_NFA
 976+ 746F             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 976+ 746B             >
 976+ 746B 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 976+ 746C 28 2E 22 29 >                db      '(.")'               // name string in 7-bit ascii, but
 976+ 7470             >                org     $-1                 // alter last byte of Name just above to set
 976+ 746F A9          >                db      {b $} | END_BIT     // msb as name end
 976+ 7470             >
 976+ 7470 1C 74       >                dw      last_NFA            // Link to previous definition Name
 976+ 7472             >C_DOT_QUOTE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 976+ 7472 81 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 976+ 7474             >                else
 976+ 7474 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 976+ 7474             >                endif           ; ok        // for other definitions it "points" the correct handler
 976+ 7474             >                // Use of "; ok" to suppress "warning[fwdref]"
 976+ 7474             >
 976+ 7474             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 977+ 7474 D9 69 3C 72                  dw      R_OP, COUNT             // r count
 978+ 7478 03 6B 44 6A                  dw      DUP, ONE_PLUS           // dup 1+
 979+ 747C C5 69 23 6A                  dw      R_TO, PLUS, TO_R        // r> + >r  ( advance IP )
 979+ 7480 B1 69
 980+ 7482 5E 72                        dw      TYPE                    // type
 981+ 7484 9E 69                        dw      EXIT                    // ;
 982+ 7486
 983+ 7486              //  ______________________________________________________________________
 984+ 7486              //
 985+ 7486              // char         -- c
 986+ 7486              // get first character from next input word
 987+ 7486                              Colon_Def CHAR,  "CHAR", is_normal
 987+ 7486             >                New_Def  CHAR, "CHAR", Enter_Ptr, is_normal ; ok
 987+ 7486             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 987+ 7486             >
 987+ 7486             >                // dummy db directives used to calculate length of namec
 987+ 7486 43 48 41 52 >                db      "CHAR"
 987+ 748A             >len_NFA         defl    $ - temp_NFA
 987+ 748A             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 987+ 7486             >
 987+ 7486 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 987+ 7487 43 48 41 52 >                db      "CHAR"               // name string in 7-bit ascii, but
 987+ 748B             >                org     $-1                 // alter last byte of Name just above to set
 987+ 748A D2          >                db      {b $} | END_BIT     // msb as name end
 987+ 748B             >
 987+ 748B 6B 74       >                dw      last_NFA            // Link to previous definition Name
 987+ 748D             >CHAR:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 987+ 748D 81 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 987+ 748F             >                else
 987+ 748F ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 987+ 748F             >                endif           ; ok        // for other definitions it "points" the correct handler
 987+ 748F             >                // Use of "; ok" to suppress "warning[fwdref]"
 987+ 748F             >
 987+ 748F             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 988+ 748F 28 6D 23 74                  dw      BL, WORD                // bl word
 989+ 7493 44 6A B1 6B                  dw      ONE_PLUS, CFETCH        // 1+ c@
 990+ 7497 9E 69                        dw      EXIT                    // ;
 991+ 7499
 992+ 7499              //  ______________________________________________________________________
 993+ 7499              //
 994+ 7499              // ,"           --
 995+ 7499              // compiles a string terminated by " as a counted string from next input stream
 996+ 7499                              Colon_Def COMMA_QUOTE,  ',"', is_normal
 996+ 7499             >                New_Def  COMMA_QUOTE, ',"', Enter_Ptr, is_normal ; ok
 996+ 7499             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 996+ 7499             >
 996+ 7499             >                // dummy db directives used to calculate length of namec
 996+ 7499 2C 22       >                db      ',"'
 996+ 749B             >len_NFA         defl    $ - temp_NFA
 996+ 749B             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 996+ 7499             >
 996+ 7499 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 996+ 749A 2C 22       >                db      ',"'               // name string in 7-bit ascii, but
 996+ 749C             >                org     $-1                 // alter last byte of Name just above to set
 996+ 749B A2          >                db      {b $} | END_BIT     // msb as name end
 996+ 749C             >
 996+ 749C 86 74       >                dw      last_NFA            // Link to previous definition Name
 996+ 749E             >COMMA_QUOTE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 996+ 749E 81 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 996+ 74A0             >                else
 996+ 74A0 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 996+ 74A0             >                endif           ; ok        // for other definitions it "points" the correct handler
 996+ 74A0             >                // Use of "; ok" to suppress "warning[fwdref]"
 996+ 74A0             >
 996+ 74A0             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 997+ 74A0 A9 63 22 00                  dw      LIT, DQUOTE_CHAR        // [char] "
 998+ 74A4 23 74                        dw      WORD                    // word
 999+ 74A6 B1 6B 44 6A                  dw      CFETCH, ONE_PLUS        // c@ 1+
1000+ 74AA ED 6E                        dw      ALLOT                   // allot
1001+ 74AC FE 6C 0A 6F                  dw      ZERO, CCOMMA            // 0 c,  ( nul-terminated string - useful anyway )
1002+ 74B0 9E 69                        dw      EXIT
1003+ 74B2
1004+ 74B2              //  ______________________________________________________________________
1005+ 74B2              //
1006+ 74B2              // .c           c --
1007+ 74B2              // intermediate general purpose string builder, used by ." and .(
1008+ 74B2                              Colon_Def DOT_C,  ".C", is_immediate
1008+ 74B2             >                New_Def  DOT_C, ".C", Enter_Ptr, is_immediate ; ok
1008+ 74B2             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1008+ 74B2             >
1008+ 74B2             >                // dummy db directives used to calculate length of namec
1008+ 74B2 2E 43       >                db      ".C"
1008+ 74B4             >len_NFA         defl    $ - temp_NFA
1008+ 74B4             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1008+ 74B2             >
1008+ 74B2 C2          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
1008+ 74B3 2E 43       >                db      ".C"               // name string in 7-bit ascii, but
1008+ 74B5             >                org     $-1                 // alter last byte of Name just above to set
1008+ 74B4 C3          >                db      {b $} | END_BIT     // msb as name end
1008+ 74B5             >
1008+ 74B5 99 74       >                dw      last_NFA            // Link to previous definition Name
1008+ 74B7             >DOT_C:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1008+ 74B7 81 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
1008+ 74B9             >                else
1008+ 74B9 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
1008+ 74B9             >                endif           ; ok        // for other definitions it "points" the correct handler
1008+ 74B9             >                // Use of "; ok" to suppress "warning[fwdref]"
1008+ 74B9             >
1008+ 74B9             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1009+ 74B9 49 6E 96 6B                  dw      STATE, FETCH            // state @
1010+ 74BD                                                              // if
1011+ 74BD 2C 64                        dw      ZBRANCH
1012+ 74BF 12 00                        dw      Dot_C_Else - $
1013+ 74C1 35 71 72 74                  dw          COMPILE, C_DOT_QUOTE //     compile (.")
1014+ 74C5 23 74 B1 6B                  dw          WORD, CFETCH        //      word c@
1015+ 74C9 44 6A ED 6E                  dw          ONE_PLUS, ALLOT     //      1+ allot
1016+ 74CD                                                              // else
1017+ 74CD 15 64                        dw      BRANCH
1018+ 74CF 08 00                        dw      Dot_C_Endif - $
1019+ 74D1              Dot_C_Else:
1020+ 74D1 23 74 3C 72                  dw          WORD, COUNT, TYPE   //      word count type
1020+ 74D5 5E 72
1021+ 74D7              Dot_C_Endif:                                    // endif
1022+ 74D7 9E 69                        dw      EXIT                    ;
1023+ 74D9
1024+ 74D9              //  ______________________________________________________________________
1025+ 74D9              //
1026+ 74D9              // ."           c --
1027+ 74D9                              Colon_Def DOT_QUOTE,  '."', is_immediate
1027+ 74D9             >                New_Def  DOT_QUOTE, '."', Enter_Ptr, is_immediate ; ok
1027+ 74D9             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1027+ 74D9             >
1027+ 74D9             >                // dummy db directives used to calculate length of namec
1027+ 74D9 2E 22       >                db      '."'
1027+ 74DB             >len_NFA         defl    $ - temp_NFA
1027+ 74DB             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1027+ 74D9             >
1027+ 74D9 C2          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
1027+ 74DA 2E 22       >                db      '."'               // name string in 7-bit ascii, but
1027+ 74DC             >                org     $-1                 // alter last byte of Name just above to set
1027+ 74DB A2          >                db      {b $} | END_BIT     // msb as name end
1027+ 74DC             >
1027+ 74DC B2 74       >                dw      last_NFA            // Link to previous definition Name
1027+ 74DE             >DOT_QUOTE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1027+ 74DE 81 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
1027+ 74E0             >                else
1027+ 74E0 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
1027+ 74E0             >                endif           ; ok        // for other definitions it "points" the correct handler
1027+ 74E0             >                // Use of "; ok" to suppress "warning[fwdref]"
1027+ 74E0             >
1027+ 74E0             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1028+ 74E0 A9 63 22 00                  dw      LIT, DQUOTE_CHAR        // [char] "
1029+ 74E4 B7 74                        dw      DOT_C                   // [compile] .c
1030+ 74E6 9E 69                        dw      EXIT                    // ; immediate
1031+ 74E8
1032+ 74E8              //  ______________________________________________________________________
1033+ 74E8              //
1034+ 74E8              // .(           c --
1035+ 74E8                              Colon_Def DOT_BRACKET,  ".(", is_immediate
1035+ 74E8             >                New_Def  DOT_BRACKET, ".(", Enter_Ptr, is_immediate ; ok
1035+ 74E8             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1035+ 74E8             >
1035+ 74E8             >                // dummy db directives used to calculate length of namec
1035+ 74E8 2E 28       >                db      ".("
1035+ 74EA             >len_NFA         defl    $ - temp_NFA
1035+ 74EA             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1035+ 74E8             >
1035+ 74E8 C2          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
1035+ 74E9 2E 28       >                db      ".("               // name string in 7-bit ascii, but
1035+ 74EB             >                org     $-1                 // alter last byte of Name just above to set
1035+ 74EA A8          >                db      {b $} | END_BIT     // msb as name end
1035+ 74EB             >
1035+ 74EB D9 74       >                dw      last_NFA            // Link to previous definition Name
1035+ 74ED             >DOT_BRACKET:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1035+ 74ED 81 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
1035+ 74EF             >                else
1035+ 74EF ~           >                dw      $ + 2   ; ok        // is pointed by CFA
1035+ 74EF             >                endif           ; ok        // for other definitions it "points" the correct handler
1035+ 74EF             >                // Use of "; ok" to suppress "warning[fwdref]"
1035+ 74EF             >
1035+ 74EF             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1036+ 74EF A9 63 29 00                  dw      LIT, ")"                // [char] )
1037+ 74F3 B7 74                        dw      DOT_C                   // [compile] .c
1038+ 74F5 9E 69                        dw      EXIT                    // ; immediate
1039+ 74F7
1040+ 74F7              //  ______________________________________________________________________
1041+ 74F7              //
1042+ 74F7              // (sgn)        a -- a f
1043+ 74F7              // determines if char in addr a is a sign (+ or -), and in that case increments
1044+ 74F7              // a flag. Returns f as the sign, true for negative, false for positive.
1045+ 74F7              // called by NUMBER and (EXP)
1046+ 74F7                              Colon_Def CSGN,  "(SGN)", is_normal
1046+ 74F7             >                New_Def  CSGN, "(SGN)", Enter_Ptr, is_normal ; ok
1046+ 74F7             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1046+ 74F7             >
1046+ 74F7             >                // dummy db directives used to calculate length of namec
1046+ 74F7 28 53 47 4E >                db      "(SGN)"
1046+ 74FB 29          >
1046+ 74FC             >len_NFA         defl    $ - temp_NFA
1046+ 74FC             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1046+ 74F7             >
1046+ 74F7 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1046+ 74F8 28 53 47 4E >                db      "(SGN)"               // name string in 7-bit ascii, but
1046+ 74FC 29          >
1046+ 74FD             >                org     $-1                 // alter last byte of Name just above to set
1046+ 74FC A9          >                db      {b $} | END_BIT     // msb as name end
1046+ 74FD             >
1046+ 74FD E8 74       >                dw      last_NFA            // Link to previous definition Name
1046+ 74FF             >CSGN:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1046+ 74FF 81 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
1046+ 7501             >                else
1046+ 7501 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
1046+ 7501             >                endif           ; ok        // for other definitions it "points" the correct handler
1046+ 7501             >                // Use of "; ok" to suppress "warning[fwdref]"
1046+ 7501             >
1046+ 7501             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1047+ 7501 03 6B 44 6A                  dw      DUP, ONE_PLUS, CFETCH   // dup 1+ c@
1047+ 7505 B1 6B
1048+ 7507 03 6B A9 63                  dw      DUP, LIT, "-", EQUALS   // dup [char] - =
1048+ 750B 2D 00 3E 6F
1049+ 750F                                                              // if
1050+ 750F 2C 64                        dw      ZBRANCH
1051+ 7511 12 00                        dw      CSgn_Else_0 - $
1052+ 7513 CE 6A                        dw          DROP                //      drop
1053+ 7515 44 6A                        dw          ONE_PLUS            //      1+
1054+ 7517 06 6D 5C 6E                  dw          ONE, DPL, PLUSSTORE //      1 dpl +!
1054+ 751B 73 6B
1055+ 751D 06 6D                        dw          ONE                 //      1
1056+ 751F                                                              // else
1057+ 751F 15 64                        dw      BRANCH
1058+ 7521 16 00                        dw      CSgn_Endif_0 - $
1059+ 7523              CSgn_Else_0:
1060+ 7523 A9 63 2B 00                  dw          LIT, "+", EQUALS    //      [char] + =
1060+ 7527 3E 6F
1061+ 7529                                                              //      if
1062+ 7529 2C 64                        dw          ZBRANCH
1063+ 752B 0A 00                        dw          CSgn_Endif_1 - $
1064+ 752D 44 6A                        dw              ONE_PLUS        //          1+
1065+ 752F 06 6D 5C 6E                  dw              ONE, DPL        //          1 dpl
1066+ 7533 73 6B                        dw              PLUSSTORE       //          +!
1067+ 7535              CSgn_Endif_1                                    //      endif
1068+ 7535 FE 6C                        dw          ZERO                //      0
1069+ 7537              CSgn_Endif_0:                                   // endif
1070+ 7537 9E 69                        dw      EXIT
1071+ 7539
1072+ 7539              //  ______________________________________________________________________
1073+ 7539              //
1074+ 7539              // (number)     d a -- d1 a1
1075+ 7539              // using the current BASE parse characters stored in address a
1076+ 7539              // accumulating a double precision integer d
1077+ 7539              // the process stops at the first not-convertible character
1078+ 7539              // A double-number is kept in CPU registers as HLDE.
1079+ 7539              // On the stack a double number is treated as two single numbers
1080+ 7539              // where HL is on the top of the stack and DE is the second from top,
1081+ 7539              // so in the stack memory it appears as LHED.
1082+ 7539              // Instead, in 2VARIABLE a double number is stored as EDLH.
1083+ 7539                              Colon_Def CNUMBER,  "(NUMBER)", is_normal
1083+ 7539             >                New_Def  CNUMBER, "(NUMBER)", Enter_Ptr, is_normal ; ok
1083+ 7539             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1083+ 7539             >
1083+ 7539             >                // dummy db directives used to calculate length of namec
1083+ 7539 28 4E 55 4D >                db      "(NUMBER)"
1083+ 753D 42 45 52 29 >
1083+ 7541             >len_NFA         defl    $ - temp_NFA
1083+ 7541             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1083+ 7539             >
1083+ 7539 88          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1083+ 753A 28 4E 55 4D >                db      "(NUMBER)"               // name string in 7-bit ascii, but
1083+ 753E 42 45 52 29 >
1083+ 7542             >                org     $-1                 // alter last byte of Name just above to set
1083+ 7541 A9          >                db      {b $} | END_BIT     // msb as name end
1083+ 7542             >
1083+ 7542 F7 74       >                dw      last_NFA            // Link to previous definition Name
1083+ 7544             >CNUMBER:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1083+ 7544 81 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
1083+ 7546             >                else
1083+ 7546 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
1083+ 7546             >                endif           ; ok        // for other definitions it "points" the correct handler
1083+ 7546             >                // Use of "; ok" to suppress "warning[fwdref]"
1083+ 7546             >
1083+ 7546             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1084+ 7546                                                              // begin
1085+ 7546              CNumber_Begin:
1086+ 7546 44 6A                        dw          ONE_PLUS            //      1+
1087+ 7548 03 6B B1 69                  dw          DUP, TO_R           //      dup >r
1088+ 754C B1 6B                        dw          CFETCH              //      @
1089+ 754E 53 6E 96 6B                  dw          BASE, FETCH         //      base @
1090+ 7552 B1 64                        dw          DIGIT               //      digit
1091+ 7554                                                              // while
1092+ 7554 2C 64                        dw      ZBRANCH
1093+ 7556 2C 00                        dw      CNumber_While_end - $
1094+ 7558 F6 6A                        dw          SWAP                //      swap
1095+ 755A 53 6E 96 6B                  dw          BASE, FETCH         //      base @
1096+ 755E C4 68                        dw          UM_MUL              //      um*
1097+ 7560 CE 6A 10 6B                  dw          DROP, ROT           //      drop rot
1098+ 7564 53 6E 96 6B                  dw          BASE, FETCH         //      base @
1099+ 7568 C4 68                        dw          UM_MUL              //      um*
1100+ 756A 30 6A                        dw          DPLUS               //      d+
1101+ 756C 5C 6E 96 6B                  dw          DPL, FETCH          //      dpl @
1102+ 7570 44 6A                        dw          ONE_PLUS            //      1+
1103+ 7572                                                              //      if
1104+ 7572 2C 64                        dw          ZBRANCH
1105+ 7574 08 00                        dw          CNumber_Endif - $
1106+ 7576 06 6D 5C 6E                  dw              ONE, DPL        //          1 dpl
1107+ 757A 73 6B                        dw              PLUSSTORE       //          +!
1108+ 757C              CNumber_Endif:                                  //      endif
1109+ 757C C5 69                        dw             R_TO             //      r>  ( balance rp )
1110+ 757E 15 64                        dw      BRANCH
1111+ 7580 C6 FF                        dw      CNumber_Begin - $
1112+ 7582              CNumber_While_end:                              // repeat
1113+ 7582 C5 69                        dw      R_TO                    // r>  ( balance rp on exit while-repeat )
1114+ 7584 9E 69                        dw      EXIT                    // ;
1115+ 7586
1116+ 7586              //  ______________________________________________________________________
1117+ 7586              //
1118+ 7586              // number       a -- d
1119+ 7586                              Colon_Def NUMBER,  "NUMBER", is_normal
1119+ 7586             >                New_Def  NUMBER, "NUMBER", Enter_Ptr, is_normal ; ok
1119+ 7586             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1119+ 7586             >
1119+ 7586             >                // dummy db directives used to calculate length of namec
1119+ 7586 4E 55 4D 42 >                db      "NUMBER"
1119+ 758A 45 52       >
1119+ 758C             >len_NFA         defl    $ - temp_NFA
1119+ 758C             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1119+ 7586             >
1119+ 7586 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1119+ 7587 4E 55 4D 42 >                db      "NUMBER"               // name string in 7-bit ascii, but
1119+ 758B 45 52       >
1119+ 758D             >                org     $-1                 // alter last byte of Name just above to set
1119+ 758C D2          >                db      {b $} | END_BIT     // msb as name end
1119+ 758D             >
1119+ 758D 39 75       >                dw      last_NFA            // Link to previous definition Name
1119+ 758F             >NUMBER:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1119+ 758F 81 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
1119+ 7591             >                else
1119+ 7591 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
1119+ 7591             >                endif           ; ok        // for other definitions it "points" the correct handler
1119+ 7591             >                // Use of "; ok" to suppress "warning[fwdref]"
1119+ 7591             >
1119+ 7591             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1120+ 7591 FE 6C FE 6C                  dw      ZERO, ZERO              // 0 0
1121+ 7595 10 6B                        dw      ROT                     // rot
1122+ 7597 FF 74 B1 69                  dw      CSGN, TO_R              // (sgn) >r
1123+ 759B 1F 6D 5C 6E                  dw      NEG_ONE, DPL, STORE     // -1 dpl !
1123+ 759F A3 6B
1124+ 75A1 44 75                        dw      CNUMBER                 // (number)
1125+ 75A3 03 6B B1 6B                  dw      DUP, CFETCH             // dup c@
1126+ 75A7 A9 63 2E 00                  dw      LIT, 46, EQUALS         // [char] . =  ( decimal point )
1126+ 75AB 3E 6F
1127+ 75AD                                                              // if
1128+ 75AD 2C 64                        dw      ZBRANCH
1129+ 75AF 0A 00                        dw      Number_Endif_1 - $
1130+ 75B1 FE 6C 5C 6E                  dw          ZERO, DPL, STORE    //      0 dpl !
1130+ 75B5 A3 6B
1131+ 75B7 44 75                        dw          CNUMBER             //      (number)
1132+ 75B9              Number_Endif_1:                                 // endif
1133+ 75B9 B1 6B 28 6D                  dw      CFETCH, BL              // c@ bl
1134+ 75BD 30 6F FE 6C                  dw      SUBTRACT, ZERO, QERROR  // - 0 ?error
1134+ 75C1 A2 70
1135+ 75C3 C5 69                        dw      R_TO                    // r>
1136+ 75C5                                                              // if
1137+ 75C5 2C 64                        dw      ZBRANCH
1138+ 75C7 04 00                        dw      Number_Endif_2 - $
1139+ 75C9 A4 6A                        dw          DMINUS              //      dminus
1140+ 75CB              Number_Endif_2:                                 // endif
1141+ 75CB 9E 69                        dw      EXIT                    // ;
1142+ 75CD
1143+ 75CD              //  ______________________________________________________________________
1144+ 75CD              //
1145+ 75CD              // -find        a -- d
1146+ 75CD                              Colon_Def LFIND,  "-FIND", is_normal
1146+ 75CD             >                New_Def  LFIND, "-FIND", Enter_Ptr, is_normal ; ok
1146+ 75CD             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1146+ 75CD             >
1146+ 75CD             >                // dummy db directives used to calculate length of namec
1146+ 75CD 2D 46 49 4E >                db      "-FIND"
1146+ 75D1 44          >
1146+ 75D2             >len_NFA         defl    $ - temp_NFA
1146+ 75D2             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1146+ 75CD             >
1146+ 75CD 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1146+ 75CE 2D 46 49 4E >                db      "-FIND"               // name string in 7-bit ascii, but
1146+ 75D2 44          >
1146+ 75D3             >                org     $-1                 // alter last byte of Name just above to set
1146+ 75D2 C4          >                db      {b $} | END_BIT     // msb as name end
1146+ 75D3             >
1146+ 75D3 86 75       >                dw      last_NFA            // Link to previous definition Name
1146+ 75D5             >LFIND:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1146+ 75D5 81 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
1146+ 75D7             >                else
1146+ 75D7 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
1146+ 75D7             >                endif           ; ok        // for other definitions it "points" the correct handler
1146+ 75D7             >                // Use of "; ok" to suppress "warning[fwdref]"
1146+ 75D7             >
1146+ 75D7             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1147+ 75D7 28 6D 23 74                  dw      BL, WORD                // bl word
1148+ 75DB 31 6E 96 6B                  dw      CONTEXT, FETCH, FETCH   // context @ @
1148+ 75DF 96 6B
1149+ 75E1 26 65                        dw      C_FIND                  // (find)
1150+ 75E3 B1 6F                        dw      QDUP                    // ?dup
1151+ 75E5 E0 69                        dw      ZEQUAL                  // 0=
1152+ 75E7                                                              // if
1153+ 75E7 2C 64                        dw      ZBRANCH
1154+ 75E9 08 00                        dw      LFind_Endif - $
1155+ 75EB DD 6E                        dw          HERE                //      here
1156+ 75ED 1E 70                        dw          LATEST              //      latest
1157+ 75EF 26 65                        dw          C_FIND              //      (find)
1158+ 75F1              LFind_Endif:                                    // endif
1159+ 75F1 9E 69                        dw      EXIT                    // ;
1160+ 75F3
1161+ 75F3              //  ______________________________________________________________________
1162+ 75F3              //
1163+ 75F3              // (abort)      --
1164+ 75F3                              Colon_Def CABORT,  "(ABORT)", is_normal
1164+ 75F3             >                New_Def  CABORT, "(ABORT)", Enter_Ptr, is_normal ; ok
1164+ 75F3             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1164+ 75F3             >
1164+ 75F3             >                // dummy db directives used to calculate length of namec
1164+ 75F3 28 41 42 4F >                db      "(ABORT)"
1164+ 75F7 52 54 29    >
1164+ 75FA             >len_NFA         defl    $ - temp_NFA
1164+ 75FA             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1164+ 75F3             >
1164+ 75F3 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1164+ 75F4 28 41 42 4F >                db      "(ABORT)"               // name string in 7-bit ascii, but
1164+ 75F8 52 54 29    >
1164+ 75FB             >                org     $-1                 // alter last byte of Name just above to set
1164+ 75FA A9          >                db      {b $} | END_BIT     // msb as name end
1164+ 75FB             >
1164+ 75FB CD 75       >                dw      last_NFA            // Link to previous definition Name
1164+ 75FD             >CABORT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1164+ 75FD 81 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
1164+ 75FF             >                else
1164+ 75FF ~           >                dw      $ + 2   ; ok        // is pointed by CFA
1164+ 75FF             >                endif           ; ok        // for other definitions it "points" the correct handler
1164+ 75FF             >                // Use of "; ok" to suppress "warning[fwdref]"
1164+ 75FF             >
1164+ 75FF             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1165+ 75FF C4 78                        dw      ABORT                   // abort
1166+ 7601 9E 69                        dw      EXIT                    // ;
1167+ 7603
1168+ 7603              //  ______________________________________________________________________
1169+ 7603              //
1170+ 7603              // error        n --
1171+ 7603              // raise an error
1172+ 7603              // if WARNING is 0, prints "MSG#n".
1173+ 7603              // if WARNING is 1, prints line n of screen 4.
1174+ 7603              // if WARNING is -1 does (ABORT) that normally does ABORT
1175+ 7603              // value can be negative or beyond block 4.
1176+ 7603                              Colon_Def ERROR,  "ERROR", is_normal
1176+ 7603             >                New_Def  ERROR, "ERROR", Enter_Ptr, is_normal ; ok
1176+ 7603             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1176+ 7603             >
1176+ 7603             >                // dummy db directives used to calculate length of namec
1176+ 7603 45 52 52 4F >                db      "ERROR"
1176+ 7607 52          >
1176+ 7608             >len_NFA         defl    $ - temp_NFA
1176+ 7608             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1176+ 7603             >
1176+ 7603 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1176+ 7604 45 52 52 4F >                db      "ERROR"               // name string in 7-bit ascii, but
1176+ 7608 52          >
1176+ 7609             >                org     $-1                 // alter last byte of Name just above to set
1176+ 7608 D2          >                db      {b $} | END_BIT     // msb as name end
1176+ 7609             >
1176+ 7609 F3 75       >                dw      last_NFA            // Link to previous definition Name
1176+ 760B             >ERROR:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1176+ 760B 81 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
1176+ 760D             >                else
1176+ 760D ~           >                dw      $ + 2   ; ok        // is pointed by CFA
1176+ 760D             >                endif           ; ok        // for other definitions it "points" the correct handler
1176+ 760D             >                // Use of "; ok" to suppress "warning[fwdref]"
1176+ 760D             >
1176+ 760D             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1177+ 760D A9 6D 96 6B                  dw      WARNING, FETCH, ZLESS   // warning @ 0<
1177+ 7611 FB 69
1178+ 7613                                                              // if
1179+ 7613 2C 64                        dw      ZBRANCH
1180+ 7615 04 00                        dw      Error_Endif_1 - $
1181+ 7617 FD 75                        dw          CABORT              //      (abort)
1182+ 7619              Error_Endif_1:                                  // endif
1183+ 7619 DD 6E 3C 72                  dw      HERE, COUNT, TYPE       // here count type
1183+ 761D 5E 72
1184+ 761F 72 74                        dw      C_DOT_QUOTE             // .( ? )
1185+ 7621 02 3F 20                     db      2, "? "
1186+ 7624 F5 7A                        dw      MESSAGE                 // message  ( forward )
1187+ 7626 80 6D 96 6B                  dw      S0, FETCH, SPSTORE      // s0 @ sp!
1187+ 762A 75 69
1188+ 762C FD 6D 96 6B                  dw      BLK, FETCH, QDUP        // blk @ ?dup
1188+ 7630 B1 6F
1189+ 7632                                                              // if
1190+ 7632 2C 64                        dw      ZBRANCH
1191+ 7634 08 00                        dw      Error_Endif_2 - $
1192+ 7636 06 6E 96 6B                  dw          TO_IN, FETCH, SWAP  //      >in @ swap
1192+ 763A F6 6A
1193+ 763C              Error_Endif_2:                                  // endif
1194+ 763C 83 78                        dw      QUIT                    // quit ( forward )
1195+ 763E 9E 69                        dw      EXIT                    // ;
1196+ 7640              //  ______________________________________________________________________
1197+ 7640              //
1198+ 7640              // id.          nfa --
1199+ 7640                              Colon_Def ID_DOT,  "ID.", is_normal
1199+ 7640             >                New_Def  ID_DOT, "ID.", Enter_Ptr, is_normal ; ok
1199+ 7640             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1199+ 7640             >
1199+ 7640             >                // dummy db directives used to calculate length of namec
1199+ 7640 49 44 2E    >                db      "ID."
1199+ 7643             >len_NFA         defl    $ - temp_NFA
1199+ 7643             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1199+ 7640             >
1199+ 7640 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1199+ 7641 49 44 2E    >                db      "ID."               // name string in 7-bit ascii, but
1199+ 7644             >                org     $-1                 // alter last byte of Name just above to set
1199+ 7643 AE          >                db      {b $} | END_BIT     // msb as name end
1199+ 7644             >
1199+ 7644 03 76       >                dw      last_NFA            // Link to previous definition Name
1199+ 7646             >ID_DOT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1199+ 7646 81 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
1199+ 7648             >                else
1199+ 7648 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
1199+ 7648             >                endif           ; ok        // for other definitions it "points" the correct handler
1199+ 7648             >                // Use of "; ok" to suppress "warning[fwdref]"
1199+ 7648             >
1199+ 7648             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1200+ 7648 10 74 A9 63                  dw      PAD, LIT, 32, LIT, 96   // pad 32 96
1200+ 764C 20 00 A9 63
1200+ 7650 60 00
1201+ 7652 C0 73                        dw      FILL                    // fill
1202+ 7654 03 6B 5C 70                  dw      DUP, PFA, LFA           // dup pfa lfa
1202+ 7658 2E 70
1203+ 765A BE 6A 30 6F                  dw      OVER, SUBTRACT          // over -
1204+ 765E 10 74 F6 6A                  dw      PAD, SWAP               // pad swap
1205+ 7662 91 68                        dw      CMOVE                   // cmove
1206+ 7664 10 74 3C 72                  dw      PAD, COUNT, LIT, $1F    // pad count 01F
1206+ 7668 A9 63 1F 00
1207+ 766C 2E 69                        dw      AND_OP                  // and  ( use only lower bits )
1208+ 766E 5E 72 E8 6F                  dw      TYPE, SPACE             // type
1209+ 7672 9E 69                        dw      EXIT                    // ;
1210+ 7674
1211+ 7674              //  ______________________________________________________________________
1212+ 7674              //
1213+ 7674              // code         -- cccc
1214+ 7674                              Colon_Def CODE,  "CODE", is_normal
1214+ 7674             >                New_Def  CODE, "CODE", Enter_Ptr, is_normal ; ok
1214+ 7674             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1214+ 7674             >
1214+ 7674             >                // dummy db directives used to calculate length of namec
1214+ 7674 43 4F 44 45 >                db      "CODE"
1214+ 7678             >len_NFA         defl    $ - temp_NFA
1214+ 7678             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1214+ 7674             >
1214+ 7674 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1214+ 7675 43 4F 44 45 >                db      "CODE"               // name string in 7-bit ascii, but
1214+ 7679             >                org     $-1                 // alter last byte of Name just above to set
1214+ 7678 C5          >                db      {b $} | END_BIT     // msb as name end
1214+ 7679             >
1214+ 7679 40 76       >                dw      last_NFA            // Link to previous definition Name
1214+ 767B             >CODE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1214+ 767B 81 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
1214+ 767D             >                else
1214+ 767D ~           >                dw      $ + 2   ; ok        // is pointed by CFA
1214+ 767D             >                endif           ; ok        // for other definitions it "points" the correct handler
1214+ 767D             >                // Use of "; ok" to suppress "warning[fwdref]"
1214+ 767D             >
1214+ 767D             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1215+ 767D D5 75                        dw      LFIND                   // -find
1216+ 767F                                                              // if
1217+ 767F 2C 64                        dw      ZBRANCH
1218+ 7681 10 00                        dw      Code_Endif - $
1219+ 7683 CE 6A                        dw          DROP                //      drop
1220+ 7685 80 70 46 76                  dw          TO_NAME, ID_DOT     //      >name id.
1221+ 7689 A9 63 04 00                  dw          LIT, 4, MESSAGE     //      4 message
1221+ 768D F5 7A
1222+ 768F E8 6F                        dw          SPACE               //      space
1223+ 7691              Code_Endif:                                     // endif
1224+ 7691 DD 6E                        dw      HERE                    // here
1225+ 7693                                                              // ( ---- here begins NFA ---- )
1226+ 7693 03 6B B1 6B                  dw      DUP, CFETCH             // dup c@
1227+ 7697 9C 6D 96 6B                  dw      WIDTH, FETCH, MIN       // width @ min  ( max 31 character length )
1227+ 769B 84 6F
1228+ 769D 44 6A ED 6E                  dw      ONE_PLUS, ALLOT         // 1+ allot
1229+ 76A1 03 6B                        dw      DUP                     // dup
1230+ 76A3 A9 63                        dw      LIT
1231+ 76A5 A0 00                        dw      SMUDGE_BIT | END_BIT    // 160
1232+ 76A7 89 6B                        dw      TOGGLE                  // toggle
1233+ 76A9 DD 6E 50 6A                  dw      HERE, ONE_SUBTRACT      // here 1- ( last character )
1234+ 76AD A9 63 80 00                  dw      LIT, END_BIT, TOGGLE    // 128 toggle
1234+ 76B1 89 6B
1235+ 76B3                                                              // ( ---- here is LFA ---- )
1236+ 76B3 1E 70 F9 6E                  dw      LATEST, COMMA           // latest ,
1237+ 76B7 3E 6E 96 6B                  dw      CURRENT, FETCH, STORE   // current @ ! ( save this word as the latest )
1237+ 76BB A3 6B
1238+ 76BD DD 6E 6C 6A                  dw      HERE, CELL_PLUS, COMMA  // ( CFA point PFA )
1238+ 76C1 F9 6E
1239+ 76C3 9E 69                        dw      EXIT                    // ;
1240+ 76C5
1241+ 76C5              //  ______________________________________________________________________
1242+ 76C5              //
1243+ 76C5              // create       -- cccc     ( compile time )
1244+ 76C5              //              -- a        ( run time )
1245+ 76C5                              Colon_Def CREATE,  "CREATE", is_normal
1245+ 76C5             >                New_Def  CREATE, "CREATE", Enter_Ptr, is_normal ; ok
1245+ 76C5             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1245+ 76C5             >
1245+ 76C5             >                // dummy db directives used to calculate length of namec
1245+ 76C5 43 52 45 41 >                db      "CREATE"
1245+ 76C9 54 45       >
1245+ 76CB             >len_NFA         defl    $ - temp_NFA
1245+ 76CB             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1245+ 76C5             >
1245+ 76C5 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1245+ 76C6 43 52 45 41 >                db      "CREATE"               // name string in 7-bit ascii, but
1245+ 76CA 54 45       >
1245+ 76CC             >                org     $-1                 // alter last byte of Name just above to set
1245+ 76CB C5          >                db      {b $} | END_BIT     // msb as name end
1245+ 76CC             >
1245+ 76CC 74 76       >                dw      last_NFA            // Link to previous definition Name
1245+ 76CE             >CREATE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1245+ 76CE 81 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
1245+ 76D0             >                else
1245+ 76D0 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
1245+ 76D0             >                endif           ; ok        // for other definitions it "points" the correct handler
1245+ 76D0             >                // Use of "; ok" to suppress "warning[fwdref]"
1245+ 76D0             >
1245+ 76D0             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1246+ 76D0 7B 76 81 71                  dw      CODE, SMUDGE        // code smudge
1247+ 76D4
1248+ 76D4
1249+ 76D4 D7 71                        dw      C_SEMICOLON_CODE
1250+ 76D6                              // this routine is called from the call coded in CFA
1251+ 76D6              Create_Ptr:
1252+ 76D6 13                           inc     de
1253+ 76D7 D5                           push    de                  // balance TOS before overwrite it
1254+ 76D8
1255+ 76D8                              next
1255+ 76D8 DD E9       >                jp      (ix)
1256+ 76DA
1257+ 76DA              //  ______________________________________________________________________
1258+ 76DA              //
1259+ 76DA              // [compile]    -- cccc     ( compile time )
1260+ 76DA                              Colon_Def COMPILE_IMMEDIATE,  "[COMPILE]", is_immediate
1260+ 76DA             >                New_Def  COMPILE_IMMEDIATE, "[COMPILE]", Enter_Ptr, is_immediate ; ok
1260+ 76DA             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1260+ 76DA             >
1260+ 76DA             >                // dummy db directives used to calculate length of namec
1260+ 76DA 5B 43 4F 4D >                db      "[COMPILE]"
1260+ 76DE 50 49 4C 45 >
1260+ 76E2 5D          >
1260+ 76E3             >len_NFA         defl    $ - temp_NFA
1260+ 76E3             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1260+ 76DA             >
1260+ 76DA C9          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
1260+ 76DB 5B 43 4F 4D >                db      "[COMPILE]"               // name string in 7-bit ascii, but
1260+ 76DF 50 49 4C 45 >
1260+ 76E3 5D          >
1260+ 76E4             >                org     $-1                 // alter last byte of Name just above to set
1260+ 76E3 DD          >                db      {b $} | END_BIT     // msb as name end
1260+ 76E4             >
1260+ 76E4 C5 76       >                dw      last_NFA            // Link to previous definition Name
1260+ 76E6             >COMPILE_IMMEDIATE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1260+ 76E6 81 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
1260+ 76E8             >                else
1260+ 76E8 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
1260+ 76E8             >                endif           ; ok        // for other definitions it "points" the correct handler
1260+ 76E8             >                // Use of "; ok" to suppress "warning[fwdref]"
1260+ 76E8             >
1260+ 76E8             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1261+ 76E8 D5 75                        dw      LFIND                   // -find      (  cfa  b  f  )
1262+ 76EA E0 69                        dw      ZEQUAL                  // 0=         (  cfa  b  )
1263+ 76EC FE 6C A2 70                  dw      ZERO, QERROR            // 0 ?error
1264+ 76F0 CE 6A                        dw      DROP                    // drop       (  cfa  )
1265+ 76F2 F9 6E                        dw      COMMA                   // ,
1266+ 76F4 9E 69                        dw      EXIT                    // ; immediate
1267+ 76F6
1268+ 76F6              //  ______________________________________________________________________
1269+ 76F6              //
1270+ 76F6              // literal      n --      ( compile time )
1271+ 76F6                              Colon_Def LITERAL,  "LITERAL", is_immediate
1271+ 76F6             >                New_Def  LITERAL, "LITERAL", Enter_Ptr, is_immediate ; ok
1271+ 76F6             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1271+ 76F6             >
1271+ 76F6             >                // dummy db directives used to calculate length of namec
1271+ 76F6 4C 49 54 45 >                db      "LITERAL"
1271+ 76FA 52 41 4C    >
1271+ 76FD             >len_NFA         defl    $ - temp_NFA
1271+ 76FD             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1271+ 76F6             >
1271+ 76F6 C7          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
1271+ 76F7 4C 49 54 45 >                db      "LITERAL"               // name string in 7-bit ascii, but
1271+ 76FB 52 41 4C    >
1271+ 76FE             >                org     $-1                 // alter last byte of Name just above to set
1271+ 76FD CC          >                db      {b $} | END_BIT     // msb as name end
1271+ 76FE             >
1271+ 76FE DA 76       >                dw      last_NFA            // Link to previous definition Name
1271+ 7700             >LITERAL:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1271+ 7700 81 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
1271+ 7702             >                else
1271+ 7702 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
1271+ 7702             >                endif           ; ok        // for other definitions it "points" the correct handler
1271+ 7702             >                // Use of "; ok" to suppress "warning[fwdref]"
1271+ 7702             >
1271+ 7702             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1272+ 7702 49 6E 96 6B                  dw      STATE, FETCH            // state @
1273+ 7706                                                              // if
1274+ 7706 2C 64                        dw      ZBRANCH
1275+ 7708 08 00                        dw      Literal_Endif - $
1276+ 770A 35 71 A9 63                  dw          COMPILE, LIT        //      compile lit
1277+ 770E F9 6E                        dw          COMMA               //      ,
1278+ 7710              Literal_Endif:                                  // endif
1279+ 7710 9E 69                        dw      EXIT                    // ; immediate
1280+ 7712
1281+ 7712              //  ______________________________________________________________________
1282+ 7712              //
1283+ 7712              // dliteral     n --      ( compile time )
1284+ 7712                              Colon_Def DLITERAL,  "DLITERAL", is_immediate
1284+ 7712             >                New_Def  DLITERAL, "DLITERAL", Enter_Ptr, is_immediate ; ok
1284+ 7712             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1284+ 7712             >
1284+ 7712             >                // dummy db directives used to calculate length of namec
1284+ 7712 44 4C 49 54 >                db      "DLITERAL"
1284+ 7716 45 52 41 4C >
1284+ 771A             >len_NFA         defl    $ - temp_NFA
1284+ 771A             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1284+ 7712             >
1284+ 7712 C8          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
1284+ 7713 44 4C 49 54 >                db      "DLITERAL"               // name string in 7-bit ascii, but
1284+ 7717 45 52 41 4C >
1284+ 771B             >                org     $-1                 // alter last byte of Name just above to set
1284+ 771A CC          >                db      {b $} | END_BIT     // msb as name end
1284+ 771B             >
1284+ 771B F6 76       >                dw      last_NFA            // Link to previous definition Name
1284+ 771D             >DLITERAL:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1284+ 771D 81 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
1284+ 771F             >                else
1284+ 771F ~           >                dw      $ + 2   ; ok        // is pointed by CFA
1284+ 771F             >                endif           ; ok        // for other definitions it "points" the correct handler
1284+ 771F             >                // Use of "; ok" to suppress "warning[fwdref]"
1284+ 771F             >
1284+ 771F             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1285+ 771F 49 6E 96 6B                  dw      STATE, FETCH            // state @
1286+ 7723                                                              // if
1287+ 7723 2C 64                        dw      ZBRANCH
1288+ 7725 08 00                        dw      DLiteral_Endif - $
1289+ 7727 F6 6A                        dw          SWAP                //      swap
1290+ 7729 00 77 00 77                  dw          LITERAL,  LITERAL   //      [compile] literal [compile] literal
1291+ 772D              DLiteral_Endif:                                 // endif
1292+ 772D 9E 69                        dw      EXIT                    // ; immediate
1293+ 772F
1294+ 772F              //  ______________________________________________________________________
1295+ 772F              //
1296+ 772F              // [char]       n --      ( compile time )
1297+ 772F              // inside colon definition, gets first character from next input word
1298+ 772F              // and compiles it as literal.
1299+ 772F                              Colon_Def COMPILE_CHAR,  "[CHAR]", is_immediate
1299+ 772F             >                New_Def  COMPILE_CHAR, "[CHAR]", Enter_Ptr, is_immediate ; ok
1299+ 772F             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1299+ 772F             >
1299+ 772F             >                // dummy db directives used to calculate length of namec
1299+ 772F 5B 43 48 41 >                db      "[CHAR]"
1299+ 7733 52 5D       >
1299+ 7735             >len_NFA         defl    $ - temp_NFA
1299+ 7735             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1299+ 772F             >
1299+ 772F C6          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
1299+ 7730 5B 43 48 41 >                db      "[CHAR]"               // name string in 7-bit ascii, but
1299+ 7734 52 5D       >
1299+ 7736             >                org     $-1                 // alter last byte of Name just above to set
1299+ 7735 DD          >                db      {b $} | END_BIT     // msb as name end
1299+ 7736             >
1299+ 7736 12 77       >                dw      last_NFA            // Link to previous definition Name
1299+ 7738             >COMPILE_CHAR:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1299+ 7738 81 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
1299+ 773A             >                else
1299+ 773A ~           >                dw      $ + 2   ; ok        // is pointed by CFA
1299+ 773A             >                endif           ; ok        // for other definitions it "points" the correct handler
1299+ 773A             >                // Use of "; ok" to suppress "warning[fwdref]"
1299+ 773A             >
1299+ 773A             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1300+ 773A 8D 74 00 77                  dw      CHAR, LITERAL           // char [compile] literal
1301+ 773E 9E 69                        dw      EXIT                    // ; immediate
1302+ 7740
1303+ 7740              //  ______________________________________________________________________
1304+ 7740              //
1305+ 7740              // 0x00         n --      ( compile time )
1306+ 7740                              Colon_Def NUL_WORD,  $00, is_immediate
1306+ 7740             >                New_Def  NUL_WORD, $00, Enter_Ptr, is_immediate ; ok
1306+ 7740             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1306+ 7740             >
1306+ 7740             >                // dummy db directives used to calculate length of namec
1306+ 7740 00          >                db      $00
1306+ 7741             >len_NFA         defl    $ - temp_NFA
1306+ 7741             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1306+ 7740             >
1306+ 7740 C1          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
1306+ 7741 00          >                db      $00               // name string in 7-bit ascii, but
1306+ 7742             >                org     $-1                 // alter last byte of Name just above to set
1306+ 7741 80          >                db      {b $} | END_BIT     // msb as name end
1306+ 7742             >
1306+ 7742 2F 77       >                dw      last_NFA            // Link to previous definition Name
1306+ 7744             >NUL_WORD:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1306+ 7744 81 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
1306+ 7746             >                else
1306+ 7746 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
1306+ 7746             >                endif           ; ok        // for other definitions it "points" the correct handler
1306+ 7746             >                // Use of "; ok" to suppress "warning[fwdref]"
1306+ 7746             >
1306+ 7746             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1307+ 7746 FD 6D 96 6B                  dw      BLK, FETCH, ONE         // blk @ 1
1307+ 774A 06 6D
1308+ 774C 76 6F                        dw      GREATER                 // > if
1309+ 774E                                                              // if
1310+ 774E 2C 64                        dw      ZBRANCH
1311+ 7750 28 00                        dw      Nul_Else_1 - $
1312+ 7752 06 6D FD 6D                  dw          ONE, BLK, PLUSSTORE //      1 blk +!
1312+ 7756 73 6B
1313+ 7758 FE 6C 06 6E                  dw          ZERO, TO_IN, STORE  //      0 >in !
1313+ 775C A3 6B
1314+ 775E FD 6D 96 6B                  dw          BLK, FETCH          //      blk @
1315+ 7762 4A 6D                        dw          BSCR                //      b/scr
1316+ 7764 50 6A                        dw          ONE_SUBTRACT        //      1 -
1317+ 7766 2E 69                        dw          AND_OP              //      and  ( this is tricky )
1318+ 7768 E0 69                        dw          ZEQUAL              //      0=
1319+ 776A                                                              //      if
1320+ 776A 2C 64                        dw          ZBRANCH
1321+ 776C 08 00                        dw          Nul_Endif_2 - $
1322+ 776E D4 70                        dw              QEXEC           //          ?exec
1323+ 7770 C5 69 CE 6A                  dw              R_TO, DROP      //          r> drop
1324+ 7774              Nul_Endif_2:                                    //      endif
1325+ 7774 15 64                        dw      BRANCH
1326+ 7776 06 00                        dw      Nul_Endif_1 - $
1327+ 7778              Nul_Else_1:                                     // else
1328+ 7778 C5 69 CE 6A                  dw          R_TO, DROP          //      r> drop
1329+ 777C              Nul_Endif_1:                                    // endif
1330+ 777C 9E 69                        dw      EXIT                    // ;
1331+ 777E
1332+ 777E              //  ______________________________________________________________________
1333+ 777E              //
1334+ 777E              // ?stack       --
1335+ 777E              // Raise error #1 if stack is empty and you pop it
1336+ 777E              // Raise error #7 if stack is full.
1337+ 777E              // This means SP must always stay between HERE and FFFF
1338+ 777E              // For 128K BANK paging purpose SP must be <= BFE0 and 50 words room
1339+ 777E              // for Next 8K MMU paging this is $DOE8
1340+ 777E                              Colon_Def QSTACK, "?STACK", is_normal
1340+ 777E             >                New_Def  QSTACK, "?STACK", Enter_Ptr, is_normal ; ok
1340+ 777E             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1340+ 777E             >
1340+ 777E             >                // dummy db directives used to calculate length of namec
1340+ 777E 3F 53 54 41 >                db      "?STACK"
1340+ 7782 43 4B       >
1340+ 7784             >len_NFA         defl    $ - temp_NFA
1340+ 7784             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1340+ 777E             >
1340+ 777E 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1340+ 777F 3F 53 54 41 >                db      "?STACK"               // name string in 7-bit ascii, but
1340+ 7783 43 4B       >
1340+ 7785             >                org     $-1                 // alter last byte of Name just above to set
1340+ 7784 CB          >                db      {b $} | END_BIT     // msb as name end
1340+ 7785             >
1340+ 7785 40 77       >                dw      last_NFA            // Link to previous definition Name
1340+ 7787             >QSTACK:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1340+ 7787 81 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
1340+ 7789             >                else
1340+ 7789 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
1340+ 7789             >                endif           ; ok        // for other definitions it "points" the correct handler
1340+ 7789             >                // Use of "; ok" to suppress "warning[fwdref]"
1340+ 7789             >
1340+ 7789             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1341+ 7789 66 69                        dw      SPFETCH                 // sp@
1342+ 778B 80 6D 96 6B                  dw      S0, FETCH               // s0 @
1343+ 778F F6 6A 4B 6F                  dw      SWAP, ULESS             // swap u<
1344+ 7793 06 6D A2 70                  dw      ONE, QERROR             // 1 ?error
1345+ 7797 DD 6E                        dw      HERE                    // here
1346+ 7799 80 6D 96 6B                  dw      S0, FETCH, LESS         // s0 @ <
1346+ 779D 5F 6F
1347+ 779F                                                              // if
1348+ 779F 2C 64                        dw      ZBRANCH
1349+ 77A1 14 00                        dw      QStack_Endif - $
1350+ 77A3 66 69                        dw          SPFETCH             //      sp@
1351+ 77A5 DD 6E A9 63                  dw          HERE, LIT, 128      //      here 128
1351+ 77A9 80 00
1352+ 77AB 23 6A 4B 6F                  dw          PLUS, ULESS         //      plus u<
1353+ 77AF A9 63 07 00                  dw          LIT, 7, QERROR      //      7 Cerror
1353+ 77B3 A2 70
1354+ 77B5              QStack_Endif:                                   // endif
1355+ 77B5 9E 69                        dw      EXIT                    // ;
1356+ 77B7
1357+ 77B7
# file closed: C:\Zx\CSpect\Projects\vForth15_INDIRECT/source/L1.asm
 111  77B7                              include "L2.asm"
# file opened: C:\Zx\CSpect\Projects\vForth15_INDIRECT/source/L2.asm
   1+ 77B7              //  ______________________________________________________________________
   2+ 77B7              //
   3+ 77B7              //  L2.asm
   4+ 77B7              //
   5+ 77B7              //  Level-2
   6+ 77B7              //  the Forth interpreter, vocabulary, cold/warm start and quit from Forth.
   7+ 77B7              //  ______________________________________________________________________
   8+ 77B7
   9+ 77B7
  10+ 77B7              //  ______________________________________________________________________
  11+ 77B7              //
  12+ 77B7              // interpret    --
  13+ 77B7              // This is the text interpreter.
  14+ 77B7              // It executes or compiles, depending on STATE, the text coming from
  15+ 77B7              // current input stream.
  16+ 77B7              // If the word search fails after parsing CONTEXT and CURRENT vocabulary,
  17+ 77B7              // the word is interpreted as numeric and converted, using current BASE,
  18+ 77B7              // leaving on top of stack a single or double precision number, depending
  19+ 77B7              // on the presence of a decimal point.
  20+ 77B7              // If the number conversion fails, the terminal is notified with ? followed
  21+ 77B7              // by the offending word.
  22+ 77B7                              Colon_Def INTERPRET, "INTERPRET", is_normal
  22+ 77B7             >                New_Def  INTERPRET, "INTERPRET", Enter_Ptr, is_normal ; ok
  22+ 77B7             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  22+ 77B7             >
  22+ 77B7             >                // dummy db directives used to calculate length of namec
  22+ 77B7 49 4E 54 45 >                db      "INTERPRET"
  22+ 77BB 52 50 52 45 >
  22+ 77BF 54          >
  22+ 77C0             >len_NFA         defl    $ - temp_NFA
  22+ 77C0             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  22+ 77B7             >
  22+ 77B7 89          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  22+ 77B8 49 4E 54 45 >                db      "INTERPRET"               // name string in 7-bit ascii, but
  22+ 77BC 52 50 52 45 >
  22+ 77C0 54          >
  22+ 77C1             >                org     $-1                 // alter last byte of Name just above to set
  22+ 77C0 D4          >                db      {b $} | END_BIT     // msb as name end
  22+ 77C1             >
  22+ 77C1 7E 77       >                dw      last_NFA            // Link to previous definition Name
  22+ 77C3             >INTERPRET:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
  22+ 77C3 81 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
  22+ 77C5             >                else
  22+ 77C5 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
  22+ 77C5             >                endif           ; ok        // for other definitions it "points" the correct handler
  22+ 77C5             >                // Use of "; ok" to suppress "warning[fwdref]"
  22+ 77C5             >
  22+ 77C5             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  23+ 77C5
  24+ 77C5              Interpret_Begin:                                        // begin
  25+ 77C5 D5 75                        dw          LFIND                       //      -find
  26+ 77C7                                                                      //      if
  27+ 77C7 2C 64                        dw          ZBRANCH
  28+ 77C9 1A 00                        dw          Interpret_Else_1 - $
  29+ 77CB 49 6E 96 6B                  dw              STATE, FETCH, LESS      //          state @ <
  29+ 77CF 5F 6F
  30+ 77D1                                                                      //          if
  31+ 77D1 2C 64                        dw              ZBRANCH
  32+ 77D3 08 00                        dw              Interpret_Else_2 - $
  33+ 77D5 52 71                        dw                  COMPILE_XT          //              compile,
  34+ 77D7                                                                      //          else
  35+ 77D7 15 64                        dw              BRANCH
  36+ 77D9 06 00                        dw              Interpret_Endif_2 - $
  37+ 77DB              Interpret_Else_2:
  38+ 77DB BE 63 A9 6C                  dw                  EXECUTE, NOOP       //              execute nooop
  39+ 77DF              Interpret_Endif_2:                                      //          endif
  40+ 77DF                                                                      //      else
  41+ 77DF 15 64                        dw          BRANCH
  42+ 77E1 1A 00                        dw          Interpret_Endif_1 - $
  43+ 77E3              Interpret_Else_1:
  44+ 77E3 DD 6E 8F 75                  dw              HERE, NUMBER            //          here number
  45+ 77E7 5C 6E 96 6B                  dw              DPL, FETCH, ONE_PLUS    //          dpl @ 1+
  45+ 77EB 44 6A
  46+ 77ED                                                                      //          if
  47+ 77ED 2C 64                        dw              ZBRANCH
  48+ 77EF 08 00                        dw              Interpret_Else_3 - $
  49+ 77F1              //              dw                  NMODE, FETCH        //              nmode @
  50+ 77F1              //                                                      //              if
  51+ 77F1              //              dw                  ZBRANCH
  52+ 77F1              //              dw                  Interpret_Endif_4 - $
  53+ 77F1              //              dw                      ONE, ZERO       //                  1 0
  54+ 77F1              //              dw                      TWO_DROP        //                  2drop
  55+ 77F1              //Interpret_Endif_4:                                      //              endif
  56+ 77F1 1D 77                        dw                  DLITERAL            //              [compile] dliteral
  57+ 77F3                                                                      //          else
  58+ 77F3 15 64                        dw              BRANCH
  59+ 77F5 06 00                        dw              Interpret_Endif_3 - $
  60+ 77F7              Interpret_Else_3:
  61+ 77F7 CE 6A                        dw                  DROP                //              drop
  62+ 77F9 00 77                        dw                  LITERAL             //              [compile]  literal
  63+ 77FB              Interpret_Endif_3:                                      //          endif
  64+ 77FB              Interpret_Endif_1:                                      //      endif
  65+ 77FB 87 77                        dw          QSTACK                      //      ?stack
  66+ 77FD 3F 67                        dw          QTERMINAL                   //      ?terminal
  67+ 77FF                                                                      //      if
  68+ 77FF 2C 64                        dw          ZBRANCH
  69+ 7801 04 00                        dw          Interpret_Endif_5 - $
  70+ 7803 FD 75                        dw              CABORT                  //          (abort)
  71+ 7805              Interpret_Endif_5:                                      //      endif
  72+ 7805 15 64                        dw      BRANCH
  73+ 7807 BE FF                        dw      Interpret_Begin - $
  74+ 7809 9E 69                        dw      EXIT                            // ;
  75+ 780B
  76+ 780B              //  ______________________________________________________________________
  77+ 780B              //
  78+ 780B              // vocabulary   -- cccc     ( compile time )
  79+ 780B              // Defining word used in the form   VOCABULARY cccc
  80+ 780B              // creates the word  cccc  that gives the name to the vocabulary.
  81+ 780B              // Giving  cccc  makes the vocabulary CONTEXT so its words are executed first
  82+ 780B              // Giving  cccc DEFINITIONS makes  the vocabulary  CURRENT
  83+ 780B              // so new definitions can be inserted in that vocabulary.
  84+ 780B                              Colon_Def VOCABULARY, "VOCABULARY", is_normal
  84+ 780B             >                New_Def  VOCABULARY, "VOCABULARY", Enter_Ptr, is_normal ; ok
  84+ 780B             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  84+ 780B             >
  84+ 780B             >                // dummy db directives used to calculate length of namec
  84+ 780B 56 4F 43 41 >                db      "VOCABULARY"
  84+ 780F 42 55 4C 41 >
  84+ 7813 52 59       >
  84+ 7815             >len_NFA         defl    $ - temp_NFA
  84+ 7815             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  84+ 780B             >
  84+ 780B 8A          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  84+ 780C 56 4F 43 41 >                db      "VOCABULARY"               // name string in 7-bit ascii, but
  84+ 7810 42 55 4C 41 >
  84+ 7814 52 59       >
  84+ 7816             >                org     $-1                 // alter last byte of Name just above to set
  84+ 7815 D9          >                db      {b $} | END_BIT     // msb as name end
  84+ 7816             >
  84+ 7816 B7 77       >                dw      last_NFA            // Link to previous definition Name
  84+ 7818             >VOCABULARY:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
  84+ 7818 81 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
  84+ 781A             >                else
  84+ 781A ~           >                dw      $ + 2   ; ok        // is pointed by CFA
  84+ 781A             >                endif           ; ok        // for other definitions it "points" the correct handler
  84+ 781A             >                // Use of "; ok" to suppress "warning[fwdref]"
  84+ 781A             >
  84+ 781A             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  85+ 781A
  86+ 781A 05 72                        dw      CBUILDS
  87+ 781C
  88+ 781C A9 63 81 A0                  dw      LIT, $A081, COMMA       // $81A0 ,
  88+ 7820 F9 6E
  89+ 7822 3E 6E 96 6B                  dw      CURRENT, FETCH          // current @
  90+ 7826 76 6A F9 6E                  dw      CELL_MINUS, COMMA       // cell- ,
  91+ 782A DD 6E                        dw      HERE                    // here
  92+ 782C CA 6D 96 6B                  dw      VOC_LINK, FETCH, COMMA  // voc-link @ ,
  92+ 7830 F9 6E
  93+ 7832 CA 6D A3 6B                  dw      VOC_LINK, STORE         // voc-link !
  94+ 7836
  95+ 7836 15 72                        dw      DOES_TO                 // does>
  96+ 7838              Vocabulary_Does:
  97+ 7838 6C 6A                        dw      CELL_PLUS               // cell+
  98+ 783A 31 6E A3 6B                  dw      CONTEXT, STORE          // context !
  99+ 783E 9E 69                        dw      EXIT                    // ;
 100+ 7840
 101+ 7840              //  ______________________________________________________________________
 102+ 7840              //
 103+ 7840              // forth        --
 104+ 7840              // Name of the first vocabulary.
 105+ 7840              // It makes FORTH the CONTEXT vocabulary.
 106+ 7840              // Until new user vocabulary are defined, new colon-definitions becomes
 107+ 7840              // part of FORTH. It is immediate, so it will executed during the creation
 108+ 7840              // of a colon definition to be able to select the vocabulary.
 109+ 7840
 110+ 7840                              New_Def FORTH, "FORTH", Does_Ptr, is_immediate
 110+ 7840             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 110+ 7840             >
 110+ 7840             >                // dummy db directives used to calculate length of namec
 110+ 7840 46 4F 52 54 >                db      "FORTH"
 110+ 7844 48          >
 110+ 7845             >len_NFA         defl    $ - temp_NFA
 110+ 7845             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 110+ 7840             >
 110+ 7840 C5          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 110+ 7841 46 4F 52 54 >                db      "FORTH"               // name string in 7-bit ascii, but
 110+ 7845 48          >
 110+ 7846             >                org     $-1                 // alter last byte of Name just above to set
 110+ 7845 C8          >                db      {b $} | END_BIT     // msb as name end
 110+ 7846             >
 110+ 7846 0B 78       >                dw      last_NFA            // Link to previous definition Name
 110+ 7848             >FORTH:          if Does_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 110+ 7848 21 72       >                dw      Does_Ptr ; ok        // for primitive definitions  actual code
 110+ 784A             >                else
 110+ 784A ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 110+ 784A             >                endif           ; ok        // for other definitions it "points" the correct handler
 110+ 784A             >                // Use of "; ok" to suppress "warning[fwdref]"
 110+ 784A             >
 110+ 784A             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 111+ 784A 38 78                        dw      Vocabulary_Does
 112+ 784C 81 A0                        db      $81, $A0
 113+ 784E              Forth_Latest_Ptr:
 114+ 784E 69 87                        dw      Here_Dictionary // Fence_Word // Latest_Definition
 115+ 7850              Voclink_Ptr:
 116+ 7850 00 00                        dw      0
 117+ 7852              // Any new vocabulary is structured as follow:
 118+ 7852              // PFA+0 points to DOES> part of VOCABULARY to perform CELL+ CONTEXT !
 119+ 7852              // PFA+2 is 81,A0 i.e. a null-word used as LATEST in the new vocabulary
 120+ 7852              // PFA+4 always contains the LATEST word of this VOCABULARY.
 121+ 7852              //       at creations it points to the null-word of its parent vocabulary
 122+ 7852              //       that is normally FORTH, For example ASSEMBLER points FORTH's null-word
 123+ 7852              // PFA+6 is the pointer that builds up the vocabulary linked list.
 124+ 7852              //       FORTH has 0 here to signal the end of the list and user's variable
 125+ 7852              //       VOC-LINK points to PFA+6 of the newest vocabulary created.
 126+ 7852              //       While FORTH is the only vocabulary, VOC-LINK points to FORTH's PFA+6
 127+ 7852              //       When ASSEMBLER is created, its PFA+6 points to FORTH's PFA+6, and so on
 128+ 7852
 129+ 7852              //  ______________________________________________________________________
 130+ 7852              //
 131+ 7852              // definitions  --
 132+ 7852              // Used in the form  cccc DEFINITIONS
 133+ 7852              // set the CURRENT vocabulary at CONTEXT to insert new definitions in
 134+ 7852              // vocabulary cccc.
 135+ 7852                              Colon_Def DEFINITIONS, "DEFINITIONS", is_normal
 135+ 7852             >                New_Def  DEFINITIONS, "DEFINITIONS", Enter_Ptr, is_normal ; ok
 135+ 7852             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 135+ 7852             >
 135+ 7852             >                // dummy db directives used to calculate length of namec
 135+ 7852 44 45 46 49 >                db      "DEFINITIONS"
 135+ 7856 4E 49 54 49 >
 135+ 785A 4F 4E 53    >
 135+ 785D             >len_NFA         defl    $ - temp_NFA
 135+ 785D             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 135+ 7852             >
 135+ 7852 8B          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 135+ 7853 44 45 46 49 >                db      "DEFINITIONS"               // name string in 7-bit ascii, but
 135+ 7857 4E 49 54 49 >
 135+ 785B 4F 4E 53    >
 135+ 785E             >                org     $-1                 // alter last byte of Name just above to set
 135+ 785D D3          >                db      {b $} | END_BIT     // msb as name end
 135+ 785E             >
 135+ 785E 40 78       >                dw      last_NFA            // Link to previous definition Name
 135+ 7860             >DEFINITIONS:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 135+ 7860 81 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 135+ 7862             >                else
 135+ 7862 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 135+ 7862             >                endif           ; ok        // for other definitions it "points" the correct handler
 135+ 7862             >                // Use of "; ok" to suppress "warning[fwdref]"
 135+ 7862             >
 135+ 7862             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 136+ 7862 31 6E 96 6B                  dw      CONTEXT, FETCH          // context @
 137+ 7866 3E 6E A3 6B                  dw      CURRENT, STORE          // current !
 138+ 786A 9E 69                        dw      EXIT                    // ;
 139+ 786C
 140+ 786C              //  ______________________________________________________________________
 141+ 786C              //
 142+ 786C              // (            -- cccc )
 143+ 786C              // the following text is interpreted as a comment until a closing )
 144+ 786C                              Colon_Def COMMENT_BRAKET, "(", is_immediate
 144+ 786C             >                New_Def  COMMENT_BRAKET, "(", Enter_Ptr, is_immediate ; ok
 144+ 786C             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 144+ 786C             >
 144+ 786C             >                // dummy db directives used to calculate length of namec
 144+ 786C 28          >                db      "("
 144+ 786D             >len_NFA         defl    $ - temp_NFA
 144+ 786D             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 144+ 786C             >
 144+ 786C C1          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 144+ 786D 28          >                db      "("               // name string in 7-bit ascii, but
 144+ 786E             >                org     $-1                 // alter last byte of Name just above to set
 144+ 786D A8          >                db      {b $} | END_BIT     // msb as name end
 144+ 786E             >
 144+ 786E 52 78       >                dw      last_NFA            // Link to previous definition Name
 144+ 7870             >COMMENT_BRAKET:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 144+ 7870 81 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 144+ 7872             >                else
 144+ 7872 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 144+ 7872             >                endif           ; ok        // for other definitions it "points" the correct handler
 144+ 7872             >                // Use of "; ok" to suppress "warning[fwdref]"
 144+ 7872             >
 144+ 7872             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 145+ 7872 A9 63 29 00                  dw      LIT, ")"                // [char] )
 146+ 7876 23 74 CE 6A                  dw      WORD, DROP              // word drop
 147+ 787A 9E 69                        dw      EXIT                    // ;
 148+ 787C
 149+ 787C              //  ______________________________________________________________________
 150+ 787C              //
 151+ 787C              // quit         --
 152+ 787C              // \ Erase the return-stack, stop any compilation and give controlo to the console. No message is issued.
 153+ 787C                              Colon_Def QUIT, "QUIT", is_normal
 153+ 787C             >                New_Def  QUIT, "QUIT", Enter_Ptr, is_normal ; ok
 153+ 787C             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 153+ 787C             >
 153+ 787C             >                // dummy db directives used to calculate length of namec
 153+ 787C 51 55 49 54 >                db      "QUIT"
 153+ 7880             >len_NFA         defl    $ - temp_NFA
 153+ 7880             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 153+ 787C             >
 153+ 787C 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 153+ 787D 51 55 49 54 >                db      "QUIT"               // name string in 7-bit ascii, but
 153+ 7881             >                org     $-1                 // alter last byte of Name just above to set
 153+ 7880 D4          >                db      {b $} | END_BIT     // msb as name end
 153+ 7881             >
 153+ 7881 6C 78       >                dw      last_NFA            // Link to previous definition Name
 153+ 7883             >QUIT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 153+ 7883 81 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 153+ 7885             >                else
 153+ 7885 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 153+ 7885             >                endif           ; ok        // for other definitions it "points" the correct handler
 153+ 7885             >                // Use of "; ok" to suppress "warning[fwdref]"
 153+ 7885             >
 153+ 7885             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 154+ 7885
 155+ 7885 B4 6E 96 6B                  dw      SOURCE_ID, FETCH        // source-id @
 156+ 7889 C6 67 CE 6A                  dw      F_CLOSE, DROP           // f_close drop
 157+ 788D FE 6C B4 6E                  dw      ZERO, SOURCE_ID, STORE  // 0 source-id !
 157+ 7891 A3 6B
 158+ 7893 FE 6C FD 6D                  dw      ZERO, BLK, STORE        // 0 blk !
 158+ 7897 A3 6B
 159+ 7899 5E 71                        dw      SQUARED_OPEN            // [compile] [
 160+ 789B                                                              // begin
 161+ 789B              Quit_Begin:
 162+ 789B 88 6D 96 6B                  dw      R0, FETCH, RPSTORE      //      r0 @ rp!
 162+ 789F 8F 69
 163+ 78A1 2A 66                        dw      CR                      //      cr
 164+ 78A3 A3 73                        dw      QUERY                   //      query
 165+ 78A5              Next_Breakpoint_1:
 166+ 78A5 C3 77                        dw      INTERPRET               //      interpret
 167+ 78A7 49 6E 96 6B                  dw      STATE, FETCH, ZEQUAL    //      state @ 0=
 167+ 78AB E0 69
 168+ 78AD                                                              //      if
 169+ 78AD 2C 64                        dw      ZBRANCH
 170+ 78AF 07 00                        dw      Quit_Endif - $
 171+ 78B1 72 74                        dw          C_DOT_QUOTE
 172+ 78B3 02 6F 6B                     db          2, "ok"             //          .( ok)
 173+ 78B6              Quit_Endif:                                     //      else
 174+ 78B6                                                              // again
 175+ 78B6 15 64                        dw      BRANCH
 176+ 78B8 E3 FF                        dw      Quit_Begin - $
 177+ 78BA 9E 69                        dw      EXIT                    // ;
 178+ 78BC
 179+ 78BC              //  ______________________________________________________________________
 180+ 78BC              //
 181+ 78BC              // abort        --
 182+ 78BC                              Colon_Def ABORT, "ABORT", is_normal
 182+ 78BC             >                New_Def  ABORT, "ABORT", Enter_Ptr, is_normal ; ok
 182+ 78BC             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 182+ 78BC             >
 182+ 78BC             >                // dummy db directives used to calculate length of namec
 182+ 78BC 41 42 4F 52 >                db      "ABORT"
 182+ 78C0 54          >
 182+ 78C1             >len_NFA         defl    $ - temp_NFA
 182+ 78C1             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 182+ 78BC             >
 182+ 78BC 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 182+ 78BD 41 42 4F 52 >                db      "ABORT"               // name string in 7-bit ascii, but
 182+ 78C1 54          >
 182+ 78C2             >                org     $-1                 // alter last byte of Name just above to set
 182+ 78C1 D4          >                db      {b $} | END_BIT     // msb as name end
 182+ 78C2             >
 182+ 78C2 7C 78       >                dw      last_NFA            // Link to previous definition Name
 182+ 78C4             >ABORT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 182+ 78C4 81 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 182+ 78C6             >                else
 182+ 78C6 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 182+ 78C6             >                endif           ; ok        // for other definitions it "points" the correct handler
 182+ 78C6             >                // Use of "; ok" to suppress "warning[fwdref]"
 182+ 78C6             >
 182+ 78C6             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 183+ 78C6 80 6D 96 6B                  dw      S0, FETCH, SPSTORE      // s0 @ sp!
 183+ 78CA 75 69
 184+ 78CC C1 71                        dw      DECIMAL                 // decimal
 185+ 78CE 48 78                        dw      FORTH                   // [compile] forth
 186+ 78D0 60 78                        dw      DEFINITIONS             // definitions
 187+ 78D2              Autoexec_Ptr:
 188+ 78D2 89 85                        dw      AUTOEXEC                // autoexec, patched to noop
 189+ 78D4 83 78                        dw      QUIT                    // quit
 190+ 78D6 9E 69                        dw      EXIT                    // ;
 191+ 78D8
 192+ 78D8              //  ______________________________________________________________________
 193+ 78D8              //
 194+ 78D8              // warm         --
 195+ 78D8                              Colon_Def WARM, "WARM", is_normal
 195+ 78D8             >                New_Def  WARM, "WARM", Enter_Ptr, is_normal ; ok
 195+ 78D8             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 195+ 78D8             >
 195+ 78D8             >                // dummy db directives used to calculate length of namec
 195+ 78D8 57 41 52 4D >                db      "WARM"
 195+ 78DC             >len_NFA         defl    $ - temp_NFA
 195+ 78DC             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 195+ 78D8             >
 195+ 78D8 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 195+ 78D9 57 41 52 4D >                db      "WARM"               // name string in 7-bit ascii, but
 195+ 78DD             >                org     $-1                 // alter last byte of Name just above to set
 195+ 78DC CD          >                db      {b $} | END_BIT     // msb as name end
 195+ 78DD             >
 195+ 78DD BC 78       >                dw      last_NFA            // Link to previous definition Name
 195+ 78DF             >WARM:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 195+ 78DF 81 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 195+ 78E1             >                else
 195+ 78E1 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 195+ 78E1             >                endif           ; ok        // for other definitions it "points" the correct handler
 195+ 78E1             >                // Use of "; ok" to suppress "warning[fwdref]"
 195+ 78E1             >
 195+ 78E1             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 196+ 78E1 5E 7C                        dw      BLK_INIT                // blk-init
 197+ 78E3 3A 84                        dw      SPLASH                  // splash
 198+ 78E5 A9 63 07 00                  dw      LIT, 7, EMIT            // 7 emit
 198+ 78E9 CC 6F
 199+ 78EB C4 78                        dw      ABORT                   // abort
 200+ 78ED 9E 69                        dw      EXIT                    // exit
 201+ 78EF
 202+ 78EF              //  ______________________________________________________________________
 203+ 78EF              //
 204+ 78EF              // cold         --
 205+ 78EF                              Colon_Def COLD, "COLD", is_normal
 205+ 78EF             >                New_Def  COLD, "COLD", Enter_Ptr, is_normal ; ok
 205+ 78EF             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 205+ 78EF             >
 205+ 78EF             >                // dummy db directives used to calculate length of namec
 205+ 78EF 43 4F 4C 44 >                db      "COLD"
 205+ 78F3             >len_NFA         defl    $ - temp_NFA
 205+ 78F3             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 205+ 78EF             >
 205+ 78EF 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 205+ 78F0 43 4F 4C 44 >                db      "COLD"               // name string in 7-bit ascii, but
 205+ 78F4             >                org     $-1                 // alter last byte of Name just above to set
 205+ 78F3 C4          >                db      {b $} | END_BIT     // msb as name end
 205+ 78F4             >
 205+ 78F4 D8 78       >                dw      last_NFA            // Link to previous definition Name
 205+ 78F6             >COLD:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 205+ 78F6 81 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 205+ 78F8             >                else
 205+ 78F8 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 205+ 78F8             >                endif           ; ok        // for other definitions it "points" the correct handler
 205+ 78F8             >                // Use of "; ok" to suppress "warning[fwdref]"
 205+ 78F8             >
 205+ 78F8             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 206+ 78F8 A9 63 78 63                  dw      LIT, S0_origin          // [ hex $12 +origin ] Literal
 207+ 78FC A9 63 94 63                  dw      LIT, USER_Pointer       // [ hex $3E +origin ] literal
 208+ 7900 96 6B                        dw      FETCH                   // @
 209+ 7902 A9 63 06 00                  dw      LIT, 6, PLUS            // 6 +
 209+ 7906 23 6A
 210+ 7908 A9 63 14 00                  dw      LIT, 20                 // 20
 211+ 790C 91 68                        dw      CMOVE
 212+ 790E A9 63 72 63                  dw      LIT, Latest_origin      // [ hex 0C +origin ] literal
 213+ 7912 96 6B                        dw      FETCH                   // @
 214+ 7914 A9 63 4E 78                  dw      LIT, Forth_Latest_Ptr   // [ ' forth >body 4 + ] Literal
 215+ 7918 A3 6B                        dw      STORE                   // !
 216+ 791A FE 6C F4 6D                  dw      ZERO, NMODE, STORE      // 0 nmode !
 216+ 791E A3 6B
 217+ 7920 D5 6D 96 6B                  dw      FIRST, FETCH, DUP       // first @ dup
 217+ 7924 03 6B
 218+ 7926 88 6E A3 6B                  dw      USE, STORE              // use !
 219+ 792A 92 6E A3 6B                  dw      PREV, STORE             // prev !
 220+ 792E A9 63 04 00                  dw      LIT, 4, PLACE, STORE    // 4 place !
 220+ 7932 A5 6E A3 6B
 221+ 7936              //              dw      LIT, 8
 222+ 7936              //              dw      LIT, FLAGS2, CSTORE     // 8 5C6A c!
 223+ 7936 0E 6D D3 6E                  dw      TWO, HP, STORE          // 2 hp !
 223+ 793A A3 6B
 224+ 793C DF 78        Warm_Start:     dw      WARM
 225+ 793E F6 78        Cold_Start:     dw      COLD
 226+ 7940 9E 69                        dw      EXIT
 227+ 7942
 228+ 7942              //  ______________________________________________________________________
 229+ 7942              WarmRoutine:
 230+ 7942              ColdRoutine:
 231+ 7942 DD 21 98 63                  ld      ix, Next_Ptr
 232+ 7946 D9                           exx
 233+ 7947 E5                           push    hl
 234+ 7948 D9                           exx
 235+ 7949
 236+ 7949 ED 73 6E 63                  ld      (SP_Basic), sp
 237+ 794D ED 7B 78 63                  ld      sp, (S0_origin)
 238+ 7951              //              nop
 239+ 7951 2A 7A 63                     ld      hl, (R0_origin)
 240+ 7954              //              nop
 241+ 7954                              ldrphl
 241+ 7954 22 96 63    >                ld      (RP_Pointer),hl
 242+ 7957 01 3C 79                     ld      bc, Warm_Start
 243+ 795A 38 02                        jr      c, Warm_Skip
 244+ 795C 03                           inc     bc
 245+ 795D 03                           inc     bc
 246+ 795E              Warm_Skip:
 247+ 795E                              next
 247+ 795E DD E9       >                jp      (ix)
 248+ 7960
 249+ 7960              //  ______________________________________________________________________
 250+ 7960              //
 251+ 7960              // basic        --
 252+ 7960                              New_Def BASIC, "BASIC", is_code, is_normal
 252+ 7960             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 252+ 7960             >
 252+ 7960             >                // dummy db directives used to calculate length of namec
 252+ 7960 42 41 53 49 >                db      "BASIC"
 252+ 7964 43          >
 252+ 7965             >len_NFA         defl    $ - temp_NFA
 252+ 7965             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 252+ 7960             >
 252+ 7960 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 252+ 7961 42 41 53 49 >                db      "BASIC"               // name string in 7-bit ascii, but
 252+ 7965 43          >
 252+ 7966             >                org     $-1                 // alter last byte of Name just above to set
 252+ 7965 C3          >                db      {b $} | END_BIT     // msb as name end
 252+ 7966             >
 252+ 7966 EF 78       >                dw      last_NFA            // Link to previous definition Name
 252+ 7968             >BASIC:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 252+ 7968 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
 252+ 7968             >                else
 252+ 7968 6A 79       >                dw      $ + 2   ; ok        // is pointed by CFA
 252+ 796A             >                endif           ; ok        // for other definitions it "points" the correct handler
 252+ 796A             >                // Use of "; ok" to suppress "warning[fwdref]"
 252+ 796A             >
 252+ 796A             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 253+ 796A C1                           pop     bc
 254+ 796B 21 00 00                     ld      hl, 0
 255+ 796E 39                           add     hl, sp
 256+ 796F ED 7B 6E 63                  ld      sp, (SP_Basic)
 257+ 7973              //              nop
 258+ 7973 22 6E 63                     ld      (SP_Basic),hl
 259+ 7976 D9                           exx
 260+ 7977 E1                           pop     hl
 261+ 7978 D9                           exx
 262+ 7979 C9                           ret     // to Basic
 263+ 797A
 264+ 797A              //  ______________________________________________________________________
 265+ 797A              //
 266+ 797A              // +-           n1 n2 -- n3
 267+ 797A              // leaves n1 with the sign of n2 as n3.
 268+ 797A                              Colon_Def PLUS_MINUS, "+-", is_normal
 268+ 797A             >                New_Def  PLUS_MINUS, "+-", Enter_Ptr, is_normal ; ok
 268+ 797A             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 268+ 797A             >
 268+ 797A             >                // dummy db directives used to calculate length of namec
 268+ 797A 2B 2D       >                db      "+-"
 268+ 797C             >len_NFA         defl    $ - temp_NFA
 268+ 797C             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 268+ 797A             >
 268+ 797A 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 268+ 797B 2B 2D       >                db      "+-"               // name string in 7-bit ascii, but
 268+ 797D             >                org     $-1                 // alter last byte of Name just above to set
 268+ 797C AD          >                db      {b $} | END_BIT     // msb as name end
 268+ 797D             >
 268+ 797D 60 79       >                dw      last_NFA            // Link to previous definition Name
 268+ 797F             >PLUS_MINUS:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 268+ 797F 81 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 268+ 7981             >                else
 268+ 7981 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 268+ 7981             >                endif           ; ok        // for other definitions it "points" the correct handler
 268+ 7981             >                // Use of "; ok" to suppress "warning[fwdref]"
 268+ 7981             >
 268+ 7981             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 269+ 7981 FB 69                        dw      ZLESS                   // 0<
 270+ 7983                                                              // if
 271+ 7983 2C 64                        dw      ZBRANCH
 272+ 7985 04 00                        dw      Plus_Minus_Endif - $
 273+ 7987 8E 6A                        dw          MINUS               //      minus
 274+ 7989              Plus_Minus_Endif:                               // endif
 275+ 7989 9E 69                        dw      EXIT                    // ;
 276+ 798B
 277+ 798B              //  ______________________________________________________________________
 278+ 798B              //
 279+ 798B              // d+-          d1 n -- d2
 280+ 798B              // leaves d1 with the sign of n as d2.
 281+ 798B                              Colon_Def DPLUS_MINUS, "D+-", is_normal
 281+ 798B             >                New_Def  DPLUS_MINUS, "D+-", Enter_Ptr, is_normal ; ok
 281+ 798B             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 281+ 798B             >
 281+ 798B             >                // dummy db directives used to calculate length of namec
 281+ 798B 44 2B 2D    >                db      "D+-"
 281+ 798E             >len_NFA         defl    $ - temp_NFA
 281+ 798E             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 281+ 798B             >
 281+ 798B 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 281+ 798C 44 2B 2D    >                db      "D+-"               // name string in 7-bit ascii, but
 281+ 798F             >                org     $-1                 // alter last byte of Name just above to set
 281+ 798E AD          >                db      {b $} | END_BIT     // msb as name end
 281+ 798F             >
 281+ 798F 7A 79       >                dw      last_NFA            // Link to previous definition Name
 281+ 7991             >DPLUS_MINUS:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 281+ 7991 81 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 281+ 7993             >                else
 281+ 7993 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 281+ 7993             >                endif           ; ok        // for other definitions it "points" the correct handler
 281+ 7993             >                // Use of "; ok" to suppress "warning[fwdref]"
 281+ 7993             >
 281+ 7993             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 282+ 7993 FB 69                        dw      ZLESS                   // 0<
 283+ 7995                                                              // if
 284+ 7995 2C 64                        dw      ZBRANCH
 285+ 7997 04 00                        dw      DPlus_Minus_Endif - $
 286+ 7999 A4 6A                        dw          DMINUS              //      dminus
 287+ 799B              DPlus_Minus_Endif:                              // endif
 288+ 799B 9E 69                        dw      EXIT                    // ;
 289+ 799D
 290+ 799D              //  ______________________________________________________________________
 291+ 799D              //
 292+ 799D              // abs          n1 -- n2
 293+ 799D                              Colon_Def ABS_OP, "ABS", is_normal
 293+ 799D             >                New_Def  ABS_OP, "ABS", Enter_Ptr, is_normal ; ok
 293+ 799D             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 293+ 799D             >
 293+ 799D             >                // dummy db directives used to calculate length of namec
 293+ 799D 41 42 53    >                db      "ABS"
 293+ 79A0             >len_NFA         defl    $ - temp_NFA
 293+ 79A0             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 293+ 799D             >
 293+ 799D 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 293+ 799E 41 42 53    >                db      "ABS"               // name string in 7-bit ascii, but
 293+ 79A1             >                org     $-1                 // alter last byte of Name just above to set
 293+ 79A0 D3          >                db      {b $} | END_BIT     // msb as name end
 293+ 79A1             >
 293+ 79A1 8B 79       >                dw      last_NFA            // Link to previous definition Name
 293+ 79A3             >ABS_OP:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 293+ 79A3 81 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 293+ 79A5             >                else
 293+ 79A5 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 293+ 79A5             >                endif           ; ok        // for other definitions it "points" the correct handler
 293+ 79A5             >                // Use of "; ok" to suppress "warning[fwdref]"
 293+ 79A5             >
 293+ 79A5             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 294+ 79A5 03 6B                        dw      DUP                     // dup
 295+ 79A7 7F 79                        dw      PLUS_MINUS              // +-
 296+ 79A9 9E 69                        dw      EXIT                    // ;
 297+ 79AB
 298+ 79AB              //  ______________________________________________________________________
 299+ 79AB              //
 300+ 79AB              // dabs         d1 -- d2
 301+ 79AB                              Colon_Def DABS, "DABS", is_normal
 301+ 79AB             >                New_Def  DABS, "DABS", Enter_Ptr, is_normal ; ok
 301+ 79AB             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 301+ 79AB             >
 301+ 79AB             >                // dummy db directives used to calculate length of namec
 301+ 79AB 44 41 42 53 >                db      "DABS"
 301+ 79AF             >len_NFA         defl    $ - temp_NFA
 301+ 79AF             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 301+ 79AB             >
 301+ 79AB 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 301+ 79AC 44 41 42 53 >                db      "DABS"               // name string in 7-bit ascii, but
 301+ 79B0             >                org     $-1                 // alter last byte of Name just above to set
 301+ 79AF D3          >                db      {b $} | END_BIT     // msb as name end
 301+ 79B0             >
 301+ 79B0 9D 79       >                dw      last_NFA            // Link to previous definition Name
 301+ 79B2             >DABS:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 301+ 79B2 81 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 301+ 79B4             >                else
 301+ 79B4 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 301+ 79B4             >                endif           ; ok        // for other definitions it "points" the correct handler
 301+ 79B4             >                // Use of "; ok" to suppress "warning[fwdref]"
 301+ 79B4             >
 301+ 79B4             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 302+ 79B4 03 6B                        dw      DUP                     // dup
 303+ 79B6 91 79                        dw      DPLUS_MINUS             // d+-
 304+ 79B8 9E 69                        dw      EXIT                    // ;
 305+ 79BA
 306+ 79BA              //  ______________________________________________________________________
 307+ 79BA              //
 308+ 79BA              // m*           n1 n2 -- d
 309+ 79BA              // multiply two integer giving a double
 310+ 79BA                              Colon_Def MMUL, "M*", is_normal
 310+ 79BA             >                New_Def  MMUL, "M*", Enter_Ptr, is_normal ; ok
 310+ 79BA             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 310+ 79BA             >
 310+ 79BA             >                // dummy db directives used to calculate length of namec
 310+ 79BA 4D 2A       >                db      "M*"
 310+ 79BC             >len_NFA         defl    $ - temp_NFA
 310+ 79BC             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 310+ 79BA             >
 310+ 79BA 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 310+ 79BB 4D 2A       >                db      "M*"               // name string in 7-bit ascii, but
 310+ 79BD             >                org     $-1                 // alter last byte of Name just above to set
 310+ 79BC AA          >                db      {b $} | END_BIT     // msb as name end
 310+ 79BD             >
 310+ 79BD AB 79       >                dw      last_NFA            // Link to previous definition Name
 310+ 79BF             >MMUL:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 310+ 79BF 81 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 310+ 79C1             >                else
 310+ 79C1 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 310+ 79C1             >                endif           ; ok        // for other definitions it "points" the correct handler
 310+ 79C1             >                // Use of "; ok" to suppress "warning[fwdref]"
 310+ 79C1             >
 310+ 79C1             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 311+ 79C1 64 6B 53 69                  dw      TWO_DUP, XOR_OP, TO_R   // 2dup xor >r
 311+ 79C5 B1 69
 312+ 79C7 A3 79 F6 6A                  dw      ABS_OP, SWAP            // abs swap
 313+ 79CB A3 79 C4 68                  dw      ABS_OP, UM_MUL          // abs um*
 314+ 79CF C5 69 91 79                  dw      R_TO, DPLUS_MINUS       // r> d+-
 315+ 79D3 9E 69                        dw      EXIT                    // ;
 316+ 79D5
 317+ 79D5              //  ______________________________________________________________________
 318+ 79D5              //
 319+ 79D5              // sm/rem       d n -- q r
 320+ 79D5              // Symmetric division: divides a double into n giving quotient q and remainder r
 321+ 79D5              // the remainder has the sign of d.
 322+ 79D5                              Colon_Def SMDIVM, "SM/REM", is_normal
 322+ 79D5             >                New_Def  SMDIVM, "SM/REM", Enter_Ptr, is_normal ; ok
 322+ 79D5             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 322+ 79D5             >
 322+ 79D5             >                // dummy db directives used to calculate length of namec
 322+ 79D5 53 4D 2F 52 >                db      "SM/REM"
 322+ 79D9 45 4D       >
 322+ 79DB             >len_NFA         defl    $ - temp_NFA
 322+ 79DB             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 322+ 79D5             >
 322+ 79D5 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 322+ 79D6 53 4D 2F 52 >                db      "SM/REM"               // name string in 7-bit ascii, but
 322+ 79DA 45 4D       >
 322+ 79DC             >                org     $-1                 // alter last byte of Name just above to set
 322+ 79DB CD          >                db      {b $} | END_BIT     // msb as name end
 322+ 79DC             >
 322+ 79DC BA 79       >                dw      last_NFA            // Link to previous definition Name
 322+ 79DE             >SMDIVM:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 322+ 79DE 81 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 322+ 79E0             >                else
 322+ 79E0 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 322+ 79E0             >                endif           ; ok        // for other definitions it "points" the correct handler
 322+ 79E0             >                // Use of "; ok" to suppress "warning[fwdref]"
 322+ 79E0             >
 322+ 79E0             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 323+ 79E0 BE 6A B1 69                  dw      OVER, TO_R, TO_R        // over >r >r
 323+ 79E4 B1 69
 324+ 79E6 B2 79 D9 69                  dw      DABS, R_OP, ABS_OP      // dabs r abs
 324+ 79EA A3 79
 325+ 79EC F5 68                        dw      UMDIVMOD                // um/mod
 326+ 79EE C5 69                        dw      R_TO                    // r>
 327+ 79F0 D9 69 53 69                  dw      R_OP, XOR_OP            // r xor
 328+ 79F4 7F 79 F6 6A                  dw      PLUS_MINUS, SWAP        // +- swap
 329+ 79F8 C5 69                        dw      R_TO                    // r>
 330+ 79FA 7F 79 F6 6A                  dw      PLUS_MINUS, SWAP        // +- swap
 331+ 79FE 9E 69                        dw      EXIT                    // ;
 332+ 7A00
 333+ 7A00              //  ______________________________________________________________________
 334+ 7A00              //
 335+ 7A00              // fm/mod       d n -- q r
 336+ 7A00              // Floored division: divides a double into n giving quotient q and remainder r
 337+ 7A00              // the remainder has the sign of d.
 338+ 7A00                              Colon_Def FMDIVM, "FM/MOD", is_normal
 338+ 7A00             >                New_Def  FMDIVM, "FM/MOD", Enter_Ptr, is_normal ; ok
 338+ 7A00             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 338+ 7A00             >
 338+ 7A00             >                // dummy db directives used to calculate length of namec
 338+ 7A00 46 4D 2F 4D >                db      "FM/MOD"
 338+ 7A04 4F 44       >
 338+ 7A06             >len_NFA         defl    $ - temp_NFA
 338+ 7A06             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 338+ 7A00             >
 338+ 7A00 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 338+ 7A01 46 4D 2F 4D >                db      "FM/MOD"               // name string in 7-bit ascii, but
 338+ 7A05 4F 44       >
 338+ 7A07             >                org     $-1                 // alter last byte of Name just above to set
 338+ 7A06 C4          >                db      {b $} | END_BIT     // msb as name end
 338+ 7A07             >
 338+ 7A07 D5 79       >                dw      last_NFA            // Link to previous definition Name
 338+ 7A09             >FMDIVM:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 338+ 7A09 81 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 338+ 7A0B             >                else
 338+ 7A0B ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 338+ 7A0B             >                endif           ; ok        // for other definitions it "points" the correct handler
 338+ 7A0B             >                // Use of "; ok" to suppress "warning[fwdref]"
 338+ 7A0B             >
 338+ 7A0B             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 339+ 7A0B 03 6B B1 69                  dw      DUP, TO_R               // dup >r
 340+ 7A0F DE 79                        dw      SMDIVM
 341+ 7A11 BE 6A 03 6B                  dw      OVER, DUP
 342+ 7A15 E0 69 E0 69                  dw      ZEQUAL, ZEQUAL
 343+ 7A19 F6 6A FB 69                  dw      SWAP, ZLESS
 344+ 7A1D D9 69 FB 69                  dw      R_OP, ZLESS
 345+ 7A21 53 69 2E 69                  dw      XOR_OP, AND_OP
 346+ 7A25 2C 64                        dw      ZBRANCH
 347+ 7A27 10 00                        dw      Fm_Mod_Else - $
 348+ 7A29 50 6A                        dw          ONE_SUBTRACT
 349+ 7A2B F6 6A C5 69                  dw          SWAP, R_TO
 350+ 7A2F 23 6A F6 6A                  dw          PLUS, SWAP
 351+ 7A33 15 64                        dw      BRANCH
 352+ 7A35 06 00                        dw      Fm_Mod_Endif - $
 353+ 7A37              Fm_Mod_Else:
 354+ 7A37 C5 69 CE 6A                  dw          R_TO, DROP
 355+ 7A3B              Fm_Mod_Endif:
 356+ 7A3B 9E 69                        dw      EXIT
 357+ 7A3D              //              dw      TWO_DUP                 // 2dup
 358+ 7A3D              //              dw      XOR_OP, TO_R, TO_R      // xor >r >r
 359+ 7A3D              //              dw      DABS, R_OP, ABS_OP      // dabs r abs
 360+ 7A3D              //              dw      UMDIVMOD                // um/mod
 361+ 7A3D              //              dw      SWAP                    // swap
 362+ 7A3D              //              dw      II, ZLESS               // i'
 363+ 7A3D              //              dw      ONE, AND_OP, PLUS       // 0< 1 and +
 364+ 7A3D              //              dw      R_TO                    // r>
 365+ 7A3D              //              dw      PLUS_MINUS, SWAP        // +- swap
 366+ 7A3D              //              dw      R_OP                    // r@
 367+ 7A3D              //              dw      ZLESS                   // i'
 368+ 7A3D              //              dw      ONE, AND_OP, PLUS       // 0< 1 and +
 369+ 7A3D              //              dw      R_TO                    // r>
 370+ 7A3D              //              dw      PLUS_MINUS              // +- swap
 371+ 7A3D              //              dw      EXIT                    // ;
 372+ 7A3D
 373+ 7A3D              //  ______________________________________________________________________
 374+ 7A3D              //
 375+ 7A3D              // m/mod        d n -- q r
 376+ 7A3D              // multiply two integer giving a double
 377+ 7A3D                              Colon_Def MDIVM, "M/MOD", is_normal
 377+ 7A3D             >                New_Def  MDIVM, "M/MOD", Enter_Ptr, is_normal ; ok
 377+ 7A3D             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 377+ 7A3D             >
 377+ 7A3D             >                // dummy db directives used to calculate length of namec
 377+ 7A3D 4D 2F 4D 4F >                db      "M/MOD"
 377+ 7A41 44          >
 377+ 7A42             >len_NFA         defl    $ - temp_NFA
 377+ 7A42             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 377+ 7A3D             >
 377+ 7A3D 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 377+ 7A3E 4D 2F 4D 4F >                db      "M/MOD"               // name string in 7-bit ascii, but
 377+ 7A42 44          >
 377+ 7A43             >                org     $-1                 // alter last byte of Name just above to set
 377+ 7A42 C4          >                db      {b $} | END_BIT     // msb as name end
 377+ 7A43             >
 377+ 7A43 00 7A       >                dw      last_NFA            // Link to previous definition Name
 377+ 7A45             >MDIVM:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 377+ 7A45 81 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 377+ 7A47             >                else
 377+ 7A47 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 377+ 7A47             >                endif           ; ok        // for other definitions it "points" the correct handler
 377+ 7A47             >                // Use of "; ok" to suppress "warning[fwdref]"
 377+ 7A47             >
 377+ 7A47             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 378+ 7A47 DE 79                        dw      SMDIVM
 379+ 7A49 9E 69                        dw      EXIT                    // ;
 380+ 7A4B
 381+ 7A4B              //  ______________________________________________________________________
 382+ 7A4B              //
 383+ 7A4B              // m/           d n -- q
 384+ 7A4B              // multiply two integer giving a double
 385+ 7A4B                              Colon_Def MDIV, "M/", is_normal
 385+ 7A4B             >                New_Def  MDIV, "M/", Enter_Ptr, is_normal ; ok
 385+ 7A4B             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 385+ 7A4B             >
 385+ 7A4B             >                // dummy db directives used to calculate length of namec
 385+ 7A4B 4D 2F       >                db      "M/"
 385+ 7A4D             >len_NFA         defl    $ - temp_NFA
 385+ 7A4D             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 385+ 7A4B             >
 385+ 7A4B 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 385+ 7A4C 4D 2F       >                db      "M/"               // name string in 7-bit ascii, but
 385+ 7A4E             >                org     $-1                 // alter last byte of Name just above to set
 385+ 7A4D AF          >                db      {b $} | END_BIT     // msb as name end
 385+ 7A4E             >
 385+ 7A4E 3D 7A       >                dw      last_NFA            // Link to previous definition Name
 385+ 7A50             >MDIV:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 385+ 7A50 81 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 385+ 7A52             >                else
 385+ 7A52 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 385+ 7A52             >                endif           ; ok        // for other definitions it "points" the correct handler
 385+ 7A52             >                // Use of "; ok" to suppress "warning[fwdref]"
 385+ 7A52             >
 385+ 7A52             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 386+ 7A52 45 7A D9 6A                  dw      MDIVM, NIP
 387+ 7A56 9E 69                        dw      EXIT                    // ;
 388+ 7A58
 389+ 7A58              //  ______________________________________________________________________
 390+ 7A58              //
 391+ 7A58              // *            n1 n2 -- n3
 392+ 7A58              // multiply two integer
 393+ 7A58                              Colon_Def MUL, "*", is_normal
 393+ 7A58             >                New_Def  MUL, "*", Enter_Ptr, is_normal ; ok
 393+ 7A58             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 393+ 7A58             >
 393+ 7A58             >                // dummy db directives used to calculate length of namec
 393+ 7A58 2A          >                db      "*"
 393+ 7A59             >len_NFA         defl    $ - temp_NFA
 393+ 7A59             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 393+ 7A58             >
 393+ 7A58 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 393+ 7A59 2A          >                db      "*"               // name string in 7-bit ascii, but
 393+ 7A5A             >                org     $-1                 // alter last byte of Name just above to set
 393+ 7A59 AA          >                db      {b $} | END_BIT     // msb as name end
 393+ 7A5A             >
 393+ 7A5A 4B 7A       >                dw      last_NFA            // Link to previous definition Name
 393+ 7A5C             >MUL:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 393+ 7A5C 81 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 393+ 7A5E             >                else
 393+ 7A5E ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 393+ 7A5E             >                endif           ; ok        // for other definitions it "points" the correct handler
 393+ 7A5E             >                // Use of "; ok" to suppress "warning[fwdref]"
 393+ 7A5E             >
 393+ 7A5E             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 394+ 7A5E BF 79 CE 6A                  dw      MMUL, DROP              // m* drop
 395+ 7A62 9E 69                        dw      EXIT                    // ;
 396+ 7A64
 397+ 7A64              //  ______________________________________________________________________
 398+ 7A64              //
 399+ 7A64              // /mod         n1 n2 -- n3 n4
 400+ 7A64              // leaves quotient n4 and remainder n3 of the integer division n1 / n2.
 401+ 7A64              // The remainder has the sign of n1
 402+ 7A64                              Colon_Def DIVMOD, "/MOD", is_normal
 402+ 7A64             >                New_Def  DIVMOD, "/MOD", Enter_Ptr, is_normal ; ok
 402+ 7A64             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 402+ 7A64             >
 402+ 7A64             >                // dummy db directives used to calculate length of namec
 402+ 7A64 2F 4D 4F 44 >                db      "/MOD"
 402+ 7A68             >len_NFA         defl    $ - temp_NFA
 402+ 7A68             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 402+ 7A64             >
 402+ 7A64 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 402+ 7A65 2F 4D 4F 44 >                db      "/MOD"               // name string in 7-bit ascii, but
 402+ 7A69             >                org     $-1                 // alter last byte of Name just above to set
 402+ 7A68 C4          >                db      {b $} | END_BIT     // msb as name end
 402+ 7A69             >
 402+ 7A69 58 7A       >                dw      last_NFA            // Link to previous definition Name
 402+ 7A6B             >DIVMOD:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 402+ 7A6B 81 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 402+ 7A6D             >                else
 402+ 7A6D ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 402+ 7A6D             >                endif           ; ok        // for other definitions it "points" the correct handler
 402+ 7A6D             >                // Use of "; ok" to suppress "warning[fwdref]"
 402+ 7A6D             >
 402+ 7A6D             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 403+ 7A6D B1 69 1C 6F                  dw      TO_R, S_TO_D, R_TO      // >r s->d r>
 403+ 7A71 C5 69
 404+ 7A73 45 7A                        dw      MDIVM                   // m/mod
 405+ 7A75 9E 69                        dw      EXIT                    // ;
 406+ 7A77
 407+ 7A77              //  ______________________________________________________________________
 408+ 7A77              //
 409+ 7A77              // /            n1 n2 -- n3
 410+ 7A77              // division
 411+ 7A77                              Colon_Def DIV, "/", is_normal
 411+ 7A77             >                New_Def  DIV, "/", Enter_Ptr, is_normal ; ok
 411+ 7A77             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 411+ 7A77             >
 411+ 7A77             >                // dummy db directives used to calculate length of namec
 411+ 7A77 2F          >                db      "/"
 411+ 7A78             >len_NFA         defl    $ - temp_NFA
 411+ 7A78             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 411+ 7A77             >
 411+ 7A77 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 411+ 7A78 2F          >                db      "/"               // name string in 7-bit ascii, but
 411+ 7A79             >                org     $-1                 // alter last byte of Name just above to set
 411+ 7A78 AF          >                db      {b $} | END_BIT     // msb as name end
 411+ 7A79             >
 411+ 7A79 64 7A       >                dw      last_NFA            // Link to previous definition Name
 411+ 7A7B             >DIV:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 411+ 7A7B 81 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 411+ 7A7D             >                else
 411+ 7A7D ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 411+ 7A7D             >                endif           ; ok        // for other definitions it "points" the correct handler
 411+ 7A7D             >                // Use of "; ok" to suppress "warning[fwdref]"
 411+ 7A7D             >
 411+ 7A7D             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 412+ 7A7D 6B 7A D9 6A                  dw      DIVMOD, NIP             // /mod nip
 413+ 7A81 9E 69                        dw      EXIT                    // ;
 414+ 7A83
 415+ 7A83              //  ______________________________________________________________________
 416+ 7A83              //
 417+ 7A83              // mod          n1 n2 -- n3
 418+ 7A83                              Colon_Def MOD, "MOD", is_normal
 418+ 7A83             >                New_Def  MOD, "MOD", Enter_Ptr, is_normal ; ok
 418+ 7A83             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 418+ 7A83             >
 418+ 7A83             >                // dummy db directives used to calculate length of namec
 418+ 7A83 4D 4F 44    >                db      "MOD"
 418+ 7A86             >len_NFA         defl    $ - temp_NFA
 418+ 7A86             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 418+ 7A83             >
 418+ 7A83 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 418+ 7A84 4D 4F 44    >                db      "MOD"               // name string in 7-bit ascii, but
 418+ 7A87             >                org     $-1                 // alter last byte of Name just above to set
 418+ 7A86 C4          >                db      {b $} | END_BIT     // msb as name end
 418+ 7A87             >
 418+ 7A87 77 7A       >                dw      last_NFA            // Link to previous definition Name
 418+ 7A89             >MOD:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 418+ 7A89 81 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 418+ 7A8B             >                else
 418+ 7A8B ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 418+ 7A8B             >                endif           ; ok        // for other definitions it "points" the correct handler
 418+ 7A8B             >                // Use of "; ok" to suppress "warning[fwdref]"
 418+ 7A8B             >
 418+ 7A8B             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 419+ 7A8B 6B 7A CE 6A                  dw      DIVMOD, DROP            // /mod drop
 420+ 7A8F 9E 69                        dw      EXIT                    // ;
 421+ 7A91
 422+ 7A91              //  ______________________________________________________________________
 423+ 7A91              //
 424+ 7A91              // */mod        n1 n2 n3 -- n4 n5
 425+ 7A91              // leaves the quotient n5 and the remainder n4 of the operation
 426+ 7A91              // (n1 * n2) / n3. The intermediate passage through a double number
 427+ 7A91              // avoids loss of precision
 428+ 7A91                              Colon_Def MUL_DIV_MOD, "*/MOD", is_normal
 428+ 7A91             >                New_Def  MUL_DIV_MOD, "*/MOD", Enter_Ptr, is_normal ; ok
 428+ 7A91             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 428+ 7A91             >
 428+ 7A91             >                // dummy db directives used to calculate length of namec
 428+ 7A91 2A 2F 4D 4F >                db      "*/MOD"
 428+ 7A95 44          >
 428+ 7A96             >len_NFA         defl    $ - temp_NFA
 428+ 7A96             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 428+ 7A91             >
 428+ 7A91 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 428+ 7A92 2A 2F 4D 4F >                db      "*/MOD"               // name string in 7-bit ascii, but
 428+ 7A96 44          >
 428+ 7A97             >                org     $-1                 // alter last byte of Name just above to set
 428+ 7A96 C4          >                db      {b $} | END_BIT     // msb as name end
 428+ 7A97             >
 428+ 7A97 83 7A       >                dw      last_NFA            // Link to previous definition Name
 428+ 7A99             >MUL_DIV_MOD:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 428+ 7A99 81 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 428+ 7A9B             >                else
 428+ 7A9B ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 428+ 7A9B             >                endif           ; ok        // for other definitions it "points" the correct handler
 428+ 7A9B             >                // Use of "; ok" to suppress "warning[fwdref]"
 428+ 7A9B             >
 428+ 7A9B             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 429+ 7A9B B1 69 BF 79                  dw      TO_R, MMUL              // >r  m*
 430+ 7A9F C5 69 45 7A                  dw      R_TO, MDIVM             // r>  m/mod
 431+ 7AA3 9E 69                        dw      EXIT                    // ;
 432+ 7AA5
 433+ 7AA5              //  ______________________________________________________________________
 434+ 7AA5              //
 435+ 7AA5              // */          n1 n2 n3 -- n4
 436+ 7AA5              // (n1 * n2) / n3. The intermediate passage through a double number avoids loss of precision
 437+ 7AA5                              Colon_Def MUL_DIV, "*/", is_normal
 437+ 7AA5             >                New_Def  MUL_DIV, "*/", Enter_Ptr, is_normal ; ok
 437+ 7AA5             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 437+ 7AA5             >
 437+ 7AA5             >                // dummy db directives used to calculate length of namec
 437+ 7AA5 2A 2F       >                db      "*/"
 437+ 7AA7             >len_NFA         defl    $ - temp_NFA
 437+ 7AA7             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 437+ 7AA5             >
 437+ 7AA5 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 437+ 7AA6 2A 2F       >                db      "*/"               // name string in 7-bit ascii, but
 437+ 7AA8             >                org     $-1                 // alter last byte of Name just above to set
 437+ 7AA7 AF          >                db      {b $} | END_BIT     // msb as name end
 437+ 7AA8             >
 437+ 7AA8 91 7A       >                dw      last_NFA            // Link to previous definition Name
 437+ 7AAA             >MUL_DIV:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 437+ 7AAA 81 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 437+ 7AAC             >                else
 437+ 7AAC ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 437+ 7AAC             >                endif           ; ok        // for other definitions it "points" the correct handler
 437+ 7AAC             >                // Use of "; ok" to suppress "warning[fwdref]"
 437+ 7AAC             >
 437+ 7AAC             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 438+ 7AAC 99 7A                        dw     MUL_DIV_MOD              // */mod
 439+ 7AAE D9 6A                        dw     NIP                      // nip
 440+ 7AB0 9E 69                        dw     EXIT                     // ;
 441+ 7AB2
 442+ 7AB2
 443+ 7AB2              //  ______________________________________________________________________
 444+ 7AB2              //
 445+ 7AB2              // m/mod        ud1 u2 -- u3 ud4
 446+ 7AB2              // mixed operation: it leaves the remainder u3 and the quotient ud4 of ud1 / u1.
 447+ 7AB2              // All terms are unsigned.
 448+ 7AB2              //              Colon_Def MDIV_MOD, "M/MOD", is_normal
 449+ 7AB2              //              dw      TO_R                    // >r           ( ud1 )
 450+ 7AB2              //              dw      ZERO, R_OP, UMDIVMOD    // 0 r um/mod   ( l rem1 h/r )
 451+ 7AB2              //              dw      R_TO, SWAP, TO_R        // r> swap >r   ( l rem )
 452+ 7AB2              //              dw      UMDIVMOD                // um/mod       ( rem2 l/r )
 453+ 7AB2              //              dw      R_TO                    // r>           ( rem2 l/r h/r )
 454+ 7AB2              //              dw      EXIT                    // ;
 455+ 7AB2
 456+ 7AB2              //  ______________________________________________________________________
 457+ 7AB2              //
 458+ 7AB2              // (line)       n1 n2 -- a b
 459+ 7AB2              // sends the line n1 of block n2 to the disk buffer.
 460+ 7AB2              // it returns the address a and ca counter b = C/L meaning a whole line.
 461+ 7AB2                              Colon_Def CLINE, "(LINE)", is_normal
 461+ 7AB2             >                New_Def  CLINE, "(LINE)", Enter_Ptr, is_normal ; ok
 461+ 7AB2             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 461+ 7AB2             >
 461+ 7AB2             >                // dummy db directives used to calculate length of namec
 461+ 7AB2 28 4C 49 4E >                db      "(LINE)"
 461+ 7AB6 45 29       >
 461+ 7AB8             >len_NFA         defl    $ - temp_NFA
 461+ 7AB8             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 461+ 7AB2             >
 461+ 7AB2 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 461+ 7AB3 28 4C 49 4E >                db      "(LINE)"               // name string in 7-bit ascii, but
 461+ 7AB7 45 29       >
 461+ 7AB9             >                org     $-1                 // alter last byte of Name just above to set
 461+ 7AB8 A9          >                db      {b $} | END_BIT     // msb as name end
 461+ 7AB9             >
 461+ 7AB9 A5 7A       >                dw      last_NFA            // Link to previous definition Name
 461+ 7ABB             >CLINE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 461+ 7ABB 81 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 461+ 7ABD             >                else
 461+ 7ABD ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 461+ 7ABD             >                endif           ; ok        // for other definitions it "points" the correct handler
 461+ 7ABD             >                // Use of "; ok" to suppress "warning[fwdref]"
 461+ 7ABD             >
 461+ 7ABD             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 462+ 7ABD B1 69                        dw      TO_R                    // >r
 463+ 7ABF A9 6C                        dw      NOOP                    // noop
 464+ 7AC1 32 6D                        dw      CL                      // c/l
 465+ 7AC3 3E 6D 99 7A                  dw      BBUF, MUL_DIV_MOD       // */mod
 466+ 7AC7 C5 69                        dw      R_TO                    // r>
 467+ 7AC9 4A 6D 5C 7A                  dw      BSCR, MUL, PLUS         // b/scr * +
 467+ 7ACD 23 6A
 468+ 7ACF 76 7D                        dw      BLOCK                   // block   ( forward )
 469+ 7AD1 23 6A                        dw      PLUS                    // +
 470+ 7AD3 A9 6C                        dw      NOOP                    // noop
 471+ 7AD5 32 6D                        dw      CL                      // c/l
 472+ 7AD7 9E 69                        dw      EXIT                    // ;
 473+ 7AD9
 474+ 7AD9              //  ______________________________________________________________________
 475+ 7AD9              //
 476+ 7AD9              // .line        n1 n2 --
 477+ 7AD9              // Sends to output line  n1  of screen n2.
 478+ 7AD9                              Colon_Def DOT_LINE, ".LINE", is_normal
 478+ 7AD9             >                New_Def  DOT_LINE, ".LINE", Enter_Ptr, is_normal ; ok
 478+ 7AD9             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 478+ 7AD9             >
 478+ 7AD9             >                // dummy db directives used to calculate length of namec
 478+ 7AD9 2E 4C 49 4E >                db      ".LINE"
 478+ 7ADD 45          >
 478+ 7ADE             >len_NFA         defl    $ - temp_NFA
 478+ 7ADE             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 478+ 7AD9             >
 478+ 7AD9 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 478+ 7ADA 2E 4C 49 4E >                db      ".LINE"               // name string in 7-bit ascii, but
 478+ 7ADE 45          >
 478+ 7ADF             >                org     $-1                 // alter last byte of Name just above to set
 478+ 7ADE C5          >                db      {b $} | END_BIT     // msb as name end
 478+ 7ADF             >
 478+ 7ADF B2 7A       >                dw      last_NFA            // Link to previous definition Name
 478+ 7AE1             >DOT_LINE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 478+ 7AE1 81 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 478+ 7AE3             >                else
 478+ 7AE3 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 478+ 7AE3             >                endif           ; ok        // for other definitions it "points" the correct handler
 478+ 7AE3             >                // Use of "; ok" to suppress "warning[fwdref]"
 478+ 7AE3             >
 478+ 7AE3             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 479+ 7AE3 BB 7A C2 72                  dw      CLINE, LTRAILING, TYPE  // (line) -trailing type
 479+ 7AE7 5E 72
 480+ 7AE9 9E 69                        dw      EXIT                    // ;
 481+ 7AEB
 482+ 7AEB              //  ______________________________________________________________________
 483+ 7AEB              //
 484+ 7AEB              // message       n1 n2 --
 485+ 7AEB              // prints error message to current channel.
 486+ 7AEB              // if WARNING is 0, prints "MSG#n".
 487+ 7AEB              // if WARNING is 1, prints line n of screen 4.
 488+ 7AEB              // if WARNING is -1, see ERROR
 489+ 7AEB              // value can be negative or beyond block 4.
 490+ 7AEB                              Colon_Def MESSAGE, "MESSAGE", is_normal
 490+ 7AEB             >                New_Def  MESSAGE, "MESSAGE", Enter_Ptr, is_normal ; ok
 490+ 7AEB             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 490+ 7AEB             >
 490+ 7AEB             >                // dummy db directives used to calculate length of namec
 490+ 7AEB 4D 45 53 53 >                db      "MESSAGE"
 490+ 7AEF 41 47 45    >
 490+ 7AF2             >len_NFA         defl    $ - temp_NFA
 490+ 7AF2             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 490+ 7AEB             >
 490+ 7AEB 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 490+ 7AEC 4D 45 53 53 >                db      "MESSAGE"               // name string in 7-bit ascii, but
 490+ 7AF0 41 47 45    >
 490+ 7AF3             >                org     $-1                 // alter last byte of Name just above to set
 490+ 7AF2 C5          >                db      {b $} | END_BIT     // msb as name end
 490+ 7AF3             >
 490+ 7AF3 D9 7A       >                dw      last_NFA            // Link to previous definition Name
 490+ 7AF5             >MESSAGE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 490+ 7AF5 81 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 490+ 7AF7             >                else
 490+ 7AF7 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 490+ 7AF7             >                endif           ; ok        // for other definitions it "points" the correct handler
 490+ 7AF7             >                // Use of "; ok" to suppress "warning[fwdref]"
 490+ 7AF7             >
 490+ 7AF7             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 491+ 7AF7 A9 6D 96 6B                  dw      WARNING, FETCH          // warning @
 492+ 7AFB                                                              // if
 493+ 7AFB 2C 64                        dw      ZBRANCH
 494+ 7AFD 18 00                        dw      Message_Else - $
 495+ 7AFF A9 63 04 00                  dw          LIT, 4              //      4
 496+ 7B03 24 6E 96 6B                  dw          OFFSET, FETCH       //      offset @
 497+ 7B07 4A 6D 7B 7A                  dw          BSCR, DIV, SUBTRACT //      b/scr / -
 497+ 7B0B 30 6F
 498+ 7B0D E1 7A                        dw          DOT_LINE            //      .line
 499+ 7B0F E8 6F                        dw          SPACE               //      space
 500+ 7B11                                                              // else
 501+ 7B11
 502+ 7B11 15 64                        dw      BRANCH
 503+ 7B13 0B 00                        dw      Message_ENdif - $
 504+ 7B15              Message_Else:
 505+ 7B15 72 74                        dw          C_DOT_QUOTE         //      .( msg#)
 506+ 7B17 04 6D 73 67                  db          4, "msg#"
 506+ 7B1B 23
 507+ 7B1C 33 83                        dw          DOT                 //      .  ( forward )
 508+ 7B1E              Message_ENdif:                                  // endif
 509+ 7B1E 9E 69                        dw      EXIT                    // ;
 510+ 7B20
 511+ 7B20
 512+ 7B20              //  ______________________________________________________________________
 513+ 7B20              //
 514+ 7B20              // device
 515+ 7B20                              Variable_Def DEVICE,   "DEVICE",   2
 515+ 7B20             >                New_Def  DEVICE, "DEVICE", Variable_Ptr, is_normal
 515+ 7B20             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 515+ 7B20             >
 515+ 7B20             >                // dummy db directives used to calculate length of namec
 515+ 7B20 44 45 56 49 >                db      "DEVICE"
 515+ 7B24 43 45       >
 515+ 7B26             >len_NFA         defl    $ - temp_NFA
 515+ 7B26             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 515+ 7B20             >
 515+ 7B20 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 515+ 7B21 44 45 56 49 >                db      "DEVICE"               // name string in 7-bit ascii, but
 515+ 7B25 43 45       >
 515+ 7B27             >                org     $-1                 // alter last byte of Name just above to set
 515+ 7B26 C5          >                db      {b $} | END_BIT     // msb as name end
 515+ 7B27             >
 515+ 7B27 EB 7A       >                dw      last_NFA            // Link to previous definition Name
 515+ 7B29             >DEVICE:          if Variable_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 515+ 7B29 DB 6C       >                dw      Variable_Ptr ; ok        // for primitive definitions  actual code
 515+ 7B2B             >                else
 515+ 7B2B ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 515+ 7B2B             >                endif           ; ok        // for other definitions it "points" the correct handler
 515+ 7B2B             >                // Use of "; ok" to suppress "warning[fwdref]"
 515+ 7B2B             >
 515+ 7B2B             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 515+ 7B2B 02 00       >                dw      2
 516+ 7B2D
 517+ 7B2D              //  ______________________________________________________________________
 518+ 7B2D
# file closed: C:\Zx\CSpect\Projects\vForth15_INDIRECT/source/L2.asm
 112  7B2D                              include "next-opt1.asm"
# file opened: C:\Zx\CSpect\Projects\vForth15_INDIRECT/source/next-opt1.asm
   1+ 7B2D              //  ______________________________________________________________________
   2+ 7B2D              //
   3+ 7B2D              //  next-opt.asm
   4+ 7B2D              //
   5+ 7B2D              //  ZX Spectrum Next - peculiar definitions
   6+ 7B2D              //  ______________________________________________________________________
   7+ 7B2D
   8+ 7B2D              //  ______________________________________________________________________
   9+ 7B2D              //
  10+ 7B2D              // reg@         n -- b
  11+ 7B2D              // read Next REGister n giving byte b
  12+ 7B2D
  13+ 7B2D                              New_Def REG_FETCH, "REG@", is_code, is_normal
  13+ 7B2D             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  13+ 7B2D             >
  13+ 7B2D             >                // dummy db directives used to calculate length of namec
  13+ 7B2D 52 45 47 40 >                db      "REG@"
  13+ 7B31             >len_NFA         defl    $ - temp_NFA
  13+ 7B31             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  13+ 7B2D             >
  13+ 7B2D 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  13+ 7B2E 52 45 47 40 >                db      "REG@"               // name string in 7-bit ascii, but
  13+ 7B32             >                org     $-1                 // alter last byte of Name just above to set
  13+ 7B31 C0          >                db      {b $} | END_BIT     // msb as name end
  13+ 7B32             >
  13+ 7B32 20 7B       >                dw      last_NFA            // Link to previous definition Name
  13+ 7B34             >REG_FETCH:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
  13+ 7B34 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
  13+ 7B34             >                else
  13+ 7B34 36 7B       >                dw      $ + 2   ; ok        // is pointed by CFA
  13+ 7B36             >                endif           ; ok        // for other definitions it "points" the correct handler
  13+ 7B36             >                // Use of "; ok" to suppress "warning[fwdref]"
  13+ 7B36             >
  13+ 7B36             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  14+ 7B36 D9                           exx
  15+ 7B37 01 3B 24                     ld      bc, $243B
  16+ 7B3A E1                           pop     hl
  17+ 7B3B ED 69                        out     (c), l
  18+ 7B3D 04                           inc     b
  19+ 7B3E ED 68                        in      l,(c)
  20+ 7B40 E5                           push    hl
  21+ 7B41 D9                           exx
  22+ 7B42                              next
  22+ 7B42 DD E9       >                jp      (ix)
  23+ 7B44
  24+ 7B44
  25+ 7B44              //  ______________________________________________________________________
  26+ 7B44              //
  27+ 7B44              // reg!         b n --
  28+ 7B44              // write value b to Next REGister n
  29+ 7B44
  30+ 7B44                              New_Def REG_STORE, "REG!", is_code, is_normal
  30+ 7B44             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  30+ 7B44             >
  30+ 7B44             >                // dummy db directives used to calculate length of namec
  30+ 7B44 52 45 47 21 >                db      "REG!"
  30+ 7B48             >len_NFA         defl    $ - temp_NFA
  30+ 7B48             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  30+ 7B44             >
  30+ 7B44 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  30+ 7B45 52 45 47 21 >                db      "REG!"               // name string in 7-bit ascii, but
  30+ 7B49             >                org     $-1                 // alter last byte of Name just above to set
  30+ 7B48 A1          >                db      {b $} | END_BIT     // msb as name end
  30+ 7B49             >
  30+ 7B49 2D 7B       >                dw      last_NFA            // Link to previous definition Name
  30+ 7B4B             >REG_STORE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
  30+ 7B4B ~           >                dw      runcode ; ok        // for primitive definitions  actual code
  30+ 7B4B             >                else
  30+ 7B4B 4D 7B       >                dw      $ + 2   ; ok        // is pointed by CFA
  30+ 7B4D             >                endif           ; ok        // for other definitions it "points" the correct handler
  30+ 7B4D             >                // Use of "; ok" to suppress "warning[fwdref]"
  30+ 7B4D             >
  30+ 7B4D             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  31+ 7B4D D9                           exx
  32+ 7B4E 01 3B 24                     ld      bc, $243B
  33+ 7B51 E1                           pop     hl
  34+ 7B52 ED 69                        out     (c), l
  35+ 7B54 04                           inc     b
  36+ 7B55 E1                           pop     hl
  37+ 7B56 ED 69                        out     (c), l
  38+ 7B58 D9                           exx
  39+ 7B59                              next
  39+ 7B59 DD E9       >                jp      (ix)
  40+ 7B5B
  41+ 7B5B
  42+ 7B5B              //  ______________________________________________________________________
  43+ 7B5B              //
  44+ 7B5B              // mmu7@        -- n
  45+ 7B5B              // query current page in MMU7 8K-RAM : 0 and 223
  46+ 7B5B
  47+ 7B5B                              Colon_Def MMU7_FETCH, "MMU7@", is_normal
  47+ 7B5B             >                New_Def  MMU7_FETCH, "MMU7@", Enter_Ptr, is_normal ; ok
  47+ 7B5B             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  47+ 7B5B             >
  47+ 7B5B             >                // dummy db directives used to calculate length of namec
  47+ 7B5B 4D 4D 55 37 >                db      "MMU7@"
  47+ 7B5F 40          >
  47+ 7B60             >len_NFA         defl    $ - temp_NFA
  47+ 7B60             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  47+ 7B5B             >
  47+ 7B5B 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  47+ 7B5C 4D 4D 55 37 >                db      "MMU7@"               // name string in 7-bit ascii, but
  47+ 7B60 40          >
  47+ 7B61             >                org     $-1                 // alter last byte of Name just above to set
  47+ 7B60 C0          >                db      {b $} | END_BIT     // msb as name end
  47+ 7B61             >
  47+ 7B61 44 7B       >                dw      last_NFA            // Link to previous definition Name
  47+ 7B63             >MMU7_FETCH:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
  47+ 7B63 81 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
  47+ 7B65             >                else
  47+ 7B65 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
  47+ 7B65             >                endif           ; ok        // for other definitions it "points" the correct handler
  47+ 7B65             >                // Use of "; ok" to suppress "warning[fwdref]"
  47+ 7B65             >
  47+ 7B65             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  48+ 7B65 A9 63 57 00                  dw      LIT, 87, REG_FETCH
  48+ 7B69 34 7B
  49+ 7B6B 9E 69                        dw      EXIT
  50+ 7B6D
  51+ 7B6D              //  ______________________________________________________________________
  52+ 7B6D              //
  53+ 7B6D              // mmu7!        n --
  54+ 7B6D              // set MMU7 8K-RAM page to n given between 0 and 223
  55+ 7B6D              // optimized version that uses NEXTREG n,A Z80n op-code.
  56+ 7B6D
  57+ 7B6D                              New_Def MMU7_STORE, "MMU7!", is_code, is_normal
  57+ 7B6D             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  57+ 7B6D             >
  57+ 7B6D             >                // dummy db directives used to calculate length of namec
  57+ 7B6D 4D 4D 55 37 >                db      "MMU7!"
  57+ 7B71 21          >
  57+ 7B72             >len_NFA         defl    $ - temp_NFA
  57+ 7B72             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  57+ 7B6D             >
  57+ 7B6D 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  57+ 7B6E 4D 4D 55 37 >                db      "MMU7!"               // name string in 7-bit ascii, but
  57+ 7B72 21          >
  57+ 7B73             >                org     $-1                 // alter last byte of Name just above to set
  57+ 7B72 A1          >                db      {b $} | END_BIT     // msb as name end
  57+ 7B73             >
  57+ 7B73 5B 7B       >                dw      last_NFA            // Link to previous definition Name
  57+ 7B75             >MMU7_STORE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
  57+ 7B75 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
  57+ 7B75             >                else
  57+ 7B75 77 7B       >                dw      $ + 2   ; ok        // is pointed by CFA
  57+ 7B77             >                endif           ; ok        // for other definitions it "points" the correct handler
  57+ 7B77             >                // Use of "; ok" to suppress "warning[fwdref]"
  57+ 7B77             >
  57+ 7B77             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  58+ 7B77 E1                           pop     hl
  59+ 7B78 7D                           ld      a, l
  60+ 7B79 ED 92 57                     nextreg 87, a
  61+ 7B7C
  62+ 7B7C                              next
  62+ 7B7C DD E9       >                jp      (ix)
  63+ 7B7E
  64+ 7B7E              //  ______________________________________________________________________
  65+ 7B7E              //
  66+ 7B7E              // >far         ha -- a n
  67+ 7B7E              // decode bits 765 of H as one of the 8K-page between 64 and 71 (40h-47h)
  68+ 7B7E              // take lower bits of H and L as an offset from E000h
  69+ 7B7E              // then return address  a  between E000h-FFFFh
  70+ 7B7E              // and page number n  between 64-71 (40h-47h)
  71+ 7B7E              // For example, in hex:
  72+ 7B7E              //   0000 >FAR  gives  40.E000
  73+ 7B7E              //   1FFF >FAR  gives  40.FFFF
  74+ 7B7E              //   2000 >FAR  gives  41.E000
  75+ 7B7E              //   3FFF >FAR  gives  41.FFFF
  76+ 7B7E              //   EFFF >FAR  gives  47.EFFF
  77+ 7B7E              //   FFFF >FAR  gives  47.FFFF
  78+ 7B7E              //                New_Def TO_FAR, ">FAR", is_code, is_normal
  79+ 7B7E              //                pop     de
  80+ 7B7E              //                ld      a, d
  81+ 7B7E              //                and     $E0
  82+ 7B7E              //                rlca
  83+ 7B7E              //                rlca
  84+ 7B7E              //                rlca
  85+ 7B7E              //                add     $40
  86+ 7B7E              //                ld      l, a
  87+ 7B7E              //                ld      h, 0
  88+ 7B7E              //                ld      a, d
  89+ 7B7E              //                or      $E0
  90+ 7B7E              //                ld      d, a
  91+ 7B7E              //                push    hl
  92+ 7B7E              //                push    de
  93+ 7B7E              //                next
  94+ 7B7E
  95+ 7B7E              //  ______________________________________________________________________
  96+ 7B7E              //
  97+ 7B7E              // <far         a n  -- ha
  98+ 7B7E              // given an address E000-FFFF and a page number n (64-71 or 40h-47h)
  99+ 7B7E              // reverse of >FAR: encodes a FAR address compressing
 100+ 7B7E              // to bits 765 of H, lower bits of HL address offset from E000h
 101+ 7B7E              //                New_Def FROM_FAR, "<FAR", is_code, is_normal
 102+ 7B7E              //                pop     de                  // page number in e
 103+ 7B7E              //                pop     hl                  // address in hl
 104+ 7B7E              //                ld      a, e
 105+ 7B7E              //                sub     $40                 // reduced to 0-7
 106+ 7B7E              //                rrca
 107+ 7B7E              //                rrca
 108+ 7B7E              //                rrca
 109+ 7B7E              //                ld      d, a                // save to d bits 765
 110+ 7B7E              //                ld      a, h                // drops
 111+ 7B7E              //                and     $1F
 112+ 7B7E              //                or      d
 113+ 7B7E              //                ld      h, a
 114+ 7B7E              //
 115+ 7B7E              //                psh1
 116+ 7B7E
 117+ 7B7E              //  ______________________________________________________________________
 118+ 7B7E              //
 119+ 7B7E              // m_p3dos      n1 n2 n3 n4 a -- n5 n6 n7 n8  f
 120+ 7B7E              // NextZXOS call wrapper.
 121+ 7B7E              //  n1 = hl register parameter value
 122+ 7B7E              //  n2 = de register parameter value
 123+ 7B7E              //  n3 = bc register parameter value
 124+ 7B7E              //  n4 =  a register parameter value
 125+ 7B7E              //   a = routine address in ROM 3
 126+ 7B7E              // ----
 127+ 7B7E              //  n5 = hl returned value
 128+ 7B7E              //  n6 = de returned value
 129+ 7B7E              //  n7 = bc returned value
 130+ 7B7E              //  n8 =  a returned value
 131+ 7B7E              //   f
 132+ 7B7E                              New_Def M_P3DOS, "M_P3DOS", is_code, is_normal
 132+ 7B7E             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 132+ 7B7E             >
 132+ 7B7E             >                // dummy db directives used to calculate length of namec
 132+ 7B7E 4D 5F 50 33 >                db      "M_P3DOS"
 132+ 7B82 44 4F 53    >
 132+ 7B85             >len_NFA         defl    $ - temp_NFA
 132+ 7B85             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 132+ 7B7E             >
 132+ 7B7E 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 132+ 7B7F 4D 5F 50 33 >                db      "M_P3DOS"               // name string in 7-bit ascii, but
 132+ 7B83 44 4F 53    >
 132+ 7B86             >                org     $-1                 // alter last byte of Name just above to set
 132+ 7B85 D3          >                db      {b $} | END_BIT     // msb as name end
 132+ 7B86             >
 132+ 7B86 6D 7B       >                dw      last_NFA            // Link to previous definition Name
 132+ 7B88             >M_P3DOS:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 132+ 7B88 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
 132+ 7B88             >                else
 132+ 7B88 8A 7B       >                dw      $ + 2   ; ok        // is pointed by CFA
 132+ 7B8A             >                endif           ; ok        // for other definitions it "points" the correct handler
 132+ 7B8A             >                // Use of "; ok" to suppress "warning[fwdref]"
 132+ 7B8A             >
 132+ 7B8A             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 133+ 7B8A D1                           pop     de                  // dos call entry address in de
 134+ 7B8B E1                           pop     hl                  // a register
 135+ 7B8C 7D                           ld      a, l
 136+ 7B8D D9                           exx
 137+ 7B8E C1                           pop     bc
 138+ 7B8F D1                           pop     de
 139+ 7B90 E1                           pop     hl
 140+ 7B91 D9                           exx
 141+ 7B92
 142+ 7B92 C5                           push    bc
 143+ 7B93 DD E5                        push    ix
 144+ 7B95
 145+ 7B95              //              ld      (SP_Saved), sp
 146+ 7B95              //              ld      sp, Cold_origin - 5
 147+ 7B95 0E 07                        ld      c, 7                // use 7 RAM Bank
 148+ 7B97
 149+ 7B97 CF                           rst     08
 150+ 7B98 94                           db      $94
 151+ 7B99
 152+ 7B99              //              ld      sp, (SP_Saved)
 153+ 7B99              //              push    ix
 154+ 7B99              //              pop     hl
 155+ 7B99              //              ld      (IX_Echo), hl
 156+ 7B99 DD 22 90 63                  ld      (IX_Echo), ix
 157+ 7B9D              //              nop
 158+ 7B9D DD E1                        pop     ix
 159+ 7B9F E3                           ex      (sp), hl            // hl argument and retrieve bc
 160+ 7BA0 D5                           push    de
 161+ 7BA1 C5                           push    bc
 162+ 7BA2 4D                           ld      c, l
 163+ 7BA3 44                           ld      b, h
 164+ 7BA4
 165+ 7BA4 26 00                        ld      h, 0
 166+ 7BA6 6F                           ld      l, a
 167+ 7BA7 E5                           push    hl
 168+ 7BA8 ED 62                        sbc     hl, hl              // -1 for OK ; 0 for KO but now...
 169+ 7BAA 23                           inc     hl                  //  0 for OK ; 1 for ko
 170+ 7BAB
 171+ 7BAB                              psh1
 171+ 7BAB E5          >                push    hl
 171+ 7BAC DD E9       >                jp      (ix)
 172+ 7BAE
 173+ 7BAE              //  ______________________________________________________________________
 174+ 7BAE              //
 175+ 7BAE              // blk-fh
 176+ 7BAE                              Variable_Def BLK_FH,   "BLK-FH",   1
 176+ 7BAE             >                New_Def  BLK_FH, "BLK-FH", Variable_Ptr, is_normal
 176+ 7BAE             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 176+ 7BAE             >
 176+ 7BAE             >                // dummy db directives used to calculate length of namec
 176+ 7BAE 42 4C 4B 2D >                db      "BLK-FH"
 176+ 7BB2 46 48       >
 176+ 7BB4             >len_NFA         defl    $ - temp_NFA
 176+ 7BB4             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 176+ 7BAE             >
 176+ 7BAE 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 176+ 7BAF 42 4C 4B 2D >                db      "BLK-FH"               // name string in 7-bit ascii, but
 176+ 7BB3 46 48       >
 176+ 7BB5             >                org     $-1                 // alter last byte of Name just above to set
 176+ 7BB4 C8          >                db      {b $} | END_BIT     // msb as name end
 176+ 7BB5             >
 176+ 7BB5 7E 7B       >                dw      last_NFA            // Link to previous definition Name
 176+ 7BB7             >BLK_FH:          if Variable_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 176+ 7BB7 DB 6C       >                dw      Variable_Ptr ; ok        // for primitive definitions  actual code
 176+ 7BB9             >                else
 176+ 7BB9 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 176+ 7BB9             >                endif           ; ok        // for other definitions it "points" the correct handler
 176+ 7BB9             >                // Use of "; ok" to suppress "warning[fwdref]"
 176+ 7BB9             >
 176+ 7BB9             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 176+ 7BB9 01 00       >                dw      1
 177+ 7BBB
 178+ 7BBB                              New_Def BLK_FNAME,   "BLK-FNAME", Create_Ptr, is_normal
 178+ 7BBB             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 178+ 7BBB             >
 178+ 7BBB             >                // dummy db directives used to calculate length of namec
 178+ 7BBB 42 4C 4B 2D >                db      "BLK-FNAME"
 178+ 7BBF 46 4E 41 4D >
 178+ 7BC3 45          >
 178+ 7BC4             >len_NFA         defl    $ - temp_NFA
 178+ 7BC4             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 178+ 7BBB             >
 178+ 7BBB 89          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 178+ 7BBC 42 4C 4B 2D >                db      "BLK-FNAME"               // name string in 7-bit ascii, but
 178+ 7BC0 46 4E 41 4D >
 178+ 7BC4 45          >
 178+ 7BC5             >                org     $-1                 // alter last byte of Name just above to set
 178+ 7BC4 C5          >                db      {b $} | END_BIT     // msb as name end
 178+ 7BC5             >
 178+ 7BC5 AE 7B       >                dw      last_NFA            // Link to previous definition Name
 178+ 7BC7             >BLK_FNAME:          if Create_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 178+ 7BC7 D6 76       >                dw      Create_Ptr ; ok        // for primitive definitions  actual code
 178+ 7BC9             >                else
 178+ 7BC9 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 178+ 7BC9             >                endif           ; ok        // for other definitions it "points" the correct handler
 178+ 7BC9             >                // Use of "; ok" to suppress "warning[fwdref]"
 178+ 7BC9             >
 178+ 7BC9             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 179+ 7BC9 0E 21 42 6C                  db      14, "!Blocks-64.bin", 0
 179+ 7BCD 6F 63 6B 73
 179+ 7BD1 2D 36 34 2E
 179+ 7BD5 62 69 6E 00
 180+ 7BD9 00 00 00...                  ds      24
 181+ 7BF1
 182+ 7BF1              //  ______________________________________________________________________
 183+ 7BF1              //
 184+ 7BF1              // blk-seek     n --
 185+ 7BF1              // seek block n  within blocks!.bin  file
 186+ 7BF1                              Colon_Def BLK_SEEK, "BLK-SEEK", is_normal
 186+ 7BF1             >                New_Def  BLK_SEEK, "BLK-SEEK", Enter_Ptr, is_normal ; ok
 186+ 7BF1             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 186+ 7BF1             >
 186+ 7BF1             >                // dummy db directives used to calculate length of namec
 186+ 7BF1 42 4C 4B 2D >                db      "BLK-SEEK"
 186+ 7BF5 53 45 45 4B >
 186+ 7BF9             >len_NFA         defl    $ - temp_NFA
 186+ 7BF9             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 186+ 7BF1             >
 186+ 7BF1 88          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 186+ 7BF2 42 4C 4B 2D >                db      "BLK-SEEK"               // name string in 7-bit ascii, but
 186+ 7BF6 53 45 45 4B >
 186+ 7BFA             >                org     $-1                 // alter last byte of Name just above to set
 186+ 7BF9 CB          >                db      {b $} | END_BIT     // msb as name end
 186+ 7BFA             >
 186+ 7BFA BB 7B       >                dw      last_NFA            // Link to previous definition Name
 186+ 7BFC             >BLK_SEEK:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 186+ 7BFC 81 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 186+ 7BFE             >                else
 186+ 7BFE ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 186+ 7BFE             >                endif           ; ok        // for other definitions it "points" the correct handler
 186+ 7BFE             >                // Use of "; ok" to suppress "warning[fwdref]"
 186+ 7BFE             >
 186+ 7BFE             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 187+ 7BFE 3E 6D BF 79                  dw  BBUF, MMUL
 188+ 7C02 B7 7B 96 6B                  dw  BLK_FH, FETCH
 189+ 7C06 A3 67                        dw  F_SEEK
 190+ 7C08 A9 63 2D 00                  dw  LIT, $2D, QERROR
 190+ 7C0C A2 70
 191+ 7C0E 9E 69                        dw  EXIT
 192+ 7C10
 193+ 7C10              //  ______________________________________________________________________
 194+ 7C10              //
 195+ 7C10              // blk-read     n --
 196+ 7C10              // seek block n  within blocks!.bin  file
 197+ 7C10                              Colon_Def BLK_READ, "BLK-READ", is_normal
 197+ 7C10             >                New_Def  BLK_READ, "BLK-READ", Enter_Ptr, is_normal ; ok
 197+ 7C10             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 197+ 7C10             >
 197+ 7C10             >                // dummy db directives used to calculate length of namec
 197+ 7C10 42 4C 4B 2D >                db      "BLK-READ"
 197+ 7C14 52 45 41 44 >
 197+ 7C18             >len_NFA         defl    $ - temp_NFA
 197+ 7C18             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 197+ 7C10             >
 197+ 7C10 88          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 197+ 7C11 42 4C 4B 2D >                db      "BLK-READ"               // name string in 7-bit ascii, but
 197+ 7C15 52 45 41 44 >
 197+ 7C19             >                org     $-1                 // alter last byte of Name just above to set
 197+ 7C18 C4          >                db      {b $} | END_BIT     // msb as name end
 197+ 7C19             >
 197+ 7C19 F1 7B       >                dw      last_NFA            // Link to previous definition Name
 197+ 7C1B             >BLK_READ:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 197+ 7C1B 81 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 197+ 7C1D             >                else
 197+ 7C1D ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 197+ 7C1D             >                endif           ; ok        // for other definitions it "points" the correct handler
 197+ 7C1D             >                // Use of "; ok" to suppress "warning[fwdref]"
 197+ 7C1D             >
 197+ 7C1D             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 198+ 7C1D FC 7B                        dw  BLK_SEEK
 199+ 7C1F 3E 6D                        dw  BBUF
 200+ 7C21 B7 7B 96 6B                  dw  BLK_FH, FETCH
 201+ 7C25 0F 68                        dw  F_READ
 202+ 7C27 A9 63 2E 00                  dw  LIT, $2E, QERROR
 202+ 7C2B A2 70
 203+ 7C2D CE 6A                        dw  DROP
 204+ 7C2F 9E 69                        dw  EXIT
 205+ 7C31
 206+ 7C31              //  ______________________________________________________________________
 207+ 7C31              //
 208+ 7C31              // blk-write     n --
 209+ 7C31              // seek block n  within blocks!.bin  file
 210+ 7C31                              Colon_Def BLK_WRITE, "BLK-WRITE", is_normal
 210+ 7C31             >                New_Def  BLK_WRITE, "BLK-WRITE", Enter_Ptr, is_normal ; ok
 210+ 7C31             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 210+ 7C31             >
 210+ 7C31             >                // dummy db directives used to calculate length of namec
 210+ 7C31 42 4C 4B 2D >                db      "BLK-WRITE"
 210+ 7C35 57 52 49 54 >
 210+ 7C39 45          >
 210+ 7C3A             >len_NFA         defl    $ - temp_NFA
 210+ 7C3A             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 210+ 7C31             >
 210+ 7C31 89          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 210+ 7C32 42 4C 4B 2D >                db      "BLK-WRITE"               // name string in 7-bit ascii, but
 210+ 7C36 57 52 49 54 >
 210+ 7C3A 45          >
 210+ 7C3B             >                org     $-1                 // alter last byte of Name just above to set
 210+ 7C3A C5          >                db      {b $} | END_BIT     // msb as name end
 210+ 7C3B             >
 210+ 7C3B 10 7C       >                dw      last_NFA            // Link to previous definition Name
 210+ 7C3D             >BLK_WRITE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 210+ 7C3D 81 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 210+ 7C3F             >                else
 210+ 7C3F ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 210+ 7C3F             >                endif           ; ok        // for other definitions it "points" the correct handler
 210+ 7C3F             >                // Use of "; ok" to suppress "warning[fwdref]"
 210+ 7C3F             >
 210+ 7C3F             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 211+ 7C3F FC 7B                        dw  BLK_SEEK
 212+ 7C41 3E 6D                        dw  BBUF
 213+ 7C43 B7 7B 96 6B                  dw  BLK_FH, FETCH
 214+ 7C47 2E 68                        dw  F_WRITE
 215+ 7C49 A9 63 2F 00                  dw  LIT, $2F, QERROR
 215+ 7C4D A2 70
 216+ 7C4F CE 6A                        dw  DROP
 217+ 7C51 9E 69                        dw  EXIT
 218+ 7C53
 219+ 7C53              //  ______________________________________________________________________
 220+ 7C53              //
 221+ 7C53              // blk-init     n --
 222+ 7C53              // seek block n  within blocks!.bin  file
 223+ 7C53                              Colon_Def BLK_INIT, "BLK-INIT", is_normal
 223+ 7C53             >                New_Def  BLK_INIT, "BLK-INIT", Enter_Ptr, is_normal ; ok
 223+ 7C53             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 223+ 7C53             >
 223+ 7C53             >                // dummy db directives used to calculate length of namec
 223+ 7C53 42 4C 4B 2D >                db      "BLK-INIT"
 223+ 7C57 49 4E 49 54 >
 223+ 7C5B             >len_NFA         defl    $ - temp_NFA
 223+ 7C5B             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 223+ 7C53             >
 223+ 7C53 88          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 223+ 7C54 42 4C 4B 2D >                db      "BLK-INIT"               // name string in 7-bit ascii, but
 223+ 7C58 49 4E 49 54 >
 223+ 7C5C             >                org     $-1                 // alter last byte of Name just above to set
 223+ 7C5B D4          >                db      {b $} | END_BIT     // msb as name end
 223+ 7C5C             >
 223+ 7C5C 31 7C       >                dw      last_NFA            // Link to previous definition Name
 223+ 7C5E             >BLK_INIT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 223+ 7C5E 81 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 223+ 7C60             >                else
 223+ 7C60 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 223+ 7C60             >                endif           ; ok        // for other definitions it "points" the correct handler
 223+ 7C60             >                // Use of "; ok" to suppress "warning[fwdref]"
 223+ 7C60             >
 223+ 7C60             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 224+ 7C60 B7 7B 96 6B                  dw  BLK_FH, FETCH, F_CLOSE, DROP
 224+ 7C64 C6 67 CE 6A
 225+ 7C68 C7 7B 44 6A                  dw  BLK_FNAME, ONE_PLUS
 226+ 7C6C DD 6E 16 6D                  dw  HERE, THREE, F_OPEN         // open for update (read+write)
 226+ 7C70 45 68
 227+ 7C72 A9 63 2C 00                  dw  LIT, $2C, QERROR
 227+ 7C76 A2 70
 228+ 7C78 B7 7B A3 6B                  dw  BLK_FH, STORE
 229+ 7C7C 9E 69                        dw  EXIT
 230+ 7C7E
 231+ 7C7E              //  ______________________________________________________________________
 232+ 7C7E              //
 233+ 7C7E              // #sec
 234+ 7C7E              // number of 512 Byte "sector" available on thie sysstem.
 235+ 7C7E              // it addd up to 16 MByte of data that can be used as source or pool for almost anything.
 236+ 7C7E
 237+ 7C7E                              Constant_Def NSEC , "#SEC", 32767
 237+ 7C7E             >                New_Def  NSEC, "#SEC", Constant_Ptr, is_normal
 237+ 7C7E             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 237+ 7C7E             >
 237+ 7C7E             >                // dummy db directives used to calculate length of namec
 237+ 7C7E 23 53 45 43 >                db      "#SEC"
 237+ 7C82             >len_NFA         defl    $ - temp_NFA
 237+ 7C82             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 237+ 7C7E             >
 237+ 7C7E 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 237+ 7C7F 23 53 45 43 >                db      "#SEC"               // name string in 7-bit ascii, but
 237+ 7C83             >                org     $-1                 // alter last byte of Name just above to set
 237+ 7C82 C3          >                db      {b $} | END_BIT     // msb as name end
 237+ 7C83             >
 237+ 7C83 53 7C       >                dw      last_NFA            // Link to previous definition Name
 237+ 7C85             >NSEC:          if Constant_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 237+ 7C85 C0 6C       >                dw      Constant_Ptr ; ok        // for primitive definitions  actual code
 237+ 7C87             >                else
 237+ 7C87 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 237+ 7C87             >                endif           ; ok        // for other definitions it "points" the correct handler
 237+ 7C87             >                // Use of "; ok" to suppress "warning[fwdref]"
 237+ 7C87             >
 237+ 7C87             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 237+ 7C87 FF 7F       >                dw      32767
 238+ 7C89
 239+ 7C89              //  ______________________________________________________________________
 240+ 7C89
 241+ 7C89
 242+ 7C89
# file closed: C:\Zx\CSpect\Projects\vForth15_INDIRECT/source/next-opt1.asm
 113  7C89                              include "L3.asm"
# file opened: C:\Zx\CSpect\Projects\vForth15_INDIRECT/source/L3.asm
   1+ 7C89              //  ______________________________________________________________________
   2+ 7C89              //
   3+ 7C89              //  L3.asm
   4+ 7C89              //
   5+ 7C89              //  Continuation of L2.asm
   6+ 7C89              //  I/O Block definitions
   7+ 7C89              //  ______________________________________________________________________
   8+ 7C89
   9+ 7C89
  10+ 7C89              //  ______________________________________________________________________
  11+ 7C89              //
  12+ 7C89              // r/w          a n f --
  13+ 7C89              // read/write block n depending on flag f, true-flag means read, false-flag means write.
  14+ 7C89                              Colon_Def READ_WRITE, "R/W", is_normal
  14+ 7C89             >                New_Def  READ_WRITE, "R/W", Enter_Ptr, is_normal ; ok
  14+ 7C89             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  14+ 7C89             >
  14+ 7C89             >                // dummy db directives used to calculate length of namec
  14+ 7C89 52 2F 57    >                db      "R/W"
  14+ 7C8C             >len_NFA         defl    $ - temp_NFA
  14+ 7C8C             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  14+ 7C89             >
  14+ 7C89 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  14+ 7C8A 52 2F 57    >                db      "R/W"               // name string in 7-bit ascii, but
  14+ 7C8D             >                org     $-1                 // alter last byte of Name just above to set
  14+ 7C8C D7          >                db      {b $} | END_BIT     // msb as name end
  14+ 7C8D             >
  14+ 7C8D 7E 7C       >                dw      last_NFA            // Link to previous definition Name
  14+ 7C8F             >READ_WRITE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
  14+ 7C8F 81 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
  14+ 7C91             >                else
  14+ 7C91 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
  14+ 7C91             >                endif           ; ok        // for other definitions it "points" the correct handler
  14+ 7C91             >                // Use of "; ok" to suppress "warning[fwdref]"
  14+ 7C91             >
  14+ 7C91             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  15+ 7C91 B1 69                        dw      TO_R                    // >r
  16+ 7C93 50 6A                        dw      ONE_SUBTRACT            // 1-
  17+ 7C95 03 6B FB 69                  dw      DUP, ZLESS              // dup 0<
  18+ 7C99 BE 6A 85 7C                  dw      OVER, NSEC              // over #sec
  19+ 7C9D 50 6A 76 6F                  dw      ONE_SUBTRACT, GREATER   // 1- >
  20+ 7CA1 40 69                        dw      OR_OP                   // or
  21+ 7CA3 A9 63 06 00                  dw      LIT, 6, QERROR          // 6 ?error
  21+ 7CA7 A2 70
  22+ 7CA9 C5 69                        dw      R_TO                    // r>
  23+ 7CAB                                                              // if
  24+ 7CAB 2C 64                        dw      ZBRANCH
  25+ 7CAD 08 00                        dw      Read_Write_Else - $
  26+ 7CAF 1B 7C                        dw          BLK_READ            //      blk-read
  27+ 7CB1 15 64                        dw      BRANCH
  28+ 7CB3 04 00                        dw      Read_Write_Endif - $
  29+ 7CB5              Read_Write_Else:                                // else
  30+ 7CB5 3D 7C                        dw          BLK_WRITE           //      blk-write
  31+ 7CB7              Read_Write_Endif:                               // endif
  32+ 7CB7 9E 69                        dw      EXIT                    // ;
  33+ 7CB9
  34+ 7CB9
  35+ 7CB9              //  ______________________________________________________________________
  36+ 7CB9              //
  37+ 7CB9              // +buf        a1 -- a2 f
  38+ 7CB9              // advences to next buffer, cyclically rotating along them
  39+ 7CB9                              Colon_Def PBUF, "+BUF", is_normal
  39+ 7CB9             >                New_Def  PBUF, "+BUF", Enter_Ptr, is_normal ; ok
  39+ 7CB9             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  39+ 7CB9             >
  39+ 7CB9             >                // dummy db directives used to calculate length of namec
  39+ 7CB9 2B 42 55 46 >                db      "+BUF"
  39+ 7CBD             >len_NFA         defl    $ - temp_NFA
  39+ 7CBD             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  39+ 7CB9             >
  39+ 7CB9 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  39+ 7CBA 2B 42 55 46 >                db      "+BUF"               // name string in 7-bit ascii, but
  39+ 7CBE             >                org     $-1                 // alter last byte of Name just above to set
  39+ 7CBD C6          >                db      {b $} | END_BIT     // msb as name end
  39+ 7CBE             >
  39+ 7CBE 89 7C       >                dw      last_NFA            // Link to previous definition Name
  39+ 7CC0             >PBUF:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
  39+ 7CC0 81 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
  39+ 7CC2             >                else
  39+ 7CC2 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
  39+ 7CC2             >                endif           ; ok        // for other definitions it "points" the correct handler
  39+ 7CC2             >                // Use of "; ok" to suppress "warning[fwdref]"
  39+ 7CC2             >
  39+ 7CC2             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  40+ 7CC2 A9 63 04 02                  dw      LIT, 516, PLUS          // 516 +
  40+ 7CC6 23 6A
  41+ 7CC8 03 6B E0 6D                  dw      DUP, LIMIT, FETCH       // dup limit @
  41+ 7CCC 96 6B
  42+ 7CCE 3E 6F                        dw      EQUALS                  // =
  43+ 7CD0                                                              // if
  44+ 7CD0 2C 64                        dw      ZBRANCH
  45+ 7CD2 08 00                        dw      PBuf_Endif - $
  46+ 7CD4 CE 6A                        dw          DROP                //      drop
  47+ 7CD6 D5 6D 96 6B                  dw          FIRST, FETCH        //      first @
  48+ 7CDA              PBuf_Endif:                                     // endif
  49+ 7CDA 03 6B 92 6E                  dw      DUP, PREV, FETCH        // dup prev @
  49+ 7CDE 96 6B
  50+ 7CE0 30 6F                        dw      SUBTRACT                // -
  51+ 7CE2 9E 69                        dw      EXIT                    // ;
  52+ 7CE4
  53+ 7CE4              //  ______________________________________________________________________
  54+ 7CE4              //
  55+ 7CE4              // update       --
  56+ 7CE4              // mark the last used block to be written to disk
  57+ 7CE4                              Colon_Def UPDATE, "UPDATE", is_normal
  57+ 7CE4             >                New_Def  UPDATE, "UPDATE", Enter_Ptr, is_normal ; ok
  57+ 7CE4             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  57+ 7CE4             >
  57+ 7CE4             >                // dummy db directives used to calculate length of namec
  57+ 7CE4 55 50 44 41 >                db      "UPDATE"
  57+ 7CE8 54 45       >
  57+ 7CEA             >len_NFA         defl    $ - temp_NFA
  57+ 7CEA             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  57+ 7CE4             >
  57+ 7CE4 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  57+ 7CE5 55 50 44 41 >                db      "UPDATE"               // name string in 7-bit ascii, but
  57+ 7CE9 54 45       >
  57+ 7CEB             >                org     $-1                 // alter last byte of Name just above to set
  57+ 7CEA C5          >                db      {b $} | END_BIT     // msb as name end
  57+ 7CEB             >
  57+ 7CEB B9 7C       >                dw      last_NFA            // Link to previous definition Name
  57+ 7CED             >UPDATE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
  57+ 7CED 81 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
  57+ 7CEF             >                else
  57+ 7CEF ~           >                dw      $ + 2   ; ok        // is pointed by CFA
  57+ 7CEF             >                endif           ; ok        // for other definitions it "points" the correct handler
  57+ 7CEF             >                // Use of "; ok" to suppress "warning[fwdref]"
  57+ 7CEF             >
  57+ 7CEF             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  58+ 7CEF 92 6E 96 6B                  dw      PREV, FETCH, FETCH      // prev @ @
  58+ 7CF3 96 6B
  59+ 7CF5 A9 63 00 80                  dw      LIT, $8000, OR_OP       // $8000, or
  59+ 7CF9 40 69
  60+ 7CFB 92 6E 96 6B                  dw      PREV, FETCH, STORE      // prev @ !
  60+ 7CFF A3 6B
  61+ 7D01 9E 69                        dw      EXIT                    // ;
  62+ 7D03
  63+ 7D03
  64+ 7D03              //  ______________________________________________________________________
  65+ 7D03              //
  66+ 7D03              // empty-buffers --
  67+ 7D03                              Colon_Def EMPTY_BUFFERS, "EMPTY-BUFFERS", is_normal
  67+ 7D03             >                New_Def  EMPTY_BUFFERS, "EMPTY-BUFFERS", Enter_Ptr, is_normal ; ok
  67+ 7D03             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  67+ 7D03             >
  67+ 7D03             >                // dummy db directives used to calculate length of namec
  67+ 7D03 45 4D 50 54 >                db      "EMPTY-BUFFERS"
  67+ 7D07 59 2D 42 55 >
  67+ 7D0B 46 46 45 52 >
  67+ 7D0F 53          >
  67+ 7D10             >len_NFA         defl    $ - temp_NFA
  67+ 7D10             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  67+ 7D03             >
  67+ 7D03 8D          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  67+ 7D04 45 4D 50 54 >                db      "EMPTY-BUFFERS"               // name string in 7-bit ascii, but
  67+ 7D08 59 2D 42 55 >
  67+ 7D0C 46 46 45 52 >
  67+ 7D10 53          >
  67+ 7D11             >                org     $-1                 // alter last byte of Name just above to set
  67+ 7D10 D3          >                db      {b $} | END_BIT     // msb as name end
  67+ 7D11             >
  67+ 7D11 E4 7C       >                dw      last_NFA            // Link to previous definition Name
  67+ 7D13             >EMPTY_BUFFERS:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
  67+ 7D13 81 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
  67+ 7D15             >                else
  67+ 7D15 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
  67+ 7D15             >                endif           ; ok        // for other definitions it "points" the correct handler
  67+ 7D15             >                // Use of "; ok" to suppress "warning[fwdref]"
  67+ 7D15             >
  67+ 7D15             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  68+ 7D15 D5 6D 96 6B                  dw      FIRST, FETCH            // first @
  69+ 7D19 E0 6D 96 6B                  dw      LIMIT, FETCH            // limit @
  70+ 7D1D BE 6A 30 6F                  dw      OVER, SUBTRACT, ERASE   // over - erase
  70+ 7D21 DA 73
  71+ 7D23 9E 69                        dw      EXIT                    // ;
  72+ 7D25
  73+ 7D25              //  ______________________________________________________________________
  74+ 7D25              //
  75+ 7D25              // buffer       n -- a
  76+ 7D25              // read block n and gives the address to a buffer
  77+ 7D25              // any block previously inside the buffer, if modified, is rewritten to
  78+ 7D25              // disk before reading the block n.
  79+ 7D25
  80+ 7D25                              Colon_Def BUFFER, "BUFFER", is_normal
  80+ 7D25             >                New_Def  BUFFER, "BUFFER", Enter_Ptr, is_normal ; ok
  80+ 7D25             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  80+ 7D25             >
  80+ 7D25             >                // dummy db directives used to calculate length of namec
  80+ 7D25 42 55 46 46 >                db      "BUFFER"
  80+ 7D29 45 52       >
  80+ 7D2B             >len_NFA         defl    $ - temp_NFA
  80+ 7D2B             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  80+ 7D25             >
  80+ 7D25 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  80+ 7D26 42 55 46 46 >                db      "BUFFER"               // name string in 7-bit ascii, but
  80+ 7D2A 45 52       >
  80+ 7D2C             >                org     $-1                 // alter last byte of Name just above to set
  80+ 7D2B D2          >                db      {b $} | END_BIT     // msb as name end
  80+ 7D2C             >
  80+ 7D2C 03 7D       >                dw      last_NFA            // Link to previous definition Name
  80+ 7D2E             >BUFFER:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
  80+ 7D2E 81 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
  80+ 7D30             >                else
  80+ 7D30 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
  80+ 7D30             >                endif           ; ok        // for other definitions it "points" the correct handler
  80+ 7D30             >                // Use of "; ok" to suppress "warning[fwdref]"
  80+ 7D30             >
  80+ 7D30             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  81+ 7D30 88 6E 96 6B                  dw      USE, FETCH              // use @
  82+ 7D34 03 6B B1 69                  dw      DUP, TO_R               // dup >r
  83+ 7D38                                                              // begin
  84+ 7D38              Buffer_Begin:
  85+ 7D38 C0 7C                        dw          PBUF                //      +buf
  86+ 7D3A                                                              // until
  87+ 7D3A 2C 64                        dw      ZBRANCH
  88+ 7D3C FC FF                        dw      Buffer_Begin - $
  89+ 7D3E 88 6E A3 6B                  dw      USE, STORE              // use !
  90+ 7D42 D9 69 96 6B                  dw      R_OP, FETCH, ZLESS      // r @ 0<
  90+ 7D46 FB 69
  91+ 7D48                                                              // if
  92+ 7D48 2C 64                        dw      ZBRANCH
  93+ 7D4A 14 00                        dw      Buffer_Endif - $
  94+ 7D4C D9 69 6C 6A                  dw          R_OP, CELL_PLUS     //      r cell+
  95+ 7D50 D9 69 96 6B                  dw          R_OP, FETCH         //      r fetch
  96+ 7D54 A9 63 FF 7F                  dw          LIT, $7FFF          //      7FFF
  97+ 7D58 2E 69                        dw          AND_OP              //      and
  98+ 7D5A FE 6C 8F 7C                  dw          ZERO, READ_WRITE    //      0 r/w
  99+ 7D5E              Buffer_Endif:                                   // endif
 100+ 7D5E D9 69 A3 6B                  dw      R_OP, STORE             // r !
 101+ 7D62 D9 69 92 6E                  dw      R_OP, PREV, STORE       // r prev !
 101+ 7D66 A3 6B
 102+ 7D68 C5 69 6C 6A                  dw      R_TO, CELL_PLUS         // r> cell+
 103+ 7D6C 9E 69                        dw      EXIT                    // ;
 104+ 7D6E
 105+ 7D6E              //  ______________________________________________________________________
 106+ 7D6E              //
 107+ 7D6E              // block        n -- a
 108+ 7D6E              // Leaves the buffer address that contains the block n.
 109+ 7D6E              // If the block is not already present, it will be loaded from disk
 110+ 7D6E              // The block previously inside the buffer, if modified, is rewritten to
 111+ 7D6E              // disk before reading the block n.
 112+ 7D6E              // See also BUFFER, R/W, UPDATE, FLUSH.
 113+ 7D6E
 114+ 7D6E                              Colon_Def BLOCK, "BLOCK", is_normal
 114+ 7D6E             >                New_Def  BLOCK, "BLOCK", Enter_Ptr, is_normal ; ok
 114+ 7D6E             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 114+ 7D6E             >
 114+ 7D6E             >                // dummy db directives used to calculate length of namec
 114+ 7D6E 42 4C 4F 43 >                db      "BLOCK"
 114+ 7D72 4B          >
 114+ 7D73             >len_NFA         defl    $ - temp_NFA
 114+ 7D73             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 114+ 7D6E             >
 114+ 7D6E 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 114+ 7D6F 42 4C 4F 43 >                db      "BLOCK"               // name string in 7-bit ascii, but
 114+ 7D73 4B          >
 114+ 7D74             >                org     $-1                 // alter last byte of Name just above to set
 114+ 7D73 CB          >                db      {b $} | END_BIT     // msb as name end
 114+ 7D74             >
 114+ 7D74 25 7D       >                dw      last_NFA            // Link to previous definition Name
 114+ 7D76             >BLOCK:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 114+ 7D76 81 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 114+ 7D78             >                else
 114+ 7D78 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 114+ 7D78             >                endif           ; ok        // for other definitions it "points" the correct handler
 114+ 7D78             >                // Use of "; ok" to suppress "warning[fwdref]"
 114+ 7D78             >
 114+ 7D78             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 115+ 7D78 24 6E 96 6B                  dw      OFFSET, FETCH           // offset @
 116+ 7D7C 23 6A B1 69                  dw      PLUS, TO_R              // + >r
 117+ 7D80 92 6E 96 6B                  dw      PREV, FETCH             // prev @
 118+ 7D84 03 6B 96 6B                  dw      DUP, FETCH              // dup @
 119+ 7D88 D9 69 30 6F                  dw      R_OP, SUBTRACT          // r -
 120+ 7D8C 03 6B 23 6A                  dw      DUP, PLUS               // dup +  ( trick: check equality without most significant bit )
 121+ 7D90                                                              // if
 122+ 7D90 2C 64                        dw        ZBRANCH
 123+ 7D92 32 00                        dw        Block_Endif_1 - $
 124+ 7D94              Block_Begin:                                    //      begin
 125+ 7D94 C0 7C E0 69                  dw          PBUF, ZEQUAL        //          +buf 0
 126+ 7D98                                                              //          if
 127+ 7D98 2C 64                        dw          ZBRANCH
 128+ 7D9A 12 00                        dw          Block_Endif_2 - $
 129+ 7D9C CE 6A                        dw              DROP            //              drop
 130+ 7D9E D9 69 2E 7D                  dw              R_OP, BUFFER    //              r buffer
 131+ 7DA2 03 6B                        dw              DUP             //              dup
 132+ 7DA4 D9 69 06 6D                  dw              R_OP, ONE       //              r 1
 133+ 7DA8 8F 7C                        dw              READ_WRITE      //              r/w
 134+ 7DAA 83 6A                        dw              TWO_MINUS       //              2-
 135+ 7DAC              Block_Endif_2:                                  //          endif
 136+ 7DAC 03 6B 96 6B                  dw          DUP, FETCH, R_OP    //          dup @ r
 136+ 7DB0 D9 69
 137+ 7DB2 30 6F 03 6B                  dw          SUBTRACT, DUP       //          - dup
 138+ 7DB6 23 6A E0 69                  dw          PLUS, ZEQUAL        //          + 0=
 139+ 7DBA                                                              //      until
 140+ 7DBA 2C 64                        dw        ZBRANCH
 141+ 7DBC D8 FF                        dw        Block_Begin - $
 142+ 7DBE 03 6B 92 6E                  dw        DUP, PREV, STORE      //      dup prev !
 142+ 7DC2 A3 6B
 143+ 7DC4              Block_Endif_1:                                  // endif
 144+ 7DC4 C5 69 CE 6A                  dw      R_TO, DROP, CELL_PLUS   // r> drop cell+
 144+ 7DC8 6C 6A
 145+ 7DCA 9E 69                        dw      EXIT                    // ;
 146+ 7DCC
 147+ 7DCC              //  ______________________________________________________________________
 148+ 7DCC              //
 149+ 7DCC              // #buff        -- n
 150+ 7DCC              // number of buffers available. must be the difference between LIMIT and FIRST divided by 516
 151+ 7DCC                              Constant_Def NBUFF,   "#BUFF", 7
 151+ 7DCC             >                New_Def  NBUFF, "#BUFF", Constant_Ptr, is_normal
 151+ 7DCC             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 151+ 7DCC             >
 151+ 7DCC             >                // dummy db directives used to calculate length of namec
 151+ 7DCC 23 42 55 46 >                db      "#BUFF"
 151+ 7DD0 46          >
 151+ 7DD1             >len_NFA         defl    $ - temp_NFA
 151+ 7DD1             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 151+ 7DCC             >
 151+ 7DCC 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 151+ 7DCD 23 42 55 46 >                db      "#BUFF"               // name string in 7-bit ascii, but
 151+ 7DD1 46          >
 151+ 7DD2             >                org     $-1                 // alter last byte of Name just above to set
 151+ 7DD1 C6          >                db      {b $} | END_BIT     // msb as name end
 151+ 7DD2             >
 151+ 7DD2 6E 7D       >                dw      last_NFA            // Link to previous definition Name
 151+ 7DD4             >NBUFF:          if Constant_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 151+ 7DD4 C0 6C       >                dw      Constant_Ptr ; ok        // for primitive definitions  actual code
 151+ 7DD6             >                else
 151+ 7DD6 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 151+ 7DD6             >                endif           ; ok        // for other definitions it "points" the correct handler
 151+ 7DD6             >                // Use of "; ok" to suppress "warning[fwdref]"
 151+ 7DD6             >
 151+ 7DD6             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 151+ 7DD6 07 00       >                dw      7
 152+ 7DD8
 153+ 7DD8              //  ______________________________________________________________________
 154+ 7DD8              //
 155+ 7DD8              // flush        --
 156+ 7DD8                              Colon_Def FLUSH, "FLUSH", is_normal
 156+ 7DD8             >                New_Def  FLUSH, "FLUSH", Enter_Ptr, is_normal ; ok
 156+ 7DD8             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 156+ 7DD8             >
 156+ 7DD8             >                // dummy db directives used to calculate length of namec
 156+ 7DD8 46 4C 55 53 >                db      "FLUSH"
 156+ 7DDC 48          >
 156+ 7DDD             >len_NFA         defl    $ - temp_NFA
 156+ 7DDD             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 156+ 7DD8             >
 156+ 7DD8 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 156+ 7DD9 46 4C 55 53 >                db      "FLUSH"               // name string in 7-bit ascii, but
 156+ 7DDD 48          >
 156+ 7DDE             >                org     $-1                 // alter last byte of Name just above to set
 156+ 7DDD C8          >                db      {b $} | END_BIT     // msb as name end
 156+ 7DDE             >
 156+ 7DDE CC 7D       >                dw      last_NFA            // Link to previous definition Name
 156+ 7DE0             >FLUSH:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 156+ 7DE0 81 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 156+ 7DE2             >                else
 156+ 7DE2 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 156+ 7DE2             >                endif           ; ok        // for other definitions it "points" the correct handler
 156+ 7DE2             >                // Use of "; ok" to suppress "warning[fwdref]"
 156+ 7DE2             >
 156+ 7DE2             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 157+ 7DE2 D4 7D 44 6A                  dw      NBUFF, ONE_PLUS, ZERO   // #buff 1+ 0
 157+ 7DE6 FE 6C
 158+ 7DE8              Flush_Do:                                       // do
 159+ 7DE8 86 64                        dw      C_DO
 160+ 7DEA FE 6C 2E 7D                  dw      ZERO, BUFFER, DROP      //      0 buffer drop
 160+ 7DEE CE 6A
 161+ 7DF0                                                              // loop
 162+ 7DF0 04 64 F8 FF                  dw      C_LOOP, Flush_Do - $
 163+ 7DF4 B7 7B 96 6B                  dw      BLK_FH, FETCH           // blk-fh @     ( ZX-Next dependance )
 164+ 7DF8 DA 67 CE 6A                  dw      F_SYNC, DROP            // f_sync drop
 165+ 7DFC 9E 69                        dw      EXIT                    // exit
 166+ 7DFE
 167+ 7DFE              //  ______________________________________________________________________
 168+ 7DFE              //
 169+ 7DFE              // f_getline    a m fh -- n
 170+ 7DFE              // Given an open filehandle read next line (terminated with $0D or $0A)
 171+ 7DFE              // Address a is left for subsequent processing
 172+ 7DFE              // and n as the actual number of byte read, that is the length of line
 173+ 7DFE                              Colon_Def F_GETLINE, "F_GETLINE", is_normal
 173+ 7DFE             >                New_Def  F_GETLINE, "F_GETLINE", Enter_Ptr, is_normal ; ok
 173+ 7DFE             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 173+ 7DFE             >
 173+ 7DFE             >                // dummy db directives used to calculate length of namec
 173+ 7DFE 46 5F 47 45 >                db      "F_GETLINE"
 173+ 7E02 54 4C 49 4E >
 173+ 7E06 45          >
 173+ 7E07             >len_NFA         defl    $ - temp_NFA
 173+ 7E07             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 173+ 7DFE             >
 173+ 7DFE 89          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 173+ 7DFF 46 5F 47 45 >                db      "F_GETLINE"               // name string in 7-bit ascii, but
 173+ 7E03 54 4C 49 4E >
 173+ 7E07 45          >
 173+ 7E08             >                org     $-1                 // alter last byte of Name just above to set
 173+ 7E07 C5          >                db      {b $} | END_BIT     // msb as name end
 173+ 7E08             >
 173+ 7E08 D8 7D       >                dw      last_NFA            // Link to previous definition Name
 173+ 7E0A             >F_GETLINE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 173+ 7E0A 81 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 173+ 7E0C             >                else
 173+ 7E0C ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 173+ 7E0C             >                endif           ; ok        // for other definitions it "points" the correct handler
 173+ 7E0C             >                // Use of "; ok" to suppress "warning[fwdref]"
 173+ 7E0C             >
 173+ 7E0C             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 174+ 7E0C B1 69                        dw      TO_R                    // >r               ( a  m  )     \  fh
 175+ 7E0E E6 6A                        dw      TUCK                    // tuck             ( m a m )
 176+ 7E10 D9 69 F1 67                  dw      R_OP, F_FGETPOS         // r f_fgetpos      ( m a m d f )
 177+ 7E14 A9 63 2C 00                  dw      LIT, 44, QERROR         // 44 ?error        ( m a m d )
 177+ 7E18 A2 70
 178+ 7E1A
 179+ 7E1A 52 6B BE 6A                  dw      TWO_SWAP, OVER          // 2swap over       ( m d a m )
 180+ 7E1E 44 6A F6 6A                  dw      ONE_PLUS, SWAP          // 1+ swap          ( m d a a+1 m )
 181+ 7E22
 182+ 7E22 D9 69 0F 68                  dw      R_OP, F_READ            // r f_read         ( m d a n f )
 183+ 7E26 A9 63 2E 00                  dw      LIT, 46, QERROR         // 46 ?error        ( m d a n )
 183+ 7E2A A2 70
 184+ 7E2C                                                              // if ( at least 1 chr was read )  \  fh
 185+ 7E2C 2C 64                        dw      ZBRANCH
 186+ 7E2E 3C 00                        dw      FGetline_Else - $
 187+ 7E30 A9 63 0A 00                  dw          LIT, 10, ENCLOSE    //      10 enclose       ( m d a x b x )
 187+ 7E34 7E 65
 188+ 7E36 CE 6A D9 6A                  dw          DROP, NIP           //      drop nip         ( m d a b )
 189+ 7E3A F6 6A                        dw          SWAP                //      drop swap        ( m d b a )
 190+ 7E3C A9 63 0D 00                  dw          LIT, 13, ENCLOSE    //      13 enclose       ( m d b a x c x )
 190+ 7E40 7E 65
 191+ 7E42 CE 6A D9 6A                  dw          DROP, NIP           //      drop nip         ( m d b a c )
 192+ 7E46 10 6B 84 6F                  dw          ROT, MIN            //      rot min          ( m d a n )
 193+ 7E4A 03 6B BE 6E                  dw          DUP, SPAN, STORE    //      dup span !       ( m d a n )
 193+ 7E4E A3 6B
 194+ 7E50 03 6B B1 69                  dw          DUP, TO_R           //      dup >r           ( m d a n )      \ fh n
 195+ 7E54 52 6B C5 69                  dw          TWO_SWAP, R_TO      //      2swap r>         ( m a n d n )    \ fh
 196+ 7E58 FE 6C 30 6A                  dw          ZERO, DPLUS         //      0 d+             ( m a n d+n )
 197+ 7E5C C5 69 A3 67                  dw          R_TO, F_SEEK        //      r> f_seek        ( m a n f )
 198+ 7E60 A9 63 2D 00                  dw          LIT, 45, QERROR     //      45 ?error        ( m a n )
 198+ 7E64 A2 70
 199+ 7E66                                                              // else
 200+ 7E66 15 64                        dw      BRANCH
 201+ 7E68 0C 00                        dw      FGetline_Endif - $
 202+ 7E6A              FGetline_Else:
 203+ 7E6A C5 69                        dw          R_TO                //      r>              ( m d a fh )
 204+ 7E6C 52 6B 44 6B                  dw          TWO_SWAP, TWO_DROP  //      2swap 2drop     ( m a fh )
 205+ 7E70 CE 6A FE 6C                  dw          DROP, ZERO          //      drop, 0         ( m a 0 )
 206+ 7E74              FGetline_Endif:                                 // endif
 207+ 7E74 B1 69 03 6B                  dw      TO_R, DUP, DUP          // >r dup dup           ( m a a a )
 207+ 7E78 03 6B
 208+ 7E7A 44 6A F6 6A                  dw      ONE_PLUS, SWAP          // 1+ swap              ( m a a+1 a )
 209+ 7E7E D9 69 91 68                  dw      R_OP, CMOVE             // r cmove              ( m a )
 210+ 7E82 64 6B 23 6A                  dw      TWO_DUP, PLUS           // 2dup +               ( m a m+a )
 211+ 7E86 FE 6C F6 6A                  dw      ZERO, SWAP              // 0 swap
 212+ 7E8A 76 6A A3 6B                  dw      CELL_MINUS,  STORE      // cell-  !             ( m a )
 213+ 7E8E D9 69 23 6A                  dw      R_OP, PLUS, ONE_SUBTRACT// r + 1-               ( m a+n1 )
 213+ 7E92 50 6A
 214+ 7E94 F6 6A D9 69                  dw      SWAP, R_OP, SUBTRACT    // swap r -             ( a+n+1 m-n )
 214+ 7E98 30 6F
 215+ 7E9A EB 73                        dw      BLANKS                  // blanks
 216+ 7E9C C5 69                        dw      R_TO                    // r>                   ( n )
 217+ 7E9E 9E 69                        dw      EXIT                    // ;
 218+ 7EA0
 219+ 7EA0              //  ______________________________________________________________________
 220+ 7EA0              //
 221+ 7EA0              // f_include    fh --
 222+ 7EA0              // Given a filehandle includes the source from file
 223+ 7EA0                              Colon_Def F_INCLUDE, "F_INCLUDE", is_normal
 223+ 7EA0             >                New_Def  F_INCLUDE, "F_INCLUDE", Enter_Ptr, is_normal ; ok
 223+ 7EA0             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 223+ 7EA0             >
 223+ 7EA0             >                // dummy db directives used to calculate length of namec
 223+ 7EA0 46 5F 49 4E >                db      "F_INCLUDE"
 223+ 7EA4 43 4C 55 44 >
 223+ 7EA8 45          >
 223+ 7EA9             >len_NFA         defl    $ - temp_NFA
 223+ 7EA9             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 223+ 7EA0             >
 223+ 7EA0 89          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 223+ 7EA1 46 5F 49 4E >                db      "F_INCLUDE"               // name string in 7-bit ascii, but
 223+ 7EA5 43 4C 55 44 >
 223+ 7EA9 45          >
 223+ 7EAA             >                org     $-1                 // alter last byte of Name just above to set
 223+ 7EA9 C5          >                db      {b $} | END_BIT     // msb as name end
 223+ 7EAA             >
 223+ 7EAA FE 7D       >                dw      last_NFA            // Link to previous definition Name
 223+ 7EAC             >F_INCLUDE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 223+ 7EAC 81 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 223+ 7EAE             >                else
 223+ 7EAE ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 223+ 7EAE             >                endif           ; ok        // for other definitions it "points" the correct handler
 223+ 7EAE             >                // Use of "; ok" to suppress "warning[fwdref]"
 223+ 7EAE             >
 223+ 7EAE             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 224+ 7EAE FD 6D 96 6B                  dw      BLK, FETCH, TO_R        // blk @ >r
 224+ 7EB2 B1 69
 225+ 7EB4 06 6E 96 6B                  dw      TO_IN, FETCH, TO_R      // >in @ >r
 225+ 7EB8 B1 69
 226+ 7EBA B4 6E 96 6B                  dw      SOURCE_ID, FETCH, TO_R  // source-id @ >r
 226+ 7EBE B1 69
 227+ 7EC0 D9 69                        dw      R_OP                    // r
 228+ 7EC2                                                              // if
 229+ 7EC2 2C 64                        dw      ZBRANCH
 230+ 7EC4 20 00                        dw      FInclude_Else_1 - $
 231+ 7EC6 D9 69 F1 67                  dw          R_OP, F_FGETPOS     //      r f_getpos
 232+ 7ECA A9 63 2C 00                  dw          LIT, 44, QERROR     //      44 ?error
 232+ 7ECE A2 70
 233+ 7ED0 06 6E 96 6B                  dw          TO_IN, FETCH        //      >in @ 2-
 234+ 7ED4 83 6A                        dw          TWO_MINUS
 235+ 7ED6 BE 6E 96 6B                  dw          SPAN, FETCH         //      span @ -
 236+ 7EDA 30 6F                        dw          SUBTRACT
 237+ 7EDC 1C 6F 30 6A                  dw          S_TO_D, DPLUS       //      s>d d+
 238+ 7EE0                                                              // else
 239+ 7EE0 15 64                        dw      BRANCH
 240+ 7EE2 06 00                        dw      FInclude_Endif_1 - $
 241+ 7EE4              FInclude_Else_1:
 242+ 7EE4 FE 6C FE 6C                  dw          ZERO, ZERO          //      0 0
 243+ 7EE8                                                              // endif
 244+ 7EE8              FInclude_Endif_1:
 245+ 7EE8 B1 69 B1 69                  dw      TO_R, TO_R              // >r >r
 246+ 7EEC B4 6E A3 6B                  dw      SOURCE_ID, STORE        // source-id !
 247+ 7EF0              FInclude_Begin:                                 // begin
 248+ 7EF0 06 6D 76 7D                  dw          ONE, BLOCK, BBUF    //      1 block b/buf
 248+ 7EF4 3E 6D
 249+ 7EF6 64 6B EB 73                  dw          TWO_DUP, BLANKS     //      2dup blanks
 250+ 7EFA F6 6A 44 6A                  dw          SWAP, ONE_PLUS      //      swap 1+
 251+ 7EFE F6 6A 76 6A                  dw          SWAP, CELL_MINUS    //      swap cell-
 252+ 7F02 B4 6E 96 6B                  dw          SOURCE_ID, FETCH    //      source-id @
 253+ 7F06 0A 7E                        dw          F_GETLINE           //      f_getline
 254+ 7F08                                                              // while
 255+ 7F08 2C 64                        dw      ZBRANCH
 256+ 7F0A 14 00                        dw      FInclude_Repeat - $
 257+ 7F0C 06 6D FD 6D                  dw          ONE, BLK, STORE     //      1 blk !
 257+ 7F10 A3 6B
 258+ 7F12 FE 6C 06 6E                  dw          ZERO, TO_IN, STORE  //      0 >in !
 258+ 7F16 A3 6B
 259+ 7F18 C3 77                        dw          INTERPRET           //      interpret
 260+ 7F1A 15 64                        dw      BRANCH
 261+ 7F1C D4 FF                        dw      FInclude_Begin - $
 262+ 7F1E              FInclude_Repeat:                                // repeat
 263+ 7F1E B4 6E 96 6B                  dw      SOURCE_ID, FETCH        // source-id @
 264+ 7F22 FE 6C B4 6E                  dw      ZERO, SOURCE_ID, STORE  // 0 source-id !
 264+ 7F26 A3 6B
 265+ 7F28 C6 67                        dw      F_CLOSE                 // f_close
 266+ 7F2A A9 63 2A 00                  dw      LIT, 42, QERROR         // 42 ?error
 266+ 7F2E A2 70
 267+ 7F30 C5 69 C5 69                  dw      R_TO, R_TO, R_TO        // r> r> r>
 267+ 7F34 C5 69
 268+ 7F36 03 6B B4 6E                  dw      DUP, SOURCE_ID, STORE   // dup source-id !
 268+ 7F3A A3 6B
 269+ 7F3C                                                              // if
 270+ 7F3C 2C 64                        dw      ZBRANCH
 271+ 7F3E 12 00                        dw      FInclude_Else_2 - $
 272+ 7F40 B4 6E 96 6B                  dw          SOURCE_ID, FETCH    //      source-id @
 273+ 7F44 A3 67                        dw          F_SEEK              //      f_seek
 274+ 7F46 A9 63 2B 00                  dw          LIT, 43, QERROR     //      43, ?error
 274+ 7F4A A2 70
 275+ 7F4C                                                              // else
 276+ 7F4C 15 64                        dw      BRANCH
 277+ 7F4E 04 00                        dw      FInclude_Endif_2 - $
 278+ 7F50              FInclude_Else_2:
 279+ 7F50 44 6B                        dw          TWO_DROP            //      2drop
 280+ 7F52              FInclude_Endif_2:                               // endif
 281+ 7F52 C5 69 06 6E                  dw      R_TO, TO_IN, STORE      // r> >in !
 281+ 7F56 A3 6B
 282+ 7F58 C5 69 FD 6D                  dw      R_TO, BLK, STORE        // r> blk !
 282+ 7F5C A3 6B
 283+ 7F5E 9E 69                        dw      EXIT                    // ;
 284+ 7F60
 285+ 7F60              //  ______________________________________________________________________
 286+ 7F60              //
 287+ 7F60              // open<         -- fh
 288+ 7F60              // Open the following filename and return it file-handle
 289+ 7F60              // Used in the form OPEN CCCC
 290+ 7F60                              Colon_Def OPEN_FH, "OPEN<", is_normal
 290+ 7F60             >                New_Def  OPEN_FH, "OPEN<", Enter_Ptr, is_normal ; ok
 290+ 7F60             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 290+ 7F60             >
 290+ 7F60             >                // dummy db directives used to calculate length of namec
 290+ 7F60 4F 50 45 4E >                db      "OPEN<"
 290+ 7F64 3C          >
 290+ 7F65             >len_NFA         defl    $ - temp_NFA
 290+ 7F65             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 290+ 7F60             >
 290+ 7F60 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 290+ 7F61 4F 50 45 4E >                db      "OPEN<"               // name string in 7-bit ascii, but
 290+ 7F65 3C          >
 290+ 7F66             >                org     $-1                 // alter last byte of Name just above to set
 290+ 7F65 BC          >                db      {b $} | END_BIT     // msb as name end
 290+ 7F66             >
 290+ 7F66 A0 7E       >                dw      last_NFA            // Link to previous definition Name
 290+ 7F68             >OPEN_FH:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 290+ 7F68 81 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 290+ 7F6A             >                else
 290+ 7F6A ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 290+ 7F6A             >                endif           ; ok        // for other definitions it "points" the correct handler
 290+ 7F6A             >                // Use of "; ok" to suppress "warning[fwdref]"
 290+ 7F6A             >
 290+ 7F6A             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 291+ 7F6A 28 6D                        dw      BL
 292+ 7F6C 23 74 3C 72                  dw      WORD, COUNT, OVER       // bl word count over
 292+ 7F70 BE 6A
 293+ 7F72 23 6A FE 6C                  dw      PLUS, ZERO, SWAP, STORE // + 0 swap !
 293+ 7F76 F6 6A A3 6B
 294+ 7F7A 10 74 06 6D                  dw      PAD, ONE, F_OPEN        // pad 1 f_open
 294+ 7F7E 45 68
 295+ 7F80 A9 63 2B 00                  dw      LIT, 43                 // 43
 296+ 7F84 A2 70                        dw      QERROR                  // ?error
 297+ 7F86 9E 69                        dw      EXIT                    // ;
 298+ 7F88
 299+ 7F88              //  ______________________________________________________________________
 300+ 7F88              //
 301+ 7F88              // include      -- cccc
 302+ 7F88              // Include the following filename
 303+ 7F88                              Colon_Def INCLUDE, "INCLUDE", is_normal
 303+ 7F88             >                New_Def  INCLUDE, "INCLUDE", Enter_Ptr, is_normal ; ok
 303+ 7F88             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 303+ 7F88             >
 303+ 7F88             >                // dummy db directives used to calculate length of namec
 303+ 7F88 49 4E 43 4C >                db      "INCLUDE"
 303+ 7F8C 55 44 45    >
 303+ 7F8F             >len_NFA         defl    $ - temp_NFA
 303+ 7F8F             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 303+ 7F88             >
 303+ 7F88 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 303+ 7F89 49 4E 43 4C >                db      "INCLUDE"               // name string in 7-bit ascii, but
 303+ 7F8D 55 44 45    >
 303+ 7F90             >                org     $-1                 // alter last byte of Name just above to set
 303+ 7F8F C5          >                db      {b $} | END_BIT     // msb as name end
 303+ 7F90             >
 303+ 7F90 60 7F       >                dw      last_NFA            // Link to previous definition Name
 303+ 7F92             >INCLUDE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 303+ 7F92 81 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 303+ 7F94             >                else
 303+ 7F94 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 303+ 7F94             >                endif           ; ok        // for other definitions it "points" the correct handler
 303+ 7F94             >                // Use of "; ok" to suppress "warning[fwdref]"
 303+ 7F94             >
 303+ 7F94             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 304+ 7F94 68 7F                        dw      OPEN_FH                 // open
 305+ 7F96 03 6B AC 7E                  dw      DUP, F_INCLUDE          // dup f_include
 306+ 7F9A C6 67 CE 6A                  dw      F_CLOSE, DROP           // f_close drop
 307+ 7F9E 9E 69                        dw      EXIT                    // ;
 308+ 7FA0
 309+ 7FA0              //  ______________________________________________________________________
 310+ 7FA0              //
 311+ 7FA0              // needs
 312+ 7FA0              // check for cccc exists in vocabulary
 313+ 7FA0              // if it doesn't then  INCLUDE  inc/cccc.F
 314+ 7FA0
 315+ 7FA0              // temp filename cccc.f as counted string zero-padded
 316+ 7FA0                              New_Def NEEDS_W,   "NEEDS-W", Create_Ptr, is_normal
 316+ 7FA0             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 316+ 7FA0             >
 316+ 7FA0             >                // dummy db directives used to calculate length of namec
 316+ 7FA0 4E 45 45 44 >                db      "NEEDS-W"
 316+ 7FA4 53 2D 57    >
 316+ 7FA7             >len_NFA         defl    $ - temp_NFA
 316+ 7FA7             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 316+ 7FA0             >
 316+ 7FA0 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 316+ 7FA1 4E 45 45 44 >                db      "NEEDS-W"               // name string in 7-bit ascii, but
 316+ 7FA5 53 2D 57    >
 316+ 7FA8             >                org     $-1                 // alter last byte of Name just above to set
 316+ 7FA7 D7          >                db      {b $} | END_BIT     // msb as name end
 316+ 7FA8             >
 316+ 7FA8 88 7F       >                dw      last_NFA            // Link to previous definition Name
 316+ 7FAA             >NEEDS_W:          if Create_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 316+ 7FAA D6 76       >                dw      Create_Ptr ; ok        // for primitive definitions  actual code
 316+ 7FAC             >                else
 316+ 7FAC ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 316+ 7FAC             >                endif           ; ok        // for other definitions it "points" the correct handler
 316+ 7FAC             >                // Use of "; ok" to suppress "warning[fwdref]"
 316+ 7FAC             >
 316+ 7FAC             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 317+ 7FAC 00 00 00...                  ds      35                      // 32 + .f + 0x00 = len 35
 318+ 7FCF              // temp complete path+filename
 319+ 7FCF                              New_Def NEEDS_FN,  "NEEDS-FN", Create_Ptr, is_normal
 319+ 7FCF             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 319+ 7FCF             >
 319+ 7FCF             >                // dummy db directives used to calculate length of namec
 319+ 7FCF 4E 45 45 44 >                db      "NEEDS-FN"
 319+ 7FD3 53 2D 46 4E >
 319+ 7FD7             >len_NFA         defl    $ - temp_NFA
 319+ 7FD7             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 319+ 7FCF             >
 319+ 7FCF 88          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 319+ 7FD0 4E 45 45 44 >                db      "NEEDS-FN"               // name string in 7-bit ascii, but
 319+ 7FD4 53 2D 46 4E >
 319+ 7FD8             >                org     $-1                 // alter last byte of Name just above to set
 319+ 7FD7 CE          >                db      {b $} | END_BIT     // msb as name end
 319+ 7FD8             >
 319+ 7FD8 A0 7F       >                dw      last_NFA            // Link to previous definition Name
 319+ 7FDA             >NEEDS_FN:          if Create_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 319+ 7FDA D6 76       >                dw      Create_Ptr ; ok        // for primitive definitions  actual code
 319+ 7FDC             >                else
 319+ 7FDC ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 319+ 7FDC             >                endif           ; ok        // for other definitions it "points" the correct handler
 319+ 7FDC             >                // Use of "; ok" to suppress "warning[fwdref]"
 319+ 7FDC             >
 319+ 7FDC             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 320+ 7FDC 00 00 00...                  ds      40
 321+ 8004              // constant path
 322+ 8004                              New_Def NEEDS_INC,  "NEEDS-INC", Create_Ptr, is_normal
 322+ 8004             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 322+ 8004             >
 322+ 8004             >                // dummy db directives used to calculate length of namec
 322+ 8004 4E 45 45 44 >                db      "NEEDS-INC"
 322+ 8008 53 2D 49 4E >
 322+ 800C 43          >
 322+ 800D             >len_NFA         defl    $ - temp_NFA
 322+ 800D             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 322+ 8004             >
 322+ 8004 89          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 322+ 8005 4E 45 45 44 >                db      "NEEDS-INC"               // name string in 7-bit ascii, but
 322+ 8009 53 2D 49 4E >
 322+ 800D 43          >
 322+ 800E             >                org     $-1                 // alter last byte of Name just above to set
 322+ 800D C3          >                db      {b $} | END_BIT     // msb as name end
 322+ 800E             >
 322+ 800E CF 7F       >                dw      last_NFA            // Link to previous definition Name
 322+ 8010             >NEEDS_INC:          if Create_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 322+ 8010 D6 76       >                dw      Create_Ptr ; ok        // for primitive definitions  actual code
 322+ 8012             >                else
 322+ 8012 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 322+ 8012             >                endif           ; ok        // for other definitions it "points" the correct handler
 322+ 8012             >                // Use of "; ok" to suppress "warning[fwdref]"
 322+ 8012             >
 322+ 8012             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 323+ 8012 04 69 6E 63                  db      4, "inc/", 0
 323+ 8016 2F 00
 324+ 8018                              New_Def NEEDS_LIB,  "NEEDS-LIB", Create_Ptr, is_normal
 324+ 8018             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 324+ 8018             >
 324+ 8018             >                // dummy db directives used to calculate length of namec
 324+ 8018 4E 45 45 44 >                db      "NEEDS-LIB"
 324+ 801C 53 2D 4C 49 >
 324+ 8020 42          >
 324+ 8021             >len_NFA         defl    $ - temp_NFA
 324+ 8021             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 324+ 8018             >
 324+ 8018 89          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 324+ 8019 4E 45 45 44 >                db      "NEEDS-LIB"               // name string in 7-bit ascii, but
 324+ 801D 53 2D 4C 49 >
 324+ 8021 42          >
 324+ 8022             >                org     $-1                 // alter last byte of Name just above to set
 324+ 8021 C2          >                db      {b $} | END_BIT     // msb as name end
 324+ 8022             >
 324+ 8022 04 80       >                dw      last_NFA            // Link to previous definition Name
 324+ 8024             >NEEDS_LIB:          if Create_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 324+ 8024 D6 76       >                dw      Create_Ptr ; ok        // for primitive definitions  actual code
 324+ 8026             >                else
 324+ 8026 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 324+ 8026             >                endif           ; ok        // for other definitions it "points" the correct handler
 324+ 8026             >                // Use of "; ok" to suppress "warning[fwdref]"
 324+ 8026             >
 324+ 8026             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 325+ 8026 04 6C 69 62                  db      4, "lib/", 0
 325+ 802A 2F 00
 326+ 802C
 327+ 802C              // Concatenate path at a and filename and include it
 328+ 802C              // No error is issued if filename doesn't exist.
 329+ 802C                              Colon_Def NEEDS_SLASH, "NEEDS/", is_normal
 329+ 802C             >                New_Def  NEEDS_SLASH, "NEEDS/", Enter_Ptr, is_normal ; ok
 329+ 802C             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 329+ 802C             >
 329+ 802C             >                // dummy db directives used to calculate length of namec
 329+ 802C 4E 45 45 44 >                db      "NEEDS/"
 329+ 8030 53 2F       >
 329+ 8032             >len_NFA         defl    $ - temp_NFA
 329+ 8032             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 329+ 802C             >
 329+ 802C 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 329+ 802D 4E 45 45 44 >                db      "NEEDS/"               // name string in 7-bit ascii, but
 329+ 8031 53 2F       >
 329+ 8033             >                org     $-1                 // alter last byte of Name just above to set
 329+ 8032 AF          >                db      {b $} | END_BIT     // msb as name end
 329+ 8033             >
 329+ 8033 18 80       >                dw      last_NFA            // Link to previous definition Name
 329+ 8035             >NEEDS_SLASH:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 329+ 8035 81 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 329+ 8037             >                else
 329+ 8037 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 329+ 8037             >                endif           ; ok        // for other definitions it "points" the correct handler
 329+ 8037             >                // Use of "; ok" to suppress "warning[fwdref]"
 329+ 8037             >
 329+ 8037             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 330+ 8037 3C 72 E6 6A                  dw      COUNT, TUCK             // n a n
 331+ 803B DA 7F F6 6A                  dw      NEEDS_FN, SWAP, CMOVE   // n        \ Path
 331+ 803F 91 68
 332+ 8041 DA 7F 23 6A                  dw      NEEDS_FN, PLUS          // a1+n     \ Concat
 333+ 8045 AA 7F 44 6A                  dw      NEEDS_W, ONE_PLUS, SWAP
 333+ 8049 F6 6A
 334+ 804B A9 63 23 00                  dw      LIT, 35
 335+ 804F 91 68                        dw      CMOVE
 336+ 8051 DA 7F                        dw      NEEDS_FN
 337+ 8053 10 74 06 6D                  dw      PAD, ONE, F_OPEN
 337+ 8057 45 68
 338+ 8059 E0 69                        dw      ZEQUAL
 339+ 805B 2C 64                        dw      ZBRANCH
 340+ 805D 08 00                        dw      Needs_1 - $
 341+ 805F AC 7E                        dw          F_INCLUDE
 342+ 8061 15 64                        dw      BRANCH
 343+ 8063 04 00                        dw      Needs_2 - $
 344+ 8065              Needs_1:
 345+ 8065              //              dw          NEEDS_W, COUNT, TYPE, SPACE
 346+ 8065              //              dw          LIT, 43, MESSAGE
 347+ 8065 CE 6A                        dw          DROP
 348+ 8067              Needs_2:
 349+ 8067 9E 69                        dw      EXIT                    // ;
 350+ 8069
 351+ 8069
 352+ 8069                              New_Def NDOM,   "NDOM", Create_Ptr, is_normal
 352+ 8069             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 352+ 8069             >
 352+ 8069             >                // dummy db directives used to calculate length of namec
 352+ 8069 4E 44 4F 4D >                db      "NDOM"
 352+ 806D             >len_NFA         defl    $ - temp_NFA
 352+ 806D             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 352+ 8069             >
 352+ 8069 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 352+ 806A 4E 44 4F 4D >                db      "NDOM"               // name string in 7-bit ascii, but
 352+ 806E             >                org     $-1                 // alter last byte of Name just above to set
 352+ 806D CD          >                db      {b $} | END_BIT     // msb as name end
 352+ 806E             >
 352+ 806E 2C 80       >                dw      last_NFA            // Link to previous definition Name
 352+ 8070             >NDOM:          if Create_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 352+ 8070 D6 76       >                dw      Create_Ptr ; ok        // for primitive definitions  actual code
 352+ 8072             >                else
 352+ 8072 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 352+ 8072             >                endif           ; ok        // for other definitions it "points" the correct handler
 352+ 8072             >                // Use of "; ok" to suppress "warning[fwdref]"
 352+ 8072             >
 352+ 8072             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 353+ 8072              //              db $3A, $3F, $2F, $2A, $7C, $5C, $3C, $3E, $22
 354+ 8072 3A 3F 2F 2A                  db ':?/*|\<>"'
 354+ 8076 7C 5C 3C 3E
 354+ 807A 22
 355+ 807B
 356+ 807B                              New_Def NCDM,   "NCDM", Create_Ptr, is_normal
 356+ 807B             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 356+ 807B             >
 356+ 807B             >                // dummy db directives used to calculate length of namec
 356+ 807B 4E 43 44 4D >                db      "NCDM"
 356+ 807F             >len_NFA         defl    $ - temp_NFA
 356+ 807F             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 356+ 807B             >
 356+ 807B 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 356+ 807C 4E 43 44 4D >                db      "NCDM"               // name string in 7-bit ascii, but
 356+ 8080             >                org     $-1                 // alter last byte of Name just above to set
 356+ 807F CD          >                db      {b $} | END_BIT     // msb as name end
 356+ 8080             >
 356+ 8080 69 80       >                dw      last_NFA            // Link to previous definition Name
 356+ 8082             >NCDM:          if Create_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 356+ 8082 D6 76       >                dw      Create_Ptr ; ok        // for primitive definitions  actual code
 356+ 8084             >                else
 356+ 8084 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 356+ 8084             >                endif           ; ok        // for other definitions it "points" the correct handler
 356+ 8084             >                // Use of "; ok" to suppress "warning[fwdref]"
 356+ 8084             >
 356+ 8084             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 357+ 8084              //              db $5F, $5E, $25, $26, $24, $5F, $7B, $7D, $7E
 358+ 8084 5F 5E 25 26                  db '_^%&$_{}~'
 358+ 8088 24 5F 7B 7D
 358+ 808C 7E
 359+ 808D
 360+ 808D              // Replace illegal character in filename using the map here above
 361+ 808D              // at the moment we need only  "
 362+ 808D                              Colon_Def NEEDS_CHECK, "NEEDS-CH", is_normal
 362+ 808D             >                New_Def  NEEDS_CHECK, "NEEDS-CH", Enter_Ptr, is_normal ; ok
 362+ 808D             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 362+ 808D             >
 362+ 808D             >                // dummy db directives used to calculate length of namec
 362+ 808D 4E 45 45 44 >                db      "NEEDS-CH"
 362+ 8091 53 2D 43 48 >
 362+ 8095             >len_NFA         defl    $ - temp_NFA
 362+ 8095             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 362+ 808D             >
 362+ 808D 88          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 362+ 808E 4E 45 45 44 >                db      "NEEDS-CH"               // name string in 7-bit ascii, but
 362+ 8092 53 2D 43 48 >
 362+ 8096             >                org     $-1                 // alter last byte of Name just above to set
 362+ 8095 C8          >                db      {b $} | END_BIT     // msb as name end
 362+ 8096             >
 362+ 8096 7B 80       >                dw      last_NFA            // Link to previous definition Name
 362+ 8098             >NEEDS_CHECK:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 362+ 8098 81 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 362+ 809A             >                else
 362+ 809A ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 362+ 809A             >                endif           ; ok        // for other definitions it "points" the correct handler
 362+ 809A             >                // Use of "; ok" to suppress "warning[fwdref]"
 362+ 809A             >
 362+ 809A             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 363+ 809A 3C 72 50 72                  dw      COUNT, BOUNDS
 364+ 809E 86 64                        dw      C_DO
 365+ 80A0              Needs_3:
 366+ 80A0 82 80 70 80                  dw          NCDM, NDOM, LIT, 9
 366+ 80A4 A9 63 09 00
 367+ 80A8 90 64 B1 6B                  dw          I, CFETCH
 368+ 80AC B8 65                        dw          C_MAP
 369+ 80AE 90 64 BF 6B                  dw          I, CSTORE
 370+ 80B2              Needs_4:
 371+ 80B2 04 64                        dw      C_LOOP
 372+ 80B4 EC FF                        dw      Needs_3 - $
 373+ 80B6 9E 69                        dw      EXIT
 374+ 80B8
 375+ 80B8
 376+ 80B8              // include  "path/cccc.f" if cccc is not defined
 377+ 80B8              // filename cccc.f is temporary stored at NEEDS-W
 378+ 80B8                              Colon_Def NEEDS_PATH, "NEEDS-F", is_normal
 378+ 80B8             >                New_Def  NEEDS_PATH, "NEEDS-F", Enter_Ptr, is_normal ; ok
 378+ 80B8             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 378+ 80B8             >
 378+ 80B8             >                // dummy db directives used to calculate length of namec
 378+ 80B8 4E 45 45 44 >                db      "NEEDS-F"
 378+ 80BC 53 2D 46    >
 378+ 80BF             >len_NFA         defl    $ - temp_NFA
 378+ 80BF             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 378+ 80B8             >
 378+ 80B8 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 378+ 80B9 4E 45 45 44 >                db      "NEEDS-F"               // name string in 7-bit ascii, but
 378+ 80BD 53 2D 46    >
 378+ 80C0             >                org     $-1                 // alter last byte of Name just above to set
 378+ 80BF C6          >                db      {b $} | END_BIT     // msb as name end
 378+ 80C0             >
 378+ 80C0 8D 80       >                dw      last_NFA            // Link to previous definition Name
 378+ 80C2             >NEEDS_PATH:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 378+ 80C2 81 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 378+ 80C4             >                else
 378+ 80C4 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 378+ 80C4             >                endif           ; ok        // for other definitions it "points" the correct handler
 378+ 80C4             >                // Use of "; ok" to suppress "warning[fwdref]"
 378+ 80C4             >
 378+ 80C4             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 379+ 80C4 D5 75                        dw      LFIND
 380+ 80C6 2C 64                        dw      ZBRANCH
 381+ 80C8 0A 00                        dw      Needs_5 - $
 382+ 80CA
 383+ 80CA CE 6A 44 6B                  dw          DROP, TWO_DROP
 384+ 80CE 15 64                        dw      BRANCH
 385+ 80D0 2C 00                        dw      Needs_6 - $
 386+ 80D2              Needs_5:
 387+ 80D2 AA 7F                        dw          NEEDS_W
 388+ 80D4 A9 63 23 00                  dw          LIT, 35
 389+ 80D8 DA 73                        dw          ERASE                   // a
 390+ 80DA DD 6E B1 6B                  dw          HERE, CFETCH, ONE_PLUS  // a n
 390+ 80DE 44 6A
 391+ 80E0 DD 6E BE 6A                  dw          HERE, OVER              // a n here n
 392+ 80E4 AA 7F F6 6A                  dw          NEEDS_W, SWAP, CMOVE    // a n
 392+ 80E8 91 68
 393+ 80EA AA 7F 98 80                  dw          NEEDS_W, NEEDS_CHECK
 394+ 80EE AA 7F 23 6A                  dw          NEEDS_W, PLUS           // a a1+1
 395+ 80F2 A9 63 2E 66                  dw          LIT, $662E              // a a1+1 ".F"
 396+ 80F6 F6 6A A3 6B                  dw          SWAP, STORE             // a
 397+ 80FA 35 80                        dw          NEEDS_SLASH
 398+ 80FC              Needs_6:
 399+ 80FC 9E 69                        dw      EXIT
 400+ 80FE
 401+ 80FE
 402+ 80FE              // check for cccc exists in vocabulary
 403+ 80FE              // if it doesn't then  INCLUDE  inc/cccc.F
 404+ 80FE              // search in inc subdirectory
 405+ 80FE                              Colon_Def NEEDS, "NEEDS", is_normal
 405+ 80FE             >                New_Def  NEEDS, "NEEDS", Enter_Ptr, is_normal ; ok
 405+ 80FE             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 405+ 80FE             >
 405+ 80FE             >                // dummy db directives used to calculate length of namec
 405+ 80FE 4E 45 45 44 >                db      "NEEDS"
 405+ 8102 53          >
 405+ 8103             >len_NFA         defl    $ - temp_NFA
 405+ 8103             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 405+ 80FE             >
 405+ 80FE 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 405+ 80FF 4E 45 45 44 >                db      "NEEDS"               // name string in 7-bit ascii, but
 405+ 8103 53          >
 405+ 8104             >                org     $-1                 // alter last byte of Name just above to set
 405+ 8103 D3          >                db      {b $} | END_BIT     // msb as name end
 405+ 8104             >
 405+ 8104 B8 80       >                dw      last_NFA            // Link to previous definition Name
 405+ 8106             >NEEDS:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 405+ 8106 81 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 405+ 8108             >                else
 405+ 8108 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 405+ 8108             >                endif           ; ok        // for other definitions it "points" the correct handler
 405+ 8108             >                // Use of "; ok" to suppress "warning[fwdref]"
 405+ 8108             >
 405+ 8108             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 406+ 8108 06 6E 96 6B                  dw      TO_IN, FETCH
 407+ 810C 03 6B                        dw      DUP
 408+ 810E 10 80 C2 80                  dw      NEEDS_INC, NEEDS_PATH
 409+ 8112 06 6E A3 6B                  dw      TO_IN, STORE
 410+ 8116 24 80 C2 80                  dw      NEEDS_LIB, NEEDS_PATH
 411+ 811A 06 6E A3 6B                  dw      TO_IN, STORE
 412+ 811E D5 75                        dw      LFIND
 413+ 8120 2C 64                        dw      ZBRANCH
 414+ 8122 08 00                        dw      Needs_10 - $
 415+ 8124 44 6B                        dw          TWO_DROP
 416+ 8126 15 64                        dw      BRANCH
 417+ 8128 10 00                        dw      Needs_11 - $
 418+ 812A              Needs_10:
 419+ 812A AA 7F 3C 72                  dw      NEEDS_W, COUNT, TYPE, SPACE
 419+ 812E 5E 72 E8 6F
 420+ 8132 A9 63 2B 00                  dw      LIT, 43, MESSAGE
 420+ 8136 F5 7A
 421+ 8138              Needs_11:
 422+ 8138 9E 69                        dw      EXIT
 423+ 813A
 424+ 813A
 425+ 813A              //  ______________________________________________________________________
 426+ 813A              //
 427+ 813A              // load+        n --
 428+ 813A                              Colon_Def LOAD_P, "LOAD+", is_normal
 428+ 813A             >                New_Def  LOAD_P, "LOAD+", Enter_Ptr, is_normal ; ok
 428+ 813A             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 428+ 813A             >
 428+ 813A             >                // dummy db directives used to calculate length of namec
 428+ 813A 4C 4F 41 44 >                db      "LOAD+"
 428+ 813E 2B          >
 428+ 813F             >len_NFA         defl    $ - temp_NFA
 428+ 813F             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 428+ 813A             >
 428+ 813A 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 428+ 813B 4C 4F 41 44 >                db      "LOAD+"               // name string in 7-bit ascii, but
 428+ 813F 2B          >
 428+ 8140             >                org     $-1                 // alter last byte of Name just above to set
 428+ 813F AB          >                db      {b $} | END_BIT     // msb as name end
 428+ 8140             >
 428+ 8140 FE 80       >                dw      last_NFA            // Link to previous definition Name
 428+ 8142             >LOAD_P:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 428+ 8142 81 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 428+ 8144             >                else
 428+ 8144 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 428+ 8144             >                endif           ; ok        // for other definitions it "points" the correct handler
 428+ 8144             >                // Use of "; ok" to suppress "warning[fwdref]"
 428+ 8144             >
 428+ 8144             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 429+ 8144 FD 6D 96 6B                  dw      BLK, FETCH, TO_R        // blk @ >r
 429+ 8148 B1 69
 430+ 814A 06 6E 96 6B                  dw      TO_IN, FETCH, TO_R      // >in @ >r
 430+ 814E B1 69
 431+ 8150
 432+ 8150 FE 6C 06 6E                  dw      ZERO, TO_IN, STORE      // 0 >in !
 432+ 8154 A3 6B
 433+ 8156 4A 6D 5C 7A                  dw      BSCR, MUL, BLK, STORE   // b/scr * blk !
 433+ 815A FD 6D A3 6B
 434+ 815E C3 77                        dw      INTERPRET               // interpret
 435+ 8160
 436+ 8160 C5 69 06 6E                  dw      R_TO, TO_IN, STORE      // r> >in !
 436+ 8164 A3 6B
 437+ 8166 C5 69 FD 6D                  dw      R_TO, BLK, STORE        // r> blk !
 437+ 816A A3 6B
 438+ 816C 9E 69                        dw      EXIT                    // ;
 439+ 816E
 440+ 816E              //  ______________________________________________________________________
 441+ 816E              //
 442+ 816E              // -->          --
 443+ 816E                              Colon_Def LOAD_NEXT, "-->", is_immediate
 443+ 816E             >                New_Def  LOAD_NEXT, "-->", Enter_Ptr, is_immediate ; ok
 443+ 816E             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 443+ 816E             >
 443+ 816E             >                // dummy db directives used to calculate length of namec
 443+ 816E 2D 2D 3E    >                db      "-->"
 443+ 8171             >len_NFA         defl    $ - temp_NFA
 443+ 8171             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 443+ 816E             >
 443+ 816E C3          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 443+ 816F 2D 2D 3E    >                db      "-->"               // name string in 7-bit ascii, but
 443+ 8172             >                org     $-1                 // alter last byte of Name just above to set
 443+ 8171 BE          >                db      {b $} | END_BIT     // msb as name end
 443+ 8172             >
 443+ 8172 3A 81       >                dw      last_NFA            // Link to previous definition Name
 443+ 8174             >LOAD_NEXT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 443+ 8174 81 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 443+ 8176             >                else
 443+ 8176 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 443+ 8176             >                endif           ; ok        // for other definitions it "points" the correct handler
 443+ 8176             >                // Use of "; ok" to suppress "warning[fwdref]"
 443+ 8176             >
 443+ 8176             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 444+ 8176 1B 71                        dw      QLOADING                // ?loading
 445+ 8178 FE 6C 06 6E                  dw      ZERO, TO_IN, STORE      // 0 >in !
 445+ 817C A3 6B
 446+ 817E 4A 6D                        dw      BSCR                    // b/scr
 447+ 8180 FD 6D 96 6B                  dw      BLK, FETCH              // blk @
 448+ 8184 BE 6A                        dw      OVER                    // over
 449+ 8186 89 7A                        dw      MOD                     // mod
 450+ 8188 30 6F                        dw      SUBTRACT                // -
 451+ 818A FD 6D 73 6B                  dw      BLK, PLUSSTORE          // +!
 452+ 818E 9E 69                        dw      EXIT                    // ;
 453+ 8190
 454+ 8190              //  ______________________________________________________________________
 455+ 8190              //
 456+ 8190              // '            -- xt
 457+ 8190                              Colon_Def TICK, "'", is_normal
 457+ 8190             >                New_Def  TICK, "'", Enter_Ptr, is_normal ; ok
 457+ 8190             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 457+ 8190             >
 457+ 8190             >                // dummy db directives used to calculate length of namec
 457+ 8190 27          >                db      "'"
 457+ 8191             >len_NFA         defl    $ - temp_NFA
 457+ 8191             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 457+ 8190             >
 457+ 8190 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 457+ 8191 27          >                db      "'"               // name string in 7-bit ascii, but
 457+ 8192             >                org     $-1                 // alter last byte of Name just above to set
 457+ 8191 A7          >                db      {b $} | END_BIT     // msb as name end
 457+ 8192             >
 457+ 8192 6E 81       >                dw      last_NFA            // Link to previous definition Name
 457+ 8194             >TICK:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 457+ 8194 81 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 457+ 8196             >                else
 457+ 8196 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 457+ 8196             >                endif           ; ok        // for other definitions it "points" the correct handler
 457+ 8196             >                // Use of "; ok" to suppress "warning[fwdref]"
 457+ 8196             >
 457+ 8196             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 458+ 8196 D5 75                        dw      LFIND                   // -find
 459+ 8198 E0 69                        dw      ZEQUAL                  // 0=
 460+ 819A FE 6C A2 70                  dw      ZERO, QERROR            // 0 ?error
 461+ 819E CE 6A                        dw      DROP                    // drop
 462+ 81A0 9E 69                        dw      EXIT                    // ;
 463+ 81A2
 464+ 81A2              //  ______________________________________________________________________
 465+ 81A2              //
 466+ 81A2              // forget       -- cccc
 467+ 81A2                              Colon_Def FORGET, "FORGET", is_normal
 467+ 81A2             >                New_Def  FORGET, "FORGET", Enter_Ptr, is_normal ; ok
 467+ 81A2             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 467+ 81A2             >
 467+ 81A2             >                // dummy db directives used to calculate length of namec
 467+ 81A2 46 4F 52 47 >                db      "FORGET"
 467+ 81A6 45 54       >
 467+ 81A8             >len_NFA         defl    $ - temp_NFA
 467+ 81A8             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 467+ 81A2             >
 467+ 81A2 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 467+ 81A3 46 4F 52 47 >                db      "FORGET"               // name string in 7-bit ascii, but
 467+ 81A7 45 54       >
 467+ 81A9             >                org     $-1                 // alter last byte of Name just above to set
 467+ 81A8 D4          >                db      {b $} | END_BIT     // msb as name end
 467+ 81A9             >
 467+ 81A9 90 81       >                dw      last_NFA            // Link to previous definition Name
 467+ 81AB             >FORGET:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 467+ 81AB 81 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 467+ 81AD             >                else
 467+ 81AD ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 467+ 81AD             >                endif           ; ok        // for other definitions it "points" the correct handler
 467+ 81AD             >                // Use of "; ok" to suppress "warning[fwdref]"
 467+ 81AD             >
 467+ 81AD             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 468+ 81AD 3E 6E 96 6B                  dw      CURRENT, FETCH          // current @
 469+ 81B1 31 6E 96 6B                  dw      CONTEXT, FETCH          // context @
 470+ 81B5 30 6F A9 63                  dw      SUBTRACT, LIT, 23, QERROR // - 23 ?error
 470+ 81B9 17 00 A2 70
 471+ 81BD 94 81 72 70                  dw      TICK, TO_BODY           // ' >body
 472+ 81C1 03 6B B4 6D                  dw      DUP, FENCE, FETCH       // dup fence @
 472+ 81C5 96 6B
 473+ 81C7 4B 6F A9 63                  dw      ULESS, LIT, 21, QERROR  // u< 21 ?error
 473+ 81CB 15 00 A2 70
 474+ 81CF 03 6B 48 70                  dw      DUP, NFA, DP, STORE     // dup nfa dp !
 474+ 81D3 BC 6D A3 6B
 475+ 81D7 2E 70 96 6B                  dw      LFA, FETCH              // lfa @
 476+ 81DB 31 6E 96 6B                  dw      CONTEXT, FETCH, STORE   // context @ !
 476+ 81DF A3 6B
 477+ 81E1 9E 69                        dw      EXIT                    // ;
 478+ 81E3
 479+ 81E3              //  ______________________________________________________________________
 480+ 81E3              //
 481+ 81E3              // marker       -- cccc
 482+ 81E3                              Colon_Def MARKER, "MARKER", is_immediate
 482+ 81E3             >                New_Def  MARKER, "MARKER", Enter_Ptr, is_immediate ; ok
 482+ 81E3             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 482+ 81E3             >
 482+ 81E3             >                // dummy db directives used to calculate length of namec
 482+ 81E3 4D 41 52 4B >                db      "MARKER"
 482+ 81E7 45 52       >
 482+ 81E9             >len_NFA         defl    $ - temp_NFA
 482+ 81E9             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 482+ 81E3             >
 482+ 81E3 C6          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 482+ 81E4 4D 41 52 4B >                db      "MARKER"               // name string in 7-bit ascii, but
 482+ 81E8 45 52       >
 482+ 81EA             >                org     $-1                 // alter last byte of Name just above to set
 482+ 81E9 D2          >                db      {b $} | END_BIT     // msb as name end
 482+ 81EA             >
 482+ 81EA A2 81       >                dw      last_NFA            // Link to previous definition Name
 482+ 81EC             >MARKER:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 482+ 81EC 81 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 482+ 81EE             >                else
 482+ 81EE ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 482+ 81EE             >                endif           ; ok        // for other definitions it "points" the correct handler
 482+ 81EE             >                // Use of "; ok" to suppress "warning[fwdref]"
 482+ 81EE             >
 482+ 81EE             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 483+ 81EE 05 72                        dw      CBUILDS
 484+ 81F0 CA 6D 96 6B                  dw      VOC_LINK, FETCH, COMMA
 484+ 81F4 F9 6E
 485+ 81F6 3E 6E 96 6B                  dw      CURRENT, FETCH, COMMA
 485+ 81FA F9 6E
 486+ 81FC 31 6E 96 6B                  dw      CONTEXT, FETCH, COMMA
 486+ 8200 F9 6E
 487+ 8202 1E 70 F9 6E                  dw      LATEST, COMMA
 488+ 8206 1E 70 5C 70                  dw      LATEST, PFA, LFA, FETCH, COMMA
 488+ 820A 2E 70 96 6B
 488+ 820E F9 6E
 489+ 8210 15 72                        dw      DOES_TO
 490+ 8212 03 6B 96 6B                  dw      DUP, FETCH, VOC_LINK, STORE, CELL_PLUS
 490+ 8216 CA 6D A3 6B
 490+ 821A 6C 6A
 491+ 821C 03 6B 96 6B                  dw      DUP, FETCH, CURRENT, STORE, CELL_PLUS
 491+ 8220 3E 6E A3 6B
 491+ 8224 6C 6A
 492+ 8226 03 6B 96 6B                  dw      DUP, FETCH, CONTEXT, STORE, CELL_PLUS
 492+ 822A 31 6E A3 6B
 492+ 822E 6C 6A
 493+ 8230 03 6B 96 6B                  dw      DUP, FETCH, DP, STORE, CELL_PLUS
 493+ 8234 BC 6D A3 6B
 493+ 8238 6C 6A
 494+ 823A 96 6B 3E 6E                  dw           FETCH, CURRENT, FETCH, STORE
 494+ 823E 96 6B A3 6B
 495+ 8242 9E 69                        dw      EXIT
 496+ 8244
 497+ 8244              //  ______________________________________________________________________
 498+ 8244              //
 499+ 8244              // spaces       n --
 500+ 8244                              Colon_Def SPACES, "SPACES", is_normal
 500+ 8244             >                New_Def  SPACES, "SPACES", Enter_Ptr, is_normal ; ok
 500+ 8244             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 500+ 8244             >
 500+ 8244             >                // dummy db directives used to calculate length of namec
 500+ 8244 53 50 41 43 >                db      "SPACES"
 500+ 8248 45 53       >
 500+ 824A             >len_NFA         defl    $ - temp_NFA
 500+ 824A             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 500+ 8244             >
 500+ 8244 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 500+ 8245 53 50 41 43 >                db      "SPACES"               // name string in 7-bit ascii, but
 500+ 8249 45 53       >
 500+ 824B             >                org     $-1                 // alter last byte of Name just above to set
 500+ 824A D3          >                db      {b $} | END_BIT     // msb as name end
 500+ 824B             >
 500+ 824B E3 81       >                dw      last_NFA            // Link to previous definition Name
 500+ 824D             >SPACES:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 500+ 824D 81 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 500+ 824F             >                else
 500+ 824F ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 500+ 824F             >                endif           ; ok        // for other definitions it "points" the correct handler
 500+ 824F             >                // Use of "; ok" to suppress "warning[fwdref]"
 500+ 824F             >
 500+ 824F             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 501+ 824F FE 6C 9A 6F                  dw      ZERO, MAX
 502+ 8253 FE 6C 59 64                  dw      ZERO, C_Q_DO
 503+ 8257 08 00                        dw      Spaces_Leave - $
 504+ 8259              Spaces_Loop:
 505+ 8259 E8 6F                        dw          SPACE
 506+ 825B 04 64                        dw      C_LOOP
 507+ 825D FC FF                        dw      Spaces_Loop - $
 508+ 825F              Spaces_Leave:
 509+ 825F 9E 69                        dw      EXIT                    // ;
 510+ 8261
 511+ 8261              //  ______________________________________________________________________
 512+ 8261              //
 513+ 8261              // <#           --
 514+ 8261                              Colon_Def BEGIN_DASH, "<#", is_normal
 514+ 8261             >                New_Def  BEGIN_DASH, "<#", Enter_Ptr, is_normal ; ok
 514+ 8261             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 514+ 8261             >
 514+ 8261             >                // dummy db directives used to calculate length of namec
 514+ 8261 3C 23       >                db      "<#"
 514+ 8263             >len_NFA         defl    $ - temp_NFA
 514+ 8263             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 514+ 8261             >
 514+ 8261 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 514+ 8262 3C 23       >                db      "<#"               // name string in 7-bit ascii, but
 514+ 8264             >                org     $-1                 // alter last byte of Name just above to set
 514+ 8263 A3          >                db      {b $} | END_BIT     // msb as name end
 514+ 8264             >
 514+ 8264 44 82       >                dw      last_NFA            // Link to previous definition Name
 514+ 8266             >BEGIN_DASH:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 514+ 8266 81 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 514+ 8268             >                else
 514+ 8268 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 514+ 8268             >                endif           ; ok        // for other definitions it "points" the correct handler
 514+ 8268             >                // Use of "; ok" to suppress "warning[fwdref]"
 514+ 8268             >
 514+ 8268             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 515+ 8268 10 74 7F 6E                  dw      PAD, HLD, STORE
 515+ 826C A3 6B
 516+ 826E 9E 69                        dw      EXIT
 517+ 8270
 518+ 8270              //  ______________________________________________________________________
 519+ 8270              //
 520+ 8270              // #>           --
 521+ 8270                              Colon_Def DASH_END, "#>", is_normal
 521+ 8270             >                New_Def  DASH_END, "#>", Enter_Ptr, is_normal ; ok
 521+ 8270             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 521+ 8270             >
 521+ 8270             >                // dummy db directives used to calculate length of namec
 521+ 8270 23 3E       >                db      "#>"
 521+ 8272             >len_NFA         defl    $ - temp_NFA
 521+ 8272             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 521+ 8270             >
 521+ 8270 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 521+ 8271 23 3E       >                db      "#>"               // name string in 7-bit ascii, but
 521+ 8273             >                org     $-1                 // alter last byte of Name just above to set
 521+ 8272 BE          >                db      {b $} | END_BIT     // msb as name end
 521+ 8273             >
 521+ 8273 61 82       >                dw      last_NFA            // Link to previous definition Name
 521+ 8275             >DASH_END:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 521+ 8275 81 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 521+ 8277             >                else
 521+ 8277 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 521+ 8277             >                endif           ; ok        // for other definitions it "points" the correct handler
 521+ 8277             >                // Use of "; ok" to suppress "warning[fwdref]"
 521+ 8277             >
 521+ 8277             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 522+ 8277 44 6B                        dw      TWO_DROP
 523+ 8279 7F 6E 96 6B                  dw      HLD, FETCH, PAD, OVER, SUBTRACT
 523+ 827D 10 74 BE 6A
 523+ 8281 30 6F
 524+ 8283 9E 69                        dw      EXIT
 525+ 8285
 526+ 8285              //  ______________________________________________________________________
 527+ 8285              //
 528+ 8285              // sign         n d -- d
 529+ 8285                              Colon_Def SIGN, "SIGN", is_normal
 529+ 8285             >                New_Def  SIGN, "SIGN", Enter_Ptr, is_normal ; ok
 529+ 8285             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 529+ 8285             >
 529+ 8285             >                // dummy db directives used to calculate length of namec
 529+ 8285 53 49 47 4E >                db      "SIGN"
 529+ 8289             >len_NFA         defl    $ - temp_NFA
 529+ 8289             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 529+ 8285             >
 529+ 8285 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 529+ 8286 53 49 47 4E >                db      "SIGN"               // name string in 7-bit ascii, but
 529+ 828A             >                org     $-1                 // alter last byte of Name just above to set
 529+ 8289 CE          >                db      {b $} | END_BIT     // msb as name end
 529+ 828A             >
 529+ 828A 70 82       >                dw      last_NFA            // Link to previous definition Name
 529+ 828C             >SIGN:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 529+ 828C 81 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 529+ 828E             >                else
 529+ 828E ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 529+ 828E             >                endif           ; ok        // for other definitions it "points" the correct handler
 529+ 828E             >                // Use of "; ok" to suppress "warning[fwdref]"
 529+ 828E             >
 529+ 828E             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 530+ 828E 10 6B FB 69                  dw      ROT, ZLESS
 531+ 8292 2C 64                        dw      ZBRANCH
 532+ 8294 08 00                        dw      Sign_Endif - $
 533+ 8296 A9 63 2D 00                  dw          LIT, 45, HOLD
 533+ 829A FA 73
 534+ 829C              Sign_Endif:
 535+ 829C 9E 69                        dw      EXIT
 536+ 829E
 537+ 829E              //  ______________________________________________________________________
 538+ 829E              //
 539+ 829E              // #           d1 -- d2
 540+ 829E                              Colon_Def DASH, "#", is_normal
 540+ 829E             >                New_Def  DASH, "#", Enter_Ptr, is_normal ; ok
 540+ 829E             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 540+ 829E             >
 540+ 829E             >                // dummy db directives used to calculate length of namec
 540+ 829E 23          >                db      "#"
 540+ 829F             >len_NFA         defl    $ - temp_NFA
 540+ 829F             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 540+ 829E             >
 540+ 829E 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 540+ 829F 23          >                db      "#"               // name string in 7-bit ascii, but
 540+ 82A0             >                org     $-1                 // alter last byte of Name just above to set
 540+ 829F A3          >                db      {b $} | END_BIT     // msb as name end
 540+ 82A0             >
 540+ 82A0 85 82       >                dw      last_NFA            // Link to previous definition Name
 540+ 82A2             >DASH:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 540+ 82A2 81 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 540+ 82A4             >                else
 540+ 82A4 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 540+ 82A4             >                endif           ; ok        // for other definitions it "points" the correct handler
 540+ 82A4             >                // Use of "; ok" to suppress "warning[fwdref]"
 540+ 82A4             >
 540+ 82A4             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 541+ 82A4 53 6E 96 6B                  dw      BASE, FETCH
 542+ 82A8
 543+ 82A8 B1 69                        dw      TO_R                    // >r           ( ud1 )
 544+ 82AA FE 6C D9 69                  dw      ZERO, R_OP, UMDIVMOD    // 0 r um/mod   ( l rem1 h/r )
 544+ 82AE F5 68
 545+ 82B0 C5 69 F6 6A                  dw      R_TO, SWAP, TO_R        // r> swap >r   ( l rem )
 545+ 82B4 B1 69
 546+ 82B6 F5 68                        dw      UMDIVMOD                // um/mod       ( rem2 l/r )
 547+ 82B8 C5 69                        dw      R_TO                    // r>           ( rem2 l/r h/r )
 548+ 82BA
 549+ 82BA 10 6B                        dw      ROT
 550+ 82BC A9 63 09 00                  dw      LIT, 9, OVER, LESS
 550+ 82C0 BE 6A 5F 6F
 551+ 82C4 2C 64                        dw      ZBRANCH
 552+ 82C6 08 00                        dw      Dash_Endif - $
 553+ 82C8 A9 63 07 00                  dw          LIT, 7, PLUS
 553+ 82CC 23 6A
 554+ 82CE              Dash_Endif:
 555+ 82CE
 556+ 82CE A9 63 30 00                  dw      LIT, 48, PLUS, HOLD
 556+ 82D2 23 6A FA 73
 557+ 82D6 9E 69                        dw      EXIT
 558+ 82D8
 559+ 82D8              //  ______________________________________________________________________
 560+ 82D8              //
 561+ 82D8              // #s           d1 -- d2
 562+ 82D8                              Colon_Def DASHES, "#S", is_normal
 562+ 82D8             >                New_Def  DASHES, "#S", Enter_Ptr, is_normal ; ok
 562+ 82D8             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 562+ 82D8             >
 562+ 82D8             >                // dummy db directives used to calculate length of namec
 562+ 82D8 23 53       >                db      "#S"
 562+ 82DA             >len_NFA         defl    $ - temp_NFA
 562+ 82DA             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 562+ 82D8             >
 562+ 82D8 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 562+ 82D9 23 53       >                db      "#S"               // name string in 7-bit ascii, but
 562+ 82DB             >                org     $-1                 // alter last byte of Name just above to set
 562+ 82DA D3          >                db      {b $} | END_BIT     // msb as name end
 562+ 82DB             >
 562+ 82DB 9E 82       >                dw      last_NFA            // Link to previous definition Name
 562+ 82DD             >DASHES:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 562+ 82DD 81 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 562+ 82DF             >                else
 562+ 82DF ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 562+ 82DF             >                endif           ; ok        // for other definitions it "points" the correct handler
 562+ 82DF             >                // Use of "; ok" to suppress "warning[fwdref]"
 562+ 82DF             >
 562+ 82DF             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 563+ 82DF              Dashes_Begin:
 564+ 82DF A2 82 64 6B                  dw      DASH, TWO_DUP
 565+ 82E3 40 69 E0 69                  dw          OR_OP, ZEQUAL
 566+ 82E7 2C 64                        dw      ZBRANCH
 567+ 82E9 F6 FF                        dw      Dashes_Begin - $
 568+ 82EB 9E 69                        dw      EXIT
 569+ 82ED
 570+ 82ED              //  ______________________________________________________________________
 571+ 82ED              //
 572+ 82ED              // d.r          d n --
 573+ 82ED                              Colon_Def D_DOT_R, "D.R", is_normal
 573+ 82ED             >                New_Def  D_DOT_R, "D.R", Enter_Ptr, is_normal ; ok
 573+ 82ED             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 573+ 82ED             >
 573+ 82ED             >                // dummy db directives used to calculate length of namec
 573+ 82ED 44 2E 52    >                db      "D.R"
 573+ 82F0             >len_NFA         defl    $ - temp_NFA
 573+ 82F0             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 573+ 82ED             >
 573+ 82ED 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 573+ 82EE 44 2E 52    >                db      "D.R"               // name string in 7-bit ascii, but
 573+ 82F1             >                org     $-1                 // alter last byte of Name just above to set
 573+ 82F0 D2          >                db      {b $} | END_BIT     // msb as name end
 573+ 82F1             >
 573+ 82F1 D8 82       >                dw      last_NFA            // Link to previous definition Name
 573+ 82F3             >D_DOT_R:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 573+ 82F3 81 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 573+ 82F5             >                else
 573+ 82F5 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 573+ 82F5             >                endif           ; ok        // for other definitions it "points" the correct handler
 573+ 82F5             >                // Use of "; ok" to suppress "warning[fwdref]"
 573+ 82F5             >
 573+ 82F5             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 574+ 82F5 B1 69                        dw      TO_R
 575+ 82F7 E6 6A B2 79                  dw      TUCK, DABS
 576+ 82FB 66 82 DD 82                  dw      BEGIN_DASH, DASHES, SIGN, DASH_END
 576+ 82FF 8C 82 75 82
 577+ 8303 C5 69                        dw      R_TO
 578+ 8305 BE 6A 30 6F                  dw      OVER, SUBTRACT, SPACES, TYPE
 578+ 8309 4D 82 5E 72
 579+ 830D 9E 69                        dw      EXIT
 580+ 830F
 581+ 830F              //  ______________________________________________________________________
 582+ 830F              //
 583+ 830F              // .r           n1 n2 --
 584+ 830F                              Colon_Def DOT_R, ".R", is_normal
 584+ 830F             >                New_Def  DOT_R, ".R", Enter_Ptr, is_normal ; ok
 584+ 830F             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 584+ 830F             >
 584+ 830F             >                // dummy db directives used to calculate length of namec
 584+ 830F 2E 52       >                db      ".R"
 584+ 8311             >len_NFA         defl    $ - temp_NFA
 584+ 8311             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 584+ 830F             >
 584+ 830F 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 584+ 8310 2E 52       >                db      ".R"               // name string in 7-bit ascii, but
 584+ 8312             >                org     $-1                 // alter last byte of Name just above to set
 584+ 8311 D2          >                db      {b $} | END_BIT     // msb as name end
 584+ 8312             >
 584+ 8312 ED 82       >                dw      last_NFA            // Link to previous definition Name
 584+ 8314             >DOT_R:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 584+ 8314 81 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 584+ 8316             >                else
 584+ 8316 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 584+ 8316             >                endif           ; ok        // for other definitions it "points" the correct handler
 584+ 8316             >                // Use of "; ok" to suppress "warning[fwdref]"
 584+ 8316             >
 584+ 8316             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 585+ 8316 B1 69                        dw      TO_R
 586+ 8318 1C 6F C5 69                  dw      S_TO_D, R_TO
 587+ 831C F3 82                        dw      D_DOT_R
 588+ 831E 9E 69                        dw      EXIT
 589+ 8320
 590+ 8320              //  ______________________________________________________________________
 591+ 8320              //
 592+ 8320              // d.           d --
 593+ 8320                              Colon_Def D_DOT, "D.", is_normal
 593+ 8320             >                New_Def  D_DOT, "D.", Enter_Ptr, is_normal ; ok
 593+ 8320             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 593+ 8320             >
 593+ 8320             >                // dummy db directives used to calculate length of namec
 593+ 8320 44 2E       >                db      "D."
 593+ 8322             >len_NFA         defl    $ - temp_NFA
 593+ 8322             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 593+ 8320             >
 593+ 8320 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 593+ 8321 44 2E       >                db      "D."               // name string in 7-bit ascii, but
 593+ 8323             >                org     $-1                 // alter last byte of Name just above to set
 593+ 8322 AE          >                db      {b $} | END_BIT     // msb as name end
 593+ 8323             >
 593+ 8323 0F 83       >                dw      last_NFA            // Link to previous definition Name
 593+ 8325             >D_DOT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 593+ 8325 81 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 593+ 8327             >                else
 593+ 8327 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 593+ 8327             >                endif           ; ok        // for other definitions it "points" the correct handler
 593+ 8327             >                // Use of "; ok" to suppress "warning[fwdref]"
 593+ 8327             >
 593+ 8327             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 594+ 8327 FE 6C F3 82                  dw      ZERO, D_DOT_R, SPACE
 594+ 832B E8 6F
 595+ 832D 9E 69                        dw      EXIT
 596+ 832F
 597+ 832F              //  ______________________________________________________________________
 598+ 832F              //
 599+ 832F              // .            n --
 600+ 832F                              Colon_Def DOT, ".", is_normal
 600+ 832F             >                New_Def  DOT, ".", Enter_Ptr, is_normal ; ok
 600+ 832F             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 600+ 832F             >
 600+ 832F             >                // dummy db directives used to calculate length of namec
 600+ 832F 2E          >                db      "."
 600+ 8330             >len_NFA         defl    $ - temp_NFA
 600+ 8330             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 600+ 832F             >
 600+ 832F 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 600+ 8330 2E          >                db      "."               // name string in 7-bit ascii, but
 600+ 8331             >                org     $-1                 // alter last byte of Name just above to set
 600+ 8330 AE          >                db      {b $} | END_BIT     // msb as name end
 600+ 8331             >
 600+ 8331 20 83       >                dw      last_NFA            // Link to previous definition Name
 600+ 8333             >DOT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 600+ 8333 81 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 600+ 8335             >                else
 600+ 8335 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 600+ 8335             >                endif           ; ok        // for other definitions it "points" the correct handler
 600+ 8335             >                // Use of "; ok" to suppress "warning[fwdref]"
 600+ 8335             >
 600+ 8335             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 601+ 8335 1C 6F 25 83                  dw      S_TO_D, D_DOT
 602+ 8339 9E 69                        dw      EXIT
 603+ 833B
 604+ 833B              //  ______________________________________________________________________
 605+ 833B              //
 606+ 833B              // ?            n --
 607+ 833B                              Colon_Def QUESTION, "?", is_normal
 607+ 833B             >                New_Def  QUESTION, "?", Enter_Ptr, is_normal ; ok
 607+ 833B             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 607+ 833B             >
 607+ 833B             >                // dummy db directives used to calculate length of namec
 607+ 833B 3F          >                db      "?"
 607+ 833C             >len_NFA         defl    $ - temp_NFA
 607+ 833C             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 607+ 833B             >
 607+ 833B 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 607+ 833C 3F          >                db      "?"               // name string in 7-bit ascii, but
 607+ 833D             >                org     $-1                 // alter last byte of Name just above to set
 607+ 833C BF          >                db      {b $} | END_BIT     // msb as name end
 607+ 833D             >
 607+ 833D 2F 83       >                dw      last_NFA            // Link to previous definition Name
 607+ 833F             >QUESTION:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 607+ 833F 81 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 607+ 8341             >                else
 607+ 8341 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 607+ 8341             >                endif           ; ok        // for other definitions it "points" the correct handler
 607+ 8341             >                // Use of "; ok" to suppress "warning[fwdref]"
 607+ 8341             >
 607+ 8341             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 608+ 8341 96 6B 33 83                  dw      FETCH, DOT
 609+ 8345 9E 69                        dw      EXIT
 610+ 8347
 611+ 8347              //  ______________________________________________________________________
 612+ 8347              //
 613+ 8347              // u.           u --
 614+ 8347                              Colon_Def U_DOT, "U.", is_normal
 614+ 8347             >                New_Def  U_DOT, "U.", Enter_Ptr, is_normal ; ok
 614+ 8347             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 614+ 8347             >
 614+ 8347             >                // dummy db directives used to calculate length of namec
 614+ 8347 55 2E       >                db      "U."
 614+ 8349             >len_NFA         defl    $ - temp_NFA
 614+ 8349             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 614+ 8347             >
 614+ 8347 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 614+ 8348 55 2E       >                db      "U."               // name string in 7-bit ascii, but
 614+ 834A             >                org     $-1                 // alter last byte of Name just above to set
 614+ 8349 AE          >                db      {b $} | END_BIT     // msb as name end
 614+ 834A             >
 614+ 834A 3B 83       >                dw      last_NFA            // Link to previous definition Name
 614+ 834C             >U_DOT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 614+ 834C 81 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 614+ 834E             >                else
 614+ 834E ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 614+ 834E             >                endif           ; ok        // for other definitions it "points" the correct handler
 614+ 834E             >                // Use of "; ok" to suppress "warning[fwdref]"
 614+ 834E             >
 614+ 834E             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 615+ 834E FE 6C 25 83                  dw      ZERO, D_DOT
 616+ 8352 9E 69                        dw      EXIT
 617+ 8354
 618+ 8354              //  ______________________________________________________________________
 619+ 8354              //
 620+ 8354              // words        --
 621+ 8354                              Colon_Def WORDS, "WORDS", is_normal
 621+ 8354             >                New_Def  WORDS, "WORDS", Enter_Ptr, is_normal ; ok
 621+ 8354             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 621+ 8354             >
 621+ 8354             >                // dummy db directives used to calculate length of namec
 621+ 8354 57 4F 52 44 >                db      "WORDS"
 621+ 8358 53          >
 621+ 8359             >len_NFA         defl    $ - temp_NFA
 621+ 8359             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 621+ 8354             >
 621+ 8354 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 621+ 8355 57 4F 52 44 >                db      "WORDS"               // name string in 7-bit ascii, but
 621+ 8359 53          >
 621+ 835A             >                org     $-1                 // alter last byte of Name just above to set
 621+ 8359 D3          >                db      {b $} | END_BIT     // msb as name end
 621+ 835A             >
 621+ 835A 47 83       >                dw      last_NFA            // Link to previous definition Name
 621+ 835C             >WORDS:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 621+ 835C 81 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 621+ 835E             >                else
 621+ 835E ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 621+ 835E             >                endif           ; ok        // for other definitions it "points" the correct handler
 621+ 835E             >                // Use of "; ok" to suppress "warning[fwdref]"
 621+ 835E             >
 621+ 835E             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 622+ 835E A9 63 80 00                  dw      LIT, 128, OUT, STORE
 622+ 8362 0F 6E A3 6B
 623+ 8366 31 6E 96 6B                  dw      CONTEXT, FETCH, FETCH
 623+ 836A 96 6B
 624+ 836C              Words_Begin:
 625+ 836C 03 6B B1 6B                  dw          DUP, CFETCH, LIT, $1F, AND_OP
 625+ 8370 A9 63 1F 00
 625+ 8374 2E 69
 626+ 8376 0F 6E 96 6B                  dw          OUT, FETCH, PLUS
 626+ 837A 23 6A
 627+ 837C 32 6D 5F 6F                  dw          CL, LESS, ZEQUAL
 627+ 8380 E0 69
 628+ 8382 2C 64                        dw          ZBRANCH
 629+ 8384 0A 00                        dw          Words_Endif - $
 630+ 8386 2A 66 FE 6C                  dw              CR, ZERO, OUT, STORE
 630+ 838A 0F 6E A3 6B
 631+ 838E              Words_Endif:
 632+ 838E 03 6B 46 76                  dw          DUP, ID_DOT
 633+ 8392 5C 70 2E 70                  dw          PFA, LFA, FETCH
 633+ 8396 96 6B
 634+ 8398 03 6B E0 69                  dw          DUP, ZEQUAL
 635+ 839C 3F 67 40 69                  dw          QTERMINAL, OR_OP
 636+ 83A0 2C 64                        dw      ZBRANCH
 637+ 83A2 CA FF                        dw      Words_Begin - $
 638+ 83A4 CE 6A                        dw      DROP
 639+ 83A6 9E 69                        dw      EXIT
 640+ 83A8
 641+ 83A8              //  ______________________________________________________________________
 642+ 83A8              //
 643+ 83A8              // list         n --
 644+ 83A8                              Colon_Def LIST, "LIST", is_normal
 644+ 83A8             >                New_Def  LIST, "LIST", Enter_Ptr, is_normal ; ok
 644+ 83A8             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 644+ 83A8             >
 644+ 83A8             >                // dummy db directives used to calculate length of namec
 644+ 83A8 4C 49 53 54 >                db      "LIST"
 644+ 83AC             >len_NFA         defl    $ - temp_NFA
 644+ 83AC             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 644+ 83A8             >
 644+ 83A8 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 644+ 83A9 4C 49 53 54 >                db      "LIST"               // name string in 7-bit ascii, but
 644+ 83AD             >                org     $-1                 // alter last byte of Name just above to set
 644+ 83AC D4          >                db      {b $} | END_BIT     // msb as name end
 644+ 83AD             >
 644+ 83AD 54 83       >                dw      last_NFA            // Link to previous definition Name
 644+ 83AF             >LIST:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 644+ 83AF 81 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 644+ 83B1             >                else
 644+ 83B1 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 644+ 83B1             >                endif           ; ok        // for other definitions it "points" the correct handler
 644+ 83B1             >                // Use of "; ok" to suppress "warning[fwdref]"
 644+ 83B1             >
 644+ 83B1             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 645+ 83B1 C1 71 2A 66                  dw      DECIMAL, CR
 646+ 83B5 03 6B 18 6E                  dw      DUP, SCR, STORE
 646+ 83B9 A3 6B
 647+ 83BB 72 74                        dw      C_DOT_QUOTE
 648+ 83BD 05 53 63 72                  db      5, "Scr# "
 648+ 83C1 23 20
 649+ 83C3 33 83                        dw      DOT
 650+ 83C5 56 6D FE 6C                  dw      LSCR, ZERO, C_DO
 650+ 83C9 86 64
 651+ 83CB              List_Loop:
 652+ 83CB 2A 66                        dw          CR
 653+ 83CD 90 64 16 6D                  dw          I, THREE
 654+ 83D1 14 83 E8 6F                  dw          DOT_R, SPACE
 655+ 83D5 90 64 18 6E                  dw          I, SCR, FETCH, DOT_LINE
 655+ 83D9 96 6B E1 7A
 656+ 83DD 3F 67                        dw          QTERMINAL
 657+ 83DF 2C 64                        dw          ZBRANCH
 658+ 83E1 06 00                        dw          List_Endif - $
 659+ 83E3 41 64                        dw              C_LEAVE
 660+ 83E5 06 00                        dw              List_Leave - $
 661+ 83E7              List_Endif:
 662+ 83E7 04 64                        dw      C_LOOP
 663+ 83E9 E2 FF                        dw      List_Loop - $
 664+ 83EB              List_Leave:
 665+ 83EB 2A 66                        dw      CR
 666+ 83ED 9E 69                        dw      EXIT
 667+ 83EF
 668+ 83EF              //  ______________________________________________________________________
 669+ 83EF              //
 670+ 83EF              // index        n1 n2 --
 671+ 83EF                              Colon_Def INDEX, "INDEX", is_normal
 671+ 83EF             >                New_Def  INDEX, "INDEX", Enter_Ptr, is_normal ; ok
 671+ 83EF             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 671+ 83EF             >
 671+ 83EF             >                // dummy db directives used to calculate length of namec
 671+ 83EF 49 4E 44 45 >                db      "INDEX"
 671+ 83F3 58          >
 671+ 83F4             >len_NFA         defl    $ - temp_NFA
 671+ 83F4             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 671+ 83EF             >
 671+ 83EF 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 671+ 83F0 49 4E 44 45 >                db      "INDEX"               // name string in 7-bit ascii, but
 671+ 83F4 58          >
 671+ 83F5             >                org     $-1                 // alter last byte of Name just above to set
 671+ 83F4 D8          >                db      {b $} | END_BIT     // msb as name end
 671+ 83F5             >
 671+ 83F5 A8 83       >                dw      last_NFA            // Link to previous definition Name
 671+ 83F7             >INDEX:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 671+ 83F7 81 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 671+ 83F9             >                else
 671+ 83F9 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 671+ 83F9             >                endif           ; ok        // for other definitions it "points" the correct handler
 671+ 83F9             >                // Use of "; ok" to suppress "warning[fwdref]"
 671+ 83F9             >
 671+ 83F9             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 672+ 83F9 44 6A F6 6A                  dw      ONE_PLUS, SWAP, C_DO
 672+ 83FD 86 64
 673+ 83FF              Index_Loop:
 674+ 83FF 2A 66 90 64                  dw          CR, I, THREE
 674+ 8403 16 6D
 675+ 8405 14 83 E8 6F                  dw          DOT_R, SPACE
 676+ 8409 FE 6C 90 64                  dw          ZERO, I, DOT_LINE
 676+ 840D E1 7A
 677+ 840F 3F 67                        dw          QTERMINAL
 678+ 8411 2C 64                        dw          ZBRANCH
 679+ 8413 06 00                        dw          Index_Endif - $
 680+ 8415 41 64                        dw              C_LEAVE
 681+ 8417 06 00                        dw              Index_Leave - $
 682+ 8419              Index_Endif:
 683+ 8419 04 64                        dw      C_LOOP
 684+ 841B E4 FF                        dw      Index_Loop - $
 685+ 841D              Index_Leave:
 686+ 841D 2A 66                        dw      CR
 687+ 841F 9E 69                        dw      EXIT
 688+ 8421
 689+ 8421              //  ______________________________________________________________________
 690+ 8421              //
 691+ 8421              // cls          --
 692+ 8421                              Colon_Def CLS, "CLS", is_normal
 692+ 8421             >                New_Def  CLS, "CLS", Enter_Ptr, is_normal ; ok
 692+ 8421             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 692+ 8421             >
 692+ 8421             >                // dummy db directives used to calculate length of namec
 692+ 8421 43 4C 53    >                db      "CLS"
 692+ 8424             >len_NFA         defl    $ - temp_NFA
 692+ 8424             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 692+ 8421             >
 692+ 8421 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 692+ 8422 43 4C 53    >                db      "CLS"               // name string in 7-bit ascii, but
 692+ 8425             >                org     $-1                 // alter last byte of Name just above to set
 692+ 8424 D3          >                db      {b $} | END_BIT     // msb as name end
 692+ 8425             >
 692+ 8425 EF 83       >                dw      last_NFA            // Link to previous definition Name
 692+ 8427             >CLS:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 692+ 8427 81 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 692+ 8429             >                else
 692+ 8429 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 692+ 8429             >                endif           ; ok        // for other definitions it "points" the correct handler
 692+ 8429             >                // Use of "; ok" to suppress "warning[fwdref]"
 692+ 8429             >
 692+ 8429             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 693+ 8429 A9 63 0E 00                  dw      LIT, $0E, EMITC
 693+ 842D 13 66
 694+ 842F 9E 69                        dw      EXIT
 695+ 8431
 696+ 8431              //  ______________________________________________________________________
 697+ 8431              //
 698+ 8431              // splash       --
 699+ 8431                              Colon_Def SPLASH, "SPLASH", is_normal
 699+ 8431             >                New_Def  SPLASH, "SPLASH", Enter_Ptr, is_normal ; ok
 699+ 8431             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 699+ 8431             >
 699+ 8431             >                // dummy db directives used to calculate length of namec
 699+ 8431 53 50 4C 41 >                db      "SPLASH"
 699+ 8435 53 48       >
 699+ 8437             >len_NFA         defl    $ - temp_NFA
 699+ 8437             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 699+ 8431             >
 699+ 8431 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 699+ 8432 53 50 4C 41 >                db      "SPLASH"               // name string in 7-bit ascii, but
 699+ 8436 53 48       >
 699+ 8438             >                org     $-1                 // alter last byte of Name just above to set
 699+ 8437 C8          >                db      {b $} | END_BIT     // msb as name end
 699+ 8438             >
 699+ 8438 21 84       >                dw      last_NFA            // Link to previous definition Name
 699+ 843A             >SPLASH:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 699+ 843A 81 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 699+ 843C             >                else
 699+ 843C ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 699+ 843C             >                endif           ; ok        // for other definitions it "points" the correct handler
 699+ 843C             >                // Use of "; ok" to suppress "warning[fwdref]"
 699+ 843C             >
 699+ 843C             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 700+ 843C 27 84                        dw      CLS
 701+ 843E 72 74                        dw      C_DOT_QUOTE
 702+ 8440 5A                           db      90  // length of the following string CR included.
 703+ 8441 76 2D 46 6F                  db      "v-Forth 1.52 NextZXOS version", 13
 703+ 8445 72 74 68 20
 703+ 8449 31 2E 35 32
 703+ 844D 20 4E 65 78
 703+ 8451 74 5A 58 4F
 703+ 8455 53 20 76 65
 703+ 8459 72 73 69 6F
 703+ 845D 6E 0D
 704+ 845F 49 6E 64 69                  db      "Indirect Threaded - build 20220626", 13
 704+ 8463 72 65 63 74
 704+ 8467 20 54 68 72
 704+ 846B 65 61 64 65
 704+ 846F 64 20 2D 20
 704+ 8473 62 75 69 6C
 704+ 8477 64 20 32 30
 704+ 847B 32 32 30 36
 704+ 847F 32 36 0D
 705+ 8482 31 39 39 30                  db      "1990-2022 Matteo Vitturi", 13
 705+ 8486 2D 32 30 32
 705+ 848A 32 20 4D 61
 705+ 848E 74 74 65 6F
 705+ 8492 20 56 69 74
 705+ 8496 74 75 72 69
 705+ 849A 0D
 706+ 849B 9E 69                        dw      EXIT
 707+ 849D
 708+ 849D              //  ______________________________________________________________________
 709+ 849D              //
 710+ 849D              // video        --
 711+ 849D                              Colon_Def VIDEO, "VIDEO", is_normal
 711+ 849D             >                New_Def  VIDEO, "VIDEO", Enter_Ptr, is_normal ; ok
 711+ 849D             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 711+ 849D             >
 711+ 849D             >                // dummy db directives used to calculate length of namec
 711+ 849D 56 49 44 45 >                db      "VIDEO"
 711+ 84A1 4F          >
 711+ 84A2             >len_NFA         defl    $ - temp_NFA
 711+ 84A2             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 711+ 849D             >
 711+ 849D 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 711+ 849E 56 49 44 45 >                db      "VIDEO"               // name string in 7-bit ascii, but
 711+ 84A2 4F          >
 711+ 84A3             >                org     $-1                 // alter last byte of Name just above to set
 711+ 84A2 CF          >                db      {b $} | END_BIT     // msb as name end
 711+ 84A3             >
 711+ 84A3 31 84       >                dw      last_NFA            // Link to previous definition Name
 711+ 84A5             >VIDEO:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 711+ 84A5 81 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 711+ 84A7             >                else
 711+ 84A7 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 711+ 84A7             >                endif           ; ok        // for other definitions it "points" the correct handler
 711+ 84A7             >                // Use of "; ok" to suppress "warning[fwdref]"
 711+ 84A7             >
 711+ 84A7             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 712+ 84A7 0E 6D 03 6B                  dw      TWO, DUP, DEVICE, STORE
 712+ 84AB 29 7B A3 6B
 713+ 84AF 80 67                        dw      SELECT
 714+ 84B1 9E 69                        dw      EXIT
 715+ 84B3
 716+ 84B3              //  ______________________________________________________________________
 717+ 84B3              //
 718+ 84B3              // accept-      a n1 -- n2
 719+ 84B3                              Colon_Def ACCEPT_N, "ACCEPT-", is_normal
 719+ 84B3             >                New_Def  ACCEPT_N, "ACCEPT-", Enter_Ptr, is_normal ; ok
 719+ 84B3             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 719+ 84B3             >
 719+ 84B3             >                // dummy db directives used to calculate length of namec
 719+ 84B3 41 43 43 45 >                db      "ACCEPT-"
 719+ 84B7 50 54 2D    >
 719+ 84BA             >len_NFA         defl    $ - temp_NFA
 719+ 84BA             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 719+ 84B3             >
 719+ 84B3 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 719+ 84B4 41 43 43 45 >                db      "ACCEPT-"               // name string in 7-bit ascii, but
 719+ 84B8 50 54 2D    >
 719+ 84BB             >                org     $-1                 // alter last byte of Name just above to set
 719+ 84BA AD          >                db      {b $} | END_BIT     // msb as name end
 719+ 84BB             >
 719+ 84BB 9D 84       >                dw      last_NFA            // Link to previous definition Name
 719+ 84BD             >ACCEPT_N:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 719+ 84BD 81 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 719+ 84BF             >                else
 719+ 84BF ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 719+ 84BF             >                endif           ; ok        // for other definitions it "points" the correct handler
 719+ 84BF             >                // Use of "; ok" to suppress "warning[fwdref]"
 719+ 84BF             >
 719+ 84BF             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 720+ 84BF B1 69                        dw      TO_R
 721+ 84C1 FE 6C                        dw      ZERO
 722+ 84C3 F6 6A                        dw      SWAP
 723+ 84C5 03 6B                        dw      DUP
 724+ 84C7 C5 69                        dw      R_TO
 725+ 84C9 23 6A                        dw      PLUS
 726+ 84CB F6 6A                        dw      SWAP
 727+ 84CD 86 64                        dw      C_DO
 728+ 84CF              AcceptN_Loop:
 729+ 84CF 63 7B                        dw          MMU7_FETCH
 730+ 84D1 5B 67                        dw          INKEY
 731+ 84D3 F6 6A 75 7B                  dw          SWAP, MMU7_STORE
 732+ 84D7 03 6B E0 69                  dw          DUP, ZEQUAL
 733+ 84DB 2C 64                        dw          ZBRANCH
 734+ 84DD 06 00                        dw          AcceptN_Endif_1 - $
 735+ 84DF A5 84 83 78                  dw              VIDEO, QUIT
 736+ 84E3              AcceptN_Endif_1:
 737+ 84E3 03 6B A9 63                  dw          DUP, LIT, 13, EQUALS
 737+ 84E7 0D 00 3E 6F
 738+ 84EB 2C 64                        dw          ZBRANCH
 739+ 84ED 06 00                        dw          AcceptN_Endif_2 - $
 740+ 84EF CE 6A FE 6C                  dw              DROP, ZERO
 741+ 84F3              AcceptN_Endif_2:
 742+ 84F3 03 6B A9 63                  dw          DUP, LIT, 10, EQUALS
 742+ 84F7 0A 00 3E 6F
 743+ 84FB 2C 64                        dw          ZBRANCH
 744+ 84FD 06 00                        dw          AcceptN_Endif_3 - $
 745+ 84FF CE 6A FE 6C                  dw              DROP, ZERO
 746+ 8503              AcceptN_Endif_3:
 747+ 8503 90 64 BF 6B                  dw          I, CSTORE, ONE_PLUS
 747+ 8507 44 6A
 748+ 8509
 749+ 8509 90 64 B1 6B                  dw          I, CFETCH, ZEQUAL   //      i 0= if
 749+ 850D E0 69
 750+ 850F 2C 64                        dw          ZBRANCH
 751+ 8511 06 00                        dw              AcceptN_Endif_4 - $
 752+ 8513 41 64                        dw                  C_LEAVE     //              leave
 753+ 8515 06 00                        dw                  AcceptN_Leave - $
 754+ 8517              AcceptN_Endif_4:                                 //      endif
 755+ 8517
 756+ 8517 04 64                        dw      C_LOOP
 757+ 8519 B6 FF                        dw      AcceptN_Loop -$
 758+ 851B              AcceptN_Leave:
 759+ 851B 9E 69                        dw      EXIT
 760+ 851D
 761+ 851D              //  ______________________________________________________________________
 762+ 851D              //
 763+ 851D              // load-        n --
 764+ 851D              // Provided that a stream n is OPEN# via the standart BASIC
 765+ 851D              // it accepts text from stream #n to the normal INTERPRET
 766+ 851D              // up to now, text-file must end with QUIT
 767+ 851D                              Colon_Def LOAD_N, "LOAD-", is_normal
 767+ 851D             >                New_Def  LOAD_N, "LOAD-", Enter_Ptr, is_normal ; ok
 767+ 851D             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 767+ 851D             >
 767+ 851D             >                // dummy db directives used to calculate length of namec
 767+ 851D 4C 4F 41 44 >                db      "LOAD-"
 767+ 8521 2D          >
 767+ 8522             >len_NFA         defl    $ - temp_NFA
 767+ 8522             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 767+ 851D             >
 767+ 851D 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 767+ 851E 4C 4F 41 44 >                db      "LOAD-"               // name string in 7-bit ascii, but
 767+ 8522 2D          >
 767+ 8523             >                org     $-1                 // alter last byte of Name just above to set
 767+ 8522 AD          >                db      {b $} | END_BIT     // msb as name end
 767+ 8523             >
 767+ 8523 B3 84       >                dw      last_NFA            // Link to previous definition Name
 767+ 8525             >LOAD_N:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 767+ 8525 81 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 767+ 8527             >                else
 767+ 8527 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 767+ 8527             >                endif           ; ok        // for other definitions it "points" the correct handler
 767+ 8527             >                // Use of "; ok" to suppress "warning[fwdref]"
 767+ 8527             >
 767+ 8527             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 768+ 8527 B4 6E A3 6B                  dw      SOURCE_ID, STORE
 769+ 852B              Load_N_Begin:
 770+ 852B 91 6D 96 6B                  dw          TIB, FETCH
 771+ 852F 03 6B A9 63                  dw          DUP, LIT, 80
 771+ 8533 50 00
 772+ 8535 64 6B EB 73                  dw          TWO_DUP, BLANKS
 773+ 8539 B4 6E 96 6B                  dw          SOURCE_ID, FETCH
 774+ 853D A3 79 03 6B                  dw          ABS_OP, DUP, DEVICE, STORE
 774+ 8541 29 7B A3 6B
 775+ 8545 80 67                        dw          SELECT
 776+ 8547 BD 84                        dw          ACCEPT_N
 777+ 8549 A5 84                        dw          VIDEO
 778+ 854B 44 6B                        dw          TWO_DROP
 779+ 854D FE 6C FD 6D                  dw          ZERO, BLK, STORE
 779+ 8551 A3 6B
 780+ 8553 FE 6C 06 6E                  dw          ZERO, TO_IN, STORE
 780+ 8557 A3 6B
 781+ 8559 C3 77                        dw          INTERPRET
 782+ 855B 3F 67                        dw          QTERMINAL
 783+ 855D 2C 64                        dw      ZBRANCH
 784+ 855F CC FF                        dw      Load_N_Begin - $
 785+ 8561 9E 69                        dw      EXIT
 786+ 8563
 787+ 8563              //  ______________________________________________________________________
 788+ 8563              //
 789+ 8563              // load         n --
 790+ 8563              // if n is positive, it loads screen #n (as usual)
 791+ 8563              // if n is negative, it connects stream #n to the normal INTERPRET
 792+ 8563              // this second way is useful if you want to load any kind of file
 793+ 8563              // provied that it is OPEN# the usual BASIC way.
 794+ 8563                              Colon_Def LOAD, "LOAD", is_normal
 794+ 8563             >                New_Def  LOAD, "LOAD", Enter_Ptr, is_normal ; ok
 794+ 8563             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 794+ 8563             >
 794+ 8563             >                // dummy db directives used to calculate length of namec
 794+ 8563 4C 4F 41 44 >                db      "LOAD"
 794+ 8567             >len_NFA         defl    $ - temp_NFA
 794+ 8567             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 794+ 8563             >
 794+ 8563 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 794+ 8564 4C 4F 41 44 >                db      "LOAD"               // name string in 7-bit ascii, but
 794+ 8568             >                org     $-1                 // alter last byte of Name just above to set
 794+ 8567 C4          >                db      {b $} | END_BIT     // msb as name end
 794+ 8568             >
 794+ 8568 1D 85       >                dw      last_NFA            // Link to previous definition Name
 794+ 856A             >LOAD:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 794+ 856A 81 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 794+ 856C             >                else
 794+ 856C ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 794+ 856C             >                endif           ; ok        // for other definitions it "points" the correct handler
 794+ 856C             >                // Use of "; ok" to suppress "warning[fwdref]"
 794+ 856C             >
 794+ 856C             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 795+ 856C 03 6B FB 69                  dw      DUP, ZLESS
 796+ 8570 2C 64                        dw      ZBRANCH
 797+ 8572 08 00                        dw      Load_Else - $
 798+ 8574 25 85                        dw          LOAD_N
 799+ 8576 15 64                        dw      BRANCH
 800+ 8578 04 00                        dw      Load_Endif - $
 801+ 857A              Load_Else:
 802+ 857A 42 81                        dw          LOAD_P
 803+ 857C              Load_Endif:
 804+ 857C 9E 69                        dw      EXIT
 805+ 857E
 806+ 857E
 807+ 857E              //  ______________________________________________________________________
 808+ 857E              //
 809+ 857E              // autoexec     --
 810+ 857E              // this word is called the first time the Forth system boot to
 811+ 857E              // load Screen# 1. Once called it patches itself to prevent furhter runs.
 812+ 857E                              Colon_Def AUTOEXEC, "AUTOEXEC", is_normal
 812+ 857E             >                New_Def  AUTOEXEC, "AUTOEXEC", Enter_Ptr, is_normal ; ok
 812+ 857E             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 812+ 857E             >
 812+ 857E             >                // dummy db directives used to calculate length of namec
 812+ 857E 41 55 54 4F >                db      "AUTOEXEC"
 812+ 8582 45 58 45 43 >
 812+ 8586             >len_NFA         defl    $ - temp_NFA
 812+ 8586             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 812+ 857E             >
 812+ 857E 88          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 812+ 857F 41 55 54 4F >                db      "AUTOEXEC"               // name string in 7-bit ascii, but
 812+ 8583 45 58 45 43 >
 812+ 8587             >                org     $-1                 // alter last byte of Name just above to set
 812+ 8586 C3          >                db      {b $} | END_BIT     // msb as name end
 812+ 8587             >
 812+ 8587 63 85       >                dw      last_NFA            // Link to previous definition Name
 812+ 8589             >AUTOEXEC:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 812+ 8589 81 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 812+ 858B             >                else
 812+ 858B ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 812+ 858B             >                endif           ; ok        // for other definitions it "points" the correct handler
 812+ 858B             >                // Use of "; ok" to suppress "warning[fwdref]"
 812+ 858B             >
 812+ 858B             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 813+ 858B A9 63 0B 00                  dw      LIT, 11
 814+ 858F A9 63 A9 6C                  dw      LIT, NOOP
 815+ 8593 A9 63 D2 78                  dw      LIT, Autoexec_Ptr
 816+ 8597 A3 6B                        dw      STORE
 817+ 8599 6A 85                        dw      LOAD
 818+ 859B 83 78                        dw      QUIT
 819+ 859D 9E 69                        dw      EXIT
 820+ 859F
 821+ 859F
 822+ 859F              //  ______________________________________________________________________
 823+ 859F              //
 824+ 859F              // bye     --
 825+ 859F              //
 826+ 859F                              Colon_Def BYE, "BYE", is_normal
 826+ 859F             >                New_Def  BYE, "BYE", Enter_Ptr, is_normal ; ok
 826+ 859F             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 826+ 859F             >
 826+ 859F             >                // dummy db directives used to calculate length of namec
 826+ 859F 42 59 45    >                db      "BYE"
 826+ 85A2             >len_NFA         defl    $ - temp_NFA
 826+ 85A2             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 826+ 859F             >
 826+ 859F 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 826+ 85A0 42 59 45    >                db      "BYE"               // name string in 7-bit ascii, but
 826+ 85A3             >                org     $-1                 // alter last byte of Name just above to set
 826+ 85A2 C5          >                db      {b $} | END_BIT     // msb as name end
 826+ 85A3             >
 826+ 85A3 7E 85       >                dw      last_NFA            // Link to previous definition Name
 826+ 85A5             >BYE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 826+ 85A5 81 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 826+ 85A7             >                else
 826+ 85A7 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 826+ 85A7             >                endif           ; ok        // for other definitions it "points" the correct handler
 826+ 85A7             >                // Use of "; ok" to suppress "warning[fwdref]"
 826+ 85A7             >
 826+ 85A7             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 827+ 85A7 E0 7D                        dw      FLUSH
 828+ 85A9 13 7D                        dw      EMPTY_BUFFERS
 829+ 85AB B7 7B 96 6B                  dw      BLK_FH, FETCH, F_CLOSE, DROP
 829+ 85AF C6 67 CE 6A
 830+ 85B3 FE 6C 64 6D                  dw      ZERO, PLUS_ORIGIN
 831+ 85B7 68 79                        dw      BASIC
 832+ 85B9
 833+ 85B9              //  ______________________________________________________________________
 834+ 85B9              //
 835+ 85B9              // invv     --
 836+ 85B9              //
 837+ 85B9              //              Colon_Def INVV, "INVV", is_normal
 838+ 85B9              //              dw      LIT, 20, EMITC, ONE, EMITC
 839+ 85B9              //              dw      EXIT
 840+ 85B9
 841+ 85B9              //  ______________________________________________________________________
 842+ 85B9              //
 843+ 85B9              // truv     --
 844+ 85B9              //
 845+ 85B9              //              Colon_Def TRUV, "TRUV", is_normal
 846+ 85B9              //              dw      LIT, 20, EMITC, ZERO, EMITC
 847+ 85B9              //              dw      EXIT
 848+ 85B9
 849+ 85B9              //  ______________________________________________________________________
 850+ 85B9              //
 851+ 85B9              // mark     --
 852+ 85B9              //
 853+ 85B9              //              Colon_Def MARK, "MARK", is_normal
 854+ 85B9              //              dw      INVV, TYPE, TRUV
 855+ 85B9              //              dw      EXIT
 856+ 85B9
 857+ 85B9              //  ______________________________________________________________________
 858+ 85B9              //
 859+ 85B9              // back     --
 860+ 85B9              //
 861+ 85B9                              Colon_Def BACK, "BACK", is_normal
 861+ 85B9             >                New_Def  BACK, "BACK", Enter_Ptr, is_normal ; ok
 861+ 85B9             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 861+ 85B9             >
 861+ 85B9             >                // dummy db directives used to calculate length of namec
 861+ 85B9 42 41 43 4B >                db      "BACK"
 861+ 85BD             >len_NFA         defl    $ - temp_NFA
 861+ 85BD             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 861+ 85B9             >
 861+ 85B9 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 861+ 85BA 42 41 43 4B >                db      "BACK"               // name string in 7-bit ascii, but
 861+ 85BE             >                org     $-1                 // alter last byte of Name just above to set
 861+ 85BD CB          >                db      {b $} | END_BIT     // msb as name end
 861+ 85BE             >
 861+ 85BE 9F 85       >                dw      last_NFA            // Link to previous definition Name
 861+ 85C0             >BACK:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 861+ 85C0 81 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 861+ 85C2             >                else
 861+ 85C2 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 861+ 85C2             >                endif           ; ok        // for other definitions it "points" the correct handler
 861+ 85C2             >                // Use of "; ok" to suppress "warning[fwdref]"
 861+ 85C2             >
 861+ 85C2             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 862+ 85C2 DD 6E 30 6F                  dw      HERE, SUBTRACT, COMMA
 862+ 85C6 F9 6E
 863+ 85C8 9E 69                        dw      EXIT
 864+ 85CA
 865+ 85CA              //  ______________________________________________________________________
 866+ 85CA              //
 867+ 85CA              // if          ( -- a 2 ) \ compile-time
 868+ 85CA              // IF ... THEN
 869+ 85CA              // IF ... ELSE ... ENDIF
 870+ 85CA                              Colon_Def IF, "IF", is_immediate
 870+ 85CA             >                New_Def  IF, "IF", Enter_Ptr, is_immediate ; ok
 870+ 85CA             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 870+ 85CA             >
 870+ 85CA             >                // dummy db directives used to calculate length of namec
 870+ 85CA 49 46       >                db      "IF"
 870+ 85CC             >len_NFA         defl    $ - temp_NFA
 870+ 85CC             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 870+ 85CA             >
 870+ 85CA C2          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 870+ 85CB 49 46       >                db      "IF"               // name string in 7-bit ascii, but
 870+ 85CD             >                org     $-1                 // alter last byte of Name just above to set
 870+ 85CC C6          >                db      {b $} | END_BIT     // msb as name end
 870+ 85CD             >
 870+ 85CD B9 85       >                dw      last_NFA            // Link to previous definition Name
 870+ 85CF             >IF:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 870+ 85CF 81 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 870+ 85D1             >                else
 870+ 85D1 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 870+ 85D1             >                endif           ; ok        // for other definitions it "points" the correct handler
 870+ 85D1             >                // Use of "; ok" to suppress "warning[fwdref]"
 870+ 85D1             >
 870+ 85D1             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 871+ 85D1 35 71 2C 64                  dw      COMPILE, ZBRANCH
 872+ 85D5 DD 6E FE 6C                  dw      HERE, ZERO, COMMA
 872+ 85D9 F9 6E
 873+ 85DB 0E 6D                        dw      TWO
 874+ 85DD 9E 69                        dw      EXIT
 875+ 85DF
 876+ 85DF              //  ______________________________________________________________________
 877+ 85DF              //
 878+ 85DF              // then        ( a 2 -- ) \ compile-time
 879+ 85DF              //
 880+ 85DF                              Colon_Def THEN, "THEN", is_immediate
 880+ 85DF             >                New_Def  THEN, "THEN", Enter_Ptr, is_immediate ; ok
 880+ 85DF             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 880+ 85DF             >
 880+ 85DF             >                // dummy db directives used to calculate length of namec
 880+ 85DF 54 48 45 4E >                db      "THEN"
 880+ 85E3             >len_NFA         defl    $ - temp_NFA
 880+ 85E3             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 880+ 85DF             >
 880+ 85DF C4          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 880+ 85E0 54 48 45 4E >                db      "THEN"               // name string in 7-bit ascii, but
 880+ 85E4             >                org     $-1                 // alter last byte of Name just above to set
 880+ 85E3 CE          >                db      {b $} | END_BIT     // msb as name end
 880+ 85E4             >
 880+ 85E4 CA 85       >                dw      last_NFA            // Link to previous definition Name
 880+ 85E6             >THEN:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 880+ 85E6 81 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 880+ 85E8             >                else
 880+ 85E8 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 880+ 85E8             >                endif           ; ok        // for other definitions it "points" the correct handler
 880+ 85E8             >                // Use of "; ok" to suppress "warning[fwdref]"
 880+ 85E8             >
 880+ 85E8             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 881+ 85E8 BC 70                        dw      QCOMP
 882+ 85EA 0E 6D EB 70                  dw      TWO, QPAIRS
 883+ 85EE DD 6E BE 6A                  dw      HERE, OVER, SUBTRACT, SWAP, STORE
 883+ 85F2 30 6F F6 6A
 883+ 85F6 A3 6B
 884+ 85F8 9E 69                        dw      EXIT
 885+ 85FA
 886+ 85FA              //  ______________________________________________________________________
 887+ 85FA              //
 888+ 85FA              // endif       ( a 2 -- ) \ compile-time
 889+ 85FA              //
 890+ 85FA                              Colon_Def ENDIF, "ENDIF", is_immediate
 890+ 85FA             >                New_Def  ENDIF, "ENDIF", Enter_Ptr, is_immediate ; ok
 890+ 85FA             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 890+ 85FA             >
 890+ 85FA             >                // dummy db directives used to calculate length of namec
 890+ 85FA 45 4E 44 49 >                db      "ENDIF"
 890+ 85FE 46          >
 890+ 85FF             >len_NFA         defl    $ - temp_NFA
 890+ 85FF             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 890+ 85FA             >
 890+ 85FA C5          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 890+ 85FB 45 4E 44 49 >                db      "ENDIF"               // name string in 7-bit ascii, but
 890+ 85FF 46          >
 890+ 8600             >                org     $-1                 // alter last byte of Name just above to set
 890+ 85FF C6          >                db      {b $} | END_BIT     // msb as name end
 890+ 8600             >
 890+ 8600 DF 85       >                dw      last_NFA            // Link to previous definition Name
 890+ 8602             >ENDIF:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 890+ 8602 81 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 890+ 8604             >                else
 890+ 8604 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 890+ 8604             >                endif           ; ok        // for other definitions it "points" the correct handler
 890+ 8604             >                // Use of "; ok" to suppress "warning[fwdref]"
 890+ 8604             >
 890+ 8604             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 891+ 8604 E6 85                        dw      THEN
 892+ 8606 9E 69                        dw      EXIT
 893+ 8608
 894+ 8608              //  ______________________________________________________________________
 895+ 8608              //
 896+ 8608              // else        ( a1 2 -- a2 2 ) \ compile-time
 897+ 8608              //
 898+ 8608                              Colon_Def ELSE, "ELSE", is_immediate
 898+ 8608             >                New_Def  ELSE, "ELSE", Enter_Ptr, is_immediate ; ok
 898+ 8608             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 898+ 8608             >
 898+ 8608             >                // dummy db directives used to calculate length of namec
 898+ 8608 45 4C 53 45 >                db      "ELSE"
 898+ 860C             >len_NFA         defl    $ - temp_NFA
 898+ 860C             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 898+ 8608             >
 898+ 8608 C4          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 898+ 8609 45 4C 53 45 >                db      "ELSE"               // name string in 7-bit ascii, but
 898+ 860D             >                org     $-1                 // alter last byte of Name just above to set
 898+ 860C C5          >                db      {b $} | END_BIT     // msb as name end
 898+ 860D             >
 898+ 860D FA 85       >                dw      last_NFA            // Link to previous definition Name
 898+ 860F             >ELSE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 898+ 860F 81 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 898+ 8611             >                else
 898+ 8611 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 898+ 8611             >                endif           ; ok        // for other definitions it "points" the correct handler
 898+ 8611             >                // Use of "; ok" to suppress "warning[fwdref]"
 898+ 8611             >
 898+ 8611             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 899+ 8611 BC 70                        dw      QCOMP
 900+ 8613 0E 6D EB 70                  dw      TWO, QPAIRS
 901+ 8617 35 71 15 64                  dw      COMPILE, BRANCH
 902+ 861B DD 6E FE 6C                  dw      HERE, ZERO, COMMA
 902+ 861F F9 6E
 903+ 8621 F6 6A 0E 6D                  dw      SWAP, TWO, THEN
 903+ 8625 E6 85
 904+ 8627 0E 6D                        dw      TWO
 905+ 8629 9E 69                        dw      EXIT
 906+ 862B
 907+ 862B              //  ______________________________________________________________________
 908+ 862B              //
 909+ 862B              // begin        ( -- a 1 ) \ compile-time
 910+ 862B              // BEGIN ... AGAIN
 911+ 862B              // BEGIN ... f UNTIL
 912+ 862B              // BEGIN ... f WHILE ... REPEAT
 913+ 862B                              Colon_Def BEGIN, "BEGIN", is_immediate
 913+ 862B             >                New_Def  BEGIN, "BEGIN", Enter_Ptr, is_immediate ; ok
 913+ 862B             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 913+ 862B             >
 913+ 862B             >                // dummy db directives used to calculate length of namec
 913+ 862B 42 45 47 49 >                db      "BEGIN"
 913+ 862F 4E          >
 913+ 8630             >len_NFA         defl    $ - temp_NFA
 913+ 8630             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 913+ 862B             >
 913+ 862B C5          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 913+ 862C 42 45 47 49 >                db      "BEGIN"               // name string in 7-bit ascii, but
 913+ 8630 4E          >
 913+ 8631             >                org     $-1                 // alter last byte of Name just above to set
 913+ 8630 CE          >                db      {b $} | END_BIT     // msb as name end
 913+ 8631             >
 913+ 8631 08 86       >                dw      last_NFA            // Link to previous definition Name
 913+ 8633             >BEGIN:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 913+ 8633 81 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 913+ 8635             >                else
 913+ 8635 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 913+ 8635             >                endif           ; ok        // for other definitions it "points" the correct handler
 913+ 8635             >                // Use of "; ok" to suppress "warning[fwdref]"
 913+ 8635             >
 913+ 8635             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 914+ 8635 BC 70                        dw      QCOMP
 915+ 8637 DD 6E                        dw      HERE
 916+ 8639 0E 6D                        dw      TWO
 917+ 863B 9E 69                        dw      EXIT
 918+ 863D
 919+ 863D              //  ______________________________________________________________________
 920+ 863D              //
 921+ 863D              // again        ( a 1 -- ) \ compile-time
 922+ 863D                              Colon_Def AGAIN, "AGAIN", is_immediate
 922+ 863D             >                New_Def  AGAIN, "AGAIN", Enter_Ptr, is_immediate ; ok
 922+ 863D             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 922+ 863D             >
 922+ 863D             >                // dummy db directives used to calculate length of namec
 922+ 863D 41 47 41 49 >                db      "AGAIN"
 922+ 8641 4E          >
 922+ 8642             >len_NFA         defl    $ - temp_NFA
 922+ 8642             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 922+ 863D             >
 922+ 863D C5          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 922+ 863E 41 47 41 49 >                db      "AGAIN"               // name string in 7-bit ascii, but
 922+ 8642 4E          >
 922+ 8643             >                org     $-1                 // alter last byte of Name just above to set
 922+ 8642 CE          >                db      {b $} | END_BIT     // msb as name end
 922+ 8643             >
 922+ 8643 2B 86       >                dw      last_NFA            // Link to previous definition Name
 922+ 8645             >AGAIN:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 922+ 8645 81 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 922+ 8647             >                else
 922+ 8647 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 922+ 8647             >                endif           ; ok        // for other definitions it "points" the correct handler
 922+ 8647             >                // Use of "; ok" to suppress "warning[fwdref]"
 922+ 8647             >
 922+ 8647             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 923+ 8647 BC 70                        dw      QCOMP
 924+ 8649 0E 6D EB 70                  dw      TWO, QPAIRS
 925+ 864D 35 71 15 64                  dw      COMPILE, BRANCH
 926+ 8651 C0 85                        dw      BACK
 927+ 8653 9E 69                        dw      EXIT
 928+ 8655
 929+ 8655              //  ______________________________________________________________________
 930+ 8655              //
 931+ 8655              // until        ( a 1 -- ) \ compile-time
 932+ 8655                              Colon_Def UNTIL, "UNTIL", is_immediate
 932+ 8655             >                New_Def  UNTIL, "UNTIL", Enter_Ptr, is_immediate ; ok
 932+ 8655             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 932+ 8655             >
 932+ 8655             >                // dummy db directives used to calculate length of namec
 932+ 8655 55 4E 54 49 >                db      "UNTIL"
 932+ 8659 4C          >
 932+ 865A             >len_NFA         defl    $ - temp_NFA
 932+ 865A             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 932+ 8655             >
 932+ 8655 C5          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 932+ 8656 55 4E 54 49 >                db      "UNTIL"               // name string in 7-bit ascii, but
 932+ 865A 4C          >
 932+ 865B             >                org     $-1                 // alter last byte of Name just above to set
 932+ 865A CC          >                db      {b $} | END_BIT     // msb as name end
 932+ 865B             >
 932+ 865B 3D 86       >                dw      last_NFA            // Link to previous definition Name
 932+ 865D             >UNTIL:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 932+ 865D 81 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 932+ 865F             >                else
 932+ 865F ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 932+ 865F             >                endif           ; ok        // for other definitions it "points" the correct handler
 932+ 865F             >                // Use of "; ok" to suppress "warning[fwdref]"
 932+ 865F             >
 932+ 865F             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 933+ 865F BC 70                        dw      QCOMP
 934+ 8661 0E 6D EB 70                  dw      TWO, QPAIRS
 935+ 8665 35 71 2C 64                  dw      COMPILE, ZBRANCH
 936+ 8669 C0 85                        dw      BACK
 937+ 866B 9E 69                        dw      EXIT
 938+ 866D
 939+ 866D              //  ______________________________________________________________________
 940+ 866D              //
 941+ 866D              // end          ( a 1 -- ) \ compile-time
 942+ 866D                              Colon_Def END, "END", is_immediate
 942+ 866D             >                New_Def  END, "END", Enter_Ptr, is_immediate ; ok
 942+ 866D             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 942+ 866D             >
 942+ 866D             >                // dummy db directives used to calculate length of namec
 942+ 866D 45 4E 44    >                db      "END"
 942+ 8670             >len_NFA         defl    $ - temp_NFA
 942+ 8670             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 942+ 866D             >
 942+ 866D C3          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 942+ 866E 45 4E 44    >                db      "END"               // name string in 7-bit ascii, but
 942+ 8671             >                org     $-1                 // alter last byte of Name just above to set
 942+ 8670 C4          >                db      {b $} | END_BIT     // msb as name end
 942+ 8671             >
 942+ 8671 55 86       >                dw      last_NFA            // Link to previous definition Name
 942+ 8673             >END:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 942+ 8673 81 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 942+ 8675             >                else
 942+ 8675 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 942+ 8675             >                endif           ; ok        // for other definitions it "points" the correct handler
 942+ 8675             >                // Use of "; ok" to suppress "warning[fwdref]"
 942+ 8675             >
 942+ 8675             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 943+ 8675 5D 86                        dw      UNTIL
 944+ 8677 9E 69                        dw      EXIT
 945+ 8679
 946+ 8679              //  ______________________________________________________________________
 947+ 8679              //
 948+ 8679              // while        ( a1 1 -- a1 1 a2 4 ) \ compile-time
 949+ 8679                              Colon_Def WHILE, "WHILE", is_immediate
 949+ 8679             >                New_Def  WHILE, "WHILE", Enter_Ptr, is_immediate ; ok
 949+ 8679             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 949+ 8679             >
 949+ 8679             >                // dummy db directives used to calculate length of namec
 949+ 8679 57 48 49 4C >                db      "WHILE"
 949+ 867D 45          >
 949+ 867E             >len_NFA         defl    $ - temp_NFA
 949+ 867E             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 949+ 8679             >
 949+ 8679 C5          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 949+ 867A 57 48 49 4C >                db      "WHILE"               // name string in 7-bit ascii, but
 949+ 867E 45          >
 949+ 867F             >                org     $-1                 // alter last byte of Name just above to set
 949+ 867E C5          >                db      {b $} | END_BIT     // msb as name end
 949+ 867F             >
 949+ 867F 6D 86       >                dw      last_NFA            // Link to previous definition Name
 949+ 8681             >WHILE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 949+ 8681 81 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 949+ 8683             >                else
 949+ 8683 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 949+ 8683             >                endif           ; ok        // for other definitions it "points" the correct handler
 949+ 8683             >                // Use of "; ok" to suppress "warning[fwdref]"
 949+ 8683             >
 949+ 8683             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 950+ 8683 CF 85                        dw      IF
 951+ 8685              //              dw      TWO_PLUS // ( that is 4 )
 952+ 8685 52 6B                        dw      TWO_SWAP
 953+ 8687 9E 69                        dw      EXIT
 954+ 8689
 955+ 8689              //  ______________________________________________________________________
 956+ 8689              //
 957+ 8689              // repeat       ( a1 1 a2 4 -- ) \ compile-time
 958+ 8689                              Colon_Def REPEAT, "REPEAT", is_immediate
 958+ 8689             >                New_Def  REPEAT, "REPEAT", Enter_Ptr, is_immediate ; ok
 958+ 8689             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 958+ 8689             >
 958+ 8689             >                // dummy db directives used to calculate length of namec
 958+ 8689 52 45 50 45 >                db      "REPEAT"
 958+ 868D 41 54       >
 958+ 868F             >len_NFA         defl    $ - temp_NFA
 958+ 868F             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 958+ 8689             >
 958+ 8689 C6          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 958+ 868A 52 45 50 45 >                db      "REPEAT"               // name string in 7-bit ascii, but
 958+ 868E 41 54       >
 958+ 8690             >                org     $-1                 // alter last byte of Name just above to set
 958+ 868F D4          >                db      {b $} | END_BIT     // msb as name end
 958+ 8690             >
 958+ 8690 79 86       >                dw      last_NFA            // Link to previous definition Name
 958+ 8692             >REPEAT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 958+ 8692 81 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 958+ 8694             >                else
 958+ 8694 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 958+ 8694             >                endif           ; ok        // for other definitions it "points" the correct handler
 958+ 8694             >                // Use of "; ok" to suppress "warning[fwdref]"
 958+ 8694             >
 958+ 8694             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 959+ 8694 45 86                        dw      AGAIN
 960+ 8696              //              dw      TWO_MINUS
 961+ 8696 E6 85                        dw      THEN
 962+ 8698 9E 69                        dw      EXIT
 963+ 869A
 964+ 869A              //  ______________________________________________________________________
 965+ 869A              //
 966+ 869A              // ?do-
 967+ 869A              // special version of "BACK" used by ?DO and LOOP
 968+ 869A                              Colon_Def C_DO_BACK, "?DO-", is_normal
 968+ 869A             >                New_Def  C_DO_BACK, "?DO-", Enter_Ptr, is_normal ; ok
 968+ 869A             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 968+ 869A             >
 968+ 869A             >                // dummy db directives used to calculate length of namec
 968+ 869A 3F 44 4F 2D >                db      "?DO-"
 968+ 869E             >len_NFA         defl    $ - temp_NFA
 968+ 869E             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 968+ 869A             >
 968+ 869A 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 968+ 869B 3F 44 4F 2D >                db      "?DO-"               // name string in 7-bit ascii, but
 968+ 869F             >                org     $-1                 // alter last byte of Name just above to set
 968+ 869E AD          >                db      {b $} | END_BIT     // msb as name end
 968+ 869F             >
 968+ 869F 89 86       >                dw      last_NFA            // Link to previous definition Name
 968+ 86A1             >C_DO_BACK:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 968+ 86A1 81 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 968+ 86A3             >                else
 968+ 86A3 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 968+ 86A3             >                endif           ; ok        // for other definitions it "points" the correct handler
 968+ 86A3             >                // Use of "; ok" to suppress "warning[fwdref]"
 968+ 86A3             >
 968+ 86A3             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 969+ 86A3 C0 85                        dw      BACK
 970+ 86A5              CDoBack_Begin:
 971+ 86A5 66 69 6E 6E                  dw      SPFETCH, CSP, FETCH, SUBTRACT
 971+ 86A9 96 6B 30 6F
 972+ 86AD 2C 64                        dw      ZBRANCH
 973+ 86AF 0A 00                        dw      CDoBack_While - $
 974+ 86B1 5C 6A E6 85                  dw          TWO_PLUS, THEN
 975+ 86B5 15 64                        dw      BRANCH
 976+ 86B7 EE FF                        dw      CDoBack_Begin - $
 977+ 86B9              CDoBack_While:
 978+ 86B9 FE 70 6E 6E                  dw      QCSP, CSP, STORE
 978+ 86BD A3 6B
 979+ 86BF 9E 69                        dw      EXIT
 980+ 86C1
 981+ 86C1              //  ______________________________________________________________________
 982+ 86C1              //
 983+ 86C1              // do
 984+ 86C1              // DO  ... LOOP
 985+ 86C1              // DO  ... n +LOOP
 986+ 86C1              // ?DO ... LOOP
 987+ 86C1              // ?DO ... n +LOOP
 988+ 86C1                              Colon_Def DO, "DO", is_immediate
 988+ 86C1             >                New_Def  DO, "DO", Enter_Ptr, is_immediate ; ok
 988+ 86C1             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 988+ 86C1             >
 988+ 86C1             >                // dummy db directives used to calculate length of namec
 988+ 86C1 44 4F       >                db      "DO"
 988+ 86C3             >len_NFA         defl    $ - temp_NFA
 988+ 86C3             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 988+ 86C1             >
 988+ 86C1 C2          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 988+ 86C2 44 4F       >                db      "DO"               // name string in 7-bit ascii, but
 988+ 86C4             >                org     $-1                 // alter last byte of Name just above to set
 988+ 86C3 CF          >                db      {b $} | END_BIT     // msb as name end
 988+ 86C4             >
 988+ 86C4 9A 86       >                dw      last_NFA            // Link to previous definition Name
 988+ 86C6             >DO:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 988+ 86C6 81 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 988+ 86C8             >                else
 988+ 86C8 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 988+ 86C8             >                endif           ; ok        // for other definitions it "points" the correct handler
 988+ 86C8             >                // Use of "; ok" to suppress "warning[fwdref]"
 988+ 86C8             >
 988+ 86C8             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 989+ 86C8 35 71 86 64                  dw      COMPILE, C_DO
 990+ 86CC 6E 6E 96 6B                  dw      CSP, FETCH, STORE_CSP
 990+ 86D0 8F 70
 991+ 86D2 DD 6E 16 6D                  dw      HERE, THREE
 992+ 86D6 9E 69                        dw      EXIT
 993+ 86D8
 994+ 86D8              //  ______________________________________________________________________
 995+ 86D8              //
 996+ 86D8              // loop
 997+ 86D8                              Colon_Def LOOP, "LOOP", is_immediate
 997+ 86D8             >                New_Def  LOOP, "LOOP", Enter_Ptr, is_immediate ; ok
 997+ 86D8             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 997+ 86D8             >
 997+ 86D8             >                // dummy db directives used to calculate length of namec
 997+ 86D8 4C 4F 4F 50 >                db      "LOOP"
 997+ 86DC             >len_NFA         defl    $ - temp_NFA
 997+ 86DC             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 997+ 86D8             >
 997+ 86D8 C4          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 997+ 86D9 4C 4F 4F 50 >                db      "LOOP"               // name string in 7-bit ascii, but
 997+ 86DD             >                org     $-1                 // alter last byte of Name just above to set
 997+ 86DC D0          >                db      {b $} | END_BIT     // msb as name end
 997+ 86DD             >
 997+ 86DD C1 86       >                dw      last_NFA            // Link to previous definition Name
 997+ 86DF             >LOOP:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 997+ 86DF 81 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 997+ 86E1             >                else
 997+ 86E1 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 997+ 86E1             >                endif           ; ok        // for other definitions it "points" the correct handler
 997+ 86E1             >                // Use of "; ok" to suppress "warning[fwdref]"
 997+ 86E1             >
 997+ 86E1             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 998+ 86E1 16 6D EB 70                  dw      THREE, QPAIRS
 999+ 86E5 35 71 04 64                  dw      COMPILE, C_LOOP
1000+ 86E9 A1 86                        dw      C_DO_BACK
1001+ 86EB 9E 69                        dw      EXIT
1002+ 86ED
1003+ 86ED              //  ______________________________________________________________________
1004+ 86ED              //
1005+ 86ED              // +loop
1006+ 86ED                              Colon_Def PLOOP, "+LOOP", is_immediate
1006+ 86ED             >                New_Def  PLOOP, "+LOOP", Enter_Ptr, is_immediate ; ok
1006+ 86ED             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1006+ 86ED             >
1006+ 86ED             >                // dummy db directives used to calculate length of namec
1006+ 86ED 2B 4C 4F 4F >                db      "+LOOP"
1006+ 86F1 50          >
1006+ 86F2             >len_NFA         defl    $ - temp_NFA
1006+ 86F2             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1006+ 86ED             >
1006+ 86ED C5          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
1006+ 86EE 2B 4C 4F 4F >                db      "+LOOP"               // name string in 7-bit ascii, but
1006+ 86F2 50          >
1006+ 86F3             >                org     $-1                 // alter last byte of Name just above to set
1006+ 86F2 D0          >                db      {b $} | END_BIT     // msb as name end
1006+ 86F3             >
1006+ 86F3 D8 86       >                dw      last_NFA            // Link to previous definition Name
1006+ 86F5             >PLOOP:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1006+ 86F5 81 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
1006+ 86F7             >                else
1006+ 86F7 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
1006+ 86F7             >                endif           ; ok        // for other definitions it "points" the correct handler
1006+ 86F7             >                // Use of "; ok" to suppress "warning[fwdref]"
1006+ 86F7             >
1006+ 86F7             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1007+ 86F7 16 6D EB 70                  dw      THREE, QPAIRS
1008+ 86FB 35 71 CD 63                  dw      COMPILE, C_PLOOP
1009+ 86FF A1 86                        dw      C_DO_BACK
1010+ 8701 9E 69                        dw      EXIT
1011+ 8703
1012+ 8703              //  ______________________________________________________________________
1013+ 8703              //
1014+ 8703              // ?do
1015+ 8703                              Colon_Def QDO, "?DO", is_immediate
1015+ 8703             >                New_Def  QDO, "?DO", Enter_Ptr, is_immediate ; ok
1015+ 8703             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1015+ 8703             >
1015+ 8703             >                // dummy db directives used to calculate length of namec
1015+ 8703 3F 44 4F    >                db      "?DO"
1015+ 8706             >len_NFA         defl    $ - temp_NFA
1015+ 8706             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1015+ 8703             >
1015+ 8703 C3          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
1015+ 8704 3F 44 4F    >                db      "?DO"               // name string in 7-bit ascii, but
1015+ 8707             >                org     $-1                 // alter last byte of Name just above to set
1015+ 8706 CF          >                db      {b $} | END_BIT     // msb as name end
1015+ 8707             >
1015+ 8707 ED 86       >                dw      last_NFA            // Link to previous definition Name
1015+ 8709             >QDO:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1015+ 8709 81 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
1015+ 870B             >                else
1015+ 870B ~           >                dw      $ + 2   ; ok        // is pointed by CFA
1015+ 870B             >                endif           ; ok        // for other definitions it "points" the correct handler
1015+ 870B             >                // Use of "; ok" to suppress "warning[fwdref]"
1015+ 870B             >
1015+ 870B             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1016+ 870B 35 71 59 64                  dw      COMPILE, C_Q_DO
1017+ 870F 6E 6E 96 6B                  dw      CSP, FETCH, STORE_CSP
1017+ 8713 8F 70
1018+ 8715 DD 6E FE 6C                  dw      HERE, ZERO, COMMA, ZERO
1018+ 8719 F9 6E FE 6C
1019+ 871D DD 6E 16 6D                  dw      HERE, THREE
1020+ 8721 9E 69                        dw      EXIT
1021+ 8723
1022+ 8723              Latest_Definition:
1023+ 8723              //  ______________________________________________________________________
1024+ 8723              //
1025+ 8723              // \
1026+ 8723                              Colon_Def BACKSLASH, "\\", is_immediate  // this is a single back-slash
1026+ 8723             >                New_Def  BACKSLASH, "\\", Enter_Ptr, is_immediate ; ok
1026+ 8723             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1026+ 8723             >
1026+ 8723             >                // dummy db directives used to calculate length of namec
1026+ 8723 5C          >                db      "\\"
1026+ 8724             >len_NFA         defl    $ - temp_NFA
1026+ 8724             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1026+ 8723             >
1026+ 8723 C1          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
1026+ 8724 5C          >                db      "\\"               // name string in 7-bit ascii, but
1026+ 8725             >                org     $-1                 // alter last byte of Name just above to set
1026+ 8724 DC          >                db      {b $} | END_BIT     // msb as name end
1026+ 8725             >
1026+ 8725 03 87       >                dw      last_NFA            // Link to previous definition Name
1026+ 8727             >BACKSLASH:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1026+ 8727 81 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
1026+ 8729             >                else
1026+ 8729 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
1026+ 8729             >                endif           ; ok        // for other definitions it "points" the correct handler
1026+ 8729             >                // Use of "; ok" to suppress "warning[fwdref]"
1026+ 8729             >
1026+ 8729             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1027+ 8729 FD 6D 96 6B                  dw      BLK, FETCH
1028+ 872D 2C 64                        dw      ZBRANCH
1029+ 872F 30 00                        dw      Backslash_Else_1 - $
1030+ 8731 FD 6D 96 6B                  dw          BLK, FETCH, ONE, GREATER  // BLOCK 1 is used as temp-line in INCLUDE file
1030+ 8735 06 6D 76 6F
1031+ 8739 2C 64                        dw          ZBRANCH
1032+ 873B 18 00                        dw          Backslash_Else_2 - $
1033+ 873D 06 6E 96 6B                  dw              TO_IN, FETCH, CL, MOD, CL
1033+ 8741 32 6D 89 7A
1033+ 8745 32 6D
1034+ 8747 F6 6A 30 6F                  dw              SWAP, SUBTRACT, TO_IN, PLUSSTORE
1034+ 874B 06 6E 73 6B
1035+ 874F 15 64                        dw          BRANCH
1036+ 8751 0A 00                        dw          Backslash_Endif_2 - $
1037+ 8753              Backslash_Else_2:
1038+ 8753 3E 6D 76 6A                  dw              BBUF, CELL_MINUS, TO_IN, STORE
1038+ 8757 06 6E A3 6B
1039+ 875B              Backslash_Endif_2:
1040+ 875B 15 64                        dw      BRANCH
1041+ 875D 0A 00                        dw      Backslash_Endif_1 - $
1042+ 875F              Backslash_Else_1:
1043+ 875F A9 63 50 00                  dw          LIT, 80, TO_IN, STORE
1043+ 8763 06 6E A3 6B
1044+ 8767              Backslash_Endif_1:
1045+ 8767 9E 69                        dw      EXIT
1046+ 8769
1047+ 8769              Fence_Word:
1048+ 8769              //  ______________________________________________________________________
1049+ 8769              //
1050+ 8769
1051+ 8769 00           Here_Dictionary db      0
1052+ 876A
# file closed: C:\Zx\CSpect\Projects\vForth15_INDIRECT/source/L3.asm
 114  876A
 115  876A              // now we save the compiled file so we can either run it or debug it
 116  876A                              SAVENEX OPEN "output/main.nex", ORIGIN
 117  876A                              SAVENEX CORE 3, 0, 0                                // Next core 3.0.0 required as minimum
 118  876A                              SAVENEX CFG  0
 119  876A                              SAVENEX BANK 2, 0
 120  876A                              SAVENEX AUTO
 121  876A                              SAVENEX CLOSE
 122  876A
 123  876A              //              PAGE 7 ;set 7 page to current slot
 124  876A              //              SAVEBIN "ram7.bin",$C000,$4000 ;- save 4000h begin from C000h of RAM to file
 125  876A              //              SAVEBIN "output/ram2.bin", $8000, 9800 ;- save 3000h begin from 8000h of RAM to file
 126  876A
 127  876A                              SAVETAP "output/F15E.tap", CODE, "forth15e", ORIGIN, 10000
 128  876A
 129  876A                              SAVEBIN "output/forth15E.bin", ORIGIN, 10000
 130  876A
 131  876A                              END
# file closed: C:\Zx\CSpect\Projects\vForth15_INDIRECT/source/main.asm
