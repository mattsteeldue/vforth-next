# file opened: C:\Zx\CSpect\Projects\vForth15_INDIRECT/source/main.asm
   1  0000              //  ______________________________________________________________________
   2  0000              //
   3  0000              //  main.asm
   4  0000              //  ______________________________________________________________________
   5  0000              //
   6  0000              //  v-Forth 1.5 NextZXOS version
   7  0000              //  build 20230101
   8  0000              //
   9  0000              //  Inirect-Thread version.
  10  0000              //
  11  0000              //  NextZXOS version
  12  0000              //  ______________________________________________________________________
  13  0000              //
  14  0000              //  This work is available as-is with no whatsoever warranty.
  15  0000              //  Copying, modifying and distributing this software is allowed
  16  0000              //  provided that the copyright notice is kept.
  17  0000              //  ______________________________________________________________________
  18  0000              //
  19  0000              //  by Matteo Vitturi, 1990-2022
  20  0000              //
  21  0000              //  https://sites.google.com/view/vforth/vforth15-next
  22  0000              //  https://www.oocities.org/matteo_vitturi/english/index.htm
  23  0000              //
  24  0000              //  This is the complete compiler for v.Forth for SINCLAIR ZX Spectrum Next.
  25  0000              //  Each line of this source list mustn't exceed 80 bytes.
  26  0000              //  Z80N (ZX Spectrum Next) extension is available.
  27  0000              //
  28  0000              //  This list has been tested using the following configuration:
  29  0000              //      - CSpect emulator V.2.12.30
  30  0000              //  ______________________________________________________________________
  31  0000              //
  32  0000              //  Z80 Registers usage map
  33  0000              //
  34  0000              //  AF
  35  0000              //  BC - Instruction Pointer: should be preserved during ROM/OS calls
  36  0000              //  DE - Working
  37  0000              //  HL - Working
  38  0000              //
  39  0000              //  AF'- Sometime used for backup purpose
  40  0000              //  BC'- Not used
  41  0000              //  DE'- Not used
  42  0000              //  HL'- Not used: (saved at startup)
  43  0000              //
  44  0000              //  SP - Calculator Stack Pointer
  45  0000              //  IX - Inner interpreter "next" address pointer. This way jp (ix) is 2T-state faster than JP next
  46  0000              //  IY - (ZX System: must be preserved to interact with standard ROM)
  47  0000              //
  48  0000              //  ______________________________________________________________________
  49  0000              //
  50  0000              //  _________________
  51  0000              //
  52  0000              //  FORTH DEFINITIONS
  53  0000              //  _________________
  54  0000
  55  0000                              OPT     --zxnext
  56  0000              //  ______________________________________________________________________
  57  0000              //
  58  0000              // this controls some debugging code in L0.asm
  59  0000              //  0 for final binary release.
  60  0000              //  1 for debugging with Visual Studio Code and DeZog
  61  0000              // -1 for for binary comparison with Forth generated code.
  62  0000              DEBUGGING       equ     -1
  63  0000              //
  64  0000              //  ______________________________________________________________________
  65  0000
  66  0000                              if ( -1 == DEBUGGING )
  67  0000              ORIGIN          equ     $62E6                   // for binary comparison
  68  0000                              endif
  69  0000              //  ______________________________________________________________________
  70  0000
  71  0000                              if (  0 == DEBUGGING )
  72  0000 ~            ORIGIN          equ     $6366                   // binary
  73  0000                              endif
  74  0000              //  ______________________________________________________________________
  75  0000
  76  0000                              if (  1 == DEBUGGING )
  77  0000 ~            ORIGIN          equ     $8080                   // for DeZog
  78  0000                              endif
  79  0000              //  ______________________________________________________________________
  80  0000
  81  0000                              DEVICE  ZXSPECTRUMNEXT
  82  0000
  83  0000                              ORG     ORIGIN
  84  62E6
  85  62E6                              if ( -1 == DEBUGGING )
  86  62E6 00 00 00...                  ds 128                            // for binary comparison
  87  62EA                              endif
  88  6366
  89  6366              //  ______________________________________________________________________
  90  6366              //
  91  6366              //  Naming convention for Label vs Forth correspondance
  92  6366              //  Forth words are named as they are named for real with some exception to avoid assembler syntax errors.
  93  6366              //    - Leading "0" is converted into "Z_"
  94  6366              //    - Leading "(" is converted into "C_", closing bracket is omitted
  95  6366              //    - Leading numbers are converted in letters: ONE_  TWO_ etc.
  96  6366              //    - Question mark "?" is converted into "Q" or omitted if needed / useful.
  97  6366              //    - Plus sign "+" is converted in _PLUS or ADD_ depending.
  98  6366              //    - Minus sign "-" in L (for Line), MINUS or SUBTRACT depending
  99  6366              //    - Greater-Than sign ">" in _GREATER or TO_ depending
 100  6366              //    - Equal sign "=" is converted in EQUAL
 101  6366              //    - Less-Than sign "<" in _LESS or FROM_ (or TO_ again) depending
 102  6366              //    - Asterisk sign "*" is converted in _MUL or STAR
 103  6366              //    - Slash "/" is converted in _DIV or omitted if it is clear what it means
 104  6366              //    - Exclamation mark "!" is converted in STORE
 105  6366              //    - At-Sign "@" is converted in FETCH
 106  6366              //    - Words that collide with Assembler are normally suffixed with "_OP"
 107  6366
 108  6366                              include "system.asm"
# file opened: C:\Zx\CSpect\Projects\vForth15_INDIRECT/source/system.asm
   1+ 6366              //  ______________________________________________________________________
   2+ 6366              //
   3+ 6366              //  system.asm
   4+ 6366              //  ______________________________________________________________________
   5+ 6366
   6+ 6366              // Registers:
   7+ 6366              //
   8+ 6366              //      BC: Instruction Pointer
   9+ 6366              //      DE:
  10+ 6366              //      HL: W register
  11+ 6366              //      SP: Calc stack Pointer
  12+ 6366              //      IX: Inner-Interpreter Address
  13+ 6366
  14+ 6366              //  ______________________________________________________________________
  15+ 6366              //
  16+ 6366              // ZX-Spectrum standard system variables
  17+ 6366              SCR_CT          equ     $5C8C                   // SCR-CT system variable
  18+ 6366              LASTK           equ     $5C08                   // LASTK system variable
  19+ 6366              BORDCR          equ     $5C48                   // BORDCR system variable
  20+ 6366              FLAGS2          equ     $5C6A                   // for caps-lock
  21+ 6366
  22+ 6366              //  ______________________________________________________________________
  23+ 6366              //
  24+ 6366              // Flag constants
  25+ 6366              TRUE_FLAG       equ     $FFFF
  26+ 6366              FALSE_FLAG      equ     $0000
  27+ 6366
  28+ 6366              //  ______________________________________________________________________
  29+ 6366              //
  30+ 6366              // Ascii char constants
  31+ 6366              NUL_CHAR        equ     $00
  32+ 6366              COMMA_CHAR      equ     $06
  33+ 6366              BACKSPACE_CHAR  equ     $08
  34+ 6366              CR_CHAR         equ     $0D
  35+ 6366              BLANK_CHAR      equ     $20
  36+ 6366              QUOTE_CHAR      equ     "'"
  37+ 6366              DQUOTE_CHAR     equ     '"'
  38+ 6366              UNDERSCORE_CHAR equ     $5F
  39+ 6366              SOLIDBLOCK_CHAR equ     $8F
  40+ 6366              HALFBLOCK_CHAR  equ     $8C
  41+ 6366              LC_A_CHAR       equ     $61                 // lower-case "a"
  42+ 6366              LC_Z_CHAR       equ     $7A                 // lower-case "z"
  43+ 6366
  44+ 6366
  45+ 6366              //  ______________________________________________________________________
  46+ 6366              //
  47+ 6366
  48+ 6366                              // emulate something like:  ld hl,rp
  49+ 6366              ldhlrp          macro
  50+ 6366 ~                            ld      hl,(RP_Pointer)
  51+ 6366                              endm
  52+ 6366
  53+ 6366                              // emulate something like:  ld rp,hl
  54+ 6366              ldrphl          macro
  55+ 6366 ~                            ld      (RP_Pointer),hl
  56+ 6366                              endm
  57+ 6366
  58+ 6366              //  ______________________________________________________________________
  59+ 6366              //
  60+ 6366              //  Inner interpreter next-address pointer. This is 2T-state faster than "jp address"
  61+ 6366              next            macro
  62+ 6366 ~                            jp      (ix)
  63+ 6366                              endm
  64+ 6366
  65+ 6366              psh1            macro
  66+ 6366 ~                            push    hl
  67+ 6366 ~                            jp      (ix)
  68+ 6366                              endm
  69+ 6366
  70+ 6366              psh2            macro
  71+ 6366 ~                            push    de
  72+ 6366 ~                            push    hl
  73+ 6366 ~                            jp      (ix)
  74+ 6366                              endm
  75+ 6366
  76+ 6366              //  ______________________________________________________________________
  77+ 6366              //
  78+ 6366              // Bit constants in length-byte
  79+ 6366
  80+ 6366              SMUDGE_BIT      equ     %00100000               // $20
  81+ 6366              IMMEDIATE_BIT   equ     %01000000               // $40
  82+ 6366              END_BIT         equ     %10000000               // $80
  83+ 6366
  84+ 6366
  85+ 6366              //  ______________________________________________________________________
  86+ 6366              //
  87+ 6366              //  To create Forth words using this (nice) Assembler, we have to use the two following
  88+ 6366              //  pointers
  89+ 6366              temp_NFA        defl    0
  90+ 6366              last_NFA        defl    0
  91+ 6366              len_NFA         defl    0
  92+ 6366
  93+ 6366              is_code         equ     0                   // so the direct machine-code starts at CFA
  94+ 6366              is_normal       equ     0                   // so the direct machine-code starts at CFA
  95+ 6366              is_immediate    equ     IMMEDIATE_BIT       // $40 - the definition is IMMEDIATE.
  96+ 6366
  97+ 6366              //  ______________________________________________________________________
  98+ 6366              //
  99+ 6366              //  Create a new "low-level" definition
 100+ 6366              //  This macro is used in the form  Create FORTH_NAME,n,"forth_name"
 101+ 6366              //  to create a new Forth Dictionary entry the same way Forth itself would do.
 102+ 6366              //  A word begins with a Length-Byte in range 1-31. Top 3 msb are used as flags
 103+ 6366              //  see SMUDGE_BIT and IMMEDIATE_BIT constant above.
 104+ 6366              //  It is followed by the Name of the word, i.e. a string expressed in 7-bit Ascii.
 105+ 6366              //  The last character of the Name must have the msb set to signal the end of it (END_BIT)
 106+ 6366              //  This macro acts much like the standard Forth definition CREATE
 107+ 6366
 108+ 6366              New_Def         macro   label, namec, runcode, bits
 109+ 6366 ~            temp_NFA        defl    $                   // save this NFA address to temp_NFA
 110+ 6366 ~
 111+ 6366 ~                            // dummy db directives used to calculate length of namec
 112+ 6366 ~                            db      namec
 113+ 6366 ~            len_NFA         defl    $ - temp_NFA
 114+ 6366 ~                            org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 115+ 6366 ~
 116+ 6366 ~                            db      len_NFA | END_BIT | bits  // The start of NFA must have msb set to signal the beginning of the sounted string
 117+ 6366 ~                            db      namec               // name string in 7-bit ascii, but
 118+ 6366 ~                            org     $-1                 // alter last byte of Name just above to set
 119+ 6366 ~                            db      {b $} | END_BIT     // msb as name end
 120+ 6366 ~
 121+ 6366 ~                            dw      last_NFA            // Link to previous definition Name
 122+ 6366 ~            label:          if runcode != 0 ; ok        // This is the start address of the direct jp(hl)
 123+ 6366 ~                            dw      runcode ; ok        // for primitive definitions  actual code
 124+ 6366 ~                            else
 125+ 6366 ~                            dw      $ + 2   ; ok        // is pointed by CFA
 126+ 6366 ~                            endif           ; ok        // for other definitions it "points" the correct handler
 127+ 6366 ~                            // Use of "; ok" to suppress "warning[fwdref]"
 128+ 6366 ~
 129+ 6366 ~            last_NFA        defl    temp_NFA            // keep track of NFA saved above
 130+ 6366                              endm
 131+ 6366
 132+ 6366              //  ______________________________________________________________________
 133+ 6366              //
 134+ 6366              // Create a "constant"
 135+ 6366              // The constant value is compiled in first PFA cell
 136+ 6366              Constant_Def    macro   label, namec, constant_value
 137+ 6366 ~                            New_Def  label, namec, Constant_Ptr, is_normal
 138+ 6366 ~                            dw      constant_value
 139+ 6366                              endm
 140+ 6366
 141+ 6366              //  ______________________________________________________________________
 142+ 6366              //
 143+ 6366              // Create a "variable"
 144+ 6366              // The when invoked, a variable returns a pointer, the address of first PFA cell
 145+ 6366              // this allow creation of "variables" which content is  of any length
 146+ 6366              Variable_Def    macro   label, namec, initial_value
 147+ 6366 ~                            New_Def  label, namec, Variable_Ptr, is_normal
 148+ 6366 ~                            dw      initial_value
 149+ 6366                              endm
 150+ 6366
 151+ 6366              //  ______________________________________________________________________
 152+ 6366              //
 153+ 6366              // Create a "user"
 154+ 6366              // It uses a single byte as offset to calculate the address of the variable
 155+ 6366              User_Def        macro   label, namec, offset_value
 156+ 6366 ~                            New_Def  label, namec, User_Ptr, is_normal
 157+ 6366 ~                            db      offset_value
 158+ 6366                              endm
 159+ 6366
 160+ 6366              //  ______________________________________________________________________
 161+ 6366              //
 162+ 6366              // Create a "colon-definition"
 163+ 6366              // The CFA contains a small routine i.e. "call Enter_Ptr".
 164+ 6366              // The PFA, three bytes later, contains the actual Forth definition
 165+ 6366              Colon_Def       macro   label, namec, bits
 166+ 6366 ~                            New_Def  label, namec, Enter_Ptr, bits ; ok
 167+ 6366                              endm
 168+ 6366
 169+ 6366              //  ______________________________________________________________________
 170+ 6366              //
 171+ 6366
 172+ 6366              S0_system:      equ     $D0E8               // Address of top of Calc Stack
 173+ 6366              TIB_system      equ     $D0E8               // TIB grows upwards, Return-Stack downward.
 174+ 6366              R0_system:      equ     $D188               // Address of top of Return Stack. This is S0 + $00A0
 175+ 6366              USER_system:    equ     $D188               // User variables zone.
 176+ 6366              FIRST_system:   equ     $D1E4               // Address of first BUFFER
 177+ 6366              LIMIT_system:   equ     $E000               // Address of first byte beyond last BUFFER
 178+ 6366
# file closed: C:\Zx\CSpect\Projects\vForth15_INDIRECT/source/system.asm
 109  6366                              include "L0.asm"
# file opened: C:\Zx\CSpect\Projects\vForth15_INDIRECT/source/L0.asm
   1+ 6366              //  ______________________________________________________________________
   2+ 6366              //
   3+ 6366              //  L0.asm
   4+ 6366              //
   5+ 6366              //  Origin-Area and Level-0 definitions
   6+ 6366              //  ______________________________________________________________________
   7+ 6366
   8+ 6366
   9+ 6366              Cold_origin:
  10+ 6366 A7                           and     a
  11+ 6367 C3 37 79                     jp      ColdRoutine
  12+ 636A              Warm_origin:
  13+ 636A 37                           scf
  14+ 636B C3 37 79                     jp      WarmRoutine
  15+ 636E
  16+ 636E              // +008
  17+ 636E E6 D0        SP_Basic:       dw      $D0E6               // These are bits with some "standard" meaning... 0101
  18+ 6370
  19+ 6370              // +00A
  20+ 6370 00 0E                        dw      $0E00
  21+ 6372
  22+ 6372              // +00C
  23+ 6372 18 87        Latest_origin:  dw      Latest_Definition   // Latest word (used in Cold_Start)
  24+ 6374
  25+ 6374              // +00E
  26+ 6374 0C 00        DEL_Char_Ptr:   dw      $000C               // This is the characther used as "Back-Space"
  27+ 6376
  28+ 6376              // +010
  29+ 6376 50 B2        CPU_Id          dw      $B250               // Z80 expressed in base 36
  30+ 6378
  31+ 6378              // +012
  32+ 6378 E8 D0        S0_origin:      dw      S0_system
  33+ 637A 88 D1        R0_origin:      dw      R0_system
  34+ 637C E8 D0        TIB_origin:     dw      TIB_system
  35+ 637E 1F 00        WIDTH_origin:   dw      31
  36+ 6380 01 00        WARNING_origin: dw      1
  37+ 6382 5E 87        FENCE_origin:   dw      Fence_Word
  38+ 6384 5E 87        DP_origin       dw      Fence_Word
  39+ 6386 45 78        VOCLINK_origin: dw      Voclink_Ptr
  40+ 6388 E4 D1                        dw      FIRST_system
  41+ 638A 00 E0                        dw      LIMIT_system
  42+ 638C
  43+ 638C              // +026
  44+ 638C 8F           Block_Face:     db      SOLIDBLOCK_CHAR     // Caps-Lock   Cursor face
  45+ 638D 8C           Half_Face:      db      HALFBLOCK_CHAR      // Caps-unlock Cursor face
  46+ 638E 5F           Underscore_Face:db      UNDERSCORE_CHAR     // Underscore  Cursor face
  47+ 638F 00                           db      0
  48+ 6390
  49+ 6390              // +02A
  50+ 6390 00 00        IX_Echo:        dw      $0000               // Echo IX after NextOS call
  51+ 6392
  52+ 6392              // +02C
  53+ 6392 00 00        SP_Saved:       dw      $0000               // Saved SP dufing NextOS call
  54+ 6394
  55+ 6394              // +02E
  56+ 6394 88 D1        USER_Pointer:   dw      USER_system
  57+ 6396
  58+ 6396              // +030
  59+ 6396 88 D1        RP_Pointer:     dw      $d188 // R0_system
  60+ 6398
  61+ 6398              // +32
  62+ 6398              // SP_Basic        dw      0
  63+ 6398
  64+ 6398
  65+ 6398              //  ______________________________________________________________________
  66+ 6398
  67+ 6398              // from this point we can use LDHLRP and LDRPHL Assembler macros
  68+ 6398              // instead of their equivalent long sequences.
  69+ 6398
  70+ 6398              //  ______________________________________________________________________
  71+ 6398
  72+ 6398              // address for "next" - inner interpreter
  73+ 6398              // This address must always be pointed by IX
  74+ 6398              // "next" macro simply does a  jp(ix)  instruction
  75+ 6398
  76+ 6398              // Psh2_Ptr:       push    de
  77+ 6398              // Psh1_Ptr:       push    hl
  78+ 6398
  79+ 6398              Next_Ptr:       // This address must always be kept in IX: "next" relies on that
  80+ 6398
  81+ 6398                              if ( 1 == DEBUGGING )
  82+ 6398 ~                            ld      hl, Next_Breakpoint_1
  83+ 6398 ~                            and     a
  84+ 6398 ~                            sbc     hl, bc
  85+ 6398 ~                            jr      nz, Next_Continue
  86+ 6398 ~                            nop // This is where you have to put a real breakpoint to intercept BC values...
  87+ 6398                              endif
  88+ 6398
  89+ 6398              Next_Continue:
  90+ 6398 0A                           ld      a, (bc)
  91+ 6399 03                           inc     bc
  92+ 639A 6F                           ld      l, a
  93+ 639B 0A                           ld      a, (bc)
  94+ 639C 03                           inc     bc
  95+ 639D 67                           ld      h, a                // hl contains a CFA (xt) of word being executed
  96+ 639E
  97+ 639E              // Execute xt i.e. CFA held in HL
  98+ 639E              Exec_Ptr:
  99+ 639E 5E                           ld      e, (hl)
 100+ 639F 23                           inc     hl
 101+ 63A0 56                           ld      d, (hl)
 102+ 63A1 EB                           ex      de, hl
 103+ 63A2 E9                           jp      (hl)                // and jump to it
 104+ 63A3                                                          // there you'll find the real code or a CALL to a ;code part
 105+ 63A3
 106+ 63A3              //  ______________________________________________________________________
 107+ 63A3              //
 108+ 63A3              // lit          -- x
 109+ 63A3              // puts on top of stack the value of the following word.
 110+ 63A3              // it is compiled in colon definition before a literal number
 111+ 63A3
 112+ 63A3                              New_Def  LIT, "LIT", is_code, is_normal
 112+ 63A3             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 112+ 63A3             >
 112+ 63A3             >                // dummy db directives used to calculate length of namec
 112+ 63A3 4C 49 54    >                db      "LIT"
 112+ 63A6             >len_NFA         defl    $ - temp_NFA
 112+ 63A6             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 112+ 63A3             >
 112+ 63A3 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 112+ 63A4 4C 49 54    >                db      "LIT"               // name string in 7-bit ascii, but
 112+ 63A7             >                org     $-1                 // alter last byte of Name just above to set
 112+ 63A6 D4          >                db      {b $} | END_BIT     // msb as name end
 112+ 63A7             >
 112+ 63A7 00 00       >                dw      last_NFA            // Link to previous definition Name
 112+ 63A9             >LIT:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 112+ 63A9 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
 112+ 63A9             >                else
 112+ 63A9 AB 63       >                dw      $ + 2   ; ok        // is pointed by CFA
 112+ 63AB             >                endif           ; ok        // for other definitions it "points" the correct handler
 112+ 63AB             >                // Use of "; ok" to suppress "warning[fwdref]"
 112+ 63AB             >
 112+ 63AB             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 113+ 63AB
 114+ 63AB 0A                           ld      a, (bc)
 115+ 63AC 03                           inc     bc
 116+ 63AD 6F                           ld      l, a
 117+ 63AE 0A                           ld      a, (bc)
 118+ 63AF 03                           inc     bc
 119+ 63B0 67                           ld      h, a
 120+ 63B1                              psh1
 120+ 63B1 E5          >                push    hl
 120+ 63B2 DD E9       >                jp      (ix)
 121+ 63B4
 122+ 63B4              //  ______________________________________________________________________
 123+ 63B4              //
 124+ 63B4              // execute      i*x xt -- j*x
 125+ 63B4              // execution token. usually xt is given by CFA
 126+ 63B4
 127+ 63B4                              New_Def  EXECUTE, "EXECUTE", is_code, is_normal
 127+ 63B4             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 127+ 63B4             >
 127+ 63B4             >                // dummy db directives used to calculate length of namec
 127+ 63B4 45 58 45 43 >                db      "EXECUTE"
 127+ 63B8 55 54 45    >
 127+ 63BB             >len_NFA         defl    $ - temp_NFA
 127+ 63BB             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 127+ 63B4             >
 127+ 63B4 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 127+ 63B5 45 58 45 43 >                db      "EXECUTE"               // name string in 7-bit ascii, but
 127+ 63B9 55 54 45    >
 127+ 63BC             >                org     $-1                 // alter last byte of Name just above to set
 127+ 63BB C5          >                db      {b $} | END_BIT     // msb as name end
 127+ 63BC             >
 127+ 63BC A3 63       >                dw      last_NFA            // Link to previous definition Name
 127+ 63BE             >EXECUTE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 127+ 63BE ~           >                dw      runcode ; ok        // for primitive definitions  actual code
 127+ 63BE             >                else
 127+ 63BE C0 63       >                dw      $ + 2   ; ok        // is pointed by CFA
 127+ 63C0             >                endif           ; ok        // for other definitions it "points" the correct handler
 127+ 63C0             >                // Use of "; ok" to suppress "warning[fwdref]"
 127+ 63C0             >
 127+ 63C0             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 128+ 63C0 E1                           pop     hl
 129+ 63C1 18 DB                        jr      Exec_Ptr
 130+ 63C3
 131+ 63C3
 132+ 63C3              //  ______________________________________________________________________
 133+ 63C3              //
 134+ 63C3              // (+loop)       --
 135+ 63C3              // compiled by +LOOP. it uses the top two values of return-stack to
 136+ 63C3              // keep track of index and limit, they are accessed via I and I'
 137+ 63C3                              New_Def C_PLOOP, "(+LOOP)", is_code, is_normal
 137+ 63C3             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 137+ 63C3             >
 137+ 63C3             >                // dummy db directives used to calculate length of namec
 137+ 63C3 28 2B 4C 4F >                db      "(+LOOP)"
 137+ 63C7 4F 50 29    >
 137+ 63CA             >len_NFA         defl    $ - temp_NFA
 137+ 63CA             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 137+ 63C3             >
 137+ 63C3 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 137+ 63C4 28 2B 4C 4F >                db      "(+LOOP)"               // name string in 7-bit ascii, but
 137+ 63C8 4F 50 29    >
 137+ 63CB             >                org     $-1                 // alter last byte of Name just above to set
 137+ 63CA A9          >                db      {b $} | END_BIT     // msb as name end
 137+ 63CB             >
 137+ 63CB B4 63       >                dw      last_NFA            // Link to previous definition Name
 137+ 63CD             >C_PLOOP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 137+ 63CD ~           >                dw      runcode ; ok        // for primitive definitions  actual code
 137+ 63CD             >                else
 137+ 63CD CF 63       >                dw      $ + 2   ; ok        // is pointed by CFA
 137+ 63CF             >                endif           ; ok        // for other definitions it "points" the correct handler
 137+ 63CF             >                // Use of "; ok" to suppress "warning[fwdref]"
 137+ 63CF             >
 137+ 63CF             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 138+ 63CF
 139+ 63CF              Loop_Ptr:
 140+ 63CF D9                           exx
 141+ 63D0                              ldhlrp                      // ld hl,rp macro 30h +Origin
 141+ 63D0 2A 96 63    >                ld      hl,(RP_Pointer)
 142+ 63D3
 143+ 63D3 C1                           pop     bc                  // bc is increment
 144+ 63D4
 145+ 63D4 5E                           ld      e, (hl)             // hl points to loop-index, add increment to it.
 146+ 63D5 7B                           ld      a, e                // de keeps index before increment.
 147+ 63D6 81                           add     c
 148+ 63D7 77                           ld      (hl), a
 149+ 63D8 23                           inc     hl
 150+ 63D9 56                           ld      d, (hl)
 151+ 63DA 7A                           ld      a, d
 152+ 63DB 88                           adc     b
 153+ 63DC 77                           ld      (hl),a
 154+ 63DD 23                           inc     hl
 155+ 63DE
 156+ 63DE 7B                           ld      a, e
 157+ 63DF 96                           sub     (hl)
 158+ 63E0 5F                           ld      e, a
 159+ 63E1 23                           inc     hl
 160+ 63E2 7A                           ld      a, d
 161+ 63E3 9E                           sbc     (hl)
 162+ 63E4 57                           ld      d, a                // DE is index - limit : limit is the "new zero"
 163+ 63E5
 164+ 63E5 EB                           ex      de, hl
 165+ 63E6 09                           add     hl, bc
 166+ 63E7
 167+ 63E7 CB 78                        bit     7, b                // keep increment-sign just before overwriting d
 168+ 63E9 28 01                        jr      z, Loop_NegativeIncrement
 169+ 63EB 3F                               ccf
 170+ 63EC              Loop_NegativeIncrement:
 171+ 63EC 38 03                        jr      c, Loop_Endif
 172+ 63EE D9                               exx
 173+ 63EF 18 26                            jr      Branch_Ptr      // perform branch consuming following cell
 174+ 63F1              Loop_Endif:
 175+ 63F1 EB                           ex      de, hl
 176+ 63F2 23                           inc     hl
 177+ 63F3                              ldrphl                      // ld rp,hl macro 30h +Origin
 177+ 63F3 22 96 63    >                ld      (RP_Pointer),hl
 178+ 63F6 D9                           exx
 179+ 63F7 03                           inc     bc                  // skip branch-style offset
 180+ 63F8 03                           inc     bc
 181+ 63F9                              next
 181+ 63F9 DD E9       >                jp      (ix)
 182+ 63FB
 183+ 63FB              //  ______________________________________________________________________
 184+ 63FB              //
 185+ 63FB              // (loop)       n --
 186+ 63FB              // same as (LOOP) but index is incremented by 1
 187+ 63FB              // compiled by LOOP.
 188+ 63FB                              New_Def C_LOOP, "(LOOP)", is_code, is_normal
 188+ 63FB             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 188+ 63FB             >
 188+ 63FB             >                // dummy db directives used to calculate length of namec
 188+ 63FB 28 4C 4F 4F >                db      "(LOOP)"
 188+ 63FF 50 29       >
 188+ 6401             >len_NFA         defl    $ - temp_NFA
 188+ 6401             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 188+ 63FB             >
 188+ 63FB 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 188+ 63FC 28 4C 4F 4F >                db      "(LOOP)"               // name string in 7-bit ascii, but
 188+ 6400 50 29       >
 188+ 6402             >                org     $-1                 // alter last byte of Name just above to set
 188+ 6401 A9          >                db      {b $} | END_BIT     // msb as name end
 188+ 6402             >
 188+ 6402 C3 63       >                dw      last_NFA            // Link to previous definition Name
 188+ 6404             >C_LOOP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 188+ 6404 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
 188+ 6404             >                else
 188+ 6404 06 64       >                dw      $ + 2   ; ok        // is pointed by CFA
 188+ 6406             >                endif           ; ok        // for other definitions it "points" the correct handler
 188+ 6406             >                // Use of "; ok" to suppress "warning[fwdref]"
 188+ 6406             >
 188+ 6406             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 189+ 6406 ED 8A 00 01                  push    1
 190+ 640A 18 C3                        jr      Loop_Ptr
 191+ 640C
 192+ 640C              //  ______________________________________________________________________
 193+ 640C              //
 194+ 640C              // branch       --
 195+ 640C              // unconditional branch in colon definition using the following cell as an offset from current IP value
 196+ 640C              // compiled by ELSE, AGAIN and some other immediate words
 197+ 640C
 198+ 640C                              New_Def BRANCH, "BRANCH", is_code, is_normal
 198+ 640C             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 198+ 640C             >
 198+ 640C             >                // dummy db directives used to calculate length of namec
 198+ 640C 42 52 41 4E >                db      "BRANCH"
 198+ 6410 43 48       >
 198+ 6412             >len_NFA         defl    $ - temp_NFA
 198+ 6412             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 198+ 640C             >
 198+ 640C 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 198+ 640D 42 52 41 4E >                db      "BRANCH"               // name string in 7-bit ascii, but
 198+ 6411 43 48       >
 198+ 6413             >                org     $-1                 // alter last byte of Name just above to set
 198+ 6412 C8          >                db      {b $} | END_BIT     // msb as name end
 198+ 6413             >
 198+ 6413 FB 63       >                dw      last_NFA            // Link to previous definition Name
 198+ 6415             >BRANCH:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 198+ 6415 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
 198+ 6415             >                else
 198+ 6415 17 64       >                dw      $ + 2   ; ok        // is pointed by CFA
 198+ 6417             >                endif           ; ok        // for other definitions it "points" the correct handler
 198+ 6417             >                // Use of "; ok" to suppress "warning[fwdref]"
 198+ 6417             >
 198+ 6417             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 199+ 6417              Branch_Ptr:
 200+ 6417 60                           ld      h, b
 201+ 6418 69                           ld      l, c
 202+ 6419 5E                           ld      e, (hl)
 203+ 641A 23                           inc     hl
 204+ 641B 56                           ld      d, (hl)
 205+ 641C 2B                           dec     hl                  // offset is calculated from current IP
 206+ 641D 19                           add     hl, de
 207+ 641E 4D                           ld      c, l
 208+ 641F 44                           ld      b, h
 209+ 6420                              next
 209+ 6420 DD E9       >                jp      (ix)
 210+ 6422
 211+ 6422
 212+ 6422              //  ______________________________________________________________________
 213+ 6422              //
 214+ 6422              // 0branch      f --
 215+ 6422              // conditional branch if the top-of-stack is ZERO or FALSE.
 216+ 6422              // compiled by IF, UNTIL and some other immediate words
 217+ 6422
 218+ 6422                              New_Def ZBRANCH, "0BRANCH", is_code, is_normal
 218+ 6422             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 218+ 6422             >
 218+ 6422             >                // dummy db directives used to calculate length of namec
 218+ 6422 30 42 52 41 >                db      "0BRANCH"
 218+ 6426 4E 43 48    >
 218+ 6429             >len_NFA         defl    $ - temp_NFA
 218+ 6429             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 218+ 6422             >
 218+ 6422 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 218+ 6423 30 42 52 41 >                db      "0BRANCH"               // name string in 7-bit ascii, but
 218+ 6427 4E 43 48    >
 218+ 642A             >                org     $-1                 // alter last byte of Name just above to set
 218+ 6429 C8          >                db      {b $} | END_BIT     // msb as name end
 218+ 642A             >
 218+ 642A 0C 64       >                dw      last_NFA            // Link to previous definition Name
 218+ 642C             >ZBRANCH:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 218+ 642C ~           >                dw      runcode ; ok        // for primitive definitions  actual code
 218+ 642C             >                else
 218+ 642C 2E 64       >                dw      $ + 2   ; ok        // is pointed by CFA
 218+ 642E             >                endif           ; ok        // for other definitions it "points" the correct handler
 218+ 642E             >                // Use of "; ok" to suppress "warning[fwdref]"
 218+ 642E             >
 218+ 642E             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 219+ 642E              ZBranch_Ptr:
 220+ 642E E1                           pop     hl
 221+ 642F 7D                           ld      a, l
 222+ 6430 B4                           or      h
 223+ 6431 28 E4                        jr      z, Branch_Ptr
 224+ 6433 03                           inc     bc                  // if not branch, skip offset cell.
 225+ 6434 03                           inc     bc
 226+ 6435                              next
 226+ 6435 DD E9       >                jp      (ix)
 227+ 6437
 228+ 6437              //  ______________________________________________________________________
 229+ 6437              //
 230+ 6437              // (leave)        --
 231+ 6437              // compiled by LEAVE
 232+ 6437              // this forces to exit from loop and jump past
 233+ 6437                              New_Def C_LEAVE, "(LEAVE)", is_code, is_normal
 233+ 6437             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 233+ 6437             >
 233+ 6437             >                // dummy db directives used to calculate length of namec
 233+ 6437 28 4C 45 41 >                db      "(LEAVE)"
 233+ 643B 56 45 29    >
 233+ 643E             >len_NFA         defl    $ - temp_NFA
 233+ 643E             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 233+ 6437             >
 233+ 6437 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 233+ 6438 28 4C 45 41 >                db      "(LEAVE)"               // name string in 7-bit ascii, but
 233+ 643C 56 45 29    >
 233+ 643F             >                org     $-1                 // alter last byte of Name just above to set
 233+ 643E A9          >                db      {b $} | END_BIT     // msb as name end
 233+ 643F             >
 233+ 643F 22 64       >                dw      last_NFA            // Link to previous definition Name
 233+ 6441             >C_LEAVE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 233+ 6441 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
 233+ 6441             >                else
 233+ 6441 43 64       >                dw      $ + 2   ; ok        // is pointed by CFA
 233+ 6443             >                endif           ; ok        // for other definitions it "points" the correct handler
 233+ 6443             >                // Use of "; ok" to suppress "warning[fwdref]"
 233+ 6443             >
 233+ 6443             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 234+ 6443
 235+ 6443                              ldhlrp
 235+ 6443 2A 96 63    >                ld      hl,(RP_Pointer)
 236+ 6446 11 04 00                     ld      de, 4
 237+ 6449 19                           add     hl, de
 238+ 644A                              ldrphl
 238+ 644A 22 96 63    >                ld      (RP_Pointer),hl
 239+ 644D
 240+ 644D 18 C8                        jr      Branch_Ptr       // perform branch consuming following cell
 241+ 644F                              next
 241+ 644F DD E9       >                jp      (ix)
 242+ 6451
 243+ 6451              //  ______________________________________________________________________
 244+ 6451              //
 245+ 6451              // (?do)        lim ind --
 246+ 6451              // compiled by ?DO to make a loop checking for lim == ind first
 247+ 6451              // at run-time (?DO) must be followed by a BRANCH offset
 248+ 6451              // used to skip the loop if lim == ind
 249+ 6451                              New_Def C_Q_DO, "(?DO)", is_code, is_normal
 249+ 6451             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 249+ 6451             >
 249+ 6451             >                // dummy db directives used to calculate length of namec
 249+ 6451 28 3F 44 4F >                db      "(?DO)"
 249+ 6455 29          >
 249+ 6456             >len_NFA         defl    $ - temp_NFA
 249+ 6456             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 249+ 6451             >
 249+ 6451 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 249+ 6452 28 3F 44 4F >                db      "(?DO)"               // name string in 7-bit ascii, but
 249+ 6456 29          >
 249+ 6457             >                org     $-1                 // alter last byte of Name just above to set
 249+ 6456 A9          >                db      {b $} | END_BIT     // msb as name end
 249+ 6457             >
 249+ 6457 37 64       >                dw      last_NFA            // Link to previous definition Name
 249+ 6459             >C_Q_DO:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 249+ 6459 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
 249+ 6459             >                else
 249+ 6459 5B 64       >                dw      $ + 2   ; ok        // is pointed by CFA
 249+ 645B             >                endif           ; ok        // for other definitions it "points" the correct handler
 249+ 645B             >                // Use of "; ok" to suppress "warning[fwdref]"
 249+ 645B             >
 249+ 645B             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 250+ 645B D1                           pop     de                  // de has the index
 251+ 645C E1                           pop     hl                  // hl has the limit
 252+ 645D E5                           push    hl
 253+ 645E D5                           push    de
 254+ 645F A7                           and     a                   // reset carry flag
 255+ 6460 ED 52                        sbc     hl, de              // compute limit - index
 256+ 6462 20 04                        jr      nz, Do_Ptr          // if zero then don't even begin loop
 257+ 6464 D1                               pop     de
 258+ 6465 E1                               pop     hl
 259+ 6466
 260+ 6466 18 AF                            jr      Branch_Ptr          // perform branch consuming following cell
 261+ 6468              Do_Ptr:
 262+ 6468                              ldhlrp                      // prepare RP
 262+ 6468 2A 96 63    >                ld      hl,(RP_Pointer)
 263+ 646B 2B                           dec     hl
 264+ 646C 2B                           dec     hl
 265+ 646D 2B                           dec     hl
 266+ 646E 2B                           dec     hl
 267+ 646F                              ldrphl
 267+ 646F 22 96 63    >                ld      (RP_Pointer),hl
 268+ 6472
 269+ 6472                              // store index as top RP
 270+ 6472 D1                           pop     de
 271+ 6473 73                           ld      (hl), e
 272+ 6474 23                           inc     hl
 273+ 6475 72                           ld      (hl), d
 274+ 6476 23                           inc     hl
 275+ 6477                              // stores lim as second from top RP
 276+ 6477 D1                           pop     de
 277+ 6478 73                           ld      (hl), e
 278+ 6479 23                           inc     hl
 279+ 647A 72                           ld      (hl), d
 280+ 647B
 281+ 647B                              // skip branch-style offseet
 282+ 647B 03                           inc     bc
 283+ 647C 03                           inc     bc
 284+ 647D                              next
 284+ 647D DD E9       >                jp      (ix)
 285+ 647F
 286+ 647F              //  ______________________________________________________________________
 287+ 647F              //
 288+ 647F              // (do)        lim ind --
 289+ 647F              // compiled by DO to make a loop checking for lim == ind first
 290+ 647F              // this is a simpler version of (?DO)
 291+ 647F                              New_Def C_DO, "(DO)", is_code, is_normal
 291+ 647F             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 291+ 647F             >
 291+ 647F             >                // dummy db directives used to calculate length of namec
 291+ 647F 28 44 4F 29 >                db      "(DO)"
 291+ 6483             >len_NFA         defl    $ - temp_NFA
 291+ 6483             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 291+ 647F             >
 291+ 647F 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 291+ 6480 28 44 4F 29 >                db      "(DO)"               // name string in 7-bit ascii, but
 291+ 6484             >                org     $-1                 // alter last byte of Name just above to set
 291+ 6483 A9          >                db      {b $} | END_BIT     // msb as name end
 291+ 6484             >
 291+ 6484 51 64       >                dw      last_NFA            // Link to previous definition Name
 291+ 6486             >C_DO:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 291+ 6486 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
 291+ 6486             >                else
 291+ 6486 88 64       >                dw      $ + 2   ; ok        // is pointed by CFA
 291+ 6488             >                endif           ; ok        // for other definitions it "points" the correct handler
 291+ 6488             >                // Use of "; ok" to suppress "warning[fwdref]"
 291+ 6488             >
 291+ 6488             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 292+ 6488 0B                           dec     bc                  // prepare IP beforehand
 293+ 6489 0B                           dec     bc                  // to balance the two final inc bc in (?do)
 294+ 648A 18 DC                        jr      Do_Ptr
 295+ 648C
 296+ 648C              //  ______________________________________________________________________
 297+ 648C              //
 298+ 648C              // i            -- n
 299+ 648C              // used between DO and LOOP or between DO e +LOOP to copy on top of stack
 300+ 648C              // the current value of the index-loop
 301+ 648C                              New_Def I, "I", is_code, is_normal
 301+ 648C             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 301+ 648C             >
 301+ 648C             >                // dummy db directives used to calculate length of namec
 301+ 648C 49          >                db      "I"
 301+ 648D             >len_NFA         defl    $ - temp_NFA
 301+ 648D             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 301+ 648C             >
 301+ 648C 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 301+ 648D 49          >                db      "I"               // name string in 7-bit ascii, but
 301+ 648E             >                org     $-1                 // alter last byte of Name just above to set
 301+ 648D C9          >                db      {b $} | END_BIT     // msb as name end
 301+ 648E             >
 301+ 648E 7F 64       >                dw      last_NFA            // Link to previous definition Name
 301+ 6490             >I:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 301+ 6490 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
 301+ 6490             >                else
 301+ 6490 92 64       >                dw      $ + 2   ; ok        // is pointed by CFA
 301+ 6492             >                endif           ; ok        // for other definitions it "points" the correct handler
 301+ 6492             >                // Use of "; ok" to suppress "warning[fwdref]"
 301+ 6492             >
 301+ 6492             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 302+ 6492              I_Ptr:
 303+ 6492
 304+ 6492                              ldhlrp
 304+ 6492 2A 96 63    >                ld      hl,(RP_Pointer)
 305+ 6495              I_Ptr_prime
 306+ 6495 5E                           ld      e, (hl)
 307+ 6496 23                           inc     hl
 308+ 6497 56                           ld      d, (hl)
 309+ 6498 D5                           push    de
 310+ 6499                              next
 310+ 6499 DD E9       >                jp      (ix)
 311+ 649B
 312+ 649B              //  ______________________________________________________________________
 313+ 649B              //
 314+ 649B              // i'            -- n
 315+ 649B              // used between DO and LOOP or between DO e +LOOP to copy on top of stack
 316+ 649B              // the limit of the index-loop
 317+ 649B
 318+ 649B                              New_Def II, "I'", is_code, is_normal
 318+ 649B             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 318+ 649B             >
 318+ 649B             >                // dummy db directives used to calculate length of namec
 318+ 649B 49 27       >                db      "I'"
 318+ 649D             >len_NFA         defl    $ - temp_NFA
 318+ 649D             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 318+ 649B             >
 318+ 649B 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 318+ 649C 49 27       >                db      "I'"               // name string in 7-bit ascii, but
 318+ 649E             >                org     $-1                 // alter last byte of Name just above to set
 318+ 649D A7          >                db      {b $} | END_BIT     // msb as name end
 318+ 649E             >
 318+ 649E 8C 64       >                dw      last_NFA            // Link to previous definition Name
 318+ 64A0             >II:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 318+ 64A0 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
 318+ 64A0             >                else
 318+ 64A0 A2 64       >                dw      $ + 2   ; ok        // is pointed by CFA
 318+ 64A2             >                endif           ; ok        // for other definitions it "points" the correct handler
 318+ 64A2             >                // Use of "; ok" to suppress "warning[fwdref]"
 318+ 64A2             >
 318+ 64A2             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 319+ 64A2                              ldhlrp
 319+ 64A2 2A 96 63    >                ld      hl,(RP_Pointer)
 320+ 64A5 23                           inc     hl
 321+ 64A6 23                           inc     hl
 322+ 64A7 18 EC                        jr      I_Ptr_prime
 323+ 64A9
 324+ 64A9
 325+ 64A9              //  ______________________________________________________________________
 326+ 64A9              //
 327+ 64A9              // digit        c n -- u 1  |  0
 328+ 64A9              // convert a character c using base n
 329+ 64A9              // returns a unsigned number and a true flag
 330+ 64A9              // or just a false flag if the conversion fails
 331+ 64A9                              New_Def DIGIT, "DIGIT", is_code, is_normal
 331+ 64A9             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 331+ 64A9             >
 331+ 64A9             >                // dummy db directives used to calculate length of namec
 331+ 64A9 44 49 47 49 >                db      "DIGIT"
 331+ 64AD 54          >
 331+ 64AE             >len_NFA         defl    $ - temp_NFA
 331+ 64AE             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 331+ 64A9             >
 331+ 64A9 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 331+ 64AA 44 49 47 49 >                db      "DIGIT"               // name string in 7-bit ascii, but
 331+ 64AE 54          >
 331+ 64AF             >                org     $-1                 // alter last byte of Name just above to set
 331+ 64AE D4          >                db      {b $} | END_BIT     // msb as name end
 331+ 64AF             >
 331+ 64AF 9B 64       >                dw      last_NFA            // Link to previous definition Name
 331+ 64B1             >DIGIT:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 331+ 64B1 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
 331+ 64B1             >                else
 331+ 64B1 B3 64       >                dw      $ + 2   ; ok        // is pointed by CFA
 331+ 64B3             >                endif           ; ok        // for other definitions it "points" the correct handler
 331+ 64B3             >                // Use of "; ok" to suppress "warning[fwdref]"
 331+ 64B3             >
 331+ 64B3             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 332+ 64B3 E1                           pop     hl                  // l has the base
 333+ 64B4 D1                           pop     de                  // e has the digit
 334+ 64B5 7B                           ld      a, e
 335+ 64B6 FE 60                        cp      $60                 // check if lowercase
 336+ 64B8 38 02                        jr      c, Digit_Uppercase
 337+ 64BA D6 20                            sub     $20                 // quick'n'dirty uppercase
 338+ 64BC              Digit_Uppercase:
 339+ 64BC D6 30                        sub     $30
 340+ 64BE 38 15                        jr      c, Digit_Fail       // fail when character < "0"
 341+ 64C0 FE 0A                            cp      $0A
 342+ 64C2 38 06                            jr      c, Digit_Decimal    // perhaps is not decimal
 343+ 64C4 D6 07                                sub     7                   // try hex and subtract 7
 344+ 64C6 FE 0A                                cp      $0A
 345+ 64C8 38 0B                                jr      c,  Digit_Fail      // it is not hex !
 346+ 64CA
 347+ 64CA              Digit_Decimal:
 348+ 64CA                              // compare digit
 349+ 64CA BD                           cp      l                   // compare with base
 350+ 64CB
 351+ 64CB 30 08                        jr      nc, Digit_Fail      // fail when greater than base
 352+ 64CD 5F                               ld      e, a                // digit is returned as second from TOS
 353+ 64CE 21 01 00                         ld      hl, 1
 354+ 64D1
 355+ 64D1                                  psh2
 355+ 64D1 D5          >                push    de
 355+ 64D2 E5          >                push    hl
 355+ 64D3 DD E9       >                jp      (ix)
 356+ 64D5              Digit_Fail:
 357+ 64D5 21 00 00                     ld      hl, 0
 358+ 64D8                              psh1
 358+ 64D8 E5          >                push    hl
 358+ 64D9 DD E9       >                jp      (ix)
 359+ 64DB
 360+ 64DB              //  ______________________________________________________________________
 361+ 64DB              //
 362+ 64DB              //  parametric uppercase routine
 363+ 64DB              //  depending on the following op-code the routine can be by-passed
 364+ 64DB              //  changing the behaviour of some callers.
 365+ 64DB              //  If it is "ret" then the system is Case-Sensitive
 366+ 64DB              //  If it is "Nop" then the system is Case-Insensitive
 367+ 64DB              //  Only A register is touched.
 368+ 64DB 00           Case_Sensitive: nop                         // Default is case-insensitive.
 369+ 64DC              Case_Upper:
 370+ 64DC FE 61                        cp      LC_A_CHAR           // lower-case "a"
 371+ 64DE D8                           ret     c                   // no change if A < "a"
 372+ 64DF FE 7B                        cp      LC_Z_CHAR + 1       // lower-case "z" + 1
 373+ 64E1 D0                           ret     nc                  // no change if A > "z"
 374+ 64E2 D6 20                        sub     $20                 // Make uppercase if A in ["a".."z"]
 375+ 64E4 C9                           ret
 376+ 64E5
 377+ 64E5              //  ______________________________________________________________________
 378+ 64E5              //
 379+ 64E5              //  caseon      --
 380+ 64E5              // set system case-sensitivity on
 381+ 64E5              // it patches a RET/NOP at the beginning of the uppercase-routine
 382+ 64E5                              New_Def CASEON, "CASEON", is_code, is_normal
 382+ 64E5             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 382+ 64E5             >
 382+ 64E5             >                // dummy db directives used to calculate length of namec
 382+ 64E5 43 41 53 45 >                db      "CASEON"
 382+ 64E9 4F 4E       >
 382+ 64EB             >len_NFA         defl    $ - temp_NFA
 382+ 64EB             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 382+ 64E5             >
 382+ 64E5 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 382+ 64E6 43 41 53 45 >                db      "CASEON"               // name string in 7-bit ascii, but
 382+ 64EA 4F 4E       >
 382+ 64EC             >                org     $-1                 // alter last byte of Name just above to set
 382+ 64EB CE          >                db      {b $} | END_BIT     // msb as name end
 382+ 64EC             >
 382+ 64EC A9 64       >                dw      last_NFA            // Link to previous definition Name
 382+ 64EE             >CASEON:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 382+ 64EE ~           >                dw      runcode ; ok        // for primitive definitions  actual code
 382+ 64EE             >                else
 382+ 64EE F0 64       >                dw      $ + 2   ; ok        // is pointed by CFA
 382+ 64F0             >                endif           ; ok        // for other definitions it "points" the correct handler
 382+ 64F0             >                // Use of "; ok" to suppress "warning[fwdref]"
 382+ 64F0             >
 382+ 64F0             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 383+ 64F0 3E C9                        ld      a, $C9              // "ret"
 384+ 64F2 32 DB 64                     ld      (Case_Sensitive), a
 385+ 64F5                              next
 385+ 64F5 DD E9       >                jp      (ix)
 386+ 64F7
 387+ 64F7              //  ______________________________________________________________________
 388+ 64F7              //
 389+ 64F7              //  caseoff     --
 390+ 64F7              // set system case-sensitivity on
 391+ 64F7              // it patches a RET/NOP at the beginning of the uppercase-routine
 392+ 64F7                              New_Def CASEOFF, "CASEOFF", is_code, is_normal
 392+ 64F7             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 392+ 64F7             >
 392+ 64F7             >                // dummy db directives used to calculate length of namec
 392+ 64F7 43 41 53 45 >                db      "CASEOFF"
 392+ 64FB 4F 46 46    >
 392+ 64FE             >len_NFA         defl    $ - temp_NFA
 392+ 64FE             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 392+ 64F7             >
 392+ 64F7 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 392+ 64F8 43 41 53 45 >                db      "CASEOFF"               // name string in 7-bit ascii, but
 392+ 64FC 4F 46 46    >
 392+ 64FF             >                org     $-1                 // alter last byte of Name just above to set
 392+ 64FE C6          >                db      {b $} | END_BIT     // msb as name end
 392+ 64FF             >
 392+ 64FF E5 64       >                dw      last_NFA            // Link to previous definition Name
 392+ 6501             >CASEOFF:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 392+ 6501 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
 392+ 6501             >                else
 392+ 6501 03 65       >                dw      $ + 2   ; ok        // is pointed by CFA
 392+ 6503             >                endif           ; ok        // for other definitions it "points" the correct handler
 392+ 6503             >                // Use of "; ok" to suppress "warning[fwdref]"
 392+ 6503             >
 392+ 6503             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 393+ 6503 3E 00                        ld      a, $00              // "nop"
 394+ 6505 32 DB 64                     ld      (Case_Sensitive), a
 395+ 6508                              next
 395+ 6508 DD E9       >                jp      (ix)
 396+ 650A
 397+ 650A              //  ______________________________________________________________________
 398+ 650A              //
 399+ 650A              //  upper       c1 -- c1 | c2
 400+ 650A              // character on top of stack is forced to Uppercase.
 401+ 650A                              New_Def UPPER, "UPPER", is_code, is_normal
 401+ 650A             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 401+ 650A             >
 401+ 650A             >                // dummy db directives used to calculate length of namec
 401+ 650A 55 50 50 45 >                db      "UPPER"
 401+ 650E 52          >
 401+ 650F             >len_NFA         defl    $ - temp_NFA
 401+ 650F             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 401+ 650A             >
 401+ 650A 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 401+ 650B 55 50 50 45 >                db      "UPPER"               // name string in 7-bit ascii, but
 401+ 650F 52          >
 401+ 6510             >                org     $-1                 // alter last byte of Name just above to set
 401+ 650F D2          >                db      {b $} | END_BIT     // msb as name end
 401+ 6510             >
 401+ 6510 F7 64       >                dw      last_NFA            // Link to previous definition Name
 401+ 6512             >UPPER:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 401+ 6512 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
 401+ 6512             >                else
 401+ 6512 14 65       >                dw      $ + 2   ; ok        // is pointed by CFA
 401+ 6514             >                endif           ; ok        // for other definitions it "points" the correct handler
 401+ 6514             >                // Use of "; ok" to suppress "warning[fwdref]"
 401+ 6514             >
 401+ 6514             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 402+ 6514 E1                           pop     hl
 403+ 6515 7D                           ld      a, l
 404+ 6516 CD DC 64                     call    Case_Upper
 405+ 6519 6F                           ld      l, a
 406+ 651A
 407+ 651A                              psh1
 407+ 651A E5          >                push    hl
 407+ 651B DD E9       >                jp      (ix)
 408+ 651D
 409+ 651D              //  ______________________________________________________________________
 410+ 651D              //
 411+ 651D              // (find)       addr voc -- ff | cfa b tf
 412+ 651D              // vocabulary search,
 413+ 651D              // - voc is starting word's NFA
 414+ 651D              // - addr is the string to be searched for
 415+ 651D              // On success, it returns the CFA of found word, the first NFA byte
 416+ 651D              // (which contains length and some flags) and a true flag.
 417+ 651D              // On fail, a false flag  (no more: leaves addr unchanged)
 418+ 651D                              New_Def C_FIND, "(FIND)", is_code, is_normal
 418+ 651D             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 418+ 651D             >
 418+ 651D             >                // dummy db directives used to calculate length of namec
 418+ 651D 28 46 49 4E >                db      "(FIND)"
 418+ 6521 44 29       >
 418+ 6523             >len_NFA         defl    $ - temp_NFA
 418+ 6523             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 418+ 651D             >
 418+ 651D 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 418+ 651E 28 46 49 4E >                db      "(FIND)"               // name string in 7-bit ascii, but
 418+ 6522 44 29       >
 418+ 6524             >                org     $-1                 // alter last byte of Name just above to set
 418+ 6523 A9          >                db      {b $} | END_BIT     // msb as name end
 418+ 6524             >
 418+ 6524 0A 65       >                dw      last_NFA            // Link to previous definition Name
 418+ 6526             >C_FIND:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 418+ 6526 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
 418+ 6526             >                else
 418+ 6526 28 65       >                dw      $ + 2   ; ok        // is pointed by CFA
 418+ 6528             >                endif           ; ok        // for other definitions it "points" the correct handler
 418+ 6528             >                // Use of "; ok" to suppress "warning[fwdref]"
 418+ 6528             >
 418+ 6528             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 419+ 6528                                                              // de has dictionary pointer
 420+ 6528 D1                               pop     de
 421+ 6529              Find_VocabularyLoop:
 422+ 6529 E1                               pop     hl                  // string pointer to search for
 423+ 652A E5                               push    hl                  // keep it on stack too for the end.
 424+ 652B 1A                               ld      a, (de)             // save NFA length byte
 425+ 652C 08                               ex      af,af'              // for later use (!)
 426+ 652D 1A                               ld      a, (de)             // reload NFA length byte
 427+ 652E AE                               xor     (hl)                // check if same length
 428+ 652F E6 3F                            and     $3F                 // by resetting 3 high bits (flags)
 429+ 6531                                  // word an text haven't the same length, skip to next vocabulary entry
 430+ 6531 20 2C                            jr      nz, Find_DifferentLenght
 431+ 6533
 432+ 6533              Find_ThisWord:  // begin loop
 433+ 6533 23                                   inc     hl
 434+ 6534 13                                   inc     de
 435+ 6535 1A                                   ld      a, (de)
 436+ 6536                                      // case insensitive option - begin
 437+ 6536 C5                                   push    bc
 438+ 6537 E6 80                                and     $80                 // split A in msb and the rest
 439+ 6539 47                                   ld      b, a
 440+ 653A 1A                                   ld      a, (de)
 441+ 653B E6 7F                                and     $7F                 // ... the rest (lower 7 bits)
 442+ 653D CD DB 64                             call    Case_Sensitive      // uppercase routine
 443+ 6540 4F                                   ld      c, a
 444+ 6541 7E                                   ld      a, (hl)
 445+ 6542 CD DB 64                             call    Case_Sensitive      // uppercase routine
 446+ 6545 A9                                   xor     c
 447+ 6546 A8                                   xor     b
 448+ 6547 C1                                   pop     bc
 449+ 6548                                      // case insensitive option - end
 450+ 6548 87                                   add     a                   // ignore msb during compare
 451+ 6549 20 12                                jr      nz, Find_DidntMatch  // jump if doesn't match (*)
 452+ 654B
 453+ 654B                                  // loop back until last byte msb is found set
 454+ 654B                                  // that bit marks the ending char of this word
 455+ 654B 30 E6                            jr      nc, Find_ThisWord
 456+ 654D
 457+ 654D                                  // match found !
 458+ 654D 21 03 00                             ld      hl, 3               // 3 bytes for CFA offset to skip LFA
 459+ 6550 19                                   add     hl, de
 460+ 6551 E3                                   ex      (sp), hl            // CFA on stack and drop addr
 461+ 6552 08                                   ex      af, af'             // retrieve NFA byte (!)
 462+ 6553 5F                                   ld      e, a
 463+ 6554 16 00                                ld      d, 0
 464+ 6556
 465+ 6556
 466+ 6556 21 FF FF                             ld      hl, -1
 467+ 6559                                      psh2
 467+ 6559 D5          >                push    de
 467+ 655A E5          >                push    hl
 467+ 655B DD E9       >                jp      (ix)
 468+ 655D
 469+ 655D              Find_DidntMatch: // didn't match (*)
 470+ 655D 38 05                            jr      c,  Find_WordEnd   // jump if not end of word (**)
 471+ 655F
 472+ 655F              Find_DifferentLenght:
 473+ 655F                              // consume chars until the end of the word
 474+ 655F                              // that is last byte msb is found set
 475+ 655F 13                               inc     de
 476+ 6560 1A                               ld      a, (de)
 477+ 6561 87                               add     a, a
 478+ 6562 30 FB                        jr      nc, Find_DifferentLenght
 479+ 6564
 480+ 6564              Find_WordEnd:   // word-end  found (**)
 481+ 6564                              // take LFA and use it
 482+ 6564 13                           inc     de
 483+ 6565 EB                           ex      de, hl
 484+ 6566 5E                           ld      e, (hl)
 485+ 6567 23                           inc     hl
 486+ 6568 56                           ld      d, (hl)
 487+ 6569 7A                           ld      a, d
 488+ 656A B3                           or      e
 489+ 656B
 490+ 656B                          // loop until end of vocabulary
 491+ 656B 20 BC                    jr      nz, Find_VocabularyLoop
 492+ 656D
 493+ 656D E1                       pop     hl              // with this, it leaves addr unchanged
 494+ 656E 21 00 00                 ld      hl, FALSE_FLAG
 495+ 6571
 496+ 6571                          psh1
 496+ 6571 E5          >                push    hl
 496+ 6572 DD E9       >                jp      (ix)
 497+ 6574
 498+ 6574              //  ______________________________________________________________________
 499+ 6574              //
 500+ 6574              // enclose      a c -- a  n1 n2 n3
 501+ 6574              // starting from a, using delimiter c, determines the offsets:
 502+ 6574              //   n1   the first character non-delimiter
 503+ 6574              //   n2   the first delimiter after the text
 504+ 6574              //   n3   the first character non enclosed.
 505+ 6574              // This procedure does not go beyond a 'nul' ASCII (0x00) that represents
 506+ 6574              // an uncoditional delimiter.
 507+ 6574              // Examples:
 508+ 6574              //   i:	c  c  x  x  x  c  x	 -- 2  5  6
 509+ 6574              //  ii:	c  c  x  x  x  'nul' -- 2  5  5
 510+ 6574              // iii:	c  c  'nul'          -- 2  3  2
 511+ 6574                              New_Def ENCLOSE, "ENCLOSE", is_code, is_normal
 511+ 6574             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 511+ 6574             >
 511+ 6574             >                // dummy db directives used to calculate length of namec
 511+ 6574 45 4E 43 4C >                db      "ENCLOSE"
 511+ 6578 4F 53 45    >
 511+ 657B             >len_NFA         defl    $ - temp_NFA
 511+ 657B             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 511+ 6574             >
 511+ 6574 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 511+ 6575 45 4E 43 4C >                db      "ENCLOSE"               // name string in 7-bit ascii, but
 511+ 6579 4F 53 45    >
 511+ 657C             >                org     $-1                 // alter last byte of Name just above to set
 511+ 657B C5          >                db      {b $} | END_BIT     // msb as name end
 511+ 657C             >
 511+ 657C 1D 65       >                dw      last_NFA            // Link to previous definition Name
 511+ 657E             >ENCLOSE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 511+ 657E ~           >                dw      runcode ; ok        // for primitive definitions  actual code
 511+ 657E             >                else
 511+ 657E 80 65       >                dw      $ + 2   ; ok        // is pointed by CFA
 511+ 6580             >                endif           ; ok        // for other definitions it "points" the correct handler
 511+ 6580             >                // Use of "; ok" to suppress "warning[fwdref]"
 511+ 6580             >
 511+ 6580             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 512+ 6580 D1                           pop     de                  //  e has the character
 513+ 6581 E1                           pop     hl                  // hl has the string address
 514+ 6582 E5                           push    hl
 515+ 6583 7B                           ld      a, e
 516+ 6584 11 FF FF                     ld      de, -1              // let's start from -1
 517+ 6587 2B                           dec     hl
 518+ 6588              Enclose_NonDelimiter:
 519+ 6588                              // find first non delimiter
 520+ 6588 23                               inc     hl
 521+ 6589 13                               inc     de
 522+ 658A BE                               cp      (hl)
 523+ 658B 28 FB                        jr      z, Enclose_NonDelimiter
 524+ 658D D5                           push    de
 525+ 658E
 526+ 658E C5                           push    bc                  // save Instruction Pointer
 527+ 658F
 528+ 658F 4F                           ld      c, a                // save char
 529+ 6590 7E                           ld      a, (hl)
 530+ 6591 A7                           and     a                   // stop if 0x00
 531+ 6592 20 07                        jr      nz, Enclose_NextChar
 532+ 6594
 533+ 6594                              /// case iii. no more character in string
 534+ 6594 C1                               pop     bc                  // restore Instruction Pointer
 535+ 6595 13                               inc     de
 536+ 6596 D5                               push    de
 537+ 6597 1B                               dec     de
 538+ 6598 D5                               push    de
 539+ 6599                                  next
 539+ 6599 DD E9       >                jp      (ix)
 540+ 659B              Enclose_NextChar:
 541+ 659B 79                               ld      a, c
 542+ 659C 23                               inc     hl
 543+ 659D 13                               inc     de
 544+ 659E BE                               cp      (hl)
 545+ 659F 20 06                            jr      nz, Enclose_NonSeparator
 546+ 65A1
 547+ 65A1                                      // case i. first non enclosed
 548+ 65A1 C1                                   pop     bc                  // restore Instruction Pointer
 549+ 65A2 D5                                   push    de
 550+ 65A3 13                                   inc     de
 551+ 65A4 D5                                   push    de
 552+ 65A5                                      next
 552+ 65A5 DD E9       >                jp      (ix)
 553+ 65A7              Enclose_NonSeparator:
 554+ 65A7 7E                               ld      a, (hl)
 555+ 65A8 A7                               and     a
 556+ 65A9 20 F0                        jr      nz, Enclose_NextChar
 557+ 65AB
 558+ 65AB                              // case ii. separator & terminator
 559+ 65AB C1                           pop     bc                  // restore Instruction Pointer
 560+ 65AC D5                           push    de
 561+ 65AD D5                           push    de
 562+ 65AE                              next
 562+ 65AE DD E9       >                jp      (ix)
 563+ 65B0
 564+ 65B0              //  ______________________________________________________________________
 565+ 65B0              //
 566+ 65B0              // (map)        a2 a1 n c1 -- c2
 567+ 65B0              // translate character c1 using mapping string a2 and a2
 568+ 65B0              // if c1 is not present within string a1 then
 569+ 65B0              // c2 = c2 if it is not translated. n is the length of both a1 and a2.
 570+ 65B0                              New_Def C_MAP, "(MAP)", is_code, is_normal
 570+ 65B0             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 570+ 65B0             >
 570+ 65B0             >                // dummy db directives used to calculate length of namec
 570+ 65B0 28 4D 41 50 >                db      "(MAP)"
 570+ 65B4 29          >
 570+ 65B5             >len_NFA         defl    $ - temp_NFA
 570+ 65B5             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 570+ 65B0             >
 570+ 65B0 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 570+ 65B1 28 4D 41 50 >                db      "(MAP)"               // name string in 7-bit ascii, but
 570+ 65B5 29          >
 570+ 65B6             >                org     $-1                 // alter last byte of Name just above to set
 570+ 65B5 A9          >                db      {b $} | END_BIT     // msb as name end
 570+ 65B6             >
 570+ 65B6 74 65       >                dw      last_NFA            // Link to previous definition Name
 570+ 65B8             >C_MAP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 570+ 65B8 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
 570+ 65B8             >                else
 570+ 65B8 BA 65       >                dw      $ + 2   ; ok        // is pointed by CFA
 570+ 65BA             >                endif           ; ok        // for other definitions it "points" the correct handler
 570+ 65BA             >                // Use of "; ok" to suppress "warning[fwdref]"
 570+ 65BA             >
 570+ 65BA             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 571+ 65BA D9                           exx
 572+ 65BB E1                           pop     hl
 573+ 65BC 7D                           ld      a, l
 574+ 65BD C1                           pop     bc
 575+ 65BE E1                           pop     hl
 576+ 65BF 50                           ld      d, b
 577+ 65C0 59                           ld      e, c
 578+ 65C1 ED B1                        cpir
 579+ 65C3 E1                           pop     hl
 580+ 65C4 20 05                        jr      nz, C_Map_Then
 580+ 65C6
 581+ 65C6 19                               add     hl, de
 582+ 65C7 2B                               dec     hl
 583+ 65C8 ED 42                            sbc     hl, bc
 584+ 65CA 7E                               ld      a, (hl)
 585+ 65CB              C_Map_Then:
 586+ 65CB 6F                           ld      l, a
 587+ 65CC 26 00                        ld      h, 0
 588+ 65CE E5                           push    hl
 589+ 65CF D9                           exx
 590+ 65D0                              next
 590+ 65D0 DD E9       >                jp      (ix)
 591+ 65D2
 592+ 65D2              //  ______________________________________________________________________
 593+ 65D2              //
 594+ 65D2              // (compare)    a1 a2 n -- b
 595+ 65D2              // this word performs a lexicographic compare of n bytes of text at address a1
 596+ 65D2              // with n bytes of text at address a2. It returns numeric a value:
 597+ 65D2              //  0 : if strings are equal
 598+ 65D2              // +1 : if string at a1 greater than string at a2
 599+ 65D2              // -1 : if string at a1 less than string at a2
 600+ 65D2              // strings can be 256 bytes in length at most.
 601+ 65D2                              New_Def C_COMPARE, "(COMPARE)", is_code, is_normal
 601+ 65D2             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 601+ 65D2             >
 601+ 65D2             >                // dummy db directives used to calculate length of namec
 601+ 65D2 28 43 4F 4D >                db      "(COMPARE)"
 601+ 65D6 50 41 52 45 >
 601+ 65DA 29          >
 601+ 65DB             >len_NFA         defl    $ - temp_NFA
 601+ 65DB             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 601+ 65D2             >
 601+ 65D2 89          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 601+ 65D3 28 43 4F 4D >                db      "(COMPARE)"               // name string in 7-bit ascii, but
 601+ 65D7 50 41 52 45 >
 601+ 65DB 29          >
 601+ 65DC             >                org     $-1                 // alter last byte of Name just above to set
 601+ 65DB A9          >                db      {b $} | END_BIT     // msb as name end
 601+ 65DC             >
 601+ 65DC B0 65       >                dw      last_NFA            // Link to previous definition Name
 601+ 65DE             >C_COMPARE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 601+ 65DE ~           >                dw      runcode ; ok        // for primitive definitions  actual code
 601+ 65DE             >                else
 601+ 65DE E0 65       >                dw      $ + 2   ; ok        // is pointed by CFA
 601+ 65E0             >                endif           ; ok        // for other definitions it "points" the correct handler
 601+ 65E0             >                // Use of "; ok" to suppress "warning[fwdref]"
 601+ 65E0             >
 601+ 65E0             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 602+ 65E0 D9                           exx
 603+ 65E1 E1                           pop     hl                  // Number of bytes
 604+ 65E2 7D                           ld      a, l
 605+ 65E3 E1                           pop     hl                  // hl points string a2
 606+ 65E4 D1                           pop     de                  // hl points string a1
 607+ 65E5              //              push    bc                  // Instruction pointer on stack
 608+ 65E5 47                           ld      b, a
 609+ 65E6              C_Compare_Loop:
 610+ 65E6 7E                               ld      a, (hl)
 611+ 65E7 CD DB 64                         call    Case_Sensitive
 612+ 65EA 4F                               ld      c, a
 613+ 65EB 1A                               ld      a, (de)
 614+ 65EC CD DB 64                         call    Case_Sensitive
 615+ 65EF B9                               cp      c
 616+ 65F0 13                               inc     de
 617+ 65F1 23                               inc     hl
 618+ 65F2 28 0E                            jr      z, C_Compare_Equal
 619+ 65F4 38 05                                jr      c, C_Compare_NotLessThan  // If LessThan
 620+ 65F6 21 01 00                                 ld      hl, 1               // a1 gt a2
 621+ 65F9 18 03                                jr      C_Compare_Then      // Else
 622+ 65FB              C_Compare_NotLessThan:
 623+ 65FB 21 FF FF                                 ld      hl, -1              // a1 lt a2
 624+ 65FE              C_Compare_Then:                                 // Endif
 625+ 65FE              //                      pop     bc              // restore Instruction Pointer
 626+ 65FE E5                                   push    hl
 627+ 65FF D9                                   exx
 628+ 6600
 629+ 6600                                      next
 629+ 6600 DD E9       >                jp      (ix)
 630+ 6602
 631+ 6602              C_Compare_Equal:
 632+ 6602 10 E2                        djnz    C_Compare_Loop
 633+ 6604 21 00 00                     ld      hl, 0               // a1 eq a2
 634+ 6607              //              pop     bc                  // restore Instruction Pointer
 635+ 6607 E5                           push    hl
 636+ 6608 D9                           exx
 637+ 6609
 638+ 6609                              next
 638+ 6609 DD E9       >                jp      (ix)
 639+ 660B
 640+ 660B              //  ______________________________________________________________________
 641+ 660B              //
 642+ 660B              // emitc        c --
 643+ 660B              // low level emit, calls ROM routine at #10 to send a character to
 644+ 660B              // the the current channel (see SELECT to change stream-channel)
 645+ 660B                              New_Def EMITC, "EMITC", is_code, is_normal
 645+ 660B             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 645+ 660B             >
 645+ 660B             >                // dummy db directives used to calculate length of namec
 645+ 660B 45 4D 49 54 >                db      "EMITC"
 645+ 660F 43          >
 645+ 6610             >len_NFA         defl    $ - temp_NFA
 645+ 6610             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 645+ 660B             >
 645+ 660B 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 645+ 660C 45 4D 49 54 >                db      "EMITC"               // name string in 7-bit ascii, but
 645+ 6610 43          >
 645+ 6611             >                org     $-1                 // alter last byte of Name just above to set
 645+ 6610 C3          >                db      {b $} | END_BIT     // msb as name end
 645+ 6611             >
 645+ 6611 D2 65       >                dw      last_NFA            // Link to previous definition Name
 645+ 6613             >EMITC:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 645+ 6613 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
 645+ 6613             >                else
 645+ 6613 15 66       >                dw      $ + 2   ; ok        // is pointed by CFA
 645+ 6615             >                endif           ; ok        // for other definitions it "points" the correct handler
 645+ 6615             >                // Use of "; ok" to suppress "warning[fwdref]"
 645+ 6615             >
 645+ 6615             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 646+ 6615 E1                           pop     hl
 647+ 6616 7D                           ld      a, l
 648+ 6617              Emitc_Ptr:
 649+ 6617 C5                           push    bc
 650+ 6618 DD E5                        push    ix
 651+ 661A D7                           rst     $10
 652+ 661B DD E1                        pop     ix
 653+ 661D C1                           pop     bc
 654+ 661E 3E FF                        ld      a, 255            // max possible
 655+ 6620 32 8C 5C                     ld      (SCR_CT), a
 656+ 6623
 657+ 6623                              next
 657+ 6623 DD E9       >                jp      (ix)
 658+ 6625
 659+ 6625              //  ______________________________________________________________________
 660+ 6625              //
 661+ 6625              // cr           --
 662+ 6625              // send a CR via EMITC
 663+ 6625                              New_Def CR, "CR", is_code, is_normal
 663+ 6625             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 663+ 6625             >
 663+ 6625             >                // dummy db directives used to calculate length of namec
 663+ 6625 43 52       >                db      "CR"
 663+ 6627             >len_NFA         defl    $ - temp_NFA
 663+ 6627             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 663+ 6625             >
 663+ 6625 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 663+ 6626 43 52       >                db      "CR"               // name string in 7-bit ascii, but
 663+ 6628             >                org     $-1                 // alter last byte of Name just above to set
 663+ 6627 D2          >                db      {b $} | END_BIT     // msb as name end
 663+ 6628             >
 663+ 6628 0B 66       >                dw      last_NFA            // Link to previous definition Name
 663+ 662A             >CR:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 663+ 662A ~           >                dw      runcode ; ok        // for primitive definitions  actual code
 663+ 662A             >                else
 663+ 662A 2C 66       >                dw      $ + 2   ; ok        // is pointed by CFA
 663+ 662C             >                endif           ; ok        // for other definitions it "points" the correct handler
 663+ 662C             >                // Use of "; ok" to suppress "warning[fwdref]"
 663+ 662C             >
 663+ 662C             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 664+ 662C
 665+ 662C 3E 0D                        ld      a, CR_CHAR
 666+ 662E 18 E7                        jr      Emitc_Ptr
 667+ 6630
 668+ 6630              Emitc_Vec:
 669+ 6630 75 66                        dw      C_Emit_Printable  // comma
 670+ 6632 7B 66                        dw      C_Emit_Bel        // bel
 671+ 6634 75 66                        dw      C_Emit_Printable  // bs
 672+ 6636 90 66                        dw      C_Emit_Tab        // tab
 673+ 6638 75 66                        dw      C_Emit_Printable  // cr
 674+ 663A 96 66                        dw      C_Emit_NL         // lf (unix newline)
 675+ 663C 75 66                        dw      C_Emit_Printable  // blank
 676+ 663E 75 66                        dw      C_Emit_Printable  // blank
 677+ 6640
 678+ 6640              Emit_Selector_Start:
 679+ 6640 06                           db      $06                 // comma
 680+ 6641 07                           db      $07                 // bel
 681+ 6642 08                           db      $08                 // bs
 682+ 6643 09                           db      $09                 // tab
 683+ 6644 0D                           db      $0D                 // cr
 684+ 6645 0A                           db      $0A                 // lf (unix newline)
 685+ 6646 20                           db      $20
 686+ 6647              Emit_Selector_End:
 687+ 6647 20                           db      $20
 688+ 6648
 689+ 6648              //  ______________________________________________________________________
 690+ 6648              //
 691+ 6648              // (?emit)      c1 -- c2 | c1
 692+ 6648              // decode a character to be sent via EMIT
 693+ 6648              // search first the Emit_Selector table, if found jump to the corresponding routine in Emit_Vector
 694+ 6648              // the routine should resolve anything and convert the character anyway.
 695+ 6648                              New_Def C_EMIT, "(?EMIT)", is_code, is_normal
 695+ 6648             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 695+ 6648             >
 695+ 6648             >                // dummy db directives used to calculate length of namec
 695+ 6648 28 3F 45 4D >                db      "(?EMIT)"
 695+ 664C 49 54 29    >
 695+ 664F             >len_NFA         defl    $ - temp_NFA
 695+ 664F             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 695+ 6648             >
 695+ 6648 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 695+ 6649 28 3F 45 4D >                db      "(?EMIT)"               // name string in 7-bit ascii, but
 695+ 664D 49 54 29    >
 695+ 6650             >                org     $-1                 // alter last byte of Name just above to set
 695+ 664F A9          >                db      {b $} | END_BIT     // msb as name end
 695+ 6650             >
 695+ 6650 25 66       >                dw      last_NFA            // Link to previous definition Name
 695+ 6652             >C_EMIT:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 695+ 6652 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
 695+ 6652             >                else
 695+ 6652 54 66       >                dw      $ + 2   ; ok        // is pointed by CFA
 695+ 6654             >                endif           ; ok        // for other definitions it "points" the correct handler
 695+ 6654             >                // Use of "; ok" to suppress "warning[fwdref]"
 695+ 6654             >
 695+ 6654             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 696+ 6654 D1                           pop     de
 697+ 6655 7B                           ld      a, e                //  de has c1
 698+ 6656 E6 7F                        and     $7F                 // 7-bit ascii only
 699+ 6658 C5                           push    bc                  // save Instruction Pointer
 700+ 6659 01 08 00                     ld      bc, Emit_Selector_End - Emit_Selector_Start + 1
 701+ 665C 21 47 66                     ld      hl, Emit_Selector_End
 702+ 665F ED B9                        cpdr                        // search for c1 in Emit_Selector table, backward
 703+ 6661 20 0B                        jr      nz, C_Emit_Not_Found
 704+ 6663                                  // Found then decode it
 705+ 6663 21 30 66                         ld      hl, Emitc_Vec
 706+ 6666 09                               add     hl, bc
 707+ 6667 09                               add     hl, bc
 708+ 6668 5E                               ld      e, (hl)
 709+ 6669 23                               inc     hl
 710+ 666A 56                               ld      d, (hl)
 711+ 666B EB                               ex      de, hl
 712+ 666C C1                               pop     bc                  // restore Instruction Pointer
 713+ 666D E9                               jp      (hl)                // one of the following labels
 714+ 666E              C_Emit_Not_Found:
 715+ 666E C1                           pop     bc                  // restore Instruction Pointer
 716+ 666F FE 20                        cp      BLANK_CHAR          // cp $20 non-printable check
 717+ 6671 30 02                        jr      nc, C_Emit_Printable
 718+ 6673 3E 00                            ld      a, NUL_CHAR         // NUL is never "printed"
 719+ 6675              C_Emit_Printable:
 720+ 6675 6F                           ld      l, a
 721+ 6676 26 00                        ld      h, 0
 722+ 6678
 723+ 6678                              psh1
 723+ 6678 E5          >                push    hl
 723+ 6679 DD E9       >                jp      (ix)
 724+ 667B
 725+ 667B              C_Emit_Bel:
 726+ 667B C5                           push    bc                  // save Instruction Pointer
 727+ 667C 11 00 01                     ld      de, $0100
 728+ 667F 21 00 02                     ld      hl, $0200
 729+ 6682 DD E5                        push    ix                  // save Next Pointer
 730+ 6684 CD B6 03                     call    $03B6               // bleep Standard-ROM routine
 731+ 6687 DD E1                        pop     ix                  // restore Next Pointer
 732+ 6689 C1                           pop     bc                  // restore Instruction Pointer
 733+ 668A 21 00 00                     ld      hl, NUL_CHAR
 734+ 668D
 735+ 668D                              psh1
 735+ 668D E5          >                push    hl
 735+ 668E DD E9       >                jp      (ix)
 736+ 6690
 737+ 6690 21 06 00     C_Emit_Tab:     ld      hl, COMMA_CHAR
 738+ 6693
 739+ 6693                              psh1
 739+ 6693 E5          >                push    hl
 739+ 6694 DD E9       >                jp      (ix)
 740+ 6696
 741+ 6696 21 0D 00     C_Emit_NL       ld      hl, CR_CHAR           // 0x0A --> 0x0D  à la Spectrum
 742+ 6699
 743+ 6699                              psh1
 743+ 6699 E5          >                push    hl
 743+ 669A DD E9       >                jp      (ix)
 744+ 669C
 745+ 669C              //  ______________________________________________________________________
 746+ 669C
 747+ 669C              Key_Table:
 748+ 669C E2                           db      $E2                 //  0: STOP  --> SYMBOL+A : ~
 749+ 669D C3                           db      $C3                 //  1: NOT   --> SYMBOL+S : |
 750+ 669E CD                           db      $CD                 //  2: STEP  --> SYMBOl+D : //
 751+ 669F CC                           db      $CC                 //  3: TO    --> SYMBOL+F : {
 752+ 66A0 CB                           db      $CB                 //  4: THEN  --> SYMBOL+G : }
 753+ 66A1 C6                           db      $C6                 //  5: AND   --> SYMBOL+Y : [
 754+ 66A2 C5                           db      $C5                 //  6: OR    --> SYMBOL+U : ]
 755+ 66A3 AC                           db      $AC                 //  7: AT    --> SYMBOL+I : (C) copyright symbol
 756+ 66A4 C7                           db      $C7                 //  8: <=    --> same as SHIFT-1 [EDIT]
 757+ 66A5 C8                           db      $C8                 //  9: >=    --> same as SHIFT-0 [BACKSPACE]
 758+ 66A6 C9                           db      $C9                 // 10: <>    --> SYMBOL+W is the same as CAPS (toggle) SHIFT+2
 759+ 66A7              Key_MapTo:
 760+ 66A7 06                           db      $06                 // 10: SYMBOL+W is the same as CAPS (toggle) SHIFT+2
 761+ 66A8 0C                           db      $0C                 //  9: same as SHIFT-0 [BACKSPACE]
 762+ 66A9 07                           db      $07                 //  8: same as SHIFT-1 [EDIT]
 763+ 66AA 7F                           db      $7F                 //  7: SYMBOL+I : (C) copyright symbol
 764+ 66AB 5D                           db      $5D                 //  6: SYMBOL+U : ]
 765+ 66AC 5B                           db      $5B                 //  5: SYMBOL+Y : [
 766+ 66AD 7D                           db      $7D                 //  4: SYMBOL+G : }
 767+ 66AE 7B                           db      $7B                 //  3: SYMBOL+F : {
 768+ 66AF 5C                           db      $5C                 //  2: SYMBOl+D : //
 769+ 66B0 7C                           db      $7C                 //  1: SYMBOL+S : |
 770+ 66B1 7E                           db      $7E                 //  0: SYMBOL+A : ~
 771+ 66B2
 772+ 66B2              //  ______________________________________________________________________
 773+ 66B2              //
 774+ 66B2              // curs         -- c
 775+ 66B2              // wait for a keypress
 776+ 66B2              // This definition need Standard ROM Interrupt to be served
 777+ 66B2
 778+ 66B2                              New_Def CUR, "CURS", is_code, is_normal
 778+ 66B2             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 778+ 66B2             >
 778+ 66B2             >                // dummy db directives used to calculate length of namec
 778+ 66B2 43 55 52 53 >                db      "CURS"
 778+ 66B6             >len_NFA         defl    $ - temp_NFA
 778+ 66B6             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 778+ 66B2             >
 778+ 66B2 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 778+ 66B3 43 55 52 53 >                db      "CURS"               // name string in 7-bit ascii, but
 778+ 66B7             >                org     $-1                 // alter last byte of Name just above to set
 778+ 66B6 D3          >                db      {b $} | END_BIT     // msb as name end
 778+ 66B7             >
 778+ 66B7 48 66       >                dw      last_NFA            // Link to previous definition Name
 778+ 66B9             >CUR:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 778+ 66B9 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
 778+ 66B9             >                else
 778+ 66B9 BB 66       >                dw      $ + 2   ; ok        // is pointed by CFA
 778+ 66BB             >                endif           ; ok        // for other definitions it "points" the correct handler
 778+ 66BB             >                // Use of "; ok" to suppress "warning[fwdref]"
 778+ 66BB             >
 778+ 66BB             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 779+ 66BB
 780+ 66BB C5                           push    bc                  // save Instruction Pointer
 781+ 66BC DD E5                        push    ix
 782+ 66BE
 783+ 66BE ED 73 92 63                  ld      (SP_Saved), sp      // be sure to not to be paged out.
 784+ 66C2 31 61 63                     ld      sp, Cold_origin - 5 // maybe $4000 in the future...
 785+ 66C5 FD CB 01 AE                  res     5, (iy + 1)         // FLAGS (5C3A+1)
 786+ 66C9
 787+ 66C9              Cur_Wait:
 788+ 66C9 76                               halt
 789+ 66CA 3E 02                            ld      a, 2                // selec channel #2 (Upper Video)
 790+ 66CC CD 01 16                         call    $1601               // SELECT Standard-ROM Routine
 791+ 66CF
 792+ 66CF                                  // software-flash: flips face every 320 ms
 793+ 66CF 3E 10                            ld      a, $10              // Timing based
 794+ 66D1 FD A6 3E                         and     (iy + $3E)          // FRAMES (5C3A+3E)
 795+ 66D4
 796+ 66D4 3A 8C 63                         ld      a, (Block_Face)     // see origin.asm
 797+ 66D7 20 0C                            jr      nz, Cur_Cursor
 798+ 66D9 3A 8D 63                             ld      a, (Half_Face)      // see origin.asm
 799+ 66DC FD CB 30 5E                          bit     3, (iy + $30)       // FLAGS2 (5C3A+$30) that is CAPS-LOCK
 800+ 66E0 28 03                                jr      z, Cur_Cursor
 801+ 66E2 3A 8E 63                                 ld      a, (Underscore_Face) // see origin
 802+ 66E5              Cur_Cursor:
 803+ 66E5 D7                               rst     $10
 804+ 66E6 3E 08                            ld      a, BACKSPACE_CHAR    // backspace
 805+ 66E8 D7                               rst     $10
 806+ 66E9
 807+ 66E9 FD CB 01 6E                      bit     5, (iy + 1)         // FLAGS (5C3A+1)
 808+ 66ED 28 DA                        jr      z, Cur_Wait
 809+ 66EF
 810+ 66EF 76                           halt    // this is to sync flashing cursor.
 811+ 66F0
 812+ 66F0 3E 20                        ld      a, BLANK_CHAR       // space to blank cursor
 813+ 66F2 D7                           rst     $10
 814+ 66F3 3E 08                        ld      a, BACKSPACE_CHAR   // backspace
 815+ 66F5 D7                           rst     $10
 816+ 66F6
 817+ 66F6 ED 7B 92 63                  ld      sp, (SP_Saved)
 818+ 66FA
 819+ 66FA DD E1                        pop     ix
 820+ 66FC C1                           pop     bc                  // Restore Instruction Pointer
 821+ 66FD
 822+ 66FD                              next
 822+ 66FD DD E9       >                jp      (ix)
 823+ 66FF
 824+ 66FF
 825+ 66FF              //  ______________________________________________________________________
 826+ 66FF              //
 827+ 66FF              // key          -- c
 828+ 66FF              // This definition need Standard ROM Interrupt to be served
 829+ 66FF
 830+ 66FF                              New_Def KEY, "KEY", is_code, is_normal
 830+ 66FF             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 830+ 66FF             >
 830+ 66FF             >                // dummy db directives used to calculate length of namec
 830+ 66FF 4B 45 59    >                db      "KEY"
 830+ 6702             >len_NFA         defl    $ - temp_NFA
 830+ 6702             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 830+ 66FF             >
 830+ 66FF 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 830+ 6700 4B 45 59    >                db      "KEY"               // name string in 7-bit ascii, but
 830+ 6703             >                org     $-1                 // alter last byte of Name just above to set
 830+ 6702 D9          >                db      {b $} | END_BIT     // msb as name end
 830+ 6703             >
 830+ 6703 B2 66       >                dw      last_NFA            // Link to previous definition Name
 830+ 6705             >KEY:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 830+ 6705 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
 830+ 6705             >                else
 830+ 6705 07 67       >                dw      $ + 2   ; ok        // is pointed by CFA
 830+ 6707             >                endif           ; ok        // for other definitions it "points" the correct handler
 830+ 6707             >                // Use of "; ok" to suppress "warning[fwdref]"
 830+ 6707             >
 830+ 6707             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 831+ 6707
 832+ 6707 C5                           push    bc
 833+ 6708
 834+ 6708              Key_Wait:
 835+ 6708 FD CB 01 6E                      bit     5, (iy + 1)         // FLAGS (5C3A+1)
 836+ 670C 28 FA                        jr      z, Key_Wait
 837+ 670E
 838+ 670E 3A 08 5C                     ld      a, (LASTK)          // get typed character (5C08)
 839+ 6711
 840+ 6711                              // decode character from above table
 841+ 6711 21 9C 66                     ld      hl, Key_Table
 842+ 6714 01 0B 00                     ld      bc, $000B
 843+ 6717 ED B1                        cpir
 844+ 6719 20 05                        jr      nz, Key_DontMap
 845+ 671B 21 A7 66                         ld      hl, Key_MapTo
 846+ 671E 09                               add     hl, bc
 847+ 671F 7E                               ld      a, (hl)
 848+ 6720 FE 06        Key_DontMap:    cp      $06                 // CAPS-LOCK management
 849+ 6722 20 09                        jr      nz, Key_NoCapsLock
 850+ 6724 21 6A 5C                         ld      hl, $5C6A           // FLAGS2
 851+ 6727 7E                               ld      a, (hl)
 852+ 6728 EE 08                            xor     $08
 853+ 672A 77                               ld      (hl), a
 854+ 672B 3E 00                            ld      a, NUL_CHAR
 855+ 672D 6F           Key_NoCapsLock: ld      l, a
 856+ 672E 26 00                        ld      h, 0                // Prepare TOS
 857+ 6730
 858+ 6730 FD CB 01 AE                  res     5, (iy + 1)         // FLAGS (5C3A+1)
 859+ 6734
 860+ 6734 C1                           pop     bc                  // Restore Instruction Pointer
 861+ 6735
 862+ 6735                              psh1
 862+ 6735 E5          >                push    hl
 862+ 6736 DD E9       >                jp      (ix)
 863+ 6738
 864+ 6738
 865+ 6738              //  ______________________________________________________________________
 866+ 6738              //
 867+ 6738              // click        --
 868+ 6738              // This definition need Standard ROM Interrupt to be served
 869+ 6738              //
 870+ 6738              //              New_Def CLICK, "CLICK", is_code, is_normal
 871+ 6738              //
 872+ 6738              //                push    bc
 873+ 6738              //              ld      a, ($5C48)          // BORDCR system variable
 874+ 6738              //              rra
 875+ 6738              //              rra
 876+ 6738              //              rra
 877+ 6738              //              or      $18                 // quick'n'dirty click
 878+ 6738              //              out     ($fe), a
 879+ 6738              //              ld      b, 0
 880+ 6738              //              djnz    $                   // wait loop
 881+ 6738              //              xor     $18
 882+ 6738              //              out     ($fe), a
 883+ 6738              //                pop     bc
 884+ 6738
 885+ 6738              //              next
 886+ 6738
 887+ 6738              //  ______________________________________________________________________
 888+ 6738              //
 889+ 6738              // key?         -- f
 890+ 6738              // key available
 891+ 6738              //
 892+ 6738              //              New_Def KEY_Q, "KEY?", is_code, is_normal
 893+ 6738              //
 894+ 6738              //              ld      hl, 0000
 895+ 6738              //              bit     5, (iy + 1)         // FLAGS (5C3A+1)
 896+ 6738              //              jr      z, Key_Q
 897+ 6738              //                  dec     hl
 898+ 6738              // Key_Q:
 899+ 6738              //                psh1
 900+ 6738              //              next
 901+ 6738
 902+ 6738              //  ______________________________________________________________________
 903+ 6738              //
 904+ 6738              // ?terminal    -- FALSE | TRUE
 905+ 6738              // test for BREAK keypress
 906+ 6738                              New_Def QTERMINAL, "?TERMINAL", is_code, is_normal
 906+ 6738             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 906+ 6738             >
 906+ 6738             >                // dummy db directives used to calculate length of namec
 906+ 6738 3F 54 45 52 >                db      "?TERMINAL"
 906+ 673C 4D 49 4E 41 >
 906+ 6740 4C          >
 906+ 6741             >len_NFA         defl    $ - temp_NFA
 906+ 6741             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 906+ 6738             >
 906+ 6738 89          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 906+ 6739 3F 54 45 52 >                db      "?TERMINAL"               // name string in 7-bit ascii, but
 906+ 673D 4D 49 4E 41 >
 906+ 6741 4C          >
 906+ 6742             >                org     $-1                 // alter last byte of Name just above to set
 906+ 6741 CC          >                db      {b $} | END_BIT     // msb as name end
 906+ 6742             >
 906+ 6742 FF 66       >                dw      last_NFA            // Link to previous definition Name
 906+ 6744             >QTERMINAL:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 906+ 6744 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
 906+ 6744             >                else
 906+ 6744 46 67       >                dw      $ + 2   ; ok        // is pointed by CFA
 906+ 6746             >                endif           ; ok        // for other definitions it "points" the correct handler
 906+ 6746             >                // Use of "; ok" to suppress "warning[fwdref]"
 906+ 6746             >
 906+ 6746             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 907+ 6746 D9                           exx
 908+ 6747 01 FE 7F                     ld      bc, $7ffe
 909+ 674A ED 50                        in      d, (c)
 910+ 674C 41                           ld      b, c
 911+ 674D ED 78                        in      a, (c)
 912+ 674F B2                           or       d
 913+ 6750 1F                           rra
 914+ 6751 3F                           ccf
 915+ 6752 ED 62                        sbc     hl, hl
 916+ 6754 E5                           push    hl
 917+ 6755 D9                           exx
 918+ 6756                              next
 918+ 6756 DD E9       >                jp      (ix)
 919+ 6758
 920+ 6758
 921+ 6758              //  ______________________________________________________________________
 922+ 6758              //
 923+ 6758              // inkey        -- c | 0
 924+ 6758              // call ROM inkey$ routine, returns c or "zero".
 925+ 6758
 926+ 6758                              New_Def INKEY, "INKEY", is_code, is_normal
 926+ 6758             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 926+ 6758             >
 926+ 6758             >                // dummy db directives used to calculate length of namec
 926+ 6758 49 4E 4B 45 >                db      "INKEY"
 926+ 675C 59          >
 926+ 675D             >len_NFA         defl    $ - temp_NFA
 926+ 675D             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 926+ 6758             >
 926+ 6758 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 926+ 6759 49 4E 4B 45 >                db      "INKEY"               // name string in 7-bit ascii, but
 926+ 675D 59          >
 926+ 675E             >                org     $-1                 // alter last byte of Name just above to set
 926+ 675D D9          >                db      {b $} | END_BIT     // msb as name end
 926+ 675E             >
 926+ 675E 38 67       >                dw      last_NFA            // Link to previous definition Name
 926+ 6760             >INKEY:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 926+ 6760 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
 926+ 6760             >                else
 926+ 6760 62 67       >                dw      $ + 2   ; ok        // is pointed by CFA
 926+ 6762             >                endif           ; ok        // for other definitions it "points" the correct handler
 926+ 6762             >                // Use of "; ok" to suppress "warning[fwdref]"
 926+ 6762             >
 926+ 6762             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 927+ 6762
 928+ 6762 C5                           push    bc
 929+ 6763 ED 73 92 63                  ld      (SP_Saved), sp
 930+ 6767 31 61 63                     ld      sp, Cold_origin - 5
 931+ 676A DD E5                        push    ix
 932+ 676C CD E6 15                     call    $15E6                   // instead of 15E9
 933+ 676F DD E1                        pop     ix
 934+ 6771 ED 7B 92 63                  ld      sp, (SP_Saved)
 935+ 6775 6F                           ld      l, a
 936+ 6776 26 00                        ld      h, 0
 937+ 6778 C1                           pop     bc
 938+ 6779                              psh1
 938+ 6779 E5          >                push    hl
 938+ 677A DD E9       >                jp      (ix)
 939+ 677C
 940+ 677C              //  ______________________________________________________________________
 941+ 677C              //
 942+ 677C              // select      n --
 943+ 677C              // selects the given channel number
 944+ 677C
 945+ 677C                              New_Def SELECT, "SELECT", is_code, is_normal
 945+ 677C             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 945+ 677C             >
 945+ 677C             >                // dummy db directives used to calculate length of namec
 945+ 677C 53 45 4C 45 >                db      "SELECT"
 945+ 6780 43 54       >
 945+ 6782             >len_NFA         defl    $ - temp_NFA
 945+ 6782             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 945+ 677C             >
 945+ 677C 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 945+ 677D 53 45 4C 45 >                db      "SELECT"               // name string in 7-bit ascii, but
 945+ 6781 43 54       >
 945+ 6783             >                org     $-1                 // alter last byte of Name just above to set
 945+ 6782 D4          >                db      {b $} | END_BIT     // msb as name end
 945+ 6783             >
 945+ 6783 58 67       >                dw      last_NFA            // Link to previous definition Name
 945+ 6785             >SELECT:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 945+ 6785 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
 945+ 6785             >                else
 945+ 6785 87 67       >                dw      $ + 2   ; ok        // is pointed by CFA
 945+ 6787             >                endif           ; ok        // for other definitions it "points" the correct handler
 945+ 6787             >                // Use of "; ok" to suppress "warning[fwdref]"
 945+ 6787             >
 945+ 6787             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 946+ 6787 E1                           pop     hl
 947+ 6788 C5                           push    bc
 948+ 6789 7D                           ld      a, l
 949+ 678A ED 73 92 63                  ld      (SP_Saved), sp
 950+ 678E 31 61 63                     ld      sp, Cold_origin - 5
 951+ 6791 DD E5                        push    ix
 952+ 6793 CD 01 16                     call    $1601
 953+ 6796 DD E1                        pop     ix
 954+ 6798 ED 7B 92 63                  ld      sp, (SP_Saved)
 955+ 679C C1                           pop     bc
 956+ 679D
 957+ 679D                              next
 957+ 679D DD E9       >                jp      (ix)
 958+ 679F
 959+ 679F              //  ______________________________________________________________________
 960+ 679F              //
 961+ 679F              // ZX Spectrum Next - Low Level disk primitives.
 962+ 679F              // this include is "here" for backward compatibility
 963+ 679F
 964+ 679F                              include "next-opt0.asm"
# file opened: C:\Zx\CSpect\Projects\vForth15_INDIRECT/source/next-opt0.asm
   1++679F              //  ______________________________________________________________________
   2++679F              //
   3++679F              //  next-opt.asm
   4++679F              //
   5++679F              //  ZX Spectrum Next - peculiar definitions
   6++679F              //  ______________________________________________________________________
   7++679F
   8++679F              //  ______________________________________________________________________
   9++679F              //
  10++679F              // f_seek       d u -- f
  11++679F              // Seek to position d in file-handle u.
  12++679F              // Return a false-flag 0 on success, True flag on error
  13++679F                              New_Def F_SEEK, "F_SEEK", is_code, is_normal
  13++679F             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  13++679F             >
  13++679F             >                // dummy db directives used to calculate length of namec
  13++679F 46 5F 53 45 >                db      "F_SEEK"
  13++67A3 45 4B       >
  13++67A5             >len_NFA         defl    $ - temp_NFA
  13++67A5             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  13++679F             >
  13++679F 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  13++67A0 46 5F 53 45 >                db      "F_SEEK"               // name string in 7-bit ascii, but
  13++67A4 45 4B       >
  13++67A6             >                org     $-1                 // alter last byte of Name just above to set
  13++67A5 CB          >                db      {b $} | END_BIT     // msb as name end
  13++67A6             >
  13++67A6 7C 67       >                dw      last_NFA            // Link to previous definition Name
  13++67A8             >F_SEEK:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
  13++67A8 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
  13++67A8             >                else
  13++67A8 AA 67       >                dw      $ + 2   ; ok        // is pointed by CFA
  13++67AA             >                endif           ; ok        // for other definitions it "points" the correct handler
  13++67AA             >                // Use of "; ok" to suppress "warning[fwdref]"
  13++67AA             >
  13++67AA             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  14++67AA E1                           pop     hl                  // file-handle
  15++67AB 7D                           ld      a, l                // file-handle
  16++67AC 60                           ld      h, b                // save Intruction Pointer
  17++67AD 69                           ld      l, c
  18++67AE C1                           pop     bc                  // bc has high-word of d
  19++67AF D1                           pop     de
  20++67B0 DD E5                        push    ix
  21++67B2 E5                           push    hl                  // save Instruction Pointer
  22++67B3 DD 21 00 00                  ld      ix, 0
  23++67B7 CF                           rst     $08
  24++67B8 9F                           db      $9F
  25++67B9              F_Seek_Exit:
  26++67B9 C1                           pop     bc                  // restore Instruction Pointer
  27++67BA DD E1                        pop     ix
  28++67BC ED 62                        sbc     hl, hl              // to get 0 or -1
  29++67BE
  30++67BE                              psh1
  30++67BE E5          >                push    hl
  30++67BF DD E9       >                jp      (ix)
  31++67C1
  32++67C1              //  ______________________________________________________________________
  33++67C1              //
  34++67C1              // f_close      u -- f
  35++67C1              // Close file-handle u.
  36++67C1              // Return 0 on success, True flag on error
  37++67C1
  38++67C1                              New_Def F_CLOSE, "F_CLOSE", is_code, is_normal
  38++67C1             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  38++67C1             >
  38++67C1             >                // dummy db directives used to calculate length of namec
  38++67C1 46 5F 43 4C >                db      "F_CLOSE"
  38++67C5 4F 53 45    >
  38++67C8             >len_NFA         defl    $ - temp_NFA
  38++67C8             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  38++67C1             >
  38++67C1 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  38++67C2 46 5F 43 4C >                db      "F_CLOSE"               // name string in 7-bit ascii, but
  38++67C6 4F 53 45    >
  38++67C9             >                org     $-1                 // alter last byte of Name just above to set
  38++67C8 C5          >                db      {b $} | END_BIT     // msb as name end
  38++67C9             >
  38++67C9 9F 67       >                dw      last_NFA            // Link to previous definition Name
  38++67CB             >F_CLOSE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
  38++67CB ~           >                dw      runcode ; ok        // for primitive definitions  actual code
  38++67CB             >                else
  38++67CB CD 67       >                dw      $ + 2   ; ok        // is pointed by CFA
  38++67CD             >                endif           ; ok        // for other definitions it "points" the correct handler
  38++67CD             >                // Use of "; ok" to suppress "warning[fwdref]"
  38++67CD             >
  38++67CD             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  39++67CD
  40++67CD E1                           pop     hl
  41++67CE 7D                           ld      a, l                // file-handle
  42++67CF DD E5                        push    ix
  43++67D1 C5                           push    bc                  // Save Instruction pointer
  44++67D2 CF                           rst     $08
  45++67D3 9B                           db      $9B
  46++67D4 18 E3                        jr      F_Seek_Exit
  47++67D6              //              pop     bc
  48++67D6              //              pop     ix
  49++67D6              //              sbc     hl, hl
  50++67D6              //              psh1
  51++67D6
  52++67D6              //  ______________________________________________________________________
  53++67D6              //
  54++67D6              // f_sync      u -- f
  55++67D6              // Close file-handle u.
  56++67D6              // Return 0 on success, True flag on error
  57++67D6
  58++67D6                              New_Def F_SYNC, "F_SYNC", is_code, is_normal
  58++67D6             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  58++67D6             >
  58++67D6             >                // dummy db directives used to calculate length of namec
  58++67D6 46 5F 53 59 >                db      "F_SYNC"
  58++67DA 4E 43       >
  58++67DC             >len_NFA         defl    $ - temp_NFA
  58++67DC             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  58++67D6             >
  58++67D6 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  58++67D7 46 5F 53 59 >                db      "F_SYNC"               // name string in 7-bit ascii, but
  58++67DB 4E 43       >
  58++67DD             >                org     $-1                 // alter last byte of Name just above to set
  58++67DC C3          >                db      {b $} | END_BIT     // msb as name end
  58++67DD             >
  58++67DD C1 67       >                dw      last_NFA            // Link to previous definition Name
  58++67DF             >F_SYNC:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
  58++67DF ~           >                dw      runcode ; ok        // for primitive definitions  actual code
  58++67DF             >                else
  58++67DF E1 67       >                dw      $ + 2   ; ok        // is pointed by CFA
  58++67E1             >                endif           ; ok        // for other definitions it "points" the correct handler
  58++67E1             >                // Use of "; ok" to suppress "warning[fwdref]"
  58++67E1             >
  58++67E1             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  59++67E1 E1                           pop     hl
  60++67E2 7D                           ld      a, l                // file-handle
  61++67E3 DD E5                        push    ix
  62++67E5 C5                           push    bc
  63++67E6 CF                           rst     $08
  64++67E7 9C                           db      $9C
  65++67E8 18 CF                        jr      F_Seek_Exit
  66++67EA              //              pop     bc
  67++67EA              //              pop     ix
  68++67EA              //              sbc     hl, hl
  69++67EA              //              psh1
  70++67EA
  71++67EA              //  ______________________________________________________________________
  72++67EA              //
  73++67EA              // f_fgetpos    u -- d f
  74++67EA              // Seek to position d in file-handle u.
  75++67EA              // Return a false-flag 0 on success, True flag on error
  76++67EA                              New_Def F_FGETPOS, "F_FGETPOS", is_code, is_normal
  76++67EA             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  76++67EA             >
  76++67EA             >                // dummy db directives used to calculate length of namec
  76++67EA 46 5F 46 47 >                db      "F_FGETPOS"
  76++67EE 45 54 50 4F >
  76++67F2 53          >
  76++67F3             >len_NFA         defl    $ - temp_NFA
  76++67F3             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  76++67EA             >
  76++67EA 89          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  76++67EB 46 5F 46 47 >                db      "F_FGETPOS"               // name string in 7-bit ascii, but
  76++67EF 45 54 50 4F >
  76++67F3 53          >
  76++67F4             >                org     $-1                 // alter last byte of Name just above to set
  76++67F3 D3          >                db      {b $} | END_BIT     // msb as name end
  76++67F4             >
  76++67F4 D6 67       >                dw      last_NFA            // Link to previous definition Name
  76++67F6             >F_FGETPOS:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
  76++67F6 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
  76++67F6             >                else
  76++67F6 F8 67       >                dw      $ + 2   ; ok        // is pointed by CFA
  76++67F8             >                endif           ; ok        // for other definitions it "points" the correct handler
  76++67F8             >                // Use of "; ok" to suppress "warning[fwdref]"
  76++67F8             >
  76++67F8             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  77++67F8 E1                           pop     hl
  78++67F9 7D                           ld      a, l                // file-handle
  79++67FA DD E5                        push    ix
  80++67FC C5                           push    bc
  81++67FD CF                           rst     $08
  82++67FE A0                           db      $A0
  83++67FF E1                           pop     hl                  // restore Instruction Pointer
  84++6800 DD E1                        pop     ix
  85++6802 D5                           push    de
  86++6803 C5                           push    bc
  87++6804 44                           ld      b, h                // restore Instruction Pointer
  88++6805 4D                           ld      c, l
  89++6806 ED 62                        sbc     hl, hl
  90++6808
  91++6808                              psh1
  91++6808 E5          >                push    hl
  91++6809 DD E9       >                jp      (ix)
  92++680B
  93++680B              //  ______________________________________________________________________
  94++680B              //
  95++680B              // f_read       a b u -- n f
  96++680B              // Read b bytes from file-handle u to address a
  97++680B              // Return the actual number n of bytes read
  98++680B              // Return 0 on success, True flag on error
  99++680B                              New_Def F_READ, "F_READ", is_code, is_normal
  99++680B             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  99++680B             >
  99++680B             >                // dummy db directives used to calculate length of namec
  99++680B 46 5F 52 45 >                db      "F_READ"
  99++680F 41 44       >
  99++6811             >len_NFA         defl    $ - temp_NFA
  99++6811             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  99++680B             >
  99++680B 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  99++680C 46 5F 52 45 >                db      "F_READ"               // name string in 7-bit ascii, but
  99++6810 41 44       >
  99++6812             >                org     $-1                 // alter last byte of Name just above to set
  99++6811 C4          >                db      {b $} | END_BIT     // msb as name end
  99++6812             >
  99++6812 EA 67       >                dw      last_NFA            // Link to previous definition Name
  99++6814             >F_READ:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
  99++6814 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
  99++6814             >                else
  99++6814 16 68       >                dw      $ + 2   ; ok        // is pointed by CFA
  99++6816             >                endif           ; ok        // for other definitions it "points" the correct handler
  99++6816             >                // Use of "; ok" to suppress "warning[fwdref]"
  99++6816             >
  99++6816             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 100++6816
 101++6816 50                           ld      d, b
 102++6817 59                           ld      e, c
 103++6818 E1                           pop     hl
 104++6819 7D                           ld      a, l                // file-handle
 105++681A C1                           pop     bc                  // bc has bytes to read
 106++681B DD E3                        ex      (sp), ix            // ix has address
 107++681D D5                           push    de                  // Save Instruction pointer
 108++681E CF                           rst     $08
 109++681F 9D                           db      $9D
 110++6820              F_Read_Exit:
 111++6820 C1                           pop     bc                  // Restore Instruction pointer
 112++6821 DD E1                        pop     ix                  // Restore ix
 113++6823 D5                           push    de                  // bytes written
 114++6824 ED 62                        sbc     hl, hl
 115++6826
 116++6826                              psh1
 116++6826 E5          >                push    hl
 116++6827 DD E9       >                jp      (ix)
 117++6829
 118++6829              //  ______________________________________________________________________
 119++6829              //
 120++6829              // f_write      a b u -- n f
 121++6829              // Write bytes currently stored at address a to file-handle u.
 122++6829              // Return the actual n bytes written and 0 on success, True flag on error.
 123++6829                              New_Def F_WRITE, "F_WRITE", is_code, is_normal
 123++6829             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 123++6829             >
 123++6829             >                // dummy db directives used to calculate length of namec
 123++6829 46 5F 57 52 >                db      "F_WRITE"
 123++682D 49 54 45    >
 123++6830             >len_NFA         defl    $ - temp_NFA
 123++6830             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 123++6829             >
 123++6829 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 123++682A 46 5F 57 52 >                db      "F_WRITE"               // name string in 7-bit ascii, but
 123++682E 49 54 45    >
 123++6831             >                org     $-1                 // alter last byte of Name just above to set
 123++6830 C5          >                db      {b $} | END_BIT     // msb as name end
 123++6831             >
 123++6831 0B 68       >                dw      last_NFA            // Link to previous definition Name
 123++6833             >F_WRITE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 123++6833 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
 123++6833             >                else
 123++6833 35 68       >                dw      $ + 2   ; ok        // is pointed by CFA
 123++6835             >                endif           ; ok        // for other definitions it "points" the correct handler
 123++6835             >                // Use of "; ok" to suppress "warning[fwdref]"
 123++6835             >
 123++6835             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 124++6835
 125++6835 50                           ld      d, b
 126++6836 59                           ld      e, c
 127++6837 E1                           pop     hl
 128++6838 7D                           ld      a, l                // file-handle
 129++6839 C1                           pop     bc                  // bc has bytes to read
 130++683A DD E3                        ex      (sp), ix            // ix has address
 131++683C D5                           push    de                  // Save Instruction pointer
 132++683D CF                           rst     $08
 133++683E 9E                           db      $9E
 134++683F 18 DF                        jr F_Read_Exit
 135++6841              //              pop     bc                  // Restore Instruction pointer
 136++6841              //              pop     ix                  // Restore ix
 137++6841              //              push    de                  // bytes written
 138++6841              //              sbc     hl, hl
 139++6841              //
 140++6841              //              psh1
 141++6841
 142++6841              //  ______________________________________________________________________
 143++6841              //
 144++6841              // f_open       a1 a2 b -- u f
 145++6841              // open a file
 146++6841              // a1 (filespec) is a null-terminated string, such as produced by ," definition
 147++6841              // a2 is address to an 8-byte header data used in some cases.
 148++6841              // b is access mode-byte, that is a combination of:
 149++6841              // any/all of:
 150++6841              //   esx_mode_read          $01 request read access
 151++6841              //   esx_mode_write         $02 request write access
 152++6841              //   esx_mode_use_header    $40 read/write +3DOS header
 153++6841              // plus one of:
 154++6841              //   esx_mode_open_exist    $00 only open existing file
 155++6841              //   esx_mode_open_creat    $08 open existing or create file
 156++6841              //   esx_mode_creat_noexist $04 create new file, error if exists
 157++6841              //   esx_mode_creat_trunc   $0c create new file, delete existing
 158++6841              // Return file-handle u and 0 on success, True flag on error
 159++6841                              New_Def F_OPEN, "F_OPEN", is_code, is_normal
 159++6841             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 159++6841             >
 159++6841             >                // dummy db directives used to calculate length of namec
 159++6841 46 5F 4F 50 >                db      "F_OPEN"
 159++6845 45 4E       >
 159++6847             >len_NFA         defl    $ - temp_NFA
 159++6847             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 159++6841             >
 159++6841 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 159++6842 46 5F 4F 50 >                db      "F_OPEN"               // name string in 7-bit ascii, but
 159++6846 45 4E       >
 159++6848             >                org     $-1                 // alter last byte of Name just above to set
 159++6847 CE          >                db      {b $} | END_BIT     // msb as name end
 159++6848             >
 159++6848 29 68       >                dw      last_NFA            // Link to previous definition Name
 159++684A             >F_OPEN:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 159++684A ~           >                dw      runcode ; ok        // for primitive definitions  actual code
 159++684A             >                else
 159++684A 4C 68       >                dw      $ + 2   ; ok        // is pointed by CFA
 159++684C             >                endif           ; ok        // for other definitions it "points" the correct handler
 159++684C             >                // Use of "; ok" to suppress "warning[fwdref]"
 159++684C             >
 159++684C             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 160++684C 60                           ld      h, b                // Save Instruction pointer
 161++684D 69                           ld      l, c
 162++684E C1                           pop     bc                  // file-mode
 163++684F 41                           ld      b, c                // file-mode
 164++6850 D1                           pop     de                  // 8-bytes buffer if any
 165++6851 DD E3                        ex      (sp), ix            // filespec nul-terminated
 166++6853 E5                           push    hl                  // Save Instruction pointer
 167++6854 3E 2A                        ld      a, "*"
 168++6856 CF                           rst     $08
 169++6857 9A                           db      $9A
 170++6858              F_Open_Exit:
 171++6858 5F                           ld      e, a
 172++6859 16 00                        ld      d, 0
 173++685B 18 C3                        jr      F_Read_Exit
 174++685D
 175++685D              //   \ CREATE FILENAME ," test.txt"   \ new Counted String
 176++685D              //   \ FILENAME 1+ PAD 1 F_OPEN
 177++685D              //   \ DROP
 178++685D              //   \ F_CLOSE
 179++685D
 180++685D
 181++685D              //  ______________________________________________________________________
 182++685D              //
 183++685D              // f_opendir    a1 a2 b -- u f
 184++685D              // open a file
 185++685D                              New_Def F_OPENDIR, "F_OPENDIR", is_code, is_normal
 185++685D             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 185++685D             >
 185++685D             >                // dummy db directives used to calculate length of namec
 185++685D 46 5F 4F 50 >                db      "F_OPENDIR"
 185++6861 45 4E 44 49 >
 185++6865 52          >
 185++6866             >len_NFA         defl    $ - temp_NFA
 185++6866             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 185++685D             >
 185++685D 89          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 185++685E 46 5F 4F 50 >                db      "F_OPENDIR"               // name string in 7-bit ascii, but
 185++6862 45 4E 44 49 >
 185++6866 52          >
 185++6867             >                org     $-1                 // alter last byte of Name just above to set
 185++6866 D2          >                db      {b $} | END_BIT     // msb as name end
 185++6867             >
 185++6867 41 68       >                dw      last_NFA            // Link to previous definition Name
 185++6869             >F_OPENDIR:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 185++6869 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
 185++6869             >                else
 185++6869 6B 68       >                dw      $ + 2   ; ok        // is pointed by CFA
 185++686B             >                endif           ; ok        // for other definitions it "points" the correct handler
 185++686B             >                // Use of "; ok" to suppress "warning[fwdref]"
 185++686B             >
 185++686B             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 186++686B DD E3                        ex      (sp), ix            // filespec nul-terminated
 187++686D C5                           push    bc                  // Save Instruction pointer
 188++686E 06 10                        ld      b, $10              // file-mode
 189++6870 3E 43                        ld      a, "C"
 190++6872 CF                           rst     $08
 191++6873 A3                           db      $A3
 192++6874 18 E2                        jr      F_Open_Exit
 193++6876
 194++6876
 195++6876              //  ______________________________________________________________________
 196++6876              //
 197++6876              // f_readdir    a1 a2 b -- u f
 198++6876              // open a file
 199++6876                              New_Def F_READDIR, "F_READDIR", is_code, is_normal
 199++6876             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 199++6876             >
 199++6876             >                // dummy db directives used to calculate length of namec
 199++6876 46 5F 52 45 >                db      "F_READDIR"
 199++687A 41 44 44 49 >
 199++687E 52          >
 199++687F             >len_NFA         defl    $ - temp_NFA
 199++687F             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 199++6876             >
 199++6876 89          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 199++6877 46 5F 52 45 >                db      "F_READDIR"               // name string in 7-bit ascii, but
 199++687B 41 44 44 49 >
 199++687F 52          >
 199++6880             >                org     $-1                 // alter last byte of Name just above to set
 199++687F D2          >                db      {b $} | END_BIT     // msb as name end
 199++6880             >
 199++6880 5D 68       >                dw      last_NFA            // Link to previous definition Name
 199++6882             >F_READDIR:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 199++6882 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
 199++6882             >                else
 199++6882 84 68       >                dw      $ + 2   ; ok        // is pointed by CFA
 199++6884             >                endif           ; ok        // for other definitions it "points" the correct handler
 199++6884             >                // Use of "; ok" to suppress "warning[fwdref]"
 199++6884             >
 199++6884             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 200++6884 E1                           pop     hl
 201++6885 7D                           ld      a, l
 202++6886 D1                           pop     de
 203++6887 DD E3                        ex      (sp), ix            // filespec nul-terminated
 204++6889 C5                           push    bc                  // Save Instruction pointer
 205++688A CF                           rst     $08
 206++688B A4                           db      $A4
 207++688C 18 CA                        jr      F_Open_Exit
 208++688E
# file closed: C:\Zx\CSpect\Projects\vForth15_INDIRECT/source/next-opt0.asm
 965+ 688E
 966+ 688E
 967+ 688E              //  ______________________________________________________________________
 968+ 688E              //
 969+ 688E              // cmove    a1 a2 u --
 970+ 688E              // If u > 0, moves memory content starting at address a1 for n bytes long
 971+ 688E              // storing then starting at address addr2.
 972+ 688E              // The content of a1 is moved first. See CMOVE> also.
 973+ 688E                              New_Def CMOVE, "CMOVE", is_code, is_normal
 973+ 688E             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 973+ 688E             >
 973+ 688E             >                // dummy db directives used to calculate length of namec
 973+ 688E 43 4D 4F 56 >                db      "CMOVE"
 973+ 6892 45          >
 973+ 6893             >len_NFA         defl    $ - temp_NFA
 973+ 6893             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 973+ 688E             >
 973+ 688E 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 973+ 688F 43 4D 4F 56 >                db      "CMOVE"               // name string in 7-bit ascii, but
 973+ 6893 45          >
 973+ 6894             >                org     $-1                 // alter last byte of Name just above to set
 973+ 6893 C5          >                db      {b $} | END_BIT     // msb as name end
 973+ 6894             >
 973+ 6894 76 68       >                dw      last_NFA            // Link to previous definition Name
 973+ 6896             >CMOVE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 973+ 6896 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
 973+ 6896             >                else
 973+ 6896 98 68       >                dw      $ + 2   ; ok        // is pointed by CFA
 973+ 6898             >                endif           ; ok        // for other definitions it "points" the correct handler
 973+ 6898             >                // Use of "; ok" to suppress "warning[fwdref]"
 973+ 6898             >
 973+ 6898             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 974+ 6898 D9                           exx
 975+ 6899 C1                           pop     bc                  // bc has counter
 976+ 689A D1                           pop     de                  // de now has dest
 977+ 689B E1                           pop     hl                  // hl has source, save Instruction Pointer
 978+ 689C 78                           ld      a, b
 979+ 689D B1                           or      c
 980+ 689E 28 02                        jr      z, Cmove_NoMove
 981+ 68A0 ED B0                            ldir
 982+ 68A2              Cmove_NoMove:
 983+ 68A2 D9                           exx
 984+ 68A3                              next
 984+ 68A3 DD E9       >                jp      (ix)
 985+ 68A5
 986+ 68A5              //  ______________________________________________________________________
 987+ 68A5              //
 988+ 68A5              // cmove>    a1 a2 u --
 989+ 68A5              // If u > 0, moves memory content starting at address a1 for n bytes long
 990+ 68A5              // storing then starting at address addr2.
 991+ 68A5              // The content of a1 is moved last. See cmove.
 992+ 68A5                              New_Def CMOVE_TO, "CMOVE>", is_code, is_normal
 992+ 68A5             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 992+ 68A5             >
 992+ 68A5             >                // dummy db directives used to calculate length of namec
 992+ 68A5 43 4D 4F 56 >                db      "CMOVE>"
 992+ 68A9 45 3E       >
 992+ 68AB             >len_NFA         defl    $ - temp_NFA
 992+ 68AB             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 992+ 68A5             >
 992+ 68A5 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 992+ 68A6 43 4D 4F 56 >                db      "CMOVE>"               // name string in 7-bit ascii, but
 992+ 68AA 45 3E       >
 992+ 68AC             >                org     $-1                 // alter last byte of Name just above to set
 992+ 68AB BE          >                db      {b $} | END_BIT     // msb as name end
 992+ 68AC             >
 992+ 68AC 8E 68       >                dw      last_NFA            // Link to previous definition Name
 992+ 68AE             >CMOVE_TO:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 992+ 68AE ~           >                dw      runcode ; ok        // for primitive definitions  actual code
 992+ 68AE             >                else
 992+ 68AE B0 68       >                dw      $ + 2   ; ok        // is pointed by CFA
 992+ 68B0             >                endif           ; ok        // for other definitions it "points" the correct handler
 992+ 68B0             >                // Use of "; ok" to suppress "warning[fwdref]"
 992+ 68B0             >
 992+ 68B0             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 993+ 68B0 D9                           exx
 994+ 68B1 C1                           pop     bc                  // bc has counter
 995+ 68B2 D1                           pop     de                  // de has dest
 996+ 68B3 E1                           pop     hl                  // hl has source, save Instruction Pointer
 997+ 68B4 78                           ld      a, b
 998+ 68B5 B1                           or      c
 999+ 68B6 28 08                        jr      z, CmoveV_NoMove
1000+ 68B8 EB                               ex      de, hl              // compute address to
1001+ 68B9 09                               add     hl, bc              // operate backward
1002+ 68BA 2B                               dec     hl
1003+ 68BB EB                               ex      de, hl
1004+ 68BC 09                               add     hl, bc
1005+ 68BD 2B                               dec     hl
1006+ 68BE ED B8                            lddr                        // backward
1007+ 68C0              CmoveV_NoMove:
1008+ 68C0 D9                           exx
1009+ 68C1                              next
1009+ 68C1 DD E9       >                jp      (ix)
1010+ 68C3
1011+ 68C3              //  ______________________________________________________________________
1012+ 68C3              //
1013+ 68C3              // um*      u1 u2 -- ud
1014+ 68C3              // Unsigned multiplication
1015+ 68C3              // A double-integer is kept in CPU registers as DEHL then pushed on stack.
1016+ 68C3              // On the stack a double number is treated as two single numbers
1017+ 68C3              // where DE is on the top of the stack and HL is the second from top,
1018+ 68C3              // Instead, in 2VARIABLE a double number is stored as EDLH.
1019+ 68C3              // this definition could use "MUL" Z80N new op-code.
1020+ 68C3                              New_Def UM_MUL, "UM*", is_code, is_normal
1020+ 68C3             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1020+ 68C3             >
1020+ 68C3             >                // dummy db directives used to calculate length of namec
1020+ 68C3 55 4D 2A    >                db      "UM*"
1020+ 68C6             >len_NFA         defl    $ - temp_NFA
1020+ 68C6             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1020+ 68C3             >
1020+ 68C3 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1020+ 68C4 55 4D 2A    >                db      "UM*"               // name string in 7-bit ascii, but
1020+ 68C7             >                org     $-1                 // alter last byte of Name just above to set
1020+ 68C6 AA          >                db      {b $} | END_BIT     // msb as name end
1020+ 68C7             >
1020+ 68C7 A5 68       >                dw      last_NFA            // Link to previous definition Name
1020+ 68C9             >UM_MUL:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1020+ 68C9 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1020+ 68C9             >                else
1020+ 68C9 CB 68       >                dw      $ + 2   ; ok        // is pointed by CFA
1020+ 68CB             >                endif           ; ok        // for other definitions it "points" the correct handler
1020+ 68CB             >                // Use of "; ok" to suppress "warning[fwdref]"
1020+ 68CB             >
1020+ 68CB             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1021+ 68CB D9                           exx
1022+ 68CC D1                           pop     de                    // de has u2 operand
1023+ 68CD E1                           pop     hl                    // hl has u1 operand
1024+ 68CE 45                           ld      b, l
1025+ 68CF 4B                           ld      c, e
1026+ 68D0 5D                           ld      e, l
1027+ 68D1 6A                           ld      l, d
1028+ 68D2 E5                           push    hl
1029+ 68D3 69                           ld      l, c
1030+ 68D4 ED 30                        mul
1031+ 68D6 EB                           ex      de, hl
1032+ 68D7 ED 30                        mul
1033+ 68D9 AF                           xor     a
1034+ 68DA 19                           add     hl, de
1035+ 68DB 8F                           adc     a
1036+ 68DC 59                           ld      e, c
1037+ 68DD 50                           ld      d, b
1038+ 68DE ED 30                        mul
1039+ 68E0 47                           ld      b, a
1040+ 68E1 4C                           ld      c, h
1041+ 68E2 7A                           ld      a, d
1042+ 68E3 85                           add     l
1043+ 68E4 67                           ld      h, a
1044+ 68E5 6B                           ld      l, e
1045+ 68E6 D1                           pop     de
1046+ 68E7 ED 30                        mul
1047+ 68E9 EB                           ex      de, hl
1048+ 68EA ED 4A                        adc     hl, bc
1049+ 68EC D5                           push    de
1050+ 68ED E5                           push    hl
1051+ 68EE D9                           exx
1052+ 68EF                              next
1052+ 68EF DD E9       >                jp      (ix)
1053+ 68F1
1054+ 68F1              //  ______________________________________________________________________
1055+ 68F1              //
1056+ 68F1              // um/mod      ud u1 -- q r
1057+ 68F1              // divides ud into u1 giving quotient q and remainder r
1058+ 68F1              // algorithm takes 16 bit at a time starting from msb
1059+ 68F1              // DE grows from lsb upward with quotient result
1060+ 68F1              // HL keeps the remainder at each stage of division
1061+ 68F1              // each loop 'lowers' the next binary digit to form the current dividend
1062+ 68F1                              New_Def UMDIVMOD, "UM/MOD", is_code, is_normal
1062+ 68F1             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1062+ 68F1             >
1062+ 68F1             >                // dummy db directives used to calculate length of namec
1062+ 68F1 55 4D 2F 4D >                db      "UM/MOD"
1062+ 68F5 4F 44       >
1062+ 68F7             >len_NFA         defl    $ - temp_NFA
1062+ 68F7             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1062+ 68F1             >
1062+ 68F1 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1062+ 68F2 55 4D 2F 4D >                db      "UM/MOD"               // name string in 7-bit ascii, but
1062+ 68F6 4F 44       >
1062+ 68F8             >                org     $-1                 // alter last byte of Name just above to set
1062+ 68F7 C4          >                db      {b $} | END_BIT     // msb as name end
1062+ 68F8             >
1062+ 68F8 C3 68       >                dw      last_NFA            // Link to previous definition Name
1062+ 68FA             >UMDIVMOD:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1062+ 68FA ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1062+ 68FA             >                else
1062+ 68FA FC 68       >                dw      $ + 2   ; ok        // is pointed by CFA
1062+ 68FC             >                endif           ; ok        // for other definitions it "points" the correct handler
1062+ 68FC             >                // Use of "; ok" to suppress "warning[fwdref]"
1062+ 68FC             >
1062+ 68FC             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1063+ 68FC D9                           exx
1064+ 68FD C1                           pop     bc                      // divisor
1065+ 68FE
1066+ 68FE E1                           pop     hl                      // < high part
1067+ 68FF D1                           pop     de                      // < low part and
1068+ 6900
1069+ 6900 7D                           ld      a, l                    // check without changing arguments
1070+ 6901 91                           sub     c                       // if divisor is greater than high part
1071+ 6902 7C                           ld      a, h                    // so quotient will be in range
1072+ 6903 98                           sbc     a, b
1073+ 6904 30 20                        jr      nc, Um_DivMod_OutOfRange
1074+ 6906 3E 10                            ld      a, 16
1075+ 6908              Um_DivMod_Loop:
1076+ 6908 CB 23                                sla     e
1077+ 690A CB 12                                rl      d
1078+ 690C ED 6A                                adc     hl, hl
1079+ 690E 30 05                                jr      nc, Um_DivMod_Carry
1080+ 6910 A7                                       and     a
1081+ 6911 ED 42                                    sbc     hl, bc
1082+ 6913 18 07                                jr      Um_DivMod_Endif    // else
1083+ 6915              Um_DivMod_Carry:
1084+ 6915 A7                                       and     a
1085+ 6916 ED 42                                    sbc     hl, bc
1086+ 6918 30 02                                    jr      nc, Um_DivMod_Endif
1087+ 691A 09                                           add     hl, bc
1088+ 691B 1B                                           dec     de
1089+ 691C              Um_DivMod_Endif:                                   // endif
1090+ 691C 13                                   inc     de
1091+ 691D 3D                                   dec     a
1092+ 691E 20 E8                            jr      nz, Um_DivMod_Loop
1093+ 6920 EB                               ex      de, hl
1094+ 6921              Um_DivMod_Bailout:
1095+ 6921 D5                               push    de                  // de := remanider
1096+ 6922 E5                               push    hl                  // hl := quotient
1097+ 6923 D9                               exx
1098+ 6924                                  next
1098+ 6924 DD E9       >                jp      (ix)
1099+ 6926
1100+ 6926              Um_DivMod_OutOfRange:
1101+ 6926 21 FF FF                     ld      hl, -1
1102+ 6929 54                           ld      d, h
1103+ 692A 5D                           ld      e, l
1104+ 692B 18 F4                        jr      Um_DivMod_Bailout
1105+ 692D
1106+ 692D              //  ______________________________________________________________________
1107+ 692D              //
1108+ 692D              // and          n1 n2 -- n3
1109+ 692D              // bit logical AND. Returns n3 as n1 & n2
1110+ 692D                              New_Def AND_OP, "AND", is_code, is_normal
1110+ 692D             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1110+ 692D             >
1110+ 692D             >                // dummy db directives used to calculate length of namec
1110+ 692D 41 4E 44    >                db      "AND"
1110+ 6930             >len_NFA         defl    $ - temp_NFA
1110+ 6930             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1110+ 692D             >
1110+ 692D 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1110+ 692E 41 4E 44    >                db      "AND"               // name string in 7-bit ascii, but
1110+ 6931             >                org     $-1                 // alter last byte of Name just above to set
1110+ 6930 C4          >                db      {b $} | END_BIT     // msb as name end
1110+ 6931             >
1110+ 6931 F1 68       >                dw      last_NFA            // Link to previous definition Name
1110+ 6933             >AND_OP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1110+ 6933 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1110+ 6933             >                else
1110+ 6933 35 69       >                dw      $ + 2   ; ok        // is pointed by CFA
1110+ 6935             >                endif           ; ok        // for other definitions it "points" the correct handler
1110+ 6935             >                // Use of "; ok" to suppress "warning[fwdref]"
1110+ 6935             >
1110+ 6935             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1111+ 6935 D1                           pop     de
1112+ 6936 E1                           pop     hl
1113+ 6937 7B                           ld      a, e
1114+ 6938 A5                           and     l
1115+ 6939 6F                           ld      l, a
1116+ 693A 7A                           ld      a, d
1117+ 693B A4                           and     h
1118+ 693C 67                           ld      h, a
1119+ 693D
1120+ 693D                              psh1
1120+ 693D E5          >                push    hl
1120+ 693E DD E9       >                jp      (ix)
1121+ 6940
1122+ 6940              //  ______________________________________________________________________
1123+ 6940              //
1124+ 6940              // or           n1 n2 -- n3
1125+ 6940              // bit logical OR. Returns n3 as n1 | n2
1126+ 6940                              New_Def OR_OP, "OR", is_code, is_normal
1126+ 6940             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1126+ 6940             >
1126+ 6940             >                // dummy db directives used to calculate length of namec
1126+ 6940 4F 52       >                db      "OR"
1126+ 6942             >len_NFA         defl    $ - temp_NFA
1126+ 6942             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1126+ 6940             >
1126+ 6940 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1126+ 6941 4F 52       >                db      "OR"               // name string in 7-bit ascii, but
1126+ 6943             >                org     $-1                 // alter last byte of Name just above to set
1126+ 6942 D2          >                db      {b $} | END_BIT     // msb as name end
1126+ 6943             >
1126+ 6943 2D 69       >                dw      last_NFA            // Link to previous definition Name
1126+ 6945             >OR_OP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1126+ 6945 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1126+ 6945             >                else
1126+ 6945 47 69       >                dw      $ + 2   ; ok        // is pointed by CFA
1126+ 6947             >                endif           ; ok        // for other definitions it "points" the correct handler
1126+ 6947             >                // Use of "; ok" to suppress "warning[fwdref]"
1126+ 6947             >
1126+ 6947             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1127+ 6947 D1                           pop     de
1128+ 6948 E1                           pop     hl
1129+ 6949 7B                           ld      a, e
1130+ 694A B5                           or      l
1131+ 694B 6F                           ld      l, a
1132+ 694C 7A                           ld      a, d
1133+ 694D B4                           or      h
1134+ 694E 67                           ld      h, a
1135+ 694F
1136+ 694F                              psh1
1136+ 694F E5          >                push    hl
1136+ 6950 DD E9       >                jp      (ix)
1137+ 6952
1138+ 6952              //  ______________________________________________________________________
1139+ 6952              //
1140+ 6952              // xor          n1 n2 -- n3
1141+ 6952              // bit logical OR. Returns n3 as n1 ^ n2
1142+ 6952                              New_Def XOR_OP, "XOR", is_code, is_normal
1142+ 6952             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1142+ 6952             >
1142+ 6952             >                // dummy db directives used to calculate length of namec
1142+ 6952 58 4F 52    >                db      "XOR"
1142+ 6955             >len_NFA         defl    $ - temp_NFA
1142+ 6955             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1142+ 6952             >
1142+ 6952 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1142+ 6953 58 4F 52    >                db      "XOR"               // name string in 7-bit ascii, but
1142+ 6956             >                org     $-1                 // alter last byte of Name just above to set
1142+ 6955 D2          >                db      {b $} | END_BIT     // msb as name end
1142+ 6956             >
1142+ 6956 40 69       >                dw      last_NFA            // Link to previous definition Name
1142+ 6958             >XOR_OP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1142+ 6958 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1142+ 6958             >                else
1142+ 6958 5A 69       >                dw      $ + 2   ; ok        // is pointed by CFA
1142+ 695A             >                endif           ; ok        // for other definitions it "points" the correct handler
1142+ 695A             >                // Use of "; ok" to suppress "warning[fwdref]"
1142+ 695A             >
1142+ 695A             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1143+ 695A D1                           pop     de
1144+ 695B E1                           pop     hl
1145+ 695C 7B                           ld      a, e
1146+ 695D AD                           xor     l
1147+ 695E 6F                           ld      l, a
1148+ 695F 7A                           ld      a, d
1149+ 6960 AC                           xor     h
1150+ 6961 67                           ld      h, a
1151+ 6962
1152+ 6962                              psh1
1152+ 6962 E5          >                push    hl
1152+ 6963 DD E9       >                jp      (ix)
1153+ 6965
1154+ 6965              //  ______________________________________________________________________
1155+ 6965              //
1156+ 6965              // sp@      -- a
1157+ 6965              // returns on top of stack the value of SP before execution
1158+ 6965                              New_Def SPFETCH, "SP@", is_code, is_normal
1158+ 6965             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1158+ 6965             >
1158+ 6965             >                // dummy db directives used to calculate length of namec
1158+ 6965 53 50 40    >                db      "SP@"
1158+ 6968             >len_NFA         defl    $ - temp_NFA
1158+ 6968             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1158+ 6965             >
1158+ 6965 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1158+ 6966 53 50 40    >                db      "SP@"               // name string in 7-bit ascii, but
1158+ 6969             >                org     $-1                 // alter last byte of Name just above to set
1158+ 6968 C0          >                db      {b $} | END_BIT     // msb as name end
1158+ 6969             >
1158+ 6969 52 69       >                dw      last_NFA            // Link to previous definition Name
1158+ 696B             >SPFETCH:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1158+ 696B ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1158+ 696B             >                else
1158+ 696B 6D 69       >                dw      $ + 2   ; ok        // is pointed by CFA
1158+ 696D             >                endif           ; ok        // for other definitions it "points" the correct handler
1158+ 696D             >                // Use of "; ok" to suppress "warning[fwdref]"
1158+ 696D             >
1158+ 696D             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1159+ 696D
1160+ 696D 21 00 00                     ld      hl, 0
1161+ 6970 39                           add     hl, sp
1162+ 6971
1163+ 6971                              psh1
1163+ 6971 E5          >                push    hl
1163+ 6972 DD E9       >                jp      (ix)
1164+ 6974
1165+ 6974              //  ______________________________________________________________________
1166+ 6974              //
1167+ 6974              // sp!      a --
1168+ 6974              // restore SP to the initial value passed
1169+ 6974              // normally it is S0, i.e. the word at offset 6 and 7 of user variabiles area.
1170+ 6974                              New_Def SPSTORE, "SP!", is_code, is_normal
1170+ 6974             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1170+ 6974             >
1170+ 6974             >                // dummy db directives used to calculate length of namec
1170+ 6974 53 50 21    >                db      "SP!"
1170+ 6977             >len_NFA         defl    $ - temp_NFA
1170+ 6977             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1170+ 6974             >
1170+ 6974 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1170+ 6975 53 50 21    >                db      "SP!"               // name string in 7-bit ascii, but
1170+ 6978             >                org     $-1                 // alter last byte of Name just above to set
1170+ 6977 A1          >                db      {b $} | END_BIT     // msb as name end
1170+ 6978             >
1170+ 6978 65 69       >                dw      last_NFA            // Link to previous definition Name
1170+ 697A             >SPSTORE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1170+ 697A ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1170+ 697A             >                else
1170+ 697A 7C 69       >                dw      $ + 2   ; ok        // is pointed by CFA
1170+ 697C             >                endif           ; ok        // for other definitions it "points" the correct handler
1170+ 697C             >                // Use of "; ok" to suppress "warning[fwdref]"
1170+ 697C             >
1170+ 697C             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1171+ 697C E1                           pop     hl
1172+ 697D F9                           ld      sp, hl
1173+ 697E
1174+ 697E                              next
1174+ 697E DD E9       >                jp      (ix)
1175+ 6980
1176+ 6980              //  ______________________________________________________________________
1177+ 6980              //
1178+ 6980              // rp@      -- a
1179+ 6980              // returns on top of stack the value of Return-Pointer
1180+ 6980                              New_Def RPFETCH, "RP@", is_code, is_normal
1180+ 6980             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1180+ 6980             >
1180+ 6980             >                // dummy db directives used to calculate length of namec
1180+ 6980 52 50 40    >                db      "RP@"
1180+ 6983             >len_NFA         defl    $ - temp_NFA
1180+ 6983             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1180+ 6980             >
1180+ 6980 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1180+ 6981 52 50 40    >                db      "RP@"               // name string in 7-bit ascii, but
1180+ 6984             >                org     $-1                 // alter last byte of Name just above to set
1180+ 6983 C0          >                db      {b $} | END_BIT     // msb as name end
1180+ 6984             >
1180+ 6984 74 69       >                dw      last_NFA            // Link to previous definition Name
1180+ 6986             >RPFETCH:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1180+ 6986 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1180+ 6986             >                else
1180+ 6986 88 69       >                dw      $ + 2   ; ok        // is pointed by CFA
1180+ 6988             >                endif           ; ok        // for other definitions it "points" the correct handler
1180+ 6988             >                // Use of "; ok" to suppress "warning[fwdref]"
1180+ 6988             >
1180+ 6988             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1181+ 6988
1182+ 6988                              ldhlrp
1182+ 6988 2A 96 63    >                ld      hl,(RP_Pointer)
1183+ 698B
1184+ 698B                              psh1
1184+ 698B E5          >                push    hl
1184+ 698C DD E9       >                jp      (ix)
1185+ 698E
1186+ 698E              //  ______________________________________________________________________
1187+ 698E              //
1188+ 698E              // rp!      a --
1189+ 698E              // restore RP to the initial value passed
1190+ 698E              // normally it is R0 @, i.e. the word at offset 8 of user variabiles area.
1191+ 698E                              New_Def RPSTORE, "RP!", is_code, is_normal
1191+ 698E             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1191+ 698E             >
1191+ 698E             >                // dummy db directives used to calculate length of namec
1191+ 698E 52 50 21    >                db      "RP!"
1191+ 6991             >len_NFA         defl    $ - temp_NFA
1191+ 6991             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1191+ 698E             >
1191+ 698E 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1191+ 698F 52 50 21    >                db      "RP!"               // name string in 7-bit ascii, but
1191+ 6992             >                org     $-1                 // alter last byte of Name just above to set
1191+ 6991 A1          >                db      {b $} | END_BIT     // msb as name end
1191+ 6992             >
1191+ 6992 80 69       >                dw      last_NFA            // Link to previous definition Name
1191+ 6994             >RPSTORE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1191+ 6994 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1191+ 6994             >                else
1191+ 6994 96 69       >                dw      $ + 2   ; ok        // is pointed by CFA
1191+ 6996             >                endif           ; ok        // for other definitions it "points" the correct handler
1191+ 6996             >                // Use of "; ok" to suppress "warning[fwdref]"
1191+ 6996             >
1191+ 6996             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1192+ 6996 E1                           pop     hl
1193+ 6997                              ldrphl
1193+ 6997 22 96 63    >                ld      (RP_Pointer),hl
1194+ 699A
1195+ 699A                              next
1195+ 699A DD E9       >                jp      (ix)
1196+ 699C
1197+ 699C              //  ______________________________________________________________________
1198+ 699C              //
1199+ 699C              // exit      --
1200+ 699C              // exits back to the caller word
1201+ 699C                              New_Def EXIT, "EXIT", is_code, is_normal
1201+ 699C             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1201+ 699C             >
1201+ 699C             >                // dummy db directives used to calculate length of namec
1201+ 699C 45 58 49 54 >                db      "EXIT"
1201+ 69A0             >len_NFA         defl    $ - temp_NFA
1201+ 69A0             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1201+ 699C             >
1201+ 699C 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1201+ 699D 45 58 49 54 >                db      "EXIT"               // name string in 7-bit ascii, but
1201+ 69A1             >                org     $-1                 // alter last byte of Name just above to set
1201+ 69A0 D4          >                db      {b $} | END_BIT     // msb as name end
1201+ 69A1             >
1201+ 69A1 8E 69       >                dw      last_NFA            // Link to previous definition Name
1201+ 69A3             >EXIT:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1201+ 69A3 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1201+ 69A3             >                else
1201+ 69A3 A5 69       >                dw      $ + 2   ; ok        // is pointed by CFA
1201+ 69A5             >                endif           ; ok        // for other definitions it "points" the correct handler
1201+ 69A5             >                // Use of "; ok" to suppress "warning[fwdref]"
1201+ 69A5             >
1201+ 69A5             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1202+ 69A5                              ldhlrp                      // Get Return Stack Pointer
1202+ 69A5 2A 96 63    >                ld      hl,(RP_Pointer)
1203+ 69A8 4E                           ld      c, (hl)             // pop Instruction Pointer
1204+ 69A9 23                           inc     hl                  // from Return Stack
1205+ 69AA 46                           ld      b, (hl)
1206+ 69AB 23                           inc     hl
1207+ 69AC                              ldrphl                      // Set Return Stack Pointer
1207+ 69AC 22 96 63    >                ld      (RP_Pointer),hl
1208+ 69AF                              next
1208+ 69AF DD E9       >                jp      (ix)
1209+ 69B1
1210+ 69B1              //  ______________________________________________________________________
1211+ 69B1              //
1212+ 69B1              // lastl      --
1213+ 69B1              // exits back to the caller word
1214+ 69B1              //              New_Def EXIT, "LASTL", is_code, is_normal
1215+ 69B1              //              ldhlrp                      // Get Return Stack Pointer
1216+ 69B1              //              ld      e, (hl)             // pop Instruction Pointer
1217+ 69B1              //              inc     hl                  // from Return Stack
1218+ 69B1              //              ld      d, (hl)
1219+ 69B1              //              inc     hl
1220+ 69B1              //              ld      (hl), e
1221+ 69B1              //              inc     hl
1222+ 69B1              //              ld      (hl), d
1223+ 69B1              //              next
1224+ 69B1
1225+ 69B1              //  ______________________________________________________________________
1226+ 69B1              //
1227+ 69B1              // >r      n --
1228+ 69B1              // pop from calculator-stack and push into return-stack
1229+ 69B1                              New_Def TO_R, ">R", is_code, is_normal
1229+ 69B1             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1229+ 69B1             >
1229+ 69B1             >                // dummy db directives used to calculate length of namec
1229+ 69B1 3E 52       >                db      ">R"
1229+ 69B3             >len_NFA         defl    $ - temp_NFA
1229+ 69B3             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1229+ 69B1             >
1229+ 69B1 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1229+ 69B2 3E 52       >                db      ">R"               // name string in 7-bit ascii, but
1229+ 69B4             >                org     $-1                 // alter last byte of Name just above to set
1229+ 69B3 D2          >                db      {b $} | END_BIT     // msb as name end
1229+ 69B4             >
1229+ 69B4 9C 69       >                dw      last_NFA            // Link to previous definition Name
1229+ 69B6             >TO_R:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1229+ 69B6 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1229+ 69B6             >                else
1229+ 69B6 B8 69       >                dw      $ + 2   ; ok        // is pointed by CFA
1229+ 69B8             >                endif           ; ok        // for other definitions it "points" the correct handler
1229+ 69B8             >                // Use of "; ok" to suppress "warning[fwdref]"
1229+ 69B8             >
1229+ 69B8             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1230+ 69B8 D1                           pop     de
1231+ 69B9                              ldhlrp
1231+ 69B9 2A 96 63    >                ld      hl,(RP_Pointer)
1232+ 69BC 2B                           dec     hl
1233+ 69BD 72                           ld      (hl), d             // store current TOS
1234+ 69BE 2B                           dec     hl                  // to Return Stack
1235+ 69BF 73                           ld      (hl), e
1236+ 69C0                              ldrphl
1236+ 69C0 22 96 63    >                ld      (RP_Pointer),hl
1237+ 69C3
1238+ 69C3                              next
1238+ 69C3 DD E9       >                jp      (ix)
1239+ 69C5
1240+ 69C5              //  ______________________________________________________________________
1241+ 69C5              //
1242+ 69C5              // r>      -- n
1243+ 69C5              // pop from return-stack and push into calculator-stack
1244+ 69C5                              New_Def R_TO, "R>", is_code, is_normal
1244+ 69C5             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1244+ 69C5             >
1244+ 69C5             >                // dummy db directives used to calculate length of namec
1244+ 69C5 52 3E       >                db      "R>"
1244+ 69C7             >len_NFA         defl    $ - temp_NFA
1244+ 69C7             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1244+ 69C5             >
1244+ 69C5 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1244+ 69C6 52 3E       >                db      "R>"               // name string in 7-bit ascii, but
1244+ 69C8             >                org     $-1                 // alter last byte of Name just above to set
1244+ 69C7 BE          >                db      {b $} | END_BIT     // msb as name end
1244+ 69C8             >
1244+ 69C8 B1 69       >                dw      last_NFA            // Link to previous definition Name
1244+ 69CA             >R_TO:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1244+ 69CA ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1244+ 69CA             >                else
1244+ 69CA CC 69       >                dw      $ + 2   ; ok        // is pointed by CFA
1244+ 69CC             >                endif           ; ok        // for other definitions it "points" the correct handler
1244+ 69CC             >                // Use of "; ok" to suppress "warning[fwdref]"
1244+ 69CC             >
1244+ 69CC             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1245+ 69CC
1246+ 69CC                              ldhlrp
1246+ 69CC 2A 96 63    >                ld      hl,(RP_Pointer)
1247+ 69CF 5E                           ld      e, (hl)             // retrieve from Return Stack
1248+ 69D0 23                           inc     hl
1249+ 69D1 56                           ld      d, (hl)
1250+ 69D2 23                           inc     hl
1251+ 69D3                              ldrphl
1251+ 69D3 22 96 63    >                ld      (RP_Pointer),hl
1252+ 69D6 D5                           push    de
1253+ 69D7                              next
1253+ 69D7 DD E9       >                jp      (ix)
1254+ 69D9
1255+ 69D9              //  ______________________________________________________________________
1256+ 69D9              //
1257+ 69D9              // r@            -- n
1258+ 69D9              // return on top of stack the value of top of return-stack
1259+ 69D9              // Since this is the same as I, we alter R's CFA to jump there
1260+ 69D9                              New_Def R_OP, "R@", I_Ptr, is_normal
1260+ 69D9             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1260+ 69D9             >
1260+ 69D9             >                // dummy db directives used to calculate length of namec
1260+ 69D9 52 40       >                db      "R@"
1260+ 69DB             >len_NFA         defl    $ - temp_NFA
1260+ 69DB             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1260+ 69D9             >
1260+ 69D9 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1260+ 69DA 52 40       >                db      "R@"               // name string in 7-bit ascii, but
1260+ 69DC             >                org     $-1                 // alter last byte of Name just above to set
1260+ 69DB C0          >                db      {b $} | END_BIT     // msb as name end
1260+ 69DC             >
1260+ 69DC C5 69       >                dw      last_NFA            // Link to previous definition Name
1260+ 69DE             >R_OP:          if I_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1260+ 69DE 92 64       >                dw      I_Ptr ; ok        // for primitive definitions  actual code
1260+ 69E0             >                else
1260+ 69E0 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
1260+ 69E0             >                endif           ; ok        // for other definitions it "points" the correct handler
1260+ 69E0             >                // Use of "; ok" to suppress "warning[fwdref]"
1260+ 69E0             >
1260+ 69E0             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1261+ 69E0
1262+ 69E0              //  ______________________________________________________________________
1263+ 69E0              //
1264+ 69E0              // r            -- n
1265+ 69E0              // return on top of stack the value of top of return-stack
1266+ 69E0              // Since this is the same as I, we alter R's CFA to jump there
1267+ 69E0              //              New_Def R_OLD, "R", I_Ptr, is_normal
1268+ 69E0
1269+ 69E0              //  ______________________________________________________________________
1270+ 69E0              //
1271+ 69E0              // 0=           n -- f
1272+ 69E0              // true (non zero) if n is zero, false (0) elsewere
1273+ 69E0                              New_Def ZEQUAL, "0=", is_code, is_normal
1273+ 69E0             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1273+ 69E0             >
1273+ 69E0             >                // dummy db directives used to calculate length of namec
1273+ 69E0 30 3D       >                db      "0="
1273+ 69E2             >len_NFA         defl    $ - temp_NFA
1273+ 69E2             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1273+ 69E0             >
1273+ 69E0 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1273+ 69E1 30 3D       >                db      "0="               // name string in 7-bit ascii, but
1273+ 69E3             >                org     $-1                 // alter last byte of Name just above to set
1273+ 69E2 BD          >                db      {b $} | END_BIT     // msb as name end
1273+ 69E3             >
1273+ 69E3 D9 69       >                dw      last_NFA            // Link to previous definition Name
1273+ 69E5             >ZEQUAL:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1273+ 69E5 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1273+ 69E5             >                else
1273+ 69E5 E7 69       >                dw      $ + 2   ; ok        // is pointed by CFA
1273+ 69E7             >                endif           ; ok        // for other definitions it "points" the correct handler
1273+ 69E7             >                // Use of "; ok" to suppress "warning[fwdref]"
1273+ 69E7             >
1273+ 69E7             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1274+ 69E7              Zero_Equal:
1275+ 69E7 E1                           pop     hl
1276+ 69E8 7D                           ld      a, l
1277+ 69E9 B4                           or      h
1278+ 69EA 21 00 00                     ld      hl, FALSE_FLAG
1279+ 69ED 20 01                        jr      nz, ZEqual_Skip
1280+ 69EF 2B                               dec     hl
1281+ 69F0              ZEqual_Skip:
1282+ 69F0                              psh1
1282+ 69F0 E5          >                push    hl
1282+ 69F1 DD E9       >                jp      (ix)
1283+ 69F3
1284+ 69F3              //  ______________________________________________________________________
1285+ 69F3              //
1286+ 69F3              // not         a1 -- a2
1287+ 69F3              // increment by 2 top of stack
1288+ 69F3                              New_Def NOT_OP, "NOT", Zero_Equal, is_normal
1288+ 69F3             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1288+ 69F3             >
1288+ 69F3             >                // dummy db directives used to calculate length of namec
1288+ 69F3 4E 4F 54    >                db      "NOT"
1288+ 69F6             >len_NFA         defl    $ - temp_NFA
1288+ 69F6             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1288+ 69F3             >
1288+ 69F3 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1288+ 69F4 4E 4F 54    >                db      "NOT"               // name string in 7-bit ascii, but
1288+ 69F7             >                org     $-1                 // alter last byte of Name just above to set
1288+ 69F6 D4          >                db      {b $} | END_BIT     // msb as name end
1288+ 69F7             >
1288+ 69F7 E0 69       >                dw      last_NFA            // Link to previous definition Name
1288+ 69F9             >NOT_OP:          if Zero_Equal != 0 ; ok        // This is the start address of the direct jp(hl)
1288+ 69F9 E7 69       >                dw      Zero_Equal ; ok        // for primitive definitions  actual code
1288+ 69FB             >                else
1288+ 69FB ~           >                dw      $ + 2   ; ok        // is pointed by CFA
1288+ 69FB             >                endif           ; ok        // for other definitions it "points" the correct handler
1288+ 69FB             >                // Use of "; ok" to suppress "warning[fwdref]"
1288+ 69FB             >
1288+ 69FB             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1289+ 69FB
1290+ 69FB              //  ______________________________________________________________________
1291+ 69FB              //
1292+ 69FB              // 0<           n -- f
1293+ 69FB              // true (non zero) if n is less than zero, false (0) elsewere
1294+ 69FB                              New_Def ZLESS, "0<", is_code, is_normal
1294+ 69FB             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1294+ 69FB             >
1294+ 69FB             >                // dummy db directives used to calculate length of namec
1294+ 69FB 30 3C       >                db      "0<"
1294+ 69FD             >len_NFA         defl    $ - temp_NFA
1294+ 69FD             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1294+ 69FB             >
1294+ 69FB 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1294+ 69FC 30 3C       >                db      "0<"               // name string in 7-bit ascii, but
1294+ 69FE             >                org     $-1                 // alter last byte of Name just above to set
1294+ 69FD BC          >                db      {b $} | END_BIT     // msb as name end
1294+ 69FE             >
1294+ 69FE F3 69       >                dw      last_NFA            // Link to previous definition Name
1294+ 6A00             >ZLESS:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1294+ 6A00 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1294+ 6A00             >                else
1294+ 6A00 02 6A       >                dw      $ + 2   ; ok        // is pointed by CFA
1294+ 6A02             >                endif           ; ok        // for other definitions it "points" the correct handler
1294+ 6A02             >                // Use of "; ok" to suppress "warning[fwdref]"
1294+ 6A02             >
1294+ 6A02             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1295+ 6A02 E1                           pop     hl
1296+ 6A03 29                           add     hl, hl
1297+ 6A04 21 00 00                     ld      hl, 0
1298+ 6A07 30 01                        jr      nc, ZLess_Skip
1299+ 6A09 2B                               dec     hl
1300+ 6A0A              ZLess_Skip:
1301+ 6A0A                              psh1
1301+ 6A0A E5          >                push    hl
1301+ 6A0B DD E9       >                jp      (ix)
1302+ 6A0D
1303+ 6A0D              //  ______________________________________________________________________
1304+ 6A0D              //
1305+ 6A0D              // 0>           n -- f
1306+ 6A0D              // true (non zero) if n is less than zero, false (0) elsewere
1307+ 6A0D                              New_Def ZGREATER, "0>", is_code, is_normal
1307+ 6A0D             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1307+ 6A0D             >
1307+ 6A0D             >                // dummy db directives used to calculate length of namec
1307+ 6A0D 30 3E       >                db      "0>"
1307+ 6A0F             >len_NFA         defl    $ - temp_NFA
1307+ 6A0F             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1307+ 6A0D             >
1307+ 6A0D 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1307+ 6A0E 30 3E       >                db      "0>"               // name string in 7-bit ascii, but
1307+ 6A10             >                org     $-1                 // alter last byte of Name just above to set
1307+ 6A0F BE          >                db      {b $} | END_BIT     // msb as name end
1307+ 6A10             >
1307+ 6A10 FB 69       >                dw      last_NFA            // Link to previous definition Name
1307+ 6A12             >ZGREATER:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1307+ 6A12 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1307+ 6A12             >                else
1307+ 6A12 14 6A       >                dw      $ + 2   ; ok        // is pointed by CFA
1307+ 6A14             >                endif           ; ok        // for other definitions it "points" the correct handler
1307+ 6A14             >                // Use of "; ok" to suppress "warning[fwdref]"
1307+ 6A14             >
1307+ 6A14             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1308+ 6A14 E1                           pop     hl
1309+ 6A15 7D                           ld      a, l
1310+ 6A16 B4                           or      h
1311+ 6A17 29                           add     hl, hl
1312+ 6A18 21 00 00                     ld      hl, FALSE_FLAG
1313+ 6A1B 38 04                        jr      c, ZGreater_Skip
1314+ 6A1D A7                               and     a
1315+ 6A1E 28 01                            jr      z, ZGreater_Skip
1316+ 6A20 2B                                   dec     hl
1317+ 6A21              ZGreater_Skip:
1318+ 6A21                              psh1
1318+ 6A21 E5          >                push    hl
1318+ 6A22 DD E9       >                jp      (ix)
1319+ 6A24
1320+ 6A24              //  ______________________________________________________________________
1321+ 6A24              //
1322+ 6A24              // +            n1 n2 -- n3
1323+ 6A24              // returns the unsigned sum of two top values
1324+ 6A24                              New_Def PLUS, "+", is_code, is_normal
1324+ 6A24             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1324+ 6A24             >
1324+ 6A24             >                // dummy db directives used to calculate length of namec
1324+ 6A24 2B          >                db      "+"
1324+ 6A25             >len_NFA         defl    $ - temp_NFA
1324+ 6A25             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1324+ 6A24             >
1324+ 6A24 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1324+ 6A25 2B          >                db      "+"               // name string in 7-bit ascii, but
1324+ 6A26             >                org     $-1                 // alter last byte of Name just above to set
1324+ 6A25 AB          >                db      {b $} | END_BIT     // msb as name end
1324+ 6A26             >
1324+ 6A26 0D 6A       >                dw      last_NFA            // Link to previous definition Name
1324+ 6A28             >PLUS:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1324+ 6A28 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1324+ 6A28             >                else
1324+ 6A28 2A 6A       >                dw      $ + 2   ; ok        // is pointed by CFA
1324+ 6A2A             >                endif           ; ok        // for other definitions it "points" the correct handler
1324+ 6A2A             >                // Use of "; ok" to suppress "warning[fwdref]"
1324+ 6A2A             >
1324+ 6A2A             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1325+ 6A2A E1                           pop     hl
1326+ 6A2B D1                           pop     de
1327+ 6A2C 19                           add     hl, de
1328+ 6A2D
1329+ 6A2D                              psh1
1329+ 6A2D E5          >                push    hl
1329+ 6A2E DD E9       >                jp      (ix)
1330+ 6A30
1331+ 6A30
1332+ 6A30              //  ______________________________________________________________________
1333+ 6A30              //
1334+ 6A30              // d+           d1 d2 -- d3
1335+ 6A30              // returns the unsigned sum of two top double-numbers
1336+ 6A30              //      d2  d1
1337+ 6A30              //      h l h l
1338+ 6A30              // SP   LHEDLHED
1339+ 6A30              // SP  +01234567
1340+ 6A30                              New_Def DPLUS, "D+", is_code, is_normal
1340+ 6A30             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1340+ 6A30             >
1340+ 6A30             >                // dummy db directives used to calculate length of namec
1340+ 6A30 44 2B       >                db      "D+"
1340+ 6A32             >len_NFA         defl    $ - temp_NFA
1340+ 6A32             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1340+ 6A30             >
1340+ 6A30 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1340+ 6A31 44 2B       >                db      "D+"               // name string in 7-bit ascii, but
1340+ 6A33             >                org     $-1                 // alter last byte of Name just above to set
1340+ 6A32 AB          >                db      {b $} | END_BIT     // msb as name end
1340+ 6A33             >
1340+ 6A33 24 6A       >                dw      last_NFA            // Link to previous definition Name
1340+ 6A35             >DPLUS:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1340+ 6A35 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1340+ 6A35             >                else
1340+ 6A35 37 6A       >                dw      $ + 2   ; ok        // is pointed by CFA
1340+ 6A37             >                endif           ; ok        // for other definitions it "points" the correct handler
1340+ 6A37             >                // Use of "; ok" to suppress "warning[fwdref]"
1340+ 6A37             >
1340+ 6A37             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1341+ 6A37
1342+ 6A37 D9                           exx
1343+ 6A38 C1                           pop     bc                  // bc := d2.H
1344+ 6A39 D1                           pop     de                  // hl := d2.L
1345+ 6A3A E1                           pop     hl                  // d1.H
1346+ 6A3B E3                           ex      (sp), hl            // d1.L
1347+ 6A3C 19                           add     hl, de              // hl := d2.L + d1.L
1348+ 6A3D E3                           ex      (sp), hl            // d1.H
1349+ 6A3E ED 4A                        adc     hl, bc              // d1.H + d2.H
1350+ 6A40 E5                           push    hl
1351+ 6A41 D9                           exx
1352+ 6A42                              next
1352+ 6A42 DD E9       >                jp      (ix)
1353+ 6A44
1354+ 6A44              //  ______________________________________________________________________
1355+ 6A44              //
1356+ 6A44              // 1+           n1 -- n2
1357+ 6A44              // increment by 1 top of stack
1358+ 6A44                              New_Def ONE_PLUS, "1+", is_code, is_normal
1358+ 6A44             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1358+ 6A44             >
1358+ 6A44             >                // dummy db directives used to calculate length of namec
1358+ 6A44 31 2B       >                db      "1+"
1358+ 6A46             >len_NFA         defl    $ - temp_NFA
1358+ 6A46             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1358+ 6A44             >
1358+ 6A44 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1358+ 6A45 31 2B       >                db      "1+"               // name string in 7-bit ascii, but
1358+ 6A47             >                org     $-1                 // alter last byte of Name just above to set
1358+ 6A46 AB          >                db      {b $} | END_BIT     // msb as name end
1358+ 6A47             >
1358+ 6A47 30 6A       >                dw      last_NFA            // Link to previous definition Name
1358+ 6A49             >ONE_PLUS:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1358+ 6A49 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1358+ 6A49             >                else
1358+ 6A49 4B 6A       >                dw      $ + 2   ; ok        // is pointed by CFA
1358+ 6A4B             >                endif           ; ok        // for other definitions it "points" the correct handler
1358+ 6A4B             >                // Use of "; ok" to suppress "warning[fwdref]"
1358+ 6A4B             >
1358+ 6A4B             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1359+ 6A4B E1                           pop     hl
1360+ 6A4C 23                           inc     hl
1361+ 6A4D
1362+ 6A4D                              psh1
1362+ 6A4D E5          >                push    hl
1362+ 6A4E DD E9       >                jp      (ix)
1363+ 6A50
1364+ 6A50              //  ______________________________________________________________________
1365+ 6A50              //
1366+ 6A50              // 1-           n1 -- n2
1367+ 6A50              // decrement by 1 top of stack
1368+ 6A50                              New_Def ONE_SUBTRACT, "1-", is_code, is_normal
1368+ 6A50             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1368+ 6A50             >
1368+ 6A50             >                // dummy db directives used to calculate length of namec
1368+ 6A50 31 2D       >                db      "1-"
1368+ 6A52             >len_NFA         defl    $ - temp_NFA
1368+ 6A52             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1368+ 6A50             >
1368+ 6A50 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1368+ 6A51 31 2D       >                db      "1-"               // name string in 7-bit ascii, but
1368+ 6A53             >                org     $-1                 // alter last byte of Name just above to set
1368+ 6A52 AD          >                db      {b $} | END_BIT     // msb as name end
1368+ 6A53             >
1368+ 6A53 44 6A       >                dw      last_NFA            // Link to previous definition Name
1368+ 6A55             >ONE_SUBTRACT:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1368+ 6A55 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1368+ 6A55             >                else
1368+ 6A55 57 6A       >                dw      $ + 2   ; ok        // is pointed by CFA
1368+ 6A57             >                endif           ; ok        // for other definitions it "points" the correct handler
1368+ 6A57             >                // Use of "; ok" to suppress "warning[fwdref]"
1368+ 6A57             >
1368+ 6A57             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1369+ 6A57 E1                           pop     hl
1370+ 6A58 2B                           dec     hl
1371+ 6A59
1372+ 6A59                              psh1
1372+ 6A59 E5          >                push    hl
1372+ 6A5A DD E9       >                jp      (ix)
1373+ 6A5C
1374+ 6A5C              //  ______________________________________________________________________
1375+ 6A5C              //
1376+ 6A5C              // 2+           n1 -- n2
1377+ 6A5C              // increment by 2 top of stack
1378+ 6A5C                              New_Def TWO_PLUS, "2+", is_code, is_normal
1378+ 6A5C             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1378+ 6A5C             >
1378+ 6A5C             >                // dummy db directives used to calculate length of namec
1378+ 6A5C 32 2B       >                db      "2+"
1378+ 6A5E             >len_NFA         defl    $ - temp_NFA
1378+ 6A5E             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1378+ 6A5C             >
1378+ 6A5C 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1378+ 6A5D 32 2B       >                db      "2+"               // name string in 7-bit ascii, but
1378+ 6A5F             >                org     $-1                 // alter last byte of Name just above to set
1378+ 6A5E AB          >                db      {b $} | END_BIT     // msb as name end
1378+ 6A5F             >
1378+ 6A5F 50 6A       >                dw      last_NFA            // Link to previous definition Name
1378+ 6A61             >TWO_PLUS:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1378+ 6A61 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1378+ 6A61             >                else
1378+ 6A61 63 6A       >                dw      $ + 2   ; ok        // is pointed by CFA
1378+ 6A63             >                endif           ; ok        // for other definitions it "points" the correct handler
1378+ 6A63             >                // Use of "; ok" to suppress "warning[fwdref]"
1378+ 6A63             >
1378+ 6A63             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1379+ 6A63              Two_Plus:
1380+ 6A63 E1                           pop     hl
1381+ 6A64 23                           inc     hl
1382+ 6A65 23                           inc     hl
1383+ 6A66
1384+ 6A66                              psh1
1384+ 6A66 E5          >                push    hl
1384+ 6A67 DD E9       >                jp      (ix)
1385+ 6A69
1386+ 6A69              //  ______________________________________________________________________
1387+ 6A69              //
1388+ 6A69              // cell+        a1 -- a2
1389+ 6A69              // increment by 2 top of stack
1390+ 6A69                              New_Def CELL_PLUS, "CELL+", Two_Plus, is_normal
1390+ 6A69             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1390+ 6A69             >
1390+ 6A69             >                // dummy db directives used to calculate length of namec
1390+ 6A69 43 45 4C 4C >                db      "CELL+"
1390+ 6A6D 2B          >
1390+ 6A6E             >len_NFA         defl    $ - temp_NFA
1390+ 6A6E             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1390+ 6A69             >
1390+ 6A69 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1390+ 6A6A 43 45 4C 4C >                db      "CELL+"               // name string in 7-bit ascii, but
1390+ 6A6E 2B          >
1390+ 6A6F             >                org     $-1                 // alter last byte of Name just above to set
1390+ 6A6E AB          >                db      {b $} | END_BIT     // msb as name end
1390+ 6A6F             >
1390+ 6A6F 5C 6A       >                dw      last_NFA            // Link to previous definition Name
1390+ 6A71             >CELL_PLUS:          if Two_Plus != 0 ; ok        // This is the start address of the direct jp(hl)
1390+ 6A71 63 6A       >                dw      Two_Plus ; ok        // for primitive definitions  actual code
1390+ 6A73             >                else
1390+ 6A73 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
1390+ 6A73             >                endif           ; ok        // for other definitions it "points" the correct handler
1390+ 6A73             >                // Use of "; ok" to suppress "warning[fwdref]"
1390+ 6A73             >
1390+ 6A73             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1391+ 6A73
1392+ 6A73              //  ______________________________________________________________________
1393+ 6A73              //
1394+ 6A73              // align        a1 -- a2
1395+ 6A73              // align memory : not used
1396+ 6A73              //              New_Def ALIGN_ADDR, "ALIGN", is_code, is_normal
1397+ 6A73              //            next
1398+ 6A73
1399+ 6A73              //  ______________________________________________________________________
1400+ 6A73              //
1401+ 6A73              // cell-        a1 -- a2
1402+ 6A73              // decrement by 2 top of stack
1403+ 6A73                              New_Def CELL_MINUS, "CELL-", is_code, is_normal
1403+ 6A73             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1403+ 6A73             >
1403+ 6A73             >                // dummy db directives used to calculate length of namec
1403+ 6A73 43 45 4C 4C >                db      "CELL-"
1403+ 6A77 2D          >
1403+ 6A78             >len_NFA         defl    $ - temp_NFA
1403+ 6A78             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1403+ 6A73             >
1403+ 6A73 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1403+ 6A74 43 45 4C 4C >                db      "CELL-"               // name string in 7-bit ascii, but
1403+ 6A78 2D          >
1403+ 6A79             >                org     $-1                 // alter last byte of Name just above to set
1403+ 6A78 AD          >                db      {b $} | END_BIT     // msb as name end
1403+ 6A79             >
1403+ 6A79 69 6A       >                dw      last_NFA            // Link to previous definition Name
1403+ 6A7B             >CELL_MINUS:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1403+ 6A7B ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1403+ 6A7B             >                else
1403+ 6A7B 7D 6A       >                dw      $ + 2   ; ok        // is pointed by CFA
1403+ 6A7D             >                endif           ; ok        // for other definitions it "points" the correct handler
1403+ 6A7D             >                // Use of "; ok" to suppress "warning[fwdref]"
1403+ 6A7D             >
1403+ 6A7D             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1404+ 6A7D              CellMinus:
1405+ 6A7D E1                           pop     hl
1406+ 6A7E 2B                           dec     hl
1407+ 6A7F 2B                           dec     hl
1408+ 6A80 E5                           push    hl
1409+ 6A81                              next
1409+ 6A81 DD E9       >                jp      (ix)
1410+ 6A83
1411+ 6A83              //  ______________________________________________________________________
1412+ 6A83              //
1413+ 6A83              // 2-           a1 -- a2
1414+ 6A83              // decrement by 2 top of stack
1415+ 6A83                              New_Def TWO_MINUS, "2-", CellMinus, is_normal
1415+ 6A83             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1415+ 6A83             >
1415+ 6A83             >                // dummy db directives used to calculate length of namec
1415+ 6A83 32 2D       >                db      "2-"
1415+ 6A85             >len_NFA         defl    $ - temp_NFA
1415+ 6A85             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1415+ 6A83             >
1415+ 6A83 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1415+ 6A84 32 2D       >                db      "2-"               // name string in 7-bit ascii, but
1415+ 6A86             >                org     $-1                 // alter last byte of Name just above to set
1415+ 6A85 AD          >                db      {b $} | END_BIT     // msb as name end
1415+ 6A86             >
1415+ 6A86 73 6A       >                dw      last_NFA            // Link to previous definition Name
1415+ 6A88             >TWO_MINUS:          if CellMinus != 0 ; ok        // This is the start address of the direct jp(hl)
1415+ 6A88 7D 6A       >                dw      CellMinus ; ok        // for primitive definitions  actual code
1415+ 6A8A             >                else
1415+ 6A8A ~           >                dw      $ + 2   ; ok        // is pointed by CFA
1415+ 6A8A             >                endif           ; ok        // for other definitions it "points" the correct handler
1415+ 6A8A             >                // Use of "; ok" to suppress "warning[fwdref]"
1415+ 6A8A             >
1415+ 6A8A             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1416+ 6A8A
1417+ 6A8A              //  ______________________________________________________________________
1418+ 6A8A              //
1419+ 6A8A              // negate        n1 -- n2
1420+ 6A8A              // change the sign of number
1421+ 6A8A                              New_Def MINUS, "NEGATE", is_code, is_normal
1421+ 6A8A             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1421+ 6A8A             >
1421+ 6A8A             >                // dummy db directives used to calculate length of namec
1421+ 6A8A 4E 45 47 41 >                db      "NEGATE"
1421+ 6A8E 54 45       >
1421+ 6A90             >len_NFA         defl    $ - temp_NFA
1421+ 6A90             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1421+ 6A8A             >
1421+ 6A8A 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1421+ 6A8B 4E 45 47 41 >                db      "NEGATE"               // name string in 7-bit ascii, but
1421+ 6A8F 54 45       >
1421+ 6A91             >                org     $-1                 // alter last byte of Name just above to set
1421+ 6A90 C5          >                db      {b $} | END_BIT     // msb as name end
1421+ 6A91             >
1421+ 6A91 83 6A       >                dw      last_NFA            // Link to previous definition Name
1421+ 6A93             >MINUS:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1421+ 6A93 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1421+ 6A93             >                else
1421+ 6A93 95 6A       >                dw      $ + 2   ; ok        // is pointed by CFA
1421+ 6A95             >                endif           ; ok        // for other definitions it "points" the correct handler
1421+ 6A95             >                // Use of "; ok" to suppress "warning[fwdref]"
1421+ 6A95             >
1421+ 6A95             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1422+ 6A95 21 00 00                     ld      hl, 0               // subtract from 0
1423+ 6A98 D1                           pop     de
1424+ 6A99 B7                           or      a
1425+ 6A9A ED 52                        sbc     hl, de
1426+ 6A9C
1427+ 6A9C                              psh1
1427+ 6A9C E5          >                push    hl
1427+ 6A9D DD E9       >                jp      (ix)
1428+ 6A9F
1429+ 6A9F              //  ______________________________________________________________________
1430+ 6A9F              //
1431+ 6A9F              // dnegate      d1 -- d2
1432+ 6A9F              // change the sign of a double number
1433+ 6A9F                              New_Def DMINUS, "DNEGATE", is_code, is_normal
1433+ 6A9F             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1433+ 6A9F             >
1433+ 6A9F             >                // dummy db directives used to calculate length of namec
1433+ 6A9F 44 4E 45 47 >                db      "DNEGATE"
1433+ 6AA3 41 54 45    >
1433+ 6AA6             >len_NFA         defl    $ - temp_NFA
1433+ 6AA6             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1433+ 6A9F             >
1433+ 6A9F 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1433+ 6AA0 44 4E 45 47 >                db      "DNEGATE"               // name string in 7-bit ascii, but
1433+ 6AA4 41 54 45    >
1433+ 6AA7             >                org     $-1                 // alter last byte of Name just above to set
1433+ 6AA6 C5          >                db      {b $} | END_BIT     // msb as name end
1433+ 6AA7             >
1433+ 6AA7 8A 6A       >                dw      last_NFA            // Link to previous definition Name
1433+ 6AA9             >DMINUS:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1433+ 6AA9 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1433+ 6AA9             >                else
1433+ 6AA9 AB 6A       >                dw      $ + 2   ; ok        // is pointed by CFA
1433+ 6AAB             >                endif           ; ok        // for other definitions it "points" the correct handler
1433+ 6AAB             >                // Use of "; ok" to suppress "warning[fwdref]"
1433+ 6AAB             >
1433+ 6AAB             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1434+ 6AAB D9                           exx
1435+ 6AAC C1                           pop     bc                  // d1.H
1436+ 6AAD D1                           pop     de                  // d1.L
1437+ 6AAE AF                           xor     a
1438+ 6AAF 67                           ld      h, a
1439+ 6AB0 6F                           ld      l, a
1440+ 6AB1 ED 52                        sbc     hl, de              // subtact from zero
1441+ 6AB3 E5                           push    hl                  // > d2-L
1442+ 6AB4 67                           ld      h, a
1443+ 6AB5 6F                           ld      l, a
1444+ 6AB6 ED 42                        sbc     hl, bc              // subtract from zero with carry
1445+ 6AB8                                                          // > d2-H
1446+ 6AB8 E5                           push    hl
1447+ 6AB9 D9                           exx
1448+ 6ABA                              next
1448+ 6ABA DD E9       >                jp      (ix)
1449+ 6ABC
1450+ 6ABC              //  ______________________________________________________________________
1451+ 6ABC              //
1452+ 6ABC              // over         n1 n2 -- n1 n2 n1
1453+ 6ABC              // copy the second value of stack and put it on top.
1454+ 6ABC                              New_Def OVER, "OVER", is_code, is_normal
1454+ 6ABC             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1454+ 6ABC             >
1454+ 6ABC             >                // dummy db directives used to calculate length of namec
1454+ 6ABC 4F 56 45 52 >                db      "OVER"
1454+ 6AC0             >len_NFA         defl    $ - temp_NFA
1454+ 6AC0             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1454+ 6ABC             >
1454+ 6ABC 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1454+ 6ABD 4F 56 45 52 >                db      "OVER"               // name string in 7-bit ascii, but
1454+ 6AC1             >                org     $-1                 // alter last byte of Name just above to set
1454+ 6AC0 D2          >                db      {b $} | END_BIT     // msb as name end
1454+ 6AC1             >
1454+ 6AC1 9F 6A       >                dw      last_NFA            // Link to previous definition Name
1454+ 6AC3             >OVER:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1454+ 6AC3 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1454+ 6AC3             >                else
1454+ 6AC3 C5 6A       >                dw      $ + 2   ; ok        // is pointed by CFA
1454+ 6AC5             >                endif           ; ok        // for other definitions it "points" the correct handler
1454+ 6AC5             >                // Use of "; ok" to suppress "warning[fwdref]"
1454+ 6AC5             >
1454+ 6AC5             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1455+ 6AC5 D1                           pop     de                  //   n2
1456+ 6AC6 E1                           pop     hl                  // < n1
1457+ 6AC7 E5                           push    hl                  // > n1
1458+ 6AC8 D5                           push    de                  // > n2
1459+ 6AC9 E5                           push    hl                  // > n1
1460+ 6ACA                              next
1460+ 6ACA DD E9       >                jp      (ix)
1461+ 6ACC
1462+ 6ACC              //  ______________________________________________________________________
1463+ 6ACC              //
1464+ 6ACC              // drop         n1 --
1465+ 6ACC              // drops the top of stack
1466+ 6ACC                              New_Def DROP, "DROP", is_code, is_normal
1466+ 6ACC             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1466+ 6ACC             >
1466+ 6ACC             >                // dummy db directives used to calculate length of namec
1466+ 6ACC 44 52 4F 50 >                db      "DROP"
1466+ 6AD0             >len_NFA         defl    $ - temp_NFA
1466+ 6AD0             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1466+ 6ACC             >
1466+ 6ACC 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1466+ 6ACD 44 52 4F 50 >                db      "DROP"               // name string in 7-bit ascii, but
1466+ 6AD1             >                org     $-1                 // alter last byte of Name just above to set
1466+ 6AD0 D0          >                db      {b $} | END_BIT     // msb as name end
1466+ 6AD1             >
1466+ 6AD1 BC 6A       >                dw      last_NFA            // Link to previous definition Name
1466+ 6AD3             >DROP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1466+ 6AD3 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1466+ 6AD3             >                else
1466+ 6AD3 D5 6A       >                dw      $ + 2   ; ok        // is pointed by CFA
1466+ 6AD5             >                endif           ; ok        // for other definitions it "points" the correct handler
1466+ 6AD5             >                // Use of "; ok" to suppress "warning[fwdref]"
1466+ 6AD5             >
1466+ 6AD5             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1467+ 6AD5 E1                           pop     hl                  // < n1 and discard previous TOS
1468+ 6AD6                              next
1468+ 6AD6 DD E9       >                jp      (ix)
1469+ 6AD8
1470+ 6AD8              //  ______________________________________________________________________
1471+ 6AD8              //
1472+ 6AD8              // nip          n1 n2 -- n2
1473+ 6AD8              // drops the second elemento on the stack
1474+ 6AD8                              New_Def NIP, "NIP", is_code, is_normal
1474+ 6AD8             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1474+ 6AD8             >
1474+ 6AD8             >                // dummy db directives used to calculate length of namec
1474+ 6AD8 4E 49 50    >                db      "NIP"
1474+ 6ADB             >len_NFA         defl    $ - temp_NFA
1474+ 6ADB             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1474+ 6AD8             >
1474+ 6AD8 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1474+ 6AD9 4E 49 50    >                db      "NIP"               // name string in 7-bit ascii, but
1474+ 6ADC             >                org     $-1                 // alter last byte of Name just above to set
1474+ 6ADB D0          >                db      {b $} | END_BIT     // msb as name end
1474+ 6ADC             >
1474+ 6ADC CC 6A       >                dw      last_NFA            // Link to previous definition Name
1474+ 6ADE             >NIP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1474+ 6ADE ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1474+ 6ADE             >                else
1474+ 6ADE E0 6A       >                dw      $ + 2   ; ok        // is pointed by CFA
1474+ 6AE0             >                endif           ; ok        // for other definitions it "points" the correct handler
1474+ 6AE0             >                // Use of "; ok" to suppress "warning[fwdref]"
1474+ 6AE0             >
1474+ 6AE0             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1475+ 6AE0
1476+ 6AE0 E1                           pop     hl                  // < n1 discarded
1477+ 6AE1 E3                           ex      (sp), hl
1478+ 6AE2                              next
1478+ 6AE2 DD E9       >                jp      (ix)
1479+ 6AE4
1480+ 6AE4              //  ______________________________________________________________________
1481+ 6AE4              //
1482+ 6AE4              // tuck         n1 n2 -- n2 n1 n2
1483+ 6AE4              // copy the top element after the second.
1484+ 6AE4                              New_Def TUCK, "TUCK", is_code, is_normal
1484+ 6AE4             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1484+ 6AE4             >
1484+ 6AE4             >                // dummy db directives used to calculate length of namec
1484+ 6AE4 54 55 43 4B >                db      "TUCK"
1484+ 6AE8             >len_NFA         defl    $ - temp_NFA
1484+ 6AE8             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1484+ 6AE4             >
1484+ 6AE4 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1484+ 6AE5 54 55 43 4B >                db      "TUCK"               // name string in 7-bit ascii, but
1484+ 6AE9             >                org     $-1                 // alter last byte of Name just above to set
1484+ 6AE8 CB          >                db      {b $} | END_BIT     // msb as name end
1484+ 6AE9             >
1484+ 6AE9 D8 6A       >                dw      last_NFA            // Link to previous definition Name
1484+ 6AEB             >TUCK:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1484+ 6AEB ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1484+ 6AEB             >                else
1484+ 6AEB ED 6A       >                dw      $ + 2   ; ok        // is pointed by CFA
1484+ 6AED             >                endif           ; ok        // for other definitions it "points" the correct handler
1484+ 6AED             >                // Use of "; ok" to suppress "warning[fwdref]"
1484+ 6AED             >
1484+ 6AED             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1485+ 6AED E1                           pop     hl
1486+ 6AEE D1                           pop     de                  // < n1
1487+ 6AEF E5                           push    hl                  // > n2  and TOS
1488+ 6AF0 D5                           push    de                  // > n1
1489+ 6AF1 E5                           push    hl
1490+ 6AF2                              next
1490+ 6AF2 DD E9       >                jp      (ix)
1491+ 6AF4
1492+ 6AF4              //  ______________________________________________________________________
1493+ 6AF4              //
1494+ 6AF4              // swap         n1 n2 -- n2 n1
1495+ 6AF4              // swaps the two values on top of stack
1496+ 6AF4                              New_Def SWAP, "SWAP", is_code, is_normal
1496+ 6AF4             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1496+ 6AF4             >
1496+ 6AF4             >                // dummy db directives used to calculate length of namec
1496+ 6AF4 53 57 41 50 >                db      "SWAP"
1496+ 6AF8             >len_NFA         defl    $ - temp_NFA
1496+ 6AF8             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1496+ 6AF4             >
1496+ 6AF4 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1496+ 6AF5 53 57 41 50 >                db      "SWAP"               // name string in 7-bit ascii, but
1496+ 6AF9             >                org     $-1                 // alter last byte of Name just above to set
1496+ 6AF8 D0          >                db      {b $} | END_BIT     // msb as name end
1496+ 6AF9             >
1496+ 6AF9 E4 6A       >                dw      last_NFA            // Link to previous definition Name
1496+ 6AFB             >SWAP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1496+ 6AFB ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1496+ 6AFB             >                else
1496+ 6AFB FD 6A       >                dw      $ + 2   ; ok        // is pointed by CFA
1496+ 6AFD             >                endif           ; ok        // for other definitions it "points" the correct handler
1496+ 6AFD             >                // Use of "; ok" to suppress "warning[fwdref]"
1496+ 6AFD             >
1496+ 6AFD             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1497+ 6AFD E1                           pop     hl                  // < n1
1498+ 6AFE E3                           ex      (sp),hl             // > n2
1499+ 6AFF E5                           push    hl                  // copy n1 to TOS
1500+ 6B00                              next
1500+ 6B00 DD E9       >                jp      (ix)
1501+ 6B02
1502+ 6B02              //  ______________________________________________________________________
1503+ 6B02              //
1504+ 6B02              // dup         n -- n n
1505+ 6B02              // duplicates the top value of stack
1506+ 6B02                              New_Def DUP, "DUP", is_code, is_normal
1506+ 6B02             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1506+ 6B02             >
1506+ 6B02             >                // dummy db directives used to calculate length of namec
1506+ 6B02 44 55 50    >                db      "DUP"
1506+ 6B05             >len_NFA         defl    $ - temp_NFA
1506+ 6B05             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1506+ 6B02             >
1506+ 6B02 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1506+ 6B03 44 55 50    >                db      "DUP"               // name string in 7-bit ascii, but
1506+ 6B06             >                org     $-1                 // alter last byte of Name just above to set
1506+ 6B05 D0          >                db      {b $} | END_BIT     // msb as name end
1506+ 6B06             >
1506+ 6B06 F4 6A       >                dw      last_NFA            // Link to previous definition Name
1506+ 6B08             >DUP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1506+ 6B08 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1506+ 6B08             >                else
1506+ 6B08 0A 6B       >                dw      $ + 2   ; ok        // is pointed by CFA
1506+ 6B0A             >                endif           ; ok        // for other definitions it "points" the correct handler
1506+ 6B0A             >                // Use of "; ok" to suppress "warning[fwdref]"
1506+ 6B0A             >
1506+ 6B0A             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1507+ 6B0A E1                           pop     hl
1508+ 6B0B E5                           push    hl                  // > n duplicate TOS
1509+ 6B0C E5                           push    hl
1510+ 6B0D                              next
1510+ 6B0D DD E9       >                jp      (ix)
1511+ 6B0F
1512+ 6B0F              //  ______________________________________________________________________
1513+ 6B0F              //
1514+ 6B0F              // rot         n1 n2 n3 -- n2 n3 n1
1515+ 6B0F              // Rotates the 3 top values of stack by picking the 3rd in access-order
1516+ 6B0F              // and putting it on top. The other two are shifted down one place.
1517+ 6B0F                              New_Def ROT, "ROT", is_code, is_normal
1517+ 6B0F             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1517+ 6B0F             >
1517+ 6B0F             >                // dummy db directives used to calculate length of namec
1517+ 6B0F 52 4F 54    >                db      "ROT"
1517+ 6B12             >len_NFA         defl    $ - temp_NFA
1517+ 6B12             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1517+ 6B0F             >
1517+ 6B0F 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1517+ 6B10 52 4F 54    >                db      "ROT"               // name string in 7-bit ascii, but
1517+ 6B13             >                org     $-1                 // alter last byte of Name just above to set
1517+ 6B12 D4          >                db      {b $} | END_BIT     // msb as name end
1517+ 6B13             >
1517+ 6B13 02 6B       >                dw      last_NFA            // Link to previous definition Name
1517+ 6B15             >ROT:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1517+ 6B15 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1517+ 6B15             >                else
1517+ 6B15 17 6B       >                dw      $ + 2   ; ok        // is pointed by CFA
1517+ 6B17             >                endif           ; ok        // for other definitions it "points" the correct handler
1517+ 6B17             >                // Use of "; ok" to suppress "warning[fwdref]"
1517+ 6B17             >
1517+ 6B17             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1518+ 6B17 D1                           pop     de                  // < n3
1519+ 6B18 E1                           pop     hl                  // < n2
1520+ 6B19 E3                           ex      (sp),hl             // > n2 < n1
1521+ 6B1A D5                           push    de                  // > n3
1522+ 6B1B E5                           push    hl                  // copy n1 to TOS
1523+ 6B1C                              next
1523+ 6B1C DD E9       >                jp      (ix)
1524+ 6B1E
1525+ 6B1E              //  ______________________________________________________________________
1526+ 6B1E              //
1527+ 6B1E              // -rot         n1 n2 n3 -- n3 n1 n2
1528+ 6B1E              // Rotates the 3 top values of stack by picking the 1st in access-order
1529+ 6B1E              // and putting back to 3rd place. The other two are shifted down one place.
1530+ 6B1E                              New_Def DASH_ROT, "-ROT", is_code, is_normal
1530+ 6B1E             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1530+ 6B1E             >
1530+ 6B1E             >                // dummy db directives used to calculate length of namec
1530+ 6B1E 2D 52 4F 54 >                db      "-ROT"
1530+ 6B22             >len_NFA         defl    $ - temp_NFA
1530+ 6B22             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1530+ 6B1E             >
1530+ 6B1E 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1530+ 6B1F 2D 52 4F 54 >                db      "-ROT"               // name string in 7-bit ascii, but
1530+ 6B23             >                org     $-1                 // alter last byte of Name just above to set
1530+ 6B22 D4          >                db      {b $} | END_BIT     // msb as name end
1530+ 6B23             >
1530+ 6B23 0F 6B       >                dw      last_NFA            // Link to previous definition Name
1530+ 6B25             >DASH_ROT:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1530+ 6B25 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1530+ 6B25             >                else
1530+ 6B25 27 6B       >                dw      $ + 2   ; ok        // is pointed by CFA
1530+ 6B27             >                endif           ; ok        // for other definitions it "points" the correct handler
1530+ 6B27             >                // Use of "; ok" to suppress "warning[fwdref]"
1530+ 6B27             >
1530+ 6B27             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1531+ 6B27 E1                           pop     hl                  // < n3
1532+ 6B28 D1                           pop     de                  // < n2
1533+ 6B29 E3                           ex      (sp),hl             // > n3 < n1
1534+ 6B2A E5                           push    hl                  // > n1
1535+ 6B2B D5                           push    de                  // copy n3 to TOS
1536+ 6B2C                              next
1536+ 6B2C DD E9       >                jp      (ix)
1537+ 6B2E
1538+ 6B2E              //  ______________________________________________________________________
1539+ 6B2E              //
1540+ 6B2E              // pick        n1 -- nx
1541+ 6B2E              // picks the nth element from TOS
1542+ 6B2E                              New_Def PICK, "PICK", is_code, is_normal
1542+ 6B2E             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1542+ 6B2E             >
1542+ 6B2E             >                // dummy db directives used to calculate length of namec
1542+ 6B2E 50 49 43 4B >                db      "PICK"
1542+ 6B32             >len_NFA         defl    $ - temp_NFA
1542+ 6B32             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1542+ 6B2E             >
1542+ 6B2E 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1542+ 6B2F 50 49 43 4B >                db      "PICK"               // name string in 7-bit ascii, but
1542+ 6B33             >                org     $-1                 // alter last byte of Name just above to set
1542+ 6B32 CB          >                db      {b $} | END_BIT     // msb as name end
1542+ 6B33             >
1542+ 6B33 1E 6B       >                dw      last_NFA            // Link to previous definition Name
1542+ 6B35             >PICK:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1542+ 6B35 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1542+ 6B35             >                else
1542+ 6B35 37 6B       >                dw      $ + 2   ; ok        // is pointed by CFA
1542+ 6B37             >                endif           ; ok        // for other definitions it "points" the correct handler
1542+ 6B37             >                // Use of "; ok" to suppress "warning[fwdref]"
1542+ 6B37             >
1542+ 6B37             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1543+ 6B37 E1                           pop     hl                  // take TOS as index
1544+ 6B38 29                           add     hl, hl              // as cells
1545+ 6B39 39                           add     hl, sp              // from Stack Pointer
1546+ 6B3A 7E                           ld      a, (hl)             // replace TOS
1547+ 6B3B 23                           inc     hl
1548+ 6B3C 66                           ld      h, (hl)
1549+ 6B3D 6F                           ld      l, a
1550+ 6B3E
1551+ 6B3E                              psh1
1551+ 6B3E E5          >                push    hl
1551+ 6B3F DD E9       >                jp      (ix)
1552+ 6B41
1553+ 6B41
1554+ 6B41              //  ______________________________________________________________________
1555+ 6B41              //
1556+ 6B41              // roll        n1 n2 n3 ... n -- n2 n3 ... n1
1557+ 6B41              // picks the nth element from TOS
1558+ 6B41              //              New_Def ROLL, "ROLL", is_code, is_normal
1559+ 6B41              //              exx                     // we need all registers free
1560+ 6B41              //              pop     hl              // number of cells to roll
1561+ 6B41              //              ld      a, h
1562+ 6B41              //              or       l
1563+ 6B41              //              jr      z, Roll_Zero
1564+ 6B41              //                  add     hl, hl              // number of bytes to move
1565+ 6B41              //                  ld      b, h
1566+ 6B41              //                  ld      c, l
1567+ 6B41              //                  add     hl, sp          // address of n1
1568+ 6B41              //                  ld      a, (hl)         // take n1 into a and a,
1569+ 6B41              //                  inc     hl
1570+ 6B41              //                  ex      af, af'
1571+ 6B41              //                  ld      a, (hl)         // take n1 into a and a,
1572+ 6B41              //                  ld      d, h
1573+ 6B41              //                  ld      e, l
1574+ 6B41              //                  dec     hl
1575+ 6B41              //                  dec     hl
1576+ 6B41              //                  lddr
1577+ 6B41              //                  ex      de, hl
1578+ 6B41              //                  ld      (hl), a
1579+ 6B41              //                  dec     hl
1580+ 6B41              //                  ex      af, af'
1581+ 6B41              //                  ld      (hl), a
1582+ 6B41              //Roll_Zero:
1583+ 6B41              //              exx
1584+ 6B41              //              next
1585+ 6B41
1586+ 6B41
1587+ 6B41              //  ______________________________________________________________________
1588+ 6B41              //
1589+ 6B41              // 2over        d1 d2 -- d1 d2 d1
1590+ 6B41              //              n1 n2 n3 n4 -- n1 n2 n3 n4 n1 n2
1591+ 6B41              // copy the second double of stack and put on top.
1592+ 6B41              //              New_Def TWO_OVER, "2OVER", is_code, is_normal
1593+ 6B41              //
1594+ 6B41              //              ld      hl, 7
1595+ 6B41              //              add     hl, sp
1596+ 6B41              //              ld      d, (hl)
1597+ 6B41              //              dec     hl
1598+ 6B41              //              ld      e, (hl)             // d1-L
1599+ 6B41              //              push    de
1600+ 6B41              //              dec     hl
1601+ 6B41              //              ld      d, (hl)
1602+ 6B41              //              dec     hl
1603+ 6B41              //              ld      e, (hl)             // d1-H
1604+ 6B41              //              push    de
1605+ 6B41              //              next
1606+ 6B41
1607+ 6B41              //  ______________________________________________________________________
1608+ 6B41              //
1609+ 6B41              // 2drop        d --
1610+ 6B41              //              n1 n2 --
1611+ 6B41              // drops the top double from stack
1612+ 6B41                              New_Def TWO_DROP, "2DROP", is_code, is_normal
1612+ 6B41             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1612+ 6B41             >
1612+ 6B41             >                // dummy db directives used to calculate length of namec
1612+ 6B41 32 44 52 4F >                db      "2DROP"
1612+ 6B45 50          >
1612+ 6B46             >len_NFA         defl    $ - temp_NFA
1612+ 6B46             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1612+ 6B41             >
1612+ 6B41 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1612+ 6B42 32 44 52 4F >                db      "2DROP"               // name string in 7-bit ascii, but
1612+ 6B46 50          >
1612+ 6B47             >                org     $-1                 // alter last byte of Name just above to set
1612+ 6B46 D0          >                db      {b $} | END_BIT     // msb as name end
1612+ 6B47             >
1612+ 6B47 2E 6B       >                dw      last_NFA            // Link to previous definition Name
1612+ 6B49             >TWO_DROP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1612+ 6B49 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1612+ 6B49             >                else
1612+ 6B49 4B 6B       >                dw      $ + 2   ; ok        // is pointed by CFA
1612+ 6B4B             >                endif           ; ok        // for other definitions it "points" the correct handler
1612+ 6B4B             >                // Use of "; ok" to suppress "warning[fwdref]"
1612+ 6B4B             >
1612+ 6B4B             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1613+ 6B4B E1                           pop     hl
1614+ 6B4C E1                           pop     hl
1615+ 6B4D                              next
1615+ 6B4D DD E9       >                jp      (ix)
1616+ 6B4F
1617+ 6B4F              //  ______________________________________________________________________
1618+ 6B4F              //
1619+ 6B4F              // 2nip         d1 d2 -- d2
1620+ 6B4F              //              n1 n2 n3 n4 -- n3 n4
1621+ 6B4F              // drops the second double on the stack
1622+ 6B4F              //              New_Def TWO_NIP, 4, "2nip"
1623+ 6B4F              //              ...
1624+ 6B4F
1625+ 6B4F              //  ______________________________________________________________________
1626+ 6B4F              //
1627+ 6B4F              // 2tuck         d1 d2 -- d2 d1 d2
1628+ 6B4F              // copy the top element after the second.
1629+ 6B4F              //              New_Def TWO_TUCK, 5, "2tuck"
1630+ 6B4F              //              ...
1631+ 6B4F
1632+ 6B4F              //  ______________________________________________________________________
1633+ 6B4F              //
1634+ 6B4F              // 2swap         d1 d2 -- d2 d1
1635+ 6B4F              //               n1 n2 n3 n4 -- n3 n4 n1 n2
1636+ 6B4F              // swaps the two doubles on top of stack
1637+ 6B4F                              New_Def TWO_SWAP, "2SWAP", is_code, is_normal
1637+ 6B4F             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1637+ 6B4F             >
1637+ 6B4F             >                // dummy db directives used to calculate length of namec
1637+ 6B4F 32 53 57 41 >                db      "2SWAP"
1637+ 6B53 50          >
1637+ 6B54             >len_NFA         defl    $ - temp_NFA
1637+ 6B54             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1637+ 6B4F             >
1637+ 6B4F 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1637+ 6B50 32 53 57 41 >                db      "2SWAP"               // name string in 7-bit ascii, but
1637+ 6B54 50          >
1637+ 6B55             >                org     $-1                 // alter last byte of Name just above to set
1637+ 6B54 D0          >                db      {b $} | END_BIT     // msb as name end
1637+ 6B55             >
1637+ 6B55 41 6B       >                dw      last_NFA            // Link to previous definition Name
1637+ 6B57             >TWO_SWAP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1637+ 6B57 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1637+ 6B57             >                else
1637+ 6B57 59 6B       >                dw      $ + 2   ; ok        // is pointed by CFA
1637+ 6B59             >                endif           ; ok        // for other definitions it "points" the correct handler
1637+ 6B59             >                // Use of "; ok" to suppress "warning[fwdref]"
1637+ 6B59             >
1637+ 6B59             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1638+ 6B59 F1                           pop     af                  //   d2-H
1639+ 6B5A E1                           pop     hl                  // < d2-L
1640+ 6B5B D1                           pop     de                  // < d1-H
1641+ 6B5C E3                           ex      (sp), hl            // < d1-L > d2-L
1642+ 6B5D F5                           push    af                  // > d2-H
1643+ 6B5E E5                           push    hl                  // > d1-L
1644+ 6B5F D5                           push    de
1645+ 6B60
1646+ 6B60                              next
1646+ 6B60 DD E9       >                jp      (ix)
1647+ 6B62
1648+ 6B62              //  ______________________________________________________________________
1649+ 6B62              //
1650+ 6B62              // 2dup         d -- d d
1651+ 6B62              //              n1 n2 -- n1 n2 n1 n2
1652+ 6B62              // duplicates the top double of stack
1653+ 6B62                              New_Def TWO_DUP, "2DUP", is_code, is_normal
1653+ 6B62             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1653+ 6B62             >
1653+ 6B62             >                // dummy db directives used to calculate length of namec
1653+ 6B62 32 44 55 50 >                db      "2DUP"
1653+ 6B66             >len_NFA         defl    $ - temp_NFA
1653+ 6B66             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1653+ 6B62             >
1653+ 6B62 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1653+ 6B63 32 44 55 50 >                db      "2DUP"               // name string in 7-bit ascii, but
1653+ 6B67             >                org     $-1                 // alter last byte of Name just above to set
1653+ 6B66 D0          >                db      {b $} | END_BIT     // msb as name end
1653+ 6B67             >
1653+ 6B67 4F 6B       >                dw      last_NFA            // Link to previous definition Name
1653+ 6B69             >TWO_DUP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1653+ 6B69 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1653+ 6B69             >                else
1653+ 6B69 6B 6B       >                dw      $ + 2   ; ok        // is pointed by CFA
1653+ 6B6B             >                endif           ; ok        // for other definitions it "points" the correct handler
1653+ 6B6B             >                // Use of "; ok" to suppress "warning[fwdref]"
1653+ 6B6B             >
1653+ 6B6B             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1654+ 6B6B E1                           pop     hl                  // < d-H
1655+ 6B6C D1                           pop     de                  // < d-L
1656+ 6B6D D5                           push    de                  // < d-L
1657+ 6B6E E5                           push    hl                  // > d-H
1658+ 6B6F D5                           push    de                  // > d-L
1659+ 6B70 E5                           push    hl                  // > d-H
1660+ 6B71                              next
1660+ 6B71 DD E9       >                jp      (ix)
1661+ 6B73
1662+ 6B73              //  ______________________________________________________________________
1663+ 6B73              //
1664+ 6B73              // 2rot         d1 d2 d3 -- d2 d3 d1
1665+ 6B73              //              n1 n2 n3 n4 n5 n6 -- n3 n4 n5 n6 n1 n2
1666+ 6B73              // Rotates the 3 top doubles of stack by picking the 3rd in access-order
1667+ 6B73              // and putting it on top. The other two are shifted down one place.
1668+ 6B73              //              New_Def TWO?ROT, 4, "2rot"
1669+ 6B73              //              ...
1670+ 6B73              //              New_Def TWO_ROT, "2ROT", is_code, is_normal
1671+ 6B73              //
1672+ 6B73              //      d3  |d2  |d1  |
1673+ 6B73              //      h l |h l |h l |
1674+ 6B73              // SP   LHED|LHED|LHED|
1675+ 6B73              // SP  +0123|4567|89ab|
1676+ 6B73              //              ld      hl, $000B
1677+ 6B73              //              add     hl, sp
1678+ 6B73              //              ld      d, (hl)
1679+ 6B73              //              dec     hl
1680+ 6B73              //              ld      e, (hl)
1681+ 6B73              //              dec     hl
1682+ 6B73              //              push    de
1683+ 6B73              //              ld      d, (hl)
1684+ 6B73              //              dec     hl
1685+ 6B73              //              ld      e, (hl)
1686+ 6B73              //              dec     hl
1687+ 6B73              //              push    de
1688+ 6B73
1689+ 6B73              //      d1  |d3  |d2  |d1  |
1690+ 6B73              //      h l |h l |h l |h l |
1691+ 6B73              // SP   LHED|LHED|LHED|LHED|
1692+ 6B73              // SP       +0123|4567|89ab|
1693+ 6B73
1694+ 6B73              //              ld      d, h
1695+ 6B73              //              ld      e, l
1696+ 6B73              //              inc     de
1697+ 6B73              //              inc     de
1698+ 6B73              //              inc     de
1699+ 6B73              //              inc     de
1700+ 6B73              //              push    bc
1701+ 6B73              //              ld      bc, $000C
1702+ 6B73              //              lddr
1703+ 6B73              //              pop     bc
1704+ 6B73              //              pop     de
1705+ 6B73              //              pop     de
1706+ 6B73              //
1707+ 6B73              //              next
1708+ 6B73
1709+ 6B73
1710+ 6B73              //  ______________________________________________________________________
1711+ 6B73              //
1712+ 6B73              // +!           n a --
1713+ 6B73              // Sums to the content of address a the number n.
1714+ 6B73              // It is the same of  a @ n + a !
1715+ 6B73                              New_Def PLUSSTORE, "+!", is_code, is_normal
1715+ 6B73             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1715+ 6B73             >
1715+ 6B73             >                // dummy db directives used to calculate length of namec
1715+ 6B73 2B 21       >                db      "+!"
1715+ 6B75             >len_NFA         defl    $ - temp_NFA
1715+ 6B75             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1715+ 6B73             >
1715+ 6B73 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1715+ 6B74 2B 21       >                db      "+!"               // name string in 7-bit ascii, but
1715+ 6B76             >                org     $-1                 // alter last byte of Name just above to set
1715+ 6B75 A1          >                db      {b $} | END_BIT     // msb as name end
1715+ 6B76             >
1715+ 6B76 62 6B       >                dw      last_NFA            // Link to previous definition Name
1715+ 6B78             >PLUSSTORE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1715+ 6B78 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1715+ 6B78             >                else
1715+ 6B78 7A 6B       >                dw      $ + 2   ; ok        // is pointed by CFA
1715+ 6B7A             >                endif           ; ok        // for other definitions it "points" the correct handler
1715+ 6B7A             >                // Use of "; ok" to suppress "warning[fwdref]"
1715+ 6B7A             >
1715+ 6B7A             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1716+ 6B7A E1                           pop     hl                  // hl is the address
1717+ 6B7B D1                           pop     de                  // de is the number
1718+ 6B7C 7E                           ld      a, (hl)
1719+ 6B7D 83                           add     e
1720+ 6B7E 77                           ld      (hl), a
1721+ 6B7F 23                           inc     hl
1722+ 6B80 7E                           ld      a, (hl)
1723+ 6B81 8A                           adc     d
1724+ 6B82 77                           ld      (hl), a
1725+ 6B83
1726+ 6B83                              next
1726+ 6B83 DD E9       >                jp      (ix)
1727+ 6B85
1728+ 6B85              //  ______________________________________________________________________
1729+ 6B85              //
1730+ 6B85              // toggle       a n --
1731+ 6B85              // Complements (xor) the byte at addrress  a  with the model n.
1732+ 6B85                              New_Def TOGGLE, "TOGGLE", is_code, is_normal
1732+ 6B85             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1732+ 6B85             >
1732+ 6B85             >                // dummy db directives used to calculate length of namec
1732+ 6B85 54 4F 47 47 >                db      "TOGGLE"
1732+ 6B89 4C 45       >
1732+ 6B8B             >len_NFA         defl    $ - temp_NFA
1732+ 6B8B             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1732+ 6B85             >
1732+ 6B85 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1732+ 6B86 54 4F 47 47 >                db      "TOGGLE"               // name string in 7-bit ascii, but
1732+ 6B8A 4C 45       >
1732+ 6B8C             >                org     $-1                 // alter last byte of Name just above to set
1732+ 6B8B C5          >                db      {b $} | END_BIT     // msb as name end
1732+ 6B8C             >
1732+ 6B8C 73 6B       >                dw      last_NFA            // Link to previous definition Name
1732+ 6B8E             >TOGGLE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1732+ 6B8E ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1732+ 6B8E             >                else
1732+ 6B8E 90 6B       >                dw      $ + 2   ; ok        // is pointed by CFA
1732+ 6B90             >                endif           ; ok        // for other definitions it "points" the correct handler
1732+ 6B90             >                // Use of "; ok" to suppress "warning[fwdref]"
1732+ 6B90             >
1732+ 6B90             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1733+ 6B90 D1                           pop     de
1734+ 6B91 E1                           pop     hl
1735+ 6B92 7E                           ld      a, (hl)
1736+ 6B93 AB                           xor     e
1737+ 6B94 77                           ld      (hl), a
1738+ 6B95
1739+ 6B95                              next
1739+ 6B95 DD E9       >                jp      (ix)
1740+ 6B97
1741+ 6B97              //  ______________________________________________________________________
1742+ 6B97              //
1743+ 6B97              // @            a -- n
1744+ 6B97              // fetch 16 bit number n from address a. Z80 keeps high byte is in high memory
1745+ 6B97                              New_Def FETCH, "@", is_code, is_normal
1745+ 6B97             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1745+ 6B97             >
1745+ 6B97             >                // dummy db directives used to calculate length of namec
1745+ 6B97 40          >                db      "@"
1745+ 6B98             >len_NFA         defl    $ - temp_NFA
1745+ 6B98             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1745+ 6B97             >
1745+ 6B97 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1745+ 6B98 40          >                db      "@"               // name string in 7-bit ascii, but
1745+ 6B99             >                org     $-1                 // alter last byte of Name just above to set
1745+ 6B98 C0          >                db      {b $} | END_BIT     // msb as name end
1745+ 6B99             >
1745+ 6B99 85 6B       >                dw      last_NFA            // Link to previous definition Name
1745+ 6B9B             >FETCH:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1745+ 6B9B ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1745+ 6B9B             >                else
1745+ 6B9B 9D 6B       >                dw      $ + 2   ; ok        // is pointed by CFA
1745+ 6B9D             >                endif           ; ok        // for other definitions it "points" the correct handler
1745+ 6B9D             >                // Use of "; ok" to suppress "warning[fwdref]"
1745+ 6B9D             >
1745+ 6B9D             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1746+ 6B9D E1                           pop     hl
1747+ 6B9E 5E                           ld      e, (hl)             // low-byte
1748+ 6B9F 23                           inc     hl
1749+ 6BA0 56                           ld      d, (hl)             // high-byte
1750+ 6BA1 D5                           push    de
1751+ 6BA2                              next
1751+ 6BA2 DD E9       >                jp      (ix)
1752+ 6BA4
1753+ 6BA4              //  ______________________________________________________________________
1754+ 6BA4              //
1755+ 6BA4              // !            n a --
1756+ 6BA4              // store 16 bit number n from address a. Z80 keeps high byte is in high memory
1757+ 6BA4                              New_Def STORE, "!", is_code, is_normal
1757+ 6BA4             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1757+ 6BA4             >
1757+ 6BA4             >                // dummy db directives used to calculate length of namec
1757+ 6BA4 21          >                db      "!"
1757+ 6BA5             >len_NFA         defl    $ - temp_NFA
1757+ 6BA5             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1757+ 6BA4             >
1757+ 6BA4 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1757+ 6BA5 21          >                db      "!"               // name string in 7-bit ascii, but
1757+ 6BA6             >                org     $-1                 // alter last byte of Name just above to set
1757+ 6BA5 A1          >                db      {b $} | END_BIT     // msb as name end
1757+ 6BA6             >
1757+ 6BA6 97 6B       >                dw      last_NFA            // Link to previous definition Name
1757+ 6BA8             >STORE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1757+ 6BA8 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1757+ 6BA8             >                else
1757+ 6BA8 AA 6B       >                dw      $ + 2   ; ok        // is pointed by CFA
1757+ 6BAA             >                endif           ; ok        // for other definitions it "points" the correct handler
1757+ 6BAA             >                // Use of "; ok" to suppress "warning[fwdref]"
1757+ 6BAA             >
1757+ 6BAA             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1758+ 6BAA E1                           pop     hl                  // address
1759+ 6BAB D1                           pop     de                  // < n
1760+ 6BAC 73                           ld      (hl), e             // low-byte
1761+ 6BAD 23                           inc     hl
1762+ 6BAE 72                           ld      (hl), d             // high-byte
1763+ 6BAF
1764+ 6BAF                              next
1764+ 6BAF DD E9       >                jp      (ix)
1765+ 6BB1
1766+ 6BB1              //  ______________________________________________________________________
1767+ 6BB1              //
1768+ 6BB1              // c@           a -- c
1769+ 6BB1              // fetch a character n from address a
1770+ 6BB1                              New_Def CFETCH, "C@", is_code, is_normal
1770+ 6BB1             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1770+ 6BB1             >
1770+ 6BB1             >                // dummy db directives used to calculate length of namec
1770+ 6BB1 43 40       >                db      "C@"
1770+ 6BB3             >len_NFA         defl    $ - temp_NFA
1770+ 6BB3             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1770+ 6BB1             >
1770+ 6BB1 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1770+ 6BB2 43 40       >                db      "C@"               // name string in 7-bit ascii, but
1770+ 6BB4             >                org     $-1                 // alter last byte of Name just above to set
1770+ 6BB3 C0          >                db      {b $} | END_BIT     // msb as name end
1770+ 6BB4             >
1770+ 6BB4 A4 6B       >                dw      last_NFA            // Link to previous definition Name
1770+ 6BB6             >CFETCH:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1770+ 6BB6 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1770+ 6BB6             >                else
1770+ 6BB6 B8 6B       >                dw      $ + 2   ; ok        // is pointed by CFA
1770+ 6BB8             >                endif           ; ok        // for other definitions it "points" the correct handler
1770+ 6BB8             >                // Use of "; ok" to suppress "warning[fwdref]"
1770+ 6BB8             >
1770+ 6BB8             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1771+ 6BB8 E1                           pop     hl
1772+ 6BB9 6E                           ld      l, (hl)             // low-byte
1773+ 6BBA 26 00                        ld      h, 0
1774+ 6BBC
1775+ 6BBC                              psh1
1775+ 6BBC E5          >                push    hl
1775+ 6BBD DD E9       >                jp      (ix)
1776+ 6BBF
1777+ 6BBF              //  ______________________________________________________________________
1778+ 6BBF              //
1779+ 6BBF              // c!           c a --
1780+ 6BBF              // fetch 16 bit number n from address a. Z80 keeps high byte is in high memory
1781+ 6BBF                              New_Def CSTORE, "C!", is_code, is_normal
1781+ 6BBF             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1781+ 6BBF             >
1781+ 6BBF             >                // dummy db directives used to calculate length of namec
1781+ 6BBF 43 21       >                db      "C!"
1781+ 6BC1             >len_NFA         defl    $ - temp_NFA
1781+ 6BC1             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1781+ 6BBF             >
1781+ 6BBF 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1781+ 6BC0 43 21       >                db      "C!"               // name string in 7-bit ascii, but
1781+ 6BC2             >                org     $-1                 // alter last byte of Name just above to set
1781+ 6BC1 A1          >                db      {b $} | END_BIT     // msb as name end
1781+ 6BC2             >
1781+ 6BC2 B1 6B       >                dw      last_NFA            // Link to previous definition Name
1781+ 6BC4             >CSTORE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1781+ 6BC4 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1781+ 6BC4             >                else
1781+ 6BC4 C6 6B       >                dw      $ + 2   ; ok        // is pointed by CFA
1781+ 6BC6             >                endif           ; ok        // for other definitions it "points" the correct handler
1781+ 6BC6             >                // Use of "; ok" to suppress "warning[fwdref]"
1781+ 6BC6             >
1781+ 6BC6             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1782+ 6BC6 E1                           pop     hl                  // < address
1783+ 6BC7 D1                           pop     de
1784+ 6BC8 73                           ld      (hl), e             // low-byte
1785+ 6BC9
1786+ 6BC9                              next
1786+ 6BC9 DD E9       >                jp      (ix)
1787+ 6BCB
1788+ 6BCB              //  ______________________________________________________________________
1789+ 6BCB              //
1790+ 6BCB              // 2@           a -- d
1791+ 6BCB              // fetch a 32 bits number d from address a and leaves it on top of the
1792+ 6BCB              // stack as two single numbers, high part as top of the stack.
1793+ 6BCB              // A double number is normally kept in CPU registers as HLDE.
1794+ 6BCB              // On stack a double number is treated as two single numbers
1795+ 6BCB              // where BC is on the top of the stack and HL is the second from top,
1796+ 6BCB              // so the sign of the number can be checked on top of stack
1797+ 6BCB              // and in the stack memory it appears as LHED.
1798+ 6BCB                              New_Def TWO_FETCH, "2@", is_code, is_normal
1798+ 6BCB             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1798+ 6BCB             >
1798+ 6BCB             >                // dummy db directives used to calculate length of namec
1798+ 6BCB 32 40       >                db      "2@"
1798+ 6BCD             >len_NFA         defl    $ - temp_NFA
1798+ 6BCD             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1798+ 6BCB             >
1798+ 6BCB 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1798+ 6BCC 32 40       >                db      "2@"               // name string in 7-bit ascii, but
1798+ 6BCE             >                org     $-1                 // alter last byte of Name just above to set
1798+ 6BCD C0          >                db      {b $} | END_BIT     // msb as name end
1798+ 6BCE             >
1798+ 6BCE BF 6B       >                dw      last_NFA            // Link to previous definition Name
1798+ 6BD0             >TWO_FETCH:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1798+ 6BD0 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1798+ 6BD0             >                else
1798+ 6BD0 D2 6B       >                dw      $ + 2   ; ok        // is pointed by CFA
1798+ 6BD2             >                endif           ; ok        // for other definitions it "points" the correct handler
1798+ 6BD2             >                // Use of "; ok" to suppress "warning[fwdref]"
1798+ 6BD2             >
1798+ 6BD2             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1799+ 6BD2 E1                           pop     hl                  // address
1800+ 6BD3 5E                           ld      e, (hl)             // low-byte
1801+ 6BD4 23                           inc     hl
1802+ 6BD5 56                           ld      d, (hl)             // high-byte
1803+ 6BD6
1804+ 6BD6 23                           inc     hl
1805+ 6BD7 7E                           ld      a, (hl)             // low-byte
1806+ 6BD8 23                           inc     hl
1807+ 6BD9 66                           ld      h, (hl)             // high-byte
1808+ 6BDA 6F                           ld      l, a
1809+ 6BDB E5                           push    hl
1810+ 6BDC D5                           push    de
1811+ 6BDD                              next
1811+ 6BDD DD E9       >                jp      (ix)
1812+ 6BDF
1813+ 6BDF              //  ______________________________________________________________________
1814+ 6BDF              //
1815+ 6BDF              // 2!           d a --
1816+ 6BDF              // stores a 32 bits number d from address a and leaves it on top of the
1817+ 6BDF              // stack as two single numbers, high part as top of the stack.
1818+ 6BDF              // A double number is normally kept in CPU registers as HLDE.
1819+ 6BDF              // On stack a double number is treated as two single numbers
1820+ 6BDF              // where BC is on the top of the stack and HL is the second from top,
1821+ 6BDF              // so the sign of the number can be checked on top of stack
1822+ 6BDF              // and in the stack memory it appears as LHED.
1823+ 6BDF                              New_Def TWO_STORE, "2!", is_code, is_normal
1823+ 6BDF             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1823+ 6BDF             >
1823+ 6BDF             >                // dummy db directives used to calculate length of namec
1823+ 6BDF 32 21       >                db      "2!"
1823+ 6BE1             >len_NFA         defl    $ - temp_NFA
1823+ 6BE1             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1823+ 6BDF             >
1823+ 6BDF 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1823+ 6BE0 32 21       >                db      "2!"               // name string in 7-bit ascii, but
1823+ 6BE2             >                org     $-1                 // alter last byte of Name just above to set
1823+ 6BE1 A1          >                db      {b $} | END_BIT     // msb as name end
1823+ 6BE2             >
1823+ 6BE2 CB 6B       >                dw      last_NFA            // Link to previous definition Name
1823+ 6BE4             >TWO_STORE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1823+ 6BE4 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1823+ 6BE4             >                else
1823+ 6BE4 E6 6B       >                dw      $ + 2   ; ok        // is pointed by CFA
1823+ 6BE6             >                endif           ; ok        // for other definitions it "points" the correct handler
1823+ 6BE6             >                // Use of "; ok" to suppress "warning[fwdref]"
1823+ 6BE6             >
1823+ 6BE6             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1824+ 6BE6 D9                           exx
1825+ 6BE7 E1                           pop     hl                  // address
1826+ 6BE8 C1                           pop     bc                  // < high-part
1827+ 6BE9 D1                           pop     de                  // < low-part > Instruction Pointer
1828+ 6BEA 71                           ld      (hl), c
1829+ 6BEB 23                           inc     hl
1830+ 6BEC 70                           ld      (hl), b
1831+ 6BED 23                           inc     hl
1832+ 6BEE 73                           ld      (hl), e
1833+ 6BEF 23                           inc     hl
1834+ 6BF0 72                           ld      (hl), d
1835+ 6BF1 D9                           exx
1836+ 6BF2                              next
1836+ 6BF2 DD E9       >                jp      (ix)
1837+ 6BF4
1838+ 6BF4              //  ______________________________________________________________________
1839+ 6BF4              //
1840+ 6BF4              // p@           a -- c
1841+ 6BF4              // Read one byte from port a and leave the result on top of stack
1842+ 6BF4                              New_Def PFETCH, "P@", is_code, is_normal
1842+ 6BF4             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1842+ 6BF4             >
1842+ 6BF4             >                // dummy db directives used to calculate length of namec
1842+ 6BF4 50 40       >                db      "P@"
1842+ 6BF6             >len_NFA         defl    $ - temp_NFA
1842+ 6BF6             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1842+ 6BF4             >
1842+ 6BF4 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1842+ 6BF5 50 40       >                db      "P@"               // name string in 7-bit ascii, but
1842+ 6BF7             >                org     $-1                 // alter last byte of Name just above to set
1842+ 6BF6 C0          >                db      {b $} | END_BIT     // msb as name end
1842+ 6BF7             >
1842+ 6BF7 DF 6B       >                dw      last_NFA            // Link to previous definition Name
1842+ 6BF9             >PFETCH:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1842+ 6BF9 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1842+ 6BF9             >                else
1842+ 6BF9 FB 6B       >                dw      $ + 2   ; ok        // is pointed by CFA
1842+ 6BFB             >                endif           ; ok        // for other definitions it "points" the correct handler
1842+ 6BFB             >                // Use of "; ok" to suppress "warning[fwdref]"
1842+ 6BFB             >
1842+ 6BFB             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1843+ 6BFB D9                           exx
1844+ 6BFC C1                           pop     bc
1845+ 6BFD 26 00                        ld      h, 0
1846+ 6BFF ED 68                        in      l, (c)
1847+ 6C01 E5                           push    hl
1848+ 6C02 D9                           exx
1849+ 6C03                              next
1849+ 6C03 DD E9       >                jp      (ix)
1850+ 6C05
1851+ 6C05              //  ______________________________________________________________________
1852+ 6C05              //
1853+ 6C05              // p!           c a --
1854+ 6C05              // Send one byte (top of stack) to port a
1855+ 6C05                              New_Def PSTORE, "P!", is_code, is_normal
1855+ 6C05             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1855+ 6C05             >
1855+ 6C05             >                // dummy db directives used to calculate length of namec
1855+ 6C05 50 21       >                db      "P!"
1855+ 6C07             >len_NFA         defl    $ - temp_NFA
1855+ 6C07             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1855+ 6C05             >
1855+ 6C05 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1855+ 6C06 50 21       >                db      "P!"               // name string in 7-bit ascii, but
1855+ 6C08             >                org     $-1                 // alter last byte of Name just above to set
1855+ 6C07 A1          >                db      {b $} | END_BIT     // msb as name end
1855+ 6C08             >
1855+ 6C08 F4 6B       >                dw      last_NFA            // Link to previous definition Name
1855+ 6C0A             >PSTORE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1855+ 6C0A ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1855+ 6C0A             >                else
1855+ 6C0A 0C 6C       >                dw      $ + 2   ; ok        // is pointed by CFA
1855+ 6C0C             >                endif           ; ok        // for other definitions it "points" the correct handler
1855+ 6C0C             >                // Use of "; ok" to suppress "warning[fwdref]"
1855+ 6C0C             >
1855+ 6C0C             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1856+ 6C0C D9                           exx
1857+ 6C0D C1                           pop     bc
1858+ 6C0E E1                           pop     hl                  // < c
1859+ 6C0F ED 69                        out     (c), l              // low-byte
1860+ 6C11 D9                           exx
1861+ 6C12                              next
1861+ 6C12 DD E9       >                jp      (ix)
1862+ 6C14
1863+ 6C14
1864+ 6C14              //  ______________________________________________________________________
1865+ 6C14              //
1866+ 6C14              // 2*           n1 -- n2
1867+ 6C14              // doubles the number at top of stack
1868+ 6C14                              New_Def TWO_MUL, "2*", is_code, is_normal
1868+ 6C14             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1868+ 6C14             >
1868+ 6C14             >                // dummy db directives used to calculate length of namec
1868+ 6C14 32 2A       >                db      "2*"
1868+ 6C16             >len_NFA         defl    $ - temp_NFA
1868+ 6C16             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1868+ 6C14             >
1868+ 6C14 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1868+ 6C15 32 2A       >                db      "2*"               // name string in 7-bit ascii, but
1868+ 6C17             >                org     $-1                 // alter last byte of Name just above to set
1868+ 6C16 AA          >                db      {b $} | END_BIT     // msb as name end
1868+ 6C17             >
1868+ 6C17 05 6C       >                dw      last_NFA            // Link to previous definition Name
1868+ 6C19             >TWO_MUL:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1868+ 6C19 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1868+ 6C19             >                else
1868+ 6C19 1B 6C       >                dw      $ + 2   ; ok        // is pointed by CFA
1868+ 6C1B             >                endif           ; ok        // for other definitions it "points" the correct handler
1868+ 6C1B             >                // Use of "; ok" to suppress "warning[fwdref]"
1868+ 6C1B             >
1868+ 6C1B             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1869+ 6C1B              Two_Mul_Ptr:
1870+ 6C1B E1                           pop     hl
1871+ 6C1C 29                           add     hl, hl
1872+ 6C1D
1873+ 6C1D                              psh1
1873+ 6C1D E5          >                push    hl
1873+ 6C1E DD E9       >                jp      (ix)
1874+ 6C20
1875+ 6C20              //  ______________________________________________________________________
1876+ 6C20              //
1877+ 6C20              // 2/           n1 -- n2
1878+ 6C20              // halves the top of stack, sign is unchanged
1879+ 6C20                              New_Def TWO_DIV, "2/", is_code, is_normal
1879+ 6C20             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1879+ 6C20             >
1879+ 6C20             >                // dummy db directives used to calculate length of namec
1879+ 6C20 32 2F       >                db      "2/"
1879+ 6C22             >len_NFA         defl    $ - temp_NFA
1879+ 6C22             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1879+ 6C20             >
1879+ 6C20 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1879+ 6C21 32 2F       >                db      "2/"               // name string in 7-bit ascii, but
1879+ 6C23             >                org     $-1                 // alter last byte of Name just above to set
1879+ 6C22 AF          >                db      {b $} | END_BIT     // msb as name end
1879+ 6C23             >
1879+ 6C23 14 6C       >                dw      last_NFA            // Link to previous definition Name
1879+ 6C25             >TWO_DIV:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1879+ 6C25 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1879+ 6C25             >                else
1879+ 6C25 27 6C       >                dw      $ + 2   ; ok        // is pointed by CFA
1879+ 6C27             >                endif           ; ok        // for other definitions it "points" the correct handler
1879+ 6C27             >                // Use of "; ok" to suppress "warning[fwdref]"
1879+ 6C27             >
1879+ 6C27             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1880+ 6C27 E1                           pop     hl
1881+ 6C28 CB 2C                        sra     h
1882+ 6C2A CB 1D                        rr      l
1883+ 6C2C
1884+ 6C2C                              psh1
1884+ 6C2C E5          >                push    hl
1884+ 6C2D DD E9       >                jp      (ix)
1885+ 6C2F
1886+ 6C2F              //  ______________________________________________________________________
1887+ 6C2F              //
1888+ 6C2F              // lshift       n1 u -- n2
1889+ 6C2F              // bit left shift of u bits
1890+ 6C2F                              New_Def LSHIFT, "LSHIFT", is_code, is_normal
1890+ 6C2F             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1890+ 6C2F             >
1890+ 6C2F             >                // dummy db directives used to calculate length of namec
1890+ 6C2F 4C 53 48 49 >                db      "LSHIFT"
1890+ 6C33 46 54       >
1890+ 6C35             >len_NFA         defl    $ - temp_NFA
1890+ 6C35             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1890+ 6C2F             >
1890+ 6C2F 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1890+ 6C30 4C 53 48 49 >                db      "LSHIFT"               // name string in 7-bit ascii, but
1890+ 6C34 46 54       >
1890+ 6C36             >                org     $-1                 // alter last byte of Name just above to set
1890+ 6C35 D4          >                db      {b $} | END_BIT     // msb as name end
1890+ 6C36             >
1890+ 6C36 20 6C       >                dw      last_NFA            // Link to previous definition Name
1890+ 6C38             >LSHIFT:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1890+ 6C38 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1890+ 6C38             >                else
1890+ 6C38 3A 6C       >                dw      $ + 2   ; ok        // is pointed by CFA
1890+ 6C3A             >                endif           ; ok        // for other definitions it "points" the correct handler
1890+ 6C3A             >                // Use of "; ok" to suppress "warning[fwdref]"
1890+ 6C3A             >
1890+ 6C3A             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1891+ 6C3A D9                           exx
1892+ 6C3B C1                           pop     bc
1893+ 6C3C 41                           ld      b, c
1894+ 6C3D D1                           pop     de
1895+ 6C3E ED 28                        bsla    de, b
1896+ 6C40 D5                           push    de
1897+ 6C41 D9                           exx
1898+ 6C42                              next
1898+ 6C42 DD E9       >                jp      (ix)
1899+ 6C44
1900+ 6C44              //  ______________________________________________________________________
1901+ 6C44              //
1902+ 6C44              // rshift       n1 u -- n2
1903+ 6C44              // bit right shift of u bits
1904+ 6C44                              New_Def RSHIFT, "RSHIFT", is_code, is_normal
1904+ 6C44             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1904+ 6C44             >
1904+ 6C44             >                // dummy db directives used to calculate length of namec
1904+ 6C44 52 53 48 49 >                db      "RSHIFT"
1904+ 6C48 46 54       >
1904+ 6C4A             >len_NFA         defl    $ - temp_NFA
1904+ 6C4A             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1904+ 6C44             >
1904+ 6C44 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1904+ 6C45 52 53 48 49 >                db      "RSHIFT"               // name string in 7-bit ascii, but
1904+ 6C49 46 54       >
1904+ 6C4B             >                org     $-1                 // alter last byte of Name just above to set
1904+ 6C4A D4          >                db      {b $} | END_BIT     // msb as name end
1904+ 6C4B             >
1904+ 6C4B 2F 6C       >                dw      last_NFA            // Link to previous definition Name
1904+ 6C4D             >RSHIFT:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1904+ 6C4D ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1904+ 6C4D             >                else
1904+ 6C4D 4F 6C       >                dw      $ + 2   ; ok        // is pointed by CFA
1904+ 6C4F             >                endif           ; ok        // for other definitions it "points" the correct handler
1904+ 6C4F             >                // Use of "; ok" to suppress "warning[fwdref]"
1904+ 6C4F             >
1904+ 6C4F             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1905+ 6C4F D9                           exx
1906+ 6C50 C1                           pop     bc
1907+ 6C51 41                           ld      b, c
1908+ 6C52 D1                           pop     de
1909+ 6C53 ED 2A                        bsrl    de, b
1910+ 6C55 D5                           push    de
1911+ 6C56 D9                           exx
1912+ 6C57                              next
1912+ 6C57 DD E9       >                jp      (ix)
1913+ 6C59
1914+ 6C59              //  ______________________________________________________________________
1915+ 6C59              //
1916+ 6C59              // cells        n1 -- n2
1917+ 6C59              // decrement by 2 top of stack
1918+ 6C59                              New_Def CELLS, "CELLS", Two_Mul_Ptr, is_normal
1918+ 6C59             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1918+ 6C59             >
1918+ 6C59             >                // dummy db directives used to calculate length of namec
1918+ 6C59 43 45 4C 4C >                db      "CELLS"
1918+ 6C5D 53          >
1918+ 6C5E             >len_NFA         defl    $ - temp_NFA
1918+ 6C5E             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1918+ 6C59             >
1918+ 6C59 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1918+ 6C5A 43 45 4C 4C >                db      "CELLS"               // name string in 7-bit ascii, but
1918+ 6C5E 53          >
1918+ 6C5F             >                org     $-1                 // alter last byte of Name just above to set
1918+ 6C5E D3          >                db      {b $} | END_BIT     // msb as name end
1918+ 6C5F             >
1918+ 6C5F 44 6C       >                dw      last_NFA            // Link to previous definition Name
1918+ 6C61             >CELLS:          if Two_Mul_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1918+ 6C61 1B 6C       >                dw      Two_Mul_Ptr ; ok        // for primitive definitions  actual code
1918+ 6C63             >                else
1918+ 6C63 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
1918+ 6C63             >                endif           ; ok        // for other definitions it "points" the correct handler
1918+ 6C63             >                // Use of "; ok" to suppress "warning[fwdref]"
1918+ 6C63             >
1918+ 6C63             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1919+ 6C63
1920+ 6C63
1921+ 6C63              //  ______________________________________________________________________
1922+ 6C63
# file closed: C:\Zx\CSpect\Projects\vForth15_INDIRECT/source/L0.asm
 110  6C63                              include "L1.asm"
# file opened: C:\Zx\CSpect\Projects\vForth15_INDIRECT/source/L1.asm
   1+ 6C63              //  ______________________________________________________________________
   2+ 6C63              //
   3+ 6C63              //  L1.asm
   4+ 6C63              //
   5+ 6C63              //  Level-1 definitions and derivate
   6+ 6C63              //  ______________________________________________________________________
   7+ 6C63
   8+ 6C63              //  ______________________________________________________________________
   9+ 6C63              //
  10+ 6C63              // :            -- cccc     ( compile time )
  11+ 6C63              //              i*x -- j*x  ( run time )
  12+ 6C63              // Colon Definition
  13+ 6C63                              Colon_Def COLON, ":", is_normal      // has forward-ref
  13+ 6C63             >                New_Def  COLON, ":", Enter_Ptr, is_normal ; ok
  13+ 6C63             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  13+ 6C63             >
  13+ 6C63             >                // dummy db directives used to calculate length of namec
  13+ 6C63 3A          >                db      ":"
  13+ 6C64             >len_NFA         defl    $ - temp_NFA
  13+ 6C64             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  13+ 6C63             >
  13+ 6C63 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  13+ 6C64 3A          >                db      ":"               // name string in 7-bit ascii, but
  13+ 6C65             >                org     $-1                 // alter last byte of Name just above to set
  13+ 6C64 BA          >                db      {b $} | END_BIT     // msb as name end
  13+ 6C65             >
  13+ 6C65 59 6C       >                dw      last_NFA            // Link to previous definition Name
  13+ 6C67             >COLON:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
  13+ 6C67 7D 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
  13+ 6C69             >                else
  13+ 6C69 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
  13+ 6C69             >                endif           ; ok        // for other definitions it "points" the correct handler
  13+ 6C69             >                // Use of "; ok" to suppress "warning[fwdref]"
  13+ 6C69             >
  13+ 6C69             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  14+ 6C69
  15+ 6C69 D0 70                        dw      QEXEC                   // ?exec
  16+ 6C6B 8B 70                        dw      STORE_CSP               // !csp
  17+ 6C6D 3A 6E 9B 6B                  dw      CURRENT, FETCH          // current @
  18+ 6C71 2D 6E A8 6B                  dw      CONTEXT, STORE          // context !
  19+ 6C75 CB 76                        dw      CREATE                  // create  ( forward )
  20+ 6C77 7D 71                        dw      SMUDGE                  // dmudge
  21+ 6C79 68 71                        dw      SQUARED_CLOSE           // ]
  22+ 6C7B D3 71                        dw      C_SEMICOLON_CODE        // ;code ( change the 3-bytes CFA of defining word to call Enter_Ptr )
  23+ 6C7D                                                              // ... immediate
  24+ 6C7D              Enter_Ptr:
  25+ 6C7D                              // via call coded in CFA
  26+ 6C7D                              ldhlrp
  26+ 6C7D 2A 96 63    >                ld      hl,(RP_Pointer)
  27+ 6C80 2B                           dec     hl                  // push on Return-Stack current Instruction-Pointer
  28+ 6C81 70                           ld      (hl), b
  29+ 6C82 2B                           dec     hl
  30+ 6C83 71                           ld      (hl), c
  31+ 6C84                              ldrphl
  31+ 6C84 22 96 63    >                ld      (RP_Pointer),hl
  32+ 6C87 13                           inc     de
  33+ 6C88 4B                           ld      c, e
  34+ 6C89 42                           ld      b, d
  35+ 6C8A                              next
  35+ 6C8A DD E9       >                jp      (ix)
  36+ 6C8C
  37+ 6C8C              //  ______________________________________________________________________
  38+ 6C8C              //
  39+ 6C8C              // ;            --
  40+ 6C8C              // Semicolon. End of Colon-Definition. Stack must be balanced.
  41+ 6C8C                              Colon_Def SEMICOLON, ";", is_immediate   // has forward-ref
  41+ 6C8C             >                New_Def  SEMICOLON, ";", Enter_Ptr, is_immediate ; ok
  41+ 6C8C             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  41+ 6C8C             >
  41+ 6C8C             >                // dummy db directives used to calculate length of namec
  41+ 6C8C 3B          >                db      ";"
  41+ 6C8D             >len_NFA         defl    $ - temp_NFA
  41+ 6C8D             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  41+ 6C8C             >
  41+ 6C8C C1          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
  41+ 6C8D 3B          >                db      ";"               // name string in 7-bit ascii, but
  41+ 6C8E             >                org     $-1                 // alter last byte of Name just above to set
  41+ 6C8D BB          >                db      {b $} | END_BIT     // msb as name end
  41+ 6C8E             >
  41+ 6C8E 63 6C       >                dw      last_NFA            // Link to previous definition Name
  41+ 6C90             >SEMICOLON:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
  41+ 6C90 7D 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
  41+ 6C92             >                else
  41+ 6C92 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
  41+ 6C92             >                endif           ; ok        // for other definitions it "points" the correct handler
  41+ 6C92             >                // Use of "; ok" to suppress "warning[fwdref]"
  41+ 6C92             >
  41+ 6C92             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  42+ 6C92
  43+ 6C92 FA 70                        dw      QCSP                    // ?csp
  44+ 6C94 31 71 A3 69                  dw      COMPILE, EXIT           // [compile] ;s
  45+ 6C98 7D 71                        dw      SMUDGE                  // smudge
  46+ 6C9A 5A 71                        dw      SQUARED_OPEN            // [
  47+ 6C9C A3 69                        dw      EXIT                    // ; immediate
  48+ 6C9E
  49+ 6C9E              //  ______________________________________________________________________
  50+ 6C9E              //
  51+ 6C9E              // noop         --
  52+ 6C9E                              New_Def NOOP, "NOOP", is_code, is_normal
  52+ 6C9E             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  52+ 6C9E             >
  52+ 6C9E             >                // dummy db directives used to calculate length of namec
  52+ 6C9E 4E 4F 4F 50 >                db      "NOOP"
  52+ 6CA2             >len_NFA         defl    $ - temp_NFA
  52+ 6CA2             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  52+ 6C9E             >
  52+ 6C9E 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  52+ 6C9F 4E 4F 4F 50 >                db      "NOOP"               // name string in 7-bit ascii, but
  52+ 6CA3             >                org     $-1                 // alter last byte of Name just above to set
  52+ 6CA2 D0          >                db      {b $} | END_BIT     // msb as name end
  52+ 6CA3             >
  52+ 6CA3 8C 6C       >                dw      last_NFA            // Link to previous definition Name
  52+ 6CA5             >NOOP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
  52+ 6CA5 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
  52+ 6CA5             >                else
  52+ 6CA5 A7 6C       >                dw      $ + 2   ; ok        // is pointed by CFA
  52+ 6CA7             >                endif           ; ok        // for other definitions it "points" the correct handler
  52+ 6CA7             >                // Use of "; ok" to suppress "warning[fwdref]"
  52+ 6CA7             >
  52+ 6CA7             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  53+ 6CA7                              next
  53+ 6CA7 DD E9       >                jp      (ix)
  54+ 6CA9
  55+ 6CA9              //  ______________________________________________________________________
  56+ 6CA9              //
  57+ 6CA9              // constant     n -- cccc     ( compile time )
  58+ 6CA9              //              -- n          ( run time )
  59+ 6CA9              // Constant definition.
  60+ 6CA9                              Colon_Def CONSTANT, "CONSTANT", is_normal   // has forward-ref
  60+ 6CA9             >                New_Def  CONSTANT, "CONSTANT", Enter_Ptr, is_normal ; ok
  60+ 6CA9             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  60+ 6CA9             >
  60+ 6CA9             >                // dummy db directives used to calculate length of namec
  60+ 6CA9 43 4F 4E 53 >                db      "CONSTANT"
  60+ 6CAD 54 41 4E 54 >
  60+ 6CB1             >len_NFA         defl    $ - temp_NFA
  60+ 6CB1             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  60+ 6CA9             >
  60+ 6CA9 88          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  60+ 6CAA 43 4F 4E 53 >                db      "CONSTANT"               // name string in 7-bit ascii, but
  60+ 6CAE 54 41 4E 54 >
  60+ 6CB2             >                org     $-1                 // alter last byte of Name just above to set
  60+ 6CB1 D4          >                db      {b $} | END_BIT     // msb as name end
  60+ 6CB2             >
  60+ 6CB2 9E 6C       >                dw      last_NFA            // Link to previous definition Name
  60+ 6CB4             >CONSTANT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
  60+ 6CB4 7D 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
  60+ 6CB6             >                else
  60+ 6CB6 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
  60+ 6CB6             >                endif           ; ok        // for other definitions it "points" the correct handler
  60+ 6CB6             >                // Use of "; ok" to suppress "warning[fwdref]"
  60+ 6CB6             >
  60+ 6CB6             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  61+ 6CB6
  62+ 6CB6 CB 76                        dw      CREATE                  // create
  63+ 6CB8 F5 6E                        dw      COMMA                   // ,    ( at PFA then, store the value )
  64+ 6CBA D3 71                        dw      C_SEMICOLON_CODE        // ;code (  changes the 3-bytes CFA to call Constant_Ptr )
  65+ 6CBC              Constant_Ptr:
  66+ 6CBC
  67+ 6CBC 13                           inc     de
  68+ 6CBD EB                           ex      de, hl
  69+ 6CBE
  70+ 6CBE 5E                           ld      e, (hl)
  71+ 6CBF 23                           inc     hl
  72+ 6CC0 56                           ld      d, (hl)
  73+ 6CC1 D5                           push    de
  74+ 6CC2                              next
  74+ 6CC2 DD E9       >                jp      (ix)
  75+ 6CC4
  76+ 6CC4              //  ______________________________________________________________________
  77+ 6CC4              //
  78+ 6CC4              // variable     n -- cccc     ( compile time )
  79+ 6CC4              //              -- a          ( run time )
  80+ 6CC4              // Variable definition, n is the initial value.
  81+ 6CC4                              Colon_Def VARIABLE, "VARIABLE", is_normal   // has forward-ref
  81+ 6CC4             >                New_Def  VARIABLE, "VARIABLE", Enter_Ptr, is_normal ; ok
  81+ 6CC4             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  81+ 6CC4             >
  81+ 6CC4             >                // dummy db directives used to calculate length of namec
  81+ 6CC4 56 41 52 49 >                db      "VARIABLE"
  81+ 6CC8 41 42 4C 45 >
  81+ 6CCC             >len_NFA         defl    $ - temp_NFA
  81+ 6CCC             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  81+ 6CC4             >
  81+ 6CC4 88          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  81+ 6CC5 56 41 52 49 >                db      "VARIABLE"               // name string in 7-bit ascii, but
  81+ 6CC9 41 42 4C 45 >
  81+ 6CCD             >                org     $-1                 // alter last byte of Name just above to set
  81+ 6CCC C5          >                db      {b $} | END_BIT     // msb as name end
  81+ 6CCD             >
  81+ 6CCD A9 6C       >                dw      last_NFA            // Link to previous definition Name
  81+ 6CCF             >VARIABLE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
  81+ 6CCF 7D 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
  81+ 6CD1             >                else
  81+ 6CD1 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
  81+ 6CD1             >                endif           ; ok        // for other definitions it "points" the correct handler
  81+ 6CD1             >                // Use of "; ok" to suppress "warning[fwdref]"
  81+ 6CD1             >
  81+ 6CD1             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  82+ 6CD1
  83+ 6CD1 FA 6C                        dw      ZERO
  84+ 6CD3 B4 6C                        dw      CONSTANT                // constant
  85+ 6CD5 D3 71                        dw      C_SEMICOLON_CODE        // ;code ( changes the 3-bytes CFA to call Variable_Ptr )
  86+ 6CD7              Variable_Ptr:
  87+ 6CD7
  88+ 6CD7 13                           inc     de
  89+ 6CD8 D5                           push    de                  // balance TOS before overwrite it
  90+ 6CD9
  91+ 6CD9                              next
  91+ 6CD9 DD E9       >                jp      (ix)
  92+ 6CDB
  93+ 6CDB              //  ______________________________________________________________________
  94+ 6CDB              //
  95+ 6CDB              // user         b -- cccc     ( compile time )
  96+ 6CDB              //              -- a          ( run time )
  97+ 6CDB              // User variable definition
  98+ 6CDB                              Colon_Def USER, "USER", is_normal
  98+ 6CDB             >                New_Def  USER, "USER", Enter_Ptr, is_normal ; ok
  98+ 6CDB             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  98+ 6CDB             >
  98+ 6CDB             >                // dummy db directives used to calculate length of namec
  98+ 6CDB 55 53 45 52 >                db      "USER"
  98+ 6CDF             >len_NFA         defl    $ - temp_NFA
  98+ 6CDF             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  98+ 6CDB             >
  98+ 6CDB 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  98+ 6CDC 55 53 45 52 >                db      "USER"               // name string in 7-bit ascii, but
  98+ 6CE0             >                org     $-1                 // alter last byte of Name just above to set
  98+ 6CDF D2          >                db      {b $} | END_BIT     // msb as name end
  98+ 6CE0             >
  98+ 6CE0 C4 6C       >                dw      last_NFA            // Link to previous definition Name
  98+ 6CE2             >USER:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
  98+ 6CE2 7D 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
  98+ 6CE4             >                else
  98+ 6CE4 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
  98+ 6CE4             >                endif           ; ok        // for other definitions it "points" the correct handler
  98+ 6CE4             >                // Use of "; ok" to suppress "warning[fwdref]"
  98+ 6CE4             >
  98+ 6CE4             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  99+ 6CE4
 100+ 6CE4 CB 76                        dw      CREATE                  // create
 101+ 6CE6 06 6F                        dw      CCOMMA                  // c,
 102+ 6CE8 D3 71                        dw      C_SEMICOLON_CODE        // ;code () changes the 3-bytes CFA to call User_Ptr )
 103+ 6CEA
 104+ 6CEA
 105+ 6CEA              User_Ptr:
 106+ 6CEA                              // via call coded in CFA
 107+ 6CEA 13                           inc     de
 108+ 6CEB EB                           ex      de, hl
 109+ 6CEC 5E                           ld      e, (hl)
 110+ 6CED 16 00                        ld      d, 0
 111+ 6CEF 2A 94 63                     ld      hl, (USER_Pointer)
 112+ 6CF2 19                           add     hl, de
 113+ 6CF3
 114+ 6CF3                              psh1
 114+ 6CF3 E5          >                push    hl
 114+ 6CF4 DD E9       >                jp      (ix)
 115+ 6CF6
 116+ 6CF6              //  ______________________________________________________________________
 117+ 6CF6              //
 118+ 6CF6                              Constant_Def ZERO       ,   "0"     ,   0
 118+ 6CF6             >                New_Def  ZERO, "0", Constant_Ptr, is_normal
 118+ 6CF6             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 118+ 6CF6             >
 118+ 6CF6             >                // dummy db directives used to calculate length of namec
 118+ 6CF6 30          >                db      "0"
 118+ 6CF7             >len_NFA         defl    $ - temp_NFA
 118+ 6CF7             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 118+ 6CF6             >
 118+ 6CF6 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 118+ 6CF7 30          >                db      "0"               // name string in 7-bit ascii, but
 118+ 6CF8             >                org     $-1                 // alter last byte of Name just above to set
 118+ 6CF7 B0          >                db      {b $} | END_BIT     // msb as name end
 118+ 6CF8             >
 118+ 6CF8 DB 6C       >                dw      last_NFA            // Link to previous definition Name
 118+ 6CFA             >ZERO:          if Constant_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 118+ 6CFA BC 6C       >                dw      Constant_Ptr ; ok        // for primitive definitions  actual code
 118+ 6CFC             >                else
 118+ 6CFC ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 118+ 6CFC             >                endif           ; ok        // for other definitions it "points" the correct handler
 118+ 6CFC             >                // Use of "; ok" to suppress "warning[fwdref]"
 118+ 6CFC             >
 118+ 6CFC             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 118+ 6CFC 00 00       >                dw      0
 119+ 6CFE                              Constant_Def ONE        ,   "1"     ,   1
 119+ 6CFE             >                New_Def  ONE, "1", Constant_Ptr, is_normal
 119+ 6CFE             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 119+ 6CFE             >
 119+ 6CFE             >                // dummy db directives used to calculate length of namec
 119+ 6CFE 31          >                db      "1"
 119+ 6CFF             >len_NFA         defl    $ - temp_NFA
 119+ 6CFF             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 119+ 6CFE             >
 119+ 6CFE 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 119+ 6CFF 31          >                db      "1"               // name string in 7-bit ascii, but
 119+ 6D00             >                org     $-1                 // alter last byte of Name just above to set
 119+ 6CFF B1          >                db      {b $} | END_BIT     // msb as name end
 119+ 6D00             >
 119+ 6D00 F6 6C       >                dw      last_NFA            // Link to previous definition Name
 119+ 6D02             >ONE:          if Constant_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 119+ 6D02 BC 6C       >                dw      Constant_Ptr ; ok        // for primitive definitions  actual code
 119+ 6D04             >                else
 119+ 6D04 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 119+ 6D04             >                endif           ; ok        // for other definitions it "points" the correct handler
 119+ 6D04             >                // Use of "; ok" to suppress "warning[fwdref]"
 119+ 6D04             >
 119+ 6D04             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 119+ 6D04 01 00       >                dw      1
 120+ 6D06                              Constant_Def TWO        ,   "2"     ,   2
 120+ 6D06             >                New_Def  TWO, "2", Constant_Ptr, is_normal
 120+ 6D06             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 120+ 6D06             >
 120+ 6D06             >                // dummy db directives used to calculate length of namec
 120+ 6D06 32          >                db      "2"
 120+ 6D07             >len_NFA         defl    $ - temp_NFA
 120+ 6D07             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 120+ 6D06             >
 120+ 6D06 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 120+ 6D07 32          >                db      "2"               // name string in 7-bit ascii, but
 120+ 6D08             >                org     $-1                 // alter last byte of Name just above to set
 120+ 6D07 B2          >                db      {b $} | END_BIT     // msb as name end
 120+ 6D08             >
 120+ 6D08 FE 6C       >                dw      last_NFA            // Link to previous definition Name
 120+ 6D0A             >TWO:          if Constant_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 120+ 6D0A BC 6C       >                dw      Constant_Ptr ; ok        // for primitive definitions  actual code
 120+ 6D0C             >                else
 120+ 6D0C ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 120+ 6D0C             >                endif           ; ok        // for other definitions it "points" the correct handler
 120+ 6D0C             >                // Use of "; ok" to suppress "warning[fwdref]"
 120+ 6D0C             >
 120+ 6D0C             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 120+ 6D0C 02 00       >                dw      2
 121+ 6D0E                              Constant_Def THREE      ,   "3"     ,   3
 121+ 6D0E             >                New_Def  THREE, "3", Constant_Ptr, is_normal
 121+ 6D0E             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 121+ 6D0E             >
 121+ 6D0E             >                // dummy db directives used to calculate length of namec
 121+ 6D0E 33          >                db      "3"
 121+ 6D0F             >len_NFA         defl    $ - temp_NFA
 121+ 6D0F             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 121+ 6D0E             >
 121+ 6D0E 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 121+ 6D0F 33          >                db      "3"               // name string in 7-bit ascii, but
 121+ 6D10             >                org     $-1                 // alter last byte of Name just above to set
 121+ 6D0F B3          >                db      {b $} | END_BIT     // msb as name end
 121+ 6D10             >
 121+ 6D10 06 6D       >                dw      last_NFA            // Link to previous definition Name
 121+ 6D12             >THREE:          if Constant_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 121+ 6D12 BC 6C       >                dw      Constant_Ptr ; ok        // for primitive definitions  actual code
 121+ 6D14             >                else
 121+ 6D14 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 121+ 6D14             >                endif           ; ok        // for other definitions it "points" the correct handler
 121+ 6D14             >                // Use of "; ok" to suppress "warning[fwdref]"
 121+ 6D14             >
 121+ 6D14             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 121+ 6D14 03 00       >                dw      3
 122+ 6D16                              Constant_Def NEG_ONE    ,   "-1"    ,  -1
 122+ 6D16             >                New_Def  NEG_ONE, "-1", Constant_Ptr, is_normal
 122+ 6D16             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 122+ 6D16             >
 122+ 6D16             >                // dummy db directives used to calculate length of namec
 122+ 6D16 2D 31       >                db      "-1"
 122+ 6D18             >len_NFA         defl    $ - temp_NFA
 122+ 6D18             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 122+ 6D16             >
 122+ 6D16 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 122+ 6D17 2D 31       >                db      "-1"               // name string in 7-bit ascii, but
 122+ 6D19             >                org     $-1                 // alter last byte of Name just above to set
 122+ 6D18 B1          >                db      {b $} | END_BIT     // msb as name end
 122+ 6D19             >
 122+ 6D19 0E 6D       >                dw      last_NFA            // Link to previous definition Name
 122+ 6D1B             >NEG_ONE:          if Constant_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 122+ 6D1B BC 6C       >                dw      Constant_Ptr ; ok        // for primitive definitions  actual code
 122+ 6D1D             >                else
 122+ 6D1D ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 122+ 6D1D             >                endif           ; ok        // for other definitions it "points" the correct handler
 122+ 6D1D             >                // Use of "; ok" to suppress "warning[fwdref]"
 122+ 6D1D             >
 122+ 6D1D             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 122+ 6D1D FF FF       >                dw      -1
 123+ 6D1F                              Constant_Def BL         ,   "BL"    , $20
 123+ 6D1F             >                New_Def  BL, "BL", Constant_Ptr, is_normal
 123+ 6D1F             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 123+ 6D1F             >
 123+ 6D1F             >                // dummy db directives used to calculate length of namec
 123+ 6D1F 42 4C       >                db      "BL"
 123+ 6D21             >len_NFA         defl    $ - temp_NFA
 123+ 6D21             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 123+ 6D1F             >
 123+ 6D1F 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 123+ 6D20 42 4C       >                db      "BL"               // name string in 7-bit ascii, but
 123+ 6D22             >                org     $-1                 // alter last byte of Name just above to set
 123+ 6D21 CC          >                db      {b $} | END_BIT     // msb as name end
 123+ 6D22             >
 123+ 6D22 16 6D       >                dw      last_NFA            // Link to previous definition Name
 123+ 6D24             >BL:          if Constant_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 123+ 6D24 BC 6C       >                dw      Constant_Ptr ; ok        // for primitive definitions  actual code
 123+ 6D26             >                else
 123+ 6D26 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 123+ 6D26             >                endif           ; ok        // for other definitions it "points" the correct handler
 123+ 6D26             >                // Use of "; ok" to suppress "warning[fwdref]"
 123+ 6D26             >
 123+ 6D26             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 123+ 6D26 20 00       >                dw      $20
 124+ 6D28                              Constant_Def CL         ,   "C/L"   ,  64
 124+ 6D28             >                New_Def  CL, "C/L", Constant_Ptr, is_normal
 124+ 6D28             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 124+ 6D28             >
 124+ 6D28             >                // dummy db directives used to calculate length of namec
 124+ 6D28 43 2F 4C    >                db      "C/L"
 124+ 6D2B             >len_NFA         defl    $ - temp_NFA
 124+ 6D2B             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 124+ 6D28             >
 124+ 6D28 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 124+ 6D29 43 2F 4C    >                db      "C/L"               // name string in 7-bit ascii, but
 124+ 6D2C             >                org     $-1                 // alter last byte of Name just above to set
 124+ 6D2B CC          >                db      {b $} | END_BIT     // msb as name end
 124+ 6D2C             >
 124+ 6D2C 1F 6D       >                dw      last_NFA            // Link to previous definition Name
 124+ 6D2E             >CL:          if Constant_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 124+ 6D2E BC 6C       >                dw      Constant_Ptr ; ok        // for primitive definitions  actual code
 124+ 6D30             >                else
 124+ 6D30 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 124+ 6D30             >                endif           ; ok        // for other definitions it "points" the correct handler
 124+ 6D30             >                // Use of "; ok" to suppress "warning[fwdref]"
 124+ 6D30             >
 124+ 6D30             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 124+ 6D30 40 00       >                dw      64
 125+ 6D32                              Constant_Def BBUF       ,   "B/BUF" , 512
 125+ 6D32             >                New_Def  BBUF, "B/BUF", Constant_Ptr, is_normal
 125+ 6D32             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 125+ 6D32             >
 125+ 6D32             >                // dummy db directives used to calculate length of namec
 125+ 6D32 42 2F 42 55 >                db      "B/BUF"
 125+ 6D36 46          >
 125+ 6D37             >len_NFA         defl    $ - temp_NFA
 125+ 6D37             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 125+ 6D32             >
 125+ 6D32 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 125+ 6D33 42 2F 42 55 >                db      "B/BUF"               // name string in 7-bit ascii, but
 125+ 6D37 46          >
 125+ 6D38             >                org     $-1                 // alter last byte of Name just above to set
 125+ 6D37 C6          >                db      {b $} | END_BIT     // msb as name end
 125+ 6D38             >
 125+ 6D38 28 6D       >                dw      last_NFA            // Link to previous definition Name
 125+ 6D3A             >BBUF:          if Constant_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 125+ 6D3A BC 6C       >                dw      Constant_Ptr ; ok        // for primitive definitions  actual code
 125+ 6D3C             >                else
 125+ 6D3C ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 125+ 6D3C             >                endif           ; ok        // for other definitions it "points" the correct handler
 125+ 6D3C             >                // Use of "; ok" to suppress "warning[fwdref]"
 125+ 6D3C             >
 125+ 6D3C             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 125+ 6D3C 00 02       >                dw      512
 126+ 6D3E                              Constant_Def BSCR       ,   "B/SCR" ,   2
 126+ 6D3E             >                New_Def  BSCR, "B/SCR", Constant_Ptr, is_normal
 126+ 6D3E             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 126+ 6D3E             >
 126+ 6D3E             >                // dummy db directives used to calculate length of namec
 126+ 6D3E 42 2F 53 43 >                db      "B/SCR"
 126+ 6D42 52          >
 126+ 6D43             >len_NFA         defl    $ - temp_NFA
 126+ 6D43             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 126+ 6D3E             >
 126+ 6D3E 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 126+ 6D3F 42 2F 53 43 >                db      "B/SCR"               // name string in 7-bit ascii, but
 126+ 6D43 52          >
 126+ 6D44             >                org     $-1                 // alter last byte of Name just above to set
 126+ 6D43 D2          >                db      {b $} | END_BIT     // msb as name end
 126+ 6D44             >
 126+ 6D44 32 6D       >                dw      last_NFA            // Link to previous definition Name
 126+ 6D46             >BSCR:          if Constant_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 126+ 6D46 BC 6C       >                dw      Constant_Ptr ; ok        // for primitive definitions  actual code
 126+ 6D48             >                else
 126+ 6D48 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 126+ 6D48             >                endif           ; ok        // for other definitions it "points" the correct handler
 126+ 6D48             >                // Use of "; ok" to suppress "warning[fwdref]"
 126+ 6D48             >
 126+ 6D48             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 126+ 6D48 02 00       >                dw      2
 127+ 6D4A                              Constant_Def LSCR       ,   "L/SCR" ,  16
 127+ 6D4A             >                New_Def  LSCR, "L/SCR", Constant_Ptr, is_normal
 127+ 6D4A             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 127+ 6D4A             >
 127+ 6D4A             >                // dummy db directives used to calculate length of namec
 127+ 6D4A 4C 2F 53 43 >                db      "L/SCR"
 127+ 6D4E 52          >
 127+ 6D4F             >len_NFA         defl    $ - temp_NFA
 127+ 6D4F             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 127+ 6D4A             >
 127+ 6D4A 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 127+ 6D4B 4C 2F 53 43 >                db      "L/SCR"               // name string in 7-bit ascii, but
 127+ 6D4F 52          >
 127+ 6D50             >                org     $-1                 // alter last byte of Name just above to set
 127+ 6D4F D2          >                db      {b $} | END_BIT     // msb as name end
 127+ 6D50             >
 127+ 6D50 3E 6D       >                dw      last_NFA            // Link to previous definition Name
 127+ 6D52             >LSCR:          if Constant_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 127+ 6D52 BC 6C       >                dw      Constant_Ptr ; ok        // for primitive definitions  actual code
 127+ 6D54             >                else
 127+ 6D54 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 127+ 6D54             >                endif           ; ok        // for other definitions it "points" the correct handler
 127+ 6D54             >                // Use of "; ok" to suppress "warning[fwdref]"
 127+ 6D54             >
 127+ 6D54             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 127+ 6D54 10 00       >                dw      16
 128+ 6D56
 129+ 6D56              //  ______________________________________________________________________
 130+ 6D56              //
 131+ 6D56              // +origin         --
 132+ 6D56              //              Colon_Def PLUS_ORIGIN, "+ORIGIN", is_normal
 133+ 6D56              //              dw      LIT, Cold_origin        // [ hex 6366 ] literal
 134+ 6D56              //              dw      PLUS                    // +
 135+ 6D56              //              dw      EXIT                    // ;
 136+ 6D56                              New_Def PLUS_ORIGIN, "+ORIGIN", is_code, is_normal
 136+ 6D56             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 136+ 6D56             >
 136+ 6D56             >                // dummy db directives used to calculate length of namec
 136+ 6D56 2B 4F 52 49 >                db      "+ORIGIN"
 136+ 6D5A 47 49 4E    >
 136+ 6D5D             >len_NFA         defl    $ - temp_NFA
 136+ 6D5D             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 136+ 6D56             >
 136+ 6D56 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 136+ 6D57 2B 4F 52 49 >                db      "+ORIGIN"               // name string in 7-bit ascii, but
 136+ 6D5B 47 49 4E    >
 136+ 6D5E             >                org     $-1                 // alter last byte of Name just above to set
 136+ 6D5D CE          >                db      {b $} | END_BIT     // msb as name end
 136+ 6D5E             >
 136+ 6D5E 4A 6D       >                dw      last_NFA            // Link to previous definition Name
 136+ 6D60             >PLUS_ORIGIN:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 136+ 6D60 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
 136+ 6D60             >                else
 136+ 6D60 62 6D       >                dw      $ + 2   ; ok        // is pointed by CFA
 136+ 6D62             >                endif           ; ok        // for other definitions it "points" the correct handler
 136+ 6D62             >                // Use of "; ok" to suppress "warning[fwdref]"
 136+ 6D62             >
 136+ 6D62             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 137+ 6D62 E1                           pop     hl
 138+ 6D63 11 66 63                     ld      de,  Cold_origin
 139+ 6D66 19                           add     hl, de
 140+ 6D67 E5                           push    hl
 141+ 6D68                              next
 141+ 6D68 DD E9       >                jp      (ix)
 142+ 6D6A
 143+ 6D6A
 144+ 6D6A              //  ______________________________________________________________________
 145+ 6D6A              //
 146+ 6D6A                              Constant_Def CNEXT      ,   "(NEXT)", Next_Ptr
 146+ 6D6A             >                New_Def  CNEXT, "(NEXT)", Constant_Ptr, is_normal
 146+ 6D6A             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 146+ 6D6A             >
 146+ 6D6A             >                // dummy db directives used to calculate length of namec
 146+ 6D6A 28 4E 45 58 >                db      "(NEXT)"
 146+ 6D6E 54 29       >
 146+ 6D70             >len_NFA         defl    $ - temp_NFA
 146+ 6D70             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 146+ 6D6A             >
 146+ 6D6A 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 146+ 6D6B 28 4E 45 58 >                db      "(NEXT)"               // name string in 7-bit ascii, but
 146+ 6D6F 54 29       >
 146+ 6D71             >                org     $-1                 // alter last byte of Name just above to set
 146+ 6D70 A9          >                db      {b $} | END_BIT     // msb as name end
 146+ 6D71             >
 146+ 6D71 56 6D       >                dw      last_NFA            // Link to previous definition Name
 146+ 6D73             >CNEXT:          if Constant_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 146+ 6D73 BC 6C       >                dw      Constant_Ptr ; ok        // for primitive definitions  actual code
 146+ 6D75             >                else
 146+ 6D75 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 146+ 6D75             >                endif           ; ok        // for other definitions it "points" the correct handler
 146+ 6D75             >                // Use of "; ok" to suppress "warning[fwdref]"
 146+ 6D75             >
 146+ 6D75             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 146+ 6D75 98 63       >                dw      Next_Ptr
 147+ 6D77
 148+ 6D77              //  ______________________________________________________________________
 149+ 6D77              //
 150+ 6D77
 151+ 6D77                              User_Def S0         , "S0"        , 06 // starting value of Stack-Pointer
 151+ 6D77             >                New_Def  S0, "S0", User_Ptr, is_normal
 151+ 6D77             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 151+ 6D77             >
 151+ 6D77             >                // dummy db directives used to calculate length of namec
 151+ 6D77 53 30       >                db      "S0"
 151+ 6D79             >len_NFA         defl    $ - temp_NFA
 151+ 6D79             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 151+ 6D77             >
 151+ 6D77 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 151+ 6D78 53 30       >                db      "S0"               // name string in 7-bit ascii, but
 151+ 6D7A             >                org     $-1                 // alter last byte of Name just above to set
 151+ 6D79 B0          >                db      {b $} | END_BIT     // msb as name end
 151+ 6D7A             >
 151+ 6D7A 6A 6D       >                dw      last_NFA            // Link to previous definition Name
 151+ 6D7C             >S0:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 151+ 6D7C EA 6C       >                dw      User_Ptr ; ok        // for primitive definitions  actual code
 151+ 6D7E             >                else
 151+ 6D7E ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 151+ 6D7E             >                endif           ; ok        // for other definitions it "points" the correct handler
 151+ 6D7E             >                // Use of "; ok" to suppress "warning[fwdref]"
 151+ 6D7E             >
 151+ 6D7E             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 151+ 6D7E 06          >                db      06
 152+ 6D7F                              User_Def R0         , "R0"        , 08 // starting value of Return-Pointer
 152+ 6D7F             >                New_Def  R0, "R0", User_Ptr, is_normal
 152+ 6D7F             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 152+ 6D7F             >
 152+ 6D7F             >                // dummy db directives used to calculate length of namec
 152+ 6D7F 52 30       >                db      "R0"
 152+ 6D81             >len_NFA         defl    $ - temp_NFA
 152+ 6D81             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 152+ 6D7F             >
 152+ 6D7F 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 152+ 6D80 52 30       >                db      "R0"               // name string in 7-bit ascii, but
 152+ 6D82             >                org     $-1                 // alter last byte of Name just above to set
 152+ 6D81 B0          >                db      {b $} | END_BIT     // msb as name end
 152+ 6D82             >
 152+ 6D82 77 6D       >                dw      last_NFA            // Link to previous definition Name
 152+ 6D84             >R0:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 152+ 6D84 EA 6C       >                dw      User_Ptr ; ok        // for primitive definitions  actual code
 152+ 6D86             >                else
 152+ 6D86 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 152+ 6D86             >                endif           ; ok        // for other definitions it "points" the correct handler
 152+ 6D86             >                // Use of "; ok" to suppress "warning[fwdref]"
 152+ 6D86             >
 152+ 6D86             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 152+ 6D86 08          >                db      08
 153+ 6D87                              User_Def TIB        , "TIB"       , 10 // input terminal buffer address
 153+ 6D87             >                New_Def  TIB, "TIB", User_Ptr, is_normal
 153+ 6D87             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 153+ 6D87             >
 153+ 6D87             >                // dummy db directives used to calculate length of namec
 153+ 6D87 54 49 42    >                db      "TIB"
 153+ 6D8A             >len_NFA         defl    $ - temp_NFA
 153+ 6D8A             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 153+ 6D87             >
 153+ 6D87 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 153+ 6D88 54 49 42    >                db      "TIB"               // name string in 7-bit ascii, but
 153+ 6D8B             >                org     $-1                 // alter last byte of Name just above to set
 153+ 6D8A C2          >                db      {b $} | END_BIT     // msb as name end
 153+ 6D8B             >
 153+ 6D8B 7F 6D       >                dw      last_NFA            // Link to previous definition Name
 153+ 6D8D             >TIB:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 153+ 6D8D EA 6C       >                dw      User_Ptr ; ok        // for primitive definitions  actual code
 153+ 6D8F             >                else
 153+ 6D8F ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 153+ 6D8F             >                endif           ; ok        // for other definitions it "points" the correct handler
 153+ 6D8F             >                // Use of "; ok" to suppress "warning[fwdref]"
 153+ 6D8F             >
 153+ 6D8F             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 153+ 6D8F 0A          >                db      10
 154+ 6D90                              User_Def WIDTH      , "WIDTH"     , 12 // maximum number of characters for a word name
 154+ 6D90             >                New_Def  WIDTH, "WIDTH", User_Ptr, is_normal
 154+ 6D90             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 154+ 6D90             >
 154+ 6D90             >                // dummy db directives used to calculate length of namec
 154+ 6D90 57 49 44 54 >                db      "WIDTH"
 154+ 6D94 48          >
 154+ 6D95             >len_NFA         defl    $ - temp_NFA
 154+ 6D95             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 154+ 6D90             >
 154+ 6D90 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 154+ 6D91 57 49 44 54 >                db      "WIDTH"               // name string in 7-bit ascii, but
 154+ 6D95 48          >
 154+ 6D96             >                org     $-1                 // alter last byte of Name just above to set
 154+ 6D95 C8          >                db      {b $} | END_BIT     // msb as name end
 154+ 6D96             >
 154+ 6D96 87 6D       >                dw      last_NFA            // Link to previous definition Name
 154+ 6D98             >WIDTH:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 154+ 6D98 EA 6C       >                dw      User_Ptr ; ok        // for primitive definitions  actual code
 154+ 6D9A             >                else
 154+ 6D9A ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 154+ 6D9A             >                endif           ; ok        // for other definitions it "points" the correct handler
 154+ 6D9A             >                // Use of "; ok" to suppress "warning[fwdref]"
 154+ 6D9A             >
 154+ 6D9A             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 154+ 6D9A 0C          >                db      12
 155+ 6D9B                              User_Def WARNING    , "WARNING"   , 14 // error reporting method: 0 base, 1 verbose
 155+ 6D9B             >                New_Def  WARNING, "WARNING", User_Ptr, is_normal
 155+ 6D9B             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 155+ 6D9B             >
 155+ 6D9B             >                // dummy db directives used to calculate length of namec
 155+ 6D9B 57 41 52 4E >                db      "WARNING"
 155+ 6D9F 49 4E 47    >
 155+ 6DA2             >len_NFA         defl    $ - temp_NFA
 155+ 6DA2             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 155+ 6D9B             >
 155+ 6D9B 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 155+ 6D9C 57 41 52 4E >                db      "WARNING"               // name string in 7-bit ascii, but
 155+ 6DA0 49 4E 47    >
 155+ 6DA3             >                org     $-1                 // alter last byte of Name just above to set
 155+ 6DA2 C7          >                db      {b $} | END_BIT     // msb as name end
 155+ 6DA3             >
 155+ 6DA3 90 6D       >                dw      last_NFA            // Link to previous definition Name
 155+ 6DA5             >WARNING:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 155+ 6DA5 EA 6C       >                dw      User_Ptr ; ok        // for primitive definitions  actual code
 155+ 6DA7             >                else
 155+ 6DA7 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 155+ 6DA7             >                endif           ; ok        // for other definitions it "points" the correct handler
 155+ 6DA7             >                // Use of "; ok" to suppress "warning[fwdref]"
 155+ 6DA7             >
 155+ 6DA7             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 155+ 6DA7 0E          >                db      14
 156+ 6DA8                              User_Def FENCE      , "FENCE"     , 16 // minimum address where FORGET can work
 156+ 6DA8             >                New_Def  FENCE, "FENCE", User_Ptr, is_normal
 156+ 6DA8             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 156+ 6DA8             >
 156+ 6DA8             >                // dummy db directives used to calculate length of namec
 156+ 6DA8 46 45 4E 43 >                db      "FENCE"
 156+ 6DAC 45          >
 156+ 6DAD             >len_NFA         defl    $ - temp_NFA
 156+ 6DAD             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 156+ 6DA8             >
 156+ 6DA8 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 156+ 6DA9 46 45 4E 43 >                db      "FENCE"               // name string in 7-bit ascii, but
 156+ 6DAD 45          >
 156+ 6DAE             >                org     $-1                 // alter last byte of Name just above to set
 156+ 6DAD C5          >                db      {b $} | END_BIT     // msb as name end
 156+ 6DAE             >
 156+ 6DAE 9B 6D       >                dw      last_NFA            // Link to previous definition Name
 156+ 6DB0             >FENCE:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 156+ 6DB0 EA 6C       >                dw      User_Ptr ; ok        // for primitive definitions  actual code
 156+ 6DB2             >                else
 156+ 6DB2 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 156+ 6DB2             >                endif           ; ok        // for other definitions it "points" the correct handler
 156+ 6DB2             >                // Use of "; ok" to suppress "warning[fwdref]"
 156+ 6DB2             >
 156+ 6DB2             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 156+ 6DB2 10          >                db      16
 157+ 6DB3                              User_Def DP         , "DP"        , 18 // Dictionary Pointer
 157+ 6DB3             >                New_Def  DP, "DP", User_Ptr, is_normal
 157+ 6DB3             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 157+ 6DB3             >
 157+ 6DB3             >                // dummy db directives used to calculate length of namec
 157+ 6DB3 44 50       >                db      "DP"
 157+ 6DB5             >len_NFA         defl    $ - temp_NFA
 157+ 6DB5             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 157+ 6DB3             >
 157+ 6DB3 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 157+ 6DB4 44 50       >                db      "DP"               // name string in 7-bit ascii, but
 157+ 6DB6             >                org     $-1                 // alter last byte of Name just above to set
 157+ 6DB5 D0          >                db      {b $} | END_BIT     // msb as name end
 157+ 6DB6             >
 157+ 6DB6 A8 6D       >                dw      last_NFA            // Link to previous definition Name
 157+ 6DB8             >DP:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 157+ 6DB8 EA 6C       >                dw      User_Ptr ; ok        // for primitive definitions  actual code
 157+ 6DBA             >                else
 157+ 6DBA ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 157+ 6DBA             >                endif           ; ok        // for other definitions it "points" the correct handler
 157+ 6DBA             >                // Use of "; ok" to suppress "warning[fwdref]"
 157+ 6DBA             >
 157+ 6DBA             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 157+ 6DBA 12          >                db      18
 158+ 6DBB                              User_Def VOC_LINK   , "VOC-LINK"  , 20 // pointer to the latest vocabulary
 158+ 6DBB             >                New_Def  VOC_LINK, "VOC-LINK", User_Ptr, is_normal
 158+ 6DBB             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 158+ 6DBB             >
 158+ 6DBB             >                // dummy db directives used to calculate length of namec
 158+ 6DBB 56 4F 43 2D >                db      "VOC-LINK"
 158+ 6DBF 4C 49 4E 4B >
 158+ 6DC3             >len_NFA         defl    $ - temp_NFA
 158+ 6DC3             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 158+ 6DBB             >
 158+ 6DBB 88          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 158+ 6DBC 56 4F 43 2D >                db      "VOC-LINK"               // name string in 7-bit ascii, but
 158+ 6DC0 4C 49 4E 4B >
 158+ 6DC4             >                org     $-1                 // alter last byte of Name just above to set
 158+ 6DC3 CB          >                db      {b $} | END_BIT     // msb as name end
 158+ 6DC4             >
 158+ 6DC4 B3 6D       >                dw      last_NFA            // Link to previous definition Name
 158+ 6DC6             >VOC_LINK:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 158+ 6DC6 EA 6C       >                dw      User_Ptr ; ok        // for primitive definitions  actual code
 158+ 6DC8             >                else
 158+ 6DC8 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 158+ 6DC8             >                endif           ; ok        // for other definitions it "points" the correct handler
 158+ 6DC8             >                // Use of "; ok" to suppress "warning[fwdref]"
 158+ 6DC8             >
 158+ 6DC8             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 158+ 6DC8 14          >                db      20
 159+ 6DC9                              User_Def FIRST      , "FIRST"     , 22 // address of first buffer
 159+ 6DC9             >                New_Def  FIRST, "FIRST", User_Ptr, is_normal
 159+ 6DC9             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 159+ 6DC9             >
 159+ 6DC9             >                // dummy db directives used to calculate length of namec
 159+ 6DC9 46 49 52 53 >                db      "FIRST"
 159+ 6DCD 54          >
 159+ 6DCE             >len_NFA         defl    $ - temp_NFA
 159+ 6DCE             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 159+ 6DC9             >
 159+ 6DC9 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 159+ 6DCA 46 49 52 53 >                db      "FIRST"               // name string in 7-bit ascii, but
 159+ 6DCE 54          >
 159+ 6DCF             >                org     $-1                 // alter last byte of Name just above to set
 159+ 6DCE D4          >                db      {b $} | END_BIT     // msb as name end
 159+ 6DCF             >
 159+ 6DCF BB 6D       >                dw      last_NFA            // Link to previous definition Name
 159+ 6DD1             >FIRST:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 159+ 6DD1 EA 6C       >                dw      User_Ptr ; ok        // for primitive definitions  actual code
 159+ 6DD3             >                else
 159+ 6DD3 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 159+ 6DD3             >                endif           ; ok        // for other definitions it "points" the correct handler
 159+ 6DD3             >                // Use of "; ok" to suppress "warning[fwdref]"
 159+ 6DD3             >
 159+ 6DD3             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 159+ 6DD3 16          >                db      22
 160+ 6DD4                              User_Def LIMIT      , "LIMIT"     , 24 // address of last buffer
 160+ 6DD4             >                New_Def  LIMIT, "LIMIT", User_Ptr, is_normal
 160+ 6DD4             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 160+ 6DD4             >
 160+ 6DD4             >                // dummy db directives used to calculate length of namec
 160+ 6DD4 4C 49 4D 49 >                db      "LIMIT"
 160+ 6DD8 54          >
 160+ 6DD9             >len_NFA         defl    $ - temp_NFA
 160+ 6DD9             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 160+ 6DD4             >
 160+ 6DD4 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 160+ 6DD5 4C 49 4D 49 >                db      "LIMIT"               // name string in 7-bit ascii, but
 160+ 6DD9 54          >
 160+ 6DDA             >                org     $-1                 // alter last byte of Name just above to set
 160+ 6DD9 D4          >                db      {b $} | END_BIT     // msb as name end
 160+ 6DDA             >
 160+ 6DDA C9 6D       >                dw      last_NFA            // Link to previous definition Name
 160+ 6DDC             >LIMIT:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 160+ 6DDC EA 6C       >                dw      User_Ptr ; ok        // for primitive definitions  actual code
 160+ 6DDE             >                else
 160+ 6DDE ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 160+ 6DDE             >                endif           ; ok        // for other definitions it "points" the correct handler
 160+ 6DDE             >                // Use of "; ok" to suppress "warning[fwdref]"
 160+ 6DDE             >
 160+ 6DDE             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 160+ 6DDE 18          >                db      24
 161+ 6DDF                              User_Def EXP        , "EXP"       , 26 // keeps the exponent in number conversion
 161+ 6DDF             >                New_Def  EXP, "EXP", User_Ptr, is_normal
 161+ 6DDF             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 161+ 6DDF             >
 161+ 6DDF             >                // dummy db directives used to calculate length of namec
 161+ 6DDF 45 58 50    >                db      "EXP"
 161+ 6DE2             >len_NFA         defl    $ - temp_NFA
 161+ 6DE2             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 161+ 6DDF             >
 161+ 6DDF 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 161+ 6DE0 45 58 50    >                db      "EXP"               // name string in 7-bit ascii, but
 161+ 6DE3             >                org     $-1                 // alter last byte of Name just above to set
 161+ 6DE2 D0          >                db      {b $} | END_BIT     // msb as name end
 161+ 6DE3             >
 161+ 6DE3 D4 6D       >                dw      last_NFA            // Link to previous definition Name
 161+ 6DE5             >EXP:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 161+ 6DE5 EA 6C       >                dw      User_Ptr ; ok        // for primitive definitions  actual code
 161+ 6DE7             >                else
 161+ 6DE7 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 161+ 6DE7             >                endif           ; ok        // for other definitions it "points" the correct handler
 161+ 6DE7             >                // Use of "; ok" to suppress "warning[fwdref]"
 161+ 6DE7             >
 161+ 6DE7             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 161+ 6DE7 1A          >                db      26
 162+ 6DE8                              User_Def NMODE      , "NMODE"     , 28 // number mode: 0 integer, 1 floating point
 162+ 6DE8             >                New_Def  NMODE, "NMODE", User_Ptr, is_normal
 162+ 6DE8             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 162+ 6DE8             >
 162+ 6DE8             >                // dummy db directives used to calculate length of namec
 162+ 6DE8 4E 4D 4F 44 >                db      "NMODE"
 162+ 6DEC 45          >
 162+ 6DED             >len_NFA         defl    $ - temp_NFA
 162+ 6DED             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 162+ 6DE8             >
 162+ 6DE8 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 162+ 6DE9 4E 4D 4F 44 >                db      "NMODE"               // name string in 7-bit ascii, but
 162+ 6DED 45          >
 162+ 6DEE             >                org     $-1                 // alter last byte of Name just above to set
 162+ 6DED C5          >                db      {b $} | END_BIT     // msb as name end
 162+ 6DEE             >
 162+ 6DEE DF 6D       >                dw      last_NFA            // Link to previous definition Name
 162+ 6DF0             >NMODE:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 162+ 6DF0 EA 6C       >                dw      User_Ptr ; ok        // for primitive definitions  actual code
 162+ 6DF2             >                else
 162+ 6DF2 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 162+ 6DF2             >                endif           ; ok        // for other definitions it "points" the correct handler
 162+ 6DF2             >                // Use of "; ok" to suppress "warning[fwdref]"
 162+ 6DF2             >
 162+ 6DF2             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 162+ 6DF2 1C          >                db      28
 163+ 6DF3                              User_Def BLK        , "BLK"       , 30 // block number to be interpreted. 0 for terminal
 163+ 6DF3             >                New_Def  BLK, "BLK", User_Ptr, is_normal
 163+ 6DF3             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 163+ 6DF3             >
 163+ 6DF3             >                // dummy db directives used to calculate length of namec
 163+ 6DF3 42 4C 4B    >                db      "BLK"
 163+ 6DF6             >len_NFA         defl    $ - temp_NFA
 163+ 6DF6             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 163+ 6DF3             >
 163+ 6DF3 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 163+ 6DF4 42 4C 4B    >                db      "BLK"               // name string in 7-bit ascii, but
 163+ 6DF7             >                org     $-1                 // alter last byte of Name just above to set
 163+ 6DF6 CB          >                db      {b $} | END_BIT     // msb as name end
 163+ 6DF7             >
 163+ 6DF7 E8 6D       >                dw      last_NFA            // Link to previous definition Name
 163+ 6DF9             >BLK:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 163+ 6DF9 EA 6C       >                dw      User_Ptr ; ok        // for primitive definitions  actual code
 163+ 6DFB             >                else
 163+ 6DFB ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 163+ 6DFB             >                endif           ; ok        // for other definitions it "points" the correct handler
 163+ 6DFB             >                // Use of "; ok" to suppress "warning[fwdref]"
 163+ 6DFB             >
 163+ 6DFB             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 163+ 6DFB 1E          >                db      30
 164+ 6DFC                              User_Def TO_IN      , ">IN"       , 32 // incremented when consuming input buffer
 164+ 6DFC             >                New_Def  TO_IN, ">IN", User_Ptr, is_normal
 164+ 6DFC             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 164+ 6DFC             >
 164+ 6DFC             >                // dummy db directives used to calculate length of namec
 164+ 6DFC 3E 49 4E    >                db      ">IN"
 164+ 6DFF             >len_NFA         defl    $ - temp_NFA
 164+ 6DFF             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 164+ 6DFC             >
 164+ 6DFC 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 164+ 6DFD 3E 49 4E    >                db      ">IN"               // name string in 7-bit ascii, but
 164+ 6E00             >                org     $-1                 // alter last byte of Name just above to set
 164+ 6DFF CE          >                db      {b $} | END_BIT     // msb as name end
 164+ 6E00             >
 164+ 6E00 F3 6D       >                dw      last_NFA            // Link to previous definition Name
 164+ 6E02             >TO_IN:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 164+ 6E02 EA 6C       >                dw      User_Ptr ; ok        // for primitive definitions  actual code
 164+ 6E04             >                else
 164+ 6E04 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 164+ 6E04             >                endif           ; ok        // for other definitions it "points" the correct handler
 164+ 6E04             >                // Use of "; ok" to suppress "warning[fwdref]"
 164+ 6E04             >
 164+ 6E04             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 164+ 6E04 20          >                db      32
 165+ 6E05                              User_Def OUT        , "OUT"       , 34 // incremented when sending to output
 165+ 6E05             >                New_Def  OUT, "OUT", User_Ptr, is_normal
 165+ 6E05             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 165+ 6E05             >
 165+ 6E05             >                // dummy db directives used to calculate length of namec
 165+ 6E05 4F 55 54    >                db      "OUT"
 165+ 6E08             >len_NFA         defl    $ - temp_NFA
 165+ 6E08             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 165+ 6E05             >
 165+ 6E05 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 165+ 6E06 4F 55 54    >                db      "OUT"               // name string in 7-bit ascii, but
 165+ 6E09             >                org     $-1                 // alter last byte of Name just above to set
 165+ 6E08 D4          >                db      {b $} | END_BIT     // msb as name end
 165+ 6E09             >
 165+ 6E09 FC 6D       >                dw      last_NFA            // Link to previous definition Name
 165+ 6E0B             >OUT:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 165+ 6E0B EA 6C       >                dw      User_Ptr ; ok        // for primitive definitions  actual code
 165+ 6E0D             >                else
 165+ 6E0D ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 165+ 6E0D             >                endif           ; ok        // for other definitions it "points" the correct handler
 165+ 6E0D             >                // Use of "; ok" to suppress "warning[fwdref]"
 165+ 6E0D             >
 165+ 6E0D             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 165+ 6E0D 22          >                db      34
 166+ 6E0E                              User_Def SCR        , "SCR"       , 36 // latest screen retreieved by LIST
 166+ 6E0E             >                New_Def  SCR, "SCR", User_Ptr, is_normal
 166+ 6E0E             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 166+ 6E0E             >
 166+ 6E0E             >                // dummy db directives used to calculate length of namec
 166+ 6E0E 53 43 52    >                db      "SCR"
 166+ 6E11             >len_NFA         defl    $ - temp_NFA
 166+ 6E11             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 166+ 6E0E             >
 166+ 6E0E 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 166+ 6E0F 53 43 52    >                db      "SCR"               // name string in 7-bit ascii, but
 166+ 6E12             >                org     $-1                 // alter last byte of Name just above to set
 166+ 6E11 D2          >                db      {b $} | END_BIT     // msb as name end
 166+ 6E12             >
 166+ 6E12 05 6E       >                dw      last_NFA            // Link to previous definition Name
 166+ 6E14             >SCR:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 166+ 6E14 EA 6C       >                dw      User_Ptr ; ok        // for primitive definitions  actual code
 166+ 6E16             >                else
 166+ 6E16 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 166+ 6E16             >                endif           ; ok        // for other definitions it "points" the correct handler
 166+ 6E16             >                // Use of "; ok" to suppress "warning[fwdref]"
 166+ 6E16             >
 166+ 6E16             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 166+ 6E16 24          >                db      36
 167+ 6E17                              User_Def OFFSET     , "OFFSET"    , 38 //
 167+ 6E17             >                New_Def  OFFSET, "OFFSET", User_Ptr, is_normal
 167+ 6E17             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 167+ 6E17             >
 167+ 6E17             >                // dummy db directives used to calculate length of namec
 167+ 6E17 4F 46 46 53 >                db      "OFFSET"
 167+ 6E1B 45 54       >
 167+ 6E1D             >len_NFA         defl    $ - temp_NFA
 167+ 6E1D             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 167+ 6E17             >
 167+ 6E17 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 167+ 6E18 4F 46 46 53 >                db      "OFFSET"               // name string in 7-bit ascii, but
 167+ 6E1C 45 54       >
 167+ 6E1E             >                org     $-1                 // alter last byte of Name just above to set
 167+ 6E1D D4          >                db      {b $} | END_BIT     // msb as name end
 167+ 6E1E             >
 167+ 6E1E 0E 6E       >                dw      last_NFA            // Link to previous definition Name
 167+ 6E20             >OFFSET:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 167+ 6E20 EA 6C       >                dw      User_Ptr ; ok        // for primitive definitions  actual code
 167+ 6E22             >                else
 167+ 6E22 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 167+ 6E22             >                endif           ; ok        // for other definitions it "points" the correct handler
 167+ 6E22             >                // Use of "; ok" to suppress "warning[fwdref]"
 167+ 6E22             >
 167+ 6E22             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 167+ 6E22 26          >                db      38
 168+ 6E23                              User_Def CONTEXT    , "CONTEXT"   , 40 // pointer to the vocabulary where search begins
 168+ 6E23             >                New_Def  CONTEXT, "CONTEXT", User_Ptr, is_normal
 168+ 6E23             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 168+ 6E23             >
 168+ 6E23             >                // dummy db directives used to calculate length of namec
 168+ 6E23 43 4F 4E 54 >                db      "CONTEXT"
 168+ 6E27 45 58 54    >
 168+ 6E2A             >len_NFA         defl    $ - temp_NFA
 168+ 6E2A             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 168+ 6E23             >
 168+ 6E23 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 168+ 6E24 43 4F 4E 54 >                db      "CONTEXT"               // name string in 7-bit ascii, but
 168+ 6E28 45 58 54    >
 168+ 6E2B             >                org     $-1                 // alter last byte of Name just above to set
 168+ 6E2A D4          >                db      {b $} | END_BIT     // msb as name end
 168+ 6E2B             >
 168+ 6E2B 17 6E       >                dw      last_NFA            // Link to previous definition Name
 168+ 6E2D             >CONTEXT:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 168+ 6E2D EA 6C       >                dw      User_Ptr ; ok        // for primitive definitions  actual code
 168+ 6E2F             >                else
 168+ 6E2F ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 168+ 6E2F             >                endif           ; ok        // for other definitions it "points" the correct handler
 168+ 6E2F             >                // Use of "; ok" to suppress "warning[fwdref]"
 168+ 6E2F             >
 168+ 6E2F             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 168+ 6E2F 28          >                db      40
 169+ 6E30                              User_Def CURRENT    , "CURRENT"   , 42 // pointer to the vocabulary where search continues
 169+ 6E30             >                New_Def  CURRENT, "CURRENT", User_Ptr, is_normal
 169+ 6E30             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 169+ 6E30             >
 169+ 6E30             >                // dummy db directives used to calculate length of namec
 169+ 6E30 43 55 52 52 >                db      "CURRENT"
 169+ 6E34 45 4E 54    >
 169+ 6E37             >len_NFA         defl    $ - temp_NFA
 169+ 6E37             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 169+ 6E30             >
 169+ 6E30 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 169+ 6E31 43 55 52 52 >                db      "CURRENT"               // name string in 7-bit ascii, but
 169+ 6E35 45 4E 54    >
 169+ 6E38             >                org     $-1                 // alter last byte of Name just above to set
 169+ 6E37 D4          >                db      {b $} | END_BIT     // msb as name end
 169+ 6E38             >
 169+ 6E38 23 6E       >                dw      last_NFA            // Link to previous definition Name
 169+ 6E3A             >CURRENT:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 169+ 6E3A EA 6C       >                dw      User_Ptr ; ok        // for primitive definitions  actual code
 169+ 6E3C             >                else
 169+ 6E3C ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 169+ 6E3C             >                endif           ; ok        // for other definitions it "points" the correct handler
 169+ 6E3C             >                // Use of "; ok" to suppress "warning[fwdref]"
 169+ 6E3C             >
 169+ 6E3C             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 169+ 6E3C 2A          >                db      42
 170+ 6E3D                              User_Def STATE      , "STATE"     , 44 // compilation status. 0 interpreting.
 170+ 6E3D             >                New_Def  STATE, "STATE", User_Ptr, is_normal
 170+ 6E3D             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 170+ 6E3D             >
 170+ 6E3D             >                // dummy db directives used to calculate length of namec
 170+ 6E3D 53 54 41 54 >                db      "STATE"
 170+ 6E41 45          >
 170+ 6E42             >len_NFA         defl    $ - temp_NFA
 170+ 6E42             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 170+ 6E3D             >
 170+ 6E3D 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 170+ 6E3E 53 54 41 54 >                db      "STATE"               // name string in 7-bit ascii, but
 170+ 6E42 45          >
 170+ 6E43             >                org     $-1                 // alter last byte of Name just above to set
 170+ 6E42 C5          >                db      {b $} | END_BIT     // msb as name end
 170+ 6E43             >
 170+ 6E43 30 6E       >                dw      last_NFA            // Link to previous definition Name
 170+ 6E45             >STATE:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 170+ 6E45 EA 6C       >                dw      User_Ptr ; ok        // for primitive definitions  actual code
 170+ 6E47             >                else
 170+ 6E47 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 170+ 6E47             >                endif           ; ok        // for other definitions it "points" the correct handler
 170+ 6E47             >                // Use of "; ok" to suppress "warning[fwdref]"
 170+ 6E47             >
 170+ 6E47             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 170+ 6E47 2C          >                db      44
 171+ 6E48                              User_Def BASE       , "BASE"      , 46 //
 171+ 6E48             >                New_Def  BASE, "BASE", User_Ptr, is_normal
 171+ 6E48             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 171+ 6E48             >
 171+ 6E48             >                // dummy db directives used to calculate length of namec
 171+ 6E48 42 41 53 45 >                db      "BASE"
 171+ 6E4C             >len_NFA         defl    $ - temp_NFA
 171+ 6E4C             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 171+ 6E48             >
 171+ 6E48 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 171+ 6E49 42 41 53 45 >                db      "BASE"               // name string in 7-bit ascii, but
 171+ 6E4D             >                org     $-1                 // alter last byte of Name just above to set
 171+ 6E4C C5          >                db      {b $} | END_BIT     // msb as name end
 171+ 6E4D             >
 171+ 6E4D 3D 6E       >                dw      last_NFA            // Link to previous definition Name
 171+ 6E4F             >BASE:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 171+ 6E4F EA 6C       >                dw      User_Ptr ; ok        // for primitive definitions  actual code
 171+ 6E51             >                else
 171+ 6E51 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 171+ 6E51             >                endif           ; ok        // for other definitions it "points" the correct handler
 171+ 6E51             >                // Use of "; ok" to suppress "warning[fwdref]"
 171+ 6E51             >
 171+ 6E51             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 171+ 6E51 2E          >                db      46
 172+ 6E52                              User_Def DPL        , "DPL"       , 48 // number of digits after decimal point in conversion
 172+ 6E52             >                New_Def  DPL, "DPL", User_Ptr, is_normal
 172+ 6E52             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 172+ 6E52             >
 172+ 6E52             >                // dummy db directives used to calculate length of namec
 172+ 6E52 44 50 4C    >                db      "DPL"
 172+ 6E55             >len_NFA         defl    $ - temp_NFA
 172+ 6E55             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 172+ 6E52             >
 172+ 6E52 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 172+ 6E53 44 50 4C    >                db      "DPL"               // name string in 7-bit ascii, but
 172+ 6E56             >                org     $-1                 // alter last byte of Name just above to set
 172+ 6E55 CC          >                db      {b $} | END_BIT     // msb as name end
 172+ 6E56             >
 172+ 6E56 48 6E       >                dw      last_NFA            // Link to previous definition Name
 172+ 6E58             >DPL:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 172+ 6E58 EA 6C       >                dw      User_Ptr ; ok        // for primitive definitions  actual code
 172+ 6E5A             >                else
 172+ 6E5A ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 172+ 6E5A             >                endif           ; ok        // for other definitions it "points" the correct handler
 172+ 6E5A             >                // Use of "; ok" to suppress "warning[fwdref]"
 172+ 6E5A             >
 172+ 6E5A             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 172+ 6E5A 30          >                db      48
 173+ 6E5B                              User_Def FLD        , "FLD"       , 50 // output field width
 173+ 6E5B             >                New_Def  FLD, "FLD", User_Ptr, is_normal
 173+ 6E5B             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 173+ 6E5B             >
 173+ 6E5B             >                // dummy db directives used to calculate length of namec
 173+ 6E5B 46 4C 44    >                db      "FLD"
 173+ 6E5E             >len_NFA         defl    $ - temp_NFA
 173+ 6E5E             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 173+ 6E5B             >
 173+ 6E5B 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 173+ 6E5C 46 4C 44    >                db      "FLD"               // name string in 7-bit ascii, but
 173+ 6E5F             >                org     $-1                 // alter last byte of Name just above to set
 173+ 6E5E C4          >                db      {b $} | END_BIT     // msb as name end
 173+ 6E5F             >
 173+ 6E5F 52 6E       >                dw      last_NFA            // Link to previous definition Name
 173+ 6E61             >FLD:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 173+ 6E61 EA 6C       >                dw      User_Ptr ; ok        // for primitive definitions  actual code
 173+ 6E63             >                else
 173+ 6E63 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 173+ 6E63             >                endif           ; ok        // for other definitions it "points" the correct handler
 173+ 6E63             >                // Use of "; ok" to suppress "warning[fwdref]"
 173+ 6E63             >
 173+ 6E63             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 173+ 6E63 32          >                db      50
 174+ 6E64                              User_Def CSP        , "CSP"       , 52 // used to temporary store Stack-Pointer value
 174+ 6E64             >                New_Def  CSP, "CSP", User_Ptr, is_normal
 174+ 6E64             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 174+ 6E64             >
 174+ 6E64             >                // dummy db directives used to calculate length of namec
 174+ 6E64 43 53 50    >                db      "CSP"
 174+ 6E67             >len_NFA         defl    $ - temp_NFA
 174+ 6E67             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 174+ 6E64             >
 174+ 6E64 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 174+ 6E65 43 53 50    >                db      "CSP"               // name string in 7-bit ascii, but
 174+ 6E68             >                org     $-1                 // alter last byte of Name just above to set
 174+ 6E67 D0          >                db      {b $} | END_BIT     // msb as name end
 174+ 6E68             >
 174+ 6E68 5B 6E       >                dw      last_NFA            // Link to previous definition Name
 174+ 6E6A             >CSP:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 174+ 6E6A EA 6C       >                dw      User_Ptr ; ok        // for primitive definitions  actual code
 174+ 6E6C             >                else
 174+ 6E6C ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 174+ 6E6C             >                endif           ; ok        // for other definitions it "points" the correct handler
 174+ 6E6C             >                // Use of "; ok" to suppress "warning[fwdref]"
 174+ 6E6C             >
 174+ 6E6C             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 174+ 6E6C 34          >                db      52
 175+ 6E6D                              User_Def RSHARP     , "R#"        , 54 // location of editing cursor
 175+ 6E6D             >                New_Def  RSHARP, "R#", User_Ptr, is_normal
 175+ 6E6D             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 175+ 6E6D             >
 175+ 6E6D             >                // dummy db directives used to calculate length of namec
 175+ 6E6D 52 23       >                db      "R#"
 175+ 6E6F             >len_NFA         defl    $ - temp_NFA
 175+ 6E6F             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 175+ 6E6D             >
 175+ 6E6D 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 175+ 6E6E 52 23       >                db      "R#"               // name string in 7-bit ascii, but
 175+ 6E70             >                org     $-1                 // alter last byte of Name just above to set
 175+ 6E6F A3          >                db      {b $} | END_BIT     // msb as name end
 175+ 6E70             >
 175+ 6E70 64 6E       >                dw      last_NFA            // Link to previous definition Name
 175+ 6E72             >RSHARP:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 175+ 6E72 EA 6C       >                dw      User_Ptr ; ok        // for primitive definitions  actual code
 175+ 6E74             >                else
 175+ 6E74 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 175+ 6E74             >                endif           ; ok        // for other definitions it "points" the correct handler
 175+ 6E74             >                // Use of "; ok" to suppress "warning[fwdref]"
 175+ 6E74             >
 175+ 6E74             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 175+ 6E74 36          >                db      54
 176+ 6E75                              User_Def HLD        , "HLD"       , 56 // last character during a number conversion output
 176+ 6E75             >                New_Def  HLD, "HLD", User_Ptr, is_normal
 176+ 6E75             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 176+ 6E75             >
 176+ 6E75             >                // dummy db directives used to calculate length of namec
 176+ 6E75 48 4C 44    >                db      "HLD"
 176+ 6E78             >len_NFA         defl    $ - temp_NFA
 176+ 6E78             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 176+ 6E75             >
 176+ 6E75 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 176+ 6E76 48 4C 44    >                db      "HLD"               // name string in 7-bit ascii, but
 176+ 6E79             >                org     $-1                 // alter last byte of Name just above to set
 176+ 6E78 C4          >                db      {b $} | END_BIT     // msb as name end
 176+ 6E79             >
 176+ 6E79 6D 6E       >                dw      last_NFA            // Link to previous definition Name
 176+ 6E7B             >HLD:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 176+ 6E7B EA 6C       >                dw      User_Ptr ; ok        // for primitive definitions  actual code
 176+ 6E7D             >                else
 176+ 6E7D ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 176+ 6E7D             >                endif           ; ok        // for other definitions it "points" the correct handler
 176+ 6E7D             >                // Use of "; ok" to suppress "warning[fwdref]"
 176+ 6E7D             >
 176+ 6E7D             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 176+ 6E7D 38          >                db      56
 177+ 6E7E                              User_Def USE        , "USE"       , 58 // address of last used block
 177+ 6E7E             >                New_Def  USE, "USE", User_Ptr, is_normal
 177+ 6E7E             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 177+ 6E7E             >
 177+ 6E7E             >                // dummy db directives used to calculate length of namec
 177+ 6E7E 55 53 45    >                db      "USE"
 177+ 6E81             >len_NFA         defl    $ - temp_NFA
 177+ 6E81             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 177+ 6E7E             >
 177+ 6E7E 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 177+ 6E7F 55 53 45    >                db      "USE"               // name string in 7-bit ascii, but
 177+ 6E82             >                org     $-1                 // alter last byte of Name just above to set
 177+ 6E81 C5          >                db      {b $} | END_BIT     // msb as name end
 177+ 6E82             >
 177+ 6E82 75 6E       >                dw      last_NFA            // Link to previous definition Name
 177+ 6E84             >USE:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 177+ 6E84 EA 6C       >                dw      User_Ptr ; ok        // for primitive definitions  actual code
 177+ 6E86             >                else
 177+ 6E86 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 177+ 6E86             >                endif           ; ok        // for other definitions it "points" the correct handler
 177+ 6E86             >                // Use of "; ok" to suppress "warning[fwdref]"
 177+ 6E86             >
 177+ 6E86             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 177+ 6E86 3A          >                db      58
 178+ 6E87                              User_Def PREV       , "PREV"      , 60 // address of previous used block
 178+ 6E87             >                New_Def  PREV, "PREV", User_Ptr, is_normal
 178+ 6E87             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 178+ 6E87             >
 178+ 6E87             >                // dummy db directives used to calculate length of namec
 178+ 6E87 50 52 45 56 >                db      "PREV"
 178+ 6E8B             >len_NFA         defl    $ - temp_NFA
 178+ 6E8B             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 178+ 6E87             >
 178+ 6E87 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 178+ 6E88 50 52 45 56 >                db      "PREV"               // name string in 7-bit ascii, but
 178+ 6E8C             >                org     $-1                 // alter last byte of Name just above to set
 178+ 6E8B D6          >                db      {b $} | END_BIT     // msb as name end
 178+ 6E8C             >
 178+ 6E8C 7E 6E       >                dw      last_NFA            // Link to previous definition Name
 178+ 6E8E             >PREV:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 178+ 6E8E EA 6C       >                dw      User_Ptr ; ok        // for primitive definitions  actual code
 178+ 6E90             >                else
 178+ 6E90 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 178+ 6E90             >                endif           ; ok        // for other definitions it "points" the correct handler
 178+ 6E90             >                // Use of "; ok" to suppress "warning[fwdref]"
 178+ 6E90             >
 178+ 6E90             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 178+ 6E90 3C          >                db      60
 179+ 6E91                              User_Def LP         , "LP"        , 62 // line printer (not used)
 179+ 6E91             >                New_Def  LP, "LP", User_Ptr, is_normal
 179+ 6E91             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 179+ 6E91             >
 179+ 6E91             >                // dummy db directives used to calculate length of namec
 179+ 6E91 4C 50       >                db      "LP"
 179+ 6E93             >len_NFA         defl    $ - temp_NFA
 179+ 6E93             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 179+ 6E91             >
 179+ 6E91 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 179+ 6E92 4C 50       >                db      "LP"               // name string in 7-bit ascii, but
 179+ 6E94             >                org     $-1                 // alter last byte of Name just above to set
 179+ 6E93 D0          >                db      {b $} | END_BIT     // msb as name end
 179+ 6E94             >
 179+ 6E94 87 6E       >                dw      last_NFA            // Link to previous definition Name
 179+ 6E96             >LP:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 179+ 6E96 EA 6C       >                dw      User_Ptr ; ok        // for primitive definitions  actual code
 179+ 6E98             >                else
 179+ 6E98 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 179+ 6E98             >                endif           ; ok        // for other definitions it "points" the correct handler
 179+ 6E98             >                // Use of "; ok" to suppress "warning[fwdref]"
 179+ 6E98             >
 179+ 6E98             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 179+ 6E98 3E          >                db      62
 180+ 6E99                              User_Def PLACE      , "PLACE"     , 64 // number of digits after decimal point in output
 180+ 6E99             >                New_Def  PLACE, "PLACE", User_Ptr, is_normal
 180+ 6E99             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 180+ 6E99             >
 180+ 6E99             >                // dummy db directives used to calculate length of namec
 180+ 6E99 50 4C 41 43 >                db      "PLACE"
 180+ 6E9D 45          >
 180+ 6E9E             >len_NFA         defl    $ - temp_NFA
 180+ 6E9E             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 180+ 6E99             >
 180+ 6E99 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 180+ 6E9A 50 4C 41 43 >                db      "PLACE"               // name string in 7-bit ascii, but
 180+ 6E9E 45          >
 180+ 6E9F             >                org     $-1                 // alter last byte of Name just above to set
 180+ 6E9E C5          >                db      {b $} | END_BIT     // msb as name end
 180+ 6E9F             >
 180+ 6E9F 91 6E       >                dw      last_NFA            // Link to previous definition Name
 180+ 6EA1             >PLACE:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 180+ 6EA1 EA 6C       >                dw      User_Ptr ; ok        // for primitive definitions  actual code
 180+ 6EA3             >                else
 180+ 6EA3 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 180+ 6EA3             >                endif           ; ok        // for other definitions it "points" the correct handler
 180+ 6EA3             >                // Use of "; ok" to suppress "warning[fwdref]"
 180+ 6EA3             >
 180+ 6EA3             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 180+ 6EA3 40          >                db      64
 181+ 6EA4                              User_Def SOURCE_ID  , "SOURCE-ID" , 66 // data-stream number in INCLUDE and LOAD-
 181+ 6EA4             >                New_Def  SOURCE_ID, "SOURCE-ID", User_Ptr, is_normal
 181+ 6EA4             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 181+ 6EA4             >
 181+ 6EA4             >                // dummy db directives used to calculate length of namec
 181+ 6EA4 53 4F 55 52 >                db      "SOURCE-ID"
 181+ 6EA8 43 45 2D 49 >
 181+ 6EAC 44          >
 181+ 6EAD             >len_NFA         defl    $ - temp_NFA
 181+ 6EAD             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 181+ 6EA4             >
 181+ 6EA4 89          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 181+ 6EA5 53 4F 55 52 >                db      "SOURCE-ID"               // name string in 7-bit ascii, but
 181+ 6EA9 43 45 2D 49 >
 181+ 6EAD 44          >
 181+ 6EAE             >                org     $-1                 // alter last byte of Name just above to set
 181+ 6EAD C4          >                db      {b $} | END_BIT     // msb as name end
 181+ 6EAE             >
 181+ 6EAE 99 6E       >                dw      last_NFA            // Link to previous definition Name
 181+ 6EB0             >SOURCE_ID:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 181+ 6EB0 EA 6C       >                dw      User_Ptr ; ok        // for primitive definitions  actual code
 181+ 6EB2             >                else
 181+ 6EB2 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 181+ 6EB2             >                endif           ; ok        // for other definitions it "points" the correct handler
 181+ 6EB2             >                // Use of "; ok" to suppress "warning[fwdref]"
 181+ 6EB2             >
 181+ 6EB2             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 181+ 6EB2 42          >                db      66
 182+ 6EB3                              User_Def SPAN       , "SPAN"      , 68 // number of character of last EXPECT
 182+ 6EB3             >                New_Def  SPAN, "SPAN", User_Ptr, is_normal
 182+ 6EB3             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 182+ 6EB3             >
 182+ 6EB3             >                // dummy db directives used to calculate length of namec
 182+ 6EB3 53 50 41 4E >                db      "SPAN"
 182+ 6EB7             >len_NFA         defl    $ - temp_NFA
 182+ 6EB7             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 182+ 6EB3             >
 182+ 6EB3 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 182+ 6EB4 53 50 41 4E >                db      "SPAN"               // name string in 7-bit ascii, but
 182+ 6EB8             >                org     $-1                 // alter last byte of Name just above to set
 182+ 6EB7 CE          >                db      {b $} | END_BIT     // msb as name end
 182+ 6EB8             >
 182+ 6EB8 A4 6E       >                dw      last_NFA            // Link to previous definition Name
 182+ 6EBA             >SPAN:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 182+ 6EBA EA 6C       >                dw      User_Ptr ; ok        // for primitive definitions  actual code
 182+ 6EBC             >                else
 182+ 6EBC ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 182+ 6EBC             >                endif           ; ok        // for other definitions it "points" the correct handler
 182+ 6EBC             >                // Use of "; ok" to suppress "warning[fwdref]"
 182+ 6EBC             >
 182+ 6EBC             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 182+ 6EBC 44          >                db      68
 183+ 6EBD                              User_Def HANDLER    , "HANDLER"   , 70 // Used by THROW-CATCH
 183+ 6EBD             >                New_Def  HANDLER, "HANDLER", User_Ptr, is_normal
 183+ 6EBD             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 183+ 6EBD             >
 183+ 6EBD             >                // dummy db directives used to calculate length of namec
 183+ 6EBD 48 41 4E 44 >                db      "HANDLER"
 183+ 6EC1 4C 45 52    >
 183+ 6EC4             >len_NFA         defl    $ - temp_NFA
 183+ 6EC4             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 183+ 6EBD             >
 183+ 6EBD 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 183+ 6EBE 48 41 4E 44 >                db      "HANDLER"               // name string in 7-bit ascii, but
 183+ 6EC2 4C 45 52    >
 183+ 6EC5             >                org     $-1                 // alter last byte of Name just above to set
 183+ 6EC4 D2          >                db      {b $} | END_BIT     // msb as name end
 183+ 6EC5             >
 183+ 6EC5 B3 6E       >                dw      last_NFA            // Link to previous definition Name
 183+ 6EC7             >HANDLER:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 183+ 6EC7 EA 6C       >                dw      User_Ptr ; ok        // for primitive definitions  actual code
 183+ 6EC9             >                else
 183+ 6EC9 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 183+ 6EC9             >                endif           ; ok        // for other definitions it "points" the correct handler
 183+ 6EC9             >                // Use of "; ok" to suppress "warning[fwdref]"
 183+ 6EC9             >
 183+ 6EC9             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 183+ 6EC9 46          >                db      70
 184+ 6ECA                              User_Def HP         , "HP"        , 72 // heap-pointer address
 184+ 6ECA             >                New_Def  HP, "HP", User_Ptr, is_normal
 184+ 6ECA             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 184+ 6ECA             >
 184+ 6ECA             >                // dummy db directives used to calculate length of namec
 184+ 6ECA 48 50       >                db      "HP"
 184+ 6ECC             >len_NFA         defl    $ - temp_NFA
 184+ 6ECC             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 184+ 6ECA             >
 184+ 6ECA 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 184+ 6ECB 48 50       >                db      "HP"               // name string in 7-bit ascii, but
 184+ 6ECD             >                org     $-1                 // alter last byte of Name just above to set
 184+ 6ECC D0          >                db      {b $} | END_BIT     // msb as name end
 184+ 6ECD             >
 184+ 6ECD BD 6E       >                dw      last_NFA            // Link to previous definition Name
 184+ 6ECF             >HP:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 184+ 6ECF EA 6C       >                dw      User_Ptr ; ok        // for primitive definitions  actual code
 184+ 6ED1             >                else
 184+ 6ED1 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 184+ 6ED1             >                endif           ; ok        // for other definitions it "points" the correct handler
 184+ 6ED1             >                // Use of "; ok" to suppress "warning[fwdref]"
 184+ 6ED1             >
 184+ 6ED1             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 184+ 6ED1 48          >                db      72
 185+ 6ED2
 186+ 6ED2              //  ______________________________________________________________________
 187+ 6ED2              //
 188+ 6ED2              // here         -- a
 189+ 6ED2                              Colon_Def HERE, "HERE", is_normal
 189+ 6ED2             >                New_Def  HERE, "HERE", Enter_Ptr, is_normal ; ok
 189+ 6ED2             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 189+ 6ED2             >
 189+ 6ED2             >                // dummy db directives used to calculate length of namec
 189+ 6ED2 48 45 52 45 >                db      "HERE"
 189+ 6ED6             >len_NFA         defl    $ - temp_NFA
 189+ 6ED6             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 189+ 6ED2             >
 189+ 6ED2 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 189+ 6ED3 48 45 52 45 >                db      "HERE"               // name string in 7-bit ascii, but
 189+ 6ED7             >                org     $-1                 // alter last byte of Name just above to set
 189+ 6ED6 C5          >                db      {b $} | END_BIT     // msb as name end
 189+ 6ED7             >
 189+ 6ED7 CA 6E       >                dw      last_NFA            // Link to previous definition Name
 189+ 6ED9             >HERE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 189+ 6ED9 7D 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 189+ 6EDB             >                else
 189+ 6EDB ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 189+ 6EDB             >                endif           ; ok        // for other definitions it "points" the correct handler
 189+ 6EDB             >                // Use of "; ok" to suppress "warning[fwdref]"
 189+ 6EDB             >
 189+ 6EDB             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 190+ 6EDB B8 6D 9B 6B                  dw      DP, FETCH               // dp @
 191+ 6EDF A3 69                        dw      EXIT                    // ;
 192+ 6EE1
 193+ 6EE1              //  ______________________________________________________________________
 194+ 6EE1              //
 195+ 6EE1              // allot        n --
 196+ 6EE1                              Colon_Def ALLOT, "ALLOT", is_normal
 196+ 6EE1             >                New_Def  ALLOT, "ALLOT", Enter_Ptr, is_normal ; ok
 196+ 6EE1             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 196+ 6EE1             >
 196+ 6EE1             >                // dummy db directives used to calculate length of namec
 196+ 6EE1 41 4C 4C 4F >                db      "ALLOT"
 196+ 6EE5 54          >
 196+ 6EE6             >len_NFA         defl    $ - temp_NFA
 196+ 6EE6             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 196+ 6EE1             >
 196+ 6EE1 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 196+ 6EE2 41 4C 4C 4F >                db      "ALLOT"               // name string in 7-bit ascii, but
 196+ 6EE6 54          >
 196+ 6EE7             >                org     $-1                 // alter last byte of Name just above to set
 196+ 6EE6 D4          >                db      {b $} | END_BIT     // msb as name end
 196+ 6EE7             >
 196+ 6EE7 D2 6E       >                dw      last_NFA            // Link to previous definition Name
 196+ 6EE9             >ALLOT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 196+ 6EE9 7D 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 196+ 6EEB             >                else
 196+ 6EEB ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 196+ 6EEB             >                endif           ; ok        // for other definitions it "points" the correct handler
 196+ 6EEB             >                // Use of "; ok" to suppress "warning[fwdref]"
 196+ 6EEB             >
 196+ 6EEB             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 197+ 6EEB B8 6D 78 6B                  dw      DP,  PLUSSTORE          // dp +!
 198+ 6EEF A3 69                        dw      EXIT                    // ;
 199+ 6EF1
 200+ 6EF1              //  ______________________________________________________________________
 201+ 6EF1              //
 202+ 6EF1              // comma        n --
 203+ 6EF1                              Colon_Def COMMA, ",", is_normal
 203+ 6EF1             >                New_Def  COMMA, ",", Enter_Ptr, is_normal ; ok
 203+ 6EF1             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 203+ 6EF1             >
 203+ 6EF1             >                // dummy db directives used to calculate length of namec
 203+ 6EF1 2C          >                db      ","
 203+ 6EF2             >len_NFA         defl    $ - temp_NFA
 203+ 6EF2             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 203+ 6EF1             >
 203+ 6EF1 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 203+ 6EF2 2C          >                db      ","               // name string in 7-bit ascii, but
 203+ 6EF3             >                org     $-1                 // alter last byte of Name just above to set
 203+ 6EF2 AC          >                db      {b $} | END_BIT     // msb as name end
 203+ 6EF3             >
 203+ 6EF3 E1 6E       >                dw      last_NFA            // Link to previous definition Name
 203+ 6EF5             >COMMA:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 203+ 6EF5 7D 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 203+ 6EF7             >                else
 203+ 6EF7 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 203+ 6EF7             >                endif           ; ok        // for other definitions it "points" the correct handler
 203+ 6EF7             >                // Use of "; ok" to suppress "warning[fwdref]"
 203+ 6EF7             >
 203+ 6EF7             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 204+ 6EF7 D9 6E A8 6B                  dw      HERE, STORE             // here !
 205+ 6EFB 0A 6D E9 6E                  dw      TWO, ALLOT              // 2 allot
 206+ 6EFF A3 69                        dw      EXIT                    // ;
 207+ 6F01
 208+ 6F01              //  ______________________________________________________________________
 209+ 6F01              //
 210+ 6F01              // ccomma       c --
 211+ 6F01                              Colon_Def CCOMMA, "C,", is_normal
 211+ 6F01             >                New_Def  CCOMMA, "C,", Enter_Ptr, is_normal ; ok
 211+ 6F01             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 211+ 6F01             >
 211+ 6F01             >                // dummy db directives used to calculate length of namec
 211+ 6F01 43 2C       >                db      "C,"
 211+ 6F03             >len_NFA         defl    $ - temp_NFA
 211+ 6F03             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 211+ 6F01             >
 211+ 6F01 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 211+ 6F02 43 2C       >                db      "C,"               // name string in 7-bit ascii, but
 211+ 6F04             >                org     $-1                 // alter last byte of Name just above to set
 211+ 6F03 AC          >                db      {b $} | END_BIT     // msb as name end
 211+ 6F04             >
 211+ 6F04 F1 6E       >                dw      last_NFA            // Link to previous definition Name
 211+ 6F06             >CCOMMA:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 211+ 6F06 7D 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 211+ 6F08             >                else
 211+ 6F08 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 211+ 6F08             >                endif           ; ok        // for other definitions it "points" the correct handler
 211+ 6F08             >                // Use of "; ok" to suppress "warning[fwdref]"
 211+ 6F08             >
 211+ 6F08             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 212+ 6F08 D9 6E C4 6B                  dw      HERE, CSTORE            // here c!
 213+ 6F0C 02 6D E9 6E                  dw      ONE, ALLOT              // 1 allot
 214+ 6F10 A3 69                        dw      EXIT                    // ;
 215+ 6F12
 216+ 6F12              //  ______________________________________________________________________
 217+ 6F12              //
 218+ 6F12              // s>d          n -- d
 219+ 6F12              // converts a single precision integer in a double precision
 220+ 6F12                              New_Def S_TO_D, "S>D", is_code, is_normal
 220+ 6F12             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 220+ 6F12             >
 220+ 6F12             >                // dummy db directives used to calculate length of namec
 220+ 6F12 53 3E 44    >                db      "S>D"
 220+ 6F15             >len_NFA         defl    $ - temp_NFA
 220+ 6F15             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 220+ 6F12             >
 220+ 6F12 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 220+ 6F13 53 3E 44    >                db      "S>D"               // name string in 7-bit ascii, but
 220+ 6F16             >                org     $-1                 // alter last byte of Name just above to set
 220+ 6F15 C4          >                db      {b $} | END_BIT     // msb as name end
 220+ 6F16             >
 220+ 6F16 01 6F       >                dw      last_NFA            // Link to previous definition Name
 220+ 6F18             >S_TO_D:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 220+ 6F18 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
 220+ 6F18             >                else
 220+ 6F18 1A 6F       >                dw      $ + 2   ; ok        // is pointed by CFA
 220+ 6F1A             >                endif           ; ok        // for other definitions it "points" the correct handler
 220+ 6F1A             >                // Use of "; ok" to suppress "warning[fwdref]"
 220+ 6F1A             >
 220+ 6F1A             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 221+ 6F1A D1                           pop     de
 222+ 6F1B 21 00 00                     ld      hl, 0
 223+ 6F1E 7A                           ld      a, d
 224+ 6F1F E6 80                        and     $80
 225+ 6F21 28 01                        jr      z, S_to_D_Skip
 226+ 6F23 2B                           dec     hl                  // $FFFF
 227+ 6F24              S_to_D_Skip:
 228+ 6F24 D5                           push    de
 229+ 6F25 E5                           push    hl
 230+ 6F26                              next
 230+ 6F26 DD E9       >                jp      (ix)
 231+ 6F28
 232+ 6F28              //  ______________________________________________________________________
 233+ 6F28              //
 234+ 6F28              // -            n1 n2 -- n3
 235+ 6F28              // subtraction
 236+ 6F28                              New_Def SUBTRACT, "-", is_code, is_normal
 236+ 6F28             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 236+ 6F28             >
 236+ 6F28             >                // dummy db directives used to calculate length of namec
 236+ 6F28 2D          >                db      "-"
 236+ 6F29             >len_NFA         defl    $ - temp_NFA
 236+ 6F29             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 236+ 6F28             >
 236+ 6F28 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 236+ 6F29 2D          >                db      "-"               // name string in 7-bit ascii, but
 236+ 6F2A             >                org     $-1                 // alter last byte of Name just above to set
 236+ 6F29 AD          >                db      {b $} | END_BIT     // msb as name end
 236+ 6F2A             >
 236+ 6F2A 12 6F       >                dw      last_NFA            // Link to previous definition Name
 236+ 6F2C             >SUBTRACT:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 236+ 6F2C ~           >                dw      runcode ; ok        // for primitive definitions  actual code
 236+ 6F2C             >                else
 236+ 6F2C 2E 6F       >                dw      $ + 2   ; ok        // is pointed by CFA
 236+ 6F2E             >                endif           ; ok        // for other definitions it "points" the correct handler
 236+ 6F2E             >                // Use of "; ok" to suppress "warning[fwdref]"
 236+ 6F2E             >
 236+ 6F2E             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 237+ 6F2E D1                           pop     de
 238+ 6F2F E1                           pop     hl
 239+ 6F30 A7                           and     a
 240+ 6F31 ED 52                        sbc     hl, de
 241+ 6F33
 242+ 6F33                              psh1
 242+ 6F33 E5          >                push    hl
 242+ 6F34 DD E9       >                jp      (ix)
 243+ 6F36
 244+ 6F36              //  ______________________________________________________________________
 245+ 6F36              //
 246+ 6F36              // =            n1 n2 -- n3
 247+ 6F36              // equals
 248+ 6F36                              Colon_Def EQUALS, "=", is_normal
 248+ 6F36             >                New_Def  EQUALS, "=", Enter_Ptr, is_normal ; ok
 248+ 6F36             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 248+ 6F36             >
 248+ 6F36             >                // dummy db directives used to calculate length of namec
 248+ 6F36 3D          >                db      "="
 248+ 6F37             >len_NFA         defl    $ - temp_NFA
 248+ 6F37             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 248+ 6F36             >
 248+ 6F36 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 248+ 6F37 3D          >                db      "="               // name string in 7-bit ascii, but
 248+ 6F38             >                org     $-1                 // alter last byte of Name just above to set
 248+ 6F37 BD          >                db      {b $} | END_BIT     // msb as name end
 248+ 6F38             >
 248+ 6F38 28 6F       >                dw      last_NFA            // Link to previous definition Name
 248+ 6F3A             >EQUALS:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 248+ 6F3A 7D 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 248+ 6F3C             >                else
 248+ 6F3C ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 248+ 6F3C             >                endif           ; ok        // for other definitions it "points" the correct handler
 248+ 6F3C             >                // Use of "; ok" to suppress "warning[fwdref]"
 248+ 6F3C             >
 248+ 6F3C             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 249+ 6F3C 2C 6F E5 69                  dw      SUBTRACT, ZEQUAL        // - 0=
 250+ 6F40 A3 69                        dw      EXIT                    // ;
 251+ 6F42
 252+ 6F42              //  ______________________________________________________________________
 253+ 6F42              //
 254+ 6F42              // u<           u1 u2 -- u3
 255+ 6F42              // unsigned less-than
 256+ 6F42                              New_Def ULESS, "U<", is_code, is_normal
 256+ 6F42             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 256+ 6F42             >
 256+ 6F42             >                // dummy db directives used to calculate length of namec
 256+ 6F42 55 3C       >                db      "U<"
 256+ 6F44             >len_NFA         defl    $ - temp_NFA
 256+ 6F44             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 256+ 6F42             >
 256+ 6F42 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 256+ 6F43 55 3C       >                db      "U<"               // name string in 7-bit ascii, but
 256+ 6F45             >                org     $-1                 // alter last byte of Name just above to set
 256+ 6F44 BC          >                db      {b $} | END_BIT     // msb as name end
 256+ 6F45             >
 256+ 6F45 36 6F       >                dw      last_NFA            // Link to previous definition Name
 256+ 6F47             >ULESS:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 256+ 6F47 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
 256+ 6F47             >                else
 256+ 6F47 49 6F       >                dw      $ + 2   ; ok        // is pointed by CFA
 256+ 6F49             >                endif           ; ok        // for other definitions it "points" the correct handler
 256+ 6F49             >                // Use of "; ok" to suppress "warning[fwdref]"
 256+ 6F49             >
 256+ 6F49             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 257+ 6F49 D1                           pop     de
 258+ 6F4A E1                           pop     hl
 259+ 6F4B A7                           and     a
 260+ 6F4C ED 52                        sbc     hl, de
 261+ 6F4E 21 FF FF                     ld      hl, -1
 262+ 6F51 38 01                        jr      c, ULess_Skip
 263+ 6F53 23                               inc     hl
 264+ 6F54              ULess_Skip:
 265+ 6F54
 266+ 6F54                              psh1
 266+ 6F54 E5          >                push    hl
 266+ 6F55 DD E9       >                jp      (ix)
 267+ 6F57
 268+ 6F57              //  ______________________________________________________________________
 269+ 6F57              //
 270+ 6F57              // <           n1 n2 -- n3
 271+ 6F57              // less-than
 272+ 6F57                              New_Def LESS, "<", is_code, is_normal
 272+ 6F57             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 272+ 6F57             >
 272+ 6F57             >                // dummy db directives used to calculate length of namec
 272+ 6F57 3C          >                db      "<"
 272+ 6F58             >len_NFA         defl    $ - temp_NFA
 272+ 6F58             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 272+ 6F57             >
 272+ 6F57 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 272+ 6F58 3C          >                db      "<"               // name string in 7-bit ascii, but
 272+ 6F59             >                org     $-1                 // alter last byte of Name just above to set
 272+ 6F58 BC          >                db      {b $} | END_BIT     // msb as name end
 272+ 6F59             >
 272+ 6F59 42 6F       >                dw      last_NFA            // Link to previous definition Name
 272+ 6F5B             >LESS:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 272+ 6F5B ~           >                dw      runcode ; ok        // for primitive definitions  actual code
 272+ 6F5B             >                else
 272+ 6F5B 5D 6F       >                dw      $ + 2   ; ok        // is pointed by CFA
 272+ 6F5D             >                endif           ; ok        // for other definitions it "points" the correct handler
 272+ 6F5D             >                // Use of "; ok" to suppress "warning[fwdref]"
 272+ 6F5D             >
 272+ 6F5D             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 273+ 6F5D D1                           pop     de
 274+ 6F5E E1                           pop     hl
 275+ 6F5F 7C                           ld      a, h
 276+ 6F60 EE 80                        xor     $80
 277+ 6F62 67                           ld      h, a
 278+ 6F63 7A                           ld      a, d
 279+ 6F64 EE 80                        xor     $80
 280+ 6F66 57                           ld      d, a
 281+ 6F67              //              and     a
 282+ 6F67 ED 52                        sbc     hl, de
 283+ 6F69 ED 62                        sbc     hl, hl
 284+ 6F6B                              psh1
 284+ 6F6B E5          >                push    hl
 284+ 6F6C DD E9       >                jp      (ix)
 285+ 6F6E
 286+ 6F6E              //  ______________________________________________________________________
 287+ 6F6E              //
 288+ 6F6E              // >            n1 n2 -- n3
 289+ 6F6E              // greater than
 290+ 6F6E                              Colon_Def GREATER, ">", is_normal
 290+ 6F6E             >                New_Def  GREATER, ">", Enter_Ptr, is_normal ; ok
 290+ 6F6E             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 290+ 6F6E             >
 290+ 6F6E             >                // dummy db directives used to calculate length of namec
 290+ 6F6E 3E          >                db      ">"
 290+ 6F6F             >len_NFA         defl    $ - temp_NFA
 290+ 6F6F             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 290+ 6F6E             >
 290+ 6F6E 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 290+ 6F6F 3E          >                db      ">"               // name string in 7-bit ascii, but
 290+ 6F70             >                org     $-1                 // alter last byte of Name just above to set
 290+ 6F6F BE          >                db      {b $} | END_BIT     // msb as name end
 290+ 6F70             >
 290+ 6F70 57 6F       >                dw      last_NFA            // Link to previous definition Name
 290+ 6F72             >GREATER:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 290+ 6F72 7D 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 290+ 6F74             >                else
 290+ 6F74 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 290+ 6F74             >                endif           ; ok        // for other definitions it "points" the correct handler
 290+ 6F74             >                // Use of "; ok" to suppress "warning[fwdref]"
 290+ 6F74             >
 290+ 6F74             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 291+ 6F74 FB 6A 5B 6F                  dw      SWAP, LESS              // swap <
 292+ 6F78 A3 69                        dw      EXIT                    // ;
 293+ 6F7A              //  ______________________________________________________________________
 294+ 6F7A              //
 295+ 6F7A              // min          n1 n2 -- n3
 296+ 6F7A              // minimum between n1 and n2
 297+ 6F7A                              Colon_Def MIN, "MIN" , is_normal
 297+ 6F7A             >                New_Def  MIN, "MIN", Enter_Ptr, is_normal ; ok
 297+ 6F7A             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 297+ 6F7A             >
 297+ 6F7A             >                // dummy db directives used to calculate length of namec
 297+ 6F7A 4D 49 4E    >                db      "MIN"
 297+ 6F7D             >len_NFA         defl    $ - temp_NFA
 297+ 6F7D             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 297+ 6F7A             >
 297+ 6F7A 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 297+ 6F7B 4D 49 4E    >                db      "MIN"               // name string in 7-bit ascii, but
 297+ 6F7E             >                org     $-1                 // alter last byte of Name just above to set
 297+ 6F7D CE          >                db      {b $} | END_BIT     // msb as name end
 297+ 6F7E             >
 297+ 6F7E 6E 6F       >                dw      last_NFA            // Link to previous definition Name
 297+ 6F80             >MIN:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 297+ 6F80 7D 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 297+ 6F82             >                else
 297+ 6F82 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 297+ 6F82             >                endif           ; ok        // for other definitions it "points" the correct handler
 297+ 6F82             >                // Use of "; ok" to suppress "warning[fwdref]"
 297+ 6F82             >
 297+ 6F82             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 298+ 6F82 69 6B                        dw      TWO_DUP                 // 2dup
 299+ 6F84 72 6F                        dw      GREATER                 // >
 300+ 6F86 2C 64                        dw      ZBRANCH
 301+ 6F88 04 00                        dw      Min_Skip - $   // if
 302+ 6F8A FB 6A                        dw          SWAP                //      swap
 303+ 6F8C              Min_Skip:                                       // endif
 304+ 6F8C D3 6A                        dw      DROP                    // drop
 305+ 6F8E A3 69                        dw      EXIT                    // ;
 306+ 6F90
 307+ 6F90              //  ______________________________________________________________________
 308+ 6F90              //
 309+ 6F90              // max          n1 n2 -- n3
 310+ 6F90              // maximum between n1 and n2
 311+ 6F90                              Colon_Def MAX, "MAX", is_normal
 311+ 6F90             >                New_Def  MAX, "MAX", Enter_Ptr, is_normal ; ok
 311+ 6F90             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 311+ 6F90             >
 311+ 6F90             >                // dummy db directives used to calculate length of namec
 311+ 6F90 4D 41 58    >                db      "MAX"
 311+ 6F93             >len_NFA         defl    $ - temp_NFA
 311+ 6F93             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 311+ 6F90             >
 311+ 6F90 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 311+ 6F91 4D 41 58    >                db      "MAX"               // name string in 7-bit ascii, but
 311+ 6F94             >                org     $-1                 // alter last byte of Name just above to set
 311+ 6F93 D8          >                db      {b $} | END_BIT     // msb as name end
 311+ 6F94             >
 311+ 6F94 7A 6F       >                dw      last_NFA            // Link to previous definition Name
 311+ 6F96             >MAX:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 311+ 6F96 7D 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 311+ 6F98             >                else
 311+ 6F98 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 311+ 6F98             >                endif           ; ok        // for other definitions it "points" the correct handler
 311+ 6F98             >                // Use of "; ok" to suppress "warning[fwdref]"
 311+ 6F98             >
 311+ 6F98             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 312+ 6F98 69 6B                        dw      TWO_DUP                 // 2dup
 313+ 6F9A 5B 6F                        dw      LESS                    // <
 314+ 6F9C 2C 64                        dw      ZBRANCH
 315+ 6F9E 04 00                        dw      Max_Skip - $   // if
 316+ 6FA0 FB 6A                        dw          SWAP                //      swap
 317+ 6FA2              Max_Skip:                                       // endif
 318+ 6FA2 D3 6A                        dw      DROP                    // drop
 319+ 6FA4 A3 69                        dw      EXIT                    // ;
 320+ 6FA6
 321+ 6FA6              //  ______________________________________________________________________
 322+ 6FA6              //
 323+ 6FA6              // ?dup         n -- 0 | n n
 324+ 6FA6              // duplicate if not zero
 325+ 6FA6                              New_Def QDUP, "?DUP", is_code, is_normal
 325+ 6FA6             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 325+ 6FA6             >
 325+ 6FA6             >                // dummy db directives used to calculate length of namec
 325+ 6FA6 3F 44 55 50 >                db      "?DUP"
 325+ 6FAA             >len_NFA         defl    $ - temp_NFA
 325+ 6FAA             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 325+ 6FA6             >
 325+ 6FA6 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 325+ 6FA7 3F 44 55 50 >                db      "?DUP"               // name string in 7-bit ascii, but
 325+ 6FAB             >                org     $-1                 // alter last byte of Name just above to set
 325+ 6FAA D0          >                db      {b $} | END_BIT     // msb as name end
 325+ 6FAB             >
 325+ 6FAB 90 6F       >                dw      last_NFA            // Link to previous definition Name
 325+ 6FAD             >QDUP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 325+ 6FAD ~           >                dw      runcode ; ok        // for primitive definitions  actual code
 325+ 6FAD             >                else
 325+ 6FAD AF 6F       >                dw      $ + 2   ; ok        // is pointed by CFA
 325+ 6FAF             >                endif           ; ok        // for other definitions it "points" the correct handler
 325+ 6FAF             >                // Use of "; ok" to suppress "warning[fwdref]"
 325+ 6FAF             >
 325+ 6FAF             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 326+ 6FAF              QDup_Ptr:
 327+ 6FAF E1                           pop     hl
 328+ 6FB0 7C                           ld      a, h
 329+ 6FB1 B5                           or      l
 330+ 6FB2 28 01                        jr      z, QDup_Skip
 331+ 6FB4 E5                               push    hl
 332+ 6FB5              QDup_Skip:
 333+ 6FB5                              psh1
 333+ 6FB5 E5          >                push    hl
 333+ 6FB6 DD E9       >                jp      (ix)
 334+ 6FB8
 335+ 6FB8              //  ______________________________________________________________________
 336+ 6FB8              //
 337+ 6FB8              // -dup         n -- 0 | n n
 338+ 6FB8              // duplicate if not zero
 339+ 6FB8                              New_Def LDUP, "-DUP", QDup_Ptr, is_normal
 339+ 6FB8             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 339+ 6FB8             >
 339+ 6FB8             >                // dummy db directives used to calculate length of namec
 339+ 6FB8 2D 44 55 50 >                db      "-DUP"
 339+ 6FBC             >len_NFA         defl    $ - temp_NFA
 339+ 6FBC             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 339+ 6FB8             >
 339+ 6FB8 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 339+ 6FB9 2D 44 55 50 >                db      "-DUP"               // name string in 7-bit ascii, but
 339+ 6FBD             >                org     $-1                 // alter last byte of Name just above to set
 339+ 6FBC D0          >                db      {b $} | END_BIT     // msb as name end
 339+ 6FBD             >
 339+ 6FBD A6 6F       >                dw      last_NFA            // Link to previous definition Name
 339+ 6FBF             >LDUP:          if QDup_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 339+ 6FBF AF 6F       >                dw      QDup_Ptr ; ok        // for primitive definitions  actual code
 339+ 6FC1             >                else
 339+ 6FC1 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 339+ 6FC1             >                endif           ; ok        // for other definitions it "points" the correct handler
 339+ 6FC1             >                // Use of "; ok" to suppress "warning[fwdref]"
 339+ 6FC1             >
 339+ 6FC1             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 340+ 6FC1
 341+ 6FC1              //  ______________________________________________________________________
 342+ 6FC1              //
 343+ 6FC1              // emit         c --
 344+ 6FC1                              Colon_Def EMIT, "EMIT", is_normal
 344+ 6FC1             >                New_Def  EMIT, "EMIT", Enter_Ptr, is_normal ; ok
 344+ 6FC1             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 344+ 6FC1             >
 344+ 6FC1             >                // dummy db directives used to calculate length of namec
 344+ 6FC1 45 4D 49 54 >                db      "EMIT"
 344+ 6FC5             >len_NFA         defl    $ - temp_NFA
 344+ 6FC5             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 344+ 6FC1             >
 344+ 6FC1 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 344+ 6FC2 45 4D 49 54 >                db      "EMIT"               // name string in 7-bit ascii, but
 344+ 6FC6             >                org     $-1                 // alter last byte of Name just above to set
 344+ 6FC5 D4          >                db      {b $} | END_BIT     // msb as name end
 344+ 6FC6             >
 344+ 6FC6 B8 6F       >                dw      last_NFA            // Link to previous definition Name
 344+ 6FC8             >EMIT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 344+ 6FC8 7D 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 344+ 6FCA             >                else
 344+ 6FCA ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 344+ 6FCA             >                endif           ; ok        // for other definitions it "points" the correct handler
 344+ 6FCA             >                // Use of "; ok" to suppress "warning[fwdref]"
 344+ 6FCA             >
 344+ 6FCA             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 345+ 6FCA 52 66                        dw      C_EMIT                      // (?emit)
 346+ 6FCC AD 6F                        dw      QDUP                        // ?dup
 347+ 6FCE                                                                  // if
 348+ 6FCE 2C 64                        dw      ZBRANCH
 349+ 6FD0 0A 00                        dw      Emit_Skip - $
 350+ 6FD2 13 66                        dw          EMITC                   //      emitc
 351+ 6FD4 02 6D                        dw          ONE                     //      1
 352+ 6FD6 0B 6E 78 6B                  dw          OUT, PLUSSTORE        //      out +!
 353+ 6FDA              Emit_Skip:                                          // endif
 354+ 6FDA A3 69                        dw      EXIT                        // ;
 355+ 6FDC
 356+ 6FDC              //  ______________________________________________________________________
 357+ 6FDC              //
 358+ 6FDC              // space        --
 359+ 6FDC                              Colon_Def SPACE, "SPACE", is_normal
 359+ 6FDC             >                New_Def  SPACE, "SPACE", Enter_Ptr, is_normal ; ok
 359+ 6FDC             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 359+ 6FDC             >
 359+ 6FDC             >                // dummy db directives used to calculate length of namec
 359+ 6FDC 53 50 41 43 >                db      "SPACE"
 359+ 6FE0 45          >
 359+ 6FE1             >len_NFA         defl    $ - temp_NFA
 359+ 6FE1             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 359+ 6FDC             >
 359+ 6FDC 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 359+ 6FDD 53 50 41 43 >                db      "SPACE"               // name string in 7-bit ascii, but
 359+ 6FE1 45          >
 359+ 6FE2             >                org     $-1                 // alter last byte of Name just above to set
 359+ 6FE1 C5          >                db      {b $} | END_BIT     // msb as name end
 359+ 6FE2             >
 359+ 6FE2 C1 6F       >                dw      last_NFA            // Link to previous definition Name
 359+ 6FE4             >SPACE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 359+ 6FE4 7D 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 359+ 6FE6             >                else
 359+ 6FE6 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 359+ 6FE6             >                endif           ; ok        // for other definitions it "points" the correct handler
 359+ 6FE6             >                // Use of "; ok" to suppress "warning[fwdref]"
 359+ 6FE6             >
 359+ 6FE6             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 360+ 6FE6 24 6D C8 6F                  dw      BL, EMIT                // bl emit
 361+ 6FEA A3 69                        dw      EXIT                    // ;
 362+ 6FEC
 363+ 6FEC              //  ______________________________________________________________________
 364+ 6FEC              //
 365+ 6FEC              // traverse     a n -- a
 366+ 6FEC              // A dictionary entry is structured as follows
 367+ 6FEC              // NFA: +0   one byte of word-length (n<32) | some flags (immediate, smudge) | $80
 368+ 6FEC              //      +1   word name, last character is toggled with $80
 369+ 6FEC              // LFA: +1+n link to NFA ofprevious  dictionary entry.
 370+ 6FEC              // CFA: +3+n routine address. Colon definitions here have pointer to code
 371+ 6FEC              // PFA: +5+n "is_code", definitions have no PFA.
 372+ 6FEC              //
 373+ 6FEC                              Colon_Def TRAVERSE, "TRAVERSE", is_normal
 373+ 6FEC             >                New_Def  TRAVERSE, "TRAVERSE", Enter_Ptr, is_normal ; ok
 373+ 6FEC             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 373+ 6FEC             >
 373+ 6FEC             >                // dummy db directives used to calculate length of namec
 373+ 6FEC 54 52 41 56 >                db      "TRAVERSE"
 373+ 6FF0 45 52 53 45 >
 373+ 6FF4             >len_NFA         defl    $ - temp_NFA
 373+ 6FF4             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 373+ 6FEC             >
 373+ 6FEC 88          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 373+ 6FED 54 52 41 56 >                db      "TRAVERSE"               // name string in 7-bit ascii, but
 373+ 6FF1 45 52 53 45 >
 373+ 6FF5             >                org     $-1                 // alter last byte of Name just above to set
 373+ 6FF4 C5          >                db      {b $} | END_BIT     // msb as name end
 373+ 6FF5             >
 373+ 6FF5 DC 6F       >                dw      last_NFA            // Link to previous definition Name
 373+ 6FF7             >TRAVERSE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 373+ 6FF7 7D 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 373+ 6FF9             >                else
 373+ 6FF9 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 373+ 6FF9             >                endif           ; ok        // for other definitions it "points" the correct handler
 373+ 6FF9             >                // Use of "; ok" to suppress "warning[fwdref]"
 373+ 6FF9             >
 373+ 6FF9             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 374+ 6FF9 FB 6A                        dw      SWAP                    // swap
 375+ 6FFB              Traverse_Begin:                                 // begin
 376+ 6FFB C3 6A 28 6A                  dw          OVER, PLUS          //      over +
 377+ 6FFF A9 63 7F 00                  dw          LIT, 127            //      127
 378+ 7003 C3 6A B6 6B                  dw          OVER, CFETCH        //      over @
 379+ 7007 5B 6F                        dw          LESS                //      <
 380+ 7009                                                              // until
 381+ 7009 2C 64                        dw      ZBRANCH
 382+ 700B F0 FF                        dw      Traverse_Begin - $
 383+ 700D DE 6A                        dw      NIP                     //  nip
 384+ 700F A3 69                        dw      EXIT                    //  ;
 385+ 7011
 386+ 7011              //  ______________________________________________________________________
 387+ 7011              //
 388+ 7011              // latest       -- nfa
 389+ 7011                              Colon_Def LATEST, "LATEST", is_normal
 389+ 7011             >                New_Def  LATEST, "LATEST", Enter_Ptr, is_normal ; ok
 389+ 7011             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 389+ 7011             >
 389+ 7011             >                // dummy db directives used to calculate length of namec
 389+ 7011 4C 41 54 45 >                db      "LATEST"
 389+ 7015 53 54       >
 389+ 7017             >len_NFA         defl    $ - temp_NFA
 389+ 7017             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 389+ 7011             >
 389+ 7011 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 389+ 7012 4C 41 54 45 >                db      "LATEST"               // name string in 7-bit ascii, but
 389+ 7016 53 54       >
 389+ 7018             >                org     $-1                 // alter last byte of Name just above to set
 389+ 7017 D4          >                db      {b $} | END_BIT     // msb as name end
 389+ 7018             >
 389+ 7018 EC 6F       >                dw      last_NFA            // Link to previous definition Name
 389+ 701A             >LATEST:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 389+ 701A 7D 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 389+ 701C             >                else
 389+ 701C ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 389+ 701C             >                endif           ; ok        // for other definitions it "points" the correct handler
 389+ 701C             >                // Use of "; ok" to suppress "warning[fwdref]"
 389+ 701C             >
 389+ 701C             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 390+ 701C 3A 6E                        dw      CURRENT                 // current
 391+ 701E 9B 6B 9B 6B                  dw      FETCH, FETCH            // @ @
 392+ 7022 A3 69                        dw      EXIT                    // ;
 393+ 7024
 394+ 7024              //  ______________________________________________________________________
 395+ 7024              //
 396+ 7024              // lfa          pfa -- lfa
 397+ 7024                              Colon_Def LFA, "LFA", is_normal
 397+ 7024             >                New_Def  LFA, "LFA", Enter_Ptr, is_normal ; ok
 397+ 7024             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 397+ 7024             >
 397+ 7024             >                // dummy db directives used to calculate length of namec
 397+ 7024 4C 46 41    >                db      "LFA"
 397+ 7027             >len_NFA         defl    $ - temp_NFA
 397+ 7027             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 397+ 7024             >
 397+ 7024 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 397+ 7025 4C 46 41    >                db      "LFA"               // name string in 7-bit ascii, but
 397+ 7028             >                org     $-1                 // alter last byte of Name just above to set
 397+ 7027 C1          >                db      {b $} | END_BIT     // msb as name end
 397+ 7028             >
 397+ 7028 11 70       >                dw      last_NFA            // Link to previous definition Name
 397+ 702A             >LFA:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 397+ 702A 7D 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 397+ 702C             >                else
 397+ 702C ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 397+ 702C             >                endif           ; ok        // for other definitions it "points" the correct handler
 397+ 702C             >                // Use of "; ok" to suppress "warning[fwdref]"
 397+ 702C             >
 397+ 702C             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 398+ 702C 7B 6A                        dw      CELL_MINUS              // cell-
 399+ 702E 7B 6A                        dw      CELL_MINUS              // cell-
 400+ 7030 A3 69                        dw      EXIT                    // ;
 401+ 7032
 402+ 7032              //  ______________________________________________________________________
 403+ 7032              //
 404+ 7032              // cfa          pfa -- cfa
 405+ 7032                              Colon_Def CFA, "CFA", is_normal
 405+ 7032             >                New_Def  CFA, "CFA", Enter_Ptr, is_normal ; ok
 405+ 7032             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 405+ 7032             >
 405+ 7032             >                // dummy db directives used to calculate length of namec
 405+ 7032 43 46 41    >                db      "CFA"
 405+ 7035             >len_NFA         defl    $ - temp_NFA
 405+ 7035             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 405+ 7032             >
 405+ 7032 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 405+ 7033 43 46 41    >                db      "CFA"               // name string in 7-bit ascii, but
 405+ 7036             >                org     $-1                 // alter last byte of Name just above to set
 405+ 7035 C1          >                db      {b $} | END_BIT     // msb as name end
 405+ 7036             >
 405+ 7036 24 70       >                dw      last_NFA            // Link to previous definition Name
 405+ 7038             >CFA:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 405+ 7038 7D 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 405+ 703A             >                else
 405+ 703A ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 405+ 703A             >                endif           ; ok        // for other definitions it "points" the correct handler
 405+ 703A             >                // Use of "; ok" to suppress "warning[fwdref]"
 405+ 703A             >
 405+ 703A             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 406+ 703A 7B 6A                        dw      CELL_MINUS              // cell-
 407+ 703C A3 69                        dw      EXIT                    // ;
 408+ 703E
 409+ 703E              //  ______________________________________________________________________
 410+ 703E              //
 411+ 703E              // nfa          pfa -- nfa
 412+ 703E                              Colon_Def NFA, "NFA", is_normal
 412+ 703E             >                New_Def  NFA, "NFA", Enter_Ptr, is_normal ; ok
 412+ 703E             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 412+ 703E             >
 412+ 703E             >                // dummy db directives used to calculate length of namec
 412+ 703E 4E 46 41    >                db      "NFA"
 412+ 7041             >len_NFA         defl    $ - temp_NFA
 412+ 7041             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 412+ 703E             >
 412+ 703E 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 412+ 703F 4E 46 41    >                db      "NFA"               // name string in 7-bit ascii, but
 412+ 7042             >                org     $-1                 // alter last byte of Name just above to set
 412+ 7041 C1          >                db      {b $} | END_BIT     // msb as name end
 412+ 7042             >
 412+ 7042 32 70       >                dw      last_NFA            // Link to previous definition Name
 412+ 7044             >NFA:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 412+ 7044 7D 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 412+ 7046             >                else
 412+ 7046 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 412+ 7046             >                endif           ; ok        // for other definitions it "points" the correct handler
 412+ 7046             >                // Use of "; ok" to suppress "warning[fwdref]"
 412+ 7046             >
 412+ 7046             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 413+ 7046 A9 63 05 00                  dw      LIT, 5                  // 5
 414+ 704A 2C 6F                        dw      SUBTRACT                // -
 415+ 704C 1B 6D                        dw      NEG_ONE                 // -1
 416+ 704E F7 6F                        dw      TRAVERSE                // traverse
 417+ 7050 A3 69                        dw      EXIT                    // ;
 418+ 7052
 419+ 7052              //  ______________________________________________________________________
 420+ 7052              //
 421+ 7052              // pfa          nfa -- pfa
 422+ 7052                              Colon_Def PFA, "PFA", is_normal
 422+ 7052             >                New_Def  PFA, "PFA", Enter_Ptr, is_normal ; ok
 422+ 7052             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 422+ 7052             >
 422+ 7052             >                // dummy db directives used to calculate length of namec
 422+ 7052 50 46 41    >                db      "PFA"
 422+ 7055             >len_NFA         defl    $ - temp_NFA
 422+ 7055             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 422+ 7052             >
 422+ 7052 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 422+ 7053 50 46 41    >                db      "PFA"               // name string in 7-bit ascii, but
 422+ 7056             >                org     $-1                 // alter last byte of Name just above to set
 422+ 7055 C1          >                db      {b $} | END_BIT     // msb as name end
 422+ 7056             >
 422+ 7056 3E 70       >                dw      last_NFA            // Link to previous definition Name
 422+ 7058             >PFA:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 422+ 7058 7D 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 422+ 705A             >                else
 422+ 705A ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 422+ 705A             >                endif           ; ok        // for other definitions it "points" the correct handler
 422+ 705A             >                // Use of "; ok" to suppress "warning[fwdref]"
 422+ 705A             >
 422+ 705A             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 423+ 705A 02 6D                        dw      ONE                     // 1
 424+ 705C F7 6F                        dw      TRAVERSE                // traverse
 425+ 705E A9 63 05 00                  dw      LIT, 5                  // 6
 426+ 7062 28 6A                        dw      PLUS                    // +
 427+ 7064 A3 69                        dw      EXIT                    // ;
 428+ 7066
 429+ 7066              //  ______________________________________________________________________
 430+ 7066              //
 431+ 7066              // >body        cfa -- pfa
 432+ 7066                              Colon_Def TO_BODY, ">BODY", is_normal
 432+ 7066             >                New_Def  TO_BODY, ">BODY", Enter_Ptr, is_normal ; ok
 432+ 7066             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 432+ 7066             >
 432+ 7066             >                // dummy db directives used to calculate length of namec
 432+ 7066 3E 42 4F 44 >                db      ">BODY"
 432+ 706A 59          >
 432+ 706B             >len_NFA         defl    $ - temp_NFA
 432+ 706B             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 432+ 7066             >
 432+ 7066 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 432+ 7067 3E 42 4F 44 >                db      ">BODY"               // name string in 7-bit ascii, but
 432+ 706B 59          >
 432+ 706C             >                org     $-1                 // alter last byte of Name just above to set
 432+ 706B D9          >                db      {b $} | END_BIT     // msb as name end
 432+ 706C             >
 432+ 706C 52 70       >                dw      last_NFA            // Link to previous definition Name
 432+ 706E             >TO_BODY:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 432+ 706E 7D 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 432+ 7070             >                else
 432+ 7070 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 432+ 7070             >                endif           ; ok        // for other definitions it "points" the correct handler
 432+ 7070             >                // Use of "; ok" to suppress "warning[fwdref]"
 432+ 7070             >
 432+ 7070             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 433+ 7070 71 6A                        dw      CELL_PLUS               // cell+
 434+ 7072 A3 69                        dw      EXIT                    // ;
 435+ 7074
 436+ 7074              //  ______________________________________________________________________
 437+ 7074              //
 438+ 7074              // <name        cfa -- nfa
 439+ 7074                              Colon_Def TO_NAME, "<NAME", is_normal
 439+ 7074             >                New_Def  TO_NAME, "<NAME", Enter_Ptr, is_normal ; ok
 439+ 7074             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 439+ 7074             >
 439+ 7074             >                // dummy db directives used to calculate length of namec
 439+ 7074 3C 4E 41 4D >                db      "<NAME"
 439+ 7078 45          >
 439+ 7079             >len_NFA         defl    $ - temp_NFA
 439+ 7079             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 439+ 7074             >
 439+ 7074 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 439+ 7075 3C 4E 41 4D >                db      "<NAME"               // name string in 7-bit ascii, but
 439+ 7079 45          >
 439+ 707A             >                org     $-1                 // alter last byte of Name just above to set
 439+ 7079 C5          >                db      {b $} | END_BIT     // msb as name end
 439+ 707A             >
 439+ 707A 66 70       >                dw      last_NFA            // Link to previous definition Name
 439+ 707C             >TO_NAME:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 439+ 707C 7D 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 439+ 707E             >                else
 439+ 707E ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 439+ 707E             >                endif           ; ok        // for other definitions it "points" the correct handler
 439+ 707E             >                // Use of "; ok" to suppress "warning[fwdref]"
 439+ 707E             >
 439+ 707E             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 440+ 707E 6E 70                        dw      TO_BODY                 // >body
 441+ 7080 44 70                        dw      NFA                     // nfa
 442+ 7082 A3 69                        dw      EXIT                    // ;
 443+ 7084
 444+ 7084              //  ______________________________________________________________________
 445+ 7084              //
 446+ 7084              // !csp         --
 447+ 7084              // store in user variable CSP current value of SP. Used at compile-time for syntax checkng
 448+ 7084                              Colon_Def STORE_CSP, "!CSP", is_normal
 448+ 7084             >                New_Def  STORE_CSP, "!CSP", Enter_Ptr, is_normal ; ok
 448+ 7084             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 448+ 7084             >
 448+ 7084             >                // dummy db directives used to calculate length of namec
 448+ 7084 21 43 53 50 >                db      "!CSP"
 448+ 7088             >len_NFA         defl    $ - temp_NFA
 448+ 7088             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 448+ 7084             >
 448+ 7084 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 448+ 7085 21 43 53 50 >                db      "!CSP"               // name string in 7-bit ascii, but
 448+ 7089             >                org     $-1                 // alter last byte of Name just above to set
 448+ 7088 D0          >                db      {b $} | END_BIT     // msb as name end
 448+ 7089             >
 448+ 7089 74 70       >                dw      last_NFA            // Link to previous definition Name
 448+ 708B             >STORE_CSP:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 448+ 708B 7D 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 448+ 708D             >                else
 448+ 708D ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 448+ 708D             >                endif           ; ok        // for other definitions it "points" the correct handler
 448+ 708D             >                // Use of "; ok" to suppress "warning[fwdref]"
 448+ 708D             >
 448+ 708D             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 449+ 708D 6B 69                        dw      SPFETCH                 // sp@
 450+ 708F 6A 6E A8 6B                  dw      CSP, STORE              // csp !
 451+ 7093 A3 69                        dw      EXIT                    // ;
 452+ 7095
 453+ 7095              //  ______________________________________________________________________
 454+ 7095              //
 455+ 7095              // ?error       f n --
 456+ 7095              // rase error n if flag f it true
 457+ 7095                              Colon_Def QERROR, "?ERROR", is_normal
 457+ 7095             >                New_Def  QERROR, "?ERROR", Enter_Ptr, is_normal ; ok
 457+ 7095             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 457+ 7095             >
 457+ 7095             >                // dummy db directives used to calculate length of namec
 457+ 7095 3F 45 52 52 >                db      "?ERROR"
 457+ 7099 4F 52       >
 457+ 709B             >len_NFA         defl    $ - temp_NFA
 457+ 709B             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 457+ 7095             >
 457+ 7095 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 457+ 7096 3F 45 52 52 >                db      "?ERROR"               // name string in 7-bit ascii, but
 457+ 709A 4F 52       >
 457+ 709C             >                org     $-1                 // alter last byte of Name just above to set
 457+ 709B D2          >                db      {b $} | END_BIT     // msb as name end
 457+ 709C             >
 457+ 709C 84 70       >                dw      last_NFA            // Link to previous definition Name
 457+ 709E             >QERROR:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 457+ 709E 7D 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 457+ 70A0             >                else
 457+ 70A0 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 457+ 70A0             >                endif           ; ok        // for other definitions it "points" the correct handler
 457+ 70A0             >                // Use of "; ok" to suppress "warning[fwdref]"
 457+ 70A0             >
 457+ 70A0             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 458+ 70A0 FB 6A                        dw      SWAP                    // swap
 459+ 70A2                                                              // if
 460+ 70A2 2C 64                        dw      ZBRANCH
 461+ 70A4 08 00                        dw      QError_Else - $
 462+ 70A6 08 76                        dw          ERROR               //      error  ( is a forward-ref )
 463+ 70A8                                                              // else
 464+ 70A8 15 64                        dw      BRANCH
 465+ 70AA 04 00                        dw      QError_Endif - $
 466+ 70AC              QError_Else:
 467+ 70AC D3 6A                        dw          DROP                //      drop
 468+ 70AE              QError_Endif:                                   // endif
 469+ 70AE A3 69                        dw      EXIT                    // ;
 470+ 70B0
 471+ 70B0              //  ______________________________________________________________________
 472+ 70B0              //
 473+ 70B0              // ?comp       --
 474+ 70B0              // raise msg #17 if not compiling
 475+ 70B0                              Colon_Def QCOMP, "?COMP", is_normal
 475+ 70B0             >                New_Def  QCOMP, "?COMP", Enter_Ptr, is_normal ; ok
 475+ 70B0             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 475+ 70B0             >
 475+ 70B0             >                // dummy db directives used to calculate length of namec
 475+ 70B0 3F 43 4F 4D >                db      "?COMP"
 475+ 70B4 50          >
 475+ 70B5             >len_NFA         defl    $ - temp_NFA
 475+ 70B5             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 475+ 70B0             >
 475+ 70B0 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 475+ 70B1 3F 43 4F 4D >                db      "?COMP"               // name string in 7-bit ascii, but
 475+ 70B5 50          >
 475+ 70B6             >                org     $-1                 // alter last byte of Name just above to set
 475+ 70B5 D0          >                db      {b $} | END_BIT     // msb as name end
 475+ 70B6             >
 475+ 70B6 95 70       >                dw      last_NFA            // Link to previous definition Name
 475+ 70B8             >QCOMP:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 475+ 70B8 7D 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 475+ 70BA             >                else
 475+ 70BA ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 475+ 70BA             >                endif           ; ok        // for other definitions it "points" the correct handler
 475+ 70BA             >                // Use of "; ok" to suppress "warning[fwdref]"
 475+ 70BA             >
 475+ 70BA             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 476+ 70BA 45 6E 9B 6B                  dw      STATE, FETCH            // state @
 477+ 70BE E5 69                        dw      ZEQUAL                  // 0=
 478+ 70C0 A9 63 11 00                  dw      LIT, 17                 // 17  ( can't be executed )
 479+ 70C4 9E 70                        dw      QERROR                  // ?error
 480+ 70C6 A3 69                        dw      EXIT                    // ;
 481+ 70C8
 482+ 70C8              //  ______________________________________________________________________
 483+ 70C8              //
 484+ 70C8              // ?exec       --
 485+ 70C8              // raise msg #18 if compiling
 486+ 70C8                              Colon_Def QEXEC, "?EXEC", is_normal
 486+ 70C8             >                New_Def  QEXEC, "?EXEC", Enter_Ptr, is_normal ; ok
 486+ 70C8             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 486+ 70C8             >
 486+ 70C8             >                // dummy db directives used to calculate length of namec
 486+ 70C8 3F 45 58 45 >                db      "?EXEC"
 486+ 70CC 43          >
 486+ 70CD             >len_NFA         defl    $ - temp_NFA
 486+ 70CD             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 486+ 70C8             >
 486+ 70C8 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 486+ 70C9 3F 45 58 45 >                db      "?EXEC"               // name string in 7-bit ascii, but
 486+ 70CD 43          >
 486+ 70CE             >                org     $-1                 // alter last byte of Name just above to set
 486+ 70CD C3          >                db      {b $} | END_BIT     // msb as name end
 486+ 70CE             >
 486+ 70CE B0 70       >                dw      last_NFA            // Link to previous definition Name
 486+ 70D0             >QEXEC:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 486+ 70D0 7D 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 486+ 70D2             >                else
 486+ 70D2 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 486+ 70D2             >                endif           ; ok        // for other definitions it "points" the correct handler
 486+ 70D2             >                // Use of "; ok" to suppress "warning[fwdref]"
 486+ 70D2             >
 486+ 70D2             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 487+ 70D2 45 6E 9B 6B                  dw      STATE, FETCH            // state @
 488+ 70D6 A9 63 12 00                  dw      LIT, 18                 // 18  ( can't be compiled )
 489+ 70DA 9E 70                        dw      QERROR                  // ?error
 490+ 70DC A3 69                        dw      EXIT                    // ;
 491+ 70DE
 492+ 70DE              //  ______________________________________________________________________
 493+ 70DE              //
 494+ 70DE              // ?pairs       n1 n2 --
 495+ 70DE              // raise msg #19 if n1 != n2. Compiler pushes some placeholder to stack for syntax checking
 496+ 70DE                              Colon_Def QPAIRS, "?PAIRS", is_normal
 496+ 70DE             >                New_Def  QPAIRS, "?PAIRS", Enter_Ptr, is_normal ; ok
 496+ 70DE             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 496+ 70DE             >
 496+ 70DE             >                // dummy db directives used to calculate length of namec
 496+ 70DE 3F 50 41 49 >                db      "?PAIRS"
 496+ 70E2 52 53       >
 496+ 70E4             >len_NFA         defl    $ - temp_NFA
 496+ 70E4             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 496+ 70DE             >
 496+ 70DE 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 496+ 70DF 3F 50 41 49 >                db      "?PAIRS"               // name string in 7-bit ascii, but
 496+ 70E3 52 53       >
 496+ 70E5             >                org     $-1                 // alter last byte of Name just above to set
 496+ 70E4 D3          >                db      {b $} | END_BIT     // msb as name end
 496+ 70E5             >
 496+ 70E5 C8 70       >                dw      last_NFA            // Link to previous definition Name
 496+ 70E7             >QPAIRS:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 496+ 70E7 7D 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 496+ 70E9             >                else
 496+ 70E9 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 496+ 70E9             >                endif           ; ok        // for other definitions it "points" the correct handler
 496+ 70E9             >                // Use of "; ok" to suppress "warning[fwdref]"
 496+ 70E9             >
 496+ 70E9             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 497+ 70E9 2C 6F                        dw      SUBTRACT                // -
 498+ 70EB A9 63 13 00                  dw      LIT, 19                 // 18  ( syntax error )
 499+ 70EF 9E 70                        dw      QERROR                  // ?error
 500+ 70F1 A3 69                        dw      EXIT                    // ;
 501+ 70F3
 502+ 70F3              //  ______________________________________________________________________
 503+ 70F3              //
 504+ 70F3              // ?csp       --
 505+ 70F3              // raise msg #20 if surrent SP in not what previously saved in CSP.
 506+ 70F3              // Compiler relies on that for  syntax checking of structures
 507+ 70F3                              Colon_Def QCSP, "?CSP", is_normal
 507+ 70F3             >                New_Def  QCSP, "?CSP", Enter_Ptr, is_normal ; ok
 507+ 70F3             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 507+ 70F3             >
 507+ 70F3             >                // dummy db directives used to calculate length of namec
 507+ 70F3 3F 43 53 50 >                db      "?CSP"
 507+ 70F7             >len_NFA         defl    $ - temp_NFA
 507+ 70F7             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 507+ 70F3             >
 507+ 70F3 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 507+ 70F4 3F 43 53 50 >                db      "?CSP"               // name string in 7-bit ascii, but
 507+ 70F8             >                org     $-1                 // alter last byte of Name just above to set
 507+ 70F7 D0          >                db      {b $} | END_BIT     // msb as name end
 507+ 70F8             >
 507+ 70F8 DE 70       >                dw      last_NFA            // Link to previous definition Name
 507+ 70FA             >QCSP:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 507+ 70FA 7D 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 507+ 70FC             >                else
 507+ 70FC ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 507+ 70FC             >                endif           ; ok        // for other definitions it "points" the correct handler
 507+ 70FC             >                // Use of "; ok" to suppress "warning[fwdref]"
 507+ 70FC             >
 507+ 70FC             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 508+ 70FC 6B 69                        dw      SPFETCH                 // sp@
 509+ 70FE 6A 6E 9B 6B                  dw      CSP, FETCH              // csp @
 510+ 7102 2C 6F                        dw      SUBTRACT                // -
 511+ 7104 A9 63 14 00                  dw      LIT, 20                 // 20  ( bad definition end )
 512+ 7108 9E 70                        dw      QERROR                  // ?error
 513+ 710A A3 69                        dw      EXIT                    // ;
 514+ 710C
 515+ 710C              //  ______________________________________________________________________
 516+ 710C              //
 517+ 710C              // ?loading      --
 518+ 710C              // raise msg #22 if not loading
 519+ 710C                              Colon_Def QLOADING, "?LOADING", is_normal
 519+ 710C             >                New_Def  QLOADING, "?LOADING", Enter_Ptr, is_normal ; ok
 519+ 710C             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 519+ 710C             >
 519+ 710C             >                // dummy db directives used to calculate length of namec
 519+ 710C 3F 4C 4F 41 >                db      "?LOADING"
 519+ 7110 44 49 4E 47 >
 519+ 7114             >len_NFA         defl    $ - temp_NFA
 519+ 7114             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 519+ 710C             >
 519+ 710C 88          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 519+ 710D 3F 4C 4F 41 >                db      "?LOADING"               // name string in 7-bit ascii, but
 519+ 7111 44 49 4E 47 >
 519+ 7115             >                org     $-1                 // alter last byte of Name just above to set
 519+ 7114 C7          >                db      {b $} | END_BIT     // msb as name end
 519+ 7115             >
 519+ 7115 F3 70       >                dw      last_NFA            // Link to previous definition Name
 519+ 7117             >QLOADING:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 519+ 7117 7D 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 519+ 7119             >                else
 519+ 7119 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 519+ 7119             >                endif           ; ok        // for other definitions it "points" the correct handler
 519+ 7119             >                // Use of "; ok" to suppress "warning[fwdref]"
 519+ 7119             >
 519+ 7119             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 520+ 7119 F9 6D 9B 6B                  dw      BLK, FETCH              // blk @
 521+ 711D E5 69                        dw      ZEQUAL                  // 0=
 522+ 711F A9 63 16 00                  dw      LIT, 22                 // 22  ( aren't loading now )
 523+ 7123 9E 70                        dw      QERROR                  // ?error
 524+ 7125 A3 69                        dw      EXIT                    // ;
 525+ 7127
 526+ 7127              //  ______________________________________________________________________
 527+ 7127              //
 528+ 7127              // compile      --
 529+ 7127              // compiles the following word
 530+ 7127                              Colon_Def COMPILE, "COMPILE", is_normal
 530+ 7127             >                New_Def  COMPILE, "COMPILE", Enter_Ptr, is_normal ; ok
 530+ 7127             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 530+ 7127             >
 530+ 7127             >                // dummy db directives used to calculate length of namec
 530+ 7127 43 4F 4D 50 >                db      "COMPILE"
 530+ 712B 49 4C 45    >
 530+ 712E             >len_NFA         defl    $ - temp_NFA
 530+ 712E             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 530+ 7127             >
 530+ 7127 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 530+ 7128 43 4F 4D 50 >                db      "COMPILE"               // name string in 7-bit ascii, but
 530+ 712C 49 4C 45    >
 530+ 712F             >                org     $-1                 // alter last byte of Name just above to set
 530+ 712E C5          >                db      {b $} | END_BIT     // msb as name end
 530+ 712F             >
 530+ 712F 0C 71       >                dw      last_NFA            // Link to previous definition Name
 530+ 7131             >COMPILE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 530+ 7131 7D 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 530+ 7133             >                else
 530+ 7133 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 530+ 7133             >                endif           ; ok        // for other definitions it "points" the correct handler
 530+ 7133             >                // Use of "; ok" to suppress "warning[fwdref]"
 530+ 7133             >
 530+ 7133             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 531+ 7133 B8 70                        dw      QCOMP                   // ?comp
 532+ 7135 CA 69                        dw      R_TO                    // r>
 533+ 7137 08 6B 71 6A                  dw      DUP, CELL_PLUS          // dup, cell+
 534+ 713B B6 69                        dw      TO_R                    // >r
 535+ 713D 9B 6B F5 6E                  dw      FETCH, COMMA            // @ ,
 536+ 7141 A3 69                        dw      EXIT                    // ;
 537+ 7143
 538+ 7143              //  ______________________________________________________________________
 539+ 7143              //
 540+ 7143              // compile,     --
 541+ 7143              // compiles the following word
 542+ 7143                              Colon_Def COMPILE_XT, "COMPILE,", is_normal
 542+ 7143             >                New_Def  COMPILE_XT, "COMPILE,", Enter_Ptr, is_normal ; ok
 542+ 7143             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 542+ 7143             >
 542+ 7143             >                // dummy db directives used to calculate length of namec
 542+ 7143 43 4F 4D 50 >                db      "COMPILE,"
 542+ 7147 49 4C 45 2C >
 542+ 714B             >len_NFA         defl    $ - temp_NFA
 542+ 714B             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 542+ 7143             >
 542+ 7143 88          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 542+ 7144 43 4F 4D 50 >                db      "COMPILE,"               // name string in 7-bit ascii, but
 542+ 7148 49 4C 45 2C >
 542+ 714C             >                org     $-1                 // alter last byte of Name just above to set
 542+ 714B AC          >                db      {b $} | END_BIT     // msb as name end
 542+ 714C             >
 542+ 714C 27 71       >                dw      last_NFA            // Link to previous definition Name
 542+ 714E             >COMPILE_XT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 542+ 714E 7D 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 542+ 7150             >                else
 542+ 7150 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 542+ 7150             >                endif           ; ok        // for other definitions it "points" the correct handler
 542+ 7150             >                // Use of "; ok" to suppress "warning[fwdref]"
 542+ 7150             >
 542+ 7150             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 543+ 7150 B8 70                        dw      QCOMP                   // ?comp
 544+ 7152 F5 6E                        dw      COMMA                   // ,
 545+ 7154 A3 69                        dw      EXIT                    // ;
 546+ 7156
 547+ 7156              //  ______________________________________________________________________
 548+ 7156              //
 549+ 7156              // [            --
 550+ 7156              // stop compilation
 551+ 7156                              Colon_Def SQUARED_OPEN, "[", is_immediate
 551+ 7156             >                New_Def  SQUARED_OPEN, "[", Enter_Ptr, is_immediate ; ok
 551+ 7156             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 551+ 7156             >
 551+ 7156             >                // dummy db directives used to calculate length of namec
 551+ 7156 5B          >                db      "["
 551+ 7157             >len_NFA         defl    $ - temp_NFA
 551+ 7157             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 551+ 7156             >
 551+ 7156 C1          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 551+ 7157 5B          >                db      "["               // name string in 7-bit ascii, but
 551+ 7158             >                org     $-1                 // alter last byte of Name just above to set
 551+ 7157 DB          >                db      {b $} | END_BIT     // msb as name end
 551+ 7158             >
 551+ 7158 43 71       >                dw      last_NFA            // Link to previous definition Name
 551+ 715A             >SQUARED_OPEN:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 551+ 715A 7D 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 551+ 715C             >                else
 551+ 715C ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 551+ 715C             >                endif           ; ok        // for other definitions it "points" the correct handler
 551+ 715C             >                // Use of "; ok" to suppress "warning[fwdref]"
 551+ 715C             >
 551+ 715C             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 552+ 715C FA 6C                        dw      ZERO                    // 0
 553+ 715E 45 6E A8 6B                  dw      STATE, STORE            // state !
 554+ 7162 A3 69                        dw      EXIT                    // ; immediate
 555+ 7164
 556+ 7164              //  ______________________________________________________________________
 557+ 7164              //
 558+ 7164              // ]            --
 559+ 7164              // start compilation
 560+ 7164                              Colon_Def SQUARED_CLOSE, "]", is_normal
 560+ 7164             >                New_Def  SQUARED_CLOSE, "]", Enter_Ptr, is_normal ; ok
 560+ 7164             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 560+ 7164             >
 560+ 7164             >                // dummy db directives used to calculate length of namec
 560+ 7164 5D          >                db      "]"
 560+ 7165             >len_NFA         defl    $ - temp_NFA
 560+ 7165             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 560+ 7164             >
 560+ 7164 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 560+ 7165 5D          >                db      "]"               // name string in 7-bit ascii, but
 560+ 7166             >                org     $-1                 // alter last byte of Name just above to set
 560+ 7165 DD          >                db      {b $} | END_BIT     // msb as name end
 560+ 7166             >
 560+ 7166 56 71       >                dw      last_NFA            // Link to previous definition Name
 560+ 7168             >SQUARED_CLOSE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 560+ 7168 7D 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 560+ 716A             >                else
 560+ 716A ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 560+ 716A             >                endif           ; ok        // for other definitions it "points" the correct handler
 560+ 716A             >                // Use of "; ok" to suppress "warning[fwdref]"
 560+ 716A             >
 560+ 716A             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 561+ 716A A9 63 C0 00                  dw      LIT, $C0                // 192
 562+ 716E 45 6E A8 6B                  dw      STATE, STORE            // state !
 563+ 7172 A3 69                        dw      EXIT                    // ;
 564+ 7174
 565+ 7174              //  ______________________________________________________________________
 566+ 7174              //
 567+ 7174              // smudge       --
 568+ 7174              // toggle smudge bit of latest definition
 569+ 7174                              Colon_Def SMUDGE, "SMUDGE", is_normal
 569+ 7174             >                New_Def  SMUDGE, "SMUDGE", Enter_Ptr, is_normal ; ok
 569+ 7174             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 569+ 7174             >
 569+ 7174             >                // dummy db directives used to calculate length of namec
 569+ 7174 53 4D 55 44 >                db      "SMUDGE"
 569+ 7178 47 45       >
 569+ 717A             >len_NFA         defl    $ - temp_NFA
 569+ 717A             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 569+ 7174             >
 569+ 7174 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 569+ 7175 53 4D 55 44 >                db      "SMUDGE"               // name string in 7-bit ascii, but
 569+ 7179 47 45       >
 569+ 717B             >                org     $-1                 // alter last byte of Name just above to set
 569+ 717A C5          >                db      {b $} | END_BIT     // msb as name end
 569+ 717B             >
 569+ 717B 64 71       >                dw      last_NFA            // Link to previous definition Name
 569+ 717D             >SMUDGE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 569+ 717D 7D 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 569+ 717F             >                else
 569+ 717F ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 569+ 717F             >                endif           ; ok        // for other definitions it "points" the correct handler
 569+ 717F             >                // Use of "; ok" to suppress "warning[fwdref]"
 569+ 717F             >
 569+ 717F             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 570+ 717F 1A 70                        dw      LATEST                  // latest
 571+ 7181 A9 63 20 00                  dw      LIT, SMUDGE_BIT         // 32
 572+ 7185 8E 6B                        dw      TOGGLE                  // toggle
 573+ 7187 A3 69                        dw      EXIT                    // ;
 574+ 7189
 575+ 7189              //  ______________________________________________________________________
 576+ 7189              //
 577+ 7189              // immediate    --
 578+ 7189              // make immediate the latest definition
 579+ 7189                              Colon_Def IMMEDIATE, "IMMEDIATE", is_normal
 579+ 7189             >                New_Def  IMMEDIATE, "IMMEDIATE", Enter_Ptr, is_normal ; ok
 579+ 7189             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 579+ 7189             >
 579+ 7189             >                // dummy db directives used to calculate length of namec
 579+ 7189 49 4D 4D 45 >                db      "IMMEDIATE"
 579+ 718D 44 49 41 54 >
 579+ 7191 45          >
 579+ 7192             >len_NFA         defl    $ - temp_NFA
 579+ 7192             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 579+ 7189             >
 579+ 7189 89          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 579+ 718A 49 4D 4D 45 >                db      "IMMEDIATE"               // name string in 7-bit ascii, but
 579+ 718E 44 49 41 54 >
 579+ 7192 45          >
 579+ 7193             >                org     $-1                 // alter last byte of Name just above to set
 579+ 7192 C5          >                db      {b $} | END_BIT     // msb as name end
 579+ 7193             >
 579+ 7193 74 71       >                dw      last_NFA            // Link to previous definition Name
 579+ 7195             >IMMEDIATE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 579+ 7195 7D 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 579+ 7197             >                else
 579+ 7197 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 579+ 7197             >                endif           ; ok        // for other definitions it "points" the correct handler
 579+ 7197             >                // Use of "; ok" to suppress "warning[fwdref]"
 579+ 7197             >
 579+ 7197             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 580+ 7197 1A 70                        dw      LATEST                  // latest
 581+ 7199 A9 63 40 00                  dw      LIT, $40                // 64
 582+ 719D 8E 6B                        dw      TOGGLE                  // toggle
 583+ 719F A3 69                        dw      EXIT                    // ;
 584+ 71A1
 585+ 71A1              //  ______________________________________________________________________
 586+ 71A1              //
 587+ 71A1              // hex          --
 588+ 71A1              // change numeration base
 589+ 71A1                              Colon_Def HEX, "HEX", is_normal
 589+ 71A1             >                New_Def  HEX, "HEX", Enter_Ptr, is_normal ; ok
 589+ 71A1             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 589+ 71A1             >
 589+ 71A1             >                // dummy db directives used to calculate length of namec
 589+ 71A1 48 45 58    >                db      "HEX"
 589+ 71A4             >len_NFA         defl    $ - temp_NFA
 589+ 71A4             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 589+ 71A1             >
 589+ 71A1 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 589+ 71A2 48 45 58    >                db      "HEX"               // name string in 7-bit ascii, but
 589+ 71A5             >                org     $-1                 // alter last byte of Name just above to set
 589+ 71A4 D8          >                db      {b $} | END_BIT     // msb as name end
 589+ 71A5             >
 589+ 71A5 89 71       >                dw      last_NFA            // Link to previous definition Name
 589+ 71A7             >HEX:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 589+ 71A7 7D 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 589+ 71A9             >                else
 589+ 71A9 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 589+ 71A9             >                endif           ; ok        // for other definitions it "points" the correct handler
 589+ 71A9             >                // Use of "; ok" to suppress "warning[fwdref]"
 589+ 71A9             >
 589+ 71A9             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 590+ 71A9 A9 63 10 00                  dw      LIT, 16                 // 16
 591+ 71AD 4F 6E A8 6B                  dw      BASE, STORE             // base !
 592+ 71B1 A3 69                        dw      EXIT                    // ;
 593+ 71B3
 594+ 71B3              //  ______________________________________________________________________
 595+ 71B3              //
 596+ 71B3              // decimal      --
 597+ 71B3              // change numeration base
 598+ 71B3                              Colon_Def DECIMAL, "DECIMAL", is_normal
 598+ 71B3             >                New_Def  DECIMAL, "DECIMAL", Enter_Ptr, is_normal ; ok
 598+ 71B3             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 598+ 71B3             >
 598+ 71B3             >                // dummy db directives used to calculate length of namec
 598+ 71B3 44 45 43 49 >                db      "DECIMAL"
 598+ 71B7 4D 41 4C    >
 598+ 71BA             >len_NFA         defl    $ - temp_NFA
 598+ 71BA             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 598+ 71B3             >
 598+ 71B3 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 598+ 71B4 44 45 43 49 >                db      "DECIMAL"               // name string in 7-bit ascii, but
 598+ 71B8 4D 41 4C    >
 598+ 71BB             >                org     $-1                 // alter last byte of Name just above to set
 598+ 71BA CC          >                db      {b $} | END_BIT     // msb as name end
 598+ 71BB             >
 598+ 71BB A1 71       >                dw      last_NFA            // Link to previous definition Name
 598+ 71BD             >DECIMAL:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 598+ 71BD 7D 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 598+ 71BF             >                else
 598+ 71BF ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 598+ 71BF             >                endif           ; ok        // for other definitions it "points" the correct handler
 598+ 71BF             >                // Use of "; ok" to suppress "warning[fwdref]"
 598+ 71BF             >
 598+ 71BF             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 599+ 71BF A9 63 0A 00                  dw      LIT, 10                 // 10
 600+ 71C3 4F 6E A8 6B                  dw      BASE, STORE             // base !
 601+ 71C7 A3 69                        dw      EXIT                    // ;
 602+ 71C9
 603+ 71C9              //  ______________________________________________________________________
 604+ 71C9              //
 605+ 71C9              // (;code)       --
 606+ 71C9              // patch to CFA to call/jump to the "following code"
 607+ 71C9                              Colon_Def C_SEMICOLON_CODE, "(;CODE)", is_normal
 607+ 71C9             >                New_Def  C_SEMICOLON_CODE, "(;CODE)", Enter_Ptr, is_normal ; ok
 607+ 71C9             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 607+ 71C9             >
 607+ 71C9             >                // dummy db directives used to calculate length of namec
 607+ 71C9 28 3B 43 4F >                db      "(;CODE)"
 607+ 71CD 44 45 29    >
 607+ 71D0             >len_NFA         defl    $ - temp_NFA
 607+ 71D0             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 607+ 71C9             >
 607+ 71C9 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 607+ 71CA 28 3B 43 4F >                db      "(;CODE)"               // name string in 7-bit ascii, but
 607+ 71CE 44 45 29    >
 607+ 71D1             >                org     $-1                 // alter last byte of Name just above to set
 607+ 71D0 A9          >                db      {b $} | END_BIT     // msb as name end
 607+ 71D1             >
 607+ 71D1 B3 71       >                dw      last_NFA            // Link to previous definition Name
 607+ 71D3             >C_SEMICOLON_CODE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 607+ 71D3 7D 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 607+ 71D5             >                else
 607+ 71D5 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 607+ 71D5             >                endif           ; ok        // for other definitions it "points" the correct handler
 607+ 71D5             >                // Use of "; ok" to suppress "warning[fwdref]"
 607+ 71D5             >
 607+ 71D5             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 608+ 71D5 CA 69                        dw      R_TO                    // r>       ( Return Stack has IP to caller's next cell )
 609+ 71D7 1A 70                        dw      LATEST                  // latest   ( Word being defined in this moment )
 610+ 71D9 58 70 38 70                  dw      PFA, CFA                // pfa cfa  ( cfa of latest word )
 611+ 71DD
 612+ 71DD
 613+ 71DD
 614+ 71DD
 615+ 71DD
 616+ 71DD A8 6B                        dw      STORE                   // !
 617+ 71DF A3 69                        dw      EXIT                    // ;
 618+ 71E1
 619+ 71E1              //  ______________________________________________________________________
 620+ 71E1              //
 621+ 71E1              // ;code        --
 622+ 71E1                              Colon_Def SEMICOLON_CODE, ";CODE", is_immediate
 622+ 71E1             >                New_Def  SEMICOLON_CODE, ";CODE", Enter_Ptr, is_immediate ; ok
 622+ 71E1             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 622+ 71E1             >
 622+ 71E1             >                // dummy db directives used to calculate length of namec
 622+ 71E1 3B 43 4F 44 >                db      ";CODE"
 622+ 71E5 45          >
 622+ 71E6             >len_NFA         defl    $ - temp_NFA
 622+ 71E6             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 622+ 71E1             >
 622+ 71E1 C5          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 622+ 71E2 3B 43 4F 44 >                db      ";CODE"               // name string in 7-bit ascii, but
 622+ 71E6 45          >
 622+ 71E7             >                org     $-1                 // alter last byte of Name just above to set
 622+ 71E6 C5          >                db      {b $} | END_BIT     // msb as name end
 622+ 71E7             >
 622+ 71E7 C9 71       >                dw      last_NFA            // Link to previous definition Name
 622+ 71E9             >SEMICOLON_CODE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 622+ 71E9 7D 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 622+ 71EB             >                else
 622+ 71EB ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 622+ 71EB             >                endif           ; ok        // for other definitions it "points" the correct handler
 622+ 71EB             >                // Use of "; ok" to suppress "warning[fwdref]"
 622+ 71EB             >
 622+ 71EB             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 623+ 71EB FA 70                        dw      QCSP                    // ?csp
 624+ 71ED 31 71                        dw      COMPILE                 // compile
 625+ 71EF D3 71                        dw      C_SEMICOLON_CODE        // (;code)
 626+ 71F1 5A 71                        dw      SQUARED_OPEN            // [
 627+ 71F3 A5 6C                        dw      NOOP                    // noop () can be patched later to ASSEMBLER... )
 628+ 71F5 A3 69                        dw      EXIT                    // ; immediate
 629+ 71F7
 630+ 71F7              //  ______________________________________________________________________
 631+ 71F7              //
 632+ 71F7              // <builds      --
 633+ 71F7                              Colon_Def CBUILDS, "<BUILDS", is_normal
 633+ 71F7             >                New_Def  CBUILDS, "<BUILDS", Enter_Ptr, is_normal ; ok
 633+ 71F7             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 633+ 71F7             >
 633+ 71F7             >                // dummy db directives used to calculate length of namec
 633+ 71F7 3C 42 55 49 >                db      "<BUILDS"
 633+ 71FB 4C 44 53    >
 633+ 71FE             >len_NFA         defl    $ - temp_NFA
 633+ 71FE             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 633+ 71F7             >
 633+ 71F7 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 633+ 71F8 3C 42 55 49 >                db      "<BUILDS"               // name string in 7-bit ascii, but
 633+ 71FC 4C 44 53    >
 633+ 71FF             >                org     $-1                 // alter last byte of Name just above to set
 633+ 71FE D3          >                db      {b $} | END_BIT     // msb as name end
 633+ 71FF             >
 633+ 71FF E1 71       >                dw      last_NFA            // Link to previous definition Name
 633+ 7201             >CBUILDS:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 633+ 7201 7D 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 633+ 7203             >                else
 633+ 7203 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 633+ 7203             >                endif           ; ok        // for other definitions it "points" the correct handler
 633+ 7203             >                // Use of "; ok" to suppress "warning[fwdref]"
 633+ 7203             >
 633+ 7203             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 634+ 7203 FA 6C                        dw      ZERO                    // 0
 635+ 7205 B4 6C                        dw      CONSTANT                // constant
 636+ 7207 A3 69                        dw      EXIT                    // ;
 637+ 7209
 638+ 7209              //  ______________________________________________________________________
 639+ 7209              //
 640+ 7209              // recurse      --
 641+ 7209              //              Colon_Def RECURSE, "RECURSE", is_immediate
 642+ 7209              //              dw      QCOMP                   // ?comp
 643+ 7209              //              dw      LATEST                  // latest
 644+ 7209              //              dw      PFA, CFA                // pfa cfa
 645+ 7209              //              dw      COMMA                   // ,
 646+ 7209              //              dw      EXIT                    // ; immediate
 647+ 7209
 648+ 7209              //  ______________________________________________________________________
 649+ 7209              //
 650+ 7209              // does>     --
 651+ 7209                              Colon_Def DOES_TO, "DOES>", is_normal
 651+ 7209             >                New_Def  DOES_TO, "DOES>", Enter_Ptr, is_normal ; ok
 651+ 7209             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 651+ 7209             >
 651+ 7209             >                // dummy db directives used to calculate length of namec
 651+ 7209 44 4F 45 53 >                db      "DOES>"
 651+ 720D 3E          >
 651+ 720E             >len_NFA         defl    $ - temp_NFA
 651+ 720E             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 651+ 7209             >
 651+ 7209 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 651+ 720A 44 4F 45 53 >                db      "DOES>"               // name string in 7-bit ascii, but
 651+ 720E 3E          >
 651+ 720F             >                org     $-1                 // alter last byte of Name just above to set
 651+ 720E BE          >                db      {b $} | END_BIT     // msb as name end
 651+ 720F             >
 651+ 720F F7 71       >                dw      last_NFA            // Link to previous definition Name
 651+ 7211             >DOES_TO:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 651+ 7211 7D 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 651+ 7213             >                else
 651+ 7213 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 651+ 7213             >                endif           ; ok        // for other definitions it "points" the correct handler
 651+ 7213             >                // Use of "; ok" to suppress "warning[fwdref]"
 651+ 7213             >
 651+ 7213             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 652+ 7213 CA 69                        dw      R_TO                    // r>
 653+ 7215 1A 70                        dw      LATEST                  // latest
 654+ 7217 58 70                        dw      PFA                     // pfa
 655+ 7219 A8 6B                        dw      STORE                   // !
 656+ 721B D3 71                        dw      C_SEMICOLON_CODE        // ;code
 657+ 721D              Does_Ptr:
 658+ 721D                              // via call coded in CFA
 659+ 721D                              ldhlrp
 659+ 721D 2A 96 63    >                ld      hl,(RP_Pointer)
 660+ 7220 2B                           dec     hl                  // push on Return-Stack current Instruction-Pointer
 661+ 7221 70                           ld      (hl), b
 662+ 7222 2B                           dec     hl
 663+ 7223 71                           ld      (hl), c
 664+ 7224                              ldrphl
 664+ 7224 22 96 63    >                ld      (RP_Pointer),hl
 665+ 7227 13                           inc     de
 666+ 7228 EB                           ex      de, hl
 667+ 7229 4E                           ld      c, (hl)
 668+ 722A 23                           inc     hl
 669+ 722B 46                           ld      b, (hl)
 670+ 722C 23                           inc     hl
 671+ 722D
 672+ 722D                              psh1
 672+ 722D E5          >                push    hl
 672+ 722E DD E9       >                jp      (ix)
 673+ 7230                              // SMUDGE !
 674+ 7230
 675+ 7230              //  ______________________________________________________________________
 676+ 7230              //
 677+ 7230              // count        a -- a2 n
 678+ 7230              // expects a counted string at address a, returns string address and counter
 679+ 7230                              New_Def COUNT, "COUNT", is_code, is_normal
 679+ 7230             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 679+ 7230             >
 679+ 7230             >                // dummy db directives used to calculate length of namec
 679+ 7230 43 4F 55 4E >                db      "COUNT"
 679+ 7234 54          >
 679+ 7235             >len_NFA         defl    $ - temp_NFA
 679+ 7235             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 679+ 7230             >
 679+ 7230 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 679+ 7231 43 4F 55 4E >                db      "COUNT"               // name string in 7-bit ascii, but
 679+ 7235 54          >
 679+ 7236             >                org     $-1                 // alter last byte of Name just above to set
 679+ 7235 D4          >                db      {b $} | END_BIT     // msb as name end
 679+ 7236             >
 679+ 7236 09 72       >                dw      last_NFA            // Link to previous definition Name
 679+ 7238             >COUNT:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 679+ 7238 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
 679+ 7238             >                else
 679+ 7238 3A 72       >                dw      $ + 2   ; ok        // is pointed by CFA
 679+ 723A             >                endif           ; ok        // for other definitions it "points" the correct handler
 679+ 723A             >                // Use of "; ok" to suppress "warning[fwdref]"
 679+ 723A             >
 679+ 723A             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 680+ 723A E1                           pop     hl
 681+ 723B 5E                           ld      e, (hl)
 682+ 723C 16 00                        ld      d, 0
 683+ 723E 23                           inc     hl
 684+ 723F              Count_Ptr:
 685+ 723F E5                           push    hl
 686+ 7240 D5                           push    de
 687+ 7241                              next
 687+ 7241 DD E9       >                jp      (ix)
 688+ 7243
 689+ 7243
 690+ 7243              //  ______________________________________________________________________
 691+ 7243              //
 692+ 7243              // bounds       a n -- a+n n
 693+ 7243              // given an address and a length ( a n ) calculate the bound addresses
 694+ 7243              // suitable for DO-LOOP
 695+ 7243                              New_Def BOUNDS, "BOUNDS", is_code, is_normal
 695+ 7243             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 695+ 7243             >
 695+ 7243             >                // dummy db directives used to calculate length of namec
 695+ 7243 42 4F 55 4E >                db      "BOUNDS"
 695+ 7247 44 53       >
 695+ 7249             >len_NFA         defl    $ - temp_NFA
 695+ 7249             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 695+ 7243             >
 695+ 7243 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 695+ 7244 42 4F 55 4E >                db      "BOUNDS"               // name string in 7-bit ascii, but
 695+ 7248 44 53       >
 695+ 724A             >                org     $-1                 // alter last byte of Name just above to set
 695+ 7249 D3          >                db      {b $} | END_BIT     // msb as name end
 695+ 724A             >
 695+ 724A 30 72       >                dw      last_NFA            // Link to previous definition Name
 695+ 724C             >BOUNDS:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 695+ 724C ~           >                dw      runcode ; ok        // for primitive definitions  actual code
 695+ 724C             >                else
 695+ 724C 4E 72       >                dw      $ + 2   ; ok        // is pointed by CFA
 695+ 724E             >                endif           ; ok        // for other definitions it "points" the correct handler
 695+ 724E             >                // Use of "; ok" to suppress "warning[fwdref]"
 695+ 724E             >
 695+ 724E             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 696+ 724E E1                           pop     hl
 697+ 724F D1                           pop     de
 698+ 7250 19                           add     hl, de
 699+ 7251 18 EC                        jr      Count_Ptr
 700+ 7253
 701+ 7253              //  ______________________________________________________________________
 702+ 7253              //
 703+ 7253              // leave        --
 704+ 7253              // Compile (leave) to leave current LOOP and jump just after it
 705+ 7253                              Colon_Def LEAVE, "LEAVE", is_immediate
 705+ 7253             >                New_Def  LEAVE, "LEAVE", Enter_Ptr, is_immediate ; ok
 705+ 7253             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 705+ 7253             >
 705+ 7253             >                // dummy db directives used to calculate length of namec
 705+ 7253 4C 45 41 56 >                db      "LEAVE"
 705+ 7257 45          >
 705+ 7258             >len_NFA         defl    $ - temp_NFA
 705+ 7258             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 705+ 7253             >
 705+ 7253 C5          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 705+ 7254 4C 45 41 56 >                db      "LEAVE"               // name string in 7-bit ascii, but
 705+ 7258 45          >
 705+ 7259             >                org     $-1                 // alter last byte of Name just above to set
 705+ 7258 C5          >                db      {b $} | END_BIT     // msb as name end
 705+ 7259             >
 705+ 7259 43 72       >                dw      last_NFA            // Link to previous definition Name
 705+ 725B             >LEAVE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 705+ 725B 7D 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 705+ 725D             >                else
 705+ 725D ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 705+ 725D             >                endif           ; ok        // for other definitions it "points" the correct handler
 705+ 725D             >                // Use of "; ok" to suppress "warning[fwdref]"
 705+ 725D             >
 705+ 725D             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 706+ 725D 31 71 41 64                  dw      COMPILE, C_LEAVE       // compile (leave)     \ unloop and branch
 707+ 7261 D9 6E B6 69                  dw      HERE, TO_R, ZERO, COMMA // here >r 0 ,
 707+ 7265 FA 6C F5 6E
 708+ 7269 FA 6C FA 6C                  dw      ZERO, ZERO
 709+ 726D 6B 69 08 6B                  dw      SPFETCH, DUP
 710+ 7271 71 6A 71 6A                  dw      CELL_PLUS, CELL_PLUS
 711+ 7275 EB 6A                        dw      TUCK
 712+ 7277 6A 6E 9B 6B                  dw      CSP, FETCH
 713+ 727B FB 6A 2C 6F                  dw      SWAP, SUBTRACT
 714+ 727F 96 68                        dw      CMOVE
 715+ 7281 6A 6E 9B 6B                  dw      CSP, FETCH, CELL_MINUS
 715+ 7285 7B 6A
 716+ 7287 CA 69 C3 6A                  dw      R_TO, OVER, STORE
 716+ 728B A8 6B
 717+ 728D 7B 6A FA 6C                  dw      CELL_MINUS, ZERO
 718+ 7291 FB 6A A8 6B                  dw      SWAP, STORE
 719+ 7295 A3 69                        dw      EXIT                    // ;
 720+ 7297
 721+ 7297              //  ______________________________________________________________________
 722+ 7297              //
 723+ 7297              // type         a n --
 724+ 7297              // Sends to current output channel n characters starting at address a.
 725+ 7297                              Colon_Def TYPE, "TYPE", is_normal
 725+ 7297             >                New_Def  TYPE, "TYPE", Enter_Ptr, is_normal ; ok
 725+ 7297             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 725+ 7297             >
 725+ 7297             >                // dummy db directives used to calculate length of namec
 725+ 7297 54 59 50 45 >                db      "TYPE"
 725+ 729B             >len_NFA         defl    $ - temp_NFA
 725+ 729B             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 725+ 7297             >
 725+ 7297 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 725+ 7298 54 59 50 45 >                db      "TYPE"               // name string in 7-bit ascii, but
 725+ 729C             >                org     $-1                 // alter last byte of Name just above to set
 725+ 729B C5          >                db      {b $} | END_BIT     // msb as name end
 725+ 729C             >
 725+ 729C 53 72       >                dw      last_NFA            // Link to previous definition Name
 725+ 729E             >TYPE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 725+ 729E 7D 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 725+ 72A0             >                else
 725+ 72A0 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 725+ 72A0             >                endif           ; ok        // for other definitions it "points" the correct handler
 725+ 72A0             >                // Use of "; ok" to suppress "warning[fwdref]"
 725+ 72A0             >
 725+ 72A0             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 726+ 72A0 4C 72                        dw      BOUNDS                  // bounds
 727+ 72A2 59 64                        dw      C_Q_DO                  // ?do
 728+ 72A4 0C 00                        dw      Type_Skip - $
 729+ 72A6              Type_Loop:
 730+ 72A6 90 64 B6 6B                  dw          I, CFETCH           //      i c@
 731+ 72AA C8 6F                        dw          EMIT                //      emit
 732+ 72AC 04 64                        dw      C_LOOP                  // loop
 733+ 72AE F8 FF                        dw      Type_Loop - $
 734+ 72B0              Type_Skip:
 735+ 72B0 A3 69                        dw      EXIT                    // ;
 736+ 72B2
 737+ 72B2              //  ______________________________________________________________________
 738+ 72B2              //
 739+ 72B2              // -trailing    a n1 -- a n2
 740+ 72B2              // Assumes that an n1 bytes-long string is stored at address a
 741+ 72B2              // and the string contains a space delimited word,
 742+ 72B2              // Finds n2 as the position of the first character after the word.
 743+ 72B2                              Colon_Def LTRAILING, "-TRAILING", is_normal
 743+ 72B2             >                New_Def  LTRAILING, "-TRAILING", Enter_Ptr, is_normal ; ok
 743+ 72B2             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 743+ 72B2             >
 743+ 72B2             >                // dummy db directives used to calculate length of namec
 743+ 72B2 2D 54 52 41 >                db      "-TRAILING"
 743+ 72B6 49 4C 49 4E >
 743+ 72BA 47          >
 743+ 72BB             >len_NFA         defl    $ - temp_NFA
 743+ 72BB             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 743+ 72B2             >
 743+ 72B2 89          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 743+ 72B3 2D 54 52 41 >                db      "-TRAILING"               // name string in 7-bit ascii, but
 743+ 72B7 49 4C 49 4E >
 743+ 72BB 47          >
 743+ 72BC             >                org     $-1                 // alter last byte of Name just above to set
 743+ 72BB C7          >                db      {b $} | END_BIT     // msb as name end
 743+ 72BC             >
 743+ 72BC 97 72       >                dw      last_NFA            // Link to previous definition Name
 743+ 72BE             >LTRAILING:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 743+ 72BE 7D 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 743+ 72C0             >                else
 743+ 72C0 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 743+ 72C0             >                endif           ; ok        // for other definitions it "points" the correct handler
 743+ 72C0             >                // Use of "; ok" to suppress "warning[fwdref]"
 743+ 72C0             >
 743+ 72C0             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 744+ 72C0 08 6B FA 6C                  dw      DUP, ZERO               // dup 0
 745+ 72C4                                                              // do
 746+ 72C4 59 64                        dw      C_Q_DO
 747+ 72C6 20 00                        dw      LTrailing_Leave - $
 748+ 72C8              LTrailing_Loop:
 749+ 72C8 69 6B 28 6A                  dw          TWO_DUP, PLUS       //      2dup +
 750+ 72CC 55 6A                        dw          ONE_SUBTRACT        //      1-
 751+ 72CE B6 6B                        dw          CFETCH              //      c@
 752+ 72D0 24 6D 2C 6F                  dw          BL, SUBTRACT        //      bl -
 753+ 72D4                                                              //      if
 754+ 72D4 2C 64                        dw          ZBRANCH
 755+ 72D6 0A 00                        dw          LTrailing_Else - $
 756+ 72D8 41 64                        dw              C_LEAVE         //          leave
 757+ 72DA 0C 00                        dw              LTrailing_Leave - $
 758+ 72DC 15 64                        dw          BRANCH              //      else
 759+ 72DE 04 00                        dw          LTrailing_Endif - $
 760+ 72E0              LTrailing_Else:
 761+ 72E0 55 6A                        dw              ONE_SUBTRACT    //          1-
 762+ 72E2              LTrailing_Endif:                                //      endif
 763+ 72E2                                                              // loop
 764+ 72E2 04 64                        dw      C_LOOP
 765+ 72E4 E4 FF                        dw      LTrailing_Loop - $
 766+ 72E6              LTrailing_Leave:
 767+ 72E6 A3 69                        dw      EXIT                    // ;
 768+ 72E8
 769+ 72E8              //  ______________________________________________________________________
 770+ 72E8              //
 771+ 72E8              // accept       a n1 -- n2
 772+ 72E8              // Accepts at most n1 characters from terminal and stores them at address a
 773+ 72E8              // CR stops input. A 'nul' is added as trailer.
 774+ 72E8              // n2 is the string length. n2 is kept in span user variable also.
 775+ 72E8                              Colon_Def ACCEPT, "ACCEPT", is_normal
 775+ 72E8             >                New_Def  ACCEPT, "ACCEPT", Enter_Ptr, is_normal ; ok
 775+ 72E8             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 775+ 72E8             >
 775+ 72E8             >                // dummy db directives used to calculate length of namec
 775+ 72E8 41 43 43 45 >                db      "ACCEPT"
 775+ 72EC 50 54       >
 775+ 72EE             >len_NFA         defl    $ - temp_NFA
 775+ 72EE             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 775+ 72E8             >
 775+ 72E8 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 775+ 72E9 41 43 43 45 >                db      "ACCEPT"               // name string in 7-bit ascii, but
 775+ 72ED 50 54       >
 775+ 72EF             >                org     $-1                 // alter last byte of Name just above to set
 775+ 72EE D4          >                db      {b $} | END_BIT     // msb as name end
 775+ 72EF             >
 775+ 72EF B2 72       >                dw      last_NFA            // Link to previous definition Name
 775+ 72F1             >ACCEPT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 775+ 72F1 7D 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 775+ 72F3             >                else
 775+ 72F3 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 775+ 72F3             >                endif           ; ok        // for other definitions it "points" the correct handler
 775+ 72F3             >                // Use of "; ok" to suppress "warning[fwdref]"
 775+ 72F3             >
 775+ 72F3             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 776+ 72F3 C3 6A 28 6A                  dw      OVER, PLUS, OVER        //                      ( a  n1+a  a )
 776+ 72F7 C3 6A
 777+ 72F9 FA 6C 25 6B                  dw      ZERO, DASH_ROT          //                      ( a  0     a+n1  a )
 778+ 72FD                                                              // do
 779+ 72FD 59 64                        dw      C_Q_DO
 780+ 72FF 8C 00                        dw      Accept_Leave - $
 781+ 7301              Accept_Loop:
 782+ 7301 B9 66                        dw          CUR
 783+ 7303 D3 6A 05 67                  dw          DROP, KEY           //      drop key        ( a  c )
 784+ 7307 08 6B                        dw          DUP                 //      dup             ( a  c  c )
 785+ 7309 A9 63 0E 00                  dw          LIT, $0E            //      0E
 786+ 730D 60 6D                        dw          PLUS_ORIGIN         //      +origin
 787+ 730F 9B 6B                        dw          FETCH               //      @               ( a  c  c  del )
 788+ 7311 3A 6F                        dw          EQUALS              //      =               ( a  c  c==del )
 789+ 7313                                                              //      if
 790+ 7313 2C 64                        dw          ZBRANCH
 791+ 7315 2C 00                        dw          Accept_Else_0 - $
 792+ 7317 D3 6A                        dw              DROP            //          drop        ( a  )
 793+ 7319 08 6B 90 64                  dw              DUP, I, EQUALS  //          dup i =     ( a  a==i )
 793+ 731D 3A 6F
 794+ 731F 02 6D 33 69                  dw              ONE, AND_OP     //          1 and
 795+ 7323 08 6B                        dw              DUP             //          dup         ( a  a==i  a==i )
 796+ 7325 CA 69                        dw              R_TO            //          r> 2 - + r>
 797+ 7327 88 6A 28 6A                  dw              TWO_MINUS, PLUS //      ( decrement index by 1 or 2 )
 798+ 732B B6 69                        dw              TO_R            //
 799+ 732D                                                              //          if
 800+ 732D 2C 64                        dw              ZBRANCH
 801+ 732F 0A 00                        dw              Accept_Else_1 - $
 802+ 7331 A9 63 07 00                  dw                  LIT, 7      //              7       ( a  7 )
 803+ 7335                                                              //          else
 804+ 7335 15 64                        dw              BRANCH
 805+ 7337 06 00                        dw              Accept_Endif_1 - $
 806+ 7339              Accept_Else_1:
 807+ 7339 A9 63 08 00                  dw                  LIT, 8      //              8       ( a  8 )
 808+ 733D              Accept_Endif_1:                                 //          endif
 809+ 733D 15 64                        dw          BRANCH
 810+ 733F 2E 00                        dw          Accept_Endif_0 - $
 811+ 7341              Accept_Else_0:                                  //      else
 812+ 7341 08 6B                        dw              DUP             //          dup         ( a  c  c )
 813+ 7343 A9 63 0D 00                  dw              LIT, 13         //          13
 814+ 7347 3A 6F                        dw              EQUALS          //          =           ( a  c  c==CR )
 815+ 7349                                                              //          if
 816+ 7349 2C 64                        dw              ZBRANCH
 817+ 734B 0C 00                        dw              Accept_Else_2 - $
 818+ 734D D3 6A 24 6D                  dw                  DROP, BL    //              drop bl ( a  bl )
 819+ 7351 FA 6C                        dw                  ZERO        //              0       ( a  c  0 )
 820+ 7353                                                              //          else
 821+ 7353 15 64                        dw              BRANCH
 822+ 7355 04 00                        dw              Accept_Endif_2 - $
 823+ 7357              Accept_Else_2:
 824+ 7357 08 6B                        dw                  DUP         //              dup     ( a  c  c )
 825+ 7359                                                              //          endif
 826+ 7359              Accept_Endif_2:
 827+ 7359 90 64 C4 6B                  dw              I, CSTORE       //          i           ( a  c )
 828+ 735D 08 6B 24 6D                  dw              DUP, BL, LESS   //          dup bl <    ( a  c  c<BL )
 828+ 7361 5B 6F
 829+ 7363                                                              //          if
 830+ 7363 2C 64                        dw              ZBRANCH
 831+ 7365 08 00                        dw              Accept_Endif_3 - $
 832+ 7367 CA 69                        dw                  R_TO        //              r>
 833+ 7369 55 6A                        dw                  ONE_SUBTRACT//              1-
 834+ 736B B6 69                        dw                  TO_R        //              >r
 835+ 736D                                                              //          endif
 836+ 736D              Accept_Endif_3:
 837+ 736D              Accept_Endif_0:                                 //      endif
 838+ 736D C8 6F                        dw          EMIT                //      emit
 839+ 736F FA 6C 90 64                  dw          ZERO, I, ONE_PLUS   //      0 i 1+ !
 839+ 7373 49 6A
 840+ 7375 A8 6B                        dw          STORE               //          ( zero pad )
 841+ 7377 90 64                        dw          I                   //      i
 842+ 7379 90 64 B6 6B                  dw          I, CFETCH, ZEQUAL   //      i 0= if
 842+ 737D E5 69
 843+ 737F 2C 64                        dw          ZBRANCH             //
 844+ 7381 06 00                        dw              Accept_Endif_4 - $
 845+ 7383 41 64                        dw                  C_LEAVE     //              leave
 846+ 7385 06 00                        dw                  Accept_Leave - $
 847+ 7387              Accept_Endif_4:                                 //      endif
 848+ 7387                                                              // loop
 849+ 7387 04 64                        dw      C_LOOP
 850+ 7389 78 FF                        dw      Accept_Loop - $
 851+ 738B              Accept_Leave:
 852+ 738B FB 6A 2C 6F                  dw      SWAP, SUBTRACT          // swap -
 853+ 738F 49 6A                        dw      ONE_PLUS                // 1+
 854+ 7391 08 6B BA 6E                  dw      DUP, SPAN, STORE        // dup span !
 854+ 7395 A8 6B
 855+ 7397 A3 69                        dw      EXIT                    // ;
 856+ 7399
 857+ 7399              //  ______________________________________________________________________
 858+ 7399              //
 859+ 7399              // expect      a n --
 860+ 7399              // Accepts at most n1 characters from terminal and stores them at address a
 861+ 7399              // CR stops input. A 'nul' is added as trailer.
 862+ 7399              // n2 is the string length. n2 is kept in span user variable also.
 863+ 7399              //              Colon_Def EXPECT, "EXPECT", is_normal
 864+ 7399              //              dw      ACCEPT, DROP            // accept drop
 865+ 7399              //              dw      EXIT                    // ;
 866+ 7399
 867+ 7399              //  ______________________________________________________________________
 868+ 7399              //
 869+ 7399              // query        --
 870+ 7399              // Accept at most 80 character from console. CR stops.
 871+ 7399              // Text is stored in TIB. Variable IN is zeroed.
 872+ 7399                              Colon_Def QUERY, "QUERY", is_normal
 872+ 7399             >                New_Def  QUERY, "QUERY", Enter_Ptr, is_normal ; ok
 872+ 7399             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 872+ 7399             >
 872+ 7399             >                // dummy db directives used to calculate length of namec
 872+ 7399 51 55 45 52 >                db      "QUERY"
 872+ 739D 59          >
 872+ 739E             >len_NFA         defl    $ - temp_NFA
 872+ 739E             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 872+ 7399             >
 872+ 7399 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 872+ 739A 51 55 45 52 >                db      "QUERY"               // name string in 7-bit ascii, but
 872+ 739E 59          >
 872+ 739F             >                org     $-1                 // alter last byte of Name just above to set
 872+ 739E D9          >                db      {b $} | END_BIT     // msb as name end
 872+ 739F             >
 872+ 739F E8 72       >                dw      last_NFA            // Link to previous definition Name
 872+ 73A1             >QUERY:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 872+ 73A1 7D 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 872+ 73A3             >                else
 872+ 73A3 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 872+ 73A3             >                endif           ; ok        // for other definitions it "points" the correct handler
 872+ 73A3             >                // Use of "; ok" to suppress "warning[fwdref]"
 872+ 73A3             >
 872+ 73A3             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 873+ 73A3 8D 6D 9B 6B                  dw      TIB, FETCH              // tib @
 874+ 73A7 A9 63 50 00                  dw      LIT, 80                 // 80
 875+ 73AB F1 72 D3 6A                  dw      ACCEPT, DROP            // accept drop
 876+ 73AF FA 6C 02 6E                  dw      ZERO, TO_IN, STORE      // 0 >in !
 876+ 73B3 A8 6B
 877+ 73B5 A3 69                        dw      EXIT                    // ;
 878+ 73B7
 879+ 73B7              //  ______________________________________________________________________
 880+ 73B7              //
 881+ 73B7              // fill        a n c --
 882+ 73B7              // If n > 0, fills n locations starting from address a with the value c.
 883+ 73B7                              New_Def FILL, "FILL", is_code, is_normal
 883+ 73B7             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 883+ 73B7             >
 883+ 73B7             >                // dummy db directives used to calculate length of namec
 883+ 73B7 46 49 4C 4C >                db      "FILL"
 883+ 73BB             >len_NFA         defl    $ - temp_NFA
 883+ 73BB             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 883+ 73B7             >
 883+ 73B7 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 883+ 73B8 46 49 4C 4C >                db      "FILL"               // name string in 7-bit ascii, but
 883+ 73BC             >                org     $-1                 // alter last byte of Name just above to set
 883+ 73BB CC          >                db      {b $} | END_BIT     // msb as name end
 883+ 73BC             >
 883+ 73BC 99 73       >                dw      last_NFA            // Link to previous definition Name
 883+ 73BE             >FILL:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 883+ 73BE ~           >                dw      runcode ; ok        // for primitive definitions  actual code
 883+ 73BE             >                else
 883+ 73BE C0 73       >                dw      $ + 2   ; ok        // is pointed by CFA
 883+ 73C0             >                endif           ; ok        // for other definitions it "points" the correct handler
 883+ 73C0             >                // Use of "; ok" to suppress "warning[fwdref]"
 883+ 73C0             >
 883+ 73C0             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 884+ 73C0 D9                           exx
 885+ 73C1 D1                           pop     de                  // de has character
 886+ 73C2 C1                           pop     bc                  // bc has counter
 887+ 73C3 E1                           pop     hl                  // hl has address, save Instruction Pointer
 888+ 73C4              Fill_Loop:
 889+ 73C4 78                               ld      a, b
 890+ 73C5 B1                               or      c
 891+ 73C6 28 05                        jr      z, Fill_While_End
 892+ 73C8 73                               ld      (hl), e
 893+ 73C9 0B                               dec     bc
 894+ 73CA 23                               inc     hl
 895+ 73CB 18 F7                        jr      Fill_Loop
 896+ 73CD              Fill_While_End:
 897+ 73CD D9                           exx
 898+ 73CE
 899+ 73CE                              next
 899+ 73CE DD E9       >                jp      (ix)
 900+ 73D0
 901+ 73D0              //  ______________________________________________________________________
 902+ 73D0              //
 903+ 73D0              // erase        a n --
 904+ 73D0              // If n > 0, fills n locations starting from address a with 'nul' characters.
 905+ 73D0                              Colon_Def ERASE, "ERASE", is_normal
 905+ 73D0             >                New_Def  ERASE, "ERASE", Enter_Ptr, is_normal ; ok
 905+ 73D0             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 905+ 73D0             >
 905+ 73D0             >                // dummy db directives used to calculate length of namec
 905+ 73D0 45 52 41 53 >                db      "ERASE"
 905+ 73D4 45          >
 905+ 73D5             >len_NFA         defl    $ - temp_NFA
 905+ 73D5             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 905+ 73D0             >
 905+ 73D0 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 905+ 73D1 45 52 41 53 >                db      "ERASE"               // name string in 7-bit ascii, but
 905+ 73D5 45          >
 905+ 73D6             >                org     $-1                 // alter last byte of Name just above to set
 905+ 73D5 C5          >                db      {b $} | END_BIT     // msb as name end
 905+ 73D6             >
 905+ 73D6 B7 73       >                dw      last_NFA            // Link to previous definition Name
 905+ 73D8             >ERASE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 905+ 73D8 7D 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 905+ 73DA             >                else
 905+ 73DA ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 905+ 73DA             >                endif           ; ok        // for other definitions it "points" the correct handler
 905+ 73DA             >                // Use of "; ok" to suppress "warning[fwdref]"
 905+ 73DA             >
 905+ 73DA             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 906+ 73DA FA 6C BE 73                  dw      ZERO, FILL              // 0 fill
 907+ 73DE A3 69                        dw      EXIT                    // ;
 908+ 73E0
 909+ 73E0              //  ______________________________________________________________________
 910+ 73E0              //
 911+ 73E0              // blank        a n --
 912+ 73E0              // If n > 0, fills n locations starting from address a with 'nul' characters.
 913+ 73E0                              Colon_Def BLANK, "BLANK", is_normal
 913+ 73E0             >                New_Def  BLANK, "BLANK", Enter_Ptr, is_normal ; ok
 913+ 73E0             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 913+ 73E0             >
 913+ 73E0             >                // dummy db directives used to calculate length of namec
 913+ 73E0 42 4C 41 4E >                db      "BLANK"
 913+ 73E4 4B          >
 913+ 73E5             >len_NFA         defl    $ - temp_NFA
 913+ 73E5             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 913+ 73E0             >
 913+ 73E0 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 913+ 73E1 42 4C 41 4E >                db      "BLANK"               // name string in 7-bit ascii, but
 913+ 73E5 4B          >
 913+ 73E6             >                org     $-1                 // alter last byte of Name just above to set
 913+ 73E5 CB          >                db      {b $} | END_BIT     // msb as name end
 913+ 73E6             >
 913+ 73E6 D0 73       >                dw      last_NFA            // Link to previous definition Name
 913+ 73E8             >BLANK:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 913+ 73E8 7D 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 913+ 73EA             >                else
 913+ 73EA ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 913+ 73EA             >                endif           ; ok        // for other definitions it "points" the correct handler
 913+ 73EA             >                // Use of "; ok" to suppress "warning[fwdref]"
 913+ 73EA             >
 913+ 73EA             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 914+ 73EA 24 6D BE 73                  dw      BL, FILL                // bl fill
 915+ 73EE A3 69                        dw      EXIT                    // ;
 916+ 73F0
 917+ 73F0              //  ______________________________________________________________________
 918+ 73F0              //
 919+ 73F0              // hold         c --
 920+ 73F0              // Used between <# and #> to insert a character c in numeric formatting.
 921+ 73F0                              Colon_Def HOLD, "HOLD", is_normal
 921+ 73F0             >                New_Def  HOLD, "HOLD", Enter_Ptr, is_normal ; ok
 921+ 73F0             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 921+ 73F0             >
 921+ 73F0             >                // dummy db directives used to calculate length of namec
 921+ 73F0 48 4F 4C 44 >                db      "HOLD"
 921+ 73F4             >len_NFA         defl    $ - temp_NFA
 921+ 73F4             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 921+ 73F0             >
 921+ 73F0 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 921+ 73F1 48 4F 4C 44 >                db      "HOLD"               // name string in 7-bit ascii, but
 921+ 73F5             >                org     $-1                 // alter last byte of Name just above to set
 921+ 73F4 C4          >                db      {b $} | END_BIT     // msb as name end
 921+ 73F5             >
 921+ 73F5 E0 73       >                dw      last_NFA            // Link to previous definition Name
 921+ 73F7             >HOLD:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 921+ 73F7 7D 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 921+ 73F9             >                else
 921+ 73F9 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 921+ 73F9             >                endif           ; ok        // for other definitions it "points" the correct handler
 921+ 73F9             >                // Use of "; ok" to suppress "warning[fwdref]"
 921+ 73F9             >
 921+ 73F9             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 922+ 73F9 1B 6D                        dw      NEG_ONE                 // -1
 923+ 73FB 7B 6E 78 6B                  dw      HLD, PLUSSTORE          // hld +!
 924+ 73FF 7B 6E 9B 6B                  dw      HLD, FETCH, CSTORE      // hld @ c!
 924+ 7403 C4 6B
 925+ 7405 A3 69                        dw      EXIT                    // ;
 926+ 7407
 927+ 7407              //  ______________________________________________________________________
 928+ 7407              //
 929+ 7407              // pad         -- a
 930+ 7407              // leaves the buffer text address. This is at a fixed distance over HERE.
 931+ 7407                              Colon_Def PAD, "PAD", is_normal
 931+ 7407             >                New_Def  PAD, "PAD", Enter_Ptr, is_normal ; ok
 931+ 7407             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 931+ 7407             >
 931+ 7407             >                // dummy db directives used to calculate length of namec
 931+ 7407 50 41 44    >                db      "PAD"
 931+ 740A             >len_NFA         defl    $ - temp_NFA
 931+ 740A             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 931+ 7407             >
 931+ 7407 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 931+ 7408 50 41 44    >                db      "PAD"               // name string in 7-bit ascii, but
 931+ 740B             >                org     $-1                 // alter last byte of Name just above to set
 931+ 740A C4          >                db      {b $} | END_BIT     // msb as name end
 931+ 740B             >
 931+ 740B F0 73       >                dw      last_NFA            // Link to previous definition Name
 931+ 740D             >PAD:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 931+ 740D 7D 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 931+ 740F             >                else
 931+ 740F ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 931+ 740F             >                endif           ; ok        // for other definitions it "points" the correct handler
 931+ 740F             >                // Use of "; ok" to suppress "warning[fwdref]"
 931+ 740F             >
 931+ 740F             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 932+ 740F D9 6E                        dw      HERE                    // here
 933+ 7411 A9 63 44 00                  dw      LIT, 68                 // 68
 934+ 7415 28 6A                        dw      PLUS                    // +
 935+ 7417 A3 69                        dw      EXIT                    // ;
 936+ 7419
 937+ 7419              //  ______________________________________________________________________
 938+ 7419              //
 939+ 7419              // word         c -- a
 940+ 7419              // reads characters from input streams until it encouners a c delimiter.
 941+ 7419              // Stores that packet so it starts from HERE
 942+ 7419              // WORD leaves a counter as first byte and ends the packet with two spaces.
 943+ 7419              // Other occurrences of c are ignored.
 944+ 7419              // If BLK is zero, text is taken from terminal buffer TIB.
 945+ 7419              // Otherwise text is taken from the disk-block given by BLK.
 946+ 7419              // "in" variable is incremented of the number of character read.
 947+ 7419              // The number of characters read is given by ENCLOSE.
 948+ 7419                              Colon_Def WORD, "WORD", is_normal
 948+ 7419             >                New_Def  WORD, "WORD", Enter_Ptr, is_normal ; ok
 948+ 7419             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 948+ 7419             >
 948+ 7419             >                // dummy db directives used to calculate length of namec
 948+ 7419 57 4F 52 44 >                db      "WORD"
 948+ 741D             >len_NFA         defl    $ - temp_NFA
 948+ 741D             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 948+ 7419             >
 948+ 7419 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 948+ 741A 57 4F 52 44 >                db      "WORD"               // name string in 7-bit ascii, but
 948+ 741E             >                org     $-1                 // alter last byte of Name just above to set
 948+ 741D C4          >                db      {b $} | END_BIT     // msb as name end
 948+ 741E             >
 948+ 741E 07 74       >                dw      last_NFA            // Link to previous definition Name
 948+ 7420             >WORD:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 948+ 7420 7D 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 948+ 7422             >                else
 948+ 7422 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 948+ 7422             >                endif           ; ok        // for other definitions it "points" the correct handler
 948+ 7422             >                // Use of "; ok" to suppress "warning[fwdref]"
 948+ 7422             >
 948+ 7422             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 949+ 7422 F9 6D 9B 6B                  dw      BLK, FETCH              // blk @
 950+ 7426                                                              // if
 951+ 7426 2C 64                        dw      ZBRANCH
 952+ 7428 0C 00                        dw      Word_Else - $
 953+ 742A F9 6D 9B 6B                  dw          BLK, FETCH          //      blk @
 954+ 742E 6B 7D                        dw          BLOCK               //      block ( forward )
 955+ 7430                                                              // else
 956+ 7430 15 64                        dw      BRANCH
 957+ 7432 06 00                        dw      Word_Endif - $
 958+ 7434              Word_Else:
 959+ 7434 8D 6D 9B 6B                  dw         TIB, FETCH           //      tib @
 960+ 7438              Word_Endif:                                     // endif
 961+ 7438 02 6E 9B 6B                  dw      TO_IN, FETCH, PLUS      // >in @ +
 961+ 743C 28 6A
 962+ 743E FB 6A 7E 65                  dw      SWAP, ENCLOSE           // swap enclose
 963+ 7442 D9 6E A9 63                  dw      HERE, LIT, 34, BLANK    // here 34 blank
 963+ 7446 22 00 E8 73
 964+ 744A 02 6E 78 6B                  dw      TO_IN, PLUSSTORE        // >in @ +
 965+ 744E C3 6A 2C 6F                  dw      OVER, SUBTRACT, TO_R    // over - >r
 965+ 7452 B6 69
 966+ 7454 DE 69 D9 6E                  dw      R_OP, HERE, CSTORE      // r here c!
 966+ 7458 C4 6B
 967+ 745A 28 6A                        dw      PLUS                    // +
 968+ 745C D9 6E 49 6A                  dw      HERE, ONE_PLUS, R_TO    // here 1+ r>
 968+ 7460 CA 69
 969+ 7462 96 68                        dw      CMOVE                   // cmove
 970+ 7464 D9 6E                        dw      HERE                    // here
 971+ 7466 A3 69                        dw      EXIT                    // ;
 972+ 7468
 973+ 7468              //  ______________________________________________________________________
 974+ 7468              //
 975+ 7468              // (.")         --
 976+ 7468              // Direct procedure compiled by ." and  .(  It executes TYPE.
 977+ 7468                              Colon_Def C_DOT_QUOTE, '(.")', is_normal
 977+ 7468             >                New_Def  C_DOT_QUOTE, '(.")', Enter_Ptr, is_normal ; ok
 977+ 7468             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 977+ 7468             >
 977+ 7468             >                // dummy db directives used to calculate length of namec
 977+ 7468 28 2E 22 29 >                db      '(.")'
 977+ 746C             >len_NFA         defl    $ - temp_NFA
 977+ 746C             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 977+ 7468             >
 977+ 7468 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 977+ 7469 28 2E 22 29 >                db      '(.")'               // name string in 7-bit ascii, but
 977+ 746D             >                org     $-1                 // alter last byte of Name just above to set
 977+ 746C A9          >                db      {b $} | END_BIT     // msb as name end
 977+ 746D             >
 977+ 746D 19 74       >                dw      last_NFA            // Link to previous definition Name
 977+ 746F             >C_DOT_QUOTE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 977+ 746F 7D 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 977+ 7471             >                else
 977+ 7471 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 977+ 7471             >                endif           ; ok        // for other definitions it "points" the correct handler
 977+ 7471             >                // Use of "; ok" to suppress "warning[fwdref]"
 977+ 7471             >
 977+ 7471             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 978+ 7471 DE 69 38 72                  dw      R_OP, COUNT             // r count
 979+ 7475 08 6B 49 6A                  dw      DUP, ONE_PLUS           // dup 1+
 980+ 7479 CA 69 28 6A                  dw      R_TO, PLUS, TO_R        // r> + >r  ( advance IP )
 980+ 747D B6 69
 981+ 747F 9E 72                        dw      TYPE                    // type
 982+ 7481 A3 69                        dw      EXIT                    // ;
 983+ 7483
 984+ 7483              //  ______________________________________________________________________
 985+ 7483              //
 986+ 7483              // char         -- c
 987+ 7483              // get first character from next input word
 988+ 7483                              Colon_Def CHAR,  "CHAR", is_normal
 988+ 7483             >                New_Def  CHAR, "CHAR", Enter_Ptr, is_normal ; ok
 988+ 7483             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 988+ 7483             >
 988+ 7483             >                // dummy db directives used to calculate length of namec
 988+ 7483 43 48 41 52 >                db      "CHAR"
 988+ 7487             >len_NFA         defl    $ - temp_NFA
 988+ 7487             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 988+ 7483             >
 988+ 7483 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 988+ 7484 43 48 41 52 >                db      "CHAR"               // name string in 7-bit ascii, but
 988+ 7488             >                org     $-1                 // alter last byte of Name just above to set
 988+ 7487 D2          >                db      {b $} | END_BIT     // msb as name end
 988+ 7488             >
 988+ 7488 68 74       >                dw      last_NFA            // Link to previous definition Name
 988+ 748A             >CHAR:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 988+ 748A 7D 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 988+ 748C             >                else
 988+ 748C ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 988+ 748C             >                endif           ; ok        // for other definitions it "points" the correct handler
 988+ 748C             >                // Use of "; ok" to suppress "warning[fwdref]"
 988+ 748C             >
 988+ 748C             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 989+ 748C 24 6D 20 74                  dw      BL, WORD                // bl word
 990+ 7490 49 6A B6 6B                  dw      ONE_PLUS, CFETCH        // 1+ c@
 991+ 7494 A3 69                        dw      EXIT                    // ;
 992+ 7496
 993+ 7496              //  ______________________________________________________________________
 994+ 7496              //
 995+ 7496              // ,"           --
 996+ 7496              // compiles a string terminated by " as a counted string from next input stream
 997+ 7496                              Colon_Def COMMA_QUOTE,  ',"', is_normal
 997+ 7496             >                New_Def  COMMA_QUOTE, ',"', Enter_Ptr, is_normal ; ok
 997+ 7496             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 997+ 7496             >
 997+ 7496             >                // dummy db directives used to calculate length of namec
 997+ 7496 2C 22       >                db      ',"'
 997+ 7498             >len_NFA         defl    $ - temp_NFA
 997+ 7498             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 997+ 7496             >
 997+ 7496 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 997+ 7497 2C 22       >                db      ',"'               // name string in 7-bit ascii, but
 997+ 7499             >                org     $-1                 // alter last byte of Name just above to set
 997+ 7498 A2          >                db      {b $} | END_BIT     // msb as name end
 997+ 7499             >
 997+ 7499 83 74       >                dw      last_NFA            // Link to previous definition Name
 997+ 749B             >COMMA_QUOTE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 997+ 749B 7D 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 997+ 749D             >                else
 997+ 749D ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 997+ 749D             >                endif           ; ok        // for other definitions it "points" the correct handler
 997+ 749D             >                // Use of "; ok" to suppress "warning[fwdref]"
 997+ 749D             >
 997+ 749D             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 998+ 749D A9 63 22 00                  dw      LIT, DQUOTE_CHAR        // [char] "
 999+ 74A1 20 74                        dw      WORD                    // word
1000+ 74A3 B6 6B 49 6A                  dw      CFETCH, ONE_PLUS        // c@ 1+
1001+ 74A7 E9 6E                        dw      ALLOT                   // allot
1002+ 74A9 FA 6C 06 6F                  dw      ZERO, CCOMMA            // 0 c,  ( nul-terminated string - useful anyway )
1003+ 74AD A3 69                        dw      EXIT
1004+ 74AF
1005+ 74AF              //  ______________________________________________________________________
1006+ 74AF              //
1007+ 74AF              // .c           c --
1008+ 74AF              // intermediate general purpose string builder, used by ." and .(
1009+ 74AF                              Colon_Def DOT_C,  ".C", is_immediate
1009+ 74AF             >                New_Def  DOT_C, ".C", Enter_Ptr, is_immediate ; ok
1009+ 74AF             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1009+ 74AF             >
1009+ 74AF             >                // dummy db directives used to calculate length of namec
1009+ 74AF 2E 43       >                db      ".C"
1009+ 74B1             >len_NFA         defl    $ - temp_NFA
1009+ 74B1             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1009+ 74AF             >
1009+ 74AF C2          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
1009+ 74B0 2E 43       >                db      ".C"               // name string in 7-bit ascii, but
1009+ 74B2             >                org     $-1                 // alter last byte of Name just above to set
1009+ 74B1 C3          >                db      {b $} | END_BIT     // msb as name end
1009+ 74B2             >
1009+ 74B2 96 74       >                dw      last_NFA            // Link to previous definition Name
1009+ 74B4             >DOT_C:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1009+ 74B4 7D 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
1009+ 74B6             >                else
1009+ 74B6 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
1009+ 74B6             >                endif           ; ok        // for other definitions it "points" the correct handler
1009+ 74B6             >                // Use of "; ok" to suppress "warning[fwdref]"
1009+ 74B6             >
1009+ 74B6             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1010+ 74B6 45 6E 9B 6B                  dw      STATE, FETCH            // state @
1011+ 74BA                                                              // if
1012+ 74BA 2C 64                        dw      ZBRANCH
1013+ 74BC 12 00                        dw      Dot_C_Else - $
1014+ 74BE 31 71 6F 74                  dw          COMPILE, C_DOT_QUOTE //     compile (.")
1015+ 74C2 20 74 B6 6B                  dw          WORD, CFETCH        //      word c@
1016+ 74C6 49 6A E9 6E                  dw          ONE_PLUS, ALLOT     //      1+ allot
1017+ 74CA                                                              // else
1018+ 74CA 15 64                        dw      BRANCH
1019+ 74CC 08 00                        dw      Dot_C_Endif - $
1020+ 74CE              Dot_C_Else:
1021+ 74CE 20 74 38 72                  dw          WORD, COUNT, TYPE   //      word count type
1021+ 74D2 9E 72
1022+ 74D4              Dot_C_Endif:                                    // endif
1023+ 74D4 A3 69                        dw      EXIT                    ;
1024+ 74D6
1025+ 74D6              //  ______________________________________________________________________
1026+ 74D6              //
1027+ 74D6              // ."           c --
1028+ 74D6                              Colon_Def DOT_QUOTE,  '."', is_immediate
1028+ 74D6             >                New_Def  DOT_QUOTE, '."', Enter_Ptr, is_immediate ; ok
1028+ 74D6             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1028+ 74D6             >
1028+ 74D6             >                // dummy db directives used to calculate length of namec
1028+ 74D6 2E 22       >                db      '."'
1028+ 74D8             >len_NFA         defl    $ - temp_NFA
1028+ 74D8             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1028+ 74D6             >
1028+ 74D6 C2          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
1028+ 74D7 2E 22       >                db      '."'               // name string in 7-bit ascii, but
1028+ 74D9             >                org     $-1                 // alter last byte of Name just above to set
1028+ 74D8 A2          >                db      {b $} | END_BIT     // msb as name end
1028+ 74D9             >
1028+ 74D9 AF 74       >                dw      last_NFA            // Link to previous definition Name
1028+ 74DB             >DOT_QUOTE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1028+ 74DB 7D 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
1028+ 74DD             >                else
1028+ 74DD ~           >                dw      $ + 2   ; ok        // is pointed by CFA
1028+ 74DD             >                endif           ; ok        // for other definitions it "points" the correct handler
1028+ 74DD             >                // Use of "; ok" to suppress "warning[fwdref]"
1028+ 74DD             >
1028+ 74DD             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1029+ 74DD A9 63 22 00                  dw      LIT, DQUOTE_CHAR        // [char] "
1030+ 74E1 B4 74                        dw      DOT_C                   // [compile] .c
1031+ 74E3 A3 69                        dw      EXIT                    // ; immediate
1032+ 74E5
1033+ 74E5              //  ______________________________________________________________________
1034+ 74E5              //
1035+ 74E5              // .(           c --
1036+ 74E5                              Colon_Def DOT_BRACKET,  ".(", is_immediate
1036+ 74E5             >                New_Def  DOT_BRACKET, ".(", Enter_Ptr, is_immediate ; ok
1036+ 74E5             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1036+ 74E5             >
1036+ 74E5             >                // dummy db directives used to calculate length of namec
1036+ 74E5 2E 28       >                db      ".("
1036+ 74E7             >len_NFA         defl    $ - temp_NFA
1036+ 74E7             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1036+ 74E5             >
1036+ 74E5 C2          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
1036+ 74E6 2E 28       >                db      ".("               // name string in 7-bit ascii, but
1036+ 74E8             >                org     $-1                 // alter last byte of Name just above to set
1036+ 74E7 A8          >                db      {b $} | END_BIT     // msb as name end
1036+ 74E8             >
1036+ 74E8 D6 74       >                dw      last_NFA            // Link to previous definition Name
1036+ 74EA             >DOT_BRACKET:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1036+ 74EA 7D 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
1036+ 74EC             >                else
1036+ 74EC ~           >                dw      $ + 2   ; ok        // is pointed by CFA
1036+ 74EC             >                endif           ; ok        // for other definitions it "points" the correct handler
1036+ 74EC             >                // Use of "; ok" to suppress "warning[fwdref]"
1036+ 74EC             >
1036+ 74EC             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1037+ 74EC A9 63 29 00                  dw      LIT, ")"                // [char] )
1038+ 74F0 B4 74                        dw      DOT_C                   // [compile] .c
1039+ 74F2 A3 69                        dw      EXIT                    // ; immediate
1040+ 74F4
1041+ 74F4              //  ______________________________________________________________________
1042+ 74F4              //
1043+ 74F4              // (sgn)        a -- a f
1044+ 74F4              // determines if char in addr a is a sign (+ or -), and in that case increments
1045+ 74F4              // a flag. Returns f as the sign, true for negative, false for positive.
1046+ 74F4              // called by NUMBER and (EXP)
1047+ 74F4                              Colon_Def CSGN,  "(SGN)", is_normal
1047+ 74F4             >                New_Def  CSGN, "(SGN)", Enter_Ptr, is_normal ; ok
1047+ 74F4             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1047+ 74F4             >
1047+ 74F4             >                // dummy db directives used to calculate length of namec
1047+ 74F4 28 53 47 4E >                db      "(SGN)"
1047+ 74F8 29          >
1047+ 74F9             >len_NFA         defl    $ - temp_NFA
1047+ 74F9             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1047+ 74F4             >
1047+ 74F4 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1047+ 74F5 28 53 47 4E >                db      "(SGN)"               // name string in 7-bit ascii, but
1047+ 74F9 29          >
1047+ 74FA             >                org     $-1                 // alter last byte of Name just above to set
1047+ 74F9 A9          >                db      {b $} | END_BIT     // msb as name end
1047+ 74FA             >
1047+ 74FA E5 74       >                dw      last_NFA            // Link to previous definition Name
1047+ 74FC             >CSGN:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1047+ 74FC 7D 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
1047+ 74FE             >                else
1047+ 74FE ~           >                dw      $ + 2   ; ok        // is pointed by CFA
1047+ 74FE             >                endif           ; ok        // for other definitions it "points" the correct handler
1047+ 74FE             >                // Use of "; ok" to suppress "warning[fwdref]"
1047+ 74FE             >
1047+ 74FE             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1048+ 74FE 08 6B 49 6A                  dw      DUP, ONE_PLUS, CFETCH   // dup 1+ c@
1048+ 7502 B6 6B
1049+ 7504 08 6B A9 63                  dw      DUP, LIT, "-", EQUALS   // dup [char] - =
1049+ 7508 2D 00 3A 6F
1050+ 750C                                                              // if
1051+ 750C 2C 64                        dw      ZBRANCH
1052+ 750E 12 00                        dw      CSgn_Else_0 - $
1053+ 7510 D3 6A                        dw          DROP                //      drop
1054+ 7512 49 6A                        dw          ONE_PLUS            //      1+
1055+ 7514 02 6D 58 6E                  dw          ONE, DPL, PLUSSTORE //      1 dpl +!
1055+ 7518 78 6B
1056+ 751A 02 6D                        dw          ONE                 //      1
1057+ 751C                                                              // else
1058+ 751C 15 64                        dw      BRANCH
1059+ 751E 16 00                        dw      CSgn_Endif_0 - $
1060+ 7520              CSgn_Else_0:
1061+ 7520 A9 63 2B 00                  dw          LIT, "+", EQUALS    //      [char] + =
1061+ 7524 3A 6F
1062+ 7526                                                              //      if
1063+ 7526 2C 64                        dw          ZBRANCH
1064+ 7528 0A 00                        dw          CSgn_Endif_1 - $
1065+ 752A 49 6A                        dw              ONE_PLUS        //          1+
1066+ 752C 02 6D 58 6E                  dw              ONE, DPL        //          1 dpl
1067+ 7530 78 6B                        dw              PLUSSTORE       //          +!
1068+ 7532              CSgn_Endif_1                                    //      endif
1069+ 7532 FA 6C                        dw          ZERO                //      0
1070+ 7534              CSgn_Endif_0:                                   // endif
1071+ 7534 A3 69                        dw      EXIT
1072+ 7536
1073+ 7536              //  ______________________________________________________________________
1074+ 7536              //
1075+ 7536              // (number)     d a -- d1 a1
1076+ 7536              // using the current BASE parse characters stored in address a
1077+ 7536              // accumulating a double precision integer d
1078+ 7536              // the process stops at the first not-convertible character
1079+ 7536              // A double-number is kept in CPU registers as HLDE.
1080+ 7536              // On the stack a double number is treated as two single numbers
1081+ 7536              // where HL is on the top of the stack and DE is the second from top,
1082+ 7536              // so in the stack memory it appears as LHED.
1083+ 7536              // Instead, in 2VARIABLE a double number is stored as EDLH.
1084+ 7536                              Colon_Def CNUMBER,  "(NUMBER)", is_normal
1084+ 7536             >                New_Def  CNUMBER, "(NUMBER)", Enter_Ptr, is_normal ; ok
1084+ 7536             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1084+ 7536             >
1084+ 7536             >                // dummy db directives used to calculate length of namec
1084+ 7536 28 4E 55 4D >                db      "(NUMBER)"
1084+ 753A 42 45 52 29 >
1084+ 753E             >len_NFA         defl    $ - temp_NFA
1084+ 753E             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1084+ 7536             >
1084+ 7536 88          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1084+ 7537 28 4E 55 4D >                db      "(NUMBER)"               // name string in 7-bit ascii, but
1084+ 753B 42 45 52 29 >
1084+ 753F             >                org     $-1                 // alter last byte of Name just above to set
1084+ 753E A9          >                db      {b $} | END_BIT     // msb as name end
1084+ 753F             >
1084+ 753F F4 74       >                dw      last_NFA            // Link to previous definition Name
1084+ 7541             >CNUMBER:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1084+ 7541 7D 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
1084+ 7543             >                else
1084+ 7543 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
1084+ 7543             >                endif           ; ok        // for other definitions it "points" the correct handler
1084+ 7543             >                // Use of "; ok" to suppress "warning[fwdref]"
1084+ 7543             >
1084+ 7543             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1085+ 7543                                                              // begin
1086+ 7543              CNumber_Begin:
1087+ 7543 49 6A                        dw          ONE_PLUS            //      1+
1088+ 7545 08 6B B6 69                  dw          DUP, TO_R           //      dup >r
1089+ 7549 B6 6B                        dw          CFETCH              //      @
1090+ 754B 4F 6E 9B 6B                  dw          BASE, FETCH         //      base @
1091+ 754F B1 64                        dw          DIGIT               //      digit
1092+ 7551                                                              // while
1093+ 7551 2C 64                        dw      ZBRANCH
1094+ 7553 2C 00                        dw      CNumber_While_end - $
1095+ 7555 FB 6A                        dw          SWAP                //      swap
1096+ 7557 4F 6E 9B 6B                  dw          BASE, FETCH         //      base @
1097+ 755B C9 68                        dw          UM_MUL              //      um*
1098+ 755D D3 6A 15 6B                  dw          DROP, ROT           //      drop rot
1099+ 7561 4F 6E 9B 6B                  dw          BASE, FETCH         //      base @
1100+ 7565 C9 68                        dw          UM_MUL              //      um*
1101+ 7567 35 6A                        dw          DPLUS               //      d+
1102+ 7569 58 6E 9B 6B                  dw          DPL, FETCH          //      dpl @
1103+ 756D 49 6A                        dw          ONE_PLUS            //      1+
1104+ 756F                                                              //      if
1105+ 756F 2C 64                        dw          ZBRANCH
1106+ 7571 08 00                        dw          CNumber_Endif - $
1107+ 7573 02 6D 58 6E                  dw              ONE, DPL        //          1 dpl
1108+ 7577 78 6B                        dw              PLUSSTORE       //          +!
1109+ 7579              CNumber_Endif:                                  //      endif
1110+ 7579 CA 69                        dw             R_TO             //      r>  ( balance rp )
1111+ 757B 15 64                        dw      BRANCH
1112+ 757D C6 FF                        dw      CNumber_Begin - $
1113+ 757F              CNumber_While_end:                              // repeat
1114+ 757F CA 69                        dw      R_TO                    // r>  ( balance rp on exit while-repeat )
1115+ 7581 A3 69                        dw      EXIT                    // ;
1116+ 7583
1117+ 7583              //  ______________________________________________________________________
1118+ 7583              //
1119+ 7583              // number       a -- d
1120+ 7583                              Colon_Def NUMBER,  "NUMBER", is_normal
1120+ 7583             >                New_Def  NUMBER, "NUMBER", Enter_Ptr, is_normal ; ok
1120+ 7583             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1120+ 7583             >
1120+ 7583             >                // dummy db directives used to calculate length of namec
1120+ 7583 4E 55 4D 42 >                db      "NUMBER"
1120+ 7587 45 52       >
1120+ 7589             >len_NFA         defl    $ - temp_NFA
1120+ 7589             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1120+ 7583             >
1120+ 7583 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1120+ 7584 4E 55 4D 42 >                db      "NUMBER"               // name string in 7-bit ascii, but
1120+ 7588 45 52       >
1120+ 758A             >                org     $-1                 // alter last byte of Name just above to set
1120+ 7589 D2          >                db      {b $} | END_BIT     // msb as name end
1120+ 758A             >
1120+ 758A 36 75       >                dw      last_NFA            // Link to previous definition Name
1120+ 758C             >NUMBER:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1120+ 758C 7D 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
1120+ 758E             >                else
1120+ 758E ~           >                dw      $ + 2   ; ok        // is pointed by CFA
1120+ 758E             >                endif           ; ok        // for other definitions it "points" the correct handler
1120+ 758E             >                // Use of "; ok" to suppress "warning[fwdref]"
1120+ 758E             >
1120+ 758E             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1121+ 758E FA 6C FA 6C                  dw      ZERO, ZERO              // 0 0
1122+ 7592 15 6B                        dw      ROT                     // rot
1123+ 7594 FC 74 B6 69                  dw      CSGN, TO_R              // (sgn) >r
1124+ 7598 1B 6D 58 6E                  dw      NEG_ONE, DPL, STORE     // -1 dpl !
1124+ 759C A8 6B
1125+ 759E 41 75                        dw      CNUMBER                 // (number)
1126+ 75A0 08 6B B6 6B                  dw      DUP, CFETCH             // dup c@
1127+ 75A4 A9 63 2E 00                  dw      LIT, 46, EQUALS         // [char] . =  ( decimal point )
1127+ 75A8 3A 6F
1128+ 75AA                                                              // if
1129+ 75AA 2C 64                        dw      ZBRANCH
1130+ 75AC 0A 00                        dw      Number_Endif_1 - $
1131+ 75AE FA 6C 58 6E                  dw          ZERO, DPL, STORE    //      0 dpl !
1131+ 75B2 A8 6B
1132+ 75B4 41 75                        dw          CNUMBER             //      (number)
1133+ 75B6              Number_Endif_1:                                 // endif
1134+ 75B6 B6 6B 24 6D                  dw      CFETCH, BL              // c@ bl
1135+ 75BA 2C 6F FA 6C                  dw      SUBTRACT, ZERO, QERROR  // - 0 ?error
1135+ 75BE 9E 70
1136+ 75C0 CA 69                        dw      R_TO                    // r>
1137+ 75C2                                                              // if
1138+ 75C2 2C 64                        dw      ZBRANCH
1139+ 75C4 04 00                        dw      Number_Endif_2 - $
1140+ 75C6 A9 6A                        dw          DMINUS              //      dminus
1141+ 75C8              Number_Endif_2:                                 // endif
1142+ 75C8 A3 69                        dw      EXIT                    // ;
1143+ 75CA
1144+ 75CA              //  ______________________________________________________________________
1145+ 75CA              //
1146+ 75CA              // -find        a -- d
1147+ 75CA                              Colon_Def LFIND,  "-FIND", is_normal
1147+ 75CA             >                New_Def  LFIND, "-FIND", Enter_Ptr, is_normal ; ok
1147+ 75CA             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1147+ 75CA             >
1147+ 75CA             >                // dummy db directives used to calculate length of namec
1147+ 75CA 2D 46 49 4E >                db      "-FIND"
1147+ 75CE 44          >
1147+ 75CF             >len_NFA         defl    $ - temp_NFA
1147+ 75CF             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1147+ 75CA             >
1147+ 75CA 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1147+ 75CB 2D 46 49 4E >                db      "-FIND"               // name string in 7-bit ascii, but
1147+ 75CF 44          >
1147+ 75D0             >                org     $-1                 // alter last byte of Name just above to set
1147+ 75CF C4          >                db      {b $} | END_BIT     // msb as name end
1147+ 75D0             >
1147+ 75D0 83 75       >                dw      last_NFA            // Link to previous definition Name
1147+ 75D2             >LFIND:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1147+ 75D2 7D 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
1147+ 75D4             >                else
1147+ 75D4 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
1147+ 75D4             >                endif           ; ok        // for other definitions it "points" the correct handler
1147+ 75D4             >                // Use of "; ok" to suppress "warning[fwdref]"
1147+ 75D4             >
1147+ 75D4             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1148+ 75D4 24 6D 20 74                  dw      BL, WORD                // bl word
1149+ 75D8 2D 6E 9B 6B                  dw      CONTEXT, FETCH, FETCH   // context @ @
1149+ 75DC 9B 6B
1150+ 75DE 26 65                        dw      C_FIND                  // (find)
1151+ 75E0 AD 6F                        dw      QDUP                    // ?dup
1152+ 75E2 E5 69                        dw      ZEQUAL                  // 0=
1153+ 75E4                                                              // if
1154+ 75E4 2C 64                        dw      ZBRANCH
1155+ 75E6 08 00                        dw      LFind_Endif - $
1156+ 75E8 D9 6E                        dw          HERE                //      here
1157+ 75EA 1A 70                        dw          LATEST              //      latest
1158+ 75EC 26 65                        dw          C_FIND              //      (find)
1159+ 75EE              LFind_Endif:                                    // endif
1160+ 75EE A3 69                        dw      EXIT                    // ;
1161+ 75F0
1162+ 75F0              //  ______________________________________________________________________
1163+ 75F0              //
1164+ 75F0              // (abort)      --
1165+ 75F0                              Colon_Def CABORT,  "(ABORT)", is_normal
1165+ 75F0             >                New_Def  CABORT, "(ABORT)", Enter_Ptr, is_normal ; ok
1165+ 75F0             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1165+ 75F0             >
1165+ 75F0             >                // dummy db directives used to calculate length of namec
1165+ 75F0 28 41 42 4F >                db      "(ABORT)"
1165+ 75F4 52 54 29    >
1165+ 75F7             >len_NFA         defl    $ - temp_NFA
1165+ 75F7             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1165+ 75F0             >
1165+ 75F0 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1165+ 75F1 28 41 42 4F >                db      "(ABORT)"               // name string in 7-bit ascii, but
1165+ 75F5 52 54 29    >
1165+ 75F8             >                org     $-1                 // alter last byte of Name just above to set
1165+ 75F7 A9          >                db      {b $} | END_BIT     // msb as name end
1165+ 75F8             >
1165+ 75F8 CA 75       >                dw      last_NFA            // Link to previous definition Name
1165+ 75FA             >CABORT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1165+ 75FA 7D 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
1165+ 75FC             >                else
1165+ 75FC ~           >                dw      $ + 2   ; ok        // is pointed by CFA
1165+ 75FC             >                endif           ; ok        // for other definitions it "points" the correct handler
1165+ 75FC             >                // Use of "; ok" to suppress "warning[fwdref]"
1165+ 75FC             >
1165+ 75FC             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1166+ 75FC B9 78                        dw      ABORT                   // abort
1167+ 75FE A3 69                        dw      EXIT                    // ;
1168+ 7600
1169+ 7600              //  ______________________________________________________________________
1170+ 7600              //
1171+ 7600              // error        n --
1172+ 7600              // raise an error
1173+ 7600              // if WARNING is 0, prints "MSG#n".
1174+ 7600              // if WARNING is 1, prints line n of screen 4.
1175+ 7600              // if WARNING is -1 does (ABORT) that normally does ABORT
1176+ 7600              // value can be negative or beyond block 4.
1177+ 7600                              Colon_Def ERROR,  "ERROR", is_normal
1177+ 7600             >                New_Def  ERROR, "ERROR", Enter_Ptr, is_normal ; ok
1177+ 7600             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1177+ 7600             >
1177+ 7600             >                // dummy db directives used to calculate length of namec
1177+ 7600 45 52 52 4F >                db      "ERROR"
1177+ 7604 52          >
1177+ 7605             >len_NFA         defl    $ - temp_NFA
1177+ 7605             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1177+ 7600             >
1177+ 7600 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1177+ 7601 45 52 52 4F >                db      "ERROR"               // name string in 7-bit ascii, but
1177+ 7605 52          >
1177+ 7606             >                org     $-1                 // alter last byte of Name just above to set
1177+ 7605 D2          >                db      {b $} | END_BIT     // msb as name end
1177+ 7606             >
1177+ 7606 F0 75       >                dw      last_NFA            // Link to previous definition Name
1177+ 7608             >ERROR:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1177+ 7608 7D 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
1177+ 760A             >                else
1177+ 760A ~           >                dw      $ + 2   ; ok        // is pointed by CFA
1177+ 760A             >                endif           ; ok        // for other definitions it "points" the correct handler
1177+ 760A             >                // Use of "; ok" to suppress "warning[fwdref]"
1177+ 760A             >
1177+ 760A             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1178+ 760A A5 6D 9B 6B                  dw      WARNING, FETCH, ZLESS   // warning @ 0<
1178+ 760E 00 6A
1179+ 7610                                                              // if
1180+ 7610 2C 64                        dw      ZBRANCH
1181+ 7612 04 00                        dw      Error_Endif_1 - $
1182+ 7614 FA 75                        dw          CABORT              //      (abort)
1183+ 7616              Error_Endif_1:                                  // endif
1184+ 7616 D9 6E 38 72                  dw      HERE, COUNT, TYPE       // here count type
1184+ 761A 9E 72
1185+ 761C 6F 74                        dw      C_DOT_QUOTE             // .( ? )
1186+ 761E 02 3F 20                     db      2, "? "
1187+ 7621 EA 7A                        dw      MESSAGE                 // message  ( forward )
1188+ 7623 7C 6D 9B 6B                  dw      S0, FETCH, SPSTORE      // s0 @ sp!
1188+ 7627 7A 69
1189+ 7629 F9 6D 9B 6B                  dw      BLK, FETCH, QDUP        // blk @ ?dup
1189+ 762D AD 6F
1190+ 762F                                                              // if
1191+ 762F 2C 64                        dw      ZBRANCH
1192+ 7631 08 00                        dw      Error_Endif_2 - $
1193+ 7633 02 6E 9B 6B                  dw          TO_IN, FETCH, SWAP  //      >in @ swap
1193+ 7637 FB 6A
1194+ 7639              Error_Endif_2:                                  // endif
1195+ 7639 78 78                        dw      QUIT                    // quit ( forward )
1196+ 763B A3 69                        dw      EXIT                    // ;
1197+ 763D              //  ______________________________________________________________________
1198+ 763D              //
1199+ 763D              // id.          nfa --
1200+ 763D                              Colon_Def ID_DOT,  "ID.", is_normal
1200+ 763D             >                New_Def  ID_DOT, "ID.", Enter_Ptr, is_normal ; ok
1200+ 763D             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1200+ 763D             >
1200+ 763D             >                // dummy db directives used to calculate length of namec
1200+ 763D 49 44 2E    >                db      "ID."
1200+ 7640             >len_NFA         defl    $ - temp_NFA
1200+ 7640             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1200+ 763D             >
1200+ 763D 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1200+ 763E 49 44 2E    >                db      "ID."               // name string in 7-bit ascii, but
1200+ 7641             >                org     $-1                 // alter last byte of Name just above to set
1200+ 7640 AE          >                db      {b $} | END_BIT     // msb as name end
1200+ 7641             >
1200+ 7641 00 76       >                dw      last_NFA            // Link to previous definition Name
1200+ 7643             >ID_DOT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1200+ 7643 7D 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
1200+ 7645             >                else
1200+ 7645 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
1200+ 7645             >                endif           ; ok        // for other definitions it "points" the correct handler
1200+ 7645             >                // Use of "; ok" to suppress "warning[fwdref]"
1200+ 7645             >
1200+ 7645             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1201+ 7645 0D 74 A9 63                  dw      PAD, LIT, 32, LIT, 96   // pad 32 96
1201+ 7649 20 00 A9 63
1201+ 764D 60 00
1202+ 764F BE 73                        dw      FILL                    // fill
1203+ 7651 08 6B 58 70                  dw      DUP, PFA, LFA           // dup pfa lfa
1203+ 7655 2A 70
1204+ 7657 C3 6A 2C 6F                  dw      OVER, SUBTRACT          // over -
1205+ 765B 0D 74 FB 6A                  dw      PAD, SWAP               // pad swap
1206+ 765F 96 68                        dw      CMOVE                   // cmove
1207+ 7661 0D 74 38 72                  dw      PAD, COUNT, LIT, $1F    // pad count 01F
1207+ 7665 A9 63 1F 00
1208+ 7669 33 69                        dw      AND_OP                  // and  ( use only lower bits )
1209+ 766B 9E 72 E4 6F                  dw      TYPE, SPACE             // type
1210+ 766F A3 69                        dw      EXIT                    // ;
1211+ 7671
1212+ 7671              //  ______________________________________________________________________
1213+ 7671              //
1214+ 7671              // code         -- cccc
1215+ 7671                              Colon_Def CODE,  "CODE", is_normal
1215+ 7671             >                New_Def  CODE, "CODE", Enter_Ptr, is_normal ; ok
1215+ 7671             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1215+ 7671             >
1215+ 7671             >                // dummy db directives used to calculate length of namec
1215+ 7671 43 4F 44 45 >                db      "CODE"
1215+ 7675             >len_NFA         defl    $ - temp_NFA
1215+ 7675             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1215+ 7671             >
1215+ 7671 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1215+ 7672 43 4F 44 45 >                db      "CODE"               // name string in 7-bit ascii, but
1215+ 7676             >                org     $-1                 // alter last byte of Name just above to set
1215+ 7675 C5          >                db      {b $} | END_BIT     // msb as name end
1215+ 7676             >
1215+ 7676 3D 76       >                dw      last_NFA            // Link to previous definition Name
1215+ 7678             >CODE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1215+ 7678 7D 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
1215+ 767A             >                else
1215+ 767A ~           >                dw      $ + 2   ; ok        // is pointed by CFA
1215+ 767A             >                endif           ; ok        // for other definitions it "points" the correct handler
1215+ 767A             >                // Use of "; ok" to suppress "warning[fwdref]"
1215+ 767A             >
1215+ 767A             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1216+ 767A D2 75                        dw      LFIND                   // -find
1217+ 767C                                                              // if
1218+ 767C 2C 64                        dw      ZBRANCH
1219+ 767E 10 00                        dw      Code_Endif - $
1220+ 7680 D3 6A                        dw          DROP                //      drop
1221+ 7682 7C 70 43 76                  dw          TO_NAME, ID_DOT     //      >name id.
1222+ 7686 A9 63 04 00                  dw          LIT, 4, MESSAGE     //      4 message
1222+ 768A EA 7A
1223+ 768C E4 6F                        dw          SPACE               //      space
1224+ 768E              Code_Endif:                                     // endif
1225+ 768E D9 6E                        dw      HERE                    // here
1226+ 7690                                                              // ( ---- here begins NFA ---- )
1227+ 7690 08 6B B6 6B                  dw      DUP, CFETCH             // dup c@
1228+ 7694 98 6D 9B 6B                  dw      WIDTH, FETCH, MIN       // width @ min  ( max 31 character length )
1228+ 7698 80 6F
1229+ 769A 49 6A E9 6E                  dw      ONE_PLUS, ALLOT         // 1+ allot
1230+ 769E 08 6B                        dw      DUP                     // dup
1231+ 76A0 A9 63                        dw      LIT
1232+ 76A2 A0 00                        dw      SMUDGE_BIT | END_BIT    // 160
1233+ 76A4 8E 6B                        dw      TOGGLE                  // toggle
1234+ 76A6 D9 6E 55 6A                  dw      HERE, ONE_SUBTRACT      // here 1- ( last character )
1235+ 76AA A9 63 80 00                  dw      LIT, END_BIT, TOGGLE    // 128 toggle
1235+ 76AE 8E 6B
1236+ 76B0                                                              // ( ---- here is LFA ---- )
1237+ 76B0 1A 70 F5 6E                  dw      LATEST, COMMA           // latest ,
1238+ 76B4 3A 6E 9B 6B                  dw      CURRENT, FETCH, STORE   // current @ ! ( save this word as the latest )
1238+ 76B8 A8 6B
1239+ 76BA D9 6E 71 6A                  dw      HERE, CELL_PLUS, COMMA  // ( CFA point PFA )
1239+ 76BE F5 6E
1240+ 76C0 A3 69                        dw      EXIT                    // ;
1241+ 76C2
1242+ 76C2              //  ______________________________________________________________________
1243+ 76C2              //
1244+ 76C2              // create       -- cccc     ( compile time )
1245+ 76C2              //              -- a        ( run time )
1246+ 76C2                              Colon_Def CREATE,  "CREATE", is_normal
1246+ 76C2             >                New_Def  CREATE, "CREATE", Enter_Ptr, is_normal ; ok
1246+ 76C2             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1246+ 76C2             >
1246+ 76C2             >                // dummy db directives used to calculate length of namec
1246+ 76C2 43 52 45 41 >                db      "CREATE"
1246+ 76C6 54 45       >
1246+ 76C8             >len_NFA         defl    $ - temp_NFA
1246+ 76C8             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1246+ 76C2             >
1246+ 76C2 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1246+ 76C3 43 52 45 41 >                db      "CREATE"               // name string in 7-bit ascii, but
1246+ 76C7 54 45       >
1246+ 76C9             >                org     $-1                 // alter last byte of Name just above to set
1246+ 76C8 C5          >                db      {b $} | END_BIT     // msb as name end
1246+ 76C9             >
1246+ 76C9 71 76       >                dw      last_NFA            // Link to previous definition Name
1246+ 76CB             >CREATE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1246+ 76CB 7D 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
1246+ 76CD             >                else
1246+ 76CD ~           >                dw      $ + 2   ; ok        // is pointed by CFA
1246+ 76CD             >                endif           ; ok        // for other definitions it "points" the correct handler
1246+ 76CD             >                // Use of "; ok" to suppress "warning[fwdref]"
1246+ 76CD             >
1246+ 76CD             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1247+ 76CD 78 76 7D 71                  dw      CODE, SMUDGE        // code smudge
1248+ 76D1
1249+ 76D1
1250+ 76D1 D3 71                        dw      C_SEMICOLON_CODE
1251+ 76D3                              // this routine is called from the call coded in CFA
1252+ 76D3              Create_Ptr:
1253+ 76D3 13                           inc     de
1254+ 76D4 D5                           push    de                  // balance TOS before overwrite it
1255+ 76D5
1256+ 76D5                              next
1256+ 76D5 DD E9       >                jp      (ix)
1257+ 76D7
1258+ 76D7              //  ______________________________________________________________________
1259+ 76D7              //
1260+ 76D7              // [compile]    -- cccc     ( compile time )
1261+ 76D7                              Colon_Def COMPILE_IMMEDIATE,  "[COMPILE]", is_immediate
1261+ 76D7             >                New_Def  COMPILE_IMMEDIATE, "[COMPILE]", Enter_Ptr, is_immediate ; ok
1261+ 76D7             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1261+ 76D7             >
1261+ 76D7             >                // dummy db directives used to calculate length of namec
1261+ 76D7 5B 43 4F 4D >                db      "[COMPILE]"
1261+ 76DB 50 49 4C 45 >
1261+ 76DF 5D          >
1261+ 76E0             >len_NFA         defl    $ - temp_NFA
1261+ 76E0             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1261+ 76D7             >
1261+ 76D7 C9          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
1261+ 76D8 5B 43 4F 4D >                db      "[COMPILE]"               // name string in 7-bit ascii, but
1261+ 76DC 50 49 4C 45 >
1261+ 76E0 5D          >
1261+ 76E1             >                org     $-1                 // alter last byte of Name just above to set
1261+ 76E0 DD          >                db      {b $} | END_BIT     // msb as name end
1261+ 76E1             >
1261+ 76E1 C2 76       >                dw      last_NFA            // Link to previous definition Name
1261+ 76E3             >COMPILE_IMMEDIATE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1261+ 76E3 7D 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
1261+ 76E5             >                else
1261+ 76E5 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
1261+ 76E5             >                endif           ; ok        // for other definitions it "points" the correct handler
1261+ 76E5             >                // Use of "; ok" to suppress "warning[fwdref]"
1261+ 76E5             >
1261+ 76E5             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1262+ 76E5 D2 75                        dw      LFIND                   // -find      (  cfa  b  f  )
1263+ 76E7 E5 69                        dw      ZEQUAL                  // 0=         (  cfa  b  )
1264+ 76E9 FA 6C 9E 70                  dw      ZERO, QERROR            // 0 ?error
1265+ 76ED D3 6A                        dw      DROP                    // drop       (  cfa  )
1266+ 76EF F5 6E                        dw      COMMA                   // ,
1267+ 76F1 A3 69                        dw      EXIT                    // ; immediate
1268+ 76F3
1269+ 76F3              //  ______________________________________________________________________
1270+ 76F3              //
1271+ 76F3              // literal      n --      ( compile time )
1272+ 76F3                              Colon_Def LITERAL,  "LITERAL", is_immediate
1272+ 76F3             >                New_Def  LITERAL, "LITERAL", Enter_Ptr, is_immediate ; ok
1272+ 76F3             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1272+ 76F3             >
1272+ 76F3             >                // dummy db directives used to calculate length of namec
1272+ 76F3 4C 49 54 45 >                db      "LITERAL"
1272+ 76F7 52 41 4C    >
1272+ 76FA             >len_NFA         defl    $ - temp_NFA
1272+ 76FA             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1272+ 76F3             >
1272+ 76F3 C7          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
1272+ 76F4 4C 49 54 45 >                db      "LITERAL"               // name string in 7-bit ascii, but
1272+ 76F8 52 41 4C    >
1272+ 76FB             >                org     $-1                 // alter last byte of Name just above to set
1272+ 76FA CC          >                db      {b $} | END_BIT     // msb as name end
1272+ 76FB             >
1272+ 76FB D7 76       >                dw      last_NFA            // Link to previous definition Name
1272+ 76FD             >LITERAL:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1272+ 76FD 7D 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
1272+ 76FF             >                else
1272+ 76FF ~           >                dw      $ + 2   ; ok        // is pointed by CFA
1272+ 76FF             >                endif           ; ok        // for other definitions it "points" the correct handler
1272+ 76FF             >                // Use of "; ok" to suppress "warning[fwdref]"
1272+ 76FF             >
1272+ 76FF             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1273+ 76FF 45 6E 9B 6B                  dw      STATE, FETCH            // state @
1274+ 7703                                                              // if
1275+ 7703 2C 64                        dw      ZBRANCH
1276+ 7705 08 00                        dw      Literal_Endif - $
1277+ 7707 31 71 A9 63                  dw          COMPILE, LIT        //      compile lit
1278+ 770B F5 6E                        dw          COMMA               //      ,
1279+ 770D              Literal_Endif:                                  // endif
1280+ 770D A3 69                        dw      EXIT                    // ; immediate
1281+ 770F
1282+ 770F              //  ______________________________________________________________________
1283+ 770F              //
1284+ 770F              // dliteral     n --      ( compile time )
1285+ 770F                              Colon_Def DLITERAL,  "DLITERAL", is_immediate
1285+ 770F             >                New_Def  DLITERAL, "DLITERAL", Enter_Ptr, is_immediate ; ok
1285+ 770F             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1285+ 770F             >
1285+ 770F             >                // dummy db directives used to calculate length of namec
1285+ 770F 44 4C 49 54 >                db      "DLITERAL"
1285+ 7713 45 52 41 4C >
1285+ 7717             >len_NFA         defl    $ - temp_NFA
1285+ 7717             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1285+ 770F             >
1285+ 770F C8          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
1285+ 7710 44 4C 49 54 >                db      "DLITERAL"               // name string in 7-bit ascii, but
1285+ 7714 45 52 41 4C >
1285+ 7718             >                org     $-1                 // alter last byte of Name just above to set
1285+ 7717 CC          >                db      {b $} | END_BIT     // msb as name end
1285+ 7718             >
1285+ 7718 F3 76       >                dw      last_NFA            // Link to previous definition Name
1285+ 771A             >DLITERAL:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1285+ 771A 7D 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
1285+ 771C             >                else
1285+ 771C ~           >                dw      $ + 2   ; ok        // is pointed by CFA
1285+ 771C             >                endif           ; ok        // for other definitions it "points" the correct handler
1285+ 771C             >                // Use of "; ok" to suppress "warning[fwdref]"
1285+ 771C             >
1285+ 771C             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1286+ 771C 45 6E 9B 6B                  dw      STATE, FETCH            // state @
1287+ 7720                                                              // if
1288+ 7720 2C 64                        dw      ZBRANCH
1289+ 7722 08 00                        dw      DLiteral_Endif - $
1290+ 7724 FB 6A                        dw          SWAP                //      swap
1291+ 7726 FD 76 FD 76                  dw          LITERAL,  LITERAL   //      [compile] literal [compile] literal
1292+ 772A              DLiteral_Endif:                                 // endif
1293+ 772A A3 69                        dw      EXIT                    // ; immediate
1294+ 772C
1295+ 772C              //  ______________________________________________________________________
1296+ 772C              //
1297+ 772C              // [char]       n --      ( compile time )
1298+ 772C              // inside colon definition, gets first character from next input word
1299+ 772C              // and compiles it as literal.
1300+ 772C                              Colon_Def COMPILE_CHAR,  "[CHAR]", is_immediate
1300+ 772C             >                New_Def  COMPILE_CHAR, "[CHAR]", Enter_Ptr, is_immediate ; ok
1300+ 772C             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1300+ 772C             >
1300+ 772C             >                // dummy db directives used to calculate length of namec
1300+ 772C 5B 43 48 41 >                db      "[CHAR]"
1300+ 7730 52 5D       >
1300+ 7732             >len_NFA         defl    $ - temp_NFA
1300+ 7732             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1300+ 772C             >
1300+ 772C C6          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
1300+ 772D 5B 43 48 41 >                db      "[CHAR]"               // name string in 7-bit ascii, but
1300+ 7731 52 5D       >
1300+ 7733             >                org     $-1                 // alter last byte of Name just above to set
1300+ 7732 DD          >                db      {b $} | END_BIT     // msb as name end
1300+ 7733             >
1300+ 7733 0F 77       >                dw      last_NFA            // Link to previous definition Name
1300+ 7735             >COMPILE_CHAR:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1300+ 7735 7D 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
1300+ 7737             >                else
1300+ 7737 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
1300+ 7737             >                endif           ; ok        // for other definitions it "points" the correct handler
1300+ 7737             >                // Use of "; ok" to suppress "warning[fwdref]"
1300+ 7737             >
1300+ 7737             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1301+ 7737 8A 74 FD 76                  dw      CHAR, LITERAL           // char [compile] literal
1302+ 773B A3 69                        dw      EXIT                    // ; immediate
1303+ 773D
1304+ 773D              //  ______________________________________________________________________
1305+ 773D              //
1306+ 773D              // 0x00         n --      ( compile time )
1307+ 773D                              Colon_Def NUL_WORD,  $00, is_immediate
1307+ 773D             >                New_Def  NUL_WORD, $00, Enter_Ptr, is_immediate ; ok
1307+ 773D             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1307+ 773D             >
1307+ 773D             >                // dummy db directives used to calculate length of namec
1307+ 773D 00          >                db      $00
1307+ 773E             >len_NFA         defl    $ - temp_NFA
1307+ 773E             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1307+ 773D             >
1307+ 773D C1          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
1307+ 773E 00          >                db      $00               // name string in 7-bit ascii, but
1307+ 773F             >                org     $-1                 // alter last byte of Name just above to set
1307+ 773E 80          >                db      {b $} | END_BIT     // msb as name end
1307+ 773F             >
1307+ 773F 2C 77       >                dw      last_NFA            // Link to previous definition Name
1307+ 7741             >NUL_WORD:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1307+ 7741 7D 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
1307+ 7743             >                else
1307+ 7743 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
1307+ 7743             >                endif           ; ok        // for other definitions it "points" the correct handler
1307+ 7743             >                // Use of "; ok" to suppress "warning[fwdref]"
1307+ 7743             >
1307+ 7743             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1308+ 7743 F9 6D 9B 6B                  dw      BLK, FETCH, ONE         // blk @ 1
1308+ 7747 02 6D
1309+ 7749 72 6F                        dw      GREATER                 // > if
1310+ 774B                                                              // if
1311+ 774B 2C 64                        dw      ZBRANCH
1312+ 774D 28 00                        dw      Nul_Else_1 - $
1313+ 774F 02 6D F9 6D                  dw          ONE, BLK, PLUSSTORE //      1 blk +!
1313+ 7753 78 6B
1314+ 7755 FA 6C 02 6E                  dw          ZERO, TO_IN, STORE  //      0 >in !
1314+ 7759 A8 6B
1315+ 775B F9 6D 9B 6B                  dw          BLK, FETCH          //      blk @
1316+ 775F 46 6D                        dw          BSCR                //      b/scr
1317+ 7761 55 6A                        dw          ONE_SUBTRACT        //      1 -
1318+ 7763 33 69                        dw          AND_OP              //      and  ( this is tricky )
1319+ 7765 E5 69                        dw          ZEQUAL              //      0=
1320+ 7767                                                              //      if
1321+ 7767 2C 64                        dw          ZBRANCH
1322+ 7769 08 00                        dw          Nul_Endif_2 - $
1323+ 776B D0 70                        dw              QEXEC           //          ?exec
1324+ 776D CA 69 D3 6A                  dw              R_TO, DROP      //          r> drop
1325+ 7771              Nul_Endif_2:                                    //      endif
1326+ 7771 15 64                        dw      BRANCH
1327+ 7773 06 00                        dw      Nul_Endif_1 - $
1328+ 7775              Nul_Else_1:                                     // else
1329+ 7775 CA 69 D3 6A                  dw          R_TO, DROP          //      r> drop
1330+ 7779              Nul_Endif_1:                                    // endif
1331+ 7779 A3 69                        dw      EXIT                    // ;
1332+ 777B
1333+ 777B              //  ______________________________________________________________________
1334+ 777B              //
1335+ 777B              // ?stack       --
1336+ 777B              // Raise error #1 if stack is empty and you pop it
1337+ 777B              // Raise error #7 if stack is full.
1338+ 777B              // This means SP must always stay between HERE and FFFF
1339+ 777B              // For 128K BANK paging purpose SP must be <= BFE0 and 50 words room
1340+ 777B              // for Next 8K MMU paging this is $DOE8
1341+ 777B                              Colon_Def QSTACK, "?STACK", is_normal
1341+ 777B             >                New_Def  QSTACK, "?STACK", Enter_Ptr, is_normal ; ok
1341+ 777B             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1341+ 777B             >
1341+ 777B             >                // dummy db directives used to calculate length of namec
1341+ 777B 3F 53 54 41 >                db      "?STACK"
1341+ 777F 43 4B       >
1341+ 7781             >len_NFA         defl    $ - temp_NFA
1341+ 7781             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1341+ 777B             >
1341+ 777B 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1341+ 777C 3F 53 54 41 >                db      "?STACK"               // name string in 7-bit ascii, but
1341+ 7780 43 4B       >
1341+ 7782             >                org     $-1                 // alter last byte of Name just above to set
1341+ 7781 CB          >                db      {b $} | END_BIT     // msb as name end
1341+ 7782             >
1341+ 7782 3D 77       >                dw      last_NFA            // Link to previous definition Name
1341+ 7784             >QSTACK:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1341+ 7784 7D 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
1341+ 7786             >                else
1341+ 7786 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
1341+ 7786             >                endif           ; ok        // for other definitions it "points" the correct handler
1341+ 7786             >                // Use of "; ok" to suppress "warning[fwdref]"
1341+ 7786             >
1341+ 7786             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1342+ 7786 6B 69                        dw      SPFETCH                 // sp@
1343+ 7788 7C 6D 9B 6B                  dw      S0, FETCH               // s0 @
1344+ 778C FB 6A 47 6F                  dw      SWAP, ULESS             // swap u<
1345+ 7790 02 6D 9E 70                  dw      ONE, QERROR             // 1 ?error
1346+ 7794 D9 6E                        dw      HERE                    // here
1347+ 7796 7C 6D 9B 6B                  dw      S0, FETCH, LESS         // s0 @ <
1347+ 779A 5B 6F
1348+ 779C                                                              // if
1349+ 779C 2C 64                        dw      ZBRANCH
1350+ 779E 14 00                        dw      QStack_Endif - $
1351+ 77A0 6B 69                        dw          SPFETCH             //      sp@
1352+ 77A2 D9 6E A9 63                  dw          HERE, LIT, 128      //      here 128
1352+ 77A6 80 00
1353+ 77A8 28 6A 47 6F                  dw          PLUS, ULESS         //      plus u<
1354+ 77AC A9 63 07 00                  dw          LIT, 7, QERROR      //      7 Cerror
1354+ 77B0 9E 70
1355+ 77B2              QStack_Endif:                                   // endif
1356+ 77B2 A3 69                        dw      EXIT                    // ;
1357+ 77B4
1358+ 77B4
# file closed: C:\Zx\CSpect\Projects\vForth15_INDIRECT/source/L1.asm
 111  77B4                              include "L2.asm"
# file opened: C:\Zx\CSpect\Projects\vForth15_INDIRECT/source/L2.asm
   1+ 77B4              //  ______________________________________________________________________
   2+ 77B4              //
   3+ 77B4              //  L2.asm
   4+ 77B4              //
   5+ 77B4              //  Level-2
   6+ 77B4              //  the Forth interpreter, vocabulary, cold/warm start and quit from Forth.
   7+ 77B4              //  ______________________________________________________________________
   8+ 77B4
   9+ 77B4
  10+ 77B4              //  ______________________________________________________________________
  11+ 77B4              //
  12+ 77B4              // interpret    --
  13+ 77B4              // This is the text interpreter.
  14+ 77B4              // It executes or compiles, depending on STATE, the text coming from
  15+ 77B4              // current input stream.
  16+ 77B4              // If the word search fails after parsing CONTEXT and CURRENT vocabulary,
  17+ 77B4              // the word is interpreted as numeric and converted, using current BASE,
  18+ 77B4              // leaving on top of stack a single or double precision number, depending
  19+ 77B4              // on the presence of a decimal point.
  20+ 77B4              // If the number conversion fails, the terminal is notified with ? followed
  21+ 77B4              // by the offending word.
  22+ 77B4                              Colon_Def INTERPRET, "INTERPRET", is_normal
  22+ 77B4             >                New_Def  INTERPRET, "INTERPRET", Enter_Ptr, is_normal ; ok
  22+ 77B4             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  22+ 77B4             >
  22+ 77B4             >                // dummy db directives used to calculate length of namec
  22+ 77B4 49 4E 54 45 >                db      "INTERPRET"
  22+ 77B8 52 50 52 45 >
  22+ 77BC 54          >
  22+ 77BD             >len_NFA         defl    $ - temp_NFA
  22+ 77BD             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  22+ 77B4             >
  22+ 77B4 89          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  22+ 77B5 49 4E 54 45 >                db      "INTERPRET"               // name string in 7-bit ascii, but
  22+ 77B9 52 50 52 45 >
  22+ 77BD 54          >
  22+ 77BE             >                org     $-1                 // alter last byte of Name just above to set
  22+ 77BD D4          >                db      {b $} | END_BIT     // msb as name end
  22+ 77BE             >
  22+ 77BE 7B 77       >                dw      last_NFA            // Link to previous definition Name
  22+ 77C0             >INTERPRET:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
  22+ 77C0 7D 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
  22+ 77C2             >                else
  22+ 77C2 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
  22+ 77C2             >                endif           ; ok        // for other definitions it "points" the correct handler
  22+ 77C2             >                // Use of "; ok" to suppress "warning[fwdref]"
  22+ 77C2             >
  22+ 77C2             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  23+ 77C2
  24+ 77C2              Interpret_Begin:                                        // begin
  25+ 77C2 D2 75                        dw          LFIND                       //      -find
  26+ 77C4                                                                      //      if
  27+ 77C4 2C 64                        dw          ZBRANCH
  28+ 77C6 1A 00                        dw          Interpret_Else_1 - $
  29+ 77C8 45 6E 9B 6B                  dw              STATE, FETCH, LESS      //          state @ <
  29+ 77CC 5B 6F
  30+ 77CE                                                                      //          if
  31+ 77CE 2C 64                        dw              ZBRANCH
  32+ 77D0 08 00                        dw              Interpret_Else_2 - $
  33+ 77D2 4E 71                        dw                  COMPILE_XT          //              compile,
  34+ 77D4                                                                      //          else
  35+ 77D4 15 64                        dw              BRANCH
  36+ 77D6 06 00                        dw              Interpret_Endif_2 - $
  37+ 77D8              Interpret_Else_2:
  38+ 77D8 BE 63 A5 6C                  dw                  EXECUTE, NOOP       //              execute nooop
  39+ 77DC              Interpret_Endif_2:                                      //          endif
  40+ 77DC                                                                      //      else
  41+ 77DC 15 64                        dw          BRANCH
  42+ 77DE 1A 00                        dw          Interpret_Endif_1 - $
  43+ 77E0              Interpret_Else_1:
  44+ 77E0 D9 6E 8C 75                  dw              HERE, NUMBER            //          here number
  45+ 77E4 58 6E 9B 6B                  dw              DPL, FETCH, ONE_PLUS    //          dpl @ 1+
  45+ 77E8 49 6A
  46+ 77EA                                                                      //          if
  47+ 77EA 2C 64                        dw              ZBRANCH
  48+ 77EC 08 00                        dw              Interpret_Else_3 - $
  49+ 77EE              //              dw                  NMODE, FETCH        //              nmode @
  50+ 77EE              //                                                      //              if
  51+ 77EE              //              dw                  ZBRANCH
  52+ 77EE              //              dw                  Interpret_Endif_4 - $
  53+ 77EE              //              dw                      ONE, ZERO       //                  1 0
  54+ 77EE              //              dw                      TWO_DROP        //                  2drop
  55+ 77EE              //Interpret_Endif_4:                                      //              endif
  56+ 77EE 1A 77                        dw                  DLITERAL            //              [compile] dliteral
  57+ 77F0                                                                      //          else
  58+ 77F0 15 64                        dw              BRANCH
  59+ 77F2 06 00                        dw              Interpret_Endif_3 - $
  60+ 77F4              Interpret_Else_3:
  61+ 77F4 D3 6A                        dw                  DROP                //              drop
  62+ 77F6 FD 76                        dw                  LITERAL             //              [compile]  literal
  63+ 77F8              Interpret_Endif_3:                                      //          endif
  64+ 77F8              Interpret_Endif_1:                                      //      endif
  65+ 77F8 84 77                        dw          QSTACK                      //      ?stack
  66+ 77FA              //              dw          QTERMINAL                   //      ?terminal
  67+ 77FA              //                                                      //      if
  68+ 77FA              //              dw          ZBRANCH
  69+ 77FA              //              dw          Interpret_Endif_5 - $
  70+ 77FA              //              dw              CABORT                  //          (abort)
  71+ 77FA              //Interpret_Endif_5:                                      //      endif
  72+ 77FA 15 64                        dw      BRANCH
  73+ 77FC C6 FF                        dw      Interpret_Begin - $
  74+ 77FE A3 69                        dw      EXIT                            // ;
  75+ 7800
  76+ 7800              //  ______________________________________________________________________
  77+ 7800              //
  78+ 7800              // vocabulary   -- cccc     ( compile time )
  79+ 7800              // Defining word used in the form   VOCABULARY cccc
  80+ 7800              // creates the word  cccc  that gives the name to the vocabulary.
  81+ 7800              // Giving  cccc  makes the vocabulary CONTEXT so its words are executed first
  82+ 7800              // Giving  cccc DEFINITIONS makes  the vocabulary  CURRENT
  83+ 7800              // so new definitions can be inserted in that vocabulary.
  84+ 7800                              Colon_Def VOCABULARY, "VOCABULARY", is_normal
  84+ 7800             >                New_Def  VOCABULARY, "VOCABULARY", Enter_Ptr, is_normal ; ok
  84+ 7800             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  84+ 7800             >
  84+ 7800             >                // dummy db directives used to calculate length of namec
  84+ 7800 56 4F 43 41 >                db      "VOCABULARY"
  84+ 7804 42 55 4C 41 >
  84+ 7808 52 59       >
  84+ 780A             >len_NFA         defl    $ - temp_NFA
  84+ 780A             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  84+ 7800             >
  84+ 7800 8A          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  84+ 7801 56 4F 43 41 >                db      "VOCABULARY"               // name string in 7-bit ascii, but
  84+ 7805 42 55 4C 41 >
  84+ 7809 52 59       >
  84+ 780B             >                org     $-1                 // alter last byte of Name just above to set
  84+ 780A D9          >                db      {b $} | END_BIT     // msb as name end
  84+ 780B             >
  84+ 780B B4 77       >                dw      last_NFA            // Link to previous definition Name
  84+ 780D             >VOCABULARY:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
  84+ 780D 7D 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
  84+ 780F             >                else
  84+ 780F ~           >                dw      $ + 2   ; ok        // is pointed by CFA
  84+ 780F             >                endif           ; ok        // for other definitions it "points" the correct handler
  84+ 780F             >                // Use of "; ok" to suppress "warning[fwdref]"
  84+ 780F             >
  84+ 780F             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  85+ 780F
  86+ 780F 01 72                        dw      CBUILDS
  87+ 7811
  88+ 7811 A9 63 81 A0                  dw      LIT, $A081, COMMA       // $81A0 ,
  88+ 7815 F5 6E
  89+ 7817 3A 6E 9B 6B                  dw      CURRENT, FETCH          // current @
  90+ 781B 7B 6A F5 6E                  dw      CELL_MINUS, COMMA       // cell- ,
  91+ 781F D9 6E                        dw      HERE                    // here
  92+ 7821 C6 6D 9B 6B                  dw      VOC_LINK, FETCH, COMMA  // voc-link @ ,
  92+ 7825 F5 6E
  93+ 7827 C6 6D A8 6B                  dw      VOC_LINK, STORE         // voc-link !
  94+ 782B
  95+ 782B 11 72                        dw      DOES_TO                 // does>
  96+ 782D              Vocabulary_Does:
  97+ 782D 71 6A                        dw      CELL_PLUS               // cell+
  98+ 782F 2D 6E A8 6B                  dw      CONTEXT, STORE          // context !
  99+ 7833 A3 69                        dw      EXIT                    // ;
 100+ 7835
 101+ 7835              //  ______________________________________________________________________
 102+ 7835              //
 103+ 7835              // forth        --
 104+ 7835              // Name of the first vocabulary.
 105+ 7835              // It makes FORTH the CONTEXT vocabulary.
 106+ 7835              // Until new user vocabulary are defined, new colon-definitions becomes
 107+ 7835              // part of FORTH. It is immediate, so it will executed during the creation
 108+ 7835              // of a colon definition to be able to select the vocabulary.
 109+ 7835
 110+ 7835                              New_Def FORTH, "FORTH", Does_Ptr, is_immediate
 110+ 7835             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 110+ 7835             >
 110+ 7835             >                // dummy db directives used to calculate length of namec
 110+ 7835 46 4F 52 54 >                db      "FORTH"
 110+ 7839 48          >
 110+ 783A             >len_NFA         defl    $ - temp_NFA
 110+ 783A             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 110+ 7835             >
 110+ 7835 C5          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 110+ 7836 46 4F 52 54 >                db      "FORTH"               // name string in 7-bit ascii, but
 110+ 783A 48          >
 110+ 783B             >                org     $-1                 // alter last byte of Name just above to set
 110+ 783A C8          >                db      {b $} | END_BIT     // msb as name end
 110+ 783B             >
 110+ 783B 00 78       >                dw      last_NFA            // Link to previous definition Name
 110+ 783D             >FORTH:          if Does_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 110+ 783D 1D 72       >                dw      Does_Ptr ; ok        // for primitive definitions  actual code
 110+ 783F             >                else
 110+ 783F ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 110+ 783F             >                endif           ; ok        // for other definitions it "points" the correct handler
 110+ 783F             >                // Use of "; ok" to suppress "warning[fwdref]"
 110+ 783F             >
 110+ 783F             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 111+ 783F 2D 78                        dw      Vocabulary_Does
 112+ 7841 81 A0                        db      $81, $A0
 113+ 7843              Forth_Latest_Ptr:
 114+ 7843 18 87                        dw      Latest_Definition // Fence_Word // Latest_Definition // Here_Dictionary
 115+ 7845              Voclink_Ptr:
 116+ 7845 00 00                        dw      0
 117+ 7847              // Any new vocabulary is structured as follow:
 118+ 7847              // PFA+0 points to DOES> part of VOCABULARY to perform CELL+ CONTEXT !
 119+ 7847              // PFA+2 is 81,A0 i.e. a null-word used as LATEST in the new vocabulary
 120+ 7847              // PFA+4 always contains the LATEST word of this VOCABULARY.
 121+ 7847              //       at creations it points to the null-word of its parent vocabulary
 122+ 7847              //       that is normally FORTH, For example ASSEMBLER points FORTH's null-word
 123+ 7847              // PFA+6 is the pointer that builds up the vocabulary linked list.
 124+ 7847              //       FORTH has 0 here to signal the end of the list and user's variable
 125+ 7847              //       VOC-LINK points to PFA+6 of the newest vocabulary created.
 126+ 7847              //       While FORTH is the only vocabulary, VOC-LINK points to FORTH's PFA+6
 127+ 7847              //       When ASSEMBLER is created, its PFA+6 points to FORTH's PFA+6, and so on
 128+ 7847
 129+ 7847              //  ______________________________________________________________________
 130+ 7847              //
 131+ 7847              // definitions  --
 132+ 7847              // Used in the form  cccc DEFINITIONS
 133+ 7847              // set the CURRENT vocabulary at CONTEXT to insert new definitions in
 134+ 7847              // vocabulary cccc.
 135+ 7847                              Colon_Def DEFINITIONS, "DEFINITIONS", is_normal
 135+ 7847             >                New_Def  DEFINITIONS, "DEFINITIONS", Enter_Ptr, is_normal ; ok
 135+ 7847             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 135+ 7847             >
 135+ 7847             >                // dummy db directives used to calculate length of namec
 135+ 7847 44 45 46 49 >                db      "DEFINITIONS"
 135+ 784B 4E 49 54 49 >
 135+ 784F 4F 4E 53    >
 135+ 7852             >len_NFA         defl    $ - temp_NFA
 135+ 7852             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 135+ 7847             >
 135+ 7847 8B          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 135+ 7848 44 45 46 49 >                db      "DEFINITIONS"               // name string in 7-bit ascii, but
 135+ 784C 4E 49 54 49 >
 135+ 7850 4F 4E 53    >
 135+ 7853             >                org     $-1                 // alter last byte of Name just above to set
 135+ 7852 D3          >                db      {b $} | END_BIT     // msb as name end
 135+ 7853             >
 135+ 7853 35 78       >                dw      last_NFA            // Link to previous definition Name
 135+ 7855             >DEFINITIONS:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 135+ 7855 7D 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 135+ 7857             >                else
 135+ 7857 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 135+ 7857             >                endif           ; ok        // for other definitions it "points" the correct handler
 135+ 7857             >                // Use of "; ok" to suppress "warning[fwdref]"
 135+ 7857             >
 135+ 7857             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 136+ 7857 2D 6E 9B 6B                  dw      CONTEXT, FETCH          // context @
 137+ 785B 3A 6E A8 6B                  dw      CURRENT, STORE          // current !
 138+ 785F A3 69                        dw      EXIT                    // ;
 139+ 7861
 140+ 7861              //  ______________________________________________________________________
 141+ 7861              //
 142+ 7861              // (            -- cccc )
 143+ 7861              // the following text is interpreted as a comment until a closing )
 144+ 7861                              Colon_Def COMMENT_BRAKET, "(", is_immediate
 144+ 7861             >                New_Def  COMMENT_BRAKET, "(", Enter_Ptr, is_immediate ; ok
 144+ 7861             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 144+ 7861             >
 144+ 7861             >                // dummy db directives used to calculate length of namec
 144+ 7861 28          >                db      "("
 144+ 7862             >len_NFA         defl    $ - temp_NFA
 144+ 7862             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 144+ 7861             >
 144+ 7861 C1          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 144+ 7862 28          >                db      "("               // name string in 7-bit ascii, but
 144+ 7863             >                org     $-1                 // alter last byte of Name just above to set
 144+ 7862 A8          >                db      {b $} | END_BIT     // msb as name end
 144+ 7863             >
 144+ 7863 47 78       >                dw      last_NFA            // Link to previous definition Name
 144+ 7865             >COMMENT_BRAKET:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 144+ 7865 7D 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 144+ 7867             >                else
 144+ 7867 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 144+ 7867             >                endif           ; ok        // for other definitions it "points" the correct handler
 144+ 7867             >                // Use of "; ok" to suppress "warning[fwdref]"
 144+ 7867             >
 144+ 7867             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 145+ 7867 A9 63 29 00                  dw      LIT, ")"                // [char] )
 146+ 786B 20 74 D3 6A                  dw      WORD, DROP              // word drop
 147+ 786F A3 69                        dw      EXIT                    // ;
 148+ 7871
 149+ 7871              //  ______________________________________________________________________
 150+ 7871              //
 151+ 7871              // quit         --
 152+ 7871              // \ Erase the return-stack, stop any compilation and give controlo to the console. No message is issued.
 153+ 7871                              Colon_Def QUIT, "QUIT", is_normal
 153+ 7871             >                New_Def  QUIT, "QUIT", Enter_Ptr, is_normal ; ok
 153+ 7871             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 153+ 7871             >
 153+ 7871             >                // dummy db directives used to calculate length of namec
 153+ 7871 51 55 49 54 >                db      "QUIT"
 153+ 7875             >len_NFA         defl    $ - temp_NFA
 153+ 7875             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 153+ 7871             >
 153+ 7871 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 153+ 7872 51 55 49 54 >                db      "QUIT"               // name string in 7-bit ascii, but
 153+ 7876             >                org     $-1                 // alter last byte of Name just above to set
 153+ 7875 D4          >                db      {b $} | END_BIT     // msb as name end
 153+ 7876             >
 153+ 7876 61 78       >                dw      last_NFA            // Link to previous definition Name
 153+ 7878             >QUIT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 153+ 7878 7D 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 153+ 787A             >                else
 153+ 787A ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 153+ 787A             >                endif           ; ok        // for other definitions it "points" the correct handler
 153+ 787A             >                // Use of "; ok" to suppress "warning[fwdref]"
 153+ 787A             >
 153+ 787A             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 154+ 787A
 155+ 787A B0 6E 9B 6B                  dw      SOURCE_ID, FETCH        // source-id @
 156+ 787E CB 67 D3 6A                  dw      F_CLOSE, DROP           // f_close drop
 157+ 7882 FA 6C B0 6E                  dw      ZERO, SOURCE_ID, STORE  // 0 source-id !
 157+ 7886 A8 6B
 158+ 7888 FA 6C F9 6D                  dw      ZERO, BLK, STORE        // 0 blk !
 158+ 788C A8 6B
 159+ 788E 5A 71                        dw      SQUARED_OPEN            // [compile] [
 160+ 7890                                                              // begin
 161+ 7890              Quit_Begin:
 162+ 7890 84 6D 9B 6B                  dw      R0, FETCH, RPSTORE      //      r0 @ rp!
 162+ 7894 94 69
 163+ 7896 2A 66                        dw      CR                      //      cr
 164+ 7898 A1 73                        dw      QUERY                   //      query
 165+ 789A              Next_Breakpoint_1:
 166+ 789A C0 77                        dw      INTERPRET               //      interpret
 167+ 789C 45 6E 9B 6B                  dw      STATE, FETCH, ZEQUAL    //      state @ 0=
 167+ 78A0 E5 69
 168+ 78A2                                                              //      if
 169+ 78A2 2C 64                        dw      ZBRANCH
 170+ 78A4 07 00                        dw      Quit_Endif - $
 171+ 78A6 6F 74                        dw          C_DOT_QUOTE
 172+ 78A8 02 6F 6B                     db          2, "ok"             //          .( ok)
 173+ 78AB              Quit_Endif:                                     //      else
 174+ 78AB                                                              // again
 175+ 78AB 15 64                        dw      BRANCH
 176+ 78AD E3 FF                        dw      Quit_Begin - $
 177+ 78AF A3 69                        dw      EXIT                    // ;
 178+ 78B1
 179+ 78B1              //  ______________________________________________________________________
 180+ 78B1              //
 181+ 78B1              // abort        --
 182+ 78B1                              Colon_Def ABORT, "ABORT", is_normal
 182+ 78B1             >                New_Def  ABORT, "ABORT", Enter_Ptr, is_normal ; ok
 182+ 78B1             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 182+ 78B1             >
 182+ 78B1             >                // dummy db directives used to calculate length of namec
 182+ 78B1 41 42 4F 52 >                db      "ABORT"
 182+ 78B5 54          >
 182+ 78B6             >len_NFA         defl    $ - temp_NFA
 182+ 78B6             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 182+ 78B1             >
 182+ 78B1 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 182+ 78B2 41 42 4F 52 >                db      "ABORT"               // name string in 7-bit ascii, but
 182+ 78B6 54          >
 182+ 78B7             >                org     $-1                 // alter last byte of Name just above to set
 182+ 78B6 D4          >                db      {b $} | END_BIT     // msb as name end
 182+ 78B7             >
 182+ 78B7 71 78       >                dw      last_NFA            // Link to previous definition Name
 182+ 78B9             >ABORT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 182+ 78B9 7D 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 182+ 78BB             >                else
 182+ 78BB ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 182+ 78BB             >                endif           ; ok        // for other definitions it "points" the correct handler
 182+ 78BB             >                // Use of "; ok" to suppress "warning[fwdref]"
 182+ 78BB             >
 182+ 78BB             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 183+ 78BB 7C 6D 9B 6B                  dw      S0, FETCH, SPSTORE      // s0 @ sp!
 183+ 78BF 7A 69
 184+ 78C1 BD 71                        dw      DECIMAL                 // decimal
 185+ 78C3 3D 78                        dw      FORTH                   // [compile] forth
 186+ 78C5 55 78                        dw      DEFINITIONS             // definitions
 187+ 78C7              Autoexec_Ptr:
 188+ 78C7 7E 85                        dw      AUTOEXEC                // autoexec, patched to noop
 189+ 78C9 78 78                        dw      QUIT                    // quit
 190+ 78CB A3 69                        dw      EXIT                    // ;
 191+ 78CD
 192+ 78CD              //  ______________________________________________________________________
 193+ 78CD              //
 194+ 78CD              // warm         --
 195+ 78CD                              Colon_Def WARM, "WARM", is_normal
 195+ 78CD             >                New_Def  WARM, "WARM", Enter_Ptr, is_normal ; ok
 195+ 78CD             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 195+ 78CD             >
 195+ 78CD             >                // dummy db directives used to calculate length of namec
 195+ 78CD 57 41 52 4D >                db      "WARM"
 195+ 78D1             >len_NFA         defl    $ - temp_NFA
 195+ 78D1             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 195+ 78CD             >
 195+ 78CD 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 195+ 78CE 57 41 52 4D >                db      "WARM"               // name string in 7-bit ascii, but
 195+ 78D2             >                org     $-1                 // alter last byte of Name just above to set
 195+ 78D1 CD          >                db      {b $} | END_BIT     // msb as name end
 195+ 78D2             >
 195+ 78D2 B1 78       >                dw      last_NFA            // Link to previous definition Name
 195+ 78D4             >WARM:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 195+ 78D4 7D 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 195+ 78D6             >                else
 195+ 78D6 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 195+ 78D6             >                endif           ; ok        // for other definitions it "points" the correct handler
 195+ 78D6             >                // Use of "; ok" to suppress "warning[fwdref]"
 195+ 78D6             >
 195+ 78D6             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 196+ 78D6 53 7C                        dw      BLK_INIT                // blk-init
 197+ 78D8 2F 84                        dw      SPLASH                  // splash
 198+ 78DA A9 63 07 00                  dw      LIT, 7, EMIT            // 7 emit
 198+ 78DE C8 6F
 199+ 78E0 B9 78                        dw      ABORT                   // abort
 200+ 78E2 A3 69                        dw      EXIT                    // exit
 201+ 78E4
 202+ 78E4              //  ______________________________________________________________________
 203+ 78E4              //
 204+ 78E4              // cold         --
 205+ 78E4                              Colon_Def COLD, "COLD", is_normal
 205+ 78E4             >                New_Def  COLD, "COLD", Enter_Ptr, is_normal ; ok
 205+ 78E4             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 205+ 78E4             >
 205+ 78E4             >                // dummy db directives used to calculate length of namec
 205+ 78E4 43 4F 4C 44 >                db      "COLD"
 205+ 78E8             >len_NFA         defl    $ - temp_NFA
 205+ 78E8             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 205+ 78E4             >
 205+ 78E4 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 205+ 78E5 43 4F 4C 44 >                db      "COLD"               // name string in 7-bit ascii, but
 205+ 78E9             >                org     $-1                 // alter last byte of Name just above to set
 205+ 78E8 C4          >                db      {b $} | END_BIT     // msb as name end
 205+ 78E9             >
 205+ 78E9 CD 78       >                dw      last_NFA            // Link to previous definition Name
 205+ 78EB             >COLD:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 205+ 78EB 7D 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 205+ 78ED             >                else
 205+ 78ED ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 205+ 78ED             >                endif           ; ok        // for other definitions it "points" the correct handler
 205+ 78ED             >                // Use of "; ok" to suppress "warning[fwdref]"
 205+ 78ED             >
 205+ 78ED             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 206+ 78ED A9 63 78 63                  dw      LIT, S0_origin          // [ hex $12 +origin ] Literal
 207+ 78F1 A9 63 94 63                  dw      LIT, USER_Pointer       // [ hex $3E +origin ] literal
 208+ 78F5 9B 6B                        dw      FETCH                   // @
 209+ 78F7 A9 63 06 00                  dw      LIT, 6, PLUS            // 6 +
 209+ 78FB 28 6A
 210+ 78FD A9 63 14 00                  dw      LIT, 20                 // 20
 211+ 7901 96 68                        dw      CMOVE
 212+ 7903 A9 63 72 63                  dw      LIT, Latest_origin      // [ hex 0C +origin ] literal
 213+ 7907 9B 6B                        dw      FETCH                   // @
 214+ 7909 A9 63 43 78                  dw      LIT, Forth_Latest_Ptr   // [ ' forth >body 4 + ] Literal
 215+ 790D A8 6B                        dw      STORE                   // !
 216+ 790F FA 6C F0 6D                  dw      ZERO, NMODE, STORE      // 0 nmode !
 216+ 7913 A8 6B
 217+ 7915 D1 6D 9B 6B                  dw      FIRST, FETCH, DUP       // first @ dup
 217+ 7919 08 6B
 218+ 791B 84 6E A8 6B                  dw      USE, STORE              // use !
 219+ 791F 8E 6E A8 6B                  dw      PREV, STORE             // prev !
 220+ 7923 A9 63 04 00                  dw      LIT, 4, PLACE, STORE    // 4 place !
 220+ 7927 A1 6E A8 6B
 221+ 792B              //              dw      LIT, 8
 222+ 792B              //              dw      LIT, FLAGS2, CSTORE     // 8 5C6A c!
 223+ 792B 0A 6D CF 6E                  dw      TWO, HP, STORE          // 2 hp !
 223+ 792F A8 6B
 224+ 7931 D4 78        Warm_Start:     dw      WARM
 225+ 7933 EB 78        Cold_Start:     dw      COLD
 226+ 7935 A3 69                        dw      EXIT
 227+ 7937
 228+ 7937              //  ______________________________________________________________________
 229+ 7937              WarmRoutine:
 230+ 7937              ColdRoutine:
 231+ 7937 DD 21 98 63                  ld      ix, Next_Ptr
 232+ 793B D9                           exx
 233+ 793C E5                           push    hl
 234+ 793D D9                           exx
 235+ 793E
 236+ 793E ED 73 6E 63                  ld      (SP_Basic), sp
 237+ 7942 ED 7B 78 63                  ld      sp, (S0_origin)
 238+ 7946              //              nop
 239+ 7946 2A 7A 63                     ld      hl, (R0_origin)
 240+ 7949              //              nop
 241+ 7949                              ldrphl
 241+ 7949 22 96 63    >                ld      (RP_Pointer),hl
 242+ 794C 01 31 79                     ld      bc, Warm_Start
 243+ 794F 38 02                        jr      c, Warm_Skip
 244+ 7951 03                           inc     bc
 245+ 7952 03                           inc     bc
 246+ 7953              Warm_Skip:
 247+ 7953                              next
 247+ 7953 DD E9       >                jp      (ix)
 248+ 7955
 249+ 7955              //  ______________________________________________________________________
 250+ 7955              //
 251+ 7955              // basic        --
 252+ 7955                              New_Def BASIC, "BASIC", is_code, is_normal
 252+ 7955             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 252+ 7955             >
 252+ 7955             >                // dummy db directives used to calculate length of namec
 252+ 7955 42 41 53 49 >                db      "BASIC"
 252+ 7959 43          >
 252+ 795A             >len_NFA         defl    $ - temp_NFA
 252+ 795A             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 252+ 7955             >
 252+ 7955 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 252+ 7956 42 41 53 49 >                db      "BASIC"               // name string in 7-bit ascii, but
 252+ 795A 43          >
 252+ 795B             >                org     $-1                 // alter last byte of Name just above to set
 252+ 795A C3          >                db      {b $} | END_BIT     // msb as name end
 252+ 795B             >
 252+ 795B E4 78       >                dw      last_NFA            // Link to previous definition Name
 252+ 795D             >BASIC:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 252+ 795D ~           >                dw      runcode ; ok        // for primitive definitions  actual code
 252+ 795D             >                else
 252+ 795D 5F 79       >                dw      $ + 2   ; ok        // is pointed by CFA
 252+ 795F             >                endif           ; ok        // for other definitions it "points" the correct handler
 252+ 795F             >                // Use of "; ok" to suppress "warning[fwdref]"
 252+ 795F             >
 252+ 795F             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 253+ 795F C1                           pop     bc
 254+ 7960 21 00 00                     ld      hl, 0
 255+ 7963 39                           add     hl, sp
 256+ 7964 ED 7B 6E 63                  ld      sp, (SP_Basic)
 257+ 7968              //              nop
 258+ 7968 22 6E 63                     ld      (SP_Basic),hl
 259+ 796B D9                           exx
 260+ 796C E1                           pop     hl
 261+ 796D D9                           exx
 262+ 796E C9                           ret     // to Basic
 263+ 796F
 264+ 796F              //  ______________________________________________________________________
 265+ 796F              //
 266+ 796F              // +-           n1 n2 -- n3
 267+ 796F              // leaves n1 with the sign of n2 as n3.
 268+ 796F                              Colon_Def PLUS_MINUS, "+-", is_normal
 268+ 796F             >                New_Def  PLUS_MINUS, "+-", Enter_Ptr, is_normal ; ok
 268+ 796F             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 268+ 796F             >
 268+ 796F             >                // dummy db directives used to calculate length of namec
 268+ 796F 2B 2D       >                db      "+-"
 268+ 7971             >len_NFA         defl    $ - temp_NFA
 268+ 7971             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 268+ 796F             >
 268+ 796F 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 268+ 7970 2B 2D       >                db      "+-"               // name string in 7-bit ascii, but
 268+ 7972             >                org     $-1                 // alter last byte of Name just above to set
 268+ 7971 AD          >                db      {b $} | END_BIT     // msb as name end
 268+ 7972             >
 268+ 7972 55 79       >                dw      last_NFA            // Link to previous definition Name
 268+ 7974             >PLUS_MINUS:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 268+ 7974 7D 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 268+ 7976             >                else
 268+ 7976 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 268+ 7976             >                endif           ; ok        // for other definitions it "points" the correct handler
 268+ 7976             >                // Use of "; ok" to suppress "warning[fwdref]"
 268+ 7976             >
 268+ 7976             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 269+ 7976 00 6A                        dw      ZLESS                   // 0<
 270+ 7978                                                              // if
 271+ 7978 2C 64                        dw      ZBRANCH
 272+ 797A 04 00                        dw      Plus_Minus_Endif - $
 273+ 797C 93 6A                        dw          MINUS               //      minus
 274+ 797E              Plus_Minus_Endif:                               // endif
 275+ 797E A3 69                        dw      EXIT                    // ;
 276+ 7980
 277+ 7980              //  ______________________________________________________________________
 278+ 7980              //
 279+ 7980              // d+-          d1 n -- d2
 280+ 7980              // leaves d1 with the sign of n as d2.
 281+ 7980                              Colon_Def DPLUS_MINUS, "D+-", is_normal
 281+ 7980             >                New_Def  DPLUS_MINUS, "D+-", Enter_Ptr, is_normal ; ok
 281+ 7980             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 281+ 7980             >
 281+ 7980             >                // dummy db directives used to calculate length of namec
 281+ 7980 44 2B 2D    >                db      "D+-"
 281+ 7983             >len_NFA         defl    $ - temp_NFA
 281+ 7983             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 281+ 7980             >
 281+ 7980 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 281+ 7981 44 2B 2D    >                db      "D+-"               // name string in 7-bit ascii, but
 281+ 7984             >                org     $-1                 // alter last byte of Name just above to set
 281+ 7983 AD          >                db      {b $} | END_BIT     // msb as name end
 281+ 7984             >
 281+ 7984 6F 79       >                dw      last_NFA            // Link to previous definition Name
 281+ 7986             >DPLUS_MINUS:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 281+ 7986 7D 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 281+ 7988             >                else
 281+ 7988 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 281+ 7988             >                endif           ; ok        // for other definitions it "points" the correct handler
 281+ 7988             >                // Use of "; ok" to suppress "warning[fwdref]"
 281+ 7988             >
 281+ 7988             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 282+ 7988 00 6A                        dw      ZLESS                   // 0<
 283+ 798A                                                              // if
 284+ 798A 2C 64                        dw      ZBRANCH
 285+ 798C 04 00                        dw      DPlus_Minus_Endif - $
 286+ 798E A9 6A                        dw          DMINUS              //      dminus
 287+ 7990              DPlus_Minus_Endif:                              // endif
 288+ 7990 A3 69                        dw      EXIT                    // ;
 289+ 7992
 290+ 7992              //  ______________________________________________________________________
 291+ 7992              //
 292+ 7992              // abs          n1 -- n2
 293+ 7992                              Colon_Def ABS_OP, "ABS", is_normal
 293+ 7992             >                New_Def  ABS_OP, "ABS", Enter_Ptr, is_normal ; ok
 293+ 7992             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 293+ 7992             >
 293+ 7992             >                // dummy db directives used to calculate length of namec
 293+ 7992 41 42 53    >                db      "ABS"
 293+ 7995             >len_NFA         defl    $ - temp_NFA
 293+ 7995             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 293+ 7992             >
 293+ 7992 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 293+ 7993 41 42 53    >                db      "ABS"               // name string in 7-bit ascii, but
 293+ 7996             >                org     $-1                 // alter last byte of Name just above to set
 293+ 7995 D3          >                db      {b $} | END_BIT     // msb as name end
 293+ 7996             >
 293+ 7996 80 79       >                dw      last_NFA            // Link to previous definition Name
 293+ 7998             >ABS_OP:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 293+ 7998 7D 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 293+ 799A             >                else
 293+ 799A ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 293+ 799A             >                endif           ; ok        // for other definitions it "points" the correct handler
 293+ 799A             >                // Use of "; ok" to suppress "warning[fwdref]"
 293+ 799A             >
 293+ 799A             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 294+ 799A 08 6B                        dw      DUP                     // dup
 295+ 799C 74 79                        dw      PLUS_MINUS              // +-
 296+ 799E A3 69                        dw      EXIT                    // ;
 297+ 79A0
 298+ 79A0              //  ______________________________________________________________________
 299+ 79A0              //
 300+ 79A0              // dabs         d1 -- d2
 301+ 79A0                              Colon_Def DABS, "DABS", is_normal
 301+ 79A0             >                New_Def  DABS, "DABS", Enter_Ptr, is_normal ; ok
 301+ 79A0             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 301+ 79A0             >
 301+ 79A0             >                // dummy db directives used to calculate length of namec
 301+ 79A0 44 41 42 53 >                db      "DABS"
 301+ 79A4             >len_NFA         defl    $ - temp_NFA
 301+ 79A4             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 301+ 79A0             >
 301+ 79A0 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 301+ 79A1 44 41 42 53 >                db      "DABS"               // name string in 7-bit ascii, but
 301+ 79A5             >                org     $-1                 // alter last byte of Name just above to set
 301+ 79A4 D3          >                db      {b $} | END_BIT     // msb as name end
 301+ 79A5             >
 301+ 79A5 92 79       >                dw      last_NFA            // Link to previous definition Name
 301+ 79A7             >DABS:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 301+ 79A7 7D 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 301+ 79A9             >                else
 301+ 79A9 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 301+ 79A9             >                endif           ; ok        // for other definitions it "points" the correct handler
 301+ 79A9             >                // Use of "; ok" to suppress "warning[fwdref]"
 301+ 79A9             >
 301+ 79A9             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 302+ 79A9 08 6B                        dw      DUP                     // dup
 303+ 79AB 86 79                        dw      DPLUS_MINUS             // d+-
 304+ 79AD A3 69                        dw      EXIT                    // ;
 305+ 79AF
 306+ 79AF              //  ______________________________________________________________________
 307+ 79AF              //
 308+ 79AF              // m*           n1 n2 -- d
 309+ 79AF              // multiply two integer giving a double
 310+ 79AF                              Colon_Def MMUL, "M*", is_normal
 310+ 79AF             >                New_Def  MMUL, "M*", Enter_Ptr, is_normal ; ok
 310+ 79AF             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 310+ 79AF             >
 310+ 79AF             >                // dummy db directives used to calculate length of namec
 310+ 79AF 4D 2A       >                db      "M*"
 310+ 79B1             >len_NFA         defl    $ - temp_NFA
 310+ 79B1             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 310+ 79AF             >
 310+ 79AF 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 310+ 79B0 4D 2A       >                db      "M*"               // name string in 7-bit ascii, but
 310+ 79B2             >                org     $-1                 // alter last byte of Name just above to set
 310+ 79B1 AA          >                db      {b $} | END_BIT     // msb as name end
 310+ 79B2             >
 310+ 79B2 A0 79       >                dw      last_NFA            // Link to previous definition Name
 310+ 79B4             >MMUL:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 310+ 79B4 7D 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 310+ 79B6             >                else
 310+ 79B6 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 310+ 79B6             >                endif           ; ok        // for other definitions it "points" the correct handler
 310+ 79B6             >                // Use of "; ok" to suppress "warning[fwdref]"
 310+ 79B6             >
 310+ 79B6             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 311+ 79B6 69 6B 58 69                  dw      TWO_DUP, XOR_OP, TO_R   // 2dup xor >r
 311+ 79BA B6 69
 312+ 79BC 98 79 FB 6A                  dw      ABS_OP, SWAP            // abs swap
 313+ 79C0 98 79 C9 68                  dw      ABS_OP, UM_MUL          // abs um*
 314+ 79C4 CA 69 86 79                  dw      R_TO, DPLUS_MINUS       // r> d+-
 315+ 79C8 A3 69                        dw      EXIT                    // ;
 316+ 79CA
 317+ 79CA              //  ______________________________________________________________________
 318+ 79CA              //
 319+ 79CA              // sm/rem       d n -- q r
 320+ 79CA              // Symmetric division: divides a double into n giving quotient q and remainder r
 321+ 79CA              // the remainder has the sign of d.
 322+ 79CA                              Colon_Def SMDIVM, "SM/REM", is_normal
 322+ 79CA             >                New_Def  SMDIVM, "SM/REM", Enter_Ptr, is_normal ; ok
 322+ 79CA             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 322+ 79CA             >
 322+ 79CA             >                // dummy db directives used to calculate length of namec
 322+ 79CA 53 4D 2F 52 >                db      "SM/REM"
 322+ 79CE 45 4D       >
 322+ 79D0             >len_NFA         defl    $ - temp_NFA
 322+ 79D0             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 322+ 79CA             >
 322+ 79CA 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 322+ 79CB 53 4D 2F 52 >                db      "SM/REM"               // name string in 7-bit ascii, but
 322+ 79CF 45 4D       >
 322+ 79D1             >                org     $-1                 // alter last byte of Name just above to set
 322+ 79D0 CD          >                db      {b $} | END_BIT     // msb as name end
 322+ 79D1             >
 322+ 79D1 AF 79       >                dw      last_NFA            // Link to previous definition Name
 322+ 79D3             >SMDIVM:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 322+ 79D3 7D 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 322+ 79D5             >                else
 322+ 79D5 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 322+ 79D5             >                endif           ; ok        // for other definitions it "points" the correct handler
 322+ 79D5             >                // Use of "; ok" to suppress "warning[fwdref]"
 322+ 79D5             >
 322+ 79D5             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 323+ 79D5 C3 6A B6 69                  dw      OVER, TO_R, TO_R        // over >r >r
 323+ 79D9 B6 69
 324+ 79DB A7 79 DE 69                  dw      DABS, R_OP, ABS_OP      // dabs r abs
 324+ 79DF 98 79
 325+ 79E1 FA 68                        dw      UMDIVMOD                // um/mod
 326+ 79E3 CA 69                        dw      R_TO                    // r>
 327+ 79E5 DE 69 58 69                  dw      R_OP, XOR_OP            // r xor
 328+ 79E9 74 79 FB 6A                  dw      PLUS_MINUS, SWAP        // +- swap
 329+ 79ED CA 69                        dw      R_TO                    // r>
 330+ 79EF 74 79 FB 6A                  dw      PLUS_MINUS, SWAP        // +- swap
 331+ 79F3 A3 69                        dw      EXIT                    // ;
 332+ 79F5
 333+ 79F5              //  ______________________________________________________________________
 334+ 79F5              //
 335+ 79F5              // fm/mod       d n -- q r
 336+ 79F5              // Floored division: divides a double into n giving quotient q and remainder r
 337+ 79F5              // the remainder has the sign of d.
 338+ 79F5                              Colon_Def FMDIVM, "FM/MOD", is_normal
 338+ 79F5             >                New_Def  FMDIVM, "FM/MOD", Enter_Ptr, is_normal ; ok
 338+ 79F5             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 338+ 79F5             >
 338+ 79F5             >                // dummy db directives used to calculate length of namec
 338+ 79F5 46 4D 2F 4D >                db      "FM/MOD"
 338+ 79F9 4F 44       >
 338+ 79FB             >len_NFA         defl    $ - temp_NFA
 338+ 79FB             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 338+ 79F5             >
 338+ 79F5 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 338+ 79F6 46 4D 2F 4D >                db      "FM/MOD"               // name string in 7-bit ascii, but
 338+ 79FA 4F 44       >
 338+ 79FC             >                org     $-1                 // alter last byte of Name just above to set
 338+ 79FB C4          >                db      {b $} | END_BIT     // msb as name end
 338+ 79FC             >
 338+ 79FC CA 79       >                dw      last_NFA            // Link to previous definition Name
 338+ 79FE             >FMDIVM:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 338+ 79FE 7D 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 338+ 7A00             >                else
 338+ 7A00 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 338+ 7A00             >                endif           ; ok        // for other definitions it "points" the correct handler
 338+ 7A00             >                // Use of "; ok" to suppress "warning[fwdref]"
 338+ 7A00             >
 338+ 7A00             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 339+ 7A00 08 6B B6 69                  dw      DUP, TO_R               // dup >r
 340+ 7A04 D3 79                        dw      SMDIVM
 341+ 7A06 C3 6A 08 6B                  dw      OVER, DUP
 342+ 7A0A E5 69 E5 69                  dw      ZEQUAL, ZEQUAL
 343+ 7A0E FB 6A 00 6A                  dw      SWAP, ZLESS
 344+ 7A12 DE 69 00 6A                  dw      R_OP, ZLESS
 345+ 7A16 58 69 33 69                  dw      XOR_OP, AND_OP
 346+ 7A1A 2C 64                        dw      ZBRANCH
 347+ 7A1C 10 00                        dw      Fm_Mod_Else - $
 348+ 7A1E 55 6A                        dw          ONE_SUBTRACT
 349+ 7A20 FB 6A CA 69                  dw          SWAP, R_TO
 350+ 7A24 28 6A FB 6A                  dw          PLUS, SWAP
 351+ 7A28 15 64                        dw      BRANCH
 352+ 7A2A 06 00                        dw      Fm_Mod_Endif - $
 353+ 7A2C              Fm_Mod_Else:
 354+ 7A2C CA 69 D3 6A                  dw          R_TO, DROP
 355+ 7A30              Fm_Mod_Endif:
 356+ 7A30 A3 69                        dw      EXIT
 357+ 7A32              //              dw      TWO_DUP                 // 2dup
 358+ 7A32              //              dw      XOR_OP, TO_R, TO_R      // xor >r >r
 359+ 7A32              //              dw      DABS, R_OP, ABS_OP      // dabs r abs
 360+ 7A32              //              dw      UMDIVMOD                // um/mod
 361+ 7A32              //              dw      SWAP                    // swap
 362+ 7A32              //              dw      II, ZLESS               // i'
 363+ 7A32              //              dw      ONE, AND_OP, PLUS       // 0< 1 and +
 364+ 7A32              //              dw      R_TO                    // r>
 365+ 7A32              //              dw      PLUS_MINUS, SWAP        // +- swap
 366+ 7A32              //              dw      R_OP                    // r@
 367+ 7A32              //              dw      ZLESS                   // i'
 368+ 7A32              //              dw      ONE, AND_OP, PLUS       // 0< 1 and +
 369+ 7A32              //              dw      R_TO                    // r>
 370+ 7A32              //              dw      PLUS_MINUS              // +- swap
 371+ 7A32              //              dw      EXIT                    // ;
 372+ 7A32
 373+ 7A32              //  ______________________________________________________________________
 374+ 7A32              //
 375+ 7A32              // m/mod        d n -- q r
 376+ 7A32              // multiply two integer giving a double
 377+ 7A32                              Colon_Def MDIVM, "M/MOD", is_normal
 377+ 7A32             >                New_Def  MDIVM, "M/MOD", Enter_Ptr, is_normal ; ok
 377+ 7A32             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 377+ 7A32             >
 377+ 7A32             >                // dummy db directives used to calculate length of namec
 377+ 7A32 4D 2F 4D 4F >                db      "M/MOD"
 377+ 7A36 44          >
 377+ 7A37             >len_NFA         defl    $ - temp_NFA
 377+ 7A37             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 377+ 7A32             >
 377+ 7A32 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 377+ 7A33 4D 2F 4D 4F >                db      "M/MOD"               // name string in 7-bit ascii, but
 377+ 7A37 44          >
 377+ 7A38             >                org     $-1                 // alter last byte of Name just above to set
 377+ 7A37 C4          >                db      {b $} | END_BIT     // msb as name end
 377+ 7A38             >
 377+ 7A38 F5 79       >                dw      last_NFA            // Link to previous definition Name
 377+ 7A3A             >MDIVM:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 377+ 7A3A 7D 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 377+ 7A3C             >                else
 377+ 7A3C ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 377+ 7A3C             >                endif           ; ok        // for other definitions it "points" the correct handler
 377+ 7A3C             >                // Use of "; ok" to suppress "warning[fwdref]"
 377+ 7A3C             >
 377+ 7A3C             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 378+ 7A3C D3 79                        dw      SMDIVM
 379+ 7A3E A3 69                        dw      EXIT                    // ;
 380+ 7A40
 381+ 7A40              //  ______________________________________________________________________
 382+ 7A40              //
 383+ 7A40              // m/           d n -- q
 384+ 7A40              // multiply two integer giving a double
 385+ 7A40                              Colon_Def MDIV, "M/", is_normal
 385+ 7A40             >                New_Def  MDIV, "M/", Enter_Ptr, is_normal ; ok
 385+ 7A40             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 385+ 7A40             >
 385+ 7A40             >                // dummy db directives used to calculate length of namec
 385+ 7A40 4D 2F       >                db      "M/"
 385+ 7A42             >len_NFA         defl    $ - temp_NFA
 385+ 7A42             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 385+ 7A40             >
 385+ 7A40 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 385+ 7A41 4D 2F       >                db      "M/"               // name string in 7-bit ascii, but
 385+ 7A43             >                org     $-1                 // alter last byte of Name just above to set
 385+ 7A42 AF          >                db      {b $} | END_BIT     // msb as name end
 385+ 7A43             >
 385+ 7A43 32 7A       >                dw      last_NFA            // Link to previous definition Name
 385+ 7A45             >MDIV:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 385+ 7A45 7D 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 385+ 7A47             >                else
 385+ 7A47 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 385+ 7A47             >                endif           ; ok        // for other definitions it "points" the correct handler
 385+ 7A47             >                // Use of "; ok" to suppress "warning[fwdref]"
 385+ 7A47             >
 385+ 7A47             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 386+ 7A47 3A 7A DE 6A                  dw      MDIVM, NIP
 387+ 7A4B A3 69                        dw      EXIT                    // ;
 388+ 7A4D
 389+ 7A4D              //  ______________________________________________________________________
 390+ 7A4D              //
 391+ 7A4D              // *            n1 n2 -- n3
 392+ 7A4D              // multiply two integer
 393+ 7A4D                              Colon_Def MUL, "*", is_normal
 393+ 7A4D             >                New_Def  MUL, "*", Enter_Ptr, is_normal ; ok
 393+ 7A4D             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 393+ 7A4D             >
 393+ 7A4D             >                // dummy db directives used to calculate length of namec
 393+ 7A4D 2A          >                db      "*"
 393+ 7A4E             >len_NFA         defl    $ - temp_NFA
 393+ 7A4E             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 393+ 7A4D             >
 393+ 7A4D 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 393+ 7A4E 2A          >                db      "*"               // name string in 7-bit ascii, but
 393+ 7A4F             >                org     $-1                 // alter last byte of Name just above to set
 393+ 7A4E AA          >                db      {b $} | END_BIT     // msb as name end
 393+ 7A4F             >
 393+ 7A4F 40 7A       >                dw      last_NFA            // Link to previous definition Name
 393+ 7A51             >MUL:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 393+ 7A51 7D 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 393+ 7A53             >                else
 393+ 7A53 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 393+ 7A53             >                endif           ; ok        // for other definitions it "points" the correct handler
 393+ 7A53             >                // Use of "; ok" to suppress "warning[fwdref]"
 393+ 7A53             >
 393+ 7A53             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 394+ 7A53 B4 79 D3 6A                  dw      MMUL, DROP              // m* drop
 395+ 7A57 A3 69                        dw      EXIT                    // ;
 396+ 7A59
 397+ 7A59              //  ______________________________________________________________________
 398+ 7A59              //
 399+ 7A59              // /mod         n1 n2 -- n3 n4
 400+ 7A59              // leaves quotient n4 and remainder n3 of the integer division n1 / n2.
 401+ 7A59              // The remainder has the sign of n1
 402+ 7A59                              Colon_Def DIVMOD, "/MOD", is_normal
 402+ 7A59             >                New_Def  DIVMOD, "/MOD", Enter_Ptr, is_normal ; ok
 402+ 7A59             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 402+ 7A59             >
 402+ 7A59             >                // dummy db directives used to calculate length of namec
 402+ 7A59 2F 4D 4F 44 >                db      "/MOD"
 402+ 7A5D             >len_NFA         defl    $ - temp_NFA
 402+ 7A5D             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 402+ 7A59             >
 402+ 7A59 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 402+ 7A5A 2F 4D 4F 44 >                db      "/MOD"               // name string in 7-bit ascii, but
 402+ 7A5E             >                org     $-1                 // alter last byte of Name just above to set
 402+ 7A5D C4          >                db      {b $} | END_BIT     // msb as name end
 402+ 7A5E             >
 402+ 7A5E 4D 7A       >                dw      last_NFA            // Link to previous definition Name
 402+ 7A60             >DIVMOD:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 402+ 7A60 7D 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 402+ 7A62             >                else
 402+ 7A62 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 402+ 7A62             >                endif           ; ok        // for other definitions it "points" the correct handler
 402+ 7A62             >                // Use of "; ok" to suppress "warning[fwdref]"
 402+ 7A62             >
 402+ 7A62             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 403+ 7A62 B6 69 18 6F                  dw      TO_R, S_TO_D, R_TO      // >r s->d r>
 403+ 7A66 CA 69
 404+ 7A68 3A 7A                        dw      MDIVM                   // m/mod
 405+ 7A6A A3 69                        dw      EXIT                    // ;
 406+ 7A6C
 407+ 7A6C              //  ______________________________________________________________________
 408+ 7A6C              //
 409+ 7A6C              // /            n1 n2 -- n3
 410+ 7A6C              // division
 411+ 7A6C                              Colon_Def DIV, "/", is_normal
 411+ 7A6C             >                New_Def  DIV, "/", Enter_Ptr, is_normal ; ok
 411+ 7A6C             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 411+ 7A6C             >
 411+ 7A6C             >                // dummy db directives used to calculate length of namec
 411+ 7A6C 2F          >                db      "/"
 411+ 7A6D             >len_NFA         defl    $ - temp_NFA
 411+ 7A6D             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 411+ 7A6C             >
 411+ 7A6C 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 411+ 7A6D 2F          >                db      "/"               // name string in 7-bit ascii, but
 411+ 7A6E             >                org     $-1                 // alter last byte of Name just above to set
 411+ 7A6D AF          >                db      {b $} | END_BIT     // msb as name end
 411+ 7A6E             >
 411+ 7A6E 59 7A       >                dw      last_NFA            // Link to previous definition Name
 411+ 7A70             >DIV:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 411+ 7A70 7D 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 411+ 7A72             >                else
 411+ 7A72 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 411+ 7A72             >                endif           ; ok        // for other definitions it "points" the correct handler
 411+ 7A72             >                // Use of "; ok" to suppress "warning[fwdref]"
 411+ 7A72             >
 411+ 7A72             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 412+ 7A72 60 7A DE 6A                  dw      DIVMOD, NIP             // /mod nip
 413+ 7A76 A3 69                        dw      EXIT                    // ;
 414+ 7A78
 415+ 7A78              //  ______________________________________________________________________
 416+ 7A78              //
 417+ 7A78              // mod          n1 n2 -- n3
 418+ 7A78                              Colon_Def MOD, "MOD", is_normal
 418+ 7A78             >                New_Def  MOD, "MOD", Enter_Ptr, is_normal ; ok
 418+ 7A78             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 418+ 7A78             >
 418+ 7A78             >                // dummy db directives used to calculate length of namec
 418+ 7A78 4D 4F 44    >                db      "MOD"
 418+ 7A7B             >len_NFA         defl    $ - temp_NFA
 418+ 7A7B             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 418+ 7A78             >
 418+ 7A78 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 418+ 7A79 4D 4F 44    >                db      "MOD"               // name string in 7-bit ascii, but
 418+ 7A7C             >                org     $-1                 // alter last byte of Name just above to set
 418+ 7A7B C4          >                db      {b $} | END_BIT     // msb as name end
 418+ 7A7C             >
 418+ 7A7C 6C 7A       >                dw      last_NFA            // Link to previous definition Name
 418+ 7A7E             >MOD:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 418+ 7A7E 7D 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 418+ 7A80             >                else
 418+ 7A80 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 418+ 7A80             >                endif           ; ok        // for other definitions it "points" the correct handler
 418+ 7A80             >                // Use of "; ok" to suppress "warning[fwdref]"
 418+ 7A80             >
 418+ 7A80             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 419+ 7A80 60 7A D3 6A                  dw      DIVMOD, DROP            // /mod drop
 420+ 7A84 A3 69                        dw      EXIT                    // ;
 421+ 7A86
 422+ 7A86              //  ______________________________________________________________________
 423+ 7A86              //
 424+ 7A86              // */mod        n1 n2 n3 -- n4 n5
 425+ 7A86              // leaves the quotient n5 and the remainder n4 of the operation
 426+ 7A86              // (n1 * n2) / n3. The intermediate passage through a double number
 427+ 7A86              // avoids loss of precision
 428+ 7A86                              Colon_Def MUL_DIV_MOD, "*/MOD", is_normal
 428+ 7A86             >                New_Def  MUL_DIV_MOD, "*/MOD", Enter_Ptr, is_normal ; ok
 428+ 7A86             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 428+ 7A86             >
 428+ 7A86             >                // dummy db directives used to calculate length of namec
 428+ 7A86 2A 2F 4D 4F >                db      "*/MOD"
 428+ 7A8A 44          >
 428+ 7A8B             >len_NFA         defl    $ - temp_NFA
 428+ 7A8B             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 428+ 7A86             >
 428+ 7A86 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 428+ 7A87 2A 2F 4D 4F >                db      "*/MOD"               // name string in 7-bit ascii, but
 428+ 7A8B 44          >
 428+ 7A8C             >                org     $-1                 // alter last byte of Name just above to set
 428+ 7A8B C4          >                db      {b $} | END_BIT     // msb as name end
 428+ 7A8C             >
 428+ 7A8C 78 7A       >                dw      last_NFA            // Link to previous definition Name
 428+ 7A8E             >MUL_DIV_MOD:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 428+ 7A8E 7D 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 428+ 7A90             >                else
 428+ 7A90 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 428+ 7A90             >                endif           ; ok        // for other definitions it "points" the correct handler
 428+ 7A90             >                // Use of "; ok" to suppress "warning[fwdref]"
 428+ 7A90             >
 428+ 7A90             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 429+ 7A90 B6 69 B4 79                  dw      TO_R, MMUL              // >r  m*
 430+ 7A94 CA 69 3A 7A                  dw      R_TO, MDIVM             // r>  m/mod
 431+ 7A98 A3 69                        dw      EXIT                    // ;
 432+ 7A9A
 433+ 7A9A              //  ______________________________________________________________________
 434+ 7A9A              //
 435+ 7A9A              // */          n1 n2 n3 -- n4
 436+ 7A9A              // (n1 * n2) / n3. The intermediate passage through a double number avoids loss of precision
 437+ 7A9A                              Colon_Def MUL_DIV, "*/", is_normal
 437+ 7A9A             >                New_Def  MUL_DIV, "*/", Enter_Ptr, is_normal ; ok
 437+ 7A9A             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 437+ 7A9A             >
 437+ 7A9A             >                // dummy db directives used to calculate length of namec
 437+ 7A9A 2A 2F       >                db      "*/"
 437+ 7A9C             >len_NFA         defl    $ - temp_NFA
 437+ 7A9C             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 437+ 7A9A             >
 437+ 7A9A 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 437+ 7A9B 2A 2F       >                db      "*/"               // name string in 7-bit ascii, but
 437+ 7A9D             >                org     $-1                 // alter last byte of Name just above to set
 437+ 7A9C AF          >                db      {b $} | END_BIT     // msb as name end
 437+ 7A9D             >
 437+ 7A9D 86 7A       >                dw      last_NFA            // Link to previous definition Name
 437+ 7A9F             >MUL_DIV:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 437+ 7A9F 7D 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 437+ 7AA1             >                else
 437+ 7AA1 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 437+ 7AA1             >                endif           ; ok        // for other definitions it "points" the correct handler
 437+ 7AA1             >                // Use of "; ok" to suppress "warning[fwdref]"
 437+ 7AA1             >
 437+ 7AA1             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 438+ 7AA1 8E 7A                        dw     MUL_DIV_MOD              // */mod
 439+ 7AA3 DE 6A                        dw     NIP                      // nip
 440+ 7AA5 A3 69                        dw     EXIT                     // ;
 441+ 7AA7
 442+ 7AA7
 443+ 7AA7              //  ______________________________________________________________________
 444+ 7AA7              //
 445+ 7AA7              // m/mod        ud1 u2 -- u3 ud4
 446+ 7AA7              // mixed operation: it leaves the remainder u3 and the quotient ud4 of ud1 / u1.
 447+ 7AA7              // All terms are unsigned.
 448+ 7AA7              //              Colon_Def MDIV_MOD, "M/MOD", is_normal
 449+ 7AA7              //              dw      TO_R                    // >r           ( ud1 )
 450+ 7AA7              //              dw      ZERO, R_OP, UMDIVMOD    // 0 r um/mod   ( l rem1 h/r )
 451+ 7AA7              //              dw      R_TO, SWAP, TO_R        // r> swap >r   ( l rem )
 452+ 7AA7              //              dw      UMDIVMOD                // um/mod       ( rem2 l/r )
 453+ 7AA7              //              dw      R_TO                    // r>           ( rem2 l/r h/r )
 454+ 7AA7              //              dw      EXIT                    // ;
 455+ 7AA7
 456+ 7AA7              //  ______________________________________________________________________
 457+ 7AA7              //
 458+ 7AA7              // (line)       n1 n2 -- a b
 459+ 7AA7              // sends the line n1 of block n2 to the disk buffer.
 460+ 7AA7              // it returns the address a and ca counter b = C/L meaning a whole line.
 461+ 7AA7                              Colon_Def CLINE, "(LINE)", is_normal
 461+ 7AA7             >                New_Def  CLINE, "(LINE)", Enter_Ptr, is_normal ; ok
 461+ 7AA7             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 461+ 7AA7             >
 461+ 7AA7             >                // dummy db directives used to calculate length of namec
 461+ 7AA7 28 4C 49 4E >                db      "(LINE)"
 461+ 7AAB 45 29       >
 461+ 7AAD             >len_NFA         defl    $ - temp_NFA
 461+ 7AAD             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 461+ 7AA7             >
 461+ 7AA7 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 461+ 7AA8 28 4C 49 4E >                db      "(LINE)"               // name string in 7-bit ascii, but
 461+ 7AAC 45 29       >
 461+ 7AAE             >                org     $-1                 // alter last byte of Name just above to set
 461+ 7AAD A9          >                db      {b $} | END_BIT     // msb as name end
 461+ 7AAE             >
 461+ 7AAE 9A 7A       >                dw      last_NFA            // Link to previous definition Name
 461+ 7AB0             >CLINE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 461+ 7AB0 7D 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 461+ 7AB2             >                else
 461+ 7AB2 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 461+ 7AB2             >                endif           ; ok        // for other definitions it "points" the correct handler
 461+ 7AB2             >                // Use of "; ok" to suppress "warning[fwdref]"
 461+ 7AB2             >
 461+ 7AB2             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 462+ 7AB2 B6 69                        dw      TO_R                    // >r
 463+ 7AB4 A5 6C                        dw      NOOP                    // noop
 464+ 7AB6 2E 6D                        dw      CL                      // c/l
 465+ 7AB8 3A 6D 8E 7A                  dw      BBUF, MUL_DIV_MOD       // */mod
 466+ 7ABC CA 69                        dw      R_TO                    // r>
 467+ 7ABE 46 6D 51 7A                  dw      BSCR, MUL, PLUS         // b/scr * +
 467+ 7AC2 28 6A
 468+ 7AC4 6B 7D                        dw      BLOCK                   // block   ( forward )
 469+ 7AC6 28 6A                        dw      PLUS                    // +
 470+ 7AC8 A5 6C                        dw      NOOP                    // noop
 471+ 7ACA 2E 6D                        dw      CL                      // c/l
 472+ 7ACC A3 69                        dw      EXIT                    // ;
 473+ 7ACE
 474+ 7ACE              //  ______________________________________________________________________
 475+ 7ACE              //
 476+ 7ACE              // .line        n1 n2 --
 477+ 7ACE              // Sends to output line  n1  of screen n2.
 478+ 7ACE                              Colon_Def DOT_LINE, ".LINE", is_normal
 478+ 7ACE             >                New_Def  DOT_LINE, ".LINE", Enter_Ptr, is_normal ; ok
 478+ 7ACE             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 478+ 7ACE             >
 478+ 7ACE             >                // dummy db directives used to calculate length of namec
 478+ 7ACE 2E 4C 49 4E >                db      ".LINE"
 478+ 7AD2 45          >
 478+ 7AD3             >len_NFA         defl    $ - temp_NFA
 478+ 7AD3             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 478+ 7ACE             >
 478+ 7ACE 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 478+ 7ACF 2E 4C 49 4E >                db      ".LINE"               // name string in 7-bit ascii, but
 478+ 7AD3 45          >
 478+ 7AD4             >                org     $-1                 // alter last byte of Name just above to set
 478+ 7AD3 C5          >                db      {b $} | END_BIT     // msb as name end
 478+ 7AD4             >
 478+ 7AD4 A7 7A       >                dw      last_NFA            // Link to previous definition Name
 478+ 7AD6             >DOT_LINE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 478+ 7AD6 7D 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 478+ 7AD8             >                else
 478+ 7AD8 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 478+ 7AD8             >                endif           ; ok        // for other definitions it "points" the correct handler
 478+ 7AD8             >                // Use of "; ok" to suppress "warning[fwdref]"
 478+ 7AD8             >
 478+ 7AD8             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 479+ 7AD8 B0 7A BE 72                  dw      CLINE, LTRAILING, TYPE  // (line) -trailing type
 479+ 7ADC 9E 72
 480+ 7ADE A3 69                        dw      EXIT                    // ;
 481+ 7AE0
 482+ 7AE0              //  ______________________________________________________________________
 483+ 7AE0              //
 484+ 7AE0              // message       n1 n2 --
 485+ 7AE0              // prints error message to current channel.
 486+ 7AE0              // if WARNING is 0, prints "MSG#n".
 487+ 7AE0              // if WARNING is 1, prints line n of screen 4.
 488+ 7AE0              // if WARNING is -1, see ERROR
 489+ 7AE0              // value can be negative or beyond block 4.
 490+ 7AE0                              Colon_Def MESSAGE, "MESSAGE", is_normal
 490+ 7AE0             >                New_Def  MESSAGE, "MESSAGE", Enter_Ptr, is_normal ; ok
 490+ 7AE0             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 490+ 7AE0             >
 490+ 7AE0             >                // dummy db directives used to calculate length of namec
 490+ 7AE0 4D 45 53 53 >                db      "MESSAGE"
 490+ 7AE4 41 47 45    >
 490+ 7AE7             >len_NFA         defl    $ - temp_NFA
 490+ 7AE7             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 490+ 7AE0             >
 490+ 7AE0 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 490+ 7AE1 4D 45 53 53 >                db      "MESSAGE"               // name string in 7-bit ascii, but
 490+ 7AE5 41 47 45    >
 490+ 7AE8             >                org     $-1                 // alter last byte of Name just above to set
 490+ 7AE7 C5          >                db      {b $} | END_BIT     // msb as name end
 490+ 7AE8             >
 490+ 7AE8 CE 7A       >                dw      last_NFA            // Link to previous definition Name
 490+ 7AEA             >MESSAGE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 490+ 7AEA 7D 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 490+ 7AEC             >                else
 490+ 7AEC ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 490+ 7AEC             >                endif           ; ok        // for other definitions it "points" the correct handler
 490+ 7AEC             >                // Use of "; ok" to suppress "warning[fwdref]"
 490+ 7AEC             >
 490+ 7AEC             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 491+ 7AEC A5 6D 9B 6B                  dw      WARNING, FETCH          // warning @
 492+ 7AF0                                                              // if
 493+ 7AF0 2C 64                        dw      ZBRANCH
 494+ 7AF2 18 00                        dw      Message_Else - $
 495+ 7AF4 A9 63 04 00                  dw          LIT, 4              //      4
 496+ 7AF8 20 6E 9B 6B                  dw          OFFSET, FETCH       //      offset @
 497+ 7AFC 46 6D 70 7A                  dw          BSCR, DIV, SUBTRACT //      b/scr / -
 497+ 7B00 2C 6F
 498+ 7B02 D6 7A                        dw          DOT_LINE            //      .line
 499+ 7B04 E4 6F                        dw          SPACE               //      space
 500+ 7B06                                                              // else
 501+ 7B06
 502+ 7B06 15 64                        dw      BRANCH
 503+ 7B08 0B 00                        dw      Message_ENdif - $
 504+ 7B0A              Message_Else:
 505+ 7B0A 6F 74                        dw          C_DOT_QUOTE         //      .( msg#)
 506+ 7B0C 04 6D 73 67                  db          4, "msg#"
 506+ 7B10 23
 507+ 7B11 28 83                        dw          DOT                 //      .  ( forward )
 508+ 7B13              Message_ENdif:                                  // endif
 509+ 7B13 A3 69                        dw      EXIT                    // ;
 510+ 7B15
 511+ 7B15
 512+ 7B15              //  ______________________________________________________________________
 513+ 7B15              //
 514+ 7B15              // device
 515+ 7B15                              Variable_Def DEVICE,   "DEVICE",   2
 515+ 7B15             >                New_Def  DEVICE, "DEVICE", Variable_Ptr, is_normal
 515+ 7B15             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 515+ 7B15             >
 515+ 7B15             >                // dummy db directives used to calculate length of namec
 515+ 7B15 44 45 56 49 >                db      "DEVICE"
 515+ 7B19 43 45       >
 515+ 7B1B             >len_NFA         defl    $ - temp_NFA
 515+ 7B1B             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 515+ 7B15             >
 515+ 7B15 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 515+ 7B16 44 45 56 49 >                db      "DEVICE"               // name string in 7-bit ascii, but
 515+ 7B1A 43 45       >
 515+ 7B1C             >                org     $-1                 // alter last byte of Name just above to set
 515+ 7B1B C5          >                db      {b $} | END_BIT     // msb as name end
 515+ 7B1C             >
 515+ 7B1C E0 7A       >                dw      last_NFA            // Link to previous definition Name
 515+ 7B1E             >DEVICE:          if Variable_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 515+ 7B1E D7 6C       >                dw      Variable_Ptr ; ok        // for primitive definitions  actual code
 515+ 7B20             >                else
 515+ 7B20 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 515+ 7B20             >                endif           ; ok        // for other definitions it "points" the correct handler
 515+ 7B20             >                // Use of "; ok" to suppress "warning[fwdref]"
 515+ 7B20             >
 515+ 7B20             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 515+ 7B20 02 00       >                dw      2
 516+ 7B22
 517+ 7B22              //  ______________________________________________________________________
 518+ 7B22
# file closed: C:\Zx\CSpect\Projects\vForth15_INDIRECT/source/L2.asm
 112  7B22                              include "next-opt1.asm"
# file opened: C:\Zx\CSpect\Projects\vForth15_INDIRECT/source/next-opt1.asm
   1+ 7B22              //  ______________________________________________________________________
   2+ 7B22              //
   3+ 7B22              //  next-opt.asm
   4+ 7B22              //
   5+ 7B22              //  ZX Spectrum Next - peculiar definitions
   6+ 7B22              //  ______________________________________________________________________
   7+ 7B22
   8+ 7B22              //  ______________________________________________________________________
   9+ 7B22              //
  10+ 7B22              // reg@         n -- b
  11+ 7B22              // read Next REGister n giving byte b
  12+ 7B22
  13+ 7B22                              New_Def REG_FETCH, "REG@", is_code, is_normal
  13+ 7B22             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  13+ 7B22             >
  13+ 7B22             >                // dummy db directives used to calculate length of namec
  13+ 7B22 52 45 47 40 >                db      "REG@"
  13+ 7B26             >len_NFA         defl    $ - temp_NFA
  13+ 7B26             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  13+ 7B22             >
  13+ 7B22 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  13+ 7B23 52 45 47 40 >                db      "REG@"               // name string in 7-bit ascii, but
  13+ 7B27             >                org     $-1                 // alter last byte of Name just above to set
  13+ 7B26 C0          >                db      {b $} | END_BIT     // msb as name end
  13+ 7B27             >
  13+ 7B27 15 7B       >                dw      last_NFA            // Link to previous definition Name
  13+ 7B29             >REG_FETCH:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
  13+ 7B29 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
  13+ 7B29             >                else
  13+ 7B29 2B 7B       >                dw      $ + 2   ; ok        // is pointed by CFA
  13+ 7B2B             >                endif           ; ok        // for other definitions it "points" the correct handler
  13+ 7B2B             >                // Use of "; ok" to suppress "warning[fwdref]"
  13+ 7B2B             >
  13+ 7B2B             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  14+ 7B2B D9                           exx
  15+ 7B2C 01 3B 24                     ld      bc, $243B
  16+ 7B2F E1                           pop     hl
  17+ 7B30 ED 69                        out     (c), l
  18+ 7B32 04                           inc     b
  19+ 7B33 ED 68                        in      l,(c)
  20+ 7B35 E5                           push    hl
  21+ 7B36 D9                           exx
  22+ 7B37                              next
  22+ 7B37 DD E9       >                jp      (ix)
  23+ 7B39
  24+ 7B39
  25+ 7B39              //  ______________________________________________________________________
  26+ 7B39              //
  27+ 7B39              // reg!         b n --
  28+ 7B39              // write value b to Next REGister n
  29+ 7B39
  30+ 7B39                              New_Def REG_STORE, "REG!", is_code, is_normal
  30+ 7B39             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  30+ 7B39             >
  30+ 7B39             >                // dummy db directives used to calculate length of namec
  30+ 7B39 52 45 47 21 >                db      "REG!"
  30+ 7B3D             >len_NFA         defl    $ - temp_NFA
  30+ 7B3D             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  30+ 7B39             >
  30+ 7B39 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  30+ 7B3A 52 45 47 21 >                db      "REG!"               // name string in 7-bit ascii, but
  30+ 7B3E             >                org     $-1                 // alter last byte of Name just above to set
  30+ 7B3D A1          >                db      {b $} | END_BIT     // msb as name end
  30+ 7B3E             >
  30+ 7B3E 22 7B       >                dw      last_NFA            // Link to previous definition Name
  30+ 7B40             >REG_STORE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
  30+ 7B40 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
  30+ 7B40             >                else
  30+ 7B40 42 7B       >                dw      $ + 2   ; ok        // is pointed by CFA
  30+ 7B42             >                endif           ; ok        // for other definitions it "points" the correct handler
  30+ 7B42             >                // Use of "; ok" to suppress "warning[fwdref]"
  30+ 7B42             >
  30+ 7B42             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  31+ 7B42 D9                           exx
  32+ 7B43 01 3B 24                     ld      bc, $243B
  33+ 7B46 E1                           pop     hl
  34+ 7B47 ED 69                        out     (c), l
  35+ 7B49 04                           inc     b
  36+ 7B4A E1                           pop     hl
  37+ 7B4B ED 69                        out     (c), l
  38+ 7B4D D9                           exx
  39+ 7B4E                              next
  39+ 7B4E DD E9       >                jp      (ix)
  40+ 7B50
  41+ 7B50
  42+ 7B50              //  ______________________________________________________________________
  43+ 7B50              //
  44+ 7B50              // mmu7@        -- n
  45+ 7B50              // query current page in MMU7 8K-RAM : 0 and 223
  46+ 7B50
  47+ 7B50                              Colon_Def MMU7_FETCH, "MMU7@", is_normal
  47+ 7B50             >                New_Def  MMU7_FETCH, "MMU7@", Enter_Ptr, is_normal ; ok
  47+ 7B50             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  47+ 7B50             >
  47+ 7B50             >                // dummy db directives used to calculate length of namec
  47+ 7B50 4D 4D 55 37 >                db      "MMU7@"
  47+ 7B54 40          >
  47+ 7B55             >len_NFA         defl    $ - temp_NFA
  47+ 7B55             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  47+ 7B50             >
  47+ 7B50 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  47+ 7B51 4D 4D 55 37 >                db      "MMU7@"               // name string in 7-bit ascii, but
  47+ 7B55 40          >
  47+ 7B56             >                org     $-1                 // alter last byte of Name just above to set
  47+ 7B55 C0          >                db      {b $} | END_BIT     // msb as name end
  47+ 7B56             >
  47+ 7B56 39 7B       >                dw      last_NFA            // Link to previous definition Name
  47+ 7B58             >MMU7_FETCH:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
  47+ 7B58 7D 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
  47+ 7B5A             >                else
  47+ 7B5A ~           >                dw      $ + 2   ; ok        // is pointed by CFA
  47+ 7B5A             >                endif           ; ok        // for other definitions it "points" the correct handler
  47+ 7B5A             >                // Use of "; ok" to suppress "warning[fwdref]"
  47+ 7B5A             >
  47+ 7B5A             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  48+ 7B5A A9 63 57 00                  dw      LIT, 87, REG_FETCH
  48+ 7B5E 29 7B
  49+ 7B60 A3 69                        dw      EXIT
  50+ 7B62
  51+ 7B62              //  ______________________________________________________________________
  52+ 7B62              //
  53+ 7B62              // mmu7!        n --
  54+ 7B62              // set MMU7 8K-RAM page to n given between 0 and 223
  55+ 7B62              // optimized version that uses NEXTREG n,A Z80n op-code.
  56+ 7B62
  57+ 7B62                              New_Def MMU7_STORE, "MMU7!", is_code, is_normal
  57+ 7B62             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  57+ 7B62             >
  57+ 7B62             >                // dummy db directives used to calculate length of namec
  57+ 7B62 4D 4D 55 37 >                db      "MMU7!"
  57+ 7B66 21          >
  57+ 7B67             >len_NFA         defl    $ - temp_NFA
  57+ 7B67             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  57+ 7B62             >
  57+ 7B62 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  57+ 7B63 4D 4D 55 37 >                db      "MMU7!"               // name string in 7-bit ascii, but
  57+ 7B67 21          >
  57+ 7B68             >                org     $-1                 // alter last byte of Name just above to set
  57+ 7B67 A1          >                db      {b $} | END_BIT     // msb as name end
  57+ 7B68             >
  57+ 7B68 50 7B       >                dw      last_NFA            // Link to previous definition Name
  57+ 7B6A             >MMU7_STORE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
  57+ 7B6A ~           >                dw      runcode ; ok        // for primitive definitions  actual code
  57+ 7B6A             >                else
  57+ 7B6A 6C 7B       >                dw      $ + 2   ; ok        // is pointed by CFA
  57+ 7B6C             >                endif           ; ok        // for other definitions it "points" the correct handler
  57+ 7B6C             >                // Use of "; ok" to suppress "warning[fwdref]"
  57+ 7B6C             >
  57+ 7B6C             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  58+ 7B6C E1                           pop     hl
  59+ 7B6D 7D                           ld      a, l
  60+ 7B6E ED 92 57                     nextreg 87, a
  61+ 7B71
  62+ 7B71                              next
  62+ 7B71 DD E9       >                jp      (ix)
  63+ 7B73
  64+ 7B73              //  ______________________________________________________________________
  65+ 7B73              //
  66+ 7B73              // >far         ha -- a n
  67+ 7B73              // decode bits 765 of H as one of the 8K-page between 64 and 71 (40h-47h)
  68+ 7B73              // take lower bits of H and L as an offset from E000h
  69+ 7B73              // then return address  a  between E000h-FFFFh
  70+ 7B73              // and page number n  between 64-71 (40h-47h)
  71+ 7B73              // For example, in hex:
  72+ 7B73              //   0000 >FAR  gives  40.E000
  73+ 7B73              //   1FFF >FAR  gives  40.FFFF
  74+ 7B73              //   2000 >FAR  gives  41.E000
  75+ 7B73              //   3FFF >FAR  gives  41.FFFF
  76+ 7B73              //   EFFF >FAR  gives  47.EFFF
  77+ 7B73              //   FFFF >FAR  gives  47.FFFF
  78+ 7B73              //                New_Def TO_FAR, ">FAR", is_code, is_normal
  79+ 7B73              //                pop     de
  80+ 7B73              //                ld      a, d
  81+ 7B73              //                and     $E0
  82+ 7B73              //                rlca
  83+ 7B73              //                rlca
  84+ 7B73              //                rlca
  85+ 7B73              //                add     $40
  86+ 7B73              //                ld      l, a
  87+ 7B73              //                ld      h, 0
  88+ 7B73              //                ld      a, d
  89+ 7B73              //                or      $E0
  90+ 7B73              //                ld      d, a
  91+ 7B73              //                push    hl
  92+ 7B73              //                push    de
  93+ 7B73              //                next
  94+ 7B73
  95+ 7B73              //  ______________________________________________________________________
  96+ 7B73              //
  97+ 7B73              // <far         a n  -- ha
  98+ 7B73              // given an address E000-FFFF and a page number n (64-71 or 40h-47h)
  99+ 7B73              // reverse of >FAR: encodes a FAR address compressing
 100+ 7B73              // to bits 765 of H, lower bits of HL address offset from E000h
 101+ 7B73              //                New_Def FROM_FAR, "<FAR", is_code, is_normal
 102+ 7B73              //                pop     de                  // page number in e
 103+ 7B73              //                pop     hl                  // address in hl
 104+ 7B73              //                ld      a, e
 105+ 7B73              //                sub     $40                 // reduced to 0-7
 106+ 7B73              //                rrca
 107+ 7B73              //                rrca
 108+ 7B73              //                rrca
 109+ 7B73              //                ld      d, a                // save to d bits 765
 110+ 7B73              //                ld      a, h                // drops
 111+ 7B73              //                and     $1F
 112+ 7B73              //                or      d
 113+ 7B73              //                ld      h, a
 114+ 7B73              //
 115+ 7B73              //                psh1
 116+ 7B73
 117+ 7B73              //  ______________________________________________________________________
 118+ 7B73              //
 119+ 7B73              // m_p3dos      n1 n2 n3 n4 a -- n5 n6 n7 n8  f
 120+ 7B73              // NextZXOS call wrapper.
 121+ 7B73              //  n1 = hl register parameter value
 122+ 7B73              //  n2 = de register parameter value
 123+ 7B73              //  n3 = bc register parameter value
 124+ 7B73              //  n4 =  a register parameter value
 125+ 7B73              //   a = routine address in ROM 3
 126+ 7B73              // ----
 127+ 7B73              //  n5 = hl returned value
 128+ 7B73              //  n6 = de returned value
 129+ 7B73              //  n7 = bc returned value
 130+ 7B73              //  n8 =  a returned value
 131+ 7B73              //   f
 132+ 7B73                              New_Def M_P3DOS, "M_P3DOS", is_code, is_normal
 132+ 7B73             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 132+ 7B73             >
 132+ 7B73             >                // dummy db directives used to calculate length of namec
 132+ 7B73 4D 5F 50 33 >                db      "M_P3DOS"
 132+ 7B77 44 4F 53    >
 132+ 7B7A             >len_NFA         defl    $ - temp_NFA
 132+ 7B7A             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 132+ 7B73             >
 132+ 7B73 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 132+ 7B74 4D 5F 50 33 >                db      "M_P3DOS"               // name string in 7-bit ascii, but
 132+ 7B78 44 4F 53    >
 132+ 7B7B             >                org     $-1                 // alter last byte of Name just above to set
 132+ 7B7A D3          >                db      {b $} | END_BIT     // msb as name end
 132+ 7B7B             >
 132+ 7B7B 62 7B       >                dw      last_NFA            // Link to previous definition Name
 132+ 7B7D             >M_P3DOS:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 132+ 7B7D ~           >                dw      runcode ; ok        // for primitive definitions  actual code
 132+ 7B7D             >                else
 132+ 7B7D 7F 7B       >                dw      $ + 2   ; ok        // is pointed by CFA
 132+ 7B7F             >                endif           ; ok        // for other definitions it "points" the correct handler
 132+ 7B7F             >                // Use of "; ok" to suppress "warning[fwdref]"
 132+ 7B7F             >
 132+ 7B7F             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 133+ 7B7F D1                           pop     de                  // dos call entry address in de
 134+ 7B80 E1                           pop     hl                  // a register
 135+ 7B81 7D                           ld      a, l
 136+ 7B82 D9                           exx
 137+ 7B83 C1                           pop     bc
 138+ 7B84 D1                           pop     de
 139+ 7B85 E1                           pop     hl
 140+ 7B86 D9                           exx
 141+ 7B87
 142+ 7B87 C5                           push    bc
 143+ 7B88 DD E5                        push    ix
 144+ 7B8A
 145+ 7B8A              //              ld      (SP_Saved), sp
 146+ 7B8A              //              ld      sp, Cold_origin - 5
 147+ 7B8A 0E 07                        ld      c, 7                // use 7 RAM Bank
 148+ 7B8C
 149+ 7B8C CF                           rst     08
 150+ 7B8D 94                           db      $94
 151+ 7B8E
 152+ 7B8E              //              ld      sp, (SP_Saved)
 153+ 7B8E              //              push    ix
 154+ 7B8E              //              pop     hl
 155+ 7B8E              //              ld      (IX_Echo), hl
 156+ 7B8E DD 22 90 63                  ld      (IX_Echo), ix
 157+ 7B92              //              nop
 158+ 7B92 DD E1                        pop     ix
 159+ 7B94 E3                           ex      (sp), hl            // hl argument and retrieve bc
 160+ 7B95 D5                           push    de
 161+ 7B96 C5                           push    bc
 162+ 7B97 4D                           ld      c, l
 163+ 7B98 44                           ld      b, h
 164+ 7B99
 165+ 7B99 26 00                        ld      h, 0
 166+ 7B9B 6F                           ld      l, a
 167+ 7B9C E5                           push    hl
 168+ 7B9D ED 62                        sbc     hl, hl              // -1 for OK ; 0 for KO but now...
 169+ 7B9F 23                           inc     hl                  //  0 for OK ; 1 for ko
 170+ 7BA0
 171+ 7BA0                              psh1
 171+ 7BA0 E5          >                push    hl
 171+ 7BA1 DD E9       >                jp      (ix)
 172+ 7BA3
 173+ 7BA3              //  ______________________________________________________________________
 174+ 7BA3              //
 175+ 7BA3              // blk-fh
 176+ 7BA3                              Variable_Def BLK_FH,   "BLK-FH",   1
 176+ 7BA3             >                New_Def  BLK_FH, "BLK-FH", Variable_Ptr, is_normal
 176+ 7BA3             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 176+ 7BA3             >
 176+ 7BA3             >                // dummy db directives used to calculate length of namec
 176+ 7BA3 42 4C 4B 2D >                db      "BLK-FH"
 176+ 7BA7 46 48       >
 176+ 7BA9             >len_NFA         defl    $ - temp_NFA
 176+ 7BA9             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 176+ 7BA3             >
 176+ 7BA3 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 176+ 7BA4 42 4C 4B 2D >                db      "BLK-FH"               // name string in 7-bit ascii, but
 176+ 7BA8 46 48       >
 176+ 7BAA             >                org     $-1                 // alter last byte of Name just above to set
 176+ 7BA9 C8          >                db      {b $} | END_BIT     // msb as name end
 176+ 7BAA             >
 176+ 7BAA 73 7B       >                dw      last_NFA            // Link to previous definition Name
 176+ 7BAC             >BLK_FH:          if Variable_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 176+ 7BAC D7 6C       >                dw      Variable_Ptr ; ok        // for primitive definitions  actual code
 176+ 7BAE             >                else
 176+ 7BAE ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 176+ 7BAE             >                endif           ; ok        // for other definitions it "points" the correct handler
 176+ 7BAE             >                // Use of "; ok" to suppress "warning[fwdref]"
 176+ 7BAE             >
 176+ 7BAE             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 176+ 7BAE 01 00       >                dw      1
 177+ 7BB0
 178+ 7BB0                              New_Def BLK_FNAME,   "BLK-FNAME", Create_Ptr, is_normal
 178+ 7BB0             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 178+ 7BB0             >
 178+ 7BB0             >                // dummy db directives used to calculate length of namec
 178+ 7BB0 42 4C 4B 2D >                db      "BLK-FNAME"
 178+ 7BB4 46 4E 41 4D >
 178+ 7BB8 45          >
 178+ 7BB9             >len_NFA         defl    $ - temp_NFA
 178+ 7BB9             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 178+ 7BB0             >
 178+ 7BB0 89          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 178+ 7BB1 42 4C 4B 2D >                db      "BLK-FNAME"               // name string in 7-bit ascii, but
 178+ 7BB5 46 4E 41 4D >
 178+ 7BB9 45          >
 178+ 7BBA             >                org     $-1                 // alter last byte of Name just above to set
 178+ 7BB9 C5          >                db      {b $} | END_BIT     // msb as name end
 178+ 7BBA             >
 178+ 7BBA A3 7B       >                dw      last_NFA            // Link to previous definition Name
 178+ 7BBC             >BLK_FNAME:          if Create_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 178+ 7BBC D3 76       >                dw      Create_Ptr ; ok        // for primitive definitions  actual code
 178+ 7BBE             >                else
 178+ 7BBE ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 178+ 7BBE             >                endif           ; ok        // for other definitions it "points" the correct handler
 178+ 7BBE             >                // Use of "; ok" to suppress "warning[fwdref]"
 178+ 7BBE             >
 178+ 7BBE             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 179+ 7BBE 0E 21 42 6C                  db      14, "!Blocks-64.bin", 0
 179+ 7BC2 6F 63 6B 73
 179+ 7BC6 2D 36 34 2E
 179+ 7BCA 62 69 6E 00
 180+ 7BCE 00 00 00...                  ds      24
 181+ 7BE6
 182+ 7BE6              //  ______________________________________________________________________
 183+ 7BE6              //
 184+ 7BE6              // blk-seek     n --
 185+ 7BE6              // seek block n  within blocks!.bin  file
 186+ 7BE6                              Colon_Def BLK_SEEK, "BLK-SEEK", is_normal
 186+ 7BE6             >                New_Def  BLK_SEEK, "BLK-SEEK", Enter_Ptr, is_normal ; ok
 186+ 7BE6             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 186+ 7BE6             >
 186+ 7BE6             >                // dummy db directives used to calculate length of namec
 186+ 7BE6 42 4C 4B 2D >                db      "BLK-SEEK"
 186+ 7BEA 53 45 45 4B >
 186+ 7BEE             >len_NFA         defl    $ - temp_NFA
 186+ 7BEE             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 186+ 7BE6             >
 186+ 7BE6 88          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 186+ 7BE7 42 4C 4B 2D >                db      "BLK-SEEK"               // name string in 7-bit ascii, but
 186+ 7BEB 53 45 45 4B >
 186+ 7BEF             >                org     $-1                 // alter last byte of Name just above to set
 186+ 7BEE CB          >                db      {b $} | END_BIT     // msb as name end
 186+ 7BEF             >
 186+ 7BEF B0 7B       >                dw      last_NFA            // Link to previous definition Name
 186+ 7BF1             >BLK_SEEK:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 186+ 7BF1 7D 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 186+ 7BF3             >                else
 186+ 7BF3 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 186+ 7BF3             >                endif           ; ok        // for other definitions it "points" the correct handler
 186+ 7BF3             >                // Use of "; ok" to suppress "warning[fwdref]"
 186+ 7BF3             >
 186+ 7BF3             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 187+ 7BF3 3A 6D B4 79                  dw  BBUF, MMUL
 188+ 7BF7 AC 7B 9B 6B                  dw  BLK_FH, FETCH
 189+ 7BFB A8 67                        dw  F_SEEK
 190+ 7BFD A9 63 2D 00                  dw  LIT, $2D, QERROR
 190+ 7C01 9E 70
 191+ 7C03 A3 69                        dw  EXIT
 192+ 7C05
 193+ 7C05              //  ______________________________________________________________________
 194+ 7C05              //
 195+ 7C05              // blk-read     n --
 196+ 7C05              // seek block n  within blocks!.bin  file
 197+ 7C05                              Colon_Def BLK_READ, "BLK-READ", is_normal
 197+ 7C05             >                New_Def  BLK_READ, "BLK-READ", Enter_Ptr, is_normal ; ok
 197+ 7C05             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 197+ 7C05             >
 197+ 7C05             >                // dummy db directives used to calculate length of namec
 197+ 7C05 42 4C 4B 2D >                db      "BLK-READ"
 197+ 7C09 52 45 41 44 >
 197+ 7C0D             >len_NFA         defl    $ - temp_NFA
 197+ 7C0D             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 197+ 7C05             >
 197+ 7C05 88          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 197+ 7C06 42 4C 4B 2D >                db      "BLK-READ"               // name string in 7-bit ascii, but
 197+ 7C0A 52 45 41 44 >
 197+ 7C0E             >                org     $-1                 // alter last byte of Name just above to set
 197+ 7C0D C4          >                db      {b $} | END_BIT     // msb as name end
 197+ 7C0E             >
 197+ 7C0E E6 7B       >                dw      last_NFA            // Link to previous definition Name
 197+ 7C10             >BLK_READ:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 197+ 7C10 7D 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 197+ 7C12             >                else
 197+ 7C12 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 197+ 7C12             >                endif           ; ok        // for other definitions it "points" the correct handler
 197+ 7C12             >                // Use of "; ok" to suppress "warning[fwdref]"
 197+ 7C12             >
 197+ 7C12             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 198+ 7C12 F1 7B                        dw  BLK_SEEK
 199+ 7C14 3A 6D                        dw  BBUF
 200+ 7C16 AC 7B 9B 6B                  dw  BLK_FH, FETCH
 201+ 7C1A 14 68                        dw  F_READ
 202+ 7C1C A9 63 2E 00                  dw  LIT, $2E, QERROR
 202+ 7C20 9E 70
 203+ 7C22 D3 6A                        dw  DROP
 204+ 7C24 A3 69                        dw  EXIT
 205+ 7C26
 206+ 7C26              //  ______________________________________________________________________
 207+ 7C26              //
 208+ 7C26              // blk-write     n --
 209+ 7C26              // seek block n  within blocks!.bin  file
 210+ 7C26                              Colon_Def BLK_WRITE, "BLK-WRITE", is_normal
 210+ 7C26             >                New_Def  BLK_WRITE, "BLK-WRITE", Enter_Ptr, is_normal ; ok
 210+ 7C26             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 210+ 7C26             >
 210+ 7C26             >                // dummy db directives used to calculate length of namec
 210+ 7C26 42 4C 4B 2D >                db      "BLK-WRITE"
 210+ 7C2A 57 52 49 54 >
 210+ 7C2E 45          >
 210+ 7C2F             >len_NFA         defl    $ - temp_NFA
 210+ 7C2F             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 210+ 7C26             >
 210+ 7C26 89          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 210+ 7C27 42 4C 4B 2D >                db      "BLK-WRITE"               // name string in 7-bit ascii, but
 210+ 7C2B 57 52 49 54 >
 210+ 7C2F 45          >
 210+ 7C30             >                org     $-1                 // alter last byte of Name just above to set
 210+ 7C2F C5          >                db      {b $} | END_BIT     // msb as name end
 210+ 7C30             >
 210+ 7C30 05 7C       >                dw      last_NFA            // Link to previous definition Name
 210+ 7C32             >BLK_WRITE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 210+ 7C32 7D 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 210+ 7C34             >                else
 210+ 7C34 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 210+ 7C34             >                endif           ; ok        // for other definitions it "points" the correct handler
 210+ 7C34             >                // Use of "; ok" to suppress "warning[fwdref]"
 210+ 7C34             >
 210+ 7C34             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 211+ 7C34 F1 7B                        dw  BLK_SEEK
 212+ 7C36 3A 6D                        dw  BBUF
 213+ 7C38 AC 7B 9B 6B                  dw  BLK_FH, FETCH
 214+ 7C3C 33 68                        dw  F_WRITE
 215+ 7C3E A9 63 2F 00                  dw  LIT, $2F, QERROR
 215+ 7C42 9E 70
 216+ 7C44 D3 6A                        dw  DROP
 217+ 7C46 A3 69                        dw  EXIT
 218+ 7C48
 219+ 7C48              //  ______________________________________________________________________
 220+ 7C48              //
 221+ 7C48              // blk-init     n --
 222+ 7C48              // seek block n  within blocks!.bin  file
 223+ 7C48                              Colon_Def BLK_INIT, "BLK-INIT", is_normal
 223+ 7C48             >                New_Def  BLK_INIT, "BLK-INIT", Enter_Ptr, is_normal ; ok
 223+ 7C48             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 223+ 7C48             >
 223+ 7C48             >                // dummy db directives used to calculate length of namec
 223+ 7C48 42 4C 4B 2D >                db      "BLK-INIT"
 223+ 7C4C 49 4E 49 54 >
 223+ 7C50             >len_NFA         defl    $ - temp_NFA
 223+ 7C50             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 223+ 7C48             >
 223+ 7C48 88          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 223+ 7C49 42 4C 4B 2D >                db      "BLK-INIT"               // name string in 7-bit ascii, but
 223+ 7C4D 49 4E 49 54 >
 223+ 7C51             >                org     $-1                 // alter last byte of Name just above to set
 223+ 7C50 D4          >                db      {b $} | END_BIT     // msb as name end
 223+ 7C51             >
 223+ 7C51 26 7C       >                dw      last_NFA            // Link to previous definition Name
 223+ 7C53             >BLK_INIT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 223+ 7C53 7D 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 223+ 7C55             >                else
 223+ 7C55 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 223+ 7C55             >                endif           ; ok        // for other definitions it "points" the correct handler
 223+ 7C55             >                // Use of "; ok" to suppress "warning[fwdref]"
 223+ 7C55             >
 223+ 7C55             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 224+ 7C55 AC 7B 9B 6B                  dw  BLK_FH, FETCH, F_CLOSE, DROP
 224+ 7C59 CB 67 D3 6A
 225+ 7C5D BC 7B 49 6A                  dw  BLK_FNAME, ONE_PLUS
 226+ 7C61 D9 6E 12 6D                  dw  HERE, THREE, F_OPEN         // open for update (read+write)
 226+ 7C65 4A 68
 227+ 7C67 A9 63 2C 00                  dw  LIT, $2C, QERROR
 227+ 7C6B 9E 70
 228+ 7C6D AC 7B A8 6B                  dw  BLK_FH, STORE
 229+ 7C71 A3 69                        dw  EXIT
 230+ 7C73
 231+ 7C73              //  ______________________________________________________________________
 232+ 7C73              //
 233+ 7C73              // #sec
 234+ 7C73              // number of 512 Byte "sector" available on thie sysstem.
 235+ 7C73              // it addd up to 16 MByte of data that can be used as source or pool for almost anything.
 236+ 7C73
 237+ 7C73                              Constant_Def NSEC , "#SEC", 32767
 237+ 7C73             >                New_Def  NSEC, "#SEC", Constant_Ptr, is_normal
 237+ 7C73             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 237+ 7C73             >
 237+ 7C73             >                // dummy db directives used to calculate length of namec
 237+ 7C73 23 53 45 43 >                db      "#SEC"
 237+ 7C77             >len_NFA         defl    $ - temp_NFA
 237+ 7C77             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 237+ 7C73             >
 237+ 7C73 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 237+ 7C74 23 53 45 43 >                db      "#SEC"               // name string in 7-bit ascii, but
 237+ 7C78             >                org     $-1                 // alter last byte of Name just above to set
 237+ 7C77 C3          >                db      {b $} | END_BIT     // msb as name end
 237+ 7C78             >
 237+ 7C78 48 7C       >                dw      last_NFA            // Link to previous definition Name
 237+ 7C7A             >NSEC:          if Constant_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 237+ 7C7A BC 6C       >                dw      Constant_Ptr ; ok        // for primitive definitions  actual code
 237+ 7C7C             >                else
 237+ 7C7C ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 237+ 7C7C             >                endif           ; ok        // for other definitions it "points" the correct handler
 237+ 7C7C             >                // Use of "; ok" to suppress "warning[fwdref]"
 237+ 7C7C             >
 237+ 7C7C             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 237+ 7C7C FF 7F       >                dw      32767
 238+ 7C7E
 239+ 7C7E              //  ______________________________________________________________________
 240+ 7C7E
 241+ 7C7E
 242+ 7C7E
# file closed: C:\Zx\CSpect\Projects\vForth15_INDIRECT/source/next-opt1.asm
 113  7C7E                              include "L3.asm"
# file opened: C:\Zx\CSpect\Projects\vForth15_INDIRECT/source/L3.asm
   1+ 7C7E              //  ______________________________________________________________________
   2+ 7C7E              //
   3+ 7C7E              //  L3.asm
   4+ 7C7E              //
   5+ 7C7E              //  Continuation of L2.asm
   6+ 7C7E              //  I/O Block definitions
   7+ 7C7E              //  ______________________________________________________________________
   8+ 7C7E
   9+ 7C7E
  10+ 7C7E              //  ______________________________________________________________________
  11+ 7C7E              //
  12+ 7C7E              // r/w          a n f --
  13+ 7C7E              // read/write block n depending on flag f, true-flag means read, false-flag means write.
  14+ 7C7E                              Colon_Def READ_WRITE, "R/W", is_normal
  14+ 7C7E             >                New_Def  READ_WRITE, "R/W", Enter_Ptr, is_normal ; ok
  14+ 7C7E             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  14+ 7C7E             >
  14+ 7C7E             >                // dummy db directives used to calculate length of namec
  14+ 7C7E 52 2F 57    >                db      "R/W"
  14+ 7C81             >len_NFA         defl    $ - temp_NFA
  14+ 7C81             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  14+ 7C7E             >
  14+ 7C7E 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  14+ 7C7F 52 2F 57    >                db      "R/W"               // name string in 7-bit ascii, but
  14+ 7C82             >                org     $-1                 // alter last byte of Name just above to set
  14+ 7C81 D7          >                db      {b $} | END_BIT     // msb as name end
  14+ 7C82             >
  14+ 7C82 73 7C       >                dw      last_NFA            // Link to previous definition Name
  14+ 7C84             >READ_WRITE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
  14+ 7C84 7D 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
  14+ 7C86             >                else
  14+ 7C86 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
  14+ 7C86             >                endif           ; ok        // for other definitions it "points" the correct handler
  14+ 7C86             >                // Use of "; ok" to suppress "warning[fwdref]"
  14+ 7C86             >
  14+ 7C86             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  15+ 7C86 B6 69                        dw      TO_R                    // >r
  16+ 7C88 55 6A                        dw      ONE_SUBTRACT            // 1-
  17+ 7C8A 08 6B 00 6A                  dw      DUP, ZLESS              // dup 0<
  18+ 7C8E C3 6A 7A 7C                  dw      OVER, NSEC              // over #sec
  19+ 7C92 55 6A 72 6F                  dw      ONE_SUBTRACT, GREATER   // 1- >
  20+ 7C96 45 69                        dw      OR_OP                   // or
  21+ 7C98 A9 63 06 00                  dw      LIT, 6, QERROR          // 6 ?error
  21+ 7C9C 9E 70
  22+ 7C9E CA 69                        dw      R_TO                    // r>
  23+ 7CA0                                                              // if
  24+ 7CA0 2C 64                        dw      ZBRANCH
  25+ 7CA2 08 00                        dw      Read_Write_Else - $
  26+ 7CA4 10 7C                        dw          BLK_READ            //      blk-read
  27+ 7CA6 15 64                        dw      BRANCH
  28+ 7CA8 04 00                        dw      Read_Write_Endif - $
  29+ 7CAA              Read_Write_Else:                                // else
  30+ 7CAA 32 7C                        dw          BLK_WRITE           //      blk-write
  31+ 7CAC              Read_Write_Endif:                               // endif
  32+ 7CAC A3 69                        dw      EXIT                    // ;
  33+ 7CAE
  34+ 7CAE
  35+ 7CAE              //  ______________________________________________________________________
  36+ 7CAE              //
  37+ 7CAE              // +buf        a1 -- a2 f
  38+ 7CAE              // advences to next buffer, cyclically rotating along them
  39+ 7CAE                              Colon_Def PBUF, "+BUF", is_normal
  39+ 7CAE             >                New_Def  PBUF, "+BUF", Enter_Ptr, is_normal ; ok
  39+ 7CAE             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  39+ 7CAE             >
  39+ 7CAE             >                // dummy db directives used to calculate length of namec
  39+ 7CAE 2B 42 55 46 >                db      "+BUF"
  39+ 7CB2             >len_NFA         defl    $ - temp_NFA
  39+ 7CB2             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  39+ 7CAE             >
  39+ 7CAE 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  39+ 7CAF 2B 42 55 46 >                db      "+BUF"               // name string in 7-bit ascii, but
  39+ 7CB3             >                org     $-1                 // alter last byte of Name just above to set
  39+ 7CB2 C6          >                db      {b $} | END_BIT     // msb as name end
  39+ 7CB3             >
  39+ 7CB3 7E 7C       >                dw      last_NFA            // Link to previous definition Name
  39+ 7CB5             >PBUF:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
  39+ 7CB5 7D 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
  39+ 7CB7             >                else
  39+ 7CB7 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
  39+ 7CB7             >                endif           ; ok        // for other definitions it "points" the correct handler
  39+ 7CB7             >                // Use of "; ok" to suppress "warning[fwdref]"
  39+ 7CB7             >
  39+ 7CB7             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  40+ 7CB7 A9 63 04 02                  dw      LIT, 516, PLUS          // 516 +
  40+ 7CBB 28 6A
  41+ 7CBD 08 6B DC 6D                  dw      DUP, LIMIT, FETCH       // dup limit @
  41+ 7CC1 9B 6B
  42+ 7CC3 3A 6F                        dw      EQUALS                  // =
  43+ 7CC5                                                              // if
  44+ 7CC5 2C 64                        dw      ZBRANCH
  45+ 7CC7 08 00                        dw      PBuf_Endif - $
  46+ 7CC9 D3 6A                        dw          DROP                //      drop
  47+ 7CCB D1 6D 9B 6B                  dw          FIRST, FETCH        //      first @
  48+ 7CCF              PBuf_Endif:                                     // endif
  49+ 7CCF 08 6B 8E 6E                  dw      DUP, PREV, FETCH        // dup prev @
  49+ 7CD3 9B 6B
  50+ 7CD5 2C 6F                        dw      SUBTRACT                // -
  51+ 7CD7 A3 69                        dw      EXIT                    // ;
  52+ 7CD9
  53+ 7CD9              //  ______________________________________________________________________
  54+ 7CD9              //
  55+ 7CD9              // update       --
  56+ 7CD9              // mark the last used block to be written to disk
  57+ 7CD9                              Colon_Def UPDATE, "UPDATE", is_normal
  57+ 7CD9             >                New_Def  UPDATE, "UPDATE", Enter_Ptr, is_normal ; ok
  57+ 7CD9             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  57+ 7CD9             >
  57+ 7CD9             >                // dummy db directives used to calculate length of namec
  57+ 7CD9 55 50 44 41 >                db      "UPDATE"
  57+ 7CDD 54 45       >
  57+ 7CDF             >len_NFA         defl    $ - temp_NFA
  57+ 7CDF             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  57+ 7CD9             >
  57+ 7CD9 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  57+ 7CDA 55 50 44 41 >                db      "UPDATE"               // name string in 7-bit ascii, but
  57+ 7CDE 54 45       >
  57+ 7CE0             >                org     $-1                 // alter last byte of Name just above to set
  57+ 7CDF C5          >                db      {b $} | END_BIT     // msb as name end
  57+ 7CE0             >
  57+ 7CE0 AE 7C       >                dw      last_NFA            // Link to previous definition Name
  57+ 7CE2             >UPDATE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
  57+ 7CE2 7D 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
  57+ 7CE4             >                else
  57+ 7CE4 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
  57+ 7CE4             >                endif           ; ok        // for other definitions it "points" the correct handler
  57+ 7CE4             >                // Use of "; ok" to suppress "warning[fwdref]"
  57+ 7CE4             >
  57+ 7CE4             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  58+ 7CE4 8E 6E 9B 6B                  dw      PREV, FETCH, FETCH      // prev @ @
  58+ 7CE8 9B 6B
  59+ 7CEA A9 63 00 80                  dw      LIT, $8000, OR_OP       // $8000, or
  59+ 7CEE 45 69
  60+ 7CF0 8E 6E 9B 6B                  dw      PREV, FETCH, STORE      // prev @ !
  60+ 7CF4 A8 6B
  61+ 7CF6 A3 69                        dw      EXIT                    // ;
  62+ 7CF8
  63+ 7CF8
  64+ 7CF8              //  ______________________________________________________________________
  65+ 7CF8              //
  66+ 7CF8              // empty-buffers --
  67+ 7CF8                              Colon_Def EMPTY_BUFFERS, "EMPTY-BUFFERS", is_normal
  67+ 7CF8             >                New_Def  EMPTY_BUFFERS, "EMPTY-BUFFERS", Enter_Ptr, is_normal ; ok
  67+ 7CF8             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  67+ 7CF8             >
  67+ 7CF8             >                // dummy db directives used to calculate length of namec
  67+ 7CF8 45 4D 50 54 >                db      "EMPTY-BUFFERS"
  67+ 7CFC 59 2D 42 55 >
  67+ 7D00 46 46 45 52 >
  67+ 7D04 53          >
  67+ 7D05             >len_NFA         defl    $ - temp_NFA
  67+ 7D05             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  67+ 7CF8             >
  67+ 7CF8 8D          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  67+ 7CF9 45 4D 50 54 >                db      "EMPTY-BUFFERS"               // name string in 7-bit ascii, but
  67+ 7CFD 59 2D 42 55 >
  67+ 7D01 46 46 45 52 >
  67+ 7D05 53          >
  67+ 7D06             >                org     $-1                 // alter last byte of Name just above to set
  67+ 7D05 D3          >                db      {b $} | END_BIT     // msb as name end
  67+ 7D06             >
  67+ 7D06 D9 7C       >                dw      last_NFA            // Link to previous definition Name
  67+ 7D08             >EMPTY_BUFFERS:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
  67+ 7D08 7D 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
  67+ 7D0A             >                else
  67+ 7D0A ~           >                dw      $ + 2   ; ok        // is pointed by CFA
  67+ 7D0A             >                endif           ; ok        // for other definitions it "points" the correct handler
  67+ 7D0A             >                // Use of "; ok" to suppress "warning[fwdref]"
  67+ 7D0A             >
  67+ 7D0A             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  68+ 7D0A D1 6D 9B 6B                  dw      FIRST, FETCH            // first @
  69+ 7D0E DC 6D 9B 6B                  dw      LIMIT, FETCH            // limit @
  70+ 7D12 C3 6A 2C 6F                  dw      OVER, SUBTRACT, ERASE   // over - erase
  70+ 7D16 D8 73
  71+ 7D18 A3 69                        dw      EXIT                    // ;
  72+ 7D1A
  73+ 7D1A              //  ______________________________________________________________________
  74+ 7D1A              //
  75+ 7D1A              // buffer       n -- a
  76+ 7D1A              // read block n and gives the address to a buffer
  77+ 7D1A              // any block previously inside the buffer, if modified, is rewritten to
  78+ 7D1A              // disk before reading the block n.
  79+ 7D1A
  80+ 7D1A                              Colon_Def BUFFER, "BUFFER", is_normal
  80+ 7D1A             >                New_Def  BUFFER, "BUFFER", Enter_Ptr, is_normal ; ok
  80+ 7D1A             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  80+ 7D1A             >
  80+ 7D1A             >                // dummy db directives used to calculate length of namec
  80+ 7D1A 42 55 46 46 >                db      "BUFFER"
  80+ 7D1E 45 52       >
  80+ 7D20             >len_NFA         defl    $ - temp_NFA
  80+ 7D20             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  80+ 7D1A             >
  80+ 7D1A 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  80+ 7D1B 42 55 46 46 >                db      "BUFFER"               // name string in 7-bit ascii, but
  80+ 7D1F 45 52       >
  80+ 7D21             >                org     $-1                 // alter last byte of Name just above to set
  80+ 7D20 D2          >                db      {b $} | END_BIT     // msb as name end
  80+ 7D21             >
  80+ 7D21 F8 7C       >                dw      last_NFA            // Link to previous definition Name
  80+ 7D23             >BUFFER:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
  80+ 7D23 7D 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
  80+ 7D25             >                else
  80+ 7D25 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
  80+ 7D25             >                endif           ; ok        // for other definitions it "points" the correct handler
  80+ 7D25             >                // Use of "; ok" to suppress "warning[fwdref]"
  80+ 7D25             >
  80+ 7D25             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  81+ 7D25 84 6E 9B 6B                  dw      USE, FETCH              // use @
  82+ 7D29 08 6B B6 69                  dw      DUP, TO_R               // dup >r
  83+ 7D2D                                                              // begin
  84+ 7D2D              Buffer_Begin:
  85+ 7D2D B5 7C                        dw          PBUF                //      +buf
  86+ 7D2F                                                              // until
  87+ 7D2F 2C 64                        dw      ZBRANCH
  88+ 7D31 FC FF                        dw      Buffer_Begin - $
  89+ 7D33 84 6E A8 6B                  dw      USE, STORE              // use !
  90+ 7D37 DE 69 9B 6B                  dw      R_OP, FETCH, ZLESS      // r @ 0<
  90+ 7D3B 00 6A
  91+ 7D3D                                                              // if
  92+ 7D3D 2C 64                        dw      ZBRANCH
  93+ 7D3F 14 00                        dw      Buffer_Endif - $
  94+ 7D41 DE 69 71 6A                  dw          R_OP, CELL_PLUS     //      r cell+
  95+ 7D45 DE 69 9B 6B                  dw          R_OP, FETCH         //      r fetch
  96+ 7D49 A9 63 FF 7F                  dw          LIT, $7FFF          //      7FFF
  97+ 7D4D 33 69                        dw          AND_OP              //      and
  98+ 7D4F FA 6C 84 7C                  dw          ZERO, READ_WRITE    //      0 r/w
  99+ 7D53              Buffer_Endif:                                   // endif
 100+ 7D53 DE 69 A8 6B                  dw      R_OP, STORE             // r !
 101+ 7D57 DE 69 8E 6E                  dw      R_OP, PREV, STORE       // r prev !
 101+ 7D5B A8 6B
 102+ 7D5D CA 69 71 6A                  dw      R_TO, CELL_PLUS         // r> cell+
 103+ 7D61 A3 69                        dw      EXIT                    // ;
 104+ 7D63
 105+ 7D63              //  ______________________________________________________________________
 106+ 7D63              //
 107+ 7D63              // block        n -- a
 108+ 7D63              // Leaves the buffer address that contains the block n.
 109+ 7D63              // If the block is not already present, it will be loaded from disk
 110+ 7D63              // The block previously inside the buffer, if modified, is rewritten to
 111+ 7D63              // disk before reading the block n.
 112+ 7D63              // See also BUFFER, R/W, UPDATE, FLUSH.
 113+ 7D63
 114+ 7D63                              Colon_Def BLOCK, "BLOCK", is_normal
 114+ 7D63             >                New_Def  BLOCK, "BLOCK", Enter_Ptr, is_normal ; ok
 114+ 7D63             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 114+ 7D63             >
 114+ 7D63             >                // dummy db directives used to calculate length of namec
 114+ 7D63 42 4C 4F 43 >                db      "BLOCK"
 114+ 7D67 4B          >
 114+ 7D68             >len_NFA         defl    $ - temp_NFA
 114+ 7D68             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 114+ 7D63             >
 114+ 7D63 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 114+ 7D64 42 4C 4F 43 >                db      "BLOCK"               // name string in 7-bit ascii, but
 114+ 7D68 4B          >
 114+ 7D69             >                org     $-1                 // alter last byte of Name just above to set
 114+ 7D68 CB          >                db      {b $} | END_BIT     // msb as name end
 114+ 7D69             >
 114+ 7D69 1A 7D       >                dw      last_NFA            // Link to previous definition Name
 114+ 7D6B             >BLOCK:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 114+ 7D6B 7D 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 114+ 7D6D             >                else
 114+ 7D6D ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 114+ 7D6D             >                endif           ; ok        // for other definitions it "points" the correct handler
 114+ 7D6D             >                // Use of "; ok" to suppress "warning[fwdref]"
 114+ 7D6D             >
 114+ 7D6D             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 115+ 7D6D 20 6E 9B 6B                  dw      OFFSET, FETCH           // offset @
 116+ 7D71 28 6A B6 69                  dw      PLUS, TO_R              // + >r
 117+ 7D75 8E 6E 9B 6B                  dw      PREV, FETCH             // prev @
 118+ 7D79 08 6B 9B 6B                  dw      DUP, FETCH              // dup @
 119+ 7D7D DE 69 2C 6F                  dw      R_OP, SUBTRACT          // r -
 120+ 7D81 08 6B 28 6A                  dw      DUP, PLUS               // dup +  ( trick: check equality without most significant bit )
 121+ 7D85                                                              // if
 122+ 7D85 2C 64                        dw        ZBRANCH
 123+ 7D87 32 00                        dw        Block_Endif_1 - $
 124+ 7D89              Block_Begin:                                    //      begin
 125+ 7D89 B5 7C E5 69                  dw          PBUF, ZEQUAL        //          +buf 0
 126+ 7D8D                                                              //          if
 127+ 7D8D 2C 64                        dw          ZBRANCH
 128+ 7D8F 12 00                        dw          Block_Endif_2 - $
 129+ 7D91 D3 6A                        dw              DROP            //              drop
 130+ 7D93 DE 69 23 7D                  dw              R_OP, BUFFER    //              r buffer
 131+ 7D97 08 6B                        dw              DUP             //              dup
 132+ 7D99 DE 69 02 6D                  dw              R_OP, ONE       //              r 1
 133+ 7D9D 84 7C                        dw              READ_WRITE      //              r/w
 134+ 7D9F 88 6A                        dw              TWO_MINUS       //              2-
 135+ 7DA1              Block_Endif_2:                                  //          endif
 136+ 7DA1 08 6B 9B 6B                  dw          DUP, FETCH, R_OP    //          dup @ r
 136+ 7DA5 DE 69
 137+ 7DA7 2C 6F 08 6B                  dw          SUBTRACT, DUP       //          - dup
 138+ 7DAB 28 6A E5 69                  dw          PLUS, ZEQUAL        //          + 0=
 139+ 7DAF                                                              //      until
 140+ 7DAF 2C 64                        dw        ZBRANCH
 141+ 7DB1 D8 FF                        dw        Block_Begin - $
 142+ 7DB3 08 6B 8E 6E                  dw        DUP, PREV, STORE      //      dup prev !
 142+ 7DB7 A8 6B
 143+ 7DB9              Block_Endif_1:                                  // endif
 144+ 7DB9 CA 69 D3 6A                  dw      R_TO, DROP, CELL_PLUS   // r> drop cell+
 144+ 7DBD 71 6A
 145+ 7DBF A3 69                        dw      EXIT                    // ;
 146+ 7DC1
 147+ 7DC1              //  ______________________________________________________________________
 148+ 7DC1              //
 149+ 7DC1              // #buff        -- n
 150+ 7DC1              // number of buffers available. must be the difference between LIMIT and FIRST divided by 516
 151+ 7DC1                              Constant_Def NBUFF,   "#BUFF", 7
 151+ 7DC1             >                New_Def  NBUFF, "#BUFF", Constant_Ptr, is_normal
 151+ 7DC1             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 151+ 7DC1             >
 151+ 7DC1             >                // dummy db directives used to calculate length of namec
 151+ 7DC1 23 42 55 46 >                db      "#BUFF"
 151+ 7DC5 46          >
 151+ 7DC6             >len_NFA         defl    $ - temp_NFA
 151+ 7DC6             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 151+ 7DC1             >
 151+ 7DC1 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 151+ 7DC2 23 42 55 46 >                db      "#BUFF"               // name string in 7-bit ascii, but
 151+ 7DC6 46          >
 151+ 7DC7             >                org     $-1                 // alter last byte of Name just above to set
 151+ 7DC6 C6          >                db      {b $} | END_BIT     // msb as name end
 151+ 7DC7             >
 151+ 7DC7 63 7D       >                dw      last_NFA            // Link to previous definition Name
 151+ 7DC9             >NBUFF:          if Constant_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 151+ 7DC9 BC 6C       >                dw      Constant_Ptr ; ok        // for primitive definitions  actual code
 151+ 7DCB             >                else
 151+ 7DCB ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 151+ 7DCB             >                endif           ; ok        // for other definitions it "points" the correct handler
 151+ 7DCB             >                // Use of "; ok" to suppress "warning[fwdref]"
 151+ 7DCB             >
 151+ 7DCB             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 151+ 7DCB 07 00       >                dw      7
 152+ 7DCD
 153+ 7DCD              //  ______________________________________________________________________
 154+ 7DCD              //
 155+ 7DCD              // flush        --
 156+ 7DCD                              Colon_Def FLUSH, "FLUSH", is_normal
 156+ 7DCD             >                New_Def  FLUSH, "FLUSH", Enter_Ptr, is_normal ; ok
 156+ 7DCD             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 156+ 7DCD             >
 156+ 7DCD             >                // dummy db directives used to calculate length of namec
 156+ 7DCD 46 4C 55 53 >                db      "FLUSH"
 156+ 7DD1 48          >
 156+ 7DD2             >len_NFA         defl    $ - temp_NFA
 156+ 7DD2             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 156+ 7DCD             >
 156+ 7DCD 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 156+ 7DCE 46 4C 55 53 >                db      "FLUSH"               // name string in 7-bit ascii, but
 156+ 7DD2 48          >
 156+ 7DD3             >                org     $-1                 // alter last byte of Name just above to set
 156+ 7DD2 C8          >                db      {b $} | END_BIT     // msb as name end
 156+ 7DD3             >
 156+ 7DD3 C1 7D       >                dw      last_NFA            // Link to previous definition Name
 156+ 7DD5             >FLUSH:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 156+ 7DD5 7D 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 156+ 7DD7             >                else
 156+ 7DD7 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 156+ 7DD7             >                endif           ; ok        // for other definitions it "points" the correct handler
 156+ 7DD7             >                // Use of "; ok" to suppress "warning[fwdref]"
 156+ 7DD7             >
 156+ 7DD7             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 157+ 7DD7 C9 7D 49 6A                  dw      NBUFF, ONE_PLUS, ZERO   // #buff 1+ 0
 157+ 7DDB FA 6C
 158+ 7DDD              Flush_Do:                                       // do
 159+ 7DDD 86 64                        dw      C_DO
 160+ 7DDF FA 6C 23 7D                  dw      ZERO, BUFFER, DROP      //      0 buffer drop
 160+ 7DE3 D3 6A
 161+ 7DE5                                                              // loop
 162+ 7DE5 04 64 F8 FF                  dw      C_LOOP, Flush_Do - $
 163+ 7DE9 AC 7B 9B 6B                  dw      BLK_FH, FETCH           // blk-fh @     ( ZX-Next dependance )
 164+ 7DED DF 67 D3 6A                  dw      F_SYNC, DROP            // f_sync drop
 165+ 7DF1 A3 69                        dw      EXIT                    // exit
 166+ 7DF3
 167+ 7DF3              //  ______________________________________________________________________
 168+ 7DF3              //
 169+ 7DF3              // f_getline    a m fh -- n
 170+ 7DF3              // Given an open filehandle read next line (terminated with $0D or $0A)
 171+ 7DF3              // Address a is left for subsequent processing
 172+ 7DF3              // and n as the actual number of byte read, that is the length of line
 173+ 7DF3                              Colon_Def F_GETLINE, "F_GETLINE", is_normal
 173+ 7DF3             >                New_Def  F_GETLINE, "F_GETLINE", Enter_Ptr, is_normal ; ok
 173+ 7DF3             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 173+ 7DF3             >
 173+ 7DF3             >                // dummy db directives used to calculate length of namec
 173+ 7DF3 46 5F 47 45 >                db      "F_GETLINE"
 173+ 7DF7 54 4C 49 4E >
 173+ 7DFB 45          >
 173+ 7DFC             >len_NFA         defl    $ - temp_NFA
 173+ 7DFC             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 173+ 7DF3             >
 173+ 7DF3 89          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 173+ 7DF4 46 5F 47 45 >                db      "F_GETLINE"               // name string in 7-bit ascii, but
 173+ 7DF8 54 4C 49 4E >
 173+ 7DFC 45          >
 173+ 7DFD             >                org     $-1                 // alter last byte of Name just above to set
 173+ 7DFC C5          >                db      {b $} | END_BIT     // msb as name end
 173+ 7DFD             >
 173+ 7DFD CD 7D       >                dw      last_NFA            // Link to previous definition Name
 173+ 7DFF             >F_GETLINE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 173+ 7DFF 7D 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 173+ 7E01             >                else
 173+ 7E01 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 173+ 7E01             >                endif           ; ok        // for other definitions it "points" the correct handler
 173+ 7E01             >                // Use of "; ok" to suppress "warning[fwdref]"
 173+ 7E01             >
 173+ 7E01             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 174+ 7E01 B6 69                        dw      TO_R                    // >r               ( a  m  )     \  fh
 175+ 7E03 EB 6A                        dw      TUCK                    // tuck             ( m a m )
 176+ 7E05 DE 69 F6 67                  dw      R_OP, F_FGETPOS         // r f_fgetpos      ( m a m d f )
 177+ 7E09 A9 63 2C 00                  dw      LIT, 44, QERROR         // 44 ?error        ( m a m d )
 177+ 7E0D 9E 70
 178+ 7E0F
 179+ 7E0F 57 6B C3 6A                  dw      TWO_SWAP, OVER          // 2swap over       ( m d a m )
 180+ 7E13 49 6A FB 6A                  dw      ONE_PLUS, SWAP          // 1+ swap          ( m d a a+1 m )
 181+ 7E17
 182+ 7E17 DE 69 14 68                  dw      R_OP, F_READ            // r f_read         ( m d a n f )
 183+ 7E1B A9 63 2E 00                  dw      LIT, 46, QERROR         // 46 ?error        ( m d a n )
 183+ 7E1F 9E 70
 184+ 7E21                                                              // if ( at least 1 chr was read )  \  fh
 185+ 7E21 2C 64                        dw      ZBRANCH
 186+ 7E23 3C 00                        dw      FGetline_Else - $
 187+ 7E25 A9 63 0A 00                  dw          LIT, 10, ENCLOSE    //      10 enclose       ( m d a x b x )
 187+ 7E29 7E 65
 188+ 7E2B D3 6A DE 6A                  dw          DROP, NIP           //      drop nip         ( m d a b )
 189+ 7E2F FB 6A                        dw          SWAP                //      drop swap        ( m d b a )
 190+ 7E31 A9 63 0D 00                  dw          LIT, 13, ENCLOSE    //      13 enclose       ( m d b a x c x )
 190+ 7E35 7E 65
 191+ 7E37 D3 6A DE 6A                  dw          DROP, NIP           //      drop nip         ( m d b a c )
 192+ 7E3B 15 6B 80 6F                  dw          ROT, MIN            //      rot min          ( m d a n )
 193+ 7E3F 08 6B BA 6E                  dw          DUP, SPAN, STORE    //      dup span !       ( m d a n )
 193+ 7E43 A8 6B
 194+ 7E45 08 6B B6 69                  dw          DUP, TO_R           //      dup >r           ( m d a n )      \ fh n
 195+ 7E49 57 6B CA 69                  dw          TWO_SWAP, R_TO      //      2swap r>         ( m a n d n )    \ fh
 196+ 7E4D FA 6C 35 6A                  dw          ZERO, DPLUS         //      0 d+             ( m a n d+n )
 197+ 7E51 CA 69 A8 67                  dw          R_TO, F_SEEK        //      r> f_seek        ( m a n f )
 198+ 7E55 A9 63 2D 00                  dw          LIT, 45, QERROR     //      45 ?error        ( m a n )
 198+ 7E59 9E 70
 199+ 7E5B                                                              // else
 200+ 7E5B 15 64                        dw      BRANCH
 201+ 7E5D 0C 00                        dw      FGetline_Endif - $
 202+ 7E5F              FGetline_Else:
 203+ 7E5F CA 69                        dw          R_TO                //      r>              ( m d a fh )
 204+ 7E61 57 6B 49 6B                  dw          TWO_SWAP, TWO_DROP  //      2swap 2drop     ( m a fh )
 205+ 7E65 D3 6A FA 6C                  dw          DROP, ZERO          //      drop, 0         ( m a 0 )
 206+ 7E69              FGetline_Endif:                                 // endif
 207+ 7E69 B6 69 08 6B                  dw      TO_R, DUP, DUP          // >r dup dup           ( m a a a )
 207+ 7E6D 08 6B
 208+ 7E6F 49 6A FB 6A                  dw      ONE_PLUS, SWAP          // 1+ swap              ( m a a+1 a )
 209+ 7E73 DE 69 96 68                  dw      R_OP, CMOVE             // r cmove              ( m a )
 210+ 7E77 69 6B 28 6A                  dw      TWO_DUP, PLUS           // 2dup +               ( m a m+a )
 211+ 7E7B FA 6C FB 6A                  dw      ZERO, SWAP              // 0 swap
 212+ 7E7F 7B 6A A8 6B                  dw      CELL_MINUS,  STORE      // cell-  !             ( m a )
 213+ 7E83 DE 69 28 6A                  dw      R_OP, PLUS, ONE_SUBTRACT// r + 1-               ( m a+n1 )
 213+ 7E87 55 6A
 214+ 7E89 FB 6A DE 69                  dw      SWAP, R_OP, SUBTRACT    // swap r -             ( a+n+1 m-n )
 214+ 7E8D 2C 6F
 215+ 7E8F E8 73                        dw      BLANK                   // blank
 216+ 7E91 CA 69                        dw      R_TO                    // r>                   ( n )
 217+ 7E93 A3 69                        dw      EXIT                    // ;
 218+ 7E95
 219+ 7E95              //  ______________________________________________________________________
 220+ 7E95              //
 221+ 7E95              // f_include    fh --
 222+ 7E95              // Given a filehandle includes the source from file
 223+ 7E95                              Colon_Def F_INCLUDE, "F_INCLUDE", is_normal
 223+ 7E95             >                New_Def  F_INCLUDE, "F_INCLUDE", Enter_Ptr, is_normal ; ok
 223+ 7E95             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 223+ 7E95             >
 223+ 7E95             >                // dummy db directives used to calculate length of namec
 223+ 7E95 46 5F 49 4E >                db      "F_INCLUDE"
 223+ 7E99 43 4C 55 44 >
 223+ 7E9D 45          >
 223+ 7E9E             >len_NFA         defl    $ - temp_NFA
 223+ 7E9E             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 223+ 7E95             >
 223+ 7E95 89          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 223+ 7E96 46 5F 49 4E >                db      "F_INCLUDE"               // name string in 7-bit ascii, but
 223+ 7E9A 43 4C 55 44 >
 223+ 7E9E 45          >
 223+ 7E9F             >                org     $-1                 // alter last byte of Name just above to set
 223+ 7E9E C5          >                db      {b $} | END_BIT     // msb as name end
 223+ 7E9F             >
 223+ 7E9F F3 7D       >                dw      last_NFA            // Link to previous definition Name
 223+ 7EA1             >F_INCLUDE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 223+ 7EA1 7D 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 223+ 7EA3             >                else
 223+ 7EA3 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 223+ 7EA3             >                endif           ; ok        // for other definitions it "points" the correct handler
 223+ 7EA3             >                // Use of "; ok" to suppress "warning[fwdref]"
 223+ 7EA3             >
 223+ 7EA3             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 224+ 7EA3 F9 6D 9B 6B                  dw      BLK, FETCH, TO_R        // blk @ >r
 224+ 7EA7 B6 69
 225+ 7EA9 02 6E 9B 6B                  dw      TO_IN, FETCH, TO_R      // >in @ >r
 225+ 7EAD B6 69
 226+ 7EAF B0 6E 9B 6B                  dw      SOURCE_ID, FETCH, TO_R  // source-id @ >r
 226+ 7EB3 B6 69
 227+ 7EB5 DE 69                        dw      R_OP                    // r
 228+ 7EB7                                                              // if
 229+ 7EB7 2C 64                        dw      ZBRANCH
 230+ 7EB9 20 00                        dw      FInclude_Else_1 - $
 231+ 7EBB DE 69 F6 67                  dw          R_OP, F_FGETPOS     //      r f_getpos
 232+ 7EBF A9 63 2C 00                  dw          LIT, 44, QERROR     //      44 ?error
 232+ 7EC3 9E 70
 233+ 7EC5 02 6E 9B 6B                  dw          TO_IN, FETCH        //      >in @ 2-
 234+ 7EC9 88 6A                        dw          TWO_MINUS
 235+ 7ECB BA 6E 9B 6B                  dw          SPAN, FETCH         //      span @ -
 236+ 7ECF 2C 6F                        dw          SUBTRACT
 237+ 7ED1 18 6F 35 6A                  dw          S_TO_D, DPLUS       //      s>d d+
 238+ 7ED5                                                              // else
 239+ 7ED5 15 64                        dw      BRANCH
 240+ 7ED7 06 00                        dw      FInclude_Endif_1 - $
 241+ 7ED9              FInclude_Else_1:
 242+ 7ED9 FA 6C FA 6C                  dw          ZERO, ZERO          //      0 0
 243+ 7EDD                                                              // endif
 244+ 7EDD              FInclude_Endif_1:
 245+ 7EDD B6 69 B6 69                  dw      TO_R, TO_R              // >r >r
 246+ 7EE1 B0 6E A8 6B                  dw      SOURCE_ID, STORE        // source-id !
 247+ 7EE5              FInclude_Begin:                                 // begin
 248+ 7EE5 02 6D 6B 7D                  dw          ONE, BLOCK, BBUF    //      1 block b/buf
 248+ 7EE9 3A 6D
 249+ 7EEB 69 6B E8 73                  dw          TWO_DUP, BLANK      //      2dup blank
 250+ 7EEF FB 6A 49 6A                  dw          SWAP, ONE_PLUS      //      swap 1+
 251+ 7EF3 FB 6A 7B 6A                  dw          SWAP, CELL_MINUS    //      swap cell-
 252+ 7EF7 B0 6E 9B 6B                  dw          SOURCE_ID, FETCH    //      source-id @
 253+ 7EFB FF 7D                        dw          F_GETLINE           //      f_getline
 254+ 7EFD                                                              // while
 255+ 7EFD 2C 64                        dw      ZBRANCH
 256+ 7EFF 14 00                        dw      FInclude_Repeat - $
 257+ 7F01 02 6D F9 6D                  dw          ONE, BLK, STORE     //      1 blk !
 257+ 7F05 A8 6B
 258+ 7F07 FA 6C 02 6E                  dw          ZERO, TO_IN, STORE  //      0 >in !
 258+ 7F0B A8 6B
 259+ 7F0D C0 77                        dw          INTERPRET           //      interpret
 260+ 7F0F 15 64                        dw      BRANCH
 261+ 7F11 D4 FF                        dw      FInclude_Begin - $
 262+ 7F13              FInclude_Repeat:                                // repeat
 263+ 7F13 B0 6E 9B 6B                  dw      SOURCE_ID, FETCH        // source-id @
 264+ 7F17 FA 6C B0 6E                  dw      ZERO, SOURCE_ID, STORE  // 0 source-id !
 264+ 7F1B A8 6B
 265+ 7F1D CB 67                        dw      F_CLOSE                 // f_close
 266+ 7F1F A9 63 2A 00                  dw      LIT, 42, QERROR         // 42 ?error
 266+ 7F23 9E 70
 267+ 7F25 CA 69 CA 69                  dw      R_TO, R_TO, R_TO        // r> r> r>
 267+ 7F29 CA 69
 268+ 7F2B 08 6B B0 6E                  dw      DUP, SOURCE_ID, STORE   // dup source-id !
 268+ 7F2F A8 6B
 269+ 7F31                                                              // if
 270+ 7F31 2C 64                        dw      ZBRANCH
 271+ 7F33 12 00                        dw      FInclude_Else_2 - $
 272+ 7F35 B0 6E 9B 6B                  dw          SOURCE_ID, FETCH    //      source-id @
 273+ 7F39 A8 67                        dw          F_SEEK              //      f_seek
 274+ 7F3B A9 63 2B 00                  dw          LIT, 43, QERROR     //      43, ?error
 274+ 7F3F 9E 70
 275+ 7F41                                                              // else
 276+ 7F41 15 64                        dw      BRANCH
 277+ 7F43 04 00                        dw      FInclude_Endif_2 - $
 278+ 7F45              FInclude_Else_2:
 279+ 7F45 49 6B                        dw          TWO_DROP            //      2drop
 280+ 7F47              FInclude_Endif_2:                               // endif
 281+ 7F47 CA 69 02 6E                  dw      R_TO, TO_IN, STORE      // r> >in !
 281+ 7F4B A8 6B
 282+ 7F4D CA 69 F9 6D                  dw      R_TO, BLK, STORE        // r> blk !
 282+ 7F51 A8 6B
 283+ 7F53 A3 69                        dw      EXIT                    // ;
 284+ 7F55
 285+ 7F55              //  ______________________________________________________________________
 286+ 7F55              //
 287+ 7F55              // open<         -- fh
 288+ 7F55              // Open the following filename and return it file-handle
 289+ 7F55              // Used in the form OPEN CCCC
 290+ 7F55                              Colon_Def OPEN_FH, "OPEN<", is_normal
 290+ 7F55             >                New_Def  OPEN_FH, "OPEN<", Enter_Ptr, is_normal ; ok
 290+ 7F55             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 290+ 7F55             >
 290+ 7F55             >                // dummy db directives used to calculate length of namec
 290+ 7F55 4F 50 45 4E >                db      "OPEN<"
 290+ 7F59 3C          >
 290+ 7F5A             >len_NFA         defl    $ - temp_NFA
 290+ 7F5A             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 290+ 7F55             >
 290+ 7F55 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 290+ 7F56 4F 50 45 4E >                db      "OPEN<"               // name string in 7-bit ascii, but
 290+ 7F5A 3C          >
 290+ 7F5B             >                org     $-1                 // alter last byte of Name just above to set
 290+ 7F5A BC          >                db      {b $} | END_BIT     // msb as name end
 290+ 7F5B             >
 290+ 7F5B 95 7E       >                dw      last_NFA            // Link to previous definition Name
 290+ 7F5D             >OPEN_FH:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 290+ 7F5D 7D 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 290+ 7F5F             >                else
 290+ 7F5F ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 290+ 7F5F             >                endif           ; ok        // for other definitions it "points" the correct handler
 290+ 7F5F             >                // Use of "; ok" to suppress "warning[fwdref]"
 290+ 7F5F             >
 290+ 7F5F             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 291+ 7F5F 24 6D                        dw      BL
 292+ 7F61 20 74 38 72                  dw      WORD, COUNT, OVER       // bl word count over
 292+ 7F65 C3 6A
 293+ 7F67 28 6A FA 6C                  dw      PLUS, ZERO, SWAP, STORE // + 0 swap !
 293+ 7F6B FB 6A A8 6B
 294+ 7F6F 0D 74 02 6D                  dw      PAD, ONE, F_OPEN        // pad 1 f_open
 294+ 7F73 4A 68
 295+ 7F75 A9 63 2B 00                  dw      LIT, 43                 // 43
 296+ 7F79 9E 70                        dw      QERROR                  // ?error
 297+ 7F7B A3 69                        dw      EXIT                    // ;
 298+ 7F7D
 299+ 7F7D              //  ______________________________________________________________________
 300+ 7F7D              //
 301+ 7F7D              // include      -- cccc
 302+ 7F7D              // Include the following filename
 303+ 7F7D                              Colon_Def INCLUDE, "INCLUDE", is_normal
 303+ 7F7D             >                New_Def  INCLUDE, "INCLUDE", Enter_Ptr, is_normal ; ok
 303+ 7F7D             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 303+ 7F7D             >
 303+ 7F7D             >                // dummy db directives used to calculate length of namec
 303+ 7F7D 49 4E 43 4C >                db      "INCLUDE"
 303+ 7F81 55 44 45    >
 303+ 7F84             >len_NFA         defl    $ - temp_NFA
 303+ 7F84             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 303+ 7F7D             >
 303+ 7F7D 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 303+ 7F7E 49 4E 43 4C >                db      "INCLUDE"               // name string in 7-bit ascii, but
 303+ 7F82 55 44 45    >
 303+ 7F85             >                org     $-1                 // alter last byte of Name just above to set
 303+ 7F84 C5          >                db      {b $} | END_BIT     // msb as name end
 303+ 7F85             >
 303+ 7F85 55 7F       >                dw      last_NFA            // Link to previous definition Name
 303+ 7F87             >INCLUDE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 303+ 7F87 7D 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 303+ 7F89             >                else
 303+ 7F89 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 303+ 7F89             >                endif           ; ok        // for other definitions it "points" the correct handler
 303+ 7F89             >                // Use of "; ok" to suppress "warning[fwdref]"
 303+ 7F89             >
 303+ 7F89             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 304+ 7F89 5D 7F                        dw      OPEN_FH                 // open
 305+ 7F8B 08 6B A1 7E                  dw      DUP, F_INCLUDE          // dup f_include
 306+ 7F8F CB 67 D3 6A                  dw      F_CLOSE, DROP           // f_close drop
 307+ 7F93 A3 69                        dw      EXIT                    // ;
 308+ 7F95
 309+ 7F95              //  ______________________________________________________________________
 310+ 7F95              //
 311+ 7F95              // needs
 312+ 7F95              // check for cccc exists in vocabulary
 313+ 7F95              // if it doesn't then  INCLUDE  inc/cccc.F
 314+ 7F95
 315+ 7F95              // temp filename cccc.f as counted string zero-padded
 316+ 7F95                              New_Def NEEDS_W,   "NEEDS-W", Create_Ptr, is_normal
 316+ 7F95             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 316+ 7F95             >
 316+ 7F95             >                // dummy db directives used to calculate length of namec
 316+ 7F95 4E 45 45 44 >                db      "NEEDS-W"
 316+ 7F99 53 2D 57    >
 316+ 7F9C             >len_NFA         defl    $ - temp_NFA
 316+ 7F9C             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 316+ 7F95             >
 316+ 7F95 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 316+ 7F96 4E 45 45 44 >                db      "NEEDS-W"               // name string in 7-bit ascii, but
 316+ 7F9A 53 2D 57    >
 316+ 7F9D             >                org     $-1                 // alter last byte of Name just above to set
 316+ 7F9C D7          >                db      {b $} | END_BIT     // msb as name end
 316+ 7F9D             >
 316+ 7F9D 7D 7F       >                dw      last_NFA            // Link to previous definition Name
 316+ 7F9F             >NEEDS_W:          if Create_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 316+ 7F9F D3 76       >                dw      Create_Ptr ; ok        // for primitive definitions  actual code
 316+ 7FA1             >                else
 316+ 7FA1 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 316+ 7FA1             >                endif           ; ok        // for other definitions it "points" the correct handler
 316+ 7FA1             >                // Use of "; ok" to suppress "warning[fwdref]"
 316+ 7FA1             >
 316+ 7FA1             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 317+ 7FA1 00 00 00...                  ds      35                      // 32 + .f + 0x00 = len 35
 318+ 7FC4              // temp complete path+filename
 319+ 7FC4                              New_Def NEEDS_FN,  "NEEDS-FN", Create_Ptr, is_normal
 319+ 7FC4             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 319+ 7FC4             >
 319+ 7FC4             >                // dummy db directives used to calculate length of namec
 319+ 7FC4 4E 45 45 44 >                db      "NEEDS-FN"
 319+ 7FC8 53 2D 46 4E >
 319+ 7FCC             >len_NFA         defl    $ - temp_NFA
 319+ 7FCC             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 319+ 7FC4             >
 319+ 7FC4 88          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 319+ 7FC5 4E 45 45 44 >                db      "NEEDS-FN"               // name string in 7-bit ascii, but
 319+ 7FC9 53 2D 46 4E >
 319+ 7FCD             >                org     $-1                 // alter last byte of Name just above to set
 319+ 7FCC CE          >                db      {b $} | END_BIT     // msb as name end
 319+ 7FCD             >
 319+ 7FCD 95 7F       >                dw      last_NFA            // Link to previous definition Name
 319+ 7FCF             >NEEDS_FN:          if Create_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 319+ 7FCF D3 76       >                dw      Create_Ptr ; ok        // for primitive definitions  actual code
 319+ 7FD1             >                else
 319+ 7FD1 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 319+ 7FD1             >                endif           ; ok        // for other definitions it "points" the correct handler
 319+ 7FD1             >                // Use of "; ok" to suppress "warning[fwdref]"
 319+ 7FD1             >
 319+ 7FD1             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 320+ 7FD1 00 00 00...                  ds      40
 321+ 7FF9              // constant path
 322+ 7FF9                              New_Def NEEDS_INC,  "NEEDS-INC", Create_Ptr, is_normal
 322+ 7FF9             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 322+ 7FF9             >
 322+ 7FF9             >                // dummy db directives used to calculate length of namec
 322+ 7FF9 4E 45 45 44 >                db      "NEEDS-INC"
 322+ 7FFD 53 2D 49 4E >
 322+ 8001 43          >
 322+ 8002             >len_NFA         defl    $ - temp_NFA
 322+ 8002             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 322+ 7FF9             >
 322+ 7FF9 89          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 322+ 7FFA 4E 45 45 44 >                db      "NEEDS-INC"               // name string in 7-bit ascii, but
 322+ 7FFE 53 2D 49 4E >
 322+ 8002 43          >
 322+ 8003             >                org     $-1                 // alter last byte of Name just above to set
 322+ 8002 C3          >                db      {b $} | END_BIT     // msb as name end
 322+ 8003             >
 322+ 8003 C4 7F       >                dw      last_NFA            // Link to previous definition Name
 322+ 8005             >NEEDS_INC:          if Create_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 322+ 8005 D3 76       >                dw      Create_Ptr ; ok        // for primitive definitions  actual code
 322+ 8007             >                else
 322+ 8007 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 322+ 8007             >                endif           ; ok        // for other definitions it "points" the correct handler
 322+ 8007             >                // Use of "; ok" to suppress "warning[fwdref]"
 322+ 8007             >
 322+ 8007             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 323+ 8007 04 69 6E 63                  db      4, "inc/", 0
 323+ 800B 2F 00
 324+ 800D                              New_Def NEEDS_LIB,  "NEEDS-LIB", Create_Ptr, is_normal
 324+ 800D             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 324+ 800D             >
 324+ 800D             >                // dummy db directives used to calculate length of namec
 324+ 800D 4E 45 45 44 >                db      "NEEDS-LIB"
 324+ 8011 53 2D 4C 49 >
 324+ 8015 42          >
 324+ 8016             >len_NFA         defl    $ - temp_NFA
 324+ 8016             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 324+ 800D             >
 324+ 800D 89          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 324+ 800E 4E 45 45 44 >                db      "NEEDS-LIB"               // name string in 7-bit ascii, but
 324+ 8012 53 2D 4C 49 >
 324+ 8016 42          >
 324+ 8017             >                org     $-1                 // alter last byte of Name just above to set
 324+ 8016 C2          >                db      {b $} | END_BIT     // msb as name end
 324+ 8017             >
 324+ 8017 F9 7F       >                dw      last_NFA            // Link to previous definition Name
 324+ 8019             >NEEDS_LIB:          if Create_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 324+ 8019 D3 76       >                dw      Create_Ptr ; ok        // for primitive definitions  actual code
 324+ 801B             >                else
 324+ 801B ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 324+ 801B             >                endif           ; ok        // for other definitions it "points" the correct handler
 324+ 801B             >                // Use of "; ok" to suppress "warning[fwdref]"
 324+ 801B             >
 324+ 801B             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 325+ 801B 04 6C 69 62                  db      4, "lib/", 0
 325+ 801F 2F 00
 326+ 8021
 327+ 8021              // Concatenate path at a and filename and include it
 328+ 8021              // No error is issued if filename doesn't exist.
 329+ 8021                              Colon_Def NEEDS_SLASH, "NEEDS/", is_normal
 329+ 8021             >                New_Def  NEEDS_SLASH, "NEEDS/", Enter_Ptr, is_normal ; ok
 329+ 8021             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 329+ 8021             >
 329+ 8021             >                // dummy db directives used to calculate length of namec
 329+ 8021 4E 45 45 44 >                db      "NEEDS/"
 329+ 8025 53 2F       >
 329+ 8027             >len_NFA         defl    $ - temp_NFA
 329+ 8027             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 329+ 8021             >
 329+ 8021 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 329+ 8022 4E 45 45 44 >                db      "NEEDS/"               // name string in 7-bit ascii, but
 329+ 8026 53 2F       >
 329+ 8028             >                org     $-1                 // alter last byte of Name just above to set
 329+ 8027 AF          >                db      {b $} | END_BIT     // msb as name end
 329+ 8028             >
 329+ 8028 0D 80       >                dw      last_NFA            // Link to previous definition Name
 329+ 802A             >NEEDS_SLASH:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 329+ 802A 7D 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 329+ 802C             >                else
 329+ 802C ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 329+ 802C             >                endif           ; ok        // for other definitions it "points" the correct handler
 329+ 802C             >                // Use of "; ok" to suppress "warning[fwdref]"
 329+ 802C             >
 329+ 802C             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 330+ 802C 38 72 EB 6A                  dw      COUNT, TUCK             // n a n
 331+ 8030 CF 7F FB 6A                  dw      NEEDS_FN, SWAP, CMOVE   // n        \ Path
 331+ 8034 96 68
 332+ 8036 CF 7F 28 6A                  dw      NEEDS_FN, PLUS          // a1+n     \ Concat
 333+ 803A 9F 7F 49 6A                  dw      NEEDS_W, ONE_PLUS, SWAP
 333+ 803E FB 6A
 334+ 8040 A9 63 23 00                  dw      LIT, 35
 335+ 8044 96 68                        dw      CMOVE
 336+ 8046 CF 7F                        dw      NEEDS_FN
 337+ 8048 0D 74 02 6D                  dw      PAD, ONE, F_OPEN
 337+ 804C 4A 68
 338+ 804E E5 69                        dw      ZEQUAL
 339+ 8050 2C 64                        dw      ZBRANCH
 340+ 8052 08 00                        dw      Needs_1 - $
 341+ 8054 A1 7E                        dw          F_INCLUDE
 342+ 8056 15 64                        dw      BRANCH
 343+ 8058 04 00                        dw      Needs_2 - $
 344+ 805A              Needs_1:
 345+ 805A              //              dw          NEEDS_W, COUNT, TYPE, SPACE
 346+ 805A              //              dw          LIT, 43, MESSAGE
 347+ 805A D3 6A                        dw          DROP
 348+ 805C              Needs_2:
 349+ 805C A3 69                        dw      EXIT                    // ;
 350+ 805E
 351+ 805E
 352+ 805E                              New_Def NDOM,   "NDOM", Create_Ptr, is_normal
 352+ 805E             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 352+ 805E             >
 352+ 805E             >                // dummy db directives used to calculate length of namec
 352+ 805E 4E 44 4F 4D >                db      "NDOM"
 352+ 8062             >len_NFA         defl    $ - temp_NFA
 352+ 8062             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 352+ 805E             >
 352+ 805E 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 352+ 805F 4E 44 4F 4D >                db      "NDOM"               // name string in 7-bit ascii, but
 352+ 8063             >                org     $-1                 // alter last byte of Name just above to set
 352+ 8062 CD          >                db      {b $} | END_BIT     // msb as name end
 352+ 8063             >
 352+ 8063 21 80       >                dw      last_NFA            // Link to previous definition Name
 352+ 8065             >NDOM:          if Create_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 352+ 8065 D3 76       >                dw      Create_Ptr ; ok        // for primitive definitions  actual code
 352+ 8067             >                else
 352+ 8067 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 352+ 8067             >                endif           ; ok        // for other definitions it "points" the correct handler
 352+ 8067             >                // Use of "; ok" to suppress "warning[fwdref]"
 352+ 8067             >
 352+ 8067             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 353+ 8067              //              db $3A, $3F, $2F, $2A, $7C, $5C, $3C, $3E, $22
 354+ 8067 3A 3F 2F 2A                  db ':?/*|\<>"'
 354+ 806B 7C 5C 3C 3E
 354+ 806F 22
 355+ 8070 00                           db 0
 356+ 8071
 357+ 8071                              New_Def NCDM,   "NCDM", Create_Ptr, is_normal
 357+ 8071             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 357+ 8071             >
 357+ 8071             >                // dummy db directives used to calculate length of namec
 357+ 8071 4E 43 44 4D >                db      "NCDM"
 357+ 8075             >len_NFA         defl    $ - temp_NFA
 357+ 8075             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 357+ 8071             >
 357+ 8071 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 357+ 8072 4E 43 44 4D >                db      "NCDM"               // name string in 7-bit ascii, but
 357+ 8076             >                org     $-1                 // alter last byte of Name just above to set
 357+ 8075 CD          >                db      {b $} | END_BIT     // msb as name end
 357+ 8076             >
 357+ 8076 5E 80       >                dw      last_NFA            // Link to previous definition Name
 357+ 8078             >NCDM:          if Create_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 357+ 8078 D3 76       >                dw      Create_Ptr ; ok        // for primitive definitions  actual code
 357+ 807A             >                else
 357+ 807A ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 357+ 807A             >                endif           ; ok        // for other definitions it "points" the correct handler
 357+ 807A             >                // Use of "; ok" to suppress "warning[fwdref]"
 357+ 807A             >
 357+ 807A             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 358+ 807A              //              db $5F, $5E, $25, $26, $24, $5F, $7B, $7D, $7E
 359+ 807A 5F 5E 25 26                  db '_^%&$_{}~'
 359+ 807E 24 5F 7B 7D
 359+ 8082 7E
 360+ 8083 00                           db 0
 361+ 8084
 362+ 8084              // Replace illegal character in filename using the map here above
 363+ 8084              // at the moment we need only  "
 364+ 8084                              Colon_Def NEEDS_CHECK, "MAP-FN", is_normal
 364+ 8084             >                New_Def  NEEDS_CHECK, "MAP-FN", Enter_Ptr, is_normal ; ok
 364+ 8084             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 364+ 8084             >
 364+ 8084             >                // dummy db directives used to calculate length of namec
 364+ 8084 4D 41 50 2D >                db      "MAP-FN"
 364+ 8088 46 4E       >
 364+ 808A             >len_NFA         defl    $ - temp_NFA
 364+ 808A             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 364+ 8084             >
 364+ 8084 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 364+ 8085 4D 41 50 2D >                db      "MAP-FN"               // name string in 7-bit ascii, but
 364+ 8089 46 4E       >
 364+ 808B             >                org     $-1                 // alter last byte of Name just above to set
 364+ 808A CE          >                db      {b $} | END_BIT     // msb as name end
 364+ 808B             >
 364+ 808B 71 80       >                dw      last_NFA            // Link to previous definition Name
 364+ 808D             >NEEDS_CHECK:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 364+ 808D 7D 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 364+ 808F             >                else
 364+ 808F ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 364+ 808F             >                endif           ; ok        // for other definitions it "points" the correct handler
 364+ 808F             >                // Use of "; ok" to suppress "warning[fwdref]"
 364+ 808F             >
 364+ 808F             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 365+ 808F 38 72 4C 72                  dw      COUNT, BOUNDS
 366+ 8093 86 64                        dw      C_DO
 367+ 8095              Needs_3:
 368+ 8095 78 80 65 80                  dw          NCDM, NDOM, LIT, 10
 368+ 8099 A9 63 0A 00
 369+ 809D 90 64 B6 6B                  dw          I, CFETCH
 370+ 80A1 B8 65                        dw          C_MAP
 371+ 80A3 90 64 C4 6B                  dw          I, CSTORE
 372+ 80A7              Needs_4:
 373+ 80A7 04 64                        dw      C_LOOP
 374+ 80A9 EC FF                        dw      Needs_3 - $
 375+ 80AB A3 69                        dw      EXIT
 376+ 80AD
 377+ 80AD
 378+ 80AD              // include  "path/cccc.f" if cccc is not defined
 379+ 80AD              // filename cccc.f is temporary stored at NEEDS-W
 380+ 80AD                              Colon_Def NEEDS_PATH, "NEEDS-F", is_normal
 380+ 80AD             >                New_Def  NEEDS_PATH, "NEEDS-F", Enter_Ptr, is_normal ; ok
 380+ 80AD             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 380+ 80AD             >
 380+ 80AD             >                // dummy db directives used to calculate length of namec
 380+ 80AD 4E 45 45 44 >                db      "NEEDS-F"
 380+ 80B1 53 2D 46    >
 380+ 80B4             >len_NFA         defl    $ - temp_NFA
 380+ 80B4             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 380+ 80AD             >
 380+ 80AD 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 380+ 80AE 4E 45 45 44 >                db      "NEEDS-F"               // name string in 7-bit ascii, but
 380+ 80B2 53 2D 46    >
 380+ 80B5             >                org     $-1                 // alter last byte of Name just above to set
 380+ 80B4 C6          >                db      {b $} | END_BIT     // msb as name end
 380+ 80B5             >
 380+ 80B5 84 80       >                dw      last_NFA            // Link to previous definition Name
 380+ 80B7             >NEEDS_PATH:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 380+ 80B7 7D 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 380+ 80B9             >                else
 380+ 80B9 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 380+ 80B9             >                endif           ; ok        // for other definitions it "points" the correct handler
 380+ 80B9             >                // Use of "; ok" to suppress "warning[fwdref]"
 380+ 80B9             >
 380+ 80B9             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 381+ 80B9 D2 75                        dw      LFIND
 382+ 80BB 2C 64                        dw      ZBRANCH
 383+ 80BD 0A 00                        dw      Needs_5 - $
 384+ 80BF
 385+ 80BF D3 6A 49 6B                  dw          DROP, TWO_DROP
 386+ 80C3 15 64                        dw      BRANCH
 387+ 80C5 2C 00                        dw      Needs_6 - $
 388+ 80C7              Needs_5:
 389+ 80C7 9F 7F                        dw          NEEDS_W
 390+ 80C9 A9 63 23 00                  dw          LIT, 35
 391+ 80CD D8 73                        dw          ERASE                   // a
 392+ 80CF D9 6E B6 6B                  dw          HERE, CFETCH, ONE_PLUS  // a n
 392+ 80D3 49 6A
 393+ 80D5 D9 6E C3 6A                  dw          HERE, OVER              // a n here n
 394+ 80D9 9F 7F FB 6A                  dw          NEEDS_W, SWAP, CMOVE    // a n
 394+ 80DD 96 68
 395+ 80DF 9F 7F 8D 80                  dw          NEEDS_W, NEEDS_CHECK
 396+ 80E3 9F 7F 28 6A                  dw          NEEDS_W, PLUS           // a a1+1
 397+ 80E7 A9 63 2E 66                  dw          LIT, $662E              // a a1+1 ".F"
 398+ 80EB FB 6A A8 6B                  dw          SWAP, STORE             // a
 399+ 80EF 2A 80                        dw          NEEDS_SLASH
 400+ 80F1              Needs_6:
 401+ 80F1 A3 69                        dw      EXIT
 402+ 80F3
 403+ 80F3
 404+ 80F3              // check for cccc exists in vocabulary
 405+ 80F3              // if it doesn't then  INCLUDE  inc/cccc.F
 406+ 80F3              // search in inc subdirectory
 407+ 80F3                              Colon_Def NEEDS, "NEEDS", is_normal
 407+ 80F3             >                New_Def  NEEDS, "NEEDS", Enter_Ptr, is_normal ; ok
 407+ 80F3             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 407+ 80F3             >
 407+ 80F3             >                // dummy db directives used to calculate length of namec
 407+ 80F3 4E 45 45 44 >                db      "NEEDS"
 407+ 80F7 53          >
 407+ 80F8             >len_NFA         defl    $ - temp_NFA
 407+ 80F8             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 407+ 80F3             >
 407+ 80F3 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 407+ 80F4 4E 45 45 44 >                db      "NEEDS"               // name string in 7-bit ascii, but
 407+ 80F8 53          >
 407+ 80F9             >                org     $-1                 // alter last byte of Name just above to set
 407+ 80F8 D3          >                db      {b $} | END_BIT     // msb as name end
 407+ 80F9             >
 407+ 80F9 AD 80       >                dw      last_NFA            // Link to previous definition Name
 407+ 80FB             >NEEDS:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 407+ 80FB 7D 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 407+ 80FD             >                else
 407+ 80FD ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 407+ 80FD             >                endif           ; ok        // for other definitions it "points" the correct handler
 407+ 80FD             >                // Use of "; ok" to suppress "warning[fwdref]"
 407+ 80FD             >
 407+ 80FD             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 408+ 80FD 02 6E 9B 6B                  dw      TO_IN, FETCH
 409+ 8101 08 6B                        dw      DUP
 410+ 8103 05 80 B7 80                  dw      NEEDS_INC, NEEDS_PATH
 411+ 8107 02 6E A8 6B                  dw      TO_IN, STORE
 412+ 810B 19 80 B7 80                  dw      NEEDS_LIB, NEEDS_PATH
 413+ 810F 02 6E A8 6B                  dw      TO_IN, STORE
 414+ 8113 D2 75                        dw      LFIND
 415+ 8115 2C 64                        dw      ZBRANCH
 416+ 8117 08 00                        dw      Needs_10 - $
 417+ 8119 49 6B                        dw          TWO_DROP
 418+ 811B 15 64                        dw      BRANCH
 419+ 811D 10 00                        dw      Needs_11 - $
 420+ 811F              Needs_10:
 421+ 811F 9F 7F 38 72                  dw      NEEDS_W, COUNT, TYPE, SPACE
 421+ 8123 9E 72 E4 6F
 422+ 8127 A9 63 2B 00                  dw      LIT, 43, MESSAGE
 422+ 812B EA 7A
 423+ 812D              Needs_11:
 424+ 812D A3 69                        dw      EXIT
 425+ 812F
 426+ 812F
 427+ 812F              //  ______________________________________________________________________
 428+ 812F              //
 429+ 812F              // load+        n --
 430+ 812F                              Colon_Def LOAD_P, "LOAD+", is_normal
 430+ 812F             >                New_Def  LOAD_P, "LOAD+", Enter_Ptr, is_normal ; ok
 430+ 812F             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 430+ 812F             >
 430+ 812F             >                // dummy db directives used to calculate length of namec
 430+ 812F 4C 4F 41 44 >                db      "LOAD+"
 430+ 8133 2B          >
 430+ 8134             >len_NFA         defl    $ - temp_NFA
 430+ 8134             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 430+ 812F             >
 430+ 812F 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 430+ 8130 4C 4F 41 44 >                db      "LOAD+"               // name string in 7-bit ascii, but
 430+ 8134 2B          >
 430+ 8135             >                org     $-1                 // alter last byte of Name just above to set
 430+ 8134 AB          >                db      {b $} | END_BIT     // msb as name end
 430+ 8135             >
 430+ 8135 F3 80       >                dw      last_NFA            // Link to previous definition Name
 430+ 8137             >LOAD_P:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 430+ 8137 7D 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 430+ 8139             >                else
 430+ 8139 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 430+ 8139             >                endif           ; ok        // for other definitions it "points" the correct handler
 430+ 8139             >                // Use of "; ok" to suppress "warning[fwdref]"
 430+ 8139             >
 430+ 8139             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 431+ 8139 F9 6D 9B 6B                  dw      BLK, FETCH, TO_R        // blk @ >r
 431+ 813D B6 69
 432+ 813F 02 6E 9B 6B                  dw      TO_IN, FETCH, TO_R      // >in @ >r
 432+ 8143 B6 69
 433+ 8145
 434+ 8145 FA 6C 02 6E                  dw      ZERO, TO_IN, STORE      // 0 >in !
 434+ 8149 A8 6B
 435+ 814B 46 6D 51 7A                  dw      BSCR, MUL, BLK, STORE   // b/scr * blk !
 435+ 814F F9 6D A8 6B
 436+ 8153 C0 77                        dw      INTERPRET               // interpret
 437+ 8155
 438+ 8155 CA 69 02 6E                  dw      R_TO, TO_IN, STORE      // r> >in !
 438+ 8159 A8 6B
 439+ 815B CA 69 F9 6D                  dw      R_TO, BLK, STORE        // r> blk !
 439+ 815F A8 6B
 440+ 8161 A3 69                        dw      EXIT                    // ;
 441+ 8163
 442+ 8163              //  ______________________________________________________________________
 443+ 8163              //
 444+ 8163              // -->          --
 445+ 8163                              Colon_Def LOAD_NEXT, "-->", is_immediate
 445+ 8163             >                New_Def  LOAD_NEXT, "-->", Enter_Ptr, is_immediate ; ok
 445+ 8163             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 445+ 8163             >
 445+ 8163             >                // dummy db directives used to calculate length of namec
 445+ 8163 2D 2D 3E    >                db      "-->"
 445+ 8166             >len_NFA         defl    $ - temp_NFA
 445+ 8166             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 445+ 8163             >
 445+ 8163 C3          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 445+ 8164 2D 2D 3E    >                db      "-->"               // name string in 7-bit ascii, but
 445+ 8167             >                org     $-1                 // alter last byte of Name just above to set
 445+ 8166 BE          >                db      {b $} | END_BIT     // msb as name end
 445+ 8167             >
 445+ 8167 2F 81       >                dw      last_NFA            // Link to previous definition Name
 445+ 8169             >LOAD_NEXT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 445+ 8169 7D 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 445+ 816B             >                else
 445+ 816B ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 445+ 816B             >                endif           ; ok        // for other definitions it "points" the correct handler
 445+ 816B             >                // Use of "; ok" to suppress "warning[fwdref]"
 445+ 816B             >
 445+ 816B             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 446+ 816B 17 71                        dw      QLOADING                // ?loading
 447+ 816D FA 6C 02 6E                  dw      ZERO, TO_IN, STORE      // 0 >in !
 447+ 8171 A8 6B
 448+ 8173 46 6D                        dw      BSCR                    // b/scr
 449+ 8175 F9 6D 9B 6B                  dw      BLK, FETCH              // blk @
 450+ 8179 C3 6A                        dw      OVER                    // over
 451+ 817B 7E 7A                        dw      MOD                     // mod
 452+ 817D 2C 6F                        dw      SUBTRACT                // -
 453+ 817F F9 6D 78 6B                  dw      BLK, PLUSSTORE          // +!
 454+ 8183 A3 69                        dw      EXIT                    // ;
 455+ 8185
 456+ 8185              //  ______________________________________________________________________
 457+ 8185              //
 458+ 8185              // '            -- xt
 459+ 8185                              Colon_Def TICK, "'", is_normal
 459+ 8185             >                New_Def  TICK, "'", Enter_Ptr, is_normal ; ok
 459+ 8185             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 459+ 8185             >
 459+ 8185             >                // dummy db directives used to calculate length of namec
 459+ 8185 27          >                db      "'"
 459+ 8186             >len_NFA         defl    $ - temp_NFA
 459+ 8186             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 459+ 8185             >
 459+ 8185 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 459+ 8186 27          >                db      "'"               // name string in 7-bit ascii, but
 459+ 8187             >                org     $-1                 // alter last byte of Name just above to set
 459+ 8186 A7          >                db      {b $} | END_BIT     // msb as name end
 459+ 8187             >
 459+ 8187 63 81       >                dw      last_NFA            // Link to previous definition Name
 459+ 8189             >TICK:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 459+ 8189 7D 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 459+ 818B             >                else
 459+ 818B ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 459+ 818B             >                endif           ; ok        // for other definitions it "points" the correct handler
 459+ 818B             >                // Use of "; ok" to suppress "warning[fwdref]"
 459+ 818B             >
 459+ 818B             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 460+ 818B D2 75                        dw      LFIND                   // -find
 461+ 818D E5 69                        dw      ZEQUAL                  // 0=
 462+ 818F FA 6C 9E 70                  dw      ZERO, QERROR            // 0 ?error
 463+ 8193 D3 6A                        dw      DROP                    // drop
 464+ 8195 A3 69                        dw      EXIT                    // ;
 465+ 8197
 466+ 8197              //  ______________________________________________________________________
 467+ 8197              //
 468+ 8197              // forget       -- cccc
 469+ 8197                              Colon_Def FORGET, "FORGET", is_normal
 469+ 8197             >                New_Def  FORGET, "FORGET", Enter_Ptr, is_normal ; ok
 469+ 8197             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 469+ 8197             >
 469+ 8197             >                // dummy db directives used to calculate length of namec
 469+ 8197 46 4F 52 47 >                db      "FORGET"
 469+ 819B 45 54       >
 469+ 819D             >len_NFA         defl    $ - temp_NFA
 469+ 819D             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 469+ 8197             >
 469+ 8197 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 469+ 8198 46 4F 52 47 >                db      "FORGET"               // name string in 7-bit ascii, but
 469+ 819C 45 54       >
 469+ 819E             >                org     $-1                 // alter last byte of Name just above to set
 469+ 819D D4          >                db      {b $} | END_BIT     // msb as name end
 469+ 819E             >
 469+ 819E 85 81       >                dw      last_NFA            // Link to previous definition Name
 469+ 81A0             >FORGET:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 469+ 81A0 7D 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 469+ 81A2             >                else
 469+ 81A2 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 469+ 81A2             >                endif           ; ok        // for other definitions it "points" the correct handler
 469+ 81A2             >                // Use of "; ok" to suppress "warning[fwdref]"
 469+ 81A2             >
 469+ 81A2             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 470+ 81A2 3A 6E 9B 6B                  dw      CURRENT, FETCH          // current @
 471+ 81A6 2D 6E 9B 6B                  dw      CONTEXT, FETCH          // context @
 472+ 81AA 2C 6F A9 63                  dw      SUBTRACT, LIT, 23, QERROR // - 23 ?error
 472+ 81AE 17 00 9E 70
 473+ 81B2 89 81 6E 70                  dw      TICK, TO_BODY           // ' >body
 474+ 81B6 08 6B B0 6D                  dw      DUP, FENCE, FETCH       // dup fence @
 474+ 81BA 9B 6B
 475+ 81BC 47 6F A9 63                  dw      ULESS, LIT, 21, QERROR  // u< 21 ?error
 475+ 81C0 15 00 9E 70
 476+ 81C4 08 6B 44 70                  dw      DUP, NFA, DP, STORE     // dup nfa dp !
 476+ 81C8 B8 6D A8 6B
 477+ 81CC 2A 70 9B 6B                  dw      LFA, FETCH              // lfa @
 478+ 81D0 2D 6E 9B 6B                  dw      CONTEXT, FETCH, STORE   // context @ !
 478+ 81D4 A8 6B
 479+ 81D6 A3 69                        dw      EXIT                    // ;
 480+ 81D8
 481+ 81D8              //  ______________________________________________________________________
 482+ 81D8              //
 483+ 81D8              // marker       -- cccc
 484+ 81D8                              Colon_Def MARKER, "MARKER", is_immediate
 484+ 81D8             >                New_Def  MARKER, "MARKER", Enter_Ptr, is_immediate ; ok
 484+ 81D8             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 484+ 81D8             >
 484+ 81D8             >                // dummy db directives used to calculate length of namec
 484+ 81D8 4D 41 52 4B >                db      "MARKER"
 484+ 81DC 45 52       >
 484+ 81DE             >len_NFA         defl    $ - temp_NFA
 484+ 81DE             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 484+ 81D8             >
 484+ 81D8 C6          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 484+ 81D9 4D 41 52 4B >                db      "MARKER"               // name string in 7-bit ascii, but
 484+ 81DD 45 52       >
 484+ 81DF             >                org     $-1                 // alter last byte of Name just above to set
 484+ 81DE D2          >                db      {b $} | END_BIT     // msb as name end
 484+ 81DF             >
 484+ 81DF 97 81       >                dw      last_NFA            // Link to previous definition Name
 484+ 81E1             >MARKER:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 484+ 81E1 7D 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 484+ 81E3             >                else
 484+ 81E3 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 484+ 81E3             >                endif           ; ok        // for other definitions it "points" the correct handler
 484+ 81E3             >                // Use of "; ok" to suppress "warning[fwdref]"
 484+ 81E3             >
 484+ 81E3             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 485+ 81E3 01 72                        dw      CBUILDS
 486+ 81E5 C6 6D 9B 6B                  dw      VOC_LINK, FETCH, COMMA
 486+ 81E9 F5 6E
 487+ 81EB 3A 6E 9B 6B                  dw      CURRENT, FETCH, COMMA
 487+ 81EF F5 6E
 488+ 81F1 2D 6E 9B 6B                  dw      CONTEXT, FETCH, COMMA
 488+ 81F5 F5 6E
 489+ 81F7 1A 70 F5 6E                  dw      LATEST, COMMA
 490+ 81FB 1A 70 58 70                  dw      LATEST, PFA, LFA, FETCH, COMMA
 490+ 81FF 2A 70 9B 6B
 490+ 8203 F5 6E
 491+ 8205 11 72                        dw      DOES_TO
 492+ 8207 08 6B 9B 6B                  dw      DUP, FETCH, VOC_LINK, STORE, CELL_PLUS
 492+ 820B C6 6D A8 6B
 492+ 820F 71 6A
 493+ 8211 08 6B 9B 6B                  dw      DUP, FETCH, CURRENT, STORE, CELL_PLUS
 493+ 8215 3A 6E A8 6B
 493+ 8219 71 6A
 494+ 821B 08 6B 9B 6B                  dw      DUP, FETCH, CONTEXT, STORE, CELL_PLUS
 494+ 821F 2D 6E A8 6B
 494+ 8223 71 6A
 495+ 8225 08 6B 9B 6B                  dw      DUP, FETCH, DP, STORE, CELL_PLUS
 495+ 8229 B8 6D A8 6B
 495+ 822D 71 6A
 496+ 822F 9B 6B 3A 6E                  dw           FETCH, CURRENT, FETCH, STORE
 496+ 8233 9B 6B A8 6B
 497+ 8237 A3 69                        dw      EXIT
 498+ 8239
 499+ 8239              //  ______________________________________________________________________
 500+ 8239              //
 501+ 8239              // spaces       n --
 502+ 8239                              Colon_Def SPACES, "SPACES", is_normal
 502+ 8239             >                New_Def  SPACES, "SPACES", Enter_Ptr, is_normal ; ok
 502+ 8239             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 502+ 8239             >
 502+ 8239             >                // dummy db directives used to calculate length of namec
 502+ 8239 53 50 41 43 >                db      "SPACES"
 502+ 823D 45 53       >
 502+ 823F             >len_NFA         defl    $ - temp_NFA
 502+ 823F             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 502+ 8239             >
 502+ 8239 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 502+ 823A 53 50 41 43 >                db      "SPACES"               // name string in 7-bit ascii, but
 502+ 823E 45 53       >
 502+ 8240             >                org     $-1                 // alter last byte of Name just above to set
 502+ 823F D3          >                db      {b $} | END_BIT     // msb as name end
 502+ 8240             >
 502+ 8240 D8 81       >                dw      last_NFA            // Link to previous definition Name
 502+ 8242             >SPACES:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 502+ 8242 7D 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 502+ 8244             >                else
 502+ 8244 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 502+ 8244             >                endif           ; ok        // for other definitions it "points" the correct handler
 502+ 8244             >                // Use of "; ok" to suppress "warning[fwdref]"
 502+ 8244             >
 502+ 8244             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 503+ 8244 FA 6C 96 6F                  dw      ZERO, MAX
 504+ 8248 FA 6C 59 64                  dw      ZERO, C_Q_DO
 505+ 824C 08 00                        dw      Spaces_Leave - $
 506+ 824E              Spaces_Loop:
 507+ 824E E4 6F                        dw          SPACE
 508+ 8250 04 64                        dw      C_LOOP
 509+ 8252 FC FF                        dw      Spaces_Loop - $
 510+ 8254              Spaces_Leave:
 511+ 8254 A3 69                        dw      EXIT                    // ;
 512+ 8256
 513+ 8256              //  ______________________________________________________________________
 514+ 8256              //
 515+ 8256              // <#           --
 516+ 8256                              Colon_Def BEGIN_DASH, "<#", is_normal
 516+ 8256             >                New_Def  BEGIN_DASH, "<#", Enter_Ptr, is_normal ; ok
 516+ 8256             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 516+ 8256             >
 516+ 8256             >                // dummy db directives used to calculate length of namec
 516+ 8256 3C 23       >                db      "<#"
 516+ 8258             >len_NFA         defl    $ - temp_NFA
 516+ 8258             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 516+ 8256             >
 516+ 8256 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 516+ 8257 3C 23       >                db      "<#"               // name string in 7-bit ascii, but
 516+ 8259             >                org     $-1                 // alter last byte of Name just above to set
 516+ 8258 A3          >                db      {b $} | END_BIT     // msb as name end
 516+ 8259             >
 516+ 8259 39 82       >                dw      last_NFA            // Link to previous definition Name
 516+ 825B             >BEGIN_DASH:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 516+ 825B 7D 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 516+ 825D             >                else
 516+ 825D ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 516+ 825D             >                endif           ; ok        // for other definitions it "points" the correct handler
 516+ 825D             >                // Use of "; ok" to suppress "warning[fwdref]"
 516+ 825D             >
 516+ 825D             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 517+ 825D 0D 74 7B 6E                  dw      PAD, HLD, STORE
 517+ 8261 A8 6B
 518+ 8263 A3 69                        dw      EXIT
 519+ 8265
 520+ 8265              //  ______________________________________________________________________
 521+ 8265              //
 522+ 8265              // #>           --
 523+ 8265                              Colon_Def DASH_END, "#>", is_normal
 523+ 8265             >                New_Def  DASH_END, "#>", Enter_Ptr, is_normal ; ok
 523+ 8265             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 523+ 8265             >
 523+ 8265             >                // dummy db directives used to calculate length of namec
 523+ 8265 23 3E       >                db      "#>"
 523+ 8267             >len_NFA         defl    $ - temp_NFA
 523+ 8267             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 523+ 8265             >
 523+ 8265 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 523+ 8266 23 3E       >                db      "#>"               // name string in 7-bit ascii, but
 523+ 8268             >                org     $-1                 // alter last byte of Name just above to set
 523+ 8267 BE          >                db      {b $} | END_BIT     // msb as name end
 523+ 8268             >
 523+ 8268 56 82       >                dw      last_NFA            // Link to previous definition Name
 523+ 826A             >DASH_END:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 523+ 826A 7D 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 523+ 826C             >                else
 523+ 826C ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 523+ 826C             >                endif           ; ok        // for other definitions it "points" the correct handler
 523+ 826C             >                // Use of "; ok" to suppress "warning[fwdref]"
 523+ 826C             >
 523+ 826C             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 524+ 826C 49 6B                        dw      TWO_DROP
 525+ 826E 7B 6E 9B 6B                  dw      HLD, FETCH, PAD, OVER, SUBTRACT
 525+ 8272 0D 74 C3 6A
 525+ 8276 2C 6F
 526+ 8278 A3 69                        dw      EXIT
 527+ 827A
 528+ 827A              //  ______________________________________________________________________
 529+ 827A              //
 530+ 827A              // sign         n d -- d
 531+ 827A                              Colon_Def SIGN, "SIGN", is_normal
 531+ 827A             >                New_Def  SIGN, "SIGN", Enter_Ptr, is_normal ; ok
 531+ 827A             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 531+ 827A             >
 531+ 827A             >                // dummy db directives used to calculate length of namec
 531+ 827A 53 49 47 4E >                db      "SIGN"
 531+ 827E             >len_NFA         defl    $ - temp_NFA
 531+ 827E             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 531+ 827A             >
 531+ 827A 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 531+ 827B 53 49 47 4E >                db      "SIGN"               // name string in 7-bit ascii, but
 531+ 827F             >                org     $-1                 // alter last byte of Name just above to set
 531+ 827E CE          >                db      {b $} | END_BIT     // msb as name end
 531+ 827F             >
 531+ 827F 65 82       >                dw      last_NFA            // Link to previous definition Name
 531+ 8281             >SIGN:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 531+ 8281 7D 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 531+ 8283             >                else
 531+ 8283 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 531+ 8283             >                endif           ; ok        // for other definitions it "points" the correct handler
 531+ 8283             >                // Use of "; ok" to suppress "warning[fwdref]"
 531+ 8283             >
 531+ 8283             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 532+ 8283 00 6A                        dw      ZLESS
 533+ 8285 2C 64                        dw      ZBRANCH
 534+ 8287 08 00                        dw      Sign_Endif - $
 535+ 8289 A9 63 2D 00                  dw          LIT, 45, HOLD
 535+ 828D F7 73
 536+ 828F              Sign_Endif:
 537+ 828F A3 69                        dw      EXIT
 538+ 8291
 539+ 8291              //  ______________________________________________________________________
 540+ 8291              //
 541+ 8291              // #           d1 -- d2
 542+ 8291                              Colon_Def DASH, "#", is_normal
 542+ 8291             >                New_Def  DASH, "#", Enter_Ptr, is_normal ; ok
 542+ 8291             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 542+ 8291             >
 542+ 8291             >                // dummy db directives used to calculate length of namec
 542+ 8291 23          >                db      "#"
 542+ 8292             >len_NFA         defl    $ - temp_NFA
 542+ 8292             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 542+ 8291             >
 542+ 8291 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 542+ 8292 23          >                db      "#"               // name string in 7-bit ascii, but
 542+ 8293             >                org     $-1                 // alter last byte of Name just above to set
 542+ 8292 A3          >                db      {b $} | END_BIT     // msb as name end
 542+ 8293             >
 542+ 8293 7A 82       >                dw      last_NFA            // Link to previous definition Name
 542+ 8295             >DASH:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 542+ 8295 7D 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 542+ 8297             >                else
 542+ 8297 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 542+ 8297             >                endif           ; ok        // for other definitions it "points" the correct handler
 542+ 8297             >                // Use of "; ok" to suppress "warning[fwdref]"
 542+ 8297             >
 542+ 8297             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 543+ 8297 4F 6E 9B 6B                  dw      BASE, FETCH
 544+ 829B
 545+ 829B B6 69                        dw      TO_R                    // >r           ( ud1 )
 546+ 829D FA 6C DE 69                  dw      ZERO, R_OP, UMDIVMOD    // 0 r um/mod   ( l rem1 h/r )
 546+ 82A1 FA 68
 547+ 82A3 CA 69 FB 6A                  dw      R_TO, SWAP, TO_R        // r> swap >r   ( l rem )
 547+ 82A7 B6 69
 548+ 82A9 FA 68                        dw      UMDIVMOD                // um/mod       ( rem2 l/r )
 549+ 82AB CA 69                        dw      R_TO                    // r>           ( rem2 l/r h/r )
 550+ 82AD
 551+ 82AD 15 6B                        dw      ROT
 552+ 82AF A9 63 09 00                  dw      LIT, 9, OVER, LESS
 552+ 82B3 C3 6A 5B 6F
 553+ 82B7 2C 64                        dw      ZBRANCH
 554+ 82B9 08 00                        dw      Dash_Endif - $
 555+ 82BB A9 63 07 00                  dw          LIT, 7, PLUS
 555+ 82BF 28 6A
 556+ 82C1              Dash_Endif:
 557+ 82C1
 558+ 82C1 A9 63 30 00                  dw      LIT, 48, PLUS, HOLD
 558+ 82C5 28 6A F7 73
 559+ 82C9 A3 69                        dw      EXIT
 560+ 82CB
 561+ 82CB              //  ______________________________________________________________________
 562+ 82CB              //
 563+ 82CB              // #s           d1 -- d2
 564+ 82CB                              Colon_Def DASHES, "#S", is_normal
 564+ 82CB             >                New_Def  DASHES, "#S", Enter_Ptr, is_normal ; ok
 564+ 82CB             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 564+ 82CB             >
 564+ 82CB             >                // dummy db directives used to calculate length of namec
 564+ 82CB 23 53       >                db      "#S"
 564+ 82CD             >len_NFA         defl    $ - temp_NFA
 564+ 82CD             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 564+ 82CB             >
 564+ 82CB 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 564+ 82CC 23 53       >                db      "#S"               // name string in 7-bit ascii, but
 564+ 82CE             >                org     $-1                 // alter last byte of Name just above to set
 564+ 82CD D3          >                db      {b $} | END_BIT     // msb as name end
 564+ 82CE             >
 564+ 82CE 91 82       >                dw      last_NFA            // Link to previous definition Name
 564+ 82D0             >DASHES:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 564+ 82D0 7D 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 564+ 82D2             >                else
 564+ 82D2 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 564+ 82D2             >                endif           ; ok        // for other definitions it "points" the correct handler
 564+ 82D2             >                // Use of "; ok" to suppress "warning[fwdref]"
 564+ 82D2             >
 564+ 82D2             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 565+ 82D2              Dashes_Begin:
 566+ 82D2 95 82 69 6B                  dw      DASH, TWO_DUP
 567+ 82D6 45 69 E5 69                  dw          OR_OP, ZEQUAL
 568+ 82DA 2C 64                        dw      ZBRANCH
 569+ 82DC F6 FF                        dw      Dashes_Begin - $
 570+ 82DE A3 69                        dw      EXIT
 571+ 82E0
 572+ 82E0              //  ______________________________________________________________________
 573+ 82E0              //
 574+ 82E0              // d.r          d n --
 575+ 82E0                              Colon_Def D_DOT_R, "D.R", is_normal
 575+ 82E0             >                New_Def  D_DOT_R, "D.R", Enter_Ptr, is_normal ; ok
 575+ 82E0             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 575+ 82E0             >
 575+ 82E0             >                // dummy db directives used to calculate length of namec
 575+ 82E0 44 2E 52    >                db      "D.R"
 575+ 82E3             >len_NFA         defl    $ - temp_NFA
 575+ 82E3             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 575+ 82E0             >
 575+ 82E0 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 575+ 82E1 44 2E 52    >                db      "D.R"               // name string in 7-bit ascii, but
 575+ 82E4             >                org     $-1                 // alter last byte of Name just above to set
 575+ 82E3 D2          >                db      {b $} | END_BIT     // msb as name end
 575+ 82E4             >
 575+ 82E4 CB 82       >                dw      last_NFA            // Link to previous definition Name
 575+ 82E6             >D_DOT_R:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 575+ 82E6 7D 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 575+ 82E8             >                else
 575+ 82E8 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 575+ 82E8             >                endif           ; ok        // for other definitions it "points" the correct handler
 575+ 82E8             >                // Use of "; ok" to suppress "warning[fwdref]"
 575+ 82E8             >
 575+ 82E8             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 576+ 82E8 B6 69                        dw      TO_R
 577+ 82EA EB 6A A7 79                  dw      TUCK, DABS
 578+ 82EE 5B 82 D0 82                  dw      BEGIN_DASH, DASHES, ROT, SIGN, DASH_END
 578+ 82F2 15 6B 81 82
 578+ 82F6 6A 82
 579+ 82F8 CA 69                        dw      R_TO
 580+ 82FA C3 6A 2C 6F                  dw      OVER, SUBTRACT, SPACES, TYPE
 580+ 82FE 42 82 9E 72
 581+ 8302 A3 69                        dw      EXIT
 582+ 8304
 583+ 8304              //  ______________________________________________________________________
 584+ 8304              //
 585+ 8304              // .r           n1 n2 --
 586+ 8304                              Colon_Def DOT_R, ".R", is_normal
 586+ 8304             >                New_Def  DOT_R, ".R", Enter_Ptr, is_normal ; ok
 586+ 8304             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 586+ 8304             >
 586+ 8304             >                // dummy db directives used to calculate length of namec
 586+ 8304 2E 52       >                db      ".R"
 586+ 8306             >len_NFA         defl    $ - temp_NFA
 586+ 8306             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 586+ 8304             >
 586+ 8304 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 586+ 8305 2E 52       >                db      ".R"               // name string in 7-bit ascii, but
 586+ 8307             >                org     $-1                 // alter last byte of Name just above to set
 586+ 8306 D2          >                db      {b $} | END_BIT     // msb as name end
 586+ 8307             >
 586+ 8307 E0 82       >                dw      last_NFA            // Link to previous definition Name
 586+ 8309             >DOT_R:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 586+ 8309 7D 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 586+ 830B             >                else
 586+ 830B ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 586+ 830B             >                endif           ; ok        // for other definitions it "points" the correct handler
 586+ 830B             >                // Use of "; ok" to suppress "warning[fwdref]"
 586+ 830B             >
 586+ 830B             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 587+ 830B B6 69                        dw      TO_R
 588+ 830D 18 6F CA 69                  dw      S_TO_D, R_TO
 589+ 8311 E6 82                        dw      D_DOT_R
 590+ 8313 A3 69                        dw      EXIT
 591+ 8315
 592+ 8315              //  ______________________________________________________________________
 593+ 8315              //
 594+ 8315              // d.           d --
 595+ 8315                              Colon_Def D_DOT, "D.", is_normal
 595+ 8315             >                New_Def  D_DOT, "D.", Enter_Ptr, is_normal ; ok
 595+ 8315             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 595+ 8315             >
 595+ 8315             >                // dummy db directives used to calculate length of namec
 595+ 8315 44 2E       >                db      "D."
 595+ 8317             >len_NFA         defl    $ - temp_NFA
 595+ 8317             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 595+ 8315             >
 595+ 8315 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 595+ 8316 44 2E       >                db      "D."               // name string in 7-bit ascii, but
 595+ 8318             >                org     $-1                 // alter last byte of Name just above to set
 595+ 8317 AE          >                db      {b $} | END_BIT     // msb as name end
 595+ 8318             >
 595+ 8318 04 83       >                dw      last_NFA            // Link to previous definition Name
 595+ 831A             >D_DOT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 595+ 831A 7D 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 595+ 831C             >                else
 595+ 831C ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 595+ 831C             >                endif           ; ok        // for other definitions it "points" the correct handler
 595+ 831C             >                // Use of "; ok" to suppress "warning[fwdref]"
 595+ 831C             >
 595+ 831C             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 596+ 831C FA 6C E6 82                  dw      ZERO, D_DOT_R, SPACE
 596+ 8320 E4 6F
 597+ 8322 A3 69                        dw      EXIT
 598+ 8324
 599+ 8324              //  ______________________________________________________________________
 600+ 8324              //
 601+ 8324              // .            n --
 602+ 8324                              Colon_Def DOT, ".", is_normal
 602+ 8324             >                New_Def  DOT, ".", Enter_Ptr, is_normal ; ok
 602+ 8324             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 602+ 8324             >
 602+ 8324             >                // dummy db directives used to calculate length of namec
 602+ 8324 2E          >                db      "."
 602+ 8325             >len_NFA         defl    $ - temp_NFA
 602+ 8325             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 602+ 8324             >
 602+ 8324 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 602+ 8325 2E          >                db      "."               // name string in 7-bit ascii, but
 602+ 8326             >                org     $-1                 // alter last byte of Name just above to set
 602+ 8325 AE          >                db      {b $} | END_BIT     // msb as name end
 602+ 8326             >
 602+ 8326 15 83       >                dw      last_NFA            // Link to previous definition Name
 602+ 8328             >DOT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 602+ 8328 7D 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 602+ 832A             >                else
 602+ 832A ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 602+ 832A             >                endif           ; ok        // for other definitions it "points" the correct handler
 602+ 832A             >                // Use of "; ok" to suppress "warning[fwdref]"
 602+ 832A             >
 602+ 832A             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 603+ 832A 18 6F 1A 83                  dw      S_TO_D, D_DOT
 604+ 832E A3 69                        dw      EXIT
 605+ 8330
 606+ 8330              //  ______________________________________________________________________
 607+ 8330              //
 608+ 8330              // ?            n --
 609+ 8330                              Colon_Def QUESTION, "?", is_normal
 609+ 8330             >                New_Def  QUESTION, "?", Enter_Ptr, is_normal ; ok
 609+ 8330             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 609+ 8330             >
 609+ 8330             >                // dummy db directives used to calculate length of namec
 609+ 8330 3F          >                db      "?"
 609+ 8331             >len_NFA         defl    $ - temp_NFA
 609+ 8331             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 609+ 8330             >
 609+ 8330 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 609+ 8331 3F          >                db      "?"               // name string in 7-bit ascii, but
 609+ 8332             >                org     $-1                 // alter last byte of Name just above to set
 609+ 8331 BF          >                db      {b $} | END_BIT     // msb as name end
 609+ 8332             >
 609+ 8332 24 83       >                dw      last_NFA            // Link to previous definition Name
 609+ 8334             >QUESTION:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 609+ 8334 7D 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 609+ 8336             >                else
 609+ 8336 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 609+ 8336             >                endif           ; ok        // for other definitions it "points" the correct handler
 609+ 8336             >                // Use of "; ok" to suppress "warning[fwdref]"
 609+ 8336             >
 609+ 8336             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 610+ 8336 9B 6B 28 83                  dw      FETCH, DOT
 611+ 833A A3 69                        dw      EXIT
 612+ 833C
 613+ 833C              //  ______________________________________________________________________
 614+ 833C              //
 615+ 833C              // u.           u --
 616+ 833C                              Colon_Def U_DOT, "U.", is_normal
 616+ 833C             >                New_Def  U_DOT, "U.", Enter_Ptr, is_normal ; ok
 616+ 833C             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 616+ 833C             >
 616+ 833C             >                // dummy db directives used to calculate length of namec
 616+ 833C 55 2E       >                db      "U."
 616+ 833E             >len_NFA         defl    $ - temp_NFA
 616+ 833E             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 616+ 833C             >
 616+ 833C 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 616+ 833D 55 2E       >                db      "U."               // name string in 7-bit ascii, but
 616+ 833F             >                org     $-1                 // alter last byte of Name just above to set
 616+ 833E AE          >                db      {b $} | END_BIT     // msb as name end
 616+ 833F             >
 616+ 833F 30 83       >                dw      last_NFA            // Link to previous definition Name
 616+ 8341             >U_DOT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 616+ 8341 7D 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 616+ 8343             >                else
 616+ 8343 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 616+ 8343             >                endif           ; ok        // for other definitions it "points" the correct handler
 616+ 8343             >                // Use of "; ok" to suppress "warning[fwdref]"
 616+ 8343             >
 616+ 8343             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 617+ 8343 FA 6C 1A 83                  dw      ZERO, D_DOT
 618+ 8347 A3 69                        dw      EXIT
 619+ 8349
 620+ 8349              //  ______________________________________________________________________
 621+ 8349              //
 622+ 8349              // words        --
 623+ 8349                              Colon_Def WORDS, "WORDS", is_normal
 623+ 8349             >                New_Def  WORDS, "WORDS", Enter_Ptr, is_normal ; ok
 623+ 8349             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 623+ 8349             >
 623+ 8349             >                // dummy db directives used to calculate length of namec
 623+ 8349 57 4F 52 44 >                db      "WORDS"
 623+ 834D 53          >
 623+ 834E             >len_NFA         defl    $ - temp_NFA
 623+ 834E             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 623+ 8349             >
 623+ 8349 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 623+ 834A 57 4F 52 44 >                db      "WORDS"               // name string in 7-bit ascii, but
 623+ 834E 53          >
 623+ 834F             >                org     $-1                 // alter last byte of Name just above to set
 623+ 834E D3          >                db      {b $} | END_BIT     // msb as name end
 623+ 834F             >
 623+ 834F 3C 83       >                dw      last_NFA            // Link to previous definition Name
 623+ 8351             >WORDS:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 623+ 8351 7D 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 623+ 8353             >                else
 623+ 8353 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 623+ 8353             >                endif           ; ok        // for other definitions it "points" the correct handler
 623+ 8353             >                // Use of "; ok" to suppress "warning[fwdref]"
 623+ 8353             >
 623+ 8353             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 624+ 8353 A9 63 80 00                  dw      LIT, 128, OUT, STORE
 624+ 8357 0B 6E A8 6B
 625+ 835B 2D 6E 9B 6B                  dw      CONTEXT, FETCH, FETCH
 625+ 835F 9B 6B
 626+ 8361              Words_Begin:
 627+ 8361 08 6B B6 6B                  dw          DUP, CFETCH, LIT, $1F, AND_OP
 627+ 8365 A9 63 1F 00
 627+ 8369 33 69
 628+ 836B 0B 6E 9B 6B                  dw          OUT, FETCH, PLUS
 628+ 836F 28 6A
 629+ 8371 2E 6D 5B 6F                  dw          CL, LESS, ZEQUAL
 629+ 8375 E5 69
 630+ 8377 2C 64                        dw          ZBRANCH
 631+ 8379 0A 00                        dw          Words_Endif - $
 632+ 837B 2A 66 FA 6C                  dw              CR, ZERO, OUT, STORE
 632+ 837F 0B 6E A8 6B
 633+ 8383              Words_Endif:
 634+ 8383 08 6B 43 76                  dw          DUP, ID_DOT
 635+ 8387 58 70 2A 70                  dw          PFA, LFA, FETCH
 635+ 838B 9B 6B
 636+ 838D 08 6B E5 69                  dw          DUP, ZEQUAL
 637+ 8391 44 67 45 69                  dw          QTERMINAL, OR_OP
 638+ 8395 2C 64                        dw      ZBRANCH
 639+ 8397 CA FF                        dw      Words_Begin - $
 640+ 8399 D3 6A                        dw      DROP
 641+ 839B A3 69                        dw      EXIT
 642+ 839D
 643+ 839D              //  ______________________________________________________________________
 644+ 839D              //
 645+ 839D              // list         n --
 646+ 839D                              Colon_Def LIST, "LIST", is_normal
 646+ 839D             >                New_Def  LIST, "LIST", Enter_Ptr, is_normal ; ok
 646+ 839D             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 646+ 839D             >
 646+ 839D             >                // dummy db directives used to calculate length of namec
 646+ 839D 4C 49 53 54 >                db      "LIST"
 646+ 83A1             >len_NFA         defl    $ - temp_NFA
 646+ 83A1             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 646+ 839D             >
 646+ 839D 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 646+ 839E 4C 49 53 54 >                db      "LIST"               // name string in 7-bit ascii, but
 646+ 83A2             >                org     $-1                 // alter last byte of Name just above to set
 646+ 83A1 D4          >                db      {b $} | END_BIT     // msb as name end
 646+ 83A2             >
 646+ 83A2 49 83       >                dw      last_NFA            // Link to previous definition Name
 646+ 83A4             >LIST:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 646+ 83A4 7D 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 646+ 83A6             >                else
 646+ 83A6 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 646+ 83A6             >                endif           ; ok        // for other definitions it "points" the correct handler
 646+ 83A6             >                // Use of "; ok" to suppress "warning[fwdref]"
 646+ 83A6             >
 646+ 83A6             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 647+ 83A6 BD 71 2A 66                  dw      DECIMAL, CR
 648+ 83AA 08 6B 14 6E                  dw      DUP, SCR, STORE
 648+ 83AE A8 6B
 649+ 83B0 6F 74                        dw      C_DOT_QUOTE
 650+ 83B2 05 53 63 72                  db      5, "Scr# "
 650+ 83B6 23 20
 651+ 83B8 28 83                        dw      DOT
 652+ 83BA 52 6D FA 6C                  dw      LSCR, ZERO, C_DO
 652+ 83BE 86 64
 653+ 83C0              List_Loop:
 654+ 83C0 2A 66                        dw          CR
 655+ 83C2 90 64 12 6D                  dw          I, THREE
 656+ 83C6 09 83 E4 6F                  dw          DOT_R, SPACE
 657+ 83CA 90 64 14 6E                  dw          I, SCR, FETCH, DOT_LINE
 657+ 83CE 9B 6B D6 7A
 658+ 83D2 44 67                        dw          QTERMINAL
 659+ 83D4 2C 64                        dw          ZBRANCH
 660+ 83D6 06 00                        dw          List_Endif - $
 661+ 83D8 41 64                        dw              C_LEAVE
 662+ 83DA 06 00                        dw              List_Leave - $
 663+ 83DC              List_Endif:
 664+ 83DC 04 64                        dw      C_LOOP
 665+ 83DE E2 FF                        dw      List_Loop - $
 666+ 83E0              List_Leave:
 667+ 83E0 2A 66                        dw      CR
 668+ 83E2 A3 69                        dw      EXIT
 669+ 83E4
 670+ 83E4              //  ______________________________________________________________________
 671+ 83E4              //
 672+ 83E4              // index        n1 n2 --
 673+ 83E4                              Colon_Def INDEX, "INDEX", is_normal
 673+ 83E4             >                New_Def  INDEX, "INDEX", Enter_Ptr, is_normal ; ok
 673+ 83E4             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 673+ 83E4             >
 673+ 83E4             >                // dummy db directives used to calculate length of namec
 673+ 83E4 49 4E 44 45 >                db      "INDEX"
 673+ 83E8 58          >
 673+ 83E9             >len_NFA         defl    $ - temp_NFA
 673+ 83E9             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 673+ 83E4             >
 673+ 83E4 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 673+ 83E5 49 4E 44 45 >                db      "INDEX"               // name string in 7-bit ascii, but
 673+ 83E9 58          >
 673+ 83EA             >                org     $-1                 // alter last byte of Name just above to set
 673+ 83E9 D8          >                db      {b $} | END_BIT     // msb as name end
 673+ 83EA             >
 673+ 83EA 9D 83       >                dw      last_NFA            // Link to previous definition Name
 673+ 83EC             >INDEX:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 673+ 83EC 7D 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 673+ 83EE             >                else
 673+ 83EE ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 673+ 83EE             >                endif           ; ok        // for other definitions it "points" the correct handler
 673+ 83EE             >                // Use of "; ok" to suppress "warning[fwdref]"
 673+ 83EE             >
 673+ 83EE             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 674+ 83EE 49 6A FB 6A                  dw      ONE_PLUS, SWAP, C_DO
 674+ 83F2 86 64
 675+ 83F4              Index_Loop:
 676+ 83F4 2A 66 90 64                  dw          CR, I, THREE
 676+ 83F8 12 6D
 677+ 83FA 09 83 E4 6F                  dw          DOT_R, SPACE
 678+ 83FE FA 6C 90 64                  dw          ZERO, I, DOT_LINE
 678+ 8402 D6 7A
 679+ 8404 44 67                        dw          QTERMINAL
 680+ 8406 2C 64                        dw          ZBRANCH
 681+ 8408 06 00                        dw          Index_Endif - $
 682+ 840A 41 64                        dw              C_LEAVE
 683+ 840C 06 00                        dw              Index_Leave - $
 684+ 840E              Index_Endif:
 685+ 840E 04 64                        dw      C_LOOP
 686+ 8410 E4 FF                        dw      Index_Loop - $
 687+ 8412              Index_Leave:
 688+ 8412 2A 66                        dw      CR
 689+ 8414 A3 69                        dw      EXIT
 690+ 8416
 691+ 8416              //  ______________________________________________________________________
 692+ 8416              //
 693+ 8416              // cls          --
 694+ 8416                              Colon_Def CLS, "CLS", is_normal
 694+ 8416             >                New_Def  CLS, "CLS", Enter_Ptr, is_normal ; ok
 694+ 8416             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 694+ 8416             >
 694+ 8416             >                // dummy db directives used to calculate length of namec
 694+ 8416 43 4C 53    >                db      "CLS"
 694+ 8419             >len_NFA         defl    $ - temp_NFA
 694+ 8419             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 694+ 8416             >
 694+ 8416 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 694+ 8417 43 4C 53    >                db      "CLS"               // name string in 7-bit ascii, but
 694+ 841A             >                org     $-1                 // alter last byte of Name just above to set
 694+ 8419 D3          >                db      {b $} | END_BIT     // msb as name end
 694+ 841A             >
 694+ 841A E4 83       >                dw      last_NFA            // Link to previous definition Name
 694+ 841C             >CLS:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 694+ 841C 7D 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 694+ 841E             >                else
 694+ 841E ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 694+ 841E             >                endif           ; ok        // for other definitions it "points" the correct handler
 694+ 841E             >                // Use of "; ok" to suppress "warning[fwdref]"
 694+ 841E             >
 694+ 841E             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 695+ 841E A9 63 0E 00                  dw      LIT, $0E, EMITC
 695+ 8422 13 66
 696+ 8424 A3 69                        dw      EXIT
 697+ 8426
 698+ 8426              //  ______________________________________________________________________
 699+ 8426              //
 700+ 8426              // splash       --
 701+ 8426                              Colon_Def SPLASH, "SPLASH", is_normal
 701+ 8426             >                New_Def  SPLASH, "SPLASH", Enter_Ptr, is_normal ; ok
 701+ 8426             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 701+ 8426             >
 701+ 8426             >                // dummy db directives used to calculate length of namec
 701+ 8426 53 50 4C 41 >                db      "SPLASH"
 701+ 842A 53 48       >
 701+ 842C             >len_NFA         defl    $ - temp_NFA
 701+ 842C             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 701+ 8426             >
 701+ 8426 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 701+ 8427 53 50 4C 41 >                db      "SPLASH"               // name string in 7-bit ascii, but
 701+ 842B 53 48       >
 701+ 842D             >                org     $-1                 // alter last byte of Name just above to set
 701+ 842C C8          >                db      {b $} | END_BIT     // msb as name end
 701+ 842D             >
 701+ 842D 16 84       >                dw      last_NFA            // Link to previous definition Name
 701+ 842F             >SPLASH:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 701+ 842F 7D 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 701+ 8431             >                else
 701+ 8431 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 701+ 8431             >                endif           ; ok        // for other definitions it "points" the correct handler
 701+ 8431             >                // Use of "; ok" to suppress "warning[fwdref]"
 701+ 8431             >
 701+ 8431             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 702+ 8431 1C 84                        dw      CLS
 703+ 8433 6F 74                        dw      C_DOT_QUOTE
 704+ 8435 5A                           db      90  // length of the following string CR included.
 705+ 8436 76 2D 46 6F                  db      "v-Forth 1.52 NextZXOS version", 13
 705+ 843A 72 74 68 20
 705+ 843E 31 2E 35 32
 705+ 8442 20 4E 65 78
 705+ 8446 74 5A 58 4F
 705+ 844A 53 20 76 65
 705+ 844E 72 73 69 6F
 705+ 8452 6E 0D
 706+ 8454 49 6E 64 69                  db      "Indirect Threaded - build 20230101", 13
 706+ 8458 72 65 63 74
 706+ 845C 20 54 68 72
 706+ 8460 65 61 64 65
 706+ 8464 64 20 2D 20
 706+ 8468 62 75 69 6C
 706+ 846C 64 20 32 30
 706+ 8470 32 33 30 31
 706+ 8474 30 31 0D
 707+ 8477 31 39 39 30                  db      "1990-2023 Matteo Vitturi", 13
 707+ 847B 2D 32 30 32
 707+ 847F 33 20 4D 61
 707+ 8483 74 74 65 6F
 707+ 8487 20 56 69 74
 707+ 848B 74 75 72 69
 707+ 848F 0D
 708+ 8490 A3 69                        dw      EXIT
 709+ 8492
 710+ 8492              //  ______________________________________________________________________
 711+ 8492              //
 712+ 8492              // video        --
 713+ 8492                              Colon_Def VIDEO, "VIDEO", is_normal
 713+ 8492             >                New_Def  VIDEO, "VIDEO", Enter_Ptr, is_normal ; ok
 713+ 8492             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 713+ 8492             >
 713+ 8492             >                // dummy db directives used to calculate length of namec
 713+ 8492 56 49 44 45 >                db      "VIDEO"
 713+ 8496 4F          >
 713+ 8497             >len_NFA         defl    $ - temp_NFA
 713+ 8497             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 713+ 8492             >
 713+ 8492 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 713+ 8493 56 49 44 45 >                db      "VIDEO"               // name string in 7-bit ascii, but
 713+ 8497 4F          >
 713+ 8498             >                org     $-1                 // alter last byte of Name just above to set
 713+ 8497 CF          >                db      {b $} | END_BIT     // msb as name end
 713+ 8498             >
 713+ 8498 26 84       >                dw      last_NFA            // Link to previous definition Name
 713+ 849A             >VIDEO:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 713+ 849A 7D 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 713+ 849C             >                else
 713+ 849C ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 713+ 849C             >                endif           ; ok        // for other definitions it "points" the correct handler
 713+ 849C             >                // Use of "; ok" to suppress "warning[fwdref]"
 713+ 849C             >
 713+ 849C             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 714+ 849C 0A 6D 08 6B                  dw      TWO, DUP, DEVICE, STORE
 714+ 84A0 1E 7B A8 6B
 715+ 84A4 85 67                        dw      SELECT
 716+ 84A6 A3 69                        dw      EXIT
 717+ 84A8
 718+ 84A8              //  ______________________________________________________________________
 719+ 84A8              //
 720+ 84A8              // accept-      a n1 -- n2
 721+ 84A8                              Colon_Def ACCEPT_N, "ACCEPT-", is_normal
 721+ 84A8             >                New_Def  ACCEPT_N, "ACCEPT-", Enter_Ptr, is_normal ; ok
 721+ 84A8             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 721+ 84A8             >
 721+ 84A8             >                // dummy db directives used to calculate length of namec
 721+ 84A8 41 43 43 45 >                db      "ACCEPT-"
 721+ 84AC 50 54 2D    >
 721+ 84AF             >len_NFA         defl    $ - temp_NFA
 721+ 84AF             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 721+ 84A8             >
 721+ 84A8 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 721+ 84A9 41 43 43 45 >                db      "ACCEPT-"               // name string in 7-bit ascii, but
 721+ 84AD 50 54 2D    >
 721+ 84B0             >                org     $-1                 // alter last byte of Name just above to set
 721+ 84AF AD          >                db      {b $} | END_BIT     // msb as name end
 721+ 84B0             >
 721+ 84B0 92 84       >                dw      last_NFA            // Link to previous definition Name
 721+ 84B2             >ACCEPT_N:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 721+ 84B2 7D 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 721+ 84B4             >                else
 721+ 84B4 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 721+ 84B4             >                endif           ; ok        // for other definitions it "points" the correct handler
 721+ 84B4             >                // Use of "; ok" to suppress "warning[fwdref]"
 721+ 84B4             >
 721+ 84B4             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 722+ 84B4 B6 69                        dw      TO_R
 723+ 84B6 FA 6C                        dw      ZERO
 724+ 84B8 FB 6A                        dw      SWAP
 725+ 84BA 08 6B                        dw      DUP
 726+ 84BC CA 69                        dw      R_TO
 727+ 84BE 28 6A                        dw      PLUS
 728+ 84C0 FB 6A                        dw      SWAP
 729+ 84C2 86 64                        dw      C_DO
 730+ 84C4              AcceptN_Loop:
 731+ 84C4 58 7B                        dw          MMU7_FETCH
 732+ 84C6 60 67                        dw          INKEY
 733+ 84C8 FB 6A 6A 7B                  dw          SWAP, MMU7_STORE
 734+ 84CC 08 6B E5 69                  dw          DUP, ZEQUAL
 735+ 84D0 2C 64                        dw          ZBRANCH
 736+ 84D2 06 00                        dw          AcceptN_Endif_1 - $
 737+ 84D4              //              dw              VIDEO, QUIT
 738+ 84D4 41 64                        dw              C_LEAVE
 739+ 84D6 3A 00                        dw              AcceptN_Leave - $
 740+ 84D8
 741+ 84D8              AcceptN_Endif_1:
 742+ 84D8 08 6B A9 63                  dw          DUP, LIT, 13, EQUALS
 742+ 84DC 0D 00 3A 6F
 743+ 84E0 2C 64                        dw          ZBRANCH
 744+ 84E2 06 00                        dw          AcceptN_Endif_2 - $
 745+ 84E4 D3 6A FA 6C                  dw              DROP, ZERO
 746+ 84E8              AcceptN_Endif_2:
 747+ 84E8 08 6B A9 63                  dw          DUP, LIT, 10, EQUALS
 747+ 84EC 0A 00 3A 6F
 748+ 84F0 2C 64                        dw          ZBRANCH
 749+ 84F2 06 00                        dw          AcceptN_Endif_3 - $
 750+ 84F4 D3 6A FA 6C                  dw              DROP, ZERO
 751+ 84F8              AcceptN_Endif_3:
 752+ 84F8 90 64 C4 6B                  dw          I, CSTORE, ONE_PLUS
 752+ 84FC 49 6A
 753+ 84FE
 754+ 84FE 90 64 B6 6B                  dw          I, CFETCH, ZEQUAL   //      i 0= if
 754+ 8502 E5 69
 755+ 8504 2C 64                        dw          ZBRANCH
 756+ 8506 06 00                        dw              AcceptN_Endif_4 - $
 757+ 8508 41 64                        dw                  C_LEAVE     //              leave
 758+ 850A 06 00                        dw                  AcceptN_Leave - $
 759+ 850C              AcceptN_Endif_4:                                 //      endif
 760+ 850C
 761+ 850C 04 64                        dw      C_LOOP
 762+ 850E B6 FF                        dw      AcceptN_Loop -$
 763+ 8510              AcceptN_Leave:
 764+ 8510 A3 69                        dw      EXIT
 765+ 8512
 766+ 8512              //  ______________________________________________________________________
 767+ 8512              //
 768+ 8512              // load-        n --
 769+ 8512              // Provided that a stream n is OPEN# via the standart BASIC
 770+ 8512              // it accepts text from stream #n to the normal INTERPRET
 771+ 8512              // up to now, text-file must end with QUIT
 772+ 8512                              Colon_Def LOAD_N, "LOAD-", is_normal
 772+ 8512             >                New_Def  LOAD_N, "LOAD-", Enter_Ptr, is_normal ; ok
 772+ 8512             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 772+ 8512             >
 772+ 8512             >                // dummy db directives used to calculate length of namec
 772+ 8512 4C 4F 41 44 >                db      "LOAD-"
 772+ 8516 2D          >
 772+ 8517             >len_NFA         defl    $ - temp_NFA
 772+ 8517             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 772+ 8512             >
 772+ 8512 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 772+ 8513 4C 4F 41 44 >                db      "LOAD-"               // name string in 7-bit ascii, but
 772+ 8517 2D          >
 772+ 8518             >                org     $-1                 // alter last byte of Name just above to set
 772+ 8517 AD          >                db      {b $} | END_BIT     // msb as name end
 772+ 8518             >
 772+ 8518 A8 84       >                dw      last_NFA            // Link to previous definition Name
 772+ 851A             >LOAD_N:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 772+ 851A 7D 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 772+ 851C             >                else
 772+ 851C ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 772+ 851C             >                endif           ; ok        // for other definitions it "points" the correct handler
 772+ 851C             >                // Use of "; ok" to suppress "warning[fwdref]"
 772+ 851C             >
 772+ 851C             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 773+ 851C B0 6E A8 6B                  dw      SOURCE_ID, STORE
 774+ 8520              Load_N_Begin:
 775+ 8520 8D 6D 9B 6B                  dw          TIB, FETCH
 776+ 8524 08 6B A9 63                  dw          DUP, LIT, 80
 776+ 8528 50 00
 777+ 852A 69 6B E8 73                  dw          TWO_DUP, BLANK
 778+ 852E B0 6E 9B 6B                  dw          SOURCE_ID, FETCH
 779+ 8532 98 79 08 6B                  dw          ABS_OP, DUP, DEVICE, STORE
 779+ 8536 1E 7B A8 6B
 780+ 853A 85 67                        dw          SELECT
 781+ 853C B2 84                        dw          ACCEPT_N
 782+ 853E 9A 84                        dw          VIDEO
 783+ 8540 49 6B                        dw          TWO_DROP
 784+ 8542 FA 6C F9 6D                  dw          ZERO, BLK, STORE
 784+ 8546 A8 6B
 785+ 8548 FA 6C 02 6E                  dw          ZERO, TO_IN, STORE
 785+ 854C A8 6B
 786+ 854E C0 77                        dw          INTERPRET
 787+ 8550 44 67                        dw          QTERMINAL
 788+ 8552 2C 64                        dw      ZBRANCH
 789+ 8554 CC FF                        dw      Load_N_Begin - $
 790+ 8556 A3 69                        dw      EXIT
 791+ 8558
 792+ 8558              //  ______________________________________________________________________
 793+ 8558              //
 794+ 8558              // load         n --
 795+ 8558              // if n is positive, it loads screen #n (as usual)
 796+ 8558              // if n is negative, it connects stream #n to the normal INTERPRET
 797+ 8558              // this second way is useful if you want to load any kind of file
 798+ 8558              // provied that it is OPEN# the usual BASIC way.
 799+ 8558                              Colon_Def LOAD, "LOAD", is_normal
 799+ 8558             >                New_Def  LOAD, "LOAD", Enter_Ptr, is_normal ; ok
 799+ 8558             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 799+ 8558             >
 799+ 8558             >                // dummy db directives used to calculate length of namec
 799+ 8558 4C 4F 41 44 >                db      "LOAD"
 799+ 855C             >len_NFA         defl    $ - temp_NFA
 799+ 855C             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 799+ 8558             >
 799+ 8558 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 799+ 8559 4C 4F 41 44 >                db      "LOAD"               // name string in 7-bit ascii, but
 799+ 855D             >                org     $-1                 // alter last byte of Name just above to set
 799+ 855C C4          >                db      {b $} | END_BIT     // msb as name end
 799+ 855D             >
 799+ 855D 12 85       >                dw      last_NFA            // Link to previous definition Name
 799+ 855F             >LOAD:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 799+ 855F 7D 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 799+ 8561             >                else
 799+ 8561 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 799+ 8561             >                endif           ; ok        // for other definitions it "points" the correct handler
 799+ 8561             >                // Use of "; ok" to suppress "warning[fwdref]"
 799+ 8561             >
 799+ 8561             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 800+ 8561 08 6B 00 6A                  dw      DUP, ZLESS
 801+ 8565 2C 64                        dw      ZBRANCH
 802+ 8567 08 00                        dw      Load_Else - $
 803+ 8569 1A 85                        dw          LOAD_N
 804+ 856B 15 64                        dw      BRANCH
 805+ 856D 04 00                        dw      Load_Endif - $
 806+ 856F              Load_Else:
 807+ 856F 37 81                        dw          LOAD_P
 808+ 8571              Load_Endif:
 809+ 8571 A3 69                        dw      EXIT
 810+ 8573
 811+ 8573
 812+ 8573              //  ______________________________________________________________________
 813+ 8573              //
 814+ 8573              // autoexec     --
 815+ 8573              // this word is called the first time the Forth system boot to
 816+ 8573              // load Screen# 1. Once called it patches itself to prevent furhter runs.
 817+ 8573                              Colon_Def AUTOEXEC, "AUTOEXEC", is_normal
 817+ 8573             >                New_Def  AUTOEXEC, "AUTOEXEC", Enter_Ptr, is_normal ; ok
 817+ 8573             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 817+ 8573             >
 817+ 8573             >                // dummy db directives used to calculate length of namec
 817+ 8573 41 55 54 4F >                db      "AUTOEXEC"
 817+ 8577 45 58 45 43 >
 817+ 857B             >len_NFA         defl    $ - temp_NFA
 817+ 857B             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 817+ 8573             >
 817+ 8573 88          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 817+ 8574 41 55 54 4F >                db      "AUTOEXEC"               // name string in 7-bit ascii, but
 817+ 8578 45 58 45 43 >
 817+ 857C             >                org     $-1                 // alter last byte of Name just above to set
 817+ 857B C3          >                db      {b $} | END_BIT     // msb as name end
 817+ 857C             >
 817+ 857C 58 85       >                dw      last_NFA            // Link to previous definition Name
 817+ 857E             >AUTOEXEC:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 817+ 857E 7D 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 817+ 8580             >                else
 817+ 8580 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 817+ 8580             >                endif           ; ok        // for other definitions it "points" the correct handler
 817+ 8580             >                // Use of "; ok" to suppress "warning[fwdref]"
 817+ 8580             >
 817+ 8580             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 818+ 8580 A9 63 0B 00                  dw      LIT, 11
 819+ 8584 A9 63 A5 6C                  dw      LIT, NOOP
 820+ 8588 A9 63 C7 78                  dw      LIT, Autoexec_Ptr
 821+ 858C A8 6B                        dw      STORE
 822+ 858E 5F 85                        dw      LOAD
 823+ 8590 78 78                        dw      QUIT
 824+ 8592 A3 69                        dw      EXIT
 825+ 8594
 826+ 8594
 827+ 8594              //  ______________________________________________________________________
 828+ 8594              //
 829+ 8594              // bye     --
 830+ 8594              //
 831+ 8594                              Colon_Def BYE, "BYE", is_normal
 831+ 8594             >                New_Def  BYE, "BYE", Enter_Ptr, is_normal ; ok
 831+ 8594             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 831+ 8594             >
 831+ 8594             >                // dummy db directives used to calculate length of namec
 831+ 8594 42 59 45    >                db      "BYE"
 831+ 8597             >len_NFA         defl    $ - temp_NFA
 831+ 8597             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 831+ 8594             >
 831+ 8594 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 831+ 8595 42 59 45    >                db      "BYE"               // name string in 7-bit ascii, but
 831+ 8598             >                org     $-1                 // alter last byte of Name just above to set
 831+ 8597 C5          >                db      {b $} | END_BIT     // msb as name end
 831+ 8598             >
 831+ 8598 73 85       >                dw      last_NFA            // Link to previous definition Name
 831+ 859A             >BYE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 831+ 859A 7D 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 831+ 859C             >                else
 831+ 859C ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 831+ 859C             >                endif           ; ok        // for other definitions it "points" the correct handler
 831+ 859C             >                // Use of "; ok" to suppress "warning[fwdref]"
 831+ 859C             >
 831+ 859C             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 832+ 859C D5 7D                        dw      FLUSH
 833+ 859E 08 7D                        dw      EMPTY_BUFFERS
 834+ 85A0 AC 7B 9B 6B                  dw      BLK_FH, FETCH, F_CLOSE, DROP
 834+ 85A4 CB 67 D3 6A
 835+ 85A8 FA 6C 60 6D                  dw      ZERO, PLUS_ORIGIN
 836+ 85AC 5D 79                        dw      BASIC
 837+ 85AE
 838+ 85AE              //  ______________________________________________________________________
 839+ 85AE              //
 840+ 85AE              // invv     --
 841+ 85AE              //
 842+ 85AE              //              Colon_Def INVV, "INVV", is_normal
 843+ 85AE              //              dw      LIT, 20, EMITC, ONE, EMITC
 844+ 85AE              //              dw      EXIT
 845+ 85AE
 846+ 85AE              //  ______________________________________________________________________
 847+ 85AE              //
 848+ 85AE              // truv     --
 849+ 85AE              //
 850+ 85AE              //              Colon_Def TRUV, "TRUV", is_normal
 851+ 85AE              //              dw      LIT, 20, EMITC, ZERO, EMITC
 852+ 85AE              //              dw      EXIT
 853+ 85AE
 854+ 85AE              //  ______________________________________________________________________
 855+ 85AE              //
 856+ 85AE              // mark     --
 857+ 85AE              //
 858+ 85AE              //              Colon_Def MARK, "MARK", is_normal
 859+ 85AE              //              dw      INVV, TYPE, TRUV
 860+ 85AE              //              dw      EXIT
 861+ 85AE
 862+ 85AE              //  ______________________________________________________________________
 863+ 85AE              //
 864+ 85AE              // back     --
 865+ 85AE              //
 866+ 85AE                              Colon_Def BACK, "BACK", is_normal
 866+ 85AE             >                New_Def  BACK, "BACK", Enter_Ptr, is_normal ; ok
 866+ 85AE             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 866+ 85AE             >
 866+ 85AE             >                // dummy db directives used to calculate length of namec
 866+ 85AE 42 41 43 4B >                db      "BACK"
 866+ 85B2             >len_NFA         defl    $ - temp_NFA
 866+ 85B2             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 866+ 85AE             >
 866+ 85AE 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 866+ 85AF 42 41 43 4B >                db      "BACK"               // name string in 7-bit ascii, but
 866+ 85B3             >                org     $-1                 // alter last byte of Name just above to set
 866+ 85B2 CB          >                db      {b $} | END_BIT     // msb as name end
 866+ 85B3             >
 866+ 85B3 94 85       >                dw      last_NFA            // Link to previous definition Name
 866+ 85B5             >BACK:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 866+ 85B5 7D 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 866+ 85B7             >                else
 866+ 85B7 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 866+ 85B7             >                endif           ; ok        // for other definitions it "points" the correct handler
 866+ 85B7             >                // Use of "; ok" to suppress "warning[fwdref]"
 866+ 85B7             >
 866+ 85B7             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 867+ 85B7 D9 6E 2C 6F                  dw      HERE, SUBTRACT, COMMA
 867+ 85BB F5 6E
 868+ 85BD A3 69                        dw      EXIT
 869+ 85BF
 870+ 85BF              //  ______________________________________________________________________
 871+ 85BF              //
 872+ 85BF              // if          ( -- a 2 ) \ compile-time
 873+ 85BF              // IF ... THEN
 874+ 85BF              // IF ... ELSE ... ENDIF
 875+ 85BF                              Colon_Def IF, "IF", is_immediate
 875+ 85BF             >                New_Def  IF, "IF", Enter_Ptr, is_immediate ; ok
 875+ 85BF             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 875+ 85BF             >
 875+ 85BF             >                // dummy db directives used to calculate length of namec
 875+ 85BF 49 46       >                db      "IF"
 875+ 85C1             >len_NFA         defl    $ - temp_NFA
 875+ 85C1             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 875+ 85BF             >
 875+ 85BF C2          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 875+ 85C0 49 46       >                db      "IF"               // name string in 7-bit ascii, but
 875+ 85C2             >                org     $-1                 // alter last byte of Name just above to set
 875+ 85C1 C6          >                db      {b $} | END_BIT     // msb as name end
 875+ 85C2             >
 875+ 85C2 AE 85       >                dw      last_NFA            // Link to previous definition Name
 875+ 85C4             >IF:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 875+ 85C4 7D 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 875+ 85C6             >                else
 875+ 85C6 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 875+ 85C6             >                endif           ; ok        // for other definitions it "points" the correct handler
 875+ 85C6             >                // Use of "; ok" to suppress "warning[fwdref]"
 875+ 85C6             >
 875+ 85C6             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 876+ 85C6 31 71 2C 64                  dw      COMPILE, ZBRANCH
 877+ 85CA D9 6E FA 6C                  dw      HERE, ZERO, COMMA
 877+ 85CE F5 6E
 878+ 85D0 0A 6D                        dw      TWO
 879+ 85D2 A3 69                        dw      EXIT
 880+ 85D4
 881+ 85D4              //  ______________________________________________________________________
 882+ 85D4              //
 883+ 85D4              // then        ( a 2 -- ) \ compile-time
 884+ 85D4              //
 885+ 85D4                              Colon_Def THEN, "THEN", is_immediate
 885+ 85D4             >                New_Def  THEN, "THEN", Enter_Ptr, is_immediate ; ok
 885+ 85D4             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 885+ 85D4             >
 885+ 85D4             >                // dummy db directives used to calculate length of namec
 885+ 85D4 54 48 45 4E >                db      "THEN"
 885+ 85D8             >len_NFA         defl    $ - temp_NFA
 885+ 85D8             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 885+ 85D4             >
 885+ 85D4 C4          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 885+ 85D5 54 48 45 4E >                db      "THEN"               // name string in 7-bit ascii, but
 885+ 85D9             >                org     $-1                 // alter last byte of Name just above to set
 885+ 85D8 CE          >                db      {b $} | END_BIT     // msb as name end
 885+ 85D9             >
 885+ 85D9 BF 85       >                dw      last_NFA            // Link to previous definition Name
 885+ 85DB             >THEN:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 885+ 85DB 7D 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 885+ 85DD             >                else
 885+ 85DD ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 885+ 85DD             >                endif           ; ok        // for other definitions it "points" the correct handler
 885+ 85DD             >                // Use of "; ok" to suppress "warning[fwdref]"
 885+ 85DD             >
 885+ 85DD             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 886+ 85DD B8 70                        dw      QCOMP
 887+ 85DF 0A 6D E7 70                  dw      TWO, QPAIRS
 888+ 85E3 D9 6E C3 6A                  dw      HERE, OVER, SUBTRACT, SWAP, STORE
 888+ 85E7 2C 6F FB 6A
 888+ 85EB A8 6B
 889+ 85ED A3 69                        dw      EXIT
 890+ 85EF
 891+ 85EF              //  ______________________________________________________________________
 892+ 85EF              //
 893+ 85EF              // endif       ( a 2 -- ) \ compile-time
 894+ 85EF              //
 895+ 85EF                              Colon_Def ENDIF, "ENDIF", is_immediate
 895+ 85EF             >                New_Def  ENDIF, "ENDIF", Enter_Ptr, is_immediate ; ok
 895+ 85EF             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 895+ 85EF             >
 895+ 85EF             >                // dummy db directives used to calculate length of namec
 895+ 85EF 45 4E 44 49 >                db      "ENDIF"
 895+ 85F3 46          >
 895+ 85F4             >len_NFA         defl    $ - temp_NFA
 895+ 85F4             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 895+ 85EF             >
 895+ 85EF C5          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 895+ 85F0 45 4E 44 49 >                db      "ENDIF"               // name string in 7-bit ascii, but
 895+ 85F4 46          >
 895+ 85F5             >                org     $-1                 // alter last byte of Name just above to set
 895+ 85F4 C6          >                db      {b $} | END_BIT     // msb as name end
 895+ 85F5             >
 895+ 85F5 D4 85       >                dw      last_NFA            // Link to previous definition Name
 895+ 85F7             >ENDIF:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 895+ 85F7 7D 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 895+ 85F9             >                else
 895+ 85F9 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 895+ 85F9             >                endif           ; ok        // for other definitions it "points" the correct handler
 895+ 85F9             >                // Use of "; ok" to suppress "warning[fwdref]"
 895+ 85F9             >
 895+ 85F9             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 896+ 85F9 DB 85                        dw      THEN
 897+ 85FB A3 69                        dw      EXIT
 898+ 85FD
 899+ 85FD              //  ______________________________________________________________________
 900+ 85FD              //
 901+ 85FD              // else        ( a1 2 -- a2 2 ) \ compile-time
 902+ 85FD              //
 903+ 85FD                              Colon_Def ELSE, "ELSE", is_immediate
 903+ 85FD             >                New_Def  ELSE, "ELSE", Enter_Ptr, is_immediate ; ok
 903+ 85FD             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 903+ 85FD             >
 903+ 85FD             >                // dummy db directives used to calculate length of namec
 903+ 85FD 45 4C 53 45 >                db      "ELSE"
 903+ 8601             >len_NFA         defl    $ - temp_NFA
 903+ 8601             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 903+ 85FD             >
 903+ 85FD C4          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 903+ 85FE 45 4C 53 45 >                db      "ELSE"               // name string in 7-bit ascii, but
 903+ 8602             >                org     $-1                 // alter last byte of Name just above to set
 903+ 8601 C5          >                db      {b $} | END_BIT     // msb as name end
 903+ 8602             >
 903+ 8602 EF 85       >                dw      last_NFA            // Link to previous definition Name
 903+ 8604             >ELSE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 903+ 8604 7D 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 903+ 8606             >                else
 903+ 8606 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 903+ 8606             >                endif           ; ok        // for other definitions it "points" the correct handler
 903+ 8606             >                // Use of "; ok" to suppress "warning[fwdref]"
 903+ 8606             >
 903+ 8606             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 904+ 8606 B8 70                        dw      QCOMP
 905+ 8608 0A 6D E7 70                  dw      TWO, QPAIRS
 906+ 860C 31 71 15 64                  dw      COMPILE, BRANCH
 907+ 8610 D9 6E FA 6C                  dw      HERE, ZERO, COMMA
 907+ 8614 F5 6E
 908+ 8616 FB 6A 0A 6D                  dw      SWAP, TWO, THEN
 908+ 861A DB 85
 909+ 861C 0A 6D                        dw      TWO
 910+ 861E A3 69                        dw      EXIT
 911+ 8620
 912+ 8620              //  ______________________________________________________________________
 913+ 8620              //
 914+ 8620              // begin        ( -- a 1 ) \ compile-time
 915+ 8620              // BEGIN ... AGAIN
 916+ 8620              // BEGIN ... f UNTIL
 917+ 8620              // BEGIN ... f WHILE ... REPEAT
 918+ 8620                              Colon_Def BEGIN, "BEGIN", is_immediate
 918+ 8620             >                New_Def  BEGIN, "BEGIN", Enter_Ptr, is_immediate ; ok
 918+ 8620             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 918+ 8620             >
 918+ 8620             >                // dummy db directives used to calculate length of namec
 918+ 8620 42 45 47 49 >                db      "BEGIN"
 918+ 8624 4E          >
 918+ 8625             >len_NFA         defl    $ - temp_NFA
 918+ 8625             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 918+ 8620             >
 918+ 8620 C5          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 918+ 8621 42 45 47 49 >                db      "BEGIN"               // name string in 7-bit ascii, but
 918+ 8625 4E          >
 918+ 8626             >                org     $-1                 // alter last byte of Name just above to set
 918+ 8625 CE          >                db      {b $} | END_BIT     // msb as name end
 918+ 8626             >
 918+ 8626 FD 85       >                dw      last_NFA            // Link to previous definition Name
 918+ 8628             >BEGIN:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 918+ 8628 7D 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 918+ 862A             >                else
 918+ 862A ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 918+ 862A             >                endif           ; ok        // for other definitions it "points" the correct handler
 918+ 862A             >                // Use of "; ok" to suppress "warning[fwdref]"
 918+ 862A             >
 918+ 862A             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 919+ 862A B8 70                        dw      QCOMP
 920+ 862C D9 6E                        dw      HERE
 921+ 862E 0A 6D                        dw      TWO
 922+ 8630 A3 69                        dw      EXIT
 923+ 8632
 924+ 8632              //  ______________________________________________________________________
 925+ 8632              //
 926+ 8632              // again        ( a 1 -- ) \ compile-time
 927+ 8632                              Colon_Def AGAIN, "AGAIN", is_immediate
 927+ 8632             >                New_Def  AGAIN, "AGAIN", Enter_Ptr, is_immediate ; ok
 927+ 8632             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 927+ 8632             >
 927+ 8632             >                // dummy db directives used to calculate length of namec
 927+ 8632 41 47 41 49 >                db      "AGAIN"
 927+ 8636 4E          >
 927+ 8637             >len_NFA         defl    $ - temp_NFA
 927+ 8637             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 927+ 8632             >
 927+ 8632 C5          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 927+ 8633 41 47 41 49 >                db      "AGAIN"               // name string in 7-bit ascii, but
 927+ 8637 4E          >
 927+ 8638             >                org     $-1                 // alter last byte of Name just above to set
 927+ 8637 CE          >                db      {b $} | END_BIT     // msb as name end
 927+ 8638             >
 927+ 8638 20 86       >                dw      last_NFA            // Link to previous definition Name
 927+ 863A             >AGAIN:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 927+ 863A 7D 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 927+ 863C             >                else
 927+ 863C ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 927+ 863C             >                endif           ; ok        // for other definitions it "points" the correct handler
 927+ 863C             >                // Use of "; ok" to suppress "warning[fwdref]"
 927+ 863C             >
 927+ 863C             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 928+ 863C B8 70                        dw      QCOMP
 929+ 863E 0A 6D E7 70                  dw      TWO, QPAIRS
 930+ 8642 31 71 15 64                  dw      COMPILE, BRANCH
 931+ 8646 B5 85                        dw      BACK
 932+ 8648 A3 69                        dw      EXIT
 933+ 864A
 934+ 864A              //  ______________________________________________________________________
 935+ 864A              //
 936+ 864A              // until        ( a 1 -- ) \ compile-time
 937+ 864A                              Colon_Def UNTIL, "UNTIL", is_immediate
 937+ 864A             >                New_Def  UNTIL, "UNTIL", Enter_Ptr, is_immediate ; ok
 937+ 864A             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 937+ 864A             >
 937+ 864A             >                // dummy db directives used to calculate length of namec
 937+ 864A 55 4E 54 49 >                db      "UNTIL"
 937+ 864E 4C          >
 937+ 864F             >len_NFA         defl    $ - temp_NFA
 937+ 864F             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 937+ 864A             >
 937+ 864A C5          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 937+ 864B 55 4E 54 49 >                db      "UNTIL"               // name string in 7-bit ascii, but
 937+ 864F 4C          >
 937+ 8650             >                org     $-1                 // alter last byte of Name just above to set
 937+ 864F CC          >                db      {b $} | END_BIT     // msb as name end
 937+ 8650             >
 937+ 8650 32 86       >                dw      last_NFA            // Link to previous definition Name
 937+ 8652             >UNTIL:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 937+ 8652 7D 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 937+ 8654             >                else
 937+ 8654 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 937+ 8654             >                endif           ; ok        // for other definitions it "points" the correct handler
 937+ 8654             >                // Use of "; ok" to suppress "warning[fwdref]"
 937+ 8654             >
 937+ 8654             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 938+ 8654 B8 70                        dw      QCOMP
 939+ 8656 0A 6D E7 70                  dw      TWO, QPAIRS
 940+ 865A 31 71 2C 64                  dw      COMPILE, ZBRANCH
 941+ 865E B5 85                        dw      BACK
 942+ 8660 A3 69                        dw      EXIT
 943+ 8662
 944+ 8662              //  ______________________________________________________________________
 945+ 8662              //
 946+ 8662              // end          ( a 1 -- ) \ compile-time
 947+ 8662                              Colon_Def END, "END", is_immediate
 947+ 8662             >                New_Def  END, "END", Enter_Ptr, is_immediate ; ok
 947+ 8662             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 947+ 8662             >
 947+ 8662             >                // dummy db directives used to calculate length of namec
 947+ 8662 45 4E 44    >                db      "END"
 947+ 8665             >len_NFA         defl    $ - temp_NFA
 947+ 8665             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 947+ 8662             >
 947+ 8662 C3          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 947+ 8663 45 4E 44    >                db      "END"               // name string in 7-bit ascii, but
 947+ 8666             >                org     $-1                 // alter last byte of Name just above to set
 947+ 8665 C4          >                db      {b $} | END_BIT     // msb as name end
 947+ 8666             >
 947+ 8666 4A 86       >                dw      last_NFA            // Link to previous definition Name
 947+ 8668             >END:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 947+ 8668 7D 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 947+ 866A             >                else
 947+ 866A ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 947+ 866A             >                endif           ; ok        // for other definitions it "points" the correct handler
 947+ 866A             >                // Use of "; ok" to suppress "warning[fwdref]"
 947+ 866A             >
 947+ 866A             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 948+ 866A 52 86                        dw      UNTIL
 949+ 866C A3 69                        dw      EXIT
 950+ 866E
 951+ 866E              //  ______________________________________________________________________
 952+ 866E              //
 953+ 866E              // while        ( a1 1 -- a1 1 a2 4 ) \ compile-time
 954+ 866E                              Colon_Def WHILE, "WHILE", is_immediate
 954+ 866E             >                New_Def  WHILE, "WHILE", Enter_Ptr, is_immediate ; ok
 954+ 866E             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 954+ 866E             >
 954+ 866E             >                // dummy db directives used to calculate length of namec
 954+ 866E 57 48 49 4C >                db      "WHILE"
 954+ 8672 45          >
 954+ 8673             >len_NFA         defl    $ - temp_NFA
 954+ 8673             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 954+ 866E             >
 954+ 866E C5          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 954+ 866F 57 48 49 4C >                db      "WHILE"               // name string in 7-bit ascii, but
 954+ 8673 45          >
 954+ 8674             >                org     $-1                 // alter last byte of Name just above to set
 954+ 8673 C5          >                db      {b $} | END_BIT     // msb as name end
 954+ 8674             >
 954+ 8674 62 86       >                dw      last_NFA            // Link to previous definition Name
 954+ 8676             >WHILE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 954+ 8676 7D 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 954+ 8678             >                else
 954+ 8678 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 954+ 8678             >                endif           ; ok        // for other definitions it "points" the correct handler
 954+ 8678             >                // Use of "; ok" to suppress "warning[fwdref]"
 954+ 8678             >
 954+ 8678             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 955+ 8678 C4 85                        dw      IF
 956+ 867A              //              dw      TWO_PLUS // ( that is 4 )
 957+ 867A 57 6B                        dw      TWO_SWAP
 958+ 867C A3 69                        dw      EXIT
 959+ 867E
 960+ 867E              //  ______________________________________________________________________
 961+ 867E              //
 962+ 867E              // repeat       ( a1 1 a2 4 -- ) \ compile-time
 963+ 867E                              Colon_Def REPEAT, "REPEAT", is_immediate
 963+ 867E             >                New_Def  REPEAT, "REPEAT", Enter_Ptr, is_immediate ; ok
 963+ 867E             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 963+ 867E             >
 963+ 867E             >                // dummy db directives used to calculate length of namec
 963+ 867E 52 45 50 45 >                db      "REPEAT"
 963+ 8682 41 54       >
 963+ 8684             >len_NFA         defl    $ - temp_NFA
 963+ 8684             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 963+ 867E             >
 963+ 867E C6          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 963+ 867F 52 45 50 45 >                db      "REPEAT"               // name string in 7-bit ascii, but
 963+ 8683 41 54       >
 963+ 8685             >                org     $-1                 // alter last byte of Name just above to set
 963+ 8684 D4          >                db      {b $} | END_BIT     // msb as name end
 963+ 8685             >
 963+ 8685 6E 86       >                dw      last_NFA            // Link to previous definition Name
 963+ 8687             >REPEAT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 963+ 8687 7D 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 963+ 8689             >                else
 963+ 8689 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 963+ 8689             >                endif           ; ok        // for other definitions it "points" the correct handler
 963+ 8689             >                // Use of "; ok" to suppress "warning[fwdref]"
 963+ 8689             >
 963+ 8689             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 964+ 8689 3A 86                        dw      AGAIN
 965+ 868B              //              dw      TWO_MINUS
 966+ 868B DB 85                        dw      THEN
 967+ 868D A3 69                        dw      EXIT
 968+ 868F
 969+ 868F              //  ______________________________________________________________________
 970+ 868F              //
 971+ 868F              // ?do-
 972+ 868F              // special version of "BACK" used by ?DO and LOOP
 973+ 868F                              Colon_Def C_DO_BACK, "?DO-", is_normal
 973+ 868F             >                New_Def  C_DO_BACK, "?DO-", Enter_Ptr, is_normal ; ok
 973+ 868F             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 973+ 868F             >
 973+ 868F             >                // dummy db directives used to calculate length of namec
 973+ 868F 3F 44 4F 2D >                db      "?DO-"
 973+ 8693             >len_NFA         defl    $ - temp_NFA
 973+ 8693             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 973+ 868F             >
 973+ 868F 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 973+ 8690 3F 44 4F 2D >                db      "?DO-"               // name string in 7-bit ascii, but
 973+ 8694             >                org     $-1                 // alter last byte of Name just above to set
 973+ 8693 AD          >                db      {b $} | END_BIT     // msb as name end
 973+ 8694             >
 973+ 8694 7E 86       >                dw      last_NFA            // Link to previous definition Name
 973+ 8696             >C_DO_BACK:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 973+ 8696 7D 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 973+ 8698             >                else
 973+ 8698 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 973+ 8698             >                endif           ; ok        // for other definitions it "points" the correct handler
 973+ 8698             >                // Use of "; ok" to suppress "warning[fwdref]"
 973+ 8698             >
 973+ 8698             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 974+ 8698 B5 85                        dw      BACK
 975+ 869A              CDoBack_Begin:
 976+ 869A 6B 69 6A 6E                  dw      SPFETCH, CSP, FETCH, SUBTRACT
 976+ 869E 9B 6B 2C 6F
 977+ 86A2 2C 64                        dw      ZBRANCH
 978+ 86A4 0A 00                        dw      CDoBack_While - $
 979+ 86A6 61 6A DB 85                  dw          TWO_PLUS, THEN
 980+ 86AA 15 64                        dw      BRANCH
 981+ 86AC EE FF                        dw      CDoBack_Begin - $
 982+ 86AE              CDoBack_While:
 983+ 86AE FA 70 6A 6E                  dw      QCSP, CSP, STORE
 983+ 86B2 A8 6B
 984+ 86B4 A3 69                        dw      EXIT
 985+ 86B6
 986+ 86B6              //  ______________________________________________________________________
 987+ 86B6              //
 988+ 86B6              // do
 989+ 86B6              // DO  ... LOOP
 990+ 86B6              // DO  ... n +LOOP
 991+ 86B6              // ?DO ... LOOP
 992+ 86B6              // ?DO ... n +LOOP
 993+ 86B6                              Colon_Def DO, "DO", is_immediate
 993+ 86B6             >                New_Def  DO, "DO", Enter_Ptr, is_immediate ; ok
 993+ 86B6             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 993+ 86B6             >
 993+ 86B6             >                // dummy db directives used to calculate length of namec
 993+ 86B6 44 4F       >                db      "DO"
 993+ 86B8             >len_NFA         defl    $ - temp_NFA
 993+ 86B8             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 993+ 86B6             >
 993+ 86B6 C2          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 993+ 86B7 44 4F       >                db      "DO"               // name string in 7-bit ascii, but
 993+ 86B9             >                org     $-1                 // alter last byte of Name just above to set
 993+ 86B8 CF          >                db      {b $} | END_BIT     // msb as name end
 993+ 86B9             >
 993+ 86B9 8F 86       >                dw      last_NFA            // Link to previous definition Name
 993+ 86BB             >DO:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 993+ 86BB 7D 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 993+ 86BD             >                else
 993+ 86BD ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 993+ 86BD             >                endif           ; ok        // for other definitions it "points" the correct handler
 993+ 86BD             >                // Use of "; ok" to suppress "warning[fwdref]"
 993+ 86BD             >
 993+ 86BD             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 994+ 86BD 31 71 86 64                  dw      COMPILE, C_DO
 995+ 86C1 6A 6E 9B 6B                  dw      CSP, FETCH, STORE_CSP
 995+ 86C5 8B 70
 996+ 86C7 D9 6E 12 6D                  dw      HERE, THREE
 997+ 86CB A3 69                        dw      EXIT
 998+ 86CD
 999+ 86CD              //  ______________________________________________________________________
1000+ 86CD              //
1001+ 86CD              // loop
1002+ 86CD                              Colon_Def LOOP, "LOOP", is_immediate
1002+ 86CD             >                New_Def  LOOP, "LOOP", Enter_Ptr, is_immediate ; ok
1002+ 86CD             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1002+ 86CD             >
1002+ 86CD             >                // dummy db directives used to calculate length of namec
1002+ 86CD 4C 4F 4F 50 >                db      "LOOP"
1002+ 86D1             >len_NFA         defl    $ - temp_NFA
1002+ 86D1             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1002+ 86CD             >
1002+ 86CD C4          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
1002+ 86CE 4C 4F 4F 50 >                db      "LOOP"               // name string in 7-bit ascii, but
1002+ 86D2             >                org     $-1                 // alter last byte of Name just above to set
1002+ 86D1 D0          >                db      {b $} | END_BIT     // msb as name end
1002+ 86D2             >
1002+ 86D2 B6 86       >                dw      last_NFA            // Link to previous definition Name
1002+ 86D4             >LOOP:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1002+ 86D4 7D 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
1002+ 86D6             >                else
1002+ 86D6 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
1002+ 86D6             >                endif           ; ok        // for other definitions it "points" the correct handler
1002+ 86D6             >                // Use of "; ok" to suppress "warning[fwdref]"
1002+ 86D6             >
1002+ 86D6             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1003+ 86D6 12 6D E7 70                  dw      THREE, QPAIRS
1004+ 86DA 31 71 04 64                  dw      COMPILE, C_LOOP
1005+ 86DE 96 86                        dw      C_DO_BACK
1006+ 86E0 A3 69                        dw      EXIT
1007+ 86E2
1008+ 86E2              //  ______________________________________________________________________
1009+ 86E2              //
1010+ 86E2              // +loop
1011+ 86E2                              Colon_Def PLOOP, "+LOOP", is_immediate
1011+ 86E2             >                New_Def  PLOOP, "+LOOP", Enter_Ptr, is_immediate ; ok
1011+ 86E2             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1011+ 86E2             >
1011+ 86E2             >                // dummy db directives used to calculate length of namec
1011+ 86E2 2B 4C 4F 4F >                db      "+LOOP"
1011+ 86E6 50          >
1011+ 86E7             >len_NFA         defl    $ - temp_NFA
1011+ 86E7             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1011+ 86E2             >
1011+ 86E2 C5          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
1011+ 86E3 2B 4C 4F 4F >                db      "+LOOP"               // name string in 7-bit ascii, but
1011+ 86E7 50          >
1011+ 86E8             >                org     $-1                 // alter last byte of Name just above to set
1011+ 86E7 D0          >                db      {b $} | END_BIT     // msb as name end
1011+ 86E8             >
1011+ 86E8 CD 86       >                dw      last_NFA            // Link to previous definition Name
1011+ 86EA             >PLOOP:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1011+ 86EA 7D 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
1011+ 86EC             >                else
1011+ 86EC ~           >                dw      $ + 2   ; ok        // is pointed by CFA
1011+ 86EC             >                endif           ; ok        // for other definitions it "points" the correct handler
1011+ 86EC             >                // Use of "; ok" to suppress "warning[fwdref]"
1011+ 86EC             >
1011+ 86EC             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1012+ 86EC 12 6D E7 70                  dw      THREE, QPAIRS
1013+ 86F0 31 71 CD 63                  dw      COMPILE, C_PLOOP
1014+ 86F4 96 86                        dw      C_DO_BACK
1015+ 86F6 A3 69                        dw      EXIT
1016+ 86F8
1017+ 86F8              //  ______________________________________________________________________
1018+ 86F8              //
1019+ 86F8              // ?do
1020+ 86F8                              Colon_Def QDO, "?DO", is_immediate
1020+ 86F8             >                New_Def  QDO, "?DO", Enter_Ptr, is_immediate ; ok
1020+ 86F8             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1020+ 86F8             >
1020+ 86F8             >                // dummy db directives used to calculate length of namec
1020+ 86F8 3F 44 4F    >                db      "?DO"
1020+ 86FB             >len_NFA         defl    $ - temp_NFA
1020+ 86FB             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1020+ 86F8             >
1020+ 86F8 C3          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
1020+ 86F9 3F 44 4F    >                db      "?DO"               // name string in 7-bit ascii, but
1020+ 86FC             >                org     $-1                 // alter last byte of Name just above to set
1020+ 86FB CF          >                db      {b $} | END_BIT     // msb as name end
1020+ 86FC             >
1020+ 86FC E2 86       >                dw      last_NFA            // Link to previous definition Name
1020+ 86FE             >QDO:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1020+ 86FE 7D 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
1020+ 8700             >                else
1020+ 8700 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
1020+ 8700             >                endif           ; ok        // for other definitions it "points" the correct handler
1020+ 8700             >                // Use of "; ok" to suppress "warning[fwdref]"
1020+ 8700             >
1020+ 8700             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1021+ 8700 31 71 59 64                  dw      COMPILE, C_Q_DO
1022+ 8704 6A 6E 9B 6B                  dw      CSP, FETCH, STORE_CSP
1022+ 8708 8B 70
1023+ 870A D9 6E FA 6C                  dw      HERE, ZERO, COMMA, ZERO
1023+ 870E F5 6E FA 6C
1024+ 8712 D9 6E 12 6D                  dw      HERE, THREE
1025+ 8716 A3 69                        dw      EXIT
1026+ 8718
1027+ 8718              Latest_Definition:
1028+ 8718              //  ______________________________________________________________________
1029+ 8718              //
1030+ 8718              // \
1031+ 8718                              Colon_Def BACKSLASH, "\\", is_immediate  // this is a single back-slash
1031+ 8718             >                New_Def  BACKSLASH, "\\", Enter_Ptr, is_immediate ; ok
1031+ 8718             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1031+ 8718             >
1031+ 8718             >                // dummy db directives used to calculate length of namec
1031+ 8718 5C          >                db      "\\"
1031+ 8719             >len_NFA         defl    $ - temp_NFA
1031+ 8719             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1031+ 8718             >
1031+ 8718 C1          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
1031+ 8719 5C          >                db      "\\"               // name string in 7-bit ascii, but
1031+ 871A             >                org     $-1                 // alter last byte of Name just above to set
1031+ 8719 DC          >                db      {b $} | END_BIT     // msb as name end
1031+ 871A             >
1031+ 871A F8 86       >                dw      last_NFA            // Link to previous definition Name
1031+ 871C             >BACKSLASH:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1031+ 871C 7D 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
1031+ 871E             >                else
1031+ 871E ~           >                dw      $ + 2   ; ok        // is pointed by CFA
1031+ 871E             >                endif           ; ok        // for other definitions it "points" the correct handler
1031+ 871E             >                // Use of "; ok" to suppress "warning[fwdref]"
1031+ 871E             >
1031+ 871E             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1032+ 871E F9 6D 9B 6B                  dw      BLK, FETCH
1033+ 8722 2C 64                        dw      ZBRANCH
1034+ 8724 30 00                        dw      Backslash_Else_1 - $
1035+ 8726 F9 6D 9B 6B                  dw          BLK, FETCH, ONE, GREATER  // BLOCK 1 is used as temp-line in INCLUDE file
1035+ 872A 02 6D 72 6F
1036+ 872E 2C 64                        dw          ZBRANCH
1037+ 8730 18 00                        dw          Backslash_Else_2 - $
1038+ 8732 02 6E 9B 6B                  dw              TO_IN, FETCH, CL, MOD, CL
1038+ 8736 2E 6D 7E 7A
1038+ 873A 2E 6D
1039+ 873C FB 6A 2C 6F                  dw              SWAP, SUBTRACT, TO_IN, PLUSSTORE
1039+ 8740 02 6E 78 6B
1040+ 8744 15 64                        dw          BRANCH
1041+ 8746 0A 00                        dw          Backslash_Endif_2 - $
1042+ 8748              Backslash_Else_2:
1043+ 8748 3A 6D 7B 6A                  dw              BBUF, CELL_MINUS, TO_IN, STORE
1043+ 874C 02 6E A8 6B
1044+ 8750              Backslash_Endif_2:
1045+ 8750 15 64                        dw      BRANCH
1046+ 8752 0A 00                        dw      Backslash_Endif_1 - $
1047+ 8754              Backslash_Else_1:
1048+ 8754 A9 63 50 00                  dw          LIT, 80, TO_IN, STORE
1048+ 8758 02 6E A8 6B
1049+ 875C              Backslash_Endif_1:
1050+ 875C A3 69                        dw      EXIT
1051+ 875E
1052+ 875E              Fence_Word:
1053+ 875E              //  ______________________________________________________________________
1054+ 875E              //
1055+ 875E
1056+ 875E 00           Here_Dictionary db      0
1057+ 875F
# file closed: C:\Zx\CSpect\Projects\vForth15_INDIRECT/source/L3.asm
 114  875F
 115  875F              // now we save the compiled file so we can either run it or debug it
 116  875F                              SAVENEX OPEN "output/main.nex", ORIGIN
 117  875F                              SAVENEX CORE 3, 0, 0                                // Next core 3.0.0 required as minimum
 118  875F                              SAVENEX CFG  0
 119  875F                              SAVENEX BANK 2, 0
 120  875F                              SAVENEX AUTO
 121  875F                              SAVENEX CLOSE
 122  875F
 123  875F              //              PAGE 7 ;set 7 page to current slot
 124  875F              //              SAVEBIN "ram7.bin",$C000,$4000 ;- save 4000h begin from C000h of RAM to file
 125  875F              //              SAVEBIN "output/ram2.bin", $8000, 9800 ;- save 3000h begin from 8000h of RAM to file
 126  875F
 127  875F                              SAVETAP "output/F15E.tap", CODE, "forth15e", ORIGIN, 10000
 128  875F
 129  875F                              SAVEBIN "output/forth15E.bin", ORIGIN, 10000
 130  875F
 131  875F                              END
# file closed: C:\Zx\CSpect\Projects\vForth15_INDIRECT/source/main.asm
