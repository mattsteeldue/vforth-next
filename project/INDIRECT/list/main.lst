# file opened: C:\Zx\CSpect\Projects\vForth15_INDIRECT/source/main.asm
   1  0000              //  ______________________________________________________________________
   2  0000              //
   3  0000              //  main.asm
   4  0000              //  ______________________________________________________________________
   5  0000              //
   6  0000              //  v-Forth 1.5 NextZXOS version
   7  0000              //  build 20211119
   8  0000              //
   9  0000              //  Inirect-Thread version.
  10  0000              //
  11  0000              //  NextZXOS version
  12  0000              //  ______________________________________________________________________
  13  0000              //
  14  0000              //  This work is available as-is with no whatsoever warranty.
  15  0000              //  Copying, modifying and distributing this software is allowed
  16  0000              //  provided that the copyright notice is kept.
  17  0000              //  ______________________________________________________________________
  18  0000              //
  19  0000              //  by Matteo Vitturi, 1990-2021
  20  0000              //
  21  0000              //  https://sites.google.com/view/vforth/vforth15-next
  22  0000              //  https://www.oocities.org/matteo_vitturi/english/index.htm
  23  0000              //
  24  0000              //  This is the complete compiler for v.Forth for SINCLAIR ZX Spectrum Next.
  25  0000              //  Each line of this source list mustn't exceed 80 bytes.
  26  0000              //  Z80N (ZX Spectrum Next) extension is available.
  27  0000              //
  28  0000              //  This list has been tested using the following configuration:
  29  0000              //      - CSpect emulator V.2.12.30
  30  0000              //  ______________________________________________________________________
  31  0000              //
  32  0000              //  Z80 Registers usage map
  33  0000              //
  34  0000              //  AF
  35  0000              //  BC - Instruction Pointer: should be preserved during ROM/OS calls
  36  0000              //  DE - Working
  37  0000              //  HL - Working
  38  0000              //
  39  0000              //  AF'- Sometime used for backup purpose
  40  0000              //  BC'- Not used
  41  0000              //  DE'- Not used
  42  0000              //  HL'- Not used: (saved at startup)
  43  0000              //
  44  0000              //  SP - Calculator Stack Pointer
  45  0000              //  IX - Inner interpreter "next" address pointer. This way jp (ix) is 2T-state faster than JP next
  46  0000              //  IY - (ZX System: must be preserved to interact with standard ROM)
  47  0000              //
  48  0000              //  ______________________________________________________________________
  49  0000              //
  50  0000              //  _________________
  51  0000              //
  52  0000              //  FORTH DEFINITIONS
  53  0000              //  _________________
  54  0000
  55  0000                              OPT     --zxnext
  56  0000              //  ______________________________________________________________________
  57  0000              //
  58  0000              // this controls some debugging code in L0.asm
  59  0000              //  0 for final binary release.
  60  0000              //  1 for debugging with Visual Studio Code and DeZog
  61  0000              // -1 for for binary comparison with Forth generated code.
  62  0000              DEBUGGING       equ     -1
  63  0000              //
  64  0000              //  ______________________________________________________________________
  65  0000
  66  0000                              if ( -1 == DEBUGGING )
  67  0000              ORIGIN          equ     $62E6                   // for binary comparison
  68  0000                              endif
  69  0000              //  ______________________________________________________________________
  70  0000
  71  0000                              if (  0 == DEBUGGING )
  72  0000 ~            ORIGIN          equ     $6366                   // binary
  73  0000                              endif
  74  0000              //  ______________________________________________________________________
  75  0000
  76  0000                              if (  1 == DEBUGGING )
  77  0000 ~            ORIGIN          equ     $8080                   // for DeZog
  78  0000                              endif
  79  0000              //  ______________________________________________________________________
  80  0000
  81  0000                              DEVICE  ZXSPECTRUMNEXT
  82  0000
  83  0000                              ORG     ORIGIN
  84  62E6
  85  62E6                              if ( -1 == DEBUGGING )
  86  62E6 00 00 00...                  ds 128                            // for binary comparison
  87  62EA                              endif
  88  6366
  89  6366              //  ______________________________________________________________________
  90  6366              //
  91  6366              //  Naming convention for Label vs Forth correspondance
  92  6366              //  Forth words are named as they are named for real with some exception to avoid assembler syntax errors.
  93  6366              //    - Leading "0" is converted into "Z_"
  94  6366              //    - Leading "(" is converted into "C_", closing bracket is omitted
  95  6366              //    - Leading numbers are converted in letters: ONE_  TWO_ etc.
  96  6366              //    - Question mark "?" is converted into "Q" or omitted if needed / useful.
  97  6366              //    - Plus sign "+" is converted in _PLUS or ADD_ depending.
  98  6366              //    - Minus sign "-" in L (for Line), MINUS or SUBTRACT depending
  99  6366              //    - Greater-Than sign ">" in _GREATER or TO_ depending
 100  6366              //    - Equal sign "=" is converted in EQUAL
 101  6366              //    - Less-Than sign "<" in _LESS or FROM_ (or TO_ again) depending
 102  6366              //    - Asterisk sign "*" is converted in _MUL or STAR
 103  6366              //    - Slash "/" is converted in _DIV or omitted if it is clear what it means
 104  6366              //    - Exclamation mark "!" is converted in STORE
 105  6366              //    - At-Sign "@" is converted in FETCH
 106  6366              //    - Words that collide with Assembler are normally suffixed with "_OP"
 107  6366
 108  6366                              include "system.asm"
# file opened: C:\Zx\CSpect\Projects\vForth15_INDIRECT/source/system.asm
   1+ 6366              //  ______________________________________________________________________
   2+ 6366              //
   3+ 6366              //  system.asm
   4+ 6366              //  ______________________________________________________________________
   5+ 6366
   6+ 6366              // Registers:
   7+ 6366              //
   8+ 6366              //      BC: Instruction Pointer
   9+ 6366              //      DE:
  10+ 6366              //      HL: W register
  11+ 6366              //      SP: Calc stack Pointer
  12+ 6366              //      IX: Inner-Interpreter Address
  13+ 6366
  14+ 6366              //  ______________________________________________________________________
  15+ 6366              //
  16+ 6366              // ZX-Spectrum standard system variables
  17+ 6366              SCR_CT          equ     $5C8C                   // SCR-CT system variable
  18+ 6366              LASTK           equ     $5C08                   // LASTK system variable
  19+ 6366              BORDCR          equ     $5C48                   // BORDCR system variable
  20+ 6366              FLAGS2          equ     $5C6A                   // for caps-lock
  21+ 6366
  22+ 6366              //  ______________________________________________________________________
  23+ 6366              //
  24+ 6366              // Flag constants
  25+ 6366              TRUE_FLAG       equ     $FFFF
  26+ 6366              FALSE_FLAG      equ     $0000
  27+ 6366
  28+ 6366              //  ______________________________________________________________________
  29+ 6366              //
  30+ 6366              // Ascii char constants
  31+ 6366              NUL_CHAR        equ     $00
  32+ 6366              COMMA_CHAR      equ     $06
  33+ 6366              BACKSPACE_CHAR  equ     $08
  34+ 6366              CR_CHAR         equ     $0D
  35+ 6366              BLANK_CHAR      equ     $20
  36+ 6366              QUOTE_CHAR      equ     "'"
  37+ 6366              DQUOTE_CHAR     equ     '"'
  38+ 6366              UNDERSCORE_CHAR equ     $5F
  39+ 6366              SOLIDBLOCK_CHAR equ     $8F
  40+ 6366              HALFBLOCK_CHAR  equ     $8C
  41+ 6366              LC_A_CHAR       equ     $61                 // lower-case "a"
  42+ 6366              LC_Z_CHAR       equ     $7A                 // lower-case "z"
  43+ 6366
  44+ 6366
  45+ 6366              //  ______________________________________________________________________
  46+ 6366              //
  47+ 6366
  48+ 6366                              // emulate something like:  ld hl,rp
  49+ 6366              ldhlrp          macro
  50+ 6366 ~                            ld      hl,(RP_Pointer)
  51+ 6366                              endm
  52+ 6366
  53+ 6366                              // emulate something like:  ld rp,hl
  54+ 6366              ldrphl          macro
  55+ 6366 ~                            ld      (RP_Pointer),hl
  56+ 6366                              endm
  57+ 6366
  58+ 6366              //  ______________________________________________________________________
  59+ 6366              //
  60+ 6366              //  Inner interpreter next-address pointer. This is 2T-state faster than "jp address"
  61+ 6366              next            macro
  62+ 6366 ~                            jp      (ix)
  63+ 6366                              endm
  64+ 6366
  65+ 6366              psh1            macro
  66+ 6366 ~                            push    hl
  67+ 6366 ~                            jp      (ix)
  68+ 6366                              endm
  69+ 6366
  70+ 6366              psh2            macro
  71+ 6366 ~                            push    de
  72+ 6366 ~                            push    hl
  73+ 6366 ~                            jp      (ix)
  74+ 6366                              endm
  75+ 6366
  76+ 6366              //  ______________________________________________________________________
  77+ 6366              //
  78+ 6366              // Bit constants in length-byte
  79+ 6366
  80+ 6366              SMUDGE_BIT      equ     %00100000               // $20
  81+ 6366              IMMEDIATE_BIT   equ     %01000000               // $40
  82+ 6366              END_BIT         equ     %10000000               // $80
  83+ 6366
  84+ 6366
  85+ 6366              //  ______________________________________________________________________
  86+ 6366              //
  87+ 6366              //  To create Forth words using this (nice) Assembler, we have to use the two following
  88+ 6366              //  pointers
  89+ 6366              temp_NFA        defl    0
  90+ 6366              last_NFA        defl    0
  91+ 6366              len_NFA         defl    0
  92+ 6366
  93+ 6366              is_code         equ     0                   // so the direct machine-code starts at CFA
  94+ 6366              is_normal       equ     0                   // so the direct machine-code starts at CFA
  95+ 6366              is_immediate    equ     IMMEDIATE_BIT       // $40 - the definition is IMMEDIATE.
  96+ 6366
  97+ 6366              //  ______________________________________________________________________
  98+ 6366              //
  99+ 6366              //  Create a new "low-level" definition
 100+ 6366              //  This macro is used in the form  Create FORTH_NAME,n,"forth_name"
 101+ 6366              //  to create a new Forth Dictionary entry the same way Forth itself would do.
 102+ 6366              //  A word begins with a Length-Byte in range 1-31. Top 3 msb are used as flags
 103+ 6366              //  see SMUDGE_BIT and IMMEDIATE_BIT constant above.
 104+ 6366              //  It is followed by the Name of the word, i.e. a string expressed in 7-bit Ascii.
 105+ 6366              //  The last character of the Name must have the msb set to signal the end of it (END_BIT)
 106+ 6366              //  This macro acts much like the standard Forth definition CREATE
 107+ 6366
 108+ 6366              New_Def         macro   label, namec, runcode, bits
 109+ 6366 ~            temp_NFA        defl    $                   // save this NFA address to temp_NFA
 110+ 6366 ~
 111+ 6366 ~                            // dummy db directives used to calculate length of namec
 112+ 6366 ~                            db      namec
 113+ 6366 ~            len_NFA         defl    $ - temp_NFA
 114+ 6366 ~                            org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 115+ 6366 ~
 116+ 6366 ~                            db      len_NFA | END_BIT | bits  // The start of NFA must have msb set to signal the beginning of the sounted string
 117+ 6366 ~                            db      namec               // name string in 7-bit ascii, but
 118+ 6366 ~                            org     $-1                 // alter last byte of Name just above to set
 119+ 6366 ~                            db      {b $} | END_BIT     // msb as name end
 120+ 6366 ~
 121+ 6366 ~                            dw      last_NFA            // Link to previous definition Name
 122+ 6366 ~            label:          if runcode != 0 ; ok        // This is the start address of the direct jp(hl)
 123+ 6366 ~                            dw      runcode ; ok        // for primitive definitions  actual code
 124+ 6366 ~                            else
 125+ 6366 ~                            dw      $ + 2   ; ok        // is pointed by CFA
 126+ 6366 ~                            endif           ; ok        // for other definitions it "points" the correct handler
 127+ 6366 ~                            // Use of "; ok" to suppress "warning[fwdref]"
 128+ 6366 ~
 129+ 6366 ~            last_NFA        defl    temp_NFA            // keep track of NFA saved above
 130+ 6366                              endm
 131+ 6366
 132+ 6366              //  ______________________________________________________________________
 133+ 6366              //
 134+ 6366              // Create a "constant"
 135+ 6366              // The constant value is compiled in first PFA cell
 136+ 6366              Constant_Def    macro   label, namec, constant_value
 137+ 6366 ~                            New_Def  label, namec, Constant_Ptr, is_normal
 138+ 6366 ~                            dw      constant_value
 139+ 6366                              endm
 140+ 6366
 141+ 6366              //  ______________________________________________________________________
 142+ 6366              //
 143+ 6366              // Create a "variable"
 144+ 6366              // The when invoked, a variable returns a pointer, the address of first PFA cell
 145+ 6366              // this allow creation of "variables" which content is  of any length
 146+ 6366              Variable_Def    macro   label, namec, initial_value
 147+ 6366 ~                            New_Def  label, namec, Variable_Ptr, is_normal
 148+ 6366 ~                            dw      initial_value
 149+ 6366                              endm
 150+ 6366
 151+ 6366              //  ______________________________________________________________________
 152+ 6366              //
 153+ 6366              // Create a "user"
 154+ 6366              // It uses a single byte as offset to calculate the address of the variable
 155+ 6366              User_Def        macro   label, namec, offset_value
 156+ 6366 ~                            New_Def  label, namec, User_Ptr, is_normal
 157+ 6366 ~                            db      offset_value
 158+ 6366                              endm
 159+ 6366
 160+ 6366              //  ______________________________________________________________________
 161+ 6366              //
 162+ 6366              // Create a "colon-definition"
 163+ 6366              // The CFA contains a small routine i.e. "call Enter_Ptr".
 164+ 6366              // The PFA, three bytes later, contains the actual Forth definition
 165+ 6366              Colon_Def       macro   label, namec, bits
 166+ 6366 ~                            New_Def  label, namec, Enter_Ptr, bits ; ok
 167+ 6366                              endm
 168+ 6366
 169+ 6366              //  ______________________________________________________________________
 170+ 6366              //
 171+ 6366
 172+ 6366              S0_system:      equ     $D0E8               // Address of top of Calc Stack
 173+ 6366              TIB_system      equ     $D0E8               // TIB grows upwards, Return-Stack downward.
 174+ 6366              R0_system:      equ     $D188               // Address of top of Return Stack. This is S0 + $00A0
 175+ 6366              USER_system:    equ     $D188               // User variables zone.
 176+ 6366              FIRST_system:   equ     $D1E4               // Address of first BUFFER
 177+ 6366              LIMIT_system:   equ     $E000               // Address of first byte beyond last BUFFER
 178+ 6366
# file closed: C:\Zx\CSpect\Projects\vForth15_INDIRECT/source/system.asm
 109  6366                              include "L0.asm"
# file opened: C:\Zx\CSpect\Projects\vForth15_INDIRECT/source/L0.asm
   1+ 6366              //  ______________________________________________________________________
   2+ 6366              //
   3+ 6366              //  L0.asm
   4+ 6366              //
   5+ 6366              //  Origin-Area and Level-0 definitions
   6+ 6366              //  ______________________________________________________________________
   7+ 6366
   8+ 6366
   9+ 6366              Cold_origin:
  10+ 6366 A7                           and     a
  11+ 6367 C3 1E 79                     jp      ColdRoutine
  12+ 636A              Warm_origin:
  13+ 636A 37                           scf
  14+ 636B C3 1E 79                     jp      WarmRoutine
  15+ 636E
  16+ 636E              // +008
  17+ 636E E6 D0        SP_Basic:       dw      $D0E6               // These are bits with some "standard" meaning... 0101
  18+ 6370
  19+ 6370              // +00A
  20+ 6370 00 0E                        dw      $0E00
  21+ 6372
  22+ 6372              // +00C
  23+ 6372 50 87        Latest_origin:  dw      Latest_Definition   // Latest word (used in Cold_Start)
  24+ 6374
  25+ 6374              // +00E
  26+ 6374 0C 00        DEL_Char_Ptr:   dw      $000C               // This is the characther used as "Back-Space"
  27+ 6376
  28+ 6376              // +010
  29+ 6376 50 B2        CPU_Id          dw      $B250               // Z80 expressed in base 36
  30+ 6378
  31+ 6378              // +012
  32+ 6378 E8 D0        S0_origin:      dw      S0_system
  33+ 637A 88 D1        R0_origin:      dw      R0_system
  34+ 637C E8 D0        TIB_origin:     dw      TIB_system
  35+ 637E 1F 00        WIDTH_origin:   dw      31
  36+ 6380 01 00        WARNING_origin: dw      1
  37+ 6382 96 87        FENCE_origin:   dw      Fence_Word
  38+ 6384 96 87        DP_origin       dw      Fence_Word
  39+ 6386 2C 78        VOCLINK_origin: dw      Voclink_Ptr
  40+ 6388 E4 D1                        dw      FIRST_system
  41+ 638A 00 E0                        dw      LIMIT_system
  42+ 638C
  43+ 638C              // +026
  44+ 638C 8F           Block_Face:     db      SOLIDBLOCK_CHAR     // Caps-Lock   Cursor face
  45+ 638D 8C           Half_Face:      db      HALFBLOCK_CHAR      // Caps-unlock Cursor face
  46+ 638E 5F           Underscore_Face:db      UNDERSCORE_CHAR     // Underscore  Cursor face
  47+ 638F 00                           db      0
  48+ 6390
  49+ 6390              // +02A
  50+ 6390 00 00        IX_Echo:        dw      $0000               // Echo IX after NextOS call
  51+ 6392
  52+ 6392              // +02C
  53+ 6392 00 00        SP_Saved:       dw      $0000               // Saved SP dufing NextOS call
  54+ 6394
  55+ 6394              // +02E
  56+ 6394 88 D1        USER_Pointer:   dw      USER_system
  57+ 6396
  58+ 6396              // +030
  59+ 6396 88 D1        RP_Pointer:     dw      $d188 // R0_system
  60+ 6398
  61+ 6398              // +32
  62+ 6398              // SP_Basic        dw      0
  63+ 6398
  64+ 6398
  65+ 6398              //  ______________________________________________________________________
  66+ 6398
  67+ 6398              // from this point we can use LDHLRP and LDRPHL Assembler macros
  68+ 6398              // instead of their equivalent long sequences.
  69+ 6398
  70+ 6398              //  ______________________________________________________________________
  71+ 6398
  72+ 6398              // address for "next" - inner interpreter
  73+ 6398              // This address must always be pointed by IX
  74+ 6398              // "next" macro simply does a  jp(ix)  instruction
  75+ 6398
  76+ 6398              // Psh2_Ptr:       push    de
  77+ 6398              // Psh1_Ptr:       push    hl
  78+ 6398
  79+ 6398              Next_Ptr:       // This address must always be kept in IX: "next" relies on that
  80+ 6398
  81+ 6398                              if ( 1 == DEBUGGING )
  82+ 6398 ~                            ld      hl, Next_Breakpoint_1
  83+ 6398 ~                            and     a
  84+ 6398 ~                            sbc     hl, bc
  85+ 6398 ~                            jr      nz, Next_Continue
  86+ 6398 ~                            nop // This is where you have to put a real breakpoint to intercept BC values...
  87+ 6398                              endif
  88+ 6398
  89+ 6398              Next_Continue:
  90+ 6398 0A                           ld      a, (bc)
  91+ 6399 03                           inc     bc
  92+ 639A 6F                           ld      l, a
  93+ 639B 0A                           ld      a, (bc)
  94+ 639C 03                           inc     bc
  95+ 639D 67                           ld      h, a                // hl contains a CFA (xt) of word being executed
  96+ 639E
  97+ 639E              // Execute xt i.e. CFA held in HL
  98+ 639E              Exec_Ptr:
  99+ 639E 5E                           ld      e, (hl)
 100+ 639F 23                           inc     hl
 101+ 63A0 56                           ld      d, (hl)
 102+ 63A1 EB                           ex      de, hl
 103+ 63A2 E9                           jp      (hl)                // and jump to it
 104+ 63A3                                                          // there you'll find the real code or a CALL to a ;code part
 105+ 63A3
 106+ 63A3              //  ______________________________________________________________________
 107+ 63A3              //
 108+ 63A3              // lit          -- x
 109+ 63A3              // puts on top of stack the value of the following word.
 110+ 63A3              // it is compiled in colon definition before a literal number
 111+ 63A3
 112+ 63A3                              New_Def  LIT, "LIT", is_code, is_normal
 112+ 63A3             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 112+ 63A3             >
 112+ 63A3             >                // dummy db directives used to calculate length of namec
 112+ 63A3 4C 49 54    >                db      "LIT"
 112+ 63A6             >len_NFA         defl    $ - temp_NFA
 112+ 63A6             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 112+ 63A3             >
 112+ 63A3 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 112+ 63A4 4C 49 54    >                db      "LIT"               // name string in 7-bit ascii, but
 112+ 63A7             >                org     $-1                 // alter last byte of Name just above to set
 112+ 63A6 D4          >                db      {b $} | END_BIT     // msb as name end
 112+ 63A7             >
 112+ 63A7 00 00       >                dw      last_NFA            // Link to previous definition Name
 112+ 63A9             >LIT:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 112+ 63A9 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
 112+ 63A9             >                else
 112+ 63A9 AB 63       >                dw      $ + 2   ; ok        // is pointed by CFA
 112+ 63AB             >                endif           ; ok        // for other definitions it "points" the correct handler
 112+ 63AB             >                // Use of "; ok" to suppress "warning[fwdref]"
 112+ 63AB             >
 112+ 63AB             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 113+ 63AB
 114+ 63AB 0A                           ld      a, (bc)
 115+ 63AC 03                           inc     bc
 116+ 63AD 6F                           ld      l, a
 117+ 63AE 0A                           ld      a, (bc)
 118+ 63AF 03                           inc     bc
 119+ 63B0 67                           ld      h, a
 120+ 63B1                              psh1
 120+ 63B1 E5          >                push    hl
 120+ 63B2 DD E9       >                jp      (ix)
 121+ 63B4
 122+ 63B4              //  ______________________________________________________________________
 123+ 63B4              //
 124+ 63B4              // execute      i*x xt -- j*x
 125+ 63B4              // execution token. usually xt is given by CFA
 126+ 63B4
 127+ 63B4                              New_Def  EXECUTE, "EXECUTE", is_code, is_normal
 127+ 63B4             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 127+ 63B4             >
 127+ 63B4             >                // dummy db directives used to calculate length of namec
 127+ 63B4 45 58 45 43 >                db      "EXECUTE"
 127+ 63B8 55 54 45    >
 127+ 63BB             >len_NFA         defl    $ - temp_NFA
 127+ 63BB             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 127+ 63B4             >
 127+ 63B4 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 127+ 63B5 45 58 45 43 >                db      "EXECUTE"               // name string in 7-bit ascii, but
 127+ 63B9 55 54 45    >
 127+ 63BC             >                org     $-1                 // alter last byte of Name just above to set
 127+ 63BB C5          >                db      {b $} | END_BIT     // msb as name end
 127+ 63BC             >
 127+ 63BC A3 63       >                dw      last_NFA            // Link to previous definition Name
 127+ 63BE             >EXECUTE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 127+ 63BE ~           >                dw      runcode ; ok        // for primitive definitions  actual code
 127+ 63BE             >                else
 127+ 63BE C0 63       >                dw      $ + 2   ; ok        // is pointed by CFA
 127+ 63C0             >                endif           ; ok        // for other definitions it "points" the correct handler
 127+ 63C0             >                // Use of "; ok" to suppress "warning[fwdref]"
 127+ 63C0             >
 127+ 63C0             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 128+ 63C0 E1                           pop     hl
 129+ 63C1 18 DB                        jr      Exec_Ptr
 130+ 63C3
 131+ 63C3
 132+ 63C3              //  ______________________________________________________________________
 133+ 63C3              //
 134+ 63C3              // branch       --
 135+ 63C3              // unconditional branch in colon definition using the following cell as an offset from current IP value
 136+ 63C3              // compiled by ELSE, AGAIN and some other immediate words
 137+ 63C3
 138+ 63C3                              New_Def BRANCH, "BRANCH", is_code, is_normal
 138+ 63C3             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 138+ 63C3             >
 138+ 63C3             >                // dummy db directives used to calculate length of namec
 138+ 63C3 42 52 41 4E >                db      "BRANCH"
 138+ 63C7 43 48       >
 138+ 63C9             >len_NFA         defl    $ - temp_NFA
 138+ 63C9             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 138+ 63C3             >
 138+ 63C3 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 138+ 63C4 42 52 41 4E >                db      "BRANCH"               // name string in 7-bit ascii, but
 138+ 63C8 43 48       >
 138+ 63CA             >                org     $-1                 // alter last byte of Name just above to set
 138+ 63C9 C8          >                db      {b $} | END_BIT     // msb as name end
 138+ 63CA             >
 138+ 63CA B4 63       >                dw      last_NFA            // Link to previous definition Name
 138+ 63CC             >BRANCH:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 138+ 63CC ~           >                dw      runcode ; ok        // for primitive definitions  actual code
 138+ 63CC             >                else
 138+ 63CC CE 63       >                dw      $ + 2   ; ok        // is pointed by CFA
 138+ 63CE             >                endif           ; ok        // for other definitions it "points" the correct handler
 138+ 63CE             >                // Use of "; ok" to suppress "warning[fwdref]"
 138+ 63CE             >
 138+ 63CE             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 139+ 63CE              Branch_Ptr:
 140+ 63CE 60                           ld      h, b
 141+ 63CF 69                           ld      l, c
 142+ 63D0 5E                           ld      e, (hl)
 143+ 63D1 23                           inc     hl
 144+ 63D2 56                           ld      d, (hl)
 145+ 63D3 2B                           dec     hl                  // offset is calculated from current IP
 146+ 63D4 19                           add     hl, de
 147+ 63D5 4D                           ld      c, l
 148+ 63D6 44                           ld      b, h
 149+ 63D7                              next
 149+ 63D7 DD E9       >                jp      (ix)
 150+ 63D9
 151+ 63D9
 152+ 63D9              //  ______________________________________________________________________
 153+ 63D9              //
 154+ 63D9              // 0branch      f --
 155+ 63D9              // conditional branch if the top-of-stack is ZERO or FALSE.
 156+ 63D9              // compiled by IF, UNTIL and some other immediate words
 157+ 63D9
 158+ 63D9                              New_Def ZBRANCH, "0BRANCH", is_code, is_normal
 158+ 63D9             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 158+ 63D9             >
 158+ 63D9             >                // dummy db directives used to calculate length of namec
 158+ 63D9 30 42 52 41 >                db      "0BRANCH"
 158+ 63DD 4E 43 48    >
 158+ 63E0             >len_NFA         defl    $ - temp_NFA
 158+ 63E0             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 158+ 63D9             >
 158+ 63D9 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 158+ 63DA 30 42 52 41 >                db      "0BRANCH"               // name string in 7-bit ascii, but
 158+ 63DE 4E 43 48    >
 158+ 63E1             >                org     $-1                 // alter last byte of Name just above to set
 158+ 63E0 C8          >                db      {b $} | END_BIT     // msb as name end
 158+ 63E1             >
 158+ 63E1 C3 63       >                dw      last_NFA            // Link to previous definition Name
 158+ 63E3             >ZBRANCH:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 158+ 63E3 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
 158+ 63E3             >                else
 158+ 63E3 E5 63       >                dw      $ + 2   ; ok        // is pointed by CFA
 158+ 63E5             >                endif           ; ok        // for other definitions it "points" the correct handler
 158+ 63E5             >                // Use of "; ok" to suppress "warning[fwdref]"
 158+ 63E5             >
 158+ 63E5             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 159+ 63E5              ZBranch_Ptr:
 160+ 63E5 E1                           pop     hl
 161+ 63E6 7D                           ld      a, l
 162+ 63E7 B4                           or      h
 163+ 63E8 CA CE 63                     jp      z, Branch_Ptr
 164+ 63EB 03                           inc     bc                  // if not branch, skip offset cell.
 165+ 63EC 03                           inc     bc
 166+ 63ED                              next
 166+ 63ED DD E9       >                jp      (ix)
 167+ 63EF
 168+ 63EF              //  ______________________________________________________________________
 169+ 63EF              //
 170+ 63EF              // (+loop)       --
 171+ 63EF              // compiled by +LOOP. it uses the top two values of return-stack to
 172+ 63EF              // keep track of index and limit, they are accessed via I and I'
 173+ 63EF                              New_Def C_PLOOP, "(+LOOP)", is_code, is_normal
 173+ 63EF             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 173+ 63EF             >
 173+ 63EF             >                // dummy db directives used to calculate length of namec
 173+ 63EF 28 2B 4C 4F >                db      "(+LOOP)"
 173+ 63F3 4F 50 29    >
 173+ 63F6             >len_NFA         defl    $ - temp_NFA
 173+ 63F6             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 173+ 63EF             >
 173+ 63EF 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 173+ 63F0 28 2B 4C 4F >                db      "(+LOOP)"               // name string in 7-bit ascii, but
 173+ 63F4 4F 50 29    >
 173+ 63F7             >                org     $-1                 // alter last byte of Name just above to set
 173+ 63F6 A9          >                db      {b $} | END_BIT     // msb as name end
 173+ 63F7             >
 173+ 63F7 D9 63       >                dw      last_NFA            // Link to previous definition Name
 173+ 63F9             >C_PLOOP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 173+ 63F9 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
 173+ 63F9             >                else
 173+ 63F9 FB 63       >                dw      $ + 2   ; ok        // is pointed by CFA
 173+ 63FB             >                endif           ; ok        // for other definitions it "points" the correct handler
 173+ 63FB             >                // Use of "; ok" to suppress "warning[fwdref]"
 173+ 63FB             >
 173+ 63FB             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 174+ 63FB
 175+ 63FB              Loop_Ptr:
 176+ 63FB D9                           exx
 177+ 63FC                              ldhlrp                      // ld hl,rp macro 30h +Origin
 177+ 63FC 2A 96 63    >                ld      hl,(RP_Pointer)
 178+ 63FF
 179+ 63FF C1                           pop     bc                  // bc is increment
 180+ 6400
 181+ 6400 5E                           ld      e, (hl)             // hl points to loop-index, add increment to it.
 182+ 6401 7B                           ld      a, e                // de keeps index before increment.
 183+ 6402 81                           add     c
 184+ 6403 77                           ld      (hl), a
 185+ 6404 23                           inc     hl
 186+ 6405 56                           ld      d, (hl)
 187+ 6406 7A                           ld      a, d
 188+ 6407 88                           adc     b
 189+ 6408 77                           ld      (hl),a
 190+ 6409 23                           inc     hl
 191+ 640A
 192+ 640A 7B                           ld      a, e
 193+ 640B 96                           sub     (hl)
 194+ 640C 5F                           ld      e, a
 195+ 640D 23                           inc     hl
 196+ 640E 7A                           ld      a, d
 197+ 640F 9E                           sbc     (hl)
 198+ 6410 57                           ld      d, a                // DE is index - limit : limit is the "new zero"
 199+ 6411
 200+ 6411 EB                           ex      de, hl
 201+ 6412 09                           add     hl, bc
 202+ 6413
 203+ 6413 CB 78                        bit     7, b                // keep increment-sign just before overwriting d
 204+ 6415 28 01                        jr      z, Loop_NegativeIncrement
 205+ 6417 3F                               ccf
 206+ 6418              Loop_NegativeIncrement:
 207+ 6418 38 04                        jr      c, Loop_Endif
 208+ 641A D9                               exx
 209+ 641B C3 CE 63                         jp      Branch_Ptr      // perform branch consuming following cell
 210+ 641E              Loop_Endif:
 211+ 641E EB                           ex      de, hl
 212+ 641F 23                           inc     hl
 213+ 6420                              ldrphl                      // ld rp,hl macro 30h +Origin
 213+ 6420 22 96 63    >                ld      (RP_Pointer),hl
 214+ 6423 D9                           exx
 215+ 6424 03                           inc     bc                  // skip branch-style offset
 216+ 6425 03                           inc     bc
 217+ 6426                              next
 217+ 6426 DD E9       >                jp      (ix)
 218+ 6428
 219+ 6428              //  ______________________________________________________________________
 220+ 6428              //
 221+ 6428              // (loop)       n --
 222+ 6428              // same as (LOOP) but index is incremented by 1
 223+ 6428              // compiled by LOOP.
 224+ 6428                              New_Def C_LOOP, "(LOOP)", is_code, is_normal
 224+ 6428             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 224+ 6428             >
 224+ 6428             >                // dummy db directives used to calculate length of namec
 224+ 6428 28 4C 4F 4F >                db      "(LOOP)"
 224+ 642C 50 29       >
 224+ 642E             >len_NFA         defl    $ - temp_NFA
 224+ 642E             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 224+ 6428             >
 224+ 6428 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 224+ 6429 28 4C 4F 4F >                db      "(LOOP)"               // name string in 7-bit ascii, but
 224+ 642D 50 29       >
 224+ 642F             >                org     $-1                 // alter last byte of Name just above to set
 224+ 642E A9          >                db      {b $} | END_BIT     // msb as name end
 224+ 642F             >
 224+ 642F EF 63       >                dw      last_NFA            // Link to previous definition Name
 224+ 6431             >C_LOOP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 224+ 6431 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
 224+ 6431             >                else
 224+ 6431 33 64       >                dw      $ + 2   ; ok        // is pointed by CFA
 224+ 6433             >                endif           ; ok        // for other definitions it "points" the correct handler
 224+ 6433             >                // Use of "; ok" to suppress "warning[fwdref]"
 224+ 6433             >
 224+ 6433             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 225+ 6433 ED 8A 00 01                  push    1
 226+ 6437 C3 FB 63                     jp      Loop_Ptr
 227+ 643A
 228+ 643A              //  ______________________________________________________________________
 229+ 643A              //
 230+ 643A              // (?do)        lim ind --
 231+ 643A              // compiled by ?DO to make a loop checking for lim == ind first
 232+ 643A              // at run-time (?DO) must be followed by a BRANCH offset
 233+ 643A              // used to skip the loop if lim == ind
 234+ 643A                              New_Def C_Q_DO, "(?DO)", is_code, is_normal
 234+ 643A             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 234+ 643A             >
 234+ 643A             >                // dummy db directives used to calculate length of namec
 234+ 643A 28 3F 44 4F >                db      "(?DO)"
 234+ 643E 29          >
 234+ 643F             >len_NFA         defl    $ - temp_NFA
 234+ 643F             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 234+ 643A             >
 234+ 643A 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 234+ 643B 28 3F 44 4F >                db      "(?DO)"               // name string in 7-bit ascii, but
 234+ 643F 29          >
 234+ 6440             >                org     $-1                 // alter last byte of Name just above to set
 234+ 643F A9          >                db      {b $} | END_BIT     // msb as name end
 234+ 6440             >
 234+ 6440 28 64       >                dw      last_NFA            // Link to previous definition Name
 234+ 6442             >C_Q_DO:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 234+ 6442 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
 234+ 6442             >                else
 234+ 6442 44 64       >                dw      $ + 2   ; ok        // is pointed by CFA
 234+ 6444             >                endif           ; ok        // for other definitions it "points" the correct handler
 234+ 6444             >                // Use of "; ok" to suppress "warning[fwdref]"
 234+ 6444             >
 234+ 6444             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 235+ 6444 D1                           pop     de                  // de has the index
 236+ 6445 E1                           pop     hl                  // hl has the limit
 237+ 6446 E5                           push    hl
 238+ 6447 D5                           push    de
 239+ 6448 A7                           and     a                   // reset carry flag
 240+ 6449 ED 52                        sbc     hl, de              // compute limit - index
 241+ 644B 20 05                        jr      nz, Do_Ptr          // if zero then don't even begin loop
 242+ 644D D1                               pop     de
 243+ 644E E1                               pop     hl
 244+ 644F
 245+ 644F C3 CE 63                         jp      Branch_Ptr          // perform branch consuming following cell
 246+ 6452              Do_Ptr:
 247+ 6452                              ldhlrp                      // prepare RP
 247+ 6452 2A 96 63    >                ld      hl,(RP_Pointer)
 248+ 6455 2B                           dec     hl
 249+ 6456 2B                           dec     hl
 250+ 6457 2B                           dec     hl
 251+ 6458 2B                           dec     hl
 252+ 6459                              ldrphl
 252+ 6459 22 96 63    >                ld      (RP_Pointer),hl
 253+ 645C
 254+ 645C                              // store index as top RP
 255+ 645C D1                           pop     de
 256+ 645D 73                           ld      (hl), e
 257+ 645E 23                           inc     hl
 258+ 645F 72                           ld      (hl), d
 259+ 6460 23                           inc     hl
 260+ 6461                              // stores lim as second from top RP
 261+ 6461 D1                           pop     de
 262+ 6462 73                           ld      (hl), e
 263+ 6463 23                           inc     hl
 264+ 6464 72                           ld      (hl), d
 265+ 6465
 266+ 6465                              // skip branch-style offseet
 267+ 6465 03                           inc     bc
 268+ 6466 03                           inc     bc
 269+ 6467                              next
 269+ 6467 DD E9       >                jp      (ix)
 270+ 6469
 271+ 6469              //  ______________________________________________________________________
 272+ 6469              //
 273+ 6469              // (do)        lim ind --
 274+ 6469              // compiled by DO to make a loop checking for lim == ind first
 275+ 6469              // this is a simpler version of (?DO)
 276+ 6469                              New_Def C_DO, "(DO)", is_code, is_normal
 276+ 6469             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 276+ 6469             >
 276+ 6469             >                // dummy db directives used to calculate length of namec
 276+ 6469 28 44 4F 29 >                db      "(DO)"
 276+ 646D             >len_NFA         defl    $ - temp_NFA
 276+ 646D             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 276+ 6469             >
 276+ 6469 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 276+ 646A 28 44 4F 29 >                db      "(DO)"               // name string in 7-bit ascii, but
 276+ 646E             >                org     $-1                 // alter last byte of Name just above to set
 276+ 646D A9          >                db      {b $} | END_BIT     // msb as name end
 276+ 646E             >
 276+ 646E 3A 64       >                dw      last_NFA            // Link to previous definition Name
 276+ 6470             >C_DO:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 276+ 6470 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
 276+ 6470             >                else
 276+ 6470 72 64       >                dw      $ + 2   ; ok        // is pointed by CFA
 276+ 6472             >                endif           ; ok        // for other definitions it "points" the correct handler
 276+ 6472             >                // Use of "; ok" to suppress "warning[fwdref]"
 276+ 6472             >
 276+ 6472             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 277+ 6472 0B                           dec     bc                  // prepare IP beforehand
 278+ 6473 0B                           dec     bc                  // to balance the two final inc bc in (?do)
 279+ 6474 C3 52 64                     jp      Do_Ptr
 280+ 6477
 281+ 6477              //  ______________________________________________________________________
 282+ 6477              //
 283+ 6477              // i            -- n
 284+ 6477              // used between DO and LOOP or between DO e +LOOP to copy on top of stack
 285+ 6477              // the current value of the index-loop
 286+ 6477                              New_Def I, "I", is_code, is_normal
 286+ 6477             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 286+ 6477             >
 286+ 6477             >                // dummy db directives used to calculate length of namec
 286+ 6477 49          >                db      "I"
 286+ 6478             >len_NFA         defl    $ - temp_NFA
 286+ 6478             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 286+ 6477             >
 286+ 6477 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 286+ 6478 49          >                db      "I"               // name string in 7-bit ascii, but
 286+ 6479             >                org     $-1                 // alter last byte of Name just above to set
 286+ 6478 C9          >                db      {b $} | END_BIT     // msb as name end
 286+ 6479             >
 286+ 6479 69 64       >                dw      last_NFA            // Link to previous definition Name
 286+ 647B             >I:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 286+ 647B ~           >                dw      runcode ; ok        // for primitive definitions  actual code
 286+ 647B             >                else
 286+ 647B 7D 64       >                dw      $ + 2   ; ok        // is pointed by CFA
 286+ 647D             >                endif           ; ok        // for other definitions it "points" the correct handler
 286+ 647D             >                // Use of "; ok" to suppress "warning[fwdref]"
 286+ 647D             >
 286+ 647D             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 287+ 647D              I_Ptr:
 288+ 647D
 289+ 647D                              ldhlrp
 289+ 647D 2A 96 63    >                ld      hl,(RP_Pointer)
 290+ 6480              I_Ptr_prime
 291+ 6480 5E                           ld      e, (hl)
 292+ 6481 23                           inc     hl
 293+ 6482 56                           ld      d, (hl)
 294+ 6483 D5                           push    de
 295+ 6484                              next
 295+ 6484 DD E9       >                jp      (ix)
 296+ 6486
 297+ 6486              //  ______________________________________________________________________
 298+ 6486              //
 299+ 6486              // i'            -- n
 300+ 6486              // used between DO and LOOP or between DO e +LOOP to copy on top of stack
 301+ 6486              // the limit of the index-loop
 302+ 6486
 303+ 6486                              New_Def II, "I'", is_code, is_normal
 303+ 6486             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 303+ 6486             >
 303+ 6486             >                // dummy db directives used to calculate length of namec
 303+ 6486 49 27       >                db      "I'"
 303+ 6488             >len_NFA         defl    $ - temp_NFA
 303+ 6488             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 303+ 6486             >
 303+ 6486 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 303+ 6487 49 27       >                db      "I'"               // name string in 7-bit ascii, but
 303+ 6489             >                org     $-1                 // alter last byte of Name just above to set
 303+ 6488 A7          >                db      {b $} | END_BIT     // msb as name end
 303+ 6489             >
 303+ 6489 77 64       >                dw      last_NFA            // Link to previous definition Name
 303+ 648B             >II:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 303+ 648B ~           >                dw      runcode ; ok        // for primitive definitions  actual code
 303+ 648B             >                else
 303+ 648B 8D 64       >                dw      $ + 2   ; ok        // is pointed by CFA
 303+ 648D             >                endif           ; ok        // for other definitions it "points" the correct handler
 303+ 648D             >                // Use of "; ok" to suppress "warning[fwdref]"
 303+ 648D             >
 303+ 648D             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 304+ 648D                              ldhlrp
 304+ 648D 2A 96 63    >                ld      hl,(RP_Pointer)
 305+ 6490 23                           inc     hl
 306+ 6491 23                           inc     hl
 307+ 6492 18 EC                        jr      I_Ptr_prime
 308+ 6494
 309+ 6494
 310+ 6494              //  ______________________________________________________________________
 311+ 6494              //
 312+ 6494              // digit        c n -- u 1  |  0
 313+ 6494              // convert a character c using base n
 314+ 6494              // returns a unsigned number and a true flag
 315+ 6494              // or just a false flag if the conversion fails
 316+ 6494                              New_Def DIGIT, "DIGIT", is_code, is_normal
 316+ 6494             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 316+ 6494             >
 316+ 6494             >                // dummy db directives used to calculate length of namec
 316+ 6494 44 49 47 49 >                db      "DIGIT"
 316+ 6498 54          >
 316+ 6499             >len_NFA         defl    $ - temp_NFA
 316+ 6499             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 316+ 6494             >
 316+ 6494 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 316+ 6495 44 49 47 49 >                db      "DIGIT"               // name string in 7-bit ascii, but
 316+ 6499 54          >
 316+ 649A             >                org     $-1                 // alter last byte of Name just above to set
 316+ 6499 D4          >                db      {b $} | END_BIT     // msb as name end
 316+ 649A             >
 316+ 649A 86 64       >                dw      last_NFA            // Link to previous definition Name
 316+ 649C             >DIGIT:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 316+ 649C ~           >                dw      runcode ; ok        // for primitive definitions  actual code
 316+ 649C             >                else
 316+ 649C 9E 64       >                dw      $ + 2   ; ok        // is pointed by CFA
 316+ 649E             >                endif           ; ok        // for other definitions it "points" the correct handler
 316+ 649E             >                // Use of "; ok" to suppress "warning[fwdref]"
 316+ 649E             >
 316+ 649E             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 317+ 649E E1                           pop     hl                  // l has the base
 318+ 649F D1                           pop     de                  // e has the digit
 319+ 64A0 7B                           ld      a, e
 320+ 64A1 FE 60                        cp      $60                 // check if lowercase
 321+ 64A3 38 02                        jr      c, Digit_Uppercase
 322+ 64A5 D6 20                            sub     $20                 // quick'n'dirty uppercase
 323+ 64A7              Digit_Uppercase:
 324+ 64A7 D6 30                        sub     $30
 325+ 64A9 38 15                        jr      c, Digit_Fail       // fail when character < "0"
 326+ 64AB FE 0A                            cp      $0A
 327+ 64AD 38 06                            jr      c, Digit_Decimal    // perhaps is not decimal
 328+ 64AF D6 07                                sub     7                   // try hex and subtract 7
 329+ 64B1 FE 0A                                cp      $0A
 330+ 64B3 38 0B                                jr      c,  Digit_Fail      // it is not hex !
 331+ 64B5
 332+ 64B5              Digit_Decimal:
 333+ 64B5                              // compare digit
 334+ 64B5 BD                           cp      l                   // compare with base
 335+ 64B6
 336+ 64B6 30 08                        jr      nc, Digit_Fail      // fail when greater than base
 337+ 64B8 5F                               ld      e, a                // digit is returned as second from TOS
 338+ 64B9 21 01 00                         ld      hl, 1
 339+ 64BC
 340+ 64BC                                  psh2
 340+ 64BC D5          >                push    de
 340+ 64BD E5          >                push    hl
 340+ 64BE DD E9       >                jp      (ix)
 341+ 64C0              Digit_Fail:
 342+ 64C0 21 00 00                     ld      hl, 0
 343+ 64C3                              psh1
 343+ 64C3 E5          >                push    hl
 343+ 64C4 DD E9       >                jp      (ix)
 344+ 64C6
 345+ 64C6              //  ______________________________________________________________________
 346+ 64C6              //
 347+ 64C6              //  parametric uppercase routine
 348+ 64C6              //  depending on the following op-code the routine can be by-passed
 349+ 64C6              //  changing the behaviour of some callers.
 350+ 64C6              //  If it is "ret" then the system is Case-Sensitive
 351+ 64C6              //  If it is "Nop" then the system is Case-Insensitive
 352+ 64C6              //  Only A register is touched.
 353+ 64C6 00           Case_Sensitive: nop                         // Default is case-insensitive.
 354+ 64C7              Case_Upper:
 355+ 64C7 FE 61                        cp      LC_A_CHAR           // lower-case "a"
 356+ 64C9 D8                           ret     c                   // no change if A < "a"
 357+ 64CA FE 7B                        cp      LC_Z_CHAR + 1       // lower-case "z" + 1
 358+ 64CC D0                           ret     nc                  // no change if A > "z"
 359+ 64CD D6 20                        sub     $20                 // Make uppercase if A in ["a".."z"]
 360+ 64CF C9                           ret
 361+ 64D0
 362+ 64D0              //  ______________________________________________________________________
 363+ 64D0              //
 364+ 64D0              //  caseon      --
 365+ 64D0              // set system case-sensitivity on
 366+ 64D0              // it patches a RET/NOP at the beginning of the uppercase-routine
 367+ 64D0                              New_Def CASEON, "CASEON", is_code, is_normal
 367+ 64D0             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 367+ 64D0             >
 367+ 64D0             >                // dummy db directives used to calculate length of namec
 367+ 64D0 43 41 53 45 >                db      "CASEON"
 367+ 64D4 4F 4E       >
 367+ 64D6             >len_NFA         defl    $ - temp_NFA
 367+ 64D6             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 367+ 64D0             >
 367+ 64D0 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 367+ 64D1 43 41 53 45 >                db      "CASEON"               // name string in 7-bit ascii, but
 367+ 64D5 4F 4E       >
 367+ 64D7             >                org     $-1                 // alter last byte of Name just above to set
 367+ 64D6 CE          >                db      {b $} | END_BIT     // msb as name end
 367+ 64D7             >
 367+ 64D7 94 64       >                dw      last_NFA            // Link to previous definition Name
 367+ 64D9             >CASEON:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 367+ 64D9 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
 367+ 64D9             >                else
 367+ 64D9 DB 64       >                dw      $ + 2   ; ok        // is pointed by CFA
 367+ 64DB             >                endif           ; ok        // for other definitions it "points" the correct handler
 367+ 64DB             >                // Use of "; ok" to suppress "warning[fwdref]"
 367+ 64DB             >
 367+ 64DB             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 368+ 64DB 3E C9                        ld      a, $C9              // "ret"
 369+ 64DD 32 C6 64                     ld      (Case_Sensitive), a
 370+ 64E0                              next
 370+ 64E0 DD E9       >                jp      (ix)
 371+ 64E2
 372+ 64E2              //  ______________________________________________________________________
 373+ 64E2              //
 374+ 64E2              //  caseoff     --
 375+ 64E2              // set system case-sensitivity on
 376+ 64E2              // it patches a RET/NOP at the beginning of the uppercase-routine
 377+ 64E2                              New_Def CASEOFF, "CASEOFF", is_code, is_normal
 377+ 64E2             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 377+ 64E2             >
 377+ 64E2             >                // dummy db directives used to calculate length of namec
 377+ 64E2 43 41 53 45 >                db      "CASEOFF"
 377+ 64E6 4F 46 46    >
 377+ 64E9             >len_NFA         defl    $ - temp_NFA
 377+ 64E9             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 377+ 64E2             >
 377+ 64E2 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 377+ 64E3 43 41 53 45 >                db      "CASEOFF"               // name string in 7-bit ascii, but
 377+ 64E7 4F 46 46    >
 377+ 64EA             >                org     $-1                 // alter last byte of Name just above to set
 377+ 64E9 C6          >                db      {b $} | END_BIT     // msb as name end
 377+ 64EA             >
 377+ 64EA D0 64       >                dw      last_NFA            // Link to previous definition Name
 377+ 64EC             >CASEOFF:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 377+ 64EC ~           >                dw      runcode ; ok        // for primitive definitions  actual code
 377+ 64EC             >                else
 377+ 64EC EE 64       >                dw      $ + 2   ; ok        // is pointed by CFA
 377+ 64EE             >                endif           ; ok        // for other definitions it "points" the correct handler
 377+ 64EE             >                // Use of "; ok" to suppress "warning[fwdref]"
 377+ 64EE             >
 377+ 64EE             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 378+ 64EE 3E 00                        ld      a, $00              // "nop"
 379+ 64F0 32 C6 64                     ld      (Case_Sensitive), a
 380+ 64F3                              next
 380+ 64F3 DD E9       >                jp      (ix)
 381+ 64F5
 382+ 64F5              //  ______________________________________________________________________
 383+ 64F5              //
 384+ 64F5              //  upper       c1 -- c1 | c2
 385+ 64F5              // character on top of stack is forced to Uppercase.
 386+ 64F5                              New_Def UPPER, "UPPER", is_code, is_normal
 386+ 64F5             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 386+ 64F5             >
 386+ 64F5             >                // dummy db directives used to calculate length of namec
 386+ 64F5 55 50 50 45 >                db      "UPPER"
 386+ 64F9 52          >
 386+ 64FA             >len_NFA         defl    $ - temp_NFA
 386+ 64FA             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 386+ 64F5             >
 386+ 64F5 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 386+ 64F6 55 50 50 45 >                db      "UPPER"               // name string in 7-bit ascii, but
 386+ 64FA 52          >
 386+ 64FB             >                org     $-1                 // alter last byte of Name just above to set
 386+ 64FA D2          >                db      {b $} | END_BIT     // msb as name end
 386+ 64FB             >
 386+ 64FB E2 64       >                dw      last_NFA            // Link to previous definition Name
 386+ 64FD             >UPPER:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 386+ 64FD ~           >                dw      runcode ; ok        // for primitive definitions  actual code
 386+ 64FD             >                else
 386+ 64FD FF 64       >                dw      $ + 2   ; ok        // is pointed by CFA
 386+ 64FF             >                endif           ; ok        // for other definitions it "points" the correct handler
 386+ 64FF             >                // Use of "; ok" to suppress "warning[fwdref]"
 386+ 64FF             >
 386+ 64FF             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 387+ 64FF E1                           pop     hl
 388+ 6500 7D                           ld      a, l
 389+ 6501 CD C7 64                     call    Case_Upper
 390+ 6504 6F                           ld      l, a
 391+ 6505
 392+ 6505                              psh1
 392+ 6505 E5          >                push    hl
 392+ 6506 DD E9       >                jp      (ix)
 393+ 6508
 394+ 6508              //  ______________________________________________________________________
 395+ 6508              //
 396+ 6508              // (find)       addr voc -- addr 0 | cfa b 1
 397+ 6508              // vocabulary search,
 398+ 6508              // - voc is starting word's NFA
 399+ 6508              // - addr is the string to be searched for
 400+ 6508              // On success, it returns the CFA of found word, the first NFA byte
 401+ 6508              // (which contains length and some flags) and a true flag.
 402+ 6508              // On fail, a false flag  (no more: leaves addr unchanged)
 403+ 6508                              New_Def C_FIND, "(FIND)", is_code, is_normal
 403+ 6508             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 403+ 6508             >
 403+ 6508             >                // dummy db directives used to calculate length of namec
 403+ 6508 28 46 49 4E >                db      "(FIND)"
 403+ 650C 44 29       >
 403+ 650E             >len_NFA         defl    $ - temp_NFA
 403+ 650E             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 403+ 6508             >
 403+ 6508 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 403+ 6509 28 46 49 4E >                db      "(FIND)"               // name string in 7-bit ascii, but
 403+ 650D 44 29       >
 403+ 650F             >                org     $-1                 // alter last byte of Name just above to set
 403+ 650E A9          >                db      {b $} | END_BIT     // msb as name end
 403+ 650F             >
 403+ 650F F5 64       >                dw      last_NFA            // Link to previous definition Name
 403+ 6511             >C_FIND:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 403+ 6511 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
 403+ 6511             >                else
 403+ 6511 13 65       >                dw      $ + 2   ; ok        // is pointed by CFA
 403+ 6513             >                endif           ; ok        // for other definitions it "points" the correct handler
 403+ 6513             >                // Use of "; ok" to suppress "warning[fwdref]"
 403+ 6513             >
 403+ 6513             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 404+ 6513                                                              // de has dictionary pointer
 405+ 6513 D1                               pop     de
 406+ 6514              Find_VocabularyLoop:
 407+ 6514 E1                               pop     hl                  // string pointer to search for
 408+ 6515 E5                               push    hl                  // keep it on stack too for the end.
 409+ 6516 1A                               ld      a, (de)             // save NFA length byte
 410+ 6517 08                               ex      af,af'              // for later use (!)
 411+ 6518 1A                               ld      a, (de)             // reload NFA length byte
 412+ 6519 AE                               xor     (hl)                // check if same length
 413+ 651A E6 3F                            and     $3F                 // by resetting 3 high bits (flags)
 414+ 651C                                  // word an text haven't the same length, skip to next vocabulary entry
 415+ 651C 20 2C                            jr      nz, Find_DifferentLenght
 416+ 651E
 417+ 651E              Find_ThisWord:  // begin loop
 418+ 651E 23                                   inc     hl
 419+ 651F 13                                   inc     de
 420+ 6520 1A                                   ld      a, (de)
 421+ 6521                                      // case insensitive option - begin
 422+ 6521 C5                                   push    bc
 423+ 6522 E6 80                                and     $80                 // split A in msb and the rest
 424+ 6524 47                                   ld      b, a
 425+ 6525 1A                                   ld      a, (de)
 426+ 6526 E6 7F                                and     $7F                 // ... the rest (lower 7 bits)
 427+ 6528 CD C6 64                             call    Case_Sensitive      // uppercase routine
 428+ 652B 4F                                   ld      c, a
 429+ 652C 7E                                   ld      a, (hl)
 430+ 652D CD C6 64                             call    Case_Sensitive      // uppercase routine
 431+ 6530 A9                                   xor     c
 432+ 6531 A8                                   xor     b
 433+ 6532 C1                                   pop     bc
 434+ 6533                                      // case insensitive option - end
 435+ 6533 87                                   add     a                   // ignore msb during compare
 436+ 6534 20 12                                jr      nz, Find_DidntMatch  // jump if doesn't match (*)
 437+ 6536
 438+ 6536                                  // loop back until last byte msb is found set
 439+ 6536                                  // that bit marks the ending char of this word
 440+ 6536 30 E6                            jr      nc, Find_ThisWord
 441+ 6538
 442+ 6538                                  // match found !
 443+ 6538 21 03 00                             ld      hl, 3               // 3 bytes for CFA offset to skip LFA
 444+ 653B 19                                   add     hl, de
 445+ 653C E3                                   ex      (sp), hl            // CFA on stack and drop addr
 446+ 653D 08                                   ex      af, af'             // retrieve NFA byte (!)
 447+ 653E 5F                                   ld      e, a
 448+ 653F 16 00                                ld      d, 0
 449+ 6541
 450+ 6541
 451+ 6541 21 01 00                             ld      hl, 1
 452+ 6544                                      psh2
 452+ 6544 D5          >                push    de
 452+ 6545 E5          >                push    hl
 452+ 6546 DD E9       >                jp      (ix)
 453+ 6548
 454+ 6548              Find_DidntMatch: // didn't match (*)
 455+ 6548 38 05                            jr      c,  Find_WordEnd   // jump if not end of word (**)
 456+ 654A
 457+ 654A              Find_DifferentLenght:
 458+ 654A                              // consume chars until the end of the word
 459+ 654A                              // that is last byte msb is found set
 460+ 654A 13                               inc     de
 461+ 654B 1A                               ld      a, (de)
 462+ 654C 87                               add     a, a
 463+ 654D 30 FB                        jr      nc, Find_DifferentLenght
 464+ 654F
 465+ 654F              Find_WordEnd:   // word-end  found (**)
 466+ 654F                              // take LFA and use it
 467+ 654F 13                           inc     de
 468+ 6550 EB                           ex      de, hl
 469+ 6551 5E                           ld      e, (hl)
 470+ 6552 23                           inc     hl
 471+ 6553 56                           ld      d, (hl)
 472+ 6554 7A                           ld      a, d
 473+ 6555 B3                           or      e
 474+ 6556
 475+ 6556                          // loop until end of vocabulary
 476+ 6556 20 BC                    jr      nz, Find_VocabularyLoop
 477+ 6558
 478+ 6558 E1                       pop     hl              // with this, it leaves addr unchanged
 479+ 6559 21 00 00                 ld      hl, FALSE_FLAG
 480+ 655C
 481+ 655C                          psh1
 481+ 655C E5          >                push    hl
 481+ 655D DD E9       >                jp      (ix)
 482+ 655F
 483+ 655F              //  ______________________________________________________________________
 484+ 655F              //
 485+ 655F              // enclose      a c -- a  n1 n2 n3
 486+ 655F              // starting from a, using delimiter c, determines the offsets:
 487+ 655F              //   n1   the first character non-delimiter
 488+ 655F              //   n2   the first delimiter after the text
 489+ 655F              //   n3   the first character non enclosed.
 490+ 655F              // This procedure does not go beyond a 'nul' ASCII (0x00) that represents
 491+ 655F              // an uncoditional delimiter.
 492+ 655F              // Examples:
 493+ 655F              //   i:	c  c  x  x  x  c  x	 -- 2  5  6
 494+ 655F              //  ii:	c  c  x  x  x  'nul' -- 2  5  5
 495+ 655F              // iii:	c  c  'nul'          -- 2  3  2
 496+ 655F                              New_Def ENCLOSE, "ENCLOSE", is_code, is_normal
 496+ 655F             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 496+ 655F             >
 496+ 655F             >                // dummy db directives used to calculate length of namec
 496+ 655F 45 4E 43 4C >                db      "ENCLOSE"
 496+ 6563 4F 53 45    >
 496+ 6566             >len_NFA         defl    $ - temp_NFA
 496+ 6566             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 496+ 655F             >
 496+ 655F 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 496+ 6560 45 4E 43 4C >                db      "ENCLOSE"               // name string in 7-bit ascii, but
 496+ 6564 4F 53 45    >
 496+ 6567             >                org     $-1                 // alter last byte of Name just above to set
 496+ 6566 C5          >                db      {b $} | END_BIT     // msb as name end
 496+ 6567             >
 496+ 6567 08 65       >                dw      last_NFA            // Link to previous definition Name
 496+ 6569             >ENCLOSE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 496+ 6569 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
 496+ 6569             >                else
 496+ 6569 6B 65       >                dw      $ + 2   ; ok        // is pointed by CFA
 496+ 656B             >                endif           ; ok        // for other definitions it "points" the correct handler
 496+ 656B             >                // Use of "; ok" to suppress "warning[fwdref]"
 496+ 656B             >
 496+ 656B             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 497+ 656B D1                           pop     de                  //  e has the character
 498+ 656C E1                           pop     hl                  // hl has the string address
 499+ 656D E5                           push    hl
 500+ 656E 7B                           ld      a, e
 501+ 656F 11 FF FF                     ld      de, -1              // let's start from -1
 502+ 6572 2B                           dec     hl
 503+ 6573              Enclose_NonDelimiter:
 504+ 6573                              // find first non delimiter
 505+ 6573 23                               inc     hl
 506+ 6574 13                               inc     de
 507+ 6575 BE                               cp      (hl)
 508+ 6576 28 FB                        jr      z, Enclose_NonDelimiter
 509+ 6578 D5                           push    de
 510+ 6579
 511+ 6579 C5                           push    bc                  // save Instruction Pointer
 512+ 657A
 513+ 657A 4F                           ld      c, a                // save char
 514+ 657B 7E                           ld      a, (hl)
 515+ 657C A7                           and     a                   // stop if 0x00
 516+ 657D 20 07                        jr      nz, Enclose_NextChar
 517+ 657F
 518+ 657F                              /// case iii. no more character in string
 519+ 657F C1                               pop     bc                  // restore Instruction Pointer
 520+ 6580 13                               inc     de
 521+ 6581 D5                               push    de
 522+ 6582 1B                               dec     de
 523+ 6583 D5                               push    de
 524+ 6584                                  next
 524+ 6584 DD E9       >                jp      (ix)
 525+ 6586              Enclose_NextChar:
 526+ 6586 79                               ld      a, c
 527+ 6587 23                               inc     hl
 528+ 6588 13                               inc     de
 529+ 6589 BE                               cp      (hl)
 530+ 658A 20 06                            jr      nz, Enclose_NonSeparator
 531+ 658C
 532+ 658C                                      // case i. first non enclosed
 533+ 658C C1                                   pop     bc                  // restore Instruction Pointer
 534+ 658D D5                                   push    de
 535+ 658E 13                                   inc     de
 536+ 658F D5                                   push    de
 537+ 6590                                      next
 537+ 6590 DD E9       >                jp      (ix)
 538+ 6592              Enclose_NonSeparator:
 539+ 6592 7E                               ld      a, (hl)
 540+ 6593 A7                               and     a
 541+ 6594 20 F0                        jr      nz, Enclose_NextChar
 542+ 6596
 543+ 6596                              // case ii. separator & terminator
 544+ 6596 C1                           pop     bc                  // restore Instruction Pointer
 545+ 6597 D5                           push    de
 546+ 6598 D5                           push    de
 547+ 6599                              next
 547+ 6599 DD E9       >                jp      (ix)
 548+ 659B
 549+ 659B              //  ______________________________________________________________________
 550+ 659B              //
 551+ 659B              // (map)        a2 a1 n c1 -- c2
 552+ 659B              // translate character c1 using mapping string a2 and a2
 553+ 659B              // if c1 is not present within string a1 then
 554+ 659B              // c2 = c2 if it is not translated. n is the length of both a1 and a2.
 555+ 659B                              New_Def C_MAP, "(MAP)", is_code, is_normal
 555+ 659B             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 555+ 659B             >
 555+ 659B             >                // dummy db directives used to calculate length of namec
 555+ 659B 28 4D 41 50 >                db      "(MAP)"
 555+ 659F 29          >
 555+ 65A0             >len_NFA         defl    $ - temp_NFA
 555+ 65A0             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 555+ 659B             >
 555+ 659B 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 555+ 659C 28 4D 41 50 >                db      "(MAP)"               // name string in 7-bit ascii, but
 555+ 65A0 29          >
 555+ 65A1             >                org     $-1                 // alter last byte of Name just above to set
 555+ 65A0 A9          >                db      {b $} | END_BIT     // msb as name end
 555+ 65A1             >
 555+ 65A1 5F 65       >                dw      last_NFA            // Link to previous definition Name
 555+ 65A3             >C_MAP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 555+ 65A3 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
 555+ 65A3             >                else
 555+ 65A3 A5 65       >                dw      $ + 2   ; ok        // is pointed by CFA
 555+ 65A5             >                endif           ; ok        // for other definitions it "points" the correct handler
 555+ 65A5             >                // Use of "; ok" to suppress "warning[fwdref]"
 555+ 65A5             >
 555+ 65A5             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 556+ 65A5 D9                           exx
 557+ 65A6 E1                           pop     hl
 558+ 65A7 7D                           ld      a, l
 559+ 65A8 C1                           pop     bc
 560+ 65A9 E1                           pop     hl
 561+ 65AA 50                           ld      d, b
 562+ 65AB 59                           ld      e, c
 563+ 65AC ED B1                        cpir
 564+ 65AE E1                           pop     hl
 565+ 65AF 20 05                        jr      nz, C_Map_Then
 565+ 65B1
 566+ 65B1 19                               add     hl, de
 567+ 65B2 2B                               dec     hl
 568+ 65B3 ED 42                            sbc     hl, bc
 569+ 65B5 7E                               ld      a, (hl)
 570+ 65B6              C_Map_Then:
 571+ 65B6 6F                           ld      l, a
 572+ 65B7 26 00                        ld      h, 0
 573+ 65B9 E5                           push    hl
 574+ 65BA D9                           exx
 575+ 65BB                              next
 575+ 65BB DD E9       >                jp      (ix)
 576+ 65BD
 577+ 65BD              //  ______________________________________________________________________
 578+ 65BD              //
 579+ 65BD              // (compare)    a1 a2 n -- b
 580+ 65BD              // this word performs a lexicographic compare of n bytes of text at address a1
 581+ 65BD              // with n bytes of text at address a2. It returns numeric a value:
 582+ 65BD              //  0 : if strings are equal
 583+ 65BD              // +1 : if string at a1 greater than string at a2
 584+ 65BD              // -1 : if string at a1 less than string at a2
 585+ 65BD              // strings can be 256 bytes in length at most.
 586+ 65BD                              New_Def C_COMPARE, "(COMPARE)", is_code, is_normal
 586+ 65BD             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 586+ 65BD             >
 586+ 65BD             >                // dummy db directives used to calculate length of namec
 586+ 65BD 28 43 4F 4D >                db      "(COMPARE)"
 586+ 65C1 50 41 52 45 >
 586+ 65C5 29          >
 586+ 65C6             >len_NFA         defl    $ - temp_NFA
 586+ 65C6             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 586+ 65BD             >
 586+ 65BD 89          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 586+ 65BE 28 43 4F 4D >                db      "(COMPARE)"               // name string in 7-bit ascii, but
 586+ 65C2 50 41 52 45 >
 586+ 65C6 29          >
 586+ 65C7             >                org     $-1                 // alter last byte of Name just above to set
 586+ 65C6 A9          >                db      {b $} | END_BIT     // msb as name end
 586+ 65C7             >
 586+ 65C7 9B 65       >                dw      last_NFA            // Link to previous definition Name
 586+ 65C9             >C_COMPARE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 586+ 65C9 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
 586+ 65C9             >                else
 586+ 65C9 CB 65       >                dw      $ + 2   ; ok        // is pointed by CFA
 586+ 65CB             >                endif           ; ok        // for other definitions it "points" the correct handler
 586+ 65CB             >                // Use of "; ok" to suppress "warning[fwdref]"
 586+ 65CB             >
 586+ 65CB             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 587+ 65CB D9                           exx
 588+ 65CC E1                           pop     hl                  // Number of bytes
 589+ 65CD 7D                           ld      a, l
 590+ 65CE E1                           pop     hl                  // hl points string a2
 591+ 65CF D1                           pop     de                  // hl points string a1
 592+ 65D0              //              push    bc                  // Instruction pointer on stack
 593+ 65D0 47                           ld      b, a
 594+ 65D1              C_Compare_Loop:
 595+ 65D1 7E                               ld      a, (hl)
 596+ 65D2 CD C6 64                         call    Case_Sensitive
 597+ 65D5 4F                               ld      c, a
 598+ 65D6 1A                               ld      a, (de)
 599+ 65D7 CD C6 64                         call    Case_Sensitive
 600+ 65DA B9                               cp      c
 601+ 65DB 13                               inc     de
 602+ 65DC 23                               inc     hl
 603+ 65DD 28 0E                            jr      z, C_Compare_Equal
 604+ 65DF 38 05                                jr      c, C_Compare_NotLessThan  // If LessThan
 605+ 65E1 21 01 00                                 ld      hl, 1               // a1 gt a2
 606+ 65E4 18 03                                jr      C_Compare_Then      // Else
 607+ 65E6              C_Compare_NotLessThan:
 608+ 65E6 21 FF FF                                 ld      hl, -1              // a1 lt a2
 609+ 65E9              C_Compare_Then:                                 // Endif
 610+ 65E9              //                      pop     bc              // restore Instruction Pointer
 611+ 65E9 E5                                   push    hl
 612+ 65EA D9                                   exx
 613+ 65EB
 614+ 65EB                                      next
 614+ 65EB DD E9       >                jp      (ix)
 615+ 65ED
 616+ 65ED              C_Compare_Equal:
 617+ 65ED 10 E2                        djnz    C_Compare_Loop
 618+ 65EF 21 00 00                     ld      hl, 0               // a1 eq a2
 619+ 65F2              //              pop     bc                  // restore Instruction Pointer
 620+ 65F2 E5                           push    hl
 621+ 65F3 D9                           exx
 622+ 65F4
 623+ 65F4                              next
 623+ 65F4 DD E9       >                jp      (ix)
 624+ 65F6
 625+ 65F6              //  ______________________________________________________________________
 626+ 65F6              //
 627+ 65F6              // emitc        c --
 628+ 65F6              // low level emit, calls ROM routine at #10 to send a character to
 629+ 65F6              // the the current channel (see SELECT to change stream-channel)
 630+ 65F6                              New_Def EMITC, "EMITC", is_code, is_normal
 630+ 65F6             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 630+ 65F6             >
 630+ 65F6             >                // dummy db directives used to calculate length of namec
 630+ 65F6 45 4D 49 54 >                db      "EMITC"
 630+ 65FA 43          >
 630+ 65FB             >len_NFA         defl    $ - temp_NFA
 630+ 65FB             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 630+ 65F6             >
 630+ 65F6 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 630+ 65F7 45 4D 49 54 >                db      "EMITC"               // name string in 7-bit ascii, but
 630+ 65FB 43          >
 630+ 65FC             >                org     $-1                 // alter last byte of Name just above to set
 630+ 65FB C3          >                db      {b $} | END_BIT     // msb as name end
 630+ 65FC             >
 630+ 65FC BD 65       >                dw      last_NFA            // Link to previous definition Name
 630+ 65FE             >EMITC:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 630+ 65FE ~           >                dw      runcode ; ok        // for primitive definitions  actual code
 630+ 65FE             >                else
 630+ 65FE 00 66       >                dw      $ + 2   ; ok        // is pointed by CFA
 630+ 6600             >                endif           ; ok        // for other definitions it "points" the correct handler
 630+ 6600             >                // Use of "; ok" to suppress "warning[fwdref]"
 630+ 6600             >
 630+ 6600             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 631+ 6600 E1                           pop     hl
 632+ 6601 7D                           ld      a, l
 633+ 6602              Emitc_Ptr:
 634+ 6602 C5                           push    bc
 635+ 6603 DD E5                        push    ix
 636+ 6605 D7                           rst     $10
 637+ 6606 DD E1                        pop     ix
 638+ 6608 C1                           pop     bc
 639+ 6609 3E FF                        ld      a, 255            // max possible
 640+ 660B 32 8C 5C                     ld      (SCR_CT), a
 641+ 660E
 642+ 660E                              next
 642+ 660E DD E9       >                jp      (ix)
 643+ 6610
 644+ 6610              Emitc_Vec:
 645+ 6610 55 66                        dw      C_Emit_Printable  // comma
 646+ 6612 5B 66                        dw      C_Emit_Bel        // bel
 647+ 6614 55 66                        dw      C_Emit_Printable  // bs
 648+ 6616 70 66                        dw      C_Emit_Tab        // tab
 649+ 6618 55 66                        dw      C_Emit_Printable  // cr
 650+ 661A 76 66                        dw      C_Emit_NL         // lf (unix newline)
 651+ 661C 55 66                        dw      C_Emit_Printable  // blank
 652+ 661E 55 66                        dw      C_Emit_Printable  // blank
 653+ 6620
 654+ 6620              Emit_Selector_Start:
 655+ 6620 06                           db      $06                 // comma
 656+ 6621 07                           db      $07                 // bel
 657+ 6622 08                           db      $08                 // bs
 658+ 6623 09                           db      $09                 // tab
 659+ 6624 0D                           db      $0D                 // cr
 660+ 6625 0A                           db      $0A                 // lf (unix newline)
 661+ 6626 20                           db      $20
 662+ 6627              Emit_Selector_End:
 663+ 6627 20                           db      $20
 664+ 6628
 665+ 6628              //  ______________________________________________________________________
 666+ 6628              //
 667+ 6628              // (?emit)      c1 -- c2 | c1
 668+ 6628              // decode a character to be sent via EMIT
 669+ 6628              // search first the Emit_Selector table, if found jump to the corresponding routine in Emit_Vector
 670+ 6628              // the routine should resolve anything and convert the character anyway.
 671+ 6628                              New_Def C_EMIT, "(?EMIT)", is_code, is_normal
 671+ 6628             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 671+ 6628             >
 671+ 6628             >                // dummy db directives used to calculate length of namec
 671+ 6628 28 3F 45 4D >                db      "(?EMIT)"
 671+ 662C 49 54 29    >
 671+ 662F             >len_NFA         defl    $ - temp_NFA
 671+ 662F             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 671+ 6628             >
 671+ 6628 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 671+ 6629 28 3F 45 4D >                db      "(?EMIT)"               // name string in 7-bit ascii, but
 671+ 662D 49 54 29    >
 671+ 6630             >                org     $-1                 // alter last byte of Name just above to set
 671+ 662F A9          >                db      {b $} | END_BIT     // msb as name end
 671+ 6630             >
 671+ 6630 F6 65       >                dw      last_NFA            // Link to previous definition Name
 671+ 6632             >C_EMIT:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 671+ 6632 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
 671+ 6632             >                else
 671+ 6632 34 66       >                dw      $ + 2   ; ok        // is pointed by CFA
 671+ 6634             >                endif           ; ok        // for other definitions it "points" the correct handler
 671+ 6634             >                // Use of "; ok" to suppress "warning[fwdref]"
 671+ 6634             >
 671+ 6634             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 672+ 6634 D1                           pop     de
 673+ 6635 7B                           ld      a, e                //  de has c1
 674+ 6636 E6 7F                        and     $7F                 // 7-bit ascii only
 675+ 6638 C5                           push    bc                  // save Instruction Pointer
 676+ 6639 01 08 00                     ld      bc, Emit_Selector_End - Emit_Selector_Start + 1
 677+ 663C 21 27 66                     ld      hl, Emit_Selector_End
 678+ 663F ED B9                        cpdr                        // search for c1 in Emit_Selector table, backward
 679+ 6641 20 0B                        jr      nz, C_Emit_Not_Found
 680+ 6643                                  // Found then decode it
 681+ 6643 21 10 66                         ld      hl, Emitc_Vec
 682+ 6646 09                               add     hl, bc
 683+ 6647 09                               add     hl, bc
 684+ 6648 5E                               ld      e, (hl)
 685+ 6649 23                               inc     hl
 686+ 664A 56                               ld      d, (hl)
 687+ 664B EB                               ex      de, hl
 688+ 664C C1                               pop     bc                  // restore Instruction Pointer
 689+ 664D E9                               jp      (hl)                // one of the following labels
 690+ 664E              C_Emit_Not_Found:
 691+ 664E C1                           pop     bc                  // restore Instruction Pointer
 692+ 664F FE 20                        cp      BLANK_CHAR          // cp $20 non-printable check
 693+ 6651 30 02                        jr      nc, C_Emit_Printable
 694+ 6653 3E 00                            ld      a, NUL_CHAR         // NUL is never "printed"
 695+ 6655              C_Emit_Printable:
 696+ 6655 6F                           ld      l, a
 697+ 6656 26 00                        ld      h, 0
 698+ 6658
 699+ 6658                              psh1
 699+ 6658 E5          >                push    hl
 699+ 6659 DD E9       >                jp      (ix)
 700+ 665B
 701+ 665B              C_Emit_Bel:
 702+ 665B C5                           push    bc                  // save Instruction Pointer
 703+ 665C 11 00 01                     ld      de, $0100
 704+ 665F 21 00 02                     ld      hl, $0200
 705+ 6662 DD E5                        push    ix                  // save Next Pointer
 706+ 6664 CD B6 03                     call    $03B6               // bleep Standard-ROM routine
 707+ 6667 DD E1                        pop     ix                  // restore Next Pointer
 708+ 6669 C1                           pop     bc                  // restore Instruction Pointer
 709+ 666A 21 00 00                     ld      hl, NUL_CHAR
 710+ 666D
 711+ 666D                              psh1
 711+ 666D E5          >                push    hl
 711+ 666E DD E9       >                jp      (ix)
 712+ 6670
 713+ 6670 21 06 00     C_Emit_Tab:     ld      hl, COMMA_CHAR
 714+ 6673
 715+ 6673                              psh1
 715+ 6673 E5          >                push    hl
 715+ 6674 DD E9       >                jp      (ix)
 716+ 6676
 717+ 6676 21 0D 00     C_Emit_NL       ld      hl, CR_CHAR           // 0x0A --> 0x0D  à la Spectrum
 718+ 6679
 719+ 6679                              psh1
 719+ 6679 E5          >                push    hl
 719+ 667A DD E9       >                jp      (ix)
 720+ 667C
 721+ 667C              //  ______________________________________________________________________
 722+ 667C
 723+ 667C              Key_Table:
 724+ 667C E2                           db      $E2                 //  0: STOP  --> SYMBOL+A : ~
 725+ 667D C3                           db      $C3                 //  1: NOT   --> SYMBOL+S : |
 726+ 667E CD                           db      $CD                 //  2: STEP  --> SYMBOl+D : //
 727+ 667F CC                           db      $CC                 //  3: TO    --> SYMBOL+F : {
 728+ 6680 CB                           db      $CB                 //  4: THEN  --> SYMBOL+G : }
 729+ 6681 C6                           db      $C6                 //  5: AND   --> SYMBOL+Y : [
 730+ 6682 C5                           db      $C5                 //  6: OR    --> SYMBOL+U : ]
 731+ 6683 AC                           db      $AC                 //  7: AT    --> SYMBOL+I : (C) copyright symbol
 732+ 6684 C7                           db      $C7                 //  8: <=    --> same as SHIFT-1 [EDIT]
 733+ 6685 C8                           db      $C8                 //  9: >=    --> same as SHIFT-0 [BACKSPACE]
 734+ 6686 C9                           db      $C9                 // 10: <>    --> SYMBOL+W is the same as CAPS (toggle) SHIFT+2
 735+ 6687              Key_MapTo:
 736+ 6687 06                           db      $06                 // 10: SYMBOL+W is the same as CAPS (toggle) SHIFT+2
 737+ 6688 0C                           db      $0C                 //  9: same as SHIFT-0 [BACKSPACE]
 738+ 6689 07                           db      $07                 //  8: same as SHIFT-1 [EDIT]
 739+ 668A 7F                           db      $7F                 //  7: SYMBOL+I : (C) copyright symbol
 740+ 668B 5D                           db      $5D                 //  6: SYMBOL+U : ]
 741+ 668C 5B                           db      $5B                 //  5: SYMBOL+Y : [
 742+ 668D 7D                           db      $7D                 //  4: SYMBOL+G : }
 743+ 668E 7B                           db      $7B                 //  3: SYMBOL+F : {
 744+ 668F 5C                           db      $5C                 //  2: SYMBOl+D : //
 745+ 6690 7C                           db      $7C                 //  1: SYMBOL+S : |
 746+ 6691 7E                           db      $7E                 //  0: SYMBOL+A : ~
 747+ 6692
 748+ 6692              //  ______________________________________________________________________
 749+ 6692              //
 750+ 6692              // key          -- c
 751+ 6692              // wait for a keypress
 752+ 6692              // This definition need Standard ROM Interrupt to be served
 753+ 6692
 754+ 6692                              New_Def KEY, "KEY", is_code, is_normal
 754+ 6692             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 754+ 6692             >
 754+ 6692             >                // dummy db directives used to calculate length of namec
 754+ 6692 4B 45 59    >                db      "KEY"
 754+ 6695             >len_NFA         defl    $ - temp_NFA
 754+ 6695             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 754+ 6692             >
 754+ 6692 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 754+ 6693 4B 45 59    >                db      "KEY"               // name string in 7-bit ascii, but
 754+ 6696             >                org     $-1                 // alter last byte of Name just above to set
 754+ 6695 D9          >                db      {b $} | END_BIT     // msb as name end
 754+ 6696             >
 754+ 6696 28 66       >                dw      last_NFA            // Link to previous definition Name
 754+ 6698             >KEY:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 754+ 6698 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
 754+ 6698             >                else
 754+ 6698 9A 66       >                dw      $ + 2   ; ok        // is pointed by CFA
 754+ 669A             >                endif           ; ok        // for other definitions it "points" the correct handler
 754+ 669A             >                // Use of "; ok" to suppress "warning[fwdref]"
 754+ 669A             >
 754+ 669A             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 755+ 669A
 756+ 669A C5                           push    bc                  // save Instruction Pointer
 757+ 669B DD E5                        push    ix
 758+ 669D
 759+ 669D ED 73 92 63                  ld      (SP_Saved), sp      // be sure to not to be paged out.
 760+ 66A1 31 61 63                     ld      sp, Cold_origin - 5 // maybe $4000 in the future...
 761+ 66A4 FD CB 01 AE                  res     5, (iy + 1)         // FLAGS (5C3A+1)
 762+ 66A8
 763+ 66A8              Key_Wait:
 764+ 66A8 76                               halt
 765+ 66A9 3E 02                            ld      a, 2                // selec channel #2 (Upper Video)
 766+ 66AB CD 01 16                         call    $1601               // SELECT Standard-ROM Routine
 767+ 66AE
 768+ 66AE                                  // software-flash: flips face every 320 ms
 769+ 66AE 3E 10                            ld      a, $10              // Timing based
 770+ 66B0 FD A6 3E                         and     (iy + $3E)          // FRAMES (5C3A+3E)
 771+ 66B3
 772+ 66B3 3A 8C 63                         ld      a, (Block_Face)     // see origin.asm
 773+ 66B6 20 0C                            jr      nz, Key_Cursor
 774+ 66B8 3A 8D 63                             ld      a, (Half_Face)      // see origin.asm
 775+ 66BB FD CB 30 5E                          bit     3, (iy + $30)       // FLAGS2 (5C3A+$30) that is CAPS-LOCK
 776+ 66BF 28 03                                jr      z, Key_Cursor
 777+ 66C1 3A 8E 63                                 ld      a, (Underscore_Face) // see origin
 778+ 66C4              Key_Cursor:
 779+ 66C4 D7                               rst     $10
 780+ 66C5 3E 08                            ld      a, BACKSPACE_CHAR    // backspace
 781+ 66C7 D7                               rst     $10
 782+ 66C8
 783+ 66C8 FD CB 01 6E                      bit     5, (iy + 1)         // FLAGS (5C3A+1)
 784+ 66CC 28 DA                        jr      z, Key_Wait
 785+ 66CE
 786+ 66CE 76                           halt    // this is to sync flashing cursor.
 787+ 66CF
 788+ 66CF 3E 20                        ld      a, BLANK_CHAR       // space to blank cursor
 789+ 66D1 D7                           rst     $10
 790+ 66D2 3E 08                        ld      a, BACKSPACE_CHAR   // backspace
 791+ 66D4 D7                           rst     $10
 792+ 66D5 3A 08 5C                     ld      a, (LASTK)          // get typed character (5C08)
 793+ 66D8
 794+ 66D8                              // decode character from above table
 795+ 66D8 21 7C 66                     ld      hl, Key_Table
 796+ 66DB 01 0B 00                     ld      bc, $000B
 797+ 66DE ED B1                        cpir
 798+ 66E0 20 05                        jr      nz, Key_DontMap
 799+ 66E2 21 87 66                         ld      hl, Key_MapTo
 800+ 66E5 09                               add     hl, bc
 801+ 66E6 7E                               ld      a, (hl)
 802+ 66E7 FE 06        Key_DontMap:    cp      $06                 // CAPS-LOCK management
 803+ 66E9 20 09                        jr      nz, Key_NoCapsLock
 804+ 66EB 21 6A 5C                         ld      hl, $5C6A           // FLAGS2
 805+ 66EE 7E                               ld      a, (hl)
 806+ 66EF EE 08                            xor     $08
 807+ 66F1 77                               ld      (hl), a
 808+ 66F2 3E 00                            ld      a, NUL_CHAR
 809+ 66F4 6F           Key_NoCapsLock: ld      l, a
 810+ 66F5 26 00                        ld      h, 0                // Prepare TOS
 811+ 66F7
 812+ 66F7 3A 48 5C                     ld      a, ($5C48)          // BORDCR system variable
 813+ 66FA 1F                           rra
 814+ 66FB 1F                           rra
 815+ 66FC 1F                           rra
 816+ 66FD F6 18                        or      $18                 // quick'n'dirty click
 817+ 66FF D3 FE                        out     ($fe), a
 818+ 6701 06 00                        ld      b, 0
 819+ 6703 10 FE                        djnz    $                   // wait loop
 820+ 6705 EE 18                        xor     $18
 821+ 6707 D3 FE                        out     ($fe), a
 822+ 6709
 823+ 6709 ED 7B 92 63                  ld      sp, (SP_Saved)
 824+ 670D
 825+ 670D DD E1                        pop     ix
 826+ 670F C1                           pop     bc                  // Restore Instruction Pointer
 827+ 6710
 828+ 6710                              psh1
 828+ 6710 E5          >                push    hl
 828+ 6711 DD E9       >                jp      (ix)
 829+ 6713
 830+ 6713              //  ______________________________________________________________________
 831+ 6713              //
 832+ 6713              // ?terminal    -- FALSE | TRUE
 833+ 6713              // test for BREAK keypress
 834+ 6713                              New_Def QTERMINAL, "?TERMINAL", is_code, is_normal
 834+ 6713             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 834+ 6713             >
 834+ 6713             >                // dummy db directives used to calculate length of namec
 834+ 6713 3F 54 45 52 >                db      "?TERMINAL"
 834+ 6717 4D 49 4E 41 >
 834+ 671B 4C          >
 834+ 671C             >len_NFA         defl    $ - temp_NFA
 834+ 671C             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 834+ 6713             >
 834+ 6713 89          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 834+ 6714 3F 54 45 52 >                db      "?TERMINAL"               // name string in 7-bit ascii, but
 834+ 6718 4D 49 4E 41 >
 834+ 671C 4C          >
 834+ 671D             >                org     $-1                 // alter last byte of Name just above to set
 834+ 671C CC          >                db      {b $} | END_BIT     // msb as name end
 834+ 671D             >
 834+ 671D 92 66       >                dw      last_NFA            // Link to previous definition Name
 834+ 671F             >QTERMINAL:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 834+ 671F ~           >                dw      runcode ; ok        // for primitive definitions  actual code
 834+ 671F             >                else
 834+ 671F 21 67       >                dw      $ + 2   ; ok        // is pointed by CFA
 834+ 6721             >                endif           ; ok        // for other definitions it "points" the correct handler
 834+ 6721             >                // Use of "; ok" to suppress "warning[fwdref]"
 834+ 6721             >
 834+ 6721             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 835+ 6721 21 00 00                     ld      hl, 0
 836+ 6724 ED 73 92 63                  ld      (SP_Saved), sp
 837+ 6728 31 61 63                     ld      sp, Cold_origin - 5
 838+ 672B CD 54 1F                     call    $1F54
 839+ 672E ED 7B 92 63                  ld      sp, (SP_Saved)
 840+ 6732
 841+ 6732 38 01                        jr      c, QTerminal_NoBreak
 842+ 6734 2B                               dec     hl                  // quick TRUE_FLAG
 843+ 6735              QTerminal_NoBreak:
 844+ 6735
 845+ 6735                              psh1
 845+ 6735 E5          >                push    hl
 845+ 6736 DD E9       >                jp      (ix)
 846+ 6738
 847+ 6738
 848+ 6738              //  ______________________________________________________________________
 849+ 6738              //
 850+ 6738              // ZX Spectrum Next - Low Level disk primitives.
 851+ 6738              // this include is "here" for backward compatibility
 852+ 6738
 853+ 6738                              include "next-opt0.asm"
# file opened: C:\Zx\CSpect\Projects\vForth15_INDIRECT/source/next-opt0.asm
   1++6738              //  ______________________________________________________________________
   2++6738              //
   3++6738              //  next-opt.asm
   4++6738              //
   5++6738              //  ZX Spectrum Next - peculiar definitions
   6++6738              //  ______________________________________________________________________
   7++6738
   8++6738              //  ______________________________________________________________________
   9++6738              //
  10++6738              // f_seek       d u -- f
  11++6738              // Seek to position d in file-handle u.
  12++6738              // Return a false-flag 0 on success, True flag on error
  13++6738                              New_Def F_SEEK, "F_SEEK", is_code, is_normal
  13++6738             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  13++6738             >
  13++6738             >                // dummy db directives used to calculate length of namec
  13++6738 46 5F 53 45 >                db      "F_SEEK"
  13++673C 45 4B       >
  13++673E             >len_NFA         defl    $ - temp_NFA
  13++673E             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  13++6738             >
  13++6738 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  13++6739 46 5F 53 45 >                db      "F_SEEK"               // name string in 7-bit ascii, but
  13++673D 45 4B       >
  13++673F             >                org     $-1                 // alter last byte of Name just above to set
  13++673E CB          >                db      {b $} | END_BIT     // msb as name end
  13++673F             >
  13++673F 13 67       >                dw      last_NFA            // Link to previous definition Name
  13++6741             >F_SEEK:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
  13++6741 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
  13++6741             >                else
  13++6741 43 67       >                dw      $ + 2   ; ok        // is pointed by CFA
  13++6743             >                endif           ; ok        // for other definitions it "points" the correct handler
  13++6743             >                // Use of "; ok" to suppress "warning[fwdref]"
  13++6743             >
  13++6743             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  14++6743 E1                           pop     hl                  // file-handle
  15++6744 7D                           ld      a, l                // file-handle
  16++6745 60                           ld      h, b                // save Intruction Pointer
  17++6746 69                           ld      l, c
  18++6747 C1                           pop     bc                  // bc has high-word of d
  19++6748 D1                           pop     de
  20++6749 DD E5                        push    ix
  21++674B E5                           push    hl                  // save Instruction Pointer
  22++674C DD 21 00 00                  ld      ix, 0
  23++6750 CF                           rst     $08
  24++6751 9F                           db      $9F
  25++6752              F_Seek_Exit:
  26++6752 C1                           pop     bc                  // restore Instruction Pointer
  27++6753 DD E1                        pop     ix
  28++6755 ED 62                        sbc     hl, hl              // to get 0 or -1
  29++6757
  30++6757                              psh1
  30++6757 E5          >                push    hl
  30++6758 DD E9       >                jp      (ix)
  31++675A
  32++675A              //  ______________________________________________________________________
  33++675A              //
  34++675A              // f_close      u -- f
  35++675A              // Close file-handle u.
  36++675A              // Return 0 on success, True flag on error
  37++675A
  38++675A                              New_Def F_CLOSE, "F_CLOSE", is_code, is_normal
  38++675A             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  38++675A             >
  38++675A             >                // dummy db directives used to calculate length of namec
  38++675A 46 5F 43 4C >                db      "F_CLOSE"
  38++675E 4F 53 45    >
  38++6761             >len_NFA         defl    $ - temp_NFA
  38++6761             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  38++675A             >
  38++675A 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  38++675B 46 5F 43 4C >                db      "F_CLOSE"               // name string in 7-bit ascii, but
  38++675F 4F 53 45    >
  38++6762             >                org     $-1                 // alter last byte of Name just above to set
  38++6761 C5          >                db      {b $} | END_BIT     // msb as name end
  38++6762             >
  38++6762 38 67       >                dw      last_NFA            // Link to previous definition Name
  38++6764             >F_CLOSE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
  38++6764 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
  38++6764             >                else
  38++6764 66 67       >                dw      $ + 2   ; ok        // is pointed by CFA
  38++6766             >                endif           ; ok        // for other definitions it "points" the correct handler
  38++6766             >                // Use of "; ok" to suppress "warning[fwdref]"
  38++6766             >
  38++6766             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  39++6766
  40++6766 E1                           pop     hl
  41++6767 7D                           ld      a, l                // file-handle
  42++6768 DD E5                        push    ix
  43++676A C5                           push    bc                  // Save Instruction pointer
  44++676B CF                           rst     $08
  45++676C 9B                           db      $9B
  46++676D 18 E3                        jr      F_Seek_Exit
  47++676F              //              pop     bc
  48++676F              //              pop     ix
  49++676F              //              sbc     hl, hl
  50++676F              //              psh1
  51++676F
  52++676F              //  ______________________________________________________________________
  53++676F              //
  54++676F              // f_sync      u -- f
  55++676F              // Close file-handle u.
  56++676F              // Return 0 on success, True flag on error
  57++676F
  58++676F                              New_Def F_SYNC, "F_SYNC", is_code, is_normal
  58++676F             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  58++676F             >
  58++676F             >                // dummy db directives used to calculate length of namec
  58++676F 46 5F 53 59 >                db      "F_SYNC"
  58++6773 4E 43       >
  58++6775             >len_NFA         defl    $ - temp_NFA
  58++6775             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  58++676F             >
  58++676F 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  58++6770 46 5F 53 59 >                db      "F_SYNC"               // name string in 7-bit ascii, but
  58++6774 4E 43       >
  58++6776             >                org     $-1                 // alter last byte of Name just above to set
  58++6775 C3          >                db      {b $} | END_BIT     // msb as name end
  58++6776             >
  58++6776 5A 67       >                dw      last_NFA            // Link to previous definition Name
  58++6778             >F_SYNC:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
  58++6778 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
  58++6778             >                else
  58++6778 7A 67       >                dw      $ + 2   ; ok        // is pointed by CFA
  58++677A             >                endif           ; ok        // for other definitions it "points" the correct handler
  58++677A             >                // Use of "; ok" to suppress "warning[fwdref]"
  58++677A             >
  58++677A             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  59++677A E1                           pop     hl
  60++677B 7D                           ld      a, l                // file-handle
  61++677C DD E5                        push    ix
  62++677E C5                           push    bc
  63++677F CF                           rst     $08
  64++6780 9C                           db      $9C
  65++6781 18 CF                        jr      F_Seek_Exit
  66++6783              //              pop     bc
  67++6783              //              pop     ix
  68++6783              //              sbc     hl, hl
  69++6783              //              psh1
  70++6783
  71++6783              //  ______________________________________________________________________
  72++6783              //
  73++6783              // f_fgetpos    u -- d f
  74++6783              // Seek to position d in file-handle u.
  75++6783              // Return a false-flag 0 on success, True flag on error
  76++6783                              New_Def F_FGETPOS, "F_FGETPOS", is_code, is_normal
  76++6783             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  76++6783             >
  76++6783             >                // dummy db directives used to calculate length of namec
  76++6783 46 5F 46 47 >                db      "F_FGETPOS"
  76++6787 45 54 50 4F >
  76++678B 53          >
  76++678C             >len_NFA         defl    $ - temp_NFA
  76++678C             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  76++6783             >
  76++6783 89          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  76++6784 46 5F 46 47 >                db      "F_FGETPOS"               // name string in 7-bit ascii, but
  76++6788 45 54 50 4F >
  76++678C 53          >
  76++678D             >                org     $-1                 // alter last byte of Name just above to set
  76++678C D3          >                db      {b $} | END_BIT     // msb as name end
  76++678D             >
  76++678D 6F 67       >                dw      last_NFA            // Link to previous definition Name
  76++678F             >F_FGETPOS:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
  76++678F ~           >                dw      runcode ; ok        // for primitive definitions  actual code
  76++678F             >                else
  76++678F 91 67       >                dw      $ + 2   ; ok        // is pointed by CFA
  76++6791             >                endif           ; ok        // for other definitions it "points" the correct handler
  76++6791             >                // Use of "; ok" to suppress "warning[fwdref]"
  76++6791             >
  76++6791             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  77++6791 E1                           pop     hl
  78++6792 7D                           ld      a, l                // file-handle
  79++6793 DD E5                        push    ix
  80++6795 C5                           push    bc
  81++6796 CF                           rst     $08
  82++6797 A0                           db      $A0
  83++6798 E1                           pop     hl                  // restore Instruction Pointer
  84++6799 DD E1                        pop     ix
  85++679B D5                           push    de
  86++679C C5                           push    bc
  87++679D 44                           ld      b, h                // restore Instruction Pointer
  88++679E 4D                           ld      c, l
  89++679F ED 62                        sbc     hl, hl
  90++67A1
  91++67A1                              psh1
  91++67A1 E5          >                push    hl
  91++67A2 DD E9       >                jp      (ix)
  92++67A4
  93++67A4              //  ______________________________________________________________________
  94++67A4              //
  95++67A4              // f_read       a b u -- n f
  96++67A4              // Read b bytes from file-handle u to address a
  97++67A4              // Return the actual number n of bytes read
  98++67A4              // Return 0 on success, True flag on error
  99++67A4                              New_Def F_READ, "F_READ", is_code, is_normal
  99++67A4             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  99++67A4             >
  99++67A4             >                // dummy db directives used to calculate length of namec
  99++67A4 46 5F 52 45 >                db      "F_READ"
  99++67A8 41 44       >
  99++67AA             >len_NFA         defl    $ - temp_NFA
  99++67AA             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  99++67A4             >
  99++67A4 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  99++67A5 46 5F 52 45 >                db      "F_READ"               // name string in 7-bit ascii, but
  99++67A9 41 44       >
  99++67AB             >                org     $-1                 // alter last byte of Name just above to set
  99++67AA C4          >                db      {b $} | END_BIT     // msb as name end
  99++67AB             >
  99++67AB 83 67       >                dw      last_NFA            // Link to previous definition Name
  99++67AD             >F_READ:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
  99++67AD ~           >                dw      runcode ; ok        // for primitive definitions  actual code
  99++67AD             >                else
  99++67AD AF 67       >                dw      $ + 2   ; ok        // is pointed by CFA
  99++67AF             >                endif           ; ok        // for other definitions it "points" the correct handler
  99++67AF             >                // Use of "; ok" to suppress "warning[fwdref]"
  99++67AF             >
  99++67AF             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 100++67AF
 101++67AF 50                           ld      d, b
 102++67B0 59                           ld      e, c
 103++67B1 E1                           pop     hl
 104++67B2 7D                           ld      a, l                // file-handle
 105++67B3 C1                           pop     bc                  // bc has bytes to read
 106++67B4 DD E3                        ex      (sp), ix            // ix has address
 107++67B6 D5                           push    de                  // Save Instruction pointer
 108++67B7 CF                           rst     $08
 109++67B8 9D                           db      $9D
 110++67B9              F_Read_Exit:
 111++67B9 C1                           pop     bc                  // Restore Instruction pointer
 112++67BA DD E1                        pop     ix                  // Restore ix
 113++67BC D5                           push    de                  // bytes written
 114++67BD ED 62                        sbc     hl, hl
 115++67BF
 116++67BF                              psh1
 116++67BF E5          >                push    hl
 116++67C0 DD E9       >                jp      (ix)
 117++67C2
 118++67C2              //  ______________________________________________________________________
 119++67C2              //
 120++67C2              // f_write      a b u -- n f
 121++67C2              // Write bytes currently stored at address a to file-handle u.
 122++67C2              // Return the actual n bytes written and 0 on success, True flag on error.
 123++67C2                              New_Def F_WRITE, "F_WRITE", is_code, is_normal
 123++67C2             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 123++67C2             >
 123++67C2             >                // dummy db directives used to calculate length of namec
 123++67C2 46 5F 57 52 >                db      "F_WRITE"
 123++67C6 49 54 45    >
 123++67C9             >len_NFA         defl    $ - temp_NFA
 123++67C9             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 123++67C2             >
 123++67C2 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 123++67C3 46 5F 57 52 >                db      "F_WRITE"               // name string in 7-bit ascii, but
 123++67C7 49 54 45    >
 123++67CA             >                org     $-1                 // alter last byte of Name just above to set
 123++67C9 C5          >                db      {b $} | END_BIT     // msb as name end
 123++67CA             >
 123++67CA A4 67       >                dw      last_NFA            // Link to previous definition Name
 123++67CC             >F_WRITE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 123++67CC ~           >                dw      runcode ; ok        // for primitive definitions  actual code
 123++67CC             >                else
 123++67CC CE 67       >                dw      $ + 2   ; ok        // is pointed by CFA
 123++67CE             >                endif           ; ok        // for other definitions it "points" the correct handler
 123++67CE             >                // Use of "; ok" to suppress "warning[fwdref]"
 123++67CE             >
 123++67CE             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 124++67CE
 125++67CE 50                           ld      d, b
 126++67CF 59                           ld      e, c
 127++67D0 E1                           pop     hl
 128++67D1 7D                           ld      a, l                // file-handle
 129++67D2 C1                           pop     bc                  // bc has bytes to read
 130++67D3 DD E3                        ex      (sp), ix            // ix has address
 131++67D5 D5                           push    de                  // Save Instruction pointer
 132++67D6 CF                           rst     $08
 133++67D7 9E                           db      $9E
 134++67D8 18 DF                        jr F_Read_Exit
 135++67DA              //              pop     bc                  // Restore Instruction pointer
 136++67DA              //              pop     ix                  // Restore ix
 137++67DA              //              push    de                  // bytes written
 138++67DA              //              sbc     hl, hl
 139++67DA              //
 140++67DA              //              psh1
 141++67DA
 142++67DA              //  ______________________________________________________________________
 143++67DA              //
 144++67DA              // f_open       a1 a2 b -- u f
 145++67DA              // open a file
 146++67DA              // a1 (filespec) is a null-terminated string, such as produced by ," definition
 147++67DA              // a2 is address to an 8-byte header data used in some cases.
 148++67DA              // b is access mode-byte, that is a combination of:
 149++67DA              // any/all of:
 150++67DA              //   esx_mode_read          $01 request read access
 151++67DA              //   esx_mode_write         $02 request write access
 152++67DA              //   esx_mode_use_header    $40 read/write +3DOS header
 153++67DA              // plus one of:
 154++67DA              //   esx_mode_open_exist    $00 only open existing file
 155++67DA              //   esx_mode_open_creat    $08 open existing or create file
 156++67DA              //   esx_mode_creat_noexist $04 create new file, error if exists
 157++67DA              //   esx_mode_creat_trunc   $0c create new file, delete existing
 158++67DA              // Return file-handle u and 0 on success, True flag on error
 159++67DA                              New_Def F_OPEN, "F_OPEN", is_code, is_normal
 159++67DA             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 159++67DA             >
 159++67DA             >                // dummy db directives used to calculate length of namec
 159++67DA 46 5F 4F 50 >                db      "F_OPEN"
 159++67DE 45 4E       >
 159++67E0             >len_NFA         defl    $ - temp_NFA
 159++67E0             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 159++67DA             >
 159++67DA 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 159++67DB 46 5F 4F 50 >                db      "F_OPEN"               // name string in 7-bit ascii, but
 159++67DF 45 4E       >
 159++67E1             >                org     $-1                 // alter last byte of Name just above to set
 159++67E0 CE          >                db      {b $} | END_BIT     // msb as name end
 159++67E1             >
 159++67E1 C2 67       >                dw      last_NFA            // Link to previous definition Name
 159++67E3             >F_OPEN:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 159++67E3 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
 159++67E3             >                else
 159++67E3 E5 67       >                dw      $ + 2   ; ok        // is pointed by CFA
 159++67E5             >                endif           ; ok        // for other definitions it "points" the correct handler
 159++67E5             >                // Use of "; ok" to suppress "warning[fwdref]"
 159++67E5             >
 159++67E5             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 160++67E5 60                           ld      h, b                // Save Instruction pointer
 161++67E6 69                           ld      l, c
 162++67E7 C1                           pop     bc                  // file-mode
 163++67E8 41                           ld      b, c                // file-mode
 164++67E9 D1                           pop     de                  // 8-bytes buffer if any
 165++67EA DD E3                        ex      (sp), ix            // filespec nul-terminated
 166++67EC E5                           push    hl                  // Save Instruction pointer
 167++67ED 3E 2A                        ld      a, "*"
 168++67EF CF                           rst     $08
 169++67F0 9A                           db      $9A
 170++67F1              F_Open_Exit:
 171++67F1 C1                           pop     bc
 172++67F2 DD E1                        pop     ix
 173++67F4 ED 62                        sbc     hl, hl
 174++67F6 5F                           ld      e, a
 175++67F7 16 00                        ld      d, 0
 176++67F9
 177++67F9
 178++67F9                              psh2
 178++67F9 D5          >                push    de
 178++67FA E5          >                push    hl
 178++67FB DD E9       >                jp      (ix)
 179++67FD
 180++67FD              //   \ CREATE FILENAME ," test.txt"   \ new Counted String
 181++67FD              //   \ FILENAME 1+ PAD 1 F_OPEN
 182++67FD              //   \ DROP
 183++67FD              //   \ F_CLOSE
 184++67FD
 185++67FD
 186++67FD              //  ______________________________________________________________________
 187++67FD              //
 188++67FD              // f_opendir    a1 a2 b -- u f
 189++67FD              // open a file
 190++67FD                              New_Def F_OPENDIR, "F_OPENDIR", is_code, is_normal
 190++67FD             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 190++67FD             >
 190++67FD             >                // dummy db directives used to calculate length of namec
 190++67FD 46 5F 4F 50 >                db      "F_OPENDIR"
 190++6801 45 4E 44 49 >
 190++6805 52          >
 190++6806             >len_NFA         defl    $ - temp_NFA
 190++6806             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 190++67FD             >
 190++67FD 89          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 190++67FE 46 5F 4F 50 >                db      "F_OPENDIR"               // name string in 7-bit ascii, but
 190++6802 45 4E 44 49 >
 190++6806 52          >
 190++6807             >                org     $-1                 // alter last byte of Name just above to set
 190++6806 D2          >                db      {b $} | END_BIT     // msb as name end
 190++6807             >
 190++6807 DA 67       >                dw      last_NFA            // Link to previous definition Name
 190++6809             >F_OPENDIR:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 190++6809 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
 190++6809             >                else
 190++6809 0B 68       >                dw      $ + 2   ; ok        // is pointed by CFA
 190++680B             >                endif           ; ok        // for other definitions it "points" the correct handler
 190++680B             >                // Use of "; ok" to suppress "warning[fwdref]"
 190++680B             >
 190++680B             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 191++680B DD E3                        ex      (sp), ix            // filespec nul-terminated
 192++680D C5                           push    bc                  // Save Instruction pointer
 193++680E 06 10                        ld      b, $10              // file-mode
 194++6810 3E 43                        ld      a, "C"
 195++6812 CF                           rst     $08
 196++6813 A3                           db      $A3
 197++6814 18 DB                        jr      F_Open_Exit
 198++6816
 199++6816
 200++6816              //  ______________________________________________________________________
 201++6816              //
 202++6816              // f_readdir    a1 a2 b -- u f
 203++6816              // open a file
 204++6816                              New_Def F_READDIR, "F_READDIR", is_code, is_normal
 204++6816             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 204++6816             >
 204++6816             >                // dummy db directives used to calculate length of namec
 204++6816 46 5F 52 45 >                db      "F_READDIR"
 204++681A 41 44 44 49 >
 204++681E 52          >
 204++681F             >len_NFA         defl    $ - temp_NFA
 204++681F             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 204++6816             >
 204++6816 89          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 204++6817 46 5F 52 45 >                db      "F_READDIR"               // name string in 7-bit ascii, but
 204++681B 41 44 44 49 >
 204++681F 52          >
 204++6820             >                org     $-1                 // alter last byte of Name just above to set
 204++681F D2          >                db      {b $} | END_BIT     // msb as name end
 204++6820             >
 204++6820 FD 67       >                dw      last_NFA            // Link to previous definition Name
 204++6822             >F_READDIR:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 204++6822 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
 204++6822             >                else
 204++6822 24 68       >                dw      $ + 2   ; ok        // is pointed by CFA
 204++6824             >                endif           ; ok        // for other definitions it "points" the correct handler
 204++6824             >                // Use of "; ok" to suppress "warning[fwdref]"
 204++6824             >
 204++6824             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 205++6824 E1                           pop     hl
 206++6825 7D                           ld      a, l
 207++6826 D1                           pop     de
 208++6827 DD E3                        ex      (sp), ix            // filespec nul-terminated
 209++6829 C5                           push    bc                  // Save Instruction pointer
 210++682A CF                           rst     $08
 211++682B A4                           db      $A4
 212++682C 18 C3                        jr      F_Open_Exit
 213++682E
# file closed: C:\Zx\CSpect\Projects\vForth15_INDIRECT/source/next-opt0.asm
 854+ 682E
 855+ 682E
 856+ 682E              //  ______________________________________________________________________
 857+ 682E              //
 858+ 682E              // cr           --
 859+ 682E              // send a CR via EMITC
 860+ 682E                              New_Def CR, "CR", is_code, is_normal
 860+ 682E             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 860+ 682E             >
 860+ 682E             >                // dummy db directives used to calculate length of namec
 860+ 682E 43 52       >                db      "CR"
 860+ 6830             >len_NFA         defl    $ - temp_NFA
 860+ 6830             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 860+ 682E             >
 860+ 682E 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 860+ 682F 43 52       >                db      "CR"               // name string in 7-bit ascii, but
 860+ 6831             >                org     $-1                 // alter last byte of Name just above to set
 860+ 6830 D2          >                db      {b $} | END_BIT     // msb as name end
 860+ 6831             >
 860+ 6831 16 68       >                dw      last_NFA            // Link to previous definition Name
 860+ 6833             >CR:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 860+ 6833 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
 860+ 6833             >                else
 860+ 6833 35 68       >                dw      $ + 2   ; ok        // is pointed by CFA
 860+ 6835             >                endif           ; ok        // for other definitions it "points" the correct handler
 860+ 6835             >                // Use of "; ok" to suppress "warning[fwdref]"
 860+ 6835             >
 860+ 6835             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 861+ 6835
 862+ 6835 3E 0D                        ld      a, CR_CHAR
 863+ 6837 C3 02 66                     jp      Emitc_Ptr
 864+ 683A
 865+ 683A              //  ______________________________________________________________________
 866+ 683A              //
 867+ 683A              // cmove    a1 a2 u --
 868+ 683A              // If u > 0, moves memory content starting at address a1 for n bytes long
 869+ 683A              // storing then starting at address addr2.
 870+ 683A              // The content of a1 is moved first. See CMOVE> also.
 871+ 683A                              New_Def CMOVE, "CMOVE", is_code, is_normal
 871+ 683A             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 871+ 683A             >
 871+ 683A             >                // dummy db directives used to calculate length of namec
 871+ 683A 43 4D 4F 56 >                db      "CMOVE"
 871+ 683E 45          >
 871+ 683F             >len_NFA         defl    $ - temp_NFA
 871+ 683F             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 871+ 683A             >
 871+ 683A 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 871+ 683B 43 4D 4F 56 >                db      "CMOVE"               // name string in 7-bit ascii, but
 871+ 683F 45          >
 871+ 6840             >                org     $-1                 // alter last byte of Name just above to set
 871+ 683F C5          >                db      {b $} | END_BIT     // msb as name end
 871+ 6840             >
 871+ 6840 2E 68       >                dw      last_NFA            // Link to previous definition Name
 871+ 6842             >CMOVE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 871+ 6842 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
 871+ 6842             >                else
 871+ 6842 44 68       >                dw      $ + 2   ; ok        // is pointed by CFA
 871+ 6844             >                endif           ; ok        // for other definitions it "points" the correct handler
 871+ 6844             >                // Use of "; ok" to suppress "warning[fwdref]"
 871+ 6844             >
 871+ 6844             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 872+ 6844 D9                           exx
 873+ 6845 C1                           pop     bc                  // bc has counter
 874+ 6846 D1                           pop     de                  // de now has dest
 875+ 6847 E1                           pop     hl                  // hl has source, save Instruction Pointer
 876+ 6848 78                           ld      a, b
 877+ 6849 B1                           or      c
 878+ 684A 28 02                        jr      z, Cmove_NoMove
 879+ 684C ED B0                            ldir
 880+ 684E              Cmove_NoMove:
 881+ 684E D9                           exx
 882+ 684F                              next
 882+ 684F DD E9       >                jp      (ix)
 883+ 6851
 884+ 6851              //  ______________________________________________________________________
 885+ 6851              //
 886+ 6851              // cmove>    a1 a2 u --
 887+ 6851              // If u > 0, moves memory content starting at address a1 for n bytes long
 888+ 6851              // storing then starting at address addr2.
 889+ 6851              // The content of a1 is moved last. See cmove.
 890+ 6851                              New_Def CMOVE_TO, "CMOVE>", is_code, is_normal
 890+ 6851             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 890+ 6851             >
 890+ 6851             >                // dummy db directives used to calculate length of namec
 890+ 6851 43 4D 4F 56 >                db      "CMOVE>"
 890+ 6855 45 3E       >
 890+ 6857             >len_NFA         defl    $ - temp_NFA
 890+ 6857             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 890+ 6851             >
 890+ 6851 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 890+ 6852 43 4D 4F 56 >                db      "CMOVE>"               // name string in 7-bit ascii, but
 890+ 6856 45 3E       >
 890+ 6858             >                org     $-1                 // alter last byte of Name just above to set
 890+ 6857 BE          >                db      {b $} | END_BIT     // msb as name end
 890+ 6858             >
 890+ 6858 3A 68       >                dw      last_NFA            // Link to previous definition Name
 890+ 685A             >CMOVE_TO:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 890+ 685A ~           >                dw      runcode ; ok        // for primitive definitions  actual code
 890+ 685A             >                else
 890+ 685A 5C 68       >                dw      $ + 2   ; ok        // is pointed by CFA
 890+ 685C             >                endif           ; ok        // for other definitions it "points" the correct handler
 890+ 685C             >                // Use of "; ok" to suppress "warning[fwdref]"
 890+ 685C             >
 890+ 685C             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 891+ 685C D9                           exx
 892+ 685D C1                           pop     bc                  // bc has counter
 893+ 685E D1                           pop     de                  // de has dest
 894+ 685F E1                           pop     hl                  // hl has source, save Instruction Pointer
 895+ 6860 78                           ld      a, b
 896+ 6861 B1                           or      c
 897+ 6862 28 08                        jr      z, CmoveV_NoMove
 898+ 6864 EB                               ex      de, hl              // compute address to
 899+ 6865 09                               add     hl, bc              // operate backward
 900+ 6866 2B                               dec     hl
 901+ 6867 EB                               ex      de, hl
 902+ 6868 09                               add     hl, bc
 903+ 6869 2B                               dec     hl
 904+ 686A ED B8                            lddr                        // backward
 905+ 686C              CmoveV_NoMove:
 906+ 686C D9                           exx
 907+ 686D                              next
 907+ 686D DD E9       >                jp      (ix)
 908+ 686F
 909+ 686F              //  ______________________________________________________________________
 910+ 686F              //
 911+ 686F              // um*      u1 u2 -- ud
 912+ 686F              // Unsigned multiplication
 913+ 686F              // A double-integer is kept in CPU registers as DEHL then pushed on stack.
 914+ 686F              // On the stack a double number is treated as two single numbers
 915+ 686F              // where DE is on the top of the stack and HL is the second from top,
 916+ 686F              // Instead, in 2VARIABLE a double number is stored as EDLH.
 917+ 686F              // this definition could use "MUL" Z80N new op-code.
 918+ 686F                              New_Def UM_MUL, "UM*", is_code, is_normal
 918+ 686F             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 918+ 686F             >
 918+ 686F             >                // dummy db directives used to calculate length of namec
 918+ 686F 55 4D 2A    >                db      "UM*"
 918+ 6872             >len_NFA         defl    $ - temp_NFA
 918+ 6872             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 918+ 686F             >
 918+ 686F 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 918+ 6870 55 4D 2A    >                db      "UM*"               // name string in 7-bit ascii, but
 918+ 6873             >                org     $-1                 // alter last byte of Name just above to set
 918+ 6872 AA          >                db      {b $} | END_BIT     // msb as name end
 918+ 6873             >
 918+ 6873 51 68       >                dw      last_NFA            // Link to previous definition Name
 918+ 6875             >UM_MUL:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 918+ 6875 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
 918+ 6875             >                else
 918+ 6875 77 68       >                dw      $ + 2   ; ok        // is pointed by CFA
 918+ 6877             >                endif           ; ok        // for other definitions it "points" the correct handler
 918+ 6877             >                // Use of "; ok" to suppress "warning[fwdref]"
 918+ 6877             >
 918+ 6877             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 919+ 6877 D9                           exx
 920+ 6878 D1                           pop     de                    // de has u2 operand
 921+ 6879 E1                           pop     hl                    // hl has u1 operand
 922+ 687A 45                           ld      b, l
 923+ 687B 4B                           ld      c, e
 924+ 687C 5D                           ld      e, l
 925+ 687D 6A                           ld      l, d
 926+ 687E E5                           push    hl
 927+ 687F 69                           ld      l, c
 928+ 6880 ED 30                        mul
 929+ 6882 EB                           ex      de, hl
 930+ 6883 ED 30                        mul
 931+ 6885 AF                           xor     a
 932+ 6886 19                           add     hl, de
 933+ 6887 8F                           adc     a
 934+ 6888 59                           ld      e, c
 935+ 6889 50                           ld      d, b
 936+ 688A ED 30                        mul
 937+ 688C 47                           ld      b, a
 938+ 688D 4C                           ld      c, h
 939+ 688E 7A                           ld      a, d
 940+ 688F 85                           add     l
 941+ 6890 67                           ld      h, a
 942+ 6891 6B                           ld      l, e
 943+ 6892 D1                           pop     de
 944+ 6893 ED 30                        mul
 945+ 6895 EB                           ex      de, hl
 946+ 6896 ED 4A                        adc     hl, bc
 947+ 6898 D5                           push    de
 948+ 6899 E5                           push    hl
 949+ 689A D9                           exx
 950+ 689B                              next
 950+ 689B DD E9       >                jp      (ix)
 951+ 689D
 952+ 689D              //  ______________________________________________________________________
 953+ 689D              //
 954+ 689D              // um/mod      ud u1 -- q r
 955+ 689D              // divides ud into u1 giving quotient q and remainder r
 956+ 689D              // algorithm takes 16 bit at a time starting from msb
 957+ 689D              // DE grows from lsb upward with quotient result
 958+ 689D              // HL keeps the remainder at each stage of division
 959+ 689D              // each loop 'lowers' the next binary digit to form the current dividend
 960+ 689D                              New_Def UMDIVMOD, "UM/MOD", is_code, is_normal
 960+ 689D             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 960+ 689D             >
 960+ 689D             >                // dummy db directives used to calculate length of namec
 960+ 689D 55 4D 2F 4D >                db      "UM/MOD"
 960+ 68A1 4F 44       >
 960+ 68A3             >len_NFA         defl    $ - temp_NFA
 960+ 68A3             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 960+ 689D             >
 960+ 689D 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 960+ 689E 55 4D 2F 4D >                db      "UM/MOD"               // name string in 7-bit ascii, but
 960+ 68A2 4F 44       >
 960+ 68A4             >                org     $-1                 // alter last byte of Name just above to set
 960+ 68A3 C4          >                db      {b $} | END_BIT     // msb as name end
 960+ 68A4             >
 960+ 68A4 6F 68       >                dw      last_NFA            // Link to previous definition Name
 960+ 68A6             >UMDIVMOD:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 960+ 68A6 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
 960+ 68A6             >                else
 960+ 68A6 A8 68       >                dw      $ + 2   ; ok        // is pointed by CFA
 960+ 68A8             >                endif           ; ok        // for other definitions it "points" the correct handler
 960+ 68A8             >                // Use of "; ok" to suppress "warning[fwdref]"
 960+ 68A8             >
 960+ 68A8             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 961+ 68A8 D9                           exx
 962+ 68A9 C1                           pop     bc                      // divisor
 963+ 68AA
 964+ 68AA E1                           pop     hl                      // < high part
 965+ 68AB D1                           pop     de                      // < low part and
 966+ 68AC
 967+ 68AC 7D                           ld      a, l                    // check without changing arguments
 968+ 68AD 91                           sub     c                       // if divisor is greater than high part
 969+ 68AE 7C                           ld      a, h                    // so quotient will be in range
 970+ 68AF 98                           sbc     a, b
 971+ 68B0 30 23                        jr      nc, Um_DivMod_OutOfRange
 972+ 68B2 3E 10                            ld      a, 16
 973+ 68B4              Um_DivMod_Loop:
 974+ 68B4 A7                                   and     a
 975+ 68B5 CB 13                                rl      e
 976+ 68B7 CB 12                                rl      d
 977+ 68B9 CB 15                                rl      l
 978+ 68BB CB 14                                rl      h
 979+ 68BD 30 05                                jr      nc, Um_DivMod_Carry
 980+ 68BF A7                                       and     a
 981+ 68C0 ED 42                                    sbc     hl, bc
 982+ 68C2 18 07                                jr      Um_DivMod_Endif    // else
 983+ 68C4              Um_DivMod_Carry:
 984+ 68C4 A7                                       and     a
 985+ 68C5 ED 42                                    sbc     hl, bc
 986+ 68C7 30 02                                    jr      nc, Um_DivMod_Endif
 987+ 68C9 09                                           add     hl, bc
 988+ 68CA 1B                                           dec     de
 989+ 68CB              Um_DivMod_Endif:                                   // endif
 990+ 68CB 13                                   inc     de
 991+ 68CC 3D                                   dec     a
 992+ 68CD 20 E5                            jr      nz, Um_DivMod_Loop
 993+ 68CF EB                               ex      de, hl
 994+ 68D0              Um_DivMod_Bailout:
 995+ 68D0 D5                               push    de                  // de := remanider
 996+ 68D1 E5                               push    hl                  // hl := quotient
 997+ 68D2 D9                               exx
 998+ 68D3                                  next
 998+ 68D3 DD E9       >                jp      (ix)
 999+ 68D5
1000+ 68D5              Um_DivMod_OutOfRange:
1001+ 68D5 21 FF FF                     ld      hl, -1
1002+ 68D8 54                           ld      d, h
1003+ 68D9 5D                           ld      e, l
1004+ 68DA 18 F4                        jr      Um_DivMod_Bailout
1005+ 68DC
1006+ 68DC              //  ______________________________________________________________________
1007+ 68DC              //
1008+ 68DC              // and          n1 n2 -- n3
1009+ 68DC              // bit logical AND. Returns n3 as n1 & n2
1010+ 68DC                              New_Def AND_OP, "AND", is_code, is_normal
1010+ 68DC             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1010+ 68DC             >
1010+ 68DC             >                // dummy db directives used to calculate length of namec
1010+ 68DC 41 4E 44    >                db      "AND"
1010+ 68DF             >len_NFA         defl    $ - temp_NFA
1010+ 68DF             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1010+ 68DC             >
1010+ 68DC 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1010+ 68DD 41 4E 44    >                db      "AND"               // name string in 7-bit ascii, but
1010+ 68E0             >                org     $-1                 // alter last byte of Name just above to set
1010+ 68DF C4          >                db      {b $} | END_BIT     // msb as name end
1010+ 68E0             >
1010+ 68E0 9D 68       >                dw      last_NFA            // Link to previous definition Name
1010+ 68E2             >AND_OP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1010+ 68E2 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1010+ 68E2             >                else
1010+ 68E2 E4 68       >                dw      $ + 2   ; ok        // is pointed by CFA
1010+ 68E4             >                endif           ; ok        // for other definitions it "points" the correct handler
1010+ 68E4             >                // Use of "; ok" to suppress "warning[fwdref]"
1010+ 68E4             >
1010+ 68E4             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1011+ 68E4 D1                           pop     de
1012+ 68E5 E1                           pop     hl
1013+ 68E6 7B                           ld      a, e
1014+ 68E7 A5                           and     l
1015+ 68E8 6F                           ld      l, a
1016+ 68E9 7A                           ld      a, d
1017+ 68EA A4                           and     h
1018+ 68EB 67                           ld      h, a
1019+ 68EC
1020+ 68EC                              psh1
1020+ 68EC E5          >                push    hl
1020+ 68ED DD E9       >                jp      (ix)
1021+ 68EF
1022+ 68EF              //  ______________________________________________________________________
1023+ 68EF              //
1024+ 68EF              // or           n1 n2 -- n3
1025+ 68EF              // bit logical OR. Returns n3 as n1 | n2
1026+ 68EF                              New_Def OR_OP, "OR", is_code, is_normal
1026+ 68EF             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1026+ 68EF             >
1026+ 68EF             >                // dummy db directives used to calculate length of namec
1026+ 68EF 4F 52       >                db      "OR"
1026+ 68F1             >len_NFA         defl    $ - temp_NFA
1026+ 68F1             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1026+ 68EF             >
1026+ 68EF 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1026+ 68F0 4F 52       >                db      "OR"               // name string in 7-bit ascii, but
1026+ 68F2             >                org     $-1                 // alter last byte of Name just above to set
1026+ 68F1 D2          >                db      {b $} | END_BIT     // msb as name end
1026+ 68F2             >
1026+ 68F2 DC 68       >                dw      last_NFA            // Link to previous definition Name
1026+ 68F4             >OR_OP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1026+ 68F4 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1026+ 68F4             >                else
1026+ 68F4 F6 68       >                dw      $ + 2   ; ok        // is pointed by CFA
1026+ 68F6             >                endif           ; ok        // for other definitions it "points" the correct handler
1026+ 68F6             >                // Use of "; ok" to suppress "warning[fwdref]"
1026+ 68F6             >
1026+ 68F6             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1027+ 68F6 D1                           pop     de
1028+ 68F7 E1                           pop     hl
1029+ 68F8 7B                           ld      a, e
1030+ 68F9 B5                           or      l
1031+ 68FA 6F                           ld      l, a
1032+ 68FB 7A                           ld      a, d
1033+ 68FC B4                           or      h
1034+ 68FD 67                           ld      h, a
1035+ 68FE
1036+ 68FE                              psh1
1036+ 68FE E5          >                push    hl
1036+ 68FF DD E9       >                jp      (ix)
1037+ 6901
1038+ 6901              //  ______________________________________________________________________
1039+ 6901              //
1040+ 6901              // xor          n1 n2 -- n3
1041+ 6901              // bit logical OR. Returns n3 as n1 ^ n2
1042+ 6901                              New_Def XOR_OP, "XOR", is_code, is_normal
1042+ 6901             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1042+ 6901             >
1042+ 6901             >                // dummy db directives used to calculate length of namec
1042+ 6901 58 4F 52    >                db      "XOR"
1042+ 6904             >len_NFA         defl    $ - temp_NFA
1042+ 6904             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1042+ 6901             >
1042+ 6901 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1042+ 6902 58 4F 52    >                db      "XOR"               // name string in 7-bit ascii, but
1042+ 6905             >                org     $-1                 // alter last byte of Name just above to set
1042+ 6904 D2          >                db      {b $} | END_BIT     // msb as name end
1042+ 6905             >
1042+ 6905 EF 68       >                dw      last_NFA            // Link to previous definition Name
1042+ 6907             >XOR_OP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1042+ 6907 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1042+ 6907             >                else
1042+ 6907 09 69       >                dw      $ + 2   ; ok        // is pointed by CFA
1042+ 6909             >                endif           ; ok        // for other definitions it "points" the correct handler
1042+ 6909             >                // Use of "; ok" to suppress "warning[fwdref]"
1042+ 6909             >
1042+ 6909             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1043+ 6909 D1                           pop     de
1044+ 690A E1                           pop     hl
1045+ 690B 7B                           ld      a, e
1046+ 690C AD                           xor     l
1047+ 690D 6F                           ld      l, a
1048+ 690E 7A                           ld      a, d
1049+ 690F AC                           xor     h
1050+ 6910 67                           ld      h, a
1051+ 6911
1052+ 6911                              psh1
1052+ 6911 E5          >                push    hl
1052+ 6912 DD E9       >                jp      (ix)
1053+ 6914
1054+ 6914              //  ______________________________________________________________________
1055+ 6914              //
1056+ 6914              // sp@      -- a
1057+ 6914              // returns on top of stack the value of SP before execution
1058+ 6914                              New_Def SPFETCH, "SP@", is_code, is_normal
1058+ 6914             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1058+ 6914             >
1058+ 6914             >                // dummy db directives used to calculate length of namec
1058+ 6914 53 50 40    >                db      "SP@"
1058+ 6917             >len_NFA         defl    $ - temp_NFA
1058+ 6917             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1058+ 6914             >
1058+ 6914 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1058+ 6915 53 50 40    >                db      "SP@"               // name string in 7-bit ascii, but
1058+ 6918             >                org     $-1                 // alter last byte of Name just above to set
1058+ 6917 C0          >                db      {b $} | END_BIT     // msb as name end
1058+ 6918             >
1058+ 6918 01 69       >                dw      last_NFA            // Link to previous definition Name
1058+ 691A             >SPFETCH:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1058+ 691A ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1058+ 691A             >                else
1058+ 691A 1C 69       >                dw      $ + 2   ; ok        // is pointed by CFA
1058+ 691C             >                endif           ; ok        // for other definitions it "points" the correct handler
1058+ 691C             >                // Use of "; ok" to suppress "warning[fwdref]"
1058+ 691C             >
1058+ 691C             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1059+ 691C
1060+ 691C 21 00 00                     ld      hl, 0
1061+ 691F 39                           add     hl, sp
1062+ 6920
1063+ 6920                              psh1
1063+ 6920 E5          >                push    hl
1063+ 6921 DD E9       >                jp      (ix)
1064+ 6923
1065+ 6923              //  ______________________________________________________________________
1066+ 6923              //
1067+ 6923              // sp!      a --
1068+ 6923              // restore SP to the initial value passed
1069+ 6923              // normally it is S0, i.e. the word at offset 6 and 7 of user variabiles area.
1070+ 6923                              New_Def SPSTORE, "SP!", is_code, is_normal
1070+ 6923             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1070+ 6923             >
1070+ 6923             >                // dummy db directives used to calculate length of namec
1070+ 6923 53 50 21    >                db      "SP!"
1070+ 6926             >len_NFA         defl    $ - temp_NFA
1070+ 6926             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1070+ 6923             >
1070+ 6923 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1070+ 6924 53 50 21    >                db      "SP!"               // name string in 7-bit ascii, but
1070+ 6927             >                org     $-1                 // alter last byte of Name just above to set
1070+ 6926 A1          >                db      {b $} | END_BIT     // msb as name end
1070+ 6927             >
1070+ 6927 14 69       >                dw      last_NFA            // Link to previous definition Name
1070+ 6929             >SPSTORE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1070+ 6929 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1070+ 6929             >                else
1070+ 6929 2B 69       >                dw      $ + 2   ; ok        // is pointed by CFA
1070+ 692B             >                endif           ; ok        // for other definitions it "points" the correct handler
1070+ 692B             >                // Use of "; ok" to suppress "warning[fwdref]"
1070+ 692B             >
1070+ 692B             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1071+ 692B E1                           pop     hl
1072+ 692C F9                           ld      sp, hl
1073+ 692D
1074+ 692D                              next
1074+ 692D DD E9       >                jp      (ix)
1075+ 692F
1076+ 692F              //  ______________________________________________________________________
1077+ 692F              //
1078+ 692F              // rp@      -- a
1079+ 692F              // returns on top of stack the value of Return-Pointer
1080+ 692F                              New_Def RPFETCH, "RP@", is_code, is_normal
1080+ 692F             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1080+ 692F             >
1080+ 692F             >                // dummy db directives used to calculate length of namec
1080+ 692F 52 50 40    >                db      "RP@"
1080+ 6932             >len_NFA         defl    $ - temp_NFA
1080+ 6932             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1080+ 692F             >
1080+ 692F 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1080+ 6930 52 50 40    >                db      "RP@"               // name string in 7-bit ascii, but
1080+ 6933             >                org     $-1                 // alter last byte of Name just above to set
1080+ 6932 C0          >                db      {b $} | END_BIT     // msb as name end
1080+ 6933             >
1080+ 6933 23 69       >                dw      last_NFA            // Link to previous definition Name
1080+ 6935             >RPFETCH:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1080+ 6935 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1080+ 6935             >                else
1080+ 6935 37 69       >                dw      $ + 2   ; ok        // is pointed by CFA
1080+ 6937             >                endif           ; ok        // for other definitions it "points" the correct handler
1080+ 6937             >                // Use of "; ok" to suppress "warning[fwdref]"
1080+ 6937             >
1080+ 6937             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1081+ 6937
1082+ 6937                              ldhlrp
1082+ 6937 2A 96 63    >                ld      hl,(RP_Pointer)
1083+ 693A
1084+ 693A                              psh1
1084+ 693A E5          >                push    hl
1084+ 693B DD E9       >                jp      (ix)
1085+ 693D
1086+ 693D              //  ______________________________________________________________________
1087+ 693D              //
1088+ 693D              // rp!      a --
1089+ 693D              // restore RP to the initial value passed
1090+ 693D              // normally it is R0 @, i.e. the word at offset 8 of user variabiles area.
1091+ 693D                              New_Def RPSTORE, "RP!", is_code, is_normal
1091+ 693D             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1091+ 693D             >
1091+ 693D             >                // dummy db directives used to calculate length of namec
1091+ 693D 52 50 21    >                db      "RP!"
1091+ 6940             >len_NFA         defl    $ - temp_NFA
1091+ 6940             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1091+ 693D             >
1091+ 693D 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1091+ 693E 52 50 21    >                db      "RP!"               // name string in 7-bit ascii, but
1091+ 6941             >                org     $-1                 // alter last byte of Name just above to set
1091+ 6940 A1          >                db      {b $} | END_BIT     // msb as name end
1091+ 6941             >
1091+ 6941 2F 69       >                dw      last_NFA            // Link to previous definition Name
1091+ 6943             >RPSTORE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1091+ 6943 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1091+ 6943             >                else
1091+ 6943 45 69       >                dw      $ + 2   ; ok        // is pointed by CFA
1091+ 6945             >                endif           ; ok        // for other definitions it "points" the correct handler
1091+ 6945             >                // Use of "; ok" to suppress "warning[fwdref]"
1091+ 6945             >
1091+ 6945             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1092+ 6945 E1                           pop     hl
1093+ 6946                              ldrphl
1093+ 6946 22 96 63    >                ld      (RP_Pointer),hl
1094+ 6949
1095+ 6949                              next
1095+ 6949 DD E9       >                jp      (ix)
1096+ 694B
1097+ 694B              //  ______________________________________________________________________
1098+ 694B              //
1099+ 694B              // exit      --
1100+ 694B              // exits back to the caller word
1101+ 694B                              New_Def EXIT, "EXIT", is_code, is_normal
1101+ 694B             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1101+ 694B             >
1101+ 694B             >                // dummy db directives used to calculate length of namec
1101+ 694B 45 58 49 54 >                db      "EXIT"
1101+ 694F             >len_NFA         defl    $ - temp_NFA
1101+ 694F             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1101+ 694B             >
1101+ 694B 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1101+ 694C 45 58 49 54 >                db      "EXIT"               // name string in 7-bit ascii, but
1101+ 6950             >                org     $-1                 // alter last byte of Name just above to set
1101+ 694F D4          >                db      {b $} | END_BIT     // msb as name end
1101+ 6950             >
1101+ 6950 3D 69       >                dw      last_NFA            // Link to previous definition Name
1101+ 6952             >EXIT:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1101+ 6952 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1101+ 6952             >                else
1101+ 6952 54 69       >                dw      $ + 2   ; ok        // is pointed by CFA
1101+ 6954             >                endif           ; ok        // for other definitions it "points" the correct handler
1101+ 6954             >                // Use of "; ok" to suppress "warning[fwdref]"
1101+ 6954             >
1101+ 6954             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1102+ 6954                              ldhlrp                      // Get Return Stack Pointer
1102+ 6954 2A 96 63    >                ld      hl,(RP_Pointer)
1103+ 6957 4E                           ld      c, (hl)             // pop Instruction Pointer
1104+ 6958 23                           inc     hl                  // from Return Stack
1105+ 6959 46                           ld      b, (hl)
1106+ 695A 23                           inc     hl
1107+ 695B                              ldrphl                      // Set Return Stack Pointer
1107+ 695B 22 96 63    >                ld      (RP_Pointer),hl
1108+ 695E                              next
1108+ 695E DD E9       >                jp      (ix)
1109+ 6960
1110+ 6960              //  ______________________________________________________________________
1111+ 6960              //
1112+ 6960              // lastl      --
1113+ 6960              // exits back to the caller word
1114+ 6960              //              New_Def EXIT, "LASTL", is_code, is_normal
1115+ 6960              //              ldhlrp                      // Get Return Stack Pointer
1116+ 6960              //              ld      e, (hl)             // pop Instruction Pointer
1117+ 6960              //              inc     hl                  // from Return Stack
1118+ 6960              //              ld      d, (hl)
1119+ 6960              //              inc     hl
1120+ 6960              //              ld      (hl), e
1121+ 6960              //              inc     hl
1122+ 6960              //              ld      (hl), d
1123+ 6960              //              next
1124+ 6960
1125+ 6960              //  ______________________________________________________________________
1126+ 6960              //
1127+ 6960              // (leave)        --
1128+ 6960              // compiled by LEAVE
1129+ 6960              // this forces to exit from loop and jump past
1130+ 6960                              New_Def C_LEAVE, "(LEAVE)", is_code, is_normal
1130+ 6960             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1130+ 6960             >
1130+ 6960             >                // dummy db directives used to calculate length of namec
1130+ 6960 28 4C 45 41 >                db      "(LEAVE)"
1130+ 6964 56 45 29    >
1130+ 6967             >len_NFA         defl    $ - temp_NFA
1130+ 6967             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1130+ 6960             >
1130+ 6960 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1130+ 6961 28 4C 45 41 >                db      "(LEAVE)"               // name string in 7-bit ascii, but
1130+ 6965 56 45 29    >
1130+ 6968             >                org     $-1                 // alter last byte of Name just above to set
1130+ 6967 A9          >                db      {b $} | END_BIT     // msb as name end
1130+ 6968             >
1130+ 6968 4B 69       >                dw      last_NFA            // Link to previous definition Name
1130+ 696A             >C_LEAVE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1130+ 696A ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1130+ 696A             >                else
1130+ 696A 6C 69       >                dw      $ + 2   ; ok        // is pointed by CFA
1130+ 696C             >                endif           ; ok        // for other definitions it "points" the correct handler
1130+ 696C             >                // Use of "; ok" to suppress "warning[fwdref]"
1130+ 696C             >
1130+ 696C             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1131+ 696C
1132+ 696C                              ldhlrp
1132+ 696C 2A 96 63    >                ld      hl,(RP_Pointer)
1133+ 696F 11 04 00                     ld      de, 4
1134+ 6972 19                           add     hl, de
1135+ 6973                              ldrphl
1135+ 6973 22 96 63    >                ld      (RP_Pointer),hl
1136+ 6976
1137+ 6976 C3 CE 63                     jp      Branch_Ptr       // perform branch consuming following cell
1138+ 6979                              next
1138+ 6979 DD E9       >                jp      (ix)
1139+ 697B
1140+ 697B              //  ______________________________________________________________________
1141+ 697B              //
1142+ 697B              // >r      n --
1143+ 697B              // pop from calculator-stack and push into return-stack
1144+ 697B                              New_Def TO_R, ">R", is_code, is_normal
1144+ 697B             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1144+ 697B             >
1144+ 697B             >                // dummy db directives used to calculate length of namec
1144+ 697B 3E 52       >                db      ">R"
1144+ 697D             >len_NFA         defl    $ - temp_NFA
1144+ 697D             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1144+ 697B             >
1144+ 697B 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1144+ 697C 3E 52       >                db      ">R"               // name string in 7-bit ascii, but
1144+ 697E             >                org     $-1                 // alter last byte of Name just above to set
1144+ 697D D2          >                db      {b $} | END_BIT     // msb as name end
1144+ 697E             >
1144+ 697E 60 69       >                dw      last_NFA            // Link to previous definition Name
1144+ 6980             >TO_R:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1144+ 6980 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1144+ 6980             >                else
1144+ 6980 82 69       >                dw      $ + 2   ; ok        // is pointed by CFA
1144+ 6982             >                endif           ; ok        // for other definitions it "points" the correct handler
1144+ 6982             >                // Use of "; ok" to suppress "warning[fwdref]"
1144+ 6982             >
1144+ 6982             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1145+ 6982 D1                           pop     de
1146+ 6983                              ldhlrp
1146+ 6983 2A 96 63    >                ld      hl,(RP_Pointer)
1147+ 6986 2B                           dec     hl
1148+ 6987 72                           ld      (hl), d             // store current TOS
1149+ 6988 2B                           dec     hl                  // to Return Stack
1150+ 6989 73                           ld      (hl), e
1151+ 698A                              ldrphl
1151+ 698A 22 96 63    >                ld      (RP_Pointer),hl
1152+ 698D
1153+ 698D                              next
1153+ 698D DD E9       >                jp      (ix)
1154+ 698F
1155+ 698F              //  ______________________________________________________________________
1156+ 698F              //
1157+ 698F              // r>      -- n
1158+ 698F              // pop from return-stack and push into calculator-stack
1159+ 698F                              New_Def R_TO, "R>", is_code, is_normal
1159+ 698F             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1159+ 698F             >
1159+ 698F             >                // dummy db directives used to calculate length of namec
1159+ 698F 52 3E       >                db      "R>"
1159+ 6991             >len_NFA         defl    $ - temp_NFA
1159+ 6991             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1159+ 698F             >
1159+ 698F 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1159+ 6990 52 3E       >                db      "R>"               // name string in 7-bit ascii, but
1159+ 6992             >                org     $-1                 // alter last byte of Name just above to set
1159+ 6991 BE          >                db      {b $} | END_BIT     // msb as name end
1159+ 6992             >
1159+ 6992 7B 69       >                dw      last_NFA            // Link to previous definition Name
1159+ 6994             >R_TO:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1159+ 6994 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1159+ 6994             >                else
1159+ 6994 96 69       >                dw      $ + 2   ; ok        // is pointed by CFA
1159+ 6996             >                endif           ; ok        // for other definitions it "points" the correct handler
1159+ 6996             >                // Use of "; ok" to suppress "warning[fwdref]"
1159+ 6996             >
1159+ 6996             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1160+ 6996
1161+ 6996                              ldhlrp
1161+ 6996 2A 96 63    >                ld      hl,(RP_Pointer)
1162+ 6999 5E                           ld      e, (hl)             // retrieve from Return Stack
1163+ 699A 23                           inc     hl
1164+ 699B 56                           ld      d, (hl)
1165+ 699C 23                           inc     hl
1166+ 699D                              ldrphl
1166+ 699D 22 96 63    >                ld      (RP_Pointer),hl
1167+ 69A0 D5                           push    de
1168+ 69A1                              next
1168+ 69A1 DD E9       >                jp      (ix)
1169+ 69A3
1170+ 69A3              //  ______________________________________________________________________
1171+ 69A3              //
1172+ 69A3              // r            -- n
1173+ 69A3              // return on top of stack the value of top of return-stack
1174+ 69A3              // Since this is the same as I, we alter R's CFA to jump there
1175+ 69A3                              New_Def R_OP, "R@", I_Ptr, is_normal
1175+ 69A3             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1175+ 69A3             >
1175+ 69A3             >                // dummy db directives used to calculate length of namec
1175+ 69A3 52 40       >                db      "R@"
1175+ 69A5             >len_NFA         defl    $ - temp_NFA
1175+ 69A5             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1175+ 69A3             >
1175+ 69A3 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1175+ 69A4 52 40       >                db      "R@"               // name string in 7-bit ascii, but
1175+ 69A6             >                org     $-1                 // alter last byte of Name just above to set
1175+ 69A5 C0          >                db      {b $} | END_BIT     // msb as name end
1175+ 69A6             >
1175+ 69A6 8F 69       >                dw      last_NFA            // Link to previous definition Name
1175+ 69A8             >R_OP:          if I_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1175+ 69A8 7D 64       >                dw      I_Ptr ; ok        // for primitive definitions  actual code
1175+ 69AA             >                else
1175+ 69AA ~           >                dw      $ + 2   ; ok        // is pointed by CFA
1175+ 69AA             >                endif           ; ok        // for other definitions it "points" the correct handler
1175+ 69AA             >                // Use of "; ok" to suppress "warning[fwdref]"
1175+ 69AA             >
1175+ 69AA             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1176+ 69AA
1177+ 69AA              //  ______________________________________________________________________
1178+ 69AA              //
1179+ 69AA              // r            -- n
1180+ 69AA              // return on top of stack the value of top of return-stack
1181+ 69AA              // Since this is the same as I, we alter R's CFA to jump there
1182+ 69AA                              New_Def R_OLD, "R", I_Ptr, is_normal
1182+ 69AA             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1182+ 69AA             >
1182+ 69AA             >                // dummy db directives used to calculate length of namec
1182+ 69AA 52          >                db      "R"
1182+ 69AB             >len_NFA         defl    $ - temp_NFA
1182+ 69AB             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1182+ 69AA             >
1182+ 69AA 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1182+ 69AB 52          >                db      "R"               // name string in 7-bit ascii, but
1182+ 69AC             >                org     $-1                 // alter last byte of Name just above to set
1182+ 69AB D2          >                db      {b $} | END_BIT     // msb as name end
1182+ 69AC             >
1182+ 69AC A3 69       >                dw      last_NFA            // Link to previous definition Name
1182+ 69AE             >R_OLD:          if I_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1182+ 69AE 7D 64       >                dw      I_Ptr ; ok        // for primitive definitions  actual code
1182+ 69B0             >                else
1182+ 69B0 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
1182+ 69B0             >                endif           ; ok        // for other definitions it "points" the correct handler
1182+ 69B0             >                // Use of "; ok" to suppress "warning[fwdref]"
1182+ 69B0             >
1182+ 69B0             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1183+ 69B0
1184+ 69B0              //  ______________________________________________________________________
1185+ 69B0              //
1186+ 69B0              // 0=           n -- f
1187+ 69B0              // true (non zero) if n is zero, false (0) elsewere
1188+ 69B0                              New_Def ZEQUAL, "0=", is_code, is_normal
1188+ 69B0             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1188+ 69B0             >
1188+ 69B0             >                // dummy db directives used to calculate length of namec
1188+ 69B0 30 3D       >                db      "0="
1188+ 69B2             >len_NFA         defl    $ - temp_NFA
1188+ 69B2             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1188+ 69B0             >
1188+ 69B0 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1188+ 69B1 30 3D       >                db      "0="               // name string in 7-bit ascii, but
1188+ 69B3             >                org     $-1                 // alter last byte of Name just above to set
1188+ 69B2 BD          >                db      {b $} | END_BIT     // msb as name end
1188+ 69B3             >
1188+ 69B3 AA 69       >                dw      last_NFA            // Link to previous definition Name
1188+ 69B5             >ZEQUAL:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1188+ 69B5 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1188+ 69B5             >                else
1188+ 69B5 B7 69       >                dw      $ + 2   ; ok        // is pointed by CFA
1188+ 69B7             >                endif           ; ok        // for other definitions it "points" the correct handler
1188+ 69B7             >                // Use of "; ok" to suppress "warning[fwdref]"
1188+ 69B7             >
1188+ 69B7             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1189+ 69B7              Zero_Equal:
1190+ 69B7 E1                           pop     hl
1191+ 69B8 7D                           ld      a, l
1192+ 69B9 B4                           or      h
1193+ 69BA 21 00 00                     ld      hl, FALSE_FLAG
1194+ 69BD 20 01                        jr      nz, ZEqual_Skip
1195+ 69BF 2B                               dec     hl
1196+ 69C0              ZEqual_Skip:
1197+ 69C0                              psh1
1197+ 69C0 E5          >                push    hl
1197+ 69C1 DD E9       >                jp      (ix)
1198+ 69C3
1199+ 69C3              //  ______________________________________________________________________
1200+ 69C3              //
1201+ 69C3              // not         a1 -- a2
1202+ 69C3              // increment by 2 top of stack
1203+ 69C3                              New_Def NOT_OP, "NOT", Zero_Equal, is_normal
1203+ 69C3             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1203+ 69C3             >
1203+ 69C3             >                // dummy db directives used to calculate length of namec
1203+ 69C3 4E 4F 54    >                db      "NOT"
1203+ 69C6             >len_NFA         defl    $ - temp_NFA
1203+ 69C6             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1203+ 69C3             >
1203+ 69C3 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1203+ 69C4 4E 4F 54    >                db      "NOT"               // name string in 7-bit ascii, but
1203+ 69C7             >                org     $-1                 // alter last byte of Name just above to set
1203+ 69C6 D4          >                db      {b $} | END_BIT     // msb as name end
1203+ 69C7             >
1203+ 69C7 B0 69       >                dw      last_NFA            // Link to previous definition Name
1203+ 69C9             >NOT_OP:          if Zero_Equal != 0 ; ok        // This is the start address of the direct jp(hl)
1203+ 69C9 B7 69       >                dw      Zero_Equal ; ok        // for primitive definitions  actual code
1203+ 69CB             >                else
1203+ 69CB ~           >                dw      $ + 2   ; ok        // is pointed by CFA
1203+ 69CB             >                endif           ; ok        // for other definitions it "points" the correct handler
1203+ 69CB             >                // Use of "; ok" to suppress "warning[fwdref]"
1203+ 69CB             >
1203+ 69CB             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1204+ 69CB
1205+ 69CB              //  ______________________________________________________________________
1206+ 69CB              //
1207+ 69CB              // 0<           n -- f
1208+ 69CB              // true (non zero) if n is less than zero, false (0) elsewere
1209+ 69CB                              New_Def ZLESS, "0<", is_code, is_normal
1209+ 69CB             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1209+ 69CB             >
1209+ 69CB             >                // dummy db directives used to calculate length of namec
1209+ 69CB 30 3C       >                db      "0<"
1209+ 69CD             >len_NFA         defl    $ - temp_NFA
1209+ 69CD             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1209+ 69CB             >
1209+ 69CB 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1209+ 69CC 30 3C       >                db      "0<"               // name string in 7-bit ascii, but
1209+ 69CE             >                org     $-1                 // alter last byte of Name just above to set
1209+ 69CD BC          >                db      {b $} | END_BIT     // msb as name end
1209+ 69CE             >
1209+ 69CE C3 69       >                dw      last_NFA            // Link to previous definition Name
1209+ 69D0             >ZLESS:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1209+ 69D0 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1209+ 69D0             >                else
1209+ 69D0 D2 69       >                dw      $ + 2   ; ok        // is pointed by CFA
1209+ 69D2             >                endif           ; ok        // for other definitions it "points" the correct handler
1209+ 69D2             >                // Use of "; ok" to suppress "warning[fwdref]"
1209+ 69D2             >
1209+ 69D2             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1210+ 69D2 E1                           pop     hl
1211+ 69D3 29                           add     hl, hl
1212+ 69D4 21 00 00                     ld      hl, 0
1213+ 69D7 30 01                        jr      nc, ZLess_Skip
1214+ 69D9 2B                               dec     hl
1215+ 69DA              ZLess_Skip:
1216+ 69DA                              psh1
1216+ 69DA E5          >                push    hl
1216+ 69DB DD E9       >                jp      (ix)
1217+ 69DD
1218+ 69DD              //  ______________________________________________________________________
1219+ 69DD              //
1220+ 69DD              // 0>           n -- f
1221+ 69DD              // true (non zero) if n is less than zero, false (0) elsewere
1222+ 69DD                              New_Def ZGREATER, "0>", is_code, is_normal
1222+ 69DD             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1222+ 69DD             >
1222+ 69DD             >                // dummy db directives used to calculate length of namec
1222+ 69DD 30 3E       >                db      "0>"
1222+ 69DF             >len_NFA         defl    $ - temp_NFA
1222+ 69DF             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1222+ 69DD             >
1222+ 69DD 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1222+ 69DE 30 3E       >                db      "0>"               // name string in 7-bit ascii, but
1222+ 69E0             >                org     $-1                 // alter last byte of Name just above to set
1222+ 69DF BE          >                db      {b $} | END_BIT     // msb as name end
1222+ 69E0             >
1222+ 69E0 CB 69       >                dw      last_NFA            // Link to previous definition Name
1222+ 69E2             >ZGREATER:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1222+ 69E2 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1222+ 69E2             >                else
1222+ 69E2 E4 69       >                dw      $ + 2   ; ok        // is pointed by CFA
1222+ 69E4             >                endif           ; ok        // for other definitions it "points" the correct handler
1222+ 69E4             >                // Use of "; ok" to suppress "warning[fwdref]"
1222+ 69E4             >
1222+ 69E4             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1223+ 69E4 E1                           pop     hl
1224+ 69E5 7D                           ld      a, l
1225+ 69E6 B4                           or      h
1226+ 69E7 29                           add     hl, hl
1227+ 69E8 21 00 00                     ld      hl, FALSE_FLAG
1228+ 69EB 38 04                        jr      c, ZGreater_Skip
1229+ 69ED A7                               and     a
1230+ 69EE 28 01                            jr      z, ZGreater_Skip
1231+ 69F0 2B                                   dec     hl
1232+ 69F1              ZGreater_Skip:
1233+ 69F1                              psh1
1233+ 69F1 E5          >                push    hl
1233+ 69F2 DD E9       >                jp      (ix)
1234+ 69F4
1235+ 69F4              //  ______________________________________________________________________
1236+ 69F4              //
1237+ 69F4              // +            n1 n2 -- n3
1238+ 69F4              // returns the unsigned sum of two top values
1239+ 69F4                              New_Def PLUS, "+", is_code, is_normal
1239+ 69F4             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1239+ 69F4             >
1239+ 69F4             >                // dummy db directives used to calculate length of namec
1239+ 69F4 2B          >                db      "+"
1239+ 69F5             >len_NFA         defl    $ - temp_NFA
1239+ 69F5             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1239+ 69F4             >
1239+ 69F4 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1239+ 69F5 2B          >                db      "+"               // name string in 7-bit ascii, but
1239+ 69F6             >                org     $-1                 // alter last byte of Name just above to set
1239+ 69F5 AB          >                db      {b $} | END_BIT     // msb as name end
1239+ 69F6             >
1239+ 69F6 DD 69       >                dw      last_NFA            // Link to previous definition Name
1239+ 69F8             >PLUS:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1239+ 69F8 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1239+ 69F8             >                else
1239+ 69F8 FA 69       >                dw      $ + 2   ; ok        // is pointed by CFA
1239+ 69FA             >                endif           ; ok        // for other definitions it "points" the correct handler
1239+ 69FA             >                // Use of "; ok" to suppress "warning[fwdref]"
1239+ 69FA             >
1239+ 69FA             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1240+ 69FA E1                           pop     hl
1241+ 69FB D1                           pop     de
1242+ 69FC 19                           add     hl, de
1243+ 69FD
1244+ 69FD                              psh1
1244+ 69FD E5          >                push    hl
1244+ 69FE DD E9       >                jp      (ix)
1245+ 6A00
1246+ 6A00
1247+ 6A00              //  ______________________________________________________________________
1248+ 6A00              //
1249+ 6A00              // d+           d1 d2 -- d3
1250+ 6A00              // returns the unsigned sum of two top double-numbers
1251+ 6A00              //      d2  d1
1252+ 6A00              //      h l h l
1253+ 6A00              // SP   LHEDLHED
1254+ 6A00              // SP  +01234567
1255+ 6A00                              New_Def DPLUS, "D+", is_code, is_normal
1255+ 6A00             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1255+ 6A00             >
1255+ 6A00             >                // dummy db directives used to calculate length of namec
1255+ 6A00 44 2B       >                db      "D+"
1255+ 6A02             >len_NFA         defl    $ - temp_NFA
1255+ 6A02             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1255+ 6A00             >
1255+ 6A00 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1255+ 6A01 44 2B       >                db      "D+"               // name string in 7-bit ascii, but
1255+ 6A03             >                org     $-1                 // alter last byte of Name just above to set
1255+ 6A02 AB          >                db      {b $} | END_BIT     // msb as name end
1255+ 6A03             >
1255+ 6A03 F4 69       >                dw      last_NFA            // Link to previous definition Name
1255+ 6A05             >DPLUS:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1255+ 6A05 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1255+ 6A05             >                else
1255+ 6A05 07 6A       >                dw      $ + 2   ; ok        // is pointed by CFA
1255+ 6A07             >                endif           ; ok        // for other definitions it "points" the correct handler
1255+ 6A07             >                // Use of "; ok" to suppress "warning[fwdref]"
1255+ 6A07             >
1255+ 6A07             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1256+ 6A07
1257+ 6A07 D9                           exx
1258+ 6A08 C1                           pop     bc                  // bc := d2.H
1259+ 6A09 D1                           pop     de                  // hl := d2.L
1260+ 6A0A E1                           pop     hl                  // d1.H
1261+ 6A0B E3                           ex      (sp), hl            // d1.L
1262+ 6A0C 19                           add     hl, de              // hl := d2.L + d1.L
1263+ 6A0D E3                           ex      (sp), hl            // d1.H
1264+ 6A0E ED 4A                        adc     hl, bc              // d1.H + d2.H
1265+ 6A10 E5                           push    hl
1266+ 6A11 D9                           exx
1267+ 6A12                              next
1267+ 6A12 DD E9       >                jp      (ix)
1268+ 6A14
1269+ 6A14              //  ______________________________________________________________________
1270+ 6A14              //
1271+ 6A14              // 1+           n1 -- n2
1272+ 6A14              // increment by 1 top of stack
1273+ 6A14                              New_Def ONE_PLUS, "1+", is_code, is_normal
1273+ 6A14             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1273+ 6A14             >
1273+ 6A14             >                // dummy db directives used to calculate length of namec
1273+ 6A14 31 2B       >                db      "1+"
1273+ 6A16             >len_NFA         defl    $ - temp_NFA
1273+ 6A16             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1273+ 6A14             >
1273+ 6A14 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1273+ 6A15 31 2B       >                db      "1+"               // name string in 7-bit ascii, but
1273+ 6A17             >                org     $-1                 // alter last byte of Name just above to set
1273+ 6A16 AB          >                db      {b $} | END_BIT     // msb as name end
1273+ 6A17             >
1273+ 6A17 00 6A       >                dw      last_NFA            // Link to previous definition Name
1273+ 6A19             >ONE_PLUS:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1273+ 6A19 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1273+ 6A19             >                else
1273+ 6A19 1B 6A       >                dw      $ + 2   ; ok        // is pointed by CFA
1273+ 6A1B             >                endif           ; ok        // for other definitions it "points" the correct handler
1273+ 6A1B             >                // Use of "; ok" to suppress "warning[fwdref]"
1273+ 6A1B             >
1273+ 6A1B             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1274+ 6A1B E1                           pop     hl
1275+ 6A1C 23                           inc     hl
1276+ 6A1D
1277+ 6A1D                              psh1
1277+ 6A1D E5          >                push    hl
1277+ 6A1E DD E9       >                jp      (ix)
1278+ 6A20
1279+ 6A20              //  ______________________________________________________________________
1280+ 6A20              //
1281+ 6A20              // 1-           n1 -- n2
1282+ 6A20              // decrement by 1 top of stack
1283+ 6A20                              New_Def ONE_SUBTRACT, "1-", is_code, is_normal
1283+ 6A20             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1283+ 6A20             >
1283+ 6A20             >                // dummy db directives used to calculate length of namec
1283+ 6A20 31 2D       >                db      "1-"
1283+ 6A22             >len_NFA         defl    $ - temp_NFA
1283+ 6A22             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1283+ 6A20             >
1283+ 6A20 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1283+ 6A21 31 2D       >                db      "1-"               // name string in 7-bit ascii, but
1283+ 6A23             >                org     $-1                 // alter last byte of Name just above to set
1283+ 6A22 AD          >                db      {b $} | END_BIT     // msb as name end
1283+ 6A23             >
1283+ 6A23 14 6A       >                dw      last_NFA            // Link to previous definition Name
1283+ 6A25             >ONE_SUBTRACT:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1283+ 6A25 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1283+ 6A25             >                else
1283+ 6A25 27 6A       >                dw      $ + 2   ; ok        // is pointed by CFA
1283+ 6A27             >                endif           ; ok        // for other definitions it "points" the correct handler
1283+ 6A27             >                // Use of "; ok" to suppress "warning[fwdref]"
1283+ 6A27             >
1283+ 6A27             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1284+ 6A27 E1                           pop     hl
1285+ 6A28 2B                           dec     hl
1286+ 6A29
1287+ 6A29                              psh1
1287+ 6A29 E5          >                push    hl
1287+ 6A2A DD E9       >                jp      (ix)
1288+ 6A2C
1289+ 6A2C              //  ______________________________________________________________________
1290+ 6A2C              //
1291+ 6A2C              // 2+           n1 -- n2
1292+ 6A2C              // increment by 2 top of stack
1293+ 6A2C                              New_Def TWO_PLUS, "2+", is_code, is_normal
1293+ 6A2C             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1293+ 6A2C             >
1293+ 6A2C             >                // dummy db directives used to calculate length of namec
1293+ 6A2C 32 2B       >                db      "2+"
1293+ 6A2E             >len_NFA         defl    $ - temp_NFA
1293+ 6A2E             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1293+ 6A2C             >
1293+ 6A2C 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1293+ 6A2D 32 2B       >                db      "2+"               // name string in 7-bit ascii, but
1293+ 6A2F             >                org     $-1                 // alter last byte of Name just above to set
1293+ 6A2E AB          >                db      {b $} | END_BIT     // msb as name end
1293+ 6A2F             >
1293+ 6A2F 20 6A       >                dw      last_NFA            // Link to previous definition Name
1293+ 6A31             >TWO_PLUS:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1293+ 6A31 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1293+ 6A31             >                else
1293+ 6A31 33 6A       >                dw      $ + 2   ; ok        // is pointed by CFA
1293+ 6A33             >                endif           ; ok        // for other definitions it "points" the correct handler
1293+ 6A33             >                // Use of "; ok" to suppress "warning[fwdref]"
1293+ 6A33             >
1293+ 6A33             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1294+ 6A33              Two_Plus:
1295+ 6A33 E1                           pop     hl
1296+ 6A34 23                           inc     hl
1297+ 6A35 23                           inc     hl
1298+ 6A36
1299+ 6A36                              psh1
1299+ 6A36 E5          >                push    hl
1299+ 6A37 DD E9       >                jp      (ix)
1300+ 6A39
1301+ 6A39              //  ______________________________________________________________________
1302+ 6A39              //
1303+ 6A39              // cell+        a1 -- a2
1304+ 6A39              // increment by 2 top of stack
1305+ 6A39                              New_Def CELL_PLUS, "CELL+", Two_Plus, is_normal
1305+ 6A39             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1305+ 6A39             >
1305+ 6A39             >                // dummy db directives used to calculate length of namec
1305+ 6A39 43 45 4C 4C >                db      "CELL+"
1305+ 6A3D 2B          >
1305+ 6A3E             >len_NFA         defl    $ - temp_NFA
1305+ 6A3E             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1305+ 6A39             >
1305+ 6A39 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1305+ 6A3A 43 45 4C 4C >                db      "CELL+"               // name string in 7-bit ascii, but
1305+ 6A3E 2B          >
1305+ 6A3F             >                org     $-1                 // alter last byte of Name just above to set
1305+ 6A3E AB          >                db      {b $} | END_BIT     // msb as name end
1305+ 6A3F             >
1305+ 6A3F 2C 6A       >                dw      last_NFA            // Link to previous definition Name
1305+ 6A41             >CELL_PLUS:          if Two_Plus != 0 ; ok        // This is the start address of the direct jp(hl)
1305+ 6A41 33 6A       >                dw      Two_Plus ; ok        // for primitive definitions  actual code
1305+ 6A43             >                else
1305+ 6A43 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
1305+ 6A43             >                endif           ; ok        // for other definitions it "points" the correct handler
1305+ 6A43             >                // Use of "; ok" to suppress "warning[fwdref]"
1305+ 6A43             >
1305+ 6A43             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1306+ 6A43
1307+ 6A43              //  ______________________________________________________________________
1308+ 6A43              //
1309+ 6A43              // align        a1 -- a2
1310+ 6A43              // align memory : not used
1311+ 6A43              //              New_Def ALIGN_ADDR, "ALIGN", is_code, is_normal
1312+ 6A43              //            next
1313+ 6A43
1314+ 6A43              //  ______________________________________________________________________
1315+ 6A43              //
1316+ 6A43              // cell-        a1 -- a2
1317+ 6A43              // decrement by 2 top of stack
1318+ 6A43                              New_Def CELL_MINUS, "CELL-", is_code, is_normal
1318+ 6A43             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1318+ 6A43             >
1318+ 6A43             >                // dummy db directives used to calculate length of namec
1318+ 6A43 43 45 4C 4C >                db      "CELL-"
1318+ 6A47 2D          >
1318+ 6A48             >len_NFA         defl    $ - temp_NFA
1318+ 6A48             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1318+ 6A43             >
1318+ 6A43 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1318+ 6A44 43 45 4C 4C >                db      "CELL-"               // name string in 7-bit ascii, but
1318+ 6A48 2D          >
1318+ 6A49             >                org     $-1                 // alter last byte of Name just above to set
1318+ 6A48 AD          >                db      {b $} | END_BIT     // msb as name end
1318+ 6A49             >
1318+ 6A49 39 6A       >                dw      last_NFA            // Link to previous definition Name
1318+ 6A4B             >CELL_MINUS:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1318+ 6A4B ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1318+ 6A4B             >                else
1318+ 6A4B 4D 6A       >                dw      $ + 2   ; ok        // is pointed by CFA
1318+ 6A4D             >                endif           ; ok        // for other definitions it "points" the correct handler
1318+ 6A4D             >                // Use of "; ok" to suppress "warning[fwdref]"
1318+ 6A4D             >
1318+ 6A4D             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1319+ 6A4D              CellMinus:
1320+ 6A4D E1                           pop     hl
1321+ 6A4E 2B                           dec     hl
1322+ 6A4F 2B                           dec     hl
1323+ 6A50 E5                           push    hl
1324+ 6A51                              next
1324+ 6A51 DD E9       >                jp      (ix)
1325+ 6A53
1326+ 6A53              //  ______________________________________________________________________
1327+ 6A53              //
1328+ 6A53              // 2-           a1 -- a2
1329+ 6A53              // decrement by 2 top of stack
1330+ 6A53                              New_Def TWO_MINUS, "2-", CellMinus, is_normal
1330+ 6A53             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1330+ 6A53             >
1330+ 6A53             >                // dummy db directives used to calculate length of namec
1330+ 6A53 32 2D       >                db      "2-"
1330+ 6A55             >len_NFA         defl    $ - temp_NFA
1330+ 6A55             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1330+ 6A53             >
1330+ 6A53 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1330+ 6A54 32 2D       >                db      "2-"               // name string in 7-bit ascii, but
1330+ 6A56             >                org     $-1                 // alter last byte of Name just above to set
1330+ 6A55 AD          >                db      {b $} | END_BIT     // msb as name end
1330+ 6A56             >
1330+ 6A56 43 6A       >                dw      last_NFA            // Link to previous definition Name
1330+ 6A58             >TWO_MINUS:          if CellMinus != 0 ; ok        // This is the start address of the direct jp(hl)
1330+ 6A58 4D 6A       >                dw      CellMinus ; ok        // for primitive definitions  actual code
1330+ 6A5A             >                else
1330+ 6A5A ~           >                dw      $ + 2   ; ok        // is pointed by CFA
1330+ 6A5A             >                endif           ; ok        // for other definitions it "points" the correct handler
1330+ 6A5A             >                // Use of "; ok" to suppress "warning[fwdref]"
1330+ 6A5A             >
1330+ 6A5A             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1331+ 6A5A
1332+ 6A5A              //  ______________________________________________________________________
1333+ 6A5A              //
1334+ 6A5A              // negate        n1 -- n2
1335+ 6A5A              // change the sign of number
1336+ 6A5A                              New_Def MINUS, "NEGATE", is_code, is_normal
1336+ 6A5A             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1336+ 6A5A             >
1336+ 6A5A             >                // dummy db directives used to calculate length of namec
1336+ 6A5A 4E 45 47 41 >                db      "NEGATE"
1336+ 6A5E 54 45       >
1336+ 6A60             >len_NFA         defl    $ - temp_NFA
1336+ 6A60             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1336+ 6A5A             >
1336+ 6A5A 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1336+ 6A5B 4E 45 47 41 >                db      "NEGATE"               // name string in 7-bit ascii, but
1336+ 6A5F 54 45       >
1336+ 6A61             >                org     $-1                 // alter last byte of Name just above to set
1336+ 6A60 C5          >                db      {b $} | END_BIT     // msb as name end
1336+ 6A61             >
1336+ 6A61 53 6A       >                dw      last_NFA            // Link to previous definition Name
1336+ 6A63             >MINUS:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1336+ 6A63 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1336+ 6A63             >                else
1336+ 6A63 65 6A       >                dw      $ + 2   ; ok        // is pointed by CFA
1336+ 6A65             >                endif           ; ok        // for other definitions it "points" the correct handler
1336+ 6A65             >                // Use of "; ok" to suppress "warning[fwdref]"
1336+ 6A65             >
1336+ 6A65             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1337+ 6A65 21 00 00                     ld      hl, 0               // subtract from 0
1338+ 6A68 D1                           pop     de
1339+ 6A69 B7                           or      a
1340+ 6A6A ED 52                        sbc     hl, de
1341+ 6A6C
1342+ 6A6C                              psh1
1342+ 6A6C E5          >                push    hl
1342+ 6A6D DD E9       >                jp      (ix)
1343+ 6A6F
1344+ 6A6F              //  ______________________________________________________________________
1345+ 6A6F              //
1346+ 6A6F              // dnegate      d1 -- d2
1347+ 6A6F              // change the sign of a double number
1348+ 6A6F                              New_Def DMINUS, "DNEGATE", is_code, is_normal
1348+ 6A6F             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1348+ 6A6F             >
1348+ 6A6F             >                // dummy db directives used to calculate length of namec
1348+ 6A6F 44 4E 45 47 >                db      "DNEGATE"
1348+ 6A73 41 54 45    >
1348+ 6A76             >len_NFA         defl    $ - temp_NFA
1348+ 6A76             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1348+ 6A6F             >
1348+ 6A6F 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1348+ 6A70 44 4E 45 47 >                db      "DNEGATE"               // name string in 7-bit ascii, but
1348+ 6A74 41 54 45    >
1348+ 6A77             >                org     $-1                 // alter last byte of Name just above to set
1348+ 6A76 C5          >                db      {b $} | END_BIT     // msb as name end
1348+ 6A77             >
1348+ 6A77 5A 6A       >                dw      last_NFA            // Link to previous definition Name
1348+ 6A79             >DMINUS:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1348+ 6A79 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1348+ 6A79             >                else
1348+ 6A79 7B 6A       >                dw      $ + 2   ; ok        // is pointed by CFA
1348+ 6A7B             >                endif           ; ok        // for other definitions it "points" the correct handler
1348+ 6A7B             >                // Use of "; ok" to suppress "warning[fwdref]"
1348+ 6A7B             >
1348+ 6A7B             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1349+ 6A7B D9                           exx
1350+ 6A7C C1                           pop     bc                  // d1.H
1351+ 6A7D D1                           pop     de                  // d1.L
1352+ 6A7E AF                           xor     a
1353+ 6A7F 67                           ld      h, a
1354+ 6A80 6F                           ld      l, a
1355+ 6A81 ED 52                        sbc     hl, de              // subtact from zero
1356+ 6A83 E5                           push    hl                  // > d2-L
1357+ 6A84 67                           ld      h, a
1358+ 6A85 6F                           ld      l, a
1359+ 6A86 ED 42                        sbc     hl, bc              // subtract from zero with carry
1360+ 6A88                                                          // > d2-H
1361+ 6A88 E5                           push    hl
1362+ 6A89 D9                           exx
1363+ 6A8A                              next
1363+ 6A8A DD E9       >                jp      (ix)
1364+ 6A8C
1365+ 6A8C              //  ______________________________________________________________________
1366+ 6A8C              //
1367+ 6A8C              // over         n1 n2 -- n1 n2 n1
1368+ 6A8C              // copy the second value of stack and put it on top.
1369+ 6A8C                              New_Def OVER, "OVER", is_code, is_normal
1369+ 6A8C             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1369+ 6A8C             >
1369+ 6A8C             >                // dummy db directives used to calculate length of namec
1369+ 6A8C 4F 56 45 52 >                db      "OVER"
1369+ 6A90             >len_NFA         defl    $ - temp_NFA
1369+ 6A90             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1369+ 6A8C             >
1369+ 6A8C 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1369+ 6A8D 4F 56 45 52 >                db      "OVER"               // name string in 7-bit ascii, but
1369+ 6A91             >                org     $-1                 // alter last byte of Name just above to set
1369+ 6A90 D2          >                db      {b $} | END_BIT     // msb as name end
1369+ 6A91             >
1369+ 6A91 6F 6A       >                dw      last_NFA            // Link to previous definition Name
1369+ 6A93             >OVER:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1369+ 6A93 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1369+ 6A93             >                else
1369+ 6A93 95 6A       >                dw      $ + 2   ; ok        // is pointed by CFA
1369+ 6A95             >                endif           ; ok        // for other definitions it "points" the correct handler
1369+ 6A95             >                // Use of "; ok" to suppress "warning[fwdref]"
1369+ 6A95             >
1369+ 6A95             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1370+ 6A95 D1                           pop     de                  //   n2
1371+ 6A96 E1                           pop     hl                  // < n1
1372+ 6A97 E5                           push    hl                  // > n1
1373+ 6A98 D5                           push    de                  // > n2
1374+ 6A99 E5                           push    hl                  // > n1
1375+ 6A9A                              next
1375+ 6A9A DD E9       >                jp      (ix)
1376+ 6A9C
1377+ 6A9C              //  ______________________________________________________________________
1378+ 6A9C              //
1379+ 6A9C              // drop         n1 --
1380+ 6A9C              // drops the top of stack
1381+ 6A9C                              New_Def DROP, "DROP", is_code, is_normal
1381+ 6A9C             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1381+ 6A9C             >
1381+ 6A9C             >                // dummy db directives used to calculate length of namec
1381+ 6A9C 44 52 4F 50 >                db      "DROP"
1381+ 6AA0             >len_NFA         defl    $ - temp_NFA
1381+ 6AA0             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1381+ 6A9C             >
1381+ 6A9C 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1381+ 6A9D 44 52 4F 50 >                db      "DROP"               // name string in 7-bit ascii, but
1381+ 6AA1             >                org     $-1                 // alter last byte of Name just above to set
1381+ 6AA0 D0          >                db      {b $} | END_BIT     // msb as name end
1381+ 6AA1             >
1381+ 6AA1 8C 6A       >                dw      last_NFA            // Link to previous definition Name
1381+ 6AA3             >DROP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1381+ 6AA3 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1381+ 6AA3             >                else
1381+ 6AA3 A5 6A       >                dw      $ + 2   ; ok        // is pointed by CFA
1381+ 6AA5             >                endif           ; ok        // for other definitions it "points" the correct handler
1381+ 6AA5             >                // Use of "; ok" to suppress "warning[fwdref]"
1381+ 6AA5             >
1381+ 6AA5             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1382+ 6AA5 E1                           pop     hl                  // < n1 and discard previous TOS
1383+ 6AA6                              next
1383+ 6AA6 DD E9       >                jp      (ix)
1384+ 6AA8
1385+ 6AA8              //  ______________________________________________________________________
1386+ 6AA8              //
1387+ 6AA8              // nip          n1 n2 -- n2
1388+ 6AA8              // drops the second elemento on the stack
1389+ 6AA8                              New_Def NIP, "NIP", is_code, is_normal
1389+ 6AA8             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1389+ 6AA8             >
1389+ 6AA8             >                // dummy db directives used to calculate length of namec
1389+ 6AA8 4E 49 50    >                db      "NIP"
1389+ 6AAB             >len_NFA         defl    $ - temp_NFA
1389+ 6AAB             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1389+ 6AA8             >
1389+ 6AA8 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1389+ 6AA9 4E 49 50    >                db      "NIP"               // name string in 7-bit ascii, but
1389+ 6AAC             >                org     $-1                 // alter last byte of Name just above to set
1389+ 6AAB D0          >                db      {b $} | END_BIT     // msb as name end
1389+ 6AAC             >
1389+ 6AAC 9C 6A       >                dw      last_NFA            // Link to previous definition Name
1389+ 6AAE             >NIP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1389+ 6AAE ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1389+ 6AAE             >                else
1389+ 6AAE B0 6A       >                dw      $ + 2   ; ok        // is pointed by CFA
1389+ 6AB0             >                endif           ; ok        // for other definitions it "points" the correct handler
1389+ 6AB0             >                // Use of "; ok" to suppress "warning[fwdref]"
1389+ 6AB0             >
1389+ 6AB0             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1390+ 6AB0
1391+ 6AB0 E1                           pop     hl                  // < n1 discarded
1392+ 6AB1 E3                           ex      (sp), hl
1393+ 6AB2                              next
1393+ 6AB2 DD E9       >                jp      (ix)
1394+ 6AB4
1395+ 6AB4              //  ______________________________________________________________________
1396+ 6AB4              //
1397+ 6AB4              // tuck         n1 n2 -- n2 n1 n2
1398+ 6AB4              // copy the top element after the second.
1399+ 6AB4                              New_Def TUCK, "TUCK", is_code, is_normal
1399+ 6AB4             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1399+ 6AB4             >
1399+ 6AB4             >                // dummy db directives used to calculate length of namec
1399+ 6AB4 54 55 43 4B >                db      "TUCK"
1399+ 6AB8             >len_NFA         defl    $ - temp_NFA
1399+ 6AB8             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1399+ 6AB4             >
1399+ 6AB4 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1399+ 6AB5 54 55 43 4B >                db      "TUCK"               // name string in 7-bit ascii, but
1399+ 6AB9             >                org     $-1                 // alter last byte of Name just above to set
1399+ 6AB8 CB          >                db      {b $} | END_BIT     // msb as name end
1399+ 6AB9             >
1399+ 6AB9 A8 6A       >                dw      last_NFA            // Link to previous definition Name
1399+ 6ABB             >TUCK:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1399+ 6ABB ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1399+ 6ABB             >                else
1399+ 6ABB BD 6A       >                dw      $ + 2   ; ok        // is pointed by CFA
1399+ 6ABD             >                endif           ; ok        // for other definitions it "points" the correct handler
1399+ 6ABD             >                // Use of "; ok" to suppress "warning[fwdref]"
1399+ 6ABD             >
1399+ 6ABD             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1400+ 6ABD E1                           pop     hl
1401+ 6ABE D1                           pop     de                  // < n1
1402+ 6ABF E5                           push    hl                  // > n2  and TOS
1403+ 6AC0 D5                           push    de                  // > n1
1404+ 6AC1 E5                           push    hl
1405+ 6AC2                              next
1405+ 6AC2 DD E9       >                jp      (ix)
1406+ 6AC4
1407+ 6AC4              //  ______________________________________________________________________
1408+ 6AC4              //
1409+ 6AC4              // swap         n1 n2 -- n2 n1
1410+ 6AC4              // swaps the two values on top of stack
1411+ 6AC4                              New_Def SWAP, "SWAP", is_code, is_normal
1411+ 6AC4             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1411+ 6AC4             >
1411+ 6AC4             >                // dummy db directives used to calculate length of namec
1411+ 6AC4 53 57 41 50 >                db      "SWAP"
1411+ 6AC8             >len_NFA         defl    $ - temp_NFA
1411+ 6AC8             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1411+ 6AC4             >
1411+ 6AC4 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1411+ 6AC5 53 57 41 50 >                db      "SWAP"               // name string in 7-bit ascii, but
1411+ 6AC9             >                org     $-1                 // alter last byte of Name just above to set
1411+ 6AC8 D0          >                db      {b $} | END_BIT     // msb as name end
1411+ 6AC9             >
1411+ 6AC9 B4 6A       >                dw      last_NFA            // Link to previous definition Name
1411+ 6ACB             >SWAP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1411+ 6ACB ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1411+ 6ACB             >                else
1411+ 6ACB CD 6A       >                dw      $ + 2   ; ok        // is pointed by CFA
1411+ 6ACD             >                endif           ; ok        // for other definitions it "points" the correct handler
1411+ 6ACD             >                // Use of "; ok" to suppress "warning[fwdref]"
1411+ 6ACD             >
1411+ 6ACD             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1412+ 6ACD E1                           pop     hl                  // < n1
1413+ 6ACE E3                           ex      (sp),hl             // > n2
1414+ 6ACF E5                           push    hl                  // copy n1 to TOS
1415+ 6AD0                              next
1415+ 6AD0 DD E9       >                jp      (ix)
1416+ 6AD2
1417+ 6AD2              //  ______________________________________________________________________
1418+ 6AD2              //
1419+ 6AD2              // dup         n -- n n
1420+ 6AD2              // duplicates the top value of stack
1421+ 6AD2                              New_Def DUP, "DUP", is_code, is_normal
1421+ 6AD2             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1421+ 6AD2             >
1421+ 6AD2             >                // dummy db directives used to calculate length of namec
1421+ 6AD2 44 55 50    >                db      "DUP"
1421+ 6AD5             >len_NFA         defl    $ - temp_NFA
1421+ 6AD5             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1421+ 6AD2             >
1421+ 6AD2 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1421+ 6AD3 44 55 50    >                db      "DUP"               // name string in 7-bit ascii, but
1421+ 6AD6             >                org     $-1                 // alter last byte of Name just above to set
1421+ 6AD5 D0          >                db      {b $} | END_BIT     // msb as name end
1421+ 6AD6             >
1421+ 6AD6 C4 6A       >                dw      last_NFA            // Link to previous definition Name
1421+ 6AD8             >DUP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1421+ 6AD8 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1421+ 6AD8             >                else
1421+ 6AD8 DA 6A       >                dw      $ + 2   ; ok        // is pointed by CFA
1421+ 6ADA             >                endif           ; ok        // for other definitions it "points" the correct handler
1421+ 6ADA             >                // Use of "; ok" to suppress "warning[fwdref]"
1421+ 6ADA             >
1421+ 6ADA             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1422+ 6ADA E1                           pop     hl
1423+ 6ADB E5                           push    hl                  // > n duplicate TOS
1424+ 6ADC E5                           push    hl
1425+ 6ADD                              next
1425+ 6ADD DD E9       >                jp      (ix)
1426+ 6ADF
1427+ 6ADF              //  ______________________________________________________________________
1428+ 6ADF              //
1429+ 6ADF              // rot         n1 n2 n3 -- n2 n3 n1
1430+ 6ADF              // Rotates the 3 top values of stack by picking the 3rd in access-order
1431+ 6ADF              // and putting it on top. The other two are shifted down one place.
1432+ 6ADF                              New_Def ROT, "ROT", is_code, is_normal
1432+ 6ADF             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1432+ 6ADF             >
1432+ 6ADF             >                // dummy db directives used to calculate length of namec
1432+ 6ADF 52 4F 54    >                db      "ROT"
1432+ 6AE2             >len_NFA         defl    $ - temp_NFA
1432+ 6AE2             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1432+ 6ADF             >
1432+ 6ADF 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1432+ 6AE0 52 4F 54    >                db      "ROT"               // name string in 7-bit ascii, but
1432+ 6AE3             >                org     $-1                 // alter last byte of Name just above to set
1432+ 6AE2 D4          >                db      {b $} | END_BIT     // msb as name end
1432+ 6AE3             >
1432+ 6AE3 D2 6A       >                dw      last_NFA            // Link to previous definition Name
1432+ 6AE5             >ROT:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1432+ 6AE5 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1432+ 6AE5             >                else
1432+ 6AE5 E7 6A       >                dw      $ + 2   ; ok        // is pointed by CFA
1432+ 6AE7             >                endif           ; ok        // for other definitions it "points" the correct handler
1432+ 6AE7             >                // Use of "; ok" to suppress "warning[fwdref]"
1432+ 6AE7             >
1432+ 6AE7             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1433+ 6AE7 D1                           pop     de                  // < n3
1434+ 6AE8 E1                           pop     hl                  // < n2
1435+ 6AE9 E3                           ex      (sp),hl             // > n2 < n1
1436+ 6AEA D5                           push    de                  // > n3
1437+ 6AEB E5                           push    hl                  // copy n1 to TOS
1438+ 6AEC                              next
1438+ 6AEC DD E9       >                jp      (ix)
1439+ 6AEE
1440+ 6AEE              //  ______________________________________________________________________
1441+ 6AEE              //
1442+ 6AEE              // -rot         n1 n2 n3 -- n3 n1 n2
1443+ 6AEE              // Rotates the 3 top values of stack by picking the 1st in access-order
1444+ 6AEE              // and putting back to 3rd place. The other two are shifted down one place.
1445+ 6AEE                              New_Def DASH_ROT, "-ROT", is_code, is_normal
1445+ 6AEE             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1445+ 6AEE             >
1445+ 6AEE             >                // dummy db directives used to calculate length of namec
1445+ 6AEE 2D 52 4F 54 >                db      "-ROT"
1445+ 6AF2             >len_NFA         defl    $ - temp_NFA
1445+ 6AF2             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1445+ 6AEE             >
1445+ 6AEE 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1445+ 6AEF 2D 52 4F 54 >                db      "-ROT"               // name string in 7-bit ascii, but
1445+ 6AF3             >                org     $-1                 // alter last byte of Name just above to set
1445+ 6AF2 D4          >                db      {b $} | END_BIT     // msb as name end
1445+ 6AF3             >
1445+ 6AF3 DF 6A       >                dw      last_NFA            // Link to previous definition Name
1445+ 6AF5             >DASH_ROT:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1445+ 6AF5 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1445+ 6AF5             >                else
1445+ 6AF5 F7 6A       >                dw      $ + 2   ; ok        // is pointed by CFA
1445+ 6AF7             >                endif           ; ok        // for other definitions it "points" the correct handler
1445+ 6AF7             >                // Use of "; ok" to suppress "warning[fwdref]"
1445+ 6AF7             >
1445+ 6AF7             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1446+ 6AF7 E1                           pop     hl                  // < n3
1447+ 6AF8 D1                           pop     de                  // < n2
1448+ 6AF9 E3                           ex      (sp),hl             // > n3 < n1
1449+ 6AFA E5                           push    hl                  // > n1
1450+ 6AFB D5                           push    de                  // copy n3 to TOS
1451+ 6AFC                              next
1451+ 6AFC DD E9       >                jp      (ix)
1452+ 6AFE
1453+ 6AFE              //  ______________________________________________________________________
1454+ 6AFE              //
1455+ 6AFE              // pick        n1 -- nx
1456+ 6AFE              // picks the nth element from TOS
1457+ 6AFE                              New_Def PICK, "PICK", is_code, is_normal
1457+ 6AFE             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1457+ 6AFE             >
1457+ 6AFE             >                // dummy db directives used to calculate length of namec
1457+ 6AFE 50 49 43 4B >                db      "PICK"
1457+ 6B02             >len_NFA         defl    $ - temp_NFA
1457+ 6B02             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1457+ 6AFE             >
1457+ 6AFE 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1457+ 6AFF 50 49 43 4B >                db      "PICK"               // name string in 7-bit ascii, but
1457+ 6B03             >                org     $-1                 // alter last byte of Name just above to set
1457+ 6B02 CB          >                db      {b $} | END_BIT     // msb as name end
1457+ 6B03             >
1457+ 6B03 EE 6A       >                dw      last_NFA            // Link to previous definition Name
1457+ 6B05             >PICK:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1457+ 6B05 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1457+ 6B05             >                else
1457+ 6B05 07 6B       >                dw      $ + 2   ; ok        // is pointed by CFA
1457+ 6B07             >                endif           ; ok        // for other definitions it "points" the correct handler
1457+ 6B07             >                // Use of "; ok" to suppress "warning[fwdref]"
1457+ 6B07             >
1457+ 6B07             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1458+ 6B07 E1                           pop     hl                  // take TOS as index
1459+ 6B08 29                           add     hl, hl              // as cells
1460+ 6B09 39                           add     hl, sp              // from Stack Pointer
1461+ 6B0A 7E                           ld      a, (hl)             // replace TOS
1462+ 6B0B 23                           inc     hl
1463+ 6B0C 66                           ld      h, (hl)
1464+ 6B0D 6F                           ld      l, a
1465+ 6B0E
1466+ 6B0E                              psh1
1466+ 6B0E E5          >                push    hl
1466+ 6B0F DD E9       >                jp      (ix)
1467+ 6B11
1468+ 6B11
1469+ 6B11              //  ______________________________________________________________________
1470+ 6B11              //
1471+ 6B11              // roll        n1 n2 n3 ... n -- n2 n3 ... n1
1472+ 6B11              // picks the nth element from TOS
1473+ 6B11              //              New_Def ROLL, "ROLL", is_code, is_normal
1474+ 6B11              //              exx                     // we need all registers free
1475+ 6B11              //              pop     hl              // number of cells to roll
1476+ 6B11              //              ld      a, h
1477+ 6B11              //              or       l
1478+ 6B11              //              jr      z, Roll_Zero
1479+ 6B11              //                  add     hl, hl              // number of bytes to move
1480+ 6B11              //                  ld      b, h
1481+ 6B11              //                  ld      c, l
1482+ 6B11              //                  add     hl, sp          // address of n1
1483+ 6B11              //                  ld      a, (hl)         // take n1 into a and a,
1484+ 6B11              //                  inc     hl
1485+ 6B11              //                  ex      af, af'
1486+ 6B11              //                  ld      a, (hl)         // take n1 into a and a,
1487+ 6B11              //                  ld      d, h
1488+ 6B11              //                  ld      e, l
1489+ 6B11              //                  dec     hl
1490+ 6B11              //                  dec     hl
1491+ 6B11              //                  lddr
1492+ 6B11              //                  ex      de, hl
1493+ 6B11              //                  ld      (hl), a
1494+ 6B11              //                  dec     hl
1495+ 6B11              //                  ex      af, af'
1496+ 6B11              //                  ld      (hl), a
1497+ 6B11              //Roll_Zero:
1498+ 6B11              //              exx
1499+ 6B11              //              next
1500+ 6B11
1501+ 6B11
1502+ 6B11              //  ______________________________________________________________________
1503+ 6B11              //
1504+ 6B11              // 2over        d1 d2 -- d1 d2 d1
1505+ 6B11              //              n1 n2 n3 n4 -- n1 n2 n3 n4 n1 n2
1506+ 6B11              // copy the second double of stack and put on top.
1507+ 6B11              //              New_Def TWO_OVER, "2OVER", is_code, is_normal
1508+ 6B11              //
1509+ 6B11              //              ld      hl, 7
1510+ 6B11              //              add     hl, sp
1511+ 6B11              //              ld      d, (hl)
1512+ 6B11              //              dec     hl
1513+ 6B11              //              ld      e, (hl)             // d1-L
1514+ 6B11              //              push    de
1515+ 6B11              //              dec     hl
1516+ 6B11              //              ld      d, (hl)
1517+ 6B11              //              dec     hl
1518+ 6B11              //              ld      e, (hl)             // d1-H
1519+ 6B11              //              push    de
1520+ 6B11              //              next
1521+ 6B11
1522+ 6B11              //  ______________________________________________________________________
1523+ 6B11              //
1524+ 6B11              // 2drop        d --
1525+ 6B11              //              n1 n2 --
1526+ 6B11              // drops the top double from stack
1527+ 6B11                              New_Def TWO_DROP, "2DROP", is_code, is_normal
1527+ 6B11             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1527+ 6B11             >
1527+ 6B11             >                // dummy db directives used to calculate length of namec
1527+ 6B11 32 44 52 4F >                db      "2DROP"
1527+ 6B15 50          >
1527+ 6B16             >len_NFA         defl    $ - temp_NFA
1527+ 6B16             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1527+ 6B11             >
1527+ 6B11 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1527+ 6B12 32 44 52 4F >                db      "2DROP"               // name string in 7-bit ascii, but
1527+ 6B16 50          >
1527+ 6B17             >                org     $-1                 // alter last byte of Name just above to set
1527+ 6B16 D0          >                db      {b $} | END_BIT     // msb as name end
1527+ 6B17             >
1527+ 6B17 FE 6A       >                dw      last_NFA            // Link to previous definition Name
1527+ 6B19             >TWO_DROP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1527+ 6B19 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1527+ 6B19             >                else
1527+ 6B19 1B 6B       >                dw      $ + 2   ; ok        // is pointed by CFA
1527+ 6B1B             >                endif           ; ok        // for other definitions it "points" the correct handler
1527+ 6B1B             >                // Use of "; ok" to suppress "warning[fwdref]"
1527+ 6B1B             >
1527+ 6B1B             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1528+ 6B1B E1                           pop     hl
1529+ 6B1C E1                           pop     hl
1530+ 6B1D                              next
1530+ 6B1D DD E9       >                jp      (ix)
1531+ 6B1F
1532+ 6B1F              //  ______________________________________________________________________
1533+ 6B1F              //
1534+ 6B1F              // 2nip         d1 d2 -- d2
1535+ 6B1F              //              n1 n2 n3 n4 -- n3 n4
1536+ 6B1F              // drops the second double on the stack
1537+ 6B1F              //              New_Def TWO_NIP, 4, "2nip"
1538+ 6B1F              //              ...
1539+ 6B1F
1540+ 6B1F              //  ______________________________________________________________________
1541+ 6B1F              //
1542+ 6B1F              // 2tuck         d1 d2 -- d2 d1 d2
1543+ 6B1F              // copy the top element after the second.
1544+ 6B1F              //              New_Def TWO_TUCK, 5, "2tuck"
1545+ 6B1F              //              ...
1546+ 6B1F
1547+ 6B1F              //  ______________________________________________________________________
1548+ 6B1F              //
1549+ 6B1F              // 2swap         d1 d2 -- d2 d1
1550+ 6B1F              //               n1 n2 n3 n4 -- n3 n4 n1 n2
1551+ 6B1F              // swaps the two doubles on top of stack
1552+ 6B1F                              New_Def TWO_SWAP, "2SWAP", is_code, is_normal
1552+ 6B1F             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1552+ 6B1F             >
1552+ 6B1F             >                // dummy db directives used to calculate length of namec
1552+ 6B1F 32 53 57 41 >                db      "2SWAP"
1552+ 6B23 50          >
1552+ 6B24             >len_NFA         defl    $ - temp_NFA
1552+ 6B24             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1552+ 6B1F             >
1552+ 6B1F 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1552+ 6B20 32 53 57 41 >                db      "2SWAP"               // name string in 7-bit ascii, but
1552+ 6B24 50          >
1552+ 6B25             >                org     $-1                 // alter last byte of Name just above to set
1552+ 6B24 D0          >                db      {b $} | END_BIT     // msb as name end
1552+ 6B25             >
1552+ 6B25 11 6B       >                dw      last_NFA            // Link to previous definition Name
1552+ 6B27             >TWO_SWAP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1552+ 6B27 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1552+ 6B27             >                else
1552+ 6B27 29 6B       >                dw      $ + 2   ; ok        // is pointed by CFA
1552+ 6B29             >                endif           ; ok        // for other definitions it "points" the correct handler
1552+ 6B29             >                // Use of "; ok" to suppress "warning[fwdref]"
1552+ 6B29             >
1552+ 6B29             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1553+ 6B29 F1                           pop     af                  //   d2-H
1554+ 6B2A E1                           pop     hl                  // < d2-L
1555+ 6B2B D1                           pop     de                  // < d1-H
1556+ 6B2C E3                           ex      (sp), hl            // < d1-L > d2-L
1557+ 6B2D F5                           push    af                  // > d2-H
1558+ 6B2E E5                           push    hl                  // > d1-L
1559+ 6B2F D5                           push    de
1560+ 6B30
1561+ 6B30                              next
1561+ 6B30 DD E9       >                jp      (ix)
1562+ 6B32
1563+ 6B32              //  ______________________________________________________________________
1564+ 6B32              //
1565+ 6B32              // 2dup         d -- d d
1566+ 6B32              //              n1 n2 -- n1 n2 n1 n2
1567+ 6B32              // duplicates the top double of stack
1568+ 6B32                              New_Def TWO_DUP, "2DUP", is_code, is_normal
1568+ 6B32             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1568+ 6B32             >
1568+ 6B32             >                // dummy db directives used to calculate length of namec
1568+ 6B32 32 44 55 50 >                db      "2DUP"
1568+ 6B36             >len_NFA         defl    $ - temp_NFA
1568+ 6B36             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1568+ 6B32             >
1568+ 6B32 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1568+ 6B33 32 44 55 50 >                db      "2DUP"               // name string in 7-bit ascii, but
1568+ 6B37             >                org     $-1                 // alter last byte of Name just above to set
1568+ 6B36 D0          >                db      {b $} | END_BIT     // msb as name end
1568+ 6B37             >
1568+ 6B37 1F 6B       >                dw      last_NFA            // Link to previous definition Name
1568+ 6B39             >TWO_DUP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1568+ 6B39 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1568+ 6B39             >                else
1568+ 6B39 3B 6B       >                dw      $ + 2   ; ok        // is pointed by CFA
1568+ 6B3B             >                endif           ; ok        // for other definitions it "points" the correct handler
1568+ 6B3B             >                // Use of "; ok" to suppress "warning[fwdref]"
1568+ 6B3B             >
1568+ 6B3B             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1569+ 6B3B E1                           pop     hl                  // < d-H
1570+ 6B3C D1                           pop     de                  // < d-L
1571+ 6B3D D5                           push    de                  // < d-L
1572+ 6B3E E5                           push    hl                  // > d-H
1573+ 6B3F D5                           push    de                  // > d-L
1574+ 6B40 E5                           push    hl                  // > d-H
1575+ 6B41                              next
1575+ 6B41 DD E9       >                jp      (ix)
1576+ 6B43
1577+ 6B43              //  ______________________________________________________________________
1578+ 6B43              //
1579+ 6B43              // 2rot         d1 d2 d3 -- d2 d3 d1
1580+ 6B43              //              n1 n2 n3 n4 n5 n6 -- n3 n4 n5 n6 n1 n2
1581+ 6B43              // Rotates the 3 top doubles of stack by picking the 3rd in access-order
1582+ 6B43              // and putting it on top. The other two are shifted down one place.
1583+ 6B43              //              New_Def TWO?ROT, 4, "2rot"
1584+ 6B43              //              ...
1585+ 6B43              //              New_Def TWO_ROT, "2ROT", is_code, is_normal
1586+ 6B43              //
1587+ 6B43              //      d3  |d2  |d1  |
1588+ 6B43              //      h l |h l |h l |
1589+ 6B43              // SP   LHED|LHED|LHED|
1590+ 6B43              // SP  +0123|4567|89ab|
1591+ 6B43              //              ld      hl, $000B
1592+ 6B43              //              add     hl, sp
1593+ 6B43              //              ld      d, (hl)
1594+ 6B43              //              dec     hl
1595+ 6B43              //              ld      e, (hl)
1596+ 6B43              //              dec     hl
1597+ 6B43              //              push    de
1598+ 6B43              //              ld      d, (hl)
1599+ 6B43              //              dec     hl
1600+ 6B43              //              ld      e, (hl)
1601+ 6B43              //              dec     hl
1602+ 6B43              //              push    de
1603+ 6B43
1604+ 6B43              //      d1  |d3  |d2  |d1  |
1605+ 6B43              //      h l |h l |h l |h l |
1606+ 6B43              // SP   LHED|LHED|LHED|LHED|
1607+ 6B43              // SP       +0123|4567|89ab|
1608+ 6B43
1609+ 6B43              //              ld      d, h
1610+ 6B43              //              ld      e, l
1611+ 6B43              //              inc     de
1612+ 6B43              //              inc     de
1613+ 6B43              //              inc     de
1614+ 6B43              //              inc     de
1615+ 6B43              //              push    bc
1616+ 6B43              //              ld      bc, $000C
1617+ 6B43              //              lddr
1618+ 6B43              //              pop     bc
1619+ 6B43              //              pop     de
1620+ 6B43              //              pop     de
1621+ 6B43              //
1622+ 6B43              //              next
1623+ 6B43
1624+ 6B43
1625+ 6B43              //  ______________________________________________________________________
1626+ 6B43              //
1627+ 6B43              // +!           n a --
1628+ 6B43              // Sums to the content of address a the number n.
1629+ 6B43              // It is the same of  a @ n + a !
1630+ 6B43                              New_Def PLUSSTORE, "+!", is_code, is_normal
1630+ 6B43             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1630+ 6B43             >
1630+ 6B43             >                // dummy db directives used to calculate length of namec
1630+ 6B43 2B 21       >                db      "+!"
1630+ 6B45             >len_NFA         defl    $ - temp_NFA
1630+ 6B45             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1630+ 6B43             >
1630+ 6B43 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1630+ 6B44 2B 21       >                db      "+!"               // name string in 7-bit ascii, but
1630+ 6B46             >                org     $-1                 // alter last byte of Name just above to set
1630+ 6B45 A1          >                db      {b $} | END_BIT     // msb as name end
1630+ 6B46             >
1630+ 6B46 32 6B       >                dw      last_NFA            // Link to previous definition Name
1630+ 6B48             >PLUSSTORE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1630+ 6B48 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1630+ 6B48             >                else
1630+ 6B48 4A 6B       >                dw      $ + 2   ; ok        // is pointed by CFA
1630+ 6B4A             >                endif           ; ok        // for other definitions it "points" the correct handler
1630+ 6B4A             >                // Use of "; ok" to suppress "warning[fwdref]"
1630+ 6B4A             >
1630+ 6B4A             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1631+ 6B4A E1                           pop     hl                  // hl is the address
1632+ 6B4B D1                           pop     de                  // de is the number
1633+ 6B4C 7E                           ld      a, (hl)
1634+ 6B4D 83                           add     e
1635+ 6B4E 77                           ld      (hl), a
1636+ 6B4F 23                           inc     hl
1637+ 6B50 7E                           ld      a, (hl)
1638+ 6B51 8A                           adc     d
1639+ 6B52 77                           ld      (hl), a
1640+ 6B53
1641+ 6B53                              next
1641+ 6B53 DD E9       >                jp      (ix)
1642+ 6B55
1643+ 6B55              //  ______________________________________________________________________
1644+ 6B55              //
1645+ 6B55              // toggle       a n --
1646+ 6B55              // Complements (xor) the byte at addrress  a  with the model n.
1647+ 6B55                              New_Def TOGGLE, "TOGGLE", is_code, is_normal
1647+ 6B55             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1647+ 6B55             >
1647+ 6B55             >                // dummy db directives used to calculate length of namec
1647+ 6B55 54 4F 47 47 >                db      "TOGGLE"
1647+ 6B59 4C 45       >
1647+ 6B5B             >len_NFA         defl    $ - temp_NFA
1647+ 6B5B             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1647+ 6B55             >
1647+ 6B55 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1647+ 6B56 54 4F 47 47 >                db      "TOGGLE"               // name string in 7-bit ascii, but
1647+ 6B5A 4C 45       >
1647+ 6B5C             >                org     $-1                 // alter last byte of Name just above to set
1647+ 6B5B C5          >                db      {b $} | END_BIT     // msb as name end
1647+ 6B5C             >
1647+ 6B5C 43 6B       >                dw      last_NFA            // Link to previous definition Name
1647+ 6B5E             >TOGGLE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1647+ 6B5E ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1647+ 6B5E             >                else
1647+ 6B5E 60 6B       >                dw      $ + 2   ; ok        // is pointed by CFA
1647+ 6B60             >                endif           ; ok        // for other definitions it "points" the correct handler
1647+ 6B60             >                // Use of "; ok" to suppress "warning[fwdref]"
1647+ 6B60             >
1647+ 6B60             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1648+ 6B60 D1                           pop     de
1649+ 6B61 E1                           pop     hl
1650+ 6B62 7E                           ld      a, (hl)
1651+ 6B63 AB                           xor     e
1652+ 6B64 77                           ld      (hl), a
1653+ 6B65
1654+ 6B65                              next
1654+ 6B65 DD E9       >                jp      (ix)
1655+ 6B67
1656+ 6B67              //  ______________________________________________________________________
1657+ 6B67              //
1658+ 6B67              // @            a -- n
1659+ 6B67              // fetch 16 bit number n from address a. Z80 keeps high byte is in high memory
1660+ 6B67                              New_Def FETCH, "@", is_code, is_normal
1660+ 6B67             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1660+ 6B67             >
1660+ 6B67             >                // dummy db directives used to calculate length of namec
1660+ 6B67 40          >                db      "@"
1660+ 6B68             >len_NFA         defl    $ - temp_NFA
1660+ 6B68             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1660+ 6B67             >
1660+ 6B67 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1660+ 6B68 40          >                db      "@"               // name string in 7-bit ascii, but
1660+ 6B69             >                org     $-1                 // alter last byte of Name just above to set
1660+ 6B68 C0          >                db      {b $} | END_BIT     // msb as name end
1660+ 6B69             >
1660+ 6B69 55 6B       >                dw      last_NFA            // Link to previous definition Name
1660+ 6B6B             >FETCH:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1660+ 6B6B ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1660+ 6B6B             >                else
1660+ 6B6B 6D 6B       >                dw      $ + 2   ; ok        // is pointed by CFA
1660+ 6B6D             >                endif           ; ok        // for other definitions it "points" the correct handler
1660+ 6B6D             >                // Use of "; ok" to suppress "warning[fwdref]"
1660+ 6B6D             >
1660+ 6B6D             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1661+ 6B6D E1                           pop     hl
1662+ 6B6E 5E                           ld      e, (hl)             // low-byte
1663+ 6B6F 23                           inc     hl
1664+ 6B70 56                           ld      d, (hl)             // high-byte
1665+ 6B71 D5                           push    de
1666+ 6B72                              next
1666+ 6B72 DD E9       >                jp      (ix)
1667+ 6B74
1668+ 6B74              //  ______________________________________________________________________
1669+ 6B74              //
1670+ 6B74              // !            n a --
1671+ 6B74              // store 16 bit number n from address a. Z80 keeps high byte is in high memory
1672+ 6B74                              New_Def STORE, "!", is_code, is_normal
1672+ 6B74             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1672+ 6B74             >
1672+ 6B74             >                // dummy db directives used to calculate length of namec
1672+ 6B74 21          >                db      "!"
1672+ 6B75             >len_NFA         defl    $ - temp_NFA
1672+ 6B75             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1672+ 6B74             >
1672+ 6B74 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1672+ 6B75 21          >                db      "!"               // name string in 7-bit ascii, but
1672+ 6B76             >                org     $-1                 // alter last byte of Name just above to set
1672+ 6B75 A1          >                db      {b $} | END_BIT     // msb as name end
1672+ 6B76             >
1672+ 6B76 67 6B       >                dw      last_NFA            // Link to previous definition Name
1672+ 6B78             >STORE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1672+ 6B78 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1672+ 6B78             >                else
1672+ 6B78 7A 6B       >                dw      $ + 2   ; ok        // is pointed by CFA
1672+ 6B7A             >                endif           ; ok        // for other definitions it "points" the correct handler
1672+ 6B7A             >                // Use of "; ok" to suppress "warning[fwdref]"
1672+ 6B7A             >
1672+ 6B7A             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1673+ 6B7A E1                           pop     hl                  // address
1674+ 6B7B D1                           pop     de                  // < n
1675+ 6B7C 73                           ld      (hl), e             // low-byte
1676+ 6B7D 23                           inc     hl
1677+ 6B7E 72                           ld      (hl), d             // high-byte
1678+ 6B7F
1679+ 6B7F                              next
1679+ 6B7F DD E9       >                jp      (ix)
1680+ 6B81
1681+ 6B81              //  ______________________________________________________________________
1682+ 6B81              //
1683+ 6B81              // c@           a -- c
1684+ 6B81              // fetch a character n from address a
1685+ 6B81                              New_Def CFETCH, "C@", is_code, is_normal
1685+ 6B81             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1685+ 6B81             >
1685+ 6B81             >                // dummy db directives used to calculate length of namec
1685+ 6B81 43 40       >                db      "C@"
1685+ 6B83             >len_NFA         defl    $ - temp_NFA
1685+ 6B83             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1685+ 6B81             >
1685+ 6B81 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1685+ 6B82 43 40       >                db      "C@"               // name string in 7-bit ascii, but
1685+ 6B84             >                org     $-1                 // alter last byte of Name just above to set
1685+ 6B83 C0          >                db      {b $} | END_BIT     // msb as name end
1685+ 6B84             >
1685+ 6B84 74 6B       >                dw      last_NFA            // Link to previous definition Name
1685+ 6B86             >CFETCH:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1685+ 6B86 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1685+ 6B86             >                else
1685+ 6B86 88 6B       >                dw      $ + 2   ; ok        // is pointed by CFA
1685+ 6B88             >                endif           ; ok        // for other definitions it "points" the correct handler
1685+ 6B88             >                // Use of "; ok" to suppress "warning[fwdref]"
1685+ 6B88             >
1685+ 6B88             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1686+ 6B88 E1                           pop     hl
1687+ 6B89 6E                           ld      l, (hl)             // low-byte
1688+ 6B8A 26 00                        ld      h, 0
1689+ 6B8C
1690+ 6B8C                              psh1
1690+ 6B8C E5          >                push    hl
1690+ 6B8D DD E9       >                jp      (ix)
1691+ 6B8F
1692+ 6B8F              //  ______________________________________________________________________
1693+ 6B8F              //
1694+ 6B8F              // c!           c a --
1695+ 6B8F              // fetch 16 bit number n from address a. Z80 keeps high byte is in high memory
1696+ 6B8F                              New_Def CSTORE, "C!", is_code, is_normal
1696+ 6B8F             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1696+ 6B8F             >
1696+ 6B8F             >                // dummy db directives used to calculate length of namec
1696+ 6B8F 43 21       >                db      "C!"
1696+ 6B91             >len_NFA         defl    $ - temp_NFA
1696+ 6B91             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1696+ 6B8F             >
1696+ 6B8F 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1696+ 6B90 43 21       >                db      "C!"               // name string in 7-bit ascii, but
1696+ 6B92             >                org     $-1                 // alter last byte of Name just above to set
1696+ 6B91 A1          >                db      {b $} | END_BIT     // msb as name end
1696+ 6B92             >
1696+ 6B92 81 6B       >                dw      last_NFA            // Link to previous definition Name
1696+ 6B94             >CSTORE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1696+ 6B94 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1696+ 6B94             >                else
1696+ 6B94 96 6B       >                dw      $ + 2   ; ok        // is pointed by CFA
1696+ 6B96             >                endif           ; ok        // for other definitions it "points" the correct handler
1696+ 6B96             >                // Use of "; ok" to suppress "warning[fwdref]"
1696+ 6B96             >
1696+ 6B96             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1697+ 6B96 E1                           pop     hl                  // < address
1698+ 6B97 D1                           pop     de
1699+ 6B98 73                           ld      (hl), e             // low-byte
1700+ 6B99
1701+ 6B99                              next
1701+ 6B99 DD E9       >                jp      (ix)
1702+ 6B9B
1703+ 6B9B              //  ______________________________________________________________________
1704+ 6B9B              //
1705+ 6B9B              // 2@           a -- d
1706+ 6B9B              // fetch a 32 bits number d from address a and leaves it on top of the
1707+ 6B9B              // stack as two single numbers, high part as top of the stack.
1708+ 6B9B              // A double number is normally kept in CPU registers as HLDE.
1709+ 6B9B              // On stack a double number is treated as two single numbers
1710+ 6B9B              // where BC is on the top of the stack and HL is the second from top,
1711+ 6B9B              // so the sign of the number can be checked on top of stack
1712+ 6B9B              // and in the stack memory it appears as LHED.
1713+ 6B9B                              New_Def TWO_FETCH, "2@", is_code, is_normal
1713+ 6B9B             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1713+ 6B9B             >
1713+ 6B9B             >                // dummy db directives used to calculate length of namec
1713+ 6B9B 32 40       >                db      "2@"
1713+ 6B9D             >len_NFA         defl    $ - temp_NFA
1713+ 6B9D             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1713+ 6B9B             >
1713+ 6B9B 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1713+ 6B9C 32 40       >                db      "2@"               // name string in 7-bit ascii, but
1713+ 6B9E             >                org     $-1                 // alter last byte of Name just above to set
1713+ 6B9D C0          >                db      {b $} | END_BIT     // msb as name end
1713+ 6B9E             >
1713+ 6B9E 8F 6B       >                dw      last_NFA            // Link to previous definition Name
1713+ 6BA0             >TWO_FETCH:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1713+ 6BA0 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1713+ 6BA0             >                else
1713+ 6BA0 A2 6B       >                dw      $ + 2   ; ok        // is pointed by CFA
1713+ 6BA2             >                endif           ; ok        // for other definitions it "points" the correct handler
1713+ 6BA2             >                // Use of "; ok" to suppress "warning[fwdref]"
1713+ 6BA2             >
1713+ 6BA2             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1714+ 6BA2 E1                           pop     hl                  // address
1715+ 6BA3 5E                           ld      e, (hl)             // low-byte
1716+ 6BA4 23                           inc     hl
1717+ 6BA5 56                           ld      d, (hl)             // high-byte
1718+ 6BA6
1719+ 6BA6 23                           inc     hl
1720+ 6BA7 7E                           ld      a, (hl)             // low-byte
1721+ 6BA8 23                           inc     hl
1722+ 6BA9 66                           ld      h, (hl)             // high-byte
1723+ 6BAA 6F                           ld      l, a
1724+ 6BAB E5                           push    hl
1725+ 6BAC D5                           push    de
1726+ 6BAD                              next
1726+ 6BAD DD E9       >                jp      (ix)
1727+ 6BAF
1728+ 6BAF              //  ______________________________________________________________________
1729+ 6BAF              //
1730+ 6BAF              // 2!           d a --
1731+ 6BAF              // stores a 32 bits number d from address a and leaves it on top of the
1732+ 6BAF              // stack as two single numbers, high part as top of the stack.
1733+ 6BAF              // A double number is normally kept in CPU registers as HLDE.
1734+ 6BAF              // On stack a double number is treated as two single numbers
1735+ 6BAF              // where BC is on the top of the stack and HL is the second from top,
1736+ 6BAF              // so the sign of the number can be checked on top of stack
1737+ 6BAF              // and in the stack memory it appears as LHED.
1738+ 6BAF                              New_Def TWO_STORE, "2!", is_code, is_normal
1738+ 6BAF             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1738+ 6BAF             >
1738+ 6BAF             >                // dummy db directives used to calculate length of namec
1738+ 6BAF 32 21       >                db      "2!"
1738+ 6BB1             >len_NFA         defl    $ - temp_NFA
1738+ 6BB1             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1738+ 6BAF             >
1738+ 6BAF 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1738+ 6BB0 32 21       >                db      "2!"               // name string in 7-bit ascii, but
1738+ 6BB2             >                org     $-1                 // alter last byte of Name just above to set
1738+ 6BB1 A1          >                db      {b $} | END_BIT     // msb as name end
1738+ 6BB2             >
1738+ 6BB2 9B 6B       >                dw      last_NFA            // Link to previous definition Name
1738+ 6BB4             >TWO_STORE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1738+ 6BB4 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1738+ 6BB4             >                else
1738+ 6BB4 B6 6B       >                dw      $ + 2   ; ok        // is pointed by CFA
1738+ 6BB6             >                endif           ; ok        // for other definitions it "points" the correct handler
1738+ 6BB6             >                // Use of "; ok" to suppress "warning[fwdref]"
1738+ 6BB6             >
1738+ 6BB6             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1739+ 6BB6 D9                           exx
1740+ 6BB7 E1                           pop     hl                  // address
1741+ 6BB8 C1                           pop     bc                  // < high-part
1742+ 6BB9 D1                           pop     de                  // < low-part > Instruction Pointer
1743+ 6BBA 71                           ld      (hl), c
1744+ 6BBB 23                           inc     hl
1745+ 6BBC 70                           ld      (hl), b
1746+ 6BBD 23                           inc     hl
1747+ 6BBE 73                           ld      (hl), e
1748+ 6BBF 23                           inc     hl
1749+ 6BC0 72                           ld      (hl), d
1750+ 6BC1 D9                           exx
1751+ 6BC2                              next
1751+ 6BC2 DD E9       >                jp      (ix)
1752+ 6BC4
1753+ 6BC4              //  ______________________________________________________________________
1754+ 6BC4              //
1755+ 6BC4              // p@           a -- c
1756+ 6BC4              // Read one byte from port a and leave the result on top of stack
1757+ 6BC4                              New_Def PFETCH, "P@", is_code, is_normal
1757+ 6BC4             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1757+ 6BC4             >
1757+ 6BC4             >                // dummy db directives used to calculate length of namec
1757+ 6BC4 50 40       >                db      "P@"
1757+ 6BC6             >len_NFA         defl    $ - temp_NFA
1757+ 6BC6             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1757+ 6BC4             >
1757+ 6BC4 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1757+ 6BC5 50 40       >                db      "P@"               // name string in 7-bit ascii, but
1757+ 6BC7             >                org     $-1                 // alter last byte of Name just above to set
1757+ 6BC6 C0          >                db      {b $} | END_BIT     // msb as name end
1757+ 6BC7             >
1757+ 6BC7 AF 6B       >                dw      last_NFA            // Link to previous definition Name
1757+ 6BC9             >PFETCH:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1757+ 6BC9 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1757+ 6BC9             >                else
1757+ 6BC9 CB 6B       >                dw      $ + 2   ; ok        // is pointed by CFA
1757+ 6BCB             >                endif           ; ok        // for other definitions it "points" the correct handler
1757+ 6BCB             >                // Use of "; ok" to suppress "warning[fwdref]"
1757+ 6BCB             >
1757+ 6BCB             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1758+ 6BCB D9                           exx
1759+ 6BCC C1                           pop     bc
1760+ 6BCD 26 00                        ld      h, 0
1761+ 6BCF ED 68                        in      l, (c)
1762+ 6BD1 E5                           push    hl
1763+ 6BD2 D9                           exx
1764+ 6BD3                              next
1764+ 6BD3 DD E9       >                jp      (ix)
1765+ 6BD5
1766+ 6BD5              //  ______________________________________________________________________
1767+ 6BD5              //
1768+ 6BD5              // p!           c a --
1769+ 6BD5              // Send one byte (top of stack) to port a
1770+ 6BD5                              New_Def PSTORE, "P!", is_code, is_normal
1770+ 6BD5             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1770+ 6BD5             >
1770+ 6BD5             >                // dummy db directives used to calculate length of namec
1770+ 6BD5 50 21       >                db      "P!"
1770+ 6BD7             >len_NFA         defl    $ - temp_NFA
1770+ 6BD7             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1770+ 6BD5             >
1770+ 6BD5 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1770+ 6BD6 50 21       >                db      "P!"               // name string in 7-bit ascii, but
1770+ 6BD8             >                org     $-1                 // alter last byte of Name just above to set
1770+ 6BD7 A1          >                db      {b $} | END_BIT     // msb as name end
1770+ 6BD8             >
1770+ 6BD8 C4 6B       >                dw      last_NFA            // Link to previous definition Name
1770+ 6BDA             >PSTORE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1770+ 6BDA ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1770+ 6BDA             >                else
1770+ 6BDA DC 6B       >                dw      $ + 2   ; ok        // is pointed by CFA
1770+ 6BDC             >                endif           ; ok        // for other definitions it "points" the correct handler
1770+ 6BDC             >                // Use of "; ok" to suppress "warning[fwdref]"
1770+ 6BDC             >
1770+ 6BDC             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1771+ 6BDC D9                           exx
1772+ 6BDD C1                           pop     bc
1773+ 6BDE E1                           pop     hl                  // < c
1774+ 6BDF ED 69                        out     (c), l              // low-byte
1775+ 6BE1 D9                           exx
1776+ 6BE2                              next
1776+ 6BE2 DD E9       >                jp      (ix)
1777+ 6BE4
1778+ 6BE4
1779+ 6BE4              //  ______________________________________________________________________
1780+ 6BE4              //
1781+ 6BE4              // 2*           n1 -- n2
1782+ 6BE4              // doubles the number at top of stack
1783+ 6BE4                              New_Def TWO_MUL, "2*", is_code, is_normal
1783+ 6BE4             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1783+ 6BE4             >
1783+ 6BE4             >                // dummy db directives used to calculate length of namec
1783+ 6BE4 32 2A       >                db      "2*"
1783+ 6BE6             >len_NFA         defl    $ - temp_NFA
1783+ 6BE6             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1783+ 6BE4             >
1783+ 6BE4 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1783+ 6BE5 32 2A       >                db      "2*"               // name string in 7-bit ascii, but
1783+ 6BE7             >                org     $-1                 // alter last byte of Name just above to set
1783+ 6BE6 AA          >                db      {b $} | END_BIT     // msb as name end
1783+ 6BE7             >
1783+ 6BE7 D5 6B       >                dw      last_NFA            // Link to previous definition Name
1783+ 6BE9             >TWO_MUL:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1783+ 6BE9 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1783+ 6BE9             >                else
1783+ 6BE9 EB 6B       >                dw      $ + 2   ; ok        // is pointed by CFA
1783+ 6BEB             >                endif           ; ok        // for other definitions it "points" the correct handler
1783+ 6BEB             >                // Use of "; ok" to suppress "warning[fwdref]"
1783+ 6BEB             >
1783+ 6BEB             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1784+ 6BEB              Two_Mul_Ptr:
1785+ 6BEB E1                           pop     hl
1786+ 6BEC 29                           add     hl, hl
1787+ 6BED
1788+ 6BED                              psh1
1788+ 6BED E5          >                push    hl
1788+ 6BEE DD E9       >                jp      (ix)
1789+ 6BF0
1790+ 6BF0              //  ______________________________________________________________________
1791+ 6BF0              //
1792+ 6BF0              // 2/           n1 -- n2
1793+ 6BF0              // halves the top of stack, sign is unchanged
1794+ 6BF0                              New_Def TWO_DIV, "2/", is_code, is_normal
1794+ 6BF0             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1794+ 6BF0             >
1794+ 6BF0             >                // dummy db directives used to calculate length of namec
1794+ 6BF0 32 2F       >                db      "2/"
1794+ 6BF2             >len_NFA         defl    $ - temp_NFA
1794+ 6BF2             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1794+ 6BF0             >
1794+ 6BF0 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1794+ 6BF1 32 2F       >                db      "2/"               // name string in 7-bit ascii, but
1794+ 6BF3             >                org     $-1                 // alter last byte of Name just above to set
1794+ 6BF2 AF          >                db      {b $} | END_BIT     // msb as name end
1794+ 6BF3             >
1794+ 6BF3 E4 6B       >                dw      last_NFA            // Link to previous definition Name
1794+ 6BF5             >TWO_DIV:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1794+ 6BF5 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1794+ 6BF5             >                else
1794+ 6BF5 F7 6B       >                dw      $ + 2   ; ok        // is pointed by CFA
1794+ 6BF7             >                endif           ; ok        // for other definitions it "points" the correct handler
1794+ 6BF7             >                // Use of "; ok" to suppress "warning[fwdref]"
1794+ 6BF7             >
1794+ 6BF7             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1795+ 6BF7 E1                           pop     hl
1796+ 6BF8 CB 2C                        sra     h
1797+ 6BFA CB 1D                        rr      l
1798+ 6BFC
1799+ 6BFC                              psh1
1799+ 6BFC E5          >                push    hl
1799+ 6BFD DD E9       >                jp      (ix)
1800+ 6BFF
1801+ 6BFF              //  ______________________________________________________________________
1802+ 6BFF              //
1803+ 6BFF              // lshift       n1 u -- n2
1804+ 6BFF              // bit left shift of u bits
1805+ 6BFF                              New_Def LSHIFT, "LSHIFT", is_code, is_normal
1805+ 6BFF             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1805+ 6BFF             >
1805+ 6BFF             >                // dummy db directives used to calculate length of namec
1805+ 6BFF 4C 53 48 49 >                db      "LSHIFT"
1805+ 6C03 46 54       >
1805+ 6C05             >len_NFA         defl    $ - temp_NFA
1805+ 6C05             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1805+ 6BFF             >
1805+ 6BFF 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1805+ 6C00 4C 53 48 49 >                db      "LSHIFT"               // name string in 7-bit ascii, but
1805+ 6C04 46 54       >
1805+ 6C06             >                org     $-1                 // alter last byte of Name just above to set
1805+ 6C05 D4          >                db      {b $} | END_BIT     // msb as name end
1805+ 6C06             >
1805+ 6C06 F0 6B       >                dw      last_NFA            // Link to previous definition Name
1805+ 6C08             >LSHIFT:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1805+ 6C08 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1805+ 6C08             >                else
1805+ 6C08 0A 6C       >                dw      $ + 2   ; ok        // is pointed by CFA
1805+ 6C0A             >                endif           ; ok        // for other definitions it "points" the correct handler
1805+ 6C0A             >                // Use of "; ok" to suppress "warning[fwdref]"
1805+ 6C0A             >
1805+ 6C0A             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1806+ 6C0A D1                           pop     de
1807+ 6C0B
1808+ 6C0B E1                           pop     hl
1809+ 6C0C 7B                           ld      a, e
1810+ 6C0D B7                           or      a
1811+ 6C0E 28 04                        jr      z, Lshift_Zero
1812+ 6C10              Lshift_Loop:
1813+ 6C10 29                                   add     hl, hl
1814+ 6C11 3D                                   dec     a
1815+ 6C12 20 FC                            jr      nz, Lshift_Loop
1816+ 6C14              Lshift_Zero:
1817+ 6C14
1818+ 6C14
1819+ 6C14                              psh1
1819+ 6C14 E5          >                push    hl
1819+ 6C15 DD E9       >                jp      (ix)
1820+ 6C17
1821+ 6C17              //  ______________________________________________________________________
1822+ 6C17              //
1823+ 6C17              // rshift       n1 u -- n2
1824+ 6C17              // bit right shift of u bits
1825+ 6C17                              New_Def RSHIFT, "RSHIFT", is_code, is_normal
1825+ 6C17             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1825+ 6C17             >
1825+ 6C17             >                // dummy db directives used to calculate length of namec
1825+ 6C17 52 53 48 49 >                db      "RSHIFT"
1825+ 6C1B 46 54       >
1825+ 6C1D             >len_NFA         defl    $ - temp_NFA
1825+ 6C1D             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1825+ 6C17             >
1825+ 6C17 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1825+ 6C18 52 53 48 49 >                db      "RSHIFT"               // name string in 7-bit ascii, but
1825+ 6C1C 46 54       >
1825+ 6C1E             >                org     $-1                 // alter last byte of Name just above to set
1825+ 6C1D D4          >                db      {b $} | END_BIT     // msb as name end
1825+ 6C1E             >
1825+ 6C1E FF 6B       >                dw      last_NFA            // Link to previous definition Name
1825+ 6C20             >RSHIFT:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1825+ 6C20 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1825+ 6C20             >                else
1825+ 6C20 22 6C       >                dw      $ + 2   ; ok        // is pointed by CFA
1825+ 6C22             >                endif           ; ok        // for other definitions it "points" the correct handler
1825+ 6C22             >                // Use of "; ok" to suppress "warning[fwdref]"
1825+ 6C22             >
1825+ 6C22             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1826+ 6C22 D1                           pop     de
1827+ 6C23
1828+ 6C23 E1                           pop     hl
1829+ 6C24 7B                           ld      a, e
1830+ 6C25 B7                           or      a
1831+ 6C26 28 07                        jr      z, Rshift_Zero
1832+ 6C28              Rshift_Loop:
1833+ 6C28 CB 3C                                srl     h
1834+ 6C2A CB 1D                                rr      l
1835+ 6C2C 3D                                   dec     a
1836+ 6C2D 20 F9                            jr      nz, Rshift_Loop
1837+ 6C2F              Rshift_Zero:
1838+ 6C2F
1839+ 6C2F
1840+ 6C2F                              psh1
1840+ 6C2F E5          >                push    hl
1840+ 6C30 DD E9       >                jp      (ix)
1841+ 6C32
1842+ 6C32              //  ______________________________________________________________________
1843+ 6C32              //
1844+ 6C32              // cells        n1 -- n2
1845+ 6C32              // decrement by 2 top of stack
1846+ 6C32                              New_Def CELLS, "CELLS", Two_Mul_Ptr, is_normal
1846+ 6C32             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1846+ 6C32             >
1846+ 6C32             >                // dummy db directives used to calculate length of namec
1846+ 6C32 43 45 4C 4C >                db      "CELLS"
1846+ 6C36 53          >
1846+ 6C37             >len_NFA         defl    $ - temp_NFA
1846+ 6C37             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1846+ 6C32             >
1846+ 6C32 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1846+ 6C33 43 45 4C 4C >                db      "CELLS"               // name string in 7-bit ascii, but
1846+ 6C37 53          >
1846+ 6C38             >                org     $-1                 // alter last byte of Name just above to set
1846+ 6C37 D3          >                db      {b $} | END_BIT     // msb as name end
1846+ 6C38             >
1846+ 6C38 17 6C       >                dw      last_NFA            // Link to previous definition Name
1846+ 6C3A             >CELLS:          if Two_Mul_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1846+ 6C3A EB 6B       >                dw      Two_Mul_Ptr ; ok        // for primitive definitions  actual code
1846+ 6C3C             >                else
1846+ 6C3C ~           >                dw      $ + 2   ; ok        // is pointed by CFA
1846+ 6C3C             >                endif           ; ok        // for other definitions it "points" the correct handler
1846+ 6C3C             >                // Use of "; ok" to suppress "warning[fwdref]"
1846+ 6C3C             >
1846+ 6C3C             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1847+ 6C3C
1848+ 6C3C
1849+ 6C3C              //  ______________________________________________________________________
1850+ 6C3C
# file closed: C:\Zx\CSpect\Projects\vForth15_INDIRECT/source/L0.asm
 110  6C3C                              include "L1.asm"
# file opened: C:\Zx\CSpect\Projects\vForth15_INDIRECT/source/L1.asm
   1+ 6C3C              //  ______________________________________________________________________
   2+ 6C3C              //
   3+ 6C3C              //  L1.asm
   4+ 6C3C              //
   5+ 6C3C              //  Level-1 definitions and derivate
   6+ 6C3C              //  ______________________________________________________________________
   7+ 6C3C
   8+ 6C3C              //  ______________________________________________________________________
   9+ 6C3C              //
  10+ 6C3C              // :            -- cccc     ( compile time )
  11+ 6C3C              //              i*x -- j*x  ( run time )
  12+ 6C3C              // Colon Definition
  13+ 6C3C                              Colon_Def COLON, ":", is_immediate      // has forward-ref
  13+ 6C3C             >                New_Def  COLON, ":", Enter_Ptr, is_immediate ; ok
  13+ 6C3C             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  13+ 6C3C             >
  13+ 6C3C             >                // dummy db directives used to calculate length of namec
  13+ 6C3C 3A          >                db      ":"
  13+ 6C3D             >len_NFA         defl    $ - temp_NFA
  13+ 6C3D             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  13+ 6C3C             >
  13+ 6C3C C1          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
  13+ 6C3D 3A          >                db      ":"               // name string in 7-bit ascii, but
  13+ 6C3E             >                org     $-1                 // alter last byte of Name just above to set
  13+ 6C3D BA          >                db      {b $} | END_BIT     // msb as name end
  13+ 6C3E             >
  13+ 6C3E 32 6C       >                dw      last_NFA            // Link to previous definition Name
  13+ 6C40             >COLON:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
  13+ 6C40 56 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
  13+ 6C42             >                else
  13+ 6C42 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
  13+ 6C42             >                endif           ; ok        // for other definitions it "points" the correct handler
  13+ 6C42             >                // Use of "; ok" to suppress "warning[fwdref]"
  13+ 6C42             >
  13+ 6C42             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  14+ 6C42
  15+ 6C42 AC 70                        dw      QEXEC                   // ?exec
  16+ 6C44 67 70                        dw      STORE_CSP               // !csp
  17+ 6C46 11 6E 6B 6B                  dw      CURRENT, FETCH          // current @
  18+ 6C4A 04 6E 78 6B                  dw      CONTEXT, STORE          // context !
  19+ 6C4E AA 76                        dw      CREATE                  // create  ( forward )
  20+ 6C50 59 71                        dw      SMUDGE                  // dmudge
  21+ 6C52 44 71                        dw      SQUARED_CLOSE           // ]
  22+ 6C54 AF 71                        dw      C_SEMICOLON_CODE        // ;code ( change the 3-bytes CFA of defining word to call Enter_Ptr )
  23+ 6C56                                                              // ... immediate
  24+ 6C56              Enter_Ptr:
  25+ 6C56                              // via call coded in CFA
  26+ 6C56                              ldhlrp
  26+ 6C56 2A 96 63    >                ld      hl,(RP_Pointer)
  27+ 6C59 2B                           dec     hl                  // push on Return-Stack current Instruction-Pointer
  28+ 6C5A 70                           ld      (hl), b
  29+ 6C5B 2B                           dec     hl
  30+ 6C5C 71                           ld      (hl), c
  31+ 6C5D                              ldrphl
  31+ 6C5D 22 96 63    >                ld      (RP_Pointer),hl
  32+ 6C60 13                           inc     de
  33+ 6C61 4B                           ld      c, e
  34+ 6C62 42                           ld      b, d
  35+ 6C63                              next
  35+ 6C63 DD E9       >                jp      (ix)
  36+ 6C65
  37+ 6C65              //  ______________________________________________________________________
  38+ 6C65              //
  39+ 6C65              // ;            --
  40+ 6C65              // Semicolon. End of Colon-Definition. Stack must be balanced.
  41+ 6C65                              Colon_Def SEMICOLON, ";", is_immediate   // has forward-ref
  41+ 6C65             >                New_Def  SEMICOLON, ";", Enter_Ptr, is_immediate ; ok
  41+ 6C65             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  41+ 6C65             >
  41+ 6C65             >                // dummy db directives used to calculate length of namec
  41+ 6C65 3B          >                db      ";"
  41+ 6C66             >len_NFA         defl    $ - temp_NFA
  41+ 6C66             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  41+ 6C65             >
  41+ 6C65 C1          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
  41+ 6C66 3B          >                db      ";"               // name string in 7-bit ascii, but
  41+ 6C67             >                org     $-1                 // alter last byte of Name just above to set
  41+ 6C66 BB          >                db      {b $} | END_BIT     // msb as name end
  41+ 6C67             >
  41+ 6C67 3C 6C       >                dw      last_NFA            // Link to previous definition Name
  41+ 6C69             >SEMICOLON:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
  41+ 6C69 56 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
  41+ 6C6B             >                else
  41+ 6C6B ~           >                dw      $ + 2   ; ok        // is pointed by CFA
  41+ 6C6B             >                endif           ; ok        // for other definitions it "points" the correct handler
  41+ 6C6B             >                // Use of "; ok" to suppress "warning[fwdref]"
  41+ 6C6B             >
  41+ 6C6B             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  42+ 6C6B
  43+ 6C6B D6 70                        dw      QCSP                    // ?csp
  44+ 6C6D 0D 71 52 69                  dw      COMPILE, EXIT           // [compile] ;s
  45+ 6C71 59 71                        dw      SMUDGE                  // smudge
  46+ 6C73 36 71                        dw      SQUARED_OPEN            // [
  47+ 6C75 52 69                        dw      EXIT                    // ; immediate
  48+ 6C77
  49+ 6C77              //  ______________________________________________________________________
  50+ 6C77              //
  51+ 6C77              // noop         --
  52+ 6C77
  53+ 6C77                              Colon_Def NOOP, "NOOP", is_normal
  53+ 6C77             >                New_Def  NOOP, "NOOP", Enter_Ptr, is_normal ; ok
  53+ 6C77             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  53+ 6C77             >
  53+ 6C77             >                // dummy db directives used to calculate length of namec
  53+ 6C77 4E 4F 4F 50 >                db      "NOOP"
  53+ 6C7B             >len_NFA         defl    $ - temp_NFA
  53+ 6C7B             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  53+ 6C77             >
  53+ 6C77 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  53+ 6C78 4E 4F 4F 50 >                db      "NOOP"               // name string in 7-bit ascii, but
  53+ 6C7C             >                org     $-1                 // alter last byte of Name just above to set
  53+ 6C7B D0          >                db      {b $} | END_BIT     // msb as name end
  53+ 6C7C             >
  53+ 6C7C 65 6C       >                dw      last_NFA            // Link to previous definition Name
  53+ 6C7E             >NOOP:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
  53+ 6C7E 56 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
  53+ 6C80             >                else
  53+ 6C80 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
  53+ 6C80             >                endif           ; ok        // for other definitions it "points" the correct handler
  53+ 6C80             >                // Use of "; ok" to suppress "warning[fwdref]"
  53+ 6C80             >
  53+ 6C80             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  54+ 6C80 52 69                        dw      EXIT
  55+ 6C82
  56+ 6C82              //  ______________________________________________________________________
  57+ 6C82              //
  58+ 6C82              // constant     n -- cccc     ( compile time )
  59+ 6C82              //              -- n          ( run time )
  60+ 6C82              // Constant definition.
  61+ 6C82                              Colon_Def CONSTANT, "CONSTANT", is_normal   // has forward-ref
  61+ 6C82             >                New_Def  CONSTANT, "CONSTANT", Enter_Ptr, is_normal ; ok
  61+ 6C82             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  61+ 6C82             >
  61+ 6C82             >                // dummy db directives used to calculate length of namec
  61+ 6C82 43 4F 4E 53 >                db      "CONSTANT"
  61+ 6C86 54 41 4E 54 >
  61+ 6C8A             >len_NFA         defl    $ - temp_NFA
  61+ 6C8A             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  61+ 6C82             >
  61+ 6C82 88          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  61+ 6C83 43 4F 4E 53 >                db      "CONSTANT"               // name string in 7-bit ascii, but
  61+ 6C87 54 41 4E 54 >
  61+ 6C8B             >                org     $-1                 // alter last byte of Name just above to set
  61+ 6C8A D4          >                db      {b $} | END_BIT     // msb as name end
  61+ 6C8B             >
  61+ 6C8B 77 6C       >                dw      last_NFA            // Link to previous definition Name
  61+ 6C8D             >CONSTANT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
  61+ 6C8D 56 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
  61+ 6C8F             >                else
  61+ 6C8F ~           >                dw      $ + 2   ; ok        // is pointed by CFA
  61+ 6C8F             >                endif           ; ok        // for other definitions it "points" the correct handler
  61+ 6C8F             >                // Use of "; ok" to suppress "warning[fwdref]"
  61+ 6C8F             >
  61+ 6C8F             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  62+ 6C8F
  63+ 6C8F AA 76                        dw      CREATE                  // create
  64+ 6C91 CC 6E                        dw      COMMA                   // ,    ( at PFA then, store the value )
  65+ 6C93 AF 71                        dw      C_SEMICOLON_CODE        // ;code (  changes the 3-bytes CFA to call Constant_Ptr )
  66+ 6C95              Constant_Ptr:
  67+ 6C95
  68+ 6C95 13                           inc     de
  69+ 6C96 EB                           ex      de, hl
  70+ 6C97
  71+ 6C97 5E                           ld      e, (hl)
  72+ 6C98 23                           inc     hl
  73+ 6C99 56                           ld      d, (hl)
  74+ 6C9A D5                           push    de
  75+ 6C9B                              next
  75+ 6C9B DD E9       >                jp      (ix)
  76+ 6C9D
  77+ 6C9D              //  ______________________________________________________________________
  78+ 6C9D              //
  79+ 6C9D              // variable     n -- cccc     ( compile time )
  80+ 6C9D              //              -- a          ( run time )
  81+ 6C9D              // Variable definition, n is the initial value.
  82+ 6C9D                              Colon_Def VARIABLE, "VARIABLE", is_normal   // has forward-ref
  82+ 6C9D             >                New_Def  VARIABLE, "VARIABLE", Enter_Ptr, is_normal ; ok
  82+ 6C9D             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  82+ 6C9D             >
  82+ 6C9D             >                // dummy db directives used to calculate length of namec
  82+ 6C9D 56 41 52 49 >                db      "VARIABLE"
  82+ 6CA1 41 42 4C 45 >
  82+ 6CA5             >len_NFA         defl    $ - temp_NFA
  82+ 6CA5             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  82+ 6C9D             >
  82+ 6C9D 88          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  82+ 6C9E 56 41 52 49 >                db      "VARIABLE"               // name string in 7-bit ascii, but
  82+ 6CA2 41 42 4C 45 >
  82+ 6CA6             >                org     $-1                 // alter last byte of Name just above to set
  82+ 6CA5 C5          >                db      {b $} | END_BIT     // msb as name end
  82+ 6CA6             >
  82+ 6CA6 82 6C       >                dw      last_NFA            // Link to previous definition Name
  82+ 6CA8             >VARIABLE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
  82+ 6CA8 56 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
  82+ 6CAA             >                else
  82+ 6CAA ~           >                dw      $ + 2   ; ok        // is pointed by CFA
  82+ 6CAA             >                endif           ; ok        // for other definitions it "points" the correct handler
  82+ 6CAA             >                // Use of "; ok" to suppress "warning[fwdref]"
  82+ 6CAA             >
  82+ 6CAA             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  83+ 6CAA
  84+ 6CAA 8D 6C                        dw      CONSTANT                // constant
  85+ 6CAC AF 71                        dw      C_SEMICOLON_CODE        // ;code ( changes the 3-bytes CFA to call Variable_Ptr )
  86+ 6CAE              Variable_Ptr:
  87+ 6CAE
  88+ 6CAE 13                           inc     de
  89+ 6CAF D5                           push    de                  // balance TOS before overwrite it
  90+ 6CB0
  91+ 6CB0                              next
  91+ 6CB0 DD E9       >                jp      (ix)
  92+ 6CB2
  93+ 6CB2              //  ______________________________________________________________________
  94+ 6CB2              //
  95+ 6CB2              // user         b -- cccc     ( compile time )
  96+ 6CB2              //              -- a          ( run time )
  97+ 6CB2              // User variable definition
  98+ 6CB2                              Colon_Def USER, "USER", is_normal
  98+ 6CB2             >                New_Def  USER, "USER", Enter_Ptr, is_normal ; ok
  98+ 6CB2             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  98+ 6CB2             >
  98+ 6CB2             >                // dummy db directives used to calculate length of namec
  98+ 6CB2 55 53 45 52 >                db      "USER"
  98+ 6CB6             >len_NFA         defl    $ - temp_NFA
  98+ 6CB6             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  98+ 6CB2             >
  98+ 6CB2 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  98+ 6CB3 55 53 45 52 >                db      "USER"               // name string in 7-bit ascii, but
  98+ 6CB7             >                org     $-1                 // alter last byte of Name just above to set
  98+ 6CB6 D2          >                db      {b $} | END_BIT     // msb as name end
  98+ 6CB7             >
  98+ 6CB7 9D 6C       >                dw      last_NFA            // Link to previous definition Name
  98+ 6CB9             >USER:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
  98+ 6CB9 56 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
  98+ 6CBB             >                else
  98+ 6CBB ~           >                dw      $ + 2   ; ok        // is pointed by CFA
  98+ 6CBB             >                endif           ; ok        // for other definitions it "points" the correct handler
  98+ 6CBB             >                // Use of "; ok" to suppress "warning[fwdref]"
  98+ 6CBB             >
  98+ 6CBB             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  99+ 6CBB
 100+ 6CBB AA 76                        dw      CREATE                  // create
 101+ 6CBD DD 6E                        dw      CCOMMA                  // c,
 102+ 6CBF AF 71                        dw      C_SEMICOLON_CODE        // ;code () changes the 3-bytes CFA to call User_Ptr )
 103+ 6CC1
 104+ 6CC1
 105+ 6CC1              User_Ptr:
 106+ 6CC1                              // via call coded in CFA
 107+ 6CC1 13                           inc     de
 108+ 6CC2 EB                           ex      de, hl
 109+ 6CC3 5E                           ld      e, (hl)
 110+ 6CC4 16 00                        ld      d, 0
 111+ 6CC6 2A 94 63                     ld      hl, (USER_Pointer)
 112+ 6CC9 19                           add     hl, de
 113+ 6CCA
 114+ 6CCA                              psh1
 114+ 6CCA E5          >                push    hl
 114+ 6CCB DD E9       >                jp      (ix)
 115+ 6CCD
 116+ 6CCD              //  ______________________________________________________________________
 117+ 6CCD              //
 118+ 6CCD                              Constant_Def ZERO       ,   "0"     ,   0
 118+ 6CCD             >                New_Def  ZERO, "0", Constant_Ptr, is_normal
 118+ 6CCD             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 118+ 6CCD             >
 118+ 6CCD             >                // dummy db directives used to calculate length of namec
 118+ 6CCD 30          >                db      "0"
 118+ 6CCE             >len_NFA         defl    $ - temp_NFA
 118+ 6CCE             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 118+ 6CCD             >
 118+ 6CCD 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 118+ 6CCE 30          >                db      "0"               // name string in 7-bit ascii, but
 118+ 6CCF             >                org     $-1                 // alter last byte of Name just above to set
 118+ 6CCE B0          >                db      {b $} | END_BIT     // msb as name end
 118+ 6CCF             >
 118+ 6CCF B2 6C       >                dw      last_NFA            // Link to previous definition Name
 118+ 6CD1             >ZERO:          if Constant_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 118+ 6CD1 95 6C       >                dw      Constant_Ptr ; ok        // for primitive definitions  actual code
 118+ 6CD3             >                else
 118+ 6CD3 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 118+ 6CD3             >                endif           ; ok        // for other definitions it "points" the correct handler
 118+ 6CD3             >                // Use of "; ok" to suppress "warning[fwdref]"
 118+ 6CD3             >
 118+ 6CD3             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 118+ 6CD3 00 00       >                dw      0
 119+ 6CD5                              Constant_Def ONE        ,   "1"     ,   1
 119+ 6CD5             >                New_Def  ONE, "1", Constant_Ptr, is_normal
 119+ 6CD5             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 119+ 6CD5             >
 119+ 6CD5             >                // dummy db directives used to calculate length of namec
 119+ 6CD5 31          >                db      "1"
 119+ 6CD6             >len_NFA         defl    $ - temp_NFA
 119+ 6CD6             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 119+ 6CD5             >
 119+ 6CD5 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 119+ 6CD6 31          >                db      "1"               // name string in 7-bit ascii, but
 119+ 6CD7             >                org     $-1                 // alter last byte of Name just above to set
 119+ 6CD6 B1          >                db      {b $} | END_BIT     // msb as name end
 119+ 6CD7             >
 119+ 6CD7 CD 6C       >                dw      last_NFA            // Link to previous definition Name
 119+ 6CD9             >ONE:          if Constant_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 119+ 6CD9 95 6C       >                dw      Constant_Ptr ; ok        // for primitive definitions  actual code
 119+ 6CDB             >                else
 119+ 6CDB ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 119+ 6CDB             >                endif           ; ok        // for other definitions it "points" the correct handler
 119+ 6CDB             >                // Use of "; ok" to suppress "warning[fwdref]"
 119+ 6CDB             >
 119+ 6CDB             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 119+ 6CDB 01 00       >                dw      1
 120+ 6CDD                              Constant_Def TWO        ,   "2"     ,   2
 120+ 6CDD             >                New_Def  TWO, "2", Constant_Ptr, is_normal
 120+ 6CDD             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 120+ 6CDD             >
 120+ 6CDD             >                // dummy db directives used to calculate length of namec
 120+ 6CDD 32          >                db      "2"
 120+ 6CDE             >len_NFA         defl    $ - temp_NFA
 120+ 6CDE             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 120+ 6CDD             >
 120+ 6CDD 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 120+ 6CDE 32          >                db      "2"               // name string in 7-bit ascii, but
 120+ 6CDF             >                org     $-1                 // alter last byte of Name just above to set
 120+ 6CDE B2          >                db      {b $} | END_BIT     // msb as name end
 120+ 6CDF             >
 120+ 6CDF D5 6C       >                dw      last_NFA            // Link to previous definition Name
 120+ 6CE1             >TWO:          if Constant_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 120+ 6CE1 95 6C       >                dw      Constant_Ptr ; ok        // for primitive definitions  actual code
 120+ 6CE3             >                else
 120+ 6CE3 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 120+ 6CE3             >                endif           ; ok        // for other definitions it "points" the correct handler
 120+ 6CE3             >                // Use of "; ok" to suppress "warning[fwdref]"
 120+ 6CE3             >
 120+ 6CE3             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 120+ 6CE3 02 00       >                dw      2
 121+ 6CE5                              Constant_Def THREE      ,   "3"     ,   3
 121+ 6CE5             >                New_Def  THREE, "3", Constant_Ptr, is_normal
 121+ 6CE5             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 121+ 6CE5             >
 121+ 6CE5             >                // dummy db directives used to calculate length of namec
 121+ 6CE5 33          >                db      "3"
 121+ 6CE6             >len_NFA         defl    $ - temp_NFA
 121+ 6CE6             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 121+ 6CE5             >
 121+ 6CE5 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 121+ 6CE6 33          >                db      "3"               // name string in 7-bit ascii, but
 121+ 6CE7             >                org     $-1                 // alter last byte of Name just above to set
 121+ 6CE6 B3          >                db      {b $} | END_BIT     // msb as name end
 121+ 6CE7             >
 121+ 6CE7 DD 6C       >                dw      last_NFA            // Link to previous definition Name
 121+ 6CE9             >THREE:          if Constant_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 121+ 6CE9 95 6C       >                dw      Constant_Ptr ; ok        // for primitive definitions  actual code
 121+ 6CEB             >                else
 121+ 6CEB ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 121+ 6CEB             >                endif           ; ok        // for other definitions it "points" the correct handler
 121+ 6CEB             >                // Use of "; ok" to suppress "warning[fwdref]"
 121+ 6CEB             >
 121+ 6CEB             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 121+ 6CEB 03 00       >                dw      3
 122+ 6CED                              Constant_Def NEG_ONE    ,   "-1"    ,  -1
 122+ 6CED             >                New_Def  NEG_ONE, "-1", Constant_Ptr, is_normal
 122+ 6CED             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 122+ 6CED             >
 122+ 6CED             >                // dummy db directives used to calculate length of namec
 122+ 6CED 2D 31       >                db      "-1"
 122+ 6CEF             >len_NFA         defl    $ - temp_NFA
 122+ 6CEF             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 122+ 6CED             >
 122+ 6CED 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 122+ 6CEE 2D 31       >                db      "-1"               // name string in 7-bit ascii, but
 122+ 6CF0             >                org     $-1                 // alter last byte of Name just above to set
 122+ 6CEF B1          >                db      {b $} | END_BIT     // msb as name end
 122+ 6CF0             >
 122+ 6CF0 E5 6C       >                dw      last_NFA            // Link to previous definition Name
 122+ 6CF2             >NEG_ONE:          if Constant_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 122+ 6CF2 95 6C       >                dw      Constant_Ptr ; ok        // for primitive definitions  actual code
 122+ 6CF4             >                else
 122+ 6CF4 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 122+ 6CF4             >                endif           ; ok        // for other definitions it "points" the correct handler
 122+ 6CF4             >                // Use of "; ok" to suppress "warning[fwdref]"
 122+ 6CF4             >
 122+ 6CF4             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 122+ 6CF4 FF FF       >                dw      -1
 123+ 6CF6                              Constant_Def BL         ,   "BL"    , $20
 123+ 6CF6             >                New_Def  BL, "BL", Constant_Ptr, is_normal
 123+ 6CF6             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 123+ 6CF6             >
 123+ 6CF6             >                // dummy db directives used to calculate length of namec
 123+ 6CF6 42 4C       >                db      "BL"
 123+ 6CF8             >len_NFA         defl    $ - temp_NFA
 123+ 6CF8             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 123+ 6CF6             >
 123+ 6CF6 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 123+ 6CF7 42 4C       >                db      "BL"               // name string in 7-bit ascii, but
 123+ 6CF9             >                org     $-1                 // alter last byte of Name just above to set
 123+ 6CF8 CC          >                db      {b $} | END_BIT     // msb as name end
 123+ 6CF9             >
 123+ 6CF9 ED 6C       >                dw      last_NFA            // Link to previous definition Name
 123+ 6CFB             >BL:          if Constant_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 123+ 6CFB 95 6C       >                dw      Constant_Ptr ; ok        // for primitive definitions  actual code
 123+ 6CFD             >                else
 123+ 6CFD ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 123+ 6CFD             >                endif           ; ok        // for other definitions it "points" the correct handler
 123+ 6CFD             >                // Use of "; ok" to suppress "warning[fwdref]"
 123+ 6CFD             >
 123+ 6CFD             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 123+ 6CFD 20 00       >                dw      $20
 124+ 6CFF                              Constant_Def CL         ,   "C/L"   ,  64
 124+ 6CFF             >                New_Def  CL, "C/L", Constant_Ptr, is_normal
 124+ 6CFF             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 124+ 6CFF             >
 124+ 6CFF             >                // dummy db directives used to calculate length of namec
 124+ 6CFF 43 2F 4C    >                db      "C/L"
 124+ 6D02             >len_NFA         defl    $ - temp_NFA
 124+ 6D02             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 124+ 6CFF             >
 124+ 6CFF 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 124+ 6D00 43 2F 4C    >                db      "C/L"               // name string in 7-bit ascii, but
 124+ 6D03             >                org     $-1                 // alter last byte of Name just above to set
 124+ 6D02 CC          >                db      {b $} | END_BIT     // msb as name end
 124+ 6D03             >
 124+ 6D03 F6 6C       >                dw      last_NFA            // Link to previous definition Name
 124+ 6D05             >CL:          if Constant_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 124+ 6D05 95 6C       >                dw      Constant_Ptr ; ok        // for primitive definitions  actual code
 124+ 6D07             >                else
 124+ 6D07 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 124+ 6D07             >                endif           ; ok        // for other definitions it "points" the correct handler
 124+ 6D07             >                // Use of "; ok" to suppress "warning[fwdref]"
 124+ 6D07             >
 124+ 6D07             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 124+ 6D07 40 00       >                dw      64
 125+ 6D09                              Constant_Def BBUF       ,   "B/BUF" , 512
 125+ 6D09             >                New_Def  BBUF, "B/BUF", Constant_Ptr, is_normal
 125+ 6D09             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 125+ 6D09             >
 125+ 6D09             >                // dummy db directives used to calculate length of namec
 125+ 6D09 42 2F 42 55 >                db      "B/BUF"
 125+ 6D0D 46          >
 125+ 6D0E             >len_NFA         defl    $ - temp_NFA
 125+ 6D0E             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 125+ 6D09             >
 125+ 6D09 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 125+ 6D0A 42 2F 42 55 >                db      "B/BUF"               // name string in 7-bit ascii, but
 125+ 6D0E 46          >
 125+ 6D0F             >                org     $-1                 // alter last byte of Name just above to set
 125+ 6D0E C6          >                db      {b $} | END_BIT     // msb as name end
 125+ 6D0F             >
 125+ 6D0F FF 6C       >                dw      last_NFA            // Link to previous definition Name
 125+ 6D11             >BBUF:          if Constant_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 125+ 6D11 95 6C       >                dw      Constant_Ptr ; ok        // for primitive definitions  actual code
 125+ 6D13             >                else
 125+ 6D13 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 125+ 6D13             >                endif           ; ok        // for other definitions it "points" the correct handler
 125+ 6D13             >                // Use of "; ok" to suppress "warning[fwdref]"
 125+ 6D13             >
 125+ 6D13             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 125+ 6D13 00 02       >                dw      512
 126+ 6D15                              Constant_Def BSCR       ,   "B/SCR" ,   2
 126+ 6D15             >                New_Def  BSCR, "B/SCR", Constant_Ptr, is_normal
 126+ 6D15             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 126+ 6D15             >
 126+ 6D15             >                // dummy db directives used to calculate length of namec
 126+ 6D15 42 2F 53 43 >                db      "B/SCR"
 126+ 6D19 52          >
 126+ 6D1A             >len_NFA         defl    $ - temp_NFA
 126+ 6D1A             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 126+ 6D15             >
 126+ 6D15 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 126+ 6D16 42 2F 53 43 >                db      "B/SCR"               // name string in 7-bit ascii, but
 126+ 6D1A 52          >
 126+ 6D1B             >                org     $-1                 // alter last byte of Name just above to set
 126+ 6D1A D2          >                db      {b $} | END_BIT     // msb as name end
 126+ 6D1B             >
 126+ 6D1B 09 6D       >                dw      last_NFA            // Link to previous definition Name
 126+ 6D1D             >BSCR:          if Constant_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 126+ 6D1D 95 6C       >                dw      Constant_Ptr ; ok        // for primitive definitions  actual code
 126+ 6D1F             >                else
 126+ 6D1F ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 126+ 6D1F             >                endif           ; ok        // for other definitions it "points" the correct handler
 126+ 6D1F             >                // Use of "; ok" to suppress "warning[fwdref]"
 126+ 6D1F             >
 126+ 6D1F             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 126+ 6D1F 02 00       >                dw      2
 127+ 6D21                              Constant_Def LSCR       ,   "L/SCR" ,  16
 127+ 6D21             >                New_Def  LSCR, "L/SCR", Constant_Ptr, is_normal
 127+ 6D21             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 127+ 6D21             >
 127+ 6D21             >                // dummy db directives used to calculate length of namec
 127+ 6D21 4C 2F 53 43 >                db      "L/SCR"
 127+ 6D25 52          >
 127+ 6D26             >len_NFA         defl    $ - temp_NFA
 127+ 6D26             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 127+ 6D21             >
 127+ 6D21 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 127+ 6D22 4C 2F 53 43 >                db      "L/SCR"               // name string in 7-bit ascii, but
 127+ 6D26 52          >
 127+ 6D27             >                org     $-1                 // alter last byte of Name just above to set
 127+ 6D26 D2          >                db      {b $} | END_BIT     // msb as name end
 127+ 6D27             >
 127+ 6D27 15 6D       >                dw      last_NFA            // Link to previous definition Name
 127+ 6D29             >LSCR:          if Constant_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 127+ 6D29 95 6C       >                dw      Constant_Ptr ; ok        // for primitive definitions  actual code
 127+ 6D2B             >                else
 127+ 6D2B ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 127+ 6D2B             >                endif           ; ok        // for other definitions it "points" the correct handler
 127+ 6D2B             >                // Use of "; ok" to suppress "warning[fwdref]"
 127+ 6D2B             >
 127+ 6D2B             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 127+ 6D2B 10 00       >                dw      16
 128+ 6D2D
 129+ 6D2D              //  ______________________________________________________________________
 130+ 6D2D              //
 131+ 6D2D              // +origin         --
 132+ 6D2D              //              Colon_Def PLUS_ORIGIN, "+ORIGIN", is_normal
 133+ 6D2D              //              dw      LIT, Cold_origin        // [ hex 6366 ] literal
 134+ 6D2D              //              dw      PLUS                    // +
 135+ 6D2D              //              dw      EXIT                    // ;
 136+ 6D2D                              New_Def PLUS_ORIGIN, "+ORIGIN", is_code, is_normal
 136+ 6D2D             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 136+ 6D2D             >
 136+ 6D2D             >                // dummy db directives used to calculate length of namec
 136+ 6D2D 2B 4F 52 49 >                db      "+ORIGIN"
 136+ 6D31 47 49 4E    >
 136+ 6D34             >len_NFA         defl    $ - temp_NFA
 136+ 6D34             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 136+ 6D2D             >
 136+ 6D2D 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 136+ 6D2E 2B 4F 52 49 >                db      "+ORIGIN"               // name string in 7-bit ascii, but
 136+ 6D32 47 49 4E    >
 136+ 6D35             >                org     $-1                 // alter last byte of Name just above to set
 136+ 6D34 CE          >                db      {b $} | END_BIT     // msb as name end
 136+ 6D35             >
 136+ 6D35 21 6D       >                dw      last_NFA            // Link to previous definition Name
 136+ 6D37             >PLUS_ORIGIN:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 136+ 6D37 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
 136+ 6D37             >                else
 136+ 6D37 39 6D       >                dw      $ + 2   ; ok        // is pointed by CFA
 136+ 6D39             >                endif           ; ok        // for other definitions it "points" the correct handler
 136+ 6D39             >                // Use of "; ok" to suppress "warning[fwdref]"
 136+ 6D39             >
 136+ 6D39             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 137+ 6D39 E1                           pop     hl
 138+ 6D3A 11 66 63                     ld      de,  Cold_origin
 139+ 6D3D 19                           add     hl, de
 140+ 6D3E E5                           push    hl
 141+ 6D3F                              next
 141+ 6D3F DD E9       >                jp      (ix)
 142+ 6D41
 143+ 6D41
 144+ 6D41              //  ______________________________________________________________________
 145+ 6D41              //
 146+ 6D41                              Constant_Def CNEXT      ,   "(NEXT)", Next_Ptr
 146+ 6D41             >                New_Def  CNEXT, "(NEXT)", Constant_Ptr, is_normal
 146+ 6D41             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 146+ 6D41             >
 146+ 6D41             >                // dummy db directives used to calculate length of namec
 146+ 6D41 28 4E 45 58 >                db      "(NEXT)"
 146+ 6D45 54 29       >
 146+ 6D47             >len_NFA         defl    $ - temp_NFA
 146+ 6D47             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 146+ 6D41             >
 146+ 6D41 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 146+ 6D42 28 4E 45 58 >                db      "(NEXT)"               // name string in 7-bit ascii, but
 146+ 6D46 54 29       >
 146+ 6D48             >                org     $-1                 // alter last byte of Name just above to set
 146+ 6D47 A9          >                db      {b $} | END_BIT     // msb as name end
 146+ 6D48             >
 146+ 6D48 2D 6D       >                dw      last_NFA            // Link to previous definition Name
 146+ 6D4A             >CNEXT:          if Constant_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 146+ 6D4A 95 6C       >                dw      Constant_Ptr ; ok        // for primitive definitions  actual code
 146+ 6D4C             >                else
 146+ 6D4C ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 146+ 6D4C             >                endif           ; ok        // for other definitions it "points" the correct handler
 146+ 6D4C             >                // Use of "; ok" to suppress "warning[fwdref]"
 146+ 6D4C             >
 146+ 6D4C             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 146+ 6D4C 98 63       >                dw      Next_Ptr
 147+ 6D4E
 148+ 6D4E              //  ______________________________________________________________________
 149+ 6D4E              //
 150+ 6D4E
 151+ 6D4E                              User_Def S0         , "S0"        , 06 // starting value of Stack-Pointer
 151+ 6D4E             >                New_Def  S0, "S0", User_Ptr, is_normal
 151+ 6D4E             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 151+ 6D4E             >
 151+ 6D4E             >                // dummy db directives used to calculate length of namec
 151+ 6D4E 53 30       >                db      "S0"
 151+ 6D50             >len_NFA         defl    $ - temp_NFA
 151+ 6D50             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 151+ 6D4E             >
 151+ 6D4E 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 151+ 6D4F 53 30       >                db      "S0"               // name string in 7-bit ascii, but
 151+ 6D51             >                org     $-1                 // alter last byte of Name just above to set
 151+ 6D50 B0          >                db      {b $} | END_BIT     // msb as name end
 151+ 6D51             >
 151+ 6D51 41 6D       >                dw      last_NFA            // Link to previous definition Name
 151+ 6D53             >S0:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 151+ 6D53 C1 6C       >                dw      User_Ptr ; ok        // for primitive definitions  actual code
 151+ 6D55             >                else
 151+ 6D55 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 151+ 6D55             >                endif           ; ok        // for other definitions it "points" the correct handler
 151+ 6D55             >                // Use of "; ok" to suppress "warning[fwdref]"
 151+ 6D55             >
 151+ 6D55             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 151+ 6D55 06          >                db      06
 152+ 6D56                              User_Def R0         , "R0"        , 08 // starting value of Return-Pointer
 152+ 6D56             >                New_Def  R0, "R0", User_Ptr, is_normal
 152+ 6D56             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 152+ 6D56             >
 152+ 6D56             >                // dummy db directives used to calculate length of namec
 152+ 6D56 52 30       >                db      "R0"
 152+ 6D58             >len_NFA         defl    $ - temp_NFA
 152+ 6D58             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 152+ 6D56             >
 152+ 6D56 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 152+ 6D57 52 30       >                db      "R0"               // name string in 7-bit ascii, but
 152+ 6D59             >                org     $-1                 // alter last byte of Name just above to set
 152+ 6D58 B0          >                db      {b $} | END_BIT     // msb as name end
 152+ 6D59             >
 152+ 6D59 4E 6D       >                dw      last_NFA            // Link to previous definition Name
 152+ 6D5B             >R0:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 152+ 6D5B C1 6C       >                dw      User_Ptr ; ok        // for primitive definitions  actual code
 152+ 6D5D             >                else
 152+ 6D5D ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 152+ 6D5D             >                endif           ; ok        // for other definitions it "points" the correct handler
 152+ 6D5D             >                // Use of "; ok" to suppress "warning[fwdref]"
 152+ 6D5D             >
 152+ 6D5D             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 152+ 6D5D 08          >                db      08
 153+ 6D5E                              User_Def TIB        , "TIB"       , 10 // input terminal buffer address
 153+ 6D5E             >                New_Def  TIB, "TIB", User_Ptr, is_normal
 153+ 6D5E             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 153+ 6D5E             >
 153+ 6D5E             >                // dummy db directives used to calculate length of namec
 153+ 6D5E 54 49 42    >                db      "TIB"
 153+ 6D61             >len_NFA         defl    $ - temp_NFA
 153+ 6D61             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 153+ 6D5E             >
 153+ 6D5E 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 153+ 6D5F 54 49 42    >                db      "TIB"               // name string in 7-bit ascii, but
 153+ 6D62             >                org     $-1                 // alter last byte of Name just above to set
 153+ 6D61 C2          >                db      {b $} | END_BIT     // msb as name end
 153+ 6D62             >
 153+ 6D62 56 6D       >                dw      last_NFA            // Link to previous definition Name
 153+ 6D64             >TIB:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 153+ 6D64 C1 6C       >                dw      User_Ptr ; ok        // for primitive definitions  actual code
 153+ 6D66             >                else
 153+ 6D66 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 153+ 6D66             >                endif           ; ok        // for other definitions it "points" the correct handler
 153+ 6D66             >                // Use of "; ok" to suppress "warning[fwdref]"
 153+ 6D66             >
 153+ 6D66             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 153+ 6D66 0A          >                db      10
 154+ 6D67                              User_Def WIDTH      , "WIDTH"     , 12 // maximum number of characters for a word name
 154+ 6D67             >                New_Def  WIDTH, "WIDTH", User_Ptr, is_normal
 154+ 6D67             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 154+ 6D67             >
 154+ 6D67             >                // dummy db directives used to calculate length of namec
 154+ 6D67 57 49 44 54 >                db      "WIDTH"
 154+ 6D6B 48          >
 154+ 6D6C             >len_NFA         defl    $ - temp_NFA
 154+ 6D6C             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 154+ 6D67             >
 154+ 6D67 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 154+ 6D68 57 49 44 54 >                db      "WIDTH"               // name string in 7-bit ascii, but
 154+ 6D6C 48          >
 154+ 6D6D             >                org     $-1                 // alter last byte of Name just above to set
 154+ 6D6C C8          >                db      {b $} | END_BIT     // msb as name end
 154+ 6D6D             >
 154+ 6D6D 5E 6D       >                dw      last_NFA            // Link to previous definition Name
 154+ 6D6F             >WIDTH:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 154+ 6D6F C1 6C       >                dw      User_Ptr ; ok        // for primitive definitions  actual code
 154+ 6D71             >                else
 154+ 6D71 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 154+ 6D71             >                endif           ; ok        // for other definitions it "points" the correct handler
 154+ 6D71             >                // Use of "; ok" to suppress "warning[fwdref]"
 154+ 6D71             >
 154+ 6D71             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 154+ 6D71 0C          >                db      12
 155+ 6D72                              User_Def WARNING    , "WARNING"   , 14 // error reporting method: 0 base, 1 verbose
 155+ 6D72             >                New_Def  WARNING, "WARNING", User_Ptr, is_normal
 155+ 6D72             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 155+ 6D72             >
 155+ 6D72             >                // dummy db directives used to calculate length of namec
 155+ 6D72 57 41 52 4E >                db      "WARNING"
 155+ 6D76 49 4E 47    >
 155+ 6D79             >len_NFA         defl    $ - temp_NFA
 155+ 6D79             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 155+ 6D72             >
 155+ 6D72 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 155+ 6D73 57 41 52 4E >                db      "WARNING"               // name string in 7-bit ascii, but
 155+ 6D77 49 4E 47    >
 155+ 6D7A             >                org     $-1                 // alter last byte of Name just above to set
 155+ 6D79 C7          >                db      {b $} | END_BIT     // msb as name end
 155+ 6D7A             >
 155+ 6D7A 67 6D       >                dw      last_NFA            // Link to previous definition Name
 155+ 6D7C             >WARNING:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 155+ 6D7C C1 6C       >                dw      User_Ptr ; ok        // for primitive definitions  actual code
 155+ 6D7E             >                else
 155+ 6D7E ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 155+ 6D7E             >                endif           ; ok        // for other definitions it "points" the correct handler
 155+ 6D7E             >                // Use of "; ok" to suppress "warning[fwdref]"
 155+ 6D7E             >
 155+ 6D7E             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 155+ 6D7E 0E          >                db      14
 156+ 6D7F                              User_Def FENCE      , "FENCE"     , 16 // minimum address where FORGET can work
 156+ 6D7F             >                New_Def  FENCE, "FENCE", User_Ptr, is_normal
 156+ 6D7F             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 156+ 6D7F             >
 156+ 6D7F             >                // dummy db directives used to calculate length of namec
 156+ 6D7F 46 45 4E 43 >                db      "FENCE"
 156+ 6D83 45          >
 156+ 6D84             >len_NFA         defl    $ - temp_NFA
 156+ 6D84             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 156+ 6D7F             >
 156+ 6D7F 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 156+ 6D80 46 45 4E 43 >                db      "FENCE"               // name string in 7-bit ascii, but
 156+ 6D84 45          >
 156+ 6D85             >                org     $-1                 // alter last byte of Name just above to set
 156+ 6D84 C5          >                db      {b $} | END_BIT     // msb as name end
 156+ 6D85             >
 156+ 6D85 72 6D       >                dw      last_NFA            // Link to previous definition Name
 156+ 6D87             >FENCE:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 156+ 6D87 C1 6C       >                dw      User_Ptr ; ok        // for primitive definitions  actual code
 156+ 6D89             >                else
 156+ 6D89 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 156+ 6D89             >                endif           ; ok        // for other definitions it "points" the correct handler
 156+ 6D89             >                // Use of "; ok" to suppress "warning[fwdref]"
 156+ 6D89             >
 156+ 6D89             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 156+ 6D89 10          >                db      16
 157+ 6D8A                              User_Def DP         , "DP"        , 18 // Dictionary Pointer
 157+ 6D8A             >                New_Def  DP, "DP", User_Ptr, is_normal
 157+ 6D8A             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 157+ 6D8A             >
 157+ 6D8A             >                // dummy db directives used to calculate length of namec
 157+ 6D8A 44 50       >                db      "DP"
 157+ 6D8C             >len_NFA         defl    $ - temp_NFA
 157+ 6D8C             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 157+ 6D8A             >
 157+ 6D8A 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 157+ 6D8B 44 50       >                db      "DP"               // name string in 7-bit ascii, but
 157+ 6D8D             >                org     $-1                 // alter last byte of Name just above to set
 157+ 6D8C D0          >                db      {b $} | END_BIT     // msb as name end
 157+ 6D8D             >
 157+ 6D8D 7F 6D       >                dw      last_NFA            // Link to previous definition Name
 157+ 6D8F             >DP:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 157+ 6D8F C1 6C       >                dw      User_Ptr ; ok        // for primitive definitions  actual code
 157+ 6D91             >                else
 157+ 6D91 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 157+ 6D91             >                endif           ; ok        // for other definitions it "points" the correct handler
 157+ 6D91             >                // Use of "; ok" to suppress "warning[fwdref]"
 157+ 6D91             >
 157+ 6D91             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 157+ 6D91 12          >                db      18
 158+ 6D92                              User_Def VOC_LINK   , "VOC-LINK"  , 20 // pointer to the latest vocabulary
 158+ 6D92             >                New_Def  VOC_LINK, "VOC-LINK", User_Ptr, is_normal
 158+ 6D92             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 158+ 6D92             >
 158+ 6D92             >                // dummy db directives used to calculate length of namec
 158+ 6D92 56 4F 43 2D >                db      "VOC-LINK"
 158+ 6D96 4C 49 4E 4B >
 158+ 6D9A             >len_NFA         defl    $ - temp_NFA
 158+ 6D9A             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 158+ 6D92             >
 158+ 6D92 88          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 158+ 6D93 56 4F 43 2D >                db      "VOC-LINK"               // name string in 7-bit ascii, but
 158+ 6D97 4C 49 4E 4B >
 158+ 6D9B             >                org     $-1                 // alter last byte of Name just above to set
 158+ 6D9A CB          >                db      {b $} | END_BIT     // msb as name end
 158+ 6D9B             >
 158+ 6D9B 8A 6D       >                dw      last_NFA            // Link to previous definition Name
 158+ 6D9D             >VOC_LINK:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 158+ 6D9D C1 6C       >                dw      User_Ptr ; ok        // for primitive definitions  actual code
 158+ 6D9F             >                else
 158+ 6D9F ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 158+ 6D9F             >                endif           ; ok        // for other definitions it "points" the correct handler
 158+ 6D9F             >                // Use of "; ok" to suppress "warning[fwdref]"
 158+ 6D9F             >
 158+ 6D9F             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 158+ 6D9F 14          >                db      20
 159+ 6DA0                              User_Def FIRST      , "FIRST"     , 22 // address of first buffer
 159+ 6DA0             >                New_Def  FIRST, "FIRST", User_Ptr, is_normal
 159+ 6DA0             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 159+ 6DA0             >
 159+ 6DA0             >                // dummy db directives used to calculate length of namec
 159+ 6DA0 46 49 52 53 >                db      "FIRST"
 159+ 6DA4 54          >
 159+ 6DA5             >len_NFA         defl    $ - temp_NFA
 159+ 6DA5             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 159+ 6DA0             >
 159+ 6DA0 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 159+ 6DA1 46 49 52 53 >                db      "FIRST"               // name string in 7-bit ascii, but
 159+ 6DA5 54          >
 159+ 6DA6             >                org     $-1                 // alter last byte of Name just above to set
 159+ 6DA5 D4          >                db      {b $} | END_BIT     // msb as name end
 159+ 6DA6             >
 159+ 6DA6 92 6D       >                dw      last_NFA            // Link to previous definition Name
 159+ 6DA8             >FIRST:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 159+ 6DA8 C1 6C       >                dw      User_Ptr ; ok        // for primitive definitions  actual code
 159+ 6DAA             >                else
 159+ 6DAA ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 159+ 6DAA             >                endif           ; ok        // for other definitions it "points" the correct handler
 159+ 6DAA             >                // Use of "; ok" to suppress "warning[fwdref]"
 159+ 6DAA             >
 159+ 6DAA             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 159+ 6DAA 16          >                db      22
 160+ 6DAB                              User_Def LIMIT      , "LIMIT"     , 24 // address of last buffer
 160+ 6DAB             >                New_Def  LIMIT, "LIMIT", User_Ptr, is_normal
 160+ 6DAB             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 160+ 6DAB             >
 160+ 6DAB             >                // dummy db directives used to calculate length of namec
 160+ 6DAB 4C 49 4D 49 >                db      "LIMIT"
 160+ 6DAF 54          >
 160+ 6DB0             >len_NFA         defl    $ - temp_NFA
 160+ 6DB0             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 160+ 6DAB             >
 160+ 6DAB 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 160+ 6DAC 4C 49 4D 49 >                db      "LIMIT"               // name string in 7-bit ascii, but
 160+ 6DB0 54          >
 160+ 6DB1             >                org     $-1                 // alter last byte of Name just above to set
 160+ 6DB0 D4          >                db      {b $} | END_BIT     // msb as name end
 160+ 6DB1             >
 160+ 6DB1 A0 6D       >                dw      last_NFA            // Link to previous definition Name
 160+ 6DB3             >LIMIT:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 160+ 6DB3 C1 6C       >                dw      User_Ptr ; ok        // for primitive definitions  actual code
 160+ 6DB5             >                else
 160+ 6DB5 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 160+ 6DB5             >                endif           ; ok        // for other definitions it "points" the correct handler
 160+ 6DB5             >                // Use of "; ok" to suppress "warning[fwdref]"
 160+ 6DB5             >
 160+ 6DB5             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 160+ 6DB5 18          >                db      24
 161+ 6DB6                              User_Def EXP        , "EXP"       , 26 // keeps the exponent in number conversion
 161+ 6DB6             >                New_Def  EXP, "EXP", User_Ptr, is_normal
 161+ 6DB6             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 161+ 6DB6             >
 161+ 6DB6             >                // dummy db directives used to calculate length of namec
 161+ 6DB6 45 58 50    >                db      "EXP"
 161+ 6DB9             >len_NFA         defl    $ - temp_NFA
 161+ 6DB9             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 161+ 6DB6             >
 161+ 6DB6 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 161+ 6DB7 45 58 50    >                db      "EXP"               // name string in 7-bit ascii, but
 161+ 6DBA             >                org     $-1                 // alter last byte of Name just above to set
 161+ 6DB9 D0          >                db      {b $} | END_BIT     // msb as name end
 161+ 6DBA             >
 161+ 6DBA AB 6D       >                dw      last_NFA            // Link to previous definition Name
 161+ 6DBC             >EXP:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 161+ 6DBC C1 6C       >                dw      User_Ptr ; ok        // for primitive definitions  actual code
 161+ 6DBE             >                else
 161+ 6DBE ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 161+ 6DBE             >                endif           ; ok        // for other definitions it "points" the correct handler
 161+ 6DBE             >                // Use of "; ok" to suppress "warning[fwdref]"
 161+ 6DBE             >
 161+ 6DBE             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 161+ 6DBE 1A          >                db      26
 162+ 6DBF                              User_Def NMODE      , "NMODE"     , 28 // number mode: 0 integer, 1 floating point
 162+ 6DBF             >                New_Def  NMODE, "NMODE", User_Ptr, is_normal
 162+ 6DBF             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 162+ 6DBF             >
 162+ 6DBF             >                // dummy db directives used to calculate length of namec
 162+ 6DBF 4E 4D 4F 44 >                db      "NMODE"
 162+ 6DC3 45          >
 162+ 6DC4             >len_NFA         defl    $ - temp_NFA
 162+ 6DC4             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 162+ 6DBF             >
 162+ 6DBF 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 162+ 6DC0 4E 4D 4F 44 >                db      "NMODE"               // name string in 7-bit ascii, but
 162+ 6DC4 45          >
 162+ 6DC5             >                org     $-1                 // alter last byte of Name just above to set
 162+ 6DC4 C5          >                db      {b $} | END_BIT     // msb as name end
 162+ 6DC5             >
 162+ 6DC5 B6 6D       >                dw      last_NFA            // Link to previous definition Name
 162+ 6DC7             >NMODE:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 162+ 6DC7 C1 6C       >                dw      User_Ptr ; ok        // for primitive definitions  actual code
 162+ 6DC9             >                else
 162+ 6DC9 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 162+ 6DC9             >                endif           ; ok        // for other definitions it "points" the correct handler
 162+ 6DC9             >                // Use of "; ok" to suppress "warning[fwdref]"
 162+ 6DC9             >
 162+ 6DC9             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 162+ 6DC9 1C          >                db      28
 163+ 6DCA                              User_Def BLK        , "BLK"       , 30 // block number to be interpreted. 0 for terminal
 163+ 6DCA             >                New_Def  BLK, "BLK", User_Ptr, is_normal
 163+ 6DCA             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 163+ 6DCA             >
 163+ 6DCA             >                // dummy db directives used to calculate length of namec
 163+ 6DCA 42 4C 4B    >                db      "BLK"
 163+ 6DCD             >len_NFA         defl    $ - temp_NFA
 163+ 6DCD             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 163+ 6DCA             >
 163+ 6DCA 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 163+ 6DCB 42 4C 4B    >                db      "BLK"               // name string in 7-bit ascii, but
 163+ 6DCE             >                org     $-1                 // alter last byte of Name just above to set
 163+ 6DCD CB          >                db      {b $} | END_BIT     // msb as name end
 163+ 6DCE             >
 163+ 6DCE BF 6D       >                dw      last_NFA            // Link to previous definition Name
 163+ 6DD0             >BLK:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 163+ 6DD0 C1 6C       >                dw      User_Ptr ; ok        // for primitive definitions  actual code
 163+ 6DD2             >                else
 163+ 6DD2 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 163+ 6DD2             >                endif           ; ok        // for other definitions it "points" the correct handler
 163+ 6DD2             >                // Use of "; ok" to suppress "warning[fwdref]"
 163+ 6DD2             >
 163+ 6DD2             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 163+ 6DD2 1E          >                db      30
 164+ 6DD3                              User_Def TO_IN      , ">IN"       , 32 // incremented when consuming input buffer
 164+ 6DD3             >                New_Def  TO_IN, ">IN", User_Ptr, is_normal
 164+ 6DD3             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 164+ 6DD3             >
 164+ 6DD3             >                // dummy db directives used to calculate length of namec
 164+ 6DD3 3E 49 4E    >                db      ">IN"
 164+ 6DD6             >len_NFA         defl    $ - temp_NFA
 164+ 6DD6             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 164+ 6DD3             >
 164+ 6DD3 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 164+ 6DD4 3E 49 4E    >                db      ">IN"               // name string in 7-bit ascii, but
 164+ 6DD7             >                org     $-1                 // alter last byte of Name just above to set
 164+ 6DD6 CE          >                db      {b $} | END_BIT     // msb as name end
 164+ 6DD7             >
 164+ 6DD7 CA 6D       >                dw      last_NFA            // Link to previous definition Name
 164+ 6DD9             >TO_IN:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 164+ 6DD9 C1 6C       >                dw      User_Ptr ; ok        // for primitive definitions  actual code
 164+ 6DDB             >                else
 164+ 6DDB ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 164+ 6DDB             >                endif           ; ok        // for other definitions it "points" the correct handler
 164+ 6DDB             >                // Use of "; ok" to suppress "warning[fwdref]"
 164+ 6DDB             >
 164+ 6DDB             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 164+ 6DDB 20          >                db      32
 165+ 6DDC                              User_Def OUT        , "OUT"       , 34 // incremented when sending to output
 165+ 6DDC             >                New_Def  OUT, "OUT", User_Ptr, is_normal
 165+ 6DDC             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 165+ 6DDC             >
 165+ 6DDC             >                // dummy db directives used to calculate length of namec
 165+ 6DDC 4F 55 54    >                db      "OUT"
 165+ 6DDF             >len_NFA         defl    $ - temp_NFA
 165+ 6DDF             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 165+ 6DDC             >
 165+ 6DDC 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 165+ 6DDD 4F 55 54    >                db      "OUT"               // name string in 7-bit ascii, but
 165+ 6DE0             >                org     $-1                 // alter last byte of Name just above to set
 165+ 6DDF D4          >                db      {b $} | END_BIT     // msb as name end
 165+ 6DE0             >
 165+ 6DE0 D3 6D       >                dw      last_NFA            // Link to previous definition Name
 165+ 6DE2             >OUT:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 165+ 6DE2 C1 6C       >                dw      User_Ptr ; ok        // for primitive definitions  actual code
 165+ 6DE4             >                else
 165+ 6DE4 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 165+ 6DE4             >                endif           ; ok        // for other definitions it "points" the correct handler
 165+ 6DE4             >                // Use of "; ok" to suppress "warning[fwdref]"
 165+ 6DE4             >
 165+ 6DE4             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 165+ 6DE4 22          >                db      34
 166+ 6DE5                              User_Def SCR        , "SCR"       , 36 // latest screen retreieved by LIST
 166+ 6DE5             >                New_Def  SCR, "SCR", User_Ptr, is_normal
 166+ 6DE5             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 166+ 6DE5             >
 166+ 6DE5             >                // dummy db directives used to calculate length of namec
 166+ 6DE5 53 43 52    >                db      "SCR"
 166+ 6DE8             >len_NFA         defl    $ - temp_NFA
 166+ 6DE8             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 166+ 6DE5             >
 166+ 6DE5 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 166+ 6DE6 53 43 52    >                db      "SCR"               // name string in 7-bit ascii, but
 166+ 6DE9             >                org     $-1                 // alter last byte of Name just above to set
 166+ 6DE8 D2          >                db      {b $} | END_BIT     // msb as name end
 166+ 6DE9             >
 166+ 6DE9 DC 6D       >                dw      last_NFA            // Link to previous definition Name
 166+ 6DEB             >SCR:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 166+ 6DEB C1 6C       >                dw      User_Ptr ; ok        // for primitive definitions  actual code
 166+ 6DED             >                else
 166+ 6DED ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 166+ 6DED             >                endif           ; ok        // for other definitions it "points" the correct handler
 166+ 6DED             >                // Use of "; ok" to suppress "warning[fwdref]"
 166+ 6DED             >
 166+ 6DED             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 166+ 6DED 24          >                db      36
 167+ 6DEE                              User_Def OFFSET     , "OFFSET"    , 38 //
 167+ 6DEE             >                New_Def  OFFSET, "OFFSET", User_Ptr, is_normal
 167+ 6DEE             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 167+ 6DEE             >
 167+ 6DEE             >                // dummy db directives used to calculate length of namec
 167+ 6DEE 4F 46 46 53 >                db      "OFFSET"
 167+ 6DF2 45 54       >
 167+ 6DF4             >len_NFA         defl    $ - temp_NFA
 167+ 6DF4             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 167+ 6DEE             >
 167+ 6DEE 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 167+ 6DEF 4F 46 46 53 >                db      "OFFSET"               // name string in 7-bit ascii, but
 167+ 6DF3 45 54       >
 167+ 6DF5             >                org     $-1                 // alter last byte of Name just above to set
 167+ 6DF4 D4          >                db      {b $} | END_BIT     // msb as name end
 167+ 6DF5             >
 167+ 6DF5 E5 6D       >                dw      last_NFA            // Link to previous definition Name
 167+ 6DF7             >OFFSET:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 167+ 6DF7 C1 6C       >                dw      User_Ptr ; ok        // for primitive definitions  actual code
 167+ 6DF9             >                else
 167+ 6DF9 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 167+ 6DF9             >                endif           ; ok        // for other definitions it "points" the correct handler
 167+ 6DF9             >                // Use of "; ok" to suppress "warning[fwdref]"
 167+ 6DF9             >
 167+ 6DF9             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 167+ 6DF9 26          >                db      38
 168+ 6DFA                              User_Def CONTEXT    , "CONTEXT"   , 40 // pointer to the vocabulary where search begins
 168+ 6DFA             >                New_Def  CONTEXT, "CONTEXT", User_Ptr, is_normal
 168+ 6DFA             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 168+ 6DFA             >
 168+ 6DFA             >                // dummy db directives used to calculate length of namec
 168+ 6DFA 43 4F 4E 54 >                db      "CONTEXT"
 168+ 6DFE 45 58 54    >
 168+ 6E01             >len_NFA         defl    $ - temp_NFA
 168+ 6E01             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 168+ 6DFA             >
 168+ 6DFA 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 168+ 6DFB 43 4F 4E 54 >                db      "CONTEXT"               // name string in 7-bit ascii, but
 168+ 6DFF 45 58 54    >
 168+ 6E02             >                org     $-1                 // alter last byte of Name just above to set
 168+ 6E01 D4          >                db      {b $} | END_BIT     // msb as name end
 168+ 6E02             >
 168+ 6E02 EE 6D       >                dw      last_NFA            // Link to previous definition Name
 168+ 6E04             >CONTEXT:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 168+ 6E04 C1 6C       >                dw      User_Ptr ; ok        // for primitive definitions  actual code
 168+ 6E06             >                else
 168+ 6E06 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 168+ 6E06             >                endif           ; ok        // for other definitions it "points" the correct handler
 168+ 6E06             >                // Use of "; ok" to suppress "warning[fwdref]"
 168+ 6E06             >
 168+ 6E06             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 168+ 6E06 28          >                db      40
 169+ 6E07                              User_Def CURRENT    , "CURRENT"   , 42 // pointer to the vocabulary where search continues
 169+ 6E07             >                New_Def  CURRENT, "CURRENT", User_Ptr, is_normal
 169+ 6E07             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 169+ 6E07             >
 169+ 6E07             >                // dummy db directives used to calculate length of namec
 169+ 6E07 43 55 52 52 >                db      "CURRENT"
 169+ 6E0B 45 4E 54    >
 169+ 6E0E             >len_NFA         defl    $ - temp_NFA
 169+ 6E0E             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 169+ 6E07             >
 169+ 6E07 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 169+ 6E08 43 55 52 52 >                db      "CURRENT"               // name string in 7-bit ascii, but
 169+ 6E0C 45 4E 54    >
 169+ 6E0F             >                org     $-1                 // alter last byte of Name just above to set
 169+ 6E0E D4          >                db      {b $} | END_BIT     // msb as name end
 169+ 6E0F             >
 169+ 6E0F FA 6D       >                dw      last_NFA            // Link to previous definition Name
 169+ 6E11             >CURRENT:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 169+ 6E11 C1 6C       >                dw      User_Ptr ; ok        // for primitive definitions  actual code
 169+ 6E13             >                else
 169+ 6E13 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 169+ 6E13             >                endif           ; ok        // for other definitions it "points" the correct handler
 169+ 6E13             >                // Use of "; ok" to suppress "warning[fwdref]"
 169+ 6E13             >
 169+ 6E13             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 169+ 6E13 2A          >                db      42
 170+ 6E14                              User_Def STATE      , "STATE"     , 44 // compilation status. 0 interpreting.
 170+ 6E14             >                New_Def  STATE, "STATE", User_Ptr, is_normal
 170+ 6E14             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 170+ 6E14             >
 170+ 6E14             >                // dummy db directives used to calculate length of namec
 170+ 6E14 53 54 41 54 >                db      "STATE"
 170+ 6E18 45          >
 170+ 6E19             >len_NFA         defl    $ - temp_NFA
 170+ 6E19             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 170+ 6E14             >
 170+ 6E14 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 170+ 6E15 53 54 41 54 >                db      "STATE"               // name string in 7-bit ascii, but
 170+ 6E19 45          >
 170+ 6E1A             >                org     $-1                 // alter last byte of Name just above to set
 170+ 6E19 C5          >                db      {b $} | END_BIT     // msb as name end
 170+ 6E1A             >
 170+ 6E1A 07 6E       >                dw      last_NFA            // Link to previous definition Name
 170+ 6E1C             >STATE:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 170+ 6E1C C1 6C       >                dw      User_Ptr ; ok        // for primitive definitions  actual code
 170+ 6E1E             >                else
 170+ 6E1E ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 170+ 6E1E             >                endif           ; ok        // for other definitions it "points" the correct handler
 170+ 6E1E             >                // Use of "; ok" to suppress "warning[fwdref]"
 170+ 6E1E             >
 170+ 6E1E             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 170+ 6E1E 2C          >                db      44
 171+ 6E1F                              User_Def BASE       , "BASE"      , 46 //
 171+ 6E1F             >                New_Def  BASE, "BASE", User_Ptr, is_normal
 171+ 6E1F             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 171+ 6E1F             >
 171+ 6E1F             >                // dummy db directives used to calculate length of namec
 171+ 6E1F 42 41 53 45 >                db      "BASE"
 171+ 6E23             >len_NFA         defl    $ - temp_NFA
 171+ 6E23             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 171+ 6E1F             >
 171+ 6E1F 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 171+ 6E20 42 41 53 45 >                db      "BASE"               // name string in 7-bit ascii, but
 171+ 6E24             >                org     $-1                 // alter last byte of Name just above to set
 171+ 6E23 C5          >                db      {b $} | END_BIT     // msb as name end
 171+ 6E24             >
 171+ 6E24 14 6E       >                dw      last_NFA            // Link to previous definition Name
 171+ 6E26             >BASE:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 171+ 6E26 C1 6C       >                dw      User_Ptr ; ok        // for primitive definitions  actual code
 171+ 6E28             >                else
 171+ 6E28 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 171+ 6E28             >                endif           ; ok        // for other definitions it "points" the correct handler
 171+ 6E28             >                // Use of "; ok" to suppress "warning[fwdref]"
 171+ 6E28             >
 171+ 6E28             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 171+ 6E28 2E          >                db      46
 172+ 6E29                              User_Def DPL        , "DPL"       , 48 // number of digits after decimal point in conversion
 172+ 6E29             >                New_Def  DPL, "DPL", User_Ptr, is_normal
 172+ 6E29             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 172+ 6E29             >
 172+ 6E29             >                // dummy db directives used to calculate length of namec
 172+ 6E29 44 50 4C    >                db      "DPL"
 172+ 6E2C             >len_NFA         defl    $ - temp_NFA
 172+ 6E2C             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 172+ 6E29             >
 172+ 6E29 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 172+ 6E2A 44 50 4C    >                db      "DPL"               // name string in 7-bit ascii, but
 172+ 6E2D             >                org     $-1                 // alter last byte of Name just above to set
 172+ 6E2C CC          >                db      {b $} | END_BIT     // msb as name end
 172+ 6E2D             >
 172+ 6E2D 1F 6E       >                dw      last_NFA            // Link to previous definition Name
 172+ 6E2F             >DPL:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 172+ 6E2F C1 6C       >                dw      User_Ptr ; ok        // for primitive definitions  actual code
 172+ 6E31             >                else
 172+ 6E31 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 172+ 6E31             >                endif           ; ok        // for other definitions it "points" the correct handler
 172+ 6E31             >                // Use of "; ok" to suppress "warning[fwdref]"
 172+ 6E31             >
 172+ 6E31             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 172+ 6E31 30          >                db      48
 173+ 6E32                              User_Def FLD        , "FLD"       , 50 // output field width
 173+ 6E32             >                New_Def  FLD, "FLD", User_Ptr, is_normal
 173+ 6E32             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 173+ 6E32             >
 173+ 6E32             >                // dummy db directives used to calculate length of namec
 173+ 6E32 46 4C 44    >                db      "FLD"
 173+ 6E35             >len_NFA         defl    $ - temp_NFA
 173+ 6E35             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 173+ 6E32             >
 173+ 6E32 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 173+ 6E33 46 4C 44    >                db      "FLD"               // name string in 7-bit ascii, but
 173+ 6E36             >                org     $-1                 // alter last byte of Name just above to set
 173+ 6E35 C4          >                db      {b $} | END_BIT     // msb as name end
 173+ 6E36             >
 173+ 6E36 29 6E       >                dw      last_NFA            // Link to previous definition Name
 173+ 6E38             >FLD:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 173+ 6E38 C1 6C       >                dw      User_Ptr ; ok        // for primitive definitions  actual code
 173+ 6E3A             >                else
 173+ 6E3A ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 173+ 6E3A             >                endif           ; ok        // for other definitions it "points" the correct handler
 173+ 6E3A             >                // Use of "; ok" to suppress "warning[fwdref]"
 173+ 6E3A             >
 173+ 6E3A             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 173+ 6E3A 32          >                db      50
 174+ 6E3B                              User_Def CSP        , "CSP"       , 52 // used to temporary store Stack-Pointer value
 174+ 6E3B             >                New_Def  CSP, "CSP", User_Ptr, is_normal
 174+ 6E3B             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 174+ 6E3B             >
 174+ 6E3B             >                // dummy db directives used to calculate length of namec
 174+ 6E3B 43 53 50    >                db      "CSP"
 174+ 6E3E             >len_NFA         defl    $ - temp_NFA
 174+ 6E3E             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 174+ 6E3B             >
 174+ 6E3B 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 174+ 6E3C 43 53 50    >                db      "CSP"               // name string in 7-bit ascii, but
 174+ 6E3F             >                org     $-1                 // alter last byte of Name just above to set
 174+ 6E3E D0          >                db      {b $} | END_BIT     // msb as name end
 174+ 6E3F             >
 174+ 6E3F 32 6E       >                dw      last_NFA            // Link to previous definition Name
 174+ 6E41             >CSP:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 174+ 6E41 C1 6C       >                dw      User_Ptr ; ok        // for primitive definitions  actual code
 174+ 6E43             >                else
 174+ 6E43 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 174+ 6E43             >                endif           ; ok        // for other definitions it "points" the correct handler
 174+ 6E43             >                // Use of "; ok" to suppress "warning[fwdref]"
 174+ 6E43             >
 174+ 6E43             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 174+ 6E43 34          >                db      52
 175+ 6E44                              User_Def RSHARP     , "R#"        , 54 // location of editing cursor
 175+ 6E44             >                New_Def  RSHARP, "R#", User_Ptr, is_normal
 175+ 6E44             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 175+ 6E44             >
 175+ 6E44             >                // dummy db directives used to calculate length of namec
 175+ 6E44 52 23       >                db      "R#"
 175+ 6E46             >len_NFA         defl    $ - temp_NFA
 175+ 6E46             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 175+ 6E44             >
 175+ 6E44 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 175+ 6E45 52 23       >                db      "R#"               // name string in 7-bit ascii, but
 175+ 6E47             >                org     $-1                 // alter last byte of Name just above to set
 175+ 6E46 A3          >                db      {b $} | END_BIT     // msb as name end
 175+ 6E47             >
 175+ 6E47 3B 6E       >                dw      last_NFA            // Link to previous definition Name
 175+ 6E49             >RSHARP:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 175+ 6E49 C1 6C       >                dw      User_Ptr ; ok        // for primitive definitions  actual code
 175+ 6E4B             >                else
 175+ 6E4B ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 175+ 6E4B             >                endif           ; ok        // for other definitions it "points" the correct handler
 175+ 6E4B             >                // Use of "; ok" to suppress "warning[fwdref]"
 175+ 6E4B             >
 175+ 6E4B             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 175+ 6E4B 36          >                db      54
 176+ 6E4C                              User_Def HLD        , "HLD"       , 56 // last character during a number conversion output
 176+ 6E4C             >                New_Def  HLD, "HLD", User_Ptr, is_normal
 176+ 6E4C             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 176+ 6E4C             >
 176+ 6E4C             >                // dummy db directives used to calculate length of namec
 176+ 6E4C 48 4C 44    >                db      "HLD"
 176+ 6E4F             >len_NFA         defl    $ - temp_NFA
 176+ 6E4F             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 176+ 6E4C             >
 176+ 6E4C 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 176+ 6E4D 48 4C 44    >                db      "HLD"               // name string in 7-bit ascii, but
 176+ 6E50             >                org     $-1                 // alter last byte of Name just above to set
 176+ 6E4F C4          >                db      {b $} | END_BIT     // msb as name end
 176+ 6E50             >
 176+ 6E50 44 6E       >                dw      last_NFA            // Link to previous definition Name
 176+ 6E52             >HLD:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 176+ 6E52 C1 6C       >                dw      User_Ptr ; ok        // for primitive definitions  actual code
 176+ 6E54             >                else
 176+ 6E54 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 176+ 6E54             >                endif           ; ok        // for other definitions it "points" the correct handler
 176+ 6E54             >                // Use of "; ok" to suppress "warning[fwdref]"
 176+ 6E54             >
 176+ 6E54             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 176+ 6E54 38          >                db      56
 177+ 6E55                              User_Def USE        , "USE"       , 58 // address of last used block
 177+ 6E55             >                New_Def  USE, "USE", User_Ptr, is_normal
 177+ 6E55             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 177+ 6E55             >
 177+ 6E55             >                // dummy db directives used to calculate length of namec
 177+ 6E55 55 53 45    >                db      "USE"
 177+ 6E58             >len_NFA         defl    $ - temp_NFA
 177+ 6E58             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 177+ 6E55             >
 177+ 6E55 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 177+ 6E56 55 53 45    >                db      "USE"               // name string in 7-bit ascii, but
 177+ 6E59             >                org     $-1                 // alter last byte of Name just above to set
 177+ 6E58 C5          >                db      {b $} | END_BIT     // msb as name end
 177+ 6E59             >
 177+ 6E59 4C 6E       >                dw      last_NFA            // Link to previous definition Name
 177+ 6E5B             >USE:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 177+ 6E5B C1 6C       >                dw      User_Ptr ; ok        // for primitive definitions  actual code
 177+ 6E5D             >                else
 177+ 6E5D ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 177+ 6E5D             >                endif           ; ok        // for other definitions it "points" the correct handler
 177+ 6E5D             >                // Use of "; ok" to suppress "warning[fwdref]"
 177+ 6E5D             >
 177+ 6E5D             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 177+ 6E5D 3A          >                db      58
 178+ 6E5E                              User_Def PREV       , "PREV"      , 60 // address of previous used block
 178+ 6E5E             >                New_Def  PREV, "PREV", User_Ptr, is_normal
 178+ 6E5E             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 178+ 6E5E             >
 178+ 6E5E             >                // dummy db directives used to calculate length of namec
 178+ 6E5E 50 52 45 56 >                db      "PREV"
 178+ 6E62             >len_NFA         defl    $ - temp_NFA
 178+ 6E62             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 178+ 6E5E             >
 178+ 6E5E 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 178+ 6E5F 50 52 45 56 >                db      "PREV"               // name string in 7-bit ascii, but
 178+ 6E63             >                org     $-1                 // alter last byte of Name just above to set
 178+ 6E62 D6          >                db      {b $} | END_BIT     // msb as name end
 178+ 6E63             >
 178+ 6E63 55 6E       >                dw      last_NFA            // Link to previous definition Name
 178+ 6E65             >PREV:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 178+ 6E65 C1 6C       >                dw      User_Ptr ; ok        // for primitive definitions  actual code
 178+ 6E67             >                else
 178+ 6E67 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 178+ 6E67             >                endif           ; ok        // for other definitions it "points" the correct handler
 178+ 6E67             >                // Use of "; ok" to suppress "warning[fwdref]"
 178+ 6E67             >
 178+ 6E67             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 178+ 6E67 3C          >                db      60
 179+ 6E68                              User_Def LP         , "LP"        , 62 // line printer (not used)
 179+ 6E68             >                New_Def  LP, "LP", User_Ptr, is_normal
 179+ 6E68             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 179+ 6E68             >
 179+ 6E68             >                // dummy db directives used to calculate length of namec
 179+ 6E68 4C 50       >                db      "LP"
 179+ 6E6A             >len_NFA         defl    $ - temp_NFA
 179+ 6E6A             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 179+ 6E68             >
 179+ 6E68 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 179+ 6E69 4C 50       >                db      "LP"               // name string in 7-bit ascii, but
 179+ 6E6B             >                org     $-1                 // alter last byte of Name just above to set
 179+ 6E6A D0          >                db      {b $} | END_BIT     // msb as name end
 179+ 6E6B             >
 179+ 6E6B 5E 6E       >                dw      last_NFA            // Link to previous definition Name
 179+ 6E6D             >LP:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 179+ 6E6D C1 6C       >                dw      User_Ptr ; ok        // for primitive definitions  actual code
 179+ 6E6F             >                else
 179+ 6E6F ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 179+ 6E6F             >                endif           ; ok        // for other definitions it "points" the correct handler
 179+ 6E6F             >                // Use of "; ok" to suppress "warning[fwdref]"
 179+ 6E6F             >
 179+ 6E6F             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 179+ 6E6F 3E          >                db      62
 180+ 6E70                              User_Def PLACE      , "PLACE"     , 64 // number of digits after decimal point in output
 180+ 6E70             >                New_Def  PLACE, "PLACE", User_Ptr, is_normal
 180+ 6E70             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 180+ 6E70             >
 180+ 6E70             >                // dummy db directives used to calculate length of namec
 180+ 6E70 50 4C 41 43 >                db      "PLACE"
 180+ 6E74 45          >
 180+ 6E75             >len_NFA         defl    $ - temp_NFA
 180+ 6E75             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 180+ 6E70             >
 180+ 6E70 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 180+ 6E71 50 4C 41 43 >                db      "PLACE"               // name string in 7-bit ascii, but
 180+ 6E75 45          >
 180+ 6E76             >                org     $-1                 // alter last byte of Name just above to set
 180+ 6E75 C5          >                db      {b $} | END_BIT     // msb as name end
 180+ 6E76             >
 180+ 6E76 68 6E       >                dw      last_NFA            // Link to previous definition Name
 180+ 6E78             >PLACE:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 180+ 6E78 C1 6C       >                dw      User_Ptr ; ok        // for primitive definitions  actual code
 180+ 6E7A             >                else
 180+ 6E7A ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 180+ 6E7A             >                endif           ; ok        // for other definitions it "points" the correct handler
 180+ 6E7A             >                // Use of "; ok" to suppress "warning[fwdref]"
 180+ 6E7A             >
 180+ 6E7A             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 180+ 6E7A 40          >                db      64
 181+ 6E7B                              User_Def SOURCE_ID  , "SOURCE-ID" , 66 // data-stream number in INCLUDE and LOAD-
 181+ 6E7B             >                New_Def  SOURCE_ID, "SOURCE-ID", User_Ptr, is_normal
 181+ 6E7B             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 181+ 6E7B             >
 181+ 6E7B             >                // dummy db directives used to calculate length of namec
 181+ 6E7B 53 4F 55 52 >                db      "SOURCE-ID"
 181+ 6E7F 43 45 2D 49 >
 181+ 6E83 44          >
 181+ 6E84             >len_NFA         defl    $ - temp_NFA
 181+ 6E84             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 181+ 6E7B             >
 181+ 6E7B 89          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 181+ 6E7C 53 4F 55 52 >                db      "SOURCE-ID"               // name string in 7-bit ascii, but
 181+ 6E80 43 45 2D 49 >
 181+ 6E84 44          >
 181+ 6E85             >                org     $-1                 // alter last byte of Name just above to set
 181+ 6E84 C4          >                db      {b $} | END_BIT     // msb as name end
 181+ 6E85             >
 181+ 6E85 70 6E       >                dw      last_NFA            // Link to previous definition Name
 181+ 6E87             >SOURCE_ID:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 181+ 6E87 C1 6C       >                dw      User_Ptr ; ok        // for primitive definitions  actual code
 181+ 6E89             >                else
 181+ 6E89 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 181+ 6E89             >                endif           ; ok        // for other definitions it "points" the correct handler
 181+ 6E89             >                // Use of "; ok" to suppress "warning[fwdref]"
 181+ 6E89             >
 181+ 6E89             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 181+ 6E89 42          >                db      66
 182+ 6E8A                              User_Def SPAN       , "SPAN"      , 68 // number of character of last EXPECT
 182+ 6E8A             >                New_Def  SPAN, "SPAN", User_Ptr, is_normal
 182+ 6E8A             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 182+ 6E8A             >
 182+ 6E8A             >                // dummy db directives used to calculate length of namec
 182+ 6E8A 53 50 41 4E >                db      "SPAN"
 182+ 6E8E             >len_NFA         defl    $ - temp_NFA
 182+ 6E8E             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 182+ 6E8A             >
 182+ 6E8A 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 182+ 6E8B 53 50 41 4E >                db      "SPAN"               // name string in 7-bit ascii, but
 182+ 6E8F             >                org     $-1                 // alter last byte of Name just above to set
 182+ 6E8E CE          >                db      {b $} | END_BIT     // msb as name end
 182+ 6E8F             >
 182+ 6E8F 7B 6E       >                dw      last_NFA            // Link to previous definition Name
 182+ 6E91             >SPAN:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 182+ 6E91 C1 6C       >                dw      User_Ptr ; ok        // for primitive definitions  actual code
 182+ 6E93             >                else
 182+ 6E93 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 182+ 6E93             >                endif           ; ok        // for other definitions it "points" the correct handler
 182+ 6E93             >                // Use of "; ok" to suppress "warning[fwdref]"
 182+ 6E93             >
 182+ 6E93             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 182+ 6E93 44          >                db      68
 183+ 6E94                              User_Def HANDLER    , "HANDLER"   , 70 // Used by THROW-CATCH
 183+ 6E94             >                New_Def  HANDLER, "HANDLER", User_Ptr, is_normal
 183+ 6E94             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 183+ 6E94             >
 183+ 6E94             >                // dummy db directives used to calculate length of namec
 183+ 6E94 48 41 4E 44 >                db      "HANDLER"
 183+ 6E98 4C 45 52    >
 183+ 6E9B             >len_NFA         defl    $ - temp_NFA
 183+ 6E9B             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 183+ 6E94             >
 183+ 6E94 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 183+ 6E95 48 41 4E 44 >                db      "HANDLER"               // name string in 7-bit ascii, but
 183+ 6E99 4C 45 52    >
 183+ 6E9C             >                org     $-1                 // alter last byte of Name just above to set
 183+ 6E9B D2          >                db      {b $} | END_BIT     // msb as name end
 183+ 6E9C             >
 183+ 6E9C 8A 6E       >                dw      last_NFA            // Link to previous definition Name
 183+ 6E9E             >HANDLER:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 183+ 6E9E C1 6C       >                dw      User_Ptr ; ok        // for primitive definitions  actual code
 183+ 6EA0             >                else
 183+ 6EA0 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 183+ 6EA0             >                endif           ; ok        // for other definitions it "points" the correct handler
 183+ 6EA0             >                // Use of "; ok" to suppress "warning[fwdref]"
 183+ 6EA0             >
 183+ 6EA0             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 183+ 6EA0 46          >                db      70
 184+ 6EA1                              User_Def HP         , "HP"        , 72 // heap-pointer address
 184+ 6EA1             >                New_Def  HP, "HP", User_Ptr, is_normal
 184+ 6EA1             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 184+ 6EA1             >
 184+ 6EA1             >                // dummy db directives used to calculate length of namec
 184+ 6EA1 48 50       >                db      "HP"
 184+ 6EA3             >len_NFA         defl    $ - temp_NFA
 184+ 6EA3             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 184+ 6EA1             >
 184+ 6EA1 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 184+ 6EA2 48 50       >                db      "HP"               // name string in 7-bit ascii, but
 184+ 6EA4             >                org     $-1                 // alter last byte of Name just above to set
 184+ 6EA3 D0          >                db      {b $} | END_BIT     // msb as name end
 184+ 6EA4             >
 184+ 6EA4 94 6E       >                dw      last_NFA            // Link to previous definition Name
 184+ 6EA6             >HP:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 184+ 6EA6 C1 6C       >                dw      User_Ptr ; ok        // for primitive definitions  actual code
 184+ 6EA8             >                else
 184+ 6EA8 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 184+ 6EA8             >                endif           ; ok        // for other definitions it "points" the correct handler
 184+ 6EA8             >                // Use of "; ok" to suppress "warning[fwdref]"
 184+ 6EA8             >
 184+ 6EA8             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 184+ 6EA8 48          >                db      72
 185+ 6EA9
 186+ 6EA9              //  ______________________________________________________________________
 187+ 6EA9              //
 188+ 6EA9              // here         -- a
 189+ 6EA9                              Colon_Def HERE, "HERE", is_normal
 189+ 6EA9             >                New_Def  HERE, "HERE", Enter_Ptr, is_normal ; ok
 189+ 6EA9             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 189+ 6EA9             >
 189+ 6EA9             >                // dummy db directives used to calculate length of namec
 189+ 6EA9 48 45 52 45 >                db      "HERE"
 189+ 6EAD             >len_NFA         defl    $ - temp_NFA
 189+ 6EAD             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 189+ 6EA9             >
 189+ 6EA9 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 189+ 6EAA 48 45 52 45 >                db      "HERE"               // name string in 7-bit ascii, but
 189+ 6EAE             >                org     $-1                 // alter last byte of Name just above to set
 189+ 6EAD C5          >                db      {b $} | END_BIT     // msb as name end
 189+ 6EAE             >
 189+ 6EAE A1 6E       >                dw      last_NFA            // Link to previous definition Name
 189+ 6EB0             >HERE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 189+ 6EB0 56 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 189+ 6EB2             >                else
 189+ 6EB2 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 189+ 6EB2             >                endif           ; ok        // for other definitions it "points" the correct handler
 189+ 6EB2             >                // Use of "; ok" to suppress "warning[fwdref]"
 189+ 6EB2             >
 189+ 6EB2             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 190+ 6EB2 8F 6D 6B 6B                  dw      DP, FETCH               // dp @
 191+ 6EB6 52 69                        dw      EXIT                    // ;
 192+ 6EB8
 193+ 6EB8              //  ______________________________________________________________________
 194+ 6EB8              //
 195+ 6EB8              // allot        n --
 196+ 6EB8                              Colon_Def ALLOT, "ALLOT", is_normal
 196+ 6EB8             >                New_Def  ALLOT, "ALLOT", Enter_Ptr, is_normal ; ok
 196+ 6EB8             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 196+ 6EB8             >
 196+ 6EB8             >                // dummy db directives used to calculate length of namec
 196+ 6EB8 41 4C 4C 4F >                db      "ALLOT"
 196+ 6EBC 54          >
 196+ 6EBD             >len_NFA         defl    $ - temp_NFA
 196+ 6EBD             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 196+ 6EB8             >
 196+ 6EB8 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 196+ 6EB9 41 4C 4C 4F >                db      "ALLOT"               // name string in 7-bit ascii, but
 196+ 6EBD 54          >
 196+ 6EBE             >                org     $-1                 // alter last byte of Name just above to set
 196+ 6EBD D4          >                db      {b $} | END_BIT     // msb as name end
 196+ 6EBE             >
 196+ 6EBE A9 6E       >                dw      last_NFA            // Link to previous definition Name
 196+ 6EC0             >ALLOT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 196+ 6EC0 56 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 196+ 6EC2             >                else
 196+ 6EC2 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 196+ 6EC2             >                endif           ; ok        // for other definitions it "points" the correct handler
 196+ 6EC2             >                // Use of "; ok" to suppress "warning[fwdref]"
 196+ 6EC2             >
 196+ 6EC2             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 197+ 6EC2 8F 6D 48 6B                  dw      DP,  PLUSSTORE          // dp +!
 198+ 6EC6 52 69                        dw      EXIT                    // ;
 199+ 6EC8
 200+ 6EC8              //  ______________________________________________________________________
 201+ 6EC8              //
 202+ 6EC8              // comma        n --
 203+ 6EC8                              Colon_Def COMMA, ",", is_normal
 203+ 6EC8             >                New_Def  COMMA, ",", Enter_Ptr, is_normal ; ok
 203+ 6EC8             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 203+ 6EC8             >
 203+ 6EC8             >                // dummy db directives used to calculate length of namec
 203+ 6EC8 2C          >                db      ","
 203+ 6EC9             >len_NFA         defl    $ - temp_NFA
 203+ 6EC9             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 203+ 6EC8             >
 203+ 6EC8 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 203+ 6EC9 2C          >                db      ","               // name string in 7-bit ascii, but
 203+ 6ECA             >                org     $-1                 // alter last byte of Name just above to set
 203+ 6EC9 AC          >                db      {b $} | END_BIT     // msb as name end
 203+ 6ECA             >
 203+ 6ECA B8 6E       >                dw      last_NFA            // Link to previous definition Name
 203+ 6ECC             >COMMA:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 203+ 6ECC 56 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 203+ 6ECE             >                else
 203+ 6ECE ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 203+ 6ECE             >                endif           ; ok        // for other definitions it "points" the correct handler
 203+ 6ECE             >                // Use of "; ok" to suppress "warning[fwdref]"
 203+ 6ECE             >
 203+ 6ECE             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 204+ 6ECE B0 6E 78 6B                  dw      HERE, STORE             // here !
 205+ 6ED2 E1 6C C0 6E                  dw      TWO, ALLOT              // 2 allot
 206+ 6ED6 52 69                        dw      EXIT                    // ;
 207+ 6ED8
 208+ 6ED8              //  ______________________________________________________________________
 209+ 6ED8              //
 210+ 6ED8              // ccomma       c --
 211+ 6ED8                              Colon_Def CCOMMA, "C,", is_normal
 211+ 6ED8             >                New_Def  CCOMMA, "C,", Enter_Ptr, is_normal ; ok
 211+ 6ED8             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 211+ 6ED8             >
 211+ 6ED8             >                // dummy db directives used to calculate length of namec
 211+ 6ED8 43 2C       >                db      "C,"
 211+ 6EDA             >len_NFA         defl    $ - temp_NFA
 211+ 6EDA             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 211+ 6ED8             >
 211+ 6ED8 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 211+ 6ED9 43 2C       >                db      "C,"               // name string in 7-bit ascii, but
 211+ 6EDB             >                org     $-1                 // alter last byte of Name just above to set
 211+ 6EDA AC          >                db      {b $} | END_BIT     // msb as name end
 211+ 6EDB             >
 211+ 6EDB C8 6E       >                dw      last_NFA            // Link to previous definition Name
 211+ 6EDD             >CCOMMA:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 211+ 6EDD 56 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 211+ 6EDF             >                else
 211+ 6EDF ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 211+ 6EDF             >                endif           ; ok        // for other definitions it "points" the correct handler
 211+ 6EDF             >                // Use of "; ok" to suppress "warning[fwdref]"
 211+ 6EDF             >
 211+ 6EDF             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 212+ 6EDF B0 6E 94 6B                  dw      HERE, CSTORE            // here c!
 213+ 6EE3 D9 6C C0 6E                  dw      ONE, ALLOT              // 1 allot
 214+ 6EE7 52 69                        dw      EXIT                    // ;
 215+ 6EE9
 216+ 6EE9              //  ______________________________________________________________________
 217+ 6EE9              //
 218+ 6EE9              // s>d          n -- d
 219+ 6EE9              // converts a single precision integer in a double precision
 220+ 6EE9                              New_Def S_TO_D, "S>D", is_code, is_normal
 220+ 6EE9             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 220+ 6EE9             >
 220+ 6EE9             >                // dummy db directives used to calculate length of namec
 220+ 6EE9 53 3E 44    >                db      "S>D"
 220+ 6EEC             >len_NFA         defl    $ - temp_NFA
 220+ 6EEC             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 220+ 6EE9             >
 220+ 6EE9 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 220+ 6EEA 53 3E 44    >                db      "S>D"               // name string in 7-bit ascii, but
 220+ 6EED             >                org     $-1                 // alter last byte of Name just above to set
 220+ 6EEC C4          >                db      {b $} | END_BIT     // msb as name end
 220+ 6EED             >
 220+ 6EED D8 6E       >                dw      last_NFA            // Link to previous definition Name
 220+ 6EEF             >S_TO_D:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 220+ 6EEF ~           >                dw      runcode ; ok        // for primitive definitions  actual code
 220+ 6EEF             >                else
 220+ 6EEF F1 6E       >                dw      $ + 2   ; ok        // is pointed by CFA
 220+ 6EF1             >                endif           ; ok        // for other definitions it "points" the correct handler
 220+ 6EF1             >                // Use of "; ok" to suppress "warning[fwdref]"
 220+ 6EF1             >
 220+ 6EF1             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 221+ 6EF1 D1                           pop     de
 222+ 6EF2 21 00 00                     ld      hl, 0
 223+ 6EF5 7A                           ld      a, d
 224+ 6EF6 E6 80                        and     $80
 225+ 6EF8 28 01                        jr      z, S_to_D_Skip
 226+ 6EFA 2B                           dec     hl                  // $FFFF
 227+ 6EFB              S_to_D_Skip:
 228+ 6EFB D5                           push    de
 229+ 6EFC E5                           push    hl
 230+ 6EFD                              next
 230+ 6EFD DD E9       >                jp      (ix)
 231+ 6EFF
 232+ 6EFF              //  ______________________________________________________________________
 233+ 6EFF              //
 234+ 6EFF              // -            n1 n2 -- n3
 235+ 6EFF              // subtraction
 236+ 6EFF                              New_Def SUBTRACT, "-", is_code, is_normal
 236+ 6EFF             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 236+ 6EFF             >
 236+ 6EFF             >                // dummy db directives used to calculate length of namec
 236+ 6EFF 2D          >                db      "-"
 236+ 6F00             >len_NFA         defl    $ - temp_NFA
 236+ 6F00             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 236+ 6EFF             >
 236+ 6EFF 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 236+ 6F00 2D          >                db      "-"               // name string in 7-bit ascii, but
 236+ 6F01             >                org     $-1                 // alter last byte of Name just above to set
 236+ 6F00 AD          >                db      {b $} | END_BIT     // msb as name end
 236+ 6F01             >
 236+ 6F01 E9 6E       >                dw      last_NFA            // Link to previous definition Name
 236+ 6F03             >SUBTRACT:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 236+ 6F03 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
 236+ 6F03             >                else
 236+ 6F03 05 6F       >                dw      $ + 2   ; ok        // is pointed by CFA
 236+ 6F05             >                endif           ; ok        // for other definitions it "points" the correct handler
 236+ 6F05             >                // Use of "; ok" to suppress "warning[fwdref]"
 236+ 6F05             >
 236+ 6F05             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 237+ 6F05 D1                           pop     de
 238+ 6F06 E1                           pop     hl
 239+ 6F07 A7                           and     a
 240+ 6F08 ED 52                        sbc     hl, de
 241+ 6F0A
 242+ 6F0A                              psh1
 242+ 6F0A E5          >                push    hl
 242+ 6F0B DD E9       >                jp      (ix)
 243+ 6F0D
 244+ 6F0D              //  ______________________________________________________________________
 245+ 6F0D              //
 246+ 6F0D              // =            n1 n2 -- n3
 247+ 6F0D              // equals
 248+ 6F0D                              Colon_Def EQUALS, "=", is_normal
 248+ 6F0D             >                New_Def  EQUALS, "=", Enter_Ptr, is_normal ; ok
 248+ 6F0D             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 248+ 6F0D             >
 248+ 6F0D             >                // dummy db directives used to calculate length of namec
 248+ 6F0D 3D          >                db      "="
 248+ 6F0E             >len_NFA         defl    $ - temp_NFA
 248+ 6F0E             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 248+ 6F0D             >
 248+ 6F0D 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 248+ 6F0E 3D          >                db      "="               // name string in 7-bit ascii, but
 248+ 6F0F             >                org     $-1                 // alter last byte of Name just above to set
 248+ 6F0E BD          >                db      {b $} | END_BIT     // msb as name end
 248+ 6F0F             >
 248+ 6F0F FF 6E       >                dw      last_NFA            // Link to previous definition Name
 248+ 6F11             >EQUALS:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 248+ 6F11 56 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 248+ 6F13             >                else
 248+ 6F13 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 248+ 6F13             >                endif           ; ok        // for other definitions it "points" the correct handler
 248+ 6F13             >                // Use of "; ok" to suppress "warning[fwdref]"
 248+ 6F13             >
 248+ 6F13             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 249+ 6F13 03 6F B5 69                  dw      SUBTRACT, ZEQUAL        // - 0=
 250+ 6F17 52 69                        dw      EXIT                    // ;
 251+ 6F19
 252+ 6F19              //  ______________________________________________________________________
 253+ 6F19              //
 254+ 6F19              // u<           u1 u2 -- u3
 255+ 6F19              // unsigned less-than
 256+ 6F19                              New_Def ULESS, "U<", is_code, is_normal
 256+ 6F19             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 256+ 6F19             >
 256+ 6F19             >                // dummy db directives used to calculate length of namec
 256+ 6F19 55 3C       >                db      "U<"
 256+ 6F1B             >len_NFA         defl    $ - temp_NFA
 256+ 6F1B             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 256+ 6F19             >
 256+ 6F19 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 256+ 6F1A 55 3C       >                db      "U<"               // name string in 7-bit ascii, but
 256+ 6F1C             >                org     $-1                 // alter last byte of Name just above to set
 256+ 6F1B BC          >                db      {b $} | END_BIT     // msb as name end
 256+ 6F1C             >
 256+ 6F1C 0D 6F       >                dw      last_NFA            // Link to previous definition Name
 256+ 6F1E             >ULESS:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 256+ 6F1E ~           >                dw      runcode ; ok        // for primitive definitions  actual code
 256+ 6F1E             >                else
 256+ 6F1E 20 6F       >                dw      $ + 2   ; ok        // is pointed by CFA
 256+ 6F20             >                endif           ; ok        // for other definitions it "points" the correct handler
 256+ 6F20             >                // Use of "; ok" to suppress "warning[fwdref]"
 256+ 6F20             >
 256+ 6F20             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 257+ 6F20 D1                           pop     de
 258+ 6F21 E1                           pop     hl
 259+ 6F22 A7                           and     a
 260+ 6F23 ED 52                        sbc     hl, de
 261+ 6F25 21 FF FF                     ld      hl, -1
 262+ 6F28 38 01                        jr      c, ULess_Skip
 263+ 6F2A 23                               inc     hl
 264+ 6F2B              ULess_Skip:
 265+ 6F2B
 266+ 6F2B                              psh1
 266+ 6F2B E5          >                push    hl
 266+ 6F2C DD E9       >                jp      (ix)
 267+ 6F2E
 268+ 6F2E              //  ______________________________________________________________________
 269+ 6F2E              //
 270+ 6F2E              // <           n1 n2 -- n3
 271+ 6F2E              // less-than
 272+ 6F2E                              New_Def LESS, "<", is_code, is_normal
 272+ 6F2E             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 272+ 6F2E             >
 272+ 6F2E             >                // dummy db directives used to calculate length of namec
 272+ 6F2E 3C          >                db      "<"
 272+ 6F2F             >len_NFA         defl    $ - temp_NFA
 272+ 6F2F             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 272+ 6F2E             >
 272+ 6F2E 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 272+ 6F2F 3C          >                db      "<"               // name string in 7-bit ascii, but
 272+ 6F30             >                org     $-1                 // alter last byte of Name just above to set
 272+ 6F2F BC          >                db      {b $} | END_BIT     // msb as name end
 272+ 6F30             >
 272+ 6F30 19 6F       >                dw      last_NFA            // Link to previous definition Name
 272+ 6F32             >LESS:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 272+ 6F32 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
 272+ 6F32             >                else
 272+ 6F32 34 6F       >                dw      $ + 2   ; ok        // is pointed by CFA
 272+ 6F34             >                endif           ; ok        // for other definitions it "points" the correct handler
 272+ 6F34             >                // Use of "; ok" to suppress "warning[fwdref]"
 272+ 6F34             >
 272+ 6F34             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 273+ 6F34 D1                           pop     de
 274+ 6F35 E1                           pop     hl
 275+ 6F36 7C                           ld      a, h
 276+ 6F37 EE 80                        xor     $80
 277+ 6F39 67                           ld      h, a
 278+ 6F3A 7A                           ld      a, d
 279+ 6F3B EE 80                        xor     $80
 280+ 6F3D 57                           ld      d, a
 281+ 6F3E A7                           and     a
 282+ 6F3F ED 52                        sbc     hl, de
 283+ 6F41 21 FF FF                     ld      hl, -1
 284+ 6F44 38 01                        jr      c, Less_Skip
 285+ 6F46 23                               inc     hl
 286+ 6F47              Less_Skip:
 287+ 6F47
 288+ 6F47                              psh1
 288+ 6F47 E5          >                push    hl
 288+ 6F48 DD E9       >                jp      (ix)
 289+ 6F4A
 290+ 6F4A              //  ______________________________________________________________________
 291+ 6F4A              //
 292+ 6F4A              // >            n1 n2 -- n3
 293+ 6F4A              // greater than
 294+ 6F4A                              Colon_Def GREATER, ">", is_normal
 294+ 6F4A             >                New_Def  GREATER, ">", Enter_Ptr, is_normal ; ok
 294+ 6F4A             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 294+ 6F4A             >
 294+ 6F4A             >                // dummy db directives used to calculate length of namec
 294+ 6F4A 3E          >                db      ">"
 294+ 6F4B             >len_NFA         defl    $ - temp_NFA
 294+ 6F4B             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 294+ 6F4A             >
 294+ 6F4A 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 294+ 6F4B 3E          >                db      ">"               // name string in 7-bit ascii, but
 294+ 6F4C             >                org     $-1                 // alter last byte of Name just above to set
 294+ 6F4B BE          >                db      {b $} | END_BIT     // msb as name end
 294+ 6F4C             >
 294+ 6F4C 2E 6F       >                dw      last_NFA            // Link to previous definition Name
 294+ 6F4E             >GREATER:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 294+ 6F4E 56 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 294+ 6F50             >                else
 294+ 6F50 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 294+ 6F50             >                endif           ; ok        // for other definitions it "points" the correct handler
 294+ 6F50             >                // Use of "; ok" to suppress "warning[fwdref]"
 294+ 6F50             >
 294+ 6F50             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 295+ 6F50 CB 6A 32 6F                  dw      SWAP, LESS              // swap <
 296+ 6F54 52 69                        dw      EXIT                    // ;
 297+ 6F56              //  ______________________________________________________________________
 298+ 6F56              //
 299+ 6F56              // min          n1 n2 -- n3
 300+ 6F56              // minimum between n1 and n2
 301+ 6F56                              Colon_Def MIN, "MIN" , is_normal
 301+ 6F56             >                New_Def  MIN, "MIN", Enter_Ptr, is_normal ; ok
 301+ 6F56             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 301+ 6F56             >
 301+ 6F56             >                // dummy db directives used to calculate length of namec
 301+ 6F56 4D 49 4E    >                db      "MIN"
 301+ 6F59             >len_NFA         defl    $ - temp_NFA
 301+ 6F59             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 301+ 6F56             >
 301+ 6F56 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 301+ 6F57 4D 49 4E    >                db      "MIN"               // name string in 7-bit ascii, but
 301+ 6F5A             >                org     $-1                 // alter last byte of Name just above to set
 301+ 6F59 CE          >                db      {b $} | END_BIT     // msb as name end
 301+ 6F5A             >
 301+ 6F5A 4A 6F       >                dw      last_NFA            // Link to previous definition Name
 301+ 6F5C             >MIN:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 301+ 6F5C 56 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 301+ 6F5E             >                else
 301+ 6F5E ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 301+ 6F5E             >                endif           ; ok        // for other definitions it "points" the correct handler
 301+ 6F5E             >                // Use of "; ok" to suppress "warning[fwdref]"
 301+ 6F5E             >
 301+ 6F5E             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 302+ 6F5E 39 6B                        dw      TWO_DUP                 // 2dup
 303+ 6F60 4E 6F                        dw      GREATER                 // >
 304+ 6F62 E3 63                        dw      ZBRANCH
 305+ 6F64 04 00                        dw      Min_Skip - $   // if
 306+ 6F66 CB 6A                        dw          SWAP                //      swap
 307+ 6F68              Min_Skip:                                       // endif
 308+ 6F68 A3 6A                        dw      DROP                    // drop
 309+ 6F6A 52 69                        dw      EXIT                    // ;
 310+ 6F6C
 311+ 6F6C              //  ______________________________________________________________________
 312+ 6F6C              //
 313+ 6F6C              // max          n1 n2 -- n3
 314+ 6F6C              // maximum between n1 and n2
 315+ 6F6C                              Colon_Def MAX, "MAX", is_normal
 315+ 6F6C             >                New_Def  MAX, "MAX", Enter_Ptr, is_normal ; ok
 315+ 6F6C             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 315+ 6F6C             >
 315+ 6F6C             >                // dummy db directives used to calculate length of namec
 315+ 6F6C 4D 41 58    >                db      "MAX"
 315+ 6F6F             >len_NFA         defl    $ - temp_NFA
 315+ 6F6F             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 315+ 6F6C             >
 315+ 6F6C 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 315+ 6F6D 4D 41 58    >                db      "MAX"               // name string in 7-bit ascii, but
 315+ 6F70             >                org     $-1                 // alter last byte of Name just above to set
 315+ 6F6F D8          >                db      {b $} | END_BIT     // msb as name end
 315+ 6F70             >
 315+ 6F70 56 6F       >                dw      last_NFA            // Link to previous definition Name
 315+ 6F72             >MAX:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 315+ 6F72 56 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 315+ 6F74             >                else
 315+ 6F74 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 315+ 6F74             >                endif           ; ok        // for other definitions it "points" the correct handler
 315+ 6F74             >                // Use of "; ok" to suppress "warning[fwdref]"
 315+ 6F74             >
 315+ 6F74             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 316+ 6F74 39 6B                        dw      TWO_DUP                 // 2dup
 317+ 6F76 32 6F                        dw      LESS                    // <
 318+ 6F78 E3 63                        dw      ZBRANCH
 319+ 6F7A 04 00                        dw      Max_Skip - $   // if
 320+ 6F7C CB 6A                        dw          SWAP                //      swap
 321+ 6F7E              Max_Skip:                                       // endif
 322+ 6F7E A3 6A                        dw      DROP                    // drop
 323+ 6F80 52 69                        dw      EXIT                    // ;
 324+ 6F82
 325+ 6F82              //  ______________________________________________________________________
 326+ 6F82              //
 327+ 6F82              // ?dup         n -- 0 | n n
 328+ 6F82              // duplicate if not zero
 329+ 6F82                              New_Def QDUP, "?DUP", is_code, is_normal
 329+ 6F82             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 329+ 6F82             >
 329+ 6F82             >                // dummy db directives used to calculate length of namec
 329+ 6F82 3F 44 55 50 >                db      "?DUP"
 329+ 6F86             >len_NFA         defl    $ - temp_NFA
 329+ 6F86             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 329+ 6F82             >
 329+ 6F82 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 329+ 6F83 3F 44 55 50 >                db      "?DUP"               // name string in 7-bit ascii, but
 329+ 6F87             >                org     $-1                 // alter last byte of Name just above to set
 329+ 6F86 D0          >                db      {b $} | END_BIT     // msb as name end
 329+ 6F87             >
 329+ 6F87 6C 6F       >                dw      last_NFA            // Link to previous definition Name
 329+ 6F89             >QDUP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 329+ 6F89 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
 329+ 6F89             >                else
 329+ 6F89 8B 6F       >                dw      $ + 2   ; ok        // is pointed by CFA
 329+ 6F8B             >                endif           ; ok        // for other definitions it "points" the correct handler
 329+ 6F8B             >                // Use of "; ok" to suppress "warning[fwdref]"
 329+ 6F8B             >
 329+ 6F8B             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 330+ 6F8B              QDup_Ptr:
 331+ 6F8B E1                           pop     hl
 332+ 6F8C 7C                           ld      a, h
 333+ 6F8D B5                           or      l
 334+ 6F8E 28 01                        jr      z, QDup_Skip
 335+ 6F90 E5                               push    hl
 336+ 6F91              QDup_Skip:
 337+ 6F91                              psh1
 337+ 6F91 E5          >                push    hl
 337+ 6F92 DD E9       >                jp      (ix)
 338+ 6F94
 339+ 6F94              //  ______________________________________________________________________
 340+ 6F94              //
 341+ 6F94              // -dup         n -- 0 | n n
 342+ 6F94              // duplicate if not zero
 343+ 6F94                              New_Def LDUP, "-DUP", QDup_Ptr, is_normal
 343+ 6F94             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 343+ 6F94             >
 343+ 6F94             >                // dummy db directives used to calculate length of namec
 343+ 6F94 2D 44 55 50 >                db      "-DUP"
 343+ 6F98             >len_NFA         defl    $ - temp_NFA
 343+ 6F98             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 343+ 6F94             >
 343+ 6F94 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 343+ 6F95 2D 44 55 50 >                db      "-DUP"               // name string in 7-bit ascii, but
 343+ 6F99             >                org     $-1                 // alter last byte of Name just above to set
 343+ 6F98 D0          >                db      {b $} | END_BIT     // msb as name end
 343+ 6F99             >
 343+ 6F99 82 6F       >                dw      last_NFA            // Link to previous definition Name
 343+ 6F9B             >LDUP:          if QDup_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 343+ 6F9B 8B 6F       >                dw      QDup_Ptr ; ok        // for primitive definitions  actual code
 343+ 6F9D             >                else
 343+ 6F9D ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 343+ 6F9D             >                endif           ; ok        // for other definitions it "points" the correct handler
 343+ 6F9D             >                // Use of "; ok" to suppress "warning[fwdref]"
 343+ 6F9D             >
 343+ 6F9D             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 344+ 6F9D
 345+ 6F9D              //  ______________________________________________________________________
 346+ 6F9D              //
 347+ 6F9D              // emit         c --
 348+ 6F9D                              Colon_Def EMIT, "EMIT", is_normal
 348+ 6F9D             >                New_Def  EMIT, "EMIT", Enter_Ptr, is_normal ; ok
 348+ 6F9D             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 348+ 6F9D             >
 348+ 6F9D             >                // dummy db directives used to calculate length of namec
 348+ 6F9D 45 4D 49 54 >                db      "EMIT"
 348+ 6FA1             >len_NFA         defl    $ - temp_NFA
 348+ 6FA1             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 348+ 6F9D             >
 348+ 6F9D 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 348+ 6F9E 45 4D 49 54 >                db      "EMIT"               // name string in 7-bit ascii, but
 348+ 6FA2             >                org     $-1                 // alter last byte of Name just above to set
 348+ 6FA1 D4          >                db      {b $} | END_BIT     // msb as name end
 348+ 6FA2             >
 348+ 6FA2 94 6F       >                dw      last_NFA            // Link to previous definition Name
 348+ 6FA4             >EMIT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 348+ 6FA4 56 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 348+ 6FA6             >                else
 348+ 6FA6 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 348+ 6FA6             >                endif           ; ok        // for other definitions it "points" the correct handler
 348+ 6FA6             >                // Use of "; ok" to suppress "warning[fwdref]"
 348+ 6FA6             >
 348+ 6FA6             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 349+ 6FA6 32 66                        dw      C_EMIT                      // (?emit)
 350+ 6FA8 89 6F                        dw      QDUP                        // ?dup
 351+ 6FAA                                                                  // if
 352+ 6FAA E3 63                        dw      ZBRANCH
 353+ 6FAC 0A 00                        dw      Emit_Skip - $
 354+ 6FAE FE 65                        dw          EMITC                   //      emitc
 355+ 6FB0 D9 6C                        dw          ONE                     //      1
 356+ 6FB2 E2 6D 48 6B                  dw          OUT, PLUSSTORE        //      out +!
 357+ 6FB6              Emit_Skip:                                          // endif
 358+ 6FB6 52 69                        dw      EXIT                        // ;
 359+ 6FB8
 360+ 6FB8              //  ______________________________________________________________________
 361+ 6FB8              //
 362+ 6FB8              // space        --
 363+ 6FB8                              Colon_Def SPACE, "SPACE", is_normal
 363+ 6FB8             >                New_Def  SPACE, "SPACE", Enter_Ptr, is_normal ; ok
 363+ 6FB8             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 363+ 6FB8             >
 363+ 6FB8             >                // dummy db directives used to calculate length of namec
 363+ 6FB8 53 50 41 43 >                db      "SPACE"
 363+ 6FBC 45          >
 363+ 6FBD             >len_NFA         defl    $ - temp_NFA
 363+ 6FBD             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 363+ 6FB8             >
 363+ 6FB8 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 363+ 6FB9 53 50 41 43 >                db      "SPACE"               // name string in 7-bit ascii, but
 363+ 6FBD 45          >
 363+ 6FBE             >                org     $-1                 // alter last byte of Name just above to set
 363+ 6FBD C5          >                db      {b $} | END_BIT     // msb as name end
 363+ 6FBE             >
 363+ 6FBE 9D 6F       >                dw      last_NFA            // Link to previous definition Name
 363+ 6FC0             >SPACE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 363+ 6FC0 56 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 363+ 6FC2             >                else
 363+ 6FC2 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 363+ 6FC2             >                endif           ; ok        // for other definitions it "points" the correct handler
 363+ 6FC2             >                // Use of "; ok" to suppress "warning[fwdref]"
 363+ 6FC2             >
 363+ 6FC2             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 364+ 6FC2 FB 6C A4 6F                  dw      BL, EMIT                // bl emit
 365+ 6FC6 52 69                        dw      EXIT                    // ;
 366+ 6FC8
 367+ 6FC8              //  ______________________________________________________________________
 368+ 6FC8              //
 369+ 6FC8              // traverse     a n -- a
 370+ 6FC8              // A dictionary entry is structured as follows
 371+ 6FC8              // NFA: +0   one byte of word-length (n<32) | some flags (immediate, smudge) | $80
 372+ 6FC8              //      +1   word name, last character is toggled with $80
 373+ 6FC8              // LFA: +1+n link to NFA ofprevious  dictionary entry.
 374+ 6FC8              // CFA: +3+n routine address. Colon definitions here have pointer to code
 375+ 6FC8              // PFA: +5+n "is_code", definitions have no PFA.
 376+ 6FC8              //
 377+ 6FC8                              Colon_Def TRAVERSE, "TRAVERSE", is_normal
 377+ 6FC8             >                New_Def  TRAVERSE, "TRAVERSE", Enter_Ptr, is_normal ; ok
 377+ 6FC8             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 377+ 6FC8             >
 377+ 6FC8             >                // dummy db directives used to calculate length of namec
 377+ 6FC8 54 52 41 56 >                db      "TRAVERSE"
 377+ 6FCC 45 52 53 45 >
 377+ 6FD0             >len_NFA         defl    $ - temp_NFA
 377+ 6FD0             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 377+ 6FC8             >
 377+ 6FC8 88          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 377+ 6FC9 54 52 41 56 >                db      "TRAVERSE"               // name string in 7-bit ascii, but
 377+ 6FCD 45 52 53 45 >
 377+ 6FD1             >                org     $-1                 // alter last byte of Name just above to set
 377+ 6FD0 C5          >                db      {b $} | END_BIT     // msb as name end
 377+ 6FD1             >
 377+ 6FD1 B8 6F       >                dw      last_NFA            // Link to previous definition Name
 377+ 6FD3             >TRAVERSE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 377+ 6FD3 56 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 377+ 6FD5             >                else
 377+ 6FD5 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 377+ 6FD5             >                endif           ; ok        // for other definitions it "points" the correct handler
 377+ 6FD5             >                // Use of "; ok" to suppress "warning[fwdref]"
 377+ 6FD5             >
 377+ 6FD5             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 378+ 6FD5 CB 6A                        dw      SWAP                    // swap
 379+ 6FD7              Traverse_Begin:                                 // begin
 380+ 6FD7 93 6A F8 69                  dw          OVER, PLUS          //      over +
 381+ 6FDB A9 63 7F 00                  dw          LIT, 127            //      127
 382+ 6FDF 93 6A 86 6B                  dw          OVER, CFETCH        //      over @
 383+ 6FE3 32 6F                        dw          LESS                //      <
 384+ 6FE5                                                              // until
 385+ 6FE5 E3 63                        dw      ZBRANCH
 386+ 6FE7 F0 FF                        dw      Traverse_Begin - $
 387+ 6FE9 AE 6A                        dw      NIP                     //  nip
 388+ 6FEB 52 69                        dw      EXIT                    //  ;
 389+ 6FED
 390+ 6FED              //  ______________________________________________________________________
 391+ 6FED              //
 392+ 6FED              // latest       -- nfa
 393+ 6FED                              Colon_Def LATEST, "LATEST", is_normal
 393+ 6FED             >                New_Def  LATEST, "LATEST", Enter_Ptr, is_normal ; ok
 393+ 6FED             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 393+ 6FED             >
 393+ 6FED             >                // dummy db directives used to calculate length of namec
 393+ 6FED 4C 41 54 45 >                db      "LATEST"
 393+ 6FF1 53 54       >
 393+ 6FF3             >len_NFA         defl    $ - temp_NFA
 393+ 6FF3             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 393+ 6FED             >
 393+ 6FED 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 393+ 6FEE 4C 41 54 45 >                db      "LATEST"               // name string in 7-bit ascii, but
 393+ 6FF2 53 54       >
 393+ 6FF4             >                org     $-1                 // alter last byte of Name just above to set
 393+ 6FF3 D4          >                db      {b $} | END_BIT     // msb as name end
 393+ 6FF4             >
 393+ 6FF4 C8 6F       >                dw      last_NFA            // Link to previous definition Name
 393+ 6FF6             >LATEST:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 393+ 6FF6 56 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 393+ 6FF8             >                else
 393+ 6FF8 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 393+ 6FF8             >                endif           ; ok        // for other definitions it "points" the correct handler
 393+ 6FF8             >                // Use of "; ok" to suppress "warning[fwdref]"
 393+ 6FF8             >
 393+ 6FF8             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 394+ 6FF8 11 6E                        dw      CURRENT                 // current
 395+ 6FFA 6B 6B 6B 6B                  dw      FETCH, FETCH            // @ @
 396+ 6FFE 52 69                        dw      EXIT                    // ;
 397+ 7000
 398+ 7000              //  ______________________________________________________________________
 399+ 7000              //
 400+ 7000              // lfa          pfa -- lfa
 401+ 7000                              Colon_Def LFA, "LFA", is_normal
 401+ 7000             >                New_Def  LFA, "LFA", Enter_Ptr, is_normal ; ok
 401+ 7000             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 401+ 7000             >
 401+ 7000             >                // dummy db directives used to calculate length of namec
 401+ 7000 4C 46 41    >                db      "LFA"
 401+ 7003             >len_NFA         defl    $ - temp_NFA
 401+ 7003             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 401+ 7000             >
 401+ 7000 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 401+ 7001 4C 46 41    >                db      "LFA"               // name string in 7-bit ascii, but
 401+ 7004             >                org     $-1                 // alter last byte of Name just above to set
 401+ 7003 C1          >                db      {b $} | END_BIT     // msb as name end
 401+ 7004             >
 401+ 7004 ED 6F       >                dw      last_NFA            // Link to previous definition Name
 401+ 7006             >LFA:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 401+ 7006 56 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 401+ 7008             >                else
 401+ 7008 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 401+ 7008             >                endif           ; ok        // for other definitions it "points" the correct handler
 401+ 7008             >                // Use of "; ok" to suppress "warning[fwdref]"
 401+ 7008             >
 401+ 7008             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 402+ 7008 4B 6A                        dw      CELL_MINUS              // cell-
 403+ 700A 4B 6A                        dw      CELL_MINUS              // cell-
 404+ 700C 52 69                        dw      EXIT                    // ;
 405+ 700E
 406+ 700E              //  ______________________________________________________________________
 407+ 700E              //
 408+ 700E              // cfa          pfa -- cfa
 409+ 700E                              Colon_Def CFA, "CFA", is_normal
 409+ 700E             >                New_Def  CFA, "CFA", Enter_Ptr, is_normal ; ok
 409+ 700E             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 409+ 700E             >
 409+ 700E             >                // dummy db directives used to calculate length of namec
 409+ 700E 43 46 41    >                db      "CFA"
 409+ 7011             >len_NFA         defl    $ - temp_NFA
 409+ 7011             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 409+ 700E             >
 409+ 700E 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 409+ 700F 43 46 41    >                db      "CFA"               // name string in 7-bit ascii, but
 409+ 7012             >                org     $-1                 // alter last byte of Name just above to set
 409+ 7011 C1          >                db      {b $} | END_BIT     // msb as name end
 409+ 7012             >
 409+ 7012 00 70       >                dw      last_NFA            // Link to previous definition Name
 409+ 7014             >CFA:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 409+ 7014 56 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 409+ 7016             >                else
 409+ 7016 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 409+ 7016             >                endif           ; ok        // for other definitions it "points" the correct handler
 409+ 7016             >                // Use of "; ok" to suppress "warning[fwdref]"
 409+ 7016             >
 409+ 7016             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 410+ 7016 4B 6A                        dw      CELL_MINUS              // cell-
 411+ 7018 52 69                        dw      EXIT                    // ;
 412+ 701A
 413+ 701A              //  ______________________________________________________________________
 414+ 701A              //
 415+ 701A              // nfa          pfa -- nfa
 416+ 701A                              Colon_Def NFA, "NFA", is_normal
 416+ 701A             >                New_Def  NFA, "NFA", Enter_Ptr, is_normal ; ok
 416+ 701A             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 416+ 701A             >
 416+ 701A             >                // dummy db directives used to calculate length of namec
 416+ 701A 4E 46 41    >                db      "NFA"
 416+ 701D             >len_NFA         defl    $ - temp_NFA
 416+ 701D             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 416+ 701A             >
 416+ 701A 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 416+ 701B 4E 46 41    >                db      "NFA"               // name string in 7-bit ascii, but
 416+ 701E             >                org     $-1                 // alter last byte of Name just above to set
 416+ 701D C1          >                db      {b $} | END_BIT     // msb as name end
 416+ 701E             >
 416+ 701E 0E 70       >                dw      last_NFA            // Link to previous definition Name
 416+ 7020             >NFA:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 416+ 7020 56 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 416+ 7022             >                else
 416+ 7022 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 416+ 7022             >                endif           ; ok        // for other definitions it "points" the correct handler
 416+ 7022             >                // Use of "; ok" to suppress "warning[fwdref]"
 416+ 7022             >
 416+ 7022             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 417+ 7022 A9 63 05 00                  dw      LIT, 5                  // 5
 418+ 7026 03 6F                        dw      SUBTRACT                // -
 419+ 7028 F2 6C                        dw      NEG_ONE                 // -1
 420+ 702A D3 6F                        dw      TRAVERSE                // traverse
 421+ 702C 52 69                        dw      EXIT                    // ;
 422+ 702E
 423+ 702E              //  ______________________________________________________________________
 424+ 702E              //
 425+ 702E              // pfa          nfa -- pfa
 426+ 702E                              Colon_Def PFA, "PFA", is_normal
 426+ 702E             >                New_Def  PFA, "PFA", Enter_Ptr, is_normal ; ok
 426+ 702E             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 426+ 702E             >
 426+ 702E             >                // dummy db directives used to calculate length of namec
 426+ 702E 50 46 41    >                db      "PFA"
 426+ 7031             >len_NFA         defl    $ - temp_NFA
 426+ 7031             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 426+ 702E             >
 426+ 702E 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 426+ 702F 50 46 41    >                db      "PFA"               // name string in 7-bit ascii, but
 426+ 7032             >                org     $-1                 // alter last byte of Name just above to set
 426+ 7031 C1          >                db      {b $} | END_BIT     // msb as name end
 426+ 7032             >
 426+ 7032 1A 70       >                dw      last_NFA            // Link to previous definition Name
 426+ 7034             >PFA:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 426+ 7034 56 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 426+ 7036             >                else
 426+ 7036 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 426+ 7036             >                endif           ; ok        // for other definitions it "points" the correct handler
 426+ 7036             >                // Use of "; ok" to suppress "warning[fwdref]"
 426+ 7036             >
 426+ 7036             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 427+ 7036 D9 6C                        dw      ONE                     // 1
 428+ 7038 D3 6F                        dw      TRAVERSE                // traverse
 429+ 703A A9 63 05 00                  dw      LIT, 5                  // 6
 430+ 703E F8 69                        dw      PLUS                    // +
 431+ 7040 52 69                        dw      EXIT                    // ;
 432+ 7042
 433+ 7042              //  ______________________________________________________________________
 434+ 7042              //
 435+ 7042              // >body        cfa -- pfa
 436+ 7042                              Colon_Def TO_BODY, ">BODY", is_normal
 436+ 7042             >                New_Def  TO_BODY, ">BODY", Enter_Ptr, is_normal ; ok
 436+ 7042             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 436+ 7042             >
 436+ 7042             >                // dummy db directives used to calculate length of namec
 436+ 7042 3E 42 4F 44 >                db      ">BODY"
 436+ 7046 59          >
 436+ 7047             >len_NFA         defl    $ - temp_NFA
 436+ 7047             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 436+ 7042             >
 436+ 7042 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 436+ 7043 3E 42 4F 44 >                db      ">BODY"               // name string in 7-bit ascii, but
 436+ 7047 59          >
 436+ 7048             >                org     $-1                 // alter last byte of Name just above to set
 436+ 7047 D9          >                db      {b $} | END_BIT     // msb as name end
 436+ 7048             >
 436+ 7048 2E 70       >                dw      last_NFA            // Link to previous definition Name
 436+ 704A             >TO_BODY:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 436+ 704A 56 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 436+ 704C             >                else
 436+ 704C ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 436+ 704C             >                endif           ; ok        // for other definitions it "points" the correct handler
 436+ 704C             >                // Use of "; ok" to suppress "warning[fwdref]"
 436+ 704C             >
 436+ 704C             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 437+ 704C 41 6A                        dw      CELL_PLUS               // cell+
 438+ 704E 52 69                        dw      EXIT                    // ;
 439+ 7050
 440+ 7050              //  ______________________________________________________________________
 441+ 7050              //
 442+ 7050              // <name        cfa -- nfa
 443+ 7050                              Colon_Def TO_NAME, "<NAME", is_normal
 443+ 7050             >                New_Def  TO_NAME, "<NAME", Enter_Ptr, is_normal ; ok
 443+ 7050             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 443+ 7050             >
 443+ 7050             >                // dummy db directives used to calculate length of namec
 443+ 7050 3C 4E 41 4D >                db      "<NAME"
 443+ 7054 45          >
 443+ 7055             >len_NFA         defl    $ - temp_NFA
 443+ 7055             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 443+ 7050             >
 443+ 7050 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 443+ 7051 3C 4E 41 4D >                db      "<NAME"               // name string in 7-bit ascii, but
 443+ 7055 45          >
 443+ 7056             >                org     $-1                 // alter last byte of Name just above to set
 443+ 7055 C5          >                db      {b $} | END_BIT     // msb as name end
 443+ 7056             >
 443+ 7056 42 70       >                dw      last_NFA            // Link to previous definition Name
 443+ 7058             >TO_NAME:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 443+ 7058 56 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 443+ 705A             >                else
 443+ 705A ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 443+ 705A             >                endif           ; ok        // for other definitions it "points" the correct handler
 443+ 705A             >                // Use of "; ok" to suppress "warning[fwdref]"
 443+ 705A             >
 443+ 705A             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 444+ 705A 4A 70                        dw      TO_BODY                 // >body
 445+ 705C 20 70                        dw      NFA                     // nfa
 446+ 705E 52 69                        dw      EXIT                    // ;
 447+ 7060
 448+ 7060              //  ______________________________________________________________________
 449+ 7060              //
 450+ 7060              // !csp         --
 451+ 7060              // store in user variable CSP current value of SP. Used at compile-time for syntax checkng
 452+ 7060                              Colon_Def STORE_CSP, "!CSP", is_normal
 452+ 7060             >                New_Def  STORE_CSP, "!CSP", Enter_Ptr, is_normal ; ok
 452+ 7060             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 452+ 7060             >
 452+ 7060             >                // dummy db directives used to calculate length of namec
 452+ 7060 21 43 53 50 >                db      "!CSP"
 452+ 7064             >len_NFA         defl    $ - temp_NFA
 452+ 7064             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 452+ 7060             >
 452+ 7060 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 452+ 7061 21 43 53 50 >                db      "!CSP"               // name string in 7-bit ascii, but
 452+ 7065             >                org     $-1                 // alter last byte of Name just above to set
 452+ 7064 D0          >                db      {b $} | END_BIT     // msb as name end
 452+ 7065             >
 452+ 7065 50 70       >                dw      last_NFA            // Link to previous definition Name
 452+ 7067             >STORE_CSP:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 452+ 7067 56 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 452+ 7069             >                else
 452+ 7069 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 452+ 7069             >                endif           ; ok        // for other definitions it "points" the correct handler
 452+ 7069             >                // Use of "; ok" to suppress "warning[fwdref]"
 452+ 7069             >
 452+ 7069             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 453+ 7069 1A 69                        dw      SPFETCH                 // sp@
 454+ 706B 41 6E 78 6B                  dw      CSP, STORE              // csp !
 455+ 706F 52 69                        dw      EXIT                    // ;
 456+ 7071
 457+ 7071              //  ______________________________________________________________________
 458+ 7071              //
 459+ 7071              // ?error       f n --
 460+ 7071              // rase error n if flag f it true
 461+ 7071                              Colon_Def QERROR, "?ERROR", is_normal
 461+ 7071             >                New_Def  QERROR, "?ERROR", Enter_Ptr, is_normal ; ok
 461+ 7071             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 461+ 7071             >
 461+ 7071             >                // dummy db directives used to calculate length of namec
 461+ 7071 3F 45 52 52 >                db      "?ERROR"
 461+ 7075 4F 52       >
 461+ 7077             >len_NFA         defl    $ - temp_NFA
 461+ 7077             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 461+ 7071             >
 461+ 7071 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 461+ 7072 3F 45 52 52 >                db      "?ERROR"               // name string in 7-bit ascii, but
 461+ 7076 4F 52       >
 461+ 7078             >                org     $-1                 // alter last byte of Name just above to set
 461+ 7077 D2          >                db      {b $} | END_BIT     // msb as name end
 461+ 7078             >
 461+ 7078 60 70       >                dw      last_NFA            // Link to previous definition Name
 461+ 707A             >QERROR:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 461+ 707A 56 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 461+ 707C             >                else
 461+ 707C ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 461+ 707C             >                endif           ; ok        // for other definitions it "points" the correct handler
 461+ 707C             >                // Use of "; ok" to suppress "warning[fwdref]"
 461+ 707C             >
 461+ 707C             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 462+ 707C CB 6A                        dw      SWAP                    // swap
 463+ 707E                                                              // if
 464+ 707E E3 63                        dw      ZBRANCH
 465+ 7080 08 00                        dw      QError_Else - $
 466+ 7082 E7 75                        dw          ERROR               //      error  ( is a forward-ref )
 467+ 7084                                                              // else
 468+ 7084 CC 63                        dw      BRANCH
 469+ 7086 04 00                        dw      QError_Endif - $
 470+ 7088              QError_Else:
 471+ 7088 A3 6A                        dw          DROP                //      drop
 472+ 708A              QError_Endif:                                   // endif
 473+ 708A 52 69                        dw      EXIT                    // ;
 474+ 708C
 475+ 708C              //  ______________________________________________________________________
 476+ 708C              //
 477+ 708C              // ?comp       --
 478+ 708C              // raise msg #17 if not compiling
 479+ 708C                              Colon_Def QCOMP, "?COMP", is_normal
 479+ 708C             >                New_Def  QCOMP, "?COMP", Enter_Ptr, is_normal ; ok
 479+ 708C             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 479+ 708C             >
 479+ 708C             >                // dummy db directives used to calculate length of namec
 479+ 708C 3F 43 4F 4D >                db      "?COMP"
 479+ 7090 50          >
 479+ 7091             >len_NFA         defl    $ - temp_NFA
 479+ 7091             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 479+ 708C             >
 479+ 708C 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 479+ 708D 3F 43 4F 4D >                db      "?COMP"               // name string in 7-bit ascii, but
 479+ 7091 50          >
 479+ 7092             >                org     $-1                 // alter last byte of Name just above to set
 479+ 7091 D0          >                db      {b $} | END_BIT     // msb as name end
 479+ 7092             >
 479+ 7092 71 70       >                dw      last_NFA            // Link to previous definition Name
 479+ 7094             >QCOMP:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 479+ 7094 56 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 479+ 7096             >                else
 479+ 7096 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 479+ 7096             >                endif           ; ok        // for other definitions it "points" the correct handler
 479+ 7096             >                // Use of "; ok" to suppress "warning[fwdref]"
 479+ 7096             >
 479+ 7096             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 480+ 7096 1C 6E 6B 6B                  dw      STATE, FETCH            // state @
 481+ 709A B5 69                        dw      ZEQUAL                  // 0=
 482+ 709C A9 63 11 00                  dw      LIT, 17                 // 17  ( can't be executed )
 483+ 70A0 7A 70                        dw      QERROR                  // ?error
 484+ 70A2 52 69                        dw      EXIT                    // ;
 485+ 70A4
 486+ 70A4              //  ______________________________________________________________________
 487+ 70A4              //
 488+ 70A4              // ?exec       --
 489+ 70A4              // raise msg #18 if compiling
 490+ 70A4                              Colon_Def QEXEC, "?EXEC", is_normal
 490+ 70A4             >                New_Def  QEXEC, "?EXEC", Enter_Ptr, is_normal ; ok
 490+ 70A4             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 490+ 70A4             >
 490+ 70A4             >                // dummy db directives used to calculate length of namec
 490+ 70A4 3F 45 58 45 >                db      "?EXEC"
 490+ 70A8 43          >
 490+ 70A9             >len_NFA         defl    $ - temp_NFA
 490+ 70A9             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 490+ 70A4             >
 490+ 70A4 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 490+ 70A5 3F 45 58 45 >                db      "?EXEC"               // name string in 7-bit ascii, but
 490+ 70A9 43          >
 490+ 70AA             >                org     $-1                 // alter last byte of Name just above to set
 490+ 70A9 C3          >                db      {b $} | END_BIT     // msb as name end
 490+ 70AA             >
 490+ 70AA 8C 70       >                dw      last_NFA            // Link to previous definition Name
 490+ 70AC             >QEXEC:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 490+ 70AC 56 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 490+ 70AE             >                else
 490+ 70AE ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 490+ 70AE             >                endif           ; ok        // for other definitions it "points" the correct handler
 490+ 70AE             >                // Use of "; ok" to suppress "warning[fwdref]"
 490+ 70AE             >
 490+ 70AE             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 491+ 70AE 1C 6E 6B 6B                  dw      STATE, FETCH            // state @
 492+ 70B2 A9 63 12 00                  dw      LIT, 18                 // 18  ( can't be compiled )
 493+ 70B6 7A 70                        dw      QERROR                  // ?error
 494+ 70B8 52 69                        dw      EXIT                    // ;
 495+ 70BA
 496+ 70BA              //  ______________________________________________________________________
 497+ 70BA              //
 498+ 70BA              // ?pairs       n1 n2 --
 499+ 70BA              // raise msg #19 if n1 != n2. Compiler pushes some placeholder to stack for syntax checking
 500+ 70BA                              Colon_Def QPAIRS, "?PAIRS", is_normal
 500+ 70BA             >                New_Def  QPAIRS, "?PAIRS", Enter_Ptr, is_normal ; ok
 500+ 70BA             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 500+ 70BA             >
 500+ 70BA             >                // dummy db directives used to calculate length of namec
 500+ 70BA 3F 50 41 49 >                db      "?PAIRS"
 500+ 70BE 52 53       >
 500+ 70C0             >len_NFA         defl    $ - temp_NFA
 500+ 70C0             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 500+ 70BA             >
 500+ 70BA 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 500+ 70BB 3F 50 41 49 >                db      "?PAIRS"               // name string in 7-bit ascii, but
 500+ 70BF 52 53       >
 500+ 70C1             >                org     $-1                 // alter last byte of Name just above to set
 500+ 70C0 D3          >                db      {b $} | END_BIT     // msb as name end
 500+ 70C1             >
 500+ 70C1 A4 70       >                dw      last_NFA            // Link to previous definition Name
 500+ 70C3             >QPAIRS:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 500+ 70C3 56 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 500+ 70C5             >                else
 500+ 70C5 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 500+ 70C5             >                endif           ; ok        // for other definitions it "points" the correct handler
 500+ 70C5             >                // Use of "; ok" to suppress "warning[fwdref]"
 500+ 70C5             >
 500+ 70C5             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 501+ 70C5 03 6F                        dw      SUBTRACT                // -
 502+ 70C7 A9 63 13 00                  dw      LIT, 19                 // 18  ( syntax error )
 503+ 70CB 7A 70                        dw      QERROR                  // ?error
 504+ 70CD 52 69                        dw      EXIT                    // ;
 505+ 70CF
 506+ 70CF              //  ______________________________________________________________________
 507+ 70CF              //
 508+ 70CF              // ?csp       --
 509+ 70CF              // raise msg #20 if surrent SP in not what previously saved in CSP.
 510+ 70CF              // Compiler relies on that for  syntax checking of structures
 511+ 70CF                              Colon_Def QCSP, "?CSP", is_normal
 511+ 70CF             >                New_Def  QCSP, "?CSP", Enter_Ptr, is_normal ; ok
 511+ 70CF             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 511+ 70CF             >
 511+ 70CF             >                // dummy db directives used to calculate length of namec
 511+ 70CF 3F 43 53 50 >                db      "?CSP"
 511+ 70D3             >len_NFA         defl    $ - temp_NFA
 511+ 70D3             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 511+ 70CF             >
 511+ 70CF 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 511+ 70D0 3F 43 53 50 >                db      "?CSP"               // name string in 7-bit ascii, but
 511+ 70D4             >                org     $-1                 // alter last byte of Name just above to set
 511+ 70D3 D0          >                db      {b $} | END_BIT     // msb as name end
 511+ 70D4             >
 511+ 70D4 BA 70       >                dw      last_NFA            // Link to previous definition Name
 511+ 70D6             >QCSP:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 511+ 70D6 56 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 511+ 70D8             >                else
 511+ 70D8 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 511+ 70D8             >                endif           ; ok        // for other definitions it "points" the correct handler
 511+ 70D8             >                // Use of "; ok" to suppress "warning[fwdref]"
 511+ 70D8             >
 511+ 70D8             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 512+ 70D8 1A 69                        dw      SPFETCH                 // sp@
 513+ 70DA 41 6E 6B 6B                  dw      CSP, FETCH              // csp @
 514+ 70DE 03 6F                        dw      SUBTRACT                // -
 515+ 70E0 A9 63 14 00                  dw      LIT, 20                 // 20  ( bad definition end )
 516+ 70E4 7A 70                        dw      QERROR                  // ?error
 517+ 70E6 52 69                        dw      EXIT                    // ;
 518+ 70E8
 519+ 70E8              //  ______________________________________________________________________
 520+ 70E8              //
 521+ 70E8              // ?loading      --
 522+ 70E8              // raise msg #22 if not loading
 523+ 70E8                              Colon_Def QLOADING, "?LOADING", is_normal
 523+ 70E8             >                New_Def  QLOADING, "?LOADING", Enter_Ptr, is_normal ; ok
 523+ 70E8             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 523+ 70E8             >
 523+ 70E8             >                // dummy db directives used to calculate length of namec
 523+ 70E8 3F 4C 4F 41 >                db      "?LOADING"
 523+ 70EC 44 49 4E 47 >
 523+ 70F0             >len_NFA         defl    $ - temp_NFA
 523+ 70F0             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 523+ 70E8             >
 523+ 70E8 88          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 523+ 70E9 3F 4C 4F 41 >                db      "?LOADING"               // name string in 7-bit ascii, but
 523+ 70ED 44 49 4E 47 >
 523+ 70F1             >                org     $-1                 // alter last byte of Name just above to set
 523+ 70F0 C7          >                db      {b $} | END_BIT     // msb as name end
 523+ 70F1             >
 523+ 70F1 CF 70       >                dw      last_NFA            // Link to previous definition Name
 523+ 70F3             >QLOADING:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 523+ 70F3 56 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 523+ 70F5             >                else
 523+ 70F5 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 523+ 70F5             >                endif           ; ok        // for other definitions it "points" the correct handler
 523+ 70F5             >                // Use of "; ok" to suppress "warning[fwdref]"
 523+ 70F5             >
 523+ 70F5             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 524+ 70F5 D0 6D 6B 6B                  dw      BLK, FETCH              // blk @
 525+ 70F9 B5 69                        dw      ZEQUAL                  // 0=
 526+ 70FB A9 63 16 00                  dw      LIT, 22                 // 22  ( aren't loading now )
 527+ 70FF 7A 70                        dw      QERROR                  // ?error
 528+ 7101 52 69                        dw      EXIT                    // ;
 529+ 7103
 530+ 7103              //  ______________________________________________________________________
 531+ 7103              //
 532+ 7103              // compile      --
 533+ 7103              // compiles the following word
 534+ 7103                              Colon_Def COMPILE, "COMPILE", is_normal
 534+ 7103             >                New_Def  COMPILE, "COMPILE", Enter_Ptr, is_normal ; ok
 534+ 7103             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 534+ 7103             >
 534+ 7103             >                // dummy db directives used to calculate length of namec
 534+ 7103 43 4F 4D 50 >                db      "COMPILE"
 534+ 7107 49 4C 45    >
 534+ 710A             >len_NFA         defl    $ - temp_NFA
 534+ 710A             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 534+ 7103             >
 534+ 7103 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 534+ 7104 43 4F 4D 50 >                db      "COMPILE"               // name string in 7-bit ascii, but
 534+ 7108 49 4C 45    >
 534+ 710B             >                org     $-1                 // alter last byte of Name just above to set
 534+ 710A C5          >                db      {b $} | END_BIT     // msb as name end
 534+ 710B             >
 534+ 710B E8 70       >                dw      last_NFA            // Link to previous definition Name
 534+ 710D             >COMPILE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 534+ 710D 56 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 534+ 710F             >                else
 534+ 710F ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 534+ 710F             >                endif           ; ok        // for other definitions it "points" the correct handler
 534+ 710F             >                // Use of "; ok" to suppress "warning[fwdref]"
 534+ 710F             >
 534+ 710F             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 535+ 710F 94 70                        dw      QCOMP                   // ?comp
 536+ 7111 94 69                        dw      R_TO                    // r>
 537+ 7113 D8 6A 41 6A                  dw      DUP, CELL_PLUS          // dup, cell+
 538+ 7117 80 69                        dw      TO_R                    // >r
 539+ 7119 6B 6B CC 6E                  dw      FETCH, COMMA            // @ ,
 540+ 711D 52 69                        dw      EXIT                    // ;
 541+ 711F
 542+ 711F              //  ______________________________________________________________________
 543+ 711F              //
 544+ 711F              // compile,     --
 545+ 711F              // compiles the following word
 546+ 711F                              Colon_Def COMPILE_XT, "COMPILE,", is_normal
 546+ 711F             >                New_Def  COMPILE_XT, "COMPILE,", Enter_Ptr, is_normal ; ok
 546+ 711F             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 546+ 711F             >
 546+ 711F             >                // dummy db directives used to calculate length of namec
 546+ 711F 43 4F 4D 50 >                db      "COMPILE,"
 546+ 7123 49 4C 45 2C >
 546+ 7127             >len_NFA         defl    $ - temp_NFA
 546+ 7127             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 546+ 711F             >
 546+ 711F 88          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 546+ 7120 43 4F 4D 50 >                db      "COMPILE,"               // name string in 7-bit ascii, but
 546+ 7124 49 4C 45 2C >
 546+ 7128             >                org     $-1                 // alter last byte of Name just above to set
 546+ 7127 AC          >                db      {b $} | END_BIT     // msb as name end
 546+ 7128             >
 546+ 7128 03 71       >                dw      last_NFA            // Link to previous definition Name
 546+ 712A             >COMPILE_XT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 546+ 712A 56 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 546+ 712C             >                else
 546+ 712C ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 546+ 712C             >                endif           ; ok        // for other definitions it "points" the correct handler
 546+ 712C             >                // Use of "; ok" to suppress "warning[fwdref]"
 546+ 712C             >
 546+ 712C             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 547+ 712C 94 70                        dw      QCOMP                   // ?comp
 548+ 712E CC 6E                        dw      COMMA                   // ,
 549+ 7130 52 69                        dw      EXIT                    // ;
 550+ 7132
 551+ 7132              //  ______________________________________________________________________
 552+ 7132              //
 553+ 7132              // [            --
 554+ 7132              // stop compilation
 555+ 7132                              Colon_Def SQUARED_OPEN, "[", is_immediate
 555+ 7132             >                New_Def  SQUARED_OPEN, "[", Enter_Ptr, is_immediate ; ok
 555+ 7132             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 555+ 7132             >
 555+ 7132             >                // dummy db directives used to calculate length of namec
 555+ 7132 5B          >                db      "["
 555+ 7133             >len_NFA         defl    $ - temp_NFA
 555+ 7133             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 555+ 7132             >
 555+ 7132 C1          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 555+ 7133 5B          >                db      "["               // name string in 7-bit ascii, but
 555+ 7134             >                org     $-1                 // alter last byte of Name just above to set
 555+ 7133 DB          >                db      {b $} | END_BIT     // msb as name end
 555+ 7134             >
 555+ 7134 1F 71       >                dw      last_NFA            // Link to previous definition Name
 555+ 7136             >SQUARED_OPEN:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 555+ 7136 56 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 555+ 7138             >                else
 555+ 7138 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 555+ 7138             >                endif           ; ok        // for other definitions it "points" the correct handler
 555+ 7138             >                // Use of "; ok" to suppress "warning[fwdref]"
 555+ 7138             >
 555+ 7138             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 556+ 7138 D1 6C                        dw      ZERO                    // 0
 557+ 713A 1C 6E 78 6B                  dw      STATE, STORE            // state !
 558+ 713E 52 69                        dw      EXIT                    // ; immediate
 559+ 7140
 560+ 7140              //  ______________________________________________________________________
 561+ 7140              //
 562+ 7140              // ]            --
 563+ 7140              // start compilation
 564+ 7140                              Colon_Def SQUARED_CLOSE, "]", is_normal
 564+ 7140             >                New_Def  SQUARED_CLOSE, "]", Enter_Ptr, is_normal ; ok
 564+ 7140             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 564+ 7140             >
 564+ 7140             >                // dummy db directives used to calculate length of namec
 564+ 7140 5D          >                db      "]"
 564+ 7141             >len_NFA         defl    $ - temp_NFA
 564+ 7141             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 564+ 7140             >
 564+ 7140 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 564+ 7141 5D          >                db      "]"               // name string in 7-bit ascii, but
 564+ 7142             >                org     $-1                 // alter last byte of Name just above to set
 564+ 7141 DD          >                db      {b $} | END_BIT     // msb as name end
 564+ 7142             >
 564+ 7142 32 71       >                dw      last_NFA            // Link to previous definition Name
 564+ 7144             >SQUARED_CLOSE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 564+ 7144 56 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 564+ 7146             >                else
 564+ 7146 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 564+ 7146             >                endif           ; ok        // for other definitions it "points" the correct handler
 564+ 7146             >                // Use of "; ok" to suppress "warning[fwdref]"
 564+ 7146             >
 564+ 7146             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 565+ 7146 A9 63 C0 00                  dw      LIT, $C0                // 192
 566+ 714A 1C 6E 78 6B                  dw      STATE, STORE            // state !
 567+ 714E 52 69                        dw      EXIT                    // ;
 568+ 7150
 569+ 7150              //  ______________________________________________________________________
 570+ 7150              //
 571+ 7150              // smudge       --
 572+ 7150              // toggle smudge bit of latest definition
 573+ 7150                              Colon_Def SMUDGE, "SMUDGE", is_normal
 573+ 7150             >                New_Def  SMUDGE, "SMUDGE", Enter_Ptr, is_normal ; ok
 573+ 7150             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 573+ 7150             >
 573+ 7150             >                // dummy db directives used to calculate length of namec
 573+ 7150 53 4D 55 44 >                db      "SMUDGE"
 573+ 7154 47 45       >
 573+ 7156             >len_NFA         defl    $ - temp_NFA
 573+ 7156             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 573+ 7150             >
 573+ 7150 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 573+ 7151 53 4D 55 44 >                db      "SMUDGE"               // name string in 7-bit ascii, but
 573+ 7155 47 45       >
 573+ 7157             >                org     $-1                 // alter last byte of Name just above to set
 573+ 7156 C5          >                db      {b $} | END_BIT     // msb as name end
 573+ 7157             >
 573+ 7157 40 71       >                dw      last_NFA            // Link to previous definition Name
 573+ 7159             >SMUDGE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 573+ 7159 56 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 573+ 715B             >                else
 573+ 715B ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 573+ 715B             >                endif           ; ok        // for other definitions it "points" the correct handler
 573+ 715B             >                // Use of "; ok" to suppress "warning[fwdref]"
 573+ 715B             >
 573+ 715B             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 574+ 715B F6 6F                        dw      LATEST                  // latest
 575+ 715D A9 63 20 00                  dw      LIT, SMUDGE_BIT         // 32
 576+ 7161 5E 6B                        dw      TOGGLE                  // toggle
 577+ 7163 52 69                        dw      EXIT                    // ;
 578+ 7165
 579+ 7165              //  ______________________________________________________________________
 580+ 7165              //
 581+ 7165              // immediate    --
 582+ 7165              // make immediate the latest definition
 583+ 7165                              Colon_Def IMMEDIATE, "IMMEDIATE", is_normal
 583+ 7165             >                New_Def  IMMEDIATE, "IMMEDIATE", Enter_Ptr, is_normal ; ok
 583+ 7165             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 583+ 7165             >
 583+ 7165             >                // dummy db directives used to calculate length of namec
 583+ 7165 49 4D 4D 45 >                db      "IMMEDIATE"
 583+ 7169 44 49 41 54 >
 583+ 716D 45          >
 583+ 716E             >len_NFA         defl    $ - temp_NFA
 583+ 716E             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 583+ 7165             >
 583+ 7165 89          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 583+ 7166 49 4D 4D 45 >                db      "IMMEDIATE"               // name string in 7-bit ascii, but
 583+ 716A 44 49 41 54 >
 583+ 716E 45          >
 583+ 716F             >                org     $-1                 // alter last byte of Name just above to set
 583+ 716E C5          >                db      {b $} | END_BIT     // msb as name end
 583+ 716F             >
 583+ 716F 50 71       >                dw      last_NFA            // Link to previous definition Name
 583+ 7171             >IMMEDIATE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 583+ 7171 56 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 583+ 7173             >                else
 583+ 7173 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 583+ 7173             >                endif           ; ok        // for other definitions it "points" the correct handler
 583+ 7173             >                // Use of "; ok" to suppress "warning[fwdref]"
 583+ 7173             >
 583+ 7173             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 584+ 7173 F6 6F                        dw      LATEST                  // latest
 585+ 7175 A9 63 40 00                  dw      LIT, $40                // 64
 586+ 7179 5E 6B                        dw      TOGGLE                  // toggle
 587+ 717B 52 69                        dw      EXIT                    // ;
 588+ 717D
 589+ 717D              //  ______________________________________________________________________
 590+ 717D              //
 591+ 717D              // hex          --
 592+ 717D              // change numeration base
 593+ 717D                              Colon_Def HEX, "HEX", is_normal
 593+ 717D             >                New_Def  HEX, "HEX", Enter_Ptr, is_normal ; ok
 593+ 717D             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 593+ 717D             >
 593+ 717D             >                // dummy db directives used to calculate length of namec
 593+ 717D 48 45 58    >                db      "HEX"
 593+ 7180             >len_NFA         defl    $ - temp_NFA
 593+ 7180             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 593+ 717D             >
 593+ 717D 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 593+ 717E 48 45 58    >                db      "HEX"               // name string in 7-bit ascii, but
 593+ 7181             >                org     $-1                 // alter last byte of Name just above to set
 593+ 7180 D8          >                db      {b $} | END_BIT     // msb as name end
 593+ 7181             >
 593+ 7181 65 71       >                dw      last_NFA            // Link to previous definition Name
 593+ 7183             >HEX:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 593+ 7183 56 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 593+ 7185             >                else
 593+ 7185 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 593+ 7185             >                endif           ; ok        // for other definitions it "points" the correct handler
 593+ 7185             >                // Use of "; ok" to suppress "warning[fwdref]"
 593+ 7185             >
 593+ 7185             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 594+ 7185 A9 63 10 00                  dw      LIT, 16                 // 16
 595+ 7189 26 6E 78 6B                  dw      BASE, STORE             // base !
 596+ 718D 52 69                        dw      EXIT                    // ;
 597+ 718F
 598+ 718F              //  ______________________________________________________________________
 599+ 718F              //
 600+ 718F              // decimal      --
 601+ 718F              // change numeration base
 602+ 718F                              Colon_Def DECIMAL, "DECIMAL", is_normal
 602+ 718F             >                New_Def  DECIMAL, "DECIMAL", Enter_Ptr, is_normal ; ok
 602+ 718F             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 602+ 718F             >
 602+ 718F             >                // dummy db directives used to calculate length of namec
 602+ 718F 44 45 43 49 >                db      "DECIMAL"
 602+ 7193 4D 41 4C    >
 602+ 7196             >len_NFA         defl    $ - temp_NFA
 602+ 7196             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 602+ 718F             >
 602+ 718F 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 602+ 7190 44 45 43 49 >                db      "DECIMAL"               // name string in 7-bit ascii, but
 602+ 7194 4D 41 4C    >
 602+ 7197             >                org     $-1                 // alter last byte of Name just above to set
 602+ 7196 CC          >                db      {b $} | END_BIT     // msb as name end
 602+ 7197             >
 602+ 7197 7D 71       >                dw      last_NFA            // Link to previous definition Name
 602+ 7199             >DECIMAL:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 602+ 7199 56 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 602+ 719B             >                else
 602+ 719B ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 602+ 719B             >                endif           ; ok        // for other definitions it "points" the correct handler
 602+ 719B             >                // Use of "; ok" to suppress "warning[fwdref]"
 602+ 719B             >
 602+ 719B             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 603+ 719B A9 63 0A 00                  dw      LIT, 10                 // 10
 604+ 719F 26 6E 78 6B                  dw      BASE, STORE             // base !
 605+ 71A3 52 69                        dw      EXIT                    // ;
 606+ 71A5
 607+ 71A5              //  ______________________________________________________________________
 608+ 71A5              //
 609+ 71A5              // (;code)       --
 610+ 71A5              // patch to CFA to call/jump to the "following code"
 611+ 71A5                              Colon_Def C_SEMICOLON_CODE, "(;CODE)", is_normal
 611+ 71A5             >                New_Def  C_SEMICOLON_CODE, "(;CODE)", Enter_Ptr, is_normal ; ok
 611+ 71A5             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 611+ 71A5             >
 611+ 71A5             >                // dummy db directives used to calculate length of namec
 611+ 71A5 28 3B 43 4F >                db      "(;CODE)"
 611+ 71A9 44 45 29    >
 611+ 71AC             >len_NFA         defl    $ - temp_NFA
 611+ 71AC             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 611+ 71A5             >
 611+ 71A5 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 611+ 71A6 28 3B 43 4F >                db      "(;CODE)"               // name string in 7-bit ascii, but
 611+ 71AA 44 45 29    >
 611+ 71AD             >                org     $-1                 // alter last byte of Name just above to set
 611+ 71AC A9          >                db      {b $} | END_BIT     // msb as name end
 611+ 71AD             >
 611+ 71AD 8F 71       >                dw      last_NFA            // Link to previous definition Name
 611+ 71AF             >C_SEMICOLON_CODE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 611+ 71AF 56 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 611+ 71B1             >                else
 611+ 71B1 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 611+ 71B1             >                endif           ; ok        // for other definitions it "points" the correct handler
 611+ 71B1             >                // Use of "; ok" to suppress "warning[fwdref]"
 611+ 71B1             >
 611+ 71B1             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 612+ 71B1 94 69                        dw      R_TO                    // r>       ( Return Stack has IP to caller's next cell )
 613+ 71B3 F6 6F                        dw      LATEST                  // latest   ( Word being defined in this moment )
 614+ 71B5 34 70 14 70                  dw      PFA, CFA                // pfa cfa  ( cfa of latest word )
 615+ 71B9
 616+ 71B9
 617+ 71B9
 618+ 71B9
 619+ 71B9
 620+ 71B9 78 6B                        dw      STORE                   // !
 621+ 71BB 52 69                        dw      EXIT                    // ;
 622+ 71BD
 623+ 71BD              //  ______________________________________________________________________
 624+ 71BD              //
 625+ 71BD              // ;code        --
 626+ 71BD                              Colon_Def SEMICOLON_CODE, ";CODE", is_immediate
 626+ 71BD             >                New_Def  SEMICOLON_CODE, ";CODE", Enter_Ptr, is_immediate ; ok
 626+ 71BD             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 626+ 71BD             >
 626+ 71BD             >                // dummy db directives used to calculate length of namec
 626+ 71BD 3B 43 4F 44 >                db      ";CODE"
 626+ 71C1 45          >
 626+ 71C2             >len_NFA         defl    $ - temp_NFA
 626+ 71C2             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 626+ 71BD             >
 626+ 71BD C5          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 626+ 71BE 3B 43 4F 44 >                db      ";CODE"               // name string in 7-bit ascii, but
 626+ 71C2 45          >
 626+ 71C3             >                org     $-1                 // alter last byte of Name just above to set
 626+ 71C2 C5          >                db      {b $} | END_BIT     // msb as name end
 626+ 71C3             >
 626+ 71C3 A5 71       >                dw      last_NFA            // Link to previous definition Name
 626+ 71C5             >SEMICOLON_CODE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 626+ 71C5 56 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 626+ 71C7             >                else
 626+ 71C7 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 626+ 71C7             >                endif           ; ok        // for other definitions it "points" the correct handler
 626+ 71C7             >                // Use of "; ok" to suppress "warning[fwdref]"
 626+ 71C7             >
 626+ 71C7             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 627+ 71C7 D6 70                        dw      QCSP                    // ?csp
 628+ 71C9 0D 71                        dw      COMPILE                 // compile
 629+ 71CB AF 71                        dw      C_SEMICOLON_CODE        // (;code)
 630+ 71CD 36 71                        dw      SQUARED_OPEN            // [
 631+ 71CF 7E 6C                        dw      NOOP                    // noop () can be patched later to ASSEMBLER... )
 632+ 71D1 52 69                        dw      EXIT                    // ; immediate
 633+ 71D3
 634+ 71D3              //  ______________________________________________________________________
 635+ 71D3              //
 636+ 71D3              // <builds      --
 637+ 71D3                              Colon_Def CBUILDS, "<BUILDS", is_normal
 637+ 71D3             >                New_Def  CBUILDS, "<BUILDS", Enter_Ptr, is_normal ; ok
 637+ 71D3             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 637+ 71D3             >
 637+ 71D3             >                // dummy db directives used to calculate length of namec
 637+ 71D3 3C 42 55 49 >                db      "<BUILDS"
 637+ 71D7 4C 44 53    >
 637+ 71DA             >len_NFA         defl    $ - temp_NFA
 637+ 71DA             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 637+ 71D3             >
 637+ 71D3 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 637+ 71D4 3C 42 55 49 >                db      "<BUILDS"               // name string in 7-bit ascii, but
 637+ 71D8 4C 44 53    >
 637+ 71DB             >                org     $-1                 // alter last byte of Name just above to set
 637+ 71DA D3          >                db      {b $} | END_BIT     // msb as name end
 637+ 71DB             >
 637+ 71DB BD 71       >                dw      last_NFA            // Link to previous definition Name
 637+ 71DD             >CBUILDS:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 637+ 71DD 56 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 637+ 71DF             >                else
 637+ 71DF ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 637+ 71DF             >                endif           ; ok        // for other definitions it "points" the correct handler
 637+ 71DF             >                // Use of "; ok" to suppress "warning[fwdref]"
 637+ 71DF             >
 637+ 71DF             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 638+ 71DF D1 6C                        dw      ZERO                    // 0
 639+ 71E1 8D 6C                        dw      CONSTANT                // constant
 640+ 71E3 52 69                        dw      EXIT                    // ;
 641+ 71E5
 642+ 71E5              //  ______________________________________________________________________
 643+ 71E5              //
 644+ 71E5              // recurse      --
 645+ 71E5              //              Colon_Def RECURSE, "RECURSE", is_immediate
 646+ 71E5              //              dw      QCOMP                   // ?comp
 647+ 71E5              //              dw      LATEST                  // latest
 648+ 71E5              //              dw      PFA, CFA                // pfa cfa
 649+ 71E5              //              dw      COMMA                   // ,
 650+ 71E5              //              dw      EXIT                    // ; immediate
 651+ 71E5
 652+ 71E5              //  ______________________________________________________________________
 653+ 71E5              //
 654+ 71E5              // does>     --
 655+ 71E5                              Colon_Def DOES_TO, "DOES>", is_normal
 655+ 71E5             >                New_Def  DOES_TO, "DOES>", Enter_Ptr, is_normal ; ok
 655+ 71E5             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 655+ 71E5             >
 655+ 71E5             >                // dummy db directives used to calculate length of namec
 655+ 71E5 44 4F 45 53 >                db      "DOES>"
 655+ 71E9 3E          >
 655+ 71EA             >len_NFA         defl    $ - temp_NFA
 655+ 71EA             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 655+ 71E5             >
 655+ 71E5 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 655+ 71E6 44 4F 45 53 >                db      "DOES>"               // name string in 7-bit ascii, but
 655+ 71EA 3E          >
 655+ 71EB             >                org     $-1                 // alter last byte of Name just above to set
 655+ 71EA BE          >                db      {b $} | END_BIT     // msb as name end
 655+ 71EB             >
 655+ 71EB D3 71       >                dw      last_NFA            // Link to previous definition Name
 655+ 71ED             >DOES_TO:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 655+ 71ED 56 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 655+ 71EF             >                else
 655+ 71EF ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 655+ 71EF             >                endif           ; ok        // for other definitions it "points" the correct handler
 655+ 71EF             >                // Use of "; ok" to suppress "warning[fwdref]"
 655+ 71EF             >
 655+ 71EF             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 656+ 71EF 94 69                        dw      R_TO                    // r>
 657+ 71F1 F6 6F                        dw      LATEST                  // latest
 658+ 71F3 34 70                        dw      PFA                     // pfa
 659+ 71F5 78 6B                        dw      STORE                   // !
 660+ 71F7 AF 71                        dw      C_SEMICOLON_CODE        // ;code
 661+ 71F9              Does_Ptr:
 662+ 71F9                              // via call coded in CFA
 663+ 71F9                              ldhlrp
 663+ 71F9 2A 96 63    >                ld      hl,(RP_Pointer)
 664+ 71FC 2B                           dec     hl                  // push on Return-Stack current Instruction-Pointer
 665+ 71FD 70                           ld      (hl), b
 666+ 71FE 2B                           dec     hl
 667+ 71FF 71                           ld      (hl), c
 668+ 7200                              ldrphl
 668+ 7200 22 96 63    >                ld      (RP_Pointer),hl
 669+ 7203 13                           inc     de
 670+ 7204 EB                           ex      de, hl
 671+ 7205 4E                           ld      c, (hl)
 672+ 7206 23                           inc     hl
 673+ 7207 46                           ld      b, (hl)
 674+ 7208 23                           inc     hl
 675+ 7209
 676+ 7209                              psh1
 676+ 7209 E5          >                push    hl
 676+ 720A DD E9       >                jp      (ix)
 677+ 720C                              // SMUDGE !
 678+ 720C
 679+ 720C              //  ______________________________________________________________________
 680+ 720C              //
 681+ 720C              // count        a -- a2 n
 682+ 720C              // expects a counted string at address a, returns string address and counter
 683+ 720C                              Colon_Def COUNT, "COUNT", is_normal
 683+ 720C             >                New_Def  COUNT, "COUNT", Enter_Ptr, is_normal ; ok
 683+ 720C             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 683+ 720C             >
 683+ 720C             >                // dummy db directives used to calculate length of namec
 683+ 720C 43 4F 55 4E >                db      "COUNT"
 683+ 7210 54          >
 683+ 7211             >len_NFA         defl    $ - temp_NFA
 683+ 7211             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 683+ 720C             >
 683+ 720C 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 683+ 720D 43 4F 55 4E >                db      "COUNT"               // name string in 7-bit ascii, but
 683+ 7211 54          >
 683+ 7212             >                org     $-1                 // alter last byte of Name just above to set
 683+ 7211 D4          >                db      {b $} | END_BIT     // msb as name end
 683+ 7212             >
 683+ 7212 E5 71       >                dw      last_NFA            // Link to previous definition Name
 683+ 7214             >COUNT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 683+ 7214 56 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 683+ 7216             >                else
 683+ 7216 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 683+ 7216             >                endif           ; ok        // for other definitions it "points" the correct handler
 683+ 7216             >                // Use of "; ok" to suppress "warning[fwdref]"
 683+ 7216             >
 683+ 7216             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 684+ 7216 D8 6A                        dw      DUP                     // dup
 685+ 7218 19 6A                        dw      ONE_PLUS                // 1+
 686+ 721A CB 6A 86 6B                  dw      SWAP, CFETCH             // swap @
 687+ 721E 52 69                        dw      EXIT                    // ;
 688+ 7220
 689+ 7220              //  ______________________________________________________________________
 690+ 7220              //
 691+ 7220              // bounds       a n -- a+n n
 692+ 7220              // given an address and a length ( a n ) calculate the bound addresses
 693+ 7220              // suitable for DO-LOOP
 694+ 7220                              Colon_Def BOUNDS, "BOUNDS", is_normal
 694+ 7220             >                New_Def  BOUNDS, "BOUNDS", Enter_Ptr, is_normal ; ok
 694+ 7220             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 694+ 7220             >
 694+ 7220             >                // dummy db directives used to calculate length of namec
 694+ 7220 42 4F 55 4E >                db      "BOUNDS"
 694+ 7224 44 53       >
 694+ 7226             >len_NFA         defl    $ - temp_NFA
 694+ 7226             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 694+ 7220             >
 694+ 7220 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 694+ 7221 42 4F 55 4E >                db      "BOUNDS"               // name string in 7-bit ascii, but
 694+ 7225 44 53       >
 694+ 7227             >                org     $-1                 // alter last byte of Name just above to set
 694+ 7226 D3          >                db      {b $} | END_BIT     // msb as name end
 694+ 7227             >
 694+ 7227 0C 72       >                dw      last_NFA            // Link to previous definition Name
 694+ 7229             >BOUNDS:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 694+ 7229 56 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 694+ 722B             >                else
 694+ 722B ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 694+ 722B             >                endif           ; ok        // for other definitions it "points" the correct handler
 694+ 722B             >                // Use of "; ok" to suppress "warning[fwdref]"
 694+ 722B             >
 694+ 722B             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 695+ 722B 93 6A F8 69                  dw      OVER, PLUS, SWAP        // over + swap
 695+ 722F CB 6A
 696+ 7231 52 69                        dw      EXIT                    // ;
 697+ 7233
 698+ 7233              //  ______________________________________________________________________
 699+ 7233              //
 700+ 7233              // type         a n --
 701+ 7233              // Sends to current output channel n characters starting at address a.
 702+ 7233                              Colon_Def TYPE, "TYPE", is_normal
 702+ 7233             >                New_Def  TYPE, "TYPE", Enter_Ptr, is_normal ; ok
 702+ 7233             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 702+ 7233             >
 702+ 7233             >                // dummy db directives used to calculate length of namec
 702+ 7233 54 59 50 45 >                db      "TYPE"
 702+ 7237             >len_NFA         defl    $ - temp_NFA
 702+ 7237             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 702+ 7233             >
 702+ 7233 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 702+ 7234 54 59 50 45 >                db      "TYPE"               // name string in 7-bit ascii, but
 702+ 7238             >                org     $-1                 // alter last byte of Name just above to set
 702+ 7237 C5          >                db      {b $} | END_BIT     // msb as name end
 702+ 7238             >
 702+ 7238 20 72       >                dw      last_NFA            // Link to previous definition Name
 702+ 723A             >TYPE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 702+ 723A 56 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 702+ 723C             >                else
 702+ 723C ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 702+ 723C             >                endif           ; ok        // for other definitions it "points" the correct handler
 702+ 723C             >                // Use of "; ok" to suppress "warning[fwdref]"
 702+ 723C             >
 702+ 723C             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 703+ 723C 29 72                        dw      BOUNDS                  // bounds
 704+ 723E 42 64                        dw      C_Q_DO                  // ?do
 705+ 7240 0C 00                        dw      Type_Skip - $
 706+ 7242              Type_Loop:
 707+ 7242 7B 64 86 6B                  dw          I, CFETCH           //      i c@
 708+ 7246 A4 6F                        dw          EMIT                //      emit
 709+ 7248 31 64                        dw      C_LOOP                  // loop
 710+ 724A F8 FF                        dw      Type_Loop - $
 711+ 724C              Type_Skip:
 712+ 724C 52 69                        dw      EXIT                    // ;
 713+ 724E
 714+ 724E              //  ______________________________________________________________________
 715+ 724E              //
 716+ 724E              // leave        --
 717+ 724E              // Compile (leave) to leave current LOOP and jump just after it
 718+ 724E                              Colon_Def LEAVE, "LEAVE", is_immediate
 718+ 724E             >                New_Def  LEAVE, "LEAVE", Enter_Ptr, is_immediate ; ok
 718+ 724E             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 718+ 724E             >
 718+ 724E             >                // dummy db directives used to calculate length of namec
 718+ 724E 4C 45 41 56 >                db      "LEAVE"
 718+ 7252 45          >
 718+ 7253             >len_NFA         defl    $ - temp_NFA
 718+ 7253             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 718+ 724E             >
 718+ 724E C5          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 718+ 724F 4C 45 41 56 >                db      "LEAVE"               // name string in 7-bit ascii, but
 718+ 7253 45          >
 718+ 7254             >                org     $-1                 // alter last byte of Name just above to set
 718+ 7253 C5          >                db      {b $} | END_BIT     // msb as name end
 718+ 7254             >
 718+ 7254 33 72       >                dw      last_NFA            // Link to previous definition Name
 718+ 7256             >LEAVE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 718+ 7256 56 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 718+ 7258             >                else
 718+ 7258 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 718+ 7258             >                endif           ; ok        // for other definitions it "points" the correct handler
 718+ 7258             >                // Use of "; ok" to suppress "warning[fwdref]"
 718+ 7258             >
 718+ 7258             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 719+ 7258 0D 71 6A 69                  dw      COMPILE, C_LEAVE       // compile (leave)     \ unloop and branch
 720+ 725C B0 6E 80 69                  dw      HERE, TO_R, ZERO, COMMA // here >r 0 ,
 720+ 7260 D1 6C CC 6E
 721+ 7264 D1 6C D1 6C                  dw      ZERO, ZERO
 722+ 7268 1A 69 D8 6A                  dw      SPFETCH, DUP
 723+ 726C 41 6A 41 6A                  dw      CELL_PLUS, CELL_PLUS
 724+ 7270 BB 6A                        dw      TUCK
 725+ 7272 41 6E 6B 6B                  dw      CSP, FETCH
 726+ 7276 CB 6A 03 6F                  dw      SWAP, SUBTRACT
 727+ 727A 42 68                        dw      CMOVE
 728+ 727C 41 6E 6B 6B                  dw      CSP, FETCH, CELL_MINUS
 728+ 7280 4B 6A
 729+ 7282 94 69 93 6A                  dw      R_TO, OVER, STORE
 729+ 7286 78 6B
 730+ 7288 4B 6A D1 6C                  dw      CELL_MINUS, ZERO
 731+ 728C CB 6A 78 6B                  dw      SWAP, STORE
 732+ 7290 52 69                        dw      EXIT                    // ;
 733+ 7292
 734+ 7292              //  ______________________________________________________________________
 735+ 7292              //
 736+ 7292              // -trailing    a n1 -- a n2
 737+ 7292              // Assumes that an n1 bytes-long string is stored at address a
 738+ 7292              // and the string contains a space delimited word,
 739+ 7292              // Finds n2 as the position of the first character after the word.
 740+ 7292                              Colon_Def LTRAILING, "-TRAILING", is_normal
 740+ 7292             >                New_Def  LTRAILING, "-TRAILING", Enter_Ptr, is_normal ; ok
 740+ 7292             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 740+ 7292             >
 740+ 7292             >                // dummy db directives used to calculate length of namec
 740+ 7292 2D 54 52 41 >                db      "-TRAILING"
 740+ 7296 49 4C 49 4E >
 740+ 729A 47          >
 740+ 729B             >len_NFA         defl    $ - temp_NFA
 740+ 729B             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 740+ 7292             >
 740+ 7292 89          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 740+ 7293 2D 54 52 41 >                db      "-TRAILING"               // name string in 7-bit ascii, but
 740+ 7297 49 4C 49 4E >
 740+ 729B 47          >
 740+ 729C             >                org     $-1                 // alter last byte of Name just above to set
 740+ 729B C7          >                db      {b $} | END_BIT     // msb as name end
 740+ 729C             >
 740+ 729C 4E 72       >                dw      last_NFA            // Link to previous definition Name
 740+ 729E             >LTRAILING:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 740+ 729E 56 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 740+ 72A0             >                else
 740+ 72A0 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 740+ 72A0             >                endif           ; ok        // for other definitions it "points" the correct handler
 740+ 72A0             >                // Use of "; ok" to suppress "warning[fwdref]"
 740+ 72A0             >
 740+ 72A0             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 741+ 72A0 D8 6A D1 6C                  dw      DUP, ZERO               // dup 0
 742+ 72A4                                                              // do
 743+ 72A4 42 64                        dw      C_Q_DO
 744+ 72A6 20 00                        dw      LTrailing_Leave - $
 745+ 72A8              LTrailing_Loop:
 746+ 72A8 39 6B F8 69                  dw          TWO_DUP, PLUS       //      2dup +
 747+ 72AC 25 6A                        dw          ONE_SUBTRACT        //      1-
 748+ 72AE 86 6B                        dw          CFETCH              //      c@
 749+ 72B0 FB 6C 03 6F                  dw          BL, SUBTRACT        //      bl -
 750+ 72B4                                                              //      if
 751+ 72B4 E3 63                        dw          ZBRANCH
 752+ 72B6 0A 00                        dw          LTrailing_Else - $
 753+ 72B8 6A 69                        dw              C_LEAVE         //          leave
 754+ 72BA 0C 00                        dw              LTrailing_Leave - $
 755+ 72BC CC 63                        dw          BRANCH              //      else
 756+ 72BE 04 00                        dw          LTrailing_Endif - $
 757+ 72C0              LTrailing_Else:
 758+ 72C0 25 6A                        dw              ONE_SUBTRACT    //          1-
 759+ 72C2              LTrailing_Endif:                                //      endif
 760+ 72C2                                                              // loop
 761+ 72C2 31 64                        dw      C_LOOP
 762+ 72C4 E4 FF                        dw      LTrailing_Loop - $
 763+ 72C6              LTrailing_Leave:
 764+ 72C6 52 69                        dw      EXIT                    // ;
 765+ 72C8
 766+ 72C8              //  ______________________________________________________________________
 767+ 72C8              //
 768+ 72C8              // accept       a n1 -- n2
 769+ 72C8              // Accepts at most n1 characters from terminal and stores them at address a
 770+ 72C8              // CR stops input. A 'nul' is added as trailer.
 771+ 72C8              // n2 is the string length. n2 is kept in span user variable also.
 772+ 72C8                              Colon_Def ACCEPT, "ACCEPT", is_normal
 772+ 72C8             >                New_Def  ACCEPT, "ACCEPT", Enter_Ptr, is_normal ; ok
 772+ 72C8             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 772+ 72C8             >
 772+ 72C8             >                // dummy db directives used to calculate length of namec
 772+ 72C8 41 43 43 45 >                db      "ACCEPT"
 772+ 72CC 50 54       >
 772+ 72CE             >len_NFA         defl    $ - temp_NFA
 772+ 72CE             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 772+ 72C8             >
 772+ 72C8 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 772+ 72C9 41 43 43 45 >                db      "ACCEPT"               // name string in 7-bit ascii, but
 772+ 72CD 50 54       >
 772+ 72CF             >                org     $-1                 // alter last byte of Name just above to set
 772+ 72CE D4          >                db      {b $} | END_BIT     // msb as name end
 772+ 72CF             >
 772+ 72CF 92 72       >                dw      last_NFA            // Link to previous definition Name
 772+ 72D1             >ACCEPT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 772+ 72D1 56 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 772+ 72D3             >                else
 772+ 72D3 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 772+ 72D3             >                endif           ; ok        // for other definitions it "points" the correct handler
 772+ 72D3             >                // Use of "; ok" to suppress "warning[fwdref]"
 772+ 72D3             >
 772+ 72D3             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 773+ 72D3 93 6A F8 69                  dw      OVER, PLUS, OVER        //                      ( a  n1+a  a )
 773+ 72D7 93 6A
 774+ 72D9 D1 6C F5 6A                  dw      ZERO, DASH_ROT          //                      ( a  0     a+n1  a )
 775+ 72DD                                                              // do
 776+ 72DD 42 64                        dw      C_Q_DO
 777+ 72DF 8A 00                        dw      Accept_Leave - $
 778+ 72E1              Accept_Loop:
 779+ 72E1 A3 6A 98 66                  dw          DROP, KEY           //      drop key        ( a  c )
 780+ 72E5 D8 6A                        dw          DUP                 //      dup             ( a  c  c )
 781+ 72E7 A9 63 0E 00                  dw          LIT, $0E            //      0E
 782+ 72EB 37 6D                        dw          PLUS_ORIGIN         //      +origin
 783+ 72ED 6B 6B                        dw          FETCH               //      @               ( a  c  c  del )
 784+ 72EF 11 6F                        dw          EQUALS              //      =               ( a  c  c==del )
 785+ 72F1                                                              //      if
 786+ 72F1 E3 63                        dw          ZBRANCH
 787+ 72F3 2C 00                        dw          Accept_Else_0 - $
 788+ 72F5 A3 6A                        dw              DROP            //          drop        ( a  )
 789+ 72F7 D8 6A 7B 64                  dw              DUP, I, EQUALS  //          dup i =     ( a  a==i )
 789+ 72FB 11 6F
 790+ 72FD D9 6C E2 68                  dw              ONE, AND_OP     //          1 and
 791+ 7301 D8 6A                        dw              DUP             //          dup         ( a  a==i  a==i )
 792+ 7303 94 69                        dw              R_TO            //          r> 2 - + r>
 793+ 7305 58 6A F8 69                  dw              TWO_MINUS, PLUS //      ( decrement index by 1 or 2 )
 794+ 7309 80 69                        dw              TO_R            //
 795+ 730B                                                              //          if
 796+ 730B E3 63                        dw              ZBRANCH
 797+ 730D 0A 00                        dw              Accept_Else_1 - $
 798+ 730F A9 63 07 00                  dw                  LIT, 7      //              7       ( a  7 )
 799+ 7313                                                              //          else
 800+ 7313 CC 63                        dw              BRANCH
 801+ 7315 06 00                        dw              Accept_Endif_1 - $
 802+ 7317              Accept_Else_1:
 803+ 7317 A9 63 08 00                  dw                  LIT, 8      //              8       ( a  8 )
 804+ 731B              Accept_Endif_1:                                 //          endif
 805+ 731B CC 63                        dw          BRANCH
 806+ 731D 2E 00                        dw          Accept_Endif_0 - $
 807+ 731F              Accept_Else_0:                                  //      else
 808+ 731F D8 6A                        dw              DUP             //          dup         ( a  c  c )
 809+ 7321 A9 63 0D 00                  dw              LIT, 13         //          13
 810+ 7325 11 6F                        dw              EQUALS          //          =           ( a  c  c==CR )
 811+ 7327                                                              //          if
 812+ 7327 E3 63                        dw              ZBRANCH
 813+ 7329 0C 00                        dw              Accept_Else_2 - $
 814+ 732B A3 6A FB 6C                  dw                  DROP, BL    //              drop bl ( a  bl )
 815+ 732F D1 6C                        dw                  ZERO        //              0       ( a  c  0 )
 816+ 7331                                                              //          else
 817+ 7331 CC 63                        dw              BRANCH
 818+ 7333 04 00                        dw              Accept_Endif_2 - $
 819+ 7335              Accept_Else_2:
 820+ 7335 D8 6A                        dw                  DUP         //              dup     ( a  c  c )
 821+ 7337                                                              //          endif
 822+ 7337              Accept_Endif_2:
 823+ 7337 7B 64 94 6B                  dw              I, CSTORE       //          i           ( a  c )
 824+ 733B D8 6A FB 6C                  dw              DUP, BL, LESS   //          dup bl <    ( a  c  c<BL )
 824+ 733F 32 6F
 825+ 7341                                                              //          if
 826+ 7341 E3 63                        dw              ZBRANCH
 827+ 7343 08 00                        dw              Accept_Endif_3 - $
 828+ 7345 94 69                        dw                  R_TO        //              r>
 829+ 7347 25 6A                        dw                  ONE_SUBTRACT//              1-
 830+ 7349 80 69                        dw                  TO_R        //              >r
 831+ 734B                                                              //          endif
 832+ 734B              Accept_Endif_3:
 833+ 734B              Accept_Endif_0:                                 //      endif
 834+ 734B A4 6F                        dw          EMIT                //      emit
 835+ 734D D1 6C 7B 64                  dw          ZERO, I, ONE_PLUS   //      0 i 1+ !
 835+ 7351 19 6A
 836+ 7353 78 6B                        dw          STORE               //          ( zero pad )
 837+ 7355 7B 64                        dw          I                   //      i
 838+ 7357 7B 64 86 6B                  dw          I, CFETCH, ZEQUAL   //      i 0= if
 838+ 735B B5 69
 839+ 735D E3 63                        dw          ZBRANCH             //
 840+ 735F 06 00                        dw              Accept_Endif_4 - $
 841+ 7361 6A 69                        dw                  C_LEAVE     //              leave
 842+ 7363 06 00                        dw                  Accept_Leave - $
 843+ 7365              Accept_Endif_4:                                 //      endif
 844+ 7365                                                              // loop
 845+ 7365 31 64                        dw      C_LOOP
 846+ 7367 7A FF                        dw      Accept_Loop - $
 847+ 7369              Accept_Leave:
 848+ 7369 CB 6A 03 6F                  dw      SWAP, SUBTRACT          // swap -
 849+ 736D 19 6A                        dw      ONE_PLUS                // 1+
 850+ 736F D8 6A 91 6E                  dw      DUP, SPAN, STORE        // dup span !
 850+ 7373 78 6B
 851+ 7375 52 69                        dw      EXIT                    // ;
 852+ 7377
 853+ 7377              //  ______________________________________________________________________
 854+ 7377              //
 855+ 7377              // expect      a n --
 856+ 7377              // Accepts at most n1 characters from terminal and stores them at address a
 857+ 7377              // CR stops input. A 'nul' is added as trailer.
 858+ 7377              // n2 is the string length. n2 is kept in span user variable also.
 859+ 7377              //              Colon_Def EXPECT, "EXPECT", is_normal
 860+ 7377              //              dw      ACCEPT, DROP            // accept drop
 861+ 7377              //              dw      EXIT                    // ;
 862+ 7377
 863+ 7377              //  ______________________________________________________________________
 864+ 7377              //
 865+ 7377              // query        --
 866+ 7377              // Accept at most 80 character from console. CR stops.
 867+ 7377              // Text is stored in TIB. Variable IN is zeroed.
 868+ 7377                              Colon_Def QUERY, "QUERY", is_normal
 868+ 7377             >                New_Def  QUERY, "QUERY", Enter_Ptr, is_normal ; ok
 868+ 7377             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 868+ 7377             >
 868+ 7377             >                // dummy db directives used to calculate length of namec
 868+ 7377 51 55 45 52 >                db      "QUERY"
 868+ 737B 59          >
 868+ 737C             >len_NFA         defl    $ - temp_NFA
 868+ 737C             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 868+ 7377             >
 868+ 7377 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 868+ 7378 51 55 45 52 >                db      "QUERY"               // name string in 7-bit ascii, but
 868+ 737C 59          >
 868+ 737D             >                org     $-1                 // alter last byte of Name just above to set
 868+ 737C D9          >                db      {b $} | END_BIT     // msb as name end
 868+ 737D             >
 868+ 737D C8 72       >                dw      last_NFA            // Link to previous definition Name
 868+ 737F             >QUERY:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 868+ 737F 56 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 868+ 7381             >                else
 868+ 7381 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 868+ 7381             >                endif           ; ok        // for other definitions it "points" the correct handler
 868+ 7381             >                // Use of "; ok" to suppress "warning[fwdref]"
 868+ 7381             >
 868+ 7381             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 869+ 7381 64 6D 6B 6B                  dw      TIB, FETCH              // tib @
 870+ 7385 A9 63 50 00                  dw      LIT, 80                 // 80
 871+ 7389 D1 72 A3 6A                  dw      ACCEPT, DROP            // accept drop
 872+ 738D D1 6C D9 6D                  dw      ZERO, TO_IN, STORE      // 0 >in !
 872+ 7391 78 6B
 873+ 7393 52 69                        dw      EXIT                    // ;
 874+ 7395
 875+ 7395              //  ______________________________________________________________________
 876+ 7395              //
 877+ 7395              // fill        a n c --
 878+ 7395              // If n > 0, fills n locations starting from address a with the value c.
 879+ 7395                              New_Def FILL, "FILL", is_code, is_normal
 879+ 7395             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 879+ 7395             >
 879+ 7395             >                // dummy db directives used to calculate length of namec
 879+ 7395 46 49 4C 4C >                db      "FILL"
 879+ 7399             >len_NFA         defl    $ - temp_NFA
 879+ 7399             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 879+ 7395             >
 879+ 7395 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 879+ 7396 46 49 4C 4C >                db      "FILL"               // name string in 7-bit ascii, but
 879+ 739A             >                org     $-1                 // alter last byte of Name just above to set
 879+ 7399 CC          >                db      {b $} | END_BIT     // msb as name end
 879+ 739A             >
 879+ 739A 77 73       >                dw      last_NFA            // Link to previous definition Name
 879+ 739C             >FILL:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 879+ 739C ~           >                dw      runcode ; ok        // for primitive definitions  actual code
 879+ 739C             >                else
 879+ 739C 9E 73       >                dw      $ + 2   ; ok        // is pointed by CFA
 879+ 739E             >                endif           ; ok        // for other definitions it "points" the correct handler
 879+ 739E             >                // Use of "; ok" to suppress "warning[fwdref]"
 879+ 739E             >
 879+ 739E             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 880+ 739E D9                           exx
 881+ 739F D1                           pop     de                  // de has character
 882+ 73A0 C1                           pop     bc                  // bc has counter
 883+ 73A1 E1                           pop     hl                  // hl has address, save Instruction Pointer
 884+ 73A2              Fill_Loop:
 885+ 73A2 78                               ld      a, b
 886+ 73A3 B1                               or      c
 887+ 73A4 28 05                        jr      z, Fill_While_End
 888+ 73A6 73                               ld      (hl), e
 889+ 73A7 0B                               dec     bc
 890+ 73A8 23                               inc     hl
 891+ 73A9 18 F7                        jr      Fill_Loop
 892+ 73AB              Fill_While_End:
 893+ 73AB D9                           exx
 894+ 73AC
 895+ 73AC                              next
 895+ 73AC DD E9       >                jp      (ix)
 896+ 73AE
 897+ 73AE              //  ______________________________________________________________________
 898+ 73AE              //
 899+ 73AE              // erase        a n --
 900+ 73AE              // If n > 0, fills n locations starting from address a with 'nul' characters.
 901+ 73AE                              Colon_Def ERASE, "ERASE", is_normal
 901+ 73AE             >                New_Def  ERASE, "ERASE", Enter_Ptr, is_normal ; ok
 901+ 73AE             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 901+ 73AE             >
 901+ 73AE             >                // dummy db directives used to calculate length of namec
 901+ 73AE 45 52 41 53 >                db      "ERASE"
 901+ 73B2 45          >
 901+ 73B3             >len_NFA         defl    $ - temp_NFA
 901+ 73B3             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 901+ 73AE             >
 901+ 73AE 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 901+ 73AF 45 52 41 53 >                db      "ERASE"               // name string in 7-bit ascii, but
 901+ 73B3 45          >
 901+ 73B4             >                org     $-1                 // alter last byte of Name just above to set
 901+ 73B3 C5          >                db      {b $} | END_BIT     // msb as name end
 901+ 73B4             >
 901+ 73B4 95 73       >                dw      last_NFA            // Link to previous definition Name
 901+ 73B6             >ERASE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 901+ 73B6 56 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 901+ 73B8             >                else
 901+ 73B8 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 901+ 73B8             >                endif           ; ok        // for other definitions it "points" the correct handler
 901+ 73B8             >                // Use of "; ok" to suppress "warning[fwdref]"
 901+ 73B8             >
 901+ 73B8             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 902+ 73B8 D1 6C 9C 73                  dw      ZERO, FILL              // 0 fill
 903+ 73BC 52 69                        dw      EXIT                    // ;
 904+ 73BE
 905+ 73BE              //  ______________________________________________________________________
 906+ 73BE              //
 907+ 73BE              // blanks       a n --
 908+ 73BE              // If n > 0, fills n locations starting from address a with 'nul' characters.
 909+ 73BE                              Colon_Def BLANKS, "BLANKS", is_normal
 909+ 73BE             >                New_Def  BLANKS, "BLANKS", Enter_Ptr, is_normal ; ok
 909+ 73BE             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 909+ 73BE             >
 909+ 73BE             >                // dummy db directives used to calculate length of namec
 909+ 73BE 42 4C 41 4E >                db      "BLANKS"
 909+ 73C2 4B 53       >
 909+ 73C4             >len_NFA         defl    $ - temp_NFA
 909+ 73C4             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 909+ 73BE             >
 909+ 73BE 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 909+ 73BF 42 4C 41 4E >                db      "BLANKS"               // name string in 7-bit ascii, but
 909+ 73C3 4B 53       >
 909+ 73C5             >                org     $-1                 // alter last byte of Name just above to set
 909+ 73C4 D3          >                db      {b $} | END_BIT     // msb as name end
 909+ 73C5             >
 909+ 73C5 AE 73       >                dw      last_NFA            // Link to previous definition Name
 909+ 73C7             >BLANKS:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 909+ 73C7 56 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 909+ 73C9             >                else
 909+ 73C9 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 909+ 73C9             >                endif           ; ok        // for other definitions it "points" the correct handler
 909+ 73C9             >                // Use of "; ok" to suppress "warning[fwdref]"
 909+ 73C9             >
 909+ 73C9             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 910+ 73C9 FB 6C 9C 73                  dw      BL, FILL                // bl fill
 911+ 73CD 52 69                        dw      EXIT                    // ;
 912+ 73CF
 913+ 73CF              //  ______________________________________________________________________
 914+ 73CF              //
 915+ 73CF              // hold         c --
 916+ 73CF              // Used between <# and #> to insert a character c in numeric formatting.
 917+ 73CF                              Colon_Def HOLD, "HOLD", is_normal
 917+ 73CF             >                New_Def  HOLD, "HOLD", Enter_Ptr, is_normal ; ok
 917+ 73CF             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 917+ 73CF             >
 917+ 73CF             >                // dummy db directives used to calculate length of namec
 917+ 73CF 48 4F 4C 44 >                db      "HOLD"
 917+ 73D3             >len_NFA         defl    $ - temp_NFA
 917+ 73D3             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 917+ 73CF             >
 917+ 73CF 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 917+ 73D0 48 4F 4C 44 >                db      "HOLD"               // name string in 7-bit ascii, but
 917+ 73D4             >                org     $-1                 // alter last byte of Name just above to set
 917+ 73D3 C4          >                db      {b $} | END_BIT     // msb as name end
 917+ 73D4             >
 917+ 73D4 BE 73       >                dw      last_NFA            // Link to previous definition Name
 917+ 73D6             >HOLD:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 917+ 73D6 56 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 917+ 73D8             >                else
 917+ 73D8 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 917+ 73D8             >                endif           ; ok        // for other definitions it "points" the correct handler
 917+ 73D8             >                // Use of "; ok" to suppress "warning[fwdref]"
 917+ 73D8             >
 917+ 73D8             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 918+ 73D8 F2 6C                        dw      NEG_ONE                 // -1
 919+ 73DA 52 6E 48 6B                  dw      HLD, PLUSSTORE          // hld +!
 920+ 73DE 52 6E 6B 6B                  dw      HLD, FETCH, CSTORE      // hld @ c!
 920+ 73E2 94 6B
 921+ 73E4 52 69                        dw      EXIT                    // ;
 922+ 73E6
 923+ 73E6              //  ______________________________________________________________________
 924+ 73E6              //
 925+ 73E6              // pad         -- a
 926+ 73E6              // leaves the buffer text address. This is at a fixed distance over HERE.
 927+ 73E6                              Colon_Def PAD, "PAD", is_normal
 927+ 73E6             >                New_Def  PAD, "PAD", Enter_Ptr, is_normal ; ok
 927+ 73E6             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 927+ 73E6             >
 927+ 73E6             >                // dummy db directives used to calculate length of namec
 927+ 73E6 50 41 44    >                db      "PAD"
 927+ 73E9             >len_NFA         defl    $ - temp_NFA
 927+ 73E9             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 927+ 73E6             >
 927+ 73E6 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 927+ 73E7 50 41 44    >                db      "PAD"               // name string in 7-bit ascii, but
 927+ 73EA             >                org     $-1                 // alter last byte of Name just above to set
 927+ 73E9 C4          >                db      {b $} | END_BIT     // msb as name end
 927+ 73EA             >
 927+ 73EA CF 73       >                dw      last_NFA            // Link to previous definition Name
 927+ 73EC             >PAD:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 927+ 73EC 56 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 927+ 73EE             >                else
 927+ 73EE ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 927+ 73EE             >                endif           ; ok        // for other definitions it "points" the correct handler
 927+ 73EE             >                // Use of "; ok" to suppress "warning[fwdref]"
 927+ 73EE             >
 927+ 73EE             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 928+ 73EE B0 6E                        dw      HERE                    // here
 929+ 73F0 A9 63 44 00                  dw      LIT, 68                 // 68
 930+ 73F4 F8 69                        dw      PLUS                    // +
 931+ 73F6 52 69                        dw      EXIT                    // ;
 932+ 73F8
 933+ 73F8              //  ______________________________________________________________________
 934+ 73F8              //
 935+ 73F8              // word         c -- a
 936+ 73F8              // reads characters from input streams until it encouners a c delimiter.
 937+ 73F8              // Stores that packet so it starts from HERE
 938+ 73F8              // WORD leaves a counter as first byte and ends the packet with two spaces.
 939+ 73F8              // Other occurrences of c are ignored.
 940+ 73F8              // If BLK is zero, text is taken from terminal buffer TIB.
 941+ 73F8              // Otherwise text is taken from the disk-block given by BLK.
 942+ 73F8              // "in" variable is incremented of the number of character read.
 943+ 73F8              // The number of characters read is given by ENCLOSE.
 944+ 73F8                              Colon_Def WORD, "WORD", is_normal
 944+ 73F8             >                New_Def  WORD, "WORD", Enter_Ptr, is_normal ; ok
 944+ 73F8             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 944+ 73F8             >
 944+ 73F8             >                // dummy db directives used to calculate length of namec
 944+ 73F8 57 4F 52 44 >                db      "WORD"
 944+ 73FC             >len_NFA         defl    $ - temp_NFA
 944+ 73FC             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 944+ 73F8             >
 944+ 73F8 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 944+ 73F9 57 4F 52 44 >                db      "WORD"               // name string in 7-bit ascii, but
 944+ 73FD             >                org     $-1                 // alter last byte of Name just above to set
 944+ 73FC C4          >                db      {b $} | END_BIT     // msb as name end
 944+ 73FD             >
 944+ 73FD E6 73       >                dw      last_NFA            // Link to previous definition Name
 944+ 73FF             >WORD:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 944+ 73FF 56 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 944+ 7401             >                else
 944+ 7401 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 944+ 7401             >                endif           ; ok        // for other definitions it "points" the correct handler
 944+ 7401             >                // Use of "; ok" to suppress "warning[fwdref]"
 944+ 7401             >
 944+ 7401             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 945+ 7401 D0 6D 6B 6B                  dw      BLK, FETCH              // blk @
 946+ 7405                                                              // if
 947+ 7405 E3 63                        dw      ZBRANCH
 948+ 7407 0C 00                        dw      Word_Else - $
 949+ 7409 D0 6D 6B 6B                  dw          BLK, FETCH          //      blk @
 950+ 740D A6 7D                        dw          BLOCK               //      block ( forward )
 951+ 740F                                                              // else
 952+ 740F CC 63                        dw      BRANCH
 953+ 7411 06 00                        dw      Word_Endif - $
 954+ 7413              Word_Else:
 955+ 7413 64 6D 6B 6B                  dw         TIB, FETCH           //      tib @
 956+ 7417              Word_Endif:                                     // endif
 957+ 7417 D9 6D 6B 6B                  dw      TO_IN, FETCH, PLUS      // >in @ +
 957+ 741B F8 69
 958+ 741D CB 6A 69 65                  dw      SWAP, ENCLOSE           // swap enclose
 959+ 7421 B0 6E A9 63                  dw      HERE, LIT, 34, BLANKS   // here 34 blanks
 959+ 7425 22 00 C7 73
 960+ 7429 D9 6D 48 6B                  dw      TO_IN, PLUSSTORE        // >in @ +
 961+ 742D 93 6A 03 6F                  dw      OVER, SUBTRACT, TO_R    // over - >r
 961+ 7431 80 69
 962+ 7433 A8 69 B0 6E                  dw      R_OP, HERE, CSTORE      // r here c!
 962+ 7437 94 6B
 963+ 7439 F8 69                        dw      PLUS                    // +
 964+ 743B B0 6E 19 6A                  dw      HERE, ONE_PLUS, R_TO    // here 1+ r>
 964+ 743F 94 69
 965+ 7441 42 68                        dw      CMOVE                   // cmove
 966+ 7443 B0 6E                        dw      HERE                    // here
 967+ 7445 52 69                        dw      EXIT                    // ;
 968+ 7447
 969+ 7447              //  ______________________________________________________________________
 970+ 7447              //
 971+ 7447              // (.")         --
 972+ 7447              // Direct procedure compiled by ." and  .(  It executes TYPE.
 973+ 7447                              Colon_Def C_DOT_QUOTE, '(.")', is_normal
 973+ 7447             >                New_Def  C_DOT_QUOTE, '(.")', Enter_Ptr, is_normal ; ok
 973+ 7447             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 973+ 7447             >
 973+ 7447             >                // dummy db directives used to calculate length of namec
 973+ 7447 28 2E 22 29 >                db      '(.")'
 973+ 744B             >len_NFA         defl    $ - temp_NFA
 973+ 744B             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 973+ 7447             >
 973+ 7447 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 973+ 7448 28 2E 22 29 >                db      '(.")'               // name string in 7-bit ascii, but
 973+ 744C             >                org     $-1                 // alter last byte of Name just above to set
 973+ 744B A9          >                db      {b $} | END_BIT     // msb as name end
 973+ 744C             >
 973+ 744C F8 73       >                dw      last_NFA            // Link to previous definition Name
 973+ 744E             >C_DOT_QUOTE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 973+ 744E 56 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 973+ 7450             >                else
 973+ 7450 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 973+ 7450             >                endif           ; ok        // for other definitions it "points" the correct handler
 973+ 7450             >                // Use of "; ok" to suppress "warning[fwdref]"
 973+ 7450             >
 973+ 7450             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 974+ 7450 A8 69 14 72                  dw      R_OP, COUNT             // r count
 975+ 7454 D8 6A 19 6A                  dw      DUP, ONE_PLUS           // dup 1+
 976+ 7458 94 69 F8 69                  dw      R_TO, PLUS, TO_R        // r> + >r  ( advance IP )
 976+ 745C 80 69
 977+ 745E 3A 72                        dw      TYPE                    // type
 978+ 7460 52 69                        dw      EXIT                    // ;
 979+ 7462
 980+ 7462              //  ______________________________________________________________________
 981+ 7462              //
 982+ 7462              // char         -- c
 983+ 7462              // get first character from next input word
 984+ 7462                              Colon_Def CHAR,  "CHAR", is_normal
 984+ 7462             >                New_Def  CHAR, "CHAR", Enter_Ptr, is_normal ; ok
 984+ 7462             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 984+ 7462             >
 984+ 7462             >                // dummy db directives used to calculate length of namec
 984+ 7462 43 48 41 52 >                db      "CHAR"
 984+ 7466             >len_NFA         defl    $ - temp_NFA
 984+ 7466             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 984+ 7462             >
 984+ 7462 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 984+ 7463 43 48 41 52 >                db      "CHAR"               // name string in 7-bit ascii, but
 984+ 7467             >                org     $-1                 // alter last byte of Name just above to set
 984+ 7466 D2          >                db      {b $} | END_BIT     // msb as name end
 984+ 7467             >
 984+ 7467 47 74       >                dw      last_NFA            // Link to previous definition Name
 984+ 7469             >CHAR:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 984+ 7469 56 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 984+ 746B             >                else
 984+ 746B ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 984+ 746B             >                endif           ; ok        // for other definitions it "points" the correct handler
 984+ 746B             >                // Use of "; ok" to suppress "warning[fwdref]"
 984+ 746B             >
 984+ 746B             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 985+ 746B FB 6C FF 73                  dw      BL, WORD                // bl word
 986+ 746F 19 6A 86 6B                  dw      ONE_PLUS, CFETCH        // 1+ c@
 987+ 7473 52 69                        dw      EXIT                    // ;
 988+ 7475
 989+ 7475              //  ______________________________________________________________________
 990+ 7475              //
 991+ 7475              // ,"           --
 992+ 7475              // compiles a string terminated by " as a counted string from next input stream
 993+ 7475                              Colon_Def COMMA_QUOTE,  ',"', is_normal
 993+ 7475             >                New_Def  COMMA_QUOTE, ',"', Enter_Ptr, is_normal ; ok
 993+ 7475             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 993+ 7475             >
 993+ 7475             >                // dummy db directives used to calculate length of namec
 993+ 7475 2C 22       >                db      ',"'
 993+ 7477             >len_NFA         defl    $ - temp_NFA
 993+ 7477             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 993+ 7475             >
 993+ 7475 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 993+ 7476 2C 22       >                db      ',"'               // name string in 7-bit ascii, but
 993+ 7478             >                org     $-1                 // alter last byte of Name just above to set
 993+ 7477 A2          >                db      {b $} | END_BIT     // msb as name end
 993+ 7478             >
 993+ 7478 62 74       >                dw      last_NFA            // Link to previous definition Name
 993+ 747A             >COMMA_QUOTE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 993+ 747A 56 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 993+ 747C             >                else
 993+ 747C ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 993+ 747C             >                endif           ; ok        // for other definitions it "points" the correct handler
 993+ 747C             >                // Use of "; ok" to suppress "warning[fwdref]"
 993+ 747C             >
 993+ 747C             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 994+ 747C A9 63 22 00                  dw      LIT, DQUOTE_CHAR        // [char] "
 995+ 7480 FF 73                        dw      WORD                    // word
 996+ 7482 86 6B 19 6A                  dw      CFETCH, ONE_PLUS        // c@ 1+
 997+ 7486 C0 6E                        dw      ALLOT                   // allot
 998+ 7488 D1 6C DD 6E                  dw      ZERO, CCOMMA            // 0 c,  ( nul-terminated string - useful anyway )
 999+ 748C 52 69                        dw      EXIT
1000+ 748E
1001+ 748E              //  ______________________________________________________________________
1002+ 748E              //
1003+ 748E              // .c           c --
1004+ 748E              // intermediate general purpose string builder, used by ." and .(
1005+ 748E                              Colon_Def DOT_C,  ".C", is_immediate
1005+ 748E             >                New_Def  DOT_C, ".C", Enter_Ptr, is_immediate ; ok
1005+ 748E             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1005+ 748E             >
1005+ 748E             >                // dummy db directives used to calculate length of namec
1005+ 748E 2E 43       >                db      ".C"
1005+ 7490             >len_NFA         defl    $ - temp_NFA
1005+ 7490             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1005+ 748E             >
1005+ 748E C2          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
1005+ 748F 2E 43       >                db      ".C"               // name string in 7-bit ascii, but
1005+ 7491             >                org     $-1                 // alter last byte of Name just above to set
1005+ 7490 C3          >                db      {b $} | END_BIT     // msb as name end
1005+ 7491             >
1005+ 7491 75 74       >                dw      last_NFA            // Link to previous definition Name
1005+ 7493             >DOT_C:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1005+ 7493 56 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
1005+ 7495             >                else
1005+ 7495 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
1005+ 7495             >                endif           ; ok        // for other definitions it "points" the correct handler
1005+ 7495             >                // Use of "; ok" to suppress "warning[fwdref]"
1005+ 7495             >
1005+ 7495             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1006+ 7495 1C 6E 6B 6B                  dw      STATE, FETCH            // state @
1007+ 7499                                                              // if
1008+ 7499 E3 63                        dw      ZBRANCH
1009+ 749B 12 00                        dw      Dot_C_Else - $
1010+ 749D 0D 71 4E 74                  dw          COMPILE, C_DOT_QUOTE //     compile (.")
1011+ 74A1 FF 73 86 6B                  dw          WORD, CFETCH        //      word c@
1012+ 74A5 19 6A C0 6E                  dw          ONE_PLUS, ALLOT     //      1+ allot
1013+ 74A9                                                              // else
1014+ 74A9 CC 63                        dw      BRANCH
1015+ 74AB 08 00                        dw      Dot_C_Endif - $
1016+ 74AD              Dot_C_Else:
1017+ 74AD FF 73 14 72                  dw          WORD, COUNT, TYPE   //      word count type
1017+ 74B1 3A 72
1018+ 74B3              Dot_C_Endif:                                    // endif
1019+ 74B3 52 69                        dw      EXIT                    ;
1020+ 74B5
1021+ 74B5              //  ______________________________________________________________________
1022+ 74B5              //
1023+ 74B5              // ."           c --
1024+ 74B5                              Colon_Def DOT_QUOTE,  '."', is_immediate
1024+ 74B5             >                New_Def  DOT_QUOTE, '."', Enter_Ptr, is_immediate ; ok
1024+ 74B5             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1024+ 74B5             >
1024+ 74B5             >                // dummy db directives used to calculate length of namec
1024+ 74B5 2E 22       >                db      '."'
1024+ 74B7             >len_NFA         defl    $ - temp_NFA
1024+ 74B7             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1024+ 74B5             >
1024+ 74B5 C2          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
1024+ 74B6 2E 22       >                db      '."'               // name string in 7-bit ascii, but
1024+ 74B8             >                org     $-1                 // alter last byte of Name just above to set
1024+ 74B7 A2          >                db      {b $} | END_BIT     // msb as name end
1024+ 74B8             >
1024+ 74B8 8E 74       >                dw      last_NFA            // Link to previous definition Name
1024+ 74BA             >DOT_QUOTE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1024+ 74BA 56 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
1024+ 74BC             >                else
1024+ 74BC ~           >                dw      $ + 2   ; ok        // is pointed by CFA
1024+ 74BC             >                endif           ; ok        // for other definitions it "points" the correct handler
1024+ 74BC             >                // Use of "; ok" to suppress "warning[fwdref]"
1024+ 74BC             >
1024+ 74BC             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1025+ 74BC A9 63 22 00                  dw      LIT, DQUOTE_CHAR        // [char] "
1026+ 74C0 93 74                        dw      DOT_C                   // [compile] .c
1027+ 74C2 52 69                        dw      EXIT                    // ; immediate
1028+ 74C4
1029+ 74C4              //  ______________________________________________________________________
1030+ 74C4              //
1031+ 74C4              // .(           c --
1032+ 74C4                              Colon_Def DOT_BRACKET,  ".(", is_immediate
1032+ 74C4             >                New_Def  DOT_BRACKET, ".(", Enter_Ptr, is_immediate ; ok
1032+ 74C4             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1032+ 74C4             >
1032+ 74C4             >                // dummy db directives used to calculate length of namec
1032+ 74C4 2E 28       >                db      ".("
1032+ 74C6             >len_NFA         defl    $ - temp_NFA
1032+ 74C6             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1032+ 74C4             >
1032+ 74C4 C2          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
1032+ 74C5 2E 28       >                db      ".("               // name string in 7-bit ascii, but
1032+ 74C7             >                org     $-1                 // alter last byte of Name just above to set
1032+ 74C6 A8          >                db      {b $} | END_BIT     // msb as name end
1032+ 74C7             >
1032+ 74C7 B5 74       >                dw      last_NFA            // Link to previous definition Name
1032+ 74C9             >DOT_BRACKET:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1032+ 74C9 56 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
1032+ 74CB             >                else
1032+ 74CB ~           >                dw      $ + 2   ; ok        // is pointed by CFA
1032+ 74CB             >                endif           ; ok        // for other definitions it "points" the correct handler
1032+ 74CB             >                // Use of "; ok" to suppress "warning[fwdref]"
1032+ 74CB             >
1032+ 74CB             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1033+ 74CB A9 63 29 00                  dw      LIT, ")"                // [char] )
1034+ 74CF 93 74                        dw      DOT_C                   // [compile] .c
1035+ 74D1 52 69                        dw      EXIT                    // ; immediate
1036+ 74D3
1037+ 74D3              //  ______________________________________________________________________
1038+ 74D3              //
1039+ 74D3              // (sgn)        a -- a f
1040+ 74D3              // determines if char in addr a is a sign (+ or -), and in that case increments
1041+ 74D3              // a flag. Returns f as the sign, true for negative, false for positive.
1042+ 74D3              // called by NUMBER and (EXP)
1043+ 74D3                              Colon_Def CSGN,  "(SGN)", is_normal
1043+ 74D3             >                New_Def  CSGN, "(SGN)", Enter_Ptr, is_normal ; ok
1043+ 74D3             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1043+ 74D3             >
1043+ 74D3             >                // dummy db directives used to calculate length of namec
1043+ 74D3 28 53 47 4E >                db      "(SGN)"
1043+ 74D7 29          >
1043+ 74D8             >len_NFA         defl    $ - temp_NFA
1043+ 74D8             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1043+ 74D3             >
1043+ 74D3 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1043+ 74D4 28 53 47 4E >                db      "(SGN)"               // name string in 7-bit ascii, but
1043+ 74D8 29          >
1043+ 74D9             >                org     $-1                 // alter last byte of Name just above to set
1043+ 74D8 A9          >                db      {b $} | END_BIT     // msb as name end
1043+ 74D9             >
1043+ 74D9 C4 74       >                dw      last_NFA            // Link to previous definition Name
1043+ 74DB             >CSGN:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1043+ 74DB 56 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
1043+ 74DD             >                else
1043+ 74DD ~           >                dw      $ + 2   ; ok        // is pointed by CFA
1043+ 74DD             >                endif           ; ok        // for other definitions it "points" the correct handler
1043+ 74DD             >                // Use of "; ok" to suppress "warning[fwdref]"
1043+ 74DD             >
1043+ 74DD             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1044+ 74DD D8 6A 19 6A                  dw      DUP, ONE_PLUS, CFETCH   // dup 1+ c@
1044+ 74E1 86 6B
1045+ 74E3 D8 6A A9 63                  dw      DUP, LIT, "-", EQUALS   // dup [char] - =
1045+ 74E7 2D 00 11 6F
1046+ 74EB                                                              // if
1047+ 74EB E3 63                        dw      ZBRANCH
1048+ 74ED 12 00                        dw      CSgn_Else_0 - $
1049+ 74EF A3 6A                        dw          DROP                //      drop
1050+ 74F1 19 6A                        dw          ONE_PLUS            //      1+
1051+ 74F3 D9 6C 2F 6E                  dw          ONE, DPL, PLUSSTORE //      1 dpl +!
1051+ 74F7 48 6B
1052+ 74F9 D9 6C                        dw          ONE                 //      1
1053+ 74FB                                                              // else
1054+ 74FB CC 63                        dw      BRANCH
1055+ 74FD 16 00                        dw      CSgn_Endif_0 - $
1056+ 74FF              CSgn_Else_0:
1057+ 74FF A9 63 2B 00                  dw          LIT, "+", EQUALS    //      [char] + =
1057+ 7503 11 6F
1058+ 7505                                                              //      if
1059+ 7505 E3 63                        dw          ZBRANCH
1060+ 7507 0A 00                        dw          CSgn_Endif_1 - $
1061+ 7509 19 6A                        dw              ONE_PLUS        //          1+
1062+ 750B D9 6C 2F 6E                  dw              ONE, DPL        //          1 dpl
1063+ 750F 48 6B                        dw              PLUSSTORE       //          +!
1064+ 7511              CSgn_Endif_1                                    //      endif
1065+ 7511 D1 6C                        dw          ZERO                //      0
1066+ 7513              CSgn_Endif_0:                                   // endif
1067+ 7513 52 69                        dw      EXIT
1068+ 7515
1069+ 7515              //  ______________________________________________________________________
1070+ 7515              //
1071+ 7515              // (number)     d a -- d1 a1
1072+ 7515              // using the current BASE parse characters stored in address a
1073+ 7515              // accumulating a double precision integer d
1074+ 7515              // the process stops at the first not-convertible character
1075+ 7515              // A double-number is kept in CPU registers as HLDE.
1076+ 7515              // On the stack a double number is treated as two single numbers
1077+ 7515              // where HL is on the top of the stack and DE is the second from top,
1078+ 7515              // so in the stack memory it appears as LHED.
1079+ 7515              // Instead, in 2VARIABLE a double number is stored as EDLH.
1080+ 7515                              Colon_Def CNUMBER,  "(NUMBER)", is_normal
1080+ 7515             >                New_Def  CNUMBER, "(NUMBER)", Enter_Ptr, is_normal ; ok
1080+ 7515             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1080+ 7515             >
1080+ 7515             >                // dummy db directives used to calculate length of namec
1080+ 7515 28 4E 55 4D >                db      "(NUMBER)"
1080+ 7519 42 45 52 29 >
1080+ 751D             >len_NFA         defl    $ - temp_NFA
1080+ 751D             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1080+ 7515             >
1080+ 7515 88          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1080+ 7516 28 4E 55 4D >                db      "(NUMBER)"               // name string in 7-bit ascii, but
1080+ 751A 42 45 52 29 >
1080+ 751E             >                org     $-1                 // alter last byte of Name just above to set
1080+ 751D A9          >                db      {b $} | END_BIT     // msb as name end
1080+ 751E             >
1080+ 751E D3 74       >                dw      last_NFA            // Link to previous definition Name
1080+ 7520             >CNUMBER:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1080+ 7520 56 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
1080+ 7522             >                else
1080+ 7522 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
1080+ 7522             >                endif           ; ok        // for other definitions it "points" the correct handler
1080+ 7522             >                // Use of "; ok" to suppress "warning[fwdref]"
1080+ 7522             >
1080+ 7522             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1081+ 7522                                                              // begin
1082+ 7522              CNumber_Begin:
1083+ 7522 19 6A                        dw          ONE_PLUS            //      1+
1084+ 7524 D8 6A 80 69                  dw          DUP, TO_R           //      dup >r
1085+ 7528 86 6B                        dw          CFETCH              //      @
1086+ 752A 26 6E 6B 6B                  dw          BASE, FETCH         //      base @
1087+ 752E 9C 64                        dw          DIGIT               //      digit
1088+ 7530                                                              // while
1089+ 7530 E3 63                        dw      ZBRANCH
1090+ 7532 2C 00                        dw      CNumber_While_end - $
1091+ 7534 CB 6A                        dw          SWAP                //      swap
1092+ 7536 26 6E 6B 6B                  dw          BASE, FETCH         //      base @
1093+ 753A 75 68                        dw          UM_MUL              //      um*
1094+ 753C A3 6A E5 6A                  dw          DROP, ROT           //      drop rot
1095+ 7540 26 6E 6B 6B                  dw          BASE, FETCH         //      base @
1096+ 7544 75 68                        dw          UM_MUL              //      um*
1097+ 7546 05 6A                        dw          DPLUS               //      d+
1098+ 7548 2F 6E 6B 6B                  dw          DPL, FETCH          //      dpl @
1099+ 754C 19 6A                        dw          ONE_PLUS            //      1+
1100+ 754E                                                              //      if
1101+ 754E E3 63                        dw          ZBRANCH
1102+ 7550 08 00                        dw          CNumber_Endif - $
1103+ 7552 D9 6C 2F 6E                  dw              ONE, DPL        //          1 dpl
1104+ 7556 48 6B                        dw              PLUSSTORE       //          +!
1105+ 7558              CNumber_Endif:                                  //      endif
1106+ 7558 94 69                        dw             R_TO             //      r>  ( balance rp )
1107+ 755A CC 63                        dw      BRANCH
1108+ 755C C6 FF                        dw      CNumber_Begin - $
1109+ 755E              CNumber_While_end:                              // repeat
1110+ 755E 94 69                        dw      R_TO                    // r>  ( balance rp on exit while-repeat )
1111+ 7560 52 69                        dw      EXIT                    // ;
1112+ 7562
1113+ 7562              //  ______________________________________________________________________
1114+ 7562              //
1115+ 7562              // number       a -- d
1116+ 7562                              Colon_Def NUMBER,  "NUMBER", is_normal
1116+ 7562             >                New_Def  NUMBER, "NUMBER", Enter_Ptr, is_normal ; ok
1116+ 7562             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1116+ 7562             >
1116+ 7562             >                // dummy db directives used to calculate length of namec
1116+ 7562 4E 55 4D 42 >                db      "NUMBER"
1116+ 7566 45 52       >
1116+ 7568             >len_NFA         defl    $ - temp_NFA
1116+ 7568             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1116+ 7562             >
1116+ 7562 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1116+ 7563 4E 55 4D 42 >                db      "NUMBER"               // name string in 7-bit ascii, but
1116+ 7567 45 52       >
1116+ 7569             >                org     $-1                 // alter last byte of Name just above to set
1116+ 7568 D2          >                db      {b $} | END_BIT     // msb as name end
1116+ 7569             >
1116+ 7569 15 75       >                dw      last_NFA            // Link to previous definition Name
1116+ 756B             >NUMBER:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1116+ 756B 56 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
1116+ 756D             >                else
1116+ 756D ~           >                dw      $ + 2   ; ok        // is pointed by CFA
1116+ 756D             >                endif           ; ok        // for other definitions it "points" the correct handler
1116+ 756D             >                // Use of "; ok" to suppress "warning[fwdref]"
1116+ 756D             >
1116+ 756D             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1117+ 756D D1 6C D1 6C                  dw      ZERO, ZERO              // 0 0
1118+ 7571 E5 6A                        dw      ROT                     // rot
1119+ 7573 DB 74 80 69                  dw      CSGN, TO_R              // (sgn) >r
1120+ 7577 F2 6C 2F 6E                  dw      NEG_ONE, DPL, STORE     // -1 dpl !
1120+ 757B 78 6B
1121+ 757D 20 75                        dw      CNUMBER                 // (number)
1122+ 757F D8 6A 86 6B                  dw      DUP, CFETCH             // dup c@
1123+ 7583 A9 63 2E 00                  dw      LIT, 46, EQUALS         // [char] . =  ( decimal point )
1123+ 7587 11 6F
1124+ 7589                                                              // if
1125+ 7589 E3 63                        dw      ZBRANCH
1126+ 758B 0A 00                        dw      Number_Endif_1 - $
1127+ 758D D1 6C 2F 6E                  dw          ZERO, DPL, STORE    //      0 dpl !
1127+ 7591 78 6B
1128+ 7593 20 75                        dw          CNUMBER             //      (number)
1129+ 7595              Number_Endif_1:                                 // endif
1130+ 7595 86 6B FB 6C                  dw      CFETCH, BL              // c@ bl
1131+ 7599 03 6F D1 6C                  dw      SUBTRACT, ZERO, QERROR  // - 0 ?error
1131+ 759D 7A 70
1132+ 759F 94 69                        dw      R_TO                    // r>
1133+ 75A1                                                              // if
1134+ 75A1 E3 63                        dw      ZBRANCH
1135+ 75A3 04 00                        dw      Number_Endif_2 - $
1136+ 75A5 79 6A                        dw          DMINUS              //      dminus
1137+ 75A7              Number_Endif_2:                                 // endif
1138+ 75A7 52 69                        dw      EXIT                    // ;
1139+ 75A9
1140+ 75A9              //  ______________________________________________________________________
1141+ 75A9              //
1142+ 75A9              // -find        a -- d
1143+ 75A9                              Colon_Def LFIND,  "-FIND", is_normal
1143+ 75A9             >                New_Def  LFIND, "-FIND", Enter_Ptr, is_normal ; ok
1143+ 75A9             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1143+ 75A9             >
1143+ 75A9             >                // dummy db directives used to calculate length of namec
1143+ 75A9 2D 46 49 4E >                db      "-FIND"
1143+ 75AD 44          >
1143+ 75AE             >len_NFA         defl    $ - temp_NFA
1143+ 75AE             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1143+ 75A9             >
1143+ 75A9 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1143+ 75AA 2D 46 49 4E >                db      "-FIND"               // name string in 7-bit ascii, but
1143+ 75AE 44          >
1143+ 75AF             >                org     $-1                 // alter last byte of Name just above to set
1143+ 75AE C4          >                db      {b $} | END_BIT     // msb as name end
1143+ 75AF             >
1143+ 75AF 62 75       >                dw      last_NFA            // Link to previous definition Name
1143+ 75B1             >LFIND:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1143+ 75B1 56 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
1143+ 75B3             >                else
1143+ 75B3 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
1143+ 75B3             >                endif           ; ok        // for other definitions it "points" the correct handler
1143+ 75B3             >                // Use of "; ok" to suppress "warning[fwdref]"
1143+ 75B3             >
1143+ 75B3             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1144+ 75B3 FB 6C FF 73                  dw      BL, WORD                // bl word
1145+ 75B7 04 6E 6B 6B                  dw      CONTEXT, FETCH, FETCH   // context @ @
1145+ 75BB 6B 6B
1146+ 75BD 11 65                        dw      C_FIND                  // (find)
1147+ 75BF 89 6F                        dw      QDUP                    // ?dup
1148+ 75C1 B5 69                        dw      ZEQUAL                  // 0=
1149+ 75C3                                                              // if
1150+ 75C3 E3 63                        dw      ZBRANCH
1151+ 75C5 08 00                        dw      LFind_Endif - $
1152+ 75C7 B0 6E                        dw          HERE                //      here
1153+ 75C9 F6 6F                        dw          LATEST              //      latest
1154+ 75CB 11 65                        dw          C_FIND              //      (find)
1155+ 75CD              LFind_Endif:                                    // endif
1156+ 75CD 52 69                        dw      EXIT                    // ;
1157+ 75CF
1158+ 75CF              //  ______________________________________________________________________
1159+ 75CF              //
1160+ 75CF              // (abort)      --
1161+ 75CF                              Colon_Def CABORT,  "(ABORT)", is_normal
1161+ 75CF             >                New_Def  CABORT, "(ABORT)", Enter_Ptr, is_normal ; ok
1161+ 75CF             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1161+ 75CF             >
1161+ 75CF             >                // dummy db directives used to calculate length of namec
1161+ 75CF 28 41 42 4F >                db      "(ABORT)"
1161+ 75D3 52 54 29    >
1161+ 75D6             >len_NFA         defl    $ - temp_NFA
1161+ 75D6             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1161+ 75CF             >
1161+ 75CF 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1161+ 75D0 28 41 42 4F >                db      "(ABORT)"               // name string in 7-bit ascii, but
1161+ 75D4 52 54 29    >
1161+ 75D7             >                org     $-1                 // alter last byte of Name just above to set
1161+ 75D6 A9          >                db      {b $} | END_BIT     // msb as name end
1161+ 75D7             >
1161+ 75D7 A9 75       >                dw      last_NFA            // Link to previous definition Name
1161+ 75D9             >CABORT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1161+ 75D9 56 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
1161+ 75DB             >                else
1161+ 75DB ~           >                dw      $ + 2   ; ok        // is pointed by CFA
1161+ 75DB             >                endif           ; ok        // for other definitions it "points" the correct handler
1161+ 75DB             >                // Use of "; ok" to suppress "warning[fwdref]"
1161+ 75DB             >
1161+ 75DB             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1162+ 75DB A0 78                        dw      ABORT                   // abort
1163+ 75DD 52 69                        dw      EXIT                    // ;
1164+ 75DF
1165+ 75DF              //  ______________________________________________________________________
1166+ 75DF              //
1167+ 75DF              // error        n --
1168+ 75DF              // raise an error
1169+ 75DF              // if WARNING is 0, prints "MSG#n".
1170+ 75DF              // if WARNING is 1, prints line n of screen 4.
1171+ 75DF              // if WARNING is -1 does (ABORT) that normally does ABORT
1172+ 75DF              // value can be negative or beyond block 4.
1173+ 75DF                              Colon_Def ERROR,  "ERROR", is_normal
1173+ 75DF             >                New_Def  ERROR, "ERROR", Enter_Ptr, is_normal ; ok
1173+ 75DF             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1173+ 75DF             >
1173+ 75DF             >                // dummy db directives used to calculate length of namec
1173+ 75DF 45 52 52 4F >                db      "ERROR"
1173+ 75E3 52          >
1173+ 75E4             >len_NFA         defl    $ - temp_NFA
1173+ 75E4             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1173+ 75DF             >
1173+ 75DF 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1173+ 75E0 45 52 52 4F >                db      "ERROR"               // name string in 7-bit ascii, but
1173+ 75E4 52          >
1173+ 75E5             >                org     $-1                 // alter last byte of Name just above to set
1173+ 75E4 D2          >                db      {b $} | END_BIT     // msb as name end
1173+ 75E5             >
1173+ 75E5 CF 75       >                dw      last_NFA            // Link to previous definition Name
1173+ 75E7             >ERROR:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1173+ 75E7 56 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
1173+ 75E9             >                else
1173+ 75E9 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
1173+ 75E9             >                endif           ; ok        // for other definitions it "points" the correct handler
1173+ 75E9             >                // Use of "; ok" to suppress "warning[fwdref]"
1173+ 75E9             >
1173+ 75E9             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1174+ 75E9 7C 6D 6B 6B                  dw      WARNING, FETCH, ZLESS   // warning @ 0<
1174+ 75ED D0 69
1175+ 75EF                                                              // if
1176+ 75EF E3 63                        dw      ZBRANCH
1177+ 75F1 04 00                        dw      Error_Endif_1 - $
1178+ 75F3 D9 75                        dw          CABORT              //      (abort)
1179+ 75F5              Error_Endif_1:                                  // endif
1180+ 75F5 B0 6E 14 72                  dw      HERE, COUNT, TYPE       // here count type
1180+ 75F9 3A 72
1181+ 75FB 4E 74                        dw      C_DOT_QUOTE             // .( ? )
1182+ 75FD 02 3F 20                     db      2, "? "
1183+ 7600 D1 7A                        dw      MESSAGE                 // message  ( forward )
1184+ 7602 53 6D 6B 6B                  dw      S0, FETCH, SPSTORE      // s0 @ sp!
1184+ 7606 29 69
1185+ 7608 D0 6D 6B 6B                  dw      BLK, FETCH, QDUP        // blk @ ?dup
1185+ 760C 89 6F
1186+ 760E                                                              // if
1187+ 760E E3 63                        dw      ZBRANCH
1188+ 7610 08 00                        dw      Error_Endif_2 - $
1189+ 7612 D9 6D 6B 6B                  dw          TO_IN, FETCH, SWAP  //      >in @ swap
1189+ 7616 CB 6A
1190+ 7618              Error_Endif_2:                                  // endif
1191+ 7618 5F 78                        dw      QUIT                    // quit ( forward )
1192+ 761A 52 69                        dw      EXIT                    // ;
1193+ 761C              //  ______________________________________________________________________
1194+ 761C              //
1195+ 761C              // id.          nfa --
1196+ 761C                              Colon_Def ID_DOT,  "ID.", is_normal
1196+ 761C             >                New_Def  ID_DOT, "ID.", Enter_Ptr, is_normal ; ok
1196+ 761C             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1196+ 761C             >
1196+ 761C             >                // dummy db directives used to calculate length of namec
1196+ 761C 49 44 2E    >                db      "ID."
1196+ 761F             >len_NFA         defl    $ - temp_NFA
1196+ 761F             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1196+ 761C             >
1196+ 761C 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1196+ 761D 49 44 2E    >                db      "ID."               // name string in 7-bit ascii, but
1196+ 7620             >                org     $-1                 // alter last byte of Name just above to set
1196+ 761F AE          >                db      {b $} | END_BIT     // msb as name end
1196+ 7620             >
1196+ 7620 DF 75       >                dw      last_NFA            // Link to previous definition Name
1196+ 7622             >ID_DOT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1196+ 7622 56 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
1196+ 7624             >                else
1196+ 7624 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
1196+ 7624             >                endif           ; ok        // for other definitions it "points" the correct handler
1196+ 7624             >                // Use of "; ok" to suppress "warning[fwdref]"
1196+ 7624             >
1196+ 7624             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1197+ 7624 EC 73 A9 63                  dw      PAD, LIT, 32, LIT, 96   // pad 32 96
1197+ 7628 20 00 A9 63
1197+ 762C 60 00
1198+ 762E 9C 73                        dw      FILL                    // fill
1199+ 7630 D8 6A 34 70                  dw      DUP, PFA, LFA           // dup pfa lfa
1199+ 7634 06 70
1200+ 7636 93 6A 03 6F                  dw      OVER, SUBTRACT          // over -
1201+ 763A EC 73 CB 6A                  dw      PAD, SWAP               // pad swap
1202+ 763E 42 68                        dw      CMOVE                   // cmove
1203+ 7640 EC 73 14 72                  dw      PAD, COUNT, LIT, $1F    // pad count 01F
1203+ 7644 A9 63 1F 00
1204+ 7648 E2 68                        dw      AND_OP                  // and  ( use only lower bits )
1205+ 764A 3A 72 C0 6F                  dw      TYPE, SPACE             // type
1206+ 764E 52 69                        dw      EXIT                    // ;
1207+ 7650
1208+ 7650              //  ______________________________________________________________________
1209+ 7650              //
1210+ 7650              // code         -- cccc
1211+ 7650                              Colon_Def CODE,  "CODE", is_normal
1211+ 7650             >                New_Def  CODE, "CODE", Enter_Ptr, is_normal ; ok
1211+ 7650             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1211+ 7650             >
1211+ 7650             >                // dummy db directives used to calculate length of namec
1211+ 7650 43 4F 44 45 >                db      "CODE"
1211+ 7654             >len_NFA         defl    $ - temp_NFA
1211+ 7654             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1211+ 7650             >
1211+ 7650 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1211+ 7651 43 4F 44 45 >                db      "CODE"               // name string in 7-bit ascii, but
1211+ 7655             >                org     $-1                 // alter last byte of Name just above to set
1211+ 7654 C5          >                db      {b $} | END_BIT     // msb as name end
1211+ 7655             >
1211+ 7655 1C 76       >                dw      last_NFA            // Link to previous definition Name
1211+ 7657             >CODE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1211+ 7657 56 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
1211+ 7659             >                else
1211+ 7659 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
1211+ 7659             >                endif           ; ok        // for other definitions it "points" the correct handler
1211+ 7659             >                // Use of "; ok" to suppress "warning[fwdref]"
1211+ 7659             >
1211+ 7659             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1212+ 7659 B1 75                        dw      LFIND                   // -find
1213+ 765B                                                              // if
1214+ 765B E3 63                        dw      ZBRANCH
1215+ 765D 10 00                        dw      Code_Endif - $
1216+ 765F A3 6A                        dw          DROP                //      drop
1217+ 7661 58 70 22 76                  dw          TO_NAME, ID_DOT     //      >name id.
1218+ 7665 A9 63 04 00                  dw          LIT, 4, MESSAGE     //      4 message
1218+ 7669 D1 7A
1219+ 766B C0 6F                        dw          SPACE               //      space
1220+ 766D              Code_Endif:                                     // endif
1221+ 766D B0 6E                        dw      HERE                    // here
1222+ 766F                                                              // ( ---- here begins NFA ---- )
1223+ 766F D8 6A 86 6B                  dw      DUP, CFETCH             // dup c@
1224+ 7673 6F 6D 6B 6B                  dw      WIDTH, FETCH, MIN       // width @ min  ( max 31 character length )
1224+ 7677 5C 6F
1225+ 7679 19 6A C0 6E                  dw      ONE_PLUS, ALLOT         // 1+ allot
1226+ 767D D8 6A                        dw      DUP                     // dup
1227+ 767F A9 63                        dw      LIT
1228+ 7681 A0 00                        dw      SMUDGE_BIT | END_BIT    // 160
1229+ 7683 5E 6B                        dw      TOGGLE                  // toggle
1230+ 7685 B0 6E 25 6A                  dw      HERE, ONE_SUBTRACT     // here 1- ( last character )
1231+ 7689 A9 63 80 00                  dw      LIT, END_BIT, TOGGLE    // 128 toggle
1231+ 768D 5E 6B
1232+ 768F                                                              // ( ---- here is LFA ---- )
1233+ 768F F6 6F CC 6E                  dw      LATEST, COMMA           // latest ,
1234+ 7693 11 6E 6B 6B                  dw      CURRENT, FETCH, STORE   // current @ ! ( save this word as the latest )
1234+ 7697 78 6B
1235+ 7699 B0 6E 41 6A                  dw      HERE, CELL_PLUS, COMMA  // ( CFA point PFA )
1235+ 769D CC 6E
1236+ 769F 52 69                        dw      EXIT                    // ;
1237+ 76A1
1238+ 76A1              //  ______________________________________________________________________
1239+ 76A1              //
1240+ 76A1              // create       -- cccc     ( compile time )
1241+ 76A1              //              -- a        ( run time )
1242+ 76A1                              Colon_Def CREATE,  "CREATE", is_normal
1242+ 76A1             >                New_Def  CREATE, "CREATE", Enter_Ptr, is_normal ; ok
1242+ 76A1             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1242+ 76A1             >
1242+ 76A1             >                // dummy db directives used to calculate length of namec
1242+ 76A1 43 52 45 41 >                db      "CREATE"
1242+ 76A5 54 45       >
1242+ 76A7             >len_NFA         defl    $ - temp_NFA
1242+ 76A7             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1242+ 76A1             >
1242+ 76A1 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1242+ 76A2 43 52 45 41 >                db      "CREATE"               // name string in 7-bit ascii, but
1242+ 76A6 54 45       >
1242+ 76A8             >                org     $-1                 // alter last byte of Name just above to set
1242+ 76A7 C5          >                db      {b $} | END_BIT     // msb as name end
1242+ 76A8             >
1242+ 76A8 50 76       >                dw      last_NFA            // Link to previous definition Name
1242+ 76AA             >CREATE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1242+ 76AA 56 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
1242+ 76AC             >                else
1242+ 76AC ~           >                dw      $ + 2   ; ok        // is pointed by CFA
1242+ 76AC             >                endif           ; ok        // for other definitions it "points" the correct handler
1242+ 76AC             >                // Use of "; ok" to suppress "warning[fwdref]"
1242+ 76AC             >
1242+ 76AC             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1243+ 76AC 57 76 59 71                  dw      CODE, SMUDGE        // code smudge
1244+ 76B0
1245+ 76B0
1246+ 76B0 AF 71                        dw      C_SEMICOLON_CODE
1247+ 76B2                              // this routine is called from the call coded in CFA
1248+ 76B2              Create_Ptr:
1249+ 76B2 13                           inc     de
1250+ 76B3 D5                           push    de                  // balance TOS before overwrite it
1251+ 76B4
1252+ 76B4                              next
1252+ 76B4 DD E9       >                jp      (ix)
1253+ 76B6
1254+ 76B6              //  ______________________________________________________________________
1255+ 76B6              //
1256+ 76B6              // [compile]    -- cccc     ( compile time )
1257+ 76B6                              Colon_Def COMPILE_IMMEDIATE,  "[COMPILE]", is_immediate
1257+ 76B6             >                New_Def  COMPILE_IMMEDIATE, "[COMPILE]", Enter_Ptr, is_immediate ; ok
1257+ 76B6             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1257+ 76B6             >
1257+ 76B6             >                // dummy db directives used to calculate length of namec
1257+ 76B6 5B 43 4F 4D >                db      "[COMPILE]"
1257+ 76BA 50 49 4C 45 >
1257+ 76BE 5D          >
1257+ 76BF             >len_NFA         defl    $ - temp_NFA
1257+ 76BF             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1257+ 76B6             >
1257+ 76B6 C9          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
1257+ 76B7 5B 43 4F 4D >                db      "[COMPILE]"               // name string in 7-bit ascii, but
1257+ 76BB 50 49 4C 45 >
1257+ 76BF 5D          >
1257+ 76C0             >                org     $-1                 // alter last byte of Name just above to set
1257+ 76BF DD          >                db      {b $} | END_BIT     // msb as name end
1257+ 76C0             >
1257+ 76C0 A1 76       >                dw      last_NFA            // Link to previous definition Name
1257+ 76C2             >COMPILE_IMMEDIATE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1257+ 76C2 56 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
1257+ 76C4             >                else
1257+ 76C4 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
1257+ 76C4             >                endif           ; ok        // for other definitions it "points" the correct handler
1257+ 76C4             >                // Use of "; ok" to suppress "warning[fwdref]"
1257+ 76C4             >
1257+ 76C4             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1258+ 76C4 B1 75                        dw      LFIND                   // -find      (  cfa  b  f  )
1259+ 76C6 B5 69                        dw      ZEQUAL                  // 0=         (  cfa  b  )
1260+ 76C8 D1 6C 7A 70                  dw      ZERO, QERROR            // 0 ?error
1261+ 76CC A3 6A                        dw      DROP                    // drop       (  cfa  )
1262+ 76CE CC 6E                        dw      COMMA                   // ,
1263+ 76D0 52 69                        dw      EXIT                    // ; immediate
1264+ 76D2
1265+ 76D2              //  ______________________________________________________________________
1266+ 76D2              //
1267+ 76D2              // literal      n --      ( compile time )
1268+ 76D2                              Colon_Def LITERAL,  "LITERAL", is_immediate
1268+ 76D2             >                New_Def  LITERAL, "LITERAL", Enter_Ptr, is_immediate ; ok
1268+ 76D2             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1268+ 76D2             >
1268+ 76D2             >                // dummy db directives used to calculate length of namec
1268+ 76D2 4C 49 54 45 >                db      "LITERAL"
1268+ 76D6 52 41 4C    >
1268+ 76D9             >len_NFA         defl    $ - temp_NFA
1268+ 76D9             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1268+ 76D2             >
1268+ 76D2 C7          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
1268+ 76D3 4C 49 54 45 >                db      "LITERAL"               // name string in 7-bit ascii, but
1268+ 76D7 52 41 4C    >
1268+ 76DA             >                org     $-1                 // alter last byte of Name just above to set
1268+ 76D9 CC          >                db      {b $} | END_BIT     // msb as name end
1268+ 76DA             >
1268+ 76DA B6 76       >                dw      last_NFA            // Link to previous definition Name
1268+ 76DC             >LITERAL:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1268+ 76DC 56 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
1268+ 76DE             >                else
1268+ 76DE ~           >                dw      $ + 2   ; ok        // is pointed by CFA
1268+ 76DE             >                endif           ; ok        // for other definitions it "points" the correct handler
1268+ 76DE             >                // Use of "; ok" to suppress "warning[fwdref]"
1268+ 76DE             >
1268+ 76DE             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1269+ 76DE 1C 6E 6B 6B                  dw      STATE, FETCH            // state @
1270+ 76E2                                                              // if
1271+ 76E2 E3 63                        dw      ZBRANCH
1272+ 76E4 08 00                        dw      Literal_Endif - $
1273+ 76E6 0D 71 A9 63                  dw          COMPILE, LIT        //      compile lit
1274+ 76EA CC 6E                        dw          COMMA               //      ,
1275+ 76EC              Literal_Endif:                                  // endif
1276+ 76EC 52 69                        dw      EXIT                    // ; immediate
1277+ 76EE
1278+ 76EE              //  ______________________________________________________________________
1279+ 76EE              //
1280+ 76EE              // dliteral     n --      ( compile time )
1281+ 76EE                              Colon_Def DLITERAL,  "DLITERAL", is_immediate
1281+ 76EE             >                New_Def  DLITERAL, "DLITERAL", Enter_Ptr, is_immediate ; ok
1281+ 76EE             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1281+ 76EE             >
1281+ 76EE             >                // dummy db directives used to calculate length of namec
1281+ 76EE 44 4C 49 54 >                db      "DLITERAL"
1281+ 76F2 45 52 41 4C >
1281+ 76F6             >len_NFA         defl    $ - temp_NFA
1281+ 76F6             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1281+ 76EE             >
1281+ 76EE C8          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
1281+ 76EF 44 4C 49 54 >                db      "DLITERAL"               // name string in 7-bit ascii, but
1281+ 76F3 45 52 41 4C >
1281+ 76F7             >                org     $-1                 // alter last byte of Name just above to set
1281+ 76F6 CC          >                db      {b $} | END_BIT     // msb as name end
1281+ 76F7             >
1281+ 76F7 D2 76       >                dw      last_NFA            // Link to previous definition Name
1281+ 76F9             >DLITERAL:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1281+ 76F9 56 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
1281+ 76FB             >                else
1281+ 76FB ~           >                dw      $ + 2   ; ok        // is pointed by CFA
1281+ 76FB             >                endif           ; ok        // for other definitions it "points" the correct handler
1281+ 76FB             >                // Use of "; ok" to suppress "warning[fwdref]"
1281+ 76FB             >
1281+ 76FB             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1282+ 76FB 1C 6E 6B 6B                  dw      STATE, FETCH            // state @
1283+ 76FF                                                              // if
1284+ 76FF E3 63                        dw      ZBRANCH
1285+ 7701 08 00                        dw      DLiteral_Endif - $
1286+ 7703 CB 6A                        dw          SWAP                //      swap
1287+ 7705 DC 76 DC 76                  dw          LITERAL,  LITERAL   //      [compile] literal [compile] literal
1288+ 7709              DLiteral_Endif:                                 // endif
1289+ 7709 52 69                        dw      EXIT                    // ; immediate
1290+ 770B
1291+ 770B              //  ______________________________________________________________________
1292+ 770B              //
1293+ 770B              // [char]       n --      ( compile time )
1294+ 770B              // inside colon definition, gets first character from next input word
1295+ 770B              // and compiles it as literal.
1296+ 770B                              Colon_Def COMPILE_CHAR,  "[CHAR]", is_immediate
1296+ 770B             >                New_Def  COMPILE_CHAR, "[CHAR]", Enter_Ptr, is_immediate ; ok
1296+ 770B             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1296+ 770B             >
1296+ 770B             >                // dummy db directives used to calculate length of namec
1296+ 770B 5B 43 48 41 >                db      "[CHAR]"
1296+ 770F 52 5D       >
1296+ 7711             >len_NFA         defl    $ - temp_NFA
1296+ 7711             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1296+ 770B             >
1296+ 770B C6          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
1296+ 770C 5B 43 48 41 >                db      "[CHAR]"               // name string in 7-bit ascii, but
1296+ 7710 52 5D       >
1296+ 7712             >                org     $-1                 // alter last byte of Name just above to set
1296+ 7711 DD          >                db      {b $} | END_BIT     // msb as name end
1296+ 7712             >
1296+ 7712 EE 76       >                dw      last_NFA            // Link to previous definition Name
1296+ 7714             >COMPILE_CHAR:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1296+ 7714 56 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
1296+ 7716             >                else
1296+ 7716 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
1296+ 7716             >                endif           ; ok        // for other definitions it "points" the correct handler
1296+ 7716             >                // Use of "; ok" to suppress "warning[fwdref]"
1296+ 7716             >
1296+ 7716             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1297+ 7716 69 74 DC 76                  dw      CHAR, LITERAL           // char [compile] literal
1298+ 771A 52 69                        dw      EXIT                    // ; immediate
1299+ 771C
1300+ 771C              //  ______________________________________________________________________
1301+ 771C              //
1302+ 771C              // 0x00         n --      ( compile time )
1303+ 771C                              Colon_Def NUL_WORD,  $00, is_immediate
1303+ 771C             >                New_Def  NUL_WORD, $00, Enter_Ptr, is_immediate ; ok
1303+ 771C             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1303+ 771C             >
1303+ 771C             >                // dummy db directives used to calculate length of namec
1303+ 771C 00          >                db      $00
1303+ 771D             >len_NFA         defl    $ - temp_NFA
1303+ 771D             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1303+ 771C             >
1303+ 771C C1          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
1303+ 771D 00          >                db      $00               // name string in 7-bit ascii, but
1303+ 771E             >                org     $-1                 // alter last byte of Name just above to set
1303+ 771D 80          >                db      {b $} | END_BIT     // msb as name end
1303+ 771E             >
1303+ 771E 0B 77       >                dw      last_NFA            // Link to previous definition Name
1303+ 7720             >NUL_WORD:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1303+ 7720 56 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
1303+ 7722             >                else
1303+ 7722 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
1303+ 7722             >                endif           ; ok        // for other definitions it "points" the correct handler
1303+ 7722             >                // Use of "; ok" to suppress "warning[fwdref]"
1303+ 7722             >
1303+ 7722             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1304+ 7722 D0 6D 6B 6B                  dw      BLK, FETCH, ONE         // blk @ 1
1304+ 7726 D9 6C
1305+ 7728 4E 6F                        dw      GREATER                 // > if
1306+ 772A                                                              // if
1307+ 772A E3 63                        dw      ZBRANCH
1308+ 772C 28 00                        dw      Nul_Else_1 - $
1309+ 772E D9 6C D0 6D                  dw          ONE, BLK, PLUSSTORE //      1 blk +!
1309+ 7732 48 6B
1310+ 7734 D1 6C D9 6D                  dw          ZERO, TO_IN, STORE  //      0 >in !
1310+ 7738 78 6B
1311+ 773A D0 6D 6B 6B                  dw          BLK, FETCH          //      blk @
1312+ 773E 1D 6D                        dw          BSCR                //      b/scr
1313+ 7740 25 6A                        dw          ONE_SUBTRACT        //      1 -
1314+ 7742 E2 68                        dw          AND_OP              //      and  ( this is tricky )
1315+ 7744 B5 69                        dw          ZEQUAL              //      0=
1316+ 7746                                                              //      if
1317+ 7746 E3 63                        dw          ZBRANCH
1318+ 7748 08 00                        dw          Nul_Endif_2 - $
1319+ 774A AC 70                        dw              QEXEC           //          ?exec
1320+ 774C 94 69 A3 6A                  dw              R_TO, DROP      //          r> drop
1321+ 7750              Nul_Endif_2:                                    //      endif
1322+ 7750 CC 63                        dw      BRANCH
1323+ 7752 06 00                        dw      Nul_Endif_1 - $
1324+ 7754              Nul_Else_1:                                     // else
1325+ 7754 94 69 A3 6A                  dw          R_TO, DROP          //      r> drop
1326+ 7758              Nul_Endif_1:                                    // endif
1327+ 7758 52 69                        dw      EXIT                    // ;
1328+ 775A
1329+ 775A              //  ______________________________________________________________________
1330+ 775A              //
1331+ 775A              // ?stack       --
1332+ 775A              // Raise error #1 if stack is empty and you pop it
1333+ 775A              // Raise error #7 if stack is full.
1334+ 775A              // This means SP must always stay between HERE and FFFF
1335+ 775A              // For 128K BANK paging purpose SP must be <= BFE0 and 50 words room
1336+ 775A              // for Next 8K MMU paging this is $DOE8
1337+ 775A                              Colon_Def QSTACK, "?STACK", is_normal
1337+ 775A             >                New_Def  QSTACK, "?STACK", Enter_Ptr, is_normal ; ok
1337+ 775A             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1337+ 775A             >
1337+ 775A             >                // dummy db directives used to calculate length of namec
1337+ 775A 3F 53 54 41 >                db      "?STACK"
1337+ 775E 43 4B       >
1337+ 7760             >len_NFA         defl    $ - temp_NFA
1337+ 7760             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1337+ 775A             >
1337+ 775A 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1337+ 775B 3F 53 54 41 >                db      "?STACK"               // name string in 7-bit ascii, but
1337+ 775F 43 4B       >
1337+ 7761             >                org     $-1                 // alter last byte of Name just above to set
1337+ 7760 CB          >                db      {b $} | END_BIT     // msb as name end
1337+ 7761             >
1337+ 7761 1C 77       >                dw      last_NFA            // Link to previous definition Name
1337+ 7763             >QSTACK:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1337+ 7763 56 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
1337+ 7765             >                else
1337+ 7765 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
1337+ 7765             >                endif           ; ok        // for other definitions it "points" the correct handler
1337+ 7765             >                // Use of "; ok" to suppress "warning[fwdref]"
1337+ 7765             >
1337+ 7765             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1338+ 7765 1A 69                        dw      SPFETCH                 // sp@
1339+ 7767 53 6D 6B 6B                  dw      S0, FETCH               // s0 @
1340+ 776B CB 6A 1E 6F                  dw      SWAP, ULESS             // swap u<
1341+ 776F D9 6C 7A 70                  dw      ONE, QERROR             // 1 ?error
1342+ 7773 B0 6E                        dw      HERE                    // here
1343+ 7775 53 6D 6B 6B                  dw      S0, FETCH, LESS         // s0 @ <
1343+ 7779 32 6F
1344+ 777B                                                              // if
1345+ 777B E3 63                        dw      ZBRANCH
1346+ 777D 14 00                        dw      QStack_Endif - $
1347+ 777F 1A 69                        dw          SPFETCH             //      sp@
1348+ 7781 B0 6E A9 63                  dw          HERE, LIT, 128      //      here 128
1348+ 7785 80 00
1349+ 7787 F8 69 1E 6F                  dw          PLUS, ULESS         //      plus u<
1350+ 778B A9 63 07 00                  dw          LIT, 7, QERROR      //      7 Cerror
1350+ 778F 7A 70
1351+ 7791              QStack_Endif:                                   // endif
1352+ 7791 52 69                        dw      EXIT                    // ;
1353+ 7793
1354+ 7793
# file closed: C:\Zx\CSpect\Projects\vForth15_INDIRECT/source/L1.asm
 111  7793                              include "L2.asm"
# file opened: C:\Zx\CSpect\Projects\vForth15_INDIRECT/source/L2.asm
   1+ 7793              //  ______________________________________________________________________
   2+ 7793              //
   3+ 7793              //  L2.asm
   4+ 7793              //
   5+ 7793              //  Level-2
   6+ 7793              //  the Forth interpreter, vocabulary, cold/warm start and quit from Forth.
   7+ 7793              //  ______________________________________________________________________
   8+ 7793
   9+ 7793
  10+ 7793              //  ______________________________________________________________________
  11+ 7793              //
  12+ 7793              // interpret    --
  13+ 7793              // This is the text interpreter.
  14+ 7793              // It executes or compiles, depending on STATE, the text coming from
  15+ 7793              // current input stream.
  16+ 7793              // If the word search fails after parsing CONTEXT and CURRENT vocabulary,
  17+ 7793              // the word is interpreted as numeric and converted, using current BASE,
  18+ 7793              // leaving on top of stack a single or double precision number, depending
  19+ 7793              // on the presence of a decimal point.
  20+ 7793              // If the number conversion fails, the terminal is notified with ? followed
  21+ 7793              // by the offending word.
  22+ 7793                              Colon_Def INTERPRET, "INTERPRET", is_normal
  22+ 7793             >                New_Def  INTERPRET, "INTERPRET", Enter_Ptr, is_normal ; ok
  22+ 7793             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  22+ 7793             >
  22+ 7793             >                // dummy db directives used to calculate length of namec
  22+ 7793 49 4E 54 45 >                db      "INTERPRET"
  22+ 7797 52 50 52 45 >
  22+ 779B 54          >
  22+ 779C             >len_NFA         defl    $ - temp_NFA
  22+ 779C             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  22+ 7793             >
  22+ 7793 89          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  22+ 7794 49 4E 54 45 >                db      "INTERPRET"               // name string in 7-bit ascii, but
  22+ 7798 52 50 52 45 >
  22+ 779C 54          >
  22+ 779D             >                org     $-1                 // alter last byte of Name just above to set
  22+ 779C D4          >                db      {b $} | END_BIT     // msb as name end
  22+ 779D             >
  22+ 779D 5A 77       >                dw      last_NFA            // Link to previous definition Name
  22+ 779F             >INTERPRET:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
  22+ 779F 56 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
  22+ 77A1             >                else
  22+ 77A1 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
  22+ 77A1             >                endif           ; ok        // for other definitions it "points" the correct handler
  22+ 77A1             >                // Use of "; ok" to suppress "warning[fwdref]"
  22+ 77A1             >
  22+ 77A1             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  23+ 77A1
  24+ 77A1              Interpret_Begin:                                        // begin
  25+ 77A1 B1 75                        dw          LFIND                       //      -find
  26+ 77A3                                                                      //      if
  27+ 77A3 E3 63                        dw          ZBRANCH
  28+ 77A5 1A 00                        dw          Interpret_Else_1 - $
  29+ 77A7 1C 6E 6B 6B                  dw              STATE, FETCH, LESS      //          state @ <
  29+ 77AB 32 6F
  30+ 77AD                                                                      //          if
  31+ 77AD E3 63                        dw              ZBRANCH
  32+ 77AF 08 00                        dw              Interpret_Else_2 - $
  33+ 77B1 2A 71                        dw                  COMPILE_XT          //              compile,
  34+ 77B3                                                                      //          else
  35+ 77B3 CC 63                        dw              BRANCH
  36+ 77B5 06 00                        dw              Interpret_Endif_2 - $
  37+ 77B7              Interpret_Else_2:
  38+ 77B7 BE 63 7E 6C                  dw                  EXECUTE, NOOP       //              execute nooop
  39+ 77BB              Interpret_Endif_2:                                      //          endif
  40+ 77BB                                                                      //      else
  41+ 77BB CC 63                        dw          BRANCH
  42+ 77BD 1A 00                        dw          Interpret_Endif_1 - $
  43+ 77BF              Interpret_Else_1:
  44+ 77BF B0 6E 6B 75                  dw              HERE, NUMBER            //          here number
  45+ 77C3 2F 6E 6B 6B                  dw              DPL, FETCH, ONE_PLUS    //          dpl @ 1+
  45+ 77C7 19 6A
  46+ 77C9                                                                      //          if
  47+ 77C9 E3 63                        dw              ZBRANCH
  48+ 77CB 08 00                        dw              Interpret_Else_3 - $
  49+ 77CD              //              dw                  NMODE, FETCH        //              nmode @
  50+ 77CD              //                                                      //              if
  51+ 77CD              //              dw                  ZBRANCH
  52+ 77CD              //              dw                  Interpret_Endif_4 - $
  53+ 77CD              //              dw                      ONE, ZERO       //                  1 0
  54+ 77CD              //              dw                      TWO_DROP        //                  2drop
  55+ 77CD              //Interpret_Endif_4:                                      //              endif
  56+ 77CD F9 76                        dw                  DLITERAL            //              [compile] dliteral
  57+ 77CF                                                                      //          else
  58+ 77CF CC 63                        dw              BRANCH
  59+ 77D1 06 00                        dw              Interpret_Endif_3 - $
  60+ 77D3              Interpret_Else_3:
  61+ 77D3 A3 6A                        dw                  DROP                //              drop
  62+ 77D5 DC 76                        dw                  LITERAL             //              [compile]  literal
  63+ 77D7              Interpret_Endif_3:                                      //          endif
  64+ 77D7              Interpret_Endif_1:                                      //      endif
  65+ 77D7 63 77                        dw          QSTACK                      //      ?stack
  66+ 77D9 1F 67                        dw          QTERMINAL                   //      ?terminal
  67+ 77DB                                                                      //      if
  68+ 77DB E3 63                        dw          ZBRANCH
  69+ 77DD 04 00                        dw          Interpret_Endif_5 - $
  70+ 77DF D9 75                        dw              CABORT                  //          (abort)
  71+ 77E1              Interpret_Endif_5:                                      //      endif
  72+ 77E1 CC 63                        dw      BRANCH
  73+ 77E3 BE FF                        dw      Interpret_Begin - $
  74+ 77E5 52 69                        dw      EXIT                            // ;
  75+ 77E7
  76+ 77E7              //  ______________________________________________________________________
  77+ 77E7              //
  78+ 77E7              // vocabulary   -- cccc     ( compile time )
  79+ 77E7              // Defining word used in the form   VOCABULARY cccc
  80+ 77E7              // creates the word  cccc  that gives the name to the vocabulary.
  81+ 77E7              // Giving  cccc  makes the vocabulary CONTEXT so its words are executed first
  82+ 77E7              // Giving  cccc DEFINITIONS makes  the vocabulary  CURRENT
  83+ 77E7              // so new definitions can be inserted in that vocabulary.
  84+ 77E7                              Colon_Def VOCABULARY, "VOCABULARY", is_normal
  84+ 77E7             >                New_Def  VOCABULARY, "VOCABULARY", Enter_Ptr, is_normal ; ok
  84+ 77E7             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  84+ 77E7             >
  84+ 77E7             >                // dummy db directives used to calculate length of namec
  84+ 77E7 56 4F 43 41 >                db      "VOCABULARY"
  84+ 77EB 42 55 4C 41 >
  84+ 77EF 52 59       >
  84+ 77F1             >len_NFA         defl    $ - temp_NFA
  84+ 77F1             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  84+ 77E7             >
  84+ 77E7 8A          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  84+ 77E8 56 4F 43 41 >                db      "VOCABULARY"               // name string in 7-bit ascii, but
  84+ 77EC 42 55 4C 41 >
  84+ 77F0 52 59       >
  84+ 77F2             >                org     $-1                 // alter last byte of Name just above to set
  84+ 77F1 D9          >                db      {b $} | END_BIT     // msb as name end
  84+ 77F2             >
  84+ 77F2 93 77       >                dw      last_NFA            // Link to previous definition Name
  84+ 77F4             >VOCABULARY:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
  84+ 77F4 56 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
  84+ 77F6             >                else
  84+ 77F6 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
  84+ 77F6             >                endif           ; ok        // for other definitions it "points" the correct handler
  84+ 77F6             >                // Use of "; ok" to suppress "warning[fwdref]"
  84+ 77F6             >
  84+ 77F6             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  85+ 77F6
  86+ 77F6 DD 71                        dw      CBUILDS
  87+ 77F8
  88+ 77F8 A9 63 81 A0                  dw      LIT, $A081, COMMA       // $81A0 ,
  88+ 77FC CC 6E
  89+ 77FE 11 6E 6B 6B                  dw      CURRENT, FETCH          // current @
  90+ 7802 4B 6A CC 6E                  dw      CELL_MINUS, COMMA       // cell- ,
  91+ 7806 B0 6E                        dw      HERE                    // here
  92+ 7808 9D 6D 6B 6B                  dw      VOC_LINK, FETCH, COMMA  // voc-link @ ,
  92+ 780C CC 6E
  93+ 780E 9D 6D 78 6B                  dw      VOC_LINK, STORE         // voc-link !
  94+ 7812
  95+ 7812 ED 71                        dw      DOES_TO                 // does>
  96+ 7814              Vocabulary_Does:
  97+ 7814 41 6A                        dw      CELL_PLUS               // cell+
  98+ 7816 04 6E 78 6B                  dw      CONTEXT, STORE          // context !
  99+ 781A 52 69                        dw      EXIT                    // ;
 100+ 781C
 101+ 781C              //  ______________________________________________________________________
 102+ 781C              //
 103+ 781C              // forth        --
 104+ 781C              // Name of the first vocabulary.
 105+ 781C              // It makes FORTH the CONTEXT vocabulary.
 106+ 781C              // Until new user vocabulary are defined, new colon-definitions becomes
 107+ 781C              // part of FORTH. It is immediate, so it will executed during the creation
 108+ 781C              // of a colon definition to be able to select the vocabulary.
 109+ 781C
 110+ 781C                              New_Def FORTH, "FORTH", Does_Ptr, is_immediate
 110+ 781C             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 110+ 781C             >
 110+ 781C             >                // dummy db directives used to calculate length of namec
 110+ 781C 46 4F 52 54 >                db      "FORTH"
 110+ 7820 48          >
 110+ 7821             >len_NFA         defl    $ - temp_NFA
 110+ 7821             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 110+ 781C             >
 110+ 781C C5          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 110+ 781D 46 4F 52 54 >                db      "FORTH"               // name string in 7-bit ascii, but
 110+ 7821 48          >
 110+ 7822             >                org     $-1                 // alter last byte of Name just above to set
 110+ 7821 C8          >                db      {b $} | END_BIT     // msb as name end
 110+ 7822             >
 110+ 7822 E7 77       >                dw      last_NFA            // Link to previous definition Name
 110+ 7824             >FORTH:          if Does_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 110+ 7824 F9 71       >                dw      Does_Ptr ; ok        // for primitive definitions  actual code
 110+ 7826             >                else
 110+ 7826 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 110+ 7826             >                endif           ; ok        // for other definitions it "points" the correct handler
 110+ 7826             >                // Use of "; ok" to suppress "warning[fwdref]"
 110+ 7826             >
 110+ 7826             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 111+ 7826 14 78                        dw      Vocabulary_Does
 112+ 7828 81 A0                        db      $81, $A0
 113+ 782A              Forth_Latest_Ptr:
 114+ 782A 96 87                        dw      Here_Dictionary // Fence_Word // Latest_Definition
 115+ 782C              Voclink_Ptr:
 116+ 782C 00 00                        dw      0
 117+ 782E              // Any new vocabulary is structured as follow:
 118+ 782E              // PFA+0 points to DOES> part of VOCABULARY to perform CELL+ CONTEXT !
 119+ 782E              // PFA+2 is 81,A0 i.e. a null-word used as LATEST in the new vocabulary
 120+ 782E              // PFA+4 always contains the LATEST word of this VOCABULARY.
 121+ 782E              //       at creations it points to the null-word of its parent vocabulary
 122+ 782E              //       that is normally FORTH, For example ASSEMBLER points FORTH's null-word
 123+ 782E              // PFA+6 is the pointer that builds up the vocabulary linked list.
 124+ 782E              //       FORTH has 0 here to signal the end of the list and user's variable
 125+ 782E              //       VOC-LINK points to PFA+6 of the newest vocabulary created.
 126+ 782E              //       While FORTH is the only vocabulary, VOC-LINK points to FORTH's PFA+6
 127+ 782E              //       When ASSEMBLER is created, its PFA+6 points to FORTH's PFA+6, and so on
 128+ 782E
 129+ 782E              //  ______________________________________________________________________
 130+ 782E              //
 131+ 782E              // definitions  --
 132+ 782E              // Used in the form  cccc DEFINITIONS
 133+ 782E              // set the CURRENT vocabulary at CONTEXT to insert new definitions in
 134+ 782E              // vocabulary cccc.
 135+ 782E                              Colon_Def DEFINITIONS, "DEFINITIONS", is_normal
 135+ 782E             >                New_Def  DEFINITIONS, "DEFINITIONS", Enter_Ptr, is_normal ; ok
 135+ 782E             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 135+ 782E             >
 135+ 782E             >                // dummy db directives used to calculate length of namec
 135+ 782E 44 45 46 49 >                db      "DEFINITIONS"
 135+ 7832 4E 49 54 49 >
 135+ 7836 4F 4E 53    >
 135+ 7839             >len_NFA         defl    $ - temp_NFA
 135+ 7839             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 135+ 782E             >
 135+ 782E 8B          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 135+ 782F 44 45 46 49 >                db      "DEFINITIONS"               // name string in 7-bit ascii, but
 135+ 7833 4E 49 54 49 >
 135+ 7837 4F 4E 53    >
 135+ 783A             >                org     $-1                 // alter last byte of Name just above to set
 135+ 7839 D3          >                db      {b $} | END_BIT     // msb as name end
 135+ 783A             >
 135+ 783A 1C 78       >                dw      last_NFA            // Link to previous definition Name
 135+ 783C             >DEFINITIONS:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 135+ 783C 56 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 135+ 783E             >                else
 135+ 783E ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 135+ 783E             >                endif           ; ok        // for other definitions it "points" the correct handler
 135+ 783E             >                // Use of "; ok" to suppress "warning[fwdref]"
 135+ 783E             >
 135+ 783E             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 136+ 783E 04 6E 6B 6B                  dw      CONTEXT, FETCH          // context @
 137+ 7842 11 6E 78 6B                  dw      CURRENT, STORE          // current !
 138+ 7846 52 69                        dw      EXIT                    // ;
 139+ 7848
 140+ 7848              //  ______________________________________________________________________
 141+ 7848              //
 142+ 7848              // (            -- cccc )
 143+ 7848              // the following text is interpreted as a comment until a closing )
 144+ 7848                              Colon_Def COMMENT_BRAKET, "(", is_immediate
 144+ 7848             >                New_Def  COMMENT_BRAKET, "(", Enter_Ptr, is_immediate ; ok
 144+ 7848             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 144+ 7848             >
 144+ 7848             >                // dummy db directives used to calculate length of namec
 144+ 7848 28          >                db      "("
 144+ 7849             >len_NFA         defl    $ - temp_NFA
 144+ 7849             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 144+ 7848             >
 144+ 7848 C1          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 144+ 7849 28          >                db      "("               // name string in 7-bit ascii, but
 144+ 784A             >                org     $-1                 // alter last byte of Name just above to set
 144+ 7849 A8          >                db      {b $} | END_BIT     // msb as name end
 144+ 784A             >
 144+ 784A 2E 78       >                dw      last_NFA            // Link to previous definition Name
 144+ 784C             >COMMENT_BRAKET:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 144+ 784C 56 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 144+ 784E             >                else
 144+ 784E ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 144+ 784E             >                endif           ; ok        // for other definitions it "points" the correct handler
 144+ 784E             >                // Use of "; ok" to suppress "warning[fwdref]"
 144+ 784E             >
 144+ 784E             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 145+ 784E A9 63 29 00                  dw      LIT, ")"                // [char] )
 146+ 7852 FF 73 A3 6A                  dw      WORD, DROP              // word drop
 147+ 7856 52 69                        dw      EXIT                    // ;
 148+ 7858
 149+ 7858              //  ______________________________________________________________________
 150+ 7858              //
 151+ 7858              // quit         --
 152+ 7858              // \ Erase the return-stack, stop any compilation and give controlo to the console. No message is issued.
 153+ 7858                              Colon_Def QUIT, "QUIT", is_normal
 153+ 7858             >                New_Def  QUIT, "QUIT", Enter_Ptr, is_normal ; ok
 153+ 7858             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 153+ 7858             >
 153+ 7858             >                // dummy db directives used to calculate length of namec
 153+ 7858 51 55 49 54 >                db      "QUIT"
 153+ 785C             >len_NFA         defl    $ - temp_NFA
 153+ 785C             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 153+ 7858             >
 153+ 7858 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 153+ 7859 51 55 49 54 >                db      "QUIT"               // name string in 7-bit ascii, but
 153+ 785D             >                org     $-1                 // alter last byte of Name just above to set
 153+ 785C D4          >                db      {b $} | END_BIT     // msb as name end
 153+ 785D             >
 153+ 785D 48 78       >                dw      last_NFA            // Link to previous definition Name
 153+ 785F             >QUIT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 153+ 785F 56 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 153+ 7861             >                else
 153+ 7861 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 153+ 7861             >                endif           ; ok        // for other definitions it "points" the correct handler
 153+ 7861             >                // Use of "; ok" to suppress "warning[fwdref]"
 153+ 7861             >
 153+ 7861             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 154+ 7861
 155+ 7861 87 6E 6B 6B                  dw      SOURCE_ID, FETCH        // source-id @
 156+ 7865 64 67 A3 6A                  dw      F_CLOSE, DROP           // f_close drop
 157+ 7869 D1 6C 87 6E                  dw      ZERO, SOURCE_ID, STORE  // 0 source-id !
 157+ 786D 78 6B
 158+ 786F D1 6C D0 6D                  dw      ZERO, BLK, STORE        // 0 blk !
 158+ 7873 78 6B
 159+ 7875 36 71                        dw      SQUARED_OPEN            // [compile] [
 160+ 7877                                                              // begin
 161+ 7877              Quit_Begin:
 162+ 7877 5B 6D 6B 6B                  dw      R0, FETCH, RPSTORE      //      r0 @ rp!
 162+ 787B 43 69
 163+ 787D 33 68                        dw      CR                      //      cr
 164+ 787F 7F 73                        dw      QUERY                   //      query
 165+ 7881              Next_Breakpoint_1:
 166+ 7881 9F 77                        dw      INTERPRET               //      interpret
 167+ 7883 1C 6E 6B 6B                  dw      STATE, FETCH, ZEQUAL    //      state @ 0=
 167+ 7887 B5 69
 168+ 7889                                                              //      if
 169+ 7889 E3 63                        dw      ZBRANCH
 170+ 788B 07 00                        dw      Quit_Endif - $
 171+ 788D 4E 74                        dw          C_DOT_QUOTE
 172+ 788F 02 6F 6B                     db          2, "ok"             //          .( ok)
 173+ 7892              Quit_Endif:                                     //      else
 174+ 7892                                                              // again
 175+ 7892 CC 63                        dw      BRANCH
 176+ 7894 E3 FF                        dw      Quit_Begin - $
 177+ 7896 52 69                        dw      EXIT                    // ;
 178+ 7898
 179+ 7898              //  ______________________________________________________________________
 180+ 7898              //
 181+ 7898              // abort        --
 182+ 7898                              Colon_Def ABORT, "ABORT", is_normal
 182+ 7898             >                New_Def  ABORT, "ABORT", Enter_Ptr, is_normal ; ok
 182+ 7898             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 182+ 7898             >
 182+ 7898             >                // dummy db directives used to calculate length of namec
 182+ 7898 41 42 4F 52 >                db      "ABORT"
 182+ 789C 54          >
 182+ 789D             >len_NFA         defl    $ - temp_NFA
 182+ 789D             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 182+ 7898             >
 182+ 7898 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 182+ 7899 41 42 4F 52 >                db      "ABORT"               // name string in 7-bit ascii, but
 182+ 789D 54          >
 182+ 789E             >                org     $-1                 // alter last byte of Name just above to set
 182+ 789D D4          >                db      {b $} | END_BIT     // msb as name end
 182+ 789E             >
 182+ 789E 58 78       >                dw      last_NFA            // Link to previous definition Name
 182+ 78A0             >ABORT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 182+ 78A0 56 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 182+ 78A2             >                else
 182+ 78A2 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 182+ 78A2             >                endif           ; ok        // for other definitions it "points" the correct handler
 182+ 78A2             >                // Use of "; ok" to suppress "warning[fwdref]"
 182+ 78A2             >
 182+ 78A2             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 183+ 78A2 53 6D 6B 6B                  dw      S0, FETCH, SPSTORE      // s0 @ sp!
 183+ 78A6 29 69
 184+ 78A8 99 71                        dw      DECIMAL                 // decimal
 185+ 78AA 24 78                        dw      FORTH                   // [compile] forth
 186+ 78AC 3C 78                        dw      DEFINITIONS             // definitions
 187+ 78AE              Autoexec_Ptr:
 188+ 78AE B6 85                        dw      AUTOEXEC                // autoexec, patched to noop
 189+ 78B0 5F 78                        dw      QUIT                    // quit
 190+ 78B2 52 69                        dw      EXIT                    // ;
 191+ 78B4
 192+ 78B4              //  ______________________________________________________________________
 193+ 78B4              //
 194+ 78B4              // warm         --
 195+ 78B4                              Colon_Def WARM, "WARM", is_normal
 195+ 78B4             >                New_Def  WARM, "WARM", Enter_Ptr, is_normal ; ok
 195+ 78B4             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 195+ 78B4             >
 195+ 78B4             >                // dummy db directives used to calculate length of namec
 195+ 78B4 57 41 52 4D >                db      "WARM"
 195+ 78B8             >len_NFA         defl    $ - temp_NFA
 195+ 78B8             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 195+ 78B4             >
 195+ 78B4 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 195+ 78B5 57 41 52 4D >                db      "WARM"               // name string in 7-bit ascii, but
 195+ 78B9             >                org     $-1                 // alter last byte of Name just above to set
 195+ 78B8 CD          >                db      {b $} | END_BIT     // msb as name end
 195+ 78B9             >
 195+ 78B9 98 78       >                dw      last_NFA            // Link to previous definition Name
 195+ 78BB             >WARM:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 195+ 78BB 56 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 195+ 78BD             >                else
 195+ 78BD ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 195+ 78BD             >                endif           ; ok        // for other definitions it "points" the correct handler
 195+ 78BD             >                // Use of "; ok" to suppress "warning[fwdref]"
 195+ 78BD             >
 195+ 78BD             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 196+ 78BD 8E 7C                        dw      BLK_INIT                // blk-init
 197+ 78BF 6A 84                        dw      SPLASH                  // splash
 198+ 78C1 A9 63 07 00                  dw      LIT, 7, EMIT            // 7 emit
 198+ 78C5 A4 6F
 199+ 78C7 A0 78                        dw      ABORT                   // abort
 200+ 78C9 52 69                        dw      EXIT                    // exit
 201+ 78CB
 202+ 78CB              //  ______________________________________________________________________
 203+ 78CB              //
 204+ 78CB              // cold         --
 205+ 78CB                              Colon_Def COLD, "COLD", is_normal
 205+ 78CB             >                New_Def  COLD, "COLD", Enter_Ptr, is_normal ; ok
 205+ 78CB             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 205+ 78CB             >
 205+ 78CB             >                // dummy db directives used to calculate length of namec
 205+ 78CB 43 4F 4C 44 >                db      "COLD"
 205+ 78CF             >len_NFA         defl    $ - temp_NFA
 205+ 78CF             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 205+ 78CB             >
 205+ 78CB 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 205+ 78CC 43 4F 4C 44 >                db      "COLD"               // name string in 7-bit ascii, but
 205+ 78D0             >                org     $-1                 // alter last byte of Name just above to set
 205+ 78CF C4          >                db      {b $} | END_BIT     // msb as name end
 205+ 78D0             >
 205+ 78D0 B4 78       >                dw      last_NFA            // Link to previous definition Name
 205+ 78D2             >COLD:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 205+ 78D2 56 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 205+ 78D4             >                else
 205+ 78D4 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 205+ 78D4             >                endif           ; ok        // for other definitions it "points" the correct handler
 205+ 78D4             >                // Use of "; ok" to suppress "warning[fwdref]"
 205+ 78D4             >
 205+ 78D4             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 206+ 78D4 A9 63 78 63                  dw      LIT, S0_origin          // [ hex $12 +origin ] Literal
 207+ 78D8 A9 63 94 63                  dw      LIT, USER_Pointer       // [ hex $3E +origin ] literal
 208+ 78DC 6B 6B                        dw      FETCH                   // @
 209+ 78DE A9 63 06 00                  dw      LIT, 6, PLUS            // 6 +
 209+ 78E2 F8 69
 210+ 78E4 A9 63 14 00                  dw      LIT, 20                 // 20
 211+ 78E8 42 68                        dw      CMOVE
 212+ 78EA A9 63 72 63                  dw      LIT, Latest_origin      // [ hex 0C +origin ] literal
 213+ 78EE 6B 6B                        dw      FETCH                   // @
 214+ 78F0 A9 63 2A 78                  dw      LIT, Forth_Latest_Ptr   // [ ' forth >body 4 + ] Literal
 215+ 78F4 78 6B                        dw      STORE                   // !
 216+ 78F6 D1 6C C7 6D                  dw      ZERO, NMODE, STORE      // 0 nmode !
 216+ 78FA 78 6B
 217+ 78FC A8 6D 6B 6B                  dw      FIRST, FETCH, DUP       // first @ dup
 217+ 7900 D8 6A
 218+ 7902 5B 6E 78 6B                  dw      USE, STORE              // use !
 219+ 7906 65 6E 78 6B                  dw      PREV, STORE             // prev !
 220+ 790A A9 63 04 00                  dw      LIT, 4, PLACE, STORE    // 4 place !
 220+ 790E 78 6E 78 6B
 221+ 7912              //              dw      LIT, 8
 222+ 7912              //              dw      LIT, FLAGS2, CSTORE     // 8 5C6A c!
 223+ 7912 E1 6C A6 6E                  dw      TWO, HP, STORE          // 2 hp !
 223+ 7916 78 6B
 224+ 7918 BB 78        Warm_Start:     dw      WARM
 225+ 791A D2 78        Cold_Start:     dw      COLD
 226+ 791C 52 69                        dw      EXIT
 227+ 791E
 228+ 791E              //  ______________________________________________________________________
 229+ 791E              WarmRoutine:
 230+ 791E              ColdRoutine:
 231+ 791E DD 21 98 63                  ld      ix, Next_Ptr
 232+ 7922 D9                           exx
 233+ 7923 E5                           push    hl
 234+ 7924 D9                           exx
 235+ 7925
 236+ 7925 ED 73 6E 63                  ld      (SP_Basic), sp
 237+ 7929 ED 7B 78 63                  ld      sp, (S0_origin)
 238+ 792D              //              nop
 239+ 792D 2A 7A 63                     ld      hl, (R0_origin)
 240+ 7930              //              nop
 241+ 7930                              ldrphl
 241+ 7930 22 96 63    >                ld      (RP_Pointer),hl
 242+ 7933 01 18 79                     ld      bc, Warm_Start
 243+ 7936 38 02                        jr      c, Warm_Skip
 244+ 7938 03                           inc     bc
 245+ 7939 03                           inc     bc
 246+ 793A              Warm_Skip:
 247+ 793A                              next
 247+ 793A DD E9       >                jp      (ix)
 248+ 793C
 249+ 793C              //  ______________________________________________________________________
 250+ 793C              //
 251+ 793C              // basic        --
 252+ 793C                              New_Def BASIC, "BASIC", is_code, is_normal
 252+ 793C             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 252+ 793C             >
 252+ 793C             >                // dummy db directives used to calculate length of namec
 252+ 793C 42 41 53 49 >                db      "BASIC"
 252+ 7940 43          >
 252+ 7941             >len_NFA         defl    $ - temp_NFA
 252+ 7941             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 252+ 793C             >
 252+ 793C 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 252+ 793D 42 41 53 49 >                db      "BASIC"               // name string in 7-bit ascii, but
 252+ 7941 43          >
 252+ 7942             >                org     $-1                 // alter last byte of Name just above to set
 252+ 7941 C3          >                db      {b $} | END_BIT     // msb as name end
 252+ 7942             >
 252+ 7942 CB 78       >                dw      last_NFA            // Link to previous definition Name
 252+ 7944             >BASIC:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 252+ 7944 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
 252+ 7944             >                else
 252+ 7944 46 79       >                dw      $ + 2   ; ok        // is pointed by CFA
 252+ 7946             >                endif           ; ok        // for other definitions it "points" the correct handler
 252+ 7946             >                // Use of "; ok" to suppress "warning[fwdref]"
 252+ 7946             >
 252+ 7946             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 253+ 7946 C1                           pop     bc
 254+ 7947 21 00 00                     ld      hl, 0
 255+ 794A 39                           add     hl, sp
 256+ 794B ED 7B 6E 63                  ld      sp, (SP_Basic)
 257+ 794F              //              nop
 258+ 794F 22 6E 63                     ld      (SP_Basic),hl
 259+ 7952 D9                           exx
 260+ 7953 E1                           pop     hl
 261+ 7954 D9                           exx
 262+ 7955 C9                           ret     // to Basic
 263+ 7956
 264+ 7956              //  ______________________________________________________________________
 265+ 7956              //
 266+ 7956              // +-           n1 n2 -- n3
 267+ 7956              // leaves n1 with the sign of n2 as n3.
 268+ 7956                              Colon_Def PLUS_MINUS, "+-", is_normal
 268+ 7956             >                New_Def  PLUS_MINUS, "+-", Enter_Ptr, is_normal ; ok
 268+ 7956             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 268+ 7956             >
 268+ 7956             >                // dummy db directives used to calculate length of namec
 268+ 7956 2B 2D       >                db      "+-"
 268+ 7958             >len_NFA         defl    $ - temp_NFA
 268+ 7958             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 268+ 7956             >
 268+ 7956 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 268+ 7957 2B 2D       >                db      "+-"               // name string in 7-bit ascii, but
 268+ 7959             >                org     $-1                 // alter last byte of Name just above to set
 268+ 7958 AD          >                db      {b $} | END_BIT     // msb as name end
 268+ 7959             >
 268+ 7959 3C 79       >                dw      last_NFA            // Link to previous definition Name
 268+ 795B             >PLUS_MINUS:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 268+ 795B 56 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 268+ 795D             >                else
 268+ 795D ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 268+ 795D             >                endif           ; ok        // for other definitions it "points" the correct handler
 268+ 795D             >                // Use of "; ok" to suppress "warning[fwdref]"
 268+ 795D             >
 268+ 795D             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 269+ 795D D0 69                        dw      ZLESS                   // 0<
 270+ 795F                                                              // if
 271+ 795F E3 63                        dw      ZBRANCH
 272+ 7961 04 00                        dw      Plus_Minus_Endif - $
 273+ 7963 63 6A                        dw          MINUS               //      minus
 274+ 7965              Plus_Minus_Endif:                               // endif
 275+ 7965 52 69                        dw      EXIT                    // ;
 276+ 7967
 277+ 7967              //  ______________________________________________________________________
 278+ 7967              //
 279+ 7967              // d+-          d1 n -- d2
 280+ 7967              // leaves d1 with the sign of n as d2.
 281+ 7967                              Colon_Def DPLUS_MINUS, "D+-", is_normal
 281+ 7967             >                New_Def  DPLUS_MINUS, "D+-", Enter_Ptr, is_normal ; ok
 281+ 7967             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 281+ 7967             >
 281+ 7967             >                // dummy db directives used to calculate length of namec
 281+ 7967 44 2B 2D    >                db      "D+-"
 281+ 796A             >len_NFA         defl    $ - temp_NFA
 281+ 796A             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 281+ 7967             >
 281+ 7967 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 281+ 7968 44 2B 2D    >                db      "D+-"               // name string in 7-bit ascii, but
 281+ 796B             >                org     $-1                 // alter last byte of Name just above to set
 281+ 796A AD          >                db      {b $} | END_BIT     // msb as name end
 281+ 796B             >
 281+ 796B 56 79       >                dw      last_NFA            // Link to previous definition Name
 281+ 796D             >DPLUS_MINUS:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 281+ 796D 56 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 281+ 796F             >                else
 281+ 796F ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 281+ 796F             >                endif           ; ok        // for other definitions it "points" the correct handler
 281+ 796F             >                // Use of "; ok" to suppress "warning[fwdref]"
 281+ 796F             >
 281+ 796F             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 282+ 796F D0 69                        dw      ZLESS                   // 0<
 283+ 7971                                                              // if
 284+ 7971 E3 63                        dw      ZBRANCH
 285+ 7973 04 00                        dw      DPlus_Minus_Endif - $
 286+ 7975 79 6A                        dw          DMINUS              //      dminus
 287+ 7977              DPlus_Minus_Endif:                              // endif
 288+ 7977 52 69                        dw      EXIT                    // ;
 289+ 7979
 290+ 7979              //  ______________________________________________________________________
 291+ 7979              //
 292+ 7979              // abs          n1 -- n2
 293+ 7979                              Colon_Def ABS_OP, "ABS", is_normal
 293+ 7979             >                New_Def  ABS_OP, "ABS", Enter_Ptr, is_normal ; ok
 293+ 7979             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 293+ 7979             >
 293+ 7979             >                // dummy db directives used to calculate length of namec
 293+ 7979 41 42 53    >                db      "ABS"
 293+ 797C             >len_NFA         defl    $ - temp_NFA
 293+ 797C             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 293+ 7979             >
 293+ 7979 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 293+ 797A 41 42 53    >                db      "ABS"               // name string in 7-bit ascii, but
 293+ 797D             >                org     $-1                 // alter last byte of Name just above to set
 293+ 797C D3          >                db      {b $} | END_BIT     // msb as name end
 293+ 797D             >
 293+ 797D 67 79       >                dw      last_NFA            // Link to previous definition Name
 293+ 797F             >ABS_OP:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 293+ 797F 56 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 293+ 7981             >                else
 293+ 7981 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 293+ 7981             >                endif           ; ok        // for other definitions it "points" the correct handler
 293+ 7981             >                // Use of "; ok" to suppress "warning[fwdref]"
 293+ 7981             >
 293+ 7981             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 294+ 7981 D8 6A                        dw      DUP                     // dup
 295+ 7983 5B 79                        dw      PLUS_MINUS              // +-
 296+ 7985 52 69                        dw      EXIT                    // ;
 297+ 7987
 298+ 7987              //  ______________________________________________________________________
 299+ 7987              //
 300+ 7987              // dabs         d1 -- d2
 301+ 7987                              Colon_Def DABS, "DABS", is_normal
 301+ 7987             >                New_Def  DABS, "DABS", Enter_Ptr, is_normal ; ok
 301+ 7987             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 301+ 7987             >
 301+ 7987             >                // dummy db directives used to calculate length of namec
 301+ 7987 44 41 42 53 >                db      "DABS"
 301+ 798B             >len_NFA         defl    $ - temp_NFA
 301+ 798B             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 301+ 7987             >
 301+ 7987 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 301+ 7988 44 41 42 53 >                db      "DABS"               // name string in 7-bit ascii, but
 301+ 798C             >                org     $-1                 // alter last byte of Name just above to set
 301+ 798B D3          >                db      {b $} | END_BIT     // msb as name end
 301+ 798C             >
 301+ 798C 79 79       >                dw      last_NFA            // Link to previous definition Name
 301+ 798E             >DABS:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 301+ 798E 56 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 301+ 7990             >                else
 301+ 7990 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 301+ 7990             >                endif           ; ok        // for other definitions it "points" the correct handler
 301+ 7990             >                // Use of "; ok" to suppress "warning[fwdref]"
 301+ 7990             >
 301+ 7990             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 302+ 7990 D8 6A                        dw      DUP                     // dup
 303+ 7992 6D 79                        dw      DPLUS_MINUS             // d+-
 304+ 7994 52 69                        dw      EXIT                    // ;
 305+ 7996
 306+ 7996              //  ______________________________________________________________________
 307+ 7996              //
 308+ 7996              // m*           n1 n2 -- d
 309+ 7996              // multiply two integer giving a double
 310+ 7996                              Colon_Def MMUL, "M*", is_normal
 310+ 7996             >                New_Def  MMUL, "M*", Enter_Ptr, is_normal ; ok
 310+ 7996             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 310+ 7996             >
 310+ 7996             >                // dummy db directives used to calculate length of namec
 310+ 7996 4D 2A       >                db      "M*"
 310+ 7998             >len_NFA         defl    $ - temp_NFA
 310+ 7998             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 310+ 7996             >
 310+ 7996 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 310+ 7997 4D 2A       >                db      "M*"               // name string in 7-bit ascii, but
 310+ 7999             >                org     $-1                 // alter last byte of Name just above to set
 310+ 7998 AA          >                db      {b $} | END_BIT     // msb as name end
 310+ 7999             >
 310+ 7999 87 79       >                dw      last_NFA            // Link to previous definition Name
 310+ 799B             >MMUL:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 310+ 799B 56 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 310+ 799D             >                else
 310+ 799D ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 310+ 799D             >                endif           ; ok        // for other definitions it "points" the correct handler
 310+ 799D             >                // Use of "; ok" to suppress "warning[fwdref]"
 310+ 799D             >
 310+ 799D             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 311+ 799D 39 6B 07 69                  dw      TWO_DUP, XOR_OP, TO_R   // 2dup xor >r
 311+ 79A1 80 69
 312+ 79A3 7F 79 CB 6A                  dw      ABS_OP, SWAP            // abs swap
 313+ 79A7 7F 79 75 68                  dw      ABS_OP, UM_MUL          // abs um*
 314+ 79AB 94 69 6D 79                  dw      R_TO, DPLUS_MINUS       // r> d+-
 315+ 79AF 52 69                        dw      EXIT                    // ;
 316+ 79B1
 317+ 79B1              //  ______________________________________________________________________
 318+ 79B1              //
 319+ 79B1              // sm/rem       d n -- q r
 320+ 79B1              // Symmetric division: divides a double into n giving quotient q and remainder r
 321+ 79B1              // the remainder has the sign of d.
 322+ 79B1                              Colon_Def SMDIVM, "SM/REM", is_normal
 322+ 79B1             >                New_Def  SMDIVM, "SM/REM", Enter_Ptr, is_normal ; ok
 322+ 79B1             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 322+ 79B1             >
 322+ 79B1             >                // dummy db directives used to calculate length of namec
 322+ 79B1 53 4D 2F 52 >                db      "SM/REM"
 322+ 79B5 45 4D       >
 322+ 79B7             >len_NFA         defl    $ - temp_NFA
 322+ 79B7             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 322+ 79B1             >
 322+ 79B1 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 322+ 79B2 53 4D 2F 52 >                db      "SM/REM"               // name string in 7-bit ascii, but
 322+ 79B6 45 4D       >
 322+ 79B8             >                org     $-1                 // alter last byte of Name just above to set
 322+ 79B7 CD          >                db      {b $} | END_BIT     // msb as name end
 322+ 79B8             >
 322+ 79B8 96 79       >                dw      last_NFA            // Link to previous definition Name
 322+ 79BA             >SMDIVM:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 322+ 79BA 56 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 322+ 79BC             >                else
 322+ 79BC ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 322+ 79BC             >                endif           ; ok        // for other definitions it "points" the correct handler
 322+ 79BC             >                // Use of "; ok" to suppress "warning[fwdref]"
 322+ 79BC             >
 322+ 79BC             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 323+ 79BC 93 6A 80 69                  dw      OVER, TO_R, TO_R        // over >r >r
 323+ 79C0 80 69
 324+ 79C2 8E 79 A8 69                  dw      DABS, R_OP, ABS_OP      // dabs r abs
 324+ 79C6 7F 79
 325+ 79C8 A6 68                        dw      UMDIVMOD                // um/mod
 326+ 79CA 94 69                        dw      R_TO                    // r>
 327+ 79CC A8 69 07 69                  dw      R_OP, XOR_OP            // r xor
 328+ 79D0 5B 79 CB 6A                  dw      PLUS_MINUS, SWAP        // +- swap
 329+ 79D4 94 69                        dw      R_TO                    // r>
 330+ 79D6 5B 79 CB 6A                  dw      PLUS_MINUS, SWAP        // +- swap
 331+ 79DA 52 69                        dw      EXIT                    // ;
 332+ 79DC
 333+ 79DC              //  ______________________________________________________________________
 334+ 79DC              //
 335+ 79DC              // fm/mod       d n -- q r
 336+ 79DC              // Floored division: divides a double into n giving quotient q and remainder r
 337+ 79DC              // the remainder has the sign of d.
 338+ 79DC                              Colon_Def FMDIVM, "FM/MOD", is_normal
 338+ 79DC             >                New_Def  FMDIVM, "FM/MOD", Enter_Ptr, is_normal ; ok
 338+ 79DC             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 338+ 79DC             >
 338+ 79DC             >                // dummy db directives used to calculate length of namec
 338+ 79DC 46 4D 2F 4D >                db      "FM/MOD"
 338+ 79E0 4F 44       >
 338+ 79E2             >len_NFA         defl    $ - temp_NFA
 338+ 79E2             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 338+ 79DC             >
 338+ 79DC 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 338+ 79DD 46 4D 2F 4D >                db      "FM/MOD"               // name string in 7-bit ascii, but
 338+ 79E1 4F 44       >
 338+ 79E3             >                org     $-1                 // alter last byte of Name just above to set
 338+ 79E2 C4          >                db      {b $} | END_BIT     // msb as name end
 338+ 79E3             >
 338+ 79E3 B1 79       >                dw      last_NFA            // Link to previous definition Name
 338+ 79E5             >FMDIVM:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 338+ 79E5 56 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 338+ 79E7             >                else
 338+ 79E7 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 338+ 79E7             >                endif           ; ok        // for other definitions it "points" the correct handler
 338+ 79E7             >                // Use of "; ok" to suppress "warning[fwdref]"
 338+ 79E7             >
 338+ 79E7             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 339+ 79E7 D8 6A 80 69                  dw      DUP, TO_R               // dup >r
 340+ 79EB BA 79                        dw      SMDIVM
 341+ 79ED 93 6A D8 6A                  dw      OVER, DUP
 342+ 79F1 B5 69 B5 69                  dw      ZEQUAL, ZEQUAL
 343+ 79F5 CB 6A D0 69                  dw      SWAP, ZLESS
 344+ 79F9 A8 69 D0 69                  dw      R_OP, ZLESS
 345+ 79FD 07 69 E2 68                  dw      XOR_OP, AND_OP
 346+ 7A01 E3 63                        dw      ZBRANCH
 347+ 7A03 10 00                        dw      Fm_Mod_Else - $
 348+ 7A05 25 6A                        dw          ONE_SUBTRACT
 349+ 7A07 CB 6A 94 69                  dw          SWAP, R_TO
 350+ 7A0B F8 69 CB 6A                  dw          PLUS, SWAP
 351+ 7A0F CC 63                        dw      BRANCH
 352+ 7A11 06 00                        dw      Fm_Mod_Endif - $
 353+ 7A13              Fm_Mod_Else:
 354+ 7A13 94 69 A3 6A                  dw          R_TO, DROP
 355+ 7A17              Fm_Mod_Endif:
 356+ 7A17 52 69                        dw      EXIT
 357+ 7A19              //              dw      TWO_DUP                 // 2dup
 358+ 7A19              //              dw      XOR_OP, TO_R, TO_R      // xor >r >r
 359+ 7A19              //              dw      DABS, R_OP, ABS_OP      // dabs r abs
 360+ 7A19              //              dw      UMDIVMOD                // um/mod
 361+ 7A19              //              dw      SWAP                    // swap
 362+ 7A19              //              dw      II, ZLESS               // i'
 363+ 7A19              //              dw      ONE, AND_OP, PLUS       // 0< 1 and +
 364+ 7A19              //              dw      R_TO                    // r>
 365+ 7A19              //              dw      PLUS_MINUS, SWAP        // +- swap
 366+ 7A19              //              dw      R_OP                    // r@
 367+ 7A19              //              dw      ZLESS                   // i'
 368+ 7A19              //              dw      ONE, AND_OP, PLUS       // 0< 1 and +
 369+ 7A19              //              dw      R_TO                    // r>
 370+ 7A19              //              dw      PLUS_MINUS              // +- swap
 371+ 7A19              //              dw      EXIT                    // ;
 372+ 7A19
 373+ 7A19              //  ______________________________________________________________________
 374+ 7A19              //
 375+ 7A19              // m/mod        d n -- q r
 376+ 7A19              // multiply two integer giving a double
 377+ 7A19                              Colon_Def MDIVM, "M/MOD", is_normal
 377+ 7A19             >                New_Def  MDIVM, "M/MOD", Enter_Ptr, is_normal ; ok
 377+ 7A19             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 377+ 7A19             >
 377+ 7A19             >                // dummy db directives used to calculate length of namec
 377+ 7A19 4D 2F 4D 4F >                db      "M/MOD"
 377+ 7A1D 44          >
 377+ 7A1E             >len_NFA         defl    $ - temp_NFA
 377+ 7A1E             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 377+ 7A19             >
 377+ 7A19 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 377+ 7A1A 4D 2F 4D 4F >                db      "M/MOD"               // name string in 7-bit ascii, but
 377+ 7A1E 44          >
 377+ 7A1F             >                org     $-1                 // alter last byte of Name just above to set
 377+ 7A1E C4          >                db      {b $} | END_BIT     // msb as name end
 377+ 7A1F             >
 377+ 7A1F DC 79       >                dw      last_NFA            // Link to previous definition Name
 377+ 7A21             >MDIVM:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 377+ 7A21 56 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 377+ 7A23             >                else
 377+ 7A23 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 377+ 7A23             >                endif           ; ok        // for other definitions it "points" the correct handler
 377+ 7A23             >                // Use of "; ok" to suppress "warning[fwdref]"
 377+ 7A23             >
 377+ 7A23             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 378+ 7A23 BA 79                        dw      SMDIVM
 379+ 7A25 52 69                        dw      EXIT                    // ;
 380+ 7A27
 381+ 7A27              //  ______________________________________________________________________
 382+ 7A27              //
 383+ 7A27              // m/           d n -- q
 384+ 7A27              // multiply two integer giving a double
 385+ 7A27                              Colon_Def MDIV, "M/", is_normal
 385+ 7A27             >                New_Def  MDIV, "M/", Enter_Ptr, is_normal ; ok
 385+ 7A27             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 385+ 7A27             >
 385+ 7A27             >                // dummy db directives used to calculate length of namec
 385+ 7A27 4D 2F       >                db      "M/"
 385+ 7A29             >len_NFA         defl    $ - temp_NFA
 385+ 7A29             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 385+ 7A27             >
 385+ 7A27 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 385+ 7A28 4D 2F       >                db      "M/"               // name string in 7-bit ascii, but
 385+ 7A2A             >                org     $-1                 // alter last byte of Name just above to set
 385+ 7A29 AF          >                db      {b $} | END_BIT     // msb as name end
 385+ 7A2A             >
 385+ 7A2A 19 7A       >                dw      last_NFA            // Link to previous definition Name
 385+ 7A2C             >MDIV:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 385+ 7A2C 56 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 385+ 7A2E             >                else
 385+ 7A2E ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 385+ 7A2E             >                endif           ; ok        // for other definitions it "points" the correct handler
 385+ 7A2E             >                // Use of "; ok" to suppress "warning[fwdref]"
 385+ 7A2E             >
 385+ 7A2E             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 386+ 7A2E 21 7A AE 6A                  dw      MDIVM, NIP
 387+ 7A32 52 69                        dw      EXIT                    // ;
 388+ 7A34
 389+ 7A34              //  ______________________________________________________________________
 390+ 7A34              //
 391+ 7A34              // *            n1 n2 -- n3
 392+ 7A34              // multiply two integer
 393+ 7A34                              Colon_Def MUL, "*", is_normal
 393+ 7A34             >                New_Def  MUL, "*", Enter_Ptr, is_normal ; ok
 393+ 7A34             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 393+ 7A34             >
 393+ 7A34             >                // dummy db directives used to calculate length of namec
 393+ 7A34 2A          >                db      "*"
 393+ 7A35             >len_NFA         defl    $ - temp_NFA
 393+ 7A35             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 393+ 7A34             >
 393+ 7A34 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 393+ 7A35 2A          >                db      "*"               // name string in 7-bit ascii, but
 393+ 7A36             >                org     $-1                 // alter last byte of Name just above to set
 393+ 7A35 AA          >                db      {b $} | END_BIT     // msb as name end
 393+ 7A36             >
 393+ 7A36 27 7A       >                dw      last_NFA            // Link to previous definition Name
 393+ 7A38             >MUL:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 393+ 7A38 56 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 393+ 7A3A             >                else
 393+ 7A3A ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 393+ 7A3A             >                endif           ; ok        // for other definitions it "points" the correct handler
 393+ 7A3A             >                // Use of "; ok" to suppress "warning[fwdref]"
 393+ 7A3A             >
 393+ 7A3A             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 394+ 7A3A 9B 79 A3 6A                  dw      MMUL, DROP              // m* drop
 395+ 7A3E 52 69                        dw      EXIT                    // ;
 396+ 7A40
 397+ 7A40              //  ______________________________________________________________________
 398+ 7A40              //
 399+ 7A40              // /mod         n1 n2 -- n3 n4
 400+ 7A40              // leaves quotient n4 and remainder n3 of the integer division n1 / n2.
 401+ 7A40              // The remainder has the sign of n1
 402+ 7A40                              Colon_Def DIVMOD, "/MOD", is_normal
 402+ 7A40             >                New_Def  DIVMOD, "/MOD", Enter_Ptr, is_normal ; ok
 402+ 7A40             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 402+ 7A40             >
 402+ 7A40             >                // dummy db directives used to calculate length of namec
 402+ 7A40 2F 4D 4F 44 >                db      "/MOD"
 402+ 7A44             >len_NFA         defl    $ - temp_NFA
 402+ 7A44             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 402+ 7A40             >
 402+ 7A40 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 402+ 7A41 2F 4D 4F 44 >                db      "/MOD"               // name string in 7-bit ascii, but
 402+ 7A45             >                org     $-1                 // alter last byte of Name just above to set
 402+ 7A44 C4          >                db      {b $} | END_BIT     // msb as name end
 402+ 7A45             >
 402+ 7A45 34 7A       >                dw      last_NFA            // Link to previous definition Name
 402+ 7A47             >DIVMOD:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 402+ 7A47 56 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 402+ 7A49             >                else
 402+ 7A49 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 402+ 7A49             >                endif           ; ok        // for other definitions it "points" the correct handler
 402+ 7A49             >                // Use of "; ok" to suppress "warning[fwdref]"
 402+ 7A49             >
 402+ 7A49             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 403+ 7A49 80 69 EF 6E                  dw      TO_R, S_TO_D, R_TO      // >r s->d r>
 403+ 7A4D 94 69
 404+ 7A4F 21 7A                        dw      MDIVM                   // m/mod
 405+ 7A51 52 69                        dw      EXIT                    // ;
 406+ 7A53
 407+ 7A53              //  ______________________________________________________________________
 408+ 7A53              //
 409+ 7A53              // /            n1 n2 -- n3
 410+ 7A53              // division
 411+ 7A53                              Colon_Def DIV, "/", is_normal
 411+ 7A53             >                New_Def  DIV, "/", Enter_Ptr, is_normal ; ok
 411+ 7A53             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 411+ 7A53             >
 411+ 7A53             >                // dummy db directives used to calculate length of namec
 411+ 7A53 2F          >                db      "/"
 411+ 7A54             >len_NFA         defl    $ - temp_NFA
 411+ 7A54             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 411+ 7A53             >
 411+ 7A53 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 411+ 7A54 2F          >                db      "/"               // name string in 7-bit ascii, but
 411+ 7A55             >                org     $-1                 // alter last byte of Name just above to set
 411+ 7A54 AF          >                db      {b $} | END_BIT     // msb as name end
 411+ 7A55             >
 411+ 7A55 40 7A       >                dw      last_NFA            // Link to previous definition Name
 411+ 7A57             >DIV:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 411+ 7A57 56 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 411+ 7A59             >                else
 411+ 7A59 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 411+ 7A59             >                endif           ; ok        // for other definitions it "points" the correct handler
 411+ 7A59             >                // Use of "; ok" to suppress "warning[fwdref]"
 411+ 7A59             >
 411+ 7A59             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 412+ 7A59 47 7A AE 6A                  dw      DIVMOD, NIP             // /mod nip
 413+ 7A5D 52 69                        dw      EXIT                    // ;
 414+ 7A5F
 415+ 7A5F              //  ______________________________________________________________________
 416+ 7A5F              //
 417+ 7A5F              // mod          n1 n2 -- n3
 418+ 7A5F                              Colon_Def MOD, "MOD", is_normal
 418+ 7A5F             >                New_Def  MOD, "MOD", Enter_Ptr, is_normal ; ok
 418+ 7A5F             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 418+ 7A5F             >
 418+ 7A5F             >                // dummy db directives used to calculate length of namec
 418+ 7A5F 4D 4F 44    >                db      "MOD"
 418+ 7A62             >len_NFA         defl    $ - temp_NFA
 418+ 7A62             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 418+ 7A5F             >
 418+ 7A5F 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 418+ 7A60 4D 4F 44    >                db      "MOD"               // name string in 7-bit ascii, but
 418+ 7A63             >                org     $-1                 // alter last byte of Name just above to set
 418+ 7A62 C4          >                db      {b $} | END_BIT     // msb as name end
 418+ 7A63             >
 418+ 7A63 53 7A       >                dw      last_NFA            // Link to previous definition Name
 418+ 7A65             >MOD:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 418+ 7A65 56 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 418+ 7A67             >                else
 418+ 7A67 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 418+ 7A67             >                endif           ; ok        // for other definitions it "points" the correct handler
 418+ 7A67             >                // Use of "; ok" to suppress "warning[fwdref]"
 418+ 7A67             >
 418+ 7A67             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 419+ 7A67 47 7A A3 6A                  dw      DIVMOD, DROP            // /mod drop
 420+ 7A6B 52 69                        dw      EXIT                    // ;
 421+ 7A6D
 422+ 7A6D              //  ______________________________________________________________________
 423+ 7A6D              //
 424+ 7A6D              // */mod        n1 n2 n3 -- n4 n5
 425+ 7A6D              // leaves the quotient n5 and the remainder n4 of the operation
 426+ 7A6D              // (n1 * n2) / n3. The intermediate passage through a double number
 427+ 7A6D              // avoids loss of precision
 428+ 7A6D                              Colon_Def MUL_DIV_MOD, "*/MOD", is_normal
 428+ 7A6D             >                New_Def  MUL_DIV_MOD, "*/MOD", Enter_Ptr, is_normal ; ok
 428+ 7A6D             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 428+ 7A6D             >
 428+ 7A6D             >                // dummy db directives used to calculate length of namec
 428+ 7A6D 2A 2F 4D 4F >                db      "*/MOD"
 428+ 7A71 44          >
 428+ 7A72             >len_NFA         defl    $ - temp_NFA
 428+ 7A72             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 428+ 7A6D             >
 428+ 7A6D 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 428+ 7A6E 2A 2F 4D 4F >                db      "*/MOD"               // name string in 7-bit ascii, but
 428+ 7A72 44          >
 428+ 7A73             >                org     $-1                 // alter last byte of Name just above to set
 428+ 7A72 C4          >                db      {b $} | END_BIT     // msb as name end
 428+ 7A73             >
 428+ 7A73 5F 7A       >                dw      last_NFA            // Link to previous definition Name
 428+ 7A75             >MUL_DIV_MOD:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 428+ 7A75 56 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 428+ 7A77             >                else
 428+ 7A77 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 428+ 7A77             >                endif           ; ok        // for other definitions it "points" the correct handler
 428+ 7A77             >                // Use of "; ok" to suppress "warning[fwdref]"
 428+ 7A77             >
 428+ 7A77             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 429+ 7A77 80 69 9B 79                  dw      TO_R, MMUL              // >r  m*
 430+ 7A7B 94 69 21 7A                  dw      R_TO, MDIVM             // r>  m/mod
 431+ 7A7F 52 69                        dw      EXIT                    // ;
 432+ 7A81
 433+ 7A81              //  ______________________________________________________________________
 434+ 7A81              //
 435+ 7A81              // */          n1 n2 n3 -- n4
 436+ 7A81              // (n1 * n2) / n3. The intermediate passage through a double number avoids loss of precision
 437+ 7A81                              Colon_Def MUL_DIV, "*/", is_normal
 437+ 7A81             >                New_Def  MUL_DIV, "*/", Enter_Ptr, is_normal ; ok
 437+ 7A81             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 437+ 7A81             >
 437+ 7A81             >                // dummy db directives used to calculate length of namec
 437+ 7A81 2A 2F       >                db      "*/"
 437+ 7A83             >len_NFA         defl    $ - temp_NFA
 437+ 7A83             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 437+ 7A81             >
 437+ 7A81 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 437+ 7A82 2A 2F       >                db      "*/"               // name string in 7-bit ascii, but
 437+ 7A84             >                org     $-1                 // alter last byte of Name just above to set
 437+ 7A83 AF          >                db      {b $} | END_BIT     // msb as name end
 437+ 7A84             >
 437+ 7A84 6D 7A       >                dw      last_NFA            // Link to previous definition Name
 437+ 7A86             >MUL_DIV:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 437+ 7A86 56 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 437+ 7A88             >                else
 437+ 7A88 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 437+ 7A88             >                endif           ; ok        // for other definitions it "points" the correct handler
 437+ 7A88             >                // Use of "; ok" to suppress "warning[fwdref]"
 437+ 7A88             >
 437+ 7A88             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 438+ 7A88 75 7A                        dw     MUL_DIV_MOD              // */mod
 439+ 7A8A AE 6A                        dw     NIP                      // nip
 440+ 7A8C 52 69                        dw     EXIT                     // ;
 441+ 7A8E
 442+ 7A8E
 443+ 7A8E              //  ______________________________________________________________________
 444+ 7A8E              //
 445+ 7A8E              // m/mod        ud1 u2 -- u3 ud4
 446+ 7A8E              // mixed operation: it leaves the remainder u3 and the quotient ud4 of ud1 / u1.
 447+ 7A8E              // All terms are unsigned.
 448+ 7A8E              //              Colon_Def MDIV_MOD, "M/MOD", is_normal
 449+ 7A8E              //              dw      TO_R                    // >r           ( ud1 )
 450+ 7A8E              //              dw      ZERO, R_OP, UMDIVMOD    // 0 r um/mod   ( l rem1 h/r )
 451+ 7A8E              //              dw      R_TO, SWAP, TO_R        // r> swap >r   ( l rem )
 452+ 7A8E              //              dw      UMDIVMOD                // um/mod       ( rem2 l/r )
 453+ 7A8E              //              dw      R_TO                    // r>           ( rem2 l/r h/r )
 454+ 7A8E              //              dw      EXIT                    // ;
 455+ 7A8E
 456+ 7A8E              //  ______________________________________________________________________
 457+ 7A8E              //
 458+ 7A8E              // (line)       n1 n2 -- a b
 459+ 7A8E              // sends the line n1 of block n2 to the disk buffer.
 460+ 7A8E              // it returns the address a and ca counter b = C/L meaning a whole line.
 461+ 7A8E                              Colon_Def CLINE, "(LINE)", is_normal
 461+ 7A8E             >                New_Def  CLINE, "(LINE)", Enter_Ptr, is_normal ; ok
 461+ 7A8E             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 461+ 7A8E             >
 461+ 7A8E             >                // dummy db directives used to calculate length of namec
 461+ 7A8E 28 4C 49 4E >                db      "(LINE)"
 461+ 7A92 45 29       >
 461+ 7A94             >len_NFA         defl    $ - temp_NFA
 461+ 7A94             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 461+ 7A8E             >
 461+ 7A8E 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 461+ 7A8F 28 4C 49 4E >                db      "(LINE)"               // name string in 7-bit ascii, but
 461+ 7A93 45 29       >
 461+ 7A95             >                org     $-1                 // alter last byte of Name just above to set
 461+ 7A94 A9          >                db      {b $} | END_BIT     // msb as name end
 461+ 7A95             >
 461+ 7A95 81 7A       >                dw      last_NFA            // Link to previous definition Name
 461+ 7A97             >CLINE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 461+ 7A97 56 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 461+ 7A99             >                else
 461+ 7A99 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 461+ 7A99             >                endif           ; ok        // for other definitions it "points" the correct handler
 461+ 7A99             >                // Use of "; ok" to suppress "warning[fwdref]"
 461+ 7A99             >
 461+ 7A99             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 462+ 7A99 80 69                        dw      TO_R                    // >r
 463+ 7A9B 7E 6C                        dw      NOOP                    // noop
 464+ 7A9D 05 6D                        dw      CL                      // c/l
 465+ 7A9F 11 6D 75 7A                  dw      BBUF, MUL_DIV_MOD       // */mod
 466+ 7AA3 94 69                        dw      R_TO                    // r>
 467+ 7AA5 1D 6D 38 7A                  dw      BSCR, MUL, PLUS         // b/scr * +
 467+ 7AA9 F8 69
 468+ 7AAB A6 7D                        dw      BLOCK                   // block   ( forward )
 469+ 7AAD F8 69                        dw      PLUS                    // +
 470+ 7AAF 7E 6C                        dw      NOOP                    // noop
 471+ 7AB1 05 6D                        dw      CL                      // c/l
 472+ 7AB3 52 69                        dw      EXIT                    // ;
 473+ 7AB5
 474+ 7AB5              //  ______________________________________________________________________
 475+ 7AB5              //
 476+ 7AB5              // .line        n1 n2 --
 477+ 7AB5              // Sends to output line  n1  of screen n2.
 478+ 7AB5                              Colon_Def DOT_LINE, ".LINE", is_normal
 478+ 7AB5             >                New_Def  DOT_LINE, ".LINE", Enter_Ptr, is_normal ; ok
 478+ 7AB5             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 478+ 7AB5             >
 478+ 7AB5             >                // dummy db directives used to calculate length of namec
 478+ 7AB5 2E 4C 49 4E >                db      ".LINE"
 478+ 7AB9 45          >
 478+ 7ABA             >len_NFA         defl    $ - temp_NFA
 478+ 7ABA             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 478+ 7AB5             >
 478+ 7AB5 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 478+ 7AB6 2E 4C 49 4E >                db      ".LINE"               // name string in 7-bit ascii, but
 478+ 7ABA 45          >
 478+ 7ABB             >                org     $-1                 // alter last byte of Name just above to set
 478+ 7ABA C5          >                db      {b $} | END_BIT     // msb as name end
 478+ 7ABB             >
 478+ 7ABB 8E 7A       >                dw      last_NFA            // Link to previous definition Name
 478+ 7ABD             >DOT_LINE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 478+ 7ABD 56 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 478+ 7ABF             >                else
 478+ 7ABF ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 478+ 7ABF             >                endif           ; ok        // for other definitions it "points" the correct handler
 478+ 7ABF             >                // Use of "; ok" to suppress "warning[fwdref]"
 478+ 7ABF             >
 478+ 7ABF             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 479+ 7ABF 97 7A 9E 72                  dw      CLINE, LTRAILING, TYPE  // (line) -trailing type
 479+ 7AC3 3A 72
 480+ 7AC5 52 69                        dw      EXIT                    // ;
 481+ 7AC7
 482+ 7AC7              //  ______________________________________________________________________
 483+ 7AC7              //
 484+ 7AC7              // message       n1 n2 --
 485+ 7AC7              // prints error message to current channel.
 486+ 7AC7              // if WARNING is 0, prints "MSG#n".
 487+ 7AC7              // if WARNING is 1, prints line n of screen 4.
 488+ 7AC7              // if WARNING is -1, see ERROR
 489+ 7AC7              // value can be negative or beyond block 4.
 490+ 7AC7                              Colon_Def MESSAGE, "MESSAGE", is_normal
 490+ 7AC7             >                New_Def  MESSAGE, "MESSAGE", Enter_Ptr, is_normal ; ok
 490+ 7AC7             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 490+ 7AC7             >
 490+ 7AC7             >                // dummy db directives used to calculate length of namec
 490+ 7AC7 4D 45 53 53 >                db      "MESSAGE"
 490+ 7ACB 41 47 45    >
 490+ 7ACE             >len_NFA         defl    $ - temp_NFA
 490+ 7ACE             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 490+ 7AC7             >
 490+ 7AC7 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 490+ 7AC8 4D 45 53 53 >                db      "MESSAGE"               // name string in 7-bit ascii, but
 490+ 7ACC 41 47 45    >
 490+ 7ACF             >                org     $-1                 // alter last byte of Name just above to set
 490+ 7ACE C5          >                db      {b $} | END_BIT     // msb as name end
 490+ 7ACF             >
 490+ 7ACF B5 7A       >                dw      last_NFA            // Link to previous definition Name
 490+ 7AD1             >MESSAGE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 490+ 7AD1 56 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 490+ 7AD3             >                else
 490+ 7AD3 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 490+ 7AD3             >                endif           ; ok        // for other definitions it "points" the correct handler
 490+ 7AD3             >                // Use of "; ok" to suppress "warning[fwdref]"
 490+ 7AD3             >
 490+ 7AD3             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 491+ 7AD3 7C 6D 6B 6B                  dw      WARNING, FETCH          // warning @
 492+ 7AD7                                                              // if
 493+ 7AD7 E3 63                        dw      ZBRANCH
 494+ 7AD9 18 00                        dw      Message_Else - $
 495+ 7ADB A9 63 04 00                  dw          LIT, 4              //      4
 496+ 7ADF F7 6D 6B 6B                  dw          OFFSET, FETCH       //      offset @
 497+ 7AE3 1D 6D 57 7A                  dw          BSCR, DIV, SUBTRACT //      b/scr / -
 497+ 7AE7 03 6F
 498+ 7AE9 BD 7A                        dw          DOT_LINE            //      .line
 499+ 7AEB C0 6F                        dw          SPACE               //      space
 500+ 7AED                                                              // else
 501+ 7AED
 502+ 7AED CC 63                        dw      BRANCH
 503+ 7AEF 0B 00                        dw      Message_ENdif - $
 504+ 7AF1              Message_Else:
 505+ 7AF1 4E 74                        dw          C_DOT_QUOTE         //      .( msg#)
 506+ 7AF3 04 6D 73 67                  db          4, "msg#"
 506+ 7AF7 23
 507+ 7AF8 63 83                        dw          DOT                 //      .  ( forward )
 508+ 7AFA              Message_ENdif:                                  // endif
 509+ 7AFA 52 69                        dw      EXIT                    // ;
 510+ 7AFC
 511+ 7AFC
 512+ 7AFC              //  ______________________________________________________________________
 513+ 7AFC              //
 514+ 7AFC              // device
 515+ 7AFC                              Variable_Def DEVICE,   "DEVICE",   2
 515+ 7AFC             >                New_Def  DEVICE, "DEVICE", Variable_Ptr, is_normal
 515+ 7AFC             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 515+ 7AFC             >
 515+ 7AFC             >                // dummy db directives used to calculate length of namec
 515+ 7AFC 44 45 56 49 >                db      "DEVICE"
 515+ 7B00 43 45       >
 515+ 7B02             >len_NFA         defl    $ - temp_NFA
 515+ 7B02             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 515+ 7AFC             >
 515+ 7AFC 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 515+ 7AFD 44 45 56 49 >                db      "DEVICE"               // name string in 7-bit ascii, but
 515+ 7B01 43 45       >
 515+ 7B03             >                org     $-1                 // alter last byte of Name just above to set
 515+ 7B02 C5          >                db      {b $} | END_BIT     // msb as name end
 515+ 7B03             >
 515+ 7B03 C7 7A       >                dw      last_NFA            // Link to previous definition Name
 515+ 7B05             >DEVICE:          if Variable_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 515+ 7B05 AE 6C       >                dw      Variable_Ptr ; ok        // for primitive definitions  actual code
 515+ 7B07             >                else
 515+ 7B07 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 515+ 7B07             >                endif           ; ok        // for other definitions it "points" the correct handler
 515+ 7B07             >                // Use of "; ok" to suppress "warning[fwdref]"
 515+ 7B07             >
 515+ 7B07             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 515+ 7B07 02 00       >                dw      2
 516+ 7B09
 517+ 7B09              //  ______________________________________________________________________
 518+ 7B09              //
 519+ 7B09              // inkey        -- c | 0
 520+ 7B09              // call ROM inkey$ routine, returns c or "zero".
 521+ 7B09
 522+ 7B09                              New_Def INKEY, "INKEY", is_code, is_normal
 522+ 7B09             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 522+ 7B09             >
 522+ 7B09             >                // dummy db directives used to calculate length of namec
 522+ 7B09 49 4E 4B 45 >                db      "INKEY"
 522+ 7B0D 59          >
 522+ 7B0E             >len_NFA         defl    $ - temp_NFA
 522+ 7B0E             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 522+ 7B09             >
 522+ 7B09 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 522+ 7B0A 49 4E 4B 45 >                db      "INKEY"               // name string in 7-bit ascii, but
 522+ 7B0E 59          >
 522+ 7B0F             >                org     $-1                 // alter last byte of Name just above to set
 522+ 7B0E D9          >                db      {b $} | END_BIT     // msb as name end
 522+ 7B0F             >
 522+ 7B0F FC 7A       >                dw      last_NFA            // Link to previous definition Name
 522+ 7B11             >INKEY:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 522+ 7B11 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
 522+ 7B11             >                else
 522+ 7B11 13 7B       >                dw      $ + 2   ; ok        // is pointed by CFA
 522+ 7B13             >                endif           ; ok        // for other definitions it "points" the correct handler
 522+ 7B13             >                // Use of "; ok" to suppress "warning[fwdref]"
 522+ 7B13             >
 522+ 7B13             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 523+ 7B13
 524+ 7B13 C5                           push    bc
 525+ 7B14 ED 73 92 63                  ld      (SP_Saved), sp
 526+ 7B18 31 61 63                     ld      sp, Cold_origin - 5
 527+ 7B1B DD E5                        push    ix
 528+ 7B1D CD E6 15                     call    $15E6                   // instead of 15E9
 529+ 7B20 DD E1                        pop     ix
 530+ 7B22 ED 7B 92 63                  ld      sp, (SP_Saved)
 531+ 7B26 6F                           ld      l, a
 532+ 7B27 26 00                        ld      h, 0
 533+ 7B29 C1                           pop     bc
 534+ 7B2A                              psh1
 534+ 7B2A E5          >                push    hl
 534+ 7B2B DD E9       >                jp      (ix)
 535+ 7B2D
 536+ 7B2D              //  ______________________________________________________________________
 537+ 7B2D              //
 538+ 7B2D              // select      n --
 539+ 7B2D              // selects the given channel number
 540+ 7B2D
 541+ 7B2D                              New_Def SELECT, "SELECT", is_code, is_normal
 541+ 7B2D             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 541+ 7B2D             >
 541+ 7B2D             >                // dummy db directives used to calculate length of namec
 541+ 7B2D 53 45 4C 45 >                db      "SELECT"
 541+ 7B31 43 54       >
 541+ 7B33             >len_NFA         defl    $ - temp_NFA
 541+ 7B33             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 541+ 7B2D             >
 541+ 7B2D 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 541+ 7B2E 53 45 4C 45 >                db      "SELECT"               // name string in 7-bit ascii, but
 541+ 7B32 43 54       >
 541+ 7B34             >                org     $-1                 // alter last byte of Name just above to set
 541+ 7B33 D4          >                db      {b $} | END_BIT     // msb as name end
 541+ 7B34             >
 541+ 7B34 09 7B       >                dw      last_NFA            // Link to previous definition Name
 541+ 7B36             >SELECT:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 541+ 7B36 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
 541+ 7B36             >                else
 541+ 7B36 38 7B       >                dw      $ + 2   ; ok        // is pointed by CFA
 541+ 7B38             >                endif           ; ok        // for other definitions it "points" the correct handler
 541+ 7B38             >                // Use of "; ok" to suppress "warning[fwdref]"
 541+ 7B38             >
 541+ 7B38             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 542+ 7B38 E1                           pop     hl
 543+ 7B39 C5                           push    bc
 544+ 7B3A 7D                           ld      a, l
 545+ 7B3B ED 73 92 63                  ld      (SP_Saved), sp
 546+ 7B3F 31 61 63                     ld      sp, Cold_origin - 5
 547+ 7B42 DD E5                        push    ix
 548+ 7B44 CD 01 16                     call    $1601
 549+ 7B47 DD E1                        pop     ix
 550+ 7B49 ED 7B 92 63                  ld      sp, (SP_Saved)
 551+ 7B4D C1                           pop     bc
 552+ 7B4E
 553+ 7B4E                              next
 553+ 7B4E DD E9       >                jp      (ix)
 554+ 7B50
 555+ 7B50              //  ______________________________________________________________________
 556+ 7B50
# file closed: C:\Zx\CSpect\Projects\vForth15_INDIRECT/source/L2.asm
 112  7B50                              include "next-opt1.asm"
# file opened: C:\Zx\CSpect\Projects\vForth15_INDIRECT/source/next-opt1.asm
   1+ 7B50              //  ______________________________________________________________________
   2+ 7B50              //
   3+ 7B50              //  next-opt.asm
   4+ 7B50              //
   5+ 7B50              //  ZX Spectrum Next - peculiar definitions
   6+ 7B50              //  ______________________________________________________________________
   7+ 7B50
   8+ 7B50              //  ______________________________________________________________________
   9+ 7B50              //
  10+ 7B50              // reg@         n -- b
  11+ 7B50              // read Next REGister n giving byte b
  12+ 7B50
  13+ 7B50                              New_Def REG_FETCH, "REG@", is_code, is_normal
  13+ 7B50             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  13+ 7B50             >
  13+ 7B50             >                // dummy db directives used to calculate length of namec
  13+ 7B50 52 45 47 40 >                db      "REG@"
  13+ 7B54             >len_NFA         defl    $ - temp_NFA
  13+ 7B54             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  13+ 7B50             >
  13+ 7B50 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  13+ 7B51 52 45 47 40 >                db      "REG@"               // name string in 7-bit ascii, but
  13+ 7B55             >                org     $-1                 // alter last byte of Name just above to set
  13+ 7B54 C0          >                db      {b $} | END_BIT     // msb as name end
  13+ 7B55             >
  13+ 7B55 2D 7B       >                dw      last_NFA            // Link to previous definition Name
  13+ 7B57             >REG_FETCH:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
  13+ 7B57 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
  13+ 7B57             >                else
  13+ 7B57 59 7B       >                dw      $ + 2   ; ok        // is pointed by CFA
  13+ 7B59             >                endif           ; ok        // for other definitions it "points" the correct handler
  13+ 7B59             >                // Use of "; ok" to suppress "warning[fwdref]"
  13+ 7B59             >
  13+ 7B59             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  14+ 7B59 D9                           exx
  15+ 7B5A 01 3B 24                     ld      bc, $243B
  16+ 7B5D E1                           pop     hl
  17+ 7B5E ED 69                        out     (c), l
  18+ 7B60 04                           inc     b
  19+ 7B61 ED 68                        in      l,(c)
  20+ 7B63 E5                           push    hl
  21+ 7B64 D9                           exx
  22+ 7B65                              next
  22+ 7B65 DD E9       >                jp      (ix)
  23+ 7B67
  24+ 7B67
  25+ 7B67              //  ______________________________________________________________________
  26+ 7B67              //
  27+ 7B67              // reg!         b n --
  28+ 7B67              // write value b to Next REGister n
  29+ 7B67
  30+ 7B67                              New_Def REG_STORE, "REG!", is_code, is_normal
  30+ 7B67             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  30+ 7B67             >
  30+ 7B67             >                // dummy db directives used to calculate length of namec
  30+ 7B67 52 45 47 21 >                db      "REG!"
  30+ 7B6B             >len_NFA         defl    $ - temp_NFA
  30+ 7B6B             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  30+ 7B67             >
  30+ 7B67 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  30+ 7B68 52 45 47 21 >                db      "REG!"               // name string in 7-bit ascii, but
  30+ 7B6C             >                org     $-1                 // alter last byte of Name just above to set
  30+ 7B6B A1          >                db      {b $} | END_BIT     // msb as name end
  30+ 7B6C             >
  30+ 7B6C 50 7B       >                dw      last_NFA            // Link to previous definition Name
  30+ 7B6E             >REG_STORE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
  30+ 7B6E ~           >                dw      runcode ; ok        // for primitive definitions  actual code
  30+ 7B6E             >                else
  30+ 7B6E 70 7B       >                dw      $ + 2   ; ok        // is pointed by CFA
  30+ 7B70             >                endif           ; ok        // for other definitions it "points" the correct handler
  30+ 7B70             >                // Use of "; ok" to suppress "warning[fwdref]"
  30+ 7B70             >
  30+ 7B70             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  31+ 7B70 D9                           exx
  32+ 7B71 01 3B 24                     ld      bc, $243B
  33+ 7B74 E1                           pop     hl
  34+ 7B75 ED 69                        out     (c), l
  35+ 7B77 04                           inc     b
  36+ 7B78 E1                           pop     hl
  37+ 7B79 ED 69                        out     (c), l
  38+ 7B7B D9                           exx
  39+ 7B7C                              next
  39+ 7B7C DD E9       >                jp      (ix)
  40+ 7B7E
  41+ 7B7E
  42+ 7B7E              //  ______________________________________________________________________
  43+ 7B7E              //
  44+ 7B7E              // mmu7@        -- n
  45+ 7B7E              // query current page in MMU7 8K-RAM : 0 and 223
  46+ 7B7E
  47+ 7B7E                              Colon_Def MMU7_FETCH, "MMU7@", is_normal
  47+ 7B7E             >                New_Def  MMU7_FETCH, "MMU7@", Enter_Ptr, is_normal ; ok
  47+ 7B7E             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  47+ 7B7E             >
  47+ 7B7E             >                // dummy db directives used to calculate length of namec
  47+ 7B7E 4D 4D 55 37 >                db      "MMU7@"
  47+ 7B82 40          >
  47+ 7B83             >len_NFA         defl    $ - temp_NFA
  47+ 7B83             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  47+ 7B7E             >
  47+ 7B7E 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  47+ 7B7F 4D 4D 55 37 >                db      "MMU7@"               // name string in 7-bit ascii, but
  47+ 7B83 40          >
  47+ 7B84             >                org     $-1                 // alter last byte of Name just above to set
  47+ 7B83 C0          >                db      {b $} | END_BIT     // msb as name end
  47+ 7B84             >
  47+ 7B84 67 7B       >                dw      last_NFA            // Link to previous definition Name
  47+ 7B86             >MMU7_FETCH:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
  47+ 7B86 56 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
  47+ 7B88             >                else
  47+ 7B88 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
  47+ 7B88             >                endif           ; ok        // for other definitions it "points" the correct handler
  47+ 7B88             >                // Use of "; ok" to suppress "warning[fwdref]"
  47+ 7B88             >
  47+ 7B88             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  48+ 7B88 A9 63 57 00                  dw      LIT, 87, REG_FETCH
  48+ 7B8C 57 7B
  49+ 7B8E 52 69                        dw      EXIT
  50+ 7B90
  51+ 7B90              //  ______________________________________________________________________
  52+ 7B90              //
  53+ 7B90              // mmu7!        n --
  54+ 7B90              // set MMU7 8K-RAM page to n given between 0 and 223
  55+ 7B90              // optimized version that uses NEXTREG n,A Z80n op-code.
  56+ 7B90
  57+ 7B90                              New_Def MMU7_STORE, "MMU7!", is_code, is_normal
  57+ 7B90             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  57+ 7B90             >
  57+ 7B90             >                // dummy db directives used to calculate length of namec
  57+ 7B90 4D 4D 55 37 >                db      "MMU7!"
  57+ 7B94 21          >
  57+ 7B95             >len_NFA         defl    $ - temp_NFA
  57+ 7B95             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  57+ 7B90             >
  57+ 7B90 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  57+ 7B91 4D 4D 55 37 >                db      "MMU7!"               // name string in 7-bit ascii, but
  57+ 7B95 21          >
  57+ 7B96             >                org     $-1                 // alter last byte of Name just above to set
  57+ 7B95 A1          >                db      {b $} | END_BIT     // msb as name end
  57+ 7B96             >
  57+ 7B96 7E 7B       >                dw      last_NFA            // Link to previous definition Name
  57+ 7B98             >MMU7_STORE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
  57+ 7B98 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
  57+ 7B98             >                else
  57+ 7B98 9A 7B       >                dw      $ + 2   ; ok        // is pointed by CFA
  57+ 7B9A             >                endif           ; ok        // for other definitions it "points" the correct handler
  57+ 7B9A             >                // Use of "; ok" to suppress "warning[fwdref]"
  57+ 7B9A             >
  57+ 7B9A             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  58+ 7B9A E1                           pop     hl
  59+ 7B9B 7D                           ld      a, l
  60+ 7B9C ED 92 57                     nextreg 87, a
  61+ 7B9F
  62+ 7B9F                              next
  62+ 7B9F DD E9       >                jp      (ix)
  63+ 7BA1
  64+ 7BA1              //  ______________________________________________________________________
  65+ 7BA1              //
  66+ 7BA1              // >far         ha -- a n
  67+ 7BA1              // decode bits 765 of H as one of the 8K-page between 64 and 71 (40h-47h)
  68+ 7BA1              // take lower bits of H and L as an offset from E000h
  69+ 7BA1              // then return address  a  between E000h-FFFFh
  70+ 7BA1              // and page number n  between 64-71 (40h-47h)
  71+ 7BA1              // For example, in hex:
  72+ 7BA1              //   0000 >FAR  gives  40.E000
  73+ 7BA1              //   1FFF >FAR  gives  40.FFFF
  74+ 7BA1              //   2000 >FAR  gives  41.E000
  75+ 7BA1              //   3FFF >FAR  gives  41.FFFF
  76+ 7BA1              //   EFFF >FAR  gives  47.EFFF
  77+ 7BA1              //   FFFF >FAR  gives  47.FFFF
  78+ 7BA1              //                New_Def TO_FAR, ">FAR", is_code, is_normal
  79+ 7BA1              //                pop     de
  80+ 7BA1              //                ld      a, d
  81+ 7BA1              //                and     $E0
  82+ 7BA1              //                rlca
  83+ 7BA1              //                rlca
  84+ 7BA1              //                rlca
  85+ 7BA1              //                add     $40
  86+ 7BA1              //                ld      l, a
  87+ 7BA1              //                ld      h, 0
  88+ 7BA1              //                ld      a, d
  89+ 7BA1              //                or      $E0
  90+ 7BA1              //                ld      d, a
  91+ 7BA1              //                push    hl
  92+ 7BA1              //                push    de
  93+ 7BA1              //                next
  94+ 7BA1
  95+ 7BA1              //  ______________________________________________________________________
  96+ 7BA1              //
  97+ 7BA1              // <far         a n  -- ha
  98+ 7BA1              // given an address E000-FFFF and a page number n (64-71 or 40h-47h)
  99+ 7BA1              // reverse of >FAR: encodes a FAR address compressing
 100+ 7BA1              // to bits 765 of H, lower bits of HL address offset from E000h
 101+ 7BA1              //                New_Def FROM_FAR, "<FAR", is_code, is_normal
 102+ 7BA1              //                pop     de                  // page number in e
 103+ 7BA1              //                pop     hl                  // address in hl
 104+ 7BA1              //                ld      a, e
 105+ 7BA1              //                sub     $40                 // reduced to 0-7
 106+ 7BA1              //                rrca
 107+ 7BA1              //                rrca
 108+ 7BA1              //                rrca
 109+ 7BA1              //                ld      d, a                // save to d bits 765
 110+ 7BA1              //                ld      a, h                // drops
 111+ 7BA1              //                and     $1F
 112+ 7BA1              //                or      d
 113+ 7BA1              //                ld      h, a
 114+ 7BA1              //
 115+ 7BA1              //                psh1
 116+ 7BA1
 117+ 7BA1              //  ______________________________________________________________________
 118+ 7BA1              //
 119+ 7BA1              // m_p3dos      n1 n2 n3 n4 a -- n5 n6 n7 n8  f
 120+ 7BA1              // NextZXOS call wrapper.
 121+ 7BA1              //  n1 = hl register parameter value
 122+ 7BA1              //  n2 = de register parameter value
 123+ 7BA1              //  n3 = bc register parameter value
 124+ 7BA1              //  n4 =  a register parameter value
 125+ 7BA1              //   a = routine address in ROM 3
 126+ 7BA1              // ----
 127+ 7BA1              //  n5 = hl returned value
 128+ 7BA1              //  n6 = de returned value
 129+ 7BA1              //  n7 = bc returned value
 130+ 7BA1              //  n8 =  a returned value
 131+ 7BA1              //   f
 132+ 7BA1                              New_Def M_P3DOS, "M_P3DOS", is_code, is_normal
 132+ 7BA1             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 132+ 7BA1             >
 132+ 7BA1             >                // dummy db directives used to calculate length of namec
 132+ 7BA1 4D 5F 50 33 >                db      "M_P3DOS"
 132+ 7BA5 44 4F 53    >
 132+ 7BA8             >len_NFA         defl    $ - temp_NFA
 132+ 7BA8             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 132+ 7BA1             >
 132+ 7BA1 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 132+ 7BA2 4D 5F 50 33 >                db      "M_P3DOS"               // name string in 7-bit ascii, but
 132+ 7BA6 44 4F 53    >
 132+ 7BA9             >                org     $-1                 // alter last byte of Name just above to set
 132+ 7BA8 D3          >                db      {b $} | END_BIT     // msb as name end
 132+ 7BA9             >
 132+ 7BA9 90 7B       >                dw      last_NFA            // Link to previous definition Name
 132+ 7BAB             >M_P3DOS:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 132+ 7BAB ~           >                dw      runcode ; ok        // for primitive definitions  actual code
 132+ 7BAB             >                else
 132+ 7BAB AD 7B       >                dw      $ + 2   ; ok        // is pointed by CFA
 132+ 7BAD             >                endif           ; ok        // for other definitions it "points" the correct handler
 132+ 7BAD             >                // Use of "; ok" to suppress "warning[fwdref]"
 132+ 7BAD             >
 132+ 7BAD             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 133+ 7BAD D1                           pop     de                  // dos call entry address in de
 134+ 7BAE E1                           pop     hl                  // a register
 135+ 7BAF 7D                           ld      a, l
 136+ 7BB0 D9                           exx
 137+ 7BB1 C1                           pop     bc
 138+ 7BB2 D1                           pop     de
 139+ 7BB3 E1                           pop     hl
 140+ 7BB4 D9                           exx
 141+ 7BB5
 142+ 7BB5 C5                           push    bc
 143+ 7BB6 DD E5                        push    ix
 144+ 7BB8
 145+ 7BB8 ED 73 92 63                  ld      (SP_Saved), sp
 146+ 7BBC 31 61 63                     ld      sp, Cold_origin - 5
 147+ 7BBF 0E 07                        ld      c, 7                // use 7 RAM Bank
 148+ 7BC1
 149+ 7BC1 CF                           rst     08
 150+ 7BC2 94                           db      $94
 151+ 7BC3
 152+ 7BC3 ED 7B 92 63                  ld      sp, (SP_Saved)
 153+ 7BC7 DD E5                        push    ix
 154+ 7BC9 E1                           pop     hl
 155+ 7BCA 22 90 63                     ld      (IX_Echo), hl
 156+ 7BCD              //              nop
 157+ 7BCD DD E1                        pop     ix
 158+ 7BCF E3                           ex      (sp), hl            // hl argument and retrieve bc
 159+ 7BD0 D5                           push    de
 160+ 7BD1 C5                           push    bc
 161+ 7BD2 4D                           ld      c, l
 162+ 7BD3 44                           ld      b, h
 163+ 7BD4
 164+ 7BD4 26 00                        ld      h, 0
 165+ 7BD6 6F                           ld      l, a
 166+ 7BD7 E5                           push    hl
 167+ 7BD8 ED 62                        sbc     hl, hl              // -1 for OK ; 0 for KO but now...
 168+ 7BDA 23                           inc     hl                  //  0 for OK ; 1 for ko
 169+ 7BDB
 170+ 7BDB                              psh1
 170+ 7BDB E5          >                push    hl
 170+ 7BDC DD E9       >                jp      (ix)
 171+ 7BDE
 172+ 7BDE              //  ______________________________________________________________________
 173+ 7BDE              //
 174+ 7BDE              // blk-fh
 175+ 7BDE                              Variable_Def BLK_FH,   "BLK-FH",   1
 175+ 7BDE             >                New_Def  BLK_FH, "BLK-FH", Variable_Ptr, is_normal
 175+ 7BDE             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 175+ 7BDE             >
 175+ 7BDE             >                // dummy db directives used to calculate length of namec
 175+ 7BDE 42 4C 4B 2D >                db      "BLK-FH"
 175+ 7BE2 46 48       >
 175+ 7BE4             >len_NFA         defl    $ - temp_NFA
 175+ 7BE4             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 175+ 7BDE             >
 175+ 7BDE 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 175+ 7BDF 42 4C 4B 2D >                db      "BLK-FH"               // name string in 7-bit ascii, but
 175+ 7BE3 46 48       >
 175+ 7BE5             >                org     $-1                 // alter last byte of Name just above to set
 175+ 7BE4 C8          >                db      {b $} | END_BIT     // msb as name end
 175+ 7BE5             >
 175+ 7BE5 A1 7B       >                dw      last_NFA            // Link to previous definition Name
 175+ 7BE7             >BLK_FH:          if Variable_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 175+ 7BE7 AE 6C       >                dw      Variable_Ptr ; ok        // for primitive definitions  actual code
 175+ 7BE9             >                else
 175+ 7BE9 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 175+ 7BE9             >                endif           ; ok        // for other definitions it "points" the correct handler
 175+ 7BE9             >                // Use of "; ok" to suppress "warning[fwdref]"
 175+ 7BE9             >
 175+ 7BE9             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 175+ 7BE9 01 00       >                dw      1
 176+ 7BEB
 177+ 7BEB                              New_Def BLK_FNAME,   "BLK-FNAME", Create_Ptr, is_normal
 177+ 7BEB             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 177+ 7BEB             >
 177+ 7BEB             >                // dummy db directives used to calculate length of namec
 177+ 7BEB 42 4C 4B 2D >                db      "BLK-FNAME"
 177+ 7BEF 46 4E 41 4D >
 177+ 7BF3 45          >
 177+ 7BF4             >len_NFA         defl    $ - temp_NFA
 177+ 7BF4             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 177+ 7BEB             >
 177+ 7BEB 89          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 177+ 7BEC 42 4C 4B 2D >                db      "BLK-FNAME"               // name string in 7-bit ascii, but
 177+ 7BF0 46 4E 41 4D >
 177+ 7BF4 45          >
 177+ 7BF5             >                org     $-1                 // alter last byte of Name just above to set
 177+ 7BF4 C5          >                db      {b $} | END_BIT     // msb as name end
 177+ 7BF5             >
 177+ 7BF5 DE 7B       >                dw      last_NFA            // Link to previous definition Name
 177+ 7BF7             >BLK_FNAME:          if Create_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 177+ 7BF7 B2 76       >                dw      Create_Ptr ; ok        // for primitive definitions  actual code
 177+ 7BF9             >                else
 177+ 7BF9 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 177+ 7BF9             >                endif           ; ok        // for other definitions it "points" the correct handler
 177+ 7BF9             >                // Use of "; ok" to suppress "warning[fwdref]"
 177+ 7BF9             >
 177+ 7BF9             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 178+ 7BF9 0E 21 42 6C                  db      14, "!Blocks-64.bin", 0
 178+ 7BFD 6F 63 6B 73
 178+ 7C01 2D 36 34 2E
 178+ 7C05 62 69 6E 00
 179+ 7C09 00 00 00...                  ds      24
 180+ 7C21
 181+ 7C21              //  ______________________________________________________________________
 182+ 7C21              //
 183+ 7C21              // blk-seek     n --
 184+ 7C21              // seek block n  within blocks!.bin  file
 185+ 7C21                              Colon_Def BLK_SEEK, "BLK-SEEK", is_normal
 185+ 7C21             >                New_Def  BLK_SEEK, "BLK-SEEK", Enter_Ptr, is_normal ; ok
 185+ 7C21             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 185+ 7C21             >
 185+ 7C21             >                // dummy db directives used to calculate length of namec
 185+ 7C21 42 4C 4B 2D >                db      "BLK-SEEK"
 185+ 7C25 53 45 45 4B >
 185+ 7C29             >len_NFA         defl    $ - temp_NFA
 185+ 7C29             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 185+ 7C21             >
 185+ 7C21 88          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 185+ 7C22 42 4C 4B 2D >                db      "BLK-SEEK"               // name string in 7-bit ascii, but
 185+ 7C26 53 45 45 4B >
 185+ 7C2A             >                org     $-1                 // alter last byte of Name just above to set
 185+ 7C29 CB          >                db      {b $} | END_BIT     // msb as name end
 185+ 7C2A             >
 185+ 7C2A EB 7B       >                dw      last_NFA            // Link to previous definition Name
 185+ 7C2C             >BLK_SEEK:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 185+ 7C2C 56 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 185+ 7C2E             >                else
 185+ 7C2E ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 185+ 7C2E             >                endif           ; ok        // for other definitions it "points" the correct handler
 185+ 7C2E             >                // Use of "; ok" to suppress "warning[fwdref]"
 185+ 7C2E             >
 185+ 7C2E             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 186+ 7C2E 11 6D 9B 79                  dw  BBUF, MMUL
 187+ 7C32 E7 7B 6B 6B                  dw  BLK_FH, FETCH
 188+ 7C36 41 67                        dw  F_SEEK
 189+ 7C38 A9 63 2D 00                  dw  LIT, $2D, QERROR
 189+ 7C3C 7A 70
 190+ 7C3E 52 69                        dw  EXIT
 191+ 7C40
 192+ 7C40              //  ______________________________________________________________________
 193+ 7C40              //
 194+ 7C40              // blk-read     n --
 195+ 7C40              // seek block n  within blocks!.bin  file
 196+ 7C40                              Colon_Def BLK_READ, "BLK-READ", is_normal
 196+ 7C40             >                New_Def  BLK_READ, "BLK-READ", Enter_Ptr, is_normal ; ok
 196+ 7C40             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 196+ 7C40             >
 196+ 7C40             >                // dummy db directives used to calculate length of namec
 196+ 7C40 42 4C 4B 2D >                db      "BLK-READ"
 196+ 7C44 52 45 41 44 >
 196+ 7C48             >len_NFA         defl    $ - temp_NFA
 196+ 7C48             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 196+ 7C40             >
 196+ 7C40 88          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 196+ 7C41 42 4C 4B 2D >                db      "BLK-READ"               // name string in 7-bit ascii, but
 196+ 7C45 52 45 41 44 >
 196+ 7C49             >                org     $-1                 // alter last byte of Name just above to set
 196+ 7C48 C4          >                db      {b $} | END_BIT     // msb as name end
 196+ 7C49             >
 196+ 7C49 21 7C       >                dw      last_NFA            // Link to previous definition Name
 196+ 7C4B             >BLK_READ:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 196+ 7C4B 56 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 196+ 7C4D             >                else
 196+ 7C4D ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 196+ 7C4D             >                endif           ; ok        // for other definitions it "points" the correct handler
 196+ 7C4D             >                // Use of "; ok" to suppress "warning[fwdref]"
 196+ 7C4D             >
 196+ 7C4D             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 197+ 7C4D 2C 7C                        dw  BLK_SEEK
 198+ 7C4F 11 6D                        dw  BBUF
 199+ 7C51 E7 7B 6B 6B                  dw  BLK_FH, FETCH
 200+ 7C55 AD 67                        dw  F_READ
 201+ 7C57 A9 63 2E 00                  dw  LIT, $2E, QERROR
 201+ 7C5B 7A 70
 202+ 7C5D A3 6A                        dw  DROP
 203+ 7C5F 52 69                        dw  EXIT
 204+ 7C61
 205+ 7C61              //  ______________________________________________________________________
 206+ 7C61              //
 207+ 7C61              // blk-write     n --
 208+ 7C61              // seek block n  within blocks!.bin  file
 209+ 7C61                              Colon_Def BLK_WRITE, "BLK-WRITE", is_normal
 209+ 7C61             >                New_Def  BLK_WRITE, "BLK-WRITE", Enter_Ptr, is_normal ; ok
 209+ 7C61             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 209+ 7C61             >
 209+ 7C61             >                // dummy db directives used to calculate length of namec
 209+ 7C61 42 4C 4B 2D >                db      "BLK-WRITE"
 209+ 7C65 57 52 49 54 >
 209+ 7C69 45          >
 209+ 7C6A             >len_NFA         defl    $ - temp_NFA
 209+ 7C6A             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 209+ 7C61             >
 209+ 7C61 89          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 209+ 7C62 42 4C 4B 2D >                db      "BLK-WRITE"               // name string in 7-bit ascii, but
 209+ 7C66 57 52 49 54 >
 209+ 7C6A 45          >
 209+ 7C6B             >                org     $-1                 // alter last byte of Name just above to set
 209+ 7C6A C5          >                db      {b $} | END_BIT     // msb as name end
 209+ 7C6B             >
 209+ 7C6B 40 7C       >                dw      last_NFA            // Link to previous definition Name
 209+ 7C6D             >BLK_WRITE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 209+ 7C6D 56 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 209+ 7C6F             >                else
 209+ 7C6F ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 209+ 7C6F             >                endif           ; ok        // for other definitions it "points" the correct handler
 209+ 7C6F             >                // Use of "; ok" to suppress "warning[fwdref]"
 209+ 7C6F             >
 209+ 7C6F             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 210+ 7C6F 2C 7C                        dw  BLK_SEEK
 211+ 7C71 11 6D                        dw  BBUF
 212+ 7C73 E7 7B 6B 6B                  dw  BLK_FH, FETCH
 213+ 7C77 CC 67                        dw  F_WRITE
 214+ 7C79 A9 63 2F 00                  dw  LIT, $2F, QERROR
 214+ 7C7D 7A 70
 215+ 7C7F A3 6A                        dw  DROP
 216+ 7C81 52 69                        dw  EXIT
 217+ 7C83
 218+ 7C83              //  ______________________________________________________________________
 219+ 7C83              //
 220+ 7C83              // blk-init     n --
 221+ 7C83              // seek block n  within blocks!.bin  file
 222+ 7C83                              Colon_Def BLK_INIT, "BLK-INIT", is_normal
 222+ 7C83             >                New_Def  BLK_INIT, "BLK-INIT", Enter_Ptr, is_normal ; ok
 222+ 7C83             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 222+ 7C83             >
 222+ 7C83             >                // dummy db directives used to calculate length of namec
 222+ 7C83 42 4C 4B 2D >                db      "BLK-INIT"
 222+ 7C87 49 4E 49 54 >
 222+ 7C8B             >len_NFA         defl    $ - temp_NFA
 222+ 7C8B             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 222+ 7C83             >
 222+ 7C83 88          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 222+ 7C84 42 4C 4B 2D >                db      "BLK-INIT"               // name string in 7-bit ascii, but
 222+ 7C88 49 4E 49 54 >
 222+ 7C8C             >                org     $-1                 // alter last byte of Name just above to set
 222+ 7C8B D4          >                db      {b $} | END_BIT     // msb as name end
 222+ 7C8C             >
 222+ 7C8C 61 7C       >                dw      last_NFA            // Link to previous definition Name
 222+ 7C8E             >BLK_INIT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 222+ 7C8E 56 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 222+ 7C90             >                else
 222+ 7C90 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 222+ 7C90             >                endif           ; ok        // for other definitions it "points" the correct handler
 222+ 7C90             >                // Use of "; ok" to suppress "warning[fwdref]"
 222+ 7C90             >
 222+ 7C90             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 223+ 7C90 E7 7B 6B 6B                  dw  BLK_FH, FETCH, F_CLOSE, DROP
 223+ 7C94 64 67 A3 6A
 224+ 7C98 F7 7B 19 6A                  dw  BLK_FNAME, ONE_PLUS
 225+ 7C9C B0 6E E9 6C                  dw  HERE, THREE, F_OPEN         // open for update (read+write)
 225+ 7CA0 E3 67
 226+ 7CA2 A9 63 2C 00                  dw  LIT, $2C, QERROR
 226+ 7CA6 7A 70
 227+ 7CA8 E7 7B 78 6B                  dw  BLK_FH, STORE
 228+ 7CAC 52 69                        dw  EXIT
 229+ 7CAE
 230+ 7CAE              //  ______________________________________________________________________
 231+ 7CAE              //
 232+ 7CAE              // #sec
 233+ 7CAE              // number of 512 Byte "sector" available on thie sysstem.
 234+ 7CAE              // it addd up to 16 MByte of data that can be used as source or pool for almost anything.
 235+ 7CAE
 236+ 7CAE                              Constant_Def NSEC , "#SEC", 32767
 236+ 7CAE             >                New_Def  NSEC, "#SEC", Constant_Ptr, is_normal
 236+ 7CAE             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 236+ 7CAE             >
 236+ 7CAE             >                // dummy db directives used to calculate length of namec
 236+ 7CAE 23 53 45 43 >                db      "#SEC"
 236+ 7CB2             >len_NFA         defl    $ - temp_NFA
 236+ 7CB2             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 236+ 7CAE             >
 236+ 7CAE 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 236+ 7CAF 23 53 45 43 >                db      "#SEC"               // name string in 7-bit ascii, but
 236+ 7CB3             >                org     $-1                 // alter last byte of Name just above to set
 236+ 7CB2 C3          >                db      {b $} | END_BIT     // msb as name end
 236+ 7CB3             >
 236+ 7CB3 83 7C       >                dw      last_NFA            // Link to previous definition Name
 236+ 7CB5             >NSEC:          if Constant_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 236+ 7CB5 95 6C       >                dw      Constant_Ptr ; ok        // for primitive definitions  actual code
 236+ 7CB7             >                else
 236+ 7CB7 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 236+ 7CB7             >                endif           ; ok        // for other definitions it "points" the correct handler
 236+ 7CB7             >                // Use of "; ok" to suppress "warning[fwdref]"
 236+ 7CB7             >
 236+ 7CB7             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 236+ 7CB7 FF 7F       >                dw      32767
 237+ 7CB9
 238+ 7CB9              //  ______________________________________________________________________
 239+ 7CB9
 240+ 7CB9
 241+ 7CB9
# file closed: C:\Zx\CSpect\Projects\vForth15_INDIRECT/source/next-opt1.asm
 113  7CB9                              include "L3.asm"
# file opened: C:\Zx\CSpect\Projects\vForth15_INDIRECT/source/L3.asm
   1+ 7CB9              //  ______________________________________________________________________
   2+ 7CB9              //
   3+ 7CB9              //  L3.asm
   4+ 7CB9              //
   5+ 7CB9              //  Continuation of L2.asm
   6+ 7CB9              //  I/O Block definitions
   7+ 7CB9              //  ______________________________________________________________________
   8+ 7CB9
   9+ 7CB9
  10+ 7CB9              //  ______________________________________________________________________
  11+ 7CB9              //
  12+ 7CB9              // r/w          a n f --
  13+ 7CB9              // read/write block n depending on flag f, true-flag means read, false-flag means write.
  14+ 7CB9                              Colon_Def READ_WRITE, "R/W", is_normal
  14+ 7CB9             >                New_Def  READ_WRITE, "R/W", Enter_Ptr, is_normal ; ok
  14+ 7CB9             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  14+ 7CB9             >
  14+ 7CB9             >                // dummy db directives used to calculate length of namec
  14+ 7CB9 52 2F 57    >                db      "R/W"
  14+ 7CBC             >len_NFA         defl    $ - temp_NFA
  14+ 7CBC             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  14+ 7CB9             >
  14+ 7CB9 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  14+ 7CBA 52 2F 57    >                db      "R/W"               // name string in 7-bit ascii, but
  14+ 7CBD             >                org     $-1                 // alter last byte of Name just above to set
  14+ 7CBC D7          >                db      {b $} | END_BIT     // msb as name end
  14+ 7CBD             >
  14+ 7CBD AE 7C       >                dw      last_NFA            // Link to previous definition Name
  14+ 7CBF             >READ_WRITE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
  14+ 7CBF 56 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
  14+ 7CC1             >                else
  14+ 7CC1 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
  14+ 7CC1             >                endif           ; ok        // for other definitions it "points" the correct handler
  14+ 7CC1             >                // Use of "; ok" to suppress "warning[fwdref]"
  14+ 7CC1             >
  14+ 7CC1             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  15+ 7CC1 80 69                        dw      TO_R                    // >r
  16+ 7CC3 25 6A                        dw      ONE_SUBTRACT            // 1-
  17+ 7CC5 D8 6A D0 69                  dw      DUP, ZLESS              // dup 0<
  18+ 7CC9 93 6A B5 7C                  dw      OVER, NSEC              // over #sec
  19+ 7CCD 25 6A 4E 6F                  dw      ONE_SUBTRACT, GREATER   // 1- >
  20+ 7CD1 F4 68                        dw      OR_OP                   // or
  21+ 7CD3 A9 63 06 00                  dw      LIT, 6, QERROR          // 6 ?error
  21+ 7CD7 7A 70
  22+ 7CD9 94 69                        dw      R_TO                    // r>
  23+ 7CDB                                                              // if
  24+ 7CDB E3 63                        dw      ZBRANCH
  25+ 7CDD 08 00                        dw      Read_Write_Else - $
  26+ 7CDF 4B 7C                        dw          BLK_READ            //      blk-read
  27+ 7CE1 CC 63                        dw      BRANCH
  28+ 7CE3 04 00                        dw      Read_Write_Endif - $
  29+ 7CE5              Read_Write_Else:                                // else
  30+ 7CE5 6D 7C                        dw          BLK_WRITE           //      blk-write
  31+ 7CE7              Read_Write_Endif:                               // endif
  32+ 7CE7 52 69                        dw      EXIT                    // ;
  33+ 7CE9
  34+ 7CE9
  35+ 7CE9              //  ______________________________________________________________________
  36+ 7CE9              //
  37+ 7CE9              // +buf        a1 -- a2 f
  38+ 7CE9              // advences to next buffer, cyclically rotating along them
  39+ 7CE9                              Colon_Def PBUF, "+BUF", is_normal
  39+ 7CE9             >                New_Def  PBUF, "+BUF", Enter_Ptr, is_normal ; ok
  39+ 7CE9             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  39+ 7CE9             >
  39+ 7CE9             >                // dummy db directives used to calculate length of namec
  39+ 7CE9 2B 42 55 46 >                db      "+BUF"
  39+ 7CED             >len_NFA         defl    $ - temp_NFA
  39+ 7CED             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  39+ 7CE9             >
  39+ 7CE9 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  39+ 7CEA 2B 42 55 46 >                db      "+BUF"               // name string in 7-bit ascii, but
  39+ 7CEE             >                org     $-1                 // alter last byte of Name just above to set
  39+ 7CED C6          >                db      {b $} | END_BIT     // msb as name end
  39+ 7CEE             >
  39+ 7CEE B9 7C       >                dw      last_NFA            // Link to previous definition Name
  39+ 7CF0             >PBUF:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
  39+ 7CF0 56 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
  39+ 7CF2             >                else
  39+ 7CF2 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
  39+ 7CF2             >                endif           ; ok        // for other definitions it "points" the correct handler
  39+ 7CF2             >                // Use of "; ok" to suppress "warning[fwdref]"
  39+ 7CF2             >
  39+ 7CF2             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  40+ 7CF2 A9 63 04 02                  dw      LIT, 516, PLUS          // 516 +
  40+ 7CF6 F8 69
  41+ 7CF8 D8 6A B3 6D                  dw      DUP, LIMIT, FETCH       // dup limit @
  41+ 7CFC 6B 6B
  42+ 7CFE 11 6F                        dw      EQUALS                  // =
  43+ 7D00                                                              // if
  44+ 7D00 E3 63                        dw      ZBRANCH
  45+ 7D02 08 00                        dw      PBuf_Endif - $
  46+ 7D04 A3 6A                        dw          DROP                //      drop
  47+ 7D06 A8 6D 6B 6B                  dw          FIRST, FETCH        //      first @
  48+ 7D0A              PBuf_Endif:                                     // endif
  49+ 7D0A D8 6A 65 6E                  dw      DUP, PREV, FETCH        // dup prev @
  49+ 7D0E 6B 6B
  50+ 7D10 03 6F                        dw      SUBTRACT                // -
  51+ 7D12 52 69                        dw      EXIT                    // ;
  52+ 7D14
  53+ 7D14              //  ______________________________________________________________________
  54+ 7D14              //
  55+ 7D14              // update       --
  56+ 7D14              // mark the last used block to be written to disk
  57+ 7D14                              Colon_Def UPDATE, "UPDATE", is_normal
  57+ 7D14             >                New_Def  UPDATE, "UPDATE", Enter_Ptr, is_normal ; ok
  57+ 7D14             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  57+ 7D14             >
  57+ 7D14             >                // dummy db directives used to calculate length of namec
  57+ 7D14 55 50 44 41 >                db      "UPDATE"
  57+ 7D18 54 45       >
  57+ 7D1A             >len_NFA         defl    $ - temp_NFA
  57+ 7D1A             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  57+ 7D14             >
  57+ 7D14 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  57+ 7D15 55 50 44 41 >                db      "UPDATE"               // name string in 7-bit ascii, but
  57+ 7D19 54 45       >
  57+ 7D1B             >                org     $-1                 // alter last byte of Name just above to set
  57+ 7D1A C5          >                db      {b $} | END_BIT     // msb as name end
  57+ 7D1B             >
  57+ 7D1B E9 7C       >                dw      last_NFA            // Link to previous definition Name
  57+ 7D1D             >UPDATE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
  57+ 7D1D 56 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
  57+ 7D1F             >                else
  57+ 7D1F ~           >                dw      $ + 2   ; ok        // is pointed by CFA
  57+ 7D1F             >                endif           ; ok        // for other definitions it "points" the correct handler
  57+ 7D1F             >                // Use of "; ok" to suppress "warning[fwdref]"
  57+ 7D1F             >
  57+ 7D1F             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  58+ 7D1F 65 6E 6B 6B                  dw      PREV, FETCH, FETCH      // prev @ @
  58+ 7D23 6B 6B
  59+ 7D25 A9 63 00 80                  dw      LIT, $8000, OR_OP       // $8000, or
  59+ 7D29 F4 68
  60+ 7D2B 65 6E 6B 6B                  dw      PREV, FETCH, STORE      // prev @ !
  60+ 7D2F 78 6B
  61+ 7D31 52 69                        dw      EXIT                    // ;
  62+ 7D33
  63+ 7D33
  64+ 7D33              //  ______________________________________________________________________
  65+ 7D33              //
  66+ 7D33              // empty-buffers --
  67+ 7D33                              Colon_Def EMPTY_BUFFERS, "EMPTY-BUFFERS", is_normal
  67+ 7D33             >                New_Def  EMPTY_BUFFERS, "EMPTY-BUFFERS", Enter_Ptr, is_normal ; ok
  67+ 7D33             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  67+ 7D33             >
  67+ 7D33             >                // dummy db directives used to calculate length of namec
  67+ 7D33 45 4D 50 54 >                db      "EMPTY-BUFFERS"
  67+ 7D37 59 2D 42 55 >
  67+ 7D3B 46 46 45 52 >
  67+ 7D3F 53          >
  67+ 7D40             >len_NFA         defl    $ - temp_NFA
  67+ 7D40             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  67+ 7D33             >
  67+ 7D33 8D          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  67+ 7D34 45 4D 50 54 >                db      "EMPTY-BUFFERS"               // name string in 7-bit ascii, but
  67+ 7D38 59 2D 42 55 >
  67+ 7D3C 46 46 45 52 >
  67+ 7D40 53          >
  67+ 7D41             >                org     $-1                 // alter last byte of Name just above to set
  67+ 7D40 D3          >                db      {b $} | END_BIT     // msb as name end
  67+ 7D41             >
  67+ 7D41 14 7D       >                dw      last_NFA            // Link to previous definition Name
  67+ 7D43             >EMPTY_BUFFERS:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
  67+ 7D43 56 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
  67+ 7D45             >                else
  67+ 7D45 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
  67+ 7D45             >                endif           ; ok        // for other definitions it "points" the correct handler
  67+ 7D45             >                // Use of "; ok" to suppress "warning[fwdref]"
  67+ 7D45             >
  67+ 7D45             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  68+ 7D45 A8 6D 6B 6B                  dw      FIRST, FETCH            // first @
  69+ 7D49 B3 6D 6B 6B                  dw      LIMIT, FETCH            // limit @
  70+ 7D4D 93 6A 03 6F                  dw      OVER, SUBTRACT, ERASE   // over - erase
  70+ 7D51 B6 73
  71+ 7D53 52 69                        dw      EXIT                    // ;
  72+ 7D55
  73+ 7D55              //  ______________________________________________________________________
  74+ 7D55              //
  75+ 7D55              // buffer       n -- a
  76+ 7D55              // read block n and gives the address to a buffer
  77+ 7D55              // any block previously inside the buffer, if modified, is rewritten to
  78+ 7D55              // disk before reading the block n.
  79+ 7D55
  80+ 7D55                              Colon_Def BUFFER, "BUFFER", is_normal
  80+ 7D55             >                New_Def  BUFFER, "BUFFER", Enter_Ptr, is_normal ; ok
  80+ 7D55             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  80+ 7D55             >
  80+ 7D55             >                // dummy db directives used to calculate length of namec
  80+ 7D55 42 55 46 46 >                db      "BUFFER"
  80+ 7D59 45 52       >
  80+ 7D5B             >len_NFA         defl    $ - temp_NFA
  80+ 7D5B             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  80+ 7D55             >
  80+ 7D55 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  80+ 7D56 42 55 46 46 >                db      "BUFFER"               // name string in 7-bit ascii, but
  80+ 7D5A 45 52       >
  80+ 7D5C             >                org     $-1                 // alter last byte of Name just above to set
  80+ 7D5B D2          >                db      {b $} | END_BIT     // msb as name end
  80+ 7D5C             >
  80+ 7D5C 33 7D       >                dw      last_NFA            // Link to previous definition Name
  80+ 7D5E             >BUFFER:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
  80+ 7D5E 56 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
  80+ 7D60             >                else
  80+ 7D60 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
  80+ 7D60             >                endif           ; ok        // for other definitions it "points" the correct handler
  80+ 7D60             >                // Use of "; ok" to suppress "warning[fwdref]"
  80+ 7D60             >
  80+ 7D60             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  81+ 7D60 5B 6E 6B 6B                  dw      USE, FETCH              // use @
  82+ 7D64 D8 6A 80 69                  dw      DUP, TO_R               // dup >r
  83+ 7D68                                                              // begin
  84+ 7D68              Buffer_Begin:
  85+ 7D68 F0 7C                        dw          PBUF                //      +buf
  86+ 7D6A                                                              // until
  87+ 7D6A E3 63                        dw      ZBRANCH
  88+ 7D6C FC FF                        dw      Buffer_Begin - $
  89+ 7D6E 5B 6E 78 6B                  dw      USE, STORE              // use !
  90+ 7D72 A8 69 6B 6B                  dw      R_OP, FETCH, ZLESS      // r @ 0<
  90+ 7D76 D0 69
  91+ 7D78                                                              // if
  92+ 7D78 E3 63                        dw      ZBRANCH
  93+ 7D7A 14 00                        dw      Buffer_Endif - $
  94+ 7D7C A8 69 41 6A                  dw          R_OP, CELL_PLUS     //      r cell+
  95+ 7D80 A8 69 6B 6B                  dw          R_OP, FETCH         //      r fetch
  96+ 7D84 A9 63 FF 7F                  dw          LIT, $7FFF          //      7FFF
  97+ 7D88 E2 68                        dw          AND_OP              //      and
  98+ 7D8A D1 6C BF 7C                  dw          ZERO, READ_WRITE    //      0 r/w
  99+ 7D8E              Buffer_Endif:                                   // endif
 100+ 7D8E A8 69 78 6B                  dw      R_OP, STORE             // r !
 101+ 7D92 A8 69 65 6E                  dw      R_OP, PREV, STORE       // r prev !
 101+ 7D96 78 6B
 102+ 7D98 94 69 41 6A                  dw      R_TO, CELL_PLUS         // r> cell+
 103+ 7D9C 52 69                        dw      EXIT                    // ;
 104+ 7D9E
 105+ 7D9E              //  ______________________________________________________________________
 106+ 7D9E              //
 107+ 7D9E              // block        n -- a
 108+ 7D9E              // Leaves the buffer address that contains the block n.
 109+ 7D9E              // If the block is not already present, it will be loaded from disk
 110+ 7D9E              // The block previously inside the buffer, if modified, is rewritten to
 111+ 7D9E              // disk before reading the block n.
 112+ 7D9E              // See also BUFFER, R/W, UPDATE, FLUSH.
 113+ 7D9E
 114+ 7D9E                              Colon_Def BLOCK, "BLOCK", is_normal
 114+ 7D9E             >                New_Def  BLOCK, "BLOCK", Enter_Ptr, is_normal ; ok
 114+ 7D9E             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 114+ 7D9E             >
 114+ 7D9E             >                // dummy db directives used to calculate length of namec
 114+ 7D9E 42 4C 4F 43 >                db      "BLOCK"
 114+ 7DA2 4B          >
 114+ 7DA3             >len_NFA         defl    $ - temp_NFA
 114+ 7DA3             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 114+ 7D9E             >
 114+ 7D9E 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 114+ 7D9F 42 4C 4F 43 >                db      "BLOCK"               // name string in 7-bit ascii, but
 114+ 7DA3 4B          >
 114+ 7DA4             >                org     $-1                 // alter last byte of Name just above to set
 114+ 7DA3 CB          >                db      {b $} | END_BIT     // msb as name end
 114+ 7DA4             >
 114+ 7DA4 55 7D       >                dw      last_NFA            // Link to previous definition Name
 114+ 7DA6             >BLOCK:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 114+ 7DA6 56 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 114+ 7DA8             >                else
 114+ 7DA8 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 114+ 7DA8             >                endif           ; ok        // for other definitions it "points" the correct handler
 114+ 7DA8             >                // Use of "; ok" to suppress "warning[fwdref]"
 114+ 7DA8             >
 114+ 7DA8             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 115+ 7DA8 F7 6D 6B 6B                  dw      OFFSET, FETCH           // offset @
 116+ 7DAC F8 69 80 69                  dw      PLUS, TO_R              // + >r
 117+ 7DB0 65 6E 6B 6B                  dw      PREV, FETCH             // prev @
 118+ 7DB4 D8 6A 6B 6B                  dw      DUP, FETCH              // dup @
 119+ 7DB8 A8 69 03 6F                  dw      R_OP, SUBTRACT          // r -
 120+ 7DBC D8 6A F8 69                  dw      DUP, PLUS               // dup +  ( trick: check equality without most significant bit )
 121+ 7DC0                                                              // if
 122+ 7DC0 E3 63                        dw        ZBRANCH
 123+ 7DC2 32 00                        dw        Block_Endif_1 - $
 124+ 7DC4              Block_Begin:                                    //      begin
 125+ 7DC4 F0 7C B5 69                  dw          PBUF, ZEQUAL        //          +buf 0
 126+ 7DC8                                                              //          if
 127+ 7DC8 E3 63                        dw          ZBRANCH
 128+ 7DCA 12 00                        dw          Block_Endif_2 - $
 129+ 7DCC A3 6A                        dw              DROP            //              drop
 130+ 7DCE A8 69 5E 7D                  dw              R_OP, BUFFER    //              r buffer
 131+ 7DD2 D8 6A                        dw              DUP             //              dup
 132+ 7DD4 A8 69 D9 6C                  dw              R_OP, ONE       //              r 1
 133+ 7DD8 BF 7C                        dw              READ_WRITE      //              r/w
 134+ 7DDA 58 6A                        dw              TWO_MINUS       //              2-
 135+ 7DDC              Block_Endif_2:                                  //          endif
 136+ 7DDC D8 6A 6B 6B                  dw          DUP, FETCH, R_OP    //          dup @ r
 136+ 7DE0 A8 69
 137+ 7DE2 03 6F D8 6A                  dw          SUBTRACT, DUP       //          - dup
 138+ 7DE6 F8 69 B5 69                  dw          PLUS, ZEQUAL        //          + 0=
 139+ 7DEA                                                              //      until
 140+ 7DEA E3 63                        dw        ZBRANCH
 141+ 7DEC D8 FF                        dw        Block_Begin - $
 142+ 7DEE D8 6A 65 6E                  dw        DUP, PREV, STORE      //      dup prev !
 142+ 7DF2 78 6B
 143+ 7DF4              Block_Endif_1:                                  // endif
 144+ 7DF4 94 69 A3 6A                  dw      R_TO, DROP, CELL_PLUS   // r> drop cell+
 144+ 7DF8 41 6A
 145+ 7DFA 52 69                        dw      EXIT                    // ;
 146+ 7DFC
 147+ 7DFC              //  ______________________________________________________________________
 148+ 7DFC              //
 149+ 7DFC              // #buff        -- n
 150+ 7DFC              // number of buffers available. must be the difference between LIMIT and FIRST divided by 516
 151+ 7DFC                              Constant_Def NBUFF,   "#BUFF", 7
 151+ 7DFC             >                New_Def  NBUFF, "#BUFF", Constant_Ptr, is_normal
 151+ 7DFC             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 151+ 7DFC             >
 151+ 7DFC             >                // dummy db directives used to calculate length of namec
 151+ 7DFC 23 42 55 46 >                db      "#BUFF"
 151+ 7E00 46          >
 151+ 7E01             >len_NFA         defl    $ - temp_NFA
 151+ 7E01             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 151+ 7DFC             >
 151+ 7DFC 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 151+ 7DFD 23 42 55 46 >                db      "#BUFF"               // name string in 7-bit ascii, but
 151+ 7E01 46          >
 151+ 7E02             >                org     $-1                 // alter last byte of Name just above to set
 151+ 7E01 C6          >                db      {b $} | END_BIT     // msb as name end
 151+ 7E02             >
 151+ 7E02 9E 7D       >                dw      last_NFA            // Link to previous definition Name
 151+ 7E04             >NBUFF:          if Constant_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 151+ 7E04 95 6C       >                dw      Constant_Ptr ; ok        // for primitive definitions  actual code
 151+ 7E06             >                else
 151+ 7E06 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 151+ 7E06             >                endif           ; ok        // for other definitions it "points" the correct handler
 151+ 7E06             >                // Use of "; ok" to suppress "warning[fwdref]"
 151+ 7E06             >
 151+ 7E06             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 151+ 7E06 07 00       >                dw      7
 152+ 7E08
 153+ 7E08              //  ______________________________________________________________________
 154+ 7E08              //
 155+ 7E08              // flush        --
 156+ 7E08                              Colon_Def FLUSH, "FLUSH", is_normal
 156+ 7E08             >                New_Def  FLUSH, "FLUSH", Enter_Ptr, is_normal ; ok
 156+ 7E08             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 156+ 7E08             >
 156+ 7E08             >                // dummy db directives used to calculate length of namec
 156+ 7E08 46 4C 55 53 >                db      "FLUSH"
 156+ 7E0C 48          >
 156+ 7E0D             >len_NFA         defl    $ - temp_NFA
 156+ 7E0D             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 156+ 7E08             >
 156+ 7E08 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 156+ 7E09 46 4C 55 53 >                db      "FLUSH"               // name string in 7-bit ascii, but
 156+ 7E0D 48          >
 156+ 7E0E             >                org     $-1                 // alter last byte of Name just above to set
 156+ 7E0D C8          >                db      {b $} | END_BIT     // msb as name end
 156+ 7E0E             >
 156+ 7E0E FC 7D       >                dw      last_NFA            // Link to previous definition Name
 156+ 7E10             >FLUSH:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 156+ 7E10 56 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 156+ 7E12             >                else
 156+ 7E12 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 156+ 7E12             >                endif           ; ok        // for other definitions it "points" the correct handler
 156+ 7E12             >                // Use of "; ok" to suppress "warning[fwdref]"
 156+ 7E12             >
 156+ 7E12             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 157+ 7E12 04 7E 19 6A                  dw      NBUFF, ONE_PLUS, ZERO   // #buff 1+ 0
 157+ 7E16 D1 6C
 158+ 7E18              Flush_Do:                                       // do
 159+ 7E18 70 64                        dw      C_DO
 160+ 7E1A D1 6C 5E 7D                  dw      ZERO, BUFFER, DROP      //      0 buffer drop
 160+ 7E1E A3 6A
 161+ 7E20                                                              // loop
 162+ 7E20 31 64 F8 FF                  dw      C_LOOP, Flush_Do - $
 163+ 7E24 E7 7B 6B 6B                  dw      BLK_FH, FETCH           // blk-fh @     ( ZX-Next dependance )
 164+ 7E28 78 67 A3 6A                  dw      F_SYNC, DROP            // f_sync drop
 165+ 7E2C 52 69                        dw      EXIT                    // exit
 166+ 7E2E
 167+ 7E2E              //  ______________________________________________________________________
 168+ 7E2E              //
 169+ 7E2E              // f_getline    a m fh -- n
 170+ 7E2E              // Given an open filehandle read next line (terminated with $0D or $0A)
 171+ 7E2E              // Address a is left for subsequent processing
 172+ 7E2E              // and n as the actual number of byte read, that is the length of line
 173+ 7E2E                              Colon_Def F_GETLINE, "F_GETLINE", is_normal
 173+ 7E2E             >                New_Def  F_GETLINE, "F_GETLINE", Enter_Ptr, is_normal ; ok
 173+ 7E2E             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 173+ 7E2E             >
 173+ 7E2E             >                // dummy db directives used to calculate length of namec
 173+ 7E2E 46 5F 47 45 >                db      "F_GETLINE"
 173+ 7E32 54 4C 49 4E >
 173+ 7E36 45          >
 173+ 7E37             >len_NFA         defl    $ - temp_NFA
 173+ 7E37             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 173+ 7E2E             >
 173+ 7E2E 89          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 173+ 7E2F 46 5F 47 45 >                db      "F_GETLINE"               // name string in 7-bit ascii, but
 173+ 7E33 54 4C 49 4E >
 173+ 7E37 45          >
 173+ 7E38             >                org     $-1                 // alter last byte of Name just above to set
 173+ 7E37 C5          >                db      {b $} | END_BIT     // msb as name end
 173+ 7E38             >
 173+ 7E38 08 7E       >                dw      last_NFA            // Link to previous definition Name
 173+ 7E3A             >F_GETLINE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 173+ 7E3A 56 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 173+ 7E3C             >                else
 173+ 7E3C ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 173+ 7E3C             >                endif           ; ok        // for other definitions it "points" the correct handler
 173+ 7E3C             >                // Use of "; ok" to suppress "warning[fwdref]"
 173+ 7E3C             >
 173+ 7E3C             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 174+ 7E3C 80 69                        dw      TO_R                    // >r               ( a  m  )     \  fh
 175+ 7E3E BB 6A                        dw      TUCK                    // tuck             ( m a m )
 176+ 7E40 A8 69 8F 67                  dw      R_OP, F_FGETPOS         // r f_fgetpos      ( m a m d f )
 177+ 7E44 A9 63 2C 00                  dw      LIT, 44, QERROR         // 44 ?error        ( m a m d )
 177+ 7E48 7A 70
 178+ 7E4A
 179+ 7E4A 27 6B 93 6A                  dw      TWO_SWAP, OVER          // 2swap over       ( m d a m )
 180+ 7E4E 19 6A CB 6A                  dw      ONE_PLUS, SWAP          // 1+ swap          ( m d a a+1 m )
 181+ 7E52
 182+ 7E52 A8 69 AD 67                  dw      R_OP, F_READ            // r f_read         ( m d a n f )
 183+ 7E56 A9 63 2E 00                  dw      LIT, 46, QERROR         // 46 ?error        ( m d a n )
 183+ 7E5A 7A 70
 184+ 7E5C                                                              // if ( at least 1 chr was read )  \  fh
 185+ 7E5C E3 63                        dw      ZBRANCH
 186+ 7E5E 3C 00                        dw      FGetline_Else - $
 187+ 7E60 A9 63 0A 00                  dw          LIT, 10, ENCLOSE    //      10 enclose       ( m d a x b x )
 187+ 7E64 69 65
 188+ 7E66 A3 6A AE 6A                  dw          DROP, NIP           //      drop nip         ( m d a b )
 189+ 7E6A CB 6A                        dw          SWAP                //      drop swap        ( m d b a )
 190+ 7E6C A9 63 0D 00                  dw          LIT, 13, ENCLOSE    //      13 enclose       ( m d b a x c x )
 190+ 7E70 69 65
 191+ 7E72 A3 6A AE 6A                  dw          DROP, NIP           //      drop nip         ( m d b a c )
 192+ 7E76 E5 6A 5C 6F                  dw          ROT, MIN            //      rot min          ( m d a n )
 193+ 7E7A D8 6A 91 6E                  dw          DUP, SPAN, STORE    //      dup span !       ( m d a n )
 193+ 7E7E 78 6B
 194+ 7E80 D8 6A 80 69                  dw          DUP, TO_R           //      dup >r           ( m d a n )      \ fh n
 195+ 7E84 27 6B 94 69                  dw          TWO_SWAP, R_TO      //      2swap r>         ( m a n d n )    \ fh
 196+ 7E88 D1 6C 05 6A                  dw          ZERO, DPLUS         //      0 d+             ( m a n d+n )
 197+ 7E8C 94 69 41 67                  dw          R_TO, F_SEEK        //      r> f_seek        ( m a n f )
 198+ 7E90 A9 63 2D 00                  dw          LIT, 45, QERROR     //      45 ?error        ( m a n )
 198+ 7E94 7A 70
 199+ 7E96                                                              // else
 200+ 7E96 CC 63                        dw      BRANCH
 201+ 7E98 0C 00                        dw      FGetline_Endif - $
 202+ 7E9A              FGetline_Else:
 203+ 7E9A 94 69                        dw          R_TO                //      r>              ( m d a fh )
 204+ 7E9C 27 6B 19 6B                  dw          TWO_SWAP, TWO_DROP  //      2swap 2drop     ( m a fh )
 205+ 7EA0 A3 6A D1 6C                  dw          DROP, ZERO          //      drop, 0         ( m a 0 )
 206+ 7EA4              FGetline_Endif:                                 // endif
 207+ 7EA4 80 69 D8 6A                  dw      TO_R, DUP, DUP          // >r dup dup           ( m a a a )
 207+ 7EA8 D8 6A
 208+ 7EAA 19 6A CB 6A                  dw      ONE_PLUS, SWAP          // 1+ swap              ( m a a+1 a )
 209+ 7EAE A8 69 42 68                  dw      R_OP, CMOVE             // r cmove              ( m a )
 210+ 7EB2 39 6B F8 69                  dw      TWO_DUP, PLUS           // 2dup +               ( m a m+a )
 211+ 7EB6 D1 6C CB 6A                  dw      ZERO, SWAP              // 0 swap
 212+ 7EBA 4B 6A 78 6B                  dw      CELL_MINUS,  STORE      // cell-  !             ( m a )
 213+ 7EBE A8 69 F8 69                  dw      R_OP, PLUS, ONE_SUBTRACT// r + 1-               ( m a+n1 )
 213+ 7EC2 25 6A
 214+ 7EC4 CB 6A A8 69                  dw      SWAP, R_OP, SUBTRACT    // swap r -             ( a+n+1 m-n )
 214+ 7EC8 03 6F
 215+ 7ECA C7 73                        dw      BLANKS                  // blanks
 216+ 7ECC 94 69                        dw      R_TO                    // r>                   ( n )
 217+ 7ECE 52 69                        dw      EXIT                    // ;
 218+ 7ED0
 219+ 7ED0              //  ______________________________________________________________________
 220+ 7ED0              //
 221+ 7ED0              // f_include    fh --
 222+ 7ED0              // Given a filehandle includes the source from file
 223+ 7ED0                              Colon_Def F_INCLUDE, "F_INCLUDE", is_normal
 223+ 7ED0             >                New_Def  F_INCLUDE, "F_INCLUDE", Enter_Ptr, is_normal ; ok
 223+ 7ED0             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 223+ 7ED0             >
 223+ 7ED0             >                // dummy db directives used to calculate length of namec
 223+ 7ED0 46 5F 49 4E >                db      "F_INCLUDE"
 223+ 7ED4 43 4C 55 44 >
 223+ 7ED8 45          >
 223+ 7ED9             >len_NFA         defl    $ - temp_NFA
 223+ 7ED9             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 223+ 7ED0             >
 223+ 7ED0 89          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 223+ 7ED1 46 5F 49 4E >                db      "F_INCLUDE"               // name string in 7-bit ascii, but
 223+ 7ED5 43 4C 55 44 >
 223+ 7ED9 45          >
 223+ 7EDA             >                org     $-1                 // alter last byte of Name just above to set
 223+ 7ED9 C5          >                db      {b $} | END_BIT     // msb as name end
 223+ 7EDA             >
 223+ 7EDA 2E 7E       >                dw      last_NFA            // Link to previous definition Name
 223+ 7EDC             >F_INCLUDE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 223+ 7EDC 56 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 223+ 7EDE             >                else
 223+ 7EDE ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 223+ 7EDE             >                endif           ; ok        // for other definitions it "points" the correct handler
 223+ 7EDE             >                // Use of "; ok" to suppress "warning[fwdref]"
 223+ 7EDE             >
 223+ 7EDE             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 224+ 7EDE D0 6D 6B 6B                  dw      BLK, FETCH, TO_R        // blk @ >r
 224+ 7EE2 80 69
 225+ 7EE4 D9 6D 6B 6B                  dw      TO_IN, FETCH, TO_R      // >in @ >r
 225+ 7EE8 80 69
 226+ 7EEA 87 6E 6B 6B                  dw      SOURCE_ID, FETCH, TO_R  // source-id @ >r
 226+ 7EEE 80 69
 227+ 7EF0 A8 69                        dw      R_OP                    // r
 228+ 7EF2                                                              // if
 229+ 7EF2 E3 63                        dw      ZBRANCH
 230+ 7EF4 20 00                        dw      FInclude_Else_1 - $
 231+ 7EF6 A8 69 8F 67                  dw          R_OP, F_FGETPOS     //      r f_getpos
 232+ 7EFA A9 63 2C 00                  dw          LIT, 44, QERROR     //      44 ?error
 232+ 7EFE 7A 70
 233+ 7F00 D9 6D 6B 6B                  dw          TO_IN, FETCH        //      >in @ 2-
 234+ 7F04 58 6A                        dw          TWO_MINUS
 235+ 7F06 91 6E 6B 6B                  dw          SPAN, FETCH         //      span @ -
 236+ 7F0A 03 6F                        dw          SUBTRACT
 237+ 7F0C EF 6E 05 6A                  dw          S_TO_D, DPLUS       //      s>d d+
 238+ 7F10                                                              // else
 239+ 7F10 CC 63                        dw      BRANCH
 240+ 7F12 06 00                        dw      FInclude_Endif_1 - $
 241+ 7F14              FInclude_Else_1:
 242+ 7F14 D1 6C D1 6C                  dw          ZERO, ZERO          //      0 0
 243+ 7F18                                                              // endif
 244+ 7F18              FInclude_Endif_1:
 245+ 7F18 80 69 80 69                  dw      TO_R, TO_R              // >r >r
 246+ 7F1C 87 6E 78 6B                  dw      SOURCE_ID, STORE        // source-id !
 247+ 7F20              FInclude_Begin:                                 // begin
 248+ 7F20 D9 6C A6 7D                  dw          ONE, BLOCK, BBUF    //      1 block b/buf
 248+ 7F24 11 6D
 249+ 7F26 39 6B C7 73                  dw          TWO_DUP, BLANKS     //      2dup blanks
 250+ 7F2A CB 6A 19 6A                  dw          SWAP, ONE_PLUS      //      swap 1+
 251+ 7F2E CB 6A 4B 6A                  dw          SWAP, CELL_MINUS    //      swap cell-
 252+ 7F32 87 6E 6B 6B                  dw          SOURCE_ID, FETCH    //      source-id @
 253+ 7F36 3A 7E                        dw          F_GETLINE           //      f_getline
 254+ 7F38                                                              // while
 255+ 7F38 E3 63                        dw      ZBRANCH
 256+ 7F3A 14 00                        dw      FInclude_Repeat - $
 257+ 7F3C D9 6C D0 6D                  dw          ONE, BLK, STORE     //      1 blk !
 257+ 7F40 78 6B
 258+ 7F42 D1 6C D9 6D                  dw          ZERO, TO_IN, STORE  //      0 >in !
 258+ 7F46 78 6B
 259+ 7F48 9F 77                        dw          INTERPRET           //      interpret
 260+ 7F4A CC 63                        dw      BRANCH
 261+ 7F4C D4 FF                        dw      FInclude_Begin - $
 262+ 7F4E              FInclude_Repeat:                                // repeat
 263+ 7F4E 87 6E 6B 6B                  dw      SOURCE_ID, FETCH        // source-id @
 264+ 7F52 D1 6C 87 6E                  dw      ZERO, SOURCE_ID, STORE  // 0 source-id !
 264+ 7F56 78 6B
 265+ 7F58 64 67                        dw      F_CLOSE                 // f_close
 266+ 7F5A A9 63 2A 00                  dw      LIT, 42, QERROR         // 42 ?error
 266+ 7F5E 7A 70
 267+ 7F60 94 69 94 69                  dw      R_TO, R_TO, R_TO        // r> r> r>
 267+ 7F64 94 69
 268+ 7F66 D8 6A 87 6E                  dw      DUP, SOURCE_ID, STORE   // dup source-id !
 268+ 7F6A 78 6B
 269+ 7F6C                                                              // if
 270+ 7F6C E3 63                        dw      ZBRANCH
 271+ 7F6E 12 00                        dw      FInclude_Else_2 - $
 272+ 7F70 87 6E 6B 6B                  dw          SOURCE_ID, FETCH    //      source-id @
 273+ 7F74 41 67                        dw          F_SEEK              //      f_seek
 274+ 7F76 A9 63 2B 00                  dw          LIT, 43, QERROR     //      43, ?error
 274+ 7F7A 7A 70
 275+ 7F7C                                                              // else
 276+ 7F7C CC 63                        dw      BRANCH
 277+ 7F7E 04 00                        dw      FInclude_Endif_2 - $
 278+ 7F80              FInclude_Else_2:
 279+ 7F80 19 6B                        dw          TWO_DROP            //      2drop
 280+ 7F82              FInclude_Endif_2:                               // endif
 281+ 7F82 94 69 D9 6D                  dw      R_TO, TO_IN, STORE      // r> >in !
 281+ 7F86 78 6B
 282+ 7F88 94 69 D0 6D                  dw      R_TO, BLK, STORE        // r> blk !
 282+ 7F8C 78 6B
 283+ 7F8E 52 69                        dw      EXIT                    // ;
 284+ 7F90
 285+ 7F90              //  ______________________________________________________________________
 286+ 7F90              //
 287+ 7F90              // open<         -- fh
 288+ 7F90              // Open the following filename and return it file-handle
 289+ 7F90              // Used in the form OPEN CCCC
 290+ 7F90                              Colon_Def OPEN_FH, "OPEN<", is_normal
 290+ 7F90             >                New_Def  OPEN_FH, "OPEN<", Enter_Ptr, is_normal ; ok
 290+ 7F90             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 290+ 7F90             >
 290+ 7F90             >                // dummy db directives used to calculate length of namec
 290+ 7F90 4F 50 45 4E >                db      "OPEN<"
 290+ 7F94 3C          >
 290+ 7F95             >len_NFA         defl    $ - temp_NFA
 290+ 7F95             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 290+ 7F90             >
 290+ 7F90 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 290+ 7F91 4F 50 45 4E >                db      "OPEN<"               // name string in 7-bit ascii, but
 290+ 7F95 3C          >
 290+ 7F96             >                org     $-1                 // alter last byte of Name just above to set
 290+ 7F95 BC          >                db      {b $} | END_BIT     // msb as name end
 290+ 7F96             >
 290+ 7F96 D0 7E       >                dw      last_NFA            // Link to previous definition Name
 290+ 7F98             >OPEN_FH:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 290+ 7F98 56 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 290+ 7F9A             >                else
 290+ 7F9A ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 290+ 7F9A             >                endif           ; ok        // for other definitions it "points" the correct handler
 290+ 7F9A             >                // Use of "; ok" to suppress "warning[fwdref]"
 290+ 7F9A             >
 290+ 7F9A             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 291+ 7F9A FB 6C                        dw      BL
 292+ 7F9C FF 73 14 72                  dw      WORD, COUNT, OVER       // bl word count over
 292+ 7FA0 93 6A
 293+ 7FA2 F8 69 D1 6C                  dw      PLUS, ZERO, SWAP, STORE // + 0 swap !
 293+ 7FA6 CB 6A 78 6B
 294+ 7FAA EC 73 D9 6C                  dw      PAD, ONE, F_OPEN        // pad 1 f_open
 294+ 7FAE E3 67
 295+ 7FB0 A9 63 2B 00                  dw      LIT, 43                 // 43
 296+ 7FB4 7A 70                        dw      QERROR                  // ?error
 297+ 7FB6 52 69                        dw      EXIT                    // ;
 298+ 7FB8
 299+ 7FB8              //  ______________________________________________________________________
 300+ 7FB8              //
 301+ 7FB8              // include      -- cccc
 302+ 7FB8              // Include the following filename
 303+ 7FB8                              Colon_Def INCLUDE, "INCLUDE", is_normal
 303+ 7FB8             >                New_Def  INCLUDE, "INCLUDE", Enter_Ptr, is_normal ; ok
 303+ 7FB8             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 303+ 7FB8             >
 303+ 7FB8             >                // dummy db directives used to calculate length of namec
 303+ 7FB8 49 4E 43 4C >                db      "INCLUDE"
 303+ 7FBC 55 44 45    >
 303+ 7FBF             >len_NFA         defl    $ - temp_NFA
 303+ 7FBF             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 303+ 7FB8             >
 303+ 7FB8 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 303+ 7FB9 49 4E 43 4C >                db      "INCLUDE"               // name string in 7-bit ascii, but
 303+ 7FBD 55 44 45    >
 303+ 7FC0             >                org     $-1                 // alter last byte of Name just above to set
 303+ 7FBF C5          >                db      {b $} | END_BIT     // msb as name end
 303+ 7FC0             >
 303+ 7FC0 90 7F       >                dw      last_NFA            // Link to previous definition Name
 303+ 7FC2             >INCLUDE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 303+ 7FC2 56 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 303+ 7FC4             >                else
 303+ 7FC4 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 303+ 7FC4             >                endif           ; ok        // for other definitions it "points" the correct handler
 303+ 7FC4             >                // Use of "; ok" to suppress "warning[fwdref]"
 303+ 7FC4             >
 303+ 7FC4             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 304+ 7FC4 98 7F                        dw      OPEN_FH                 // open
 305+ 7FC6 D8 6A DC 7E                  dw      DUP, F_INCLUDE          // dup f_include
 306+ 7FCA 64 67 A3 6A                  dw      F_CLOSE, DROP           // f_close drop
 307+ 7FCE 52 69                        dw      EXIT                    // ;
 308+ 7FD0
 309+ 7FD0              //  ______________________________________________________________________
 310+ 7FD0              //
 311+ 7FD0              // needs
 312+ 7FD0              // check for cccc exists in vocabulary
 313+ 7FD0              // if it doesn't then  INCLUDE  inc/cccc.F
 314+ 7FD0
 315+ 7FD0              // temp filename cccc.f as counted string zero-padded
 316+ 7FD0                              New_Def NEEDS_W,   "NEEDS-W", Create_Ptr, is_normal
 316+ 7FD0             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 316+ 7FD0             >
 316+ 7FD0             >                // dummy db directives used to calculate length of namec
 316+ 7FD0 4E 45 45 44 >                db      "NEEDS-W"
 316+ 7FD4 53 2D 57    >
 316+ 7FD7             >len_NFA         defl    $ - temp_NFA
 316+ 7FD7             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 316+ 7FD0             >
 316+ 7FD0 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 316+ 7FD1 4E 45 45 44 >                db      "NEEDS-W"               // name string in 7-bit ascii, but
 316+ 7FD5 53 2D 57    >
 316+ 7FD8             >                org     $-1                 // alter last byte of Name just above to set
 316+ 7FD7 D7          >                db      {b $} | END_BIT     // msb as name end
 316+ 7FD8             >
 316+ 7FD8 B8 7F       >                dw      last_NFA            // Link to previous definition Name
 316+ 7FDA             >NEEDS_W:          if Create_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 316+ 7FDA B2 76       >                dw      Create_Ptr ; ok        // for primitive definitions  actual code
 316+ 7FDC             >                else
 316+ 7FDC ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 316+ 7FDC             >                endif           ; ok        // for other definitions it "points" the correct handler
 316+ 7FDC             >                // Use of "; ok" to suppress "warning[fwdref]"
 316+ 7FDC             >
 316+ 7FDC             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 317+ 7FDC 00 00 00...                  ds      35                      // 32 + .f + 0x00 = len 35
 318+ 7FFF              // temp complete path+filename
 319+ 7FFF                              New_Def NEEDS_FN,  "NEEDS-FN", Create_Ptr, is_normal
 319+ 7FFF             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 319+ 7FFF             >
 319+ 7FFF             >                // dummy db directives used to calculate length of namec
 319+ 7FFF 4E 45 45 44 >                db      "NEEDS-FN"
 319+ 8003 53 2D 46 4E >
 319+ 8007             >len_NFA         defl    $ - temp_NFA
 319+ 8007             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 319+ 7FFF             >
 319+ 7FFF 88          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 319+ 8000 4E 45 45 44 >                db      "NEEDS-FN"               // name string in 7-bit ascii, but
 319+ 8004 53 2D 46 4E >
 319+ 8008             >                org     $-1                 // alter last byte of Name just above to set
 319+ 8007 CE          >                db      {b $} | END_BIT     // msb as name end
 319+ 8008             >
 319+ 8008 D0 7F       >                dw      last_NFA            // Link to previous definition Name
 319+ 800A             >NEEDS_FN:          if Create_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 319+ 800A B2 76       >                dw      Create_Ptr ; ok        // for primitive definitions  actual code
 319+ 800C             >                else
 319+ 800C ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 319+ 800C             >                endif           ; ok        // for other definitions it "points" the correct handler
 319+ 800C             >                // Use of "; ok" to suppress "warning[fwdref]"
 319+ 800C             >
 319+ 800C             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 320+ 800C 00 00 00...                  ds      40
 321+ 8034              // constant path
 322+ 8034                              New_Def NEEDS_INC,  "NEEDS-INC", Create_Ptr, is_normal
 322+ 8034             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 322+ 8034             >
 322+ 8034             >                // dummy db directives used to calculate length of namec
 322+ 8034 4E 45 45 44 >                db      "NEEDS-INC"
 322+ 8038 53 2D 49 4E >
 322+ 803C 43          >
 322+ 803D             >len_NFA         defl    $ - temp_NFA
 322+ 803D             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 322+ 8034             >
 322+ 8034 89          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 322+ 8035 4E 45 45 44 >                db      "NEEDS-INC"               // name string in 7-bit ascii, but
 322+ 8039 53 2D 49 4E >
 322+ 803D 43          >
 322+ 803E             >                org     $-1                 // alter last byte of Name just above to set
 322+ 803D C3          >                db      {b $} | END_BIT     // msb as name end
 322+ 803E             >
 322+ 803E FF 7F       >                dw      last_NFA            // Link to previous definition Name
 322+ 8040             >NEEDS_INC:          if Create_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 322+ 8040 B2 76       >                dw      Create_Ptr ; ok        // for primitive definitions  actual code
 322+ 8042             >                else
 322+ 8042 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 322+ 8042             >                endif           ; ok        // for other definitions it "points" the correct handler
 322+ 8042             >                // Use of "; ok" to suppress "warning[fwdref]"
 322+ 8042             >
 322+ 8042             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 323+ 8042 04 69 6E 63                  db      4, "inc/", 0
 323+ 8046 2F 00
 324+ 8048                              New_Def NEEDS_LIB,  "NEEDS-LIB", Create_Ptr, is_normal
 324+ 8048             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 324+ 8048             >
 324+ 8048             >                // dummy db directives used to calculate length of namec
 324+ 8048 4E 45 45 44 >                db      "NEEDS-LIB"
 324+ 804C 53 2D 4C 49 >
 324+ 8050 42          >
 324+ 8051             >len_NFA         defl    $ - temp_NFA
 324+ 8051             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 324+ 8048             >
 324+ 8048 89          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 324+ 8049 4E 45 45 44 >                db      "NEEDS-LIB"               // name string in 7-bit ascii, but
 324+ 804D 53 2D 4C 49 >
 324+ 8051 42          >
 324+ 8052             >                org     $-1                 // alter last byte of Name just above to set
 324+ 8051 C2          >                db      {b $} | END_BIT     // msb as name end
 324+ 8052             >
 324+ 8052 34 80       >                dw      last_NFA            // Link to previous definition Name
 324+ 8054             >NEEDS_LIB:          if Create_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 324+ 8054 B2 76       >                dw      Create_Ptr ; ok        // for primitive definitions  actual code
 324+ 8056             >                else
 324+ 8056 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 324+ 8056             >                endif           ; ok        // for other definitions it "points" the correct handler
 324+ 8056             >                // Use of "; ok" to suppress "warning[fwdref]"
 324+ 8056             >
 324+ 8056             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 325+ 8056 04 6C 69 62                  db      4, "lib/", 0
 325+ 805A 2F 00
 326+ 805C
 327+ 805C              // Concatenate path at a and filename and include it
 328+ 805C              // No error is issued if filename doesn't exist.
 329+ 805C                              Colon_Def NEEDS_SLASH, "NEEDS/", is_normal
 329+ 805C             >                New_Def  NEEDS_SLASH, "NEEDS/", Enter_Ptr, is_normal ; ok
 329+ 805C             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 329+ 805C             >
 329+ 805C             >                // dummy db directives used to calculate length of namec
 329+ 805C 4E 45 45 44 >                db      "NEEDS/"
 329+ 8060 53 2F       >
 329+ 8062             >len_NFA         defl    $ - temp_NFA
 329+ 8062             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 329+ 805C             >
 329+ 805C 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 329+ 805D 4E 45 45 44 >                db      "NEEDS/"               // name string in 7-bit ascii, but
 329+ 8061 53 2F       >
 329+ 8063             >                org     $-1                 // alter last byte of Name just above to set
 329+ 8062 AF          >                db      {b $} | END_BIT     // msb as name end
 329+ 8063             >
 329+ 8063 48 80       >                dw      last_NFA            // Link to previous definition Name
 329+ 8065             >NEEDS_SLASH:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 329+ 8065 56 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 329+ 8067             >                else
 329+ 8067 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 329+ 8067             >                endif           ; ok        // for other definitions it "points" the correct handler
 329+ 8067             >                // Use of "; ok" to suppress "warning[fwdref]"
 329+ 8067             >
 329+ 8067             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 330+ 8067 14 72 BB 6A                  dw      COUNT, TUCK             // n a n
 331+ 806B 0A 80 CB 6A                  dw      NEEDS_FN, SWAP, CMOVE   // n        \ Path
 331+ 806F 42 68
 332+ 8071 0A 80 F8 69                  dw      NEEDS_FN, PLUS          // a1+n     \ Concat
 333+ 8075 DA 7F 19 6A                  dw      NEEDS_W, ONE_PLUS, SWAP
 333+ 8079 CB 6A
 334+ 807B A9 63 23 00                  dw      LIT, 35
 335+ 807F 42 68                        dw      CMOVE
 336+ 8081 0A 80                        dw      NEEDS_FN
 337+ 8083 EC 73 D9 6C                  dw      PAD, ONE, F_OPEN
 337+ 8087 E3 67
 338+ 8089 B5 69                        dw      ZEQUAL
 339+ 808B E3 63                        dw      ZBRANCH
 340+ 808D 08 00                        dw      Needs_1 - $
 341+ 808F DC 7E                        dw          F_INCLUDE
 342+ 8091 CC 63                        dw      BRANCH
 343+ 8093 04 00                        dw      Needs_2 - $
 344+ 8095              Needs_1:
 345+ 8095              //              dw          NEEDS_W, COUNT, TYPE, SPACE
 346+ 8095              //              dw          LIT, 43, MESSAGE
 347+ 8095 A3 6A                        dw          DROP
 348+ 8097              Needs_2:
 349+ 8097 52 69                        dw      EXIT                    // ;
 350+ 8099
 351+ 8099
 352+ 8099                              New_Def NCDM,   "NCDM", Create_Ptr, is_normal
 352+ 8099             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 352+ 8099             >
 352+ 8099             >                // dummy db directives used to calculate length of namec
 352+ 8099 4E 43 44 4D >                db      "NCDM"
 352+ 809D             >len_NFA         defl    $ - temp_NFA
 352+ 809D             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 352+ 8099             >
 352+ 8099 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 352+ 809A 4E 43 44 4D >                db      "NCDM"               // name string in 7-bit ascii, but
 352+ 809E             >                org     $-1                 // alter last byte of Name just above to set
 352+ 809D CD          >                db      {b $} | END_BIT     // msb as name end
 352+ 809E             >
 352+ 809E 5C 80       >                dw      last_NFA            // Link to previous definition Name
 352+ 80A0             >NCDM:          if Create_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 352+ 80A0 B2 76       >                dw      Create_Ptr ; ok        // for primitive definitions  actual code
 352+ 80A2             >                else
 352+ 80A2 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 352+ 80A2             >                endif           ; ok        // for other definitions it "points" the correct handler
 352+ 80A2             >                // Use of "; ok" to suppress "warning[fwdref]"
 352+ 80A2             >
 352+ 80A2             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 353+ 80A2 25 5E 25 26                  db $25, $5E, $25, $26, $24, $5F, $7B, $7D, $7E
 353+ 80A6 24 5F 7B 7D
 353+ 80AA 7E
 354+ 80AB
 355+ 80AB                              New_Def NDOM,   "NDOM", Create_Ptr, is_normal
 355+ 80AB             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 355+ 80AB             >
 355+ 80AB             >                // dummy db directives used to calculate length of namec
 355+ 80AB 4E 44 4F 4D >                db      "NDOM"
 355+ 80AF             >len_NFA         defl    $ - temp_NFA
 355+ 80AF             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 355+ 80AB             >
 355+ 80AB 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 355+ 80AC 4E 44 4F 4D >                db      "NDOM"               // name string in 7-bit ascii, but
 355+ 80B0             >                org     $-1                 // alter last byte of Name just above to set
 355+ 80AF CD          >                db      {b $} | END_BIT     // msb as name end
 355+ 80B0             >
 355+ 80B0 99 80       >                dw      last_NFA            // Link to previous definition Name
 355+ 80B2             >NDOM:          if Create_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 355+ 80B2 B2 76       >                dw      Create_Ptr ; ok        // for primitive definitions  actual code
 355+ 80B4             >                else
 355+ 80B4 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 355+ 80B4             >                endif           ; ok        // for other definitions it "points" the correct handler
 355+ 80B4             >                // Use of "; ok" to suppress "warning[fwdref]"
 355+ 80B4             >
 355+ 80B4             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 356+ 80B4 3A 3F 2F 2A                  db $3A, $3F, $2F, $2A, $7C, $5C, $3C, $3E, $22
 356+ 80B8 7C 5C 3C 3E
 356+ 80BC 22
 357+ 80BD
 358+ 80BD
 359+ 80BD              // Replace illegal character in filename using the map here above
 360+ 80BD              // at the moment we need only  "
 361+ 80BD                              Colon_Def NEEDS_CHECK, "NEEDS-CH", is_normal
 361+ 80BD             >                New_Def  NEEDS_CHECK, "NEEDS-CH", Enter_Ptr, is_normal ; ok
 361+ 80BD             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 361+ 80BD             >
 361+ 80BD             >                // dummy db directives used to calculate length of namec
 361+ 80BD 4E 45 45 44 >                db      "NEEDS-CH"
 361+ 80C1 53 2D 43 48 >
 361+ 80C5             >len_NFA         defl    $ - temp_NFA
 361+ 80C5             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 361+ 80BD             >
 361+ 80BD 88          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 361+ 80BE 4E 45 45 44 >                db      "NEEDS-CH"               // name string in 7-bit ascii, but
 361+ 80C2 53 2D 43 48 >
 361+ 80C6             >                org     $-1                 // alter last byte of Name just above to set
 361+ 80C5 C8          >                db      {b $} | END_BIT     // msb as name end
 361+ 80C6             >
 361+ 80C6 AB 80       >                dw      last_NFA            // Link to previous definition Name
 361+ 80C8             >NEEDS_CHECK:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 361+ 80C8 56 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 361+ 80CA             >                else
 361+ 80CA ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 361+ 80CA             >                endif           ; ok        // for other definitions it "points" the correct handler
 361+ 80CA             >                // Use of "; ok" to suppress "warning[fwdref]"
 361+ 80CA             >
 361+ 80CA             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 362+ 80CA 14 72 29 72                  dw      COUNT, BOUNDS
 363+ 80CE 70 64                        dw      C_DO
 364+ 80D0              Needs_3:
 365+ 80D0 A0 80 B2 80                  dw          NCDM, NDOM, LIT, 9
 365+ 80D4 A9 63 09 00
 366+ 80D8 7B 64 86 6B                  dw          I, CFETCH
 367+ 80DC A3 65                        dw          C_MAP
 368+ 80DE 7B 64 94 6B                  dw          I, CSTORE
 369+ 80E2              Needs_4:
 370+ 80E2 31 64                        dw      C_LOOP
 371+ 80E4 EC FF                        dw      Needs_3 - $
 372+ 80E6 52 69                        dw      EXIT
 373+ 80E8
 374+ 80E8
 375+ 80E8              // include  "path/cccc.f" if cccc is not defined
 376+ 80E8              // filename cccc.f is temporary stored at NEEDS-W
 377+ 80E8                              Colon_Def NEEDS_PATH, "NEEDS-F", is_normal
 377+ 80E8             >                New_Def  NEEDS_PATH, "NEEDS-F", Enter_Ptr, is_normal ; ok
 377+ 80E8             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 377+ 80E8             >
 377+ 80E8             >                // dummy db directives used to calculate length of namec
 377+ 80E8 4E 45 45 44 >                db      "NEEDS-F"
 377+ 80EC 53 2D 46    >
 377+ 80EF             >len_NFA         defl    $ - temp_NFA
 377+ 80EF             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 377+ 80E8             >
 377+ 80E8 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 377+ 80E9 4E 45 45 44 >                db      "NEEDS-F"               // name string in 7-bit ascii, but
 377+ 80ED 53 2D 46    >
 377+ 80F0             >                org     $-1                 // alter last byte of Name just above to set
 377+ 80EF C6          >                db      {b $} | END_BIT     // msb as name end
 377+ 80F0             >
 377+ 80F0 BD 80       >                dw      last_NFA            // Link to previous definition Name
 377+ 80F2             >NEEDS_PATH:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 377+ 80F2 56 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 377+ 80F4             >                else
 377+ 80F4 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 377+ 80F4             >                endif           ; ok        // for other definitions it "points" the correct handler
 377+ 80F4             >                // Use of "; ok" to suppress "warning[fwdref]"
 377+ 80F4             >
 377+ 80F4             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 378+ 80F4 B1 75                        dw      LFIND
 379+ 80F6 E3 63                        dw      ZBRANCH
 380+ 80F8 0A 00                        dw      Needs_5 - $
 381+ 80FA
 382+ 80FA A3 6A 19 6B                  dw          DROP, TWO_DROP
 383+ 80FE CC 63                        dw      BRANCH
 384+ 8100 2C 00                        dw      Needs_6 - $
 385+ 8102              Needs_5:
 386+ 8102 DA 7F                        dw          NEEDS_W
 387+ 8104 A9 63 23 00                  dw          LIT, 35
 388+ 8108 B6 73                        dw          ERASE                   // a
 389+ 810A B0 6E 86 6B                  dw          HERE, CFETCH, ONE_PLUS  // a n
 389+ 810E 19 6A
 390+ 8110 B0 6E 93 6A                  dw          HERE, OVER              // a n here n
 391+ 8114 DA 7F CB 6A                  dw          NEEDS_W, SWAP, CMOVE    // a n
 391+ 8118 42 68
 392+ 811A DA 7F C8 80                  dw          NEEDS_W, NEEDS_CHECK
 393+ 811E DA 7F F8 69                  dw          NEEDS_W, PLUS           // a a1+1
 394+ 8122 A9 63 2E 66                  dw          LIT, $662E              // a a1+1 ".F"
 395+ 8126 CB 6A 78 6B                  dw          SWAP, STORE             // a
 396+ 812A 65 80                        dw          NEEDS_SLASH
 397+ 812C              Needs_6:
 398+ 812C 52 69                        dw      EXIT
 399+ 812E
 400+ 812E
 401+ 812E              // check for cccc exists in vocabulary
 402+ 812E              // if it doesn't then  INCLUDE  inc/cccc.F
 403+ 812E              // search in inc subdirectory
 404+ 812E                              Colon_Def NEEDS, "NEEDS", is_normal
 404+ 812E             >                New_Def  NEEDS, "NEEDS", Enter_Ptr, is_normal ; ok
 404+ 812E             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 404+ 812E             >
 404+ 812E             >                // dummy db directives used to calculate length of namec
 404+ 812E 4E 45 45 44 >                db      "NEEDS"
 404+ 8132 53          >
 404+ 8133             >len_NFA         defl    $ - temp_NFA
 404+ 8133             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 404+ 812E             >
 404+ 812E 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 404+ 812F 4E 45 45 44 >                db      "NEEDS"               // name string in 7-bit ascii, but
 404+ 8133 53          >
 404+ 8134             >                org     $-1                 // alter last byte of Name just above to set
 404+ 8133 D3          >                db      {b $} | END_BIT     // msb as name end
 404+ 8134             >
 404+ 8134 E8 80       >                dw      last_NFA            // Link to previous definition Name
 404+ 8136             >NEEDS:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 404+ 8136 56 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 404+ 8138             >                else
 404+ 8138 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 404+ 8138             >                endif           ; ok        // for other definitions it "points" the correct handler
 404+ 8138             >                // Use of "; ok" to suppress "warning[fwdref]"
 404+ 8138             >
 404+ 8138             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 405+ 8138 D9 6D 6B 6B                  dw      TO_IN, FETCH
 406+ 813C D8 6A                        dw      DUP
 407+ 813E 40 80 F2 80                  dw      NEEDS_INC, NEEDS_PATH
 408+ 8142 D9 6D 78 6B                  dw      TO_IN, STORE
 409+ 8146 54 80 F2 80                  dw      NEEDS_LIB, NEEDS_PATH
 410+ 814A D9 6D 78 6B                  dw      TO_IN, STORE
 411+ 814E B1 75                        dw      LFIND
 412+ 8150 E3 63                        dw      ZBRANCH
 413+ 8152 08 00                        dw      Needs_10 - $
 414+ 8154 19 6B                        dw          TWO_DROP
 415+ 8156 CC 63                        dw      BRANCH
 416+ 8158 10 00                        dw      Needs_11 - $
 417+ 815A              Needs_10:
 418+ 815A DA 7F 14 72                  dw      NEEDS_W, COUNT, TYPE, SPACE
 418+ 815E 3A 72 C0 6F
 419+ 8162 A9 63 2B 00                  dw      LIT, 43, MESSAGE
 419+ 8166 D1 7A
 420+ 8168              Needs_11:
 421+ 8168 52 69                        dw      EXIT
 422+ 816A
 423+ 816A
 424+ 816A              //  ______________________________________________________________________
 425+ 816A              //
 426+ 816A              // load+        n --
 427+ 816A                              Colon_Def LOAD_P, "LOAD+", is_normal
 427+ 816A             >                New_Def  LOAD_P, "LOAD+", Enter_Ptr, is_normal ; ok
 427+ 816A             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 427+ 816A             >
 427+ 816A             >                // dummy db directives used to calculate length of namec
 427+ 816A 4C 4F 41 44 >                db      "LOAD+"
 427+ 816E 2B          >
 427+ 816F             >len_NFA         defl    $ - temp_NFA
 427+ 816F             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 427+ 816A             >
 427+ 816A 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 427+ 816B 4C 4F 41 44 >                db      "LOAD+"               // name string in 7-bit ascii, but
 427+ 816F 2B          >
 427+ 8170             >                org     $-1                 // alter last byte of Name just above to set
 427+ 816F AB          >                db      {b $} | END_BIT     // msb as name end
 427+ 8170             >
 427+ 8170 2E 81       >                dw      last_NFA            // Link to previous definition Name
 427+ 8172             >LOAD_P:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 427+ 8172 56 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 427+ 8174             >                else
 427+ 8174 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 427+ 8174             >                endif           ; ok        // for other definitions it "points" the correct handler
 427+ 8174             >                // Use of "; ok" to suppress "warning[fwdref]"
 427+ 8174             >
 427+ 8174             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 428+ 8174 D0 6D 6B 6B                  dw      BLK, FETCH, TO_R        // blk @ >r
 428+ 8178 80 69
 429+ 817A D9 6D 6B 6B                  dw      TO_IN, FETCH, TO_R      // >in @ >r
 429+ 817E 80 69
 430+ 8180
 431+ 8180 D1 6C D9 6D                  dw      ZERO, TO_IN, STORE      // 0 >in !
 431+ 8184 78 6B
 432+ 8186 1D 6D 38 7A                  dw      BSCR, MUL, BLK, STORE   // b/scr * blk !
 432+ 818A D0 6D 78 6B
 433+ 818E 9F 77                        dw      INTERPRET               // interpret
 434+ 8190
 435+ 8190 94 69 D9 6D                  dw      R_TO, TO_IN, STORE      // r> >in !
 435+ 8194 78 6B
 436+ 8196 94 69 D0 6D                  dw      R_TO, BLK, STORE        // r> blk !
 436+ 819A 78 6B
 437+ 819C 52 69                        dw      EXIT                    // ;
 438+ 819E
 439+ 819E              //  ______________________________________________________________________
 440+ 819E              //
 441+ 819E              // -->          --
 442+ 819E                              Colon_Def LOAD_NEXT, "-->", is_immediate
 442+ 819E             >                New_Def  LOAD_NEXT, "-->", Enter_Ptr, is_immediate ; ok
 442+ 819E             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 442+ 819E             >
 442+ 819E             >                // dummy db directives used to calculate length of namec
 442+ 819E 2D 2D 3E    >                db      "-->"
 442+ 81A1             >len_NFA         defl    $ - temp_NFA
 442+ 81A1             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 442+ 819E             >
 442+ 819E C3          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 442+ 819F 2D 2D 3E    >                db      "-->"               // name string in 7-bit ascii, but
 442+ 81A2             >                org     $-1                 // alter last byte of Name just above to set
 442+ 81A1 BE          >                db      {b $} | END_BIT     // msb as name end
 442+ 81A2             >
 442+ 81A2 6A 81       >                dw      last_NFA            // Link to previous definition Name
 442+ 81A4             >LOAD_NEXT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 442+ 81A4 56 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 442+ 81A6             >                else
 442+ 81A6 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 442+ 81A6             >                endif           ; ok        // for other definitions it "points" the correct handler
 442+ 81A6             >                // Use of "; ok" to suppress "warning[fwdref]"
 442+ 81A6             >
 442+ 81A6             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 443+ 81A6 F3 70                        dw      QLOADING                // ?loading
 444+ 81A8 D1 6C D9 6D                  dw      ZERO, TO_IN, STORE      // 0 >in !
 444+ 81AC 78 6B
 445+ 81AE 1D 6D                        dw      BSCR                    // b/scr
 446+ 81B0 D0 6D 6B 6B                  dw      BLK, FETCH              // blk @
 447+ 81B4 93 6A                        dw      OVER                    // over
 448+ 81B6 65 7A                        dw      MOD                     // mod
 449+ 81B8 03 6F                        dw      SUBTRACT                // -
 450+ 81BA D0 6D 48 6B                  dw      BLK, PLUSSTORE          // +!
 451+ 81BE 52 69                        dw      EXIT                    // ;
 452+ 81C0
 453+ 81C0              //  ______________________________________________________________________
 454+ 81C0              //
 455+ 81C0              // '            -- xt
 456+ 81C0                              Colon_Def TICK, "'", is_normal
 456+ 81C0             >                New_Def  TICK, "'", Enter_Ptr, is_normal ; ok
 456+ 81C0             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 456+ 81C0             >
 456+ 81C0             >                // dummy db directives used to calculate length of namec
 456+ 81C0 27          >                db      "'"
 456+ 81C1             >len_NFA         defl    $ - temp_NFA
 456+ 81C1             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 456+ 81C0             >
 456+ 81C0 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 456+ 81C1 27          >                db      "'"               // name string in 7-bit ascii, but
 456+ 81C2             >                org     $-1                 // alter last byte of Name just above to set
 456+ 81C1 A7          >                db      {b $} | END_BIT     // msb as name end
 456+ 81C2             >
 456+ 81C2 9E 81       >                dw      last_NFA            // Link to previous definition Name
 456+ 81C4             >TICK:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 456+ 81C4 56 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 456+ 81C6             >                else
 456+ 81C6 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 456+ 81C6             >                endif           ; ok        // for other definitions it "points" the correct handler
 456+ 81C6             >                // Use of "; ok" to suppress "warning[fwdref]"
 456+ 81C6             >
 456+ 81C6             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 457+ 81C6 B1 75                        dw      LFIND                   // -find
 458+ 81C8 B5 69                        dw      ZEQUAL                  // 0=
 459+ 81CA D1 6C 7A 70                  dw      ZERO, QERROR            // 0 ?error
 460+ 81CE A3 6A                        dw      DROP                    // drop
 461+ 81D0 52 69                        dw      EXIT                    // ;
 462+ 81D2
 463+ 81D2              //  ______________________________________________________________________
 464+ 81D2              //
 465+ 81D2              // forget       -- cccc
 466+ 81D2                              Colon_Def FORGET, "FORGET", is_normal
 466+ 81D2             >                New_Def  FORGET, "FORGET", Enter_Ptr, is_normal ; ok
 466+ 81D2             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 466+ 81D2             >
 466+ 81D2             >                // dummy db directives used to calculate length of namec
 466+ 81D2 46 4F 52 47 >                db      "FORGET"
 466+ 81D6 45 54       >
 466+ 81D8             >len_NFA         defl    $ - temp_NFA
 466+ 81D8             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 466+ 81D2             >
 466+ 81D2 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 466+ 81D3 46 4F 52 47 >                db      "FORGET"               // name string in 7-bit ascii, but
 466+ 81D7 45 54       >
 466+ 81D9             >                org     $-1                 // alter last byte of Name just above to set
 466+ 81D8 D4          >                db      {b $} | END_BIT     // msb as name end
 466+ 81D9             >
 466+ 81D9 C0 81       >                dw      last_NFA            // Link to previous definition Name
 466+ 81DB             >FORGET:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 466+ 81DB 56 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 466+ 81DD             >                else
 466+ 81DD ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 466+ 81DD             >                endif           ; ok        // for other definitions it "points" the correct handler
 466+ 81DD             >                // Use of "; ok" to suppress "warning[fwdref]"
 466+ 81DD             >
 466+ 81DD             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 467+ 81DD 11 6E 6B 6B                  dw      CURRENT, FETCH          // current @
 468+ 81E1 04 6E 6B 6B                  dw      CONTEXT, FETCH          // context @
 469+ 81E5 03 6F A9 63                  dw      SUBTRACT, LIT, 23, QERROR // - 23 ?error
 469+ 81E9 17 00 7A 70
 470+ 81ED C4 81 4A 70                  dw      TICK, TO_BODY           // ' >body
 471+ 81F1 D8 6A 87 6D                  dw      DUP, FENCE, FETCH       // dup fence @
 471+ 81F5 6B 6B
 472+ 81F7 1E 6F A9 63                  dw      ULESS, LIT, 21, QERROR  // u< 21 ?error
 472+ 81FB 15 00 7A 70
 473+ 81FF D8 6A 20 70                  dw      DUP, NFA, DP, STORE     // dup nfa dp !
 473+ 8203 8F 6D 78 6B
 474+ 8207 06 70 6B 6B                  dw      LFA, FETCH              // lfa @
 475+ 820B 04 6E 6B 6B                  dw      CONTEXT, FETCH, STORE   // context @ !
 475+ 820F 78 6B
 476+ 8211 52 69                        dw      EXIT                    // ;
 477+ 8213
 478+ 8213              //  ______________________________________________________________________
 479+ 8213              //
 480+ 8213              // marker       -- cccc
 481+ 8213                              Colon_Def MARKER, "MARKER", is_immediate
 481+ 8213             >                New_Def  MARKER, "MARKER", Enter_Ptr, is_immediate ; ok
 481+ 8213             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 481+ 8213             >
 481+ 8213             >                // dummy db directives used to calculate length of namec
 481+ 8213 4D 41 52 4B >                db      "MARKER"
 481+ 8217 45 52       >
 481+ 8219             >len_NFA         defl    $ - temp_NFA
 481+ 8219             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 481+ 8213             >
 481+ 8213 C6          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 481+ 8214 4D 41 52 4B >                db      "MARKER"               // name string in 7-bit ascii, but
 481+ 8218 45 52       >
 481+ 821A             >                org     $-1                 // alter last byte of Name just above to set
 481+ 8219 D2          >                db      {b $} | END_BIT     // msb as name end
 481+ 821A             >
 481+ 821A D2 81       >                dw      last_NFA            // Link to previous definition Name
 481+ 821C             >MARKER:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 481+ 821C 56 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 481+ 821E             >                else
 481+ 821E ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 481+ 821E             >                endif           ; ok        // for other definitions it "points" the correct handler
 481+ 821E             >                // Use of "; ok" to suppress "warning[fwdref]"
 481+ 821E             >
 481+ 821E             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 482+ 821E DD 71                        dw      CBUILDS
 483+ 8220 9D 6D 6B 6B                  dw      VOC_LINK, FETCH, COMMA
 483+ 8224 CC 6E
 484+ 8226 11 6E 6B 6B                  dw      CURRENT, FETCH, COMMA
 484+ 822A CC 6E
 485+ 822C 04 6E 6B 6B                  dw      CONTEXT, FETCH, COMMA
 485+ 8230 CC 6E
 486+ 8232 F6 6F CC 6E                  dw      LATEST, COMMA
 487+ 8236 F6 6F 34 70                  dw      LATEST, PFA, LFA, FETCH, COMMA
 487+ 823A 06 70 6B 6B
 487+ 823E CC 6E
 488+ 8240 ED 71                        dw      DOES_TO
 489+ 8242 D8 6A 6B 6B                  dw      DUP, FETCH, VOC_LINK, STORE, CELL_PLUS
 489+ 8246 9D 6D 78 6B
 489+ 824A 41 6A
 490+ 824C D8 6A 6B 6B                  dw      DUP, FETCH, CURRENT, STORE, CELL_PLUS
 490+ 8250 11 6E 78 6B
 490+ 8254 41 6A
 491+ 8256 D8 6A 6B 6B                  dw      DUP, FETCH, CONTEXT, STORE, CELL_PLUS
 491+ 825A 04 6E 78 6B
 491+ 825E 41 6A
 492+ 8260 D8 6A 6B 6B                  dw      DUP, FETCH, DP, STORE, CELL_PLUS
 492+ 8264 8F 6D 78 6B
 492+ 8268 41 6A
 493+ 826A 6B 6B 11 6E                  dw           FETCH, CURRENT, FETCH, STORE
 493+ 826E 6B 6B 78 6B
 494+ 8272 52 69                        dw      EXIT
 495+ 8274
 496+ 8274              //  ______________________________________________________________________
 497+ 8274              //
 498+ 8274              // spaces       n --
 499+ 8274                              Colon_Def SPACES, "SPACES", is_normal
 499+ 8274             >                New_Def  SPACES, "SPACES", Enter_Ptr, is_normal ; ok
 499+ 8274             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 499+ 8274             >
 499+ 8274             >                // dummy db directives used to calculate length of namec
 499+ 8274 53 50 41 43 >                db      "SPACES"
 499+ 8278 45 53       >
 499+ 827A             >len_NFA         defl    $ - temp_NFA
 499+ 827A             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 499+ 8274             >
 499+ 8274 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 499+ 8275 53 50 41 43 >                db      "SPACES"               // name string in 7-bit ascii, but
 499+ 8279 45 53       >
 499+ 827B             >                org     $-1                 // alter last byte of Name just above to set
 499+ 827A D3          >                db      {b $} | END_BIT     // msb as name end
 499+ 827B             >
 499+ 827B 13 82       >                dw      last_NFA            // Link to previous definition Name
 499+ 827D             >SPACES:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 499+ 827D 56 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 499+ 827F             >                else
 499+ 827F ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 499+ 827F             >                endif           ; ok        // for other definitions it "points" the correct handler
 499+ 827F             >                // Use of "; ok" to suppress "warning[fwdref]"
 499+ 827F             >
 499+ 827F             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 500+ 827F D1 6C 72 6F                  dw      ZERO, MAX
 501+ 8283 D1 6C 42 64                  dw      ZERO, C_Q_DO
 502+ 8287 08 00                        dw      Spaces_Leave - $
 503+ 8289              Spaces_Loop:
 504+ 8289 C0 6F                        dw          SPACE
 505+ 828B 31 64                        dw      C_LOOP
 506+ 828D FC FF                        dw      Spaces_Loop - $
 507+ 828F              Spaces_Leave:
 508+ 828F 52 69                        dw      EXIT                    // ;
 509+ 8291
 510+ 8291              //  ______________________________________________________________________
 511+ 8291              //
 512+ 8291              // <#           --
 513+ 8291                              Colon_Def BEGIN_DASH, "<#", is_normal
 513+ 8291             >                New_Def  BEGIN_DASH, "<#", Enter_Ptr, is_normal ; ok
 513+ 8291             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 513+ 8291             >
 513+ 8291             >                // dummy db directives used to calculate length of namec
 513+ 8291 3C 23       >                db      "<#"
 513+ 8293             >len_NFA         defl    $ - temp_NFA
 513+ 8293             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 513+ 8291             >
 513+ 8291 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 513+ 8292 3C 23       >                db      "<#"               // name string in 7-bit ascii, but
 513+ 8294             >                org     $-1                 // alter last byte of Name just above to set
 513+ 8293 A3          >                db      {b $} | END_BIT     // msb as name end
 513+ 8294             >
 513+ 8294 74 82       >                dw      last_NFA            // Link to previous definition Name
 513+ 8296             >BEGIN_DASH:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 513+ 8296 56 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 513+ 8298             >                else
 513+ 8298 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 513+ 8298             >                endif           ; ok        // for other definitions it "points" the correct handler
 513+ 8298             >                // Use of "; ok" to suppress "warning[fwdref]"
 513+ 8298             >
 513+ 8298             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 514+ 8298 EC 73 52 6E                  dw      PAD, HLD, STORE
 514+ 829C 78 6B
 515+ 829E 52 69                        dw      EXIT
 516+ 82A0
 517+ 82A0              //  ______________________________________________________________________
 518+ 82A0              //
 519+ 82A0              // #>           --
 520+ 82A0                              Colon_Def DASH_END, "#>", is_normal
 520+ 82A0             >                New_Def  DASH_END, "#>", Enter_Ptr, is_normal ; ok
 520+ 82A0             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 520+ 82A0             >
 520+ 82A0             >                // dummy db directives used to calculate length of namec
 520+ 82A0 23 3E       >                db      "#>"
 520+ 82A2             >len_NFA         defl    $ - temp_NFA
 520+ 82A2             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 520+ 82A0             >
 520+ 82A0 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 520+ 82A1 23 3E       >                db      "#>"               // name string in 7-bit ascii, but
 520+ 82A3             >                org     $-1                 // alter last byte of Name just above to set
 520+ 82A2 BE          >                db      {b $} | END_BIT     // msb as name end
 520+ 82A3             >
 520+ 82A3 91 82       >                dw      last_NFA            // Link to previous definition Name
 520+ 82A5             >DASH_END:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 520+ 82A5 56 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 520+ 82A7             >                else
 520+ 82A7 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 520+ 82A7             >                endif           ; ok        // for other definitions it "points" the correct handler
 520+ 82A7             >                // Use of "; ok" to suppress "warning[fwdref]"
 520+ 82A7             >
 520+ 82A7             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 521+ 82A7 19 6B                        dw      TWO_DROP
 522+ 82A9 52 6E 6B 6B                  dw      HLD, FETCH, PAD, OVER, SUBTRACT
 522+ 82AD EC 73 93 6A
 522+ 82B1 03 6F
 523+ 82B3 52 69                        dw      EXIT
 524+ 82B5
 525+ 82B5              //  ______________________________________________________________________
 526+ 82B5              //
 527+ 82B5              // sign         n d -- d
 528+ 82B5                              Colon_Def SIGN, "SIGN", is_normal
 528+ 82B5             >                New_Def  SIGN, "SIGN", Enter_Ptr, is_normal ; ok
 528+ 82B5             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 528+ 82B5             >
 528+ 82B5             >                // dummy db directives used to calculate length of namec
 528+ 82B5 53 49 47 4E >                db      "SIGN"
 528+ 82B9             >len_NFA         defl    $ - temp_NFA
 528+ 82B9             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 528+ 82B5             >
 528+ 82B5 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 528+ 82B6 53 49 47 4E >                db      "SIGN"               // name string in 7-bit ascii, but
 528+ 82BA             >                org     $-1                 // alter last byte of Name just above to set
 528+ 82B9 CE          >                db      {b $} | END_BIT     // msb as name end
 528+ 82BA             >
 528+ 82BA A0 82       >                dw      last_NFA            // Link to previous definition Name
 528+ 82BC             >SIGN:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 528+ 82BC 56 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 528+ 82BE             >                else
 528+ 82BE ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 528+ 82BE             >                endif           ; ok        // for other definitions it "points" the correct handler
 528+ 82BE             >                // Use of "; ok" to suppress "warning[fwdref]"
 528+ 82BE             >
 528+ 82BE             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 529+ 82BE E5 6A D0 69                  dw      ROT, ZLESS
 530+ 82C2 E3 63                        dw      ZBRANCH
 531+ 82C4 08 00                        dw      Sign_Endif - $
 532+ 82C6 A9 63 2D 00                  dw          LIT, 45, HOLD
 532+ 82CA D6 73
 533+ 82CC              Sign_Endif:
 534+ 82CC 52 69                        dw      EXIT
 535+ 82CE
 536+ 82CE              //  ______________________________________________________________________
 537+ 82CE              //
 538+ 82CE              // #           d1 -- d2
 539+ 82CE                              Colon_Def DASH, "#", is_normal
 539+ 82CE             >                New_Def  DASH, "#", Enter_Ptr, is_normal ; ok
 539+ 82CE             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 539+ 82CE             >
 539+ 82CE             >                // dummy db directives used to calculate length of namec
 539+ 82CE 23          >                db      "#"
 539+ 82CF             >len_NFA         defl    $ - temp_NFA
 539+ 82CF             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 539+ 82CE             >
 539+ 82CE 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 539+ 82CF 23          >                db      "#"               // name string in 7-bit ascii, but
 539+ 82D0             >                org     $-1                 // alter last byte of Name just above to set
 539+ 82CF A3          >                db      {b $} | END_BIT     // msb as name end
 539+ 82D0             >
 539+ 82D0 B5 82       >                dw      last_NFA            // Link to previous definition Name
 539+ 82D2             >DASH:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 539+ 82D2 56 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 539+ 82D4             >                else
 539+ 82D4 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 539+ 82D4             >                endif           ; ok        // for other definitions it "points" the correct handler
 539+ 82D4             >                // Use of "; ok" to suppress "warning[fwdref]"
 539+ 82D4             >
 539+ 82D4             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 540+ 82D4 26 6E 6B 6B                  dw      BASE, FETCH
 541+ 82D8
 542+ 82D8 80 69                        dw      TO_R                    // >r           ( ud1 )
 543+ 82DA D1 6C A8 69                  dw      ZERO, R_OP, UMDIVMOD    // 0 r um/mod   ( l rem1 h/r )
 543+ 82DE A6 68
 544+ 82E0 94 69 CB 6A                  dw      R_TO, SWAP, TO_R        // r> swap >r   ( l rem )
 544+ 82E4 80 69
 545+ 82E6 A6 68                        dw      UMDIVMOD                // um/mod       ( rem2 l/r )
 546+ 82E8 94 69                        dw      R_TO                    // r>           ( rem2 l/r h/r )
 547+ 82EA
 548+ 82EA E5 6A                        dw      ROT
 549+ 82EC A9 63 09 00                  dw      LIT, 9, OVER, LESS
 549+ 82F0 93 6A 32 6F
 550+ 82F4 E3 63                        dw      ZBRANCH
 551+ 82F6 08 00                        dw      Dash_Endif - $
 552+ 82F8 A9 63 07 00                  dw          LIT, 7, PLUS
 552+ 82FC F8 69
 553+ 82FE              Dash_Endif:
 554+ 82FE
 555+ 82FE A9 63 30 00                  dw      LIT, 48, PLUS, HOLD
 555+ 8302 F8 69 D6 73
 556+ 8306 52 69                        dw      EXIT
 557+ 8308
 558+ 8308              //  ______________________________________________________________________
 559+ 8308              //
 560+ 8308              // #s           d1 -- d2
 561+ 8308                              Colon_Def DASHES, "#S", is_normal
 561+ 8308             >                New_Def  DASHES, "#S", Enter_Ptr, is_normal ; ok
 561+ 8308             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 561+ 8308             >
 561+ 8308             >                // dummy db directives used to calculate length of namec
 561+ 8308 23 53       >                db      "#S"
 561+ 830A             >len_NFA         defl    $ - temp_NFA
 561+ 830A             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 561+ 8308             >
 561+ 8308 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 561+ 8309 23 53       >                db      "#S"               // name string in 7-bit ascii, but
 561+ 830B             >                org     $-1                 // alter last byte of Name just above to set
 561+ 830A D3          >                db      {b $} | END_BIT     // msb as name end
 561+ 830B             >
 561+ 830B CE 82       >                dw      last_NFA            // Link to previous definition Name
 561+ 830D             >DASHES:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 561+ 830D 56 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 561+ 830F             >                else
 561+ 830F ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 561+ 830F             >                endif           ; ok        // for other definitions it "points" the correct handler
 561+ 830F             >                // Use of "; ok" to suppress "warning[fwdref]"
 561+ 830F             >
 561+ 830F             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 562+ 830F              Dashes_Begin:
 563+ 830F D2 82 39 6B                  dw      DASH, TWO_DUP
 564+ 8313 F4 68 B5 69                  dw          OR_OP, ZEQUAL
 565+ 8317 E3 63                        dw      ZBRANCH
 566+ 8319 F6 FF                        dw      Dashes_Begin - $
 567+ 831B 52 69                        dw      EXIT
 568+ 831D
 569+ 831D              //  ______________________________________________________________________
 570+ 831D              //
 571+ 831D              // d.r          d n --
 572+ 831D                              Colon_Def D_DOT_R, "D.R", is_normal
 572+ 831D             >                New_Def  D_DOT_R, "D.R", Enter_Ptr, is_normal ; ok
 572+ 831D             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 572+ 831D             >
 572+ 831D             >                // dummy db directives used to calculate length of namec
 572+ 831D 44 2E 52    >                db      "D.R"
 572+ 8320             >len_NFA         defl    $ - temp_NFA
 572+ 8320             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 572+ 831D             >
 572+ 831D 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 572+ 831E 44 2E 52    >                db      "D.R"               // name string in 7-bit ascii, but
 572+ 8321             >                org     $-1                 // alter last byte of Name just above to set
 572+ 8320 D2          >                db      {b $} | END_BIT     // msb as name end
 572+ 8321             >
 572+ 8321 08 83       >                dw      last_NFA            // Link to previous definition Name
 572+ 8323             >D_DOT_R:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 572+ 8323 56 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 572+ 8325             >                else
 572+ 8325 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 572+ 8325             >                endif           ; ok        // for other definitions it "points" the correct handler
 572+ 8325             >                // Use of "; ok" to suppress "warning[fwdref]"
 572+ 8325             >
 572+ 8325             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 573+ 8325 80 69                        dw      TO_R
 574+ 8327 BB 6A 8E 79                  dw      TUCK, DABS
 575+ 832B 96 82 0D 83                  dw      BEGIN_DASH, DASHES, SIGN, DASH_END
 575+ 832F BC 82 A5 82
 576+ 8333 94 69                        dw      R_TO
 577+ 8335 93 6A 03 6F                  dw      OVER, SUBTRACT, SPACES, TYPE
 577+ 8339 7D 82 3A 72
 578+ 833D 52 69                        dw      EXIT
 579+ 833F
 580+ 833F              //  ______________________________________________________________________
 581+ 833F              //
 582+ 833F              // .r           n1 n2 --
 583+ 833F                              Colon_Def DOT_R, ".R", is_normal
 583+ 833F             >                New_Def  DOT_R, ".R", Enter_Ptr, is_normal ; ok
 583+ 833F             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 583+ 833F             >
 583+ 833F             >                // dummy db directives used to calculate length of namec
 583+ 833F 2E 52       >                db      ".R"
 583+ 8341             >len_NFA         defl    $ - temp_NFA
 583+ 8341             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 583+ 833F             >
 583+ 833F 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 583+ 8340 2E 52       >                db      ".R"               // name string in 7-bit ascii, but
 583+ 8342             >                org     $-1                 // alter last byte of Name just above to set
 583+ 8341 D2          >                db      {b $} | END_BIT     // msb as name end
 583+ 8342             >
 583+ 8342 1D 83       >                dw      last_NFA            // Link to previous definition Name
 583+ 8344             >DOT_R:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 583+ 8344 56 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 583+ 8346             >                else
 583+ 8346 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 583+ 8346             >                endif           ; ok        // for other definitions it "points" the correct handler
 583+ 8346             >                // Use of "; ok" to suppress "warning[fwdref]"
 583+ 8346             >
 583+ 8346             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 584+ 8346 80 69                        dw      TO_R
 585+ 8348 EF 6E 94 69                  dw      S_TO_D, R_TO
 586+ 834C 23 83                        dw      D_DOT_R
 587+ 834E 52 69                        dw      EXIT
 588+ 8350
 589+ 8350              //  ______________________________________________________________________
 590+ 8350              //
 591+ 8350              // d.           d --
 592+ 8350                              Colon_Def D_DOT, "D.", is_normal
 592+ 8350             >                New_Def  D_DOT, "D.", Enter_Ptr, is_normal ; ok
 592+ 8350             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 592+ 8350             >
 592+ 8350             >                // dummy db directives used to calculate length of namec
 592+ 8350 44 2E       >                db      "D."
 592+ 8352             >len_NFA         defl    $ - temp_NFA
 592+ 8352             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 592+ 8350             >
 592+ 8350 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 592+ 8351 44 2E       >                db      "D."               // name string in 7-bit ascii, but
 592+ 8353             >                org     $-1                 // alter last byte of Name just above to set
 592+ 8352 AE          >                db      {b $} | END_BIT     // msb as name end
 592+ 8353             >
 592+ 8353 3F 83       >                dw      last_NFA            // Link to previous definition Name
 592+ 8355             >D_DOT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 592+ 8355 56 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 592+ 8357             >                else
 592+ 8357 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 592+ 8357             >                endif           ; ok        // for other definitions it "points" the correct handler
 592+ 8357             >                // Use of "; ok" to suppress "warning[fwdref]"
 592+ 8357             >
 592+ 8357             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 593+ 8357 D1 6C 23 83                  dw      ZERO, D_DOT_R, SPACE
 593+ 835B C0 6F
 594+ 835D 52 69                        dw      EXIT
 595+ 835F
 596+ 835F              //  ______________________________________________________________________
 597+ 835F              //
 598+ 835F              // .            n --
 599+ 835F                              Colon_Def DOT, ".", is_normal
 599+ 835F             >                New_Def  DOT, ".", Enter_Ptr, is_normal ; ok
 599+ 835F             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 599+ 835F             >
 599+ 835F             >                // dummy db directives used to calculate length of namec
 599+ 835F 2E          >                db      "."
 599+ 8360             >len_NFA         defl    $ - temp_NFA
 599+ 8360             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 599+ 835F             >
 599+ 835F 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 599+ 8360 2E          >                db      "."               // name string in 7-bit ascii, but
 599+ 8361             >                org     $-1                 // alter last byte of Name just above to set
 599+ 8360 AE          >                db      {b $} | END_BIT     // msb as name end
 599+ 8361             >
 599+ 8361 50 83       >                dw      last_NFA            // Link to previous definition Name
 599+ 8363             >DOT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 599+ 8363 56 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 599+ 8365             >                else
 599+ 8365 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 599+ 8365             >                endif           ; ok        // for other definitions it "points" the correct handler
 599+ 8365             >                // Use of "; ok" to suppress "warning[fwdref]"
 599+ 8365             >
 599+ 8365             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 600+ 8365 EF 6E 55 83                  dw      S_TO_D, D_DOT
 601+ 8369 52 69                        dw      EXIT
 602+ 836B
 603+ 836B              //  ______________________________________________________________________
 604+ 836B              //
 605+ 836B              // ?            n --
 606+ 836B                              Colon_Def QUESTION, "?", is_normal
 606+ 836B             >                New_Def  QUESTION, "?", Enter_Ptr, is_normal ; ok
 606+ 836B             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 606+ 836B             >
 606+ 836B             >                // dummy db directives used to calculate length of namec
 606+ 836B 3F          >                db      "?"
 606+ 836C             >len_NFA         defl    $ - temp_NFA
 606+ 836C             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 606+ 836B             >
 606+ 836B 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 606+ 836C 3F          >                db      "?"               // name string in 7-bit ascii, but
 606+ 836D             >                org     $-1                 // alter last byte of Name just above to set
 606+ 836C BF          >                db      {b $} | END_BIT     // msb as name end
 606+ 836D             >
 606+ 836D 5F 83       >                dw      last_NFA            // Link to previous definition Name
 606+ 836F             >QUESTION:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 606+ 836F 56 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 606+ 8371             >                else
 606+ 8371 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 606+ 8371             >                endif           ; ok        // for other definitions it "points" the correct handler
 606+ 8371             >                // Use of "; ok" to suppress "warning[fwdref]"
 606+ 8371             >
 606+ 8371             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 607+ 8371 6B 6B 63 83                  dw      FETCH, DOT
 608+ 8375 52 69                        dw      EXIT
 609+ 8377
 610+ 8377              //  ______________________________________________________________________
 611+ 8377              //
 612+ 8377              // u.           u --
 613+ 8377                              Colon_Def U_DOT, "U.", is_normal
 613+ 8377             >                New_Def  U_DOT, "U.", Enter_Ptr, is_normal ; ok
 613+ 8377             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 613+ 8377             >
 613+ 8377             >                // dummy db directives used to calculate length of namec
 613+ 8377 55 2E       >                db      "U."
 613+ 8379             >len_NFA         defl    $ - temp_NFA
 613+ 8379             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 613+ 8377             >
 613+ 8377 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 613+ 8378 55 2E       >                db      "U."               // name string in 7-bit ascii, but
 613+ 837A             >                org     $-1                 // alter last byte of Name just above to set
 613+ 8379 AE          >                db      {b $} | END_BIT     // msb as name end
 613+ 837A             >
 613+ 837A 6B 83       >                dw      last_NFA            // Link to previous definition Name
 613+ 837C             >U_DOT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 613+ 837C 56 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 613+ 837E             >                else
 613+ 837E ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 613+ 837E             >                endif           ; ok        // for other definitions it "points" the correct handler
 613+ 837E             >                // Use of "; ok" to suppress "warning[fwdref]"
 613+ 837E             >
 613+ 837E             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 614+ 837E D1 6C 55 83                  dw      ZERO, D_DOT
 615+ 8382 52 69                        dw      EXIT
 616+ 8384
 617+ 8384              //  ______________________________________________________________________
 618+ 8384              //
 619+ 8384              // words        --
 620+ 8384                              Colon_Def WORDS, "WORDS", is_normal
 620+ 8384             >                New_Def  WORDS, "WORDS", Enter_Ptr, is_normal ; ok
 620+ 8384             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 620+ 8384             >
 620+ 8384             >                // dummy db directives used to calculate length of namec
 620+ 8384 57 4F 52 44 >                db      "WORDS"
 620+ 8388 53          >
 620+ 8389             >len_NFA         defl    $ - temp_NFA
 620+ 8389             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 620+ 8384             >
 620+ 8384 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 620+ 8385 57 4F 52 44 >                db      "WORDS"               // name string in 7-bit ascii, but
 620+ 8389 53          >
 620+ 838A             >                org     $-1                 // alter last byte of Name just above to set
 620+ 8389 D3          >                db      {b $} | END_BIT     // msb as name end
 620+ 838A             >
 620+ 838A 77 83       >                dw      last_NFA            // Link to previous definition Name
 620+ 838C             >WORDS:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 620+ 838C 56 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 620+ 838E             >                else
 620+ 838E ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 620+ 838E             >                endif           ; ok        // for other definitions it "points" the correct handler
 620+ 838E             >                // Use of "; ok" to suppress "warning[fwdref]"
 620+ 838E             >
 620+ 838E             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 621+ 838E A9 63 80 00                  dw      LIT, 128, OUT, STORE
 621+ 8392 E2 6D 78 6B
 622+ 8396 04 6E 6B 6B                  dw      CONTEXT, FETCH, FETCH
 622+ 839A 6B 6B
 623+ 839C              Words_Begin:
 624+ 839C D8 6A 86 6B                  dw          DUP, CFETCH, LIT, $1F, AND_OP
 624+ 83A0 A9 63 1F 00
 624+ 83A4 E2 68
 625+ 83A6 E2 6D 6B 6B                  dw          OUT, FETCH, PLUS
 625+ 83AA F8 69
 626+ 83AC 05 6D 32 6F                  dw          CL, LESS, ZEQUAL
 626+ 83B0 B5 69
 627+ 83B2 E3 63                        dw          ZBRANCH
 628+ 83B4 0A 00                        dw          Words_Endif - $
 629+ 83B6 33 68 D1 6C                  dw              CR, ZERO, OUT, STORE
 629+ 83BA E2 6D 78 6B
 630+ 83BE              Words_Endif:
 631+ 83BE D8 6A 22 76                  dw          DUP, ID_DOT
 632+ 83C2 34 70 06 70                  dw          PFA, LFA, FETCH
 632+ 83C6 6B 6B
 633+ 83C8 D8 6A B5 69                  dw          DUP, ZEQUAL
 634+ 83CC 1F 67 F4 68                  dw          QTERMINAL, OR_OP
 635+ 83D0 E3 63                        dw      ZBRANCH
 636+ 83D2 CA FF                        dw      Words_Begin - $
 637+ 83D4 A3 6A                        dw      DROP
 638+ 83D6 52 69                        dw      EXIT
 639+ 83D8
 640+ 83D8              //  ______________________________________________________________________
 641+ 83D8              //
 642+ 83D8              // list         n --
 643+ 83D8                              Colon_Def LIST, "LIST", is_normal
 643+ 83D8             >                New_Def  LIST, "LIST", Enter_Ptr, is_normal ; ok
 643+ 83D8             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 643+ 83D8             >
 643+ 83D8             >                // dummy db directives used to calculate length of namec
 643+ 83D8 4C 49 53 54 >                db      "LIST"
 643+ 83DC             >len_NFA         defl    $ - temp_NFA
 643+ 83DC             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 643+ 83D8             >
 643+ 83D8 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 643+ 83D9 4C 49 53 54 >                db      "LIST"               // name string in 7-bit ascii, but
 643+ 83DD             >                org     $-1                 // alter last byte of Name just above to set
 643+ 83DC D4          >                db      {b $} | END_BIT     // msb as name end
 643+ 83DD             >
 643+ 83DD 84 83       >                dw      last_NFA            // Link to previous definition Name
 643+ 83DF             >LIST:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 643+ 83DF 56 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 643+ 83E1             >                else
 643+ 83E1 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 643+ 83E1             >                endif           ; ok        // for other definitions it "points" the correct handler
 643+ 83E1             >                // Use of "; ok" to suppress "warning[fwdref]"
 643+ 83E1             >
 643+ 83E1             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 644+ 83E1 99 71 33 68                  dw      DECIMAL, CR
 645+ 83E5 D8 6A EB 6D                  dw      DUP, SCR, STORE
 645+ 83E9 78 6B
 646+ 83EB 4E 74                        dw      C_DOT_QUOTE
 647+ 83ED 05 53 63 72                  db      5, "Scr# "
 647+ 83F1 23 20
 648+ 83F3 63 83                        dw      DOT
 649+ 83F5 29 6D D1 6C                  dw      LSCR, ZERO, C_DO
 649+ 83F9 70 64
 650+ 83FB              List_Loop:
 651+ 83FB 33 68                        dw          CR
 652+ 83FD 7B 64 E9 6C                  dw          I, THREE
 653+ 8401 44 83 C0 6F                  dw          DOT_R, SPACE
 654+ 8405 7B 64 EB 6D                  dw          I, SCR, FETCH, DOT_LINE
 654+ 8409 6B 6B BD 7A
 655+ 840D 1F 67                        dw          QTERMINAL
 656+ 840F E3 63                        dw          ZBRANCH
 657+ 8411 06 00                        dw          List_Endif - $
 658+ 8413 6A 69                        dw              C_LEAVE
 659+ 8415 06 00                        dw              List_Leave - $
 660+ 8417              List_Endif:
 661+ 8417 31 64                        dw      C_LOOP
 662+ 8419 E2 FF                        dw      List_Loop - $
 663+ 841B              List_Leave:
 664+ 841B 33 68                        dw      CR
 665+ 841D 52 69                        dw      EXIT
 666+ 841F
 667+ 841F              //  ______________________________________________________________________
 668+ 841F              //
 669+ 841F              // index        n1 n2 --
 670+ 841F                              Colon_Def INDEX, "INDEX", is_normal
 670+ 841F             >                New_Def  INDEX, "INDEX", Enter_Ptr, is_normal ; ok
 670+ 841F             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 670+ 841F             >
 670+ 841F             >                // dummy db directives used to calculate length of namec
 670+ 841F 49 4E 44 45 >                db      "INDEX"
 670+ 8423 58          >
 670+ 8424             >len_NFA         defl    $ - temp_NFA
 670+ 8424             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 670+ 841F             >
 670+ 841F 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 670+ 8420 49 4E 44 45 >                db      "INDEX"               // name string in 7-bit ascii, but
 670+ 8424 58          >
 670+ 8425             >                org     $-1                 // alter last byte of Name just above to set
 670+ 8424 D8          >                db      {b $} | END_BIT     // msb as name end
 670+ 8425             >
 670+ 8425 D8 83       >                dw      last_NFA            // Link to previous definition Name
 670+ 8427             >INDEX:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 670+ 8427 56 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 670+ 8429             >                else
 670+ 8429 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 670+ 8429             >                endif           ; ok        // for other definitions it "points" the correct handler
 670+ 8429             >                // Use of "; ok" to suppress "warning[fwdref]"
 670+ 8429             >
 670+ 8429             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 671+ 8429 19 6A CB 6A                  dw      ONE_PLUS, SWAP, C_DO
 671+ 842D 70 64
 672+ 842F              Index_Loop:
 673+ 842F 33 68 7B 64                  dw          CR, I, THREE
 673+ 8433 E9 6C
 674+ 8435 44 83 C0 6F                  dw          DOT_R, SPACE
 675+ 8439 D1 6C 7B 64                  dw          ZERO, I, DOT_LINE
 675+ 843D BD 7A
 676+ 843F 1F 67                        dw          QTERMINAL
 677+ 8441 E3 63                        dw          ZBRANCH
 678+ 8443 06 00                        dw          Index_Endif - $
 679+ 8445 6A 69                        dw              C_LEAVE
 680+ 8447 06 00                        dw              Index_Leave - $
 681+ 8449              Index_Endif:
 682+ 8449 31 64                        dw      C_LOOP
 683+ 844B E4 FF                        dw      Index_Loop - $
 684+ 844D              Index_Leave:
 685+ 844D 33 68                        dw      CR
 686+ 844F 52 69                        dw      EXIT
 687+ 8451
 688+ 8451              //  ______________________________________________________________________
 689+ 8451              //
 690+ 8451              // cls          --
 691+ 8451                              Colon_Def CLS, "CLS", is_normal
 691+ 8451             >                New_Def  CLS, "CLS", Enter_Ptr, is_normal ; ok
 691+ 8451             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 691+ 8451             >
 691+ 8451             >                // dummy db directives used to calculate length of namec
 691+ 8451 43 4C 53    >                db      "CLS"
 691+ 8454             >len_NFA         defl    $ - temp_NFA
 691+ 8454             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 691+ 8451             >
 691+ 8451 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 691+ 8452 43 4C 53    >                db      "CLS"               // name string in 7-bit ascii, but
 691+ 8455             >                org     $-1                 // alter last byte of Name just above to set
 691+ 8454 D3          >                db      {b $} | END_BIT     // msb as name end
 691+ 8455             >
 691+ 8455 1F 84       >                dw      last_NFA            // Link to previous definition Name
 691+ 8457             >CLS:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 691+ 8457 56 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 691+ 8459             >                else
 691+ 8459 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 691+ 8459             >                endif           ; ok        // for other definitions it "points" the correct handler
 691+ 8459             >                // Use of "; ok" to suppress "warning[fwdref]"
 691+ 8459             >
 691+ 8459             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 692+ 8459 A9 63 0E 00                  dw      LIT, $0E, EMITC
 692+ 845D FE 65
 693+ 845F 52 69                        dw      EXIT
 694+ 8461
 695+ 8461              //  ______________________________________________________________________
 696+ 8461              //
 697+ 8461              // splash       --
 698+ 8461                              Colon_Def SPLASH, "SPLASH", is_normal
 698+ 8461             >                New_Def  SPLASH, "SPLASH", Enter_Ptr, is_normal ; ok
 698+ 8461             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 698+ 8461             >
 698+ 8461             >                // dummy db directives used to calculate length of namec
 698+ 8461 53 50 4C 41 >                db      "SPLASH"
 698+ 8465 53 48       >
 698+ 8467             >len_NFA         defl    $ - temp_NFA
 698+ 8467             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 698+ 8461             >
 698+ 8461 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 698+ 8462 53 50 4C 41 >                db      "SPLASH"               // name string in 7-bit ascii, but
 698+ 8466 53 48       >
 698+ 8468             >                org     $-1                 // alter last byte of Name just above to set
 698+ 8467 C8          >                db      {b $} | END_BIT     // msb as name end
 698+ 8468             >
 698+ 8468 51 84       >                dw      last_NFA            // Link to previous definition Name
 698+ 846A             >SPLASH:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 698+ 846A 56 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 698+ 846C             >                else
 698+ 846C ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 698+ 846C             >                endif           ; ok        // for other definitions it "points" the correct handler
 698+ 846C             >                // Use of "; ok" to suppress "warning[fwdref]"
 698+ 846C             >
 698+ 846C             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 699+ 846C 57 84                        dw      CLS
 700+ 846E 4E 74                        dw      C_DOT_QUOTE
 701+ 8470 57                           db      87
 702+ 8471 76 2D 46 6F                  db      "v-Forth 1.5 NextZXOS version", 13
 702+ 8475 72 74 68 20
 702+ 8479 31 2E 35 20
 702+ 847D 4E 65 78 74
 702+ 8481 5A 58 4F 53
 702+ 8485 20 76 65 72
 702+ 8489 73 69 6F 6E
 702+ 848D 0D
 703+ 848E 49 6E 64 69                  db      "Indirect Thread - build 20211205", 13
 703+ 8492 72 65 63 74
 703+ 8496 20 54 68 72
 703+ 849A 65 61 64 20
 703+ 849E 2D 20 62 75
 703+ 84A2 69 6C 64 20
 703+ 84A6 32 30 32 31
 703+ 84AA 31 32 30 35
 703+ 84AE 0D
 704+ 84AF 31 39 39 30                  db      "1990-2021 Matteo Vitturi", 13
 704+ 84B3 2D 32 30 32
 704+ 84B7 31 20 4D 61
 704+ 84BB 74 74 65 6F
 704+ 84BF 20 56 69 74
 704+ 84C3 74 75 72 69
 704+ 84C7 0D
 705+ 84C8 52 69                        dw      EXIT
 706+ 84CA
 707+ 84CA              //  ______________________________________________________________________
 708+ 84CA              //
 709+ 84CA              // video        --
 710+ 84CA                              Colon_Def VIDEO, "VIDEO", is_normal
 710+ 84CA             >                New_Def  VIDEO, "VIDEO", Enter_Ptr, is_normal ; ok
 710+ 84CA             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 710+ 84CA             >
 710+ 84CA             >                // dummy db directives used to calculate length of namec
 710+ 84CA 56 49 44 45 >                db      "VIDEO"
 710+ 84CE 4F          >
 710+ 84CF             >len_NFA         defl    $ - temp_NFA
 710+ 84CF             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 710+ 84CA             >
 710+ 84CA 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 710+ 84CB 56 49 44 45 >                db      "VIDEO"               // name string in 7-bit ascii, but
 710+ 84CF 4F          >
 710+ 84D0             >                org     $-1                 // alter last byte of Name just above to set
 710+ 84CF CF          >                db      {b $} | END_BIT     // msb as name end
 710+ 84D0             >
 710+ 84D0 61 84       >                dw      last_NFA            // Link to previous definition Name
 710+ 84D2             >VIDEO:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 710+ 84D2 56 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 710+ 84D4             >                else
 710+ 84D4 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 710+ 84D4             >                endif           ; ok        // for other definitions it "points" the correct handler
 710+ 84D4             >                // Use of "; ok" to suppress "warning[fwdref]"
 710+ 84D4             >
 710+ 84D4             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 711+ 84D4 E1 6C D8 6A                  dw      TWO, DUP, DEVICE, STORE
 711+ 84D8 05 7B 78 6B
 712+ 84DC 36 7B                        dw      SELECT
 713+ 84DE 52 69                        dw      EXIT
 714+ 84E0
 715+ 84E0              //  ______________________________________________________________________
 716+ 84E0              //
 717+ 84E0              // accept-      a n1 -- n2
 718+ 84E0                              Colon_Def ACCEPT_N, "ACCEPT-", is_normal
 718+ 84E0             >                New_Def  ACCEPT_N, "ACCEPT-", Enter_Ptr, is_normal ; ok
 718+ 84E0             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 718+ 84E0             >
 718+ 84E0             >                // dummy db directives used to calculate length of namec
 718+ 84E0 41 43 43 45 >                db      "ACCEPT-"
 718+ 84E4 50 54 2D    >
 718+ 84E7             >len_NFA         defl    $ - temp_NFA
 718+ 84E7             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 718+ 84E0             >
 718+ 84E0 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 718+ 84E1 41 43 43 45 >                db      "ACCEPT-"               // name string in 7-bit ascii, but
 718+ 84E5 50 54 2D    >
 718+ 84E8             >                org     $-1                 // alter last byte of Name just above to set
 718+ 84E7 AD          >                db      {b $} | END_BIT     // msb as name end
 718+ 84E8             >
 718+ 84E8 CA 84       >                dw      last_NFA            // Link to previous definition Name
 718+ 84EA             >ACCEPT_N:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 718+ 84EA 56 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 718+ 84EC             >                else
 718+ 84EC ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 718+ 84EC             >                endif           ; ok        // for other definitions it "points" the correct handler
 718+ 84EC             >                // Use of "; ok" to suppress "warning[fwdref]"
 718+ 84EC             >
 718+ 84EC             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 719+ 84EC 80 69                        dw      TO_R
 720+ 84EE D1 6C                        dw      ZERO
 721+ 84F0 CB 6A                        dw      SWAP
 722+ 84F2 D8 6A                        dw      DUP
 723+ 84F4 94 69                        dw      R_TO
 724+ 84F6 F8 69                        dw      PLUS
 725+ 84F8 CB 6A                        dw      SWAP
 726+ 84FA 70 64                        dw      C_DO
 727+ 84FC              AcceptN_Loop:
 728+ 84FC 86 7B                        dw          MMU7_FETCH
 729+ 84FE 11 7B                        dw          INKEY
 730+ 8500 CB 6A 98 7B                  dw          SWAP, MMU7_STORE
 731+ 8504 D8 6A B5 69                  dw          DUP, ZEQUAL
 732+ 8508 E3 63                        dw          ZBRANCH
 733+ 850A 06 00                        dw          AcceptN_Endif_1 - $
 734+ 850C D2 84 5F 78                  dw              VIDEO, QUIT
 735+ 8510              AcceptN_Endif_1:
 736+ 8510 D8 6A A9 63                  dw          DUP, LIT, 13, EQUALS
 736+ 8514 0D 00 11 6F
 737+ 8518 E3 63                        dw          ZBRANCH
 738+ 851A 06 00                        dw          AcceptN_Endif_2 - $
 739+ 851C A3 6A D1 6C                  dw              DROP, ZERO
 740+ 8520              AcceptN_Endif_2:
 741+ 8520 D8 6A A9 63                  dw          DUP, LIT, 10, EQUALS
 741+ 8524 0A 00 11 6F
 742+ 8528 E3 63                        dw          ZBRANCH
 743+ 852A 06 00                        dw          AcceptN_Endif_3 - $
 744+ 852C A3 6A D1 6C                  dw              DROP, ZERO
 745+ 8530              AcceptN_Endif_3:
 746+ 8530 7B 64 94 6B                  dw          I, CSTORE, ONE_PLUS
 746+ 8534 19 6A
 747+ 8536
 748+ 8536 7B 64 86 6B                  dw          I, CFETCH, ZEQUAL   //      i 0= if
 748+ 853A B5 69
 749+ 853C E3 63                        dw          ZBRANCH
 750+ 853E 06 00                        dw              AcceptN_Endif_4 - $
 751+ 8540 6A 69                        dw                  C_LEAVE     //              leave
 752+ 8542 06 00                        dw                  AcceptN_Leave - $
 753+ 8544              AcceptN_Endif_4:                                 //      endif
 754+ 8544
 755+ 8544 31 64                        dw      C_LOOP
 756+ 8546 B6 FF                        dw      AcceptN_Loop -$
 757+ 8548              AcceptN_Leave:
 758+ 8548 52 69                        dw      EXIT
 759+ 854A
 760+ 854A              //  ______________________________________________________________________
 761+ 854A              //
 762+ 854A              // load-        n --
 763+ 854A              // Provided that a stream n is OPEN# via the standart BASIC
 764+ 854A              // it accepts text from stream #n to the normal INTERPRET
 765+ 854A              // up to now, text-file must end with QUIT
 766+ 854A                              Colon_Def LOAD_N, "LOAD-", is_normal
 766+ 854A             >                New_Def  LOAD_N, "LOAD-", Enter_Ptr, is_normal ; ok
 766+ 854A             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 766+ 854A             >
 766+ 854A             >                // dummy db directives used to calculate length of namec
 766+ 854A 4C 4F 41 44 >                db      "LOAD-"
 766+ 854E 2D          >
 766+ 854F             >len_NFA         defl    $ - temp_NFA
 766+ 854F             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 766+ 854A             >
 766+ 854A 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 766+ 854B 4C 4F 41 44 >                db      "LOAD-"               // name string in 7-bit ascii, but
 766+ 854F 2D          >
 766+ 8550             >                org     $-1                 // alter last byte of Name just above to set
 766+ 854F AD          >                db      {b $} | END_BIT     // msb as name end
 766+ 8550             >
 766+ 8550 E0 84       >                dw      last_NFA            // Link to previous definition Name
 766+ 8552             >LOAD_N:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 766+ 8552 56 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 766+ 8554             >                else
 766+ 8554 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 766+ 8554             >                endif           ; ok        // for other definitions it "points" the correct handler
 766+ 8554             >                // Use of "; ok" to suppress "warning[fwdref]"
 766+ 8554             >
 766+ 8554             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 767+ 8554 87 6E 78 6B                  dw      SOURCE_ID, STORE
 768+ 8558              Load_N_Begin:
 769+ 8558 64 6D 6B 6B                  dw          TIB, FETCH
 770+ 855C D8 6A A9 63                  dw          DUP, LIT, 80
 770+ 8560 50 00
 771+ 8562 39 6B C7 73                  dw          TWO_DUP, BLANKS
 772+ 8566 87 6E 6B 6B                  dw          SOURCE_ID, FETCH
 773+ 856A 7F 79 D8 6A                  dw          ABS_OP, DUP, DEVICE, STORE
 773+ 856E 05 7B 78 6B
 774+ 8572 36 7B                        dw          SELECT
 775+ 8574 EA 84                        dw          ACCEPT_N
 776+ 8576 D2 84                        dw          VIDEO
 777+ 8578 19 6B                        dw          TWO_DROP
 778+ 857A D1 6C D0 6D                  dw          ZERO, BLK, STORE
 778+ 857E 78 6B
 779+ 8580 D1 6C D9 6D                  dw          ZERO, TO_IN, STORE
 779+ 8584 78 6B
 780+ 8586 9F 77                        dw          INTERPRET
 781+ 8588 1F 67                        dw          QTERMINAL
 782+ 858A E3 63                        dw      ZBRANCH
 783+ 858C CC FF                        dw      Load_N_Begin - $
 784+ 858E 52 69                        dw      EXIT
 785+ 8590
 786+ 8590              //  ______________________________________________________________________
 787+ 8590              //
 788+ 8590              // load         n --
 789+ 8590              // if n is positive, it loads screen #n (as usual)
 790+ 8590              // if n is negative, it connects stream #n to the normal INTERPRET
 791+ 8590              // this second way is useful if you want to load any kind of file
 792+ 8590              // provied that it is OPEN# the usual BASIC way.
 793+ 8590                              Colon_Def LOAD, "LOAD", is_normal
 793+ 8590             >                New_Def  LOAD, "LOAD", Enter_Ptr, is_normal ; ok
 793+ 8590             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 793+ 8590             >
 793+ 8590             >                // dummy db directives used to calculate length of namec
 793+ 8590 4C 4F 41 44 >                db      "LOAD"
 793+ 8594             >len_NFA         defl    $ - temp_NFA
 793+ 8594             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 793+ 8590             >
 793+ 8590 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 793+ 8591 4C 4F 41 44 >                db      "LOAD"               // name string in 7-bit ascii, but
 793+ 8595             >                org     $-1                 // alter last byte of Name just above to set
 793+ 8594 C4          >                db      {b $} | END_BIT     // msb as name end
 793+ 8595             >
 793+ 8595 4A 85       >                dw      last_NFA            // Link to previous definition Name
 793+ 8597             >LOAD:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 793+ 8597 56 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 793+ 8599             >                else
 793+ 8599 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 793+ 8599             >                endif           ; ok        // for other definitions it "points" the correct handler
 793+ 8599             >                // Use of "; ok" to suppress "warning[fwdref]"
 793+ 8599             >
 793+ 8599             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 794+ 8599 D8 6A D0 69                  dw      DUP, ZLESS
 795+ 859D E3 63                        dw      ZBRANCH
 796+ 859F 08 00                        dw      Load_Else - $
 797+ 85A1 52 85                        dw          LOAD_N
 798+ 85A3 CC 63                        dw      BRANCH
 799+ 85A5 04 00                        dw      Load_Endif - $
 800+ 85A7              Load_Else:
 801+ 85A7 72 81                        dw          LOAD_P
 802+ 85A9              Load_Endif:
 803+ 85A9 52 69                        dw      EXIT
 804+ 85AB
 805+ 85AB
 806+ 85AB              //  ______________________________________________________________________
 807+ 85AB              //
 808+ 85AB              // autoexec     --
 809+ 85AB              // this word is called the first time the Forth system boot to
 810+ 85AB              // load Screen# 1. Once called it patches itself to prevent furhter runs.
 811+ 85AB                              Colon_Def AUTOEXEC, "AUTOEXEC", is_normal
 811+ 85AB             >                New_Def  AUTOEXEC, "AUTOEXEC", Enter_Ptr, is_normal ; ok
 811+ 85AB             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 811+ 85AB             >
 811+ 85AB             >                // dummy db directives used to calculate length of namec
 811+ 85AB 41 55 54 4F >                db      "AUTOEXEC"
 811+ 85AF 45 58 45 43 >
 811+ 85B3             >len_NFA         defl    $ - temp_NFA
 811+ 85B3             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 811+ 85AB             >
 811+ 85AB 88          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 811+ 85AC 41 55 54 4F >                db      "AUTOEXEC"               // name string in 7-bit ascii, but
 811+ 85B0 45 58 45 43 >
 811+ 85B4             >                org     $-1                 // alter last byte of Name just above to set
 811+ 85B3 C3          >                db      {b $} | END_BIT     // msb as name end
 811+ 85B4             >
 811+ 85B4 90 85       >                dw      last_NFA            // Link to previous definition Name
 811+ 85B6             >AUTOEXEC:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 811+ 85B6 56 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 811+ 85B8             >                else
 811+ 85B8 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 811+ 85B8             >                endif           ; ok        // for other definitions it "points" the correct handler
 811+ 85B8             >                // Use of "; ok" to suppress "warning[fwdref]"
 811+ 85B8             >
 811+ 85B8             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 812+ 85B8 A9 63 0B 00                  dw      LIT, 11
 813+ 85BC A9 63 7E 6C                  dw      LIT, NOOP
 814+ 85C0 A9 63 AE 78                  dw      LIT, Autoexec_Ptr
 815+ 85C4 78 6B                        dw      STORE
 816+ 85C6 97 85                        dw      LOAD
 817+ 85C8 5F 78                        dw      QUIT
 818+ 85CA 52 69                        dw      EXIT
 819+ 85CC
 820+ 85CC
 821+ 85CC              //  ______________________________________________________________________
 822+ 85CC              //
 823+ 85CC              // bye     --
 824+ 85CC              //
 825+ 85CC                              Colon_Def BYE, "BYE", is_normal
 825+ 85CC             >                New_Def  BYE, "BYE", Enter_Ptr, is_normal ; ok
 825+ 85CC             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 825+ 85CC             >
 825+ 85CC             >                // dummy db directives used to calculate length of namec
 825+ 85CC 42 59 45    >                db      "BYE"
 825+ 85CF             >len_NFA         defl    $ - temp_NFA
 825+ 85CF             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 825+ 85CC             >
 825+ 85CC 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 825+ 85CD 42 59 45    >                db      "BYE"               // name string in 7-bit ascii, but
 825+ 85D0             >                org     $-1                 // alter last byte of Name just above to set
 825+ 85CF C5          >                db      {b $} | END_BIT     // msb as name end
 825+ 85D0             >
 825+ 85D0 AB 85       >                dw      last_NFA            // Link to previous definition Name
 825+ 85D2             >BYE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 825+ 85D2 56 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 825+ 85D4             >                else
 825+ 85D4 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 825+ 85D4             >                endif           ; ok        // for other definitions it "points" the correct handler
 825+ 85D4             >                // Use of "; ok" to suppress "warning[fwdref]"
 825+ 85D4             >
 825+ 85D4             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 826+ 85D4 10 7E                        dw      FLUSH
 827+ 85D6 43 7D                        dw      EMPTY_BUFFERS
 828+ 85D8 E7 7B 6B 6B                  dw      BLK_FH, FETCH, F_CLOSE, DROP
 828+ 85DC 64 67 A3 6A
 829+ 85E0 D1 6C 37 6D                  dw      ZERO, PLUS_ORIGIN
 830+ 85E4 44 79                        dw      BASIC
 831+ 85E6
 832+ 85E6              //  ______________________________________________________________________
 833+ 85E6              //
 834+ 85E6              // invv     --
 835+ 85E6              //
 836+ 85E6              //              Colon_Def INVV, "INVV", is_normal
 837+ 85E6              //              dw      LIT, 20, EMITC, ONE, EMITC
 838+ 85E6              //              dw      EXIT
 839+ 85E6
 840+ 85E6              //  ______________________________________________________________________
 841+ 85E6              //
 842+ 85E6              // truv     --
 843+ 85E6              //
 844+ 85E6              //              Colon_Def TRUV, "TRUV", is_normal
 845+ 85E6              //              dw      LIT, 20, EMITC, ZERO, EMITC
 846+ 85E6              //              dw      EXIT
 847+ 85E6
 848+ 85E6              //  ______________________________________________________________________
 849+ 85E6              //
 850+ 85E6              // mark     --
 851+ 85E6              //
 852+ 85E6              //              Colon_Def MARK, "MARK", is_normal
 853+ 85E6              //              dw      INVV, TYPE, TRUV
 854+ 85E6              //              dw      EXIT
 855+ 85E6
 856+ 85E6              //  ______________________________________________________________________
 857+ 85E6              //
 858+ 85E6              // back     --
 859+ 85E6              //
 860+ 85E6                              Colon_Def BACK, "BACK", is_normal
 860+ 85E6             >                New_Def  BACK, "BACK", Enter_Ptr, is_normal ; ok
 860+ 85E6             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 860+ 85E6             >
 860+ 85E6             >                // dummy db directives used to calculate length of namec
 860+ 85E6 42 41 43 4B >                db      "BACK"
 860+ 85EA             >len_NFA         defl    $ - temp_NFA
 860+ 85EA             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 860+ 85E6             >
 860+ 85E6 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 860+ 85E7 42 41 43 4B >                db      "BACK"               // name string in 7-bit ascii, but
 860+ 85EB             >                org     $-1                 // alter last byte of Name just above to set
 860+ 85EA CB          >                db      {b $} | END_BIT     // msb as name end
 860+ 85EB             >
 860+ 85EB CC 85       >                dw      last_NFA            // Link to previous definition Name
 860+ 85ED             >BACK:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 860+ 85ED 56 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 860+ 85EF             >                else
 860+ 85EF ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 860+ 85EF             >                endif           ; ok        // for other definitions it "points" the correct handler
 860+ 85EF             >                // Use of "; ok" to suppress "warning[fwdref]"
 860+ 85EF             >
 860+ 85EF             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 861+ 85EF B0 6E 03 6F                  dw      HERE, SUBTRACT, COMMA
 861+ 85F3 CC 6E
 862+ 85F5 52 69                        dw      EXIT
 863+ 85F7
 864+ 85F7              //  ______________________________________________________________________
 865+ 85F7              //
 866+ 85F7              // if          ( -- a 2 ) \ compile-time
 867+ 85F7              // IF ... THEN
 868+ 85F7              // IF ... ELSE ... ENDIF
 869+ 85F7                              Colon_Def IF, "IF", is_immediate
 869+ 85F7             >                New_Def  IF, "IF", Enter_Ptr, is_immediate ; ok
 869+ 85F7             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 869+ 85F7             >
 869+ 85F7             >                // dummy db directives used to calculate length of namec
 869+ 85F7 49 46       >                db      "IF"
 869+ 85F9             >len_NFA         defl    $ - temp_NFA
 869+ 85F9             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 869+ 85F7             >
 869+ 85F7 C2          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 869+ 85F8 49 46       >                db      "IF"               // name string in 7-bit ascii, but
 869+ 85FA             >                org     $-1                 // alter last byte of Name just above to set
 869+ 85F9 C6          >                db      {b $} | END_BIT     // msb as name end
 869+ 85FA             >
 869+ 85FA E6 85       >                dw      last_NFA            // Link to previous definition Name
 869+ 85FC             >IF:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 869+ 85FC 56 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 869+ 85FE             >                else
 869+ 85FE ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 869+ 85FE             >                endif           ; ok        // for other definitions it "points" the correct handler
 869+ 85FE             >                // Use of "; ok" to suppress "warning[fwdref]"
 869+ 85FE             >
 869+ 85FE             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 870+ 85FE 0D 71 E3 63                  dw      COMPILE, ZBRANCH
 871+ 8602 B0 6E D1 6C                  dw      HERE, ZERO, COMMA
 871+ 8606 CC 6E
 872+ 8608 E1 6C                        dw      TWO
 873+ 860A 52 69                        dw      EXIT
 874+ 860C
 875+ 860C              //  ______________________________________________________________________
 876+ 860C              //
 877+ 860C              // endif        ( a 2 -- ) \ compile-time
 878+ 860C              //
 879+ 860C                              Colon_Def ENDIF, "ENDIF", is_immediate
 879+ 860C             >                New_Def  ENDIF, "ENDIF", Enter_Ptr, is_immediate ; ok
 879+ 860C             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 879+ 860C             >
 879+ 860C             >                // dummy db directives used to calculate length of namec
 879+ 860C 45 4E 44 49 >                db      "ENDIF"
 879+ 8610 46          >
 879+ 8611             >len_NFA         defl    $ - temp_NFA
 879+ 8611             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 879+ 860C             >
 879+ 860C C5          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 879+ 860D 45 4E 44 49 >                db      "ENDIF"               // name string in 7-bit ascii, but
 879+ 8611 46          >
 879+ 8612             >                org     $-1                 // alter last byte of Name just above to set
 879+ 8611 C6          >                db      {b $} | END_BIT     // msb as name end
 879+ 8612             >
 879+ 8612 F7 85       >                dw      last_NFA            // Link to previous definition Name
 879+ 8614             >ENDIF:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 879+ 8614 56 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 879+ 8616             >                else
 879+ 8616 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 879+ 8616             >                endif           ; ok        // for other definitions it "points" the correct handler
 879+ 8616             >                // Use of "; ok" to suppress "warning[fwdref]"
 879+ 8616             >
 879+ 8616             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 880+ 8616 94 70                        dw      QCOMP
 881+ 8618 E1 6C C3 70                  dw      TWO, QPAIRS
 882+ 861C B0 6E 93 6A                  dw      HERE, OVER, SUBTRACT, SWAP, STORE
 882+ 8620 03 6F CB 6A
 882+ 8624 78 6B
 883+ 8626 52 69                        dw      EXIT
 884+ 8628
 885+ 8628              //  ______________________________________________________________________
 886+ 8628              //
 887+ 8628              // then        ( a 2 -- ) \ compile-time
 888+ 8628              //
 889+ 8628                              Colon_Def THEN, "THEN", is_immediate
 889+ 8628             >                New_Def  THEN, "THEN", Enter_Ptr, is_immediate ; ok
 889+ 8628             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 889+ 8628             >
 889+ 8628             >                // dummy db directives used to calculate length of namec
 889+ 8628 54 48 45 4E >                db      "THEN"
 889+ 862C             >len_NFA         defl    $ - temp_NFA
 889+ 862C             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 889+ 8628             >
 889+ 8628 C4          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 889+ 8629 54 48 45 4E >                db      "THEN"               // name string in 7-bit ascii, but
 889+ 862D             >                org     $-1                 // alter last byte of Name just above to set
 889+ 862C CE          >                db      {b $} | END_BIT     // msb as name end
 889+ 862D             >
 889+ 862D 0C 86       >                dw      last_NFA            // Link to previous definition Name
 889+ 862F             >THEN:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 889+ 862F 56 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 889+ 8631             >                else
 889+ 8631 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 889+ 8631             >                endif           ; ok        // for other definitions it "points" the correct handler
 889+ 8631             >                // Use of "; ok" to suppress "warning[fwdref]"
 889+ 8631             >
 889+ 8631             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 890+ 8631 14 86                        dw      ENDIF
 891+ 8633 52 69                        dw      EXIT
 892+ 8635
 893+ 8635              //  ______________________________________________________________________
 894+ 8635              //
 895+ 8635              // else        ( a1 2 -- a2 2 ) \ compile-time
 896+ 8635              //
 897+ 8635                              Colon_Def ELSE, "ELSE", is_immediate
 897+ 8635             >                New_Def  ELSE, "ELSE", Enter_Ptr, is_immediate ; ok
 897+ 8635             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 897+ 8635             >
 897+ 8635             >                // dummy db directives used to calculate length of namec
 897+ 8635 45 4C 53 45 >                db      "ELSE"
 897+ 8639             >len_NFA         defl    $ - temp_NFA
 897+ 8639             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 897+ 8635             >
 897+ 8635 C4          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 897+ 8636 45 4C 53 45 >                db      "ELSE"               // name string in 7-bit ascii, but
 897+ 863A             >                org     $-1                 // alter last byte of Name just above to set
 897+ 8639 C5          >                db      {b $} | END_BIT     // msb as name end
 897+ 863A             >
 897+ 863A 28 86       >                dw      last_NFA            // Link to previous definition Name
 897+ 863C             >ELSE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 897+ 863C 56 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 897+ 863E             >                else
 897+ 863E ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 897+ 863E             >                endif           ; ok        // for other definitions it "points" the correct handler
 897+ 863E             >                // Use of "; ok" to suppress "warning[fwdref]"
 897+ 863E             >
 897+ 863E             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 898+ 863E 94 70                        dw      QCOMP
 899+ 8640 E1 6C C3 70                  dw      TWO, QPAIRS
 900+ 8644 0D 71 CC 63                  dw      COMPILE, BRANCH
 901+ 8648 B0 6E D1 6C                  dw      HERE, ZERO, COMMA
 901+ 864C CC 6E
 902+ 864E CB 6A E1 6C                  dw      SWAP, TWO, ENDIF
 902+ 8652 14 86
 903+ 8654 E1 6C                        dw      TWO
 904+ 8656 52 69                        dw      EXIT
 905+ 8658
 906+ 8658              //  ______________________________________________________________________
 907+ 8658              //
 908+ 8658              // begin        ( -- a 1 ) \ compile-time
 909+ 8658              // BEGIN ... AGAIN
 910+ 8658              // BEGIN ... f UNTIL
 911+ 8658              // BEGIN ... f WHILE ... REPEAT
 912+ 8658                              Colon_Def BEGIN, "BEGIN", is_immediate
 912+ 8658             >                New_Def  BEGIN, "BEGIN", Enter_Ptr, is_immediate ; ok
 912+ 8658             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 912+ 8658             >
 912+ 8658             >                // dummy db directives used to calculate length of namec
 912+ 8658 42 45 47 49 >                db      "BEGIN"
 912+ 865C 4E          >
 912+ 865D             >len_NFA         defl    $ - temp_NFA
 912+ 865D             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 912+ 8658             >
 912+ 8658 C5          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 912+ 8659 42 45 47 49 >                db      "BEGIN"               // name string in 7-bit ascii, but
 912+ 865D 4E          >
 912+ 865E             >                org     $-1                 // alter last byte of Name just above to set
 912+ 865D CE          >                db      {b $} | END_BIT     // msb as name end
 912+ 865E             >
 912+ 865E 35 86       >                dw      last_NFA            // Link to previous definition Name
 912+ 8660             >BEGIN:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 912+ 8660 56 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 912+ 8662             >                else
 912+ 8662 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 912+ 8662             >                endif           ; ok        // for other definitions it "points" the correct handler
 912+ 8662             >                // Use of "; ok" to suppress "warning[fwdref]"
 912+ 8662             >
 912+ 8662             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 913+ 8662 94 70                        dw      QCOMP
 914+ 8664 B0 6E                        dw      HERE
 915+ 8666 E1 6C                        dw      TWO
 916+ 8668 52 69                        dw      EXIT
 917+ 866A
 918+ 866A              //  ______________________________________________________________________
 919+ 866A              //
 920+ 866A              // again        ( a 1 -- ) \ compile-time
 921+ 866A                              Colon_Def AGAIN, "AGAIN", is_immediate
 921+ 866A             >                New_Def  AGAIN, "AGAIN", Enter_Ptr, is_immediate ; ok
 921+ 866A             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 921+ 866A             >
 921+ 866A             >                // dummy db directives used to calculate length of namec
 921+ 866A 41 47 41 49 >                db      "AGAIN"
 921+ 866E 4E          >
 921+ 866F             >len_NFA         defl    $ - temp_NFA
 921+ 866F             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 921+ 866A             >
 921+ 866A C5          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 921+ 866B 41 47 41 49 >                db      "AGAIN"               // name string in 7-bit ascii, but
 921+ 866F 4E          >
 921+ 8670             >                org     $-1                 // alter last byte of Name just above to set
 921+ 866F CE          >                db      {b $} | END_BIT     // msb as name end
 921+ 8670             >
 921+ 8670 58 86       >                dw      last_NFA            // Link to previous definition Name
 921+ 8672             >AGAIN:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 921+ 8672 56 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 921+ 8674             >                else
 921+ 8674 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 921+ 8674             >                endif           ; ok        // for other definitions it "points" the correct handler
 921+ 8674             >                // Use of "; ok" to suppress "warning[fwdref]"
 921+ 8674             >
 921+ 8674             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 922+ 8674 94 70                        dw      QCOMP
 923+ 8676 E1 6C C3 70                  dw      TWO, QPAIRS
 924+ 867A 0D 71 CC 63                  dw      COMPILE, BRANCH
 925+ 867E ED 85                        dw      BACK
 926+ 8680 52 69                        dw      EXIT
 927+ 8682
 928+ 8682              //  ______________________________________________________________________
 929+ 8682              //
 930+ 8682              // until        ( a 1 -- ) \ compile-time
 931+ 8682                              Colon_Def UNTIL, "UNTIL", is_immediate
 931+ 8682             >                New_Def  UNTIL, "UNTIL", Enter_Ptr, is_immediate ; ok
 931+ 8682             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 931+ 8682             >
 931+ 8682             >                // dummy db directives used to calculate length of namec
 931+ 8682 55 4E 54 49 >                db      "UNTIL"
 931+ 8686 4C          >
 931+ 8687             >len_NFA         defl    $ - temp_NFA
 931+ 8687             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 931+ 8682             >
 931+ 8682 C5          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 931+ 8683 55 4E 54 49 >                db      "UNTIL"               // name string in 7-bit ascii, but
 931+ 8687 4C          >
 931+ 8688             >                org     $-1                 // alter last byte of Name just above to set
 931+ 8687 CC          >                db      {b $} | END_BIT     // msb as name end
 931+ 8688             >
 931+ 8688 6A 86       >                dw      last_NFA            // Link to previous definition Name
 931+ 868A             >UNTIL:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 931+ 868A 56 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 931+ 868C             >                else
 931+ 868C ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 931+ 868C             >                endif           ; ok        // for other definitions it "points" the correct handler
 931+ 868C             >                // Use of "; ok" to suppress "warning[fwdref]"
 931+ 868C             >
 931+ 868C             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 932+ 868C 94 70                        dw      QCOMP
 933+ 868E E1 6C C3 70                  dw      TWO, QPAIRS
 934+ 8692 0D 71 E3 63                  dw      COMPILE, ZBRANCH
 935+ 8696 ED 85                        dw      BACK
 936+ 8698 52 69                        dw      EXIT
 937+ 869A
 938+ 869A              //  ______________________________________________________________________
 939+ 869A              //
 940+ 869A              // end          ( a 1 -- ) \ compile-time
 941+ 869A                              Colon_Def END, "END", is_immediate
 941+ 869A             >                New_Def  END, "END", Enter_Ptr, is_immediate ; ok
 941+ 869A             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 941+ 869A             >
 941+ 869A             >                // dummy db directives used to calculate length of namec
 941+ 869A 45 4E 44    >                db      "END"
 941+ 869D             >len_NFA         defl    $ - temp_NFA
 941+ 869D             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 941+ 869A             >
 941+ 869A C3          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 941+ 869B 45 4E 44    >                db      "END"               // name string in 7-bit ascii, but
 941+ 869E             >                org     $-1                 // alter last byte of Name just above to set
 941+ 869D C4          >                db      {b $} | END_BIT     // msb as name end
 941+ 869E             >
 941+ 869E 82 86       >                dw      last_NFA            // Link to previous definition Name
 941+ 86A0             >END:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 941+ 86A0 56 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 941+ 86A2             >                else
 941+ 86A2 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 941+ 86A2             >                endif           ; ok        // for other definitions it "points" the correct handler
 941+ 86A2             >                // Use of "; ok" to suppress "warning[fwdref]"
 941+ 86A2             >
 941+ 86A2             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 942+ 86A2 8A 86                        dw      UNTIL
 943+ 86A4 52 69                        dw      EXIT
 944+ 86A6
 945+ 86A6              //  ______________________________________________________________________
 946+ 86A6              //
 947+ 86A6              // while        ( a1 1 -- a1 1 a2 4 ) \ compile-time
 948+ 86A6                              Colon_Def WHILE, "WHILE", is_immediate
 948+ 86A6             >                New_Def  WHILE, "WHILE", Enter_Ptr, is_immediate ; ok
 948+ 86A6             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 948+ 86A6             >
 948+ 86A6             >                // dummy db directives used to calculate length of namec
 948+ 86A6 57 48 49 4C >                db      "WHILE"
 948+ 86AA 45          >
 948+ 86AB             >len_NFA         defl    $ - temp_NFA
 948+ 86AB             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 948+ 86A6             >
 948+ 86A6 C5          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 948+ 86A7 57 48 49 4C >                db      "WHILE"               // name string in 7-bit ascii, but
 948+ 86AB 45          >
 948+ 86AC             >                org     $-1                 // alter last byte of Name just above to set
 948+ 86AB C5          >                db      {b $} | END_BIT     // msb as name end
 948+ 86AC             >
 948+ 86AC 9A 86       >                dw      last_NFA            // Link to previous definition Name
 948+ 86AE             >WHILE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 948+ 86AE 56 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 948+ 86B0             >                else
 948+ 86B0 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 948+ 86B0             >                endif           ; ok        // for other definitions it "points" the correct handler
 948+ 86B0             >                // Use of "; ok" to suppress "warning[fwdref]"
 948+ 86B0             >
 948+ 86B0             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 949+ 86B0 FC 85                        dw      IF
 950+ 86B2              //              dw      TWO_PLUS // ( that is 4 )
 951+ 86B2 27 6B                        dw      TWO_SWAP
 952+ 86B4 52 69                        dw      EXIT
 953+ 86B6
 954+ 86B6              //  ______________________________________________________________________
 955+ 86B6              //
 956+ 86B6              // repeat       ( a1 1 a2 4 -- ) \ compile-time
 957+ 86B6                              Colon_Def REPEAT, "REPEAT", is_immediate
 957+ 86B6             >                New_Def  REPEAT, "REPEAT", Enter_Ptr, is_immediate ; ok
 957+ 86B6             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 957+ 86B6             >
 957+ 86B6             >                // dummy db directives used to calculate length of namec
 957+ 86B6 52 45 50 45 >                db      "REPEAT"
 957+ 86BA 41 54       >
 957+ 86BC             >len_NFA         defl    $ - temp_NFA
 957+ 86BC             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 957+ 86B6             >
 957+ 86B6 C6          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 957+ 86B7 52 45 50 45 >                db      "REPEAT"               // name string in 7-bit ascii, but
 957+ 86BB 41 54       >
 957+ 86BD             >                org     $-1                 // alter last byte of Name just above to set
 957+ 86BC D4          >                db      {b $} | END_BIT     // msb as name end
 957+ 86BD             >
 957+ 86BD A6 86       >                dw      last_NFA            // Link to previous definition Name
 957+ 86BF             >REPEAT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 957+ 86BF 56 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 957+ 86C1             >                else
 957+ 86C1 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 957+ 86C1             >                endif           ; ok        // for other definitions it "points" the correct handler
 957+ 86C1             >                // Use of "; ok" to suppress "warning[fwdref]"
 957+ 86C1             >
 957+ 86C1             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 958+ 86C1 72 86                        dw      AGAIN
 959+ 86C3              //              dw      TWO_MINUS
 960+ 86C3 14 86                        dw      ENDIF
 961+ 86C5 52 69                        dw      EXIT
 962+ 86C7
 963+ 86C7              //  ______________________________________________________________________
 964+ 86C7              //
 965+ 86C7              // ?do-
 966+ 86C7              // special version of "BACK" used by ?DO and LOOP
 967+ 86C7                              Colon_Def C_DO_BACK, "?DO-", is_normal
 967+ 86C7             >                New_Def  C_DO_BACK, "?DO-", Enter_Ptr, is_normal ; ok
 967+ 86C7             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 967+ 86C7             >
 967+ 86C7             >                // dummy db directives used to calculate length of namec
 967+ 86C7 3F 44 4F 2D >                db      "?DO-"
 967+ 86CB             >len_NFA         defl    $ - temp_NFA
 967+ 86CB             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 967+ 86C7             >
 967+ 86C7 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 967+ 86C8 3F 44 4F 2D >                db      "?DO-"               // name string in 7-bit ascii, but
 967+ 86CC             >                org     $-1                 // alter last byte of Name just above to set
 967+ 86CB AD          >                db      {b $} | END_BIT     // msb as name end
 967+ 86CC             >
 967+ 86CC B6 86       >                dw      last_NFA            // Link to previous definition Name
 967+ 86CE             >C_DO_BACK:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 967+ 86CE 56 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 967+ 86D0             >                else
 967+ 86D0 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 967+ 86D0             >                endif           ; ok        // for other definitions it "points" the correct handler
 967+ 86D0             >                // Use of "; ok" to suppress "warning[fwdref]"
 967+ 86D0             >
 967+ 86D0             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 968+ 86D0 ED 85                        dw      BACK
 969+ 86D2              CDoBack_Begin:
 970+ 86D2 1A 69 41 6E                  dw      SPFETCH, CSP, FETCH, SUBTRACT
 970+ 86D6 6B 6B 03 6F
 971+ 86DA E3 63                        dw      ZBRANCH
 972+ 86DC 0A 00                        dw      CDoBack_While - $
 973+ 86DE 31 6A 14 86                  dw          TWO_PLUS, ENDIF
 974+ 86E2 CC 63                        dw      BRANCH
 975+ 86E4 EE FF                        dw      CDoBack_Begin - $
 976+ 86E6              CDoBack_While:
 977+ 86E6 D6 70 41 6E                  dw      QCSP, CSP, STORE
 977+ 86EA 78 6B
 978+ 86EC 52 69                        dw      EXIT
 979+ 86EE
 980+ 86EE              //  ______________________________________________________________________
 981+ 86EE              //
 982+ 86EE              // do
 983+ 86EE              // DO  ... LOOP
 984+ 86EE              // DO  ... n +LOOP
 985+ 86EE              // ?DO ... LOOP
 986+ 86EE              // ?DO ... n +LOOP
 987+ 86EE                              Colon_Def DO, "DO", is_immediate
 987+ 86EE             >                New_Def  DO, "DO", Enter_Ptr, is_immediate ; ok
 987+ 86EE             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 987+ 86EE             >
 987+ 86EE             >                // dummy db directives used to calculate length of namec
 987+ 86EE 44 4F       >                db      "DO"
 987+ 86F0             >len_NFA         defl    $ - temp_NFA
 987+ 86F0             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 987+ 86EE             >
 987+ 86EE C2          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 987+ 86EF 44 4F       >                db      "DO"               // name string in 7-bit ascii, but
 987+ 86F1             >                org     $-1                 // alter last byte of Name just above to set
 987+ 86F0 CF          >                db      {b $} | END_BIT     // msb as name end
 987+ 86F1             >
 987+ 86F1 C7 86       >                dw      last_NFA            // Link to previous definition Name
 987+ 86F3             >DO:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 987+ 86F3 56 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 987+ 86F5             >                else
 987+ 86F5 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 987+ 86F5             >                endif           ; ok        // for other definitions it "points" the correct handler
 987+ 86F5             >                // Use of "; ok" to suppress "warning[fwdref]"
 987+ 86F5             >
 987+ 86F5             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 988+ 86F5 0D 71 70 64                  dw      COMPILE, C_DO
 989+ 86F9 41 6E 6B 6B                  dw      CSP, FETCH, STORE_CSP
 989+ 86FD 67 70
 990+ 86FF B0 6E E9 6C                  dw      HERE, THREE
 991+ 8703 52 69                        dw      EXIT
 992+ 8705
 993+ 8705              //  ______________________________________________________________________
 994+ 8705              //
 995+ 8705              // loop
 996+ 8705                              Colon_Def LOOP, "LOOP", is_immediate
 996+ 8705             >                New_Def  LOOP, "LOOP", Enter_Ptr, is_immediate ; ok
 996+ 8705             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 996+ 8705             >
 996+ 8705             >                // dummy db directives used to calculate length of namec
 996+ 8705 4C 4F 4F 50 >                db      "LOOP"
 996+ 8709             >len_NFA         defl    $ - temp_NFA
 996+ 8709             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 996+ 8705             >
 996+ 8705 C4          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 996+ 8706 4C 4F 4F 50 >                db      "LOOP"               // name string in 7-bit ascii, but
 996+ 870A             >                org     $-1                 // alter last byte of Name just above to set
 996+ 8709 D0          >                db      {b $} | END_BIT     // msb as name end
 996+ 870A             >
 996+ 870A EE 86       >                dw      last_NFA            // Link to previous definition Name
 996+ 870C             >LOOP:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 996+ 870C 56 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 996+ 870E             >                else
 996+ 870E ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 996+ 870E             >                endif           ; ok        // for other definitions it "points" the correct handler
 996+ 870E             >                // Use of "; ok" to suppress "warning[fwdref]"
 996+ 870E             >
 996+ 870E             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 997+ 870E E9 6C C3 70                  dw      THREE, QPAIRS
 998+ 8712 0D 71 31 64                  dw      COMPILE, C_LOOP
 999+ 8716 CE 86                        dw      C_DO_BACK
1000+ 8718 52 69                        dw      EXIT
1001+ 871A
1002+ 871A              //  ______________________________________________________________________
1003+ 871A              //
1004+ 871A              // +loop
1005+ 871A                              Colon_Def PLOOP, "+LOOP", is_immediate
1005+ 871A             >                New_Def  PLOOP, "+LOOP", Enter_Ptr, is_immediate ; ok
1005+ 871A             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1005+ 871A             >
1005+ 871A             >                // dummy db directives used to calculate length of namec
1005+ 871A 2B 4C 4F 4F >                db      "+LOOP"
1005+ 871E 50          >
1005+ 871F             >len_NFA         defl    $ - temp_NFA
1005+ 871F             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1005+ 871A             >
1005+ 871A C5          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
1005+ 871B 2B 4C 4F 4F >                db      "+LOOP"               // name string in 7-bit ascii, but
1005+ 871F 50          >
1005+ 8720             >                org     $-1                 // alter last byte of Name just above to set
1005+ 871F D0          >                db      {b $} | END_BIT     // msb as name end
1005+ 8720             >
1005+ 8720 05 87       >                dw      last_NFA            // Link to previous definition Name
1005+ 8722             >PLOOP:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1005+ 8722 56 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
1005+ 8724             >                else
1005+ 8724 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
1005+ 8724             >                endif           ; ok        // for other definitions it "points" the correct handler
1005+ 8724             >                // Use of "; ok" to suppress "warning[fwdref]"
1005+ 8724             >
1005+ 8724             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1006+ 8724 E9 6C C3 70                  dw      THREE, QPAIRS
1007+ 8728 0D 71 F9 63                  dw      COMPILE, C_PLOOP
1008+ 872C CE 86                        dw      C_DO_BACK
1009+ 872E 52 69                        dw      EXIT
1010+ 8730
1011+ 8730              //  ______________________________________________________________________
1012+ 8730              //
1013+ 8730              // ?do
1014+ 8730                              Colon_Def QDO, "?DO", is_immediate
1014+ 8730             >                New_Def  QDO, "?DO", Enter_Ptr, is_immediate ; ok
1014+ 8730             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1014+ 8730             >
1014+ 8730             >                // dummy db directives used to calculate length of namec
1014+ 8730 3F 44 4F    >                db      "?DO"
1014+ 8733             >len_NFA         defl    $ - temp_NFA
1014+ 8733             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1014+ 8730             >
1014+ 8730 C3          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
1014+ 8731 3F 44 4F    >                db      "?DO"               // name string in 7-bit ascii, but
1014+ 8734             >                org     $-1                 // alter last byte of Name just above to set
1014+ 8733 CF          >                db      {b $} | END_BIT     // msb as name end
1014+ 8734             >
1014+ 8734 1A 87       >                dw      last_NFA            // Link to previous definition Name
1014+ 8736             >QDO:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1014+ 8736 56 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
1014+ 8738             >                else
1014+ 8738 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
1014+ 8738             >                endif           ; ok        // for other definitions it "points" the correct handler
1014+ 8738             >                // Use of "; ok" to suppress "warning[fwdref]"
1014+ 8738             >
1014+ 8738             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1015+ 8738 0D 71 42 64                  dw      COMPILE, C_Q_DO
1016+ 873C 41 6E 6B 6B                  dw      CSP, FETCH, STORE_CSP
1016+ 8740 67 70
1017+ 8742 B0 6E D1 6C                  dw      HERE, ZERO, COMMA, ZERO
1017+ 8746 CC 6E D1 6C
1018+ 874A B0 6E E9 6C                  dw      HERE, THREE
1019+ 874E 52 69                        dw      EXIT
1020+ 8750
1021+ 8750              Latest_Definition:
1022+ 8750              //  ______________________________________________________________________
1023+ 8750              //
1024+ 8750              // \
1025+ 8750                              Colon_Def BACKSLASH, "\\", is_immediate  // this is a single back-slash
1025+ 8750             >                New_Def  BACKSLASH, "\\", Enter_Ptr, is_immediate ; ok
1025+ 8750             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1025+ 8750             >
1025+ 8750             >                // dummy db directives used to calculate length of namec
1025+ 8750 5C          >                db      "\\"
1025+ 8751             >len_NFA         defl    $ - temp_NFA
1025+ 8751             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1025+ 8750             >
1025+ 8750 C1          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
1025+ 8751 5C          >                db      "\\"               // name string in 7-bit ascii, but
1025+ 8752             >                org     $-1                 // alter last byte of Name just above to set
1025+ 8751 DC          >                db      {b $} | END_BIT     // msb as name end
1025+ 8752             >
1025+ 8752 30 87       >                dw      last_NFA            // Link to previous definition Name
1025+ 8754             >BACKSLASH:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1025+ 8754 56 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
1025+ 8756             >                else
1025+ 8756 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
1025+ 8756             >                endif           ; ok        // for other definitions it "points" the correct handler
1025+ 8756             >                // Use of "; ok" to suppress "warning[fwdref]"
1025+ 8756             >
1025+ 8756             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1026+ 8756 D0 6D 6B 6B                  dw      BLK, FETCH
1027+ 875A E3 63                        dw      ZBRANCH
1028+ 875C 30 00                        dw      Backslash_Else_1 - $
1029+ 875E D0 6D 6B 6B                  dw          BLK, FETCH, ONE, GREATER  // BLOCK 1 is used as temp-line in INCLUDE file
1029+ 8762 D9 6C 4E 6F
1030+ 8766 E3 63                        dw          ZBRANCH
1031+ 8768 18 00                        dw          Backslash_Else_2 - $
1032+ 876A D9 6D 6B 6B                  dw              TO_IN, FETCH, CL, MOD, CL
1032+ 876E 05 6D 65 7A
1032+ 8772 05 6D
1033+ 8774 CB 6A 03 6F                  dw              SWAP, SUBTRACT, TO_IN, PLUSSTORE
1033+ 8778 D9 6D 48 6B
1034+ 877C CC 63                        dw          BRANCH
1035+ 877E 0A 00                        dw          Backslash_Endif_2 - $
1036+ 8780              Backslash_Else_2:
1037+ 8780 11 6D 4B 6A                  dw              BBUF, CELL_MINUS, TO_IN, STORE
1037+ 8784 D9 6D 78 6B
1038+ 8788              Backslash_Endif_2:
1039+ 8788 CC 63                        dw      BRANCH
1040+ 878A 0A 00                        dw      Backslash_Endif_1 - $
1041+ 878C              Backslash_Else_1:
1042+ 878C A9 63 50 00                  dw          LIT, 80, TO_IN, STORE
1042+ 8790 D9 6D 78 6B
1043+ 8794              Backslash_Endif_1:
1044+ 8794 52 69                        dw      EXIT
1045+ 8796
1046+ 8796              Fence_Word:
1047+ 8796              //  ______________________________________________________________________
1048+ 8796              //
1049+ 8796
1050+ 8796 00           Here_Dictionary db      0
1051+ 8797
# file closed: C:\Zx\CSpect\Projects\vForth15_INDIRECT/source/L3.asm
 114  8797
 115  8797              // now we save the compiled file so we can either run it or debug it
 116  8797                              SAVENEX OPEN "output/main.nex", ORIGIN
 117  8797                              SAVENEX CORE 3, 0, 0                                // Next core 3.0.0 required as minimum
 118  8797                              SAVENEX CFG  0
 119  8797                              SAVENEX BANK 2, 0
 120  8797                              SAVENEX AUTO
 121  8797                              SAVENEX CLOSE
 122  8797
 123  8797              //              PAGE 7 ;set 7 page to current slot
 124  8797              //              SAVEBIN "ram7.bin",$C000,$4000 ;- save 4000h begin from C000h of RAM to file
 125  8797              //              SAVEBIN "output/ram2.bin", $8000, 9800 ;- save 3000h begin from 8000h of RAM to file
 126  8797
 127  8797                              SAVETAP "output/F15E.tap", CODE, "forth15e", ORIGIN, 10000
 128  8797
 129  8797                              SAVEBIN "output/forth15E.bin", ORIGIN, 10000
 130  8797
 131  8797                              END
# file closed: C:\Zx\CSpect\Projects\vForth15_INDIRECT/source/main.asm
