# file opened: C:\Zx\CSpect\Projects\vForth15_INDIRECT/source/main.asm
   1  0000              //  ______________________________________________________________________
   2  0000              //
   3  0000              //  main.asm
   4  0000              //  ______________________________________________________________________
   5  0000              //
   6  0000              // v-Forth 1.5 NextZXOS version
   7  0000              // build 20210916
   8  0000              //
   9  0000              //
  10  0000              //  NextZXOS version
  11  0000              //  ______________________________________________________________________
  12  0000              //
  13  0000              //  This work is available as-is with no whatsoever warranty.
  14  0000              //  Copying, modifying and distributing this software is allowed
  15  0000              //  provided that the copyright notice is kept.
  16  0000              //  ______________________________________________________________________
  17  0000              //
  18  0000              //  by Matteo Vitturi, 1990-2021
  19  0000              //
  20  0000              //  https://sites.google.com/view/vforth/vforth15-next
  21  0000              //  https://www.oocities.org/matteo_vitturi/english/index.htm
  22  0000              //
  23  0000              //  This is the complete compiler for v.Forth for SINCLAIR ZX Spectrum Next.
  24  0000              //  Each line of this source list mustn't exceed 80 bytes.
  25  0000              //  Z80N (ZX Spectrum Next) extension is available.
  26  0000              //
  27  0000              //  This list has been tested using the following configuration:
  28  0000              //      - CSpect emulator V.2.12.30
  29  0000              //  ______________________________________________________________________
  30  0000              //
  31  0000              //  Z80 Registers usage map
  32  0000              //
  33  0000              //  AF
  34  0000              //  BC - Instruction Pointer: should be preserved during ROM/OS calls
  35  0000              //  DE - Working
  36  0000              //  HL - Working
  37  0000              //
  38  0000              //  AF'- Sometime used for backup purpose
  39  0000              //  BC'- Not used
  40  0000              //  DE'- Not used
  41  0000              //  HL'- Not used: (saved at startup)
  42  0000              //
  43  0000              //  SP - Calculator Stack Pointer
  44  0000              //  IX - Inner interpreter "next" address pointer. This way jp (ix) is 2T-state faster than JP next
  45  0000              //  IY - (ZX System: must be preserved to interact with standard ROM)
  46  0000              //
  47  0000              //  ______________________________________________________________________
  48  0000              //
  49  0000              //  _________________
  50  0000              //
  51  0000              //  FORTH DEFINITIONS
  52  0000              //  _________________
  53  0000
  54  0000                              OPT     --zxnext
  55  0000              //  ______________________________________________________________________
  56  0000              //
  57  0000              // this controls some debugging code in L0.asm
  58  0000              //  0 for final binary release.
  59  0000              //  1 for debugging with Visual Studio Code and DeZog
  60  0000              // -1 for for binary comparison with Forth generated code.
  61  0000              DEBUGGING       equ     -1
  62  0000              //
  63  0000              //  ______________________________________________________________________
  64  0000
  65  0000                              if ( -1 == DEBUGGING )
  66  0000              ORIGIN          equ     $62E6                   // for binary comparison
  67  0000                              endif
  68  0000              //  ______________________________________________________________________
  69  0000
  70  0000                              if (  0 == DEBUGGING )
  71  0000 ~            ORIGIN          equ     $6366                   // binary
  72  0000                              endif
  73  0000              //  ______________________________________________________________________
  74  0000
  75  0000                              if (  1 == DEBUGGING )
  76  0000 ~            ORIGIN          equ     $8080                   // for DeZog
  77  0000                              endif
  78  0000              //  ______________________________________________________________________
  79  0000
  80  0000                              DEVICE  ZXSPECTRUMNEXT
  81  0000
  82  0000                              ORG     ORIGIN
  83  62E6
  84  62E6                              if ( -1 == DEBUGGING )
  85  62E6 00 00 00...                  ds 128                            // for binary comparison
  86  62EA                              endif
  87  6366
  88  6366              //  ______________________________________________________________________
  89  6366              //
  90  6366              //  Naming convention for Label vs Forth correspondance
  91  6366              //  Forth words are named as they are named for real with some exception to avoid assembler syntax errors.
  92  6366              //    - Leading "0" is converted into "Z_"
  93  6366              //    - Leading "(" is converted into "C_", closing bracket is omitted
  94  6366              //    - Leading numbers are converted in letters: ONE_  TWO_ etc.
  95  6366              //    - Question mark "?" is converted into "Q" or omitted if needed / useful.
  96  6366              //    - Plus sign "+" is converted in _PLUS or ADD_ depending.
  97  6366              //    - Minus sign "-" in L (for Line), MINUS or SUBTRACT depending
  98  6366              //    - Greater-Than sign ">" in _GREATER or TO_ depending
  99  6366              //    - Equal sign "=" is converted in EQUAL
 100  6366              //    - Less-Than sign "<" in _LESS or FROM_ (or TO_ again) depending
 101  6366              //    - Asterisk sign "*" is converted in _MUL or STAR
 102  6366              //    - Slash "/" is converted in _DIV or omitted if it is clear what it means
 103  6366              //    - Exclamation mark "!" is converted in STORE
 104  6366              //    - At-Sign "@" is converted in FETCH
 105  6366              //    - Words that collide with Assembler are normally suffixed with "_OP"
 106  6366
 107  6366                              include "system.asm"
# file opened: C:\Zx\CSpect\Projects\vForth15_INDIRECT/source/system.asm
   1+ 6366              //  ______________________________________________________________________
   2+ 6366              //
   3+ 6366              //  system.asm
   4+ 6366              //  ______________________________________________________________________
   5+ 6366
   6+ 6366              // Registers:
   7+ 6366              //
   8+ 6366              //      BC: Instruction Pointer
   9+ 6366              //      DE:
  10+ 6366              //      HL: W register
  11+ 6366              //      SP: Calc stack Pointer
  12+ 6366              //      IX: Inner-Interpreter Address
  13+ 6366
  14+ 6366              //  ______________________________________________________________________
  15+ 6366              //
  16+ 6366              // ZX-Spectrum standard system variables
  17+ 6366              SCR_CT          equ     $5C8C                   // SCR-CT system variable
  18+ 6366              LASTK           equ     $5C08                   // LASTK system variable
  19+ 6366              BORDCR          equ     $5C48                   // BORDCR system variable
  20+ 6366              FLAGS2          equ     $5C6A                   // for caps-lock
  21+ 6366
  22+ 6366              //  ______________________________________________________________________
  23+ 6366              //
  24+ 6366              // Flag constants
  25+ 6366              TRUE_FLAG       equ     $FFFF
  26+ 6366              FALSE_FLAG      equ     $0000
  27+ 6366
  28+ 6366              //  ______________________________________________________________________
  29+ 6366              //
  30+ 6366              // Ascii char constants
  31+ 6366              NUL_CHAR        equ     $00
  32+ 6366              COMMA_CHAR      equ     $06
  33+ 6366              BACKSPACE_CHAR  equ     $08
  34+ 6366              CR_CHAR         equ     $0D
  35+ 6366              BLANK_CHAR      equ     $20
  36+ 6366              QUOTE_CHAR      equ     "'"
  37+ 6366              DQUOTE_CHAR     equ     '"'
  38+ 6366              UNDERSCORE_CHAR equ     $5F
  39+ 6366              SOLIDBLOCK_CHAR equ     $8F
  40+ 6366              HALFBLOCK_CHAR  equ     $8C
  41+ 6366              LC_A_CHAR       equ     $61                 // lower-case "a"
  42+ 6366              LC_Z_CHAR       equ     $7A                 // lower-case "z"
  43+ 6366
  44+ 6366
  45+ 6366              //  ______________________________________________________________________
  46+ 6366              //
  47+ 6366
  48+ 6366                              // emulate something like:  ld hl,rp
  49+ 6366              ldhlrp          macro
  50+ 6366 ~                            ld      hl,(RP_Pointer)
  51+ 6366                              endm
  52+ 6366
  53+ 6366                              // emulate something like:  ld rp,hl
  54+ 6366              ldrphl          macro
  55+ 6366 ~                            ld      (RP_Pointer),hl
  56+ 6366                              endm
  57+ 6366
  58+ 6366              //  ______________________________________________________________________
  59+ 6366              //
  60+ 6366              //  Inner interpreter next-address pointer. This is 2T-state faster than "jp address"
  61+ 6366              next            macro
  62+ 6366 ~                            jp      (ix)
  63+ 6366                              endm
  64+ 6366
  65+ 6366              psh1            macro
  66+ 6366 ~                            push    hl
  67+ 6366 ~                            jp      (ix)
  68+ 6366                              endm
  69+ 6366
  70+ 6366              psh2            macro
  71+ 6366 ~                            push    de
  72+ 6366 ~                            push    hl
  73+ 6366 ~                            jp      (ix)
  74+ 6366                              endm
  75+ 6366
  76+ 6366              //  ______________________________________________________________________
  77+ 6366              //
  78+ 6366              // Bit constants in length-byte
  79+ 6366
  80+ 6366              SMUDGE_BIT      equ     %00100000               // $20
  81+ 6366              IMMEDIATE_BIT   equ     %01000000               // $40
  82+ 6366              END_BIT         equ     %10000000               // $80
  83+ 6366
  84+ 6366
  85+ 6366              //  ______________________________________________________________________
  86+ 6366              //
  87+ 6366              //  To create Forth words using this (nice) Assembler, we have to use the two following
  88+ 6366              //  pointers
  89+ 6366              temp_NFA        defl    0
  90+ 6366              last_NFA        defl    0
  91+ 6366              len_NFA         defl    0
  92+ 6366
  93+ 6366              is_code         equ     0                   // so the direct machine-code starts at CFA
  94+ 6366              is_normal       equ     0                   // so the direct machine-code starts at CFA
  95+ 6366              is_immediate    equ     IMMEDIATE_BIT       // $40 - the definition is IMMEDIATE.
  96+ 6366
  97+ 6366              //  ______________________________________________________________________
  98+ 6366              //
  99+ 6366              //  Create a new "low-level" definition
 100+ 6366              //  This macro is used in the form  Create FORTH_NAME,n,"forth_name"
 101+ 6366              //  to create a new Forth Dictionary entry the same way Forth itself would do.
 102+ 6366              //  A word begins with a Length-Byte in range 1-31. Top 3 msb are used as flags
 103+ 6366              //  see SMUDGE_BIT and IMMEDIATE_BIT constant above.
 104+ 6366              //  It is followed by the Name of the word, i.e. a string expressed in 7-bit Ascii.
 105+ 6366              //  The last character of the Name must have the msb set to signal the end of it (END_BIT)
 106+ 6366              //  This macro acts much like the standard Forth definition CREATE
 107+ 6366
 108+ 6366              New_Def         macro   label, namec, runcode, bits
 109+ 6366 ~            temp_NFA        defl    $                   // save this NFA address to temp_NFA
 110+ 6366 ~
 111+ 6366 ~                            // dummy db directives used to calculate length of namec
 112+ 6366 ~                            db      namec
 113+ 6366 ~            len_NFA         defl    $ - temp_NFA
 114+ 6366 ~                            org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 115+ 6366 ~
 116+ 6366 ~                            db      len_NFA | END_BIT | bits  // The start of NFA must have msb set to signal the beginning of the sounted string
 117+ 6366 ~                            db      namec               // name string in 7-bit ascii, but
 118+ 6366 ~                            org     $-1                 // alter last byte of Name just above to set
 119+ 6366 ~                            db      {b $} | END_BIT     // msb as name end
 120+ 6366 ~
 121+ 6366 ~                            dw      last_NFA            // Link to previous definition Name
 122+ 6366 ~            label:          if runcode != 0 ; ok        // This is the start address of the direct jp(hl)
 123+ 6366 ~                            dw      runcode ; ok        // for primitive definitions  actual code
 124+ 6366 ~                            else
 125+ 6366 ~                            dw      $ + 2   ; ok        // is pointed by CFA
 126+ 6366 ~                            endif           ; ok        // for other definitions it "points" the correct handler
 127+ 6366 ~                            // Use of "; ok" to suppress "warning[fwdref]"
 128+ 6366 ~
 129+ 6366 ~            last_NFA        defl    temp_NFA            // keep track of NFA saved above
 130+ 6366                              endm
 131+ 6366
 132+ 6366              //  ______________________________________________________________________
 133+ 6366              //
 134+ 6366              // Create a "constant"
 135+ 6366              // The constant value is compiled in first PFA cell
 136+ 6366              Constant_Def    macro   label, namec, constant_value
 137+ 6366 ~                            New_Def  label, namec, Constant_Ptr, is_normal
 138+ 6366 ~                            dw      constant_value
 139+ 6366                              endm
 140+ 6366
 141+ 6366              //  ______________________________________________________________________
 142+ 6366              //
 143+ 6366              // Create a "variable"
 144+ 6366              // The when invoked, a variable returns a pointer, the address of first PFA cell
 145+ 6366              // this allow creation of "variables" which content is  of any length
 146+ 6366              Variable_Def    macro   label, namec, initial_value
 147+ 6366 ~                            New_Def  label, namec, Variable_Ptr, is_normal
 148+ 6366 ~                            dw      initial_value
 149+ 6366                              endm
 150+ 6366
 151+ 6366              //  ______________________________________________________________________
 152+ 6366              //
 153+ 6366              // Create a "user"
 154+ 6366              // It uses a single byte as offset to calculate the address of the variable
 155+ 6366              User_Def        macro   label, namec, offset_value
 156+ 6366 ~                            New_Def  label, namec, User_Ptr, is_normal
 157+ 6366 ~                            db      offset_value
 158+ 6366                              endm
 159+ 6366
 160+ 6366              //  ______________________________________________________________________
 161+ 6366              //
 162+ 6366              // Create a "colon-definition"
 163+ 6366              // The CFA contains a small routine i.e. "call Enter_Ptr".
 164+ 6366              // The PFA, three bytes later, contains the actual Forth definition
 165+ 6366              Colon_Def       macro   label, namec, bits
 166+ 6366 ~                            New_Def  label, namec, Enter_Ptr, bits ; ok
 167+ 6366                              endm
 168+ 6366
 169+ 6366              //  ______________________________________________________________________
 170+ 6366              //
 171+ 6366
 172+ 6366              S0_system:      equ     $D0E8               // Address of top of Calc Stack
 173+ 6366              TIB_system      equ     $D0E8               // TIB grows upwards, Return-Stack downward.
 174+ 6366              R0_system:      equ     $D188               // Address of top of Return Stack. This is S0 + $00A0
 175+ 6366              USER_system:    equ     $D188               // User variables zone.
 176+ 6366              FIRST_system:   equ     $D1E4               // Address of first BUFFER
 177+ 6366              LIMIT_system:   equ     $E000               // Address of first byte beyond last BUFFER
 178+ 6366
# file closed: C:\Zx\CSpect\Projects\vForth15_INDIRECT/source/system.asm
 108  6366                              include "L0.asm"
# file opened: C:\Zx\CSpect\Projects\vForth15_INDIRECT/source/L0.asm
   1+ 6366              //  ______________________________________________________________________
   2+ 6366              //
   3+ 6366              //  L0.asm
   4+ 6366              //
   5+ 6366              //  Origin-Area and Level-0 definitions
   6+ 6366              //  ______________________________________________________________________
   7+ 6366
   8+ 6366
   9+ 6366              Cold_origin:
  10+ 6366 A7                           and     a
  11+ 6367 C3 F1 78                     jp      ColdRoutine
  12+ 636A              Warm_origin:
  13+ 636A 37                           scf
  14+ 636B C3 F1 78                     jp      WarmRoutine
  15+ 636E
  16+ 636E              // +008
  17+ 636E E6 D0        SP_Basic:       dw      $D0E6               // These are bits with some "standard" meaning... 0101
  18+ 6370
  19+ 6370              // +00A
  20+ 6370 00 0E                        dw      $0E00
  21+ 6372
  22+ 6372              // +00C
  23+ 6372 DF 86        Latest_origin:  dw      Latest_Definition   // Latest word (used in Cold_Start)
  24+ 6374
  25+ 6374              // +00E
  26+ 6374 0C 00        DEL_Char_Ptr:   dw      $000C               // This is the characther used as "Back-Space"
  27+ 6376
  28+ 6376              // +010
  29+ 6376 50 B2        CPU_Id          dw      $B250               // Z80 expressed in base 36
  30+ 6378
  31+ 6378              // +012
  32+ 6378 E8 D0        S0_origin:      dw      S0_system
  33+ 637A 88 D1        R0_origin:      dw      R0_system
  34+ 637C E8 D0        TIB_origin:     dw      TIB_system
  35+ 637E 1F 00        WIDTH_origin:   dw      31
  36+ 6380 01 00        WARNING_origin: dw      1
  37+ 6382 25 87        FENCE_origin:   dw      Fence_Word
  38+ 6384 25 87        DP_origin       dw      Fence_Word
  39+ 6386 FF 77        VOCLINK_origin: dw      Voclink_Ptr
  40+ 6388 E4 D1                        dw      FIRST_system
  41+ 638A 00 E0                        dw      LIMIT_system
  42+ 638C
  43+ 638C              // +026
  44+ 638C 8F           Block_Face:     db      SOLIDBLOCK_CHAR     // Caps-Lock   Cursor face
  45+ 638D 8C           Half_Face:      db      HALFBLOCK_CHAR      // Caps-unlock Cursor face
  46+ 638E 5F           Underscore_Face:db      UNDERSCORE_CHAR     // Underscore  Cursor face
  47+ 638F 00                           db      0
  48+ 6390
  49+ 6390              // +02A
  50+ 6390 00 00        IX_Echo:        dw      $0000               // Echo IX after NextOS call
  51+ 6392
  52+ 6392              // +02C
  53+ 6392 00 00        SP_Saved:       dw      $0000               // Saved SP dufing NextOS call
  54+ 6394
  55+ 6394              // +02E
  56+ 6394 88 D1        USER_Pointer:   dw      USER_system
  57+ 6396
  58+ 6396              // +030
  59+ 6396 88 D1        RP_Pointer:     dw      $d188 // R0_system
  60+ 6398
  61+ 6398              // +32
  62+ 6398              // SP_Basic        dw      0
  63+ 6398
  64+ 6398
  65+ 6398              //  ______________________________________________________________________
  66+ 6398
  67+ 6398              // from this point we can use LDHLRP and LDRPHL Assembler macros
  68+ 6398              // instead of their equivalent long sequences.
  69+ 6398
  70+ 6398              //  ______________________________________________________________________
  71+ 6398
  72+ 6398              // address for "next" - inner interpreter
  73+ 6398              // This address must always be pointed by IX
  74+ 6398              // "next" macro simply does a  jp(ix)  instruction
  75+ 6398
  76+ 6398              // Psh2_Ptr:       push    de
  77+ 6398              // Psh1_Ptr:       push    hl
  78+ 6398
  79+ 6398              Next_Ptr:       // This address must always be kept in IX: "next" relies on that
  80+ 6398
  81+ 6398                              if ( 1 == DEBUGGING )
  82+ 6398 ~                            ld      hl, Next_Breakpoint_1
  83+ 6398 ~                            and     a
  84+ 6398 ~                            sbc     hl, bc
  85+ 6398 ~                            jr      nz, Next_Continue
  86+ 6398 ~                            nop // This is where you have to put a real breakpoint to intercept BC values...
  87+ 6398                              endif
  88+ 6398
  89+ 6398              Next_Continue:
  90+ 6398 0A                           ld      a, (bc)
  91+ 6399 03                           inc     bc
  92+ 639A 6F                           ld      l, a
  93+ 639B 0A                           ld      a, (bc)
  94+ 639C 03                           inc     bc
  95+ 639D 67                           ld      h, a                // hl contains a CFA (xt) of word being executed
  96+ 639E
  97+ 639E              // Execute xt i.e. CFA held in HL
  98+ 639E              Exec_Ptr:
  99+ 639E 5E                           ld      e, (hl)
 100+ 639F 23                           inc     hl
 101+ 63A0 56                           ld      d, (hl)
 102+ 63A1 EB                           ex      de, hl
 103+ 63A2 E9                           jp      (hl)                // and jump to it
 104+ 63A3                                                          // there you'll find the real code or a CALL to a ;code part
 105+ 63A3
 106+ 63A3              //  ______________________________________________________________________
 107+ 63A3              //
 108+ 63A3              // lit          -- x
 109+ 63A3              // puts on top of stack the value of the following word.
 110+ 63A3              // it is compiled in colon definition before a literal number
 111+ 63A3
 112+ 63A3                              New_Def  LIT, "LIT", is_code, is_normal
 112+ 63A3             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 112+ 63A3             >
 112+ 63A3             >                // dummy db directives used to calculate length of namec
 112+ 63A3 4C 49 54    >                db      "LIT"
 112+ 63A6             >len_NFA         defl    $ - temp_NFA
 112+ 63A6             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 112+ 63A3             >
 112+ 63A3 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 112+ 63A4 4C 49 54    >                db      "LIT"               // name string in 7-bit ascii, but
 112+ 63A7             >                org     $-1                 // alter last byte of Name just above to set
 112+ 63A6 D4          >                db      {b $} | END_BIT     // msb as name end
 112+ 63A7             >
 112+ 63A7 00 00       >                dw      last_NFA            // Link to previous definition Name
 112+ 63A9             >LIT:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 112+ 63A9 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
 112+ 63A9             >                else
 112+ 63A9 AB 63       >                dw      $ + 2   ; ok        // is pointed by CFA
 112+ 63AB             >                endif           ; ok        // for other definitions it "points" the correct handler
 112+ 63AB             >                // Use of "; ok" to suppress "warning[fwdref]"
 112+ 63AB             >
 112+ 63AB             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 113+ 63AB
 114+ 63AB 0A                           ld      a, (bc)
 115+ 63AC 03                           inc     bc
 116+ 63AD 6F                           ld      l, a
 117+ 63AE 0A                           ld      a, (bc)
 118+ 63AF 03                           inc     bc
 119+ 63B0 67                           ld      h, a
 120+ 63B1                              psh1
 120+ 63B1 E5          >                push    hl
 120+ 63B2 DD E9       >                jp      (ix)
 121+ 63B4
 122+ 63B4              //  ______________________________________________________________________
 123+ 63B4              //
 124+ 63B4              // execute      i*x xt -- j*x
 125+ 63B4              // execution token. usually xt is given by CFA
 126+ 63B4
 127+ 63B4                              New_Def  EXECUTE, "EXECUTE", is_code, is_normal
 127+ 63B4             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 127+ 63B4             >
 127+ 63B4             >                // dummy db directives used to calculate length of namec
 127+ 63B4 45 58 45 43 >                db      "EXECUTE"
 127+ 63B8 55 54 45    >
 127+ 63BB             >len_NFA         defl    $ - temp_NFA
 127+ 63BB             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 127+ 63B4             >
 127+ 63B4 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 127+ 63B5 45 58 45 43 >                db      "EXECUTE"               // name string in 7-bit ascii, but
 127+ 63B9 55 54 45    >
 127+ 63BC             >                org     $-1                 // alter last byte of Name just above to set
 127+ 63BB C5          >                db      {b $} | END_BIT     // msb as name end
 127+ 63BC             >
 127+ 63BC A3 63       >                dw      last_NFA            // Link to previous definition Name
 127+ 63BE             >EXECUTE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 127+ 63BE ~           >                dw      runcode ; ok        // for primitive definitions  actual code
 127+ 63BE             >                else
 127+ 63BE C0 63       >                dw      $ + 2   ; ok        // is pointed by CFA
 127+ 63C0             >                endif           ; ok        // for other definitions it "points" the correct handler
 127+ 63C0             >                // Use of "; ok" to suppress "warning[fwdref]"
 127+ 63C0             >
 127+ 63C0             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 128+ 63C0 E1                           pop     hl
 129+ 63C1 18 DB                        jr      Exec_Ptr
 130+ 63C3
 131+ 63C3
 132+ 63C3              //  ______________________________________________________________________
 133+ 63C3              //
 134+ 63C3              // branch       --
 135+ 63C3              // unconditional branch in colon definition using the following cell as an offset from current IP value
 136+ 63C3              // compiled by ELSE, AGAIN and some other immediate words
 137+ 63C3
 138+ 63C3                              New_Def BRANCH, "BRANCH", is_code, is_normal
 138+ 63C3             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 138+ 63C3             >
 138+ 63C3             >                // dummy db directives used to calculate length of namec
 138+ 63C3 42 52 41 4E >                db      "BRANCH"
 138+ 63C7 43 48       >
 138+ 63C9             >len_NFA         defl    $ - temp_NFA
 138+ 63C9             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 138+ 63C3             >
 138+ 63C3 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 138+ 63C4 42 52 41 4E >                db      "BRANCH"               // name string in 7-bit ascii, but
 138+ 63C8 43 48       >
 138+ 63CA             >                org     $-1                 // alter last byte of Name just above to set
 138+ 63C9 C8          >                db      {b $} | END_BIT     // msb as name end
 138+ 63CA             >
 138+ 63CA B4 63       >                dw      last_NFA            // Link to previous definition Name
 138+ 63CC             >BRANCH:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 138+ 63CC ~           >                dw      runcode ; ok        // for primitive definitions  actual code
 138+ 63CC             >                else
 138+ 63CC CE 63       >                dw      $ + 2   ; ok        // is pointed by CFA
 138+ 63CE             >                endif           ; ok        // for other definitions it "points" the correct handler
 138+ 63CE             >                // Use of "; ok" to suppress "warning[fwdref]"
 138+ 63CE             >
 138+ 63CE             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 139+ 63CE              Branch_Ptr:
 140+ 63CE 60                           ld      h, b
 141+ 63CF 69                           ld      l, c
 142+ 63D0 5E                           ld      e, (hl)
 143+ 63D1 23                           inc     hl
 144+ 63D2 56                           ld      d, (hl)
 145+ 63D3 2B                           dec     hl                  // offset is calculated from current IP
 146+ 63D4 19                           add     hl, de
 147+ 63D5 4D                           ld      c, l
 148+ 63D6 44                           ld      b, h
 149+ 63D7                              next
 149+ 63D7 DD E9       >                jp      (ix)
 150+ 63D9
 151+ 63D9
 152+ 63D9              //  ______________________________________________________________________
 153+ 63D9              //
 154+ 63D9              // 0branch      f --
 155+ 63D9              // conditional branch if the top-of-stack is ZERO or FALSE.
 156+ 63D9              // compiled by IF, UNTIL and some other immediate words
 157+ 63D9
 158+ 63D9                              New_Def ZBRANCH, "0BRANCH", is_code, is_normal
 158+ 63D9             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 158+ 63D9             >
 158+ 63D9             >                // dummy db directives used to calculate length of namec
 158+ 63D9 30 42 52 41 >                db      "0BRANCH"
 158+ 63DD 4E 43 48    >
 158+ 63E0             >len_NFA         defl    $ - temp_NFA
 158+ 63E0             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 158+ 63D9             >
 158+ 63D9 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 158+ 63DA 30 42 52 41 >                db      "0BRANCH"               // name string in 7-bit ascii, but
 158+ 63DE 4E 43 48    >
 158+ 63E1             >                org     $-1                 // alter last byte of Name just above to set
 158+ 63E0 C8          >                db      {b $} | END_BIT     // msb as name end
 158+ 63E1             >
 158+ 63E1 C3 63       >                dw      last_NFA            // Link to previous definition Name
 158+ 63E3             >ZBRANCH:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 158+ 63E3 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
 158+ 63E3             >                else
 158+ 63E3 E5 63       >                dw      $ + 2   ; ok        // is pointed by CFA
 158+ 63E5             >                endif           ; ok        // for other definitions it "points" the correct handler
 158+ 63E5             >                // Use of "; ok" to suppress "warning[fwdref]"
 158+ 63E5             >
 158+ 63E5             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 159+ 63E5              ZBranch_Ptr:
 160+ 63E5 E1                           pop     hl
 161+ 63E6 7D                           ld      a, l
 162+ 63E7 B4                           or      h
 163+ 63E8 CA CE 63                     jp      z, Branch_Ptr
 164+ 63EB 03                           inc     bc                  // if not branch, skip offset cell.
 165+ 63EC 03                           inc     bc
 166+ 63ED                              next
 166+ 63ED DD E9       >                jp      (ix)
 167+ 63EF
 168+ 63EF              //  ______________________________________________________________________
 169+ 63EF              //
 170+ 63EF              // (loop)       --
 171+ 63EF              // compiled by +LOOP. it uses the top two values of return-stack to
 172+ 63EF              // keep track of index and limit
 173+ 63EF                              New_Def C_LOOP, "(LOOP)", is_code, is_normal
 173+ 63EF             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 173+ 63EF             >
 173+ 63EF             >                // dummy db directives used to calculate length of namec
 173+ 63EF 28 4C 4F 4F >                db      "(LOOP)"
 173+ 63F3 50 29       >
 173+ 63F5             >len_NFA         defl    $ - temp_NFA
 173+ 63F5             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 173+ 63EF             >
 173+ 63EF 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 173+ 63F0 28 4C 4F 4F >                db      "(LOOP)"               // name string in 7-bit ascii, but
 173+ 63F4 50 29       >
 173+ 63F6             >                org     $-1                 // alter last byte of Name just above to set
 173+ 63F5 A9          >                db      {b $} | END_BIT     // msb as name end
 173+ 63F6             >
 173+ 63F6 D9 63       >                dw      last_NFA            // Link to previous definition Name
 173+ 63F8             >C_LOOP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 173+ 63F8 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
 173+ 63F8             >                else
 173+ 63F8 FA 63       >                dw      $ + 2   ; ok        // is pointed by CFA
 173+ 63FA             >                endif           ; ok        // for other definitions it "points" the correct handler
 173+ 63FA             >                // Use of "; ok" to suppress "warning[fwdref]"
 173+ 63FA             >
 173+ 63FA             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 174+ 63FA
 175+ 63FA
 176+ 63FA 11 01 00                     ld      de, 1               // bc contains increment of 1
 177+ 63FD
 178+ 63FD              Loop_Ptr:
 179+ 63FD                              ldhlrp                      // ld hl,rp macro 30h +Origin
 179+ 63FD 2A 96 63    >                ld      hl,(RP_Pointer)
 180+ 6400
 181+ 6400 7E                           ld      a, (hl)             // hl points to loop-index, add increment de to it.
 182+ 6401 83                           add     e
 183+ 6402 77                           ld      (hl), a
 184+ 6403 5F                           ld      e, a
 185+ 6404 23                           inc     hl
 186+ 6405 7E                           ld      a, (hl)
 187+ 6406 8A                           adc     d
 188+ 6407 77                           ld      (hl),a
 189+ 6408 23                           inc     hl
 190+ 6409 CB 7A                        bit     7, d                // keep increment-sign just before overwriting d
 191+ 640B 57                           ld      d, a
 192+ 640C
 193+ 640C 20 07                        jr      nz, Loop_NegativeIncrement
 194+ 640E 7B                               ld      a, e
 195+ 640F 96                               sub     (hl)
 196+ 6410 7A                               ld      a, d
 197+ 6411 23                               inc     hl
 198+ 6412 9E                               sbc     (hl)
 199+ 6413 18 05                        jr      Loop_Endif              // else
 200+ 6415
 201+ 6415              Loop_NegativeIncrement:
 202+ 6415 7E                               ld      a, (hl)
 203+ 6416 93                               sub     e
 204+ 6417 23                               inc     hl
 205+ 6418 7E                               ld      a, (hl)
 206+ 6419 9A                               sbc     d
 207+ 641A
 208+ 641A              Loop_Endif:
 209+ 641A FA CE 63                     jp      m, Branch_Ptr       // perform branch consuming following cell
 210+ 641D 23                           inc     hl
 211+ 641E                              ldrphl                      // ld rp,hl macro 30h +Origin
 211+ 641E 22 96 63    >                ld      (RP_Pointer),hl
 212+ 6421
 213+ 6421 03                           inc     bc                  // skip branch-style offset
 214+ 6422 03                           inc     bc
 215+ 6423                              next
 215+ 6423 DD E9       >                jp      (ix)
 216+ 6425
 217+ 6425              //  ______________________________________________________________________
 218+ 6425              //
 219+ 6425              // (+loop)       n --
 220+ 6425              // same as (LOOP) but index is incremented by n (instead of just 1)
 221+ 6425              // compiled by +LOOP.
 222+ 6425                              New_Def C_PLOOP, "(+LOOP)", is_code, is_normal
 222+ 6425             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 222+ 6425             >
 222+ 6425             >                // dummy db directives used to calculate length of namec
 222+ 6425 28 2B 4C 4F >                db      "(+LOOP)"
 222+ 6429 4F 50 29    >
 222+ 642C             >len_NFA         defl    $ - temp_NFA
 222+ 642C             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 222+ 6425             >
 222+ 6425 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 222+ 6426 28 2B 4C 4F >                db      "(+LOOP)"               // name string in 7-bit ascii, but
 222+ 642A 4F 50 29    >
 222+ 642D             >                org     $-1                 // alter last byte of Name just above to set
 222+ 642C A9          >                db      {b $} | END_BIT     // msb as name end
 222+ 642D             >
 222+ 642D EF 63       >                dw      last_NFA            // Link to previous definition Name
 222+ 642F             >C_PLOOP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 222+ 642F ~           >                dw      runcode ; ok        // for primitive definitions  actual code
 222+ 642F             >                else
 222+ 642F 31 64       >                dw      $ + 2   ; ok        // is pointed by CFA
 222+ 6431             >                endif           ; ok        // for other definitions it "points" the correct handler
 222+ 6431             >                // Use of "; ok" to suppress "warning[fwdref]"
 222+ 6431             >
 222+ 6431             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 223+ 6431 D1                           pop     de
 224+ 6432 C3 FD 63                     jp      Loop_Ptr
 225+ 6435
 226+ 6435              //  ______________________________________________________________________
 227+ 6435              //
 228+ 6435              // (?do)        lim ind --
 229+ 6435              // compiled by ?DO to make a loop checking for lim == ind first
 230+ 6435              // at run-time (?DO) must be followed by a BRANCH offset
 231+ 6435              // used to skip the loop if lim == ind
 232+ 6435                              New_Def C_Q_DO, "(?DO)", is_code, is_normal
 232+ 6435             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 232+ 6435             >
 232+ 6435             >                // dummy db directives used to calculate length of namec
 232+ 6435 28 3F 44 4F >                db      "(?DO)"
 232+ 6439 29          >
 232+ 643A             >len_NFA         defl    $ - temp_NFA
 232+ 643A             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 232+ 6435             >
 232+ 6435 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 232+ 6436 28 3F 44 4F >                db      "(?DO)"               // name string in 7-bit ascii, but
 232+ 643A 29          >
 232+ 643B             >                org     $-1                 // alter last byte of Name just above to set
 232+ 643A A9          >                db      {b $} | END_BIT     // msb as name end
 232+ 643B             >
 232+ 643B 25 64       >                dw      last_NFA            // Link to previous definition Name
 232+ 643D             >C_Q_DO:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 232+ 643D ~           >                dw      runcode ; ok        // for primitive definitions  actual code
 232+ 643D             >                else
 232+ 643D 3F 64       >                dw      $ + 2   ; ok        // is pointed by CFA
 232+ 643F             >                endif           ; ok        // for other definitions it "points" the correct handler
 232+ 643F             >                // Use of "; ok" to suppress "warning[fwdref]"
 232+ 643F             >
 232+ 643F             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 233+ 643F D1                           pop     de                  // de has the index
 234+ 6440 E1                           pop     hl                  // hl has the limit
 235+ 6441 E5                           push    hl
 236+ 6442 D5                           push    de
 237+ 6443 A7                           and     a                   // reset carry flag
 238+ 6444 ED 52                        sbc     hl, de              // compute limit - index
 239+ 6446 20 05                        jr      nz, Do_Ptr          // if zero then don't even begin loop
 240+ 6448 D1                               pop     de
 241+ 6449 E1                               pop     hl
 242+ 644A
 243+ 644A C3 CE 63                         jp      Branch_Ptr          // perform branch consuming following cell
 244+ 644D              Do_Ptr:
 245+ 644D                              ldhlrp                      // prepare RP
 245+ 644D 2A 96 63    >                ld      hl,(RP_Pointer)
 246+ 6450 2B                           dec     hl
 247+ 6451 2B                           dec     hl
 248+ 6452 2B                           dec     hl
 249+ 6453 2B                           dec     hl
 250+ 6454                              ldrphl
 250+ 6454 22 96 63    >                ld      (RP_Pointer),hl
 251+ 6457
 252+ 6457                              // store index as top RP
 253+ 6457 D1                           pop     de
 254+ 6458 73                           ld      (hl), e
 255+ 6459 23                           inc     hl
 256+ 645A 72                           ld      (hl), d
 257+ 645B 23                           inc     hl
 258+ 645C                              // stores lim as second from top RP
 259+ 645C D1                           pop     de
 260+ 645D 73                           ld      (hl), e
 261+ 645E 23                           inc     hl
 262+ 645F 72                           ld      (hl), d
 263+ 6460
 264+ 6460                              // skip branch-style offseet
 265+ 6460 03                           inc     bc
 266+ 6461 03                           inc     bc
 267+ 6462                              next
 267+ 6462 DD E9       >                jp      (ix)
 268+ 6464
 269+ 6464              //  ______________________________________________________________________
 270+ 6464              //
 271+ 6464              // (do)        lim ind --
 272+ 6464              // compiled by DO to make a loop checking for lim == ind first
 273+ 6464              // this is a simpler version of (?DO)
 274+ 6464                              New_Def C_DO, "(DO)", is_code, is_normal
 274+ 6464             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 274+ 6464             >
 274+ 6464             >                // dummy db directives used to calculate length of namec
 274+ 6464 28 44 4F 29 >                db      "(DO)"
 274+ 6468             >len_NFA         defl    $ - temp_NFA
 274+ 6468             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 274+ 6464             >
 274+ 6464 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 274+ 6465 28 44 4F 29 >                db      "(DO)"               // name string in 7-bit ascii, but
 274+ 6469             >                org     $-1                 // alter last byte of Name just above to set
 274+ 6468 A9          >                db      {b $} | END_BIT     // msb as name end
 274+ 6469             >
 274+ 6469 35 64       >                dw      last_NFA            // Link to previous definition Name
 274+ 646B             >C_DO:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 274+ 646B ~           >                dw      runcode ; ok        // for primitive definitions  actual code
 274+ 646B             >                else
 274+ 646B 6D 64       >                dw      $ + 2   ; ok        // is pointed by CFA
 274+ 646D             >                endif           ; ok        // for other definitions it "points" the correct handler
 274+ 646D             >                // Use of "; ok" to suppress "warning[fwdref]"
 274+ 646D             >
 274+ 646D             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 275+ 646D 0B                           dec     bc                  // prepare IP beforehand
 276+ 646E 0B                           dec     bc                  // to balance the two final inc bc in (?do)
 277+ 646F C3 4D 64                     jp      Do_Ptr
 278+ 6472
 279+ 6472              //  ______________________________________________________________________
 280+ 6472              //
 281+ 6472              // i            -- n
 282+ 6472              // used between DO and LOOP or between DO e +LOOP to copy on top of stack
 283+ 6472              // the current value of the index-loop
 284+ 6472                              New_Def I, "I", is_code, is_normal
 284+ 6472             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 284+ 6472             >
 284+ 6472             >                // dummy db directives used to calculate length of namec
 284+ 6472 49          >                db      "I"
 284+ 6473             >len_NFA         defl    $ - temp_NFA
 284+ 6473             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 284+ 6472             >
 284+ 6472 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 284+ 6473 49          >                db      "I"               // name string in 7-bit ascii, but
 284+ 6474             >                org     $-1                 // alter last byte of Name just above to set
 284+ 6473 C9          >                db      {b $} | END_BIT     // msb as name end
 284+ 6474             >
 284+ 6474 64 64       >                dw      last_NFA            // Link to previous definition Name
 284+ 6476             >I:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 284+ 6476 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
 284+ 6476             >                else
 284+ 6476 78 64       >                dw      $ + 2   ; ok        // is pointed by CFA
 284+ 6478             >                endif           ; ok        // for other definitions it "points" the correct handler
 284+ 6478             >                // Use of "; ok" to suppress "warning[fwdref]"
 284+ 6478             >
 284+ 6478             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 285+ 6478              I_Ptr:
 286+ 6478
 287+ 6478                              ldhlrp
 287+ 6478 2A 96 63    >                ld      hl,(RP_Pointer)
 288+ 647B 5E                           ld      e, (hl)
 289+ 647C 23                           inc     hl
 290+ 647D 56                           ld      d, (hl)
 291+ 647E D5                           push    de
 292+ 647F                              next
 292+ 647F DD E9       >                jp      (ix)
 293+ 6481
 294+ 6481              //  ______________________________________________________________________
 295+ 6481              //
 296+ 6481              // digit        c n -- u 1  |  0
 297+ 6481              // convert a character c using base n
 298+ 6481              // returns a unsigned number and a true flag
 299+ 6481              // or just a false flag if the conversion fails
 300+ 6481                              New_Def DIGIT, "DIGIT", is_code, is_normal
 300+ 6481             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 300+ 6481             >
 300+ 6481             >                // dummy db directives used to calculate length of namec
 300+ 6481 44 49 47 49 >                db      "DIGIT"
 300+ 6485 54          >
 300+ 6486             >len_NFA         defl    $ - temp_NFA
 300+ 6486             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 300+ 6481             >
 300+ 6481 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 300+ 6482 44 49 47 49 >                db      "DIGIT"               // name string in 7-bit ascii, but
 300+ 6486 54          >
 300+ 6487             >                org     $-1                 // alter last byte of Name just above to set
 300+ 6486 D4          >                db      {b $} | END_BIT     // msb as name end
 300+ 6487             >
 300+ 6487 72 64       >                dw      last_NFA            // Link to previous definition Name
 300+ 6489             >DIGIT:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 300+ 6489 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
 300+ 6489             >                else
 300+ 6489 8B 64       >                dw      $ + 2   ; ok        // is pointed by CFA
 300+ 648B             >                endif           ; ok        // for other definitions it "points" the correct handler
 300+ 648B             >                // Use of "; ok" to suppress "warning[fwdref]"
 300+ 648B             >
 300+ 648B             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 301+ 648B E1                           pop     hl                  // l has the base
 302+ 648C D1                           pop     de                  // e has the digit
 303+ 648D 7B                           ld      a, e
 304+ 648E FE 60                        cp      $60                 // check if lowercase
 305+ 6490 38 02                        jr      c, Digit_Uppercase
 306+ 6492 D6 20                            sub     $20                 // quick'n'dirty uppercase
 307+ 6494              Digit_Uppercase:
 308+ 6494 D6 30                        sub     $30
 309+ 6496 38 15                        jr      c, Digit_Fail       // fail when character < "0"
 310+ 6498 FE 0A                            cp      $0A
 311+ 649A 38 06                            jr      c, Digit_Decimal    // perhaps is not decimal
 312+ 649C D6 07                                sub     7                   // try hex and subtract 7
 313+ 649E FE 0A                                cp      $0A
 314+ 64A0 38 0B                                jr      c,  Digit_Fail      // it is not hex !
 315+ 64A2
 316+ 64A2              Digit_Decimal:
 317+ 64A2                              // compare digit
 318+ 64A2 BD                           cp      l                   // compare with base
 319+ 64A3
 320+ 64A3 30 08                        jr      nc, Digit_Fail      // fail when greater than base
 321+ 64A5 5F                               ld      e, a                // digit is returned as second from TOS
 322+ 64A6 21 01 00                         ld      hl, 1
 323+ 64A9
 324+ 64A9                                  psh2
 324+ 64A9 D5          >                push    de
 324+ 64AA E5          >                push    hl
 324+ 64AB DD E9       >                jp      (ix)
 325+ 64AD              Digit_Fail:
 326+ 64AD 21 00 00                     ld      hl, 0
 327+ 64B0                              psh1
 327+ 64B0 E5          >                push    hl
 327+ 64B1 DD E9       >                jp      (ix)
 328+ 64B3
 329+ 64B3              //  ______________________________________________________________________
 330+ 64B3              //
 331+ 64B3              //  parametric uppercase routine
 332+ 64B3              //  depending on the following op-code the routine can be by-passed
 333+ 64B3              //  changing the behaviour of some callers.
 334+ 64B3              //  If it is "ret" then the system is Case-Sensitive
 335+ 64B3              //  If it is "Nop" then the system is Case-Insensitive
 336+ 64B3              //  Only A register is touched.
 337+ 64B3 00           Case_Sensitive: nop                         // Default is case-insensitive.
 338+ 64B4              Case_Upper:
 339+ 64B4 FE 61                        cp      LC_A_CHAR           // lower-case "a"
 340+ 64B6 D8                           ret     c                   // no change if A < "a"
 341+ 64B7 FE 7B                        cp      LC_Z_CHAR + 1       // lower-case "z" + 1
 342+ 64B9 D0                           ret     nc                  // no change if A > "z"
 343+ 64BA D6 20                        sub     $20                 // Make uppercase if A in ["a".."z"]
 344+ 64BC C9                           ret
 345+ 64BD
 346+ 64BD              //  ______________________________________________________________________
 347+ 64BD              //
 348+ 64BD              //  caseon      --
 349+ 64BD              // set system case-sensitivity on
 350+ 64BD              // it patches a RET/NOP at the beginning of the uppercase-routine
 351+ 64BD                              New_Def CASEON, "CASEON", is_code, is_normal
 351+ 64BD             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 351+ 64BD             >
 351+ 64BD             >                // dummy db directives used to calculate length of namec
 351+ 64BD 43 41 53 45 >                db      "CASEON"
 351+ 64C1 4F 4E       >
 351+ 64C3             >len_NFA         defl    $ - temp_NFA
 351+ 64C3             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 351+ 64BD             >
 351+ 64BD 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 351+ 64BE 43 41 53 45 >                db      "CASEON"               // name string in 7-bit ascii, but
 351+ 64C2 4F 4E       >
 351+ 64C4             >                org     $-1                 // alter last byte of Name just above to set
 351+ 64C3 CE          >                db      {b $} | END_BIT     // msb as name end
 351+ 64C4             >
 351+ 64C4 81 64       >                dw      last_NFA            // Link to previous definition Name
 351+ 64C6             >CASEON:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 351+ 64C6 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
 351+ 64C6             >                else
 351+ 64C6 C8 64       >                dw      $ + 2   ; ok        // is pointed by CFA
 351+ 64C8             >                endif           ; ok        // for other definitions it "points" the correct handler
 351+ 64C8             >                // Use of "; ok" to suppress "warning[fwdref]"
 351+ 64C8             >
 351+ 64C8             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 352+ 64C8 3E C9                        ld      a, $C9              // "ret"
 353+ 64CA 32 B3 64                     ld      (Case_Sensitive), a
 354+ 64CD                              next
 354+ 64CD DD E9       >                jp      (ix)
 355+ 64CF
 356+ 64CF              //  ______________________________________________________________________
 357+ 64CF              //
 358+ 64CF              //  caseoff     --
 359+ 64CF              // set system case-sensitivity on
 360+ 64CF              // it patches a RET/NOP at the beginning of the uppercase-routine
 361+ 64CF                              New_Def CASEOFF, "CASEOFF", is_code, is_normal
 361+ 64CF             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 361+ 64CF             >
 361+ 64CF             >                // dummy db directives used to calculate length of namec
 361+ 64CF 43 41 53 45 >                db      "CASEOFF"
 361+ 64D3 4F 46 46    >
 361+ 64D6             >len_NFA         defl    $ - temp_NFA
 361+ 64D6             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 361+ 64CF             >
 361+ 64CF 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 361+ 64D0 43 41 53 45 >                db      "CASEOFF"               // name string in 7-bit ascii, but
 361+ 64D4 4F 46 46    >
 361+ 64D7             >                org     $-1                 // alter last byte of Name just above to set
 361+ 64D6 C6          >                db      {b $} | END_BIT     // msb as name end
 361+ 64D7             >
 361+ 64D7 BD 64       >                dw      last_NFA            // Link to previous definition Name
 361+ 64D9             >CASEOFF:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 361+ 64D9 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
 361+ 64D9             >                else
 361+ 64D9 DB 64       >                dw      $ + 2   ; ok        // is pointed by CFA
 361+ 64DB             >                endif           ; ok        // for other definitions it "points" the correct handler
 361+ 64DB             >                // Use of "; ok" to suppress "warning[fwdref]"
 361+ 64DB             >
 361+ 64DB             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 362+ 64DB 3E 00                        ld      a, $00              // "nop"
 363+ 64DD 32 B3 64                     ld      (Case_Sensitive), a
 364+ 64E0                              next
 364+ 64E0 DD E9       >                jp      (ix)
 365+ 64E2
 366+ 64E2              //  ______________________________________________________________________
 367+ 64E2              //
 368+ 64E2              //  upper       c1 -- c1 | c2
 369+ 64E2              // character on top of stack is forced to Uppercase.
 370+ 64E2                              New_Def UPPER, "UPPER", is_code, is_normal
 370+ 64E2             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 370+ 64E2             >
 370+ 64E2             >                // dummy db directives used to calculate length of namec
 370+ 64E2 55 50 50 45 >                db      "UPPER"
 370+ 64E6 52          >
 370+ 64E7             >len_NFA         defl    $ - temp_NFA
 370+ 64E7             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 370+ 64E2             >
 370+ 64E2 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 370+ 64E3 55 50 50 45 >                db      "UPPER"               // name string in 7-bit ascii, but
 370+ 64E7 52          >
 370+ 64E8             >                org     $-1                 // alter last byte of Name just above to set
 370+ 64E7 D2          >                db      {b $} | END_BIT     // msb as name end
 370+ 64E8             >
 370+ 64E8 CF 64       >                dw      last_NFA            // Link to previous definition Name
 370+ 64EA             >UPPER:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 370+ 64EA ~           >                dw      runcode ; ok        // for primitive definitions  actual code
 370+ 64EA             >                else
 370+ 64EA EC 64       >                dw      $ + 2   ; ok        // is pointed by CFA
 370+ 64EC             >                endif           ; ok        // for other definitions it "points" the correct handler
 370+ 64EC             >                // Use of "; ok" to suppress "warning[fwdref]"
 370+ 64EC             >
 370+ 64EC             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 371+ 64EC E1                           pop     hl
 372+ 64ED 7D                           ld      a, l
 373+ 64EE CD B4 64                     call    Case_Upper
 374+ 64F1 6F                           ld      l, a
 375+ 64F2
 376+ 64F2                              psh1
 376+ 64F2 E5          >                push    hl
 376+ 64F3 DD E9       >                jp      (ix)
 377+ 64F5
 378+ 64F5              //  ______________________________________________________________________
 379+ 64F5              //
 380+ 64F5              // (find)       addr voc -- addr 0 | cfa b 1
 381+ 64F5              // vocabulary search,
 382+ 64F5              // - voc is starting word's NFA
 383+ 64F5              // - addr is the string to be searched for
 384+ 64F5              // On success, it returns the CFA of found word, the first NFA byte
 385+ 64F5              // (which contains length and some flags) and a true flag.
 386+ 64F5              // On fail, a false flag  (no more: leaves addr unchanged)
 387+ 64F5                              New_Def C_FIND, "(FIND)", is_code, is_normal
 387+ 64F5             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 387+ 64F5             >
 387+ 64F5             >                // dummy db directives used to calculate length of namec
 387+ 64F5 28 46 49 4E >                db      "(FIND)"
 387+ 64F9 44 29       >
 387+ 64FB             >len_NFA         defl    $ - temp_NFA
 387+ 64FB             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 387+ 64F5             >
 387+ 64F5 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 387+ 64F6 28 46 49 4E >                db      "(FIND)"               // name string in 7-bit ascii, but
 387+ 64FA 44 29       >
 387+ 64FC             >                org     $-1                 // alter last byte of Name just above to set
 387+ 64FB A9          >                db      {b $} | END_BIT     // msb as name end
 387+ 64FC             >
 387+ 64FC E2 64       >                dw      last_NFA            // Link to previous definition Name
 387+ 64FE             >C_FIND:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 387+ 64FE ~           >                dw      runcode ; ok        // for primitive definitions  actual code
 387+ 64FE             >                else
 387+ 64FE 00 65       >                dw      $ + 2   ; ok        // is pointed by CFA
 387+ 6500             >                endif           ; ok        // for other definitions it "points" the correct handler
 387+ 6500             >                // Use of "; ok" to suppress "warning[fwdref]"
 387+ 6500             >
 387+ 6500             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 388+ 6500                                                              // de has dictionary pointer
 389+ 6500 D1                               pop     de
 390+ 6501              Find_VocabularyLoop:
 391+ 6501 E1                               pop     hl                  // string pointer to search for
 392+ 6502 E5                               push    hl                  // keep it on stack too for the end.
 393+ 6503 1A                               ld      a, (de)             // save NFA length byte
 394+ 6504 08                               ex      af,af'              // for later use (!)
 395+ 6505 1A                               ld      a, (de)             // reload NFA length byte
 396+ 6506 AE                               xor     (hl)                // check if same length
 397+ 6507 E6 3F                            and     $3F                 // by resetting 3 high bits (flags)
 398+ 6509                                  // word an text haven't the same length, skip to next vocabulary entry
 399+ 6509 20 2C                            jr      nz, Find_DifferentLenght
 400+ 650B
 401+ 650B              Find_ThisWord:  // begin loop
 402+ 650B 23                                   inc     hl
 403+ 650C 13                                   inc     de
 404+ 650D 1A                                   ld      a, (de)
 405+ 650E                                      // case insensitive option - begin
 406+ 650E C5                                   push    bc
 407+ 650F E6 80                                and     $80                 // split A in msb and the rest
 408+ 6511 47                                   ld      b, a
 409+ 6512 1A                                   ld      a, (de)
 410+ 6513 E6 7F                                and     $7F                 // ... the rest (lower 7 bits)
 411+ 6515 CD B3 64                             call    Case_Sensitive      // uppercase routine
 412+ 6518 4F                                   ld      c, a
 413+ 6519 7E                                   ld      a, (hl)
 414+ 651A CD B3 64                             call    Case_Sensitive      // uppercase routine
 415+ 651D A9                                   xor     c
 416+ 651E A8                                   xor     b
 417+ 651F C1                                   pop     bc
 418+ 6520                                      // case insensitive option - end
 419+ 6520 87                                   add     a                   // ignore msb during compare
 420+ 6521 20 12                                jr      nz, Find_DidntMatch  // jump if doesn't match (*)
 421+ 6523
 422+ 6523                                  // loop back until last byte msb is found set
 423+ 6523                                  // that bit marks the ending char of this word
 424+ 6523 30 E6                            jr      nc, Find_ThisWord
 425+ 6525
 426+ 6525                                  // match found !
 427+ 6525 21 03 00                             ld      hl, 3               // 3 bytes for CFA offset to skip LFA
 428+ 6528 19                                   add     hl, de
 429+ 6529 E3                                   ex      (sp), hl            // CFA on stack and drop addr
 430+ 652A 08                                   ex      af, af'             // retrieve NFA byte (!)
 431+ 652B 5F                                   ld      e, a
 432+ 652C 16 00                                ld      d, 0
 433+ 652E
 434+ 652E
 435+ 652E 21 01 00                             ld      hl, 1
 436+ 6531                                      psh2
 436+ 6531 D5          >                push    de
 436+ 6532 E5          >                push    hl
 436+ 6533 DD E9       >                jp      (ix)
 437+ 6535
 438+ 6535              Find_DidntMatch: // didn't match (*)
 439+ 6535 38 05                            jr      c,  Find_WordEnd   // jump if not end of word (**)
 440+ 6537
 441+ 6537              Find_DifferentLenght:
 442+ 6537                              // consume chars until the end of the word
 443+ 6537                              // that is last byte msb is found set
 444+ 6537 13                               inc     de
 445+ 6538 1A                               ld      a, (de)
 446+ 6539 87                               add     a, a
 447+ 653A 30 FB                        jr      nc, Find_DifferentLenght
 448+ 653C
 449+ 653C              Find_WordEnd:   // word-end  found (**)
 450+ 653C                              // take LFA and use it
 451+ 653C 13                           inc     de
 452+ 653D EB                           ex      de, hl
 453+ 653E 5E                           ld      e, (hl)
 454+ 653F 23                           inc     hl
 455+ 6540 56                           ld      d, (hl)
 456+ 6541 7A                           ld      a, d
 457+ 6542 B3                           or      e
 458+ 6543
 459+ 6543                          // loop until end of vocabulary
 460+ 6543 20 BC                    jr      nz, Find_VocabularyLoop
 461+ 6545
 462+ 6545 E1                       pop     hl              // with this, it leaves addr unchanged
 463+ 6546 21 00 00                 ld      hl, FALSE_FLAG
 464+ 6549
 465+ 6549                          psh1
 465+ 6549 E5          >                push    hl
 465+ 654A DD E9       >                jp      (ix)
 466+ 654C
 467+ 654C              //  ______________________________________________________________________
 468+ 654C              //
 469+ 654C              // enclose      a c -- a  n1 n2 n3
 470+ 654C              // starting from a, using delimiter c, determines the offsets:
 471+ 654C              //   n1   the first character non-delimiter
 472+ 654C              //   n2   the first delimiter after the text
 473+ 654C              //   n3   the first character non enclosed.
 474+ 654C              // This procedure does not go beyond a 'nul' ASCII (0x00) that represents
 475+ 654C              // an uncoditional delimiter.
 476+ 654C              // Examples:
 477+ 654C              //   i:	c  c  x  x  x  c  x	 -- 2  5  6
 478+ 654C              //  ii:	c  c  x  x  x  'nul' -- 2  5  5
 479+ 654C              // iii:	c  c  'nul'          -- 2  3  2
 480+ 654C                              New_Def ENCLOSE, "ENCLOSE", is_code, is_normal
 480+ 654C             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 480+ 654C             >
 480+ 654C             >                // dummy db directives used to calculate length of namec
 480+ 654C 45 4E 43 4C >                db      "ENCLOSE"
 480+ 6550 4F 53 45    >
 480+ 6553             >len_NFA         defl    $ - temp_NFA
 480+ 6553             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 480+ 654C             >
 480+ 654C 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 480+ 654D 45 4E 43 4C >                db      "ENCLOSE"               // name string in 7-bit ascii, but
 480+ 6551 4F 53 45    >
 480+ 6554             >                org     $-1                 // alter last byte of Name just above to set
 480+ 6553 C5          >                db      {b $} | END_BIT     // msb as name end
 480+ 6554             >
 480+ 6554 F5 64       >                dw      last_NFA            // Link to previous definition Name
 480+ 6556             >ENCLOSE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 480+ 6556 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
 480+ 6556             >                else
 480+ 6556 58 65       >                dw      $ + 2   ; ok        // is pointed by CFA
 480+ 6558             >                endif           ; ok        // for other definitions it "points" the correct handler
 480+ 6558             >                // Use of "; ok" to suppress "warning[fwdref]"
 480+ 6558             >
 480+ 6558             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 481+ 6558 D1                           pop     de                  //  e has the character
 482+ 6559 E1                           pop     hl                  // hl has the string address
 483+ 655A E5                           push    hl
 484+ 655B 7B                           ld      a, e
 485+ 655C 11 FF FF                     ld      de, -1              // let's start from -1
 486+ 655F 2B                           dec     hl
 487+ 6560              Enclose_NonDelimiter:
 488+ 6560                              // find first non delimiter
 489+ 6560 23                               inc     hl
 490+ 6561 13                               inc     de
 491+ 6562 BE                               cp      (hl)
 492+ 6563 28 FB                        jr      z, Enclose_NonDelimiter
 493+ 6565 D5                           push    de
 494+ 6566
 495+ 6566 C5                           push    bc                  // save Instruction Pointer
 496+ 6567
 497+ 6567 4F                           ld      c, a                // save char
 498+ 6568 7E                           ld      a, (hl)
 499+ 6569 A7                           and     a                   // stop if 0x00
 500+ 656A 20 07                        jr      nz, Enclose_NextChar
 501+ 656C
 502+ 656C                              /// case iii. no more character in string
 503+ 656C C1                               pop     bc                  // restore Instruction Pointer
 504+ 656D 13                               inc     de
 505+ 656E D5                               push    de
 506+ 656F 1B                               dec     de
 507+ 6570 D5                               push    de
 508+ 6571                                  next
 508+ 6571 DD E9       >                jp      (ix)
 509+ 6573              Enclose_NextChar:
 510+ 6573 79                               ld      a, c
 511+ 6574 23                               inc     hl
 512+ 6575 13                               inc     de
 513+ 6576 BE                               cp      (hl)
 514+ 6577 20 06                            jr      nz, Enclose_NonSeparator
 515+ 6579
 516+ 6579                                      // case i. first non enclosed
 517+ 6579 C1                                   pop     bc                  // restore Instruction Pointer
 518+ 657A D5                                   push    de
 519+ 657B 13                                   inc     de
 520+ 657C D5                                   push    de
 521+ 657D                                      next
 521+ 657D DD E9       >                jp      (ix)
 522+ 657F              Enclose_NonSeparator:
 523+ 657F 7E                               ld      a, (hl)
 524+ 6580 A7                               and     a
 525+ 6581 20 F0                        jr      nz, Enclose_NextChar
 526+ 6583
 527+ 6583                              // case ii. separator & terminator
 528+ 6583 C1                           pop     bc                  // restore Instruction Pointer
 529+ 6584 D5                           push    de
 530+ 6585 D5                           push    de
 531+ 6586                              next
 531+ 6586 DD E9       >                jp      (ix)
 532+ 6588
 533+ 6588              //  ______________________________________________________________________
 534+ 6588              //
 535+ 6588              // (map)        a2 a1 n c1 -- c2
 536+ 6588              // translate character c1 using mapping string a2 and a2
 537+ 6588              // if c1 is not present within string a1 then
 538+ 6588              // c2 = c2 if it is not translated. n is the length of both a1 and a2.
 539+ 6588                              New_Def C_MAP, "(MAP)", is_code, is_normal
 539+ 6588             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 539+ 6588             >
 539+ 6588             >                // dummy db directives used to calculate length of namec
 539+ 6588 28 4D 41 50 >                db      "(MAP)"
 539+ 658C 29          >
 539+ 658D             >len_NFA         defl    $ - temp_NFA
 539+ 658D             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 539+ 6588             >
 539+ 6588 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 539+ 6589 28 4D 41 50 >                db      "(MAP)"               // name string in 7-bit ascii, but
 539+ 658D 29          >
 539+ 658E             >                org     $-1                 // alter last byte of Name just above to set
 539+ 658D A9          >                db      {b $} | END_BIT     // msb as name end
 539+ 658E             >
 539+ 658E 4C 65       >                dw      last_NFA            // Link to previous definition Name
 539+ 6590             >C_MAP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 539+ 6590 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
 539+ 6590             >                else
 539+ 6590 92 65       >                dw      $ + 2   ; ok        // is pointed by CFA
 539+ 6592             >                endif           ; ok        // for other definitions it "points" the correct handler
 539+ 6592             >                // Use of "; ok" to suppress "warning[fwdref]"
 539+ 6592             >
 539+ 6592             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 540+ 6592 D9                           exx
 541+ 6593 E1                           pop     hl
 542+ 6594 7D                           ld      a, l
 543+ 6595 C1                           pop     bc
 544+ 6596 E1                           pop     hl
 545+ 6597 50                           ld      d, b
 546+ 6598 59                           ld      e, c
 547+ 6599 ED B1                        cpir
 548+ 659B E1                           pop     hl
 549+ 659C 20 05                        jr      nz, C_Map_Then
 549+ 659E
 550+ 659E 19                               add     hl, de
 551+ 659F 2B                               dec     hl
 552+ 65A0 ED 42                            sbc     hl, bc
 553+ 65A2 7E                               ld      a, (hl)
 554+ 65A3              C_Map_Then:
 555+ 65A3 6F                           ld      l, a
 556+ 65A4 26 00                        ld      h, 0
 557+ 65A6 E5                           push    hl
 558+ 65A7 D9                           exx
 559+ 65A8                              next
 559+ 65A8 DD E9       >                jp      (ix)
 560+ 65AA
 561+ 65AA              //  ______________________________________________________________________
 562+ 65AA              //
 563+ 65AA              // (compare)    a1 a2 n -- b
 564+ 65AA              // this word performs a lexicographic compare of n bytes of text at address a1
 565+ 65AA              // with n bytes of text at address a2. It returns numeric a value:
 566+ 65AA              //  0 : if strings are equal
 567+ 65AA              // +1 : if string at a1 greater than string at a2
 568+ 65AA              // -1 : if string at a1 less than string at a2
 569+ 65AA              // strings can be 256 bytes in length at most.
 570+ 65AA                              New_Def C_COMPARE, "(COMPARE)", is_code, is_normal
 570+ 65AA             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 570+ 65AA             >
 570+ 65AA             >                // dummy db directives used to calculate length of namec
 570+ 65AA 28 43 4F 4D >                db      "(COMPARE)"
 570+ 65AE 50 41 52 45 >
 570+ 65B2 29          >
 570+ 65B3             >len_NFA         defl    $ - temp_NFA
 570+ 65B3             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 570+ 65AA             >
 570+ 65AA 89          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 570+ 65AB 28 43 4F 4D >                db      "(COMPARE)"               // name string in 7-bit ascii, but
 570+ 65AF 50 41 52 45 >
 570+ 65B3 29          >
 570+ 65B4             >                org     $-1                 // alter last byte of Name just above to set
 570+ 65B3 A9          >                db      {b $} | END_BIT     // msb as name end
 570+ 65B4             >
 570+ 65B4 88 65       >                dw      last_NFA            // Link to previous definition Name
 570+ 65B6             >C_COMPARE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 570+ 65B6 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
 570+ 65B6             >                else
 570+ 65B6 B8 65       >                dw      $ + 2   ; ok        // is pointed by CFA
 570+ 65B8             >                endif           ; ok        // for other definitions it "points" the correct handler
 570+ 65B8             >                // Use of "; ok" to suppress "warning[fwdref]"
 570+ 65B8             >
 570+ 65B8             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 571+ 65B8 D9                           exx
 572+ 65B9 E1                           pop     hl                  // Number of bytes
 573+ 65BA 7D                           ld      a, l
 574+ 65BB E1                           pop     hl                  // hl points string a2
 575+ 65BC D1                           pop     de                  // hl points string a1
 576+ 65BD              //              push    bc                  // Instruction pointer on stack
 577+ 65BD 47                           ld      b, a
 578+ 65BE              C_Compare_Loop:
 579+ 65BE 7E                               ld      a, (hl)
 580+ 65BF CD B3 64                         call    Case_Sensitive
 581+ 65C2 4F                               ld      c, a
 582+ 65C3 1A                               ld      a, (de)
 583+ 65C4 CD B3 64                         call    Case_Sensitive
 584+ 65C7 B9                               cp      c
 585+ 65C8 13                               inc     de
 586+ 65C9 23                               inc     hl
 587+ 65CA 28 0E                            jr      z, C_Compare_Equal
 588+ 65CC 38 05                                jr      c, C_Compare_NotLessThan  // If LessThan
 589+ 65CE 21 01 00                                 ld      hl, 1               // a1 gt a2
 590+ 65D1 18 03                                jr      C_Compare_Then      // Else
 591+ 65D3              C_Compare_NotLessThan:
 592+ 65D3 21 FF FF                                 ld      hl, -1              // a1 lt a2
 593+ 65D6              C_Compare_Then:                                 // Endif
 594+ 65D6              //                      pop     bc              // restore Instruction Pointer
 595+ 65D6 E5                                   push    hl
 596+ 65D7 D9                                   exx
 597+ 65D8
 598+ 65D8                                      next
 598+ 65D8 DD E9       >                jp      (ix)
 599+ 65DA
 600+ 65DA              C_Compare_Equal:
 601+ 65DA 10 E2                        djnz    C_Compare_Loop
 602+ 65DC 21 00 00                     ld      hl, 0               // a1 eq a2
 603+ 65DF              //              pop     bc                  // restore Instruction Pointer
 604+ 65DF E5                           push    hl
 605+ 65E0 D9                           exx
 606+ 65E1
 607+ 65E1                              next
 607+ 65E1 DD E9       >                jp      (ix)
 608+ 65E3
 609+ 65E3              //  ______________________________________________________________________
 610+ 65E3              //
 611+ 65E3              // emitc        c --
 612+ 65E3              // low level emit, calls ROM routine at #10 to send a character to
 613+ 65E3              // the the current channel (see SELECT to change stream-channel)
 614+ 65E3                              New_Def EMITC, "EMITC", is_code, is_normal
 614+ 65E3             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 614+ 65E3             >
 614+ 65E3             >                // dummy db directives used to calculate length of namec
 614+ 65E3 45 4D 49 54 >                db      "EMITC"
 614+ 65E7 43          >
 614+ 65E8             >len_NFA         defl    $ - temp_NFA
 614+ 65E8             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 614+ 65E3             >
 614+ 65E3 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 614+ 65E4 45 4D 49 54 >                db      "EMITC"               // name string in 7-bit ascii, but
 614+ 65E8 43          >
 614+ 65E9             >                org     $-1                 // alter last byte of Name just above to set
 614+ 65E8 C3          >                db      {b $} | END_BIT     // msb as name end
 614+ 65E9             >
 614+ 65E9 AA 65       >                dw      last_NFA            // Link to previous definition Name
 614+ 65EB             >EMITC:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 614+ 65EB ~           >                dw      runcode ; ok        // for primitive definitions  actual code
 614+ 65EB             >                else
 614+ 65EB ED 65       >                dw      $ + 2   ; ok        // is pointed by CFA
 614+ 65ED             >                endif           ; ok        // for other definitions it "points" the correct handler
 614+ 65ED             >                // Use of "; ok" to suppress "warning[fwdref]"
 614+ 65ED             >
 614+ 65ED             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 615+ 65ED E1                           pop     hl
 616+ 65EE 7D                           ld      a, l
 617+ 65EF              Emitc_Ptr:
 618+ 65EF C5                           push    bc
 619+ 65F0 DD E5                        push    ix
 620+ 65F2 D7                           rst     $10
 621+ 65F3 DD E1                        pop     ix
 622+ 65F5 C1                           pop     bc
 623+ 65F6 3E FF                        ld      a, 255            // max possible
 624+ 65F8 32 8C 5C                     ld      (SCR_CT), a
 625+ 65FB
 626+ 65FB                              next
 626+ 65FB DD E9       >                jp      (ix)
 627+ 65FD
 628+ 65FD              Emitc_Vec:
 629+ 65FD 42 66                        dw      C_Emit_Printable  // comma
 630+ 65FF 48 66                        dw      C_Emit_Bel        // bel
 631+ 6601 42 66                        dw      C_Emit_Printable  // bs
 632+ 6603 5D 66                        dw      C_Emit_Tab        // tab
 633+ 6605 42 66                        dw      C_Emit_Printable  // cr
 634+ 6607 63 66                        dw      C_Emit_NL         // lf (unix newline)
 635+ 6609 42 66                        dw      C_Emit_Printable  // blank
 636+ 660B 42 66                        dw      C_Emit_Printable  // blank
 637+ 660D
 638+ 660D              Emit_Selector_Start:
 639+ 660D 06                           db      $06                 // comma
 640+ 660E 07                           db      $07                 // bel
 641+ 660F 08                           db      $08                 // bs
 642+ 6610 09                           db      $09                 // tab
 643+ 6611 0D                           db      $0D                 // cr
 644+ 6612 0A                           db      $0A                 // lf (unix newline)
 645+ 6613 20                           db      $20
 646+ 6614              Emit_Selector_End:
 647+ 6614 20                           db      $20
 648+ 6615
 649+ 6615              //  ______________________________________________________________________
 650+ 6615              //
 651+ 6615              // (?emit)      c1 -- c2 | c1
 652+ 6615              // decode a character to be sent via EMIT
 653+ 6615              // search first the Emit_Selector table, if found jump to the corresponding routine in Emit_Vector
 654+ 6615              // the routine should resolve anything and convert the character anyway.
 655+ 6615                              New_Def C_EMIT, "(?EMIT)", is_code, is_normal
 655+ 6615             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 655+ 6615             >
 655+ 6615             >                // dummy db directives used to calculate length of namec
 655+ 6615 28 3F 45 4D >                db      "(?EMIT)"
 655+ 6619 49 54 29    >
 655+ 661C             >len_NFA         defl    $ - temp_NFA
 655+ 661C             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 655+ 6615             >
 655+ 6615 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 655+ 6616 28 3F 45 4D >                db      "(?EMIT)"               // name string in 7-bit ascii, but
 655+ 661A 49 54 29    >
 655+ 661D             >                org     $-1                 // alter last byte of Name just above to set
 655+ 661C A9          >                db      {b $} | END_BIT     // msb as name end
 655+ 661D             >
 655+ 661D E3 65       >                dw      last_NFA            // Link to previous definition Name
 655+ 661F             >C_EMIT:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 655+ 661F ~           >                dw      runcode ; ok        // for primitive definitions  actual code
 655+ 661F             >                else
 655+ 661F 21 66       >                dw      $ + 2   ; ok        // is pointed by CFA
 655+ 6621             >                endif           ; ok        // for other definitions it "points" the correct handler
 655+ 6621             >                // Use of "; ok" to suppress "warning[fwdref]"
 655+ 6621             >
 655+ 6621             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 656+ 6621 D1                           pop     de
 657+ 6622 7B                           ld      a, e                //  de has c1
 658+ 6623 E6 7F                        and     $7F                 // 7-bit ascii only
 659+ 6625 C5                           push    bc                  // save Instruction Pointer
 660+ 6626 01 08 00                     ld      bc, Emit_Selector_End - Emit_Selector_Start + 1
 661+ 6629 21 14 66                     ld      hl, Emit_Selector_End
 662+ 662C ED B9                        cpdr                        // search for c1 in Emit_Selector table, backward
 663+ 662E 20 0B                        jr      nz, C_Emit_Not_Found
 664+ 6630                                  // Found then decode it
 665+ 6630 21 FD 65                         ld      hl, Emitc_Vec
 666+ 6633 09                               add     hl, bc
 667+ 6634 09                               add     hl, bc
 668+ 6635 5E                               ld      e, (hl)
 669+ 6636 23                               inc     hl
 670+ 6637 56                               ld      d, (hl)
 671+ 6638 EB                               ex      de, hl
 672+ 6639 C1                               pop     bc                  // restore Instruction Pointer
 673+ 663A E9                               jp      (hl)                // one of the following labels
 674+ 663B              C_Emit_Not_Found:
 675+ 663B C1                           pop     bc                  // restore Instruction Pointer
 676+ 663C FE 20                        cp      BLANK_CHAR          // cp $20 non-printable check
 677+ 663E 30 02                        jr      nc, C_Emit_Printable
 678+ 6640 3E 00                            ld      a, NUL_CHAR         // NUL is never "printed"
 679+ 6642              C_Emit_Printable:
 680+ 6642 6F                           ld      l, a
 681+ 6643 26 00                        ld      h, 0
 682+ 6645
 683+ 6645                              psh1
 683+ 6645 E5          >                push    hl
 683+ 6646 DD E9       >                jp      (ix)
 684+ 6648
 685+ 6648              C_Emit_Bel:
 686+ 6648 C5                           push    bc                  // save Instruction Pointer
 687+ 6649 11 00 01                     ld      de, $0100
 688+ 664C 21 00 02                     ld      hl, $0200
 689+ 664F DD E5                        push    ix                  // save Next Pointer
 690+ 6651 CD B6 03                     call    $03B6               // bleep Standard-ROM routine
 691+ 6654 DD E1                        pop     ix                  // restore Next Pointer
 692+ 6656 C1                           pop     bc                  // restore Instruction Pointer
 693+ 6657 21 00 00                     ld      hl, NUL_CHAR
 694+ 665A
 695+ 665A                              psh1
 695+ 665A E5          >                push    hl
 695+ 665B DD E9       >                jp      (ix)
 696+ 665D
 697+ 665D 21 06 00     C_Emit_Tab:     ld      hl, COMMA_CHAR
 698+ 6660
 699+ 6660                              psh1
 699+ 6660 E5          >                push    hl
 699+ 6661 DD E9       >                jp      (ix)
 700+ 6663
 701+ 6663 21 0D 00     C_Emit_NL       ld      hl, CR_CHAR           // 0x0A --> 0x0D  à la Spectrum
 702+ 6666
 703+ 6666                              psh1
 703+ 6666 E5          >                push    hl
 703+ 6667 DD E9       >                jp      (ix)
 704+ 6669
 705+ 6669              //  ______________________________________________________________________
 706+ 6669
 707+ 6669              Key_Table:
 708+ 6669 E2                           db      $E2                 //  0: STOP  --> SYMBOL+A : ~
 709+ 666A C3                           db      $C3                 //  1: NOT   --> SYMBOL+S : |
 710+ 666B CD                           db      $CD                 //  2: STEP  --> SYMBOl+D : //
 711+ 666C CC                           db      $CC                 //  3: TO    --> SYMBOL+F : {
 712+ 666D CB                           db      $CB                 //  4: THEN  --> SYMBOL+G : }
 713+ 666E C6                           db      $C6                 //  5: AND   --> SYMBOL+Y : [
 714+ 666F C5                           db      $C5                 //  6: OR    --> SYMBOL+U : ]
 715+ 6670 AC                           db      $AC                 //  7: AT    --> SYMBOL+I : (C) copyright symbol
 716+ 6671 C7                           db      $C7                 //  8: <=    --> same as SHIFT-1 [EDIT]
 717+ 6672 C8                           db      $C8                 //  9: >=    --> same as SHIFT-0 [BACKSPACE]
 718+ 6673 C9                           db      $C9                 // 10: <>    --> SYMBOL+W is the same as CAPS (toggle) SHIFT+2
 719+ 6674              Key_MapTo:
 720+ 6674 06                           db      $06                 // 10: SYMBOL+W is the same as CAPS (toggle) SHIFT+2
 721+ 6675 0C                           db      $0C                 //  9: same as SHIFT-0 [BACKSPACE]
 722+ 6676 07                           db      $07                 //  8: same as SHIFT-1 [EDIT]
 723+ 6677 7F                           db      $7F                 //  7: SYMBOL+I : (C) copyright symbol
 724+ 6678 5D                           db      $5D                 //  6: SYMBOL+U : ]
 725+ 6679 5B                           db      $5B                 //  5: SYMBOL+Y : [
 726+ 667A 7D                           db      $7D                 //  4: SYMBOL+G : }
 727+ 667B 7B                           db      $7B                 //  3: SYMBOL+F : {
 728+ 667C 5C                           db      $5C                 //  2: SYMBOl+D : //
 729+ 667D 7C                           db      $7C                 //  1: SYMBOL+S : |
 730+ 667E 7E                           db      $7E                 //  0: SYMBOL+A : ~
 731+ 667F
 732+ 667F              //  ______________________________________________________________________
 733+ 667F              //
 734+ 667F              // key          -- c
 735+ 667F              // wait for a keypress
 736+ 667F              // This definition need Standard ROM Interrupt to be served
 737+ 667F
 738+ 667F                              New_Def KEY, "KEY", is_code, is_normal
 738+ 667F             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 738+ 667F             >
 738+ 667F             >                // dummy db directives used to calculate length of namec
 738+ 667F 4B 45 59    >                db      "KEY"
 738+ 6682             >len_NFA         defl    $ - temp_NFA
 738+ 6682             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 738+ 667F             >
 738+ 667F 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 738+ 6680 4B 45 59    >                db      "KEY"               // name string in 7-bit ascii, but
 738+ 6683             >                org     $-1                 // alter last byte of Name just above to set
 738+ 6682 D9          >                db      {b $} | END_BIT     // msb as name end
 738+ 6683             >
 738+ 6683 15 66       >                dw      last_NFA            // Link to previous definition Name
 738+ 6685             >KEY:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 738+ 6685 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
 738+ 6685             >                else
 738+ 6685 87 66       >                dw      $ + 2   ; ok        // is pointed by CFA
 738+ 6687             >                endif           ; ok        // for other definitions it "points" the correct handler
 738+ 6687             >                // Use of "; ok" to suppress "warning[fwdref]"
 738+ 6687             >
 738+ 6687             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 739+ 6687
 740+ 6687 C5                           push    bc                  // save Instruction Pointer
 741+ 6688 DD E5                        push    ix
 742+ 668A
 743+ 668A ED 73 92 63                  ld      (SP_Saved), sp      // be sure to not to be paged out.
 744+ 668E 31 61 63                     ld      sp, Cold_origin - 5 // maybe $4000 in the future...
 745+ 6691 FD CB 01 AE                  res     5, (iy + 1)         // FLAGS (5C3A+1)
 746+ 6695
 747+ 6695              Key_Wait:
 748+ 6695 76                               halt
 749+ 6696 3E 02                            ld      a, 2                // selec channel #2 (Upper Video)
 750+ 6698 CD 01 16                         call    $1601               // SELECT Standard-ROM Routine
 751+ 669B
 752+ 669B                                  // software-flash: flips face every 320 ms
 753+ 669B 3E 10                            ld      a, $10              // Timing based
 754+ 669D FD A6 3E                         and     (iy + $3E)          // FRAMES (5C3A+3E)
 755+ 66A0
 756+ 66A0 3A 8C 63                         ld      a, (Block_Face)     // see origin.asm
 757+ 66A3 20 0C                            jr      nz, Key_Cursor
 758+ 66A5 3A 8D 63                             ld      a, (Half_Face)      // see origin.asm
 759+ 66A8 FD CB 30 5E                          bit     3, (iy + $30)       // FLAGS2 (5C3A+$30) that is CAPS-LOCK
 760+ 66AC 28 03                                jr      z, Key_Cursor
 761+ 66AE 3A 8E 63                                 ld      a, (Underscore_Face) // see origin
 762+ 66B1              Key_Cursor:
 763+ 66B1 D7                               rst     $10
 764+ 66B2 3E 08                            ld      a, BACKSPACE_CHAR    // backspace
 765+ 66B4 D7                               rst     $10
 766+ 66B5
 767+ 66B5 FD CB 01 6E                      bit     5, (iy + 1)         // FLAGS (5C3A+1)
 768+ 66B9 28 DA                        jr      z, Key_Wait
 769+ 66BB
 770+ 66BB 76                           halt    // this is to sync flashing cursor.
 771+ 66BC
 772+ 66BC 3E 20                        ld      a, BLANK_CHAR       // space to blank cursor
 773+ 66BE D7                           rst     $10
 774+ 66BF 3E 08                        ld      a, BACKSPACE_CHAR   // backspace
 775+ 66C1 D7                           rst     $10
 776+ 66C2 3A 08 5C                     ld      a, (LASTK)          // get typed character (5C08)
 777+ 66C5
 778+ 66C5                              // decode character from above table
 779+ 66C5 21 69 66                     ld      hl, Key_Table
 780+ 66C8 01 0B 00                     ld      bc, $000B
 781+ 66CB ED B1                        cpir
 782+ 66CD 20 05                        jr      nz, Key_DontMap
 783+ 66CF 21 74 66                         ld      hl, Key_MapTo
 784+ 66D2 09                               add     hl, bc
 785+ 66D3 7E                               ld      a, (hl)
 786+ 66D4 FE 06        Key_DontMap:    cp      $06                 // CAPS-LOCK management
 787+ 66D6 20 09                        jr      nz, Key_NoCapsLock
 788+ 66D8 21 6A 5C                         ld      hl, $5C6A           // FLAGS2
 789+ 66DB 7E                               ld      a, (hl)
 790+ 66DC EE 08                            xor     $08
 791+ 66DE 77                               ld      (hl), a
 792+ 66DF 3E 00                            ld      a, NUL_CHAR
 793+ 66E1 6F           Key_NoCapsLock: ld      l, a
 794+ 66E2 26 00                        ld      h, 0                // Prepare TOS
 795+ 66E4
 796+ 66E4 3A 48 5C                     ld      a, ($5C48)          // BORDCR system variable
 797+ 66E7 1F                           rra
 798+ 66E8 1F                           rra
 799+ 66E9 1F                           rra
 800+ 66EA F6 18                        or      $18                 // quick'n'dirty click
 801+ 66EC D3 FE                        out     ($fe), a
 802+ 66EE 06 00                        ld      b, 0
 803+ 66F0 10 FE                        djnz    $                   // wait loop
 804+ 66F2 EE 18                        xor     $18
 805+ 66F4 D3 FE                        out     ($fe), a
 806+ 66F6
 807+ 66F6 ED 7B 92 63                  ld      sp, (SP_Saved)
 808+ 66FA
 809+ 66FA DD E1                        pop     ix
 810+ 66FC C1                           pop     bc                  // Restore Instruction Pointer
 811+ 66FD
 812+ 66FD                              psh1
 812+ 66FD E5          >                push    hl
 812+ 66FE DD E9       >                jp      (ix)
 813+ 6700
 814+ 6700              //  ______________________________________________________________________
 815+ 6700              //
 816+ 6700              // ?terminal    -- FALSE | TRUE
 817+ 6700              // test for BREAK keypress
 818+ 6700                              New_Def QTERMINAL, "?TERMINAL", is_code, is_normal
 818+ 6700             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 818+ 6700             >
 818+ 6700             >                // dummy db directives used to calculate length of namec
 818+ 6700 3F 54 45 52 >                db      "?TERMINAL"
 818+ 6704 4D 49 4E 41 >
 818+ 6708 4C          >
 818+ 6709             >len_NFA         defl    $ - temp_NFA
 818+ 6709             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 818+ 6700             >
 818+ 6700 89          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 818+ 6701 3F 54 45 52 >                db      "?TERMINAL"               // name string in 7-bit ascii, but
 818+ 6705 4D 49 4E 41 >
 818+ 6709 4C          >
 818+ 670A             >                org     $-1                 // alter last byte of Name just above to set
 818+ 6709 CC          >                db      {b $} | END_BIT     // msb as name end
 818+ 670A             >
 818+ 670A 7F 66       >                dw      last_NFA            // Link to previous definition Name
 818+ 670C             >QTERMINAL:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 818+ 670C ~           >                dw      runcode ; ok        // for primitive definitions  actual code
 818+ 670C             >                else
 818+ 670C 0E 67       >                dw      $ + 2   ; ok        // is pointed by CFA
 818+ 670E             >                endif           ; ok        // for other definitions it "points" the correct handler
 818+ 670E             >                // Use of "; ok" to suppress "warning[fwdref]"
 818+ 670E             >
 818+ 670E             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 819+ 670E 21 00 00                     ld      hl, 0
 820+ 6711 ED 73 92 63                  ld      (SP_Saved), sp
 821+ 6715 31 61 63                     ld      sp, Cold_origin - 5
 822+ 6718 CD 54 1F                     call    $1F54
 823+ 671B ED 7B 92 63                  ld      sp, (SP_Saved)
 824+ 671F
 825+ 671F 38 01                        jr      c, QTerminal_NoBreak
 826+ 6721 2B                               dec     hl                  // quick TRUE_FLAG
 827+ 6722              QTerminal_NoBreak:
 828+ 6722
 829+ 6722                              psh1
 829+ 6722 E5          >                push    hl
 829+ 6723 DD E9       >                jp      (ix)
 830+ 6725
 831+ 6725
 832+ 6725              //  ______________________________________________________________________
 833+ 6725              //
 834+ 6725              // ZX Spectrum Next - Low Level disk primitives.
 835+ 6725              // this include is "here" for backward compatibility
 836+ 6725
 837+ 6725                              include "next-opt0.asm"
# file opened: C:\Zx\CSpect\Projects\vForth15_INDIRECT/source/next-opt0.asm
   1++6725              //  ______________________________________________________________________
   2++6725              //
   3++6725              //  next-opt.asm
   4++6725              //
   5++6725              //  ZX Spectrum Next - peculiar definitions
   6++6725              //  ______________________________________________________________________
   7++6725
   8++6725              //  ______________________________________________________________________
   9++6725              //
  10++6725              // f_seek       d u -- f
  11++6725              // Seek to position d in file-handle u.
  12++6725              // Return a false-flag 0 on success, True flag on error
  13++6725                              New_Def F_SEEK, "F_SEEK", is_code, is_normal
  13++6725             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  13++6725             >
  13++6725             >                // dummy db directives used to calculate length of namec
  13++6725 46 5F 53 45 >                db      "F_SEEK"
  13++6729 45 4B       >
  13++672B             >len_NFA         defl    $ - temp_NFA
  13++672B             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  13++6725             >
  13++6725 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  13++6726 46 5F 53 45 >                db      "F_SEEK"               // name string in 7-bit ascii, but
  13++672A 45 4B       >
  13++672C             >                org     $-1                 // alter last byte of Name just above to set
  13++672B CB          >                db      {b $} | END_BIT     // msb as name end
  13++672C             >
  13++672C 00 67       >                dw      last_NFA            // Link to previous definition Name
  13++672E             >F_SEEK:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
  13++672E ~           >                dw      runcode ; ok        // for primitive definitions  actual code
  13++672E             >                else
  13++672E 30 67       >                dw      $ + 2   ; ok        // is pointed by CFA
  13++6730             >                endif           ; ok        // for other definitions it "points" the correct handler
  13++6730             >                // Use of "; ok" to suppress "warning[fwdref]"
  13++6730             >
  13++6730             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  14++6730 E1                           pop     hl                  // file-handle
  15++6731 7D                           ld      a, l                // file-handle
  16++6732 60                           ld      h, b                // save Intruction Pointer
  17++6733 69                           ld      l, c
  18++6734 C1                           pop     bc                  // bc has high-word of d
  19++6735 D1                           pop     de
  20++6736 DD E5                        push    ix
  21++6738 E5                           push    hl                  // save Instruction Pointer
  22++6739 DD 21 00 00                  ld      ix, 0
  23++673D CF                           rst     $08
  24++673E 9F                           db      $9F
  25++673F C1                           pop     bc                  // restore Instruction Pointer
  26++6740 DD E1                        pop     ix
  27++6742 ED 62                        sbc     hl, hl              // to get 0 or -1
  28++6744
  29++6744                              psh1
  29++6744 E5          >                push    hl
  29++6745 DD E9       >                jp      (ix)
  30++6747
  31++6747              //  ______________________________________________________________________
  32++6747              //
  33++6747              // f_fgetpos    u -- d f
  34++6747              // Seek to position d in file-handle u.
  35++6747              // Return a false-flag 0 on success, True flag on error
  36++6747                              New_Def F_FGETPOS, "F_FGETPOS", is_code, is_normal
  36++6747             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  36++6747             >
  36++6747             >                // dummy db directives used to calculate length of namec
  36++6747 46 5F 46 47 >                db      "F_FGETPOS"
  36++674B 45 54 50 4F >
  36++674F 53          >
  36++6750             >len_NFA         defl    $ - temp_NFA
  36++6750             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  36++6747             >
  36++6747 89          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  36++6748 46 5F 46 47 >                db      "F_FGETPOS"               // name string in 7-bit ascii, but
  36++674C 45 54 50 4F >
  36++6750 53          >
  36++6751             >                org     $-1                 // alter last byte of Name just above to set
  36++6750 D3          >                db      {b $} | END_BIT     // msb as name end
  36++6751             >
  36++6751 25 67       >                dw      last_NFA            // Link to previous definition Name
  36++6753             >F_FGETPOS:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
  36++6753 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
  36++6753             >                else
  36++6753 55 67       >                dw      $ + 2   ; ok        // is pointed by CFA
  36++6755             >                endif           ; ok        // for other definitions it "points" the correct handler
  36++6755             >                // Use of "; ok" to suppress "warning[fwdref]"
  36++6755             >
  36++6755             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  37++6755 E1                           pop     hl
  38++6756 7D                           ld      a, l                // file-handle
  39++6757 DD E5                        push    ix
  40++6759 C5                           push    bc
  41++675A CF                           rst     $08
  42++675B A0                           db      $A0
  43++675C E1                           pop     hl                  // restore Instruction Pointer
  44++675D DD E1                        pop     ix
  45++675F D5                           push    de
  46++6760 C5                           push    bc
  47++6761 44                           ld      b, h                // restore Instruction Pointer
  48++6762 4D                           ld      c, l
  49++6763 ED 62                        sbc     hl, hl
  50++6765
  51++6765                              psh1
  51++6765 E5          >                push    hl
  51++6766 DD E9       >                jp      (ix)
  52++6768
  53++6768              //  ______________________________________________________________________
  54++6768              //
  55++6768              // f_read       a b u -- n f
  56++6768              // Read b bytes from file-handle u to address a
  57++6768              // Return the actual number n of bytes read
  58++6768              // Return 0 on success, True flag on error
  59++6768                              New_Def F_READ, "F_READ", is_code, is_normal
  59++6768             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  59++6768             >
  59++6768             >                // dummy db directives used to calculate length of namec
  59++6768 46 5F 52 45 >                db      "F_READ"
  59++676C 41 44       >
  59++676E             >len_NFA         defl    $ - temp_NFA
  59++676E             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  59++6768             >
  59++6768 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  59++6769 46 5F 52 45 >                db      "F_READ"               // name string in 7-bit ascii, but
  59++676D 41 44       >
  59++676F             >                org     $-1                 // alter last byte of Name just above to set
  59++676E C4          >                db      {b $} | END_BIT     // msb as name end
  59++676F             >
  59++676F 47 67       >                dw      last_NFA            // Link to previous definition Name
  59++6771             >F_READ:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
  59++6771 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
  59++6771             >                else
  59++6771 73 67       >                dw      $ + 2   ; ok        // is pointed by CFA
  59++6773             >                endif           ; ok        // for other definitions it "points" the correct handler
  59++6773             >                // Use of "; ok" to suppress "warning[fwdref]"
  59++6773             >
  59++6773             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  60++6773
  61++6773 50                           ld      d, b
  62++6774 59                           ld      e, c
  63++6775 E1                           pop     hl
  64++6776 7D                           ld      a, l                // file-handle
  65++6777 C1                           pop     bc                  // bc has bytes to read
  66++6778 DD E3                        ex      (sp), ix            // ix has address
  67++677A D5                           push    de                  // Save Instruction pointer
  68++677B CF                           rst     $08
  69++677C 9D                           db      $9D
  70++677D C1                           pop     bc                  // Restore Instruction pointer
  71++677E DD E1                        pop     ix                  // Restore ix
  72++6780 D5                           push    de                  // bytes written
  73++6781 ED 62                        sbc     hl, hl
  74++6783
  75++6783                              psh1
  75++6783 E5          >                push    hl
  75++6784 DD E9       >                jp      (ix)
  76++6786
  77++6786              //  ______________________________________________________________________
  78++6786              //
  79++6786              // f_write      a b u -- n f
  80++6786              // Write bytes currently stored at address a to file-handle u.
  81++6786              // Return the actual n bytes written and 0 on success, True flag on error.
  82++6786                              New_Def F_WRITE, "F_WRITE", is_code, is_normal
  82++6786             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  82++6786             >
  82++6786             >                // dummy db directives used to calculate length of namec
  82++6786 46 5F 57 52 >                db      "F_WRITE"
  82++678A 49 54 45    >
  82++678D             >len_NFA         defl    $ - temp_NFA
  82++678D             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  82++6786             >
  82++6786 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  82++6787 46 5F 57 52 >                db      "F_WRITE"               // name string in 7-bit ascii, but
  82++678B 49 54 45    >
  82++678E             >                org     $-1                 // alter last byte of Name just above to set
  82++678D C5          >                db      {b $} | END_BIT     // msb as name end
  82++678E             >
  82++678E 68 67       >                dw      last_NFA            // Link to previous definition Name
  82++6790             >F_WRITE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
  82++6790 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
  82++6790             >                else
  82++6790 92 67       >                dw      $ + 2   ; ok        // is pointed by CFA
  82++6792             >                endif           ; ok        // for other definitions it "points" the correct handler
  82++6792             >                // Use of "; ok" to suppress "warning[fwdref]"
  82++6792             >
  82++6792             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  83++6792
  84++6792 50                           ld      d, b
  85++6793 59                           ld      e, c
  86++6794 E1                           pop     hl
  87++6795 7D                           ld      a, l                // file-handle
  88++6796 C1                           pop     bc                  // bc has bytes to read
  89++6797 DD E3                        ex      (sp), ix            // ix has address
  90++6799 D5                           push    de                  // Save Instruction pointer
  91++679A CF                           rst     $08
  92++679B 9E                           db      $9E
  93++679C C1                           pop     bc                  // Restore Instruction pointer
  94++679D DD E1                        pop     ix                  // Restore ix
  95++679F D5                           push    de                  // bytes written
  96++67A0 ED 62                        sbc     hl, hl
  97++67A2
  98++67A2                              psh1
  98++67A2 E5          >                push    hl
  98++67A3 DD E9       >                jp      (ix)
  99++67A5
 100++67A5              //  ______________________________________________________________________
 101++67A5              //
 102++67A5              // f_close      u -- f
 103++67A5              // Close file-handle u.
 104++67A5              // Return 0 on success, True flag on error
 105++67A5
 106++67A5                              New_Def F_CLOSE, "F_CLOSE", is_code, is_normal
 106++67A5             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 106++67A5             >
 106++67A5             >                // dummy db directives used to calculate length of namec
 106++67A5 46 5F 43 4C >                db      "F_CLOSE"
 106++67A9 4F 53 45    >
 106++67AC             >len_NFA         defl    $ - temp_NFA
 106++67AC             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 106++67A5             >
 106++67A5 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 106++67A6 46 5F 43 4C >                db      "F_CLOSE"               // name string in 7-bit ascii, but
 106++67AA 4F 53 45    >
 106++67AD             >                org     $-1                 // alter last byte of Name just above to set
 106++67AC C5          >                db      {b $} | END_BIT     // msb as name end
 106++67AD             >
 106++67AD 86 67       >                dw      last_NFA            // Link to previous definition Name
 106++67AF             >F_CLOSE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 106++67AF ~           >                dw      runcode ; ok        // for primitive definitions  actual code
 106++67AF             >                else
 106++67AF B1 67       >                dw      $ + 2   ; ok        // is pointed by CFA
 106++67B1             >                endif           ; ok        // for other definitions it "points" the correct handler
 106++67B1             >                // Use of "; ok" to suppress "warning[fwdref]"
 106++67B1             >
 106++67B1             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 107++67B1
 108++67B1 E1                           pop     hl
 109++67B2 7D                           ld      a, l                // file-handle
 110++67B3 DD E5                        push    ix
 111++67B5 C5                           push    bc                  // Save Instruction pointer
 112++67B6 CF                           rst     $08
 113++67B7 9B                           db      $9B
 114++67B8 C1                           pop     bc
 115++67B9 DD E1                        pop     ix
 116++67BB ED 62                        sbc     hl, hl
 117++67BD
 118++67BD                              psh1
 118++67BD E5          >                push    hl
 118++67BE DD E9       >                jp      (ix)
 119++67C0
 120++67C0              //  ______________________________________________________________________
 121++67C0              //
 122++67C0              // f_open       a1 a2 b -- u f
 123++67C0              // open a file
 124++67C0              // a1 (filespec) is a null-terminated string, such as produced by ," definition
 125++67C0              // a2 is address to an 8-byte header data used in some cases.
 126++67C0              // b is access mode-byte, that is a combination of:
 127++67C0              // any/all of:
 128++67C0              //   esx_mode_read          $01 request read access
 129++67C0              //   esx_mode_write         $02 request write access
 130++67C0              //   esx_mode_use_header    $40 read/write +3DOS header
 131++67C0              // plus one of:
 132++67C0              //   esx_mode_open_exist    $00 only open existing file
 133++67C0              //   esx_mode_open_creat    $08 open existing or create file
 134++67C0              //   esx_mode_creat_noexist $04 create new file, error if exists
 135++67C0              //   esx_mode_creat_trunc   $0c create new file, delete existing
 136++67C0              // Return file-handle u and 0 on success, True flag on error
 137++67C0                              New_Def F_OPEN, "F_OPEN", is_code, is_normal
 137++67C0             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 137++67C0             >
 137++67C0             >                // dummy db directives used to calculate length of namec
 137++67C0 46 5F 4F 50 >                db      "F_OPEN"
 137++67C4 45 4E       >
 137++67C6             >len_NFA         defl    $ - temp_NFA
 137++67C6             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 137++67C0             >
 137++67C0 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 137++67C1 46 5F 4F 50 >                db      "F_OPEN"               // name string in 7-bit ascii, but
 137++67C5 45 4E       >
 137++67C7             >                org     $-1                 // alter last byte of Name just above to set
 137++67C6 CE          >                db      {b $} | END_BIT     // msb as name end
 137++67C7             >
 137++67C7 A5 67       >                dw      last_NFA            // Link to previous definition Name
 137++67C9             >F_OPEN:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 137++67C9 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
 137++67C9             >                else
 137++67C9 CB 67       >                dw      $ + 2   ; ok        // is pointed by CFA
 137++67CB             >                endif           ; ok        // for other definitions it "points" the correct handler
 137++67CB             >                // Use of "; ok" to suppress "warning[fwdref]"
 137++67CB             >
 137++67CB             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 138++67CB 60                           ld      h, b                // Save Instruction pointer
 139++67CC 69                           ld      l, c
 140++67CD C1                           pop     bc                  // file-mode
 141++67CE 41                           ld      b, c                // file-mode
 142++67CF D1                           pop     de                  // 8-bytes buffer if any
 143++67D0 DD E3                        ex      (sp), ix            // filespec nul-terminated
 144++67D2 E5                           push    hl                  // Save Instruction pointer
 145++67D3 3E 2A                        ld      a, "*"
 146++67D5 CF                           rst     $08
 147++67D6 9A                           db      $9A
 148++67D7 C1                           pop     bc
 149++67D8 DD E1                        pop     ix
 150++67DA ED 62                        sbc     hl, hl
 151++67DC 5F                           ld      e, a
 152++67DD 16 00                        ld      d, 0
 153++67DF
 154++67DF
 155++67DF                              psh2
 155++67DF D5          >                push    de
 155++67E0 E5          >                push    hl
 155++67E1 DD E9       >                jp      (ix)
 156++67E3
 157++67E3              //   \ CREATE FILENAME ," test.txt"   \ new Counted String
 158++67E3              //   \ FILENAME 1+ PAD 1 F_OPEN
 159++67E3              //   \ DROP
 160++67E3              //   \ F_CLOSE
 161++67E3
 162++67E3              //  ______________________________________________________________________
 163++67E3              //
 164++67E3              // f_sync      u -- f
 165++67E3              // Close file-handle u.
 166++67E3              // Return 0 on success, True flag on error
 167++67E3
 168++67E3                              New_Def F_SYNC, "F_SYNC", is_code, is_normal
 168++67E3             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 168++67E3             >
 168++67E3             >                // dummy db directives used to calculate length of namec
 168++67E3 46 5F 53 59 >                db      "F_SYNC"
 168++67E7 4E 43       >
 168++67E9             >len_NFA         defl    $ - temp_NFA
 168++67E9             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 168++67E3             >
 168++67E3 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 168++67E4 46 5F 53 59 >                db      "F_SYNC"               // name string in 7-bit ascii, but
 168++67E8 4E 43       >
 168++67EA             >                org     $-1                 // alter last byte of Name just above to set
 168++67E9 C3          >                db      {b $} | END_BIT     // msb as name end
 168++67EA             >
 168++67EA C0 67       >                dw      last_NFA            // Link to previous definition Name
 168++67EC             >F_SYNC:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 168++67EC ~           >                dw      runcode ; ok        // for primitive definitions  actual code
 168++67EC             >                else
 168++67EC EE 67       >                dw      $ + 2   ; ok        // is pointed by CFA
 168++67EE             >                endif           ; ok        // for other definitions it "points" the correct handler
 168++67EE             >                // Use of "; ok" to suppress "warning[fwdref]"
 168++67EE             >
 168++67EE             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 169++67EE E1                           pop     hl
 170++67EF 7D                           ld      a, l                // file-handle
 171++67F0 DD E5                        push    ix
 172++67F2 C5                           push    bc
 173++67F3 CF                           rst     $08
 174++67F4 9C                           db      $9C
 175++67F5 C1                           pop     bc
 176++67F6 DD E1                        pop     ix
 177++67F8 ED 62                        sbc     hl, hl
 178++67FA
 179++67FA                              psh1
 179++67FA E5          >                push    hl
 179++67FB DD E9       >                jp      (ix)
 180++67FD
# file closed: C:\Zx\CSpect\Projects\vForth15_INDIRECT/source/next-opt0.asm
 838+ 67FD
 839+ 67FD
 840+ 67FD              //  ______________________________________________________________________
 841+ 67FD              //
 842+ 67FD              // cr           --
 843+ 67FD              // send a CR via EMITC
 844+ 67FD                              New_Def CR, "CR", is_code, is_normal
 844+ 67FD             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 844+ 67FD             >
 844+ 67FD             >                // dummy db directives used to calculate length of namec
 844+ 67FD 43 52       >                db      "CR"
 844+ 67FF             >len_NFA         defl    $ - temp_NFA
 844+ 67FF             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 844+ 67FD             >
 844+ 67FD 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 844+ 67FE 43 52       >                db      "CR"               // name string in 7-bit ascii, but
 844+ 6800             >                org     $-1                 // alter last byte of Name just above to set
 844+ 67FF D2          >                db      {b $} | END_BIT     // msb as name end
 844+ 6800             >
 844+ 6800 E3 67       >                dw      last_NFA            // Link to previous definition Name
 844+ 6802             >CR:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 844+ 6802 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
 844+ 6802             >                else
 844+ 6802 04 68       >                dw      $ + 2   ; ok        // is pointed by CFA
 844+ 6804             >                endif           ; ok        // for other definitions it "points" the correct handler
 844+ 6804             >                // Use of "; ok" to suppress "warning[fwdref]"
 844+ 6804             >
 844+ 6804             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 845+ 6804
 846+ 6804 3E 0D                        ld      a, CR_CHAR
 847+ 6806 C3 EF 65                     jp      Emitc_Ptr
 848+ 6809
 849+ 6809              //  ______________________________________________________________________
 850+ 6809              //
 851+ 6809              // cmove    a1 a2 u --
 852+ 6809              // If u > 0, moves memory content starting at address a1 for n bytes long
 853+ 6809              // storing then starting at address addr2.
 854+ 6809              // The content of a1 is moved first. See CMOVE> also.
 855+ 6809                              New_Def CMOVE, "CMOVE", is_code, is_normal
 855+ 6809             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 855+ 6809             >
 855+ 6809             >                // dummy db directives used to calculate length of namec
 855+ 6809 43 4D 4F 56 >                db      "CMOVE"
 855+ 680D 45          >
 855+ 680E             >len_NFA         defl    $ - temp_NFA
 855+ 680E             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 855+ 6809             >
 855+ 6809 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 855+ 680A 43 4D 4F 56 >                db      "CMOVE"               // name string in 7-bit ascii, but
 855+ 680E 45          >
 855+ 680F             >                org     $-1                 // alter last byte of Name just above to set
 855+ 680E C5          >                db      {b $} | END_BIT     // msb as name end
 855+ 680F             >
 855+ 680F FD 67       >                dw      last_NFA            // Link to previous definition Name
 855+ 6811             >CMOVE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 855+ 6811 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
 855+ 6811             >                else
 855+ 6811 13 68       >                dw      $ + 2   ; ok        // is pointed by CFA
 855+ 6813             >                endif           ; ok        // for other definitions it "points" the correct handler
 855+ 6813             >                // Use of "; ok" to suppress "warning[fwdref]"
 855+ 6813             >
 855+ 6813             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 856+ 6813 D9                           exx
 857+ 6814 C1                           pop     bc                  // bc has counter
 858+ 6815 D1                           pop     de                  // de now has dest
 859+ 6816 E1                           pop     hl                  // hl has source, save Instruction Pointer
 860+ 6817 78                           ld      a, b
 861+ 6818 B1                           or      c
 862+ 6819 28 02                        jr      z, Cmove_NoMove
 863+ 681B ED B0                            ldir
 864+ 681D              Cmove_NoMove:
 865+ 681D D9                           exx
 866+ 681E                              next
 866+ 681E DD E9       >                jp      (ix)
 867+ 6820
 868+ 6820              //  ______________________________________________________________________
 869+ 6820              //
 870+ 6820              // cmove>    a1 a2 u --
 871+ 6820              // If u > 0, moves memory content starting at address a1 for n bytes long
 872+ 6820              // storing then starting at address addr2.
 873+ 6820              // The content of a1 is moved last. See cmove.
 874+ 6820                              New_Def CMOVE_TO, "CMOVE>", is_code, is_normal
 874+ 6820             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 874+ 6820             >
 874+ 6820             >                // dummy db directives used to calculate length of namec
 874+ 6820 43 4D 4F 56 >                db      "CMOVE>"
 874+ 6824 45 3E       >
 874+ 6826             >len_NFA         defl    $ - temp_NFA
 874+ 6826             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 874+ 6820             >
 874+ 6820 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 874+ 6821 43 4D 4F 56 >                db      "CMOVE>"               // name string in 7-bit ascii, but
 874+ 6825 45 3E       >
 874+ 6827             >                org     $-1                 // alter last byte of Name just above to set
 874+ 6826 BE          >                db      {b $} | END_BIT     // msb as name end
 874+ 6827             >
 874+ 6827 09 68       >                dw      last_NFA            // Link to previous definition Name
 874+ 6829             >CMOVE_TO:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 874+ 6829 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
 874+ 6829             >                else
 874+ 6829 2B 68       >                dw      $ + 2   ; ok        // is pointed by CFA
 874+ 682B             >                endif           ; ok        // for other definitions it "points" the correct handler
 874+ 682B             >                // Use of "; ok" to suppress "warning[fwdref]"
 874+ 682B             >
 874+ 682B             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 875+ 682B D9                           exx
 876+ 682C C1                           pop     bc                  // bc has counter
 877+ 682D D1                           pop     de                  // de has dest
 878+ 682E E1                           pop     hl                  // hl has source, save Instruction Pointer
 879+ 682F 78                           ld      a, b
 880+ 6830 B1                           or      c
 881+ 6831 28 08                        jr      z, CmoveV_NoMove
 882+ 6833 EB                               ex      de, hl              // compute address to
 883+ 6834 09                               add     hl, bc              // operate backward
 884+ 6835 2B                               dec     hl
 885+ 6836 EB                               ex      de, hl
 886+ 6837 09                               add     hl, bc
 887+ 6838 2B                               dec     hl
 888+ 6839 ED B8                            lddr                        // backward
 889+ 683B              CmoveV_NoMove:
 890+ 683B D9                           exx
 891+ 683C                              next
 891+ 683C DD E9       >                jp      (ix)
 892+ 683E
 893+ 683E              //  ______________________________________________________________________
 894+ 683E              //
 895+ 683E              // um*      u1 u2 -- ud
 896+ 683E              // Unsigned multiplication
 897+ 683E              // A double-integer is kept in CPU registers as DEHL then pushed on stack.
 898+ 683E              // On the stack a double number is treated as two single numbers
 899+ 683E              // where DE is on the top of the stack and HL is the second from top,
 900+ 683E              // Instead, in 2VARIABLE a double number is stored as EDLH.
 901+ 683E              // this definition could use "MUL" Z80N new op-code.
 902+ 683E                              New_Def UM_MUL, "UM*", is_code, is_normal
 902+ 683E             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 902+ 683E             >
 902+ 683E             >                // dummy db directives used to calculate length of namec
 902+ 683E 55 4D 2A    >                db      "UM*"
 902+ 6841             >len_NFA         defl    $ - temp_NFA
 902+ 6841             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 902+ 683E             >
 902+ 683E 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 902+ 683F 55 4D 2A    >                db      "UM*"               // name string in 7-bit ascii, but
 902+ 6842             >                org     $-1                 // alter last byte of Name just above to set
 902+ 6841 AA          >                db      {b $} | END_BIT     // msb as name end
 902+ 6842             >
 902+ 6842 20 68       >                dw      last_NFA            // Link to previous definition Name
 902+ 6844             >UM_MUL:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 902+ 6844 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
 902+ 6844             >                else
 902+ 6844 46 68       >                dw      $ + 2   ; ok        // is pointed by CFA
 902+ 6846             >                endif           ; ok        // for other definitions it "points" the correct handler
 902+ 6846             >                // Use of "; ok" to suppress "warning[fwdref]"
 902+ 6846             >
 902+ 6846             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 903+ 6846 D1                           pop     de                    // de has u2 operand
 904+ 6847 E1                           pop     hl                    // hl has u1 operand
 905+ 6848 C5                           push    bc                    // Save Instruction Pointer
 906+ 6849 45                           ld      b, l
 907+ 684A 4B                           ld      c, e
 908+ 684B 5D                           ld      e, l
 909+ 684C 6A                           ld      l, d
 910+ 684D E5                           push    hl
 911+ 684E 69                           ld      l, c
 912+ 684F ED 30                        mul
 913+ 6851 EB                           ex      de, hl
 914+ 6852 ED 30                        mul
 915+ 6854 AF                           xor     a
 916+ 6855 19                           add     hl, de
 917+ 6856 8F                           adc     a
 918+ 6857 59                           ld      e, c
 919+ 6858 50                           ld      d, b
 920+ 6859 ED 30                        mul
 921+ 685B 47                           ld      b, a
 922+ 685C 4C                           ld      c, h
 923+ 685D 7A                           ld      a, d
 924+ 685E 85                           add     l
 925+ 685F 67                           ld      h, a
 926+ 6860 6B                           ld      l, e
 927+ 6861 D1                           pop     de
 928+ 6862 ED 30                        mul
 929+ 6864 EB                           ex      de, hl
 930+ 6865 ED 4A                        adc     hl, bc
 931+ 6867 C1                           pop     bc
 932+ 6868 D5                           push    de
 933+ 6869 E5                           push    hl
 934+ 686A                              next
 934+ 686A DD E9       >                jp      (ix)
 935+ 686C
 936+ 686C              //  ______________________________________________________________________
 937+ 686C              //
 938+ 686C              // um/mod      ud u1 -- q r
 939+ 686C              // divides ud into u1 giving quotient q and remainder r
 940+ 686C              // algorithm takes 16 bit at a time starting from msb
 941+ 686C              // DE grows from lsb upward with quotient result
 942+ 686C              // HL keeps the remainder at each stage of division
 943+ 686C              // each loop 'lowers' the next binary digit to form the current dividend
 944+ 686C                              New_Def UMDIVMOD, "UM/MOD", is_code, is_normal
 944+ 686C             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 944+ 686C             >
 944+ 686C             >                // dummy db directives used to calculate length of namec
 944+ 686C 55 4D 2F 4D >                db      "UM/MOD"
 944+ 6870 4F 44       >
 944+ 6872             >len_NFA         defl    $ - temp_NFA
 944+ 6872             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 944+ 686C             >
 944+ 686C 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 944+ 686D 55 4D 2F 4D >                db      "UM/MOD"               // name string in 7-bit ascii, but
 944+ 6871 4F 44       >
 944+ 6873             >                org     $-1                 // alter last byte of Name just above to set
 944+ 6872 C4          >                db      {b $} | END_BIT     // msb as name end
 944+ 6873             >
 944+ 6873 3E 68       >                dw      last_NFA            // Link to previous definition Name
 944+ 6875             >UMDIVMOD:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 944+ 6875 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
 944+ 6875             >                else
 944+ 6875 77 68       >                dw      $ + 2   ; ok        // is pointed by CFA
 944+ 6877             >                endif           ; ok        // for other definitions it "points" the correct handler
 944+ 6877             >                // Use of "; ok" to suppress "warning[fwdref]"
 944+ 6877             >
 944+ 6877             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 945+ 6877 60                           ld      h, b
 946+ 6878 69                           ld      l, c                    // Save Instruction Pointer
 947+ 6879
 948+ 6879 C1                           pop     bc                      // divisor
 949+ 687A
 950+ 687A D1                           pop     de                      // < high part
 951+ 687B E3                           ex      (sp), hl                // < low part and > save bc
 952+ 687C EB                           ex      de, hl                  //
 953+ 687D 7D                           ld      a, l                    // check without changing arguments
 954+ 687E 91                           sub     c                       // if divisor is greater than high part
 955+ 687F 7C                           ld      a, h                    // so quotient will be in range
 956+ 6880 98                           sbc     a, b
 957+ 6881 30 23                        jr      nc, Um_DivMod_OutOfRange
 958+ 6883 3E 10                            ld      a, 16
 959+ 6885              Um_DivMod_Loop:
 960+ 6885 A7                                   and     a
 961+ 6886 CB 13                                rl      e
 962+ 6888 CB 12                                rl      d
 963+ 688A CB 15                                rl      l
 964+ 688C CB 14                                rl      h
 965+ 688E 30 05                                jr      nc, Um_DivMod_Carry
 966+ 6890 A7                                       and     a
 967+ 6891 ED 42                                    sbc     hl, bc
 968+ 6893 18 07                                jr      Um_DivMod_Endif    // else
 969+ 6895              Um_DivMod_Carry:
 970+ 6895 A7                                       and     a
 971+ 6896 ED 42                                    sbc     hl, bc
 972+ 6898 30 02                                    jr      nc, Um_DivMod_Endif
 973+ 689A 09                                           add     hl, bc
 974+ 689B 1B                                           dec     de
 975+ 689C              Um_DivMod_Endif:                                   // endif
 976+ 689C 13                                   inc     de
 977+ 689D 3D                                   dec     a
 978+ 689E 20 E5                            jr      nz, Um_DivMod_Loop
 979+ 68A0 EB                               ex      de, hl
 980+ 68A1              Um_DivMod_Bailout:
 981+ 68A1 C1                               pop     bc                  // restore Instruction Pointer
 982+ 68A2 D5                               push    de                  // de := remanider
 983+ 68A3 E5                               push    hl                  // hl := quotient
 984+ 68A4                                  next
 984+ 68A4 DD E9       >                jp      (ix)
 985+ 68A6
 986+ 68A6              Um_DivMod_OutOfRange:
 987+ 68A6 21 FF FF                     ld      hl, -1
 988+ 68A9 54                           ld      d, h
 989+ 68AA 5D                           ld      e, l
 990+ 68AB 18 F4                        jr      Um_DivMod_Bailout
 991+ 68AD
 992+ 68AD              //  ______________________________________________________________________
 993+ 68AD              //
 994+ 68AD              // and          n1 n2 -- n3
 995+ 68AD              // bit logical AND. Returns n3 as n1 & n2
 996+ 68AD                              New_Def AND_OP, "AND", is_code, is_normal
 996+ 68AD             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 996+ 68AD             >
 996+ 68AD             >                // dummy db directives used to calculate length of namec
 996+ 68AD 41 4E 44    >                db      "AND"
 996+ 68B0             >len_NFA         defl    $ - temp_NFA
 996+ 68B0             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 996+ 68AD             >
 996+ 68AD 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 996+ 68AE 41 4E 44    >                db      "AND"               // name string in 7-bit ascii, but
 996+ 68B1             >                org     $-1                 // alter last byte of Name just above to set
 996+ 68B0 C4          >                db      {b $} | END_BIT     // msb as name end
 996+ 68B1             >
 996+ 68B1 6C 68       >                dw      last_NFA            // Link to previous definition Name
 996+ 68B3             >AND_OP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 996+ 68B3 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
 996+ 68B3             >                else
 996+ 68B3 B5 68       >                dw      $ + 2   ; ok        // is pointed by CFA
 996+ 68B5             >                endif           ; ok        // for other definitions it "points" the correct handler
 996+ 68B5             >                // Use of "; ok" to suppress "warning[fwdref]"
 996+ 68B5             >
 996+ 68B5             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 997+ 68B5 D1                           pop     de
 998+ 68B6 E1                           pop     hl
 999+ 68B7 7B                           ld      a, e
1000+ 68B8 A5                           and     l
1001+ 68B9 6F                           ld      l, a
1002+ 68BA 7A                           ld      a, d
1003+ 68BB A4                           and     h
1004+ 68BC 67                           ld      h, a
1005+ 68BD
1006+ 68BD                              psh1
1006+ 68BD E5          >                push    hl
1006+ 68BE DD E9       >                jp      (ix)
1007+ 68C0
1008+ 68C0              //  ______________________________________________________________________
1009+ 68C0              //
1010+ 68C0              // or           n1 n2 -- n3
1011+ 68C0              // bit logical OR. Returns n3 as n1 | n2
1012+ 68C0                              New_Def OR_OP, "OR", is_code, is_normal
1012+ 68C0             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1012+ 68C0             >
1012+ 68C0             >                // dummy db directives used to calculate length of namec
1012+ 68C0 4F 52       >                db      "OR"
1012+ 68C2             >len_NFA         defl    $ - temp_NFA
1012+ 68C2             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1012+ 68C0             >
1012+ 68C0 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1012+ 68C1 4F 52       >                db      "OR"               // name string in 7-bit ascii, but
1012+ 68C3             >                org     $-1                 // alter last byte of Name just above to set
1012+ 68C2 D2          >                db      {b $} | END_BIT     // msb as name end
1012+ 68C3             >
1012+ 68C3 AD 68       >                dw      last_NFA            // Link to previous definition Name
1012+ 68C5             >OR_OP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1012+ 68C5 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1012+ 68C5             >                else
1012+ 68C5 C7 68       >                dw      $ + 2   ; ok        // is pointed by CFA
1012+ 68C7             >                endif           ; ok        // for other definitions it "points" the correct handler
1012+ 68C7             >                // Use of "; ok" to suppress "warning[fwdref]"
1012+ 68C7             >
1012+ 68C7             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1013+ 68C7 D1                           pop     de
1014+ 68C8 E1                           pop     hl
1015+ 68C9 7B                           ld      a, e
1016+ 68CA B5                           or      l
1017+ 68CB 6F                           ld      l, a
1018+ 68CC 7A                           ld      a, d
1019+ 68CD B4                           or      h
1020+ 68CE 67                           ld      h, a
1021+ 68CF
1022+ 68CF                              psh1
1022+ 68CF E5          >                push    hl
1022+ 68D0 DD E9       >                jp      (ix)
1023+ 68D2
1024+ 68D2              //  ______________________________________________________________________
1025+ 68D2              //
1026+ 68D2              // xor          n1 n2 -- n3
1027+ 68D2              // bit logical OR. Returns n3 as n1 ^ n2
1028+ 68D2                              New_Def XOR_OP, "XOR", is_code, is_normal
1028+ 68D2             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1028+ 68D2             >
1028+ 68D2             >                // dummy db directives used to calculate length of namec
1028+ 68D2 58 4F 52    >                db      "XOR"
1028+ 68D5             >len_NFA         defl    $ - temp_NFA
1028+ 68D5             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1028+ 68D2             >
1028+ 68D2 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1028+ 68D3 58 4F 52    >                db      "XOR"               // name string in 7-bit ascii, but
1028+ 68D6             >                org     $-1                 // alter last byte of Name just above to set
1028+ 68D5 D2          >                db      {b $} | END_BIT     // msb as name end
1028+ 68D6             >
1028+ 68D6 C0 68       >                dw      last_NFA            // Link to previous definition Name
1028+ 68D8             >XOR_OP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1028+ 68D8 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1028+ 68D8             >                else
1028+ 68D8 DA 68       >                dw      $ + 2   ; ok        // is pointed by CFA
1028+ 68DA             >                endif           ; ok        // for other definitions it "points" the correct handler
1028+ 68DA             >                // Use of "; ok" to suppress "warning[fwdref]"
1028+ 68DA             >
1028+ 68DA             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1029+ 68DA D1                           pop     de
1030+ 68DB E1                           pop     hl
1031+ 68DC 7B                           ld      a, e
1032+ 68DD AD                           xor     l
1033+ 68DE 6F                           ld      l, a
1034+ 68DF 7A                           ld      a, d
1035+ 68E0 AC                           xor     h
1036+ 68E1 67                           ld      h, a
1037+ 68E2
1038+ 68E2                              psh1
1038+ 68E2 E5          >                push    hl
1038+ 68E3 DD E9       >                jp      (ix)
1039+ 68E5
1040+ 68E5              //  ______________________________________________________________________
1041+ 68E5              //
1042+ 68E5              // sp@      -- a
1043+ 68E5              // returns on top of stack the value of SP before execution
1044+ 68E5                              New_Def SPFETCH, "SP@", is_code, is_normal
1044+ 68E5             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1044+ 68E5             >
1044+ 68E5             >                // dummy db directives used to calculate length of namec
1044+ 68E5 53 50 40    >                db      "SP@"
1044+ 68E8             >len_NFA         defl    $ - temp_NFA
1044+ 68E8             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1044+ 68E5             >
1044+ 68E5 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1044+ 68E6 53 50 40    >                db      "SP@"               // name string in 7-bit ascii, but
1044+ 68E9             >                org     $-1                 // alter last byte of Name just above to set
1044+ 68E8 C0          >                db      {b $} | END_BIT     // msb as name end
1044+ 68E9             >
1044+ 68E9 D2 68       >                dw      last_NFA            // Link to previous definition Name
1044+ 68EB             >SPFETCH:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1044+ 68EB ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1044+ 68EB             >                else
1044+ 68EB ED 68       >                dw      $ + 2   ; ok        // is pointed by CFA
1044+ 68ED             >                endif           ; ok        // for other definitions it "points" the correct handler
1044+ 68ED             >                // Use of "; ok" to suppress "warning[fwdref]"
1044+ 68ED             >
1044+ 68ED             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1045+ 68ED
1046+ 68ED 21 00 00                     ld      hl, 0
1047+ 68F0 39                           add     hl, sp
1048+ 68F1
1049+ 68F1                              psh1
1049+ 68F1 E5          >                push    hl
1049+ 68F2 DD E9       >                jp      (ix)
1050+ 68F4
1051+ 68F4              //  ______________________________________________________________________
1052+ 68F4              //
1053+ 68F4              // sp!      a --
1054+ 68F4              // restore SP to the initial value passed
1055+ 68F4              // normally it is S0, i.e. the word at offset 6 and 7 of user variabiles area.
1056+ 68F4                              New_Def SPSTORE, "SP!", is_code, is_normal
1056+ 68F4             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1056+ 68F4             >
1056+ 68F4             >                // dummy db directives used to calculate length of namec
1056+ 68F4 53 50 21    >                db      "SP!"
1056+ 68F7             >len_NFA         defl    $ - temp_NFA
1056+ 68F7             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1056+ 68F4             >
1056+ 68F4 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1056+ 68F5 53 50 21    >                db      "SP!"               // name string in 7-bit ascii, but
1056+ 68F8             >                org     $-1                 // alter last byte of Name just above to set
1056+ 68F7 A1          >                db      {b $} | END_BIT     // msb as name end
1056+ 68F8             >
1056+ 68F8 E5 68       >                dw      last_NFA            // Link to previous definition Name
1056+ 68FA             >SPSTORE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1056+ 68FA ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1056+ 68FA             >                else
1056+ 68FA FC 68       >                dw      $ + 2   ; ok        // is pointed by CFA
1056+ 68FC             >                endif           ; ok        // for other definitions it "points" the correct handler
1056+ 68FC             >                // Use of "; ok" to suppress "warning[fwdref]"
1056+ 68FC             >
1056+ 68FC             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1057+ 68FC E1                           pop     hl
1058+ 68FD F9                           ld      sp, hl
1059+ 68FE
1060+ 68FE                              next
1060+ 68FE DD E9       >                jp      (ix)
1061+ 6900
1062+ 6900              //  ______________________________________________________________________
1063+ 6900              //
1064+ 6900              // rp@      -- a
1065+ 6900              // returns on top of stack the value of Return-Pointer
1066+ 6900                              New_Def RPFETCH, "RP@", is_code, is_normal
1066+ 6900             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1066+ 6900             >
1066+ 6900             >                // dummy db directives used to calculate length of namec
1066+ 6900 52 50 40    >                db      "RP@"
1066+ 6903             >len_NFA         defl    $ - temp_NFA
1066+ 6903             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1066+ 6900             >
1066+ 6900 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1066+ 6901 52 50 40    >                db      "RP@"               // name string in 7-bit ascii, but
1066+ 6904             >                org     $-1                 // alter last byte of Name just above to set
1066+ 6903 C0          >                db      {b $} | END_BIT     // msb as name end
1066+ 6904             >
1066+ 6904 F4 68       >                dw      last_NFA            // Link to previous definition Name
1066+ 6906             >RPFETCH:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1066+ 6906 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1066+ 6906             >                else
1066+ 6906 08 69       >                dw      $ + 2   ; ok        // is pointed by CFA
1066+ 6908             >                endif           ; ok        // for other definitions it "points" the correct handler
1066+ 6908             >                // Use of "; ok" to suppress "warning[fwdref]"
1066+ 6908             >
1066+ 6908             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1067+ 6908
1068+ 6908                              ldhlrp
1068+ 6908 2A 96 63    >                ld      hl,(RP_Pointer)
1069+ 690B
1070+ 690B                              psh1
1070+ 690B E5          >                push    hl
1070+ 690C DD E9       >                jp      (ix)
1071+ 690E
1072+ 690E              //  ______________________________________________________________________
1073+ 690E              //
1074+ 690E              // rp!      a --
1075+ 690E              // restore RP to the initial value passed
1076+ 690E              // normally it is R0 @, i.e. the word at offset 8 of user variabiles area.
1077+ 690E                              New_Def RPSTORE, "RP!", is_code, is_normal
1077+ 690E             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1077+ 690E             >
1077+ 690E             >                // dummy db directives used to calculate length of namec
1077+ 690E 52 50 21    >                db      "RP!"
1077+ 6911             >len_NFA         defl    $ - temp_NFA
1077+ 6911             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1077+ 690E             >
1077+ 690E 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1077+ 690F 52 50 21    >                db      "RP!"               // name string in 7-bit ascii, but
1077+ 6912             >                org     $-1                 // alter last byte of Name just above to set
1077+ 6911 A1          >                db      {b $} | END_BIT     // msb as name end
1077+ 6912             >
1077+ 6912 00 69       >                dw      last_NFA            // Link to previous definition Name
1077+ 6914             >RPSTORE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1077+ 6914 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1077+ 6914             >                else
1077+ 6914 16 69       >                dw      $ + 2   ; ok        // is pointed by CFA
1077+ 6916             >                endif           ; ok        // for other definitions it "points" the correct handler
1077+ 6916             >                // Use of "; ok" to suppress "warning[fwdref]"
1077+ 6916             >
1077+ 6916             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1078+ 6916 E1                           pop     hl
1079+ 6917                              ldrphl
1079+ 6917 22 96 63    >                ld      (RP_Pointer),hl
1080+ 691A
1081+ 691A                              next
1081+ 691A DD E9       >                jp      (ix)
1082+ 691C
1083+ 691C              //  ______________________________________________________________________
1084+ 691C              //
1085+ 691C              // exit      --
1086+ 691C              // exits back to the caller word
1087+ 691C                              New_Def EXIT, "EXIT", is_code, is_normal
1087+ 691C             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1087+ 691C             >
1087+ 691C             >                // dummy db directives used to calculate length of namec
1087+ 691C 45 58 49 54 >                db      "EXIT"
1087+ 6920             >len_NFA         defl    $ - temp_NFA
1087+ 6920             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1087+ 691C             >
1087+ 691C 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1087+ 691D 45 58 49 54 >                db      "EXIT"               // name string in 7-bit ascii, but
1087+ 6921             >                org     $-1                 // alter last byte of Name just above to set
1087+ 6920 D4          >                db      {b $} | END_BIT     // msb as name end
1087+ 6921             >
1087+ 6921 0E 69       >                dw      last_NFA            // Link to previous definition Name
1087+ 6923             >EXIT:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1087+ 6923 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1087+ 6923             >                else
1087+ 6923 25 69       >                dw      $ + 2   ; ok        // is pointed by CFA
1087+ 6925             >                endif           ; ok        // for other definitions it "points" the correct handler
1087+ 6925             >                // Use of "; ok" to suppress "warning[fwdref]"
1087+ 6925             >
1087+ 6925             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1088+ 6925                              ldhlrp                      // Get Return Stack Pointer
1088+ 6925 2A 96 63    >                ld      hl,(RP_Pointer)
1089+ 6928 4E                           ld      c, (hl)             // pop Instruction Pointer
1090+ 6929 23                           inc     hl                  // from Return Stack
1091+ 692A 46                           ld      b, (hl)
1092+ 692B 23                           inc     hl
1093+ 692C                              ldrphl                      // Set Return Stack Pointer
1093+ 692C 22 96 63    >                ld      (RP_Pointer),hl
1094+ 692F                              next
1094+ 692F DD E9       >                jp      (ix)
1095+ 6931
1096+ 6931              //  ______________________________________________________________________
1097+ 6931              //
1098+ 6931              // lastl      --
1099+ 6931              // exits back to the caller word
1100+ 6931              //              New_Def EXIT, "LASTL", is_code, is_normal
1101+ 6931              //              ldhlrp                      // Get Return Stack Pointer
1102+ 6931              //              ld      e, (hl)             // pop Instruction Pointer
1103+ 6931              //              inc     hl                  // from Return Stack
1104+ 6931              //              ld      d, (hl)
1105+ 6931              //              inc     hl
1106+ 6931              //              ld      (hl), e
1107+ 6931              //              inc     hl
1108+ 6931              //              ld      (hl), d
1109+ 6931              //              next
1110+ 6931
1111+ 6931              //  ______________________________________________________________________
1112+ 6931              //
1113+ 6931              // (leave)        --
1114+ 6931              // compiled by LEAVE
1115+ 6931              // this forces to exit from loop and jump past
1116+ 6931                              New_Def C_LEAVE, "(LEAVE)", is_code, is_normal
1116+ 6931             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1116+ 6931             >
1116+ 6931             >                // dummy db directives used to calculate length of namec
1116+ 6931 28 4C 45 41 >                db      "(LEAVE)"
1116+ 6935 56 45 29    >
1116+ 6938             >len_NFA         defl    $ - temp_NFA
1116+ 6938             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1116+ 6931             >
1116+ 6931 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1116+ 6932 28 4C 45 41 >                db      "(LEAVE)"               // name string in 7-bit ascii, but
1116+ 6936 56 45 29    >
1116+ 6939             >                org     $-1                 // alter last byte of Name just above to set
1116+ 6938 A9          >                db      {b $} | END_BIT     // msb as name end
1116+ 6939             >
1116+ 6939 1C 69       >                dw      last_NFA            // Link to previous definition Name
1116+ 693B             >C_LEAVE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1116+ 693B ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1116+ 693B             >                else
1116+ 693B 3D 69       >                dw      $ + 2   ; ok        // is pointed by CFA
1116+ 693D             >                endif           ; ok        // for other definitions it "points" the correct handler
1116+ 693D             >                // Use of "; ok" to suppress "warning[fwdref]"
1116+ 693D             >
1116+ 693D             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1117+ 693D
1118+ 693D                              ldhlrp
1118+ 693D 2A 96 63    >                ld      hl,(RP_Pointer)
1119+ 6940 11 04 00                     ld      de, 4
1120+ 6943 19                           add     hl, de
1121+ 6944                              ldrphl
1121+ 6944 22 96 63    >                ld      (RP_Pointer),hl
1122+ 6947
1123+ 6947 C3 CE 63                     jp      Branch_Ptr       // perform branch consuming following cell
1124+ 694A                              next
1124+ 694A DD E9       >                jp      (ix)
1125+ 694C
1126+ 694C              //  ______________________________________________________________________
1127+ 694C              //
1128+ 694C              // >r      n --
1129+ 694C              // pop from calculator-stack and push into return-stack
1130+ 694C                              New_Def TO_R, ">R", is_code, is_normal
1130+ 694C             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1130+ 694C             >
1130+ 694C             >                // dummy db directives used to calculate length of namec
1130+ 694C 3E 52       >                db      ">R"
1130+ 694E             >len_NFA         defl    $ - temp_NFA
1130+ 694E             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1130+ 694C             >
1130+ 694C 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1130+ 694D 3E 52       >                db      ">R"               // name string in 7-bit ascii, but
1130+ 694F             >                org     $-1                 // alter last byte of Name just above to set
1130+ 694E D2          >                db      {b $} | END_BIT     // msb as name end
1130+ 694F             >
1130+ 694F 31 69       >                dw      last_NFA            // Link to previous definition Name
1130+ 6951             >TO_R:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1130+ 6951 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1130+ 6951             >                else
1130+ 6951 53 69       >                dw      $ + 2   ; ok        // is pointed by CFA
1130+ 6953             >                endif           ; ok        // for other definitions it "points" the correct handler
1130+ 6953             >                // Use of "; ok" to suppress "warning[fwdref]"
1130+ 6953             >
1130+ 6953             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1131+ 6953 D1                           pop     de
1132+ 6954                              ldhlrp
1132+ 6954 2A 96 63    >                ld      hl,(RP_Pointer)
1133+ 6957 2B                           dec     hl
1134+ 6958 72                           ld      (hl), d             // store current TOS
1135+ 6959 2B                           dec     hl                  // to Return Stack
1136+ 695A 73                           ld      (hl), e
1137+ 695B                              ldrphl
1137+ 695B 22 96 63    >                ld      (RP_Pointer),hl
1138+ 695E
1139+ 695E                              next
1139+ 695E DD E9       >                jp      (ix)
1140+ 6960
1141+ 6960              //  ______________________________________________________________________
1142+ 6960              //
1143+ 6960              // r>      -- n
1144+ 6960              // pop from return-stack and push into calculator-stack
1145+ 6960                              New_Def R_TO, "R>", is_code, is_normal
1145+ 6960             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1145+ 6960             >
1145+ 6960             >                // dummy db directives used to calculate length of namec
1145+ 6960 52 3E       >                db      "R>"
1145+ 6962             >len_NFA         defl    $ - temp_NFA
1145+ 6962             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1145+ 6960             >
1145+ 6960 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1145+ 6961 52 3E       >                db      "R>"               // name string in 7-bit ascii, but
1145+ 6963             >                org     $-1                 // alter last byte of Name just above to set
1145+ 6962 BE          >                db      {b $} | END_BIT     // msb as name end
1145+ 6963             >
1145+ 6963 4C 69       >                dw      last_NFA            // Link to previous definition Name
1145+ 6965             >R_TO:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1145+ 6965 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1145+ 6965             >                else
1145+ 6965 67 69       >                dw      $ + 2   ; ok        // is pointed by CFA
1145+ 6967             >                endif           ; ok        // for other definitions it "points" the correct handler
1145+ 6967             >                // Use of "; ok" to suppress "warning[fwdref]"
1145+ 6967             >
1145+ 6967             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1146+ 6967
1147+ 6967                              ldhlrp
1147+ 6967 2A 96 63    >                ld      hl,(RP_Pointer)
1148+ 696A 5E                           ld      e, (hl)             // retrieve from Return Stack
1149+ 696B 23                           inc     hl
1150+ 696C 56                           ld      d, (hl)
1151+ 696D 23                           inc     hl
1152+ 696E                              ldrphl
1152+ 696E 22 96 63    >                ld      (RP_Pointer),hl
1153+ 6971 D5                           push    de
1154+ 6972                              next
1154+ 6972 DD E9       >                jp      (ix)
1155+ 6974
1156+ 6974              //  ______________________________________________________________________
1157+ 6974              //
1158+ 6974              // r            -- n
1159+ 6974              // return on top of stack the value of top of return-stack
1160+ 6974              // Since this is the same as I, we alter R's CFA to jump there
1161+ 6974                              New_Def R_OP, "R@", I_Ptr, is_normal
1161+ 6974             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1161+ 6974             >
1161+ 6974             >                // dummy db directives used to calculate length of namec
1161+ 6974 52 40       >                db      "R@"
1161+ 6976             >len_NFA         defl    $ - temp_NFA
1161+ 6976             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1161+ 6974             >
1161+ 6974 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1161+ 6975 52 40       >                db      "R@"               // name string in 7-bit ascii, but
1161+ 6977             >                org     $-1                 // alter last byte of Name just above to set
1161+ 6976 C0          >                db      {b $} | END_BIT     // msb as name end
1161+ 6977             >
1161+ 6977 60 69       >                dw      last_NFA            // Link to previous definition Name
1161+ 6979             >R_OP:          if I_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1161+ 6979 78 64       >                dw      I_Ptr ; ok        // for primitive definitions  actual code
1161+ 697B             >                else
1161+ 697B ~           >                dw      $ + 2   ; ok        // is pointed by CFA
1161+ 697B             >                endif           ; ok        // for other definitions it "points" the correct handler
1161+ 697B             >                // Use of "; ok" to suppress "warning[fwdref]"
1161+ 697B             >
1161+ 697B             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1162+ 697B
1163+ 697B              //  ______________________________________________________________________
1164+ 697B              //
1165+ 697B              // r            -- n
1166+ 697B              // return on top of stack the value of top of return-stack
1167+ 697B              // Since this is the same as I, we alter R's CFA to jump there
1168+ 697B                              New_Def R_OLD, "R", I_Ptr, is_normal
1168+ 697B             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1168+ 697B             >
1168+ 697B             >                // dummy db directives used to calculate length of namec
1168+ 697B 52          >                db      "R"
1168+ 697C             >len_NFA         defl    $ - temp_NFA
1168+ 697C             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1168+ 697B             >
1168+ 697B 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1168+ 697C 52          >                db      "R"               // name string in 7-bit ascii, but
1168+ 697D             >                org     $-1                 // alter last byte of Name just above to set
1168+ 697C D2          >                db      {b $} | END_BIT     // msb as name end
1168+ 697D             >
1168+ 697D 74 69       >                dw      last_NFA            // Link to previous definition Name
1168+ 697F             >R_OLD:          if I_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1168+ 697F 78 64       >                dw      I_Ptr ; ok        // for primitive definitions  actual code
1168+ 6981             >                else
1168+ 6981 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
1168+ 6981             >                endif           ; ok        // for other definitions it "points" the correct handler
1168+ 6981             >                // Use of "; ok" to suppress "warning[fwdref]"
1168+ 6981             >
1168+ 6981             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1169+ 6981
1170+ 6981              //  ______________________________________________________________________
1171+ 6981              //
1172+ 6981              // 0=           n -- f
1173+ 6981              // true (non zero) if n is zero, false (0) elsewere
1174+ 6981                              New_Def ZEQUAL, "0=", is_code, is_normal
1174+ 6981             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1174+ 6981             >
1174+ 6981             >                // dummy db directives used to calculate length of namec
1174+ 6981 30 3D       >                db      "0="
1174+ 6983             >len_NFA         defl    $ - temp_NFA
1174+ 6983             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1174+ 6981             >
1174+ 6981 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1174+ 6982 30 3D       >                db      "0="               // name string in 7-bit ascii, but
1174+ 6984             >                org     $-1                 // alter last byte of Name just above to set
1174+ 6983 BD          >                db      {b $} | END_BIT     // msb as name end
1174+ 6984             >
1174+ 6984 7B 69       >                dw      last_NFA            // Link to previous definition Name
1174+ 6986             >ZEQUAL:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1174+ 6986 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1174+ 6986             >                else
1174+ 6986 88 69       >                dw      $ + 2   ; ok        // is pointed by CFA
1174+ 6988             >                endif           ; ok        // for other definitions it "points" the correct handler
1174+ 6988             >                // Use of "; ok" to suppress "warning[fwdref]"
1174+ 6988             >
1174+ 6988             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1175+ 6988              Zero_Equal:
1176+ 6988 E1                           pop     hl
1177+ 6989 7D                           ld      a, l
1178+ 698A B4                           or      h
1179+ 698B 21 00 00                     ld      hl, FALSE_FLAG
1180+ 698E 20 01                        jr      nz, ZEqual_Skip
1181+ 6990 2B                               dec     hl
1182+ 6991              ZEqual_Skip:
1183+ 6991                              psh1
1183+ 6991 E5          >                push    hl
1183+ 6992 DD E9       >                jp      (ix)
1184+ 6994
1185+ 6994              //  ______________________________________________________________________
1186+ 6994              //
1187+ 6994              // not         a1 -- a2
1188+ 6994              // increment by 2 top of stack
1189+ 6994                              New_Def NOT_OP, "NOT", Zero_Equal, is_normal
1189+ 6994             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1189+ 6994             >
1189+ 6994             >                // dummy db directives used to calculate length of namec
1189+ 6994 4E 4F 54    >                db      "NOT"
1189+ 6997             >len_NFA         defl    $ - temp_NFA
1189+ 6997             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1189+ 6994             >
1189+ 6994 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1189+ 6995 4E 4F 54    >                db      "NOT"               // name string in 7-bit ascii, but
1189+ 6998             >                org     $-1                 // alter last byte of Name just above to set
1189+ 6997 D4          >                db      {b $} | END_BIT     // msb as name end
1189+ 6998             >
1189+ 6998 81 69       >                dw      last_NFA            // Link to previous definition Name
1189+ 699A             >NOT_OP:          if Zero_Equal != 0 ; ok        // This is the start address of the direct jp(hl)
1189+ 699A 88 69       >                dw      Zero_Equal ; ok        // for primitive definitions  actual code
1189+ 699C             >                else
1189+ 699C ~           >                dw      $ + 2   ; ok        // is pointed by CFA
1189+ 699C             >                endif           ; ok        // for other definitions it "points" the correct handler
1189+ 699C             >                // Use of "; ok" to suppress "warning[fwdref]"
1189+ 699C             >
1189+ 699C             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1190+ 699C
1191+ 699C              //  ______________________________________________________________________
1192+ 699C              //
1193+ 699C              // 0<           n -- f
1194+ 699C              // true (non zero) if n is less than zero, false (0) elsewere
1195+ 699C                              New_Def ZLESS, "0<", is_code, is_normal
1195+ 699C             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1195+ 699C             >
1195+ 699C             >                // dummy db directives used to calculate length of namec
1195+ 699C 30 3C       >                db      "0<"
1195+ 699E             >len_NFA         defl    $ - temp_NFA
1195+ 699E             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1195+ 699C             >
1195+ 699C 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1195+ 699D 30 3C       >                db      "0<"               // name string in 7-bit ascii, but
1195+ 699F             >                org     $-1                 // alter last byte of Name just above to set
1195+ 699E BC          >                db      {b $} | END_BIT     // msb as name end
1195+ 699F             >
1195+ 699F 94 69       >                dw      last_NFA            // Link to previous definition Name
1195+ 69A1             >ZLESS:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1195+ 69A1 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1195+ 69A1             >                else
1195+ 69A1 A3 69       >                dw      $ + 2   ; ok        // is pointed by CFA
1195+ 69A3             >                endif           ; ok        // for other definitions it "points" the correct handler
1195+ 69A3             >                // Use of "; ok" to suppress "warning[fwdref]"
1195+ 69A3             >
1195+ 69A3             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1196+ 69A3 E1                           pop     hl
1197+ 69A4 29                           add     hl, hl
1198+ 69A5 21 00 00                     ld      hl, 0
1199+ 69A8 30 01                        jr      nc, ZLess_Skip
1200+ 69AA 2B                               dec     hl
1201+ 69AB              ZLess_Skip:
1202+ 69AB                              psh1
1202+ 69AB E5          >                push    hl
1202+ 69AC DD E9       >                jp      (ix)
1203+ 69AE
1204+ 69AE              //  ______________________________________________________________________
1205+ 69AE              //
1206+ 69AE              // 0>           n -- f
1207+ 69AE              // true (non zero) if n is less than zero, false (0) elsewere
1208+ 69AE                              New_Def ZGREATER, "0>", is_code, is_normal
1208+ 69AE             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1208+ 69AE             >
1208+ 69AE             >                // dummy db directives used to calculate length of namec
1208+ 69AE 30 3E       >                db      "0>"
1208+ 69B0             >len_NFA         defl    $ - temp_NFA
1208+ 69B0             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1208+ 69AE             >
1208+ 69AE 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1208+ 69AF 30 3E       >                db      "0>"               // name string in 7-bit ascii, but
1208+ 69B1             >                org     $-1                 // alter last byte of Name just above to set
1208+ 69B0 BE          >                db      {b $} | END_BIT     // msb as name end
1208+ 69B1             >
1208+ 69B1 9C 69       >                dw      last_NFA            // Link to previous definition Name
1208+ 69B3             >ZGREATER:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1208+ 69B3 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1208+ 69B3             >                else
1208+ 69B3 B5 69       >                dw      $ + 2   ; ok        // is pointed by CFA
1208+ 69B5             >                endif           ; ok        // for other definitions it "points" the correct handler
1208+ 69B5             >                // Use of "; ok" to suppress "warning[fwdref]"
1208+ 69B5             >
1208+ 69B5             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1209+ 69B5 E1                           pop     hl
1210+ 69B6 7D                           ld      a, l
1211+ 69B7 B4                           or      h
1212+ 69B8 29                           add     hl, hl
1213+ 69B9 21 00 00                     ld      hl, FALSE_FLAG
1214+ 69BC 38 04                        jr      c, ZGreater_Skip
1215+ 69BE A7                               and     a
1216+ 69BF 28 01                            jr      z, ZGreater_Skip
1217+ 69C1 2B                                   dec     hl
1218+ 69C2              ZGreater_Skip:
1219+ 69C2                              psh1
1219+ 69C2 E5          >                push    hl
1219+ 69C3 DD E9       >                jp      (ix)
1220+ 69C5
1221+ 69C5              //  ______________________________________________________________________
1222+ 69C5              //
1223+ 69C5              // +            n1 n2 -- n3
1224+ 69C5              // returns the unsigned sum of two top values
1225+ 69C5                              New_Def PLUS, "+", is_code, is_normal
1225+ 69C5             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1225+ 69C5             >
1225+ 69C5             >                // dummy db directives used to calculate length of namec
1225+ 69C5 2B          >                db      "+"
1225+ 69C6             >len_NFA         defl    $ - temp_NFA
1225+ 69C6             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1225+ 69C5             >
1225+ 69C5 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1225+ 69C6 2B          >                db      "+"               // name string in 7-bit ascii, but
1225+ 69C7             >                org     $-1                 // alter last byte of Name just above to set
1225+ 69C6 AB          >                db      {b $} | END_BIT     // msb as name end
1225+ 69C7             >
1225+ 69C7 AE 69       >                dw      last_NFA            // Link to previous definition Name
1225+ 69C9             >PLUS:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1225+ 69C9 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1225+ 69C9             >                else
1225+ 69C9 CB 69       >                dw      $ + 2   ; ok        // is pointed by CFA
1225+ 69CB             >                endif           ; ok        // for other definitions it "points" the correct handler
1225+ 69CB             >                // Use of "; ok" to suppress "warning[fwdref]"
1225+ 69CB             >
1225+ 69CB             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1226+ 69CB E1                           pop     hl
1227+ 69CC D1                           pop     de
1228+ 69CD 19                           add     hl, de
1229+ 69CE
1230+ 69CE                              psh1
1230+ 69CE E5          >                push    hl
1230+ 69CF DD E9       >                jp      (ix)
1231+ 69D1
1232+ 69D1
1233+ 69D1              //  ______________________________________________________________________
1234+ 69D1              //
1235+ 69D1              // d+           d1 d2 -- d3
1236+ 69D1              // returns the unsigned sum of two top double-numbers
1237+ 69D1              //      d2  d1
1238+ 69D1              //      h l h l
1239+ 69D1              // SP   LHEDLHED
1240+ 69D1              // SP  +01234567
1241+ 69D1                              New_Def DPLUS, "D+", is_code, is_normal
1241+ 69D1             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1241+ 69D1             >
1241+ 69D1             >                // dummy db directives used to calculate length of namec
1241+ 69D1 44 2B       >                db      "D+"
1241+ 69D3             >len_NFA         defl    $ - temp_NFA
1241+ 69D3             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1241+ 69D1             >
1241+ 69D1 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1241+ 69D2 44 2B       >                db      "D+"               // name string in 7-bit ascii, but
1241+ 69D4             >                org     $-1                 // alter last byte of Name just above to set
1241+ 69D3 AB          >                db      {b $} | END_BIT     // msb as name end
1241+ 69D4             >
1241+ 69D4 C5 69       >                dw      last_NFA            // Link to previous definition Name
1241+ 69D6             >DPLUS:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1241+ 69D6 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1241+ 69D6             >                else
1241+ 69D6 D8 69       >                dw      $ + 2   ; ok        // is pointed by CFA
1241+ 69D8             >                endif           ; ok        // for other definitions it "points" the correct handler
1241+ 69D8             >                // Use of "; ok" to suppress "warning[fwdref]"
1241+ 69D8             >
1241+ 69D8             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1242+ 69D8 D9                           exx
1243+ 69D9 C1                           pop     bc                  // bc := d2.H
1244+ 69DA D1                           pop     de
1245+ 69DB E1                           pop     hl                  // hl := d2.L
1246+ 69DC E3                           ex      (sp), hl
1247+ 69DD 19                           add     hl, de              // hl := d2.L + d1.L
1248+ 69DE E3                           ex      (sp), hl
1249+ 69DF ED 4A                        adc     hl, bc              // d1.H + d2.H
1250+ 69E1 E5                           push    hl
1251+ 69E2 D9                           exx
1252+ 69E3                              next
1252+ 69E3 DD E9       >                jp      (ix)
1253+ 69E5
1254+ 69E5              //  ______________________________________________________________________
1255+ 69E5              //
1256+ 69E5              // 1+           n1 -- n2
1257+ 69E5              // increment by 1 top of stack
1258+ 69E5                              New_Def ONE_PLUS, "1+", is_code, is_normal
1258+ 69E5             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1258+ 69E5             >
1258+ 69E5             >                // dummy db directives used to calculate length of namec
1258+ 69E5 31 2B       >                db      "1+"
1258+ 69E7             >len_NFA         defl    $ - temp_NFA
1258+ 69E7             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1258+ 69E5             >
1258+ 69E5 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1258+ 69E6 31 2B       >                db      "1+"               // name string in 7-bit ascii, but
1258+ 69E8             >                org     $-1                 // alter last byte of Name just above to set
1258+ 69E7 AB          >                db      {b $} | END_BIT     // msb as name end
1258+ 69E8             >
1258+ 69E8 D1 69       >                dw      last_NFA            // Link to previous definition Name
1258+ 69EA             >ONE_PLUS:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1258+ 69EA ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1258+ 69EA             >                else
1258+ 69EA EC 69       >                dw      $ + 2   ; ok        // is pointed by CFA
1258+ 69EC             >                endif           ; ok        // for other definitions it "points" the correct handler
1258+ 69EC             >                // Use of "; ok" to suppress "warning[fwdref]"
1258+ 69EC             >
1258+ 69EC             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1259+ 69EC E1                           pop     hl
1260+ 69ED 23                           inc     hl
1261+ 69EE
1262+ 69EE                              psh1
1262+ 69EE E5          >                push    hl
1262+ 69EF DD E9       >                jp      (ix)
1263+ 69F1
1264+ 69F1              //  ______________________________________________________________________
1265+ 69F1              //
1266+ 69F1              // 1-           n1 -- n2
1267+ 69F1              // decrement by 1 top of stack
1268+ 69F1                              New_Def ONE_SUBTRACT, "1-", is_code, is_normal
1268+ 69F1             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1268+ 69F1             >
1268+ 69F1             >                // dummy db directives used to calculate length of namec
1268+ 69F1 31 2D       >                db      "1-"
1268+ 69F3             >len_NFA         defl    $ - temp_NFA
1268+ 69F3             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1268+ 69F1             >
1268+ 69F1 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1268+ 69F2 31 2D       >                db      "1-"               // name string in 7-bit ascii, but
1268+ 69F4             >                org     $-1                 // alter last byte of Name just above to set
1268+ 69F3 AD          >                db      {b $} | END_BIT     // msb as name end
1268+ 69F4             >
1268+ 69F4 E5 69       >                dw      last_NFA            // Link to previous definition Name
1268+ 69F6             >ONE_SUBTRACT:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1268+ 69F6 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1268+ 69F6             >                else
1268+ 69F6 F8 69       >                dw      $ + 2   ; ok        // is pointed by CFA
1268+ 69F8             >                endif           ; ok        // for other definitions it "points" the correct handler
1268+ 69F8             >                // Use of "; ok" to suppress "warning[fwdref]"
1268+ 69F8             >
1268+ 69F8             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1269+ 69F8 E1                           pop     hl
1270+ 69F9 2B                           dec     hl
1271+ 69FA
1272+ 69FA                              psh1
1272+ 69FA E5          >                push    hl
1272+ 69FB DD E9       >                jp      (ix)
1273+ 69FD
1274+ 69FD              //  ______________________________________________________________________
1275+ 69FD              //
1276+ 69FD              // 2+           n1 -- n2
1277+ 69FD              // increment by 2 top of stack
1278+ 69FD                              New_Def TWO_PLUS, "2+", is_code, is_normal
1278+ 69FD             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1278+ 69FD             >
1278+ 69FD             >                // dummy db directives used to calculate length of namec
1278+ 69FD 32 2B       >                db      "2+"
1278+ 69FF             >len_NFA         defl    $ - temp_NFA
1278+ 69FF             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1278+ 69FD             >
1278+ 69FD 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1278+ 69FE 32 2B       >                db      "2+"               // name string in 7-bit ascii, but
1278+ 6A00             >                org     $-1                 // alter last byte of Name just above to set
1278+ 69FF AB          >                db      {b $} | END_BIT     // msb as name end
1278+ 6A00             >
1278+ 6A00 F1 69       >                dw      last_NFA            // Link to previous definition Name
1278+ 6A02             >TWO_PLUS:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1278+ 6A02 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1278+ 6A02             >                else
1278+ 6A02 04 6A       >                dw      $ + 2   ; ok        // is pointed by CFA
1278+ 6A04             >                endif           ; ok        // for other definitions it "points" the correct handler
1278+ 6A04             >                // Use of "; ok" to suppress "warning[fwdref]"
1278+ 6A04             >
1278+ 6A04             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1279+ 6A04              Two_Plus:
1280+ 6A04 E1                           pop     hl
1281+ 6A05 23                           inc     hl
1282+ 6A06 23                           inc     hl
1283+ 6A07
1284+ 6A07                              psh1
1284+ 6A07 E5          >                push    hl
1284+ 6A08 DD E9       >                jp      (ix)
1285+ 6A0A
1286+ 6A0A              //  ______________________________________________________________________
1287+ 6A0A              //
1288+ 6A0A              // cell+        a1 -- a2
1289+ 6A0A              // increment by 2 top of stack
1290+ 6A0A                              New_Def CELL_PLUS, "CELL+", Two_Plus, is_normal
1290+ 6A0A             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1290+ 6A0A             >
1290+ 6A0A             >                // dummy db directives used to calculate length of namec
1290+ 6A0A 43 45 4C 4C >                db      "CELL+"
1290+ 6A0E 2B          >
1290+ 6A0F             >len_NFA         defl    $ - temp_NFA
1290+ 6A0F             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1290+ 6A0A             >
1290+ 6A0A 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1290+ 6A0B 43 45 4C 4C >                db      "CELL+"               // name string in 7-bit ascii, but
1290+ 6A0F 2B          >
1290+ 6A10             >                org     $-1                 // alter last byte of Name just above to set
1290+ 6A0F AB          >                db      {b $} | END_BIT     // msb as name end
1290+ 6A10             >
1290+ 6A10 FD 69       >                dw      last_NFA            // Link to previous definition Name
1290+ 6A12             >CELL_PLUS:          if Two_Plus != 0 ; ok        // This is the start address of the direct jp(hl)
1290+ 6A12 04 6A       >                dw      Two_Plus ; ok        // for primitive definitions  actual code
1290+ 6A14             >                else
1290+ 6A14 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
1290+ 6A14             >                endif           ; ok        // for other definitions it "points" the correct handler
1290+ 6A14             >                // Use of "; ok" to suppress "warning[fwdref]"
1290+ 6A14             >
1290+ 6A14             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1291+ 6A14
1292+ 6A14              //  ______________________________________________________________________
1293+ 6A14              //
1294+ 6A14              // align        a1 -- a2
1295+ 6A14              // align memory : not used
1296+ 6A14              //              New_Def ALIGN_ADDR, "ALIGN", is_code, is_normal
1297+ 6A14              //            next
1298+ 6A14
1299+ 6A14              //  ______________________________________________________________________
1300+ 6A14              //
1301+ 6A14              // cell-        a1 -- a2
1302+ 6A14              // decrement by 2 top of stack
1303+ 6A14                              New_Def CELL_MINUS, "CELL-", is_code, is_normal
1303+ 6A14             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1303+ 6A14             >
1303+ 6A14             >                // dummy db directives used to calculate length of namec
1303+ 6A14 43 45 4C 4C >                db      "CELL-"
1303+ 6A18 2D          >
1303+ 6A19             >len_NFA         defl    $ - temp_NFA
1303+ 6A19             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1303+ 6A14             >
1303+ 6A14 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1303+ 6A15 43 45 4C 4C >                db      "CELL-"               // name string in 7-bit ascii, but
1303+ 6A19 2D          >
1303+ 6A1A             >                org     $-1                 // alter last byte of Name just above to set
1303+ 6A19 AD          >                db      {b $} | END_BIT     // msb as name end
1303+ 6A1A             >
1303+ 6A1A 0A 6A       >                dw      last_NFA            // Link to previous definition Name
1303+ 6A1C             >CELL_MINUS:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1303+ 6A1C ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1303+ 6A1C             >                else
1303+ 6A1C 1E 6A       >                dw      $ + 2   ; ok        // is pointed by CFA
1303+ 6A1E             >                endif           ; ok        // for other definitions it "points" the correct handler
1303+ 6A1E             >                // Use of "; ok" to suppress "warning[fwdref]"
1303+ 6A1E             >
1303+ 6A1E             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1304+ 6A1E              CellMinus:
1305+ 6A1E E1                           pop     hl
1306+ 6A1F 2B                           dec     hl
1307+ 6A20 2B                           dec     hl
1308+ 6A21 E5                           push    hl
1309+ 6A22                              next
1309+ 6A22 DD E9       >                jp      (ix)
1310+ 6A24
1311+ 6A24              //  ______________________________________________________________________
1312+ 6A24              //
1313+ 6A24              // 2-           a1 -- a2
1314+ 6A24              // decrement by 2 top of stack
1315+ 6A24                              New_Def TWO_MINUS, "2-", CellMinus, is_normal
1315+ 6A24             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1315+ 6A24             >
1315+ 6A24             >                // dummy db directives used to calculate length of namec
1315+ 6A24 32 2D       >                db      "2-"
1315+ 6A26             >len_NFA         defl    $ - temp_NFA
1315+ 6A26             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1315+ 6A24             >
1315+ 6A24 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1315+ 6A25 32 2D       >                db      "2-"               // name string in 7-bit ascii, but
1315+ 6A27             >                org     $-1                 // alter last byte of Name just above to set
1315+ 6A26 AD          >                db      {b $} | END_BIT     // msb as name end
1315+ 6A27             >
1315+ 6A27 14 6A       >                dw      last_NFA            // Link to previous definition Name
1315+ 6A29             >TWO_MINUS:          if CellMinus != 0 ; ok        // This is the start address of the direct jp(hl)
1315+ 6A29 1E 6A       >                dw      CellMinus ; ok        // for primitive definitions  actual code
1315+ 6A2B             >                else
1315+ 6A2B ~           >                dw      $ + 2   ; ok        // is pointed by CFA
1315+ 6A2B             >                endif           ; ok        // for other definitions it "points" the correct handler
1315+ 6A2B             >                // Use of "; ok" to suppress "warning[fwdref]"
1315+ 6A2B             >
1315+ 6A2B             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1316+ 6A2B
1317+ 6A2B              //  ______________________________________________________________________
1318+ 6A2B              //
1319+ 6A2B              // negate        n1 -- n2
1320+ 6A2B              // change the sign of number
1321+ 6A2B                              New_Def MINUS, "NEGATE", is_code, is_normal
1321+ 6A2B             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1321+ 6A2B             >
1321+ 6A2B             >                // dummy db directives used to calculate length of namec
1321+ 6A2B 4E 45 47 41 >                db      "NEGATE"
1321+ 6A2F 54 45       >
1321+ 6A31             >len_NFA         defl    $ - temp_NFA
1321+ 6A31             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1321+ 6A2B             >
1321+ 6A2B 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1321+ 6A2C 4E 45 47 41 >                db      "NEGATE"               // name string in 7-bit ascii, but
1321+ 6A30 54 45       >
1321+ 6A32             >                org     $-1                 // alter last byte of Name just above to set
1321+ 6A31 C5          >                db      {b $} | END_BIT     // msb as name end
1321+ 6A32             >
1321+ 6A32 24 6A       >                dw      last_NFA            // Link to previous definition Name
1321+ 6A34             >MINUS:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1321+ 6A34 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1321+ 6A34             >                else
1321+ 6A34 36 6A       >                dw      $ + 2   ; ok        // is pointed by CFA
1321+ 6A36             >                endif           ; ok        // for other definitions it "points" the correct handler
1321+ 6A36             >                // Use of "; ok" to suppress "warning[fwdref]"
1321+ 6A36             >
1321+ 6A36             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1322+ 6A36 21 00 00                     ld      hl, 0               // subtract from 0
1323+ 6A39 D1                           pop     de
1324+ 6A3A B7                           or      a
1325+ 6A3B ED 52                        sbc     hl, de
1326+ 6A3D
1327+ 6A3D                              psh1
1327+ 6A3D E5          >                push    hl
1327+ 6A3E DD E9       >                jp      (ix)
1328+ 6A40
1329+ 6A40              //  ______________________________________________________________________
1330+ 6A40              //
1331+ 6A40              // dnegate      d1 -- d2
1332+ 6A40              // change the sign of a double number
1333+ 6A40                              New_Def DMINUS, "DNEGATE", is_code, is_normal
1333+ 6A40             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1333+ 6A40             >
1333+ 6A40             >                // dummy db directives used to calculate length of namec
1333+ 6A40 44 4E 45 47 >                db      "DNEGATE"
1333+ 6A44 41 54 45    >
1333+ 6A47             >len_NFA         defl    $ - temp_NFA
1333+ 6A47             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1333+ 6A40             >
1333+ 6A40 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1333+ 6A41 44 4E 45 47 >                db      "DNEGATE"               // name string in 7-bit ascii, but
1333+ 6A45 41 54 45    >
1333+ 6A48             >                org     $-1                 // alter last byte of Name just above to set
1333+ 6A47 C5          >                db      {b $} | END_BIT     // msb as name end
1333+ 6A48             >
1333+ 6A48 2B 6A       >                dw      last_NFA            // Link to previous definition Name
1333+ 6A4A             >DMINUS:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1333+ 6A4A ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1333+ 6A4A             >                else
1333+ 6A4A 4C 6A       >                dw      $ + 2   ; ok        // is pointed by CFA
1333+ 6A4C             >                endif           ; ok        // for other definitions it "points" the correct handler
1333+ 6A4C             >                // Use of "; ok" to suppress "warning[fwdref]"
1333+ 6A4C             >
1333+ 6A4C             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1334+ 6A4C D9                           exx
1335+ 6A4D C1                           pop     bc                  // d1.H
1336+ 6A4E D1                           pop     de                  // d1.L
1337+ 6A4F AF                           xor     a
1338+ 6A50 67                           ld      h, a
1339+ 6A51 6F                           ld      l, a
1340+ 6A52 ED 52                        sbc     hl, de              // subtact from zero
1341+ 6A54 E5                           push    hl                  // > d2-L
1342+ 6A55 67                           ld      h, a
1343+ 6A56 6F                           ld      l, a
1344+ 6A57 ED 42                        sbc     hl, bc              // subtract from zero with carry
1345+ 6A59                                                          // > d2-H
1346+ 6A59 E5                           push    hl
1347+ 6A5A D9                           exx
1348+ 6A5B                              next
1348+ 6A5B DD E9       >                jp      (ix)
1349+ 6A5D
1350+ 6A5D              //  ______________________________________________________________________
1351+ 6A5D              //
1352+ 6A5D              // over         n1 n2 -- n1 n2 n1
1353+ 6A5D              // copy the second value of stack and put it on top.
1354+ 6A5D                              New_Def OVER, "OVER", is_code, is_normal
1354+ 6A5D             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1354+ 6A5D             >
1354+ 6A5D             >                // dummy db directives used to calculate length of namec
1354+ 6A5D 4F 56 45 52 >                db      "OVER"
1354+ 6A61             >len_NFA         defl    $ - temp_NFA
1354+ 6A61             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1354+ 6A5D             >
1354+ 6A5D 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1354+ 6A5E 4F 56 45 52 >                db      "OVER"               // name string in 7-bit ascii, but
1354+ 6A62             >                org     $-1                 // alter last byte of Name just above to set
1354+ 6A61 D2          >                db      {b $} | END_BIT     // msb as name end
1354+ 6A62             >
1354+ 6A62 40 6A       >                dw      last_NFA            // Link to previous definition Name
1354+ 6A64             >OVER:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1354+ 6A64 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1354+ 6A64             >                else
1354+ 6A64 66 6A       >                dw      $ + 2   ; ok        // is pointed by CFA
1354+ 6A66             >                endif           ; ok        // for other definitions it "points" the correct handler
1354+ 6A66             >                // Use of "; ok" to suppress "warning[fwdref]"
1354+ 6A66             >
1354+ 6A66             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1355+ 6A66 D1                           pop     de                  //   n2
1356+ 6A67 E1                           pop     hl                  // < n1
1357+ 6A68 E5                           push    hl                  // > n1
1358+ 6A69 D5                           push    de                  // > n2
1359+ 6A6A E5                           push    hl                  // > n1
1360+ 6A6B                              next
1360+ 6A6B DD E9       >                jp      (ix)
1361+ 6A6D
1362+ 6A6D              //  ______________________________________________________________________
1363+ 6A6D              //
1364+ 6A6D              // drop         n1 --
1365+ 6A6D              // drops the top of stack
1366+ 6A6D                              New_Def DROP, "DROP", is_code, is_normal
1366+ 6A6D             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1366+ 6A6D             >
1366+ 6A6D             >                // dummy db directives used to calculate length of namec
1366+ 6A6D 44 52 4F 50 >                db      "DROP"
1366+ 6A71             >len_NFA         defl    $ - temp_NFA
1366+ 6A71             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1366+ 6A6D             >
1366+ 6A6D 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1366+ 6A6E 44 52 4F 50 >                db      "DROP"               // name string in 7-bit ascii, but
1366+ 6A72             >                org     $-1                 // alter last byte of Name just above to set
1366+ 6A71 D0          >                db      {b $} | END_BIT     // msb as name end
1366+ 6A72             >
1366+ 6A72 5D 6A       >                dw      last_NFA            // Link to previous definition Name
1366+ 6A74             >DROP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1366+ 6A74 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1366+ 6A74             >                else
1366+ 6A74 76 6A       >                dw      $ + 2   ; ok        // is pointed by CFA
1366+ 6A76             >                endif           ; ok        // for other definitions it "points" the correct handler
1366+ 6A76             >                // Use of "; ok" to suppress "warning[fwdref]"
1366+ 6A76             >
1366+ 6A76             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1367+ 6A76 E1                           pop     hl                  // < n1 and discard previous TOS
1368+ 6A77                              next
1368+ 6A77 DD E9       >                jp      (ix)
1369+ 6A79
1370+ 6A79              //  ______________________________________________________________________
1371+ 6A79              //
1372+ 6A79              // nip          n1 n2 -- n2
1373+ 6A79              // drops the second elemento on the stack
1374+ 6A79                              New_Def NIP, "NIP", is_code, is_normal
1374+ 6A79             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1374+ 6A79             >
1374+ 6A79             >                // dummy db directives used to calculate length of namec
1374+ 6A79 4E 49 50    >                db      "NIP"
1374+ 6A7C             >len_NFA         defl    $ - temp_NFA
1374+ 6A7C             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1374+ 6A79             >
1374+ 6A79 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1374+ 6A7A 4E 49 50    >                db      "NIP"               // name string in 7-bit ascii, but
1374+ 6A7D             >                org     $-1                 // alter last byte of Name just above to set
1374+ 6A7C D0          >                db      {b $} | END_BIT     // msb as name end
1374+ 6A7D             >
1374+ 6A7D 6D 6A       >                dw      last_NFA            // Link to previous definition Name
1374+ 6A7F             >NIP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1374+ 6A7F ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1374+ 6A7F             >                else
1374+ 6A7F 81 6A       >                dw      $ + 2   ; ok        // is pointed by CFA
1374+ 6A81             >                endif           ; ok        // for other definitions it "points" the correct handler
1374+ 6A81             >                // Use of "; ok" to suppress "warning[fwdref]"
1374+ 6A81             >
1374+ 6A81             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1375+ 6A81
1376+ 6A81 E1                           pop     hl                  // < n1 discarded
1377+ 6A82 E3                           ex      (sp), hl
1378+ 6A83                              next
1378+ 6A83 DD E9       >                jp      (ix)
1379+ 6A85
1380+ 6A85              //  ______________________________________________________________________
1381+ 6A85              //
1382+ 6A85              // tuck         n1 n2 -- n2 n1 n2
1383+ 6A85              // copy the top element after the second.
1384+ 6A85                              New_Def TUCK, "TUCK", is_code, is_normal
1384+ 6A85             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1384+ 6A85             >
1384+ 6A85             >                // dummy db directives used to calculate length of namec
1384+ 6A85 54 55 43 4B >                db      "TUCK"
1384+ 6A89             >len_NFA         defl    $ - temp_NFA
1384+ 6A89             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1384+ 6A85             >
1384+ 6A85 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1384+ 6A86 54 55 43 4B >                db      "TUCK"               // name string in 7-bit ascii, but
1384+ 6A8A             >                org     $-1                 // alter last byte of Name just above to set
1384+ 6A89 CB          >                db      {b $} | END_BIT     // msb as name end
1384+ 6A8A             >
1384+ 6A8A 79 6A       >                dw      last_NFA            // Link to previous definition Name
1384+ 6A8C             >TUCK:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1384+ 6A8C ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1384+ 6A8C             >                else
1384+ 6A8C 8E 6A       >                dw      $ + 2   ; ok        // is pointed by CFA
1384+ 6A8E             >                endif           ; ok        // for other definitions it "points" the correct handler
1384+ 6A8E             >                // Use of "; ok" to suppress "warning[fwdref]"
1384+ 6A8E             >
1384+ 6A8E             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1385+ 6A8E E1                           pop     hl
1386+ 6A8F D1                           pop     de                  // < n1
1387+ 6A90 E5                           push    hl                  // > n2  and TOS
1388+ 6A91 D5                           push    de                  // > n1
1389+ 6A92 E5                           push    hl
1390+ 6A93                              next
1390+ 6A93 DD E9       >                jp      (ix)
1391+ 6A95
1392+ 6A95              //  ______________________________________________________________________
1393+ 6A95              //
1394+ 6A95              // swap         n1 n2 -- n2 n1
1395+ 6A95              // swaps the two values on top of stack
1396+ 6A95                              New_Def SWAP, "SWAP", is_code, is_normal
1396+ 6A95             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1396+ 6A95             >
1396+ 6A95             >                // dummy db directives used to calculate length of namec
1396+ 6A95 53 57 41 50 >                db      "SWAP"
1396+ 6A99             >len_NFA         defl    $ - temp_NFA
1396+ 6A99             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1396+ 6A95             >
1396+ 6A95 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1396+ 6A96 53 57 41 50 >                db      "SWAP"               // name string in 7-bit ascii, but
1396+ 6A9A             >                org     $-1                 // alter last byte of Name just above to set
1396+ 6A99 D0          >                db      {b $} | END_BIT     // msb as name end
1396+ 6A9A             >
1396+ 6A9A 85 6A       >                dw      last_NFA            // Link to previous definition Name
1396+ 6A9C             >SWAP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1396+ 6A9C ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1396+ 6A9C             >                else
1396+ 6A9C 9E 6A       >                dw      $ + 2   ; ok        // is pointed by CFA
1396+ 6A9E             >                endif           ; ok        // for other definitions it "points" the correct handler
1396+ 6A9E             >                // Use of "; ok" to suppress "warning[fwdref]"
1396+ 6A9E             >
1396+ 6A9E             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1397+ 6A9E E1                           pop     hl                  // < n1
1398+ 6A9F E3                           ex      (sp),hl             // > n2
1399+ 6AA0 E5                           push    hl                  // copy n1 to TOS
1400+ 6AA1                              next
1400+ 6AA1 DD E9       >                jp      (ix)
1401+ 6AA3
1402+ 6AA3              //  ______________________________________________________________________
1403+ 6AA3              //
1404+ 6AA3              // dup         n -- n n
1405+ 6AA3              // duplicates the top value of stack
1406+ 6AA3                              New_Def DUP, "DUP", is_code, is_normal
1406+ 6AA3             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1406+ 6AA3             >
1406+ 6AA3             >                // dummy db directives used to calculate length of namec
1406+ 6AA3 44 55 50    >                db      "DUP"
1406+ 6AA6             >len_NFA         defl    $ - temp_NFA
1406+ 6AA6             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1406+ 6AA3             >
1406+ 6AA3 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1406+ 6AA4 44 55 50    >                db      "DUP"               // name string in 7-bit ascii, but
1406+ 6AA7             >                org     $-1                 // alter last byte of Name just above to set
1406+ 6AA6 D0          >                db      {b $} | END_BIT     // msb as name end
1406+ 6AA7             >
1406+ 6AA7 95 6A       >                dw      last_NFA            // Link to previous definition Name
1406+ 6AA9             >DUP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1406+ 6AA9 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1406+ 6AA9             >                else
1406+ 6AA9 AB 6A       >                dw      $ + 2   ; ok        // is pointed by CFA
1406+ 6AAB             >                endif           ; ok        // for other definitions it "points" the correct handler
1406+ 6AAB             >                // Use of "; ok" to suppress "warning[fwdref]"
1406+ 6AAB             >
1406+ 6AAB             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1407+ 6AAB E1                           pop     hl
1408+ 6AAC E5                           push    hl                  // > n duplicate TOS
1409+ 6AAD E5                           push    hl
1410+ 6AAE                              next
1410+ 6AAE DD E9       >                jp      (ix)
1411+ 6AB0
1412+ 6AB0              //  ______________________________________________________________________
1413+ 6AB0              //
1414+ 6AB0              // rot         n1 n2 n3 -- n2 n3 n1
1415+ 6AB0              // Rotates the 3 top values of stack by picking the 3rd in access-order
1416+ 6AB0              // and putting it on top. The other two are shifted down one place.
1417+ 6AB0                              New_Def ROT, "ROT", is_code, is_normal
1417+ 6AB0             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1417+ 6AB0             >
1417+ 6AB0             >                // dummy db directives used to calculate length of namec
1417+ 6AB0 52 4F 54    >                db      "ROT"
1417+ 6AB3             >len_NFA         defl    $ - temp_NFA
1417+ 6AB3             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1417+ 6AB0             >
1417+ 6AB0 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1417+ 6AB1 52 4F 54    >                db      "ROT"               // name string in 7-bit ascii, but
1417+ 6AB4             >                org     $-1                 // alter last byte of Name just above to set
1417+ 6AB3 D4          >                db      {b $} | END_BIT     // msb as name end
1417+ 6AB4             >
1417+ 6AB4 A3 6A       >                dw      last_NFA            // Link to previous definition Name
1417+ 6AB6             >ROT:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1417+ 6AB6 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1417+ 6AB6             >                else
1417+ 6AB6 B8 6A       >                dw      $ + 2   ; ok        // is pointed by CFA
1417+ 6AB8             >                endif           ; ok        // for other definitions it "points" the correct handler
1417+ 6AB8             >                // Use of "; ok" to suppress "warning[fwdref]"
1417+ 6AB8             >
1417+ 6AB8             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1418+ 6AB8 D1                           pop     de                  // < n3
1419+ 6AB9 E1                           pop     hl                  // < n2
1420+ 6ABA E3                           ex      (sp),hl             // > n2 < n1
1421+ 6ABB D5                           push    de                  // > n3
1422+ 6ABC E5                           push    hl                  // copy n1 to TOS
1423+ 6ABD                              next
1423+ 6ABD DD E9       >                jp      (ix)
1424+ 6ABF
1425+ 6ABF              //  ______________________________________________________________________
1426+ 6ABF              //
1427+ 6ABF              // -rot         n1 n2 n3 -- n3 n1 n2
1428+ 6ABF              // Rotates the 3 top values of stack by picking the 1st in access-order
1429+ 6ABF              // and putting back to 3rd place. The other two are shifted down one place.
1430+ 6ABF                              New_Def DASH_ROT, "-ROT", is_code, is_normal
1430+ 6ABF             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1430+ 6ABF             >
1430+ 6ABF             >                // dummy db directives used to calculate length of namec
1430+ 6ABF 2D 52 4F 54 >                db      "-ROT"
1430+ 6AC3             >len_NFA         defl    $ - temp_NFA
1430+ 6AC3             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1430+ 6ABF             >
1430+ 6ABF 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1430+ 6AC0 2D 52 4F 54 >                db      "-ROT"               // name string in 7-bit ascii, but
1430+ 6AC4             >                org     $-1                 // alter last byte of Name just above to set
1430+ 6AC3 D4          >                db      {b $} | END_BIT     // msb as name end
1430+ 6AC4             >
1430+ 6AC4 B0 6A       >                dw      last_NFA            // Link to previous definition Name
1430+ 6AC6             >DASH_ROT:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1430+ 6AC6 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1430+ 6AC6             >                else
1430+ 6AC6 C8 6A       >                dw      $ + 2   ; ok        // is pointed by CFA
1430+ 6AC8             >                endif           ; ok        // for other definitions it "points" the correct handler
1430+ 6AC8             >                // Use of "; ok" to suppress "warning[fwdref]"
1430+ 6AC8             >
1430+ 6AC8             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1431+ 6AC8 E1                           pop     hl                  // < n3
1432+ 6AC9 D1                           pop     de                  // < n2
1433+ 6ACA E3                           ex      (sp),hl             // > n3 < n1
1434+ 6ACB E5                           push    hl                  // > n1
1435+ 6ACC D5                           push    de                  // copy n3 to TOS
1436+ 6ACD                              next
1436+ 6ACD DD E9       >                jp      (ix)
1437+ 6ACF
1438+ 6ACF              //  ______________________________________________________________________
1439+ 6ACF              //
1440+ 6ACF              // pick        n1 -- nx
1441+ 6ACF              // picks the nth element from TOS
1442+ 6ACF                              New_Def PICK, "PICK", is_code, is_normal
1442+ 6ACF             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1442+ 6ACF             >
1442+ 6ACF             >                // dummy db directives used to calculate length of namec
1442+ 6ACF 50 49 43 4B >                db      "PICK"
1442+ 6AD3             >len_NFA         defl    $ - temp_NFA
1442+ 6AD3             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1442+ 6ACF             >
1442+ 6ACF 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1442+ 6AD0 50 49 43 4B >                db      "PICK"               // name string in 7-bit ascii, but
1442+ 6AD4             >                org     $-1                 // alter last byte of Name just above to set
1442+ 6AD3 CB          >                db      {b $} | END_BIT     // msb as name end
1442+ 6AD4             >
1442+ 6AD4 BF 6A       >                dw      last_NFA            // Link to previous definition Name
1442+ 6AD6             >PICK:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1442+ 6AD6 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1442+ 6AD6             >                else
1442+ 6AD6 D8 6A       >                dw      $ + 2   ; ok        // is pointed by CFA
1442+ 6AD8             >                endif           ; ok        // for other definitions it "points" the correct handler
1442+ 6AD8             >                // Use of "; ok" to suppress "warning[fwdref]"
1442+ 6AD8             >
1442+ 6AD8             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1443+ 6AD8 E1                           pop     hl                  // take TOS as index
1444+ 6AD9 29                           add     hl, hl              // as cells
1445+ 6ADA 39                           add     hl, sp              // from Stack Pointer
1446+ 6ADB 7E                           ld      a, (hl)             // replace TOS
1447+ 6ADC 23                           inc     hl
1448+ 6ADD 66                           ld      h, (hl)
1449+ 6ADE 6F                           ld      l, a
1450+ 6ADF
1451+ 6ADF                              psh1
1451+ 6ADF E5          >                push    hl
1451+ 6AE0 DD E9       >                jp      (ix)
1452+ 6AE2
1453+ 6AE2
1454+ 6AE2              //  ______________________________________________________________________
1455+ 6AE2              //
1456+ 6AE2              // roll        n1 n2 n3 ... n -- n2 n3 ... n1
1457+ 6AE2              // picks the nth element from TOS
1458+ 6AE2              //              New_Def ROLL, "ROLL", is_code, is_normal
1459+ 6AE2              //              exx                     // we need all registers free
1460+ 6AE2              //              pop     hl              // number of cells to roll
1461+ 6AE2              //              ld      a, h
1462+ 6AE2              //              or       l
1463+ 6AE2              //              jr      z, Roll_Zero
1464+ 6AE2              //                  add     hl, hl              // number of bytes to move
1465+ 6AE2              //                  ld      b, h
1466+ 6AE2              //                  ld      c, l
1467+ 6AE2              //                  add     hl, sp          // address of n1
1468+ 6AE2              //                  ld      a, (hl)         // take n1 into a and a,
1469+ 6AE2              //                  inc     hl
1470+ 6AE2              //                  ex      af, af'
1471+ 6AE2              //                  ld      a, (hl)         // take n1 into a and a,
1472+ 6AE2              //                  ld      d, h
1473+ 6AE2              //                  ld      e, l
1474+ 6AE2              //                  dec     hl
1475+ 6AE2              //                  dec     hl
1476+ 6AE2              //                  lddr
1477+ 6AE2              //                  ex      de, hl
1478+ 6AE2              //                  ld      (hl), a
1479+ 6AE2              //                  dec     hl
1480+ 6AE2              //                  ex      af, af'
1481+ 6AE2              //                  ld      (hl), a
1482+ 6AE2              //Roll_Zero:
1483+ 6AE2              //              exx
1484+ 6AE2              //              next
1485+ 6AE2
1486+ 6AE2
1487+ 6AE2              //  ______________________________________________________________________
1488+ 6AE2              //
1489+ 6AE2              // 2over        d1 d2 -- d1 d2 d1
1490+ 6AE2              //              n1 n2 n3 n4 -- n1 n2 n3 n4 n1 n2
1491+ 6AE2              // copy the second double of stack and put on top.
1492+ 6AE2              //              New_Def TWO_OVER, "2OVER", is_code, is_normal
1493+ 6AE2              //
1494+ 6AE2              //              ld      hl, 7
1495+ 6AE2              //              add     hl, sp
1496+ 6AE2              //              ld      d, (hl)
1497+ 6AE2              //              dec     hl
1498+ 6AE2              //              ld      e, (hl)             // d1-L
1499+ 6AE2              //              push    de
1500+ 6AE2              //              dec     hl
1501+ 6AE2              //              ld      d, (hl)
1502+ 6AE2              //              dec     hl
1503+ 6AE2              //              ld      e, (hl)             // d1-H
1504+ 6AE2              //              push    de
1505+ 6AE2              //              next
1506+ 6AE2
1507+ 6AE2              //  ______________________________________________________________________
1508+ 6AE2              //
1509+ 6AE2              // 2drop        d --
1510+ 6AE2              //              n1 n2 --
1511+ 6AE2              // drops the top double from stack
1512+ 6AE2                              New_Def TWO_DROP, "2DROP", is_code, is_normal
1512+ 6AE2             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1512+ 6AE2             >
1512+ 6AE2             >                // dummy db directives used to calculate length of namec
1512+ 6AE2 32 44 52 4F >                db      "2DROP"
1512+ 6AE6 50          >
1512+ 6AE7             >len_NFA         defl    $ - temp_NFA
1512+ 6AE7             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1512+ 6AE2             >
1512+ 6AE2 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1512+ 6AE3 32 44 52 4F >                db      "2DROP"               // name string in 7-bit ascii, but
1512+ 6AE7 50          >
1512+ 6AE8             >                org     $-1                 // alter last byte of Name just above to set
1512+ 6AE7 D0          >                db      {b $} | END_BIT     // msb as name end
1512+ 6AE8             >
1512+ 6AE8 CF 6A       >                dw      last_NFA            // Link to previous definition Name
1512+ 6AEA             >TWO_DROP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1512+ 6AEA ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1512+ 6AEA             >                else
1512+ 6AEA EC 6A       >                dw      $ + 2   ; ok        // is pointed by CFA
1512+ 6AEC             >                endif           ; ok        // for other definitions it "points" the correct handler
1512+ 6AEC             >                // Use of "; ok" to suppress "warning[fwdref]"
1512+ 6AEC             >
1512+ 6AEC             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1513+ 6AEC E1                           pop     hl
1514+ 6AED E1                           pop     hl
1515+ 6AEE                              next
1515+ 6AEE DD E9       >                jp      (ix)
1516+ 6AF0
1517+ 6AF0              //  ______________________________________________________________________
1518+ 6AF0              //
1519+ 6AF0              // 2nip         d1 d2 -- d2
1520+ 6AF0              //              n1 n2 n3 n4 -- n3 n4
1521+ 6AF0              // drops the second double on the stack
1522+ 6AF0              //              New_Def TWO_NIP, 4, "2nip"
1523+ 6AF0              //              ...
1524+ 6AF0
1525+ 6AF0              //  ______________________________________________________________________
1526+ 6AF0              //
1527+ 6AF0              // 2tuck         d1 d2 -- d2 d1 d2
1528+ 6AF0              // copy the top element after the second.
1529+ 6AF0              //              New_Def TWO_TUCK, 5, "2tuck"
1530+ 6AF0              //              ...
1531+ 6AF0
1532+ 6AF0              //  ______________________________________________________________________
1533+ 6AF0              //
1534+ 6AF0              // 2swap         d1 d2 -- d2 d1
1535+ 6AF0              //               n1 n2 n3 n4 -- n3 n4 n1 n2
1536+ 6AF0              // swaps the two doubles on top of stack
1537+ 6AF0                              New_Def TWO_SWAP, "2SWAP", is_code, is_normal
1537+ 6AF0             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1537+ 6AF0             >
1537+ 6AF0             >                // dummy db directives used to calculate length of namec
1537+ 6AF0 32 53 57 41 >                db      "2SWAP"
1537+ 6AF4 50          >
1537+ 6AF5             >len_NFA         defl    $ - temp_NFA
1537+ 6AF5             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1537+ 6AF0             >
1537+ 6AF0 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1537+ 6AF1 32 53 57 41 >                db      "2SWAP"               // name string in 7-bit ascii, but
1537+ 6AF5 50          >
1537+ 6AF6             >                org     $-1                 // alter last byte of Name just above to set
1537+ 6AF5 D0          >                db      {b $} | END_BIT     // msb as name end
1537+ 6AF6             >
1537+ 6AF6 E2 6A       >                dw      last_NFA            // Link to previous definition Name
1537+ 6AF8             >TWO_SWAP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1537+ 6AF8 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1537+ 6AF8             >                else
1537+ 6AF8 FA 6A       >                dw      $ + 2   ; ok        // is pointed by CFA
1537+ 6AFA             >                endif           ; ok        // for other definitions it "points" the correct handler
1537+ 6AFA             >                // Use of "; ok" to suppress "warning[fwdref]"
1537+ 6AFA             >
1537+ 6AFA             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1538+ 6AFA F1                           pop     af                  //   d2-H
1539+ 6AFB E1                           pop     hl                  // < d2-L
1540+ 6AFC D1                           pop     de                  // < d1-H
1541+ 6AFD E3                           ex      (sp), hl            // < d1-L > d2-L
1542+ 6AFE F5                           push    af                  // > d2-H
1543+ 6AFF E5                           push    hl                  // > d1-L
1544+ 6B00 D5                           push    de
1545+ 6B01
1546+ 6B01                              next
1546+ 6B01 DD E9       >                jp      (ix)
1547+ 6B03
1548+ 6B03              //  ______________________________________________________________________
1549+ 6B03              //
1550+ 6B03              // 2dup         d -- d d
1551+ 6B03              //              n1 n2 -- n1 n2 n1 n2
1552+ 6B03              // duplicates the top double of stack
1553+ 6B03                              New_Def TWO_DUP, "2DUP", is_code, is_normal
1553+ 6B03             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1553+ 6B03             >
1553+ 6B03             >                // dummy db directives used to calculate length of namec
1553+ 6B03 32 44 55 50 >                db      "2DUP"
1553+ 6B07             >len_NFA         defl    $ - temp_NFA
1553+ 6B07             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1553+ 6B03             >
1553+ 6B03 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1553+ 6B04 32 44 55 50 >                db      "2DUP"               // name string in 7-bit ascii, but
1553+ 6B08             >                org     $-1                 // alter last byte of Name just above to set
1553+ 6B07 D0          >                db      {b $} | END_BIT     // msb as name end
1553+ 6B08             >
1553+ 6B08 F0 6A       >                dw      last_NFA            // Link to previous definition Name
1553+ 6B0A             >TWO_DUP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1553+ 6B0A ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1553+ 6B0A             >                else
1553+ 6B0A 0C 6B       >                dw      $ + 2   ; ok        // is pointed by CFA
1553+ 6B0C             >                endif           ; ok        // for other definitions it "points" the correct handler
1553+ 6B0C             >                // Use of "; ok" to suppress "warning[fwdref]"
1553+ 6B0C             >
1553+ 6B0C             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1554+ 6B0C E1                           pop     hl                  // < d-H
1555+ 6B0D D1                           pop     de                  // < d-L
1556+ 6B0E D5                           push    de                  // < d-L
1557+ 6B0F E5                           push    hl                  // > d-H
1558+ 6B10 D5                           push    de                  // > d-L
1559+ 6B11 E5                           push    hl                  // > d-H
1560+ 6B12                              next
1560+ 6B12 DD E9       >                jp      (ix)
1561+ 6B14
1562+ 6B14              //  ______________________________________________________________________
1563+ 6B14              //
1564+ 6B14              // 2rot         d1 d2 d3 -- d2 d3 d1
1565+ 6B14              //              n1 n2 n3 n4 n5 n6 -- n3 n4 n5 n6 n1 n2
1566+ 6B14              // Rotates the 3 top doubles of stack by picking the 3rd in access-order
1567+ 6B14              // and putting it on top. The other two are shifted down one place.
1568+ 6B14              //              New_Def TWO?ROT, 4, "2rot"
1569+ 6B14              //              ...
1570+ 6B14              //              New_Def TWO_ROT, "2ROT", is_code, is_normal
1571+ 6B14              //
1572+ 6B14              //      d3  |d2  |d1  |
1573+ 6B14              //      h l |h l |h l |
1574+ 6B14              // SP   LHED|LHED|LHED|
1575+ 6B14              // SP  +0123|4567|89ab|
1576+ 6B14              //              ld      hl, $000B
1577+ 6B14              //              add     hl, sp
1578+ 6B14              //              ld      d, (hl)
1579+ 6B14              //              dec     hl
1580+ 6B14              //              ld      e, (hl)
1581+ 6B14              //              dec     hl
1582+ 6B14              //              push    de
1583+ 6B14              //              ld      d, (hl)
1584+ 6B14              //              dec     hl
1585+ 6B14              //              ld      e, (hl)
1586+ 6B14              //              dec     hl
1587+ 6B14              //              push    de
1588+ 6B14
1589+ 6B14              //      d1  |d3  |d2  |d1  |
1590+ 6B14              //      h l |h l |h l |h l |
1591+ 6B14              // SP   LHED|LHED|LHED|LHED|
1592+ 6B14              // SP       +0123|4567|89ab|
1593+ 6B14
1594+ 6B14              //              ld      d, h
1595+ 6B14              //              ld      e, l
1596+ 6B14              //              inc     de
1597+ 6B14              //              inc     de
1598+ 6B14              //              inc     de
1599+ 6B14              //              inc     de
1600+ 6B14              //              push    bc
1601+ 6B14              //              ld      bc, $000C
1602+ 6B14              //              lddr
1603+ 6B14              //              pop     bc
1604+ 6B14              //              pop     de
1605+ 6B14              //              pop     de
1606+ 6B14              //
1607+ 6B14              //              next
1608+ 6B14
1609+ 6B14
1610+ 6B14              //  ______________________________________________________________________
1611+ 6B14              //
1612+ 6B14              // +!           n a --
1613+ 6B14              // Sums to the content of address a the number n.
1614+ 6B14              // It is the same of  a @ n + a !
1615+ 6B14                              New_Def PLUSSTORE, "+!", is_code, is_normal
1615+ 6B14             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1615+ 6B14             >
1615+ 6B14             >                // dummy db directives used to calculate length of namec
1615+ 6B14 2B 21       >                db      "+!"
1615+ 6B16             >len_NFA         defl    $ - temp_NFA
1615+ 6B16             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1615+ 6B14             >
1615+ 6B14 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1615+ 6B15 2B 21       >                db      "+!"               // name string in 7-bit ascii, but
1615+ 6B17             >                org     $-1                 // alter last byte of Name just above to set
1615+ 6B16 A1          >                db      {b $} | END_BIT     // msb as name end
1615+ 6B17             >
1615+ 6B17 03 6B       >                dw      last_NFA            // Link to previous definition Name
1615+ 6B19             >PLUSSTORE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1615+ 6B19 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1615+ 6B19             >                else
1615+ 6B19 1B 6B       >                dw      $ + 2   ; ok        // is pointed by CFA
1615+ 6B1B             >                endif           ; ok        // for other definitions it "points" the correct handler
1615+ 6B1B             >                // Use of "; ok" to suppress "warning[fwdref]"
1615+ 6B1B             >
1615+ 6B1B             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1616+ 6B1B E1                           pop     hl                  // hl is the address
1617+ 6B1C D1                           pop     de                  // de is the number
1618+ 6B1D 7E                           ld      a, (hl)
1619+ 6B1E 83                           add     e
1620+ 6B1F 77                           ld      (hl), a
1621+ 6B20 23                           inc     hl
1622+ 6B21 7E                           ld      a, (hl)
1623+ 6B22 8A                           adc     d
1624+ 6B23 77                           ld      (hl), a
1625+ 6B24
1626+ 6B24                              next
1626+ 6B24 DD E9       >                jp      (ix)
1627+ 6B26
1628+ 6B26              //  ______________________________________________________________________
1629+ 6B26              //
1630+ 6B26              // toggle       a n --
1631+ 6B26              // Complements (xor) the byte at addrress  a  with the model n.
1632+ 6B26                              New_Def TOGGLE, "TOGGLE", is_code, is_normal
1632+ 6B26             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1632+ 6B26             >
1632+ 6B26             >                // dummy db directives used to calculate length of namec
1632+ 6B26 54 4F 47 47 >                db      "TOGGLE"
1632+ 6B2A 4C 45       >
1632+ 6B2C             >len_NFA         defl    $ - temp_NFA
1632+ 6B2C             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1632+ 6B26             >
1632+ 6B26 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1632+ 6B27 54 4F 47 47 >                db      "TOGGLE"               // name string in 7-bit ascii, but
1632+ 6B2B 4C 45       >
1632+ 6B2D             >                org     $-1                 // alter last byte of Name just above to set
1632+ 6B2C C5          >                db      {b $} | END_BIT     // msb as name end
1632+ 6B2D             >
1632+ 6B2D 14 6B       >                dw      last_NFA            // Link to previous definition Name
1632+ 6B2F             >TOGGLE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1632+ 6B2F ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1632+ 6B2F             >                else
1632+ 6B2F 31 6B       >                dw      $ + 2   ; ok        // is pointed by CFA
1632+ 6B31             >                endif           ; ok        // for other definitions it "points" the correct handler
1632+ 6B31             >                // Use of "; ok" to suppress "warning[fwdref]"
1632+ 6B31             >
1632+ 6B31             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1633+ 6B31 D1                           pop     de
1634+ 6B32 E1                           pop     hl
1635+ 6B33 7E                           ld      a, (hl)
1636+ 6B34 AB                           xor     e
1637+ 6B35 77                           ld      (hl), a
1638+ 6B36
1639+ 6B36                              next
1639+ 6B36 DD E9       >                jp      (ix)
1640+ 6B38
1641+ 6B38              //  ______________________________________________________________________
1642+ 6B38              //
1643+ 6B38              // @            a -- n
1644+ 6B38              // fetch 16 bit number n from address a. Z80 keeps high byte is in high memory
1645+ 6B38                              New_Def FETCH, "@", is_code, is_normal
1645+ 6B38             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1645+ 6B38             >
1645+ 6B38             >                // dummy db directives used to calculate length of namec
1645+ 6B38 40          >                db      "@"
1645+ 6B39             >len_NFA         defl    $ - temp_NFA
1645+ 6B39             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1645+ 6B38             >
1645+ 6B38 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1645+ 6B39 40          >                db      "@"               // name string in 7-bit ascii, but
1645+ 6B3A             >                org     $-1                 // alter last byte of Name just above to set
1645+ 6B39 C0          >                db      {b $} | END_BIT     // msb as name end
1645+ 6B3A             >
1645+ 6B3A 26 6B       >                dw      last_NFA            // Link to previous definition Name
1645+ 6B3C             >FETCH:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1645+ 6B3C ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1645+ 6B3C             >                else
1645+ 6B3C 3E 6B       >                dw      $ + 2   ; ok        // is pointed by CFA
1645+ 6B3E             >                endif           ; ok        // for other definitions it "points" the correct handler
1645+ 6B3E             >                // Use of "; ok" to suppress "warning[fwdref]"
1645+ 6B3E             >
1645+ 6B3E             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1646+ 6B3E E1                           pop     hl
1647+ 6B3F 5E                           ld      e, (hl)             // low-byte
1648+ 6B40 23                           inc     hl
1649+ 6B41 56                           ld      d, (hl)             // high-byte
1650+ 6B42 D5                           push    de
1651+ 6B43                              next
1651+ 6B43 DD E9       >                jp      (ix)
1652+ 6B45
1653+ 6B45              //  ______________________________________________________________________
1654+ 6B45              //
1655+ 6B45              // !            n a --
1656+ 6B45              // store 16 bit number n from address a. Z80 keeps high byte is in high memory
1657+ 6B45                              New_Def STORE, "!", is_code, is_normal
1657+ 6B45             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1657+ 6B45             >
1657+ 6B45             >                // dummy db directives used to calculate length of namec
1657+ 6B45 21          >                db      "!"
1657+ 6B46             >len_NFA         defl    $ - temp_NFA
1657+ 6B46             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1657+ 6B45             >
1657+ 6B45 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1657+ 6B46 21          >                db      "!"               // name string in 7-bit ascii, but
1657+ 6B47             >                org     $-1                 // alter last byte of Name just above to set
1657+ 6B46 A1          >                db      {b $} | END_BIT     // msb as name end
1657+ 6B47             >
1657+ 6B47 38 6B       >                dw      last_NFA            // Link to previous definition Name
1657+ 6B49             >STORE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1657+ 6B49 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1657+ 6B49             >                else
1657+ 6B49 4B 6B       >                dw      $ + 2   ; ok        // is pointed by CFA
1657+ 6B4B             >                endif           ; ok        // for other definitions it "points" the correct handler
1657+ 6B4B             >                // Use of "; ok" to suppress "warning[fwdref]"
1657+ 6B4B             >
1657+ 6B4B             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1658+ 6B4B E1                           pop     hl                  // address
1659+ 6B4C D1                           pop     de                  // < n
1660+ 6B4D 73                           ld      (hl), e             // low-byte
1661+ 6B4E 23                           inc     hl
1662+ 6B4F 72                           ld      (hl), d             // high-byte
1663+ 6B50
1664+ 6B50                              next
1664+ 6B50 DD E9       >                jp      (ix)
1665+ 6B52
1666+ 6B52              //  ______________________________________________________________________
1667+ 6B52              //
1668+ 6B52              // c@           a -- c
1669+ 6B52              // fetch a character n from address a
1670+ 6B52                              New_Def CFETCH, "C@", is_code, is_normal
1670+ 6B52             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1670+ 6B52             >
1670+ 6B52             >                // dummy db directives used to calculate length of namec
1670+ 6B52 43 40       >                db      "C@"
1670+ 6B54             >len_NFA         defl    $ - temp_NFA
1670+ 6B54             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1670+ 6B52             >
1670+ 6B52 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1670+ 6B53 43 40       >                db      "C@"               // name string in 7-bit ascii, but
1670+ 6B55             >                org     $-1                 // alter last byte of Name just above to set
1670+ 6B54 C0          >                db      {b $} | END_BIT     // msb as name end
1670+ 6B55             >
1670+ 6B55 45 6B       >                dw      last_NFA            // Link to previous definition Name
1670+ 6B57             >CFETCH:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1670+ 6B57 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1670+ 6B57             >                else
1670+ 6B57 59 6B       >                dw      $ + 2   ; ok        // is pointed by CFA
1670+ 6B59             >                endif           ; ok        // for other definitions it "points" the correct handler
1670+ 6B59             >                // Use of "; ok" to suppress "warning[fwdref]"
1670+ 6B59             >
1670+ 6B59             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1671+ 6B59 E1                           pop     hl
1672+ 6B5A 6E                           ld      l, (hl)             // low-byte
1673+ 6B5B 26 00                        ld      h, 0
1674+ 6B5D
1675+ 6B5D                              psh1
1675+ 6B5D E5          >                push    hl
1675+ 6B5E DD E9       >                jp      (ix)
1676+ 6B60
1677+ 6B60              //  ______________________________________________________________________
1678+ 6B60              //
1679+ 6B60              // c!           c a --
1680+ 6B60              // fetch 16 bit number n from address a. Z80 keeps high byte is in high memory
1681+ 6B60                              New_Def CSTORE, "C!", is_code, is_normal
1681+ 6B60             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1681+ 6B60             >
1681+ 6B60             >                // dummy db directives used to calculate length of namec
1681+ 6B60 43 21       >                db      "C!"
1681+ 6B62             >len_NFA         defl    $ - temp_NFA
1681+ 6B62             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1681+ 6B60             >
1681+ 6B60 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1681+ 6B61 43 21       >                db      "C!"               // name string in 7-bit ascii, but
1681+ 6B63             >                org     $-1                 // alter last byte of Name just above to set
1681+ 6B62 A1          >                db      {b $} | END_BIT     // msb as name end
1681+ 6B63             >
1681+ 6B63 52 6B       >                dw      last_NFA            // Link to previous definition Name
1681+ 6B65             >CSTORE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1681+ 6B65 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1681+ 6B65             >                else
1681+ 6B65 67 6B       >                dw      $ + 2   ; ok        // is pointed by CFA
1681+ 6B67             >                endif           ; ok        // for other definitions it "points" the correct handler
1681+ 6B67             >                // Use of "; ok" to suppress "warning[fwdref]"
1681+ 6B67             >
1681+ 6B67             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1682+ 6B67 E1                           pop     hl                  // < address
1683+ 6B68 D1                           pop     de
1684+ 6B69 73                           ld      (hl), e             // low-byte
1685+ 6B6A
1686+ 6B6A                              next
1686+ 6B6A DD E9       >                jp      (ix)
1687+ 6B6C
1688+ 6B6C              //  ______________________________________________________________________
1689+ 6B6C              //
1690+ 6B6C              // 2@           a -- d
1691+ 6B6C              // fetch a 32 bits number d from address a and leaves it on top of the
1692+ 6B6C              // stack as two single numbers, high part as top of the stack.
1693+ 6B6C              // A double number is normally kept in CPU registers as HLDE.
1694+ 6B6C              // On stack a double number is treated as two single numbers
1695+ 6B6C              // where BC is on the top of the stack and HL is the second from top,
1696+ 6B6C              // so the sign of the number can be checked on top of stack
1697+ 6B6C              // and in the stack memory it appears as LHED.
1698+ 6B6C                              New_Def TWO_FETCH, "2@", is_code, is_normal
1698+ 6B6C             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1698+ 6B6C             >
1698+ 6B6C             >                // dummy db directives used to calculate length of namec
1698+ 6B6C 32 40       >                db      "2@"
1698+ 6B6E             >len_NFA         defl    $ - temp_NFA
1698+ 6B6E             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1698+ 6B6C             >
1698+ 6B6C 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1698+ 6B6D 32 40       >                db      "2@"               // name string in 7-bit ascii, but
1698+ 6B6F             >                org     $-1                 // alter last byte of Name just above to set
1698+ 6B6E C0          >                db      {b $} | END_BIT     // msb as name end
1698+ 6B6F             >
1698+ 6B6F 60 6B       >                dw      last_NFA            // Link to previous definition Name
1698+ 6B71             >TWO_FETCH:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1698+ 6B71 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1698+ 6B71             >                else
1698+ 6B71 73 6B       >                dw      $ + 2   ; ok        // is pointed by CFA
1698+ 6B73             >                endif           ; ok        // for other definitions it "points" the correct handler
1698+ 6B73             >                // Use of "; ok" to suppress "warning[fwdref]"
1698+ 6B73             >
1698+ 6B73             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1699+ 6B73 E1                           pop     hl                  // address
1700+ 6B74 5E                           ld      e, (hl)             // low-byte
1701+ 6B75 23                           inc     hl
1702+ 6B76 56                           ld      d, (hl)             // high-byte
1703+ 6B77
1704+ 6B77 23                           inc     hl
1705+ 6B78 7E                           ld      a, (hl)             // low-byte
1706+ 6B79 23                           inc     hl
1707+ 6B7A 66                           ld      h, (hl)             // high-byte
1708+ 6B7B 6F                           ld      l, a
1709+ 6B7C E5                           push    hl
1710+ 6B7D D5                           push    de
1711+ 6B7E                              next
1711+ 6B7E DD E9       >                jp      (ix)
1712+ 6B80
1713+ 6B80              //  ______________________________________________________________________
1714+ 6B80              //
1715+ 6B80              // 2!           d a --
1716+ 6B80              // stores a 32 bits number d from address a and leaves it on top of the
1717+ 6B80              // stack as two single numbers, high part as top of the stack.
1718+ 6B80              // A double number is normally kept in CPU registers as HLDE.
1719+ 6B80              // On stack a double number is treated as two single numbers
1720+ 6B80              // where BC is on the top of the stack and HL is the second from top,
1721+ 6B80              // so the sign of the number can be checked on top of stack
1722+ 6B80              // and in the stack memory it appears as LHED.
1723+ 6B80                              New_Def TWO_STORE, "2!", is_code, is_normal
1723+ 6B80             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1723+ 6B80             >
1723+ 6B80             >                // dummy db directives used to calculate length of namec
1723+ 6B80 32 21       >                db      "2!"
1723+ 6B82             >len_NFA         defl    $ - temp_NFA
1723+ 6B82             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1723+ 6B80             >
1723+ 6B80 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1723+ 6B81 32 21       >                db      "2!"               // name string in 7-bit ascii, but
1723+ 6B83             >                org     $-1                 // alter last byte of Name just above to set
1723+ 6B82 A1          >                db      {b $} | END_BIT     // msb as name end
1723+ 6B83             >
1723+ 6B83 6C 6B       >                dw      last_NFA            // Link to previous definition Name
1723+ 6B85             >TWO_STORE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1723+ 6B85 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1723+ 6B85             >                else
1723+ 6B85 87 6B       >                dw      $ + 2   ; ok        // is pointed by CFA
1723+ 6B87             >                endif           ; ok        // for other definitions it "points" the correct handler
1723+ 6B87             >                // Use of "; ok" to suppress "warning[fwdref]"
1723+ 6B87             >
1723+ 6B87             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1724+ 6B87 D9                           exx
1725+ 6B88 E1                           pop     hl                  // hl has address
1726+ 6B89 C1                           pop     bc                  // < high-part
1727+ 6B8A D1                           pop     de                  // < low-part > Instruction Pointer
1728+ 6B8B 71                           ld      (hl), c
1729+ 6B8C 23                           inc     hl
1730+ 6B8D 70                           ld      (hl), b
1731+ 6B8E 23                           inc     hl
1732+ 6B8F 73                           ld      (hl), e
1733+ 6B90 23                           inc     hl
1734+ 6B91 72                           ld      (hl), d
1735+ 6B92 D9                           exx
1736+ 6B93                              next
1736+ 6B93 DD E9       >                jp      (ix)
1737+ 6B95
1738+ 6B95              //  ______________________________________________________________________
1739+ 6B95              //
1740+ 6B95              // p@           a -- c
1741+ 6B95              // Read one byte from port a and leave the result on top of stack
1742+ 6B95                              New_Def PFETCH, "P@", is_code, is_normal
1742+ 6B95             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1742+ 6B95             >
1742+ 6B95             >                // dummy db directives used to calculate length of namec
1742+ 6B95 50 40       >                db      "P@"
1742+ 6B97             >len_NFA         defl    $ - temp_NFA
1742+ 6B97             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1742+ 6B95             >
1742+ 6B95 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1742+ 6B96 50 40       >                db      "P@"               // name string in 7-bit ascii, but
1742+ 6B98             >                org     $-1                 // alter last byte of Name just above to set
1742+ 6B97 C0          >                db      {b $} | END_BIT     // msb as name end
1742+ 6B98             >
1742+ 6B98 80 6B       >                dw      last_NFA            // Link to previous definition Name
1742+ 6B9A             >PFETCH:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1742+ 6B9A ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1742+ 6B9A             >                else
1742+ 6B9A 9C 6B       >                dw      $ + 2   ; ok        // is pointed by CFA
1742+ 6B9C             >                endif           ; ok        // for other definitions it "points" the correct handler
1742+ 6B9C             >                // Use of "; ok" to suppress "warning[fwdref]"
1742+ 6B9C             >
1742+ 6B9C             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1743+ 6B9C D9                           exx
1744+ 6B9D C1                           pop     bc
1745+ 6B9E 26 00                        ld      h, 0
1746+ 6BA0 ED 68                        in      l, (c)
1747+ 6BA2 E5                           push    hl
1748+ 6BA3 D9                           exx
1749+ 6BA4                              next
1749+ 6BA4 DD E9       >                jp      (ix)
1750+ 6BA6
1751+ 6BA6              //  ______________________________________________________________________
1752+ 6BA6              //
1753+ 6BA6              // p!           c a --
1754+ 6BA6              // Send one byte (top of stack) to port a
1755+ 6BA6                              New_Def PSTORE, "P!", is_code, is_normal
1755+ 6BA6             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1755+ 6BA6             >
1755+ 6BA6             >                // dummy db directives used to calculate length of namec
1755+ 6BA6 50 21       >                db      "P!"
1755+ 6BA8             >len_NFA         defl    $ - temp_NFA
1755+ 6BA8             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1755+ 6BA6             >
1755+ 6BA6 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1755+ 6BA7 50 21       >                db      "P!"               // name string in 7-bit ascii, but
1755+ 6BA9             >                org     $-1                 // alter last byte of Name just above to set
1755+ 6BA8 A1          >                db      {b $} | END_BIT     // msb as name end
1755+ 6BA9             >
1755+ 6BA9 95 6B       >                dw      last_NFA            // Link to previous definition Name
1755+ 6BAB             >PSTORE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1755+ 6BAB ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1755+ 6BAB             >                else
1755+ 6BAB AD 6B       >                dw      $ + 2   ; ok        // is pointed by CFA
1755+ 6BAD             >                endif           ; ok        // for other definitions it "points" the correct handler
1755+ 6BAD             >                // Use of "; ok" to suppress "warning[fwdref]"
1755+ 6BAD             >
1755+ 6BAD             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1756+ 6BAD D9                           exx
1757+ 6BAE C1                           pop     bc
1758+ 6BAF E1                           pop     hl                  // < c
1759+ 6BB0 ED 69                        out     (c), l              // low-byte
1760+ 6BB2 D9                           exx
1761+ 6BB3                              next
1761+ 6BB3 DD E9       >                jp      (ix)
1762+ 6BB5
1763+ 6BB5
1764+ 6BB5              //  ______________________________________________________________________
1765+ 6BB5              //
1766+ 6BB5              // 2*           n1 -- n2
1767+ 6BB5              // doubles the number at top of stack
1768+ 6BB5                              New_Def TWO_MUL, "2*", is_code, is_normal
1768+ 6BB5             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1768+ 6BB5             >
1768+ 6BB5             >                // dummy db directives used to calculate length of namec
1768+ 6BB5 32 2A       >                db      "2*"
1768+ 6BB7             >len_NFA         defl    $ - temp_NFA
1768+ 6BB7             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1768+ 6BB5             >
1768+ 6BB5 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1768+ 6BB6 32 2A       >                db      "2*"               // name string in 7-bit ascii, but
1768+ 6BB8             >                org     $-1                 // alter last byte of Name just above to set
1768+ 6BB7 AA          >                db      {b $} | END_BIT     // msb as name end
1768+ 6BB8             >
1768+ 6BB8 A6 6B       >                dw      last_NFA            // Link to previous definition Name
1768+ 6BBA             >TWO_MUL:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1768+ 6BBA ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1768+ 6BBA             >                else
1768+ 6BBA BC 6B       >                dw      $ + 2   ; ok        // is pointed by CFA
1768+ 6BBC             >                endif           ; ok        // for other definitions it "points" the correct handler
1768+ 6BBC             >                // Use of "; ok" to suppress "warning[fwdref]"
1768+ 6BBC             >
1768+ 6BBC             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1769+ 6BBC              Two_Mul_Ptr:
1770+ 6BBC E1                           pop     hl
1771+ 6BBD 29                           add     hl, hl
1772+ 6BBE
1773+ 6BBE                              psh1
1773+ 6BBE E5          >                push    hl
1773+ 6BBF DD E9       >                jp      (ix)
1774+ 6BC1
1775+ 6BC1              //  ______________________________________________________________________
1776+ 6BC1              //
1777+ 6BC1              // 2/           n1 -- n2
1778+ 6BC1              // halves the top of stack, sign is unchanged
1779+ 6BC1                              New_Def TWO_DIV, "2/", is_code, is_normal
1779+ 6BC1             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1779+ 6BC1             >
1779+ 6BC1             >                // dummy db directives used to calculate length of namec
1779+ 6BC1 32 2F       >                db      "2/"
1779+ 6BC3             >len_NFA         defl    $ - temp_NFA
1779+ 6BC3             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1779+ 6BC1             >
1779+ 6BC1 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1779+ 6BC2 32 2F       >                db      "2/"               // name string in 7-bit ascii, but
1779+ 6BC4             >                org     $-1                 // alter last byte of Name just above to set
1779+ 6BC3 AF          >                db      {b $} | END_BIT     // msb as name end
1779+ 6BC4             >
1779+ 6BC4 B5 6B       >                dw      last_NFA            // Link to previous definition Name
1779+ 6BC6             >TWO_DIV:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1779+ 6BC6 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1779+ 6BC6             >                else
1779+ 6BC6 C8 6B       >                dw      $ + 2   ; ok        // is pointed by CFA
1779+ 6BC8             >                endif           ; ok        // for other definitions it "points" the correct handler
1779+ 6BC8             >                // Use of "; ok" to suppress "warning[fwdref]"
1779+ 6BC8             >
1779+ 6BC8             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1780+ 6BC8 E1                           pop     hl
1781+ 6BC9 CB 2C                        sra     h
1782+ 6BCB CB 1D                        rr      l
1783+ 6BCD
1784+ 6BCD                              psh1
1784+ 6BCD E5          >                push    hl
1784+ 6BCE DD E9       >                jp      (ix)
1785+ 6BD0
1786+ 6BD0              //  ______________________________________________________________________
1787+ 6BD0              //
1788+ 6BD0              // lshift       n1 u -- n2
1789+ 6BD0              // bit left shift of u bits
1790+ 6BD0                              New_Def LSHIFT, "LSHIFT", is_code, is_normal
1790+ 6BD0             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1790+ 6BD0             >
1790+ 6BD0             >                // dummy db directives used to calculate length of namec
1790+ 6BD0 4C 53 48 49 >                db      "LSHIFT"
1790+ 6BD4 46 54       >
1790+ 6BD6             >len_NFA         defl    $ - temp_NFA
1790+ 6BD6             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1790+ 6BD0             >
1790+ 6BD0 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1790+ 6BD1 4C 53 48 49 >                db      "LSHIFT"               // name string in 7-bit ascii, but
1790+ 6BD5 46 54       >
1790+ 6BD7             >                org     $-1                 // alter last byte of Name just above to set
1790+ 6BD6 D4          >                db      {b $} | END_BIT     // msb as name end
1790+ 6BD7             >
1790+ 6BD7 C1 6B       >                dw      last_NFA            // Link to previous definition Name
1790+ 6BD9             >LSHIFT:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1790+ 6BD9 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1790+ 6BD9             >                else
1790+ 6BD9 DB 6B       >                dw      $ + 2   ; ok        // is pointed by CFA
1790+ 6BDB             >                endif           ; ok        // for other definitions it "points" the correct handler
1790+ 6BDB             >                // Use of "; ok" to suppress "warning[fwdref]"
1790+ 6BDB             >
1790+ 6BDB             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1791+ 6BDB D1                           pop     de
1792+ 6BDC
1793+ 6BDC E1                           pop     hl
1794+ 6BDD 7B                           ld      a, e
1795+ 6BDE B7                           or      a
1796+ 6BDF 28 04                        jr      z, Lshift_Zero
1797+ 6BE1              Lshift_Loop:
1798+ 6BE1 29                                   add     hl, hl
1799+ 6BE2 3D                                   dec     a
1800+ 6BE3 20 FC                            jr      nz, Lshift_Loop
1801+ 6BE5              Lshift_Zero:
1802+ 6BE5
1803+ 6BE5
1804+ 6BE5                              psh1
1804+ 6BE5 E5          >                push    hl
1804+ 6BE6 DD E9       >                jp      (ix)
1805+ 6BE8
1806+ 6BE8              //  ______________________________________________________________________
1807+ 6BE8              //
1808+ 6BE8              // rshift       n1 u -- n2
1809+ 6BE8              // bit right shift of u bits
1810+ 6BE8                              New_Def RSHIFT, "RSHIFT", is_code, is_normal
1810+ 6BE8             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1810+ 6BE8             >
1810+ 6BE8             >                // dummy db directives used to calculate length of namec
1810+ 6BE8 52 53 48 49 >                db      "RSHIFT"
1810+ 6BEC 46 54       >
1810+ 6BEE             >len_NFA         defl    $ - temp_NFA
1810+ 6BEE             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1810+ 6BE8             >
1810+ 6BE8 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1810+ 6BE9 52 53 48 49 >                db      "RSHIFT"               // name string in 7-bit ascii, but
1810+ 6BED 46 54       >
1810+ 6BEF             >                org     $-1                 // alter last byte of Name just above to set
1810+ 6BEE D4          >                db      {b $} | END_BIT     // msb as name end
1810+ 6BEF             >
1810+ 6BEF D0 6B       >                dw      last_NFA            // Link to previous definition Name
1810+ 6BF1             >RSHIFT:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1810+ 6BF1 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1810+ 6BF1             >                else
1810+ 6BF1 F3 6B       >                dw      $ + 2   ; ok        // is pointed by CFA
1810+ 6BF3             >                endif           ; ok        // for other definitions it "points" the correct handler
1810+ 6BF3             >                // Use of "; ok" to suppress "warning[fwdref]"
1810+ 6BF3             >
1810+ 6BF3             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1811+ 6BF3 D1                           pop     de
1812+ 6BF4
1813+ 6BF4 E1                           pop     hl
1814+ 6BF5 7B                           ld      a, e
1815+ 6BF6 B7                           or      a
1816+ 6BF7 28 07                        jr      z, Rshift_Zero
1817+ 6BF9              Rshift_Loop:
1818+ 6BF9 CB 3C                                srl     h
1819+ 6BFB CB 1D                                rr      l
1820+ 6BFD 3D                                   dec     a
1821+ 6BFE 20 F9                            jr      nz, Rshift_Loop
1822+ 6C00              Rshift_Zero:
1823+ 6C00
1824+ 6C00
1825+ 6C00                              psh1
1825+ 6C00 E5          >                push    hl
1825+ 6C01 DD E9       >                jp      (ix)
1826+ 6C03
1827+ 6C03              //  ______________________________________________________________________
1828+ 6C03              //
1829+ 6C03              // cells        n1 -- n2
1830+ 6C03              // decrement by 2 top of stack
1831+ 6C03                              New_Def CELLS, "CELLS", Two_Mul_Ptr, is_normal
1831+ 6C03             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1831+ 6C03             >
1831+ 6C03             >                // dummy db directives used to calculate length of namec
1831+ 6C03 43 45 4C 4C >                db      "CELLS"
1831+ 6C07 53          >
1831+ 6C08             >len_NFA         defl    $ - temp_NFA
1831+ 6C08             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1831+ 6C03             >
1831+ 6C03 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1831+ 6C04 43 45 4C 4C >                db      "CELLS"               // name string in 7-bit ascii, but
1831+ 6C08 53          >
1831+ 6C09             >                org     $-1                 // alter last byte of Name just above to set
1831+ 6C08 D3          >                db      {b $} | END_BIT     // msb as name end
1831+ 6C09             >
1831+ 6C09 E8 6B       >                dw      last_NFA            // Link to previous definition Name
1831+ 6C0B             >CELLS:          if Two_Mul_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1831+ 6C0B BC 6B       >                dw      Two_Mul_Ptr ; ok        // for primitive definitions  actual code
1831+ 6C0D             >                else
1831+ 6C0D ~           >                dw      $ + 2   ; ok        // is pointed by CFA
1831+ 6C0D             >                endif           ; ok        // for other definitions it "points" the correct handler
1831+ 6C0D             >                // Use of "; ok" to suppress "warning[fwdref]"
1831+ 6C0D             >
1831+ 6C0D             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1832+ 6C0D
1833+ 6C0D
1834+ 6C0D              //  ______________________________________________________________________
1835+ 6C0D
# file closed: C:\Zx\CSpect\Projects\vForth15_INDIRECT/source/L0.asm
 109  6C0D                              include "L1.asm"
# file opened: C:\Zx\CSpect\Projects\vForth15_INDIRECT/source/L1.asm
   1+ 6C0D              //  ______________________________________________________________________
   2+ 6C0D              //
   3+ 6C0D              //  L1.asm
   4+ 6C0D              //
   5+ 6C0D              //  Level-1 definitions and derivate
   6+ 6C0D              //  ______________________________________________________________________
   7+ 6C0D
   8+ 6C0D              //  ______________________________________________________________________
   9+ 6C0D              //
  10+ 6C0D              // :            -- cccc     ( compile time )
  11+ 6C0D              //              i*x -- j*x  ( run time )
  12+ 6C0D              // Colon Definition
  13+ 6C0D                              Colon_Def COLON, ":", is_immediate      // has forward-ref
  13+ 6C0D             >                New_Def  COLON, ":", Enter_Ptr, is_immediate ; ok
  13+ 6C0D             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  13+ 6C0D             >
  13+ 6C0D             >                // dummy db directives used to calculate length of namec
  13+ 6C0D 3A          >                db      ":"
  13+ 6C0E             >len_NFA         defl    $ - temp_NFA
  13+ 6C0E             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  13+ 6C0D             >
  13+ 6C0D C1          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
  13+ 6C0E 3A          >                db      ":"               // name string in 7-bit ascii, but
  13+ 6C0F             >                org     $-1                 // alter last byte of Name just above to set
  13+ 6C0E BA          >                db      {b $} | END_BIT     // msb as name end
  13+ 6C0F             >
  13+ 6C0F 03 6C       >                dw      last_NFA            // Link to previous definition Name
  13+ 6C11             >COLON:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
  13+ 6C11 27 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
  13+ 6C13             >                else
  13+ 6C13 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
  13+ 6C13             >                endif           ; ok        // for other definitions it "points" the correct handler
  13+ 6C13             >                // Use of "; ok" to suppress "warning[fwdref]"
  13+ 6C13             >
  13+ 6C13             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  14+ 6C13
  15+ 6C13 7D 70                        dw      QEXEC                   // ?exec
  16+ 6C15 38 70                        dw      STORE_CSP               // !csp
  17+ 6C17 E2 6D 3C 6B                  dw      CURRENT, FETCH          // current @
  18+ 6C1B D5 6D 49 6B                  dw      CONTEXT, STORE          // context !
  19+ 6C1F 7D 76                        dw      CREATE                  // create  ( forward )
  20+ 6C21 2A 71                        dw      SMUDGE                  // dmudge
  21+ 6C23 15 71                        dw      SQUARED_CLOSE           // ]
  22+ 6C25 80 71                        dw      C_SEMICOLON_CODE        // ;code ( change the 3-bytes CFA of defining word to call Enter_Ptr )
  23+ 6C27                                                              // ... immediate
  24+ 6C27              Enter_Ptr:
  25+ 6C27                              // via call coded in CFA
  26+ 6C27                              ldhlrp
  26+ 6C27 2A 96 63    >                ld      hl,(RP_Pointer)
  27+ 6C2A 2B                           dec     hl                  // push on Return-Stack current Instruction-Pointer
  28+ 6C2B 70                           ld      (hl), b
  29+ 6C2C 2B                           dec     hl
  30+ 6C2D 71                           ld      (hl), c
  31+ 6C2E                              ldrphl
  31+ 6C2E 22 96 63    >                ld      (RP_Pointer),hl
  32+ 6C31 13                           inc     de
  33+ 6C32 4B                           ld      c, e
  34+ 6C33 42                           ld      b, d
  35+ 6C34                              next
  35+ 6C34 DD E9       >                jp      (ix)
  36+ 6C36
  37+ 6C36              //  ______________________________________________________________________
  38+ 6C36              //
  39+ 6C36              // ;            --
  40+ 6C36              // Semicolon. End of Colon-Definition. Stack must be balanced.
  41+ 6C36                              Colon_Def SEMICOLON, ";", is_immediate   // has forward-ref
  41+ 6C36             >                New_Def  SEMICOLON, ";", Enter_Ptr, is_immediate ; ok
  41+ 6C36             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  41+ 6C36             >
  41+ 6C36             >                // dummy db directives used to calculate length of namec
  41+ 6C36 3B          >                db      ";"
  41+ 6C37             >len_NFA         defl    $ - temp_NFA
  41+ 6C37             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  41+ 6C36             >
  41+ 6C36 C1          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
  41+ 6C37 3B          >                db      ";"               // name string in 7-bit ascii, but
  41+ 6C38             >                org     $-1                 // alter last byte of Name just above to set
  41+ 6C37 BB          >                db      {b $} | END_BIT     // msb as name end
  41+ 6C38             >
  41+ 6C38 0D 6C       >                dw      last_NFA            // Link to previous definition Name
  41+ 6C3A             >SEMICOLON:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
  41+ 6C3A 27 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
  41+ 6C3C             >                else
  41+ 6C3C ~           >                dw      $ + 2   ; ok        // is pointed by CFA
  41+ 6C3C             >                endif           ; ok        // for other definitions it "points" the correct handler
  41+ 6C3C             >                // Use of "; ok" to suppress "warning[fwdref]"
  41+ 6C3C             >
  41+ 6C3C             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  42+ 6C3C
  43+ 6C3C A7 70                        dw      QCSP                    // ?csp
  44+ 6C3E DE 70 23 69                  dw      COMPILE, EXIT           // [compile] ;s
  45+ 6C42 2A 71                        dw      SMUDGE                  // smudge
  46+ 6C44 07 71                        dw      SQUARED_OPEN            // [
  47+ 6C46 23 69                        dw      EXIT                    // ; immediate
  48+ 6C48
  49+ 6C48              //  ______________________________________________________________________
  50+ 6C48              //
  51+ 6C48              // noop         --
  52+ 6C48
  53+ 6C48                              Colon_Def NOOP, "NOOP", is_normal
  53+ 6C48             >                New_Def  NOOP, "NOOP", Enter_Ptr, is_normal ; ok
  53+ 6C48             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  53+ 6C48             >
  53+ 6C48             >                // dummy db directives used to calculate length of namec
  53+ 6C48 4E 4F 4F 50 >                db      "NOOP"
  53+ 6C4C             >len_NFA         defl    $ - temp_NFA
  53+ 6C4C             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  53+ 6C48             >
  53+ 6C48 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  53+ 6C49 4E 4F 4F 50 >                db      "NOOP"               // name string in 7-bit ascii, but
  53+ 6C4D             >                org     $-1                 // alter last byte of Name just above to set
  53+ 6C4C D0          >                db      {b $} | END_BIT     // msb as name end
  53+ 6C4D             >
  53+ 6C4D 36 6C       >                dw      last_NFA            // Link to previous definition Name
  53+ 6C4F             >NOOP:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
  53+ 6C4F 27 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
  53+ 6C51             >                else
  53+ 6C51 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
  53+ 6C51             >                endif           ; ok        // for other definitions it "points" the correct handler
  53+ 6C51             >                // Use of "; ok" to suppress "warning[fwdref]"
  53+ 6C51             >
  53+ 6C51             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  54+ 6C51 23 69                        dw      EXIT
  55+ 6C53
  56+ 6C53              //  ______________________________________________________________________
  57+ 6C53              //
  58+ 6C53              // constant     n -- cccc     ( compile time )
  59+ 6C53              //              -- n          ( run time )
  60+ 6C53              // Constant definition.
  61+ 6C53                              Colon_Def CONSTANT, "CONSTANT", is_normal   // has forward-ref
  61+ 6C53             >                New_Def  CONSTANT, "CONSTANT", Enter_Ptr, is_normal ; ok
  61+ 6C53             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  61+ 6C53             >
  61+ 6C53             >                // dummy db directives used to calculate length of namec
  61+ 6C53 43 4F 4E 53 >                db      "CONSTANT"
  61+ 6C57 54 41 4E 54 >
  61+ 6C5B             >len_NFA         defl    $ - temp_NFA
  61+ 6C5B             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  61+ 6C53             >
  61+ 6C53 88          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  61+ 6C54 43 4F 4E 53 >                db      "CONSTANT"               // name string in 7-bit ascii, but
  61+ 6C58 54 41 4E 54 >
  61+ 6C5C             >                org     $-1                 // alter last byte of Name just above to set
  61+ 6C5B D4          >                db      {b $} | END_BIT     // msb as name end
  61+ 6C5C             >
  61+ 6C5C 48 6C       >                dw      last_NFA            // Link to previous definition Name
  61+ 6C5E             >CONSTANT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
  61+ 6C5E 27 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
  61+ 6C60             >                else
  61+ 6C60 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
  61+ 6C60             >                endif           ; ok        // for other definitions it "points" the correct handler
  61+ 6C60             >                // Use of "; ok" to suppress "warning[fwdref]"
  61+ 6C60             >
  61+ 6C60             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  62+ 6C60
  63+ 6C60 7D 76                        dw      CREATE                  // create
  64+ 6C62 9D 6E                        dw      COMMA                   // ,    ( at PFA then, store the value )
  65+ 6C64 80 71                        dw      C_SEMICOLON_CODE        // ;code (  changes the 3-bytes CFA to call Constant_Ptr )
  66+ 6C66              Constant_Ptr:
  67+ 6C66
  68+ 6C66 13                           inc     de
  69+ 6C67 EB                           ex      de, hl
  70+ 6C68
  71+ 6C68 5E                           ld      e, (hl)
  72+ 6C69 23                           inc     hl
  73+ 6C6A 56                           ld      d, (hl)
  74+ 6C6B D5                           push    de
  75+ 6C6C                              next
  75+ 6C6C DD E9       >                jp      (ix)
  76+ 6C6E
  77+ 6C6E              //  ______________________________________________________________________
  78+ 6C6E              //
  79+ 6C6E              // variable     n -- cccc     ( compile time )
  80+ 6C6E              //              -- a          ( run time )
  81+ 6C6E              // Variable definition, n is the initial value.
  82+ 6C6E                              Colon_Def VARIABLE, "VARIABLE", is_normal   // has forward-ref
  82+ 6C6E             >                New_Def  VARIABLE, "VARIABLE", Enter_Ptr, is_normal ; ok
  82+ 6C6E             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  82+ 6C6E             >
  82+ 6C6E             >                // dummy db directives used to calculate length of namec
  82+ 6C6E 56 41 52 49 >                db      "VARIABLE"
  82+ 6C72 41 42 4C 45 >
  82+ 6C76             >len_NFA         defl    $ - temp_NFA
  82+ 6C76             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  82+ 6C6E             >
  82+ 6C6E 88          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  82+ 6C6F 56 41 52 49 >                db      "VARIABLE"               // name string in 7-bit ascii, but
  82+ 6C73 41 42 4C 45 >
  82+ 6C77             >                org     $-1                 // alter last byte of Name just above to set
  82+ 6C76 C5          >                db      {b $} | END_BIT     // msb as name end
  82+ 6C77             >
  82+ 6C77 53 6C       >                dw      last_NFA            // Link to previous definition Name
  82+ 6C79             >VARIABLE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
  82+ 6C79 27 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
  82+ 6C7B             >                else
  82+ 6C7B ~           >                dw      $ + 2   ; ok        // is pointed by CFA
  82+ 6C7B             >                endif           ; ok        // for other definitions it "points" the correct handler
  82+ 6C7B             >                // Use of "; ok" to suppress "warning[fwdref]"
  82+ 6C7B             >
  82+ 6C7B             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  83+ 6C7B
  84+ 6C7B 5E 6C                        dw      CONSTANT                // constant
  85+ 6C7D 80 71                        dw      C_SEMICOLON_CODE        // ;code ( changes the 3-bytes CFA to call Variable_Ptr )
  86+ 6C7F              Variable_Ptr:
  87+ 6C7F
  88+ 6C7F 13                           inc     de
  89+ 6C80 D5                           push    de                  // balance TOS before overwrite it
  90+ 6C81
  91+ 6C81                              next
  91+ 6C81 DD E9       >                jp      (ix)
  92+ 6C83
  93+ 6C83              //  ______________________________________________________________________
  94+ 6C83              //
  95+ 6C83              // user         b -- cccc     ( compile time )
  96+ 6C83              //              -- a          ( run time )
  97+ 6C83              // User variable definition
  98+ 6C83                              Colon_Def USER, "USER", is_normal
  98+ 6C83             >                New_Def  USER, "USER", Enter_Ptr, is_normal ; ok
  98+ 6C83             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  98+ 6C83             >
  98+ 6C83             >                // dummy db directives used to calculate length of namec
  98+ 6C83 55 53 45 52 >                db      "USER"
  98+ 6C87             >len_NFA         defl    $ - temp_NFA
  98+ 6C87             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  98+ 6C83             >
  98+ 6C83 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  98+ 6C84 55 53 45 52 >                db      "USER"               // name string in 7-bit ascii, but
  98+ 6C88             >                org     $-1                 // alter last byte of Name just above to set
  98+ 6C87 D2          >                db      {b $} | END_BIT     // msb as name end
  98+ 6C88             >
  98+ 6C88 6E 6C       >                dw      last_NFA            // Link to previous definition Name
  98+ 6C8A             >USER:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
  98+ 6C8A 27 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
  98+ 6C8C             >                else
  98+ 6C8C ~           >                dw      $ + 2   ; ok        // is pointed by CFA
  98+ 6C8C             >                endif           ; ok        // for other definitions it "points" the correct handler
  98+ 6C8C             >                // Use of "; ok" to suppress "warning[fwdref]"
  98+ 6C8C             >
  98+ 6C8C             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  99+ 6C8C
 100+ 6C8C 7D 76                        dw      CREATE                  // create
 101+ 6C8E AE 6E                        dw      CCOMMA                  // c,
 102+ 6C90 80 71                        dw      C_SEMICOLON_CODE        // ;code () changes the 3-bytes CFA to call User_Ptr )
 103+ 6C92
 104+ 6C92
 105+ 6C92              User_Ptr:
 106+ 6C92                              // via call coded in CFA
 107+ 6C92 13                           inc     de
 108+ 6C93 EB                           ex      de, hl
 109+ 6C94 5E                           ld      e, (hl)
 110+ 6C95 16 00                        ld      d, 0
 111+ 6C97 2A 94 63                     ld      hl, (USER_Pointer)
 112+ 6C9A 19                           add     hl, de
 113+ 6C9B
 114+ 6C9B                              psh1
 114+ 6C9B E5          >                push    hl
 114+ 6C9C DD E9       >                jp      (ix)
 115+ 6C9E
 116+ 6C9E              //  ______________________________________________________________________
 117+ 6C9E              //
 118+ 6C9E                              Constant_Def ZERO       ,   "0"     ,   0
 118+ 6C9E             >                New_Def  ZERO, "0", Constant_Ptr, is_normal
 118+ 6C9E             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 118+ 6C9E             >
 118+ 6C9E             >                // dummy db directives used to calculate length of namec
 118+ 6C9E 30          >                db      "0"
 118+ 6C9F             >len_NFA         defl    $ - temp_NFA
 118+ 6C9F             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 118+ 6C9E             >
 118+ 6C9E 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 118+ 6C9F 30          >                db      "0"               // name string in 7-bit ascii, but
 118+ 6CA0             >                org     $-1                 // alter last byte of Name just above to set
 118+ 6C9F B0          >                db      {b $} | END_BIT     // msb as name end
 118+ 6CA0             >
 118+ 6CA0 83 6C       >                dw      last_NFA            // Link to previous definition Name
 118+ 6CA2             >ZERO:          if Constant_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 118+ 6CA2 66 6C       >                dw      Constant_Ptr ; ok        // for primitive definitions  actual code
 118+ 6CA4             >                else
 118+ 6CA4 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 118+ 6CA4             >                endif           ; ok        // for other definitions it "points" the correct handler
 118+ 6CA4             >                // Use of "; ok" to suppress "warning[fwdref]"
 118+ 6CA4             >
 118+ 6CA4             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 118+ 6CA4 00 00       >                dw      0
 119+ 6CA6                              Constant_Def ONE        ,   "1"     ,   1
 119+ 6CA6             >                New_Def  ONE, "1", Constant_Ptr, is_normal
 119+ 6CA6             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 119+ 6CA6             >
 119+ 6CA6             >                // dummy db directives used to calculate length of namec
 119+ 6CA6 31          >                db      "1"
 119+ 6CA7             >len_NFA         defl    $ - temp_NFA
 119+ 6CA7             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 119+ 6CA6             >
 119+ 6CA6 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 119+ 6CA7 31          >                db      "1"               // name string in 7-bit ascii, but
 119+ 6CA8             >                org     $-1                 // alter last byte of Name just above to set
 119+ 6CA7 B1          >                db      {b $} | END_BIT     // msb as name end
 119+ 6CA8             >
 119+ 6CA8 9E 6C       >                dw      last_NFA            // Link to previous definition Name
 119+ 6CAA             >ONE:          if Constant_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 119+ 6CAA 66 6C       >                dw      Constant_Ptr ; ok        // for primitive definitions  actual code
 119+ 6CAC             >                else
 119+ 6CAC ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 119+ 6CAC             >                endif           ; ok        // for other definitions it "points" the correct handler
 119+ 6CAC             >                // Use of "; ok" to suppress "warning[fwdref]"
 119+ 6CAC             >
 119+ 6CAC             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 119+ 6CAC 01 00       >                dw      1
 120+ 6CAE                              Constant_Def TWO        ,   "2"     ,   2
 120+ 6CAE             >                New_Def  TWO, "2", Constant_Ptr, is_normal
 120+ 6CAE             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 120+ 6CAE             >
 120+ 6CAE             >                // dummy db directives used to calculate length of namec
 120+ 6CAE 32          >                db      "2"
 120+ 6CAF             >len_NFA         defl    $ - temp_NFA
 120+ 6CAF             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 120+ 6CAE             >
 120+ 6CAE 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 120+ 6CAF 32          >                db      "2"               // name string in 7-bit ascii, but
 120+ 6CB0             >                org     $-1                 // alter last byte of Name just above to set
 120+ 6CAF B2          >                db      {b $} | END_BIT     // msb as name end
 120+ 6CB0             >
 120+ 6CB0 A6 6C       >                dw      last_NFA            // Link to previous definition Name
 120+ 6CB2             >TWO:          if Constant_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 120+ 6CB2 66 6C       >                dw      Constant_Ptr ; ok        // for primitive definitions  actual code
 120+ 6CB4             >                else
 120+ 6CB4 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 120+ 6CB4             >                endif           ; ok        // for other definitions it "points" the correct handler
 120+ 6CB4             >                // Use of "; ok" to suppress "warning[fwdref]"
 120+ 6CB4             >
 120+ 6CB4             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 120+ 6CB4 02 00       >                dw      2
 121+ 6CB6                              Constant_Def THREE      ,   "3"     ,   3
 121+ 6CB6             >                New_Def  THREE, "3", Constant_Ptr, is_normal
 121+ 6CB6             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 121+ 6CB6             >
 121+ 6CB6             >                // dummy db directives used to calculate length of namec
 121+ 6CB6 33          >                db      "3"
 121+ 6CB7             >len_NFA         defl    $ - temp_NFA
 121+ 6CB7             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 121+ 6CB6             >
 121+ 6CB6 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 121+ 6CB7 33          >                db      "3"               // name string in 7-bit ascii, but
 121+ 6CB8             >                org     $-1                 // alter last byte of Name just above to set
 121+ 6CB7 B3          >                db      {b $} | END_BIT     // msb as name end
 121+ 6CB8             >
 121+ 6CB8 AE 6C       >                dw      last_NFA            // Link to previous definition Name
 121+ 6CBA             >THREE:          if Constant_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 121+ 6CBA 66 6C       >                dw      Constant_Ptr ; ok        // for primitive definitions  actual code
 121+ 6CBC             >                else
 121+ 6CBC ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 121+ 6CBC             >                endif           ; ok        // for other definitions it "points" the correct handler
 121+ 6CBC             >                // Use of "; ok" to suppress "warning[fwdref]"
 121+ 6CBC             >
 121+ 6CBC             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 121+ 6CBC 03 00       >                dw      3
 122+ 6CBE                              Constant_Def NEG_ONE    ,   "-1"    ,  -1
 122+ 6CBE             >                New_Def  NEG_ONE, "-1", Constant_Ptr, is_normal
 122+ 6CBE             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 122+ 6CBE             >
 122+ 6CBE             >                // dummy db directives used to calculate length of namec
 122+ 6CBE 2D 31       >                db      "-1"
 122+ 6CC0             >len_NFA         defl    $ - temp_NFA
 122+ 6CC0             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 122+ 6CBE             >
 122+ 6CBE 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 122+ 6CBF 2D 31       >                db      "-1"               // name string in 7-bit ascii, but
 122+ 6CC1             >                org     $-1                 // alter last byte of Name just above to set
 122+ 6CC0 B1          >                db      {b $} | END_BIT     // msb as name end
 122+ 6CC1             >
 122+ 6CC1 B6 6C       >                dw      last_NFA            // Link to previous definition Name
 122+ 6CC3             >NEG_ONE:          if Constant_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 122+ 6CC3 66 6C       >                dw      Constant_Ptr ; ok        // for primitive definitions  actual code
 122+ 6CC5             >                else
 122+ 6CC5 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 122+ 6CC5             >                endif           ; ok        // for other definitions it "points" the correct handler
 122+ 6CC5             >                // Use of "; ok" to suppress "warning[fwdref]"
 122+ 6CC5             >
 122+ 6CC5             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 122+ 6CC5 FF FF       >                dw      -1
 123+ 6CC7                              Constant_Def BL         ,   "BL"    , $20
 123+ 6CC7             >                New_Def  BL, "BL", Constant_Ptr, is_normal
 123+ 6CC7             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 123+ 6CC7             >
 123+ 6CC7             >                // dummy db directives used to calculate length of namec
 123+ 6CC7 42 4C       >                db      "BL"
 123+ 6CC9             >len_NFA         defl    $ - temp_NFA
 123+ 6CC9             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 123+ 6CC7             >
 123+ 6CC7 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 123+ 6CC8 42 4C       >                db      "BL"               // name string in 7-bit ascii, but
 123+ 6CCA             >                org     $-1                 // alter last byte of Name just above to set
 123+ 6CC9 CC          >                db      {b $} | END_BIT     // msb as name end
 123+ 6CCA             >
 123+ 6CCA BE 6C       >                dw      last_NFA            // Link to previous definition Name
 123+ 6CCC             >BL:          if Constant_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 123+ 6CCC 66 6C       >                dw      Constant_Ptr ; ok        // for primitive definitions  actual code
 123+ 6CCE             >                else
 123+ 6CCE ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 123+ 6CCE             >                endif           ; ok        // for other definitions it "points" the correct handler
 123+ 6CCE             >                // Use of "; ok" to suppress "warning[fwdref]"
 123+ 6CCE             >
 123+ 6CCE             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 123+ 6CCE 20 00       >                dw      $20
 124+ 6CD0                              Constant_Def CL         ,   "C/L"   ,  64
 124+ 6CD0             >                New_Def  CL, "C/L", Constant_Ptr, is_normal
 124+ 6CD0             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 124+ 6CD0             >
 124+ 6CD0             >                // dummy db directives used to calculate length of namec
 124+ 6CD0 43 2F 4C    >                db      "C/L"
 124+ 6CD3             >len_NFA         defl    $ - temp_NFA
 124+ 6CD3             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 124+ 6CD0             >
 124+ 6CD0 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 124+ 6CD1 43 2F 4C    >                db      "C/L"               // name string in 7-bit ascii, but
 124+ 6CD4             >                org     $-1                 // alter last byte of Name just above to set
 124+ 6CD3 CC          >                db      {b $} | END_BIT     // msb as name end
 124+ 6CD4             >
 124+ 6CD4 C7 6C       >                dw      last_NFA            // Link to previous definition Name
 124+ 6CD6             >CL:          if Constant_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 124+ 6CD6 66 6C       >                dw      Constant_Ptr ; ok        // for primitive definitions  actual code
 124+ 6CD8             >                else
 124+ 6CD8 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 124+ 6CD8             >                endif           ; ok        // for other definitions it "points" the correct handler
 124+ 6CD8             >                // Use of "; ok" to suppress "warning[fwdref]"
 124+ 6CD8             >
 124+ 6CD8             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 124+ 6CD8 40 00       >                dw      64
 125+ 6CDA                              Constant_Def BBUF       ,   "B/BUF" , 512
 125+ 6CDA             >                New_Def  BBUF, "B/BUF", Constant_Ptr, is_normal
 125+ 6CDA             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 125+ 6CDA             >
 125+ 6CDA             >                // dummy db directives used to calculate length of namec
 125+ 6CDA 42 2F 42 55 >                db      "B/BUF"
 125+ 6CDE 46          >
 125+ 6CDF             >len_NFA         defl    $ - temp_NFA
 125+ 6CDF             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 125+ 6CDA             >
 125+ 6CDA 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 125+ 6CDB 42 2F 42 55 >                db      "B/BUF"               // name string in 7-bit ascii, but
 125+ 6CDF 46          >
 125+ 6CE0             >                org     $-1                 // alter last byte of Name just above to set
 125+ 6CDF C6          >                db      {b $} | END_BIT     // msb as name end
 125+ 6CE0             >
 125+ 6CE0 D0 6C       >                dw      last_NFA            // Link to previous definition Name
 125+ 6CE2             >BBUF:          if Constant_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 125+ 6CE2 66 6C       >                dw      Constant_Ptr ; ok        // for primitive definitions  actual code
 125+ 6CE4             >                else
 125+ 6CE4 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 125+ 6CE4             >                endif           ; ok        // for other definitions it "points" the correct handler
 125+ 6CE4             >                // Use of "; ok" to suppress "warning[fwdref]"
 125+ 6CE4             >
 125+ 6CE4             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 125+ 6CE4 00 02       >                dw      512
 126+ 6CE6                              Constant_Def BSCR       ,   "B/SCR" ,   2
 126+ 6CE6             >                New_Def  BSCR, "B/SCR", Constant_Ptr, is_normal
 126+ 6CE6             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 126+ 6CE6             >
 126+ 6CE6             >                // dummy db directives used to calculate length of namec
 126+ 6CE6 42 2F 53 43 >                db      "B/SCR"
 126+ 6CEA 52          >
 126+ 6CEB             >len_NFA         defl    $ - temp_NFA
 126+ 6CEB             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 126+ 6CE6             >
 126+ 6CE6 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 126+ 6CE7 42 2F 53 43 >                db      "B/SCR"               // name string in 7-bit ascii, but
 126+ 6CEB 52          >
 126+ 6CEC             >                org     $-1                 // alter last byte of Name just above to set
 126+ 6CEB D2          >                db      {b $} | END_BIT     // msb as name end
 126+ 6CEC             >
 126+ 6CEC DA 6C       >                dw      last_NFA            // Link to previous definition Name
 126+ 6CEE             >BSCR:          if Constant_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 126+ 6CEE 66 6C       >                dw      Constant_Ptr ; ok        // for primitive definitions  actual code
 126+ 6CF0             >                else
 126+ 6CF0 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 126+ 6CF0             >                endif           ; ok        // for other definitions it "points" the correct handler
 126+ 6CF0             >                // Use of "; ok" to suppress "warning[fwdref]"
 126+ 6CF0             >
 126+ 6CF0             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 126+ 6CF0 02 00       >                dw      2
 127+ 6CF2                              Constant_Def LSCR       ,   "L/SCR" ,  16
 127+ 6CF2             >                New_Def  LSCR, "L/SCR", Constant_Ptr, is_normal
 127+ 6CF2             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 127+ 6CF2             >
 127+ 6CF2             >                // dummy db directives used to calculate length of namec
 127+ 6CF2 4C 2F 53 43 >                db      "L/SCR"
 127+ 6CF6 52          >
 127+ 6CF7             >len_NFA         defl    $ - temp_NFA
 127+ 6CF7             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 127+ 6CF2             >
 127+ 6CF2 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 127+ 6CF3 4C 2F 53 43 >                db      "L/SCR"               // name string in 7-bit ascii, but
 127+ 6CF7 52          >
 127+ 6CF8             >                org     $-1                 // alter last byte of Name just above to set
 127+ 6CF7 D2          >                db      {b $} | END_BIT     // msb as name end
 127+ 6CF8             >
 127+ 6CF8 E6 6C       >                dw      last_NFA            // Link to previous definition Name
 127+ 6CFA             >LSCR:          if Constant_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 127+ 6CFA 66 6C       >                dw      Constant_Ptr ; ok        // for primitive definitions  actual code
 127+ 6CFC             >                else
 127+ 6CFC ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 127+ 6CFC             >                endif           ; ok        // for other definitions it "points" the correct handler
 127+ 6CFC             >                // Use of "; ok" to suppress "warning[fwdref]"
 127+ 6CFC             >
 127+ 6CFC             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 127+ 6CFC 10 00       >                dw      16
 128+ 6CFE
 129+ 6CFE              //  ______________________________________________________________________
 130+ 6CFE              //
 131+ 6CFE              // +origin         --
 132+ 6CFE              //              Colon_Def PLUS_ORIGIN, "+ORIGIN", is_normal
 133+ 6CFE              //              dw      LIT, Cold_origin        // [ hex 6366 ] literal
 134+ 6CFE              //              dw      PLUS                    // +
 135+ 6CFE              //              dw      EXIT                    // ;
 136+ 6CFE                              New_Def PLUS_ORIGIN, "+ORIGIN", is_code, is_normal
 136+ 6CFE             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 136+ 6CFE             >
 136+ 6CFE             >                // dummy db directives used to calculate length of namec
 136+ 6CFE 2B 4F 52 49 >                db      "+ORIGIN"
 136+ 6D02 47 49 4E    >
 136+ 6D05             >len_NFA         defl    $ - temp_NFA
 136+ 6D05             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 136+ 6CFE             >
 136+ 6CFE 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 136+ 6CFF 2B 4F 52 49 >                db      "+ORIGIN"               // name string in 7-bit ascii, but
 136+ 6D03 47 49 4E    >
 136+ 6D06             >                org     $-1                 // alter last byte of Name just above to set
 136+ 6D05 CE          >                db      {b $} | END_BIT     // msb as name end
 136+ 6D06             >
 136+ 6D06 F2 6C       >                dw      last_NFA            // Link to previous definition Name
 136+ 6D08             >PLUS_ORIGIN:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 136+ 6D08 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
 136+ 6D08             >                else
 136+ 6D08 0A 6D       >                dw      $ + 2   ; ok        // is pointed by CFA
 136+ 6D0A             >                endif           ; ok        // for other definitions it "points" the correct handler
 136+ 6D0A             >                // Use of "; ok" to suppress "warning[fwdref]"
 136+ 6D0A             >
 136+ 6D0A             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 137+ 6D0A E1                           pop     hl
 138+ 6D0B 11 66 63                     ld      de,  Cold_origin
 139+ 6D0E 19                           add     hl, de
 140+ 6D0F E5                           push    hl
 141+ 6D10                              next
 141+ 6D10 DD E9       >                jp      (ix)
 142+ 6D12
 143+ 6D12
 144+ 6D12              //  ______________________________________________________________________
 145+ 6D12              //
 146+ 6D12                              Constant_Def CNEXT      ,   "(NEXT)", Next_Ptr
 146+ 6D12             >                New_Def  CNEXT, "(NEXT)", Constant_Ptr, is_normal
 146+ 6D12             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 146+ 6D12             >
 146+ 6D12             >                // dummy db directives used to calculate length of namec
 146+ 6D12 28 4E 45 58 >                db      "(NEXT)"
 146+ 6D16 54 29       >
 146+ 6D18             >len_NFA         defl    $ - temp_NFA
 146+ 6D18             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 146+ 6D12             >
 146+ 6D12 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 146+ 6D13 28 4E 45 58 >                db      "(NEXT)"               // name string in 7-bit ascii, but
 146+ 6D17 54 29       >
 146+ 6D19             >                org     $-1                 // alter last byte of Name just above to set
 146+ 6D18 A9          >                db      {b $} | END_BIT     // msb as name end
 146+ 6D19             >
 146+ 6D19 FE 6C       >                dw      last_NFA            // Link to previous definition Name
 146+ 6D1B             >CNEXT:          if Constant_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 146+ 6D1B 66 6C       >                dw      Constant_Ptr ; ok        // for primitive definitions  actual code
 146+ 6D1D             >                else
 146+ 6D1D ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 146+ 6D1D             >                endif           ; ok        // for other definitions it "points" the correct handler
 146+ 6D1D             >                // Use of "; ok" to suppress "warning[fwdref]"
 146+ 6D1D             >
 146+ 6D1D             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 146+ 6D1D 98 63       >                dw      Next_Ptr
 147+ 6D1F
 148+ 6D1F              //  ______________________________________________________________________
 149+ 6D1F              //
 150+ 6D1F
 151+ 6D1F                              User_Def S0         , "S0"        , 06 // starting value of Stack-Pointer
 151+ 6D1F             >                New_Def  S0, "S0", User_Ptr, is_normal
 151+ 6D1F             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 151+ 6D1F             >
 151+ 6D1F             >                // dummy db directives used to calculate length of namec
 151+ 6D1F 53 30       >                db      "S0"
 151+ 6D21             >len_NFA         defl    $ - temp_NFA
 151+ 6D21             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 151+ 6D1F             >
 151+ 6D1F 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 151+ 6D20 53 30       >                db      "S0"               // name string in 7-bit ascii, but
 151+ 6D22             >                org     $-1                 // alter last byte of Name just above to set
 151+ 6D21 B0          >                db      {b $} | END_BIT     // msb as name end
 151+ 6D22             >
 151+ 6D22 12 6D       >                dw      last_NFA            // Link to previous definition Name
 151+ 6D24             >S0:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 151+ 6D24 92 6C       >                dw      User_Ptr ; ok        // for primitive definitions  actual code
 151+ 6D26             >                else
 151+ 6D26 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 151+ 6D26             >                endif           ; ok        // for other definitions it "points" the correct handler
 151+ 6D26             >                // Use of "; ok" to suppress "warning[fwdref]"
 151+ 6D26             >
 151+ 6D26             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 151+ 6D26 06          >                db      06
 152+ 6D27                              User_Def R0         , "R0"        , 08 // starting value of Return-Pointer
 152+ 6D27             >                New_Def  R0, "R0", User_Ptr, is_normal
 152+ 6D27             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 152+ 6D27             >
 152+ 6D27             >                // dummy db directives used to calculate length of namec
 152+ 6D27 52 30       >                db      "R0"
 152+ 6D29             >len_NFA         defl    $ - temp_NFA
 152+ 6D29             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 152+ 6D27             >
 152+ 6D27 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 152+ 6D28 52 30       >                db      "R0"               // name string in 7-bit ascii, but
 152+ 6D2A             >                org     $-1                 // alter last byte of Name just above to set
 152+ 6D29 B0          >                db      {b $} | END_BIT     // msb as name end
 152+ 6D2A             >
 152+ 6D2A 1F 6D       >                dw      last_NFA            // Link to previous definition Name
 152+ 6D2C             >R0:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 152+ 6D2C 92 6C       >                dw      User_Ptr ; ok        // for primitive definitions  actual code
 152+ 6D2E             >                else
 152+ 6D2E ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 152+ 6D2E             >                endif           ; ok        // for other definitions it "points" the correct handler
 152+ 6D2E             >                // Use of "; ok" to suppress "warning[fwdref]"
 152+ 6D2E             >
 152+ 6D2E             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 152+ 6D2E 08          >                db      08
 153+ 6D2F                              User_Def TIB        , "TIB"       , 10 // input terminal buffer address
 153+ 6D2F             >                New_Def  TIB, "TIB", User_Ptr, is_normal
 153+ 6D2F             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 153+ 6D2F             >
 153+ 6D2F             >                // dummy db directives used to calculate length of namec
 153+ 6D2F 54 49 42    >                db      "TIB"
 153+ 6D32             >len_NFA         defl    $ - temp_NFA
 153+ 6D32             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 153+ 6D2F             >
 153+ 6D2F 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 153+ 6D30 54 49 42    >                db      "TIB"               // name string in 7-bit ascii, but
 153+ 6D33             >                org     $-1                 // alter last byte of Name just above to set
 153+ 6D32 C2          >                db      {b $} | END_BIT     // msb as name end
 153+ 6D33             >
 153+ 6D33 27 6D       >                dw      last_NFA            // Link to previous definition Name
 153+ 6D35             >TIB:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 153+ 6D35 92 6C       >                dw      User_Ptr ; ok        // for primitive definitions  actual code
 153+ 6D37             >                else
 153+ 6D37 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 153+ 6D37             >                endif           ; ok        // for other definitions it "points" the correct handler
 153+ 6D37             >                // Use of "; ok" to suppress "warning[fwdref]"
 153+ 6D37             >
 153+ 6D37             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 153+ 6D37 0A          >                db      10
 154+ 6D38                              User_Def WIDTH      , "WIDTH"     , 12 // maximum number of characters for a word name
 154+ 6D38             >                New_Def  WIDTH, "WIDTH", User_Ptr, is_normal
 154+ 6D38             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 154+ 6D38             >
 154+ 6D38             >                // dummy db directives used to calculate length of namec
 154+ 6D38 57 49 44 54 >                db      "WIDTH"
 154+ 6D3C 48          >
 154+ 6D3D             >len_NFA         defl    $ - temp_NFA
 154+ 6D3D             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 154+ 6D38             >
 154+ 6D38 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 154+ 6D39 57 49 44 54 >                db      "WIDTH"               // name string in 7-bit ascii, but
 154+ 6D3D 48          >
 154+ 6D3E             >                org     $-1                 // alter last byte of Name just above to set
 154+ 6D3D C8          >                db      {b $} | END_BIT     // msb as name end
 154+ 6D3E             >
 154+ 6D3E 2F 6D       >                dw      last_NFA            // Link to previous definition Name
 154+ 6D40             >WIDTH:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 154+ 6D40 92 6C       >                dw      User_Ptr ; ok        // for primitive definitions  actual code
 154+ 6D42             >                else
 154+ 6D42 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 154+ 6D42             >                endif           ; ok        // for other definitions it "points" the correct handler
 154+ 6D42             >                // Use of "; ok" to suppress "warning[fwdref]"
 154+ 6D42             >
 154+ 6D42             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 154+ 6D42 0C          >                db      12
 155+ 6D43                              User_Def WARNING    , "WARNING"   , 14 // error reporting method: 0 base, 1 verbose
 155+ 6D43             >                New_Def  WARNING, "WARNING", User_Ptr, is_normal
 155+ 6D43             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 155+ 6D43             >
 155+ 6D43             >                // dummy db directives used to calculate length of namec
 155+ 6D43 57 41 52 4E >                db      "WARNING"
 155+ 6D47 49 4E 47    >
 155+ 6D4A             >len_NFA         defl    $ - temp_NFA
 155+ 6D4A             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 155+ 6D43             >
 155+ 6D43 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 155+ 6D44 57 41 52 4E >                db      "WARNING"               // name string in 7-bit ascii, but
 155+ 6D48 49 4E 47    >
 155+ 6D4B             >                org     $-1                 // alter last byte of Name just above to set
 155+ 6D4A C7          >                db      {b $} | END_BIT     // msb as name end
 155+ 6D4B             >
 155+ 6D4B 38 6D       >                dw      last_NFA            // Link to previous definition Name
 155+ 6D4D             >WARNING:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 155+ 6D4D 92 6C       >                dw      User_Ptr ; ok        // for primitive definitions  actual code
 155+ 6D4F             >                else
 155+ 6D4F ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 155+ 6D4F             >                endif           ; ok        // for other definitions it "points" the correct handler
 155+ 6D4F             >                // Use of "; ok" to suppress "warning[fwdref]"
 155+ 6D4F             >
 155+ 6D4F             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 155+ 6D4F 0E          >                db      14
 156+ 6D50                              User_Def FENCE      , "FENCE"     , 16 // minimum address where FORGET can work
 156+ 6D50             >                New_Def  FENCE, "FENCE", User_Ptr, is_normal
 156+ 6D50             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 156+ 6D50             >
 156+ 6D50             >                // dummy db directives used to calculate length of namec
 156+ 6D50 46 45 4E 43 >                db      "FENCE"
 156+ 6D54 45          >
 156+ 6D55             >len_NFA         defl    $ - temp_NFA
 156+ 6D55             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 156+ 6D50             >
 156+ 6D50 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 156+ 6D51 46 45 4E 43 >                db      "FENCE"               // name string in 7-bit ascii, but
 156+ 6D55 45          >
 156+ 6D56             >                org     $-1                 // alter last byte of Name just above to set
 156+ 6D55 C5          >                db      {b $} | END_BIT     // msb as name end
 156+ 6D56             >
 156+ 6D56 43 6D       >                dw      last_NFA            // Link to previous definition Name
 156+ 6D58             >FENCE:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 156+ 6D58 92 6C       >                dw      User_Ptr ; ok        // for primitive definitions  actual code
 156+ 6D5A             >                else
 156+ 6D5A ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 156+ 6D5A             >                endif           ; ok        // for other definitions it "points" the correct handler
 156+ 6D5A             >                // Use of "; ok" to suppress "warning[fwdref]"
 156+ 6D5A             >
 156+ 6D5A             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 156+ 6D5A 10          >                db      16
 157+ 6D5B                              User_Def DP         , "DP"        , 18 // Dictionary Pointer
 157+ 6D5B             >                New_Def  DP, "DP", User_Ptr, is_normal
 157+ 6D5B             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 157+ 6D5B             >
 157+ 6D5B             >                // dummy db directives used to calculate length of namec
 157+ 6D5B 44 50       >                db      "DP"
 157+ 6D5D             >len_NFA         defl    $ - temp_NFA
 157+ 6D5D             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 157+ 6D5B             >
 157+ 6D5B 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 157+ 6D5C 44 50       >                db      "DP"               // name string in 7-bit ascii, but
 157+ 6D5E             >                org     $-1                 // alter last byte of Name just above to set
 157+ 6D5D D0          >                db      {b $} | END_BIT     // msb as name end
 157+ 6D5E             >
 157+ 6D5E 50 6D       >                dw      last_NFA            // Link to previous definition Name
 157+ 6D60             >DP:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 157+ 6D60 92 6C       >                dw      User_Ptr ; ok        // for primitive definitions  actual code
 157+ 6D62             >                else
 157+ 6D62 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 157+ 6D62             >                endif           ; ok        // for other definitions it "points" the correct handler
 157+ 6D62             >                // Use of "; ok" to suppress "warning[fwdref]"
 157+ 6D62             >
 157+ 6D62             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 157+ 6D62 12          >                db      18
 158+ 6D63                              User_Def VOC_LINK   , "VOC-LINK"  , 20 // pointer to the latest vocabulary
 158+ 6D63             >                New_Def  VOC_LINK, "VOC-LINK", User_Ptr, is_normal
 158+ 6D63             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 158+ 6D63             >
 158+ 6D63             >                // dummy db directives used to calculate length of namec
 158+ 6D63 56 4F 43 2D >                db      "VOC-LINK"
 158+ 6D67 4C 49 4E 4B >
 158+ 6D6B             >len_NFA         defl    $ - temp_NFA
 158+ 6D6B             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 158+ 6D63             >
 158+ 6D63 88          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 158+ 6D64 56 4F 43 2D >                db      "VOC-LINK"               // name string in 7-bit ascii, but
 158+ 6D68 4C 49 4E 4B >
 158+ 6D6C             >                org     $-1                 // alter last byte of Name just above to set
 158+ 6D6B CB          >                db      {b $} | END_BIT     // msb as name end
 158+ 6D6C             >
 158+ 6D6C 5B 6D       >                dw      last_NFA            // Link to previous definition Name
 158+ 6D6E             >VOC_LINK:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 158+ 6D6E 92 6C       >                dw      User_Ptr ; ok        // for primitive definitions  actual code
 158+ 6D70             >                else
 158+ 6D70 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 158+ 6D70             >                endif           ; ok        // for other definitions it "points" the correct handler
 158+ 6D70             >                // Use of "; ok" to suppress "warning[fwdref]"
 158+ 6D70             >
 158+ 6D70             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 158+ 6D70 14          >                db      20
 159+ 6D71                              User_Def FIRST      , "FIRST"     , 22 // address of first buffer
 159+ 6D71             >                New_Def  FIRST, "FIRST", User_Ptr, is_normal
 159+ 6D71             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 159+ 6D71             >
 159+ 6D71             >                // dummy db directives used to calculate length of namec
 159+ 6D71 46 49 52 53 >                db      "FIRST"
 159+ 6D75 54          >
 159+ 6D76             >len_NFA         defl    $ - temp_NFA
 159+ 6D76             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 159+ 6D71             >
 159+ 6D71 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 159+ 6D72 46 49 52 53 >                db      "FIRST"               // name string in 7-bit ascii, but
 159+ 6D76 54          >
 159+ 6D77             >                org     $-1                 // alter last byte of Name just above to set
 159+ 6D76 D4          >                db      {b $} | END_BIT     // msb as name end
 159+ 6D77             >
 159+ 6D77 63 6D       >                dw      last_NFA            // Link to previous definition Name
 159+ 6D79             >FIRST:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 159+ 6D79 92 6C       >                dw      User_Ptr ; ok        // for primitive definitions  actual code
 159+ 6D7B             >                else
 159+ 6D7B ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 159+ 6D7B             >                endif           ; ok        // for other definitions it "points" the correct handler
 159+ 6D7B             >                // Use of "; ok" to suppress "warning[fwdref]"
 159+ 6D7B             >
 159+ 6D7B             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 159+ 6D7B 16          >                db      22
 160+ 6D7C                              User_Def LIMIT      , "LIMIT"     , 24 // address of last buffer
 160+ 6D7C             >                New_Def  LIMIT, "LIMIT", User_Ptr, is_normal
 160+ 6D7C             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 160+ 6D7C             >
 160+ 6D7C             >                // dummy db directives used to calculate length of namec
 160+ 6D7C 4C 49 4D 49 >                db      "LIMIT"
 160+ 6D80 54          >
 160+ 6D81             >len_NFA         defl    $ - temp_NFA
 160+ 6D81             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 160+ 6D7C             >
 160+ 6D7C 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 160+ 6D7D 4C 49 4D 49 >                db      "LIMIT"               // name string in 7-bit ascii, but
 160+ 6D81 54          >
 160+ 6D82             >                org     $-1                 // alter last byte of Name just above to set
 160+ 6D81 D4          >                db      {b $} | END_BIT     // msb as name end
 160+ 6D82             >
 160+ 6D82 71 6D       >                dw      last_NFA            // Link to previous definition Name
 160+ 6D84             >LIMIT:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 160+ 6D84 92 6C       >                dw      User_Ptr ; ok        // for primitive definitions  actual code
 160+ 6D86             >                else
 160+ 6D86 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 160+ 6D86             >                endif           ; ok        // for other definitions it "points" the correct handler
 160+ 6D86             >                // Use of "; ok" to suppress "warning[fwdref]"
 160+ 6D86             >
 160+ 6D86             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 160+ 6D86 18          >                db      24
 161+ 6D87                              User_Def EXP        , "EXP"       , 26 // keeps the exponent in number conversion
 161+ 6D87             >                New_Def  EXP, "EXP", User_Ptr, is_normal
 161+ 6D87             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 161+ 6D87             >
 161+ 6D87             >                // dummy db directives used to calculate length of namec
 161+ 6D87 45 58 50    >                db      "EXP"
 161+ 6D8A             >len_NFA         defl    $ - temp_NFA
 161+ 6D8A             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 161+ 6D87             >
 161+ 6D87 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 161+ 6D88 45 58 50    >                db      "EXP"               // name string in 7-bit ascii, but
 161+ 6D8B             >                org     $-1                 // alter last byte of Name just above to set
 161+ 6D8A D0          >                db      {b $} | END_BIT     // msb as name end
 161+ 6D8B             >
 161+ 6D8B 7C 6D       >                dw      last_NFA            // Link to previous definition Name
 161+ 6D8D             >EXP:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 161+ 6D8D 92 6C       >                dw      User_Ptr ; ok        // for primitive definitions  actual code
 161+ 6D8F             >                else
 161+ 6D8F ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 161+ 6D8F             >                endif           ; ok        // for other definitions it "points" the correct handler
 161+ 6D8F             >                // Use of "; ok" to suppress "warning[fwdref]"
 161+ 6D8F             >
 161+ 6D8F             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 161+ 6D8F 1A          >                db      26
 162+ 6D90                              User_Def NMODE      , "NMODE"     , 28 // number mode: 0 integer, 1 floating point
 162+ 6D90             >                New_Def  NMODE, "NMODE", User_Ptr, is_normal
 162+ 6D90             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 162+ 6D90             >
 162+ 6D90             >                // dummy db directives used to calculate length of namec
 162+ 6D90 4E 4D 4F 44 >                db      "NMODE"
 162+ 6D94 45          >
 162+ 6D95             >len_NFA         defl    $ - temp_NFA
 162+ 6D95             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 162+ 6D90             >
 162+ 6D90 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 162+ 6D91 4E 4D 4F 44 >                db      "NMODE"               // name string in 7-bit ascii, but
 162+ 6D95 45          >
 162+ 6D96             >                org     $-1                 // alter last byte of Name just above to set
 162+ 6D95 C5          >                db      {b $} | END_BIT     // msb as name end
 162+ 6D96             >
 162+ 6D96 87 6D       >                dw      last_NFA            // Link to previous definition Name
 162+ 6D98             >NMODE:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 162+ 6D98 92 6C       >                dw      User_Ptr ; ok        // for primitive definitions  actual code
 162+ 6D9A             >                else
 162+ 6D9A ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 162+ 6D9A             >                endif           ; ok        // for other definitions it "points" the correct handler
 162+ 6D9A             >                // Use of "; ok" to suppress "warning[fwdref]"
 162+ 6D9A             >
 162+ 6D9A             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 162+ 6D9A 1C          >                db      28
 163+ 6D9B                              User_Def BLK        , "BLK"       , 30 // block number to be interpreted. 0 for terminal
 163+ 6D9B             >                New_Def  BLK, "BLK", User_Ptr, is_normal
 163+ 6D9B             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 163+ 6D9B             >
 163+ 6D9B             >                // dummy db directives used to calculate length of namec
 163+ 6D9B 42 4C 4B    >                db      "BLK"
 163+ 6D9E             >len_NFA         defl    $ - temp_NFA
 163+ 6D9E             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 163+ 6D9B             >
 163+ 6D9B 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 163+ 6D9C 42 4C 4B    >                db      "BLK"               // name string in 7-bit ascii, but
 163+ 6D9F             >                org     $-1                 // alter last byte of Name just above to set
 163+ 6D9E CB          >                db      {b $} | END_BIT     // msb as name end
 163+ 6D9F             >
 163+ 6D9F 90 6D       >                dw      last_NFA            // Link to previous definition Name
 163+ 6DA1             >BLK:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 163+ 6DA1 92 6C       >                dw      User_Ptr ; ok        // for primitive definitions  actual code
 163+ 6DA3             >                else
 163+ 6DA3 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 163+ 6DA3             >                endif           ; ok        // for other definitions it "points" the correct handler
 163+ 6DA3             >                // Use of "; ok" to suppress "warning[fwdref]"
 163+ 6DA3             >
 163+ 6DA3             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 163+ 6DA3 1E          >                db      30
 164+ 6DA4                              User_Def TO_IN      , ">IN"       , 32 // incremented when consuming input buffer
 164+ 6DA4             >                New_Def  TO_IN, ">IN", User_Ptr, is_normal
 164+ 6DA4             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 164+ 6DA4             >
 164+ 6DA4             >                // dummy db directives used to calculate length of namec
 164+ 6DA4 3E 49 4E    >                db      ">IN"
 164+ 6DA7             >len_NFA         defl    $ - temp_NFA
 164+ 6DA7             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 164+ 6DA4             >
 164+ 6DA4 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 164+ 6DA5 3E 49 4E    >                db      ">IN"               // name string in 7-bit ascii, but
 164+ 6DA8             >                org     $-1                 // alter last byte of Name just above to set
 164+ 6DA7 CE          >                db      {b $} | END_BIT     // msb as name end
 164+ 6DA8             >
 164+ 6DA8 9B 6D       >                dw      last_NFA            // Link to previous definition Name
 164+ 6DAA             >TO_IN:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 164+ 6DAA 92 6C       >                dw      User_Ptr ; ok        // for primitive definitions  actual code
 164+ 6DAC             >                else
 164+ 6DAC ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 164+ 6DAC             >                endif           ; ok        // for other definitions it "points" the correct handler
 164+ 6DAC             >                // Use of "; ok" to suppress "warning[fwdref]"
 164+ 6DAC             >
 164+ 6DAC             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 164+ 6DAC 20          >                db      32
 165+ 6DAD                              User_Def OUT        , "OUT"       , 34 // incremented when sending to output
 165+ 6DAD             >                New_Def  OUT, "OUT", User_Ptr, is_normal
 165+ 6DAD             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 165+ 6DAD             >
 165+ 6DAD             >                // dummy db directives used to calculate length of namec
 165+ 6DAD 4F 55 54    >                db      "OUT"
 165+ 6DB0             >len_NFA         defl    $ - temp_NFA
 165+ 6DB0             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 165+ 6DAD             >
 165+ 6DAD 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 165+ 6DAE 4F 55 54    >                db      "OUT"               // name string in 7-bit ascii, but
 165+ 6DB1             >                org     $-1                 // alter last byte of Name just above to set
 165+ 6DB0 D4          >                db      {b $} | END_BIT     // msb as name end
 165+ 6DB1             >
 165+ 6DB1 A4 6D       >                dw      last_NFA            // Link to previous definition Name
 165+ 6DB3             >OUT:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 165+ 6DB3 92 6C       >                dw      User_Ptr ; ok        // for primitive definitions  actual code
 165+ 6DB5             >                else
 165+ 6DB5 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 165+ 6DB5             >                endif           ; ok        // for other definitions it "points" the correct handler
 165+ 6DB5             >                // Use of "; ok" to suppress "warning[fwdref]"
 165+ 6DB5             >
 165+ 6DB5             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 165+ 6DB5 22          >                db      34
 166+ 6DB6                              User_Def SCR        , "SCR"       , 36 // latest screen retreieved by LIST
 166+ 6DB6             >                New_Def  SCR, "SCR", User_Ptr, is_normal
 166+ 6DB6             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 166+ 6DB6             >
 166+ 6DB6             >                // dummy db directives used to calculate length of namec
 166+ 6DB6 53 43 52    >                db      "SCR"
 166+ 6DB9             >len_NFA         defl    $ - temp_NFA
 166+ 6DB9             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 166+ 6DB6             >
 166+ 6DB6 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 166+ 6DB7 53 43 52    >                db      "SCR"               // name string in 7-bit ascii, but
 166+ 6DBA             >                org     $-1                 // alter last byte of Name just above to set
 166+ 6DB9 D2          >                db      {b $} | END_BIT     // msb as name end
 166+ 6DBA             >
 166+ 6DBA AD 6D       >                dw      last_NFA            // Link to previous definition Name
 166+ 6DBC             >SCR:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 166+ 6DBC 92 6C       >                dw      User_Ptr ; ok        // for primitive definitions  actual code
 166+ 6DBE             >                else
 166+ 6DBE ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 166+ 6DBE             >                endif           ; ok        // for other definitions it "points" the correct handler
 166+ 6DBE             >                // Use of "; ok" to suppress "warning[fwdref]"
 166+ 6DBE             >
 166+ 6DBE             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 166+ 6DBE 24          >                db      36
 167+ 6DBF                              User_Def OFFSET     , "OFFSET"    , 38 //
 167+ 6DBF             >                New_Def  OFFSET, "OFFSET", User_Ptr, is_normal
 167+ 6DBF             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 167+ 6DBF             >
 167+ 6DBF             >                // dummy db directives used to calculate length of namec
 167+ 6DBF 4F 46 46 53 >                db      "OFFSET"
 167+ 6DC3 45 54       >
 167+ 6DC5             >len_NFA         defl    $ - temp_NFA
 167+ 6DC5             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 167+ 6DBF             >
 167+ 6DBF 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 167+ 6DC0 4F 46 46 53 >                db      "OFFSET"               // name string in 7-bit ascii, but
 167+ 6DC4 45 54       >
 167+ 6DC6             >                org     $-1                 // alter last byte of Name just above to set
 167+ 6DC5 D4          >                db      {b $} | END_BIT     // msb as name end
 167+ 6DC6             >
 167+ 6DC6 B6 6D       >                dw      last_NFA            // Link to previous definition Name
 167+ 6DC8             >OFFSET:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 167+ 6DC8 92 6C       >                dw      User_Ptr ; ok        // for primitive definitions  actual code
 167+ 6DCA             >                else
 167+ 6DCA ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 167+ 6DCA             >                endif           ; ok        // for other definitions it "points" the correct handler
 167+ 6DCA             >                // Use of "; ok" to suppress "warning[fwdref]"
 167+ 6DCA             >
 167+ 6DCA             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 167+ 6DCA 26          >                db      38
 168+ 6DCB                              User_Def CONTEXT    , "CONTEXT"   , 40 // pointer to the vocabulary where search begins
 168+ 6DCB             >                New_Def  CONTEXT, "CONTEXT", User_Ptr, is_normal
 168+ 6DCB             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 168+ 6DCB             >
 168+ 6DCB             >                // dummy db directives used to calculate length of namec
 168+ 6DCB 43 4F 4E 54 >                db      "CONTEXT"
 168+ 6DCF 45 58 54    >
 168+ 6DD2             >len_NFA         defl    $ - temp_NFA
 168+ 6DD2             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 168+ 6DCB             >
 168+ 6DCB 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 168+ 6DCC 43 4F 4E 54 >                db      "CONTEXT"               // name string in 7-bit ascii, but
 168+ 6DD0 45 58 54    >
 168+ 6DD3             >                org     $-1                 // alter last byte of Name just above to set
 168+ 6DD2 D4          >                db      {b $} | END_BIT     // msb as name end
 168+ 6DD3             >
 168+ 6DD3 BF 6D       >                dw      last_NFA            // Link to previous definition Name
 168+ 6DD5             >CONTEXT:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 168+ 6DD5 92 6C       >                dw      User_Ptr ; ok        // for primitive definitions  actual code
 168+ 6DD7             >                else
 168+ 6DD7 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 168+ 6DD7             >                endif           ; ok        // for other definitions it "points" the correct handler
 168+ 6DD7             >                // Use of "; ok" to suppress "warning[fwdref]"
 168+ 6DD7             >
 168+ 6DD7             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 168+ 6DD7 28          >                db      40
 169+ 6DD8                              User_Def CURRENT    , "CURRENT"   , 42 // pointer to the vocabulary where search continues
 169+ 6DD8             >                New_Def  CURRENT, "CURRENT", User_Ptr, is_normal
 169+ 6DD8             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 169+ 6DD8             >
 169+ 6DD8             >                // dummy db directives used to calculate length of namec
 169+ 6DD8 43 55 52 52 >                db      "CURRENT"
 169+ 6DDC 45 4E 54    >
 169+ 6DDF             >len_NFA         defl    $ - temp_NFA
 169+ 6DDF             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 169+ 6DD8             >
 169+ 6DD8 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 169+ 6DD9 43 55 52 52 >                db      "CURRENT"               // name string in 7-bit ascii, but
 169+ 6DDD 45 4E 54    >
 169+ 6DE0             >                org     $-1                 // alter last byte of Name just above to set
 169+ 6DDF D4          >                db      {b $} | END_BIT     // msb as name end
 169+ 6DE0             >
 169+ 6DE0 CB 6D       >                dw      last_NFA            // Link to previous definition Name
 169+ 6DE2             >CURRENT:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 169+ 6DE2 92 6C       >                dw      User_Ptr ; ok        // for primitive definitions  actual code
 169+ 6DE4             >                else
 169+ 6DE4 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 169+ 6DE4             >                endif           ; ok        // for other definitions it "points" the correct handler
 169+ 6DE4             >                // Use of "; ok" to suppress "warning[fwdref]"
 169+ 6DE4             >
 169+ 6DE4             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 169+ 6DE4 2A          >                db      42
 170+ 6DE5                              User_Def STATE      , "STATE"     , 44 // compilation status. 0 interpreting.
 170+ 6DE5             >                New_Def  STATE, "STATE", User_Ptr, is_normal
 170+ 6DE5             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 170+ 6DE5             >
 170+ 6DE5             >                // dummy db directives used to calculate length of namec
 170+ 6DE5 53 54 41 54 >                db      "STATE"
 170+ 6DE9 45          >
 170+ 6DEA             >len_NFA         defl    $ - temp_NFA
 170+ 6DEA             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 170+ 6DE5             >
 170+ 6DE5 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 170+ 6DE6 53 54 41 54 >                db      "STATE"               // name string in 7-bit ascii, but
 170+ 6DEA 45          >
 170+ 6DEB             >                org     $-1                 // alter last byte of Name just above to set
 170+ 6DEA C5          >                db      {b $} | END_BIT     // msb as name end
 170+ 6DEB             >
 170+ 6DEB D8 6D       >                dw      last_NFA            // Link to previous definition Name
 170+ 6DED             >STATE:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 170+ 6DED 92 6C       >                dw      User_Ptr ; ok        // for primitive definitions  actual code
 170+ 6DEF             >                else
 170+ 6DEF ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 170+ 6DEF             >                endif           ; ok        // for other definitions it "points" the correct handler
 170+ 6DEF             >                // Use of "; ok" to suppress "warning[fwdref]"
 170+ 6DEF             >
 170+ 6DEF             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 170+ 6DEF 2C          >                db      44
 171+ 6DF0                              User_Def BASE       , "BASE"      , 46 //
 171+ 6DF0             >                New_Def  BASE, "BASE", User_Ptr, is_normal
 171+ 6DF0             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 171+ 6DF0             >
 171+ 6DF0             >                // dummy db directives used to calculate length of namec
 171+ 6DF0 42 41 53 45 >                db      "BASE"
 171+ 6DF4             >len_NFA         defl    $ - temp_NFA
 171+ 6DF4             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 171+ 6DF0             >
 171+ 6DF0 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 171+ 6DF1 42 41 53 45 >                db      "BASE"               // name string in 7-bit ascii, but
 171+ 6DF5             >                org     $-1                 // alter last byte of Name just above to set
 171+ 6DF4 C5          >                db      {b $} | END_BIT     // msb as name end
 171+ 6DF5             >
 171+ 6DF5 E5 6D       >                dw      last_NFA            // Link to previous definition Name
 171+ 6DF7             >BASE:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 171+ 6DF7 92 6C       >                dw      User_Ptr ; ok        // for primitive definitions  actual code
 171+ 6DF9             >                else
 171+ 6DF9 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 171+ 6DF9             >                endif           ; ok        // for other definitions it "points" the correct handler
 171+ 6DF9             >                // Use of "; ok" to suppress "warning[fwdref]"
 171+ 6DF9             >
 171+ 6DF9             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 171+ 6DF9 2E          >                db      46
 172+ 6DFA                              User_Def DPL        , "DPL"       , 48 // number of digits after decimal point in conversion
 172+ 6DFA             >                New_Def  DPL, "DPL", User_Ptr, is_normal
 172+ 6DFA             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 172+ 6DFA             >
 172+ 6DFA             >                // dummy db directives used to calculate length of namec
 172+ 6DFA 44 50 4C    >                db      "DPL"
 172+ 6DFD             >len_NFA         defl    $ - temp_NFA
 172+ 6DFD             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 172+ 6DFA             >
 172+ 6DFA 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 172+ 6DFB 44 50 4C    >                db      "DPL"               // name string in 7-bit ascii, but
 172+ 6DFE             >                org     $-1                 // alter last byte of Name just above to set
 172+ 6DFD CC          >                db      {b $} | END_BIT     // msb as name end
 172+ 6DFE             >
 172+ 6DFE F0 6D       >                dw      last_NFA            // Link to previous definition Name
 172+ 6E00             >DPL:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 172+ 6E00 92 6C       >                dw      User_Ptr ; ok        // for primitive definitions  actual code
 172+ 6E02             >                else
 172+ 6E02 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 172+ 6E02             >                endif           ; ok        // for other definitions it "points" the correct handler
 172+ 6E02             >                // Use of "; ok" to suppress "warning[fwdref]"
 172+ 6E02             >
 172+ 6E02             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 172+ 6E02 30          >                db      48
 173+ 6E03                              User_Def FLD        , "FLD"       , 50 // output field width
 173+ 6E03             >                New_Def  FLD, "FLD", User_Ptr, is_normal
 173+ 6E03             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 173+ 6E03             >
 173+ 6E03             >                // dummy db directives used to calculate length of namec
 173+ 6E03 46 4C 44    >                db      "FLD"
 173+ 6E06             >len_NFA         defl    $ - temp_NFA
 173+ 6E06             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 173+ 6E03             >
 173+ 6E03 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 173+ 6E04 46 4C 44    >                db      "FLD"               // name string in 7-bit ascii, but
 173+ 6E07             >                org     $-1                 // alter last byte of Name just above to set
 173+ 6E06 C4          >                db      {b $} | END_BIT     // msb as name end
 173+ 6E07             >
 173+ 6E07 FA 6D       >                dw      last_NFA            // Link to previous definition Name
 173+ 6E09             >FLD:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 173+ 6E09 92 6C       >                dw      User_Ptr ; ok        // for primitive definitions  actual code
 173+ 6E0B             >                else
 173+ 6E0B ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 173+ 6E0B             >                endif           ; ok        // for other definitions it "points" the correct handler
 173+ 6E0B             >                // Use of "; ok" to suppress "warning[fwdref]"
 173+ 6E0B             >
 173+ 6E0B             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 173+ 6E0B 32          >                db      50
 174+ 6E0C                              User_Def CSP        , "CSP"       , 52 // used to temporary store Stack-Pointer value
 174+ 6E0C             >                New_Def  CSP, "CSP", User_Ptr, is_normal
 174+ 6E0C             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 174+ 6E0C             >
 174+ 6E0C             >                // dummy db directives used to calculate length of namec
 174+ 6E0C 43 53 50    >                db      "CSP"
 174+ 6E0F             >len_NFA         defl    $ - temp_NFA
 174+ 6E0F             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 174+ 6E0C             >
 174+ 6E0C 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 174+ 6E0D 43 53 50    >                db      "CSP"               // name string in 7-bit ascii, but
 174+ 6E10             >                org     $-1                 // alter last byte of Name just above to set
 174+ 6E0F D0          >                db      {b $} | END_BIT     // msb as name end
 174+ 6E10             >
 174+ 6E10 03 6E       >                dw      last_NFA            // Link to previous definition Name
 174+ 6E12             >CSP:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 174+ 6E12 92 6C       >                dw      User_Ptr ; ok        // for primitive definitions  actual code
 174+ 6E14             >                else
 174+ 6E14 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 174+ 6E14             >                endif           ; ok        // for other definitions it "points" the correct handler
 174+ 6E14             >                // Use of "; ok" to suppress "warning[fwdref]"
 174+ 6E14             >
 174+ 6E14             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 174+ 6E14 34          >                db      52
 175+ 6E15                              User_Def RSHARP     , "R#"        , 54 // location of editing cursor
 175+ 6E15             >                New_Def  RSHARP, "R#", User_Ptr, is_normal
 175+ 6E15             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 175+ 6E15             >
 175+ 6E15             >                // dummy db directives used to calculate length of namec
 175+ 6E15 52 23       >                db      "R#"
 175+ 6E17             >len_NFA         defl    $ - temp_NFA
 175+ 6E17             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 175+ 6E15             >
 175+ 6E15 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 175+ 6E16 52 23       >                db      "R#"               // name string in 7-bit ascii, but
 175+ 6E18             >                org     $-1                 // alter last byte of Name just above to set
 175+ 6E17 A3          >                db      {b $} | END_BIT     // msb as name end
 175+ 6E18             >
 175+ 6E18 0C 6E       >                dw      last_NFA            // Link to previous definition Name
 175+ 6E1A             >RSHARP:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 175+ 6E1A 92 6C       >                dw      User_Ptr ; ok        // for primitive definitions  actual code
 175+ 6E1C             >                else
 175+ 6E1C ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 175+ 6E1C             >                endif           ; ok        // for other definitions it "points" the correct handler
 175+ 6E1C             >                // Use of "; ok" to suppress "warning[fwdref]"
 175+ 6E1C             >
 175+ 6E1C             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 175+ 6E1C 36          >                db      54
 176+ 6E1D                              User_Def HLD        , "HLD"       , 56 // last character during a number conversion output
 176+ 6E1D             >                New_Def  HLD, "HLD", User_Ptr, is_normal
 176+ 6E1D             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 176+ 6E1D             >
 176+ 6E1D             >                // dummy db directives used to calculate length of namec
 176+ 6E1D 48 4C 44    >                db      "HLD"
 176+ 6E20             >len_NFA         defl    $ - temp_NFA
 176+ 6E20             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 176+ 6E1D             >
 176+ 6E1D 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 176+ 6E1E 48 4C 44    >                db      "HLD"               // name string in 7-bit ascii, but
 176+ 6E21             >                org     $-1                 // alter last byte of Name just above to set
 176+ 6E20 C4          >                db      {b $} | END_BIT     // msb as name end
 176+ 6E21             >
 176+ 6E21 15 6E       >                dw      last_NFA            // Link to previous definition Name
 176+ 6E23             >HLD:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 176+ 6E23 92 6C       >                dw      User_Ptr ; ok        // for primitive definitions  actual code
 176+ 6E25             >                else
 176+ 6E25 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 176+ 6E25             >                endif           ; ok        // for other definitions it "points" the correct handler
 176+ 6E25             >                // Use of "; ok" to suppress "warning[fwdref]"
 176+ 6E25             >
 176+ 6E25             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 176+ 6E25 38          >                db      56
 177+ 6E26                              User_Def USE        , "USE"       , 58 // address of last used block
 177+ 6E26             >                New_Def  USE, "USE", User_Ptr, is_normal
 177+ 6E26             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 177+ 6E26             >
 177+ 6E26             >                // dummy db directives used to calculate length of namec
 177+ 6E26 55 53 45    >                db      "USE"
 177+ 6E29             >len_NFA         defl    $ - temp_NFA
 177+ 6E29             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 177+ 6E26             >
 177+ 6E26 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 177+ 6E27 55 53 45    >                db      "USE"               // name string in 7-bit ascii, but
 177+ 6E2A             >                org     $-1                 // alter last byte of Name just above to set
 177+ 6E29 C5          >                db      {b $} | END_BIT     // msb as name end
 177+ 6E2A             >
 177+ 6E2A 1D 6E       >                dw      last_NFA            // Link to previous definition Name
 177+ 6E2C             >USE:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 177+ 6E2C 92 6C       >                dw      User_Ptr ; ok        // for primitive definitions  actual code
 177+ 6E2E             >                else
 177+ 6E2E ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 177+ 6E2E             >                endif           ; ok        // for other definitions it "points" the correct handler
 177+ 6E2E             >                // Use of "; ok" to suppress "warning[fwdref]"
 177+ 6E2E             >
 177+ 6E2E             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 177+ 6E2E 3A          >                db      58
 178+ 6E2F                              User_Def PREV       , "PREV"      , 60 // address of previous used block
 178+ 6E2F             >                New_Def  PREV, "PREV", User_Ptr, is_normal
 178+ 6E2F             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 178+ 6E2F             >
 178+ 6E2F             >                // dummy db directives used to calculate length of namec
 178+ 6E2F 50 52 45 56 >                db      "PREV"
 178+ 6E33             >len_NFA         defl    $ - temp_NFA
 178+ 6E33             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 178+ 6E2F             >
 178+ 6E2F 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 178+ 6E30 50 52 45 56 >                db      "PREV"               // name string in 7-bit ascii, but
 178+ 6E34             >                org     $-1                 // alter last byte of Name just above to set
 178+ 6E33 D6          >                db      {b $} | END_BIT     // msb as name end
 178+ 6E34             >
 178+ 6E34 26 6E       >                dw      last_NFA            // Link to previous definition Name
 178+ 6E36             >PREV:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 178+ 6E36 92 6C       >                dw      User_Ptr ; ok        // for primitive definitions  actual code
 178+ 6E38             >                else
 178+ 6E38 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 178+ 6E38             >                endif           ; ok        // for other definitions it "points" the correct handler
 178+ 6E38             >                // Use of "; ok" to suppress "warning[fwdref]"
 178+ 6E38             >
 178+ 6E38             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 178+ 6E38 3C          >                db      60
 179+ 6E39                              User_Def LP         , "LP"        , 62 // line printer (not used)
 179+ 6E39             >                New_Def  LP, "LP", User_Ptr, is_normal
 179+ 6E39             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 179+ 6E39             >
 179+ 6E39             >                // dummy db directives used to calculate length of namec
 179+ 6E39 4C 50       >                db      "LP"
 179+ 6E3B             >len_NFA         defl    $ - temp_NFA
 179+ 6E3B             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 179+ 6E39             >
 179+ 6E39 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 179+ 6E3A 4C 50       >                db      "LP"               // name string in 7-bit ascii, but
 179+ 6E3C             >                org     $-1                 // alter last byte of Name just above to set
 179+ 6E3B D0          >                db      {b $} | END_BIT     // msb as name end
 179+ 6E3C             >
 179+ 6E3C 2F 6E       >                dw      last_NFA            // Link to previous definition Name
 179+ 6E3E             >LP:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 179+ 6E3E 92 6C       >                dw      User_Ptr ; ok        // for primitive definitions  actual code
 179+ 6E40             >                else
 179+ 6E40 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 179+ 6E40             >                endif           ; ok        // for other definitions it "points" the correct handler
 179+ 6E40             >                // Use of "; ok" to suppress "warning[fwdref]"
 179+ 6E40             >
 179+ 6E40             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 179+ 6E40 3E          >                db      62
 180+ 6E41                              User_Def PLACE      , "PLACE"     , 64 // number of digits after decimal point in output
 180+ 6E41             >                New_Def  PLACE, "PLACE", User_Ptr, is_normal
 180+ 6E41             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 180+ 6E41             >
 180+ 6E41             >                // dummy db directives used to calculate length of namec
 180+ 6E41 50 4C 41 43 >                db      "PLACE"
 180+ 6E45 45          >
 180+ 6E46             >len_NFA         defl    $ - temp_NFA
 180+ 6E46             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 180+ 6E41             >
 180+ 6E41 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 180+ 6E42 50 4C 41 43 >                db      "PLACE"               // name string in 7-bit ascii, but
 180+ 6E46 45          >
 180+ 6E47             >                org     $-1                 // alter last byte of Name just above to set
 180+ 6E46 C5          >                db      {b $} | END_BIT     // msb as name end
 180+ 6E47             >
 180+ 6E47 39 6E       >                dw      last_NFA            // Link to previous definition Name
 180+ 6E49             >PLACE:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 180+ 6E49 92 6C       >                dw      User_Ptr ; ok        // for primitive definitions  actual code
 180+ 6E4B             >                else
 180+ 6E4B ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 180+ 6E4B             >                endif           ; ok        // for other definitions it "points" the correct handler
 180+ 6E4B             >                // Use of "; ok" to suppress "warning[fwdref]"
 180+ 6E4B             >
 180+ 6E4B             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 180+ 6E4B 40          >                db      64
 181+ 6E4C                              User_Def SOURCE_ID  , "SOURCE-ID" , 66 // data-stream number in INCLUDE and LOAD-
 181+ 6E4C             >                New_Def  SOURCE_ID, "SOURCE-ID", User_Ptr, is_normal
 181+ 6E4C             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 181+ 6E4C             >
 181+ 6E4C             >                // dummy db directives used to calculate length of namec
 181+ 6E4C 53 4F 55 52 >                db      "SOURCE-ID"
 181+ 6E50 43 45 2D 49 >
 181+ 6E54 44          >
 181+ 6E55             >len_NFA         defl    $ - temp_NFA
 181+ 6E55             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 181+ 6E4C             >
 181+ 6E4C 89          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 181+ 6E4D 53 4F 55 52 >                db      "SOURCE-ID"               // name string in 7-bit ascii, but
 181+ 6E51 43 45 2D 49 >
 181+ 6E55 44          >
 181+ 6E56             >                org     $-1                 // alter last byte of Name just above to set
 181+ 6E55 C4          >                db      {b $} | END_BIT     // msb as name end
 181+ 6E56             >
 181+ 6E56 41 6E       >                dw      last_NFA            // Link to previous definition Name
 181+ 6E58             >SOURCE_ID:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 181+ 6E58 92 6C       >                dw      User_Ptr ; ok        // for primitive definitions  actual code
 181+ 6E5A             >                else
 181+ 6E5A ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 181+ 6E5A             >                endif           ; ok        // for other definitions it "points" the correct handler
 181+ 6E5A             >                // Use of "; ok" to suppress "warning[fwdref]"
 181+ 6E5A             >
 181+ 6E5A             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 181+ 6E5A 42          >                db      66
 182+ 6E5B                              User_Def SPAN       , "SPAN"      , 68 // number of character of last EXPECT
 182+ 6E5B             >                New_Def  SPAN, "SPAN", User_Ptr, is_normal
 182+ 6E5B             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 182+ 6E5B             >
 182+ 6E5B             >                // dummy db directives used to calculate length of namec
 182+ 6E5B 53 50 41 4E >                db      "SPAN"
 182+ 6E5F             >len_NFA         defl    $ - temp_NFA
 182+ 6E5F             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 182+ 6E5B             >
 182+ 6E5B 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 182+ 6E5C 53 50 41 4E >                db      "SPAN"               // name string in 7-bit ascii, but
 182+ 6E60             >                org     $-1                 // alter last byte of Name just above to set
 182+ 6E5F CE          >                db      {b $} | END_BIT     // msb as name end
 182+ 6E60             >
 182+ 6E60 4C 6E       >                dw      last_NFA            // Link to previous definition Name
 182+ 6E62             >SPAN:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 182+ 6E62 92 6C       >                dw      User_Ptr ; ok        // for primitive definitions  actual code
 182+ 6E64             >                else
 182+ 6E64 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 182+ 6E64             >                endif           ; ok        // for other definitions it "points" the correct handler
 182+ 6E64             >                // Use of "; ok" to suppress "warning[fwdref]"
 182+ 6E64             >
 182+ 6E64             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 182+ 6E64 44          >                db      68
 183+ 6E65                              User_Def HANDLER    , "HANDLER"   , 70 // Used by THROW-CATCH
 183+ 6E65             >                New_Def  HANDLER, "HANDLER", User_Ptr, is_normal
 183+ 6E65             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 183+ 6E65             >
 183+ 6E65             >                // dummy db directives used to calculate length of namec
 183+ 6E65 48 41 4E 44 >                db      "HANDLER"
 183+ 6E69 4C 45 52    >
 183+ 6E6C             >len_NFA         defl    $ - temp_NFA
 183+ 6E6C             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 183+ 6E65             >
 183+ 6E65 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 183+ 6E66 48 41 4E 44 >                db      "HANDLER"               // name string in 7-bit ascii, but
 183+ 6E6A 4C 45 52    >
 183+ 6E6D             >                org     $-1                 // alter last byte of Name just above to set
 183+ 6E6C D2          >                db      {b $} | END_BIT     // msb as name end
 183+ 6E6D             >
 183+ 6E6D 5B 6E       >                dw      last_NFA            // Link to previous definition Name
 183+ 6E6F             >HANDLER:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 183+ 6E6F 92 6C       >                dw      User_Ptr ; ok        // for primitive definitions  actual code
 183+ 6E71             >                else
 183+ 6E71 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 183+ 6E71             >                endif           ; ok        // for other definitions it "points" the correct handler
 183+ 6E71             >                // Use of "; ok" to suppress "warning[fwdref]"
 183+ 6E71             >
 183+ 6E71             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 183+ 6E71 46          >                db      70
 184+ 6E72                              User_Def HP         , "HP"        , 72 // heap-pointer address
 184+ 6E72             >                New_Def  HP, "HP", User_Ptr, is_normal
 184+ 6E72             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 184+ 6E72             >
 184+ 6E72             >                // dummy db directives used to calculate length of namec
 184+ 6E72 48 50       >                db      "HP"
 184+ 6E74             >len_NFA         defl    $ - temp_NFA
 184+ 6E74             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 184+ 6E72             >
 184+ 6E72 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 184+ 6E73 48 50       >                db      "HP"               // name string in 7-bit ascii, but
 184+ 6E75             >                org     $-1                 // alter last byte of Name just above to set
 184+ 6E74 D0          >                db      {b $} | END_BIT     // msb as name end
 184+ 6E75             >
 184+ 6E75 65 6E       >                dw      last_NFA            // Link to previous definition Name
 184+ 6E77             >HP:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 184+ 6E77 92 6C       >                dw      User_Ptr ; ok        // for primitive definitions  actual code
 184+ 6E79             >                else
 184+ 6E79 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 184+ 6E79             >                endif           ; ok        // for other definitions it "points" the correct handler
 184+ 6E79             >                // Use of "; ok" to suppress "warning[fwdref]"
 184+ 6E79             >
 184+ 6E79             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 184+ 6E79 48          >                db      72
 185+ 6E7A
 186+ 6E7A              //  ______________________________________________________________________
 187+ 6E7A              //
 188+ 6E7A              // here         -- a
 189+ 6E7A                              Colon_Def HERE, "HERE", is_normal
 189+ 6E7A             >                New_Def  HERE, "HERE", Enter_Ptr, is_normal ; ok
 189+ 6E7A             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 189+ 6E7A             >
 189+ 6E7A             >                // dummy db directives used to calculate length of namec
 189+ 6E7A 48 45 52 45 >                db      "HERE"
 189+ 6E7E             >len_NFA         defl    $ - temp_NFA
 189+ 6E7E             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 189+ 6E7A             >
 189+ 6E7A 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 189+ 6E7B 48 45 52 45 >                db      "HERE"               // name string in 7-bit ascii, but
 189+ 6E7F             >                org     $-1                 // alter last byte of Name just above to set
 189+ 6E7E C5          >                db      {b $} | END_BIT     // msb as name end
 189+ 6E7F             >
 189+ 6E7F 72 6E       >                dw      last_NFA            // Link to previous definition Name
 189+ 6E81             >HERE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 189+ 6E81 27 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 189+ 6E83             >                else
 189+ 6E83 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 189+ 6E83             >                endif           ; ok        // for other definitions it "points" the correct handler
 189+ 6E83             >                // Use of "; ok" to suppress "warning[fwdref]"
 189+ 6E83             >
 189+ 6E83             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 190+ 6E83 60 6D 3C 6B                  dw      DP, FETCH               // dp @
 191+ 6E87 23 69                        dw      EXIT                    // ;
 192+ 6E89
 193+ 6E89              //  ______________________________________________________________________
 194+ 6E89              //
 195+ 6E89              // allot        n --
 196+ 6E89                              Colon_Def ALLOT, "ALLOT", is_normal
 196+ 6E89             >                New_Def  ALLOT, "ALLOT", Enter_Ptr, is_normal ; ok
 196+ 6E89             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 196+ 6E89             >
 196+ 6E89             >                // dummy db directives used to calculate length of namec
 196+ 6E89 41 4C 4C 4F >                db      "ALLOT"
 196+ 6E8D 54          >
 196+ 6E8E             >len_NFA         defl    $ - temp_NFA
 196+ 6E8E             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 196+ 6E89             >
 196+ 6E89 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 196+ 6E8A 41 4C 4C 4F >                db      "ALLOT"               // name string in 7-bit ascii, but
 196+ 6E8E 54          >
 196+ 6E8F             >                org     $-1                 // alter last byte of Name just above to set
 196+ 6E8E D4          >                db      {b $} | END_BIT     // msb as name end
 196+ 6E8F             >
 196+ 6E8F 7A 6E       >                dw      last_NFA            // Link to previous definition Name
 196+ 6E91             >ALLOT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 196+ 6E91 27 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 196+ 6E93             >                else
 196+ 6E93 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 196+ 6E93             >                endif           ; ok        // for other definitions it "points" the correct handler
 196+ 6E93             >                // Use of "; ok" to suppress "warning[fwdref]"
 196+ 6E93             >
 196+ 6E93             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 197+ 6E93 60 6D 19 6B                  dw      DP,  PLUSSTORE          // dp +!
 198+ 6E97 23 69                        dw      EXIT                    // ;
 199+ 6E99
 200+ 6E99              //  ______________________________________________________________________
 201+ 6E99              //
 202+ 6E99              // comma        n --
 203+ 6E99                              Colon_Def COMMA, ",", is_normal
 203+ 6E99             >                New_Def  COMMA, ",", Enter_Ptr, is_normal ; ok
 203+ 6E99             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 203+ 6E99             >
 203+ 6E99             >                // dummy db directives used to calculate length of namec
 203+ 6E99 2C          >                db      ","
 203+ 6E9A             >len_NFA         defl    $ - temp_NFA
 203+ 6E9A             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 203+ 6E99             >
 203+ 6E99 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 203+ 6E9A 2C          >                db      ","               // name string in 7-bit ascii, but
 203+ 6E9B             >                org     $-1                 // alter last byte of Name just above to set
 203+ 6E9A AC          >                db      {b $} | END_BIT     // msb as name end
 203+ 6E9B             >
 203+ 6E9B 89 6E       >                dw      last_NFA            // Link to previous definition Name
 203+ 6E9D             >COMMA:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 203+ 6E9D 27 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 203+ 6E9F             >                else
 203+ 6E9F ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 203+ 6E9F             >                endif           ; ok        // for other definitions it "points" the correct handler
 203+ 6E9F             >                // Use of "; ok" to suppress "warning[fwdref]"
 203+ 6E9F             >
 203+ 6E9F             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 204+ 6E9F 81 6E 49 6B                  dw      HERE, STORE             // here !
 205+ 6EA3 B2 6C 91 6E                  dw      TWO, ALLOT              // 2 allot
 206+ 6EA7 23 69                        dw      EXIT                    // ;
 207+ 6EA9
 208+ 6EA9              //  ______________________________________________________________________
 209+ 6EA9              //
 210+ 6EA9              // ccomma       c --
 211+ 6EA9                              Colon_Def CCOMMA, "C,", is_normal
 211+ 6EA9             >                New_Def  CCOMMA, "C,", Enter_Ptr, is_normal ; ok
 211+ 6EA9             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 211+ 6EA9             >
 211+ 6EA9             >                // dummy db directives used to calculate length of namec
 211+ 6EA9 43 2C       >                db      "C,"
 211+ 6EAB             >len_NFA         defl    $ - temp_NFA
 211+ 6EAB             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 211+ 6EA9             >
 211+ 6EA9 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 211+ 6EAA 43 2C       >                db      "C,"               // name string in 7-bit ascii, but
 211+ 6EAC             >                org     $-1                 // alter last byte of Name just above to set
 211+ 6EAB AC          >                db      {b $} | END_BIT     // msb as name end
 211+ 6EAC             >
 211+ 6EAC 99 6E       >                dw      last_NFA            // Link to previous definition Name
 211+ 6EAE             >CCOMMA:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 211+ 6EAE 27 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 211+ 6EB0             >                else
 211+ 6EB0 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 211+ 6EB0             >                endif           ; ok        // for other definitions it "points" the correct handler
 211+ 6EB0             >                // Use of "; ok" to suppress "warning[fwdref]"
 211+ 6EB0             >
 211+ 6EB0             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 212+ 6EB0 81 6E 65 6B                  dw      HERE, CSTORE            // here c!
 213+ 6EB4 AA 6C 91 6E                  dw      ONE, ALLOT              // 1 allot
 214+ 6EB8 23 69                        dw      EXIT                    // ;
 215+ 6EBA
 216+ 6EBA              //  ______________________________________________________________________
 217+ 6EBA              //
 218+ 6EBA              // s>d          n -- d
 219+ 6EBA              // converts a single precision integer in a double precision
 220+ 6EBA                              New_Def S_TO_D, "S>D", is_code, is_normal
 220+ 6EBA             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 220+ 6EBA             >
 220+ 6EBA             >                // dummy db directives used to calculate length of namec
 220+ 6EBA 53 3E 44    >                db      "S>D"
 220+ 6EBD             >len_NFA         defl    $ - temp_NFA
 220+ 6EBD             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 220+ 6EBA             >
 220+ 6EBA 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 220+ 6EBB 53 3E 44    >                db      "S>D"               // name string in 7-bit ascii, but
 220+ 6EBE             >                org     $-1                 // alter last byte of Name just above to set
 220+ 6EBD C4          >                db      {b $} | END_BIT     // msb as name end
 220+ 6EBE             >
 220+ 6EBE A9 6E       >                dw      last_NFA            // Link to previous definition Name
 220+ 6EC0             >S_TO_D:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 220+ 6EC0 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
 220+ 6EC0             >                else
 220+ 6EC0 C2 6E       >                dw      $ + 2   ; ok        // is pointed by CFA
 220+ 6EC2             >                endif           ; ok        // for other definitions it "points" the correct handler
 220+ 6EC2             >                // Use of "; ok" to suppress "warning[fwdref]"
 220+ 6EC2             >
 220+ 6EC2             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 221+ 6EC2 D1                           pop     de
 222+ 6EC3 21 00 00                     ld      hl, 0
 223+ 6EC6 7A                           ld      a, d
 224+ 6EC7 E6 80                        and     $80
 225+ 6EC9 28 01                        jr      z, S_to_D_Skip
 226+ 6ECB 2B                           dec     hl                  // $FFFF
 227+ 6ECC              S_to_D_Skip:
 228+ 6ECC D5                           push    de
 229+ 6ECD E5                           push    hl
 230+ 6ECE                              next
 230+ 6ECE DD E9       >                jp      (ix)
 231+ 6ED0
 232+ 6ED0              //  ______________________________________________________________________
 233+ 6ED0              //
 234+ 6ED0              // -            n1 n2 -- n3
 235+ 6ED0              // subtraction
 236+ 6ED0                              New_Def SUBTRACT, "-", is_code, is_normal
 236+ 6ED0             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 236+ 6ED0             >
 236+ 6ED0             >                // dummy db directives used to calculate length of namec
 236+ 6ED0 2D          >                db      "-"
 236+ 6ED1             >len_NFA         defl    $ - temp_NFA
 236+ 6ED1             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 236+ 6ED0             >
 236+ 6ED0 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 236+ 6ED1 2D          >                db      "-"               // name string in 7-bit ascii, but
 236+ 6ED2             >                org     $-1                 // alter last byte of Name just above to set
 236+ 6ED1 AD          >                db      {b $} | END_BIT     // msb as name end
 236+ 6ED2             >
 236+ 6ED2 BA 6E       >                dw      last_NFA            // Link to previous definition Name
 236+ 6ED4             >SUBTRACT:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 236+ 6ED4 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
 236+ 6ED4             >                else
 236+ 6ED4 D6 6E       >                dw      $ + 2   ; ok        // is pointed by CFA
 236+ 6ED6             >                endif           ; ok        // for other definitions it "points" the correct handler
 236+ 6ED6             >                // Use of "; ok" to suppress "warning[fwdref]"
 236+ 6ED6             >
 236+ 6ED6             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 237+ 6ED6 D1                           pop     de
 238+ 6ED7 E1                           pop     hl
 239+ 6ED8 A7                           and     a
 240+ 6ED9 ED 52                        sbc     hl, de
 241+ 6EDB
 242+ 6EDB                              psh1
 242+ 6EDB E5          >                push    hl
 242+ 6EDC DD E9       >                jp      (ix)
 243+ 6EDE
 244+ 6EDE              //  ______________________________________________________________________
 245+ 6EDE              //
 246+ 6EDE              // =            n1 n2 -- n3
 247+ 6EDE              // equals
 248+ 6EDE                              Colon_Def EQUALS, "=", is_normal
 248+ 6EDE             >                New_Def  EQUALS, "=", Enter_Ptr, is_normal ; ok
 248+ 6EDE             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 248+ 6EDE             >
 248+ 6EDE             >                // dummy db directives used to calculate length of namec
 248+ 6EDE 3D          >                db      "="
 248+ 6EDF             >len_NFA         defl    $ - temp_NFA
 248+ 6EDF             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 248+ 6EDE             >
 248+ 6EDE 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 248+ 6EDF 3D          >                db      "="               // name string in 7-bit ascii, but
 248+ 6EE0             >                org     $-1                 // alter last byte of Name just above to set
 248+ 6EDF BD          >                db      {b $} | END_BIT     // msb as name end
 248+ 6EE0             >
 248+ 6EE0 D0 6E       >                dw      last_NFA            // Link to previous definition Name
 248+ 6EE2             >EQUALS:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 248+ 6EE2 27 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 248+ 6EE4             >                else
 248+ 6EE4 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 248+ 6EE4             >                endif           ; ok        // for other definitions it "points" the correct handler
 248+ 6EE4             >                // Use of "; ok" to suppress "warning[fwdref]"
 248+ 6EE4             >
 248+ 6EE4             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 249+ 6EE4 D4 6E 86 69                  dw      SUBTRACT, ZEQUAL        // - 0=
 250+ 6EE8 23 69                        dw      EXIT                    // ;
 251+ 6EEA
 252+ 6EEA              //  ______________________________________________________________________
 253+ 6EEA              //
 254+ 6EEA              // u<           u1 u2 -- u3
 255+ 6EEA              // unsigned less-than
 256+ 6EEA                              New_Def ULESS, "U<", is_code, is_normal
 256+ 6EEA             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 256+ 6EEA             >
 256+ 6EEA             >                // dummy db directives used to calculate length of namec
 256+ 6EEA 55 3C       >                db      "U<"
 256+ 6EEC             >len_NFA         defl    $ - temp_NFA
 256+ 6EEC             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 256+ 6EEA             >
 256+ 6EEA 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 256+ 6EEB 55 3C       >                db      "U<"               // name string in 7-bit ascii, but
 256+ 6EED             >                org     $-1                 // alter last byte of Name just above to set
 256+ 6EEC BC          >                db      {b $} | END_BIT     // msb as name end
 256+ 6EED             >
 256+ 6EED DE 6E       >                dw      last_NFA            // Link to previous definition Name
 256+ 6EEF             >ULESS:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 256+ 6EEF ~           >                dw      runcode ; ok        // for primitive definitions  actual code
 256+ 6EEF             >                else
 256+ 6EEF F1 6E       >                dw      $ + 2   ; ok        // is pointed by CFA
 256+ 6EF1             >                endif           ; ok        // for other definitions it "points" the correct handler
 256+ 6EF1             >                // Use of "; ok" to suppress "warning[fwdref]"
 256+ 6EF1             >
 256+ 6EF1             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 257+ 6EF1 D1                           pop     de
 258+ 6EF2 E1                           pop     hl
 259+ 6EF3 A7                           and     a
 260+ 6EF4 ED 52                        sbc     hl, de
 261+ 6EF6 21 FF FF                     ld      hl, -1
 262+ 6EF9 38 01                        jr      c, ULess_Skip
 263+ 6EFB 23                               inc     hl
 264+ 6EFC              ULess_Skip:
 265+ 6EFC
 266+ 6EFC                              psh1
 266+ 6EFC E5          >                push    hl
 266+ 6EFD DD E9       >                jp      (ix)
 267+ 6EFF
 268+ 6EFF              //  ______________________________________________________________________
 269+ 6EFF              //
 270+ 6EFF              // <           n1 n2 -- n3
 271+ 6EFF              // less-than
 272+ 6EFF                              New_Def LESS, "<", is_code, is_normal
 272+ 6EFF             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 272+ 6EFF             >
 272+ 6EFF             >                // dummy db directives used to calculate length of namec
 272+ 6EFF 3C          >                db      "<"
 272+ 6F00             >len_NFA         defl    $ - temp_NFA
 272+ 6F00             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 272+ 6EFF             >
 272+ 6EFF 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 272+ 6F00 3C          >                db      "<"               // name string in 7-bit ascii, but
 272+ 6F01             >                org     $-1                 // alter last byte of Name just above to set
 272+ 6F00 BC          >                db      {b $} | END_BIT     // msb as name end
 272+ 6F01             >
 272+ 6F01 EA 6E       >                dw      last_NFA            // Link to previous definition Name
 272+ 6F03             >LESS:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 272+ 6F03 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
 272+ 6F03             >                else
 272+ 6F03 05 6F       >                dw      $ + 2   ; ok        // is pointed by CFA
 272+ 6F05             >                endif           ; ok        // for other definitions it "points" the correct handler
 272+ 6F05             >                // Use of "; ok" to suppress "warning[fwdref]"
 272+ 6F05             >
 272+ 6F05             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 273+ 6F05 D1                           pop     de
 274+ 6F06 E1                           pop     hl
 275+ 6F07 7C                           ld      a, h
 276+ 6F08 EE 80                        xor     $80
 277+ 6F0A 67                           ld      h, a
 278+ 6F0B 7A                           ld      a, d
 279+ 6F0C EE 80                        xor     $80
 280+ 6F0E 57                           ld      d, a
 281+ 6F0F A7                           and     a
 282+ 6F10 ED 52                        sbc     hl, de
 283+ 6F12 21 FF FF                     ld      hl, -1
 284+ 6F15 38 01                        jr      c, Less_Skip
 285+ 6F17 23                               inc     hl
 286+ 6F18              Less_Skip:
 287+ 6F18
 288+ 6F18                              psh1
 288+ 6F18 E5          >                push    hl
 288+ 6F19 DD E9       >                jp      (ix)
 289+ 6F1B
 290+ 6F1B              //  ______________________________________________________________________
 291+ 6F1B              //
 292+ 6F1B              // >            n1 n2 -- n3
 293+ 6F1B              // greater than
 294+ 6F1B                              Colon_Def GREATER, ">", is_normal
 294+ 6F1B             >                New_Def  GREATER, ">", Enter_Ptr, is_normal ; ok
 294+ 6F1B             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 294+ 6F1B             >
 294+ 6F1B             >                // dummy db directives used to calculate length of namec
 294+ 6F1B 3E          >                db      ">"
 294+ 6F1C             >len_NFA         defl    $ - temp_NFA
 294+ 6F1C             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 294+ 6F1B             >
 294+ 6F1B 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 294+ 6F1C 3E          >                db      ">"               // name string in 7-bit ascii, but
 294+ 6F1D             >                org     $-1                 // alter last byte of Name just above to set
 294+ 6F1C BE          >                db      {b $} | END_BIT     // msb as name end
 294+ 6F1D             >
 294+ 6F1D FF 6E       >                dw      last_NFA            // Link to previous definition Name
 294+ 6F1F             >GREATER:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 294+ 6F1F 27 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 294+ 6F21             >                else
 294+ 6F21 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 294+ 6F21             >                endif           ; ok        // for other definitions it "points" the correct handler
 294+ 6F21             >                // Use of "; ok" to suppress "warning[fwdref]"
 294+ 6F21             >
 294+ 6F21             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 295+ 6F21 9C 6A 03 6F                  dw      SWAP, LESS              // swap <
 296+ 6F25 23 69                        dw      EXIT                    // ;
 297+ 6F27              //  ______________________________________________________________________
 298+ 6F27              //
 299+ 6F27              // min          n1 n2 -- n3
 300+ 6F27              // minimum between n1 and n2
 301+ 6F27                              Colon_Def MIN, "MIN" , is_normal
 301+ 6F27             >                New_Def  MIN, "MIN", Enter_Ptr, is_normal ; ok
 301+ 6F27             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 301+ 6F27             >
 301+ 6F27             >                // dummy db directives used to calculate length of namec
 301+ 6F27 4D 49 4E    >                db      "MIN"
 301+ 6F2A             >len_NFA         defl    $ - temp_NFA
 301+ 6F2A             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 301+ 6F27             >
 301+ 6F27 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 301+ 6F28 4D 49 4E    >                db      "MIN"               // name string in 7-bit ascii, but
 301+ 6F2B             >                org     $-1                 // alter last byte of Name just above to set
 301+ 6F2A CE          >                db      {b $} | END_BIT     // msb as name end
 301+ 6F2B             >
 301+ 6F2B 1B 6F       >                dw      last_NFA            // Link to previous definition Name
 301+ 6F2D             >MIN:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 301+ 6F2D 27 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 301+ 6F2F             >                else
 301+ 6F2F ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 301+ 6F2F             >                endif           ; ok        // for other definitions it "points" the correct handler
 301+ 6F2F             >                // Use of "; ok" to suppress "warning[fwdref]"
 301+ 6F2F             >
 301+ 6F2F             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 302+ 6F2F 0A 6B                        dw      TWO_DUP                 // 2dup
 303+ 6F31 1F 6F                        dw      GREATER                 // >
 304+ 6F33 E3 63                        dw      ZBRANCH
 305+ 6F35 04 00                        dw      Min_Skip - $   // if
 306+ 6F37 9C 6A                        dw          SWAP                //      swap
 307+ 6F39              Min_Skip:                                       // endif
 308+ 6F39 74 6A                        dw      DROP                    // drop
 309+ 6F3B 23 69                        dw      EXIT                    // ;
 310+ 6F3D
 311+ 6F3D              //  ______________________________________________________________________
 312+ 6F3D              //
 313+ 6F3D              // max          n1 n2 -- n3
 314+ 6F3D              // maximum between n1 and n2
 315+ 6F3D                              Colon_Def MAX, "MAX", is_normal
 315+ 6F3D             >                New_Def  MAX, "MAX", Enter_Ptr, is_normal ; ok
 315+ 6F3D             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 315+ 6F3D             >
 315+ 6F3D             >                // dummy db directives used to calculate length of namec
 315+ 6F3D 4D 41 58    >                db      "MAX"
 315+ 6F40             >len_NFA         defl    $ - temp_NFA
 315+ 6F40             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 315+ 6F3D             >
 315+ 6F3D 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 315+ 6F3E 4D 41 58    >                db      "MAX"               // name string in 7-bit ascii, but
 315+ 6F41             >                org     $-1                 // alter last byte of Name just above to set
 315+ 6F40 D8          >                db      {b $} | END_BIT     // msb as name end
 315+ 6F41             >
 315+ 6F41 27 6F       >                dw      last_NFA            // Link to previous definition Name
 315+ 6F43             >MAX:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 315+ 6F43 27 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 315+ 6F45             >                else
 315+ 6F45 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 315+ 6F45             >                endif           ; ok        // for other definitions it "points" the correct handler
 315+ 6F45             >                // Use of "; ok" to suppress "warning[fwdref]"
 315+ 6F45             >
 315+ 6F45             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 316+ 6F45 0A 6B                        dw      TWO_DUP                 // 2dup
 317+ 6F47 03 6F                        dw      LESS                    // <
 318+ 6F49 E3 63                        dw      ZBRANCH
 319+ 6F4B 04 00                        dw      Max_Skip - $   // if
 320+ 6F4D 9C 6A                        dw          SWAP                //      swap
 321+ 6F4F              Max_Skip:                                       // endif
 322+ 6F4F 74 6A                        dw      DROP                    // drop
 323+ 6F51 23 69                        dw      EXIT                    // ;
 324+ 6F53
 325+ 6F53              //  ______________________________________________________________________
 326+ 6F53              //
 327+ 6F53              // ?dup         n -- 0 | n n
 328+ 6F53              // duplicate if not zero
 329+ 6F53                              New_Def QDUP, "?DUP", is_code, is_normal
 329+ 6F53             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 329+ 6F53             >
 329+ 6F53             >                // dummy db directives used to calculate length of namec
 329+ 6F53 3F 44 55 50 >                db      "?DUP"
 329+ 6F57             >len_NFA         defl    $ - temp_NFA
 329+ 6F57             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 329+ 6F53             >
 329+ 6F53 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 329+ 6F54 3F 44 55 50 >                db      "?DUP"               // name string in 7-bit ascii, but
 329+ 6F58             >                org     $-1                 // alter last byte of Name just above to set
 329+ 6F57 D0          >                db      {b $} | END_BIT     // msb as name end
 329+ 6F58             >
 329+ 6F58 3D 6F       >                dw      last_NFA            // Link to previous definition Name
 329+ 6F5A             >QDUP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 329+ 6F5A ~           >                dw      runcode ; ok        // for primitive definitions  actual code
 329+ 6F5A             >                else
 329+ 6F5A 5C 6F       >                dw      $ + 2   ; ok        // is pointed by CFA
 329+ 6F5C             >                endif           ; ok        // for other definitions it "points" the correct handler
 329+ 6F5C             >                // Use of "; ok" to suppress "warning[fwdref]"
 329+ 6F5C             >
 329+ 6F5C             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 330+ 6F5C              QDup_Ptr:
 331+ 6F5C E1                           pop     hl
 332+ 6F5D 7C                           ld      a, h
 333+ 6F5E B5                           or      l
 334+ 6F5F 28 01                        jr      z, QDup_Skip
 335+ 6F61 E5                               push    hl
 336+ 6F62              QDup_Skip:
 337+ 6F62                              psh1
 337+ 6F62 E5          >                push    hl
 337+ 6F63 DD E9       >                jp      (ix)
 338+ 6F65
 339+ 6F65              //  ______________________________________________________________________
 340+ 6F65              //
 341+ 6F65              // -dup         n -- 0 | n n
 342+ 6F65              // duplicate if not zero
 343+ 6F65                              New_Def LDUP, "-DUP", QDup_Ptr, is_normal
 343+ 6F65             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 343+ 6F65             >
 343+ 6F65             >                // dummy db directives used to calculate length of namec
 343+ 6F65 2D 44 55 50 >                db      "-DUP"
 343+ 6F69             >len_NFA         defl    $ - temp_NFA
 343+ 6F69             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 343+ 6F65             >
 343+ 6F65 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 343+ 6F66 2D 44 55 50 >                db      "-DUP"               // name string in 7-bit ascii, but
 343+ 6F6A             >                org     $-1                 // alter last byte of Name just above to set
 343+ 6F69 D0          >                db      {b $} | END_BIT     // msb as name end
 343+ 6F6A             >
 343+ 6F6A 53 6F       >                dw      last_NFA            // Link to previous definition Name
 343+ 6F6C             >LDUP:          if QDup_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 343+ 6F6C 5C 6F       >                dw      QDup_Ptr ; ok        // for primitive definitions  actual code
 343+ 6F6E             >                else
 343+ 6F6E ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 343+ 6F6E             >                endif           ; ok        // for other definitions it "points" the correct handler
 343+ 6F6E             >                // Use of "; ok" to suppress "warning[fwdref]"
 343+ 6F6E             >
 343+ 6F6E             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 344+ 6F6E
 345+ 6F6E              //  ______________________________________________________________________
 346+ 6F6E              //
 347+ 6F6E              // emit         c --
 348+ 6F6E                              Colon_Def EMIT, "EMIT", is_normal
 348+ 6F6E             >                New_Def  EMIT, "EMIT", Enter_Ptr, is_normal ; ok
 348+ 6F6E             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 348+ 6F6E             >
 348+ 6F6E             >                // dummy db directives used to calculate length of namec
 348+ 6F6E 45 4D 49 54 >                db      "EMIT"
 348+ 6F72             >len_NFA         defl    $ - temp_NFA
 348+ 6F72             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 348+ 6F6E             >
 348+ 6F6E 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 348+ 6F6F 45 4D 49 54 >                db      "EMIT"               // name string in 7-bit ascii, but
 348+ 6F73             >                org     $-1                 // alter last byte of Name just above to set
 348+ 6F72 D4          >                db      {b $} | END_BIT     // msb as name end
 348+ 6F73             >
 348+ 6F73 65 6F       >                dw      last_NFA            // Link to previous definition Name
 348+ 6F75             >EMIT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 348+ 6F75 27 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 348+ 6F77             >                else
 348+ 6F77 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 348+ 6F77             >                endif           ; ok        // for other definitions it "points" the correct handler
 348+ 6F77             >                // Use of "; ok" to suppress "warning[fwdref]"
 348+ 6F77             >
 348+ 6F77             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 349+ 6F77 1F 66                        dw      C_EMIT                      // (?emit)
 350+ 6F79 5A 6F                        dw      QDUP                        // ?dup
 351+ 6F7B                                                                  // if
 352+ 6F7B E3 63                        dw      ZBRANCH
 353+ 6F7D 0A 00                        dw      Emit_Skip - $
 354+ 6F7F EB 65                        dw          EMITC                   //      emitc
 355+ 6F81 AA 6C                        dw          ONE                     //      1
 356+ 6F83 B3 6D 19 6B                  dw          OUT, PLUSSTORE        //      out +!
 357+ 6F87              Emit_Skip:                                          // endif
 358+ 6F87 23 69                        dw      EXIT                        // ;
 359+ 6F89
 360+ 6F89              //  ______________________________________________________________________
 361+ 6F89              //
 362+ 6F89              // space        --
 363+ 6F89                              Colon_Def SPACE, "SPACE", is_normal
 363+ 6F89             >                New_Def  SPACE, "SPACE", Enter_Ptr, is_normal ; ok
 363+ 6F89             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 363+ 6F89             >
 363+ 6F89             >                // dummy db directives used to calculate length of namec
 363+ 6F89 53 50 41 43 >                db      "SPACE"
 363+ 6F8D 45          >
 363+ 6F8E             >len_NFA         defl    $ - temp_NFA
 363+ 6F8E             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 363+ 6F89             >
 363+ 6F89 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 363+ 6F8A 53 50 41 43 >                db      "SPACE"               // name string in 7-bit ascii, but
 363+ 6F8E 45          >
 363+ 6F8F             >                org     $-1                 // alter last byte of Name just above to set
 363+ 6F8E C5          >                db      {b $} | END_BIT     // msb as name end
 363+ 6F8F             >
 363+ 6F8F 6E 6F       >                dw      last_NFA            // Link to previous definition Name
 363+ 6F91             >SPACE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 363+ 6F91 27 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 363+ 6F93             >                else
 363+ 6F93 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 363+ 6F93             >                endif           ; ok        // for other definitions it "points" the correct handler
 363+ 6F93             >                // Use of "; ok" to suppress "warning[fwdref]"
 363+ 6F93             >
 363+ 6F93             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 364+ 6F93 CC 6C 75 6F                  dw      BL, EMIT                // bl emit
 365+ 6F97 23 69                        dw      EXIT                    // ;
 366+ 6F99
 367+ 6F99              //  ______________________________________________________________________
 368+ 6F99              //
 369+ 6F99              // traverse     a n -- a
 370+ 6F99              // A dictionary entry is structured as follows
 371+ 6F99              // NFA: +0   one byte of word-length (n<32) | some flags (immediate, smudge) | $80
 372+ 6F99              //      +1   word name, last character is toggled with $80
 373+ 6F99              // LFA: +1+n link to NFA ofprevious  dictionary entry.
 374+ 6F99              // CFA: +3+n routine address. Colon definitions here have pointer to code
 375+ 6F99              // PFA: +5+n "is_code", definitions have no PFA.
 376+ 6F99              //
 377+ 6F99                              Colon_Def TRAVERSE, "TRAVERSE", is_normal
 377+ 6F99             >                New_Def  TRAVERSE, "TRAVERSE", Enter_Ptr, is_normal ; ok
 377+ 6F99             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 377+ 6F99             >
 377+ 6F99             >                // dummy db directives used to calculate length of namec
 377+ 6F99 54 52 41 56 >                db      "TRAVERSE"
 377+ 6F9D 45 52 53 45 >
 377+ 6FA1             >len_NFA         defl    $ - temp_NFA
 377+ 6FA1             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 377+ 6F99             >
 377+ 6F99 88          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 377+ 6F9A 54 52 41 56 >                db      "TRAVERSE"               // name string in 7-bit ascii, but
 377+ 6F9E 45 52 53 45 >
 377+ 6FA2             >                org     $-1                 // alter last byte of Name just above to set
 377+ 6FA1 C5          >                db      {b $} | END_BIT     // msb as name end
 377+ 6FA2             >
 377+ 6FA2 89 6F       >                dw      last_NFA            // Link to previous definition Name
 377+ 6FA4             >TRAVERSE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 377+ 6FA4 27 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 377+ 6FA6             >                else
 377+ 6FA6 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 377+ 6FA6             >                endif           ; ok        // for other definitions it "points" the correct handler
 377+ 6FA6             >                // Use of "; ok" to suppress "warning[fwdref]"
 377+ 6FA6             >
 377+ 6FA6             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 378+ 6FA6 9C 6A                        dw      SWAP                    // swap
 379+ 6FA8              Traverse_Begin:                                 // begin
 380+ 6FA8 64 6A C9 69                  dw          OVER, PLUS          //      over +
 381+ 6FAC A9 63 7F 00                  dw          LIT, 127            //      127
 382+ 6FB0 64 6A 57 6B                  dw          OVER, CFETCH        //      over @
 383+ 6FB4 03 6F                        dw          LESS                //      <
 384+ 6FB6                                                              // until
 385+ 6FB6 E3 63                        dw      ZBRANCH
 386+ 6FB8 F0 FF                        dw      Traverse_Begin - $
 387+ 6FBA 7F 6A                        dw      NIP                     //  nip
 388+ 6FBC 23 69                        dw      EXIT                    //  ;
 389+ 6FBE
 390+ 6FBE              //  ______________________________________________________________________
 391+ 6FBE              //
 392+ 6FBE              // latest       -- nfa
 393+ 6FBE                              Colon_Def LATEST, "LATEST", is_normal
 393+ 6FBE             >                New_Def  LATEST, "LATEST", Enter_Ptr, is_normal ; ok
 393+ 6FBE             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 393+ 6FBE             >
 393+ 6FBE             >                // dummy db directives used to calculate length of namec
 393+ 6FBE 4C 41 54 45 >                db      "LATEST"
 393+ 6FC2 53 54       >
 393+ 6FC4             >len_NFA         defl    $ - temp_NFA
 393+ 6FC4             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 393+ 6FBE             >
 393+ 6FBE 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 393+ 6FBF 4C 41 54 45 >                db      "LATEST"               // name string in 7-bit ascii, but
 393+ 6FC3 53 54       >
 393+ 6FC5             >                org     $-1                 // alter last byte of Name just above to set
 393+ 6FC4 D4          >                db      {b $} | END_BIT     // msb as name end
 393+ 6FC5             >
 393+ 6FC5 99 6F       >                dw      last_NFA            // Link to previous definition Name
 393+ 6FC7             >LATEST:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 393+ 6FC7 27 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 393+ 6FC9             >                else
 393+ 6FC9 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 393+ 6FC9             >                endif           ; ok        // for other definitions it "points" the correct handler
 393+ 6FC9             >                // Use of "; ok" to suppress "warning[fwdref]"
 393+ 6FC9             >
 393+ 6FC9             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 394+ 6FC9 E2 6D                        dw      CURRENT                 // current
 395+ 6FCB 3C 6B 3C 6B                  dw      FETCH, FETCH            // @ @
 396+ 6FCF 23 69                        dw      EXIT                    // ;
 397+ 6FD1
 398+ 6FD1              //  ______________________________________________________________________
 399+ 6FD1              //
 400+ 6FD1              // lfa          pfa -- lfa
 401+ 6FD1                              Colon_Def LFA, "LFA", is_normal
 401+ 6FD1             >                New_Def  LFA, "LFA", Enter_Ptr, is_normal ; ok
 401+ 6FD1             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 401+ 6FD1             >
 401+ 6FD1             >                // dummy db directives used to calculate length of namec
 401+ 6FD1 4C 46 41    >                db      "LFA"
 401+ 6FD4             >len_NFA         defl    $ - temp_NFA
 401+ 6FD4             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 401+ 6FD1             >
 401+ 6FD1 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 401+ 6FD2 4C 46 41    >                db      "LFA"               // name string in 7-bit ascii, but
 401+ 6FD5             >                org     $-1                 // alter last byte of Name just above to set
 401+ 6FD4 C1          >                db      {b $} | END_BIT     // msb as name end
 401+ 6FD5             >
 401+ 6FD5 BE 6F       >                dw      last_NFA            // Link to previous definition Name
 401+ 6FD7             >LFA:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 401+ 6FD7 27 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 401+ 6FD9             >                else
 401+ 6FD9 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 401+ 6FD9             >                endif           ; ok        // for other definitions it "points" the correct handler
 401+ 6FD9             >                // Use of "; ok" to suppress "warning[fwdref]"
 401+ 6FD9             >
 401+ 6FD9             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 402+ 6FD9 1C 6A                        dw      CELL_MINUS              // cell-
 403+ 6FDB 1C 6A                        dw      CELL_MINUS              // cell-
 404+ 6FDD 23 69                        dw      EXIT                    // ;
 405+ 6FDF
 406+ 6FDF              //  ______________________________________________________________________
 407+ 6FDF              //
 408+ 6FDF              // cfa          pfa -- cfa
 409+ 6FDF                              Colon_Def CFA, "CFA", is_normal
 409+ 6FDF             >                New_Def  CFA, "CFA", Enter_Ptr, is_normal ; ok
 409+ 6FDF             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 409+ 6FDF             >
 409+ 6FDF             >                // dummy db directives used to calculate length of namec
 409+ 6FDF 43 46 41    >                db      "CFA"
 409+ 6FE2             >len_NFA         defl    $ - temp_NFA
 409+ 6FE2             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 409+ 6FDF             >
 409+ 6FDF 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 409+ 6FE0 43 46 41    >                db      "CFA"               // name string in 7-bit ascii, but
 409+ 6FE3             >                org     $-1                 // alter last byte of Name just above to set
 409+ 6FE2 C1          >                db      {b $} | END_BIT     // msb as name end
 409+ 6FE3             >
 409+ 6FE3 D1 6F       >                dw      last_NFA            // Link to previous definition Name
 409+ 6FE5             >CFA:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 409+ 6FE5 27 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 409+ 6FE7             >                else
 409+ 6FE7 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 409+ 6FE7             >                endif           ; ok        // for other definitions it "points" the correct handler
 409+ 6FE7             >                // Use of "; ok" to suppress "warning[fwdref]"
 409+ 6FE7             >
 409+ 6FE7             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 410+ 6FE7 1C 6A                        dw      CELL_MINUS              // cell-
 411+ 6FE9 23 69                        dw      EXIT                    // ;
 412+ 6FEB
 413+ 6FEB              //  ______________________________________________________________________
 414+ 6FEB              //
 415+ 6FEB              // nfa          pfa -- nfa
 416+ 6FEB                              Colon_Def NFA, "NFA", is_normal
 416+ 6FEB             >                New_Def  NFA, "NFA", Enter_Ptr, is_normal ; ok
 416+ 6FEB             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 416+ 6FEB             >
 416+ 6FEB             >                // dummy db directives used to calculate length of namec
 416+ 6FEB 4E 46 41    >                db      "NFA"
 416+ 6FEE             >len_NFA         defl    $ - temp_NFA
 416+ 6FEE             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 416+ 6FEB             >
 416+ 6FEB 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 416+ 6FEC 4E 46 41    >                db      "NFA"               // name string in 7-bit ascii, but
 416+ 6FEF             >                org     $-1                 // alter last byte of Name just above to set
 416+ 6FEE C1          >                db      {b $} | END_BIT     // msb as name end
 416+ 6FEF             >
 416+ 6FEF DF 6F       >                dw      last_NFA            // Link to previous definition Name
 416+ 6FF1             >NFA:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 416+ 6FF1 27 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 416+ 6FF3             >                else
 416+ 6FF3 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 416+ 6FF3             >                endif           ; ok        // for other definitions it "points" the correct handler
 416+ 6FF3             >                // Use of "; ok" to suppress "warning[fwdref]"
 416+ 6FF3             >
 416+ 6FF3             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 417+ 6FF3 A9 63 05 00                  dw      LIT, 5                  // 5
 418+ 6FF7 D4 6E                        dw      SUBTRACT                // -
 419+ 6FF9 C3 6C                        dw      NEG_ONE                 // -1
 420+ 6FFB A4 6F                        dw      TRAVERSE                // traverse
 421+ 6FFD 23 69                        dw      EXIT                    // ;
 422+ 6FFF
 423+ 6FFF              //  ______________________________________________________________________
 424+ 6FFF              //
 425+ 6FFF              // pfa          nfa -- pfa
 426+ 6FFF                              Colon_Def PFA, "PFA", is_normal
 426+ 6FFF             >                New_Def  PFA, "PFA", Enter_Ptr, is_normal ; ok
 426+ 6FFF             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 426+ 6FFF             >
 426+ 6FFF             >                // dummy db directives used to calculate length of namec
 426+ 6FFF 50 46 41    >                db      "PFA"
 426+ 7002             >len_NFA         defl    $ - temp_NFA
 426+ 7002             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 426+ 6FFF             >
 426+ 6FFF 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 426+ 7000 50 46 41    >                db      "PFA"               // name string in 7-bit ascii, but
 426+ 7003             >                org     $-1                 // alter last byte of Name just above to set
 426+ 7002 C1          >                db      {b $} | END_BIT     // msb as name end
 426+ 7003             >
 426+ 7003 EB 6F       >                dw      last_NFA            // Link to previous definition Name
 426+ 7005             >PFA:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 426+ 7005 27 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 426+ 7007             >                else
 426+ 7007 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 426+ 7007             >                endif           ; ok        // for other definitions it "points" the correct handler
 426+ 7007             >                // Use of "; ok" to suppress "warning[fwdref]"
 426+ 7007             >
 426+ 7007             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 427+ 7007 AA 6C                        dw      ONE                     // 1
 428+ 7009 A4 6F                        dw      TRAVERSE                // traverse
 429+ 700B A9 63 05 00                  dw      LIT, 5                  // 6
 430+ 700F C9 69                        dw      PLUS                    // +
 431+ 7011 23 69                        dw      EXIT                    // ;
 432+ 7013
 433+ 7013              //  ______________________________________________________________________
 434+ 7013              //
 435+ 7013              // >body        cfa -- pfa
 436+ 7013                              Colon_Def TO_BODY, ">BODY", is_normal
 436+ 7013             >                New_Def  TO_BODY, ">BODY", Enter_Ptr, is_normal ; ok
 436+ 7013             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 436+ 7013             >
 436+ 7013             >                // dummy db directives used to calculate length of namec
 436+ 7013 3E 42 4F 44 >                db      ">BODY"
 436+ 7017 59          >
 436+ 7018             >len_NFA         defl    $ - temp_NFA
 436+ 7018             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 436+ 7013             >
 436+ 7013 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 436+ 7014 3E 42 4F 44 >                db      ">BODY"               // name string in 7-bit ascii, but
 436+ 7018 59          >
 436+ 7019             >                org     $-1                 // alter last byte of Name just above to set
 436+ 7018 D9          >                db      {b $} | END_BIT     // msb as name end
 436+ 7019             >
 436+ 7019 FF 6F       >                dw      last_NFA            // Link to previous definition Name
 436+ 701B             >TO_BODY:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 436+ 701B 27 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 436+ 701D             >                else
 436+ 701D ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 436+ 701D             >                endif           ; ok        // for other definitions it "points" the correct handler
 436+ 701D             >                // Use of "; ok" to suppress "warning[fwdref]"
 436+ 701D             >
 436+ 701D             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 437+ 701D 12 6A                        dw      CELL_PLUS               // cell+
 438+ 701F 23 69                        dw      EXIT                    // ;
 439+ 7021
 440+ 7021              //  ______________________________________________________________________
 441+ 7021              //
 442+ 7021              // <name        cfa -- nfa
 443+ 7021                              Colon_Def TO_NAME, "<NAME", is_normal
 443+ 7021             >                New_Def  TO_NAME, "<NAME", Enter_Ptr, is_normal ; ok
 443+ 7021             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 443+ 7021             >
 443+ 7021             >                // dummy db directives used to calculate length of namec
 443+ 7021 3C 4E 41 4D >                db      "<NAME"
 443+ 7025 45          >
 443+ 7026             >len_NFA         defl    $ - temp_NFA
 443+ 7026             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 443+ 7021             >
 443+ 7021 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 443+ 7022 3C 4E 41 4D >                db      "<NAME"               // name string in 7-bit ascii, but
 443+ 7026 45          >
 443+ 7027             >                org     $-1                 // alter last byte of Name just above to set
 443+ 7026 C5          >                db      {b $} | END_BIT     // msb as name end
 443+ 7027             >
 443+ 7027 13 70       >                dw      last_NFA            // Link to previous definition Name
 443+ 7029             >TO_NAME:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 443+ 7029 27 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 443+ 702B             >                else
 443+ 702B ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 443+ 702B             >                endif           ; ok        // for other definitions it "points" the correct handler
 443+ 702B             >                // Use of "; ok" to suppress "warning[fwdref]"
 443+ 702B             >
 443+ 702B             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 444+ 702B 1B 70                        dw      TO_BODY                 // >body
 445+ 702D F1 6F                        dw      NFA                     // nfa
 446+ 702F 23 69                        dw      EXIT                    // ;
 447+ 7031
 448+ 7031              //  ______________________________________________________________________
 449+ 7031              //
 450+ 7031              // !csp         --
 451+ 7031              // store in user variable CSP current value of SP. Used at compile-time for syntax checkng
 452+ 7031                              Colon_Def STORE_CSP, "!CSP", is_normal
 452+ 7031             >                New_Def  STORE_CSP, "!CSP", Enter_Ptr, is_normal ; ok
 452+ 7031             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 452+ 7031             >
 452+ 7031             >                // dummy db directives used to calculate length of namec
 452+ 7031 21 43 53 50 >                db      "!CSP"
 452+ 7035             >len_NFA         defl    $ - temp_NFA
 452+ 7035             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 452+ 7031             >
 452+ 7031 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 452+ 7032 21 43 53 50 >                db      "!CSP"               // name string in 7-bit ascii, but
 452+ 7036             >                org     $-1                 // alter last byte of Name just above to set
 452+ 7035 D0          >                db      {b $} | END_BIT     // msb as name end
 452+ 7036             >
 452+ 7036 21 70       >                dw      last_NFA            // Link to previous definition Name
 452+ 7038             >STORE_CSP:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 452+ 7038 27 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 452+ 703A             >                else
 452+ 703A ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 452+ 703A             >                endif           ; ok        // for other definitions it "points" the correct handler
 452+ 703A             >                // Use of "; ok" to suppress "warning[fwdref]"
 452+ 703A             >
 452+ 703A             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 453+ 703A EB 68                        dw      SPFETCH                 // sp@
 454+ 703C 12 6E 49 6B                  dw      CSP, STORE              // csp !
 455+ 7040 23 69                        dw      EXIT                    // ;
 456+ 7042
 457+ 7042              //  ______________________________________________________________________
 458+ 7042              //
 459+ 7042              // ?error       f n --
 460+ 7042              // rase error n if flag f it true
 461+ 7042                              Colon_Def QERROR, "?ERROR", is_normal
 461+ 7042             >                New_Def  QERROR, "?ERROR", Enter_Ptr, is_normal ; ok
 461+ 7042             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 461+ 7042             >
 461+ 7042             >                // dummy db directives used to calculate length of namec
 461+ 7042 3F 45 52 52 >                db      "?ERROR"
 461+ 7046 4F 52       >
 461+ 7048             >len_NFA         defl    $ - temp_NFA
 461+ 7048             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 461+ 7042             >
 461+ 7042 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 461+ 7043 3F 45 52 52 >                db      "?ERROR"               // name string in 7-bit ascii, but
 461+ 7047 4F 52       >
 461+ 7049             >                org     $-1                 // alter last byte of Name just above to set
 461+ 7048 D2          >                db      {b $} | END_BIT     // msb as name end
 461+ 7049             >
 461+ 7049 31 70       >                dw      last_NFA            // Link to previous definition Name
 461+ 704B             >QERROR:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 461+ 704B 27 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 461+ 704D             >                else
 461+ 704D ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 461+ 704D             >                endif           ; ok        // for other definitions it "points" the correct handler
 461+ 704D             >                // Use of "; ok" to suppress "warning[fwdref]"
 461+ 704D             >
 461+ 704D             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 462+ 704D 9C 6A                        dw      SWAP                    // swap
 463+ 704F                                                              // if
 464+ 704F E3 63                        dw      ZBRANCH
 465+ 7051 08 00                        dw      QError_Else - $
 466+ 7053 BA 75                        dw          ERROR               //      error  ( is a forward-ref )
 467+ 7055                                                              // else
 468+ 7055 CC 63                        dw      BRANCH
 469+ 7057 04 00                        dw      QError_Endif - $
 470+ 7059              QError_Else:
 471+ 7059 74 6A                        dw          DROP                //      drop
 472+ 705B              QError_Endif:                                   // endif
 473+ 705B 23 69                        dw      EXIT                    // ;
 474+ 705D
 475+ 705D              //  ______________________________________________________________________
 476+ 705D              //
 477+ 705D              // ?comp       --
 478+ 705D              // raise msg #17 if not compiling
 479+ 705D                              Colon_Def QCOMP, "?COMP", is_normal
 479+ 705D             >                New_Def  QCOMP, "?COMP", Enter_Ptr, is_normal ; ok
 479+ 705D             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 479+ 705D             >
 479+ 705D             >                // dummy db directives used to calculate length of namec
 479+ 705D 3F 43 4F 4D >                db      "?COMP"
 479+ 7061 50          >
 479+ 7062             >len_NFA         defl    $ - temp_NFA
 479+ 7062             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 479+ 705D             >
 479+ 705D 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 479+ 705E 3F 43 4F 4D >                db      "?COMP"               // name string in 7-bit ascii, but
 479+ 7062 50          >
 479+ 7063             >                org     $-1                 // alter last byte of Name just above to set
 479+ 7062 D0          >                db      {b $} | END_BIT     // msb as name end
 479+ 7063             >
 479+ 7063 42 70       >                dw      last_NFA            // Link to previous definition Name
 479+ 7065             >QCOMP:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 479+ 7065 27 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 479+ 7067             >                else
 479+ 7067 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 479+ 7067             >                endif           ; ok        // for other definitions it "points" the correct handler
 479+ 7067             >                // Use of "; ok" to suppress "warning[fwdref]"
 479+ 7067             >
 479+ 7067             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 480+ 7067 ED 6D 3C 6B                  dw      STATE, FETCH            // state @
 481+ 706B 86 69                        dw      ZEQUAL                  // 0=
 482+ 706D A9 63 11 00                  dw      LIT, 17                 // 17  ( can't be executed )
 483+ 7071 4B 70                        dw      QERROR                  // ?error
 484+ 7073 23 69                        dw      EXIT                    // ;
 485+ 7075
 486+ 7075              //  ______________________________________________________________________
 487+ 7075              //
 488+ 7075              // ?exec       --
 489+ 7075              // raise msg #18 if compiling
 490+ 7075                              Colon_Def QEXEC, "?EXEC", is_normal
 490+ 7075             >                New_Def  QEXEC, "?EXEC", Enter_Ptr, is_normal ; ok
 490+ 7075             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 490+ 7075             >
 490+ 7075             >                // dummy db directives used to calculate length of namec
 490+ 7075 3F 45 58 45 >                db      "?EXEC"
 490+ 7079 43          >
 490+ 707A             >len_NFA         defl    $ - temp_NFA
 490+ 707A             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 490+ 7075             >
 490+ 7075 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 490+ 7076 3F 45 58 45 >                db      "?EXEC"               // name string in 7-bit ascii, but
 490+ 707A 43          >
 490+ 707B             >                org     $-1                 // alter last byte of Name just above to set
 490+ 707A C3          >                db      {b $} | END_BIT     // msb as name end
 490+ 707B             >
 490+ 707B 5D 70       >                dw      last_NFA            // Link to previous definition Name
 490+ 707D             >QEXEC:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 490+ 707D 27 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 490+ 707F             >                else
 490+ 707F ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 490+ 707F             >                endif           ; ok        // for other definitions it "points" the correct handler
 490+ 707F             >                // Use of "; ok" to suppress "warning[fwdref]"
 490+ 707F             >
 490+ 707F             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 491+ 707F ED 6D 3C 6B                  dw      STATE, FETCH            // state @
 492+ 7083 A9 63 12 00                  dw      LIT, 18                 // 18  ( can't be compiled )
 493+ 7087 4B 70                        dw      QERROR                  // ?error
 494+ 7089 23 69                        dw      EXIT                    // ;
 495+ 708B
 496+ 708B              //  ______________________________________________________________________
 497+ 708B              //
 498+ 708B              // ?pairs       n1 n2 --
 499+ 708B              // raise msg #19 if n1 != n2. Compiler pushes some placeholder to stack for syntax checking
 500+ 708B                              Colon_Def QPAIRS, "?PAIRS", is_normal
 500+ 708B             >                New_Def  QPAIRS, "?PAIRS", Enter_Ptr, is_normal ; ok
 500+ 708B             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 500+ 708B             >
 500+ 708B             >                // dummy db directives used to calculate length of namec
 500+ 708B 3F 50 41 49 >                db      "?PAIRS"
 500+ 708F 52 53       >
 500+ 7091             >len_NFA         defl    $ - temp_NFA
 500+ 7091             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 500+ 708B             >
 500+ 708B 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 500+ 708C 3F 50 41 49 >                db      "?PAIRS"               // name string in 7-bit ascii, but
 500+ 7090 52 53       >
 500+ 7092             >                org     $-1                 // alter last byte of Name just above to set
 500+ 7091 D3          >                db      {b $} | END_BIT     // msb as name end
 500+ 7092             >
 500+ 7092 75 70       >                dw      last_NFA            // Link to previous definition Name
 500+ 7094             >QPAIRS:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 500+ 7094 27 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 500+ 7096             >                else
 500+ 7096 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 500+ 7096             >                endif           ; ok        // for other definitions it "points" the correct handler
 500+ 7096             >                // Use of "; ok" to suppress "warning[fwdref]"
 500+ 7096             >
 500+ 7096             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 501+ 7096 D4 6E                        dw      SUBTRACT                // -
 502+ 7098 A9 63 13 00                  dw      LIT, 19                 // 18  ( syntax error )
 503+ 709C 4B 70                        dw      QERROR                  // ?error
 504+ 709E 23 69                        dw      EXIT                    // ;
 505+ 70A0
 506+ 70A0              //  ______________________________________________________________________
 507+ 70A0              //
 508+ 70A0              // ?csp       --
 509+ 70A0              // raise msg #20 if surrent SP in not what previously saved in CSP.
 510+ 70A0              // Compiler relies on that for  syntax checking of structures
 511+ 70A0                              Colon_Def QCSP, "?CSP", is_normal
 511+ 70A0             >                New_Def  QCSP, "?CSP", Enter_Ptr, is_normal ; ok
 511+ 70A0             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 511+ 70A0             >
 511+ 70A0             >                // dummy db directives used to calculate length of namec
 511+ 70A0 3F 43 53 50 >                db      "?CSP"
 511+ 70A4             >len_NFA         defl    $ - temp_NFA
 511+ 70A4             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 511+ 70A0             >
 511+ 70A0 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 511+ 70A1 3F 43 53 50 >                db      "?CSP"               // name string in 7-bit ascii, but
 511+ 70A5             >                org     $-1                 // alter last byte of Name just above to set
 511+ 70A4 D0          >                db      {b $} | END_BIT     // msb as name end
 511+ 70A5             >
 511+ 70A5 8B 70       >                dw      last_NFA            // Link to previous definition Name
 511+ 70A7             >QCSP:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 511+ 70A7 27 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 511+ 70A9             >                else
 511+ 70A9 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 511+ 70A9             >                endif           ; ok        // for other definitions it "points" the correct handler
 511+ 70A9             >                // Use of "; ok" to suppress "warning[fwdref]"
 511+ 70A9             >
 511+ 70A9             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 512+ 70A9 EB 68                        dw      SPFETCH                 // sp@
 513+ 70AB 12 6E 3C 6B                  dw      CSP, FETCH              // csp @
 514+ 70AF D4 6E                        dw      SUBTRACT                // -
 515+ 70B1 A9 63 14 00                  dw      LIT, 20                 // 20  ( bad definition end )
 516+ 70B5 4B 70                        dw      QERROR                  // ?error
 517+ 70B7 23 69                        dw      EXIT                    // ;
 518+ 70B9
 519+ 70B9              //  ______________________________________________________________________
 520+ 70B9              //
 521+ 70B9              // ?loading      --
 522+ 70B9              // raise msg #22 if not loading
 523+ 70B9                              Colon_Def QLOADING, "?LOADING", is_normal
 523+ 70B9             >                New_Def  QLOADING, "?LOADING", Enter_Ptr, is_normal ; ok
 523+ 70B9             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 523+ 70B9             >
 523+ 70B9             >                // dummy db directives used to calculate length of namec
 523+ 70B9 3F 4C 4F 41 >                db      "?LOADING"
 523+ 70BD 44 49 4E 47 >
 523+ 70C1             >len_NFA         defl    $ - temp_NFA
 523+ 70C1             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 523+ 70B9             >
 523+ 70B9 88          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 523+ 70BA 3F 4C 4F 41 >                db      "?LOADING"               // name string in 7-bit ascii, but
 523+ 70BE 44 49 4E 47 >
 523+ 70C2             >                org     $-1                 // alter last byte of Name just above to set
 523+ 70C1 C7          >                db      {b $} | END_BIT     // msb as name end
 523+ 70C2             >
 523+ 70C2 A0 70       >                dw      last_NFA            // Link to previous definition Name
 523+ 70C4             >QLOADING:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 523+ 70C4 27 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 523+ 70C6             >                else
 523+ 70C6 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 523+ 70C6             >                endif           ; ok        // for other definitions it "points" the correct handler
 523+ 70C6             >                // Use of "; ok" to suppress "warning[fwdref]"
 523+ 70C6             >
 523+ 70C6             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 524+ 70C6 A1 6D 3C 6B                  dw      BLK, FETCH              // blk @
 525+ 70CA 86 69                        dw      ZEQUAL                  // 0=
 526+ 70CC A9 63 16 00                  dw      LIT, 22                 // 22  ( aren't loading now )
 527+ 70D0 4B 70                        dw      QERROR                  // ?error
 528+ 70D2 23 69                        dw      EXIT                    // ;
 529+ 70D4
 530+ 70D4              //  ______________________________________________________________________
 531+ 70D4              //
 532+ 70D4              // compile      --
 533+ 70D4              // compiles the following word
 534+ 70D4                              Colon_Def COMPILE, "COMPILE", is_normal
 534+ 70D4             >                New_Def  COMPILE, "COMPILE", Enter_Ptr, is_normal ; ok
 534+ 70D4             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 534+ 70D4             >
 534+ 70D4             >                // dummy db directives used to calculate length of namec
 534+ 70D4 43 4F 4D 50 >                db      "COMPILE"
 534+ 70D8 49 4C 45    >
 534+ 70DB             >len_NFA         defl    $ - temp_NFA
 534+ 70DB             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 534+ 70D4             >
 534+ 70D4 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 534+ 70D5 43 4F 4D 50 >                db      "COMPILE"               // name string in 7-bit ascii, but
 534+ 70D9 49 4C 45    >
 534+ 70DC             >                org     $-1                 // alter last byte of Name just above to set
 534+ 70DB C5          >                db      {b $} | END_BIT     // msb as name end
 534+ 70DC             >
 534+ 70DC B9 70       >                dw      last_NFA            // Link to previous definition Name
 534+ 70DE             >COMPILE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 534+ 70DE 27 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 534+ 70E0             >                else
 534+ 70E0 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 534+ 70E0             >                endif           ; ok        // for other definitions it "points" the correct handler
 534+ 70E0             >                // Use of "; ok" to suppress "warning[fwdref]"
 534+ 70E0             >
 534+ 70E0             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 535+ 70E0 65 70                        dw      QCOMP                   // ?comp
 536+ 70E2 65 69                        dw      R_TO                    // r>
 537+ 70E4 A9 6A 12 6A                  dw      DUP, CELL_PLUS          // dup, cell+
 538+ 70E8 51 69                        dw      TO_R                    // >r
 539+ 70EA 3C 6B 9D 6E                  dw      FETCH, COMMA            // @ ,
 540+ 70EE 23 69                        dw      EXIT                    // ;
 541+ 70F0
 542+ 70F0              //  ______________________________________________________________________
 543+ 70F0              //
 544+ 70F0              // compile,     --
 545+ 70F0              // compiles the following word
 546+ 70F0                              Colon_Def COMPILE_XT, "COMPILE,", is_normal
 546+ 70F0             >                New_Def  COMPILE_XT, "COMPILE,", Enter_Ptr, is_normal ; ok
 546+ 70F0             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 546+ 70F0             >
 546+ 70F0             >                // dummy db directives used to calculate length of namec
 546+ 70F0 43 4F 4D 50 >                db      "COMPILE,"
 546+ 70F4 49 4C 45 2C >
 546+ 70F8             >len_NFA         defl    $ - temp_NFA
 546+ 70F8             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 546+ 70F0             >
 546+ 70F0 88          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 546+ 70F1 43 4F 4D 50 >                db      "COMPILE,"               // name string in 7-bit ascii, but
 546+ 70F5 49 4C 45 2C >
 546+ 70F9             >                org     $-1                 // alter last byte of Name just above to set
 546+ 70F8 AC          >                db      {b $} | END_BIT     // msb as name end
 546+ 70F9             >
 546+ 70F9 D4 70       >                dw      last_NFA            // Link to previous definition Name
 546+ 70FB             >COMPILE_XT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 546+ 70FB 27 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 546+ 70FD             >                else
 546+ 70FD ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 546+ 70FD             >                endif           ; ok        // for other definitions it "points" the correct handler
 546+ 70FD             >                // Use of "; ok" to suppress "warning[fwdref]"
 546+ 70FD             >
 546+ 70FD             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 547+ 70FD 65 70                        dw      QCOMP                   // ?comp
 548+ 70FF 9D 6E                        dw      COMMA                   // ,
 549+ 7101 23 69                        dw      EXIT                    // ;
 550+ 7103
 551+ 7103              //  ______________________________________________________________________
 552+ 7103              //
 553+ 7103              // [            --
 554+ 7103              // stop compilation
 555+ 7103                              Colon_Def SQUARED_OPEN, "[", is_immediate
 555+ 7103             >                New_Def  SQUARED_OPEN, "[", Enter_Ptr, is_immediate ; ok
 555+ 7103             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 555+ 7103             >
 555+ 7103             >                // dummy db directives used to calculate length of namec
 555+ 7103 5B          >                db      "["
 555+ 7104             >len_NFA         defl    $ - temp_NFA
 555+ 7104             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 555+ 7103             >
 555+ 7103 C1          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 555+ 7104 5B          >                db      "["               // name string in 7-bit ascii, but
 555+ 7105             >                org     $-1                 // alter last byte of Name just above to set
 555+ 7104 DB          >                db      {b $} | END_BIT     // msb as name end
 555+ 7105             >
 555+ 7105 F0 70       >                dw      last_NFA            // Link to previous definition Name
 555+ 7107             >SQUARED_OPEN:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 555+ 7107 27 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 555+ 7109             >                else
 555+ 7109 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 555+ 7109             >                endif           ; ok        // for other definitions it "points" the correct handler
 555+ 7109             >                // Use of "; ok" to suppress "warning[fwdref]"
 555+ 7109             >
 555+ 7109             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 556+ 7109 A2 6C                        dw      ZERO                    // 0
 557+ 710B ED 6D 49 6B                  dw      STATE, STORE            // state !
 558+ 710F 23 69                        dw      EXIT                    // ; immediate
 559+ 7111
 560+ 7111              //  ______________________________________________________________________
 561+ 7111              //
 562+ 7111              // ]            --
 563+ 7111              // start compilation
 564+ 7111                              Colon_Def SQUARED_CLOSE, "]", is_normal
 564+ 7111             >                New_Def  SQUARED_CLOSE, "]", Enter_Ptr, is_normal ; ok
 564+ 7111             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 564+ 7111             >
 564+ 7111             >                // dummy db directives used to calculate length of namec
 564+ 7111 5D          >                db      "]"
 564+ 7112             >len_NFA         defl    $ - temp_NFA
 564+ 7112             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 564+ 7111             >
 564+ 7111 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 564+ 7112 5D          >                db      "]"               // name string in 7-bit ascii, but
 564+ 7113             >                org     $-1                 // alter last byte of Name just above to set
 564+ 7112 DD          >                db      {b $} | END_BIT     // msb as name end
 564+ 7113             >
 564+ 7113 03 71       >                dw      last_NFA            // Link to previous definition Name
 564+ 7115             >SQUARED_CLOSE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 564+ 7115 27 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 564+ 7117             >                else
 564+ 7117 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 564+ 7117             >                endif           ; ok        // for other definitions it "points" the correct handler
 564+ 7117             >                // Use of "; ok" to suppress "warning[fwdref]"
 564+ 7117             >
 564+ 7117             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 565+ 7117 A9 63 C0 00                  dw      LIT, $C0                // 192
 566+ 711B ED 6D 49 6B                  dw      STATE, STORE            // state !
 567+ 711F 23 69                        dw      EXIT                    // ;
 568+ 7121
 569+ 7121              //  ______________________________________________________________________
 570+ 7121              //
 571+ 7121              // smudge       --
 572+ 7121              // toggle smudge bit of latest definition
 573+ 7121                              Colon_Def SMUDGE, "SMUDGE", is_normal
 573+ 7121             >                New_Def  SMUDGE, "SMUDGE", Enter_Ptr, is_normal ; ok
 573+ 7121             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 573+ 7121             >
 573+ 7121             >                // dummy db directives used to calculate length of namec
 573+ 7121 53 4D 55 44 >                db      "SMUDGE"
 573+ 7125 47 45       >
 573+ 7127             >len_NFA         defl    $ - temp_NFA
 573+ 7127             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 573+ 7121             >
 573+ 7121 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 573+ 7122 53 4D 55 44 >                db      "SMUDGE"               // name string in 7-bit ascii, but
 573+ 7126 47 45       >
 573+ 7128             >                org     $-1                 // alter last byte of Name just above to set
 573+ 7127 C5          >                db      {b $} | END_BIT     // msb as name end
 573+ 7128             >
 573+ 7128 11 71       >                dw      last_NFA            // Link to previous definition Name
 573+ 712A             >SMUDGE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 573+ 712A 27 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 573+ 712C             >                else
 573+ 712C ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 573+ 712C             >                endif           ; ok        // for other definitions it "points" the correct handler
 573+ 712C             >                // Use of "; ok" to suppress "warning[fwdref]"
 573+ 712C             >
 573+ 712C             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 574+ 712C C7 6F                        dw      LATEST                  // latest
 575+ 712E A9 63 20 00                  dw      LIT, SMUDGE_BIT         // 32
 576+ 7132 2F 6B                        dw      TOGGLE                  // toggle
 577+ 7134 23 69                        dw      EXIT                    // ;
 578+ 7136
 579+ 7136              //  ______________________________________________________________________
 580+ 7136              //
 581+ 7136              // immediate    --
 582+ 7136              // make immediate the latest definition
 583+ 7136                              Colon_Def IMMEDIATE, "IMMEDIATE", is_normal
 583+ 7136             >                New_Def  IMMEDIATE, "IMMEDIATE", Enter_Ptr, is_normal ; ok
 583+ 7136             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 583+ 7136             >
 583+ 7136             >                // dummy db directives used to calculate length of namec
 583+ 7136 49 4D 4D 45 >                db      "IMMEDIATE"
 583+ 713A 44 49 41 54 >
 583+ 713E 45          >
 583+ 713F             >len_NFA         defl    $ - temp_NFA
 583+ 713F             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 583+ 7136             >
 583+ 7136 89          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 583+ 7137 49 4D 4D 45 >                db      "IMMEDIATE"               // name string in 7-bit ascii, but
 583+ 713B 44 49 41 54 >
 583+ 713F 45          >
 583+ 7140             >                org     $-1                 // alter last byte of Name just above to set
 583+ 713F C5          >                db      {b $} | END_BIT     // msb as name end
 583+ 7140             >
 583+ 7140 21 71       >                dw      last_NFA            // Link to previous definition Name
 583+ 7142             >IMMEDIATE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 583+ 7142 27 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 583+ 7144             >                else
 583+ 7144 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 583+ 7144             >                endif           ; ok        // for other definitions it "points" the correct handler
 583+ 7144             >                // Use of "; ok" to suppress "warning[fwdref]"
 583+ 7144             >
 583+ 7144             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 584+ 7144 C7 6F                        dw      LATEST                  // latest
 585+ 7146 A9 63 40 00                  dw      LIT, $40                // 64
 586+ 714A 2F 6B                        dw      TOGGLE                  // toggle
 587+ 714C 23 69                        dw      EXIT                    // ;
 588+ 714E
 589+ 714E              //  ______________________________________________________________________
 590+ 714E              //
 591+ 714E              // hex          --
 592+ 714E              // change numeration base
 593+ 714E                              Colon_Def HEX, "HEX", is_normal
 593+ 714E             >                New_Def  HEX, "HEX", Enter_Ptr, is_normal ; ok
 593+ 714E             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 593+ 714E             >
 593+ 714E             >                // dummy db directives used to calculate length of namec
 593+ 714E 48 45 58    >                db      "HEX"
 593+ 7151             >len_NFA         defl    $ - temp_NFA
 593+ 7151             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 593+ 714E             >
 593+ 714E 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 593+ 714F 48 45 58    >                db      "HEX"               // name string in 7-bit ascii, but
 593+ 7152             >                org     $-1                 // alter last byte of Name just above to set
 593+ 7151 D8          >                db      {b $} | END_BIT     // msb as name end
 593+ 7152             >
 593+ 7152 36 71       >                dw      last_NFA            // Link to previous definition Name
 593+ 7154             >HEX:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 593+ 7154 27 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 593+ 7156             >                else
 593+ 7156 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 593+ 7156             >                endif           ; ok        // for other definitions it "points" the correct handler
 593+ 7156             >                // Use of "; ok" to suppress "warning[fwdref]"
 593+ 7156             >
 593+ 7156             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 594+ 7156 A9 63 10 00                  dw      LIT, 16                 // 16
 595+ 715A F7 6D 49 6B                  dw      BASE, STORE             // base !
 596+ 715E 23 69                        dw      EXIT                    // ;
 597+ 7160
 598+ 7160              //  ______________________________________________________________________
 599+ 7160              //
 600+ 7160              // decimal      --
 601+ 7160              // change numeration base
 602+ 7160                              Colon_Def DECIMAL, "DECIMAL", is_normal
 602+ 7160             >                New_Def  DECIMAL, "DECIMAL", Enter_Ptr, is_normal ; ok
 602+ 7160             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 602+ 7160             >
 602+ 7160             >                // dummy db directives used to calculate length of namec
 602+ 7160 44 45 43 49 >                db      "DECIMAL"
 602+ 7164 4D 41 4C    >
 602+ 7167             >len_NFA         defl    $ - temp_NFA
 602+ 7167             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 602+ 7160             >
 602+ 7160 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 602+ 7161 44 45 43 49 >                db      "DECIMAL"               // name string in 7-bit ascii, but
 602+ 7165 4D 41 4C    >
 602+ 7168             >                org     $-1                 // alter last byte of Name just above to set
 602+ 7167 CC          >                db      {b $} | END_BIT     // msb as name end
 602+ 7168             >
 602+ 7168 4E 71       >                dw      last_NFA            // Link to previous definition Name
 602+ 716A             >DECIMAL:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 602+ 716A 27 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 602+ 716C             >                else
 602+ 716C ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 602+ 716C             >                endif           ; ok        // for other definitions it "points" the correct handler
 602+ 716C             >                // Use of "; ok" to suppress "warning[fwdref]"
 602+ 716C             >
 602+ 716C             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 603+ 716C A9 63 0A 00                  dw      LIT, 10                 // 10
 604+ 7170 F7 6D 49 6B                  dw      BASE, STORE             // base !
 605+ 7174 23 69                        dw      EXIT                    // ;
 606+ 7176
 607+ 7176              //  ______________________________________________________________________
 608+ 7176              //
 609+ 7176              // (;code)       --
 610+ 7176              // patch to CFA to call/jump to the "following code"
 611+ 7176                              Colon_Def C_SEMICOLON_CODE, "(;CODE)", is_normal
 611+ 7176             >                New_Def  C_SEMICOLON_CODE, "(;CODE)", Enter_Ptr, is_normal ; ok
 611+ 7176             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 611+ 7176             >
 611+ 7176             >                // dummy db directives used to calculate length of namec
 611+ 7176 28 3B 43 4F >                db      "(;CODE)"
 611+ 717A 44 45 29    >
 611+ 717D             >len_NFA         defl    $ - temp_NFA
 611+ 717D             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 611+ 7176             >
 611+ 7176 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 611+ 7177 28 3B 43 4F >                db      "(;CODE)"               // name string in 7-bit ascii, but
 611+ 717B 44 45 29    >
 611+ 717E             >                org     $-1                 // alter last byte of Name just above to set
 611+ 717D A9          >                db      {b $} | END_BIT     // msb as name end
 611+ 717E             >
 611+ 717E 60 71       >                dw      last_NFA            // Link to previous definition Name
 611+ 7180             >C_SEMICOLON_CODE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 611+ 7180 27 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 611+ 7182             >                else
 611+ 7182 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 611+ 7182             >                endif           ; ok        // for other definitions it "points" the correct handler
 611+ 7182             >                // Use of "; ok" to suppress "warning[fwdref]"
 611+ 7182             >
 611+ 7182             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 612+ 7182 65 69                        dw      R_TO                    // r>       ( Return Stack has IP to caller's next cell )
 613+ 7184 C7 6F                        dw      LATEST                  // latest   ( Word being defined in this moment )
 614+ 7186 05 70 E5 6F                  dw      PFA, CFA                // pfa cfa  ( cfa of latest word )
 615+ 718A
 616+ 718A
 617+ 718A
 618+ 718A
 619+ 718A
 620+ 718A 49 6B                        dw      STORE                   // !
 621+ 718C 23 69                        dw      EXIT                    // ;
 622+ 718E
 623+ 718E              //  ______________________________________________________________________
 624+ 718E              //
 625+ 718E              // ;code        --
 626+ 718E                              Colon_Def SEMICOLON_CODE, ";CODE", is_immediate
 626+ 718E             >                New_Def  SEMICOLON_CODE, ";CODE", Enter_Ptr, is_immediate ; ok
 626+ 718E             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 626+ 718E             >
 626+ 718E             >                // dummy db directives used to calculate length of namec
 626+ 718E 3B 43 4F 44 >                db      ";CODE"
 626+ 7192 45          >
 626+ 7193             >len_NFA         defl    $ - temp_NFA
 626+ 7193             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 626+ 718E             >
 626+ 718E C5          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 626+ 718F 3B 43 4F 44 >                db      ";CODE"               // name string in 7-bit ascii, but
 626+ 7193 45          >
 626+ 7194             >                org     $-1                 // alter last byte of Name just above to set
 626+ 7193 C5          >                db      {b $} | END_BIT     // msb as name end
 626+ 7194             >
 626+ 7194 76 71       >                dw      last_NFA            // Link to previous definition Name
 626+ 7196             >SEMICOLON_CODE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 626+ 7196 27 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 626+ 7198             >                else
 626+ 7198 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 626+ 7198             >                endif           ; ok        // for other definitions it "points" the correct handler
 626+ 7198             >                // Use of "; ok" to suppress "warning[fwdref]"
 626+ 7198             >
 626+ 7198             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 627+ 7198 A7 70                        dw      QCSP                    // ?csp
 628+ 719A DE 70                        dw      COMPILE                 // compile
 629+ 719C 80 71                        dw      C_SEMICOLON_CODE        // (;code)
 630+ 719E 07 71                        dw      SQUARED_OPEN            // [
 631+ 71A0 4F 6C                        dw      NOOP                    // noop () can be patched later to ASSEMBLER... )
 632+ 71A2 23 69                        dw      EXIT                    // ; immediate
 633+ 71A4
 634+ 71A4              //  ______________________________________________________________________
 635+ 71A4              //
 636+ 71A4              // <builds      --
 637+ 71A4                              Colon_Def CBUILDS, "<BUILDS", is_normal
 637+ 71A4             >                New_Def  CBUILDS, "<BUILDS", Enter_Ptr, is_normal ; ok
 637+ 71A4             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 637+ 71A4             >
 637+ 71A4             >                // dummy db directives used to calculate length of namec
 637+ 71A4 3C 42 55 49 >                db      "<BUILDS"
 637+ 71A8 4C 44 53    >
 637+ 71AB             >len_NFA         defl    $ - temp_NFA
 637+ 71AB             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 637+ 71A4             >
 637+ 71A4 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 637+ 71A5 3C 42 55 49 >                db      "<BUILDS"               // name string in 7-bit ascii, but
 637+ 71A9 4C 44 53    >
 637+ 71AC             >                org     $-1                 // alter last byte of Name just above to set
 637+ 71AB D3          >                db      {b $} | END_BIT     // msb as name end
 637+ 71AC             >
 637+ 71AC 8E 71       >                dw      last_NFA            // Link to previous definition Name
 637+ 71AE             >CBUILDS:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 637+ 71AE 27 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 637+ 71B0             >                else
 637+ 71B0 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 637+ 71B0             >                endif           ; ok        // for other definitions it "points" the correct handler
 637+ 71B0             >                // Use of "; ok" to suppress "warning[fwdref]"
 637+ 71B0             >
 637+ 71B0             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 638+ 71B0 A2 6C                        dw      ZERO                    // 0
 639+ 71B2 5E 6C                        dw      CONSTANT                // constant
 640+ 71B4 23 69                        dw      EXIT                    // ;
 641+ 71B6
 642+ 71B6              //  ______________________________________________________________________
 643+ 71B6              //
 644+ 71B6              // recurse      --
 645+ 71B6              //              Colon_Def RECURSE, "RECURSE", is_immediate
 646+ 71B6              //              dw      QCOMP                   // ?comp
 647+ 71B6              //              dw      LATEST                  // latest
 648+ 71B6              //              dw      PFA, CFA                // pfa cfa
 649+ 71B6              //              dw      COMMA                   // ,
 650+ 71B6              //              dw      EXIT                    // ; immediate
 651+ 71B6
 652+ 71B6              //  ______________________________________________________________________
 653+ 71B6              //
 654+ 71B6              // does>     --
 655+ 71B6                              Colon_Def DOES_TO, "DOES>", is_normal
 655+ 71B6             >                New_Def  DOES_TO, "DOES>", Enter_Ptr, is_normal ; ok
 655+ 71B6             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 655+ 71B6             >
 655+ 71B6             >                // dummy db directives used to calculate length of namec
 655+ 71B6 44 4F 45 53 >                db      "DOES>"
 655+ 71BA 3E          >
 655+ 71BB             >len_NFA         defl    $ - temp_NFA
 655+ 71BB             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 655+ 71B6             >
 655+ 71B6 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 655+ 71B7 44 4F 45 53 >                db      "DOES>"               // name string in 7-bit ascii, but
 655+ 71BB 3E          >
 655+ 71BC             >                org     $-1                 // alter last byte of Name just above to set
 655+ 71BB BE          >                db      {b $} | END_BIT     // msb as name end
 655+ 71BC             >
 655+ 71BC A4 71       >                dw      last_NFA            // Link to previous definition Name
 655+ 71BE             >DOES_TO:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 655+ 71BE 27 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 655+ 71C0             >                else
 655+ 71C0 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 655+ 71C0             >                endif           ; ok        // for other definitions it "points" the correct handler
 655+ 71C0             >                // Use of "; ok" to suppress "warning[fwdref]"
 655+ 71C0             >
 655+ 71C0             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 656+ 71C0 65 69                        dw      R_TO                    // r>
 657+ 71C2 C7 6F                        dw      LATEST                  // latest
 658+ 71C4 05 70                        dw      PFA                     // pfa
 659+ 71C6 49 6B                        dw      STORE                   // !
 660+ 71C8 80 71                        dw      C_SEMICOLON_CODE        // ;code
 661+ 71CA              Does_Ptr:
 662+ 71CA                              // via call coded in CFA
 663+ 71CA                              ldhlrp
 663+ 71CA 2A 96 63    >                ld      hl,(RP_Pointer)
 664+ 71CD 2B                           dec     hl                  // push on Return-Stack current Instruction-Pointer
 665+ 71CE 70                           ld      (hl), b
 666+ 71CF 2B                           dec     hl
 667+ 71D0 71                           ld      (hl), c
 668+ 71D1                              ldrphl
 668+ 71D1 22 96 63    >                ld      (RP_Pointer),hl
 669+ 71D4 13                           inc     de
 670+ 71D5 EB                           ex      de, hl
 671+ 71D6 4E                           ld      c, (hl)
 672+ 71D7 23                           inc     hl
 673+ 71D8 46                           ld      b, (hl)
 674+ 71D9 23                           inc     hl
 675+ 71DA
 676+ 71DA                              psh1
 676+ 71DA E5          >                push    hl
 676+ 71DB DD E9       >                jp      (ix)
 677+ 71DD                              // SMUDGE !
 678+ 71DD
 679+ 71DD              //  ______________________________________________________________________
 680+ 71DD              //
 681+ 71DD              // count        a -- a2 n
 682+ 71DD              // expects a counted string at address a, returns string address and counter
 683+ 71DD                              Colon_Def COUNT, "COUNT", is_normal
 683+ 71DD             >                New_Def  COUNT, "COUNT", Enter_Ptr, is_normal ; ok
 683+ 71DD             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 683+ 71DD             >
 683+ 71DD             >                // dummy db directives used to calculate length of namec
 683+ 71DD 43 4F 55 4E >                db      "COUNT"
 683+ 71E1 54          >
 683+ 71E2             >len_NFA         defl    $ - temp_NFA
 683+ 71E2             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 683+ 71DD             >
 683+ 71DD 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 683+ 71DE 43 4F 55 4E >                db      "COUNT"               // name string in 7-bit ascii, but
 683+ 71E2 54          >
 683+ 71E3             >                org     $-1                 // alter last byte of Name just above to set
 683+ 71E2 D4          >                db      {b $} | END_BIT     // msb as name end
 683+ 71E3             >
 683+ 71E3 B6 71       >                dw      last_NFA            // Link to previous definition Name
 683+ 71E5             >COUNT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 683+ 71E5 27 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 683+ 71E7             >                else
 683+ 71E7 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 683+ 71E7             >                endif           ; ok        // for other definitions it "points" the correct handler
 683+ 71E7             >                // Use of "; ok" to suppress "warning[fwdref]"
 683+ 71E7             >
 683+ 71E7             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 684+ 71E7 A9 6A                        dw      DUP                     // dup
 685+ 71E9 EA 69                        dw      ONE_PLUS                // 1+
 686+ 71EB 9C 6A 57 6B                  dw      SWAP, CFETCH             // swap @
 687+ 71EF 23 69                        dw      EXIT                    // ;
 688+ 71F1
 689+ 71F1              //  ______________________________________________________________________
 690+ 71F1              //
 691+ 71F1              // bounds       a n -- a+n n
 692+ 71F1              // given an address and a length ( a n ) calculate the bound addresses
 693+ 71F1              // suitable for DO-LOOP
 694+ 71F1                              Colon_Def BOUNDS, "BOUNDS", is_normal
 694+ 71F1             >                New_Def  BOUNDS, "BOUNDS", Enter_Ptr, is_normal ; ok
 694+ 71F1             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 694+ 71F1             >
 694+ 71F1             >                // dummy db directives used to calculate length of namec
 694+ 71F1 42 4F 55 4E >                db      "BOUNDS"
 694+ 71F5 44 53       >
 694+ 71F7             >len_NFA         defl    $ - temp_NFA
 694+ 71F7             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 694+ 71F1             >
 694+ 71F1 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 694+ 71F2 42 4F 55 4E >                db      "BOUNDS"               // name string in 7-bit ascii, but
 694+ 71F6 44 53       >
 694+ 71F8             >                org     $-1                 // alter last byte of Name just above to set
 694+ 71F7 D3          >                db      {b $} | END_BIT     // msb as name end
 694+ 71F8             >
 694+ 71F8 DD 71       >                dw      last_NFA            // Link to previous definition Name
 694+ 71FA             >BOUNDS:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 694+ 71FA 27 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 694+ 71FC             >                else
 694+ 71FC ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 694+ 71FC             >                endif           ; ok        // for other definitions it "points" the correct handler
 694+ 71FC             >                // Use of "; ok" to suppress "warning[fwdref]"
 694+ 71FC             >
 694+ 71FC             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 695+ 71FC 64 6A C9 69                  dw      OVER, PLUS, SWAP        // over + swap
 695+ 7200 9C 6A
 696+ 7202 23 69                        dw      EXIT                    // ;
 697+ 7204
 698+ 7204              //  ______________________________________________________________________
 699+ 7204              //
 700+ 7204              // type         a n --
 701+ 7204              // Sends to current output channel n characters starting at address a.
 702+ 7204                              Colon_Def TYPE, "TYPE", is_normal
 702+ 7204             >                New_Def  TYPE, "TYPE", Enter_Ptr, is_normal ; ok
 702+ 7204             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 702+ 7204             >
 702+ 7204             >                // dummy db directives used to calculate length of namec
 702+ 7204 54 59 50 45 >                db      "TYPE"
 702+ 7208             >len_NFA         defl    $ - temp_NFA
 702+ 7208             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 702+ 7204             >
 702+ 7204 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 702+ 7205 54 59 50 45 >                db      "TYPE"               // name string in 7-bit ascii, but
 702+ 7209             >                org     $-1                 // alter last byte of Name just above to set
 702+ 7208 C5          >                db      {b $} | END_BIT     // msb as name end
 702+ 7209             >
 702+ 7209 F1 71       >                dw      last_NFA            // Link to previous definition Name
 702+ 720B             >TYPE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 702+ 720B 27 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 702+ 720D             >                else
 702+ 720D ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 702+ 720D             >                endif           ; ok        // for other definitions it "points" the correct handler
 702+ 720D             >                // Use of "; ok" to suppress "warning[fwdref]"
 702+ 720D             >
 702+ 720D             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 703+ 720D FA 71                        dw      BOUNDS                  // bounds
 704+ 720F 3D 64                        dw      C_Q_DO                  // ?do
 705+ 7211 0C 00                        dw      Type_Skip - $
 706+ 7213              Type_Loop:
 707+ 7213 76 64 57 6B                  dw          I, CFETCH           //      i c@
 708+ 7217 75 6F                        dw          EMIT                //      emit
 709+ 7219 F8 63                        dw      C_LOOP                  // loop
 710+ 721B F8 FF                        dw      Type_Loop - $
 711+ 721D              Type_Skip:
 712+ 721D 23 69                        dw      EXIT                    // ;
 713+ 721F
 714+ 721F              //  ______________________________________________________________________
 715+ 721F              //
 716+ 721F              // leave        --
 717+ 721F              // Compile (leave) to leave current LOOP and jump just after it
 718+ 721F                              Colon_Def LEAVE, "LEAVE", is_immediate
 718+ 721F             >                New_Def  LEAVE, "LEAVE", Enter_Ptr, is_immediate ; ok
 718+ 721F             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 718+ 721F             >
 718+ 721F             >                // dummy db directives used to calculate length of namec
 718+ 721F 4C 45 41 56 >                db      "LEAVE"
 718+ 7223 45          >
 718+ 7224             >len_NFA         defl    $ - temp_NFA
 718+ 7224             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 718+ 721F             >
 718+ 721F C5          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 718+ 7220 4C 45 41 56 >                db      "LEAVE"               // name string in 7-bit ascii, but
 718+ 7224 45          >
 718+ 7225             >                org     $-1                 // alter last byte of Name just above to set
 718+ 7224 C5          >                db      {b $} | END_BIT     // msb as name end
 718+ 7225             >
 718+ 7225 04 72       >                dw      last_NFA            // Link to previous definition Name
 718+ 7227             >LEAVE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 718+ 7227 27 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 718+ 7229             >                else
 718+ 7229 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 718+ 7229             >                endif           ; ok        // for other definitions it "points" the correct handler
 718+ 7229             >                // Use of "; ok" to suppress "warning[fwdref]"
 718+ 7229             >
 718+ 7229             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 719+ 7229 DE 70 3B 69                  dw      COMPILE, C_LEAVE       // compile (leave)     \ unloop and branch
 720+ 722D 81 6E 51 69                  dw      HERE, TO_R, ZERO, COMMA // here >r 0 ,
 720+ 7231 A2 6C 9D 6E
 721+ 7235 A2 6C A2 6C                  dw      ZERO, ZERO
 722+ 7239 EB 68 A9 6A                  dw      SPFETCH, DUP
 723+ 723D 12 6A 12 6A                  dw      CELL_PLUS, CELL_PLUS
 724+ 7241 8C 6A                        dw      TUCK
 725+ 7243 12 6E 3C 6B                  dw      CSP, FETCH
 726+ 7247 9C 6A D4 6E                  dw      SWAP, SUBTRACT
 727+ 724B 11 68                        dw      CMOVE
 728+ 724D 12 6E 3C 6B                  dw      CSP, FETCH, CELL_MINUS
 728+ 7251 1C 6A
 729+ 7253 65 69 64 6A                  dw      R_TO, OVER, STORE
 729+ 7257 49 6B
 730+ 7259 1C 6A A2 6C                  dw      CELL_MINUS, ZERO
 731+ 725D 9C 6A 49 6B                  dw      SWAP, STORE
 732+ 7261 23 69                        dw      EXIT                    // ;
 733+ 7263
 734+ 7263              //  ______________________________________________________________________
 735+ 7263              //
 736+ 7263              // -trailing    a n1 -- a n2
 737+ 7263              // Assumes that an n1 bytes-long string is stored at address a
 738+ 7263              // and the string contains a space delimited word,
 739+ 7263              // Finds n2 as the position of the first character after the word.
 740+ 7263                              Colon_Def LTRAILING, "-TRAILING", is_normal
 740+ 7263             >                New_Def  LTRAILING, "-TRAILING", Enter_Ptr, is_normal ; ok
 740+ 7263             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 740+ 7263             >
 740+ 7263             >                // dummy db directives used to calculate length of namec
 740+ 7263 2D 54 52 41 >                db      "-TRAILING"
 740+ 7267 49 4C 49 4E >
 740+ 726B 47          >
 740+ 726C             >len_NFA         defl    $ - temp_NFA
 740+ 726C             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 740+ 7263             >
 740+ 7263 89          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 740+ 7264 2D 54 52 41 >                db      "-TRAILING"               // name string in 7-bit ascii, but
 740+ 7268 49 4C 49 4E >
 740+ 726C 47          >
 740+ 726D             >                org     $-1                 // alter last byte of Name just above to set
 740+ 726C C7          >                db      {b $} | END_BIT     // msb as name end
 740+ 726D             >
 740+ 726D 1F 72       >                dw      last_NFA            // Link to previous definition Name
 740+ 726F             >LTRAILING:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 740+ 726F 27 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 740+ 7271             >                else
 740+ 7271 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 740+ 7271             >                endif           ; ok        // for other definitions it "points" the correct handler
 740+ 7271             >                // Use of "; ok" to suppress "warning[fwdref]"
 740+ 7271             >
 740+ 7271             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 741+ 7271 A9 6A A2 6C                  dw      DUP, ZERO               // dup 0
 742+ 7275                                                              // do
 743+ 7275 3D 64                        dw      C_Q_DO
 744+ 7277 20 00                        dw      LTrailing_Leave - $
 745+ 7279              LTrailing_Loop:
 746+ 7279 0A 6B C9 69                  dw          TWO_DUP, PLUS       //      2dup +
 747+ 727D F6 69                        dw          ONE_SUBTRACT        //      1-
 748+ 727F 57 6B                        dw          CFETCH              //      c@
 749+ 7281 CC 6C D4 6E                  dw          BL, SUBTRACT        //      bl -
 750+ 7285                                                              //      if
 751+ 7285 E3 63                        dw          ZBRANCH
 752+ 7287 0A 00                        dw          LTrailing_Else - $
 753+ 7289 3B 69                        dw              C_LEAVE         //          leave
 754+ 728B 0C 00                        dw              LTrailing_Leave - $
 755+ 728D CC 63                        dw          BRANCH              //      else
 756+ 728F 04 00                        dw          LTrailing_Endif - $
 757+ 7291              LTrailing_Else:
 758+ 7291 F6 69                        dw              ONE_SUBTRACT    //          1-
 759+ 7293              LTrailing_Endif:                                //      endif
 760+ 7293                                                              // loop
 761+ 7293 F8 63                        dw      C_LOOP
 762+ 7295 E4 FF                        dw      LTrailing_Loop - $
 763+ 7297              LTrailing_Leave:
 764+ 7297 23 69                        dw      EXIT                    // ;
 765+ 7299
 766+ 7299              //  ______________________________________________________________________
 767+ 7299              //
 768+ 7299              // accept       a n1 -- n2
 769+ 7299              // Accepts at most n1 characters from terminal and stores them at address a
 770+ 7299              // CR stops input. A 'nul' is added as trailer.
 771+ 7299              // n2 is the string length. n2 is kept in span user variable also.
 772+ 7299                              Colon_Def ACCEPT, "ACCEPT", is_normal
 772+ 7299             >                New_Def  ACCEPT, "ACCEPT", Enter_Ptr, is_normal ; ok
 772+ 7299             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 772+ 7299             >
 772+ 7299             >                // dummy db directives used to calculate length of namec
 772+ 7299 41 43 43 45 >                db      "ACCEPT"
 772+ 729D 50 54       >
 772+ 729F             >len_NFA         defl    $ - temp_NFA
 772+ 729F             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 772+ 7299             >
 772+ 7299 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 772+ 729A 41 43 43 45 >                db      "ACCEPT"               // name string in 7-bit ascii, but
 772+ 729E 50 54       >
 772+ 72A0             >                org     $-1                 // alter last byte of Name just above to set
 772+ 729F D4          >                db      {b $} | END_BIT     // msb as name end
 772+ 72A0             >
 772+ 72A0 63 72       >                dw      last_NFA            // Link to previous definition Name
 772+ 72A2             >ACCEPT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 772+ 72A2 27 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 772+ 72A4             >                else
 772+ 72A4 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 772+ 72A4             >                endif           ; ok        // for other definitions it "points" the correct handler
 772+ 72A4             >                // Use of "; ok" to suppress "warning[fwdref]"
 772+ 72A4             >
 772+ 72A4             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 773+ 72A4 64 6A C9 69                  dw      OVER, PLUS, OVER        //                      ( a  n1+a  a )
 773+ 72A8 64 6A
 774+ 72AA A2 6C C6 6A                  dw      ZERO, DASH_ROT          //                      ( a  0     a+n1  a )
 775+ 72AE                                                              // do
 776+ 72AE 3D 64                        dw      C_Q_DO
 777+ 72B0 8C 00                        dw      Accept_Leave - $
 778+ 72B2              Accept_Loop:
 779+ 72B2 74 6A 85 66                  dw          DROP, KEY           //      drop key        ( a  c )
 780+ 72B6 A9 6A                        dw          DUP                 //      dup             ( a  c  c )
 781+ 72B8 A9 63 0E 00                  dw          LIT, $0E            //      0E
 782+ 72BC 08 6D                        dw          PLUS_ORIGIN         //      +origin
 783+ 72BE 3C 6B                        dw          FETCH               //      @               ( a  c  c  del )
 784+ 72C0 E2 6E                        dw          EQUALS              //      =               ( a  c  c==del )
 785+ 72C2                                                              //      if
 786+ 72C2 E3 63                        dw          ZBRANCH
 787+ 72C4 2E 00                        dw          Accept_Else_0 - $
 788+ 72C6 74 6A                        dw              DROP            //          drop        ( a  )
 789+ 72C8 A9 6A 76 64                  dw              DUP, I, EQUALS  //          dup i =     ( a  a==i )
 789+ 72CC E2 6E
 790+ 72CE AA 6C B3 68                  dw              ONE, AND_OP     //          1 and
 791+ 72D2 A9 6A                        dw              DUP             //          dup         ( a  a==i  a==i )
 792+ 72D4 65 69                        dw              R_TO            //          r> 2 - + r>
 793+ 72D6 B2 6C D4 6E                  dw              TWO, SUBTRACT, PLUS //      ( decrement index by 1 or 2 )
 793+ 72DA C9 69
 794+ 72DC 51 69                        dw              TO_R            //
 795+ 72DE                                                              //          if
 796+ 72DE E3 63                        dw              ZBRANCH
 797+ 72E0 0A 00                        dw              Accept_Else_1 - $
 798+ 72E2 A9 63 07 00                  dw                  LIT, 7      //              7       ( a  7 )
 799+ 72E6                                                              //          else
 800+ 72E6 CC 63                        dw              BRANCH
 801+ 72E8 06 00                        dw              Accept_Endif_1 - $
 802+ 72EA              Accept_Else_1:
 803+ 72EA A9 63 08 00                  dw                  LIT, 8      //              8       ( a  8 )
 804+ 72EE              Accept_Endif_1:                                 //          endif
 805+ 72EE CC 63                        dw          BRANCH
 806+ 72F0 2E 00                        dw          Accept_Endif_0 - $
 807+ 72F2              Accept_Else_0:                                  //      else
 808+ 72F2 A9 6A                        dw              DUP             //          dup         ( a  c  c )
 809+ 72F4 A9 63 0D 00                  dw              LIT, 13         //          13
 810+ 72F8 E2 6E                        dw              EQUALS          //          =           ( a  c  c==CR )
 811+ 72FA                                                              //          if
 812+ 72FA E3 63                        dw              ZBRANCH
 813+ 72FC 0C 00                        dw              Accept_Else_2 - $
 814+ 72FE 74 6A CC 6C                  dw                  DROP, BL    //              drop bl ( a  bl )
 815+ 7302 A2 6C                        dw                  ZERO        //              0       ( a  c  0 )
 816+ 7304                                                              //          else
 817+ 7304 CC 63                        dw              BRANCH
 818+ 7306 04 00                        dw              Accept_Endif_2 - $
 819+ 7308              Accept_Else_2:
 820+ 7308 A9 6A                        dw                  DUP         //              dup     ( a  c  c )
 821+ 730A                                                              //          endif
 822+ 730A              Accept_Endif_2:
 823+ 730A 76 64 65 6B                  dw              I, CSTORE       //          i           ( a  c )
 824+ 730E A9 6A CC 6C                  dw              DUP, BL, LESS   //          dup bl <    ( a  c  c<BL )
 824+ 7312 03 6F
 825+ 7314                                                              //          if
 826+ 7314 E3 63                        dw              ZBRANCH
 827+ 7316 08 00                        dw              Accept_Endif_3 - $
 828+ 7318 65 69                        dw                  R_TO        //              r>
 829+ 731A F6 69                        dw                  ONE_SUBTRACT//              1-
 830+ 731C 51 69                        dw                  TO_R        //              >r
 831+ 731E                                                              //          endif
 832+ 731E              Accept_Endif_3:
 833+ 731E              Accept_Endif_0:                                 //      endif
 834+ 731E 75 6F                        dw          EMIT                //      emit
 835+ 7320 A2 6C 76 64                  dw          ZERO, I, ONE_PLUS   //      0 i 1+ !
 835+ 7324 EA 69
 836+ 7326 49 6B                        dw          STORE               //          ( zero pad )
 837+ 7328 76 64                        dw          I                   //      i
 838+ 732A 76 64 57 6B                  dw          I, CFETCH, ZEQUAL   //      i 0= if
 838+ 732E 86 69
 839+ 7330 E3 63                        dw          ZBRANCH             //
 840+ 7332 06 00                        dw              Accept_Endif_4 - $
 841+ 7334 3B 69                        dw                  C_LEAVE     //              leave
 842+ 7336 06 00                        dw                  Accept_Leave - $
 843+ 7338              Accept_Endif_4:                                 //      endif
 844+ 7338                                                              // loop
 845+ 7338 F8 63                        dw      C_LOOP
 846+ 733A 78 FF                        dw      Accept_Loop - $
 847+ 733C              Accept_Leave:
 848+ 733C 9C 6A D4 6E                  dw      SWAP, SUBTRACT          // swap -
 849+ 7340 EA 69                        dw      ONE_PLUS                // 1+
 850+ 7342 A9 6A 62 6E                  dw      DUP, SPAN, STORE        // dup span !
 850+ 7346 49 6B
 851+ 7348 23 69                        dw      EXIT                    // ;
 852+ 734A
 853+ 734A              //  ______________________________________________________________________
 854+ 734A              //
 855+ 734A              // expect      a n --
 856+ 734A              // Accepts at most n1 characters from terminal and stores them at address a
 857+ 734A              // CR stops input. A 'nul' is added as trailer.
 858+ 734A              // n2 is the string length. n2 is kept in span user variable also.
 859+ 734A              //              Colon_Def EXPECT, "EXPECT", is_normal
 860+ 734A              //              dw      ACCEPT, DROP            // accept drop
 861+ 734A              //              dw      EXIT                    // ;
 862+ 734A
 863+ 734A              //  ______________________________________________________________________
 864+ 734A              //
 865+ 734A              // query        --
 866+ 734A              // Accept at most 80 character from console. CR stops.
 867+ 734A              // Text is stored in TIB. Variable IN is zeroed.
 868+ 734A                              Colon_Def QUERY, "QUERY", is_normal
 868+ 734A             >                New_Def  QUERY, "QUERY", Enter_Ptr, is_normal ; ok
 868+ 734A             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 868+ 734A             >
 868+ 734A             >                // dummy db directives used to calculate length of namec
 868+ 734A 51 55 45 52 >                db      "QUERY"
 868+ 734E 59          >
 868+ 734F             >len_NFA         defl    $ - temp_NFA
 868+ 734F             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 868+ 734A             >
 868+ 734A 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 868+ 734B 51 55 45 52 >                db      "QUERY"               // name string in 7-bit ascii, but
 868+ 734F 59          >
 868+ 7350             >                org     $-1                 // alter last byte of Name just above to set
 868+ 734F D9          >                db      {b $} | END_BIT     // msb as name end
 868+ 7350             >
 868+ 7350 99 72       >                dw      last_NFA            // Link to previous definition Name
 868+ 7352             >QUERY:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 868+ 7352 27 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 868+ 7354             >                else
 868+ 7354 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 868+ 7354             >                endif           ; ok        // for other definitions it "points" the correct handler
 868+ 7354             >                // Use of "; ok" to suppress "warning[fwdref]"
 868+ 7354             >
 868+ 7354             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 869+ 7354 35 6D 3C 6B                  dw      TIB, FETCH              // tib @
 870+ 7358 A9 63 50 00                  dw      LIT, 80                 // 80
 871+ 735C A2 72 74 6A                  dw      ACCEPT, DROP            // accept drop
 872+ 7360 A2 6C AA 6D                  dw      ZERO, TO_IN, STORE      // 0 >in !
 872+ 7364 49 6B
 873+ 7366 23 69                        dw      EXIT                    // ;
 874+ 7368
 875+ 7368              //  ______________________________________________________________________
 876+ 7368              //
 877+ 7368              // fill        a n c --
 878+ 7368              // If n > 0, fills n locations starting from address a with the value c.
 879+ 7368                              New_Def FILL, "FILL", is_code, is_normal
 879+ 7368             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 879+ 7368             >
 879+ 7368             >                // dummy db directives used to calculate length of namec
 879+ 7368 46 49 4C 4C >                db      "FILL"
 879+ 736C             >len_NFA         defl    $ - temp_NFA
 879+ 736C             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 879+ 7368             >
 879+ 7368 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 879+ 7369 46 49 4C 4C >                db      "FILL"               // name string in 7-bit ascii, but
 879+ 736D             >                org     $-1                 // alter last byte of Name just above to set
 879+ 736C CC          >                db      {b $} | END_BIT     // msb as name end
 879+ 736D             >
 879+ 736D 4A 73       >                dw      last_NFA            // Link to previous definition Name
 879+ 736F             >FILL:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 879+ 736F ~           >                dw      runcode ; ok        // for primitive definitions  actual code
 879+ 736F             >                else
 879+ 736F 71 73       >                dw      $ + 2   ; ok        // is pointed by CFA
 879+ 7371             >                endif           ; ok        // for other definitions it "points" the correct handler
 879+ 7371             >                // Use of "; ok" to suppress "warning[fwdref]"
 879+ 7371             >
 879+ 7371             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 880+ 7371 D9                           exx
 881+ 7372 D1                           pop     de                  // de has character
 882+ 7373 C1                           pop     bc                  // bc has counter
 883+ 7374 E1                           pop     hl                  // hl has address, save Instruction Pointer
 884+ 7375              Fill_Loop:
 885+ 7375 78                               ld      a, b
 886+ 7376 B1                               or      c
 887+ 7377 28 05                        jr      z, Fill_While_End
 888+ 7379 73                               ld      (hl), e
 889+ 737A 0B                               dec     bc
 890+ 737B 23                               inc     hl
 891+ 737C 18 F7                        jr      Fill_Loop
 892+ 737E              Fill_While_End:
 893+ 737E D9                           exx
 894+ 737F
 895+ 737F                              next
 895+ 737F DD E9       >                jp      (ix)
 896+ 7381
 897+ 7381              //  ______________________________________________________________________
 898+ 7381              //
 899+ 7381              // erase        a n --
 900+ 7381              // If n > 0, fills n locations starting from address a with 'nul' characters.
 901+ 7381                              Colon_Def ERASE, "ERASE", is_normal
 901+ 7381             >                New_Def  ERASE, "ERASE", Enter_Ptr, is_normal ; ok
 901+ 7381             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 901+ 7381             >
 901+ 7381             >                // dummy db directives used to calculate length of namec
 901+ 7381 45 52 41 53 >                db      "ERASE"
 901+ 7385 45          >
 901+ 7386             >len_NFA         defl    $ - temp_NFA
 901+ 7386             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 901+ 7381             >
 901+ 7381 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 901+ 7382 45 52 41 53 >                db      "ERASE"               // name string in 7-bit ascii, but
 901+ 7386 45          >
 901+ 7387             >                org     $-1                 // alter last byte of Name just above to set
 901+ 7386 C5          >                db      {b $} | END_BIT     // msb as name end
 901+ 7387             >
 901+ 7387 68 73       >                dw      last_NFA            // Link to previous definition Name
 901+ 7389             >ERASE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 901+ 7389 27 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 901+ 738B             >                else
 901+ 738B ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 901+ 738B             >                endif           ; ok        // for other definitions it "points" the correct handler
 901+ 738B             >                // Use of "; ok" to suppress "warning[fwdref]"
 901+ 738B             >
 901+ 738B             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 902+ 738B A2 6C 6F 73                  dw      ZERO, FILL              // 0 fill
 903+ 738F 23 69                        dw      EXIT                    // ;
 904+ 7391
 905+ 7391              //  ______________________________________________________________________
 906+ 7391              //
 907+ 7391              // blanks       a n --
 908+ 7391              // If n > 0, fills n locations starting from address a with 'nul' characters.
 909+ 7391                              Colon_Def BLANKS, "BLANKS", is_normal
 909+ 7391             >                New_Def  BLANKS, "BLANKS", Enter_Ptr, is_normal ; ok
 909+ 7391             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 909+ 7391             >
 909+ 7391             >                // dummy db directives used to calculate length of namec
 909+ 7391 42 4C 41 4E >                db      "BLANKS"
 909+ 7395 4B 53       >
 909+ 7397             >len_NFA         defl    $ - temp_NFA
 909+ 7397             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 909+ 7391             >
 909+ 7391 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 909+ 7392 42 4C 41 4E >                db      "BLANKS"               // name string in 7-bit ascii, but
 909+ 7396 4B 53       >
 909+ 7398             >                org     $-1                 // alter last byte of Name just above to set
 909+ 7397 D3          >                db      {b $} | END_BIT     // msb as name end
 909+ 7398             >
 909+ 7398 81 73       >                dw      last_NFA            // Link to previous definition Name
 909+ 739A             >BLANKS:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 909+ 739A 27 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 909+ 739C             >                else
 909+ 739C ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 909+ 739C             >                endif           ; ok        // for other definitions it "points" the correct handler
 909+ 739C             >                // Use of "; ok" to suppress "warning[fwdref]"
 909+ 739C             >
 909+ 739C             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 910+ 739C CC 6C 6F 73                  dw      BL, FILL                // bl fill
 911+ 73A0 23 69                        dw      EXIT                    // ;
 912+ 73A2
 913+ 73A2              //  ______________________________________________________________________
 914+ 73A2              //
 915+ 73A2              // hold         c --
 916+ 73A2              // Used between <# and #> to insert a character c in numeric formatting.
 917+ 73A2                              Colon_Def HOLD, "HOLD", is_normal
 917+ 73A2             >                New_Def  HOLD, "HOLD", Enter_Ptr, is_normal ; ok
 917+ 73A2             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 917+ 73A2             >
 917+ 73A2             >                // dummy db directives used to calculate length of namec
 917+ 73A2 48 4F 4C 44 >                db      "HOLD"
 917+ 73A6             >len_NFA         defl    $ - temp_NFA
 917+ 73A6             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 917+ 73A2             >
 917+ 73A2 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 917+ 73A3 48 4F 4C 44 >                db      "HOLD"               // name string in 7-bit ascii, but
 917+ 73A7             >                org     $-1                 // alter last byte of Name just above to set
 917+ 73A6 C4          >                db      {b $} | END_BIT     // msb as name end
 917+ 73A7             >
 917+ 73A7 91 73       >                dw      last_NFA            // Link to previous definition Name
 917+ 73A9             >HOLD:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 917+ 73A9 27 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 917+ 73AB             >                else
 917+ 73AB ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 917+ 73AB             >                endif           ; ok        // for other definitions it "points" the correct handler
 917+ 73AB             >                // Use of "; ok" to suppress "warning[fwdref]"
 917+ 73AB             >
 917+ 73AB             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 918+ 73AB C3 6C                        dw      NEG_ONE                 // -1
 919+ 73AD 23 6E 19 6B                  dw      HLD, PLUSSTORE          // hld +!
 920+ 73B1 23 6E 3C 6B                  dw      HLD, FETCH, CSTORE      // hld @ c!
 920+ 73B5 65 6B
 921+ 73B7 23 69                        dw      EXIT                    // ;
 922+ 73B9
 923+ 73B9              //  ______________________________________________________________________
 924+ 73B9              //
 925+ 73B9              // pad         -- a
 926+ 73B9              // leaves the buffer text address. This is at a fixed distance over HERE.
 927+ 73B9                              Colon_Def PAD, "PAD", is_normal
 927+ 73B9             >                New_Def  PAD, "PAD", Enter_Ptr, is_normal ; ok
 927+ 73B9             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 927+ 73B9             >
 927+ 73B9             >                // dummy db directives used to calculate length of namec
 927+ 73B9 50 41 44    >                db      "PAD"
 927+ 73BC             >len_NFA         defl    $ - temp_NFA
 927+ 73BC             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 927+ 73B9             >
 927+ 73B9 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 927+ 73BA 50 41 44    >                db      "PAD"               // name string in 7-bit ascii, but
 927+ 73BD             >                org     $-1                 // alter last byte of Name just above to set
 927+ 73BC C4          >                db      {b $} | END_BIT     // msb as name end
 927+ 73BD             >
 927+ 73BD A2 73       >                dw      last_NFA            // Link to previous definition Name
 927+ 73BF             >PAD:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 927+ 73BF 27 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 927+ 73C1             >                else
 927+ 73C1 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 927+ 73C1             >                endif           ; ok        // for other definitions it "points" the correct handler
 927+ 73C1             >                // Use of "; ok" to suppress "warning[fwdref]"
 927+ 73C1             >
 927+ 73C1             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 928+ 73C1 81 6E                        dw      HERE                    // here
 929+ 73C3 A9 63 44 00                  dw      LIT, 68                 // 68
 930+ 73C7 C9 69                        dw      PLUS                    // +
 931+ 73C9 23 69                        dw      EXIT                    // ;
 932+ 73CB
 933+ 73CB              //  ______________________________________________________________________
 934+ 73CB              //
 935+ 73CB              // word         c -- a
 936+ 73CB              // reads characters from input streams until it encouners a c delimiter.
 937+ 73CB              // Stores that packet so it starts from HERE
 938+ 73CB              // WORD leaves a counter as first byte and ends the packet with two spaces.
 939+ 73CB              // Other occurrences of c are ignored.
 940+ 73CB              // If BLK is zero, text is taken from terminal buffer TIB.
 941+ 73CB              // Otherwise text is taken from the disk-block given by BLK.
 942+ 73CB              // "in" variable is incremented of the number of character read.
 943+ 73CB              // The number of characters read is given by ENCLOSE.
 944+ 73CB                              Colon_Def WORD, "WORD", is_normal
 944+ 73CB             >                New_Def  WORD, "WORD", Enter_Ptr, is_normal ; ok
 944+ 73CB             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 944+ 73CB             >
 944+ 73CB             >                // dummy db directives used to calculate length of namec
 944+ 73CB 57 4F 52 44 >                db      "WORD"
 944+ 73CF             >len_NFA         defl    $ - temp_NFA
 944+ 73CF             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 944+ 73CB             >
 944+ 73CB 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 944+ 73CC 57 4F 52 44 >                db      "WORD"               // name string in 7-bit ascii, but
 944+ 73D0             >                org     $-1                 // alter last byte of Name just above to set
 944+ 73CF C4          >                db      {b $} | END_BIT     // msb as name end
 944+ 73D0             >
 944+ 73D0 B9 73       >                dw      last_NFA            // Link to previous definition Name
 944+ 73D2             >WORD:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 944+ 73D2 27 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 944+ 73D4             >                else
 944+ 73D4 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 944+ 73D4             >                endif           ; ok        // for other definitions it "points" the correct handler
 944+ 73D4             >                // Use of "; ok" to suppress "warning[fwdref]"
 944+ 73D4             >
 944+ 73D4             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 945+ 73D4 A1 6D 3C 6B                  dw      BLK, FETCH              // blk @
 946+ 73D8                                                              // if
 947+ 73D8 E3 63                        dw      ZBRANCH
 948+ 73DA 0C 00                        dw      Word_Else - $
 949+ 73DC A1 6D 3C 6B                  dw          BLK, FETCH          //      blk @
 950+ 73E0 2D 7D                        dw          BLOCK               //      block ( forward )
 951+ 73E2                                                              // else
 952+ 73E2 CC 63                        dw      BRANCH
 953+ 73E4 06 00                        dw      Word_Endif - $
 954+ 73E6              Word_Else:
 955+ 73E6 35 6D 3C 6B                  dw         TIB, FETCH           //      tib @
 956+ 73EA              Word_Endif:                                     // endif
 957+ 73EA AA 6D 3C 6B                  dw      TO_IN, FETCH, PLUS      // >in @ +
 957+ 73EE C9 69
 958+ 73F0 9C 6A 56 65                  dw      SWAP, ENCLOSE           // swap enclose
 959+ 73F4 81 6E A9 63                  dw      HERE, LIT, 34, BLANKS   // here 34 blanks
 959+ 73F8 22 00 9A 73
 960+ 73FC AA 6D 19 6B                  dw      TO_IN, PLUSSTORE        // >in @ +
 961+ 7400 64 6A D4 6E                  dw      OVER, SUBTRACT, TO_R    // over - >r
 961+ 7404 51 69
 962+ 7406 79 69 81 6E                  dw      R_OP, HERE, CSTORE      // r here c!
 962+ 740A 65 6B
 963+ 740C C9 69                        dw      PLUS                    // +
 964+ 740E 81 6E EA 69                  dw      HERE, ONE_PLUS, R_TO    // here 1+ r>
 964+ 7412 65 69
 965+ 7414 11 68                        dw      CMOVE                   // cmove
 966+ 7416 81 6E                        dw      HERE                    // here
 967+ 7418 23 69                        dw      EXIT                    // ;
 968+ 741A
 969+ 741A              //  ______________________________________________________________________
 970+ 741A              //
 971+ 741A              // (.")         --
 972+ 741A              // Direct procedure compiled by ." and  .(  It executes TYPE.
 973+ 741A                              Colon_Def C_DOT_QUOTE, '(.")', is_normal
 973+ 741A             >                New_Def  C_DOT_QUOTE, '(.")', Enter_Ptr, is_normal ; ok
 973+ 741A             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 973+ 741A             >
 973+ 741A             >                // dummy db directives used to calculate length of namec
 973+ 741A 28 2E 22 29 >                db      '(.")'
 973+ 741E             >len_NFA         defl    $ - temp_NFA
 973+ 741E             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 973+ 741A             >
 973+ 741A 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 973+ 741B 28 2E 22 29 >                db      '(.")'               // name string in 7-bit ascii, but
 973+ 741F             >                org     $-1                 // alter last byte of Name just above to set
 973+ 741E A9          >                db      {b $} | END_BIT     // msb as name end
 973+ 741F             >
 973+ 741F CB 73       >                dw      last_NFA            // Link to previous definition Name
 973+ 7421             >C_DOT_QUOTE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 973+ 7421 27 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 973+ 7423             >                else
 973+ 7423 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 973+ 7423             >                endif           ; ok        // for other definitions it "points" the correct handler
 973+ 7423             >                // Use of "; ok" to suppress "warning[fwdref]"
 973+ 7423             >
 973+ 7423             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 974+ 7423 79 69 E5 71                  dw      R_OP, COUNT             // r count
 975+ 7427 A9 6A EA 69                  dw      DUP, ONE_PLUS           // dup 1+
 976+ 742B 65 69 C9 69                  dw      R_TO, PLUS, TO_R        // r> + >r  ( advance IP )
 976+ 742F 51 69
 977+ 7431 0B 72                        dw      TYPE                    // type
 978+ 7433 23 69                        dw      EXIT                    // ;
 979+ 7435
 980+ 7435              //  ______________________________________________________________________
 981+ 7435              //
 982+ 7435              // char         -- c
 983+ 7435              // get first character from next input word
 984+ 7435                              Colon_Def CHAR,  "CHAR", is_normal
 984+ 7435             >                New_Def  CHAR, "CHAR", Enter_Ptr, is_normal ; ok
 984+ 7435             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 984+ 7435             >
 984+ 7435             >                // dummy db directives used to calculate length of namec
 984+ 7435 43 48 41 52 >                db      "CHAR"
 984+ 7439             >len_NFA         defl    $ - temp_NFA
 984+ 7439             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 984+ 7435             >
 984+ 7435 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 984+ 7436 43 48 41 52 >                db      "CHAR"               // name string in 7-bit ascii, but
 984+ 743A             >                org     $-1                 // alter last byte of Name just above to set
 984+ 7439 D2          >                db      {b $} | END_BIT     // msb as name end
 984+ 743A             >
 984+ 743A 1A 74       >                dw      last_NFA            // Link to previous definition Name
 984+ 743C             >CHAR:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 984+ 743C 27 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 984+ 743E             >                else
 984+ 743E ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 984+ 743E             >                endif           ; ok        // for other definitions it "points" the correct handler
 984+ 743E             >                // Use of "; ok" to suppress "warning[fwdref]"
 984+ 743E             >
 984+ 743E             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 985+ 743E CC 6C D2 73                  dw      BL, WORD                // bl word
 986+ 7442 EA 69 57 6B                  dw      ONE_PLUS, CFETCH        // 1+ c@
 987+ 7446 23 69                        dw      EXIT                    // ;
 988+ 7448
 989+ 7448              //  ______________________________________________________________________
 990+ 7448              //
 991+ 7448              // ,"           --
 992+ 7448              // compiles a string terminated by " as a counted string from next input stream
 993+ 7448                              Colon_Def COMMA_QUOTE,  ',"', is_normal
 993+ 7448             >                New_Def  COMMA_QUOTE, ',"', Enter_Ptr, is_normal ; ok
 993+ 7448             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 993+ 7448             >
 993+ 7448             >                // dummy db directives used to calculate length of namec
 993+ 7448 2C 22       >                db      ',"'
 993+ 744A             >len_NFA         defl    $ - temp_NFA
 993+ 744A             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 993+ 7448             >
 993+ 7448 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 993+ 7449 2C 22       >                db      ',"'               // name string in 7-bit ascii, but
 993+ 744B             >                org     $-1                 // alter last byte of Name just above to set
 993+ 744A A2          >                db      {b $} | END_BIT     // msb as name end
 993+ 744B             >
 993+ 744B 35 74       >                dw      last_NFA            // Link to previous definition Name
 993+ 744D             >COMMA_QUOTE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 993+ 744D 27 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 993+ 744F             >                else
 993+ 744F ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 993+ 744F             >                endif           ; ok        // for other definitions it "points" the correct handler
 993+ 744F             >                // Use of "; ok" to suppress "warning[fwdref]"
 993+ 744F             >
 993+ 744F             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 994+ 744F A9 63 22 00                  dw      LIT, DQUOTE_CHAR        // [char] "
 995+ 7453 D2 73                        dw      WORD                    // word
 996+ 7455 57 6B EA 69                  dw      CFETCH, ONE_PLUS        // c@ 1+
 997+ 7459 91 6E                        dw      ALLOT                   // allot
 998+ 745B A2 6C AE 6E                  dw      ZERO, CCOMMA            // 0 c,  ( nul-terminated string - useful anyway )
 999+ 745F 23 69                        dw      EXIT
1000+ 7461
1001+ 7461              //  ______________________________________________________________________
1002+ 7461              //
1003+ 7461              // .c           c --
1004+ 7461              // intermediate general purpose string builder, used by ." and .(
1005+ 7461                              Colon_Def DOT_C,  ".C", is_immediate
1005+ 7461             >                New_Def  DOT_C, ".C", Enter_Ptr, is_immediate ; ok
1005+ 7461             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1005+ 7461             >
1005+ 7461             >                // dummy db directives used to calculate length of namec
1005+ 7461 2E 43       >                db      ".C"
1005+ 7463             >len_NFA         defl    $ - temp_NFA
1005+ 7463             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1005+ 7461             >
1005+ 7461 C2          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
1005+ 7462 2E 43       >                db      ".C"               // name string in 7-bit ascii, but
1005+ 7464             >                org     $-1                 // alter last byte of Name just above to set
1005+ 7463 C3          >                db      {b $} | END_BIT     // msb as name end
1005+ 7464             >
1005+ 7464 48 74       >                dw      last_NFA            // Link to previous definition Name
1005+ 7466             >DOT_C:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1005+ 7466 27 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
1005+ 7468             >                else
1005+ 7468 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
1005+ 7468             >                endif           ; ok        // for other definitions it "points" the correct handler
1005+ 7468             >                // Use of "; ok" to suppress "warning[fwdref]"
1005+ 7468             >
1005+ 7468             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1006+ 7468 ED 6D 3C 6B                  dw      STATE, FETCH            // state @
1007+ 746C                                                              // if
1008+ 746C E3 63                        dw      ZBRANCH
1009+ 746E 12 00                        dw      Dot_C_Else - $
1010+ 7470 DE 70 21 74                  dw          COMPILE, C_DOT_QUOTE //     compile (.")
1011+ 7474 D2 73 57 6B                  dw          WORD, CFETCH        //      word c@
1012+ 7478 EA 69 91 6E                  dw          ONE_PLUS, ALLOT     //      1+ allot
1013+ 747C                                                              // else
1014+ 747C CC 63                        dw      BRANCH
1015+ 747E 08 00                        dw      Dot_C_Endif - $
1016+ 7480              Dot_C_Else:
1017+ 7480 D2 73 E5 71                  dw          WORD, COUNT, TYPE   //      word count type
1017+ 7484 0B 72
1018+ 7486              Dot_C_Endif:                                    // endif
1019+ 7486 23 69                        dw      EXIT                    ;
1020+ 7488
1021+ 7488              //  ______________________________________________________________________
1022+ 7488              //
1023+ 7488              // ."           c --
1024+ 7488                              Colon_Def DOT_QUOTE,  '."', is_immediate
1024+ 7488             >                New_Def  DOT_QUOTE, '."', Enter_Ptr, is_immediate ; ok
1024+ 7488             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1024+ 7488             >
1024+ 7488             >                // dummy db directives used to calculate length of namec
1024+ 7488 2E 22       >                db      '."'
1024+ 748A             >len_NFA         defl    $ - temp_NFA
1024+ 748A             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1024+ 7488             >
1024+ 7488 C2          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
1024+ 7489 2E 22       >                db      '."'               // name string in 7-bit ascii, but
1024+ 748B             >                org     $-1                 // alter last byte of Name just above to set
1024+ 748A A2          >                db      {b $} | END_BIT     // msb as name end
1024+ 748B             >
1024+ 748B 61 74       >                dw      last_NFA            // Link to previous definition Name
1024+ 748D             >DOT_QUOTE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1024+ 748D 27 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
1024+ 748F             >                else
1024+ 748F ~           >                dw      $ + 2   ; ok        // is pointed by CFA
1024+ 748F             >                endif           ; ok        // for other definitions it "points" the correct handler
1024+ 748F             >                // Use of "; ok" to suppress "warning[fwdref]"
1024+ 748F             >
1024+ 748F             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1025+ 748F A9 63 22 00                  dw      LIT, DQUOTE_CHAR        // [char] "
1026+ 7493 66 74                        dw      DOT_C                   // [compile] .c
1027+ 7495 23 69                        dw      EXIT                    // ; immediate
1028+ 7497
1029+ 7497              //  ______________________________________________________________________
1030+ 7497              //
1031+ 7497              // .(           c --
1032+ 7497                              Colon_Def DOT_BRACKET,  ".(", is_immediate
1032+ 7497             >                New_Def  DOT_BRACKET, ".(", Enter_Ptr, is_immediate ; ok
1032+ 7497             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1032+ 7497             >
1032+ 7497             >                // dummy db directives used to calculate length of namec
1032+ 7497 2E 28       >                db      ".("
1032+ 7499             >len_NFA         defl    $ - temp_NFA
1032+ 7499             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1032+ 7497             >
1032+ 7497 C2          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
1032+ 7498 2E 28       >                db      ".("               // name string in 7-bit ascii, but
1032+ 749A             >                org     $-1                 // alter last byte of Name just above to set
1032+ 7499 A8          >                db      {b $} | END_BIT     // msb as name end
1032+ 749A             >
1032+ 749A 88 74       >                dw      last_NFA            // Link to previous definition Name
1032+ 749C             >DOT_BRACKET:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1032+ 749C 27 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
1032+ 749E             >                else
1032+ 749E ~           >                dw      $ + 2   ; ok        // is pointed by CFA
1032+ 749E             >                endif           ; ok        // for other definitions it "points" the correct handler
1032+ 749E             >                // Use of "; ok" to suppress "warning[fwdref]"
1032+ 749E             >
1032+ 749E             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1033+ 749E A9 63 29 00                  dw      LIT, ")"                // [char] )
1034+ 74A2 66 74                        dw      DOT_C                   // [compile] .c
1035+ 74A4 23 69                        dw      EXIT                    // ; immediate
1036+ 74A6
1037+ 74A6              //  ______________________________________________________________________
1038+ 74A6              //
1039+ 74A6              // (sgn)        a -- a f
1040+ 74A6              // determines if char in addr a is a sign (+ or -), and in that case increments
1041+ 74A6              // a flag. Returns f as the sign, true for negative, false for positive.
1042+ 74A6              // called by NUMBER and (EXP)
1043+ 74A6                              Colon_Def CSGN,  "(SGN)", is_normal
1043+ 74A6             >                New_Def  CSGN, "(SGN)", Enter_Ptr, is_normal ; ok
1043+ 74A6             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1043+ 74A6             >
1043+ 74A6             >                // dummy db directives used to calculate length of namec
1043+ 74A6 28 53 47 4E >                db      "(SGN)"
1043+ 74AA 29          >
1043+ 74AB             >len_NFA         defl    $ - temp_NFA
1043+ 74AB             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1043+ 74A6             >
1043+ 74A6 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1043+ 74A7 28 53 47 4E >                db      "(SGN)"               // name string in 7-bit ascii, but
1043+ 74AB 29          >
1043+ 74AC             >                org     $-1                 // alter last byte of Name just above to set
1043+ 74AB A9          >                db      {b $} | END_BIT     // msb as name end
1043+ 74AC             >
1043+ 74AC 97 74       >                dw      last_NFA            // Link to previous definition Name
1043+ 74AE             >CSGN:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1043+ 74AE 27 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
1043+ 74B0             >                else
1043+ 74B0 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
1043+ 74B0             >                endif           ; ok        // for other definitions it "points" the correct handler
1043+ 74B0             >                // Use of "; ok" to suppress "warning[fwdref]"
1043+ 74B0             >
1043+ 74B0             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1044+ 74B0 A9 6A EA 69                  dw      DUP, ONE_PLUS, CFETCH   // dup 1+ c@
1044+ 74B4 57 6B
1045+ 74B6 A9 6A A9 63                  dw      DUP, LIT, "-", EQUALS   // dup [char] - =
1045+ 74BA 2D 00 E2 6E
1046+ 74BE                                                              // if
1047+ 74BE E3 63                        dw      ZBRANCH
1048+ 74C0 12 00                        dw      CSgn_Else_0 - $
1049+ 74C2 74 6A                        dw          DROP                //      drop
1050+ 74C4 EA 69                        dw          ONE_PLUS            //      1+
1051+ 74C6 AA 6C 00 6E                  dw          ONE, DPL, PLUSSTORE //      1 dpl +!
1051+ 74CA 19 6B
1052+ 74CC AA 6C                        dw          ONE                 //      1
1053+ 74CE                                                              // else
1054+ 74CE CC 63                        dw      BRANCH
1055+ 74D0 16 00                        dw      CSgn_Endif_0 - $
1056+ 74D2              CSgn_Else_0:
1057+ 74D2 A9 63 2B 00                  dw          LIT, "+", EQUALS    //      [char] + =
1057+ 74D6 E2 6E
1058+ 74D8                                                              //      if
1059+ 74D8 E3 63                        dw          ZBRANCH
1060+ 74DA 0A 00                        dw          CSgn_Endif_1 - $
1061+ 74DC EA 69                        dw              ONE_PLUS        //          1+
1062+ 74DE AA 6C 00 6E                  dw              ONE, DPL        //          1 dpl
1063+ 74E2 19 6B                        dw              PLUSSTORE       //          +!
1064+ 74E4              CSgn_Endif_1                                    //      endif
1065+ 74E4 A2 6C                        dw          ZERO                //      0
1066+ 74E6              CSgn_Endif_0:                                   // endif
1067+ 74E6 23 69                        dw      EXIT
1068+ 74E8
1069+ 74E8              //  ______________________________________________________________________
1070+ 74E8              //
1071+ 74E8              // (number)     d a -- d1 a1
1072+ 74E8              // using the current BASE parse characters stored in address a
1073+ 74E8              // accumulating a double precision integer d
1074+ 74E8              // the process stops at the first not-convertible character
1075+ 74E8              // A double-number is kept in CPU registers as HLDE.
1076+ 74E8              // On the stack a double number is treated as two single numbers
1077+ 74E8              // where HL is on the top of the stack and DE is the second from top,
1078+ 74E8              // so in the stack memory it appears as LHED.
1079+ 74E8              // Instead, in 2VARIABLE a double number is stored as EDLH.
1080+ 74E8                              Colon_Def CNUMBER,  "(NUMBER)", is_normal
1080+ 74E8             >                New_Def  CNUMBER, "(NUMBER)", Enter_Ptr, is_normal ; ok
1080+ 74E8             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1080+ 74E8             >
1080+ 74E8             >                // dummy db directives used to calculate length of namec
1080+ 74E8 28 4E 55 4D >                db      "(NUMBER)"
1080+ 74EC 42 45 52 29 >
1080+ 74F0             >len_NFA         defl    $ - temp_NFA
1080+ 74F0             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1080+ 74E8             >
1080+ 74E8 88          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1080+ 74E9 28 4E 55 4D >                db      "(NUMBER)"               // name string in 7-bit ascii, but
1080+ 74ED 42 45 52 29 >
1080+ 74F1             >                org     $-1                 // alter last byte of Name just above to set
1080+ 74F0 A9          >                db      {b $} | END_BIT     // msb as name end
1080+ 74F1             >
1080+ 74F1 A6 74       >                dw      last_NFA            // Link to previous definition Name
1080+ 74F3             >CNUMBER:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1080+ 74F3 27 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
1080+ 74F5             >                else
1080+ 74F5 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
1080+ 74F5             >                endif           ; ok        // for other definitions it "points" the correct handler
1080+ 74F5             >                // Use of "; ok" to suppress "warning[fwdref]"
1080+ 74F5             >
1080+ 74F5             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1081+ 74F5                                                              // begin
1082+ 74F5              CNumber_Begin:
1083+ 74F5 EA 69                        dw          ONE_PLUS            //      1+
1084+ 74F7 A9 6A 51 69                  dw          DUP, TO_R           //      dup >r
1085+ 74FB 57 6B                        dw          CFETCH              //      @
1086+ 74FD F7 6D 3C 6B                  dw          BASE, FETCH         //      base @
1087+ 7501 89 64                        dw          DIGIT               //      digit
1088+ 7503                                                              // while
1089+ 7503 E3 63                        dw      ZBRANCH
1090+ 7505 2C 00                        dw      CNumber_While_end - $
1091+ 7507 9C 6A                        dw          SWAP                //      swap
1092+ 7509 F7 6D 3C 6B                  dw          BASE, FETCH         //      base @
1093+ 750D 44 68                        dw          UM_MUL              //      um*
1094+ 750F 74 6A B6 6A                  dw          DROP, ROT           //      drop rot
1095+ 7513 F7 6D 3C 6B                  dw          BASE, FETCH         //      base @
1096+ 7517 44 68                        dw          UM_MUL              //      um*
1097+ 7519 D6 69                        dw          DPLUS               //      d+
1098+ 751B 00 6E 3C 6B                  dw          DPL, FETCH          //      dpl @
1099+ 751F EA 69                        dw          ONE_PLUS            //      1+
1100+ 7521                                                              //      if
1101+ 7521 E3 63                        dw          ZBRANCH
1102+ 7523 08 00                        dw          CNumber_Endif - $
1103+ 7525 AA 6C 00 6E                  dw              ONE, DPL        //          1 dpl
1104+ 7529 19 6B                        dw              PLUSSTORE       //          +!
1105+ 752B              CNumber_Endif:                                  //      endif
1106+ 752B 65 69                        dw             R_TO             //      r>  ( balance rp )
1107+ 752D CC 63                        dw      BRANCH
1108+ 752F C6 FF                        dw      CNumber_Begin - $
1109+ 7531              CNumber_While_end:                              // repeat
1110+ 7531 65 69                        dw      R_TO                    // r>  ( balance rp on exit while-repeat )
1111+ 7533 23 69                        dw      EXIT                    // ;
1112+ 7535
1113+ 7535              //  ______________________________________________________________________
1114+ 7535              //
1115+ 7535              // number       a -- d
1116+ 7535                              Colon_Def NUMBER,  "NUMBER", is_normal
1116+ 7535             >                New_Def  NUMBER, "NUMBER", Enter_Ptr, is_normal ; ok
1116+ 7535             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1116+ 7535             >
1116+ 7535             >                // dummy db directives used to calculate length of namec
1116+ 7535 4E 55 4D 42 >                db      "NUMBER"
1116+ 7539 45 52       >
1116+ 753B             >len_NFA         defl    $ - temp_NFA
1116+ 753B             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1116+ 7535             >
1116+ 7535 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1116+ 7536 4E 55 4D 42 >                db      "NUMBER"               // name string in 7-bit ascii, but
1116+ 753A 45 52       >
1116+ 753C             >                org     $-1                 // alter last byte of Name just above to set
1116+ 753B D2          >                db      {b $} | END_BIT     // msb as name end
1116+ 753C             >
1116+ 753C E8 74       >                dw      last_NFA            // Link to previous definition Name
1116+ 753E             >NUMBER:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1116+ 753E 27 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
1116+ 7540             >                else
1116+ 7540 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
1116+ 7540             >                endif           ; ok        // for other definitions it "points" the correct handler
1116+ 7540             >                // Use of "; ok" to suppress "warning[fwdref]"
1116+ 7540             >
1116+ 7540             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1117+ 7540 A2 6C A2 6C                  dw      ZERO, ZERO              // 0 0
1118+ 7544 B6 6A                        dw      ROT                     // rot
1119+ 7546 AE 74 51 69                  dw      CSGN, TO_R              // (sgn) >r
1120+ 754A C3 6C 00 6E                  dw      NEG_ONE, DPL, STORE     // -1 dpl !
1120+ 754E 49 6B
1121+ 7550 F3 74                        dw      CNUMBER                 // (number)
1122+ 7552 A9 6A 57 6B                  dw      DUP, CFETCH             // dup c@
1123+ 7556 A9 63 2E 00                  dw      LIT, 46, EQUALS         // [char] . =  ( decimal point )
1123+ 755A E2 6E
1124+ 755C                                                              // if
1125+ 755C E3 63                        dw      ZBRANCH
1126+ 755E 0A 00                        dw      Number_Endif_1 - $
1127+ 7560 A2 6C 00 6E                  dw          ZERO, DPL, STORE    //      0 dpl !
1127+ 7564 49 6B
1128+ 7566 F3 74                        dw          CNUMBER             //      (number)
1129+ 7568              Number_Endif_1:                                 // endif
1130+ 7568 57 6B CC 6C                  dw      CFETCH, BL              // c@ bl
1131+ 756C D4 6E A2 6C                  dw      SUBTRACT, ZERO, QERROR  // - 0 ?error
1131+ 7570 4B 70
1132+ 7572 65 69                        dw      R_TO                    // r>
1133+ 7574                                                              // if
1134+ 7574 E3 63                        dw      ZBRANCH
1135+ 7576 04 00                        dw      Number_Endif_2 - $
1136+ 7578 4A 6A                        dw          DMINUS              //      dminus
1137+ 757A              Number_Endif_2:                                 // endif
1138+ 757A 23 69                        dw      EXIT                    // ;
1139+ 757C
1140+ 757C              //  ______________________________________________________________________
1141+ 757C              //
1142+ 757C              // -find        a -- d
1143+ 757C                              Colon_Def LFIND,  "-FIND", is_normal
1143+ 757C             >                New_Def  LFIND, "-FIND", Enter_Ptr, is_normal ; ok
1143+ 757C             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1143+ 757C             >
1143+ 757C             >                // dummy db directives used to calculate length of namec
1143+ 757C 2D 46 49 4E >                db      "-FIND"
1143+ 7580 44          >
1143+ 7581             >len_NFA         defl    $ - temp_NFA
1143+ 7581             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1143+ 757C             >
1143+ 757C 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1143+ 757D 2D 46 49 4E >                db      "-FIND"               // name string in 7-bit ascii, but
1143+ 7581 44          >
1143+ 7582             >                org     $-1                 // alter last byte of Name just above to set
1143+ 7581 C4          >                db      {b $} | END_BIT     // msb as name end
1143+ 7582             >
1143+ 7582 35 75       >                dw      last_NFA            // Link to previous definition Name
1143+ 7584             >LFIND:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1143+ 7584 27 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
1143+ 7586             >                else
1143+ 7586 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
1143+ 7586             >                endif           ; ok        // for other definitions it "points" the correct handler
1143+ 7586             >                // Use of "; ok" to suppress "warning[fwdref]"
1143+ 7586             >
1143+ 7586             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1144+ 7586 CC 6C D2 73                  dw      BL, WORD                // bl word
1145+ 758A D5 6D 3C 6B                  dw      CONTEXT, FETCH, FETCH   // context @ @
1145+ 758E 3C 6B
1146+ 7590 FE 64                        dw      C_FIND                  // (find)
1147+ 7592 5A 6F                        dw      QDUP                    // ?dup
1148+ 7594 86 69                        dw      ZEQUAL                  // 0=
1149+ 7596                                                              // if
1150+ 7596 E3 63                        dw      ZBRANCH
1151+ 7598 08 00                        dw      LFind_Endif - $
1152+ 759A 81 6E                        dw          HERE                //      here
1153+ 759C C7 6F                        dw          LATEST              //      latest
1154+ 759E FE 64                        dw          C_FIND              //      (find)
1155+ 75A0              LFind_Endif:                                    // endif
1156+ 75A0 23 69                        dw      EXIT                    // ;
1157+ 75A2
1158+ 75A2              //  ______________________________________________________________________
1159+ 75A2              //
1160+ 75A2              // (abort)      --
1161+ 75A2                              Colon_Def CABORT,  "(ABORT)", is_normal
1161+ 75A2             >                New_Def  CABORT, "(ABORT)", Enter_Ptr, is_normal ; ok
1161+ 75A2             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1161+ 75A2             >
1161+ 75A2             >                // dummy db directives used to calculate length of namec
1161+ 75A2 28 41 42 4F >                db      "(ABORT)"
1161+ 75A6 52 54 29    >
1161+ 75A9             >len_NFA         defl    $ - temp_NFA
1161+ 75A9             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1161+ 75A2             >
1161+ 75A2 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1161+ 75A3 28 41 42 4F >                db      "(ABORT)"               // name string in 7-bit ascii, but
1161+ 75A7 52 54 29    >
1161+ 75AA             >                org     $-1                 // alter last byte of Name just above to set
1161+ 75A9 A9          >                db      {b $} | END_BIT     // msb as name end
1161+ 75AA             >
1161+ 75AA 7C 75       >                dw      last_NFA            // Link to previous definition Name
1161+ 75AC             >CABORT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1161+ 75AC 27 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
1161+ 75AE             >                else
1161+ 75AE ~           >                dw      $ + 2   ; ok        // is pointed by CFA
1161+ 75AE             >                endif           ; ok        // for other definitions it "points" the correct handler
1161+ 75AE             >                // Use of "; ok" to suppress "warning[fwdref]"
1161+ 75AE             >
1161+ 75AE             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1162+ 75AE 73 78                        dw      ABORT                   // abort
1163+ 75B0 23 69                        dw      EXIT                    // ;
1164+ 75B2
1165+ 75B2              //  ______________________________________________________________________
1166+ 75B2              //
1167+ 75B2              // error        n --
1168+ 75B2              // raise an error
1169+ 75B2              // if WARNING is 0, prints "MSG#n".
1170+ 75B2              // if WARNING is 1, prints line n of screen 4.
1171+ 75B2              // if WARNING is -1 does (ABORT) that normally does ABORT
1172+ 75B2              // value can be negative or beyond block 4.
1173+ 75B2                              Colon_Def ERROR,  "ERROR", is_normal
1173+ 75B2             >                New_Def  ERROR, "ERROR", Enter_Ptr, is_normal ; ok
1173+ 75B2             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1173+ 75B2             >
1173+ 75B2             >                // dummy db directives used to calculate length of namec
1173+ 75B2 45 52 52 4F >                db      "ERROR"
1173+ 75B6 52          >
1173+ 75B7             >len_NFA         defl    $ - temp_NFA
1173+ 75B7             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1173+ 75B2             >
1173+ 75B2 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1173+ 75B3 45 52 52 4F >                db      "ERROR"               // name string in 7-bit ascii, but
1173+ 75B7 52          >
1173+ 75B8             >                org     $-1                 // alter last byte of Name just above to set
1173+ 75B7 D2          >                db      {b $} | END_BIT     // msb as name end
1173+ 75B8             >
1173+ 75B8 A2 75       >                dw      last_NFA            // Link to previous definition Name
1173+ 75BA             >ERROR:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1173+ 75BA 27 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
1173+ 75BC             >                else
1173+ 75BC ~           >                dw      $ + 2   ; ok        // is pointed by CFA
1173+ 75BC             >                endif           ; ok        // for other definitions it "points" the correct handler
1173+ 75BC             >                // Use of "; ok" to suppress "warning[fwdref]"
1173+ 75BC             >
1173+ 75BC             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1174+ 75BC 4D 6D 3C 6B                  dw      WARNING, FETCH, ZLESS   // warning @ 0<
1174+ 75C0 A1 69
1175+ 75C2                                                              // if
1176+ 75C2 E3 63                        dw      ZBRANCH
1177+ 75C4 04 00                        dw      Error_Endif_1 - $
1178+ 75C6 AC 75                        dw          CABORT              //      (abort)
1179+ 75C8              Error_Endif_1:                                  // endif
1180+ 75C8 81 6E E5 71                  dw      HERE, COUNT, TYPE       // here count type
1180+ 75CC 0B 72
1181+ 75CE 21 74                        dw      C_DOT_QUOTE             // .( ? )
1182+ 75D0 02 3F 20                     db      2, "? "
1183+ 75D3 58 7A                        dw      MESSAGE                 // message  ( forward )
1184+ 75D5 24 6D 3C 6B                  dw      S0, FETCH, SPSTORE      // s0 @ sp!
1184+ 75D9 FA 68
1185+ 75DB A1 6D 3C 6B                  dw      BLK, FETCH, QDUP        // blk @ ?dup
1185+ 75DF 5A 6F
1186+ 75E1                                                              // if
1187+ 75E1 E3 63                        dw      ZBRANCH
1188+ 75E3 08 00                        dw      Error_Endif_2 - $
1189+ 75E5 AA 6D 3C 6B                  dw          TO_IN, FETCH, SWAP  //      >in @ swap
1189+ 75E9 9C 6A
1190+ 75EB              Error_Endif_2:                                  // endif
1191+ 75EB 32 78                        dw      QUIT                    // quit ( forward )
1192+ 75ED 23 69                        dw      EXIT                    // ;
1193+ 75EF              //  ______________________________________________________________________
1194+ 75EF              //
1195+ 75EF              // id.          nfa --
1196+ 75EF                              Colon_Def ID_DOT,  "ID.", is_normal
1196+ 75EF             >                New_Def  ID_DOT, "ID.", Enter_Ptr, is_normal ; ok
1196+ 75EF             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1196+ 75EF             >
1196+ 75EF             >                // dummy db directives used to calculate length of namec
1196+ 75EF 49 44 2E    >                db      "ID."
1196+ 75F2             >len_NFA         defl    $ - temp_NFA
1196+ 75F2             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1196+ 75EF             >
1196+ 75EF 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1196+ 75F0 49 44 2E    >                db      "ID."               // name string in 7-bit ascii, but
1196+ 75F3             >                org     $-1                 // alter last byte of Name just above to set
1196+ 75F2 AE          >                db      {b $} | END_BIT     // msb as name end
1196+ 75F3             >
1196+ 75F3 B2 75       >                dw      last_NFA            // Link to previous definition Name
1196+ 75F5             >ID_DOT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1196+ 75F5 27 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
1196+ 75F7             >                else
1196+ 75F7 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
1196+ 75F7             >                endif           ; ok        // for other definitions it "points" the correct handler
1196+ 75F7             >                // Use of "; ok" to suppress "warning[fwdref]"
1196+ 75F7             >
1196+ 75F7             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1197+ 75F7 BF 73 A9 63                  dw      PAD, LIT, 32, LIT, 96   // pad 32 96
1197+ 75FB 20 00 A9 63
1197+ 75FF 60 00
1198+ 7601 6F 73                        dw      FILL                    // fill
1199+ 7603 A9 6A 05 70                  dw      DUP, PFA, LFA           // dup pfa lfa
1199+ 7607 D7 6F
1200+ 7609 64 6A D4 6E                  dw      OVER, SUBTRACT          // over -
1201+ 760D BF 73 9C 6A                  dw      PAD, SWAP               // pad swap
1202+ 7611 11 68                        dw      CMOVE                   // cmove
1203+ 7613 BF 73 E5 71                  dw      PAD, COUNT, LIT, $1F    // pad count 01F
1203+ 7617 A9 63 1F 00
1204+ 761B B3 68                        dw      AND_OP                  // and  ( use only lower bits )
1205+ 761D 0B 72 91 6F                  dw      TYPE, SPACE             // type
1206+ 7621 23 69                        dw      EXIT                    // ;
1207+ 7623
1208+ 7623              //  ______________________________________________________________________
1209+ 7623              //
1210+ 7623              // code         -- cccc
1211+ 7623                              Colon_Def CODE,  "CODE", is_normal
1211+ 7623             >                New_Def  CODE, "CODE", Enter_Ptr, is_normal ; ok
1211+ 7623             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1211+ 7623             >
1211+ 7623             >                // dummy db directives used to calculate length of namec
1211+ 7623 43 4F 44 45 >                db      "CODE"
1211+ 7627             >len_NFA         defl    $ - temp_NFA
1211+ 7627             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1211+ 7623             >
1211+ 7623 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1211+ 7624 43 4F 44 45 >                db      "CODE"               // name string in 7-bit ascii, but
1211+ 7628             >                org     $-1                 // alter last byte of Name just above to set
1211+ 7627 C5          >                db      {b $} | END_BIT     // msb as name end
1211+ 7628             >
1211+ 7628 EF 75       >                dw      last_NFA            // Link to previous definition Name
1211+ 762A             >CODE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1211+ 762A 27 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
1211+ 762C             >                else
1211+ 762C ~           >                dw      $ + 2   ; ok        // is pointed by CFA
1211+ 762C             >                endif           ; ok        // for other definitions it "points" the correct handler
1211+ 762C             >                // Use of "; ok" to suppress "warning[fwdref]"
1211+ 762C             >
1211+ 762C             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1212+ 762C 84 75                        dw      LFIND                   // -find
1213+ 762E                                                              // if
1214+ 762E E3 63                        dw      ZBRANCH
1215+ 7630 10 00                        dw      Code_Endif - $
1216+ 7632 74 6A                        dw          DROP                //      drop
1217+ 7634 29 70 F5 75                  dw          TO_NAME, ID_DOT     //      >name id.
1218+ 7638 A9 63 04 00                  dw          LIT, 4, MESSAGE     //      4 message
1218+ 763C 58 7A
1219+ 763E 91 6F                        dw          SPACE               //      space
1220+ 7640              Code_Endif:                                     // endif
1221+ 7640 81 6E                        dw      HERE                    // here
1222+ 7642                                                              // ( ---- here begins NFA ---- )
1223+ 7642 A9 6A 57 6B                  dw      DUP, CFETCH             // dup c@
1224+ 7646 40 6D 3C 6B                  dw      WIDTH, FETCH, MIN       // width @ min  ( max 31 character length )
1224+ 764A 2D 6F
1225+ 764C EA 69 91 6E                  dw      ONE_PLUS, ALLOT         // 1+ allot
1226+ 7650 A9 6A                        dw      DUP                     // dup
1227+ 7652 A9 63                        dw      LIT
1228+ 7654 A0 00                        dw      SMUDGE_BIT | END_BIT    // 160
1229+ 7656 2F 6B                        dw      TOGGLE                  // toggle
1230+ 7658 81 6E F6 69                  dw      HERE, ONE_SUBTRACT     // here 1- ( last character )
1231+ 765C A9 63 80 00                  dw      LIT, END_BIT, TOGGLE    // 128 toggle
1231+ 7660 2F 6B
1232+ 7662                                                              // ( ---- here is LFA ---- )
1233+ 7662 C7 6F 9D 6E                  dw      LATEST, COMMA           // latest ,
1234+ 7666 E2 6D 3C 6B                  dw      CURRENT, FETCH, STORE   // current @ ! ( save this word as the latest )
1234+ 766A 49 6B
1235+ 766C 81 6E 12 6A                  dw      HERE, CELL_PLUS, COMMA  // ( CFA point PFA )
1235+ 7670 9D 6E
1236+ 7672 23 69                        dw      EXIT                    // ;
1237+ 7674
1238+ 7674              //  ______________________________________________________________________
1239+ 7674              //
1240+ 7674              // create       -- cccc     ( compile time )
1241+ 7674              //              -- a        ( run time )
1242+ 7674                              Colon_Def CREATE,  "CREATE", is_normal
1242+ 7674             >                New_Def  CREATE, "CREATE", Enter_Ptr, is_normal ; ok
1242+ 7674             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1242+ 7674             >
1242+ 7674             >                // dummy db directives used to calculate length of namec
1242+ 7674 43 52 45 41 >                db      "CREATE"
1242+ 7678 54 45       >
1242+ 767A             >len_NFA         defl    $ - temp_NFA
1242+ 767A             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1242+ 7674             >
1242+ 7674 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1242+ 7675 43 52 45 41 >                db      "CREATE"               // name string in 7-bit ascii, but
1242+ 7679 54 45       >
1242+ 767B             >                org     $-1                 // alter last byte of Name just above to set
1242+ 767A C5          >                db      {b $} | END_BIT     // msb as name end
1242+ 767B             >
1242+ 767B 23 76       >                dw      last_NFA            // Link to previous definition Name
1242+ 767D             >CREATE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1242+ 767D 27 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
1242+ 767F             >                else
1242+ 767F ~           >                dw      $ + 2   ; ok        // is pointed by CFA
1242+ 767F             >                endif           ; ok        // for other definitions it "points" the correct handler
1242+ 767F             >                // Use of "; ok" to suppress "warning[fwdref]"
1242+ 767F             >
1242+ 767F             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1243+ 767F 2A 76 2A 71                  dw      CODE, SMUDGE        // code smudge
1244+ 7683
1245+ 7683
1246+ 7683 80 71                        dw      C_SEMICOLON_CODE
1247+ 7685                              // this routine is called from the call coded in CFA
1248+ 7685              Create_Ptr:
1249+ 7685 13                           inc     de
1250+ 7686 D5                           push    de                  // balance TOS before overwrite it
1251+ 7687
1252+ 7687                              next
1252+ 7687 DD E9       >                jp      (ix)
1253+ 7689
1254+ 7689              //  ______________________________________________________________________
1255+ 7689              //
1256+ 7689              // [compile]    -- cccc     ( compile time )
1257+ 7689                              Colon_Def COMPILE_IMMEDIATE,  "[COMPILE]", is_immediate
1257+ 7689             >                New_Def  COMPILE_IMMEDIATE, "[COMPILE]", Enter_Ptr, is_immediate ; ok
1257+ 7689             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1257+ 7689             >
1257+ 7689             >                // dummy db directives used to calculate length of namec
1257+ 7689 5B 43 4F 4D >                db      "[COMPILE]"
1257+ 768D 50 49 4C 45 >
1257+ 7691 5D          >
1257+ 7692             >len_NFA         defl    $ - temp_NFA
1257+ 7692             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1257+ 7689             >
1257+ 7689 C9          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
1257+ 768A 5B 43 4F 4D >                db      "[COMPILE]"               // name string in 7-bit ascii, but
1257+ 768E 50 49 4C 45 >
1257+ 7692 5D          >
1257+ 7693             >                org     $-1                 // alter last byte of Name just above to set
1257+ 7692 DD          >                db      {b $} | END_BIT     // msb as name end
1257+ 7693             >
1257+ 7693 74 76       >                dw      last_NFA            // Link to previous definition Name
1257+ 7695             >COMPILE_IMMEDIATE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1257+ 7695 27 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
1257+ 7697             >                else
1257+ 7697 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
1257+ 7697             >                endif           ; ok        // for other definitions it "points" the correct handler
1257+ 7697             >                // Use of "; ok" to suppress "warning[fwdref]"
1257+ 7697             >
1257+ 7697             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1258+ 7697 84 75                        dw      LFIND                   // -find      (  cfa  b  f  )
1259+ 7699 86 69                        dw      ZEQUAL                  // 0=         (  cfa  b  )
1260+ 769B A2 6C 4B 70                  dw      ZERO, QERROR            // 0 ?error
1261+ 769F 74 6A                        dw      DROP                    // drop       (  cfa  )
1262+ 76A1 9D 6E                        dw      COMMA                   // ,
1263+ 76A3 23 69                        dw      EXIT                    // ; immediate
1264+ 76A5
1265+ 76A5              //  ______________________________________________________________________
1266+ 76A5              //
1267+ 76A5              // literal      n --      ( compile time )
1268+ 76A5                              Colon_Def LITERAL,  "LITERAL", is_immediate
1268+ 76A5             >                New_Def  LITERAL, "LITERAL", Enter_Ptr, is_immediate ; ok
1268+ 76A5             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1268+ 76A5             >
1268+ 76A5             >                // dummy db directives used to calculate length of namec
1268+ 76A5 4C 49 54 45 >                db      "LITERAL"
1268+ 76A9 52 41 4C    >
1268+ 76AC             >len_NFA         defl    $ - temp_NFA
1268+ 76AC             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1268+ 76A5             >
1268+ 76A5 C7          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
1268+ 76A6 4C 49 54 45 >                db      "LITERAL"               // name string in 7-bit ascii, but
1268+ 76AA 52 41 4C    >
1268+ 76AD             >                org     $-1                 // alter last byte of Name just above to set
1268+ 76AC CC          >                db      {b $} | END_BIT     // msb as name end
1268+ 76AD             >
1268+ 76AD 89 76       >                dw      last_NFA            // Link to previous definition Name
1268+ 76AF             >LITERAL:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1268+ 76AF 27 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
1268+ 76B1             >                else
1268+ 76B1 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
1268+ 76B1             >                endif           ; ok        // for other definitions it "points" the correct handler
1268+ 76B1             >                // Use of "; ok" to suppress "warning[fwdref]"
1268+ 76B1             >
1268+ 76B1             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1269+ 76B1 ED 6D 3C 6B                  dw      STATE, FETCH            // state @
1270+ 76B5                                                              // if
1271+ 76B5 E3 63                        dw      ZBRANCH
1272+ 76B7 08 00                        dw      Literal_Endif - $
1273+ 76B9 DE 70 A9 63                  dw          COMPILE, LIT        //      compile lit
1274+ 76BD 9D 6E                        dw          COMMA               //      ,
1275+ 76BF              Literal_Endif:                                  // endif
1276+ 76BF 23 69                        dw      EXIT                    // ; immediate
1277+ 76C1
1278+ 76C1              //  ______________________________________________________________________
1279+ 76C1              //
1280+ 76C1              // dliteral     n --      ( compile time )
1281+ 76C1                              Colon_Def DLITERAL,  "DLITERAL", is_immediate
1281+ 76C1             >                New_Def  DLITERAL, "DLITERAL", Enter_Ptr, is_immediate ; ok
1281+ 76C1             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1281+ 76C1             >
1281+ 76C1             >                // dummy db directives used to calculate length of namec
1281+ 76C1 44 4C 49 54 >                db      "DLITERAL"
1281+ 76C5 45 52 41 4C >
1281+ 76C9             >len_NFA         defl    $ - temp_NFA
1281+ 76C9             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1281+ 76C1             >
1281+ 76C1 C8          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
1281+ 76C2 44 4C 49 54 >                db      "DLITERAL"               // name string in 7-bit ascii, but
1281+ 76C6 45 52 41 4C >
1281+ 76CA             >                org     $-1                 // alter last byte of Name just above to set
1281+ 76C9 CC          >                db      {b $} | END_BIT     // msb as name end
1281+ 76CA             >
1281+ 76CA A5 76       >                dw      last_NFA            // Link to previous definition Name
1281+ 76CC             >DLITERAL:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1281+ 76CC 27 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
1281+ 76CE             >                else
1281+ 76CE ~           >                dw      $ + 2   ; ok        // is pointed by CFA
1281+ 76CE             >                endif           ; ok        // for other definitions it "points" the correct handler
1281+ 76CE             >                // Use of "; ok" to suppress "warning[fwdref]"
1281+ 76CE             >
1281+ 76CE             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1282+ 76CE ED 6D 3C 6B                  dw      STATE, FETCH            // state @
1283+ 76D2                                                              // if
1284+ 76D2 E3 63                        dw      ZBRANCH
1285+ 76D4 08 00                        dw      DLiteral_Endif - $
1286+ 76D6 9C 6A                        dw          SWAP                //      swap
1287+ 76D8 AF 76 AF 76                  dw          LITERAL,  LITERAL   //      [compile] literal [compile] literal
1288+ 76DC              DLiteral_Endif:                                 // endif
1289+ 76DC 23 69                        dw      EXIT                    // ; immediate
1290+ 76DE
1291+ 76DE              //  ______________________________________________________________________
1292+ 76DE              //
1293+ 76DE              // [char]       n --      ( compile time )
1294+ 76DE              // inside colon definition, gets first character from next input word
1295+ 76DE              // and compiles it as literal.
1296+ 76DE                              Colon_Def COMPILE_CHAR,  "[CHAR]", is_immediate
1296+ 76DE             >                New_Def  COMPILE_CHAR, "[CHAR]", Enter_Ptr, is_immediate ; ok
1296+ 76DE             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1296+ 76DE             >
1296+ 76DE             >                // dummy db directives used to calculate length of namec
1296+ 76DE 5B 43 48 41 >                db      "[CHAR]"
1296+ 76E2 52 5D       >
1296+ 76E4             >len_NFA         defl    $ - temp_NFA
1296+ 76E4             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1296+ 76DE             >
1296+ 76DE C6          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
1296+ 76DF 5B 43 48 41 >                db      "[CHAR]"               // name string in 7-bit ascii, but
1296+ 76E3 52 5D       >
1296+ 76E5             >                org     $-1                 // alter last byte of Name just above to set
1296+ 76E4 DD          >                db      {b $} | END_BIT     // msb as name end
1296+ 76E5             >
1296+ 76E5 C1 76       >                dw      last_NFA            // Link to previous definition Name
1296+ 76E7             >COMPILE_CHAR:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1296+ 76E7 27 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
1296+ 76E9             >                else
1296+ 76E9 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
1296+ 76E9             >                endif           ; ok        // for other definitions it "points" the correct handler
1296+ 76E9             >                // Use of "; ok" to suppress "warning[fwdref]"
1296+ 76E9             >
1296+ 76E9             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1297+ 76E9 3C 74 AF 76                  dw      CHAR, LITERAL           // char [compile] literal
1298+ 76ED 23 69                        dw      EXIT                    // ; immediate
1299+ 76EF
1300+ 76EF              //  ______________________________________________________________________
1301+ 76EF              //
1302+ 76EF              // 0x00         n --      ( compile time )
1303+ 76EF                              Colon_Def NUL_WORD,  $00, is_immediate
1303+ 76EF             >                New_Def  NUL_WORD, $00, Enter_Ptr, is_immediate ; ok
1303+ 76EF             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1303+ 76EF             >
1303+ 76EF             >                // dummy db directives used to calculate length of namec
1303+ 76EF 00          >                db      $00
1303+ 76F0             >len_NFA         defl    $ - temp_NFA
1303+ 76F0             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1303+ 76EF             >
1303+ 76EF C1          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
1303+ 76F0 00          >                db      $00               // name string in 7-bit ascii, but
1303+ 76F1             >                org     $-1                 // alter last byte of Name just above to set
1303+ 76F0 80          >                db      {b $} | END_BIT     // msb as name end
1303+ 76F1             >
1303+ 76F1 DE 76       >                dw      last_NFA            // Link to previous definition Name
1303+ 76F3             >NUL_WORD:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1303+ 76F3 27 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
1303+ 76F5             >                else
1303+ 76F5 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
1303+ 76F5             >                endif           ; ok        // for other definitions it "points" the correct handler
1303+ 76F5             >                // Use of "; ok" to suppress "warning[fwdref]"
1303+ 76F5             >
1303+ 76F5             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1304+ 76F5 A1 6D 3C 6B                  dw      BLK, FETCH, ONE         // blk @ 1
1304+ 76F9 AA 6C
1305+ 76FB 1F 6F                        dw      GREATER                 // > if
1306+ 76FD                                                              // if
1307+ 76FD E3 63                        dw      ZBRANCH
1308+ 76FF 28 00                        dw      Nul_Else_1 - $
1309+ 7701 AA 6C A1 6D                  dw          ONE, BLK, PLUSSTORE //      1 blk +!
1309+ 7705 19 6B
1310+ 7707 A2 6C AA 6D                  dw          ZERO, TO_IN, STORE  //      0 >in !
1310+ 770B 49 6B
1311+ 770D A1 6D 3C 6B                  dw          BLK, FETCH          //      blk @
1312+ 7711 EE 6C                        dw          BSCR                //      b/scr
1313+ 7713 F6 69                        dw          ONE_SUBTRACT        //      1 -
1314+ 7715 B3 68                        dw          AND_OP              //      and  ( this is tricky )
1315+ 7717 86 69                        dw          ZEQUAL              //      0=
1316+ 7719                                                              //      if
1317+ 7719 E3 63                        dw          ZBRANCH
1318+ 771B 08 00                        dw          Nul_Endif_2 - $
1319+ 771D 7D 70                        dw              QEXEC           //          ?exec
1320+ 771F 65 69 74 6A                  dw              R_TO, DROP      //          r> drop
1321+ 7723              Nul_Endif_2:                                    //      endif
1322+ 7723 CC 63                        dw      BRANCH
1323+ 7725 06 00                        dw      Nul_Endif_1 - $
1324+ 7727              Nul_Else_1:                                     // else
1325+ 7727 65 69 74 6A                  dw          R_TO, DROP          //      r> drop
1326+ 772B              Nul_Endif_1:                                    // endif
1327+ 772B 23 69                        dw      EXIT                    // ;
1328+ 772D
1329+ 772D              //  ______________________________________________________________________
1330+ 772D              //
1331+ 772D              // ?stack       --
1332+ 772D              // Raise error #1 if stack is empty and you pop it
1333+ 772D              // Raise error #7 if stack is full.
1334+ 772D              // This means SP must always stay between HERE and FFFF
1335+ 772D              // For 128K BANK paging purpose SP must be <= BFE0 and 50 words room
1336+ 772D              // for Next 8K MMU paging this is $DOE8
1337+ 772D                              Colon_Def QSTACK, "?STACK", is_normal
1337+ 772D             >                New_Def  QSTACK, "?STACK", Enter_Ptr, is_normal ; ok
1337+ 772D             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1337+ 772D             >
1337+ 772D             >                // dummy db directives used to calculate length of namec
1337+ 772D 3F 53 54 41 >                db      "?STACK"
1337+ 7731 43 4B       >
1337+ 7733             >len_NFA         defl    $ - temp_NFA
1337+ 7733             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1337+ 772D             >
1337+ 772D 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1337+ 772E 3F 53 54 41 >                db      "?STACK"               // name string in 7-bit ascii, but
1337+ 7732 43 4B       >
1337+ 7734             >                org     $-1                 // alter last byte of Name just above to set
1337+ 7733 CB          >                db      {b $} | END_BIT     // msb as name end
1337+ 7734             >
1337+ 7734 EF 76       >                dw      last_NFA            // Link to previous definition Name
1337+ 7736             >QSTACK:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1337+ 7736 27 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
1337+ 7738             >                else
1337+ 7738 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
1337+ 7738             >                endif           ; ok        // for other definitions it "points" the correct handler
1337+ 7738             >                // Use of "; ok" to suppress "warning[fwdref]"
1337+ 7738             >
1337+ 7738             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1338+ 7738 EB 68                        dw      SPFETCH                 // sp@
1339+ 773A 24 6D 3C 6B                  dw      S0, FETCH               // s0 @
1340+ 773E 9C 6A EF 6E                  dw      SWAP, ULESS             // swap u<
1341+ 7742 AA 6C 4B 70                  dw      ONE, QERROR             // 1 ?error
1342+ 7746 81 6E                        dw      HERE                    // here
1343+ 7748 24 6D 3C 6B                  dw      S0, FETCH, LESS         // s0 @ <
1343+ 774C 03 6F
1344+ 774E                                                              // if
1345+ 774E E3 63                        dw      ZBRANCH
1346+ 7750 14 00                        dw      QStack_Endif - $
1347+ 7752 EB 68                        dw          SPFETCH             //      sp@
1348+ 7754 81 6E A9 63                  dw          HERE, LIT, 128      //      here 128
1348+ 7758 80 00
1349+ 775A C9 69 EF 6E                  dw          PLUS, ULESS         //      plus u<
1350+ 775E A9 63 07 00                  dw          LIT, 7, QERROR      //      7 Cerror
1350+ 7762 4B 70
1351+ 7764              QStack_Endif:                                   // endif
1352+ 7764 23 69                        dw      EXIT                    // ;
1353+ 7766
1354+ 7766
# file closed: C:\Zx\CSpect\Projects\vForth15_INDIRECT/source/L1.asm
 110  7766                              include "L2.asm"
# file opened: C:\Zx\CSpect\Projects\vForth15_INDIRECT/source/L2.asm
   1+ 7766              //  ______________________________________________________________________
   2+ 7766              //
   3+ 7766              //  L2.asm
   4+ 7766              //
   5+ 7766              //  Level-2
   6+ 7766              //  the Forth interpreter, vocabulary, cold/warm start and quit from Forth.
   7+ 7766              //  ______________________________________________________________________
   8+ 7766
   9+ 7766
  10+ 7766              //  ______________________________________________________________________
  11+ 7766              //
  12+ 7766              // interpret    --
  13+ 7766              // This is the text interpreter.
  14+ 7766              // It executes or compiles, depending on STATE, the text coming from
  15+ 7766              // current input stream.
  16+ 7766              // If the word search fails after parsing CONTEXT and CURRENT vocabulary,
  17+ 7766              // the word is interpreted as numeric and converted, using current BASE,
  18+ 7766              // leaving on top of stack a single or double precision number, depending
  19+ 7766              // on the presence of a decimal point.
  20+ 7766              // If the number conversion fails, the terminal is notified with ? followed
  21+ 7766              // by the offending word.
  22+ 7766                              Colon_Def INTERPRET, "INTERPRET", is_normal
  22+ 7766             >                New_Def  INTERPRET, "INTERPRET", Enter_Ptr, is_normal ; ok
  22+ 7766             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  22+ 7766             >
  22+ 7766             >                // dummy db directives used to calculate length of namec
  22+ 7766 49 4E 54 45 >                db      "INTERPRET"
  22+ 776A 52 50 52 45 >
  22+ 776E 54          >
  22+ 776F             >len_NFA         defl    $ - temp_NFA
  22+ 776F             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  22+ 7766             >
  22+ 7766 89          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  22+ 7767 49 4E 54 45 >                db      "INTERPRET"               // name string in 7-bit ascii, but
  22+ 776B 52 50 52 45 >
  22+ 776F 54          >
  22+ 7770             >                org     $-1                 // alter last byte of Name just above to set
  22+ 776F D4          >                db      {b $} | END_BIT     // msb as name end
  22+ 7770             >
  22+ 7770 2D 77       >                dw      last_NFA            // Link to previous definition Name
  22+ 7772             >INTERPRET:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
  22+ 7772 27 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
  22+ 7774             >                else
  22+ 7774 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
  22+ 7774             >                endif           ; ok        // for other definitions it "points" the correct handler
  22+ 7774             >                // Use of "; ok" to suppress "warning[fwdref]"
  22+ 7774             >
  22+ 7774             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  23+ 7774
  24+ 7774              Interpret_Begin:                                        // begin
  25+ 7774 84 75                        dw          LFIND                       //      -find
  26+ 7776                                                                      //      if
  27+ 7776 E3 63                        dw          ZBRANCH
  28+ 7778 1A 00                        dw          Interpret_Else_1 - $
  29+ 777A ED 6D 3C 6B                  dw              STATE, FETCH, LESS      //          state @ <
  29+ 777E 03 6F
  30+ 7780                                                                      //          if
  31+ 7780 E3 63                        dw              ZBRANCH
  32+ 7782 08 00                        dw              Interpret_Else_2 - $
  33+ 7784 FB 70                        dw                  COMPILE_XT          //              compile,
  34+ 7786                                                                      //          else
  35+ 7786 CC 63                        dw              BRANCH
  36+ 7788 06 00                        dw              Interpret_Endif_2 - $
  37+ 778A              Interpret_Else_2:
  38+ 778A BE 63 4F 6C                  dw                  EXECUTE, NOOP       //              execute nooop
  39+ 778E              Interpret_Endif_2:                                      //          endif
  40+ 778E                                                                      //      else
  41+ 778E CC 63                        dw          BRANCH
  42+ 7790 1A 00                        dw          Interpret_Endif_1 - $
  43+ 7792              Interpret_Else_1:
  44+ 7792 81 6E 3E 75                  dw              HERE, NUMBER            //          here number
  45+ 7796 00 6E 3C 6B                  dw              DPL, FETCH, ONE_PLUS    //          dpl @ 1+
  45+ 779A EA 69
  46+ 779C                                                                      //          if
  47+ 779C E3 63                        dw              ZBRANCH
  48+ 779E 08 00                        dw              Interpret_Else_3 - $
  49+ 77A0              //              dw                  NMODE, FETCH        //              nmode @
  50+ 77A0              //                                                      //              if
  51+ 77A0              //              dw                  ZBRANCH
  52+ 77A0              //              dw                  Interpret_Endif_4 - $
  53+ 77A0              //              dw                      ONE, ZERO       //                  1 0
  54+ 77A0              //              dw                      TWO_DROP        //                  2drop
  55+ 77A0              //Interpret_Endif_4:                                      //              endif
  56+ 77A0 CC 76                        dw                  DLITERAL            //              [compile] dliteral
  57+ 77A2                                                                      //          else
  58+ 77A2 CC 63                        dw              BRANCH
  59+ 77A4 06 00                        dw              Interpret_Endif_3 - $
  60+ 77A6              Interpret_Else_3:
  61+ 77A6 74 6A                        dw                  DROP                //              drop
  62+ 77A8 AF 76                        dw                  LITERAL             //              [compile]  literal
  63+ 77AA              Interpret_Endif_3:                                      //          endif
  64+ 77AA              Interpret_Endif_1:                                      //      endif
  65+ 77AA 36 77                        dw          QSTACK                      //      ?stack
  66+ 77AC 0C 67                        dw          QTERMINAL                   //      ?terminal
  67+ 77AE                                                                      //      if
  68+ 77AE E3 63                        dw          ZBRANCH
  69+ 77B0 04 00                        dw          Interpret_Endif_5 - $
  70+ 77B2 AC 75                        dw              CABORT                  //          (abort)
  71+ 77B4              Interpret_Endif_5:                                      //      endif
  72+ 77B4 CC 63                        dw      BRANCH
  73+ 77B6 BE FF                        dw      Interpret_Begin - $
  74+ 77B8 23 69                        dw      EXIT                            // ;
  75+ 77BA
  76+ 77BA              //  ______________________________________________________________________
  77+ 77BA              //
  78+ 77BA              // vocabulary   -- cccc     ( compile time )
  79+ 77BA              // Defining word used in the form   VOCABULARY cccc
  80+ 77BA              // creates the word  cccc  that gives the name to the vocabulary.
  81+ 77BA              // Giving  cccc  makes the vocabulary CONTEXT so its words are executed first
  82+ 77BA              // Giving  cccc DEFINITIONS makes  the vocabulary  CURRENT
  83+ 77BA              // so new definitions can be inserted in that vocabulary.
  84+ 77BA                              Colon_Def VOCABULARY, "VOCABULARY", is_normal
  84+ 77BA             >                New_Def  VOCABULARY, "VOCABULARY", Enter_Ptr, is_normal ; ok
  84+ 77BA             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  84+ 77BA             >
  84+ 77BA             >                // dummy db directives used to calculate length of namec
  84+ 77BA 56 4F 43 41 >                db      "VOCABULARY"
  84+ 77BE 42 55 4C 41 >
  84+ 77C2 52 59       >
  84+ 77C4             >len_NFA         defl    $ - temp_NFA
  84+ 77C4             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  84+ 77BA             >
  84+ 77BA 8A          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  84+ 77BB 56 4F 43 41 >                db      "VOCABULARY"               // name string in 7-bit ascii, but
  84+ 77BF 42 55 4C 41 >
  84+ 77C3 52 59       >
  84+ 77C5             >                org     $-1                 // alter last byte of Name just above to set
  84+ 77C4 D9          >                db      {b $} | END_BIT     // msb as name end
  84+ 77C5             >
  84+ 77C5 66 77       >                dw      last_NFA            // Link to previous definition Name
  84+ 77C7             >VOCABULARY:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
  84+ 77C7 27 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
  84+ 77C9             >                else
  84+ 77C9 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
  84+ 77C9             >                endif           ; ok        // for other definitions it "points" the correct handler
  84+ 77C9             >                // Use of "; ok" to suppress "warning[fwdref]"
  84+ 77C9             >
  84+ 77C9             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  85+ 77C9
  86+ 77C9 AE 71                        dw      CBUILDS
  87+ 77CB
  88+ 77CB A9 63 81 A0                  dw      LIT, $A081, COMMA       // $81A0 ,
  88+ 77CF 9D 6E
  89+ 77D1 E2 6D 3C 6B                  dw      CURRENT, FETCH          // current @
  90+ 77D5 1C 6A 9D 6E                  dw      CELL_MINUS, COMMA       // cell- ,
  91+ 77D9 81 6E                        dw      HERE                    // here
  92+ 77DB 6E 6D 3C 6B                  dw      VOC_LINK, FETCH, COMMA  // voc-link @ ,
  92+ 77DF 9D 6E
  93+ 77E1 6E 6D 49 6B                  dw      VOC_LINK, STORE         // voc-link !
  94+ 77E5
  95+ 77E5 BE 71                        dw      DOES_TO                 // does>
  96+ 77E7              Vocabulary_Does:
  97+ 77E7 12 6A                        dw      CELL_PLUS               // cell+
  98+ 77E9 D5 6D 49 6B                  dw      CONTEXT, STORE          // context !
  99+ 77ED 23 69                        dw      EXIT                    // ;
 100+ 77EF
 101+ 77EF              //  ______________________________________________________________________
 102+ 77EF              //
 103+ 77EF              // forth        --
 104+ 77EF              // Name of the first vocabulary.
 105+ 77EF              // It makes FORTH the CONTEXT vocabulary.
 106+ 77EF              // Until new user vocabulary are defined, new colon-definitions becomes
 107+ 77EF              // part of FORTH. It is immediate, so it will executed during the creation
 108+ 77EF              // of a colon definition to be able to select the vocabulary.
 109+ 77EF
 110+ 77EF                              New_Def FORTH, "FORTH", Does_Ptr, is_immediate
 110+ 77EF             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 110+ 77EF             >
 110+ 77EF             >                // dummy db directives used to calculate length of namec
 110+ 77EF 46 4F 52 54 >                db      "FORTH"
 110+ 77F3 48          >
 110+ 77F4             >len_NFA         defl    $ - temp_NFA
 110+ 77F4             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 110+ 77EF             >
 110+ 77EF C5          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 110+ 77F0 46 4F 52 54 >                db      "FORTH"               // name string in 7-bit ascii, but
 110+ 77F4 48          >
 110+ 77F5             >                org     $-1                 // alter last byte of Name just above to set
 110+ 77F4 C8          >                db      {b $} | END_BIT     // msb as name end
 110+ 77F5             >
 110+ 77F5 BA 77       >                dw      last_NFA            // Link to previous definition Name
 110+ 77F7             >FORTH:          if Does_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 110+ 77F7 CA 71       >                dw      Does_Ptr ; ok        // for primitive definitions  actual code
 110+ 77F9             >                else
 110+ 77F9 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 110+ 77F9             >                endif           ; ok        // for other definitions it "points" the correct handler
 110+ 77F9             >                // Use of "; ok" to suppress "warning[fwdref]"
 110+ 77F9             >
 110+ 77F9             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 111+ 77F9 E7 77                        dw      Vocabulary_Does
 112+ 77FB 81 A0                        db      $81, $A0
 113+ 77FD              Forth_Latest_Ptr:
 114+ 77FD 25 87                        dw      Here_Dictionary // Fence_Word // Latest_Definition
 115+ 77FF              Voclink_Ptr:
 116+ 77FF 00 00                        dw      0
 117+ 7801              // Any new vocabulary is structured as follow:
 118+ 7801              // PFA+0 points to DOES> part of VOCABULARY to perform CELL+ CONTEXT !
 119+ 7801              // PFA+2 is 81,A0 i.e. a null-word used as LATEST in the new vocabulary
 120+ 7801              // PFA+4 always contains the LATEST word of this VOCABULARY.
 121+ 7801              //       at creations it points to the null-word of its parent vocabulary
 122+ 7801              //       that is normally FORTH, For example ASSEMBLER points FORTH's null-word
 123+ 7801              // PFA+6 is the pointer that builds up the vocabulary linked list.
 124+ 7801              //       FORTH has 0 here to signal the end of the list and user's variable
 125+ 7801              //       VOC-LINK points to PFA+6 of the newest vocabulary created.
 126+ 7801              //       While FORTH is the only vocabulary, VOC-LINK points to FORTH's PFA+6
 127+ 7801              //       When ASSEMBLER is created, its PFA+6 points to FORTH's PFA+6, and so on
 128+ 7801
 129+ 7801              //  ______________________________________________________________________
 130+ 7801              //
 131+ 7801              // definitions  --
 132+ 7801              // Used in the form  cccc DEFINITIONS
 133+ 7801              // set the CURRENT vocabulary at CONTEXT to insert new definitions in
 134+ 7801              // vocabulary cccc.
 135+ 7801                              Colon_Def DEFINITIONS, "DEFINITIONS", is_normal
 135+ 7801             >                New_Def  DEFINITIONS, "DEFINITIONS", Enter_Ptr, is_normal ; ok
 135+ 7801             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 135+ 7801             >
 135+ 7801             >                // dummy db directives used to calculate length of namec
 135+ 7801 44 45 46 49 >                db      "DEFINITIONS"
 135+ 7805 4E 49 54 49 >
 135+ 7809 4F 4E 53    >
 135+ 780C             >len_NFA         defl    $ - temp_NFA
 135+ 780C             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 135+ 7801             >
 135+ 7801 8B          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 135+ 7802 44 45 46 49 >                db      "DEFINITIONS"               // name string in 7-bit ascii, but
 135+ 7806 4E 49 54 49 >
 135+ 780A 4F 4E 53    >
 135+ 780D             >                org     $-1                 // alter last byte of Name just above to set
 135+ 780C D3          >                db      {b $} | END_BIT     // msb as name end
 135+ 780D             >
 135+ 780D EF 77       >                dw      last_NFA            // Link to previous definition Name
 135+ 780F             >DEFINITIONS:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 135+ 780F 27 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 135+ 7811             >                else
 135+ 7811 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 135+ 7811             >                endif           ; ok        // for other definitions it "points" the correct handler
 135+ 7811             >                // Use of "; ok" to suppress "warning[fwdref]"
 135+ 7811             >
 135+ 7811             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 136+ 7811 D5 6D 3C 6B                  dw      CONTEXT, FETCH          // context @
 137+ 7815 E2 6D 49 6B                  dw      CURRENT, STORE          // current !
 138+ 7819 23 69                        dw      EXIT                    // ;
 139+ 781B
 140+ 781B              //  ______________________________________________________________________
 141+ 781B              //
 142+ 781B              // (            -- cccc )
 143+ 781B              // the following text is interpreted as a comment until a closing )
 144+ 781B                              Colon_Def COMMENT_BRAKET, "(", is_immediate
 144+ 781B             >                New_Def  COMMENT_BRAKET, "(", Enter_Ptr, is_immediate ; ok
 144+ 781B             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 144+ 781B             >
 144+ 781B             >                // dummy db directives used to calculate length of namec
 144+ 781B 28          >                db      "("
 144+ 781C             >len_NFA         defl    $ - temp_NFA
 144+ 781C             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 144+ 781B             >
 144+ 781B C1          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 144+ 781C 28          >                db      "("               // name string in 7-bit ascii, but
 144+ 781D             >                org     $-1                 // alter last byte of Name just above to set
 144+ 781C A8          >                db      {b $} | END_BIT     // msb as name end
 144+ 781D             >
 144+ 781D 01 78       >                dw      last_NFA            // Link to previous definition Name
 144+ 781F             >COMMENT_BRAKET:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 144+ 781F 27 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 144+ 7821             >                else
 144+ 7821 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 144+ 7821             >                endif           ; ok        // for other definitions it "points" the correct handler
 144+ 7821             >                // Use of "; ok" to suppress "warning[fwdref]"
 144+ 7821             >
 144+ 7821             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 145+ 7821 A9 63 29 00                  dw      LIT, ")"                // [char] )
 146+ 7825 D2 73 74 6A                  dw      WORD, DROP              // word drop
 147+ 7829 23 69                        dw      EXIT                    // ;
 148+ 782B
 149+ 782B              //  ______________________________________________________________________
 150+ 782B              //
 151+ 782B              // quit         --
 152+ 782B              // \ Erase the return-stack, stop any compilation and give controlo to the console. No message is issued.
 153+ 782B                              Colon_Def QUIT, "QUIT", is_normal
 153+ 782B             >                New_Def  QUIT, "QUIT", Enter_Ptr, is_normal ; ok
 153+ 782B             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 153+ 782B             >
 153+ 782B             >                // dummy db directives used to calculate length of namec
 153+ 782B 51 55 49 54 >                db      "QUIT"
 153+ 782F             >len_NFA         defl    $ - temp_NFA
 153+ 782F             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 153+ 782B             >
 153+ 782B 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 153+ 782C 51 55 49 54 >                db      "QUIT"               // name string in 7-bit ascii, but
 153+ 7830             >                org     $-1                 // alter last byte of Name just above to set
 153+ 782F D4          >                db      {b $} | END_BIT     // msb as name end
 153+ 7830             >
 153+ 7830 1B 78       >                dw      last_NFA            // Link to previous definition Name
 153+ 7832             >QUIT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 153+ 7832 27 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 153+ 7834             >                else
 153+ 7834 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 153+ 7834             >                endif           ; ok        // for other definitions it "points" the correct handler
 153+ 7834             >                // Use of "; ok" to suppress "warning[fwdref]"
 153+ 7834             >
 153+ 7834             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 154+ 7834
 155+ 7834 58 6E 3C 6B                  dw      SOURCE_ID, FETCH        // source-id @
 156+ 7838 AF 67 74 6A                  dw      F_CLOSE, DROP           // f_close drop
 157+ 783C A2 6C 58 6E                  dw      ZERO, SOURCE_ID, STORE  // 0 source-id !
 157+ 7840 49 6B
 158+ 7842 A2 6C A1 6D                  dw      ZERO, BLK, STORE        // 0 blk !
 158+ 7846 49 6B
 159+ 7848 07 71                        dw      SQUARED_OPEN            // [compile] [
 160+ 784A                                                              // begin
 161+ 784A              Quit_Begin:
 162+ 784A 2C 6D 3C 6B                  dw      R0, FETCH, RPSTORE      //      r0 @ rp!
 162+ 784E 14 69
 163+ 7850 02 68                        dw      CR                      //      cr
 164+ 7852 52 73                        dw      QUERY                   //      query
 165+ 7854              Next_Breakpoint_1:
 166+ 7854 72 77                        dw      INTERPRET               //      interpret
 167+ 7856 ED 6D 3C 6B                  dw      STATE, FETCH, ZEQUAL    //      state @ 0=
 167+ 785A 86 69
 168+ 785C                                                              //      if
 169+ 785C E3 63                        dw      ZBRANCH
 170+ 785E 07 00                        dw      Quit_Endif - $
 171+ 7860 21 74                        dw          C_DOT_QUOTE
 172+ 7862 02 6F 6B                     db          2, "ok"             //          .( ok)
 173+ 7865              Quit_Endif:                                     //      else
 174+ 7865                                                              // again
 175+ 7865 CC 63                        dw      BRANCH
 176+ 7867 E3 FF                        dw      Quit_Begin - $
 177+ 7869 23 69                        dw      EXIT                    // ;
 178+ 786B
 179+ 786B              //  ______________________________________________________________________
 180+ 786B              //
 181+ 786B              // abort        --
 182+ 786B                              Colon_Def ABORT, "ABORT", is_normal
 182+ 786B             >                New_Def  ABORT, "ABORT", Enter_Ptr, is_normal ; ok
 182+ 786B             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 182+ 786B             >
 182+ 786B             >                // dummy db directives used to calculate length of namec
 182+ 786B 41 42 4F 52 >                db      "ABORT"
 182+ 786F 54          >
 182+ 7870             >len_NFA         defl    $ - temp_NFA
 182+ 7870             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 182+ 786B             >
 182+ 786B 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 182+ 786C 41 42 4F 52 >                db      "ABORT"               // name string in 7-bit ascii, but
 182+ 7870 54          >
 182+ 7871             >                org     $-1                 // alter last byte of Name just above to set
 182+ 7870 D4          >                db      {b $} | END_BIT     // msb as name end
 182+ 7871             >
 182+ 7871 2B 78       >                dw      last_NFA            // Link to previous definition Name
 182+ 7873             >ABORT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 182+ 7873 27 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 182+ 7875             >                else
 182+ 7875 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 182+ 7875             >                endif           ; ok        // for other definitions it "points" the correct handler
 182+ 7875             >                // Use of "; ok" to suppress "warning[fwdref]"
 182+ 7875             >
 182+ 7875             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 183+ 7875 24 6D 3C 6B                  dw      S0, FETCH, SPSTORE      // s0 @ sp!
 183+ 7879 FA 68
 184+ 787B 6A 71                        dw      DECIMAL                 // decimal
 185+ 787D F7 77                        dw      FORTH                   // [compile] forth
 186+ 787F 0F 78                        dw      DEFINITIONS             // definitions
 187+ 7881              Autoexec_Ptr:
 188+ 7881 3F 85                        dw      AUTOEXEC                // autoexec, patched to noop
 189+ 7883 32 78                        dw      QUIT                    // quit
 190+ 7885 23 69                        dw      EXIT                    // ;
 191+ 7887
 192+ 7887              //  ______________________________________________________________________
 193+ 7887              //
 194+ 7887              // warm         --
 195+ 7887                              Colon_Def WARM, "WARM", is_normal
 195+ 7887             >                New_Def  WARM, "WARM", Enter_Ptr, is_normal ; ok
 195+ 7887             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 195+ 7887             >
 195+ 7887             >                // dummy db directives used to calculate length of namec
 195+ 7887 57 41 52 4D >                db      "WARM"
 195+ 788B             >len_NFA         defl    $ - temp_NFA
 195+ 788B             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 195+ 7887             >
 195+ 7887 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 195+ 7888 57 41 52 4D >                db      "WARM"               // name string in 7-bit ascii, but
 195+ 788C             >                org     $-1                 // alter last byte of Name just above to set
 195+ 788B CD          >                db      {b $} | END_BIT     // msb as name end
 195+ 788C             >
 195+ 788C 6B 78       >                dw      last_NFA            // Link to previous definition Name
 195+ 788E             >WARM:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 195+ 788E 27 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 195+ 7890             >                else
 195+ 7890 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 195+ 7890             >                endif           ; ok        // for other definitions it "points" the correct handler
 195+ 7890             >                // Use of "; ok" to suppress "warning[fwdref]"
 195+ 7890             >
 195+ 7890             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 196+ 7890 15 7C                        dw      BLK_INIT                // blk-init
 197+ 7892 F3 83                        dw      SPLASH                  // splash
 198+ 7894 A9 63 07 00                  dw      LIT, 7, EMIT            // 7 emit
 198+ 7898 75 6F
 199+ 789A 73 78                        dw      ABORT                   // abort
 200+ 789C 23 69                        dw      EXIT                    // exit
 201+ 789E
 202+ 789E              //  ______________________________________________________________________
 203+ 789E              //
 204+ 789E              // cold         --
 205+ 789E                              Colon_Def COLD, "COLD", is_normal
 205+ 789E             >                New_Def  COLD, "COLD", Enter_Ptr, is_normal ; ok
 205+ 789E             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 205+ 789E             >
 205+ 789E             >                // dummy db directives used to calculate length of namec
 205+ 789E 43 4F 4C 44 >                db      "COLD"
 205+ 78A2             >len_NFA         defl    $ - temp_NFA
 205+ 78A2             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 205+ 789E             >
 205+ 789E 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 205+ 789F 43 4F 4C 44 >                db      "COLD"               // name string in 7-bit ascii, but
 205+ 78A3             >                org     $-1                 // alter last byte of Name just above to set
 205+ 78A2 C4          >                db      {b $} | END_BIT     // msb as name end
 205+ 78A3             >
 205+ 78A3 87 78       >                dw      last_NFA            // Link to previous definition Name
 205+ 78A5             >COLD:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 205+ 78A5 27 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 205+ 78A7             >                else
 205+ 78A7 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 205+ 78A7             >                endif           ; ok        // for other definitions it "points" the correct handler
 205+ 78A7             >                // Use of "; ok" to suppress "warning[fwdref]"
 205+ 78A7             >
 205+ 78A7             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 206+ 78A7 A9 63 78 63                  dw      LIT, S0_origin          // [ hex $12 +origin ] Literal
 207+ 78AB A9 63 94 63                  dw      LIT, USER_Pointer       // [ hex $3E +origin ] literal
 208+ 78AF 3C 6B                        dw      FETCH                   // @
 209+ 78B1 A9 63 06 00                  dw      LIT, 6, PLUS            // 6 +
 209+ 78B5 C9 69
 210+ 78B7 A9 63 14 00                  dw      LIT, 20                 // 20
 211+ 78BB 11 68                        dw      CMOVE
 212+ 78BD A9 63 72 63                  dw      LIT, Latest_origin      // [ hex 0C +origin ] literal
 213+ 78C1 3C 6B                        dw      FETCH                   // @
 214+ 78C3 A9 63 FD 77                  dw      LIT, Forth_Latest_Ptr   // [ ' forth >body 4 + ] Literal
 215+ 78C7 49 6B                        dw      STORE                   // !
 216+ 78C9 A2 6C 98 6D                  dw      ZERO, NMODE, STORE      // 0 nmode !
 216+ 78CD 49 6B
 217+ 78CF 79 6D 3C 6B                  dw      FIRST, FETCH, DUP       // first @ dup
 217+ 78D3 A9 6A
 218+ 78D5 2C 6E 49 6B                  dw      USE, STORE              // use !
 219+ 78D9 36 6E 49 6B                  dw      PREV, STORE             // prev !
 220+ 78DD A9 63 04 00                  dw      LIT, 4, PLACE, STORE    // 4 place !
 220+ 78E1 49 6E 49 6B
 221+ 78E5              //              dw      LIT, 8
 222+ 78E5              //              dw      LIT, FLAGS2, CSTORE     // 8 5C6A c!
 223+ 78E5 B2 6C 77 6E                  dw      TWO, HP, STORE          // 2 hp !
 223+ 78E9 49 6B
 224+ 78EB 8E 78        Warm_Start:     dw      WARM
 225+ 78ED A5 78        Cold_Start:     dw      COLD
 226+ 78EF 23 69                        dw      EXIT
 227+ 78F1
 228+ 78F1              //  ______________________________________________________________________
 229+ 78F1              WarmRoutine:
 230+ 78F1              ColdRoutine:
 231+ 78F1 DD 21 98 63                  ld      ix, Next_Ptr
 232+ 78F5 D9                           exx
 233+ 78F6 E5                           push    hl
 234+ 78F7 D9                           exx
 235+ 78F8
 236+ 78F8 ED 73 6E 63                  ld      (SP_Basic), sp
 237+ 78FC ED 7B 78 63                  ld      sp, (S0_origin)
 238+ 7900              //              nop
 239+ 7900 2A 7A 63                     ld      hl, (R0_origin)
 240+ 7903              //              nop
 241+ 7903                              ldrphl
 241+ 7903 22 96 63    >                ld      (RP_Pointer),hl
 242+ 7906 01 EB 78                     ld      bc, Warm_Start
 243+ 7909 38 02                        jr      c, Warm_Skip
 244+ 790B 03                           inc     bc
 245+ 790C 03                           inc     bc
 246+ 790D              Warm_Skip:
 247+ 790D                              next
 247+ 790D DD E9       >                jp      (ix)
 248+ 790F
 249+ 790F              //  ______________________________________________________________________
 250+ 790F              //
 251+ 790F              // basic        --
 252+ 790F                              New_Def BASIC, "BASIC", is_code, is_normal
 252+ 790F             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 252+ 790F             >
 252+ 790F             >                // dummy db directives used to calculate length of namec
 252+ 790F 42 41 53 49 >                db      "BASIC"
 252+ 7913 43          >
 252+ 7914             >len_NFA         defl    $ - temp_NFA
 252+ 7914             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 252+ 790F             >
 252+ 790F 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 252+ 7910 42 41 53 49 >                db      "BASIC"               // name string in 7-bit ascii, but
 252+ 7914 43          >
 252+ 7915             >                org     $-1                 // alter last byte of Name just above to set
 252+ 7914 C3          >                db      {b $} | END_BIT     // msb as name end
 252+ 7915             >
 252+ 7915 9E 78       >                dw      last_NFA            // Link to previous definition Name
 252+ 7917             >BASIC:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 252+ 7917 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
 252+ 7917             >                else
 252+ 7917 19 79       >                dw      $ + 2   ; ok        // is pointed by CFA
 252+ 7919             >                endif           ; ok        // for other definitions it "points" the correct handler
 252+ 7919             >                // Use of "; ok" to suppress "warning[fwdref]"
 252+ 7919             >
 252+ 7919             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 253+ 7919 C1                           pop     bc
 254+ 791A 21 00 00                     ld      hl, 0
 255+ 791D 39                           add     hl, sp
 256+ 791E ED 7B 6E 63                  ld      sp, (SP_Basic)
 257+ 7922              //              nop
 258+ 7922 22 6E 63                     ld      (SP_Basic),hl
 259+ 7925 D9                           exx
 260+ 7926 E1                           pop     hl
 261+ 7927 D9                           exx
 262+ 7928 C9                           ret     // to Basic
 263+ 7929
 264+ 7929              //  ______________________________________________________________________
 265+ 7929              //
 266+ 7929              // +-           n1 n2 -- n3
 267+ 7929              // leaves n1 with the sign of n2 as n3.
 268+ 7929                              Colon_Def PLUS_MINUS, "+-", is_normal
 268+ 7929             >                New_Def  PLUS_MINUS, "+-", Enter_Ptr, is_normal ; ok
 268+ 7929             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 268+ 7929             >
 268+ 7929             >                // dummy db directives used to calculate length of namec
 268+ 7929 2B 2D       >                db      "+-"
 268+ 792B             >len_NFA         defl    $ - temp_NFA
 268+ 792B             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 268+ 7929             >
 268+ 7929 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 268+ 792A 2B 2D       >                db      "+-"               // name string in 7-bit ascii, but
 268+ 792C             >                org     $-1                 // alter last byte of Name just above to set
 268+ 792B AD          >                db      {b $} | END_BIT     // msb as name end
 268+ 792C             >
 268+ 792C 0F 79       >                dw      last_NFA            // Link to previous definition Name
 268+ 792E             >PLUS_MINUS:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 268+ 792E 27 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 268+ 7930             >                else
 268+ 7930 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 268+ 7930             >                endif           ; ok        // for other definitions it "points" the correct handler
 268+ 7930             >                // Use of "; ok" to suppress "warning[fwdref]"
 268+ 7930             >
 268+ 7930             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 269+ 7930 A1 69                        dw      ZLESS                   // 0<
 270+ 7932                                                              // if
 271+ 7932 E3 63                        dw      ZBRANCH
 272+ 7934 04 00                        dw      Plus_Minus_Endif - $
 273+ 7936 34 6A                        dw          MINUS               //      minus
 274+ 7938              Plus_Minus_Endif:                               // endif
 275+ 7938 23 69                        dw      EXIT                    // ;
 276+ 793A
 277+ 793A              //  ______________________________________________________________________
 278+ 793A              //
 279+ 793A              // d+-          d1 n -- d2
 280+ 793A              // leaves d1 with the sign of n as d2.
 281+ 793A                              Colon_Def DPLUS_MINUS, "D+-", is_normal
 281+ 793A             >                New_Def  DPLUS_MINUS, "D+-", Enter_Ptr, is_normal ; ok
 281+ 793A             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 281+ 793A             >
 281+ 793A             >                // dummy db directives used to calculate length of namec
 281+ 793A 44 2B 2D    >                db      "D+-"
 281+ 793D             >len_NFA         defl    $ - temp_NFA
 281+ 793D             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 281+ 793A             >
 281+ 793A 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 281+ 793B 44 2B 2D    >                db      "D+-"               // name string in 7-bit ascii, but
 281+ 793E             >                org     $-1                 // alter last byte of Name just above to set
 281+ 793D AD          >                db      {b $} | END_BIT     // msb as name end
 281+ 793E             >
 281+ 793E 29 79       >                dw      last_NFA            // Link to previous definition Name
 281+ 7940             >DPLUS_MINUS:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 281+ 7940 27 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 281+ 7942             >                else
 281+ 7942 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 281+ 7942             >                endif           ; ok        // for other definitions it "points" the correct handler
 281+ 7942             >                // Use of "; ok" to suppress "warning[fwdref]"
 281+ 7942             >
 281+ 7942             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 282+ 7942 A1 69                        dw      ZLESS                   // 0<
 283+ 7944                                                              // if
 284+ 7944 E3 63                        dw      ZBRANCH
 285+ 7946 04 00                        dw      DPlus_Minus_Endif - $
 286+ 7948 4A 6A                        dw          DMINUS              //      dminus
 287+ 794A              DPlus_Minus_Endif:                              // endif
 288+ 794A 23 69                        dw      EXIT                    // ;
 289+ 794C
 290+ 794C              //  ______________________________________________________________________
 291+ 794C              //
 292+ 794C              // abs          n1 -- n2
 293+ 794C                              Colon_Def ABS_OP, "ABS", is_normal
 293+ 794C             >                New_Def  ABS_OP, "ABS", Enter_Ptr, is_normal ; ok
 293+ 794C             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 293+ 794C             >
 293+ 794C             >                // dummy db directives used to calculate length of namec
 293+ 794C 41 42 53    >                db      "ABS"
 293+ 794F             >len_NFA         defl    $ - temp_NFA
 293+ 794F             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 293+ 794C             >
 293+ 794C 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 293+ 794D 41 42 53    >                db      "ABS"               // name string in 7-bit ascii, but
 293+ 7950             >                org     $-1                 // alter last byte of Name just above to set
 293+ 794F D3          >                db      {b $} | END_BIT     // msb as name end
 293+ 7950             >
 293+ 7950 3A 79       >                dw      last_NFA            // Link to previous definition Name
 293+ 7952             >ABS_OP:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 293+ 7952 27 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 293+ 7954             >                else
 293+ 7954 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 293+ 7954             >                endif           ; ok        // for other definitions it "points" the correct handler
 293+ 7954             >                // Use of "; ok" to suppress "warning[fwdref]"
 293+ 7954             >
 293+ 7954             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 294+ 7954 A9 6A                        dw      DUP                     // dup
 295+ 7956 2E 79                        dw      PLUS_MINUS              // +-
 296+ 7958 23 69                        dw      EXIT                    // ;
 297+ 795A
 298+ 795A              //  ______________________________________________________________________
 299+ 795A              //
 300+ 795A              // dabs         d1 -- d2
 301+ 795A                              Colon_Def DABS, "DABS", is_normal
 301+ 795A             >                New_Def  DABS, "DABS", Enter_Ptr, is_normal ; ok
 301+ 795A             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 301+ 795A             >
 301+ 795A             >                // dummy db directives used to calculate length of namec
 301+ 795A 44 41 42 53 >                db      "DABS"
 301+ 795E             >len_NFA         defl    $ - temp_NFA
 301+ 795E             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 301+ 795A             >
 301+ 795A 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 301+ 795B 44 41 42 53 >                db      "DABS"               // name string in 7-bit ascii, but
 301+ 795F             >                org     $-1                 // alter last byte of Name just above to set
 301+ 795E D3          >                db      {b $} | END_BIT     // msb as name end
 301+ 795F             >
 301+ 795F 4C 79       >                dw      last_NFA            // Link to previous definition Name
 301+ 7961             >DABS:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 301+ 7961 27 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 301+ 7963             >                else
 301+ 7963 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 301+ 7963             >                endif           ; ok        // for other definitions it "points" the correct handler
 301+ 7963             >                // Use of "; ok" to suppress "warning[fwdref]"
 301+ 7963             >
 301+ 7963             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 302+ 7963 A9 6A                        dw      DUP                     // dup
 303+ 7965 40 79                        dw      DPLUS_MINUS             // d+-
 304+ 7967 23 69                        dw      EXIT                    // ;
 305+ 7969
 306+ 7969              //  ______________________________________________________________________
 307+ 7969              //
 308+ 7969              // m*           n1 n2 -- d
 309+ 7969              // multiply two integer giving a double
 310+ 7969                              Colon_Def MMUL, "M*", is_normal
 310+ 7969             >                New_Def  MMUL, "M*", Enter_Ptr, is_normal ; ok
 310+ 7969             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 310+ 7969             >
 310+ 7969             >                // dummy db directives used to calculate length of namec
 310+ 7969 4D 2A       >                db      "M*"
 310+ 796B             >len_NFA         defl    $ - temp_NFA
 310+ 796B             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 310+ 7969             >
 310+ 7969 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 310+ 796A 4D 2A       >                db      "M*"               // name string in 7-bit ascii, but
 310+ 796C             >                org     $-1                 // alter last byte of Name just above to set
 310+ 796B AA          >                db      {b $} | END_BIT     // msb as name end
 310+ 796C             >
 310+ 796C 5A 79       >                dw      last_NFA            // Link to previous definition Name
 310+ 796E             >MMUL:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 310+ 796E 27 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 310+ 7970             >                else
 310+ 7970 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 310+ 7970             >                endif           ; ok        // for other definitions it "points" the correct handler
 310+ 7970             >                // Use of "; ok" to suppress "warning[fwdref]"
 310+ 7970             >
 310+ 7970             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 311+ 7970 0A 6B D8 68                  dw      TWO_DUP, XOR_OP, TO_R   // 2dup xor >r
 311+ 7974 51 69
 312+ 7976 52 79 9C 6A                  dw      ABS_OP, SWAP            // abs swap
 313+ 797A 52 79 44 68                  dw      ABS_OP, UM_MUL          // abs um*
 314+ 797E 65 69 40 79                  dw      R_TO, DPLUS_MINUS       // r> d+-
 315+ 7982 23 69                        dw      EXIT                    // ;
 316+ 7984
 317+ 7984              //  ______________________________________________________________________
 318+ 7984              //
 319+ 7984              // m/mod        d n -- q r
 320+ 7984              // multiply two integer giving a double
 321+ 7984                              Colon_Def MDIVM, "M/MOD", is_normal
 321+ 7984             >                New_Def  MDIVM, "M/MOD", Enter_Ptr, is_normal ; ok
 321+ 7984             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 321+ 7984             >
 321+ 7984             >                // dummy db directives used to calculate length of namec
 321+ 7984 4D 2F 4D 4F >                db      "M/MOD"
 321+ 7988 44          >
 321+ 7989             >len_NFA         defl    $ - temp_NFA
 321+ 7989             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 321+ 7984             >
 321+ 7984 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 321+ 7985 4D 2F 4D 4F >                db      "M/MOD"               // name string in 7-bit ascii, but
 321+ 7989 44          >
 321+ 798A             >                org     $-1                 // alter last byte of Name just above to set
 321+ 7989 C4          >                db      {b $} | END_BIT     // msb as name end
 321+ 798A             >
 321+ 798A 69 79       >                dw      last_NFA            // Link to previous definition Name
 321+ 798C             >MDIVM:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 321+ 798C 27 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 321+ 798E             >                else
 321+ 798E ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 321+ 798E             >                endif           ; ok        // for other definitions it "points" the correct handler
 321+ 798E             >                // Use of "; ok" to suppress "warning[fwdref]"
 321+ 798E             >
 321+ 798E             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 322+ 798E 64 6A 51 69                  dw      OVER, TO_R, TO_R        // over >r >r
 322+ 7992 51 69
 323+ 7994 61 79 79 69                  dw      DABS, R_OP, ABS_OP      // dabs r abs
 323+ 7998 52 79
 324+ 799A 75 68                        dw      UMDIVMOD                // um/mod
 325+ 799C 65 69                        dw      R_TO                    // r>
 326+ 799E 79 69 D8 68                  dw      R_OP, XOR_OP            // r xor
 327+ 79A2 2E 79 9C 6A                  dw      PLUS_MINUS, SWAP        // +- swap
 328+ 79A6 65 69                        dw      R_TO                    // r>
 329+ 79A8 2E 79 9C 6A                  dw      PLUS_MINUS, SWAP        // +- swap
 330+ 79AC 23 69                        dw      EXIT                    // ;
 331+ 79AE
 332+ 79AE              //  ______________________________________________________________________
 333+ 79AE              //
 334+ 79AE              // m/           d n -- q
 335+ 79AE              // multiply two integer giving a double
 336+ 79AE                              Colon_Def MDIV, "M/", is_normal
 336+ 79AE             >                New_Def  MDIV, "M/", Enter_Ptr, is_normal ; ok
 336+ 79AE             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 336+ 79AE             >
 336+ 79AE             >                // dummy db directives used to calculate length of namec
 336+ 79AE 4D 2F       >                db      "M/"
 336+ 79B0             >len_NFA         defl    $ - temp_NFA
 336+ 79B0             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 336+ 79AE             >
 336+ 79AE 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 336+ 79AF 4D 2F       >                db      "M/"               // name string in 7-bit ascii, but
 336+ 79B1             >                org     $-1                 // alter last byte of Name just above to set
 336+ 79B0 AF          >                db      {b $} | END_BIT     // msb as name end
 336+ 79B1             >
 336+ 79B1 84 79       >                dw      last_NFA            // Link to previous definition Name
 336+ 79B3             >MDIV:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 336+ 79B3 27 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 336+ 79B5             >                else
 336+ 79B5 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 336+ 79B5             >                endif           ; ok        // for other definitions it "points" the correct handler
 336+ 79B5             >                // Use of "; ok" to suppress "warning[fwdref]"
 336+ 79B5             >
 336+ 79B5             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 337+ 79B5 8C 79 7F 6A                  dw      MDIVM, NIP
 338+ 79B9 23 69                        dw      EXIT                    // ;
 339+ 79BB
 340+ 79BB              //  ______________________________________________________________________
 341+ 79BB              //
 342+ 79BB              // *            n1 n2 -- n3
 343+ 79BB              // multiply two integer
 344+ 79BB                              Colon_Def MUL, "*", is_normal
 344+ 79BB             >                New_Def  MUL, "*", Enter_Ptr, is_normal ; ok
 344+ 79BB             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 344+ 79BB             >
 344+ 79BB             >                // dummy db directives used to calculate length of namec
 344+ 79BB 2A          >                db      "*"
 344+ 79BC             >len_NFA         defl    $ - temp_NFA
 344+ 79BC             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 344+ 79BB             >
 344+ 79BB 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 344+ 79BC 2A          >                db      "*"               // name string in 7-bit ascii, but
 344+ 79BD             >                org     $-1                 // alter last byte of Name just above to set
 344+ 79BC AA          >                db      {b $} | END_BIT     // msb as name end
 344+ 79BD             >
 344+ 79BD AE 79       >                dw      last_NFA            // Link to previous definition Name
 344+ 79BF             >MUL:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 344+ 79BF 27 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 344+ 79C1             >                else
 344+ 79C1 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 344+ 79C1             >                endif           ; ok        // for other definitions it "points" the correct handler
 344+ 79C1             >                // Use of "; ok" to suppress "warning[fwdref]"
 344+ 79C1             >
 344+ 79C1             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 345+ 79C1 6E 79 74 6A                  dw      MMUL, DROP              // m* drop
 346+ 79C5 23 69                        dw      EXIT                    // ;
 347+ 79C7
 348+ 79C7              //  ______________________________________________________________________
 349+ 79C7              //
 350+ 79C7              // /mod         n1 n2 -- n3 n4
 351+ 79C7              // leaves quotient n4 and remainder n3 of the integer division n1 / n2.
 352+ 79C7              // The remainder has the sign of n1
 353+ 79C7                              Colon_Def DIVMOD, "/MOD", is_normal
 353+ 79C7             >                New_Def  DIVMOD, "/MOD", Enter_Ptr, is_normal ; ok
 353+ 79C7             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 353+ 79C7             >
 353+ 79C7             >                // dummy db directives used to calculate length of namec
 353+ 79C7 2F 4D 4F 44 >                db      "/MOD"
 353+ 79CB             >len_NFA         defl    $ - temp_NFA
 353+ 79CB             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 353+ 79C7             >
 353+ 79C7 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 353+ 79C8 2F 4D 4F 44 >                db      "/MOD"               // name string in 7-bit ascii, but
 353+ 79CC             >                org     $-1                 // alter last byte of Name just above to set
 353+ 79CB C4          >                db      {b $} | END_BIT     // msb as name end
 353+ 79CC             >
 353+ 79CC BB 79       >                dw      last_NFA            // Link to previous definition Name
 353+ 79CE             >DIVMOD:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 353+ 79CE 27 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 353+ 79D0             >                else
 353+ 79D0 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 353+ 79D0             >                endif           ; ok        // for other definitions it "points" the correct handler
 353+ 79D0             >                // Use of "; ok" to suppress "warning[fwdref]"
 353+ 79D0             >
 353+ 79D0             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 354+ 79D0 51 69 C0 6E                  dw      TO_R, S_TO_D, R_TO      // >r s->d r>
 354+ 79D4 65 69
 355+ 79D6 8C 79                        dw      MDIVM                   // m/mod
 356+ 79D8 23 69                        dw      EXIT                    // ;
 357+ 79DA
 358+ 79DA              //  ______________________________________________________________________
 359+ 79DA              //
 360+ 79DA              // /            n1 n2 -- n3
 361+ 79DA              // division
 362+ 79DA                              Colon_Def DIV, "/", is_normal
 362+ 79DA             >                New_Def  DIV, "/", Enter_Ptr, is_normal ; ok
 362+ 79DA             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 362+ 79DA             >
 362+ 79DA             >                // dummy db directives used to calculate length of namec
 362+ 79DA 2F          >                db      "/"
 362+ 79DB             >len_NFA         defl    $ - temp_NFA
 362+ 79DB             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 362+ 79DA             >
 362+ 79DA 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 362+ 79DB 2F          >                db      "/"               // name string in 7-bit ascii, but
 362+ 79DC             >                org     $-1                 // alter last byte of Name just above to set
 362+ 79DB AF          >                db      {b $} | END_BIT     // msb as name end
 362+ 79DC             >
 362+ 79DC C7 79       >                dw      last_NFA            // Link to previous definition Name
 362+ 79DE             >DIV:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 362+ 79DE 27 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 362+ 79E0             >                else
 362+ 79E0 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 362+ 79E0             >                endif           ; ok        // for other definitions it "points" the correct handler
 362+ 79E0             >                // Use of "; ok" to suppress "warning[fwdref]"
 362+ 79E0             >
 362+ 79E0             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 363+ 79E0 CE 79 7F 6A                  dw      DIVMOD, NIP             // /mod nip
 364+ 79E4 23 69                        dw      EXIT                    // ;
 365+ 79E6
 366+ 79E6              //  ______________________________________________________________________
 367+ 79E6              //
 368+ 79E6              // mod          n1 n2 -- n3
 369+ 79E6                              Colon_Def MOD, "MOD", is_normal
 369+ 79E6             >                New_Def  MOD, "MOD", Enter_Ptr, is_normal ; ok
 369+ 79E6             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 369+ 79E6             >
 369+ 79E6             >                // dummy db directives used to calculate length of namec
 369+ 79E6 4D 4F 44    >                db      "MOD"
 369+ 79E9             >len_NFA         defl    $ - temp_NFA
 369+ 79E9             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 369+ 79E6             >
 369+ 79E6 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 369+ 79E7 4D 4F 44    >                db      "MOD"               // name string in 7-bit ascii, but
 369+ 79EA             >                org     $-1                 // alter last byte of Name just above to set
 369+ 79E9 C4          >                db      {b $} | END_BIT     // msb as name end
 369+ 79EA             >
 369+ 79EA DA 79       >                dw      last_NFA            // Link to previous definition Name
 369+ 79EC             >MOD:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 369+ 79EC 27 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 369+ 79EE             >                else
 369+ 79EE ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 369+ 79EE             >                endif           ; ok        // for other definitions it "points" the correct handler
 369+ 79EE             >                // Use of "; ok" to suppress "warning[fwdref]"
 369+ 79EE             >
 369+ 79EE             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 370+ 79EE CE 79 74 6A                  dw      DIVMOD, DROP            // /mod drop
 371+ 79F2 23 69                        dw      EXIT                    // ;
 372+ 79F4
 373+ 79F4              //  ______________________________________________________________________
 374+ 79F4              //
 375+ 79F4              // */mod        n1 n2 n3 -- n4 n5
 376+ 79F4              // leaves the quotient n5 and the remainder n4 of the operation
 377+ 79F4              // (n1 * n2) / n3. The intermediate passage through a double number
 378+ 79F4              // avoids loss of precision
 379+ 79F4                              Colon_Def MUL_DIV_MOD, "*/MOD", is_normal
 379+ 79F4             >                New_Def  MUL_DIV_MOD, "*/MOD", Enter_Ptr, is_normal ; ok
 379+ 79F4             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 379+ 79F4             >
 379+ 79F4             >                // dummy db directives used to calculate length of namec
 379+ 79F4 2A 2F 4D 4F >                db      "*/MOD"
 379+ 79F8 44          >
 379+ 79F9             >len_NFA         defl    $ - temp_NFA
 379+ 79F9             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 379+ 79F4             >
 379+ 79F4 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 379+ 79F5 2A 2F 4D 4F >                db      "*/MOD"               // name string in 7-bit ascii, but
 379+ 79F9 44          >
 379+ 79FA             >                org     $-1                 // alter last byte of Name just above to set
 379+ 79F9 C4          >                db      {b $} | END_BIT     // msb as name end
 379+ 79FA             >
 379+ 79FA E6 79       >                dw      last_NFA            // Link to previous definition Name
 379+ 79FC             >MUL_DIV_MOD:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 379+ 79FC 27 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 379+ 79FE             >                else
 379+ 79FE ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 379+ 79FE             >                endif           ; ok        // for other definitions it "points" the correct handler
 379+ 79FE             >                // Use of "; ok" to suppress "warning[fwdref]"
 379+ 79FE             >
 379+ 79FE             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 380+ 79FE 51 69 6E 79                  dw      TO_R, MMUL              // >r  m*
 381+ 7A02 65 69 8C 79                  dw      R_TO, MDIVM             // r>  m/mod
 382+ 7A06 23 69                        dw      EXIT                    // ;
 383+ 7A08
 384+ 7A08              //  ______________________________________________________________________
 385+ 7A08              //
 386+ 7A08              // */          n1 n2 n3 -- n4
 387+ 7A08              // (n1 * n2) / n3. The intermediate passage through a double number avoids loss of precision
 388+ 7A08                              Colon_Def MUL_DIV, "*/", is_normal
 388+ 7A08             >                New_Def  MUL_DIV, "*/", Enter_Ptr, is_normal ; ok
 388+ 7A08             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 388+ 7A08             >
 388+ 7A08             >                // dummy db directives used to calculate length of namec
 388+ 7A08 2A 2F       >                db      "*/"
 388+ 7A0A             >len_NFA         defl    $ - temp_NFA
 388+ 7A0A             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 388+ 7A08             >
 388+ 7A08 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 388+ 7A09 2A 2F       >                db      "*/"               // name string in 7-bit ascii, but
 388+ 7A0B             >                org     $-1                 // alter last byte of Name just above to set
 388+ 7A0A AF          >                db      {b $} | END_BIT     // msb as name end
 388+ 7A0B             >
 388+ 7A0B F4 79       >                dw      last_NFA            // Link to previous definition Name
 388+ 7A0D             >MUL_DIV:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 388+ 7A0D 27 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 388+ 7A0F             >                else
 388+ 7A0F ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 388+ 7A0F             >                endif           ; ok        // for other definitions it "points" the correct handler
 388+ 7A0F             >                // Use of "; ok" to suppress "warning[fwdref]"
 388+ 7A0F             >
 388+ 7A0F             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 389+ 7A0F FC 79                        dw     MUL_DIV_MOD              // */mod
 390+ 7A11 7F 6A                        dw     NIP                      // nip
 391+ 7A13 23 69                        dw     EXIT                     // ;
 392+ 7A15
 393+ 7A15
 394+ 7A15              //  ______________________________________________________________________
 395+ 7A15              //
 396+ 7A15              // m/mod        ud1 u2 -- u3 ud4
 397+ 7A15              // mixed operation: it leaves the remainder u3 and the quotient ud4 of ud1 / u1.
 398+ 7A15              // All terms are unsigned.
 399+ 7A15              //              Colon_Def MDIV_MOD, "M/MOD", is_normal
 400+ 7A15              //              dw      TO_R                    // >r           ( ud1 )
 401+ 7A15              //              dw      ZERO, R_OP, UMDIVMOD    // 0 r um/mod   ( l rem1 h/r )
 402+ 7A15              //              dw      R_TO, SWAP, TO_R        // r> swap >r   ( l rem )
 403+ 7A15              //              dw      UMDIVMOD                // um/mod       ( rem2 l/r )
 404+ 7A15              //              dw      R_TO                    // r>           ( rem2 l/r h/r )
 405+ 7A15              //              dw      EXIT                    // ;
 406+ 7A15
 407+ 7A15              //  ______________________________________________________________________
 408+ 7A15              //
 409+ 7A15              // (line)       n1 n2 -- a b
 410+ 7A15              // sends the line n1 of block n2 to the disk buffer.
 411+ 7A15              // it returns the address a and ca counter b = C/L meaning a whole line.
 412+ 7A15                              Colon_Def CLINE, "(LINE)", is_normal
 412+ 7A15             >                New_Def  CLINE, "(LINE)", Enter_Ptr, is_normal ; ok
 412+ 7A15             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 412+ 7A15             >
 412+ 7A15             >                // dummy db directives used to calculate length of namec
 412+ 7A15 28 4C 49 4E >                db      "(LINE)"
 412+ 7A19 45 29       >
 412+ 7A1B             >len_NFA         defl    $ - temp_NFA
 412+ 7A1B             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 412+ 7A15             >
 412+ 7A15 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 412+ 7A16 28 4C 49 4E >                db      "(LINE)"               // name string in 7-bit ascii, but
 412+ 7A1A 45 29       >
 412+ 7A1C             >                org     $-1                 // alter last byte of Name just above to set
 412+ 7A1B A9          >                db      {b $} | END_BIT     // msb as name end
 412+ 7A1C             >
 412+ 7A1C 08 7A       >                dw      last_NFA            // Link to previous definition Name
 412+ 7A1E             >CLINE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 412+ 7A1E 27 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 412+ 7A20             >                else
 412+ 7A20 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 412+ 7A20             >                endif           ; ok        // for other definitions it "points" the correct handler
 412+ 7A20             >                // Use of "; ok" to suppress "warning[fwdref]"
 412+ 7A20             >
 412+ 7A20             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 413+ 7A20 51 69                        dw      TO_R                    // >r
 414+ 7A22 4F 6C                        dw      NOOP                    // noop
 415+ 7A24 D6 6C                        dw      CL                      // c/l
 416+ 7A26 E2 6C FC 79                  dw      BBUF, MUL_DIV_MOD       // */mod
 417+ 7A2A 65 69                        dw      R_TO                    // r>
 418+ 7A2C EE 6C BF 79                  dw      BSCR, MUL, PLUS         // b/scr * +
 418+ 7A30 C9 69
 419+ 7A32 2D 7D                        dw      BLOCK                   // block   ( forward )
 420+ 7A34 C9 69                        dw      PLUS                    // +
 421+ 7A36 4F 6C                        dw      NOOP                    // noop
 422+ 7A38 D6 6C                        dw      CL                      // c/l
 423+ 7A3A 23 69                        dw      EXIT                    // ;
 424+ 7A3C
 425+ 7A3C              //  ______________________________________________________________________
 426+ 7A3C              //
 427+ 7A3C              // .line        n1 n2 --
 428+ 7A3C              // Sends to output line  n1  of screen n2.
 429+ 7A3C                              Colon_Def DOT_LINE, ".LINE", is_normal
 429+ 7A3C             >                New_Def  DOT_LINE, ".LINE", Enter_Ptr, is_normal ; ok
 429+ 7A3C             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 429+ 7A3C             >
 429+ 7A3C             >                // dummy db directives used to calculate length of namec
 429+ 7A3C 2E 4C 49 4E >                db      ".LINE"
 429+ 7A40 45          >
 429+ 7A41             >len_NFA         defl    $ - temp_NFA
 429+ 7A41             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 429+ 7A3C             >
 429+ 7A3C 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 429+ 7A3D 2E 4C 49 4E >                db      ".LINE"               // name string in 7-bit ascii, but
 429+ 7A41 45          >
 429+ 7A42             >                org     $-1                 // alter last byte of Name just above to set
 429+ 7A41 C5          >                db      {b $} | END_BIT     // msb as name end
 429+ 7A42             >
 429+ 7A42 15 7A       >                dw      last_NFA            // Link to previous definition Name
 429+ 7A44             >DOT_LINE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 429+ 7A44 27 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 429+ 7A46             >                else
 429+ 7A46 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 429+ 7A46             >                endif           ; ok        // for other definitions it "points" the correct handler
 429+ 7A46             >                // Use of "; ok" to suppress "warning[fwdref]"
 429+ 7A46             >
 429+ 7A46             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 430+ 7A46 1E 7A 6F 72                  dw      CLINE, LTRAILING, TYPE  // (line) -trailing type
 430+ 7A4A 0B 72
 431+ 7A4C 23 69                        dw      EXIT                    // ;
 432+ 7A4E
 433+ 7A4E              //  ______________________________________________________________________
 434+ 7A4E              //
 435+ 7A4E              // message       n1 n2 --
 436+ 7A4E              // prints error message to current channel.
 437+ 7A4E              // if WARNING is 0, prints "MSG#n".
 438+ 7A4E              // if WARNING is 1, prints line n of screen 4.
 439+ 7A4E              // if WARNING is -1, see ERROR
 440+ 7A4E              // value can be negative or beyond block 4.
 441+ 7A4E                              Colon_Def MESSAGE, "MESSAGE", is_normal
 441+ 7A4E             >                New_Def  MESSAGE, "MESSAGE", Enter_Ptr, is_normal ; ok
 441+ 7A4E             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 441+ 7A4E             >
 441+ 7A4E             >                // dummy db directives used to calculate length of namec
 441+ 7A4E 4D 45 53 53 >                db      "MESSAGE"
 441+ 7A52 41 47 45    >
 441+ 7A55             >len_NFA         defl    $ - temp_NFA
 441+ 7A55             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 441+ 7A4E             >
 441+ 7A4E 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 441+ 7A4F 4D 45 53 53 >                db      "MESSAGE"               // name string in 7-bit ascii, but
 441+ 7A53 41 47 45    >
 441+ 7A56             >                org     $-1                 // alter last byte of Name just above to set
 441+ 7A55 C5          >                db      {b $} | END_BIT     // msb as name end
 441+ 7A56             >
 441+ 7A56 3C 7A       >                dw      last_NFA            // Link to previous definition Name
 441+ 7A58             >MESSAGE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 441+ 7A58 27 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 441+ 7A5A             >                else
 441+ 7A5A ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 441+ 7A5A             >                endif           ; ok        // for other definitions it "points" the correct handler
 441+ 7A5A             >                // Use of "; ok" to suppress "warning[fwdref]"
 441+ 7A5A             >
 441+ 7A5A             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 442+ 7A5A 4D 6D 3C 6B                  dw      WARNING, FETCH          // warning @
 443+ 7A5E                                                              // if
 444+ 7A5E E3 63                        dw      ZBRANCH
 445+ 7A60 18 00                        dw      Message_Else - $
 446+ 7A62 A9 63 04 00                  dw          LIT, 4              //      4
 447+ 7A66 C8 6D 3C 6B                  dw          OFFSET, FETCH       //      offset @
 448+ 7A6A EE 6C DE 79                  dw          BSCR, DIV, SUBTRACT //      b/scr / -
 448+ 7A6E D4 6E
 449+ 7A70 44 7A                        dw          DOT_LINE            //      .line
 450+ 7A72 91 6F                        dw          SPACE               //      space
 451+ 7A74                                                              // else
 452+ 7A74
 453+ 7A74 CC 63                        dw      BRANCH
 454+ 7A76 0B 00                        dw      Message_ENdif - $
 455+ 7A78              Message_Else:
 456+ 7A78 21 74                        dw          C_DOT_QUOTE         //      .( msg#)
 457+ 7A7A 04 6D 73 67                  db          4, "msg#"
 457+ 7A7E 23
 458+ 7A7F EC 82                        dw          DOT                 //      .  ( forward )
 459+ 7A81              Message_ENdif:                                  // endif
 460+ 7A81 23 69                        dw      EXIT                    // ;
 461+ 7A83
 462+ 7A83
 463+ 7A83              //  ______________________________________________________________________
 464+ 7A83              //
 465+ 7A83              // device
 466+ 7A83                              Variable_Def DEVICE,   "DEVICE",   2
 466+ 7A83             >                New_Def  DEVICE, "DEVICE", Variable_Ptr, is_normal
 466+ 7A83             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 466+ 7A83             >
 466+ 7A83             >                // dummy db directives used to calculate length of namec
 466+ 7A83 44 45 56 49 >                db      "DEVICE"
 466+ 7A87 43 45       >
 466+ 7A89             >len_NFA         defl    $ - temp_NFA
 466+ 7A89             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 466+ 7A83             >
 466+ 7A83 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 466+ 7A84 44 45 56 49 >                db      "DEVICE"               // name string in 7-bit ascii, but
 466+ 7A88 43 45       >
 466+ 7A8A             >                org     $-1                 // alter last byte of Name just above to set
 466+ 7A89 C5          >                db      {b $} | END_BIT     // msb as name end
 466+ 7A8A             >
 466+ 7A8A 4E 7A       >                dw      last_NFA            // Link to previous definition Name
 466+ 7A8C             >DEVICE:          if Variable_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 466+ 7A8C 7F 6C       >                dw      Variable_Ptr ; ok        // for primitive definitions  actual code
 466+ 7A8E             >                else
 466+ 7A8E ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 466+ 7A8E             >                endif           ; ok        // for other definitions it "points" the correct handler
 466+ 7A8E             >                // Use of "; ok" to suppress "warning[fwdref]"
 466+ 7A8E             >
 466+ 7A8E             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 466+ 7A8E 02 00       >                dw      2
 467+ 7A90
 468+ 7A90              //  ______________________________________________________________________
 469+ 7A90              //
 470+ 7A90              // inkey        -- c | 0
 471+ 7A90              // call ROM inkey$ routine, returns c or "zero".
 472+ 7A90
 473+ 7A90                              New_Def INKEY, "INKEY", is_code, is_normal
 473+ 7A90             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 473+ 7A90             >
 473+ 7A90             >                // dummy db directives used to calculate length of namec
 473+ 7A90 49 4E 4B 45 >                db      "INKEY"
 473+ 7A94 59          >
 473+ 7A95             >len_NFA         defl    $ - temp_NFA
 473+ 7A95             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 473+ 7A90             >
 473+ 7A90 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 473+ 7A91 49 4E 4B 45 >                db      "INKEY"               // name string in 7-bit ascii, but
 473+ 7A95 59          >
 473+ 7A96             >                org     $-1                 // alter last byte of Name just above to set
 473+ 7A95 D9          >                db      {b $} | END_BIT     // msb as name end
 473+ 7A96             >
 473+ 7A96 83 7A       >                dw      last_NFA            // Link to previous definition Name
 473+ 7A98             >INKEY:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 473+ 7A98 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
 473+ 7A98             >                else
 473+ 7A98 9A 7A       >                dw      $ + 2   ; ok        // is pointed by CFA
 473+ 7A9A             >                endif           ; ok        // for other definitions it "points" the correct handler
 473+ 7A9A             >                // Use of "; ok" to suppress "warning[fwdref]"
 473+ 7A9A             >
 473+ 7A9A             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 474+ 7A9A
 475+ 7A9A C5                           push    bc
 476+ 7A9B ED 73 92 63                  ld      (SP_Saved), sp
 477+ 7A9F 31 61 63                     ld      sp, Cold_origin - 5
 478+ 7AA2 DD E5                        push    ix
 479+ 7AA4 CD E6 15                     call    $15E6                   // instead of 15E9
 480+ 7AA7 DD E1                        pop     ix
 481+ 7AA9 ED 7B 92 63                  ld      sp, (SP_Saved)
 482+ 7AAD 6F                           ld      l, a
 483+ 7AAE 26 00                        ld      h, 0
 484+ 7AB0 C1                           pop     bc
 485+ 7AB1                              psh1
 485+ 7AB1 E5          >                push    hl
 485+ 7AB2 DD E9       >                jp      (ix)
 486+ 7AB4
 487+ 7AB4              //  ______________________________________________________________________
 488+ 7AB4              //
 489+ 7AB4              // select      n --
 490+ 7AB4              // selects the given channel number
 491+ 7AB4
 492+ 7AB4                              New_Def SELECT, "SELECT", is_code, is_normal
 492+ 7AB4             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 492+ 7AB4             >
 492+ 7AB4             >                // dummy db directives used to calculate length of namec
 492+ 7AB4 53 45 4C 45 >                db      "SELECT"
 492+ 7AB8 43 54       >
 492+ 7ABA             >len_NFA         defl    $ - temp_NFA
 492+ 7ABA             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 492+ 7AB4             >
 492+ 7AB4 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 492+ 7AB5 53 45 4C 45 >                db      "SELECT"               // name string in 7-bit ascii, but
 492+ 7AB9 43 54       >
 492+ 7ABB             >                org     $-1                 // alter last byte of Name just above to set
 492+ 7ABA D4          >                db      {b $} | END_BIT     // msb as name end
 492+ 7ABB             >
 492+ 7ABB 90 7A       >                dw      last_NFA            // Link to previous definition Name
 492+ 7ABD             >SELECT:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 492+ 7ABD ~           >                dw      runcode ; ok        // for primitive definitions  actual code
 492+ 7ABD             >                else
 492+ 7ABD BF 7A       >                dw      $ + 2   ; ok        // is pointed by CFA
 492+ 7ABF             >                endif           ; ok        // for other definitions it "points" the correct handler
 492+ 7ABF             >                // Use of "; ok" to suppress "warning[fwdref]"
 492+ 7ABF             >
 492+ 7ABF             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 493+ 7ABF E1                           pop     hl
 494+ 7AC0 C5                           push    bc
 495+ 7AC1 7D                           ld      a, l
 496+ 7AC2 ED 73 92 63                  ld      (SP_Saved), sp
 497+ 7AC6 31 61 63                     ld      sp, Cold_origin - 5
 498+ 7AC9 DD E5                        push    ix
 499+ 7ACB CD 01 16                     call    $1601
 500+ 7ACE DD E1                        pop     ix
 501+ 7AD0 ED 7B 92 63                  ld      sp, (SP_Saved)
 502+ 7AD4 C1                           pop     bc
 503+ 7AD5
 504+ 7AD5                              next
 504+ 7AD5 DD E9       >                jp      (ix)
 505+ 7AD7
 506+ 7AD7              //  ______________________________________________________________________
 507+ 7AD7
# file closed: C:\Zx\CSpect\Projects\vForth15_INDIRECT/source/L2.asm
 111  7AD7                              include "next-opt1.asm"
# file opened: C:\Zx\CSpect\Projects\vForth15_INDIRECT/source/next-opt1.asm
   1+ 7AD7              //  ______________________________________________________________________
   2+ 7AD7              //
   3+ 7AD7              //  next-opt.asm
   4+ 7AD7              //
   5+ 7AD7              //  ZX Spectrum Next - peculiar definitions
   6+ 7AD7              //  ______________________________________________________________________
   7+ 7AD7
   8+ 7AD7              //  ______________________________________________________________________
   9+ 7AD7              //
  10+ 7AD7              // reg@         n -- b
  11+ 7AD7              // read Next REGister n giving byte b
  12+ 7AD7
  13+ 7AD7                              New_Def REG_FETCH, "REG@", is_code, is_normal
  13+ 7AD7             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  13+ 7AD7             >
  13+ 7AD7             >                // dummy db directives used to calculate length of namec
  13+ 7AD7 52 45 47 40 >                db      "REG@"
  13+ 7ADB             >len_NFA         defl    $ - temp_NFA
  13+ 7ADB             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  13+ 7AD7             >
  13+ 7AD7 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  13+ 7AD8 52 45 47 40 >                db      "REG@"               // name string in 7-bit ascii, but
  13+ 7ADC             >                org     $-1                 // alter last byte of Name just above to set
  13+ 7ADB C0          >                db      {b $} | END_BIT     // msb as name end
  13+ 7ADC             >
  13+ 7ADC B4 7A       >                dw      last_NFA            // Link to previous definition Name
  13+ 7ADE             >REG_FETCH:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
  13+ 7ADE ~           >                dw      runcode ; ok        // for primitive definitions  actual code
  13+ 7ADE             >                else
  13+ 7ADE E0 7A       >                dw      $ + 2   ; ok        // is pointed by CFA
  13+ 7AE0             >                endif           ; ok        // for other definitions it "points" the correct handler
  13+ 7AE0             >                // Use of "; ok" to suppress "warning[fwdref]"
  13+ 7AE0             >
  13+ 7AE0             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  14+ 7AE0 D9                           exx
  15+ 7AE1 01 3B 24                     ld      bc, $243B
  16+ 7AE4 E1                           pop     hl
  17+ 7AE5 ED 69                        out     (c), l
  18+ 7AE7 04                           inc     b
  19+ 7AE8 ED 68                        in      l,(c)
  20+ 7AEA E5                           push    hl
  21+ 7AEB D9                           exx
  22+ 7AEC                              next
  22+ 7AEC DD E9       >                jp      (ix)
  23+ 7AEE
  24+ 7AEE
  25+ 7AEE              //  ______________________________________________________________________
  26+ 7AEE              //
  27+ 7AEE              // reg!         b n --
  28+ 7AEE              // write value b to Next REGister n
  29+ 7AEE
  30+ 7AEE                              New_Def REG_STORE, "REG!", is_code, is_normal
  30+ 7AEE             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  30+ 7AEE             >
  30+ 7AEE             >                // dummy db directives used to calculate length of namec
  30+ 7AEE 52 45 47 21 >                db      "REG!"
  30+ 7AF2             >len_NFA         defl    $ - temp_NFA
  30+ 7AF2             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  30+ 7AEE             >
  30+ 7AEE 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  30+ 7AEF 52 45 47 21 >                db      "REG!"               // name string in 7-bit ascii, but
  30+ 7AF3             >                org     $-1                 // alter last byte of Name just above to set
  30+ 7AF2 A1          >                db      {b $} | END_BIT     // msb as name end
  30+ 7AF3             >
  30+ 7AF3 D7 7A       >                dw      last_NFA            // Link to previous definition Name
  30+ 7AF5             >REG_STORE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
  30+ 7AF5 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
  30+ 7AF5             >                else
  30+ 7AF5 F7 7A       >                dw      $ + 2   ; ok        // is pointed by CFA
  30+ 7AF7             >                endif           ; ok        // for other definitions it "points" the correct handler
  30+ 7AF7             >                // Use of "; ok" to suppress "warning[fwdref]"
  30+ 7AF7             >
  30+ 7AF7             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  31+ 7AF7 D9                           exx
  32+ 7AF8 01 3B 24                     ld      bc, $243B
  33+ 7AFB E1                           pop     hl
  34+ 7AFC ED 69                        out     (c), l
  35+ 7AFE 04                           inc     b
  36+ 7AFF E1                           pop     hl
  37+ 7B00 ED 69                        out     (c), l
  38+ 7B02 D9                           exx
  39+ 7B03                              next
  39+ 7B03 DD E9       >                jp      (ix)
  40+ 7B05
  41+ 7B05
  42+ 7B05              //  ______________________________________________________________________
  43+ 7B05              //
  44+ 7B05              // mmu7@        -- n
  45+ 7B05              // query current page in MMU7 8K-RAM : 0 and 223
  46+ 7B05
  47+ 7B05                              Colon_Def MMU7_FETCH, "MMU7@", is_normal
  47+ 7B05             >                New_Def  MMU7_FETCH, "MMU7@", Enter_Ptr, is_normal ; ok
  47+ 7B05             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  47+ 7B05             >
  47+ 7B05             >                // dummy db directives used to calculate length of namec
  47+ 7B05 4D 4D 55 37 >                db      "MMU7@"
  47+ 7B09 40          >
  47+ 7B0A             >len_NFA         defl    $ - temp_NFA
  47+ 7B0A             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  47+ 7B05             >
  47+ 7B05 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  47+ 7B06 4D 4D 55 37 >                db      "MMU7@"               // name string in 7-bit ascii, but
  47+ 7B0A 40          >
  47+ 7B0B             >                org     $-1                 // alter last byte of Name just above to set
  47+ 7B0A C0          >                db      {b $} | END_BIT     // msb as name end
  47+ 7B0B             >
  47+ 7B0B EE 7A       >                dw      last_NFA            // Link to previous definition Name
  47+ 7B0D             >MMU7_FETCH:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
  47+ 7B0D 27 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
  47+ 7B0F             >                else
  47+ 7B0F ~           >                dw      $ + 2   ; ok        // is pointed by CFA
  47+ 7B0F             >                endif           ; ok        // for other definitions it "points" the correct handler
  47+ 7B0F             >                // Use of "; ok" to suppress "warning[fwdref]"
  47+ 7B0F             >
  47+ 7B0F             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  48+ 7B0F A9 63 57 00                  dw      LIT, 87, REG_FETCH
  48+ 7B13 DE 7A
  49+ 7B15 23 69                        dw      EXIT
  50+ 7B17
  51+ 7B17              //  ______________________________________________________________________
  52+ 7B17              //
  53+ 7B17              // mmu7!        n --
  54+ 7B17              // set MMU7 8K-RAM page to n given between 0 and 223
  55+ 7B17              // optimized version that uses NEXTREG n,A Z80n op-code.
  56+ 7B17
  57+ 7B17                              New_Def MMU7_STORE, "MMU7!", is_code, is_normal
  57+ 7B17             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  57+ 7B17             >
  57+ 7B17             >                // dummy db directives used to calculate length of namec
  57+ 7B17 4D 4D 55 37 >                db      "MMU7!"
  57+ 7B1B 21          >
  57+ 7B1C             >len_NFA         defl    $ - temp_NFA
  57+ 7B1C             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  57+ 7B17             >
  57+ 7B17 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  57+ 7B18 4D 4D 55 37 >                db      "MMU7!"               // name string in 7-bit ascii, but
  57+ 7B1C 21          >
  57+ 7B1D             >                org     $-1                 // alter last byte of Name just above to set
  57+ 7B1C A1          >                db      {b $} | END_BIT     // msb as name end
  57+ 7B1D             >
  57+ 7B1D 05 7B       >                dw      last_NFA            // Link to previous definition Name
  57+ 7B1F             >MMU7_STORE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
  57+ 7B1F ~           >                dw      runcode ; ok        // for primitive definitions  actual code
  57+ 7B1F             >                else
  57+ 7B1F 21 7B       >                dw      $ + 2   ; ok        // is pointed by CFA
  57+ 7B21             >                endif           ; ok        // for other definitions it "points" the correct handler
  57+ 7B21             >                // Use of "; ok" to suppress "warning[fwdref]"
  57+ 7B21             >
  57+ 7B21             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  58+ 7B21 E1                           pop     hl
  59+ 7B22 7D                           ld      a, l
  60+ 7B23 ED 92 57                     nextreg 87, a
  61+ 7B26
  62+ 7B26                              next
  62+ 7B26 DD E9       >                jp      (ix)
  63+ 7B28
  64+ 7B28              //  ______________________________________________________________________
  65+ 7B28              //
  66+ 7B28              // >far         ha -- a n
  67+ 7B28              // decode bits 765 of H as one of the 8K-page between 64 and 71 (40h-47h)
  68+ 7B28              // take lower bits of H and L as an offset from E000h
  69+ 7B28              // then return address  a  between E000h-FFFFh
  70+ 7B28              // and page number n  between 64-71 (40h-47h)
  71+ 7B28              // For example, in hex:
  72+ 7B28              //   0000 >FAR  gives  40.E000
  73+ 7B28              //   1FFF >FAR  gives  40.FFFF
  74+ 7B28              //   2000 >FAR  gives  41.E000
  75+ 7B28              //   3FFF >FAR  gives  41.FFFF
  76+ 7B28              //   EFFF >FAR  gives  47.EFFF
  77+ 7B28              //   FFFF >FAR  gives  47.FFFF
  78+ 7B28              //                New_Def TO_FAR, ">FAR", is_code, is_normal
  79+ 7B28              //                pop     de
  80+ 7B28              //                ld      a, d
  81+ 7B28              //                and     $E0
  82+ 7B28              //                rlca
  83+ 7B28              //                rlca
  84+ 7B28              //                rlca
  85+ 7B28              //                add     $40
  86+ 7B28              //                ld      l, a
  87+ 7B28              //                ld      h, 0
  88+ 7B28              //                ld      a, d
  89+ 7B28              //                or      $E0
  90+ 7B28              //                ld      d, a
  91+ 7B28              //                push    hl
  92+ 7B28              //                push    de
  93+ 7B28              //                next
  94+ 7B28
  95+ 7B28              //  ______________________________________________________________________
  96+ 7B28              //
  97+ 7B28              // <far         a n  -- ha
  98+ 7B28              // given an address E000-FFFF and a page number n (64-71 or 40h-47h)
  99+ 7B28              // reverse of >FAR: encodes a FAR address compressing
 100+ 7B28              // to bits 765 of H, lower bits of HL address offset from E000h
 101+ 7B28              //                New_Def FROM_FAR, "<FAR", is_code, is_normal
 102+ 7B28              //                pop     de                  // page number in e
 103+ 7B28              //                pop     hl                  // address in hl
 104+ 7B28              //                ld      a, e
 105+ 7B28              //                sub     $40                 // reduced to 0-7
 106+ 7B28              //                rrca
 107+ 7B28              //                rrca
 108+ 7B28              //                rrca
 109+ 7B28              //                ld      d, a                // save to d bits 765
 110+ 7B28              //                ld      a, h                // drops
 111+ 7B28              //                and     $1F
 112+ 7B28              //                or      d
 113+ 7B28              //                ld      h, a
 114+ 7B28              //
 115+ 7B28              //                psh1
 116+ 7B28
 117+ 7B28              //  ______________________________________________________________________
 118+ 7B28              //
 119+ 7B28              // m_p3dos      n1 n2 n3 n4 a -- n5 n6 n7 n8  f
 120+ 7B28              // NextZXOS call wrapper.
 121+ 7B28              //  n1 = hl register parameter value
 122+ 7B28              //  n2 = de register parameter value
 123+ 7B28              //  n3 = bc register parameter value
 124+ 7B28              //  n4 =  a register parameter value
 125+ 7B28              //   a = routine address in ROM 3
 126+ 7B28              // ----
 127+ 7B28              //  n5 = hl returned value
 128+ 7B28              //  n6 = de returned value
 129+ 7B28              //  n7 = bc returned value
 130+ 7B28              //  n8 =  a returned value
 131+ 7B28              //   f
 132+ 7B28                              New_Def M_P3DOS, "M_P3DOS", is_code, is_normal
 132+ 7B28             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 132+ 7B28             >
 132+ 7B28             >                // dummy db directives used to calculate length of namec
 132+ 7B28 4D 5F 50 33 >                db      "M_P3DOS"
 132+ 7B2C 44 4F 53    >
 132+ 7B2F             >len_NFA         defl    $ - temp_NFA
 132+ 7B2F             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 132+ 7B28             >
 132+ 7B28 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 132+ 7B29 4D 5F 50 33 >                db      "M_P3DOS"               // name string in 7-bit ascii, but
 132+ 7B2D 44 4F 53    >
 132+ 7B30             >                org     $-1                 // alter last byte of Name just above to set
 132+ 7B2F D3          >                db      {b $} | END_BIT     // msb as name end
 132+ 7B30             >
 132+ 7B30 17 7B       >                dw      last_NFA            // Link to previous definition Name
 132+ 7B32             >M_P3DOS:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 132+ 7B32 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
 132+ 7B32             >                else
 132+ 7B32 34 7B       >                dw      $ + 2   ; ok        // is pointed by CFA
 132+ 7B34             >                endif           ; ok        // for other definitions it "points" the correct handler
 132+ 7B34             >                // Use of "; ok" to suppress "warning[fwdref]"
 132+ 7B34             >
 132+ 7B34             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 133+ 7B34 D1                           pop     de                  // dos call entry address in de
 134+ 7B35 E1                           pop     hl                  // a register
 135+ 7B36 7D                           ld      a, l
 136+ 7B37 D9                           exx
 137+ 7B38 C1                           pop     bc
 138+ 7B39 D1                           pop     de
 139+ 7B3A E1                           pop     hl
 140+ 7B3B D9                           exx
 141+ 7B3C
 142+ 7B3C C5                           push    bc
 143+ 7B3D DD E5                        push    ix
 144+ 7B3F
 145+ 7B3F ED 73 92 63                  ld      (SP_Saved), sp
 146+ 7B43 31 61 63                     ld      sp, Cold_origin - 5
 147+ 7B46 0E 07                        ld      c, 7                // use 7 RAM Bank
 148+ 7B48
 149+ 7B48 CF                           rst     08
 150+ 7B49 94                           db      $94
 151+ 7B4A
 152+ 7B4A ED 7B 92 63                  ld      sp, (SP_Saved)
 153+ 7B4E DD E5                        push    ix
 154+ 7B50 E1                           pop     hl
 155+ 7B51 22 90 63                     ld      (IX_Echo), hl
 156+ 7B54              //              nop
 157+ 7B54 DD E1                        pop     ix
 158+ 7B56 E3                           ex      (sp), hl            // hl argument and retrieve bc
 159+ 7B57 D5                           push    de
 160+ 7B58 C5                           push    bc
 161+ 7B59 4D                           ld      c, l
 162+ 7B5A 44                           ld      b, h
 163+ 7B5B
 164+ 7B5B 26 00                        ld      h, 0
 165+ 7B5D 6F                           ld      l, a
 166+ 7B5E E5                           push    hl
 167+ 7B5F ED 62                        sbc     hl, hl              // -1 for OK ; 0 for KO but now...
 168+ 7B61 23                           inc     hl                  //  0 for OK ; 1 for ko
 169+ 7B62
 170+ 7B62                              psh1
 170+ 7B62 E5          >                push    hl
 170+ 7B63 DD E9       >                jp      (ix)
 171+ 7B65
 172+ 7B65              //  ______________________________________________________________________
 173+ 7B65              //
 174+ 7B65              // blk-fh
 175+ 7B65                              Variable_Def BLK_FH,   "BLK-FH",   1
 175+ 7B65             >                New_Def  BLK_FH, "BLK-FH", Variable_Ptr, is_normal
 175+ 7B65             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 175+ 7B65             >
 175+ 7B65             >                // dummy db directives used to calculate length of namec
 175+ 7B65 42 4C 4B 2D >                db      "BLK-FH"
 175+ 7B69 46 48       >
 175+ 7B6B             >len_NFA         defl    $ - temp_NFA
 175+ 7B6B             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 175+ 7B65             >
 175+ 7B65 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 175+ 7B66 42 4C 4B 2D >                db      "BLK-FH"               // name string in 7-bit ascii, but
 175+ 7B6A 46 48       >
 175+ 7B6C             >                org     $-1                 // alter last byte of Name just above to set
 175+ 7B6B C8          >                db      {b $} | END_BIT     // msb as name end
 175+ 7B6C             >
 175+ 7B6C 28 7B       >                dw      last_NFA            // Link to previous definition Name
 175+ 7B6E             >BLK_FH:          if Variable_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 175+ 7B6E 7F 6C       >                dw      Variable_Ptr ; ok        // for primitive definitions  actual code
 175+ 7B70             >                else
 175+ 7B70 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 175+ 7B70             >                endif           ; ok        // for other definitions it "points" the correct handler
 175+ 7B70             >                // Use of "; ok" to suppress "warning[fwdref]"
 175+ 7B70             >
 175+ 7B70             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 175+ 7B70 01 00       >                dw      1
 176+ 7B72
 177+ 7B72                              New_Def BLK_FNAME,   "BLK-FNAME", Create_Ptr, is_normal
 177+ 7B72             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 177+ 7B72             >
 177+ 7B72             >                // dummy db directives used to calculate length of namec
 177+ 7B72 42 4C 4B 2D >                db      "BLK-FNAME"
 177+ 7B76 46 4E 41 4D >
 177+ 7B7A 45          >
 177+ 7B7B             >len_NFA         defl    $ - temp_NFA
 177+ 7B7B             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 177+ 7B72             >
 177+ 7B72 89          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 177+ 7B73 42 4C 4B 2D >                db      "BLK-FNAME"               // name string in 7-bit ascii, but
 177+ 7B77 46 4E 41 4D >
 177+ 7B7B 45          >
 177+ 7B7C             >                org     $-1                 // alter last byte of Name just above to set
 177+ 7B7B C5          >                db      {b $} | END_BIT     // msb as name end
 177+ 7B7C             >
 177+ 7B7C 65 7B       >                dw      last_NFA            // Link to previous definition Name
 177+ 7B7E             >BLK_FNAME:          if Create_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 177+ 7B7E 85 76       >                dw      Create_Ptr ; ok        // for primitive definitions  actual code
 177+ 7B80             >                else
 177+ 7B80 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 177+ 7B80             >                endif           ; ok        // for other definitions it "points" the correct handler
 177+ 7B80             >                // Use of "; ok" to suppress "warning[fwdref]"
 177+ 7B80             >
 177+ 7B80             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 178+ 7B80 0E 21 42 6C                  db      14, "!Blocks-64.bin", 0
 178+ 7B84 6F 63 6B 73
 178+ 7B88 2D 36 34 2E
 178+ 7B8C 62 69 6E 00
 179+ 7B90 00 00 00...                  ds      24
 180+ 7BA8
 181+ 7BA8              //  ______________________________________________________________________
 182+ 7BA8              //
 183+ 7BA8              // blk-seek     n --
 184+ 7BA8              // seek block n  within blocks!.bin  file
 185+ 7BA8                              Colon_Def BLK_SEEK, "BLK-SEEK", is_normal
 185+ 7BA8             >                New_Def  BLK_SEEK, "BLK-SEEK", Enter_Ptr, is_normal ; ok
 185+ 7BA8             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 185+ 7BA8             >
 185+ 7BA8             >                // dummy db directives used to calculate length of namec
 185+ 7BA8 42 4C 4B 2D >                db      "BLK-SEEK"
 185+ 7BAC 53 45 45 4B >
 185+ 7BB0             >len_NFA         defl    $ - temp_NFA
 185+ 7BB0             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 185+ 7BA8             >
 185+ 7BA8 88          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 185+ 7BA9 42 4C 4B 2D >                db      "BLK-SEEK"               // name string in 7-bit ascii, but
 185+ 7BAD 53 45 45 4B >
 185+ 7BB1             >                org     $-1                 // alter last byte of Name just above to set
 185+ 7BB0 CB          >                db      {b $} | END_BIT     // msb as name end
 185+ 7BB1             >
 185+ 7BB1 72 7B       >                dw      last_NFA            // Link to previous definition Name
 185+ 7BB3             >BLK_SEEK:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 185+ 7BB3 27 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 185+ 7BB5             >                else
 185+ 7BB5 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 185+ 7BB5             >                endif           ; ok        // for other definitions it "points" the correct handler
 185+ 7BB5             >                // Use of "; ok" to suppress "warning[fwdref]"
 185+ 7BB5             >
 185+ 7BB5             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 186+ 7BB5 E2 6C 6E 79                  dw  BBUF, MMUL
 187+ 7BB9 6E 7B 3C 6B                  dw  BLK_FH, FETCH
 188+ 7BBD 2E 67                        dw  F_SEEK
 189+ 7BBF A9 63 2D 00                  dw  LIT, $2D, QERROR
 189+ 7BC3 4B 70
 190+ 7BC5 23 69                        dw  EXIT
 191+ 7BC7
 192+ 7BC7              //  ______________________________________________________________________
 193+ 7BC7              //
 194+ 7BC7              // blk-read     n --
 195+ 7BC7              // seek block n  within blocks!.bin  file
 196+ 7BC7                              Colon_Def BLK_READ, "BLK-READ", is_normal
 196+ 7BC7             >                New_Def  BLK_READ, "BLK-READ", Enter_Ptr, is_normal ; ok
 196+ 7BC7             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 196+ 7BC7             >
 196+ 7BC7             >                // dummy db directives used to calculate length of namec
 196+ 7BC7 42 4C 4B 2D >                db      "BLK-READ"
 196+ 7BCB 52 45 41 44 >
 196+ 7BCF             >len_NFA         defl    $ - temp_NFA
 196+ 7BCF             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 196+ 7BC7             >
 196+ 7BC7 88          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 196+ 7BC8 42 4C 4B 2D >                db      "BLK-READ"               // name string in 7-bit ascii, but
 196+ 7BCC 52 45 41 44 >
 196+ 7BD0             >                org     $-1                 // alter last byte of Name just above to set
 196+ 7BCF C4          >                db      {b $} | END_BIT     // msb as name end
 196+ 7BD0             >
 196+ 7BD0 A8 7B       >                dw      last_NFA            // Link to previous definition Name
 196+ 7BD2             >BLK_READ:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 196+ 7BD2 27 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 196+ 7BD4             >                else
 196+ 7BD4 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 196+ 7BD4             >                endif           ; ok        // for other definitions it "points" the correct handler
 196+ 7BD4             >                // Use of "; ok" to suppress "warning[fwdref]"
 196+ 7BD4             >
 196+ 7BD4             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 197+ 7BD4 B3 7B                        dw  BLK_SEEK
 198+ 7BD6 E2 6C                        dw  BBUF
 199+ 7BD8 6E 7B 3C 6B                  dw  BLK_FH, FETCH
 200+ 7BDC 71 67                        dw  F_READ
 201+ 7BDE A9 63 2E 00                  dw  LIT, $2E, QERROR
 201+ 7BE2 4B 70
 202+ 7BE4 74 6A                        dw  DROP
 203+ 7BE6 23 69                        dw  EXIT
 204+ 7BE8
 205+ 7BE8              //  ______________________________________________________________________
 206+ 7BE8              //
 207+ 7BE8              // blk-write     n --
 208+ 7BE8              // seek block n  within blocks!.bin  file
 209+ 7BE8                              Colon_Def BLK_WRITE, "BLK-WRITE", is_normal
 209+ 7BE8             >                New_Def  BLK_WRITE, "BLK-WRITE", Enter_Ptr, is_normal ; ok
 209+ 7BE8             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 209+ 7BE8             >
 209+ 7BE8             >                // dummy db directives used to calculate length of namec
 209+ 7BE8 42 4C 4B 2D >                db      "BLK-WRITE"
 209+ 7BEC 57 52 49 54 >
 209+ 7BF0 45          >
 209+ 7BF1             >len_NFA         defl    $ - temp_NFA
 209+ 7BF1             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 209+ 7BE8             >
 209+ 7BE8 89          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 209+ 7BE9 42 4C 4B 2D >                db      "BLK-WRITE"               // name string in 7-bit ascii, but
 209+ 7BED 57 52 49 54 >
 209+ 7BF1 45          >
 209+ 7BF2             >                org     $-1                 // alter last byte of Name just above to set
 209+ 7BF1 C5          >                db      {b $} | END_BIT     // msb as name end
 209+ 7BF2             >
 209+ 7BF2 C7 7B       >                dw      last_NFA            // Link to previous definition Name
 209+ 7BF4             >BLK_WRITE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 209+ 7BF4 27 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 209+ 7BF6             >                else
 209+ 7BF6 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 209+ 7BF6             >                endif           ; ok        // for other definitions it "points" the correct handler
 209+ 7BF6             >                // Use of "; ok" to suppress "warning[fwdref]"
 209+ 7BF6             >
 209+ 7BF6             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 210+ 7BF6 B3 7B                        dw  BLK_SEEK
 211+ 7BF8 E2 6C                        dw  BBUF
 212+ 7BFA 6E 7B 3C 6B                  dw  BLK_FH, FETCH
 213+ 7BFE 90 67                        dw  F_WRITE
 214+ 7C00 A9 63 2F 00                  dw  LIT, $2F, QERROR
 214+ 7C04 4B 70
 215+ 7C06 74 6A                        dw  DROP
 216+ 7C08 23 69                        dw  EXIT
 217+ 7C0A
 218+ 7C0A              //  ______________________________________________________________________
 219+ 7C0A              //
 220+ 7C0A              // blk-init     n --
 221+ 7C0A              // seek block n  within blocks!.bin  file
 222+ 7C0A                              Colon_Def BLK_INIT, "BLK-INIT", is_normal
 222+ 7C0A             >                New_Def  BLK_INIT, "BLK-INIT", Enter_Ptr, is_normal ; ok
 222+ 7C0A             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 222+ 7C0A             >
 222+ 7C0A             >                // dummy db directives used to calculate length of namec
 222+ 7C0A 42 4C 4B 2D >                db      "BLK-INIT"
 222+ 7C0E 49 4E 49 54 >
 222+ 7C12             >len_NFA         defl    $ - temp_NFA
 222+ 7C12             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 222+ 7C0A             >
 222+ 7C0A 88          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 222+ 7C0B 42 4C 4B 2D >                db      "BLK-INIT"               // name string in 7-bit ascii, but
 222+ 7C0F 49 4E 49 54 >
 222+ 7C13             >                org     $-1                 // alter last byte of Name just above to set
 222+ 7C12 D4          >                db      {b $} | END_BIT     // msb as name end
 222+ 7C13             >
 222+ 7C13 E8 7B       >                dw      last_NFA            // Link to previous definition Name
 222+ 7C15             >BLK_INIT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 222+ 7C15 27 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 222+ 7C17             >                else
 222+ 7C17 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 222+ 7C17             >                endif           ; ok        // for other definitions it "points" the correct handler
 222+ 7C17             >                // Use of "; ok" to suppress "warning[fwdref]"
 222+ 7C17             >
 222+ 7C17             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 223+ 7C17 6E 7B 3C 6B                  dw  BLK_FH, FETCH, F_CLOSE, DROP
 223+ 7C1B AF 67 74 6A
 224+ 7C1F 7E 7B EA 69                  dw  BLK_FNAME, ONE_PLUS
 225+ 7C23 81 6E BA 6C                  dw  HERE, THREE, F_OPEN         // open for update (read+write)
 225+ 7C27 C9 67
 226+ 7C29 A9 63 2C 00                  dw  LIT, $2C, QERROR
 226+ 7C2D 4B 70
 227+ 7C2F 6E 7B 49 6B                  dw  BLK_FH, STORE
 228+ 7C33 23 69                        dw  EXIT
 229+ 7C35
 230+ 7C35              //  ______________________________________________________________________
 231+ 7C35              //
 232+ 7C35              // #sec
 233+ 7C35              // number of 512 Byte "sector" available on thie sysstem.
 234+ 7C35              // it addd up to 16 MByte of data that can be used as source or pool for almost anything.
 235+ 7C35
 236+ 7C35                              Constant_Def NSEC , "#SEC", 32767
 236+ 7C35             >                New_Def  NSEC, "#SEC", Constant_Ptr, is_normal
 236+ 7C35             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 236+ 7C35             >
 236+ 7C35             >                // dummy db directives used to calculate length of namec
 236+ 7C35 23 53 45 43 >                db      "#SEC"
 236+ 7C39             >len_NFA         defl    $ - temp_NFA
 236+ 7C39             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 236+ 7C35             >
 236+ 7C35 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 236+ 7C36 23 53 45 43 >                db      "#SEC"               // name string in 7-bit ascii, but
 236+ 7C3A             >                org     $-1                 // alter last byte of Name just above to set
 236+ 7C39 C3          >                db      {b $} | END_BIT     // msb as name end
 236+ 7C3A             >
 236+ 7C3A 0A 7C       >                dw      last_NFA            // Link to previous definition Name
 236+ 7C3C             >NSEC:          if Constant_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 236+ 7C3C 66 6C       >                dw      Constant_Ptr ; ok        // for primitive definitions  actual code
 236+ 7C3E             >                else
 236+ 7C3E ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 236+ 7C3E             >                endif           ; ok        // for other definitions it "points" the correct handler
 236+ 7C3E             >                // Use of "; ok" to suppress "warning[fwdref]"
 236+ 7C3E             >
 236+ 7C3E             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 236+ 7C3E FF 7F       >                dw      32767
 237+ 7C40
 238+ 7C40              //  ______________________________________________________________________
 239+ 7C40
 240+ 7C40
 241+ 7C40
# file closed: C:\Zx\CSpect\Projects\vForth15_INDIRECT/source/next-opt1.asm
 112  7C40                              include "L3.asm"
# file opened: C:\Zx\CSpect\Projects\vForth15_INDIRECT/source/L3.asm
   1+ 7C40              //  ______________________________________________________________________
   2+ 7C40              //
   3+ 7C40              //  L3.asm
   4+ 7C40              //
   5+ 7C40              //  Continuation of L2.asm
   6+ 7C40              //  I/O Block definitions
   7+ 7C40              //  ______________________________________________________________________
   8+ 7C40
   9+ 7C40
  10+ 7C40              //  ______________________________________________________________________
  11+ 7C40              //
  12+ 7C40              // r/w          a n f --
  13+ 7C40              // read/write block n depending on flag f, true-flag means read, false-flag means write.
  14+ 7C40                              Colon_Def READ_WRITE, "R/W", is_normal
  14+ 7C40             >                New_Def  READ_WRITE, "R/W", Enter_Ptr, is_normal ; ok
  14+ 7C40             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  14+ 7C40             >
  14+ 7C40             >                // dummy db directives used to calculate length of namec
  14+ 7C40 52 2F 57    >                db      "R/W"
  14+ 7C43             >len_NFA         defl    $ - temp_NFA
  14+ 7C43             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  14+ 7C40             >
  14+ 7C40 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  14+ 7C41 52 2F 57    >                db      "R/W"               // name string in 7-bit ascii, but
  14+ 7C44             >                org     $-1                 // alter last byte of Name just above to set
  14+ 7C43 D7          >                db      {b $} | END_BIT     // msb as name end
  14+ 7C44             >
  14+ 7C44 35 7C       >                dw      last_NFA            // Link to previous definition Name
  14+ 7C46             >READ_WRITE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
  14+ 7C46 27 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
  14+ 7C48             >                else
  14+ 7C48 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
  14+ 7C48             >                endif           ; ok        // for other definitions it "points" the correct handler
  14+ 7C48             >                // Use of "; ok" to suppress "warning[fwdref]"
  14+ 7C48             >
  14+ 7C48             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  15+ 7C48 51 69                        dw      TO_R                    // >r
  16+ 7C4A F6 69                        dw      ONE_SUBTRACT            // 1-
  17+ 7C4C A9 6A A1 69                  dw      DUP, ZLESS              // dup 0<
  18+ 7C50 64 6A 3C 7C                  dw      OVER, NSEC              // over #sec
  19+ 7C54 F6 69 1F 6F                  dw      ONE_SUBTRACT, GREATER   // 1- >
  20+ 7C58 C5 68                        dw      OR_OP                   // or
  21+ 7C5A A9 63 06 00                  dw      LIT, 6, QERROR          // 6 ?error
  21+ 7C5E 4B 70
  22+ 7C60 65 69                        dw      R_TO                    // r>
  23+ 7C62                                                              // if
  24+ 7C62 E3 63                        dw      ZBRANCH
  25+ 7C64 08 00                        dw      Read_Write_Else - $
  26+ 7C66 D2 7B                        dw          BLK_READ            //      blk-read
  27+ 7C68 CC 63                        dw      BRANCH
  28+ 7C6A 04 00                        dw      Read_Write_Endif - $
  29+ 7C6C              Read_Write_Else:                                // else
  30+ 7C6C F4 7B                        dw          BLK_WRITE           //      blk-write
  31+ 7C6E              Read_Write_Endif:                               // endif
  32+ 7C6E 23 69                        dw      EXIT                    // ;
  33+ 7C70
  34+ 7C70
  35+ 7C70              //  ______________________________________________________________________
  36+ 7C70              //
  37+ 7C70              // +buf        a1 -- a2 f
  38+ 7C70              // advences to next buffer, cyclically rotating along them
  39+ 7C70                              Colon_Def PBUF, "+BUF", is_normal
  39+ 7C70             >                New_Def  PBUF, "+BUF", Enter_Ptr, is_normal ; ok
  39+ 7C70             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  39+ 7C70             >
  39+ 7C70             >                // dummy db directives used to calculate length of namec
  39+ 7C70 2B 42 55 46 >                db      "+BUF"
  39+ 7C74             >len_NFA         defl    $ - temp_NFA
  39+ 7C74             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  39+ 7C70             >
  39+ 7C70 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  39+ 7C71 2B 42 55 46 >                db      "+BUF"               // name string in 7-bit ascii, but
  39+ 7C75             >                org     $-1                 // alter last byte of Name just above to set
  39+ 7C74 C6          >                db      {b $} | END_BIT     // msb as name end
  39+ 7C75             >
  39+ 7C75 40 7C       >                dw      last_NFA            // Link to previous definition Name
  39+ 7C77             >PBUF:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
  39+ 7C77 27 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
  39+ 7C79             >                else
  39+ 7C79 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
  39+ 7C79             >                endif           ; ok        // for other definitions it "points" the correct handler
  39+ 7C79             >                // Use of "; ok" to suppress "warning[fwdref]"
  39+ 7C79             >
  39+ 7C79             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  40+ 7C79 A9 63 04 02                  dw      LIT, 516, PLUS          // 516 +
  40+ 7C7D C9 69
  41+ 7C7F A9 6A 84 6D                  dw      DUP, LIMIT, FETCH       // dup limit @
  41+ 7C83 3C 6B
  42+ 7C85 E2 6E                        dw      EQUALS                  // =
  43+ 7C87                                                              // if
  44+ 7C87 E3 63                        dw      ZBRANCH
  45+ 7C89 08 00                        dw      PBuf_Endif - $
  46+ 7C8B 74 6A                        dw          DROP                //      drop
  47+ 7C8D 79 6D 3C 6B                  dw          FIRST, FETCH        //      first @
  48+ 7C91              PBuf_Endif:                                     // endif
  49+ 7C91 A9 6A 36 6E                  dw      DUP, PREV, FETCH        // dup prev @
  49+ 7C95 3C 6B
  50+ 7C97 D4 6E                        dw      SUBTRACT                // -
  51+ 7C99 23 69                        dw      EXIT                    // ;
  52+ 7C9B
  53+ 7C9B              //  ______________________________________________________________________
  54+ 7C9B              //
  55+ 7C9B              // update       --
  56+ 7C9B              // mark the last used block to be written to disk
  57+ 7C9B                              Colon_Def UPDATE, "UPDATE", is_normal
  57+ 7C9B             >                New_Def  UPDATE, "UPDATE", Enter_Ptr, is_normal ; ok
  57+ 7C9B             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  57+ 7C9B             >
  57+ 7C9B             >                // dummy db directives used to calculate length of namec
  57+ 7C9B 55 50 44 41 >                db      "UPDATE"
  57+ 7C9F 54 45       >
  57+ 7CA1             >len_NFA         defl    $ - temp_NFA
  57+ 7CA1             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  57+ 7C9B             >
  57+ 7C9B 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  57+ 7C9C 55 50 44 41 >                db      "UPDATE"               // name string in 7-bit ascii, but
  57+ 7CA0 54 45       >
  57+ 7CA2             >                org     $-1                 // alter last byte of Name just above to set
  57+ 7CA1 C5          >                db      {b $} | END_BIT     // msb as name end
  57+ 7CA2             >
  57+ 7CA2 70 7C       >                dw      last_NFA            // Link to previous definition Name
  57+ 7CA4             >UPDATE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
  57+ 7CA4 27 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
  57+ 7CA6             >                else
  57+ 7CA6 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
  57+ 7CA6             >                endif           ; ok        // for other definitions it "points" the correct handler
  57+ 7CA6             >                // Use of "; ok" to suppress "warning[fwdref]"
  57+ 7CA6             >
  57+ 7CA6             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  58+ 7CA6 36 6E 3C 6B                  dw      PREV, FETCH, FETCH      // prev @ @
  58+ 7CAA 3C 6B
  59+ 7CAC A9 63 00 80                  dw      LIT, $8000, OR_OP       // $8000, or
  59+ 7CB0 C5 68
  60+ 7CB2 36 6E 3C 6B                  dw      PREV, FETCH, STORE      // prev @ !
  60+ 7CB6 49 6B
  61+ 7CB8 23 69                        dw      EXIT                    // ;
  62+ 7CBA
  63+ 7CBA
  64+ 7CBA              //  ______________________________________________________________________
  65+ 7CBA              //
  66+ 7CBA              // empty-buffers --
  67+ 7CBA                              Colon_Def EMPTY_BUFFERS, "EMPTY-BUFFERS", is_normal
  67+ 7CBA             >                New_Def  EMPTY_BUFFERS, "EMPTY-BUFFERS", Enter_Ptr, is_normal ; ok
  67+ 7CBA             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  67+ 7CBA             >
  67+ 7CBA             >                // dummy db directives used to calculate length of namec
  67+ 7CBA 45 4D 50 54 >                db      "EMPTY-BUFFERS"
  67+ 7CBE 59 2D 42 55 >
  67+ 7CC2 46 46 45 52 >
  67+ 7CC6 53          >
  67+ 7CC7             >len_NFA         defl    $ - temp_NFA
  67+ 7CC7             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  67+ 7CBA             >
  67+ 7CBA 8D          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  67+ 7CBB 45 4D 50 54 >                db      "EMPTY-BUFFERS"               // name string in 7-bit ascii, but
  67+ 7CBF 59 2D 42 55 >
  67+ 7CC3 46 46 45 52 >
  67+ 7CC7 53          >
  67+ 7CC8             >                org     $-1                 // alter last byte of Name just above to set
  67+ 7CC7 D3          >                db      {b $} | END_BIT     // msb as name end
  67+ 7CC8             >
  67+ 7CC8 9B 7C       >                dw      last_NFA            // Link to previous definition Name
  67+ 7CCA             >EMPTY_BUFFERS:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
  67+ 7CCA 27 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
  67+ 7CCC             >                else
  67+ 7CCC ~           >                dw      $ + 2   ; ok        // is pointed by CFA
  67+ 7CCC             >                endif           ; ok        // for other definitions it "points" the correct handler
  67+ 7CCC             >                // Use of "; ok" to suppress "warning[fwdref]"
  67+ 7CCC             >
  67+ 7CCC             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  68+ 7CCC 79 6D 3C 6B                  dw      FIRST, FETCH            // first @
  69+ 7CD0 84 6D 3C 6B                  dw      LIMIT, FETCH            // limit @
  70+ 7CD4 64 6A D4 6E                  dw      OVER, SUBTRACT, ERASE   // over - erase
  70+ 7CD8 89 73
  71+ 7CDA 23 69                        dw      EXIT                    // ;
  72+ 7CDC
  73+ 7CDC              //  ______________________________________________________________________
  74+ 7CDC              //
  75+ 7CDC              // buffer       n -- a
  76+ 7CDC              // read block n and gives the address to a buffer
  77+ 7CDC              // any block previously inside the buffer, if modified, is rewritten to
  78+ 7CDC              // disk before reading the block n.
  79+ 7CDC
  80+ 7CDC                              Colon_Def BUFFER, "BUFFER", is_normal
  80+ 7CDC             >                New_Def  BUFFER, "BUFFER", Enter_Ptr, is_normal ; ok
  80+ 7CDC             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  80+ 7CDC             >
  80+ 7CDC             >                // dummy db directives used to calculate length of namec
  80+ 7CDC 42 55 46 46 >                db      "BUFFER"
  80+ 7CE0 45 52       >
  80+ 7CE2             >len_NFA         defl    $ - temp_NFA
  80+ 7CE2             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  80+ 7CDC             >
  80+ 7CDC 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  80+ 7CDD 42 55 46 46 >                db      "BUFFER"               // name string in 7-bit ascii, but
  80+ 7CE1 45 52       >
  80+ 7CE3             >                org     $-1                 // alter last byte of Name just above to set
  80+ 7CE2 D2          >                db      {b $} | END_BIT     // msb as name end
  80+ 7CE3             >
  80+ 7CE3 BA 7C       >                dw      last_NFA            // Link to previous definition Name
  80+ 7CE5             >BUFFER:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
  80+ 7CE5 27 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
  80+ 7CE7             >                else
  80+ 7CE7 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
  80+ 7CE7             >                endif           ; ok        // for other definitions it "points" the correct handler
  80+ 7CE7             >                // Use of "; ok" to suppress "warning[fwdref]"
  80+ 7CE7             >
  80+ 7CE7             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  81+ 7CE7 2C 6E 3C 6B                  dw      USE, FETCH              // use @
  82+ 7CEB A9 6A 51 69                  dw      DUP, TO_R               // dup >r
  83+ 7CEF                                                              // begin
  84+ 7CEF              Buffer_Begin:
  85+ 7CEF 77 7C                        dw          PBUF                //      +buf
  86+ 7CF1                                                              // until
  87+ 7CF1 E3 63                        dw      ZBRANCH
  88+ 7CF3 FC FF                        dw      Buffer_Begin - $
  89+ 7CF5 2C 6E 49 6B                  dw      USE, STORE              // use !
  90+ 7CF9 79 69 3C 6B                  dw      R_OP, FETCH, ZLESS      // r @ 0<
  90+ 7CFD A1 69
  91+ 7CFF                                                              // if
  92+ 7CFF E3 63                        dw      ZBRANCH
  93+ 7D01 14 00                        dw      Buffer_Endif - $
  94+ 7D03 79 69 12 6A                  dw          R_OP, CELL_PLUS     //      r cell+
  95+ 7D07 79 69 3C 6B                  dw          R_OP, FETCH         //      r fetch
  96+ 7D0B A9 63 FF 7F                  dw          LIT, $7FFF          //      7FFF
  97+ 7D0F B3 68                        dw          AND_OP              //      and
  98+ 7D11 A2 6C 46 7C                  dw          ZERO, READ_WRITE    //      0 r/w
  99+ 7D15              Buffer_Endif:                                   // endif
 100+ 7D15 79 69 49 6B                  dw      R_OP, STORE             // r !
 101+ 7D19 79 69 36 6E                  dw      R_OP, PREV, STORE       // r prev !
 101+ 7D1D 49 6B
 102+ 7D1F 65 69 12 6A                  dw      R_TO, CELL_PLUS         // r> cell+
 103+ 7D23 23 69                        dw      EXIT                    // ;
 104+ 7D25
 105+ 7D25              //  ______________________________________________________________________
 106+ 7D25              //
 107+ 7D25              // block        n -- a
 108+ 7D25              // Leaves the buffer address that contains the block n.
 109+ 7D25              // If the block is not already present, it will be loaded from disk
 110+ 7D25              // The block previously inside the buffer, if modified, is rewritten to
 111+ 7D25              // disk before reading the block n.
 112+ 7D25              // See also BUFFER, R/W, UPDATE, FLUSH.
 113+ 7D25
 114+ 7D25                              Colon_Def BLOCK, "BLOCK", is_normal
 114+ 7D25             >                New_Def  BLOCK, "BLOCK", Enter_Ptr, is_normal ; ok
 114+ 7D25             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 114+ 7D25             >
 114+ 7D25             >                // dummy db directives used to calculate length of namec
 114+ 7D25 42 4C 4F 43 >                db      "BLOCK"
 114+ 7D29 4B          >
 114+ 7D2A             >len_NFA         defl    $ - temp_NFA
 114+ 7D2A             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 114+ 7D25             >
 114+ 7D25 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 114+ 7D26 42 4C 4F 43 >                db      "BLOCK"               // name string in 7-bit ascii, but
 114+ 7D2A 4B          >
 114+ 7D2B             >                org     $-1                 // alter last byte of Name just above to set
 114+ 7D2A CB          >                db      {b $} | END_BIT     // msb as name end
 114+ 7D2B             >
 114+ 7D2B DC 7C       >                dw      last_NFA            // Link to previous definition Name
 114+ 7D2D             >BLOCK:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 114+ 7D2D 27 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 114+ 7D2F             >                else
 114+ 7D2F ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 114+ 7D2F             >                endif           ; ok        // for other definitions it "points" the correct handler
 114+ 7D2F             >                // Use of "; ok" to suppress "warning[fwdref]"
 114+ 7D2F             >
 114+ 7D2F             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 115+ 7D2F C8 6D 3C 6B                  dw      OFFSET, FETCH           // offset @
 116+ 7D33 C9 69 51 69                  dw      PLUS, TO_R              // + >r
 117+ 7D37 36 6E 3C 6B                  dw      PREV, FETCH             // prev @
 118+ 7D3B A9 6A 3C 6B                  dw      DUP, FETCH              // dup @
 119+ 7D3F 79 69 D4 6E                  dw      R_OP, SUBTRACT          // r -
 120+ 7D43 A9 6A C9 69                  dw      DUP, PLUS               // dup +  ( trick: check equality without most significant bit )
 121+ 7D47                                                              // if
 122+ 7D47 E3 63                        dw        ZBRANCH
 123+ 7D49 34 00                        dw        Block_Endif_1 - $
 124+ 7D4B              Block_Begin:                                    //      begin
 125+ 7D4B 77 7C 86 69                  dw          PBUF, ZEQUAL        //          +buf 0
 126+ 7D4F                                                              //          if
 127+ 7D4F E3 63                        dw          ZBRANCH
 128+ 7D51 14 00                        dw          Block_Endif_2 - $
 129+ 7D53 74 6A                        dw              DROP            //              drop
 130+ 7D55 79 69 E5 7C                  dw              R_OP, BUFFER    //              r buffer
 131+ 7D59 A9 6A                        dw              DUP             //              dup
 132+ 7D5B 79 69 AA 6C                  dw              R_OP, ONE       //              r 1
 133+ 7D5F 46 7C                        dw              READ_WRITE      //              r/w
 134+ 7D61 B2 6C D4 6E                  dw              TWO, SUBTRACT   //              2 -
 135+ 7D65              Block_Endif_2:                                  //          endif
 136+ 7D65 A9 6A 3C 6B                  dw          DUP, FETCH, R_OP    //          dup @ r
 136+ 7D69 79 69
 137+ 7D6B D4 6E A9 6A                  dw          SUBTRACT, DUP       //          - dup
 138+ 7D6F C9 69 86 69                  dw          PLUS, ZEQUAL        //          + 0=
 139+ 7D73                                                              //      until
 140+ 7D73 E3 63                        dw        ZBRANCH
 141+ 7D75 D6 FF                        dw        Block_Begin - $
 142+ 7D77 A9 6A 36 6E                  dw        DUP, PREV, STORE      //      dup prev !
 142+ 7D7B 49 6B
 143+ 7D7D              Block_Endif_1:                                  // endif
 144+ 7D7D 65 69 74 6A                  dw      R_TO, DROP, CELL_PLUS   // r> drop cell+
 144+ 7D81 12 6A
 145+ 7D83 23 69                        dw      EXIT                    // ;
 146+ 7D85
 147+ 7D85              //  ______________________________________________________________________
 148+ 7D85              //
 149+ 7D85              // #buff        -- n
 150+ 7D85              // number of buffers available. must be the difference between LIMIT and FIRST divided by 516
 151+ 7D85                              Constant_Def NBUFF,   "#BUFF", 7
 151+ 7D85             >                New_Def  NBUFF, "#BUFF", Constant_Ptr, is_normal
 151+ 7D85             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 151+ 7D85             >
 151+ 7D85             >                // dummy db directives used to calculate length of namec
 151+ 7D85 23 42 55 46 >                db      "#BUFF"
 151+ 7D89 46          >
 151+ 7D8A             >len_NFA         defl    $ - temp_NFA
 151+ 7D8A             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 151+ 7D85             >
 151+ 7D85 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 151+ 7D86 23 42 55 46 >                db      "#BUFF"               // name string in 7-bit ascii, but
 151+ 7D8A 46          >
 151+ 7D8B             >                org     $-1                 // alter last byte of Name just above to set
 151+ 7D8A C6          >                db      {b $} | END_BIT     // msb as name end
 151+ 7D8B             >
 151+ 7D8B 25 7D       >                dw      last_NFA            // Link to previous definition Name
 151+ 7D8D             >NBUFF:          if Constant_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 151+ 7D8D 66 6C       >                dw      Constant_Ptr ; ok        // for primitive definitions  actual code
 151+ 7D8F             >                else
 151+ 7D8F ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 151+ 7D8F             >                endif           ; ok        // for other definitions it "points" the correct handler
 151+ 7D8F             >                // Use of "; ok" to suppress "warning[fwdref]"
 151+ 7D8F             >
 151+ 7D8F             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 151+ 7D8F 07 00       >                dw      7
 152+ 7D91
 153+ 7D91              //  ______________________________________________________________________
 154+ 7D91              //
 155+ 7D91              // flush        --
 156+ 7D91                              Colon_Def FLUSH, "FLUSH", is_normal
 156+ 7D91             >                New_Def  FLUSH, "FLUSH", Enter_Ptr, is_normal ; ok
 156+ 7D91             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 156+ 7D91             >
 156+ 7D91             >                // dummy db directives used to calculate length of namec
 156+ 7D91 46 4C 55 53 >                db      "FLUSH"
 156+ 7D95 48          >
 156+ 7D96             >len_NFA         defl    $ - temp_NFA
 156+ 7D96             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 156+ 7D91             >
 156+ 7D91 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 156+ 7D92 46 4C 55 53 >                db      "FLUSH"               // name string in 7-bit ascii, but
 156+ 7D96 48          >
 156+ 7D97             >                org     $-1                 // alter last byte of Name just above to set
 156+ 7D96 C8          >                db      {b $} | END_BIT     // msb as name end
 156+ 7D97             >
 156+ 7D97 85 7D       >                dw      last_NFA            // Link to previous definition Name
 156+ 7D99             >FLUSH:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 156+ 7D99 27 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 156+ 7D9B             >                else
 156+ 7D9B ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 156+ 7D9B             >                endif           ; ok        // for other definitions it "points" the correct handler
 156+ 7D9B             >                // Use of "; ok" to suppress "warning[fwdref]"
 156+ 7D9B             >
 156+ 7D9B             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 157+ 7D9B 8D 7D EA 69                  dw      NBUFF, ONE_PLUS, ZERO   // #buff 1+ 0
 157+ 7D9F A2 6C
 158+ 7DA1              Flush_Do:                                       // do
 159+ 7DA1 6B 64                        dw      C_DO
 160+ 7DA3 A2 6C E5 7C                  dw      ZERO, BUFFER, DROP      //      0 buffer drop
 160+ 7DA7 74 6A
 161+ 7DA9                                                              // loop
 162+ 7DA9 F8 63 F8 FF                  dw      C_LOOP, Flush_Do - $
 163+ 7DAD 6E 7B 3C 6B                  dw      BLK_FH, FETCH           // blk-fh @     ( ZX-Next dependance )
 164+ 7DB1 EC 67 74 6A                  dw      F_SYNC, DROP            // f_sync drop
 165+ 7DB5 23 69                        dw      EXIT                    // exit
 166+ 7DB7
 167+ 7DB7              //  ______________________________________________________________________
 168+ 7DB7              //
 169+ 7DB7              // f_getline    a m fh -- n
 170+ 7DB7              // Given an open filehandle read next line (terminated with $0D or $0A)
 171+ 7DB7              // Address a is left for subsequent processing
 172+ 7DB7              // and n as the actual number of byte read, that is the length of line
 173+ 7DB7                              Colon_Def F_GETLINE, "F_GETLINE", is_normal
 173+ 7DB7             >                New_Def  F_GETLINE, "F_GETLINE", Enter_Ptr, is_normal ; ok
 173+ 7DB7             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 173+ 7DB7             >
 173+ 7DB7             >                // dummy db directives used to calculate length of namec
 173+ 7DB7 46 5F 47 45 >                db      "F_GETLINE"
 173+ 7DBB 54 4C 49 4E >
 173+ 7DBF 45          >
 173+ 7DC0             >len_NFA         defl    $ - temp_NFA
 173+ 7DC0             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 173+ 7DB7             >
 173+ 7DB7 89          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 173+ 7DB8 46 5F 47 45 >                db      "F_GETLINE"               // name string in 7-bit ascii, but
 173+ 7DBC 54 4C 49 4E >
 173+ 7DC0 45          >
 173+ 7DC1             >                org     $-1                 // alter last byte of Name just above to set
 173+ 7DC0 C5          >                db      {b $} | END_BIT     // msb as name end
 173+ 7DC1             >
 173+ 7DC1 91 7D       >                dw      last_NFA            // Link to previous definition Name
 173+ 7DC3             >F_GETLINE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 173+ 7DC3 27 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 173+ 7DC5             >                else
 173+ 7DC5 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 173+ 7DC5             >                endif           ; ok        // for other definitions it "points" the correct handler
 173+ 7DC5             >                // Use of "; ok" to suppress "warning[fwdref]"
 173+ 7DC5             >
 173+ 7DC5             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 174+ 7DC5 51 69                        dw      TO_R                    // >r               ( a  m  )     \  fh
 175+ 7DC7 8C 6A                        dw      TUCK                    // tuck             ( m a m )
 176+ 7DC9 79 69 53 67                  dw      R_OP, F_FGETPOS         // r f_fgetpos      ( m a m d f )
 177+ 7DCD A9 63 2C 00                  dw      LIT, 44, QERROR         // 44 ?error        ( m a m d )
 177+ 7DD1 4B 70
 178+ 7DD3
 179+ 7DD3 F8 6A 64 6A                  dw      TWO_SWAP, OVER          // 2swap over       ( m d a m )
 180+ 7DD7 EA 69 9C 6A                  dw      ONE_PLUS, SWAP          // 1+ swap          ( m d a a+1 m )
 181+ 7DDB
 182+ 7DDB 79 69 71 67                  dw      R_OP, F_READ            // r f_read         ( m d a n f )
 183+ 7DDF A9 63 2E 00                  dw      LIT, 46, QERROR         // 46 ?error        ( m d a n )
 183+ 7DE3 4B 70
 184+ 7DE5                                                              // if ( at least 1 chr was read )  \  fh
 185+ 7DE5 E3 63                        dw      ZBRANCH
 186+ 7DE7 3C 00                        dw      FGetline_Else - $
 187+ 7DE9 A9 63 0A 00                  dw          LIT, 10, ENCLOSE    //      10 enclose       ( m d a x b x )
 187+ 7DED 56 65
 188+ 7DEF 74 6A 7F 6A                  dw          DROP, NIP           //      drop nip         ( m d a b )
 189+ 7DF3 9C 6A                        dw          SWAP                //      drop swap        ( m d b a )
 190+ 7DF5 A9 63 0D 00                  dw          LIT, 13, ENCLOSE    //      13 enclose       ( m d b a x c x )
 190+ 7DF9 56 65
 191+ 7DFB 74 6A 7F 6A                  dw          DROP, NIP           //      drop nip         ( m d b a c )
 192+ 7DFF B6 6A 2D 6F                  dw          ROT, MIN            //      rot min          ( m d a n )
 193+ 7E03 A9 6A 62 6E                  dw          DUP, SPAN, STORE    //      dup span !       ( m d a n )
 193+ 7E07 49 6B
 194+ 7E09 A9 6A 51 69                  dw          DUP, TO_R           //      dup >r           ( m d a n )      \ fh n
 195+ 7E0D F8 6A 65 69                  dw          TWO_SWAP, R_TO      //      2swap r>         ( m a n d n )    \ fh
 196+ 7E11 A2 6C D6 69                  dw          ZERO, DPLUS         //      0 d+             ( m a n d+n )
 197+ 7E15 65 69 2E 67                  dw          R_TO, F_SEEK        //      r> f_seek        ( m a n f )
 198+ 7E19 A9 63 2D 00                  dw          LIT, 45, QERROR     //      45 ?error        ( m a n )
 198+ 7E1D 4B 70
 199+ 7E1F                                                              // else
 200+ 7E1F CC 63                        dw      BRANCH
 201+ 7E21 0C 00                        dw      FGetline_Endif - $
 202+ 7E23              FGetline_Else:
 203+ 7E23 65 69                        dw          R_TO                //      r>              ( m d a fh )
 204+ 7E25 F8 6A EA 6A                  dw          TWO_SWAP, TWO_DROP  //      2swap 2drop     ( m a fh )
 205+ 7E29 74 6A A2 6C                  dw          DROP, ZERO          //      drop, 0         ( m a 0 )
 206+ 7E2D              FGetline_Endif:                                 // endif
 207+ 7E2D 51 69 A9 6A                  dw      TO_R, DUP, DUP          // >r dup dup           ( m a a a )
 207+ 7E31 A9 6A
 208+ 7E33 EA 69 9C 6A                  dw      ONE_PLUS, SWAP          // 1+ swap              ( m a a+1 a )
 209+ 7E37 79 69 11 68                  dw      R_OP, CMOVE             // r cmove              ( m a )
 210+ 7E3B 0A 6B C9 69                  dw      TWO_DUP, PLUS           // 2dup +               ( m a m+a )
 211+ 7E3F A2 6C 9C 6A                  dw      ZERO, SWAP              // 0 swap
 212+ 7E43 1C 6A 49 6B                  dw      CELL_MINUS,  STORE      // cell-  !             ( m a )
 213+ 7E47 79 69 C9 69                  dw      R_OP, PLUS, ONE_SUBTRACT// r + 1-               ( m a+n1 )
 213+ 7E4B F6 69
 214+ 7E4D 9C 6A 79 69                  dw      SWAP, R_OP, SUBTRACT    // swap r -             ( a+n+1 m-n )
 214+ 7E51 D4 6E
 215+ 7E53 9A 73                        dw      BLANKS                  // blanks
 216+ 7E55 65 69                        dw      R_TO                    // r>                   ( n )
 217+ 7E57 23 69                        dw      EXIT                    // ;
 218+ 7E59
 219+ 7E59              //  ______________________________________________________________________
 220+ 7E59              //
 221+ 7E59              // f_include    fh --
 222+ 7E59              // Given a filehandle includes the source from file
 223+ 7E59                              Colon_Def F_INCLUDE, "F_INCLUDE", is_normal
 223+ 7E59             >                New_Def  F_INCLUDE, "F_INCLUDE", Enter_Ptr, is_normal ; ok
 223+ 7E59             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 223+ 7E59             >
 223+ 7E59             >                // dummy db directives used to calculate length of namec
 223+ 7E59 46 5F 49 4E >                db      "F_INCLUDE"
 223+ 7E5D 43 4C 55 44 >
 223+ 7E61 45          >
 223+ 7E62             >len_NFA         defl    $ - temp_NFA
 223+ 7E62             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 223+ 7E59             >
 223+ 7E59 89          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 223+ 7E5A 46 5F 49 4E >                db      "F_INCLUDE"               // name string in 7-bit ascii, but
 223+ 7E5E 43 4C 55 44 >
 223+ 7E62 45          >
 223+ 7E63             >                org     $-1                 // alter last byte of Name just above to set
 223+ 7E62 C5          >                db      {b $} | END_BIT     // msb as name end
 223+ 7E63             >
 223+ 7E63 B7 7D       >                dw      last_NFA            // Link to previous definition Name
 223+ 7E65             >F_INCLUDE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 223+ 7E65 27 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 223+ 7E67             >                else
 223+ 7E67 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 223+ 7E67             >                endif           ; ok        // for other definitions it "points" the correct handler
 223+ 7E67             >                // Use of "; ok" to suppress "warning[fwdref]"
 223+ 7E67             >
 223+ 7E67             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 224+ 7E67 A1 6D 3C 6B                  dw      BLK, FETCH, TO_R        // blk @ >r
 224+ 7E6B 51 69
 225+ 7E6D AA 6D 3C 6B                  dw      TO_IN, FETCH, TO_R      // >in @ >r
 225+ 7E71 51 69
 226+ 7E73 58 6E 3C 6B                  dw      SOURCE_ID, FETCH, TO_R  // source-id @ >r
 226+ 7E77 51 69
 227+ 7E79 79 69                        dw      R_OP                    // r
 228+ 7E7B                                                              // if
 229+ 7E7B E3 63                        dw      ZBRANCH
 230+ 7E7D 20 00                        dw      FInclude_Else_1 - $
 231+ 7E7F 79 69 53 67                  dw          R_OP, F_FGETPOS     //      r f_getpos
 232+ 7E83 A9 63 2C 00                  dw          LIT, 44, QERROR     //      44 ?error
 232+ 7E87 4B 70
 233+ 7E89 AA 6D 3C 6B                  dw          TO_IN, FETCH        //      >in @ 2-
 234+ 7E8D 29 6A                        dw          TWO_MINUS
 235+ 7E8F 62 6E 3C 6B                  dw          SPAN, FETCH         //      span @ -
 236+ 7E93 D4 6E                        dw          SUBTRACT
 237+ 7E95 C0 6E D6 69                  dw          S_TO_D, DPLUS       //      s>d d+
 238+ 7E99                                                              // else
 239+ 7E99 CC 63                        dw      BRANCH
 240+ 7E9B 06 00                        dw      FInclude_Endif_1 - $
 241+ 7E9D              FInclude_Else_1:
 242+ 7E9D A2 6C A2 6C                  dw          ZERO, ZERO          //      0 0
 243+ 7EA1                                                              // endif
 244+ 7EA1              FInclude_Endif_1:
 245+ 7EA1 51 69 51 69                  dw      TO_R, TO_R              // >r >r
 246+ 7EA5 58 6E 49 6B                  dw      SOURCE_ID, STORE        // source-id !
 247+ 7EA9              FInclude_Begin:                                 // begin
 248+ 7EA9 AA 6C 2D 7D                  dw          ONE, BLOCK, BBUF    //      1 block b/buf
 248+ 7EAD E2 6C
 249+ 7EAF 0A 6B 9A 73                  dw          TWO_DUP, BLANKS     //      2dup blanks
 250+ 7EB3 9C 6A EA 69                  dw          SWAP, ONE_PLUS      //      swap 1+
 251+ 7EB7 9C 6A 1C 6A                  dw          SWAP, CELL_MINUS    //      swap cell-
 252+ 7EBB 58 6E 3C 6B                  dw          SOURCE_ID, FETCH    //      source-id @
 253+ 7EBF C3 7D                        dw          F_GETLINE           //      f_getline
 254+ 7EC1                                                              // while
 255+ 7EC1 E3 63                        dw      ZBRANCH
 256+ 7EC3 14 00                        dw      FInclude_Repeat - $
 257+ 7EC5 AA 6C A1 6D                  dw          ONE, BLK, STORE     //      1 blk !
 257+ 7EC9 49 6B
 258+ 7ECB A2 6C AA 6D                  dw          ZERO, TO_IN, STORE  //      0 >in !
 258+ 7ECF 49 6B
 259+ 7ED1 72 77                        dw          INTERPRET           //      interpret
 260+ 7ED3 CC 63                        dw      BRANCH
 261+ 7ED5 D4 FF                        dw      FInclude_Begin - $
 262+ 7ED7              FInclude_Repeat:                                // repeat
 263+ 7ED7 58 6E 3C 6B                  dw      SOURCE_ID, FETCH        // source-id @
 264+ 7EDB A2 6C 58 6E                  dw      ZERO, SOURCE_ID, STORE  // 0 source-id !
 264+ 7EDF 49 6B
 265+ 7EE1 AF 67                        dw      F_CLOSE                 // f_close
 266+ 7EE3 A9 63 2A 00                  dw      LIT, 42, QERROR         // 42 ?error
 266+ 7EE7 4B 70
 267+ 7EE9 65 69 65 69                  dw      R_TO, R_TO, R_TO        // r> r> r>
 267+ 7EED 65 69
 268+ 7EEF A9 6A 58 6E                  dw      DUP, SOURCE_ID, STORE   // dup source-id !
 268+ 7EF3 49 6B
 269+ 7EF5                                                              // if
 270+ 7EF5 E3 63                        dw      ZBRANCH
 271+ 7EF7 12 00                        dw      FInclude_Else_2 - $
 272+ 7EF9 58 6E 3C 6B                  dw          SOURCE_ID, FETCH    //      source-id @
 273+ 7EFD 2E 67                        dw          F_SEEK              //      f_seek
 274+ 7EFF A9 63 2B 00                  dw          LIT, 43, QERROR     //      43, ?error
 274+ 7F03 4B 70
 275+ 7F05                                                              // else
 276+ 7F05 CC 63                        dw      BRANCH
 277+ 7F07 04 00                        dw      FInclude_Endif_2 - $
 278+ 7F09              FInclude_Else_2:
 279+ 7F09 EA 6A                        dw          TWO_DROP            //      2drop
 280+ 7F0B              FInclude_Endif_2:                               // endif
 281+ 7F0B 65 69 AA 6D                  dw      R_TO, TO_IN, STORE      // r> >in !
 281+ 7F0F 49 6B
 282+ 7F11 65 69 A1 6D                  dw      R_TO, BLK, STORE        // r> blk !
 282+ 7F15 49 6B
 283+ 7F17 23 69                        dw      EXIT                    // ;
 284+ 7F19
 285+ 7F19              //  ______________________________________________________________________
 286+ 7F19              //
 287+ 7F19              // open<         -- fh
 288+ 7F19              // Open the following filename and return it file-handle
 289+ 7F19              // Used in the form OPEN CCCC
 290+ 7F19                              Colon_Def OPEN_FH, "OPEN<", is_normal
 290+ 7F19             >                New_Def  OPEN_FH, "OPEN<", Enter_Ptr, is_normal ; ok
 290+ 7F19             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 290+ 7F19             >
 290+ 7F19             >                // dummy db directives used to calculate length of namec
 290+ 7F19 4F 50 45 4E >                db      "OPEN<"
 290+ 7F1D 3C          >
 290+ 7F1E             >len_NFA         defl    $ - temp_NFA
 290+ 7F1E             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 290+ 7F19             >
 290+ 7F19 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 290+ 7F1A 4F 50 45 4E >                db      "OPEN<"               // name string in 7-bit ascii, but
 290+ 7F1E 3C          >
 290+ 7F1F             >                org     $-1                 // alter last byte of Name just above to set
 290+ 7F1E BC          >                db      {b $} | END_BIT     // msb as name end
 290+ 7F1F             >
 290+ 7F1F 59 7E       >                dw      last_NFA            // Link to previous definition Name
 290+ 7F21             >OPEN_FH:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 290+ 7F21 27 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 290+ 7F23             >                else
 290+ 7F23 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 290+ 7F23             >                endif           ; ok        // for other definitions it "points" the correct handler
 290+ 7F23             >                // Use of "; ok" to suppress "warning[fwdref]"
 290+ 7F23             >
 290+ 7F23             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 291+ 7F23 CC 6C                        dw      BL
 292+ 7F25 D2 73 E5 71                  dw      WORD, COUNT, OVER       // bl word count over
 292+ 7F29 64 6A
 293+ 7F2B C9 69 A2 6C                  dw      PLUS, ZERO, SWAP, STORE // + 0 swap !
 293+ 7F2F 9C 6A 49 6B
 294+ 7F33 BF 73 AA 6C                  dw      PAD, ONE, F_OPEN        // pad 1 f_open
 294+ 7F37 C9 67
 295+ 7F39 A9 63 2B 00                  dw      LIT, 43                 // 43
 296+ 7F3D 4B 70                        dw      QERROR                  // ?error
 297+ 7F3F 23 69                        dw      EXIT                    // ;
 298+ 7F41
 299+ 7F41              //  ______________________________________________________________________
 300+ 7F41              //
 301+ 7F41              // include      -- cccc
 302+ 7F41              // Include the following filename
 303+ 7F41                              Colon_Def INCLUDE, "INCLUDE", is_normal
 303+ 7F41             >                New_Def  INCLUDE, "INCLUDE", Enter_Ptr, is_normal ; ok
 303+ 7F41             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 303+ 7F41             >
 303+ 7F41             >                // dummy db directives used to calculate length of namec
 303+ 7F41 49 4E 43 4C >                db      "INCLUDE"
 303+ 7F45 55 44 45    >
 303+ 7F48             >len_NFA         defl    $ - temp_NFA
 303+ 7F48             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 303+ 7F41             >
 303+ 7F41 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 303+ 7F42 49 4E 43 4C >                db      "INCLUDE"               // name string in 7-bit ascii, but
 303+ 7F46 55 44 45    >
 303+ 7F49             >                org     $-1                 // alter last byte of Name just above to set
 303+ 7F48 C5          >                db      {b $} | END_BIT     // msb as name end
 303+ 7F49             >
 303+ 7F49 19 7F       >                dw      last_NFA            // Link to previous definition Name
 303+ 7F4B             >INCLUDE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 303+ 7F4B 27 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 303+ 7F4D             >                else
 303+ 7F4D ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 303+ 7F4D             >                endif           ; ok        // for other definitions it "points" the correct handler
 303+ 7F4D             >                // Use of "; ok" to suppress "warning[fwdref]"
 303+ 7F4D             >
 303+ 7F4D             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 304+ 7F4D 21 7F                        dw      OPEN_FH                 // open
 305+ 7F4F A9 6A 65 7E                  dw      DUP, F_INCLUDE          // dup f_include
 306+ 7F53 AF 67 74 6A                  dw      F_CLOSE, DROP           // f_close drop
 307+ 7F57 23 69                        dw      EXIT                    // ;
 308+ 7F59
 309+ 7F59              //  ______________________________________________________________________
 310+ 7F59              //
 311+ 7F59              // needs
 312+ 7F59              // check for cccc exists in vocabulary
 313+ 7F59              // if it doesn't then  INCLUDE  inc/cccc.F
 314+ 7F59
 315+ 7F59              // temp filename cccc.f as counted string zero-padded
 316+ 7F59                              New_Def NEEDS_W,   "NEEDS-W", Create_Ptr, is_normal
 316+ 7F59             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 316+ 7F59             >
 316+ 7F59             >                // dummy db directives used to calculate length of namec
 316+ 7F59 4E 45 45 44 >                db      "NEEDS-W"
 316+ 7F5D 53 2D 57    >
 316+ 7F60             >len_NFA         defl    $ - temp_NFA
 316+ 7F60             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 316+ 7F59             >
 316+ 7F59 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 316+ 7F5A 4E 45 45 44 >                db      "NEEDS-W"               // name string in 7-bit ascii, but
 316+ 7F5E 53 2D 57    >
 316+ 7F61             >                org     $-1                 // alter last byte of Name just above to set
 316+ 7F60 D7          >                db      {b $} | END_BIT     // msb as name end
 316+ 7F61             >
 316+ 7F61 41 7F       >                dw      last_NFA            // Link to previous definition Name
 316+ 7F63             >NEEDS_W:          if Create_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 316+ 7F63 85 76       >                dw      Create_Ptr ; ok        // for primitive definitions  actual code
 316+ 7F65             >                else
 316+ 7F65 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 316+ 7F65             >                endif           ; ok        // for other definitions it "points" the correct handler
 316+ 7F65             >                // Use of "; ok" to suppress "warning[fwdref]"
 316+ 7F65             >
 316+ 7F65             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 317+ 7F65 00 00 00...                  ds      35                      // 32 + .f + 0x00 = len 35
 318+ 7F88              // temp complete path+filename
 319+ 7F88                              New_Def NEEDS_FN,  "NEEDS-FN", Create_Ptr, is_normal
 319+ 7F88             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 319+ 7F88             >
 319+ 7F88             >                // dummy db directives used to calculate length of namec
 319+ 7F88 4E 45 45 44 >                db      "NEEDS-FN"
 319+ 7F8C 53 2D 46 4E >
 319+ 7F90             >len_NFA         defl    $ - temp_NFA
 319+ 7F90             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 319+ 7F88             >
 319+ 7F88 88          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 319+ 7F89 4E 45 45 44 >                db      "NEEDS-FN"               // name string in 7-bit ascii, but
 319+ 7F8D 53 2D 46 4E >
 319+ 7F91             >                org     $-1                 // alter last byte of Name just above to set
 319+ 7F90 CE          >                db      {b $} | END_BIT     // msb as name end
 319+ 7F91             >
 319+ 7F91 59 7F       >                dw      last_NFA            // Link to previous definition Name
 319+ 7F93             >NEEDS_FN:          if Create_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 319+ 7F93 85 76       >                dw      Create_Ptr ; ok        // for primitive definitions  actual code
 319+ 7F95             >                else
 319+ 7F95 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 319+ 7F95             >                endif           ; ok        // for other definitions it "points" the correct handler
 319+ 7F95             >                // Use of "; ok" to suppress "warning[fwdref]"
 319+ 7F95             >
 319+ 7F95             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 320+ 7F95 00 00 00...                  ds      40
 321+ 7FBD              // constant path
 322+ 7FBD                              New_Def NEEDS_INC,  "NEEDS-INC", Create_Ptr, is_normal
 322+ 7FBD             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 322+ 7FBD             >
 322+ 7FBD             >                // dummy db directives used to calculate length of namec
 322+ 7FBD 4E 45 45 44 >                db      "NEEDS-INC"
 322+ 7FC1 53 2D 49 4E >
 322+ 7FC5 43          >
 322+ 7FC6             >len_NFA         defl    $ - temp_NFA
 322+ 7FC6             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 322+ 7FBD             >
 322+ 7FBD 89          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 322+ 7FBE 4E 45 45 44 >                db      "NEEDS-INC"               // name string in 7-bit ascii, but
 322+ 7FC2 53 2D 49 4E >
 322+ 7FC6 43          >
 322+ 7FC7             >                org     $-1                 // alter last byte of Name just above to set
 322+ 7FC6 C3          >                db      {b $} | END_BIT     // msb as name end
 322+ 7FC7             >
 322+ 7FC7 88 7F       >                dw      last_NFA            // Link to previous definition Name
 322+ 7FC9             >NEEDS_INC:          if Create_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 322+ 7FC9 85 76       >                dw      Create_Ptr ; ok        // for primitive definitions  actual code
 322+ 7FCB             >                else
 322+ 7FCB ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 322+ 7FCB             >                endif           ; ok        // for other definitions it "points" the correct handler
 322+ 7FCB             >                // Use of "; ok" to suppress "warning[fwdref]"
 322+ 7FCB             >
 322+ 7FCB             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 323+ 7FCB 04 69 6E 63                  db      4, "inc/", 0
 323+ 7FCF 2F 00
 324+ 7FD1                              New_Def NEEDS_LIB,  "NEEDS-LIB", Create_Ptr, is_normal
 324+ 7FD1             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 324+ 7FD1             >
 324+ 7FD1             >                // dummy db directives used to calculate length of namec
 324+ 7FD1 4E 45 45 44 >                db      "NEEDS-LIB"
 324+ 7FD5 53 2D 4C 49 >
 324+ 7FD9 42          >
 324+ 7FDA             >len_NFA         defl    $ - temp_NFA
 324+ 7FDA             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 324+ 7FD1             >
 324+ 7FD1 89          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 324+ 7FD2 4E 45 45 44 >                db      "NEEDS-LIB"               // name string in 7-bit ascii, but
 324+ 7FD6 53 2D 4C 49 >
 324+ 7FDA 42          >
 324+ 7FDB             >                org     $-1                 // alter last byte of Name just above to set
 324+ 7FDA C2          >                db      {b $} | END_BIT     // msb as name end
 324+ 7FDB             >
 324+ 7FDB BD 7F       >                dw      last_NFA            // Link to previous definition Name
 324+ 7FDD             >NEEDS_LIB:          if Create_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 324+ 7FDD 85 76       >                dw      Create_Ptr ; ok        // for primitive definitions  actual code
 324+ 7FDF             >                else
 324+ 7FDF ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 324+ 7FDF             >                endif           ; ok        // for other definitions it "points" the correct handler
 324+ 7FDF             >                // Use of "; ok" to suppress "warning[fwdref]"
 324+ 7FDF             >
 324+ 7FDF             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 325+ 7FDF 04 6C 69 62                  db      4, "lib/", 0
 325+ 7FE3 2F 00
 326+ 7FE5
 327+ 7FE5              // Concatenate path at a and filename and include it
 328+ 7FE5              // No error is issued if filename doesn't exist.
 329+ 7FE5                              Colon_Def NEEDS_SLASH, "NEEDS/", is_normal
 329+ 7FE5             >                New_Def  NEEDS_SLASH, "NEEDS/", Enter_Ptr, is_normal ; ok
 329+ 7FE5             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 329+ 7FE5             >
 329+ 7FE5             >                // dummy db directives used to calculate length of namec
 329+ 7FE5 4E 45 45 44 >                db      "NEEDS/"
 329+ 7FE9 53 2F       >
 329+ 7FEB             >len_NFA         defl    $ - temp_NFA
 329+ 7FEB             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 329+ 7FE5             >
 329+ 7FE5 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 329+ 7FE6 4E 45 45 44 >                db      "NEEDS/"               // name string in 7-bit ascii, but
 329+ 7FEA 53 2F       >
 329+ 7FEC             >                org     $-1                 // alter last byte of Name just above to set
 329+ 7FEB AF          >                db      {b $} | END_BIT     // msb as name end
 329+ 7FEC             >
 329+ 7FEC D1 7F       >                dw      last_NFA            // Link to previous definition Name
 329+ 7FEE             >NEEDS_SLASH:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 329+ 7FEE 27 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 329+ 7FF0             >                else
 329+ 7FF0 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 329+ 7FF0             >                endif           ; ok        // for other definitions it "points" the correct handler
 329+ 7FF0             >                // Use of "; ok" to suppress "warning[fwdref]"
 329+ 7FF0             >
 329+ 7FF0             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 330+ 7FF0 E5 71 8C 6A                  dw      COUNT, TUCK             // n a n
 331+ 7FF4 93 7F 9C 6A                  dw      NEEDS_FN, SWAP, CMOVE   // n        \ Path
 331+ 7FF8 11 68
 332+ 7FFA 93 7F C9 69                  dw      NEEDS_FN, PLUS          // a1+n     \ Concat
 333+ 7FFE 63 7F EA 69                  dw      NEEDS_W, ONE_PLUS, SWAP
 333+ 8002 9C 6A
 334+ 8004 A9 63 23 00                  dw      LIT, 35
 335+ 8008 11 68                        dw      CMOVE
 336+ 800A 93 7F                        dw      NEEDS_FN
 337+ 800C BF 73 AA 6C                  dw      PAD, ONE, F_OPEN
 337+ 8010 C9 67
 338+ 8012 86 69                        dw      ZEQUAL
 339+ 8014 E3 63                        dw      ZBRANCH
 340+ 8016 08 00                        dw      Needs_1 - $
 341+ 8018 65 7E                        dw          F_INCLUDE
 342+ 801A CC 63                        dw      BRANCH
 343+ 801C 04 00                        dw      Needs_2 - $
 344+ 801E              Needs_1:
 345+ 801E              //              dw          NEEDS_W, COUNT, TYPE, SPACE
 346+ 801E              //              dw          LIT, 43, MESSAGE
 347+ 801E 74 6A                        dw          DROP
 348+ 8020              Needs_2:
 349+ 8020 23 69                        dw      EXIT                    // ;
 350+ 8022
 351+ 8022
 352+ 8022                              New_Def NCDM,   "NCDM", Create_Ptr, is_normal
 352+ 8022             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 352+ 8022             >
 352+ 8022             >                // dummy db directives used to calculate length of namec
 352+ 8022 4E 43 44 4D >                db      "NCDM"
 352+ 8026             >len_NFA         defl    $ - temp_NFA
 352+ 8026             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 352+ 8022             >
 352+ 8022 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 352+ 8023 4E 43 44 4D >                db      "NCDM"               // name string in 7-bit ascii, but
 352+ 8027             >                org     $-1                 // alter last byte of Name just above to set
 352+ 8026 CD          >                db      {b $} | END_BIT     // msb as name end
 352+ 8027             >
 352+ 8027 E5 7F       >                dw      last_NFA            // Link to previous definition Name
 352+ 8029             >NCDM:          if Create_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 352+ 8029 85 76       >                dw      Create_Ptr ; ok        // for primitive definitions  actual code
 352+ 802B             >                else
 352+ 802B ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 352+ 802B             >                endif           ; ok        // for other definitions it "points" the correct handler
 352+ 802B             >                // Use of "; ok" to suppress "warning[fwdref]"
 352+ 802B             >
 352+ 802B             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 353+ 802B 25 5E 25 26                  db $25, $5E, $25, $26, $24, $5F, $7B, $7D, $7E
 353+ 802F 24 5F 7B 7D
 353+ 8033 7E
 354+ 8034
 355+ 8034                              New_Def NDOM,   "NDOM", Create_Ptr, is_normal
 355+ 8034             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 355+ 8034             >
 355+ 8034             >                // dummy db directives used to calculate length of namec
 355+ 8034 4E 44 4F 4D >                db      "NDOM"
 355+ 8038             >len_NFA         defl    $ - temp_NFA
 355+ 8038             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 355+ 8034             >
 355+ 8034 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 355+ 8035 4E 44 4F 4D >                db      "NDOM"               // name string in 7-bit ascii, but
 355+ 8039             >                org     $-1                 // alter last byte of Name just above to set
 355+ 8038 CD          >                db      {b $} | END_BIT     // msb as name end
 355+ 8039             >
 355+ 8039 22 80       >                dw      last_NFA            // Link to previous definition Name
 355+ 803B             >NDOM:          if Create_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 355+ 803B 85 76       >                dw      Create_Ptr ; ok        // for primitive definitions  actual code
 355+ 803D             >                else
 355+ 803D ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 355+ 803D             >                endif           ; ok        // for other definitions it "points" the correct handler
 355+ 803D             >                // Use of "; ok" to suppress "warning[fwdref]"
 355+ 803D             >
 355+ 803D             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 356+ 803D 3A 3F 2F 2A                  db $3A, $3F, $2F, $2A, $7C, $5C, $3C, $3E, $22
 356+ 8041 7C 5C 3C 3E
 356+ 8045 22
 357+ 8046
 358+ 8046
 359+ 8046              // Replace illegal character in filename using the map here above
 360+ 8046              // at the moment we need only  "
 361+ 8046                              Colon_Def NEEDS_CHECK, "NEEDS-CH", is_normal
 361+ 8046             >                New_Def  NEEDS_CHECK, "NEEDS-CH", Enter_Ptr, is_normal ; ok
 361+ 8046             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 361+ 8046             >
 361+ 8046             >                // dummy db directives used to calculate length of namec
 361+ 8046 4E 45 45 44 >                db      "NEEDS-CH"
 361+ 804A 53 2D 43 48 >
 361+ 804E             >len_NFA         defl    $ - temp_NFA
 361+ 804E             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 361+ 8046             >
 361+ 8046 88          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 361+ 8047 4E 45 45 44 >                db      "NEEDS-CH"               // name string in 7-bit ascii, but
 361+ 804B 53 2D 43 48 >
 361+ 804F             >                org     $-1                 // alter last byte of Name just above to set
 361+ 804E C8          >                db      {b $} | END_BIT     // msb as name end
 361+ 804F             >
 361+ 804F 34 80       >                dw      last_NFA            // Link to previous definition Name
 361+ 8051             >NEEDS_CHECK:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 361+ 8051 27 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 361+ 8053             >                else
 361+ 8053 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 361+ 8053             >                endif           ; ok        // for other definitions it "points" the correct handler
 361+ 8053             >                // Use of "; ok" to suppress "warning[fwdref]"
 361+ 8053             >
 361+ 8053             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 362+ 8053 E5 71 FA 71                  dw      COUNT, BOUNDS
 363+ 8057 6B 64                        dw      C_DO
 364+ 8059              Needs_3:
 365+ 8059 29 80 3B 80                  dw          NCDM, NDOM, LIT, 9
 365+ 805D A9 63 09 00
 366+ 8061 76 64 57 6B                  dw          I, CFETCH
 367+ 8065 90 65                        dw          C_MAP
 368+ 8067 76 64 65 6B                  dw          I, CSTORE
 369+ 806B              Needs_4:
 370+ 806B F8 63                        dw      C_LOOP
 371+ 806D EC FF                        dw      Needs_3 - $
 372+ 806F 23 69                        dw      EXIT
 373+ 8071
 374+ 8071
 375+ 8071              // include  "path/cccc.f" if cccc is not defined
 376+ 8071              // filename cccc.f is temporary stored at NEEDS-W
 377+ 8071                              Colon_Def NEEDS_PATH, "NEEDS-F", is_normal
 377+ 8071             >                New_Def  NEEDS_PATH, "NEEDS-F", Enter_Ptr, is_normal ; ok
 377+ 8071             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 377+ 8071             >
 377+ 8071             >                // dummy db directives used to calculate length of namec
 377+ 8071 4E 45 45 44 >                db      "NEEDS-F"
 377+ 8075 53 2D 46    >
 377+ 8078             >len_NFA         defl    $ - temp_NFA
 377+ 8078             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 377+ 8071             >
 377+ 8071 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 377+ 8072 4E 45 45 44 >                db      "NEEDS-F"               // name string in 7-bit ascii, but
 377+ 8076 53 2D 46    >
 377+ 8079             >                org     $-1                 // alter last byte of Name just above to set
 377+ 8078 C6          >                db      {b $} | END_BIT     // msb as name end
 377+ 8079             >
 377+ 8079 46 80       >                dw      last_NFA            // Link to previous definition Name
 377+ 807B             >NEEDS_PATH:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 377+ 807B 27 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 377+ 807D             >                else
 377+ 807D ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 377+ 807D             >                endif           ; ok        // for other definitions it "points" the correct handler
 377+ 807D             >                // Use of "; ok" to suppress "warning[fwdref]"
 377+ 807D             >
 377+ 807D             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 378+ 807D 84 75                        dw      LFIND
 379+ 807F E3 63                        dw      ZBRANCH
 380+ 8081 0A 00                        dw      Needs_5 - $
 381+ 8083
 382+ 8083 74 6A EA 6A                  dw          DROP, TWO_DROP
 383+ 8087 CC 63                        dw      BRANCH
 384+ 8089 2C 00                        dw      Needs_6 - $
 385+ 808B              Needs_5:
 386+ 808B 63 7F                        dw          NEEDS_W
 387+ 808D A9 63 23 00                  dw          LIT, 35
 388+ 8091 89 73                        dw          ERASE                   // a
 389+ 8093 81 6E 57 6B                  dw          HERE, CFETCH, ONE_PLUS  // a n
 389+ 8097 EA 69
 390+ 8099 81 6E 64 6A                  dw          HERE, OVER              // a n here n
 391+ 809D 63 7F 9C 6A                  dw          NEEDS_W, SWAP, CMOVE    // a n
 391+ 80A1 11 68
 392+ 80A3 63 7F 51 80                  dw          NEEDS_W, NEEDS_CHECK
 393+ 80A7 63 7F C9 69                  dw          NEEDS_W, PLUS           // a a1+1
 394+ 80AB A9 63 2E 66                  dw          LIT, $662E              // a a1+1 ".F"
 395+ 80AF 9C 6A 49 6B                  dw          SWAP, STORE             // a
 396+ 80B3 EE 7F                        dw          NEEDS_SLASH
 397+ 80B5              Needs_6:
 398+ 80B5 23 69                        dw      EXIT
 399+ 80B7
 400+ 80B7
 401+ 80B7              // check for cccc exists in vocabulary
 402+ 80B7              // if it doesn't then  INCLUDE  inc/cccc.F
 403+ 80B7              // search in inc subdirectory
 404+ 80B7                              Colon_Def NEEDS, "NEEDS", is_normal
 404+ 80B7             >                New_Def  NEEDS, "NEEDS", Enter_Ptr, is_normal ; ok
 404+ 80B7             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 404+ 80B7             >
 404+ 80B7             >                // dummy db directives used to calculate length of namec
 404+ 80B7 4E 45 45 44 >                db      "NEEDS"
 404+ 80BB 53          >
 404+ 80BC             >len_NFA         defl    $ - temp_NFA
 404+ 80BC             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 404+ 80B7             >
 404+ 80B7 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 404+ 80B8 4E 45 45 44 >                db      "NEEDS"               // name string in 7-bit ascii, but
 404+ 80BC 53          >
 404+ 80BD             >                org     $-1                 // alter last byte of Name just above to set
 404+ 80BC D3          >                db      {b $} | END_BIT     // msb as name end
 404+ 80BD             >
 404+ 80BD 71 80       >                dw      last_NFA            // Link to previous definition Name
 404+ 80BF             >NEEDS:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 404+ 80BF 27 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 404+ 80C1             >                else
 404+ 80C1 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 404+ 80C1             >                endif           ; ok        // for other definitions it "points" the correct handler
 404+ 80C1             >                // Use of "; ok" to suppress "warning[fwdref]"
 404+ 80C1             >
 404+ 80C1             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 405+ 80C1 AA 6D 3C 6B                  dw      TO_IN, FETCH
 406+ 80C5 A9 6A                        dw      DUP
 407+ 80C7 C9 7F 7B 80                  dw      NEEDS_INC, NEEDS_PATH
 408+ 80CB AA 6D 49 6B                  dw      TO_IN, STORE
 409+ 80CF DD 7F 7B 80                  dw      NEEDS_LIB, NEEDS_PATH
 410+ 80D3 AA 6D 49 6B                  dw      TO_IN, STORE
 411+ 80D7 84 75                        dw      LFIND
 412+ 80D9 E3 63                        dw      ZBRANCH
 413+ 80DB 08 00                        dw      Needs_10 - $
 414+ 80DD EA 6A                        dw          TWO_DROP
 415+ 80DF CC 63                        dw      BRANCH
 416+ 80E1 10 00                        dw      Needs_11 - $
 417+ 80E3              Needs_10:
 418+ 80E3 63 7F E5 71                  dw      NEEDS_W, COUNT, TYPE, SPACE
 418+ 80E7 0B 72 91 6F
 419+ 80EB A9 63 2B 00                  dw      LIT, 43, MESSAGE
 419+ 80EF 58 7A
 420+ 80F1              Needs_11:
 421+ 80F1 23 69                        dw      EXIT
 422+ 80F3
 423+ 80F3
 424+ 80F3              //  ______________________________________________________________________
 425+ 80F3              //
 426+ 80F3              // load+        n --
 427+ 80F3                              Colon_Def LOAD_P, "LOAD+", is_normal
 427+ 80F3             >                New_Def  LOAD_P, "LOAD+", Enter_Ptr, is_normal ; ok
 427+ 80F3             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 427+ 80F3             >
 427+ 80F3             >                // dummy db directives used to calculate length of namec
 427+ 80F3 4C 4F 41 44 >                db      "LOAD+"
 427+ 80F7 2B          >
 427+ 80F8             >len_NFA         defl    $ - temp_NFA
 427+ 80F8             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 427+ 80F3             >
 427+ 80F3 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 427+ 80F4 4C 4F 41 44 >                db      "LOAD+"               // name string in 7-bit ascii, but
 427+ 80F8 2B          >
 427+ 80F9             >                org     $-1                 // alter last byte of Name just above to set
 427+ 80F8 AB          >                db      {b $} | END_BIT     // msb as name end
 427+ 80F9             >
 427+ 80F9 B7 80       >                dw      last_NFA            // Link to previous definition Name
 427+ 80FB             >LOAD_P:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 427+ 80FB 27 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 427+ 80FD             >                else
 427+ 80FD ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 427+ 80FD             >                endif           ; ok        // for other definitions it "points" the correct handler
 427+ 80FD             >                // Use of "; ok" to suppress "warning[fwdref]"
 427+ 80FD             >
 427+ 80FD             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 428+ 80FD A1 6D 3C 6B                  dw      BLK, FETCH, TO_R        // blk @ >r
 428+ 8101 51 69
 429+ 8103 AA 6D 3C 6B                  dw      TO_IN, FETCH, TO_R      // >in @ >r
 429+ 8107 51 69
 430+ 8109
 431+ 8109 A2 6C AA 6D                  dw      ZERO, TO_IN, STORE      // 0 >in !
 431+ 810D 49 6B
 432+ 810F EE 6C BF 79                  dw      BSCR, MUL, BLK, STORE   // b/scr * blk !
 432+ 8113 A1 6D 49 6B
 433+ 8117 72 77                        dw      INTERPRET               // interpret
 434+ 8119
 435+ 8119 65 69 AA 6D                  dw      R_TO, TO_IN, STORE      // r> >in !
 435+ 811D 49 6B
 436+ 811F 65 69 A1 6D                  dw      R_TO, BLK, STORE        // r> blk !
 436+ 8123 49 6B
 437+ 8125 23 69                        dw      EXIT                    // ;
 438+ 8127
 439+ 8127              //  ______________________________________________________________________
 440+ 8127              //
 441+ 8127              // -->          --
 442+ 8127                              Colon_Def LOAD_NEXT, "-->", is_immediate
 442+ 8127             >                New_Def  LOAD_NEXT, "-->", Enter_Ptr, is_immediate ; ok
 442+ 8127             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 442+ 8127             >
 442+ 8127             >                // dummy db directives used to calculate length of namec
 442+ 8127 2D 2D 3E    >                db      "-->"
 442+ 812A             >len_NFA         defl    $ - temp_NFA
 442+ 812A             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 442+ 8127             >
 442+ 8127 C3          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 442+ 8128 2D 2D 3E    >                db      "-->"               // name string in 7-bit ascii, but
 442+ 812B             >                org     $-1                 // alter last byte of Name just above to set
 442+ 812A BE          >                db      {b $} | END_BIT     // msb as name end
 442+ 812B             >
 442+ 812B F3 80       >                dw      last_NFA            // Link to previous definition Name
 442+ 812D             >LOAD_NEXT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 442+ 812D 27 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 442+ 812F             >                else
 442+ 812F ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 442+ 812F             >                endif           ; ok        // for other definitions it "points" the correct handler
 442+ 812F             >                // Use of "; ok" to suppress "warning[fwdref]"
 442+ 812F             >
 442+ 812F             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 443+ 812F C4 70                        dw      QLOADING                // ?loading
 444+ 8131 A2 6C AA 6D                  dw      ZERO, TO_IN, STORE      // 0 >in !
 444+ 8135 49 6B
 445+ 8137 EE 6C                        dw      BSCR                    // b/scr
 446+ 8139 A1 6D 3C 6B                  dw      BLK, FETCH              // blk @
 447+ 813D 64 6A                        dw      OVER                    // over
 448+ 813F EC 79                        dw      MOD                     // mod
 449+ 8141 D4 6E                        dw      SUBTRACT                // -
 450+ 8143 A1 6D 19 6B                  dw      BLK, PLUSSTORE          // +!
 451+ 8147 23 69                        dw      EXIT                    // ;
 452+ 8149
 453+ 8149              //  ______________________________________________________________________
 454+ 8149              //
 455+ 8149              // '            -- xt
 456+ 8149                              Colon_Def TICK, "'", is_normal
 456+ 8149             >                New_Def  TICK, "'", Enter_Ptr, is_normal ; ok
 456+ 8149             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 456+ 8149             >
 456+ 8149             >                // dummy db directives used to calculate length of namec
 456+ 8149 27          >                db      "'"
 456+ 814A             >len_NFA         defl    $ - temp_NFA
 456+ 814A             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 456+ 8149             >
 456+ 8149 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 456+ 814A 27          >                db      "'"               // name string in 7-bit ascii, but
 456+ 814B             >                org     $-1                 // alter last byte of Name just above to set
 456+ 814A A7          >                db      {b $} | END_BIT     // msb as name end
 456+ 814B             >
 456+ 814B 27 81       >                dw      last_NFA            // Link to previous definition Name
 456+ 814D             >TICK:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 456+ 814D 27 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 456+ 814F             >                else
 456+ 814F ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 456+ 814F             >                endif           ; ok        // for other definitions it "points" the correct handler
 456+ 814F             >                // Use of "; ok" to suppress "warning[fwdref]"
 456+ 814F             >
 456+ 814F             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 457+ 814F 84 75                        dw      LFIND                   // -find
 458+ 8151 86 69                        dw      ZEQUAL                  // 0=
 459+ 8153 A2 6C 4B 70                  dw      ZERO, QERROR            // 0 ?error
 460+ 8157 74 6A                        dw      DROP                    // drop
 461+ 8159 23 69                        dw      EXIT                    // ;
 462+ 815B
 463+ 815B              //  ______________________________________________________________________
 464+ 815B              //
 465+ 815B              // forget       -- cccc
 466+ 815B                              Colon_Def FORGET, "FORGET", is_normal
 466+ 815B             >                New_Def  FORGET, "FORGET", Enter_Ptr, is_normal ; ok
 466+ 815B             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 466+ 815B             >
 466+ 815B             >                // dummy db directives used to calculate length of namec
 466+ 815B 46 4F 52 47 >                db      "FORGET"
 466+ 815F 45 54       >
 466+ 8161             >len_NFA         defl    $ - temp_NFA
 466+ 8161             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 466+ 815B             >
 466+ 815B 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 466+ 815C 46 4F 52 47 >                db      "FORGET"               // name string in 7-bit ascii, but
 466+ 8160 45 54       >
 466+ 8162             >                org     $-1                 // alter last byte of Name just above to set
 466+ 8161 D4          >                db      {b $} | END_BIT     // msb as name end
 466+ 8162             >
 466+ 8162 49 81       >                dw      last_NFA            // Link to previous definition Name
 466+ 8164             >FORGET:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 466+ 8164 27 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 466+ 8166             >                else
 466+ 8166 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 466+ 8166             >                endif           ; ok        // for other definitions it "points" the correct handler
 466+ 8166             >                // Use of "; ok" to suppress "warning[fwdref]"
 466+ 8166             >
 466+ 8166             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 467+ 8166 E2 6D 3C 6B                  dw      CURRENT, FETCH          // current @
 468+ 816A D5 6D 3C 6B                  dw      CONTEXT, FETCH          // context @
 469+ 816E D4 6E A9 63                  dw      SUBTRACT, LIT, 23, QERROR // - 23 ?error
 469+ 8172 17 00 4B 70
 470+ 8176 4D 81 1B 70                  dw      TICK, TO_BODY           // ' >body
 471+ 817A A9 6A 58 6D                  dw      DUP, FENCE, FETCH       // dup fence @
 471+ 817E 3C 6B
 472+ 8180 EF 6E A9 63                  dw      ULESS, LIT, 21, QERROR  // u< 21 ?error
 472+ 8184 15 00 4B 70
 473+ 8188 A9 6A F1 6F                  dw      DUP, NFA, DP, STORE     // dup nfa dp !
 473+ 818C 60 6D 49 6B
 474+ 8190 D7 6F 3C 6B                  dw      LFA, FETCH              // lfa @
 475+ 8194 D5 6D 3C 6B                  dw      CONTEXT, FETCH, STORE   // context @ !
 475+ 8198 49 6B
 476+ 819A 23 69                        dw      EXIT                    // ;
 477+ 819C
 478+ 819C              //  ______________________________________________________________________
 479+ 819C              //
 480+ 819C              // marker       -- cccc
 481+ 819C                              Colon_Def MARKER, "MARKER", is_immediate
 481+ 819C             >                New_Def  MARKER, "MARKER", Enter_Ptr, is_immediate ; ok
 481+ 819C             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 481+ 819C             >
 481+ 819C             >                // dummy db directives used to calculate length of namec
 481+ 819C 4D 41 52 4B >                db      "MARKER"
 481+ 81A0 45 52       >
 481+ 81A2             >len_NFA         defl    $ - temp_NFA
 481+ 81A2             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 481+ 819C             >
 481+ 819C C6          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 481+ 819D 4D 41 52 4B >                db      "MARKER"               // name string in 7-bit ascii, but
 481+ 81A1 45 52       >
 481+ 81A3             >                org     $-1                 // alter last byte of Name just above to set
 481+ 81A2 D2          >                db      {b $} | END_BIT     // msb as name end
 481+ 81A3             >
 481+ 81A3 5B 81       >                dw      last_NFA            // Link to previous definition Name
 481+ 81A5             >MARKER:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 481+ 81A5 27 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 481+ 81A7             >                else
 481+ 81A7 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 481+ 81A7             >                endif           ; ok        // for other definitions it "points" the correct handler
 481+ 81A7             >                // Use of "; ok" to suppress "warning[fwdref]"
 481+ 81A7             >
 481+ 81A7             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 482+ 81A7 AE 71                        dw      CBUILDS
 483+ 81A9 6E 6D 3C 6B                  dw      VOC_LINK, FETCH, COMMA
 483+ 81AD 9D 6E
 484+ 81AF E2 6D 3C 6B                  dw      CURRENT, FETCH, COMMA
 484+ 81B3 9D 6E
 485+ 81B5 D5 6D 3C 6B                  dw      CONTEXT, FETCH, COMMA
 485+ 81B9 9D 6E
 486+ 81BB C7 6F 9D 6E                  dw      LATEST, COMMA
 487+ 81BF C7 6F 05 70                  dw      LATEST, PFA, LFA, FETCH, COMMA
 487+ 81C3 D7 6F 3C 6B
 487+ 81C7 9D 6E
 488+ 81C9 BE 71                        dw      DOES_TO
 489+ 81CB A9 6A 3C 6B                  dw      DUP, FETCH, VOC_LINK, STORE, CELL_PLUS
 489+ 81CF 6E 6D 49 6B
 489+ 81D3 12 6A
 490+ 81D5 A9 6A 3C 6B                  dw      DUP, FETCH, CURRENT, STORE, CELL_PLUS
 490+ 81D9 E2 6D 49 6B
 490+ 81DD 12 6A
 491+ 81DF A9 6A 3C 6B                  dw      DUP, FETCH, CONTEXT, STORE, CELL_PLUS
 491+ 81E3 D5 6D 49 6B
 491+ 81E7 12 6A
 492+ 81E9 A9 6A 3C 6B                  dw      DUP, FETCH, DP, STORE, CELL_PLUS
 492+ 81ED 60 6D 49 6B
 492+ 81F1 12 6A
 493+ 81F3 3C 6B E2 6D                  dw           FETCH, CURRENT, FETCH, STORE
 493+ 81F7 3C 6B 49 6B
 494+ 81FB 23 69                        dw      EXIT
 495+ 81FD
 496+ 81FD              //  ______________________________________________________________________
 497+ 81FD              //
 498+ 81FD              // spaces       n --
 499+ 81FD                              Colon_Def SPACES, "SPACES", is_normal
 499+ 81FD             >                New_Def  SPACES, "SPACES", Enter_Ptr, is_normal ; ok
 499+ 81FD             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 499+ 81FD             >
 499+ 81FD             >                // dummy db directives used to calculate length of namec
 499+ 81FD 53 50 41 43 >                db      "SPACES"
 499+ 8201 45 53       >
 499+ 8203             >len_NFA         defl    $ - temp_NFA
 499+ 8203             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 499+ 81FD             >
 499+ 81FD 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 499+ 81FE 53 50 41 43 >                db      "SPACES"               // name string in 7-bit ascii, but
 499+ 8202 45 53       >
 499+ 8204             >                org     $-1                 // alter last byte of Name just above to set
 499+ 8203 D3          >                db      {b $} | END_BIT     // msb as name end
 499+ 8204             >
 499+ 8204 9C 81       >                dw      last_NFA            // Link to previous definition Name
 499+ 8206             >SPACES:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 499+ 8206 27 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 499+ 8208             >                else
 499+ 8208 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 499+ 8208             >                endif           ; ok        // for other definitions it "points" the correct handler
 499+ 8208             >                // Use of "; ok" to suppress "warning[fwdref]"
 499+ 8208             >
 499+ 8208             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 500+ 8208 A2 6C 43 6F                  dw      ZERO, MAX
 501+ 820C A2 6C 3D 64                  dw      ZERO, C_Q_DO
 502+ 8210 08 00                        dw      Spaces_Leave - $
 503+ 8212              Spaces_Loop:
 504+ 8212 91 6F                        dw          SPACE
 505+ 8214 F8 63                        dw      C_LOOP
 506+ 8216 FC FF                        dw      Spaces_Loop - $
 507+ 8218              Spaces_Leave:
 508+ 8218 23 69                        dw      EXIT                    // ;
 509+ 821A
 510+ 821A              //  ______________________________________________________________________
 511+ 821A              //
 512+ 821A              // <#           --
 513+ 821A                              Colon_Def BEGIN_DASH, "<#", is_normal
 513+ 821A             >                New_Def  BEGIN_DASH, "<#", Enter_Ptr, is_normal ; ok
 513+ 821A             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 513+ 821A             >
 513+ 821A             >                // dummy db directives used to calculate length of namec
 513+ 821A 3C 23       >                db      "<#"
 513+ 821C             >len_NFA         defl    $ - temp_NFA
 513+ 821C             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 513+ 821A             >
 513+ 821A 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 513+ 821B 3C 23       >                db      "<#"               // name string in 7-bit ascii, but
 513+ 821D             >                org     $-1                 // alter last byte of Name just above to set
 513+ 821C A3          >                db      {b $} | END_BIT     // msb as name end
 513+ 821D             >
 513+ 821D FD 81       >                dw      last_NFA            // Link to previous definition Name
 513+ 821F             >BEGIN_DASH:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 513+ 821F 27 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 513+ 8221             >                else
 513+ 8221 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 513+ 8221             >                endif           ; ok        // for other definitions it "points" the correct handler
 513+ 8221             >                // Use of "; ok" to suppress "warning[fwdref]"
 513+ 8221             >
 513+ 8221             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 514+ 8221 BF 73 23 6E                  dw      PAD, HLD, STORE
 514+ 8225 49 6B
 515+ 8227 23 69                        dw      EXIT
 516+ 8229
 517+ 8229              //  ______________________________________________________________________
 518+ 8229              //
 519+ 8229              // #>           --
 520+ 8229                              Colon_Def DASH_END, "#>", is_normal
 520+ 8229             >                New_Def  DASH_END, "#>", Enter_Ptr, is_normal ; ok
 520+ 8229             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 520+ 8229             >
 520+ 8229             >                // dummy db directives used to calculate length of namec
 520+ 8229 23 3E       >                db      "#>"
 520+ 822B             >len_NFA         defl    $ - temp_NFA
 520+ 822B             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 520+ 8229             >
 520+ 8229 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 520+ 822A 23 3E       >                db      "#>"               // name string in 7-bit ascii, but
 520+ 822C             >                org     $-1                 // alter last byte of Name just above to set
 520+ 822B BE          >                db      {b $} | END_BIT     // msb as name end
 520+ 822C             >
 520+ 822C 1A 82       >                dw      last_NFA            // Link to previous definition Name
 520+ 822E             >DASH_END:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 520+ 822E 27 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 520+ 8230             >                else
 520+ 8230 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 520+ 8230             >                endif           ; ok        // for other definitions it "points" the correct handler
 520+ 8230             >                // Use of "; ok" to suppress "warning[fwdref]"
 520+ 8230             >
 520+ 8230             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 521+ 8230 EA 6A                        dw      TWO_DROP
 522+ 8232 23 6E 3C 6B                  dw      HLD, FETCH, PAD, OVER, SUBTRACT
 522+ 8236 BF 73 64 6A
 522+ 823A D4 6E
 523+ 823C 23 69                        dw      EXIT
 524+ 823E
 525+ 823E              //  ______________________________________________________________________
 526+ 823E              //
 527+ 823E              // sign         n d -- d
 528+ 823E                              Colon_Def SIGN, "SIGN", is_normal
 528+ 823E             >                New_Def  SIGN, "SIGN", Enter_Ptr, is_normal ; ok
 528+ 823E             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 528+ 823E             >
 528+ 823E             >                // dummy db directives used to calculate length of namec
 528+ 823E 53 49 47 4E >                db      "SIGN"
 528+ 8242             >len_NFA         defl    $ - temp_NFA
 528+ 8242             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 528+ 823E             >
 528+ 823E 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 528+ 823F 53 49 47 4E >                db      "SIGN"               // name string in 7-bit ascii, but
 528+ 8243             >                org     $-1                 // alter last byte of Name just above to set
 528+ 8242 CE          >                db      {b $} | END_BIT     // msb as name end
 528+ 8243             >
 528+ 8243 29 82       >                dw      last_NFA            // Link to previous definition Name
 528+ 8245             >SIGN:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 528+ 8245 27 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 528+ 8247             >                else
 528+ 8247 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 528+ 8247             >                endif           ; ok        // for other definitions it "points" the correct handler
 528+ 8247             >                // Use of "; ok" to suppress "warning[fwdref]"
 528+ 8247             >
 528+ 8247             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 529+ 8247 B6 6A A1 69                  dw      ROT, ZLESS
 530+ 824B E3 63                        dw      ZBRANCH
 531+ 824D 08 00                        dw      Sign_Endif - $
 532+ 824F A9 63 2D 00                  dw          LIT, 45, HOLD
 532+ 8253 A9 73
 533+ 8255              Sign_Endif:
 534+ 8255 23 69                        dw      EXIT
 535+ 8257
 536+ 8257              //  ______________________________________________________________________
 537+ 8257              //
 538+ 8257              // #           d1 -- d2
 539+ 8257                              Colon_Def DASH, "#", is_normal
 539+ 8257             >                New_Def  DASH, "#", Enter_Ptr, is_normal ; ok
 539+ 8257             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 539+ 8257             >
 539+ 8257             >                // dummy db directives used to calculate length of namec
 539+ 8257 23          >                db      "#"
 539+ 8258             >len_NFA         defl    $ - temp_NFA
 539+ 8258             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 539+ 8257             >
 539+ 8257 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 539+ 8258 23          >                db      "#"               // name string in 7-bit ascii, but
 539+ 8259             >                org     $-1                 // alter last byte of Name just above to set
 539+ 8258 A3          >                db      {b $} | END_BIT     // msb as name end
 539+ 8259             >
 539+ 8259 3E 82       >                dw      last_NFA            // Link to previous definition Name
 539+ 825B             >DASH:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 539+ 825B 27 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 539+ 825D             >                else
 539+ 825D ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 539+ 825D             >                endif           ; ok        // for other definitions it "points" the correct handler
 539+ 825D             >                // Use of "; ok" to suppress "warning[fwdref]"
 539+ 825D             >
 539+ 825D             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 540+ 825D F7 6D 3C 6B                  dw      BASE, FETCH
 541+ 8261
 542+ 8261 51 69                        dw      TO_R                    // >r           ( ud1 )
 543+ 8263 A2 6C 79 69                  dw      ZERO, R_OP, UMDIVMOD    // 0 r um/mod   ( l rem1 h/r )
 543+ 8267 75 68
 544+ 8269 65 69 9C 6A                  dw      R_TO, SWAP, TO_R        // r> swap >r   ( l rem )
 544+ 826D 51 69
 545+ 826F 75 68                        dw      UMDIVMOD                // um/mod       ( rem2 l/r )
 546+ 8271 65 69                        dw      R_TO                    // r>           ( rem2 l/r h/r )
 547+ 8273
 548+ 8273 B6 6A                        dw      ROT
 549+ 8275 A9 63 09 00                  dw      LIT, 9, OVER, LESS
 549+ 8279 64 6A 03 6F
 550+ 827D E3 63                        dw      ZBRANCH
 551+ 827F 08 00                        dw      Dash_Endif - $
 552+ 8281 A9 63 07 00                  dw          LIT, 7, PLUS
 552+ 8285 C9 69
 553+ 8287              Dash_Endif:
 554+ 8287
 555+ 8287 A9 63 30 00                  dw      LIT, 48, PLUS, HOLD
 555+ 828B C9 69 A9 73
 556+ 828F 23 69                        dw      EXIT
 557+ 8291
 558+ 8291              //  ______________________________________________________________________
 559+ 8291              //
 560+ 8291              // #s           d1 -- d2
 561+ 8291                              Colon_Def DASHES, "#S", is_normal
 561+ 8291             >                New_Def  DASHES, "#S", Enter_Ptr, is_normal ; ok
 561+ 8291             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 561+ 8291             >
 561+ 8291             >                // dummy db directives used to calculate length of namec
 561+ 8291 23 53       >                db      "#S"
 561+ 8293             >len_NFA         defl    $ - temp_NFA
 561+ 8293             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 561+ 8291             >
 561+ 8291 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 561+ 8292 23 53       >                db      "#S"               // name string in 7-bit ascii, but
 561+ 8294             >                org     $-1                 // alter last byte of Name just above to set
 561+ 8293 D3          >                db      {b $} | END_BIT     // msb as name end
 561+ 8294             >
 561+ 8294 57 82       >                dw      last_NFA            // Link to previous definition Name
 561+ 8296             >DASHES:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 561+ 8296 27 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 561+ 8298             >                else
 561+ 8298 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 561+ 8298             >                endif           ; ok        // for other definitions it "points" the correct handler
 561+ 8298             >                // Use of "; ok" to suppress "warning[fwdref]"
 561+ 8298             >
 561+ 8298             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 562+ 8298              Dashes_Begin:
 563+ 8298 5B 82 0A 6B                  dw      DASH, TWO_DUP
 564+ 829C C5 68 86 69                  dw          OR_OP, ZEQUAL
 565+ 82A0 E3 63                        dw      ZBRANCH
 566+ 82A2 F6 FF                        dw      Dashes_Begin - $
 567+ 82A4 23 69                        dw      EXIT
 568+ 82A6
 569+ 82A6              //  ______________________________________________________________________
 570+ 82A6              //
 571+ 82A6              // d.r          d n --
 572+ 82A6                              Colon_Def D_DOT_R, "D.R", is_normal
 572+ 82A6             >                New_Def  D_DOT_R, "D.R", Enter_Ptr, is_normal ; ok
 572+ 82A6             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 572+ 82A6             >
 572+ 82A6             >                // dummy db directives used to calculate length of namec
 572+ 82A6 44 2E 52    >                db      "D.R"
 572+ 82A9             >len_NFA         defl    $ - temp_NFA
 572+ 82A9             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 572+ 82A6             >
 572+ 82A6 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 572+ 82A7 44 2E 52    >                db      "D.R"               // name string in 7-bit ascii, but
 572+ 82AA             >                org     $-1                 // alter last byte of Name just above to set
 572+ 82A9 D2          >                db      {b $} | END_BIT     // msb as name end
 572+ 82AA             >
 572+ 82AA 91 82       >                dw      last_NFA            // Link to previous definition Name
 572+ 82AC             >D_DOT_R:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 572+ 82AC 27 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 572+ 82AE             >                else
 572+ 82AE ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 572+ 82AE             >                endif           ; ok        // for other definitions it "points" the correct handler
 572+ 82AE             >                // Use of "; ok" to suppress "warning[fwdref]"
 572+ 82AE             >
 572+ 82AE             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 573+ 82AE 51 69                        dw      TO_R
 574+ 82B0 8C 6A 61 79                  dw      TUCK, DABS
 575+ 82B4 1F 82 96 82                  dw      BEGIN_DASH, DASHES, SIGN, DASH_END
 575+ 82B8 45 82 2E 82
 576+ 82BC 65 69                        dw      R_TO
 577+ 82BE 64 6A D4 6E                  dw      OVER, SUBTRACT, SPACES, TYPE
 577+ 82C2 06 82 0B 72
 578+ 82C6 23 69                        dw      EXIT
 579+ 82C8
 580+ 82C8              //  ______________________________________________________________________
 581+ 82C8              //
 582+ 82C8              // .r           n1 n2 --
 583+ 82C8                              Colon_Def DOT_R, ".R", is_normal
 583+ 82C8             >                New_Def  DOT_R, ".R", Enter_Ptr, is_normal ; ok
 583+ 82C8             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 583+ 82C8             >
 583+ 82C8             >                // dummy db directives used to calculate length of namec
 583+ 82C8 2E 52       >                db      ".R"
 583+ 82CA             >len_NFA         defl    $ - temp_NFA
 583+ 82CA             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 583+ 82C8             >
 583+ 82C8 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 583+ 82C9 2E 52       >                db      ".R"               // name string in 7-bit ascii, but
 583+ 82CB             >                org     $-1                 // alter last byte of Name just above to set
 583+ 82CA D2          >                db      {b $} | END_BIT     // msb as name end
 583+ 82CB             >
 583+ 82CB A6 82       >                dw      last_NFA            // Link to previous definition Name
 583+ 82CD             >DOT_R:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 583+ 82CD 27 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 583+ 82CF             >                else
 583+ 82CF ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 583+ 82CF             >                endif           ; ok        // for other definitions it "points" the correct handler
 583+ 82CF             >                // Use of "; ok" to suppress "warning[fwdref]"
 583+ 82CF             >
 583+ 82CF             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 584+ 82CF 51 69                        dw      TO_R
 585+ 82D1 C0 6E 65 69                  dw      S_TO_D, R_TO
 586+ 82D5 AC 82                        dw      D_DOT_R
 587+ 82D7 23 69                        dw      EXIT
 588+ 82D9
 589+ 82D9              //  ______________________________________________________________________
 590+ 82D9              //
 591+ 82D9              // d.           d --
 592+ 82D9                              Colon_Def D_DOT, "D.", is_normal
 592+ 82D9             >                New_Def  D_DOT, "D.", Enter_Ptr, is_normal ; ok
 592+ 82D9             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 592+ 82D9             >
 592+ 82D9             >                // dummy db directives used to calculate length of namec
 592+ 82D9 44 2E       >                db      "D."
 592+ 82DB             >len_NFA         defl    $ - temp_NFA
 592+ 82DB             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 592+ 82D9             >
 592+ 82D9 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 592+ 82DA 44 2E       >                db      "D."               // name string in 7-bit ascii, but
 592+ 82DC             >                org     $-1                 // alter last byte of Name just above to set
 592+ 82DB AE          >                db      {b $} | END_BIT     // msb as name end
 592+ 82DC             >
 592+ 82DC C8 82       >                dw      last_NFA            // Link to previous definition Name
 592+ 82DE             >D_DOT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 592+ 82DE 27 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 592+ 82E0             >                else
 592+ 82E0 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 592+ 82E0             >                endif           ; ok        // for other definitions it "points" the correct handler
 592+ 82E0             >                // Use of "; ok" to suppress "warning[fwdref]"
 592+ 82E0             >
 592+ 82E0             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 593+ 82E0 A2 6C AC 82                  dw      ZERO, D_DOT_R, SPACE
 593+ 82E4 91 6F
 594+ 82E6 23 69                        dw      EXIT
 595+ 82E8
 596+ 82E8              //  ______________________________________________________________________
 597+ 82E8              //
 598+ 82E8              // .            n --
 599+ 82E8                              Colon_Def DOT, ".", is_normal
 599+ 82E8             >                New_Def  DOT, ".", Enter_Ptr, is_normal ; ok
 599+ 82E8             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 599+ 82E8             >
 599+ 82E8             >                // dummy db directives used to calculate length of namec
 599+ 82E8 2E          >                db      "."
 599+ 82E9             >len_NFA         defl    $ - temp_NFA
 599+ 82E9             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 599+ 82E8             >
 599+ 82E8 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 599+ 82E9 2E          >                db      "."               // name string in 7-bit ascii, but
 599+ 82EA             >                org     $-1                 // alter last byte of Name just above to set
 599+ 82E9 AE          >                db      {b $} | END_BIT     // msb as name end
 599+ 82EA             >
 599+ 82EA D9 82       >                dw      last_NFA            // Link to previous definition Name
 599+ 82EC             >DOT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 599+ 82EC 27 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 599+ 82EE             >                else
 599+ 82EE ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 599+ 82EE             >                endif           ; ok        // for other definitions it "points" the correct handler
 599+ 82EE             >                // Use of "; ok" to suppress "warning[fwdref]"
 599+ 82EE             >
 599+ 82EE             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 600+ 82EE C0 6E DE 82                  dw      S_TO_D, D_DOT
 601+ 82F2 23 69                        dw      EXIT
 602+ 82F4
 603+ 82F4              //  ______________________________________________________________________
 604+ 82F4              //
 605+ 82F4              // ?            n --
 606+ 82F4                              Colon_Def QUESTION, "?", is_normal
 606+ 82F4             >                New_Def  QUESTION, "?", Enter_Ptr, is_normal ; ok
 606+ 82F4             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 606+ 82F4             >
 606+ 82F4             >                // dummy db directives used to calculate length of namec
 606+ 82F4 3F          >                db      "?"
 606+ 82F5             >len_NFA         defl    $ - temp_NFA
 606+ 82F5             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 606+ 82F4             >
 606+ 82F4 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 606+ 82F5 3F          >                db      "?"               // name string in 7-bit ascii, but
 606+ 82F6             >                org     $-1                 // alter last byte of Name just above to set
 606+ 82F5 BF          >                db      {b $} | END_BIT     // msb as name end
 606+ 82F6             >
 606+ 82F6 E8 82       >                dw      last_NFA            // Link to previous definition Name
 606+ 82F8             >QUESTION:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 606+ 82F8 27 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 606+ 82FA             >                else
 606+ 82FA ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 606+ 82FA             >                endif           ; ok        // for other definitions it "points" the correct handler
 606+ 82FA             >                // Use of "; ok" to suppress "warning[fwdref]"
 606+ 82FA             >
 606+ 82FA             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 607+ 82FA 3C 6B EC 82                  dw      FETCH, DOT
 608+ 82FE 23 69                        dw      EXIT
 609+ 8300
 610+ 8300              //  ______________________________________________________________________
 611+ 8300              //
 612+ 8300              // u.           u --
 613+ 8300                              Colon_Def U_DOT, "U.", is_normal
 613+ 8300             >                New_Def  U_DOT, "U.", Enter_Ptr, is_normal ; ok
 613+ 8300             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 613+ 8300             >
 613+ 8300             >                // dummy db directives used to calculate length of namec
 613+ 8300 55 2E       >                db      "U."
 613+ 8302             >len_NFA         defl    $ - temp_NFA
 613+ 8302             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 613+ 8300             >
 613+ 8300 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 613+ 8301 55 2E       >                db      "U."               // name string in 7-bit ascii, but
 613+ 8303             >                org     $-1                 // alter last byte of Name just above to set
 613+ 8302 AE          >                db      {b $} | END_BIT     // msb as name end
 613+ 8303             >
 613+ 8303 F4 82       >                dw      last_NFA            // Link to previous definition Name
 613+ 8305             >U_DOT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 613+ 8305 27 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 613+ 8307             >                else
 613+ 8307 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 613+ 8307             >                endif           ; ok        // for other definitions it "points" the correct handler
 613+ 8307             >                // Use of "; ok" to suppress "warning[fwdref]"
 613+ 8307             >
 613+ 8307             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 614+ 8307 A2 6C DE 82                  dw      ZERO, D_DOT
 615+ 830B 23 69                        dw      EXIT
 616+ 830D
 617+ 830D              //  ______________________________________________________________________
 618+ 830D              //
 619+ 830D              // words        --
 620+ 830D                              Colon_Def WORDS, "WORDS", is_normal
 620+ 830D             >                New_Def  WORDS, "WORDS", Enter_Ptr, is_normal ; ok
 620+ 830D             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 620+ 830D             >
 620+ 830D             >                // dummy db directives used to calculate length of namec
 620+ 830D 57 4F 52 44 >                db      "WORDS"
 620+ 8311 53          >
 620+ 8312             >len_NFA         defl    $ - temp_NFA
 620+ 8312             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 620+ 830D             >
 620+ 830D 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 620+ 830E 57 4F 52 44 >                db      "WORDS"               // name string in 7-bit ascii, but
 620+ 8312 53          >
 620+ 8313             >                org     $-1                 // alter last byte of Name just above to set
 620+ 8312 D3          >                db      {b $} | END_BIT     // msb as name end
 620+ 8313             >
 620+ 8313 00 83       >                dw      last_NFA            // Link to previous definition Name
 620+ 8315             >WORDS:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 620+ 8315 27 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 620+ 8317             >                else
 620+ 8317 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 620+ 8317             >                endif           ; ok        // for other definitions it "points" the correct handler
 620+ 8317             >                // Use of "; ok" to suppress "warning[fwdref]"
 620+ 8317             >
 620+ 8317             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 621+ 8317 A9 63 80 00                  dw      LIT, 128, OUT, STORE
 621+ 831B B3 6D 49 6B
 622+ 831F D5 6D 3C 6B                  dw      CONTEXT, FETCH, FETCH
 622+ 8323 3C 6B
 623+ 8325              Words_Begin:
 624+ 8325 A9 6A 57 6B                  dw          DUP, CFETCH, LIT, $1F, AND_OP
 624+ 8329 A9 63 1F 00
 624+ 832D B3 68
 625+ 832F B3 6D 3C 6B                  dw          OUT, FETCH, PLUS
 625+ 8333 C9 69
 626+ 8335 D6 6C 03 6F                  dw          CL, LESS, ZEQUAL
 626+ 8339 86 69
 627+ 833B E3 63                        dw          ZBRANCH
 628+ 833D 0A 00                        dw          Words_Endif - $
 629+ 833F 02 68 A2 6C                  dw              CR, ZERO, OUT, STORE
 629+ 8343 B3 6D 49 6B
 630+ 8347              Words_Endif:
 631+ 8347 A9 6A F5 75                  dw          DUP, ID_DOT
 632+ 834B 05 70 D7 6F                  dw          PFA, LFA, FETCH
 632+ 834F 3C 6B
 633+ 8351 A9 6A 86 69                  dw          DUP, ZEQUAL
 634+ 8355 0C 67 C5 68                  dw          QTERMINAL, OR_OP
 635+ 8359 E3 63                        dw      ZBRANCH
 636+ 835B CA FF                        dw      Words_Begin - $
 637+ 835D 74 6A                        dw      DROP
 638+ 835F 23 69                        dw      EXIT
 639+ 8361
 640+ 8361              //  ______________________________________________________________________
 641+ 8361              //
 642+ 8361              // list         n --
 643+ 8361                              Colon_Def LIST, "LIST", is_normal
 643+ 8361             >                New_Def  LIST, "LIST", Enter_Ptr, is_normal ; ok
 643+ 8361             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 643+ 8361             >
 643+ 8361             >                // dummy db directives used to calculate length of namec
 643+ 8361 4C 49 53 54 >                db      "LIST"
 643+ 8365             >len_NFA         defl    $ - temp_NFA
 643+ 8365             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 643+ 8361             >
 643+ 8361 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 643+ 8362 4C 49 53 54 >                db      "LIST"               // name string in 7-bit ascii, but
 643+ 8366             >                org     $-1                 // alter last byte of Name just above to set
 643+ 8365 D4          >                db      {b $} | END_BIT     // msb as name end
 643+ 8366             >
 643+ 8366 0D 83       >                dw      last_NFA            // Link to previous definition Name
 643+ 8368             >LIST:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 643+ 8368 27 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 643+ 836A             >                else
 643+ 836A ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 643+ 836A             >                endif           ; ok        // for other definitions it "points" the correct handler
 643+ 836A             >                // Use of "; ok" to suppress "warning[fwdref]"
 643+ 836A             >
 643+ 836A             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 644+ 836A 6A 71 02 68                  dw      DECIMAL, CR
 645+ 836E A9 6A BC 6D                  dw      DUP, SCR, STORE
 645+ 8372 49 6B
 646+ 8374 21 74                        dw      C_DOT_QUOTE
 647+ 8376 05 53 63 72                  db      5, "Scr# "
 647+ 837A 23 20
 648+ 837C EC 82                        dw      DOT
 649+ 837E FA 6C A2 6C                  dw      LSCR, ZERO, C_DO
 649+ 8382 6B 64
 650+ 8384              List_Loop:
 651+ 8384 02 68                        dw          CR
 652+ 8386 76 64 BA 6C                  dw          I, THREE
 653+ 838A CD 82 91 6F                  dw          DOT_R, SPACE
 654+ 838E 76 64 BC 6D                  dw          I, SCR, FETCH, DOT_LINE
 654+ 8392 3C 6B 44 7A
 655+ 8396 0C 67                        dw          QTERMINAL
 656+ 8398 E3 63                        dw          ZBRANCH
 657+ 839A 06 00                        dw          List_Endif - $
 658+ 839C 3B 69                        dw              C_LEAVE
 659+ 839E 06 00                        dw              List_Leave - $
 660+ 83A0              List_Endif:
 661+ 83A0 F8 63                        dw      C_LOOP
 662+ 83A2 E2 FF                        dw      List_Loop - $
 663+ 83A4              List_Leave:
 664+ 83A4 02 68                        dw      CR
 665+ 83A6 23 69                        dw      EXIT
 666+ 83A8
 667+ 83A8              //  ______________________________________________________________________
 668+ 83A8              //
 669+ 83A8              // index        n1 n2 --
 670+ 83A8                              Colon_Def INDEX, "INDEX", is_normal
 670+ 83A8             >                New_Def  INDEX, "INDEX", Enter_Ptr, is_normal ; ok
 670+ 83A8             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 670+ 83A8             >
 670+ 83A8             >                // dummy db directives used to calculate length of namec
 670+ 83A8 49 4E 44 45 >                db      "INDEX"
 670+ 83AC 58          >
 670+ 83AD             >len_NFA         defl    $ - temp_NFA
 670+ 83AD             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 670+ 83A8             >
 670+ 83A8 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 670+ 83A9 49 4E 44 45 >                db      "INDEX"               // name string in 7-bit ascii, but
 670+ 83AD 58          >
 670+ 83AE             >                org     $-1                 // alter last byte of Name just above to set
 670+ 83AD D8          >                db      {b $} | END_BIT     // msb as name end
 670+ 83AE             >
 670+ 83AE 61 83       >                dw      last_NFA            // Link to previous definition Name
 670+ 83B0             >INDEX:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 670+ 83B0 27 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 670+ 83B2             >                else
 670+ 83B2 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 670+ 83B2             >                endif           ; ok        // for other definitions it "points" the correct handler
 670+ 83B2             >                // Use of "; ok" to suppress "warning[fwdref]"
 670+ 83B2             >
 670+ 83B2             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 671+ 83B2 EA 69 9C 6A                  dw      ONE_PLUS, SWAP, C_DO
 671+ 83B6 6B 64
 672+ 83B8              Index_Loop:
 673+ 83B8 02 68 76 64                  dw          CR, I, THREE
 673+ 83BC BA 6C
 674+ 83BE CD 82 91 6F                  dw          DOT_R, SPACE
 675+ 83C2 A2 6C 76 64                  dw          ZERO, I, DOT_LINE
 675+ 83C6 44 7A
 676+ 83C8 0C 67                        dw          QTERMINAL
 677+ 83CA E3 63                        dw          ZBRANCH
 678+ 83CC 06 00                        dw          Index_Endif - $
 679+ 83CE 3B 69                        dw              C_LEAVE
 680+ 83D0 06 00                        dw              Index_Leave - $
 681+ 83D2              Index_Endif:
 682+ 83D2 F8 63                        dw      C_LOOP
 683+ 83D4 E4 FF                        dw      Index_Loop - $
 684+ 83D6              Index_Leave:
 685+ 83D6 02 68                        dw      CR
 686+ 83D8 23 69                        dw      EXIT
 687+ 83DA
 688+ 83DA              //  ______________________________________________________________________
 689+ 83DA              //
 690+ 83DA              // cls          --
 691+ 83DA                              Colon_Def CLS, "CLS", is_normal
 691+ 83DA             >                New_Def  CLS, "CLS", Enter_Ptr, is_normal ; ok
 691+ 83DA             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 691+ 83DA             >
 691+ 83DA             >                // dummy db directives used to calculate length of namec
 691+ 83DA 43 4C 53    >                db      "CLS"
 691+ 83DD             >len_NFA         defl    $ - temp_NFA
 691+ 83DD             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 691+ 83DA             >
 691+ 83DA 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 691+ 83DB 43 4C 53    >                db      "CLS"               // name string in 7-bit ascii, but
 691+ 83DE             >                org     $-1                 // alter last byte of Name just above to set
 691+ 83DD D3          >                db      {b $} | END_BIT     // msb as name end
 691+ 83DE             >
 691+ 83DE A8 83       >                dw      last_NFA            // Link to previous definition Name
 691+ 83E0             >CLS:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 691+ 83E0 27 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 691+ 83E2             >                else
 691+ 83E2 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 691+ 83E2             >                endif           ; ok        // for other definitions it "points" the correct handler
 691+ 83E2             >                // Use of "; ok" to suppress "warning[fwdref]"
 691+ 83E2             >
 691+ 83E2             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 692+ 83E2 A9 63 0E 00                  dw      LIT, $0E, EMITC
 692+ 83E6 EB 65
 693+ 83E8 23 69                        dw      EXIT
 694+ 83EA
 695+ 83EA              //  ______________________________________________________________________
 696+ 83EA              //
 697+ 83EA              // splash       --
 698+ 83EA                              Colon_Def SPLASH, "SPLASH", is_normal
 698+ 83EA             >                New_Def  SPLASH, "SPLASH", Enter_Ptr, is_normal ; ok
 698+ 83EA             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 698+ 83EA             >
 698+ 83EA             >                // dummy db directives used to calculate length of namec
 698+ 83EA 53 50 4C 41 >                db      "SPLASH"
 698+ 83EE 53 48       >
 698+ 83F0             >len_NFA         defl    $ - temp_NFA
 698+ 83F0             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 698+ 83EA             >
 698+ 83EA 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 698+ 83EB 53 50 4C 41 >                db      "SPLASH"               // name string in 7-bit ascii, but
 698+ 83EF 53 48       >
 698+ 83F1             >                org     $-1                 // alter last byte of Name just above to set
 698+ 83F0 C8          >                db      {b $} | END_BIT     // msb as name end
 698+ 83F1             >
 698+ 83F1 DA 83       >                dw      last_NFA            // Link to previous definition Name
 698+ 83F3             >SPLASH:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 698+ 83F3 27 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 698+ 83F5             >                else
 698+ 83F5 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 698+ 83F5             >                endif           ; ok        // for other definitions it "points" the correct handler
 698+ 83F5             >                // Use of "; ok" to suppress "warning[fwdref]"
 698+ 83F5             >
 698+ 83F5             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 699+ 83F5 E0 83                        dw      CLS
 700+ 83F7 21 74                        dw      C_DOT_QUOTE
 701+ 83F9 57                           db      87
 702+ 83FA 76 2D 46 6F                  db      "v-Forth 1.5 NextZXOS version", 13
 702+ 83FE 72 74 68 20
 702+ 8402 31 2E 35 20
 702+ 8406 4E 65 78 74
 702+ 840A 5A 58 4F 53
 702+ 840E 20 76 65 72
 702+ 8412 73 69 6F 6E
 702+ 8416 0D
 703+ 8417 49 6E 64 69                  db      "Indirect Thread - build 20211104", 13
 703+ 841B 72 65 63 74
 703+ 841F 20 54 68 72
 703+ 8423 65 61 64 20
 703+ 8427 2D 20 62 75
 703+ 842B 69 6C 64 20
 703+ 842F 32 30 32 31
 703+ 8433 31 31 30 34
 703+ 8437 0D
 704+ 8438 31 39 39 30                  db      "1990-2021 Matteo Vitturi", 13
 704+ 843C 2D 32 30 32
 704+ 8440 31 20 4D 61
 704+ 8444 74 74 65 6F
 704+ 8448 20 56 69 74
 704+ 844C 74 75 72 69
 704+ 8450 0D
 705+ 8451 23 69                        dw      EXIT
 706+ 8453
 707+ 8453              //  ______________________________________________________________________
 708+ 8453              //
 709+ 8453              // video        --
 710+ 8453                              Colon_Def VIDEO, "VIDEO", is_normal
 710+ 8453             >                New_Def  VIDEO, "VIDEO", Enter_Ptr, is_normal ; ok
 710+ 8453             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 710+ 8453             >
 710+ 8453             >                // dummy db directives used to calculate length of namec
 710+ 8453 56 49 44 45 >                db      "VIDEO"
 710+ 8457 4F          >
 710+ 8458             >len_NFA         defl    $ - temp_NFA
 710+ 8458             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 710+ 8453             >
 710+ 8453 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 710+ 8454 56 49 44 45 >                db      "VIDEO"               // name string in 7-bit ascii, but
 710+ 8458 4F          >
 710+ 8459             >                org     $-1                 // alter last byte of Name just above to set
 710+ 8458 CF          >                db      {b $} | END_BIT     // msb as name end
 710+ 8459             >
 710+ 8459 EA 83       >                dw      last_NFA            // Link to previous definition Name
 710+ 845B             >VIDEO:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 710+ 845B 27 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 710+ 845D             >                else
 710+ 845D ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 710+ 845D             >                endif           ; ok        // for other definitions it "points" the correct handler
 710+ 845D             >                // Use of "; ok" to suppress "warning[fwdref]"
 710+ 845D             >
 710+ 845D             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 711+ 845D B2 6C A9 6A                  dw      TWO, DUP, DEVICE, STORE
 711+ 8461 8C 7A 49 6B
 712+ 8465 BD 7A                        dw      SELECT
 713+ 8467 23 69                        dw      EXIT
 714+ 8469
 715+ 8469              //  ______________________________________________________________________
 716+ 8469              //
 717+ 8469              // accept-      a n1 -- n2
 718+ 8469                              Colon_Def ACCEPT_N, "ACCEPT-", is_normal
 718+ 8469             >                New_Def  ACCEPT_N, "ACCEPT-", Enter_Ptr, is_normal ; ok
 718+ 8469             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 718+ 8469             >
 718+ 8469             >                // dummy db directives used to calculate length of namec
 718+ 8469 41 43 43 45 >                db      "ACCEPT-"
 718+ 846D 50 54 2D    >
 718+ 8470             >len_NFA         defl    $ - temp_NFA
 718+ 8470             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 718+ 8469             >
 718+ 8469 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 718+ 846A 41 43 43 45 >                db      "ACCEPT-"               // name string in 7-bit ascii, but
 718+ 846E 50 54 2D    >
 718+ 8471             >                org     $-1                 // alter last byte of Name just above to set
 718+ 8470 AD          >                db      {b $} | END_BIT     // msb as name end
 718+ 8471             >
 718+ 8471 53 84       >                dw      last_NFA            // Link to previous definition Name
 718+ 8473             >ACCEPT_N:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 718+ 8473 27 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 718+ 8475             >                else
 718+ 8475 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 718+ 8475             >                endif           ; ok        // for other definitions it "points" the correct handler
 718+ 8475             >                // Use of "; ok" to suppress "warning[fwdref]"
 718+ 8475             >
 718+ 8475             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 719+ 8475 51 69                        dw      TO_R
 720+ 8477 A2 6C                        dw      ZERO
 721+ 8479 9C 6A                        dw      SWAP
 722+ 847B A9 6A                        dw      DUP
 723+ 847D 65 69                        dw      R_TO
 724+ 847F C9 69                        dw      PLUS
 725+ 8481 9C 6A                        dw      SWAP
 726+ 8483 6B 64                        dw      C_DO
 727+ 8485              AcceptN_Loop:
 728+ 8485 0D 7B                        dw          MMU7_FETCH
 729+ 8487 98 7A                        dw          INKEY
 730+ 8489 9C 6A 1F 7B                  dw          SWAP, MMU7_STORE
 731+ 848D A9 6A 86 69                  dw          DUP, ZEQUAL
 732+ 8491 E3 63                        dw          ZBRANCH
 733+ 8493 06 00                        dw          AcceptN_Endif_1 - $
 734+ 8495 5B 84 32 78                  dw              VIDEO, QUIT
 735+ 8499              AcceptN_Endif_1:
 736+ 8499 A9 6A A9 63                  dw          DUP, LIT, 13, EQUALS
 736+ 849D 0D 00 E2 6E
 737+ 84A1 E3 63                        dw          ZBRANCH
 738+ 84A3 06 00                        dw          AcceptN_Endif_2 - $
 739+ 84A5 74 6A A2 6C                  dw              DROP, ZERO
 740+ 84A9              AcceptN_Endif_2:
 741+ 84A9 A9 6A A9 63                  dw          DUP, LIT, 10, EQUALS
 741+ 84AD 0A 00 E2 6E
 742+ 84B1 E3 63                        dw          ZBRANCH
 743+ 84B3 06 00                        dw          AcceptN_Endif_3 - $
 744+ 84B5 74 6A A2 6C                  dw              DROP, ZERO
 745+ 84B9              AcceptN_Endif_3:
 746+ 84B9 76 64 65 6B                  dw          I, CSTORE, ONE_PLUS
 746+ 84BD EA 69
 747+ 84BF
 748+ 84BF 76 64 57 6B                  dw          I, CFETCH, ZEQUAL   //      i 0= if
 748+ 84C3 86 69
 749+ 84C5 E3 63                        dw          ZBRANCH
 750+ 84C7 06 00                        dw              AcceptN_Endif_4 - $
 751+ 84C9 3B 69                        dw                  C_LEAVE     //              leave
 752+ 84CB 06 00                        dw                  AcceptN_Leave - $
 753+ 84CD              AcceptN_Endif_4:                                 //      endif
 754+ 84CD
 755+ 84CD F8 63                        dw      C_LOOP
 756+ 84CF B6 FF                        dw      AcceptN_Loop -$
 757+ 84D1              AcceptN_Leave:
 758+ 84D1 23 69                        dw      EXIT
 759+ 84D3
 760+ 84D3              //  ______________________________________________________________________
 761+ 84D3              //
 762+ 84D3              // load-        n --
 763+ 84D3              // Provided that a stream n is OPEN# via the standart BASIC
 764+ 84D3              // it accepts text from stream #n to the normal INTERPRET
 765+ 84D3              // up to now, text-file must end with QUIT
 766+ 84D3                              Colon_Def LOAD_N, "LOAD-", is_normal
 766+ 84D3             >                New_Def  LOAD_N, "LOAD-", Enter_Ptr, is_normal ; ok
 766+ 84D3             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 766+ 84D3             >
 766+ 84D3             >                // dummy db directives used to calculate length of namec
 766+ 84D3 4C 4F 41 44 >                db      "LOAD-"
 766+ 84D7 2D          >
 766+ 84D8             >len_NFA         defl    $ - temp_NFA
 766+ 84D8             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 766+ 84D3             >
 766+ 84D3 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 766+ 84D4 4C 4F 41 44 >                db      "LOAD-"               // name string in 7-bit ascii, but
 766+ 84D8 2D          >
 766+ 84D9             >                org     $-1                 // alter last byte of Name just above to set
 766+ 84D8 AD          >                db      {b $} | END_BIT     // msb as name end
 766+ 84D9             >
 766+ 84D9 69 84       >                dw      last_NFA            // Link to previous definition Name
 766+ 84DB             >LOAD_N:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 766+ 84DB 27 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 766+ 84DD             >                else
 766+ 84DD ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 766+ 84DD             >                endif           ; ok        // for other definitions it "points" the correct handler
 766+ 84DD             >                // Use of "; ok" to suppress "warning[fwdref]"
 766+ 84DD             >
 766+ 84DD             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 767+ 84DD 58 6E 49 6B                  dw      SOURCE_ID, STORE
 768+ 84E1              Load_N_Begin:
 769+ 84E1 35 6D 3C 6B                  dw          TIB, FETCH
 770+ 84E5 A9 6A A9 63                  dw          DUP, LIT, 80
 770+ 84E9 50 00
 771+ 84EB 0A 6B 9A 73                  dw          TWO_DUP, BLANKS
 772+ 84EF 58 6E 3C 6B                  dw          SOURCE_ID, FETCH
 773+ 84F3 52 79 A9 6A                  dw          ABS_OP, DUP, DEVICE, STORE
 773+ 84F7 8C 7A 49 6B
 774+ 84FB BD 7A                        dw          SELECT
 775+ 84FD 73 84                        dw          ACCEPT_N
 776+ 84FF 5B 84                        dw          VIDEO
 777+ 8501 EA 6A                        dw          TWO_DROP
 778+ 8503 A2 6C A1 6D                  dw          ZERO, BLK, STORE
 778+ 8507 49 6B
 779+ 8509 A2 6C AA 6D                  dw          ZERO, TO_IN, STORE
 779+ 850D 49 6B
 780+ 850F 72 77                        dw          INTERPRET
 781+ 8511 0C 67                        dw          QTERMINAL
 782+ 8513 E3 63                        dw      ZBRANCH
 783+ 8515 CC FF                        dw      Load_N_Begin - $
 784+ 8517 23 69                        dw      EXIT
 785+ 8519
 786+ 8519              //  ______________________________________________________________________
 787+ 8519              //
 788+ 8519              // load         n --
 789+ 8519              // if n is positive, it loads screen #n (as usual)
 790+ 8519              // if n is negative, it connects stream #n to the normal INTERPRET
 791+ 8519              // this second way is useful if you want to load any kind of file
 792+ 8519              // provied that it is OPEN# the usual BASIC way.
 793+ 8519                              Colon_Def LOAD, "LOAD", is_normal
 793+ 8519             >                New_Def  LOAD, "LOAD", Enter_Ptr, is_normal ; ok
 793+ 8519             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 793+ 8519             >
 793+ 8519             >                // dummy db directives used to calculate length of namec
 793+ 8519 4C 4F 41 44 >                db      "LOAD"
 793+ 851D             >len_NFA         defl    $ - temp_NFA
 793+ 851D             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 793+ 8519             >
 793+ 8519 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 793+ 851A 4C 4F 41 44 >                db      "LOAD"               // name string in 7-bit ascii, but
 793+ 851E             >                org     $-1                 // alter last byte of Name just above to set
 793+ 851D C4          >                db      {b $} | END_BIT     // msb as name end
 793+ 851E             >
 793+ 851E D3 84       >                dw      last_NFA            // Link to previous definition Name
 793+ 8520             >LOAD:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 793+ 8520 27 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 793+ 8522             >                else
 793+ 8522 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 793+ 8522             >                endif           ; ok        // for other definitions it "points" the correct handler
 793+ 8522             >                // Use of "; ok" to suppress "warning[fwdref]"
 793+ 8522             >
 793+ 8522             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 794+ 8522 A9 6A A1 69                  dw      DUP, ZLESS
 795+ 8526 E3 63                        dw      ZBRANCH
 796+ 8528 08 00                        dw      Load_Else - $
 797+ 852A DB 84                        dw          LOAD_N
 798+ 852C CC 63                        dw      BRANCH
 799+ 852E 04 00                        dw      Load_Endif - $
 800+ 8530              Load_Else:
 801+ 8530 FB 80                        dw          LOAD_P
 802+ 8532              Load_Endif:
 803+ 8532 23 69                        dw      EXIT
 804+ 8534
 805+ 8534
 806+ 8534              //  ______________________________________________________________________
 807+ 8534              //
 808+ 8534              // autoexec     --
 809+ 8534              // this word is called the first time the Forth system boot to
 810+ 8534              // load Screen# 1. Once called it patches itself to prevent furhter runs.
 811+ 8534                              Colon_Def AUTOEXEC, "AUTOEXEC", is_normal
 811+ 8534             >                New_Def  AUTOEXEC, "AUTOEXEC", Enter_Ptr, is_normal ; ok
 811+ 8534             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 811+ 8534             >
 811+ 8534             >                // dummy db directives used to calculate length of namec
 811+ 8534 41 55 54 4F >                db      "AUTOEXEC"
 811+ 8538 45 58 45 43 >
 811+ 853C             >len_NFA         defl    $ - temp_NFA
 811+ 853C             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 811+ 8534             >
 811+ 8534 88          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 811+ 8535 41 55 54 4F >                db      "AUTOEXEC"               // name string in 7-bit ascii, but
 811+ 8539 45 58 45 43 >
 811+ 853D             >                org     $-1                 // alter last byte of Name just above to set
 811+ 853C C3          >                db      {b $} | END_BIT     // msb as name end
 811+ 853D             >
 811+ 853D 19 85       >                dw      last_NFA            // Link to previous definition Name
 811+ 853F             >AUTOEXEC:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 811+ 853F 27 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 811+ 8541             >                else
 811+ 8541 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 811+ 8541             >                endif           ; ok        // for other definitions it "points" the correct handler
 811+ 8541             >                // Use of "; ok" to suppress "warning[fwdref]"
 811+ 8541             >
 811+ 8541             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 812+ 8541 A9 63 0B 00                  dw      LIT, 11
 813+ 8545 A9 63 4F 6C                  dw      LIT, NOOP
 814+ 8549 A9 63 81 78                  dw      LIT, Autoexec_Ptr
 815+ 854D 49 6B                        dw      STORE
 816+ 854F 20 85                        dw      LOAD
 817+ 8551 32 78                        dw      QUIT
 818+ 8553 23 69                        dw      EXIT
 819+ 8555
 820+ 8555
 821+ 8555              //  ______________________________________________________________________
 822+ 8555              //
 823+ 8555              // bye     --
 824+ 8555              //
 825+ 8555                              Colon_Def BYE, "BYE", is_normal
 825+ 8555             >                New_Def  BYE, "BYE", Enter_Ptr, is_normal ; ok
 825+ 8555             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 825+ 8555             >
 825+ 8555             >                // dummy db directives used to calculate length of namec
 825+ 8555 42 59 45    >                db      "BYE"
 825+ 8558             >len_NFA         defl    $ - temp_NFA
 825+ 8558             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 825+ 8555             >
 825+ 8555 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 825+ 8556 42 59 45    >                db      "BYE"               // name string in 7-bit ascii, but
 825+ 8559             >                org     $-1                 // alter last byte of Name just above to set
 825+ 8558 C5          >                db      {b $} | END_BIT     // msb as name end
 825+ 8559             >
 825+ 8559 34 85       >                dw      last_NFA            // Link to previous definition Name
 825+ 855B             >BYE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 825+ 855B 27 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 825+ 855D             >                else
 825+ 855D ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 825+ 855D             >                endif           ; ok        // for other definitions it "points" the correct handler
 825+ 855D             >                // Use of "; ok" to suppress "warning[fwdref]"
 825+ 855D             >
 825+ 855D             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 826+ 855D 99 7D                        dw      FLUSH
 827+ 855F CA 7C                        dw      EMPTY_BUFFERS
 828+ 8561 6E 7B 3C 6B                  dw      BLK_FH, FETCH, F_CLOSE, DROP
 828+ 8565 AF 67 74 6A
 829+ 8569 A2 6C 08 6D                  dw      ZERO, PLUS_ORIGIN
 830+ 856D 17 79                        dw      BASIC
 831+ 856F
 832+ 856F              //  ______________________________________________________________________
 833+ 856F              //
 834+ 856F              // invv     --
 835+ 856F              //
 836+ 856F              //              Colon_Def INVV, "INVV", is_normal
 837+ 856F              //              dw      LIT, 20, EMITC, ONE, EMITC
 838+ 856F              //              dw      EXIT
 839+ 856F
 840+ 856F              //  ______________________________________________________________________
 841+ 856F              //
 842+ 856F              // truv     --
 843+ 856F              //
 844+ 856F              //              Colon_Def TRUV, "TRUV", is_normal
 845+ 856F              //              dw      LIT, 20, EMITC, ZERO, EMITC
 846+ 856F              //              dw      EXIT
 847+ 856F
 848+ 856F              //  ______________________________________________________________________
 849+ 856F              //
 850+ 856F              // mark     --
 851+ 856F              //
 852+ 856F              //              Colon_Def MARK, "MARK", is_normal
 853+ 856F              //              dw      INVV, TYPE, TRUV
 854+ 856F              //              dw      EXIT
 855+ 856F
 856+ 856F              //  ______________________________________________________________________
 857+ 856F              //
 858+ 856F              // back     --
 859+ 856F              //
 860+ 856F                              Colon_Def BACK, "BACK", is_normal
 860+ 856F             >                New_Def  BACK, "BACK", Enter_Ptr, is_normal ; ok
 860+ 856F             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 860+ 856F             >
 860+ 856F             >                // dummy db directives used to calculate length of namec
 860+ 856F 42 41 43 4B >                db      "BACK"
 860+ 8573             >len_NFA         defl    $ - temp_NFA
 860+ 8573             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 860+ 856F             >
 860+ 856F 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 860+ 8570 42 41 43 4B >                db      "BACK"               // name string in 7-bit ascii, but
 860+ 8574             >                org     $-1                 // alter last byte of Name just above to set
 860+ 8573 CB          >                db      {b $} | END_BIT     // msb as name end
 860+ 8574             >
 860+ 8574 55 85       >                dw      last_NFA            // Link to previous definition Name
 860+ 8576             >BACK:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 860+ 8576 27 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 860+ 8578             >                else
 860+ 8578 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 860+ 8578             >                endif           ; ok        // for other definitions it "points" the correct handler
 860+ 8578             >                // Use of "; ok" to suppress "warning[fwdref]"
 860+ 8578             >
 860+ 8578             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 861+ 8578 81 6E D4 6E                  dw      HERE, SUBTRACT, COMMA
 861+ 857C 9D 6E
 862+ 857E 23 69                        dw      EXIT
 863+ 8580
 864+ 8580              //  ______________________________________________________________________
 865+ 8580              //
 866+ 8580              // if          ( -- a 2 ) \ compile-time
 867+ 8580              // IF ... THEN
 868+ 8580              // IF ... ELSE ... ENDIF
 869+ 8580                              Colon_Def IF, "IF", is_immediate
 869+ 8580             >                New_Def  IF, "IF", Enter_Ptr, is_immediate ; ok
 869+ 8580             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 869+ 8580             >
 869+ 8580             >                // dummy db directives used to calculate length of namec
 869+ 8580 49 46       >                db      "IF"
 869+ 8582             >len_NFA         defl    $ - temp_NFA
 869+ 8582             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 869+ 8580             >
 869+ 8580 C2          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 869+ 8581 49 46       >                db      "IF"               // name string in 7-bit ascii, but
 869+ 8583             >                org     $-1                 // alter last byte of Name just above to set
 869+ 8582 C6          >                db      {b $} | END_BIT     // msb as name end
 869+ 8583             >
 869+ 8583 6F 85       >                dw      last_NFA            // Link to previous definition Name
 869+ 8585             >IF:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 869+ 8585 27 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 869+ 8587             >                else
 869+ 8587 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 869+ 8587             >                endif           ; ok        // for other definitions it "points" the correct handler
 869+ 8587             >                // Use of "; ok" to suppress "warning[fwdref]"
 869+ 8587             >
 869+ 8587             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 870+ 8587 DE 70 E3 63                  dw      COMPILE, ZBRANCH
 871+ 858B 81 6E A2 6C                  dw      HERE, ZERO, COMMA
 871+ 858F 9D 6E
 872+ 8591 B2 6C                        dw      TWO
 873+ 8593 23 69                        dw      EXIT
 874+ 8595
 875+ 8595              //  ______________________________________________________________________
 876+ 8595              //
 877+ 8595              // endif        ( a 2 -- ) \ compile-time
 878+ 8595              //
 879+ 8595                              Colon_Def ENDIF, "ENDIF", is_immediate
 879+ 8595             >                New_Def  ENDIF, "ENDIF", Enter_Ptr, is_immediate ; ok
 879+ 8595             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 879+ 8595             >
 879+ 8595             >                // dummy db directives used to calculate length of namec
 879+ 8595 45 4E 44 49 >                db      "ENDIF"
 879+ 8599 46          >
 879+ 859A             >len_NFA         defl    $ - temp_NFA
 879+ 859A             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 879+ 8595             >
 879+ 8595 C5          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 879+ 8596 45 4E 44 49 >                db      "ENDIF"               // name string in 7-bit ascii, but
 879+ 859A 46          >
 879+ 859B             >                org     $-1                 // alter last byte of Name just above to set
 879+ 859A C6          >                db      {b $} | END_BIT     // msb as name end
 879+ 859B             >
 879+ 859B 80 85       >                dw      last_NFA            // Link to previous definition Name
 879+ 859D             >ENDIF:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 879+ 859D 27 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 879+ 859F             >                else
 879+ 859F ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 879+ 859F             >                endif           ; ok        // for other definitions it "points" the correct handler
 879+ 859F             >                // Use of "; ok" to suppress "warning[fwdref]"
 879+ 859F             >
 879+ 859F             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 880+ 859F 65 70                        dw      QCOMP
 881+ 85A1 B2 6C 94 70                  dw      TWO, QPAIRS
 882+ 85A5 81 6E 64 6A                  dw      HERE, OVER, SUBTRACT, SWAP, STORE
 882+ 85A9 D4 6E 9C 6A
 882+ 85AD 49 6B
 883+ 85AF 23 69                        dw      EXIT
 884+ 85B1
 885+ 85B1              //  ______________________________________________________________________
 886+ 85B1              //
 887+ 85B1              // then        ( a 2 -- ) \ compile-time
 888+ 85B1              //
 889+ 85B1                              Colon_Def THEN, "THEN", is_immediate
 889+ 85B1             >                New_Def  THEN, "THEN", Enter_Ptr, is_immediate ; ok
 889+ 85B1             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 889+ 85B1             >
 889+ 85B1             >                // dummy db directives used to calculate length of namec
 889+ 85B1 54 48 45 4E >                db      "THEN"
 889+ 85B5             >len_NFA         defl    $ - temp_NFA
 889+ 85B5             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 889+ 85B1             >
 889+ 85B1 C4          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 889+ 85B2 54 48 45 4E >                db      "THEN"               // name string in 7-bit ascii, but
 889+ 85B6             >                org     $-1                 // alter last byte of Name just above to set
 889+ 85B5 CE          >                db      {b $} | END_BIT     // msb as name end
 889+ 85B6             >
 889+ 85B6 95 85       >                dw      last_NFA            // Link to previous definition Name
 889+ 85B8             >THEN:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 889+ 85B8 27 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 889+ 85BA             >                else
 889+ 85BA ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 889+ 85BA             >                endif           ; ok        // for other definitions it "points" the correct handler
 889+ 85BA             >                // Use of "; ok" to suppress "warning[fwdref]"
 889+ 85BA             >
 889+ 85BA             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 890+ 85BA 9D 85                        dw      ENDIF
 891+ 85BC 23 69                        dw      EXIT
 892+ 85BE
 893+ 85BE              //  ______________________________________________________________________
 894+ 85BE              //
 895+ 85BE              // else        ( a1 2 -- a2 2 ) \ compile-time
 896+ 85BE              //
 897+ 85BE                              Colon_Def ELSE, "ELSE", is_immediate
 897+ 85BE             >                New_Def  ELSE, "ELSE", Enter_Ptr, is_immediate ; ok
 897+ 85BE             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 897+ 85BE             >
 897+ 85BE             >                // dummy db directives used to calculate length of namec
 897+ 85BE 45 4C 53 45 >                db      "ELSE"
 897+ 85C2             >len_NFA         defl    $ - temp_NFA
 897+ 85C2             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 897+ 85BE             >
 897+ 85BE C4          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 897+ 85BF 45 4C 53 45 >                db      "ELSE"               // name string in 7-bit ascii, but
 897+ 85C3             >                org     $-1                 // alter last byte of Name just above to set
 897+ 85C2 C5          >                db      {b $} | END_BIT     // msb as name end
 897+ 85C3             >
 897+ 85C3 B1 85       >                dw      last_NFA            // Link to previous definition Name
 897+ 85C5             >ELSE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 897+ 85C5 27 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 897+ 85C7             >                else
 897+ 85C7 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 897+ 85C7             >                endif           ; ok        // for other definitions it "points" the correct handler
 897+ 85C7             >                // Use of "; ok" to suppress "warning[fwdref]"
 897+ 85C7             >
 897+ 85C7             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 898+ 85C7 65 70                        dw      QCOMP
 899+ 85C9 B2 6C 94 70                  dw      TWO, QPAIRS
 900+ 85CD DE 70 CC 63                  dw      COMPILE, BRANCH
 901+ 85D1 81 6E A2 6C                  dw      HERE, ZERO, COMMA
 901+ 85D5 9D 6E
 902+ 85D7 9C 6A B2 6C                  dw      SWAP, TWO, ENDIF
 902+ 85DB 9D 85
 903+ 85DD B2 6C                        dw      TWO
 904+ 85DF 23 69                        dw      EXIT
 905+ 85E1
 906+ 85E1              //  ______________________________________________________________________
 907+ 85E1              //
 908+ 85E1              // begin        ( -- a 1 ) \ compile-time
 909+ 85E1              // BEGIN ... AGAIN
 910+ 85E1              // BEGIN ... f UNTIL
 911+ 85E1              // BEGIN ... f WHILE ... REPEAT
 912+ 85E1                              Colon_Def BEGIN, "BEGIN", is_immediate
 912+ 85E1             >                New_Def  BEGIN, "BEGIN", Enter_Ptr, is_immediate ; ok
 912+ 85E1             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 912+ 85E1             >
 912+ 85E1             >                // dummy db directives used to calculate length of namec
 912+ 85E1 42 45 47 49 >                db      "BEGIN"
 912+ 85E5 4E          >
 912+ 85E6             >len_NFA         defl    $ - temp_NFA
 912+ 85E6             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 912+ 85E1             >
 912+ 85E1 C5          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 912+ 85E2 42 45 47 49 >                db      "BEGIN"               // name string in 7-bit ascii, but
 912+ 85E6 4E          >
 912+ 85E7             >                org     $-1                 // alter last byte of Name just above to set
 912+ 85E6 CE          >                db      {b $} | END_BIT     // msb as name end
 912+ 85E7             >
 912+ 85E7 BE 85       >                dw      last_NFA            // Link to previous definition Name
 912+ 85E9             >BEGIN:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 912+ 85E9 27 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 912+ 85EB             >                else
 912+ 85EB ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 912+ 85EB             >                endif           ; ok        // for other definitions it "points" the correct handler
 912+ 85EB             >                // Use of "; ok" to suppress "warning[fwdref]"
 912+ 85EB             >
 912+ 85EB             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 913+ 85EB 65 70                        dw      QCOMP
 914+ 85ED 81 6E                        dw      HERE
 915+ 85EF AA 6C                        dw      ONE
 916+ 85F1 23 69                        dw      EXIT
 917+ 85F3
 918+ 85F3              //  ______________________________________________________________________
 919+ 85F3              //
 920+ 85F3              // again        ( a 1 -- ) \ compile-time
 921+ 85F3                              Colon_Def AGAIN, "AGAIN", is_immediate
 921+ 85F3             >                New_Def  AGAIN, "AGAIN", Enter_Ptr, is_immediate ; ok
 921+ 85F3             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 921+ 85F3             >
 921+ 85F3             >                // dummy db directives used to calculate length of namec
 921+ 85F3 41 47 41 49 >                db      "AGAIN"
 921+ 85F7 4E          >
 921+ 85F8             >len_NFA         defl    $ - temp_NFA
 921+ 85F8             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 921+ 85F3             >
 921+ 85F3 C5          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 921+ 85F4 41 47 41 49 >                db      "AGAIN"               // name string in 7-bit ascii, but
 921+ 85F8 4E          >
 921+ 85F9             >                org     $-1                 // alter last byte of Name just above to set
 921+ 85F8 CE          >                db      {b $} | END_BIT     // msb as name end
 921+ 85F9             >
 921+ 85F9 E1 85       >                dw      last_NFA            // Link to previous definition Name
 921+ 85FB             >AGAIN:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 921+ 85FB 27 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 921+ 85FD             >                else
 921+ 85FD ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 921+ 85FD             >                endif           ; ok        // for other definitions it "points" the correct handler
 921+ 85FD             >                // Use of "; ok" to suppress "warning[fwdref]"
 921+ 85FD             >
 921+ 85FD             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 922+ 85FD 65 70                        dw      QCOMP
 923+ 85FF AA 6C 94 70                  dw      ONE, QPAIRS
 924+ 8603 DE 70 CC 63                  dw      COMPILE, BRANCH
 925+ 8607 76 85                        dw      BACK
 926+ 8609 23 69                        dw      EXIT
 927+ 860B
 928+ 860B              //  ______________________________________________________________________
 929+ 860B              //
 930+ 860B              // until        ( a 1 -- ) \ compile-time
 931+ 860B                              Colon_Def UNTIL, "UNTIL", is_immediate
 931+ 860B             >                New_Def  UNTIL, "UNTIL", Enter_Ptr, is_immediate ; ok
 931+ 860B             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 931+ 860B             >
 931+ 860B             >                // dummy db directives used to calculate length of namec
 931+ 860B 55 4E 54 49 >                db      "UNTIL"
 931+ 860F 4C          >
 931+ 8610             >len_NFA         defl    $ - temp_NFA
 931+ 8610             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 931+ 860B             >
 931+ 860B C5          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 931+ 860C 55 4E 54 49 >                db      "UNTIL"               // name string in 7-bit ascii, but
 931+ 8610 4C          >
 931+ 8611             >                org     $-1                 // alter last byte of Name just above to set
 931+ 8610 CC          >                db      {b $} | END_BIT     // msb as name end
 931+ 8611             >
 931+ 8611 F3 85       >                dw      last_NFA            // Link to previous definition Name
 931+ 8613             >UNTIL:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 931+ 8613 27 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 931+ 8615             >                else
 931+ 8615 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 931+ 8615             >                endif           ; ok        // for other definitions it "points" the correct handler
 931+ 8615             >                // Use of "; ok" to suppress "warning[fwdref]"
 931+ 8615             >
 931+ 8615             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 932+ 8615 65 70                        dw      QCOMP
 933+ 8617 AA 6C 94 70                  dw      ONE, QPAIRS
 934+ 861B DE 70 E3 63                  dw      COMPILE, ZBRANCH
 935+ 861F 76 85                        dw      BACK
 936+ 8621 23 69                        dw      EXIT
 937+ 8623
 938+ 8623              //  ______________________________________________________________________
 939+ 8623              //
 940+ 8623              // end          ( a 1 -- ) \ compile-time
 941+ 8623                              Colon_Def END, "END", is_immediate
 941+ 8623             >                New_Def  END, "END", Enter_Ptr, is_immediate ; ok
 941+ 8623             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 941+ 8623             >
 941+ 8623             >                // dummy db directives used to calculate length of namec
 941+ 8623 45 4E 44    >                db      "END"
 941+ 8626             >len_NFA         defl    $ - temp_NFA
 941+ 8626             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 941+ 8623             >
 941+ 8623 C3          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 941+ 8624 45 4E 44    >                db      "END"               // name string in 7-bit ascii, but
 941+ 8627             >                org     $-1                 // alter last byte of Name just above to set
 941+ 8626 C4          >                db      {b $} | END_BIT     // msb as name end
 941+ 8627             >
 941+ 8627 0B 86       >                dw      last_NFA            // Link to previous definition Name
 941+ 8629             >END:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 941+ 8629 27 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 941+ 862B             >                else
 941+ 862B ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 941+ 862B             >                endif           ; ok        // for other definitions it "points" the correct handler
 941+ 862B             >                // Use of "; ok" to suppress "warning[fwdref]"
 941+ 862B             >
 941+ 862B             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 942+ 862B 13 86                        dw      UNTIL
 943+ 862D 23 69                        dw      EXIT
 944+ 862F
 945+ 862F              //  ______________________________________________________________________
 946+ 862F              //
 947+ 862F              // while        ( a1 1 -- a1 1 a2 4 ) \ compile-time
 948+ 862F                              Colon_Def WHILE, "WHILE", is_immediate
 948+ 862F             >                New_Def  WHILE, "WHILE", Enter_Ptr, is_immediate ; ok
 948+ 862F             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 948+ 862F             >
 948+ 862F             >                // dummy db directives used to calculate length of namec
 948+ 862F 57 48 49 4C >                db      "WHILE"
 948+ 8633 45          >
 948+ 8634             >len_NFA         defl    $ - temp_NFA
 948+ 8634             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 948+ 862F             >
 948+ 862F C5          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 948+ 8630 57 48 49 4C >                db      "WHILE"               // name string in 7-bit ascii, but
 948+ 8634 45          >
 948+ 8635             >                org     $-1                 // alter last byte of Name just above to set
 948+ 8634 C5          >                db      {b $} | END_BIT     // msb as name end
 948+ 8635             >
 948+ 8635 23 86       >                dw      last_NFA            // Link to previous definition Name
 948+ 8637             >WHILE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 948+ 8637 27 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 948+ 8639             >                else
 948+ 8639 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 948+ 8639             >                endif           ; ok        // for other definitions it "points" the correct handler
 948+ 8639             >                // Use of "; ok" to suppress "warning[fwdref]"
 948+ 8639             >
 948+ 8639             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 949+ 8639 85 85                        dw      IF
 950+ 863B 02 6A                        dw      TWO_PLUS // ( that is 4 )
 951+ 863D 23 69                        dw      EXIT
 952+ 863F
 953+ 863F              //  ______________________________________________________________________
 954+ 863F              //
 955+ 863F              // repeat       ( a1 1 a2 4 -- ) \ compile-time
 956+ 863F                              Colon_Def REPEAT, "REPEAT", is_immediate
 956+ 863F             >                New_Def  REPEAT, "REPEAT", Enter_Ptr, is_immediate ; ok
 956+ 863F             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 956+ 863F             >
 956+ 863F             >                // dummy db directives used to calculate length of namec
 956+ 863F 52 45 50 45 >                db      "REPEAT"
 956+ 8643 41 54       >
 956+ 8645             >len_NFA         defl    $ - temp_NFA
 956+ 8645             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 956+ 863F             >
 956+ 863F C6          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 956+ 8640 52 45 50 45 >                db      "REPEAT"               // name string in 7-bit ascii, but
 956+ 8644 41 54       >
 956+ 8646             >                org     $-1                 // alter last byte of Name just above to set
 956+ 8645 D4          >                db      {b $} | END_BIT     // msb as name end
 956+ 8646             >
 956+ 8646 2F 86       >                dw      last_NFA            // Link to previous definition Name
 956+ 8648             >REPEAT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 956+ 8648 27 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 956+ 864A             >                else
 956+ 864A ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 956+ 864A             >                endif           ; ok        // for other definitions it "points" the correct handler
 956+ 864A             >                // Use of "; ok" to suppress "warning[fwdref]"
 956+ 864A             >
 956+ 864A             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 957+ 864A F8 6A                        dw      TWO_SWAP
 958+ 864C FB 85                        dw      AGAIN
 959+ 864E B2 6C D4 6E                  dw      TWO, SUBTRACT
 960+ 8652 9D 85                        dw      ENDIF
 961+ 8654 23 69                        dw      EXIT
 962+ 8656
 963+ 8656              //  ______________________________________________________________________
 964+ 8656              //
 965+ 8656              // ?do-
 966+ 8656              // special version of "BACK" used by ?DO and LOOP
 967+ 8656                              Colon_Def C_DO_BACK, "?DO-", is_normal
 967+ 8656             >                New_Def  C_DO_BACK, "?DO-", Enter_Ptr, is_normal ; ok
 967+ 8656             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 967+ 8656             >
 967+ 8656             >                // dummy db directives used to calculate length of namec
 967+ 8656 3F 44 4F 2D >                db      "?DO-"
 967+ 865A             >len_NFA         defl    $ - temp_NFA
 967+ 865A             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 967+ 8656             >
 967+ 8656 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 967+ 8657 3F 44 4F 2D >                db      "?DO-"               // name string in 7-bit ascii, but
 967+ 865B             >                org     $-1                 // alter last byte of Name just above to set
 967+ 865A AD          >                db      {b $} | END_BIT     // msb as name end
 967+ 865B             >
 967+ 865B 3F 86       >                dw      last_NFA            // Link to previous definition Name
 967+ 865D             >C_DO_BACK:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 967+ 865D 27 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 967+ 865F             >                else
 967+ 865F ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 967+ 865F             >                endif           ; ok        // for other definitions it "points" the correct handler
 967+ 865F             >                // Use of "; ok" to suppress "warning[fwdref]"
 967+ 865F             >
 967+ 865F             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 968+ 865F 76 85                        dw      BACK
 969+ 8661              CDoBack_Begin:
 970+ 8661 EB 68 12 6E                  dw      SPFETCH, CSP, FETCH, SUBTRACT
 970+ 8665 3C 6B D4 6E
 971+ 8669 E3 63                        dw      ZBRANCH
 972+ 866B 0A 00                        dw      CDoBack_While - $
 973+ 866D 02 6A 9D 85                  dw          TWO_PLUS, ENDIF
 974+ 8671 CC 63                        dw      BRANCH
 975+ 8673 EE FF                        dw      CDoBack_Begin - $
 976+ 8675              CDoBack_While:
 977+ 8675 A7 70 12 6E                  dw      QCSP, CSP, STORE
 977+ 8679 49 6B
 978+ 867B 23 69                        dw      EXIT
 979+ 867D
 980+ 867D              //  ______________________________________________________________________
 981+ 867D              //
 982+ 867D              // do
 983+ 867D              // DO  ... LOOP
 984+ 867D              // DO  ... n +LOOP
 985+ 867D              // ?DO ... LOOP
 986+ 867D              // ?DO ... n +LOOP
 987+ 867D                              Colon_Def DO, "DO", is_immediate
 987+ 867D             >                New_Def  DO, "DO", Enter_Ptr, is_immediate ; ok
 987+ 867D             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 987+ 867D             >
 987+ 867D             >                // dummy db directives used to calculate length of namec
 987+ 867D 44 4F       >                db      "DO"
 987+ 867F             >len_NFA         defl    $ - temp_NFA
 987+ 867F             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 987+ 867D             >
 987+ 867D C2          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 987+ 867E 44 4F       >                db      "DO"               // name string in 7-bit ascii, but
 987+ 8680             >                org     $-1                 // alter last byte of Name just above to set
 987+ 867F CF          >                db      {b $} | END_BIT     // msb as name end
 987+ 8680             >
 987+ 8680 56 86       >                dw      last_NFA            // Link to previous definition Name
 987+ 8682             >DO:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 987+ 8682 27 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 987+ 8684             >                else
 987+ 8684 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 987+ 8684             >                endif           ; ok        // for other definitions it "points" the correct handler
 987+ 8684             >                // Use of "; ok" to suppress "warning[fwdref]"
 987+ 8684             >
 987+ 8684             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 988+ 8684 DE 70 6B 64                  dw      COMPILE, C_DO
 989+ 8688 12 6E 3C 6B                  dw      CSP, FETCH, STORE_CSP
 989+ 868C 38 70
 990+ 868E 81 6E BA 6C                  dw      HERE, THREE
 991+ 8692 23 69                        dw      EXIT
 992+ 8694
 993+ 8694              //  ______________________________________________________________________
 994+ 8694              //
 995+ 8694              // loop
 996+ 8694                              Colon_Def LOOP, "LOOP", is_immediate
 996+ 8694             >                New_Def  LOOP, "LOOP", Enter_Ptr, is_immediate ; ok
 996+ 8694             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 996+ 8694             >
 996+ 8694             >                // dummy db directives used to calculate length of namec
 996+ 8694 4C 4F 4F 50 >                db      "LOOP"
 996+ 8698             >len_NFA         defl    $ - temp_NFA
 996+ 8698             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 996+ 8694             >
 996+ 8694 C4          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 996+ 8695 4C 4F 4F 50 >                db      "LOOP"               // name string in 7-bit ascii, but
 996+ 8699             >                org     $-1                 // alter last byte of Name just above to set
 996+ 8698 D0          >                db      {b $} | END_BIT     // msb as name end
 996+ 8699             >
 996+ 8699 7D 86       >                dw      last_NFA            // Link to previous definition Name
 996+ 869B             >LOOP:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 996+ 869B 27 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 996+ 869D             >                else
 996+ 869D ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 996+ 869D             >                endif           ; ok        // for other definitions it "points" the correct handler
 996+ 869D             >                // Use of "; ok" to suppress "warning[fwdref]"
 996+ 869D             >
 996+ 869D             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 997+ 869D BA 6C 94 70                  dw      THREE, QPAIRS
 998+ 86A1 DE 70 F8 63                  dw      COMPILE, C_LOOP
 999+ 86A5 5D 86                        dw      C_DO_BACK
1000+ 86A7 23 69                        dw      EXIT
1001+ 86A9
1002+ 86A9              //  ______________________________________________________________________
1003+ 86A9              //
1004+ 86A9              // +loop
1005+ 86A9                              Colon_Def PLOOP, "+LOOP", is_immediate
1005+ 86A9             >                New_Def  PLOOP, "+LOOP", Enter_Ptr, is_immediate ; ok
1005+ 86A9             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1005+ 86A9             >
1005+ 86A9             >                // dummy db directives used to calculate length of namec
1005+ 86A9 2B 4C 4F 4F >                db      "+LOOP"
1005+ 86AD 50          >
1005+ 86AE             >len_NFA         defl    $ - temp_NFA
1005+ 86AE             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1005+ 86A9             >
1005+ 86A9 C5          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
1005+ 86AA 2B 4C 4F 4F >                db      "+LOOP"               // name string in 7-bit ascii, but
1005+ 86AE 50          >
1005+ 86AF             >                org     $-1                 // alter last byte of Name just above to set
1005+ 86AE D0          >                db      {b $} | END_BIT     // msb as name end
1005+ 86AF             >
1005+ 86AF 94 86       >                dw      last_NFA            // Link to previous definition Name
1005+ 86B1             >PLOOP:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1005+ 86B1 27 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
1005+ 86B3             >                else
1005+ 86B3 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
1005+ 86B3             >                endif           ; ok        // for other definitions it "points" the correct handler
1005+ 86B3             >                // Use of "; ok" to suppress "warning[fwdref]"
1005+ 86B3             >
1005+ 86B3             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1006+ 86B3 BA 6C 94 70                  dw      THREE, QPAIRS
1007+ 86B7 DE 70 2F 64                  dw      COMPILE, C_PLOOP
1008+ 86BB 5D 86                        dw      C_DO_BACK
1009+ 86BD 23 69                        dw      EXIT
1010+ 86BF
1011+ 86BF              //  ______________________________________________________________________
1012+ 86BF              //
1013+ 86BF              // ?do
1014+ 86BF                              Colon_Def QDO, "?DO", is_immediate
1014+ 86BF             >                New_Def  QDO, "?DO", Enter_Ptr, is_immediate ; ok
1014+ 86BF             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1014+ 86BF             >
1014+ 86BF             >                // dummy db directives used to calculate length of namec
1014+ 86BF 3F 44 4F    >                db      "?DO"
1014+ 86C2             >len_NFA         defl    $ - temp_NFA
1014+ 86C2             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1014+ 86BF             >
1014+ 86BF C3          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
1014+ 86C0 3F 44 4F    >                db      "?DO"               // name string in 7-bit ascii, but
1014+ 86C3             >                org     $-1                 // alter last byte of Name just above to set
1014+ 86C2 CF          >                db      {b $} | END_BIT     // msb as name end
1014+ 86C3             >
1014+ 86C3 A9 86       >                dw      last_NFA            // Link to previous definition Name
1014+ 86C5             >QDO:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1014+ 86C5 27 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
1014+ 86C7             >                else
1014+ 86C7 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
1014+ 86C7             >                endif           ; ok        // for other definitions it "points" the correct handler
1014+ 86C7             >                // Use of "; ok" to suppress "warning[fwdref]"
1014+ 86C7             >
1014+ 86C7             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1015+ 86C7 DE 70 3D 64                  dw      COMPILE, C_Q_DO
1016+ 86CB 12 6E 3C 6B                  dw      CSP, FETCH, STORE_CSP
1016+ 86CF 38 70
1017+ 86D1 81 6E A2 6C                  dw      HERE, ZERO, COMMA, ZERO
1017+ 86D5 9D 6E A2 6C
1018+ 86D9 81 6E BA 6C                  dw      HERE, THREE
1019+ 86DD 23 69                        dw      EXIT
1020+ 86DF
1021+ 86DF              Latest_Definition:
1022+ 86DF              //  ______________________________________________________________________
1023+ 86DF              //
1024+ 86DF              // \
1025+ 86DF                              Colon_Def BACKSLASH, "\\", is_immediate  // this is a single back-slash
1025+ 86DF             >                New_Def  BACKSLASH, "\\", Enter_Ptr, is_immediate ; ok
1025+ 86DF             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1025+ 86DF             >
1025+ 86DF             >                // dummy db directives used to calculate length of namec
1025+ 86DF 5C          >                db      "\\"
1025+ 86E0             >len_NFA         defl    $ - temp_NFA
1025+ 86E0             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1025+ 86DF             >
1025+ 86DF C1          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
1025+ 86E0 5C          >                db      "\\"               // name string in 7-bit ascii, but
1025+ 86E1             >                org     $-1                 // alter last byte of Name just above to set
1025+ 86E0 DC          >                db      {b $} | END_BIT     // msb as name end
1025+ 86E1             >
1025+ 86E1 BF 86       >                dw      last_NFA            // Link to previous definition Name
1025+ 86E3             >BACKSLASH:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1025+ 86E3 27 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
1025+ 86E5             >                else
1025+ 86E5 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
1025+ 86E5             >                endif           ; ok        // for other definitions it "points" the correct handler
1025+ 86E5             >                // Use of "; ok" to suppress "warning[fwdref]"
1025+ 86E5             >
1025+ 86E5             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1026+ 86E5 A1 6D 3C 6B                  dw      BLK, FETCH
1027+ 86E9 E3 63                        dw      ZBRANCH
1028+ 86EB 30 00                        dw      Backslash_Else_1 - $
1029+ 86ED A1 6D 3C 6B                  dw          BLK, FETCH, ONE, GREATER  // BLOCK 1 is used as temp-line in INCLUDE file
1029+ 86F1 AA 6C 1F 6F
1030+ 86F5 E3 63                        dw          ZBRANCH
1031+ 86F7 18 00                        dw          Backslash_Else_2 - $
1032+ 86F9 AA 6D 3C 6B                  dw              TO_IN, FETCH, CL, MOD, CL
1032+ 86FD D6 6C EC 79
1032+ 8701 D6 6C
1033+ 8703 9C 6A D4 6E                  dw              SWAP, SUBTRACT, TO_IN, PLUSSTORE
1033+ 8707 AA 6D 19 6B
1034+ 870B CC 63                        dw          BRANCH
1035+ 870D 0A 00                        dw          Backslash_Endif_2 - $
1036+ 870F              Backslash_Else_2:
1037+ 870F E2 6C 1C 6A                  dw              BBUF, CELL_MINUS, TO_IN, STORE
1037+ 8713 AA 6D 49 6B
1038+ 8717              Backslash_Endif_2:
1039+ 8717 CC 63                        dw      BRANCH
1040+ 8719 0A 00                        dw      Backslash_Endif_1 - $
1041+ 871B              Backslash_Else_1:
1042+ 871B A9 63 50 00                  dw          LIT, 80, TO_IN, STORE
1042+ 871F AA 6D 49 6B
1043+ 8723              Backslash_Endif_1:
1044+ 8723 23 69                        dw      EXIT
1045+ 8725
1046+ 8725              Fence_Word:
1047+ 8725              //  ______________________________________________________________________
1048+ 8725              //
1049+ 8725
1050+ 8725 00           Here_Dictionary db      0
1051+ 8726
# file closed: C:\Zx\CSpect\Projects\vForth15_INDIRECT/source/L3.asm
 113  8726
 114  8726              // now we save the compiled file so we can either run it or debug it
 115  8726                              SAVENEX OPEN "output/main.nex", ORIGIN
 116  8726                              SAVENEX CORE 3, 0, 0                                // Next core 3.0.0 required as minimum
 117  8726                              SAVENEX CFG  0
 118  8726                              SAVENEX BANK 2, 0
 119  8726                              SAVENEX AUTO
 120  8726                              SAVENEX CLOSE
 121  8726
 122  8726              //              PAGE 7 ;set 7 page to current slot
 123  8726              //              SAVEBIN "ram7.bin",$C000,$4000 ;- save 4000h begin from C000h of RAM to file
 124  8726              //              SAVEBIN "output/ram2.bin", $8000, 9800 ;- save 3000h begin from 8000h of RAM to file
 125  8726
 126  8726                              SAVETAP "output/F15E.tap", CODE, "forth15e", ORIGIN, 10000
 127  8726
 128  8726                              SAVEBIN "output/forth15E.bin", ORIGIN, 10000
 129  8726
 130  8726                              END
# file closed: C:\Zx\CSpect\Projects\vForth15_INDIRECT/source/main.asm
