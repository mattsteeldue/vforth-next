# file opened: C:\Zx\CSpect\Projects\vForth15_INDIRECT/source/main.asm
   1  0000              //  ______________________________________________________________________
   2  0000              //
   3  0000              //  main.asm
   4  0000              //  ______________________________________________________________________
   5  0000              //
   6  0000              //  v-Forth 1.52 NextZXOS version
   7  0000              //  build 20230106
   8  0000              //
   9  0000              //  Inirect-Thread version.
  10  0000              //
  11  0000              //  NextZXOS version
  12  0000              //  ______________________________________________________________________
  13  0000              //
  14  0000              //  This work is available as-is with no whatsoever warranty.
  15  0000              //  Copying, modifying and distributing this software is allowed
  16  0000              //  provided that the copyright notice is kept.
  17  0000              //  ______________________________________________________________________
  18  0000              //
  19  0000              //  by Matteo Vitturi, 1990-2023
  20  0000              //
  21  0000              //  https://sites.google.com/view/vforth/vforth15-next
  22  0000              //  https://www.oocities.org/matteo_vitturi/english/index.htm
  23  0000              //
  24  0000              //  This is the complete compiler for v.Forth for SINCLAIR ZX Spectrum Next.
  25  0000              //  Each line of this source list mustn't exceed 80 bytes.
  26  0000              //  Z80N (ZX Spectrum Next) extension is available.
  27  0000              //
  28  0000              //  This list has been tested using the following configuration:
  29  0000              //      - CSpect emulator V.2.12.30
  30  0000              //  ______________________________________________________________________
  31  0000              //
  32  0000              //  Z80 Registers usage map
  33  0000              //
  34  0000              //  AF
  35  0000              //  BC - Instruction Pointer: should be preserved during ROM/OS calls
  36  0000              //  DE - Working
  37  0000              //  HL - Working
  38  0000              //
  39  0000              //  AF'- Sometime used for backup purpose
  40  0000              //  BC'- Not used
  41  0000              //  DE'- Not used
  42  0000              //  HL'- Not used: (saved at startup)
  43  0000              //
  44  0000              //  SP - Calculator Stack Pointer
  45  0000              //  IX - Inner interpreter "next" address pointer. This way jp (ix) is 2T-state faster than JP next
  46  0000              //  IY - (ZX System: must be preserved to interact with standard ROM)
  47  0000              //
  48  0000              //  ______________________________________________________________________
  49  0000              //
  50  0000              //  _________________
  51  0000              //
  52  0000              //  FORTH DEFINITIONS
  53  0000              //  _________________
  54  0000
  55  0000                              OPT     --zxnext
  56  0000              //  ______________________________________________________________________
  57  0000              //
  58  0000              // this controls some debugging code in L0.asm
  59  0000              //  0 for final binary release.
  60  0000              //  1 for debugging with Visual Studio Code and DeZog
  61  0000              // -1 for for binary comparison with Forth generated code.
  62  0000              DEBUGGING       equ     -1
  63  0000              //
  64  0000              //  ______________________________________________________________________
  65  0000
  66  0000                              if ( -1 == DEBUGGING )
  67  0000              ORIGIN          equ     $62E6                   // for binary comparison
  68  0000                              endif
  69  0000              //  ______________________________________________________________________
  70  0000
  71  0000                              if (  0 == DEBUGGING )
  72  0000 ~            ORIGIN          equ     $6366                   // binary
  73  0000                              endif
  74  0000              //  ______________________________________________________________________
  75  0000
  76  0000                              if (  1 == DEBUGGING )
  77  0000 ~            ORIGIN          equ     $8080                   // for DeZog
  78  0000                              endif
  79  0000              //  ______________________________________________________________________
  80  0000
  81  0000                              DEVICE  ZXSPECTRUMNEXT
  82  0000
  83  0000                              ORG     ORIGIN
  84  62E6
  85  62E6                              if ( -1 == DEBUGGING )
  86  62E6 00 00 00...                  ds 128                            // for binary comparison
  87  62EA                              endif
  88  6366
  89  6366              //  ______________________________________________________________________
  90  6366              //
  91  6366              //  Naming convention for Label vs Forth correspondance
  92  6366              //  Forth words are named as they are named for real with some exception to avoid assembler syntax errors.
  93  6366              //    - Leading "0" is converted into "Z_"
  94  6366              //    - Leading "(" is converted into "C_", closing bracket is omitted
  95  6366              //    - Leading numbers are converted in letters: ONE_  TWO_ etc.
  96  6366              //    - Question mark "?" is converted into "Q" or omitted if needed / useful.
  97  6366              //    - Plus sign "+" is converted in _PLUS or ADD_ depending.
  98  6366              //    - Minus sign "-" in L (for Line), MINUS or SUBTRACT depending
  99  6366              //    - Greater-Than sign ">" in _GREATER or TO_ depending
 100  6366              //    - Equal sign "=" is converted in EQUAL
 101  6366              //    - Less-Than sign "<" in _LESS or FROM_ (or TO_ again) depending
 102  6366              //    - Asterisk sign "*" is converted in _MUL or STAR
 103  6366              //    - Slash "/" is converted in _DIV or omitted if it is clear what it means
 104  6366              //    - Exclamation mark "!" is converted in STORE
 105  6366              //    - At-Sign "@" is converted in FETCH
 106  6366              //    - Words that collide with Assembler are normally suffixed with "_OP"
 107  6366
 108  6366                              include "system.asm"
# file opened: C:\Zx\CSpect\Projects\vForth15_INDIRECT/source/system.asm
   1+ 6366              //  ______________________________________________________________________
   2+ 6366              //
   3+ 6366              //  system.asm
   4+ 6366              //  ______________________________________________________________________
   5+ 6366
   6+ 6366              // Registers:
   7+ 6366              //
   8+ 6366              //      BC: Instruction Pointer
   9+ 6366              //      DE:
  10+ 6366              //      HL: W register
  11+ 6366              //      SP: Calc stack Pointer
  12+ 6366              //      IX: Inner-Interpreter Address
  13+ 6366
  14+ 6366              //  ______________________________________________________________________
  15+ 6366              //
  16+ 6366              // ZX-Spectrum standard system variables
  17+ 6366              SCR_CT          equ     $5C8C                   // SCR-CT system variable
  18+ 6366              LASTK           equ     $5C08                   // LASTK system variable
  19+ 6366              BORDCR          equ     $5C48                   // BORDCR system variable
  20+ 6366              FLAGS2          equ     $5C6A                   // for caps-lock
  21+ 6366
  22+ 6366              //  ______________________________________________________________________
  23+ 6366              //
  24+ 6366              // Flag constants
  25+ 6366              TRUE_FLAG       equ     $FFFF
  26+ 6366              FALSE_FLAG      equ     $0000
  27+ 6366
  28+ 6366              //  ______________________________________________________________________
  29+ 6366              //
  30+ 6366              // Ascii char constants
  31+ 6366              NUL_CHAR        equ     $00
  32+ 6366              COMMA_CHAR      equ     $06
  33+ 6366              BACKSPACE_CHAR  equ     $08
  34+ 6366              CR_CHAR         equ     $0D
  35+ 6366              BLANK_CHAR      equ     $20
  36+ 6366              QUOTE_CHAR      equ     "'"
  37+ 6366              DQUOTE_CHAR     equ     '"'
  38+ 6366              UNDERSCORE_CHAR equ     $5F
  39+ 6366              SOLIDBLOCK_CHAR equ     $8F
  40+ 6366              HALFBLOCK_CHAR  equ     $8C
  41+ 6366              LC_A_CHAR       equ     $61                 // lower-case "a"
  42+ 6366              LC_Z_CHAR       equ     $7A                 // lower-case "z"
  43+ 6366
  44+ 6366
  45+ 6366              //  ______________________________________________________________________
  46+ 6366              //
  47+ 6366
  48+ 6366                              // emulate something like:  ld hl,rp
  49+ 6366              ldhlrp          macro
  50+ 6366 ~                            ld      hl,(RP_Pointer)
  51+ 6366                              endm
  52+ 6366
  53+ 6366                              // emulate something like:  ld rp,hl
  54+ 6366              ldrphl          macro
  55+ 6366 ~                            ld      (RP_Pointer),hl
  56+ 6366                              endm
  57+ 6366
  58+ 6366              //  ______________________________________________________________________
  59+ 6366              //
  60+ 6366              //  Inner interpreter next-address pointer. This is 2T-state faster than "jp address"
  61+ 6366              next            macro
  62+ 6366 ~                            jp      (ix)
  63+ 6366                              endm
  64+ 6366
  65+ 6366              psh1            macro
  66+ 6366 ~                            push    hl
  67+ 6366 ~                            jp      (ix)
  68+ 6366                              endm
  69+ 6366
  70+ 6366              psh2            macro
  71+ 6366 ~                            push    de
  72+ 6366 ~                            push    hl
  73+ 6366 ~                            jp      (ix)
  74+ 6366                              endm
  75+ 6366
  76+ 6366              //  ______________________________________________________________________
  77+ 6366              //
  78+ 6366              // Bit constants in length-byte
  79+ 6366
  80+ 6366              SMUDGE_BIT      equ     %00100000               // $20
  81+ 6366              IMMEDIATE_BIT   equ     %01000000               // $40
  82+ 6366              END_BIT         equ     %10000000               // $80
  83+ 6366
  84+ 6366
  85+ 6366              //  ______________________________________________________________________
  86+ 6366              //
  87+ 6366              //  To create Forth words using this (nice) Assembler, we have to use the two following
  88+ 6366              //  pointers
  89+ 6366              temp_NFA        defl    0
  90+ 6366              last_NFA        defl    0
  91+ 6366              len_NFA         defl    0
  92+ 6366
  93+ 6366              is_code         equ     0                   // so the direct machine-code starts at CFA
  94+ 6366              is_normal       equ     0                   // so the direct machine-code starts at CFA
  95+ 6366              is_immediate    equ     IMMEDIATE_BIT       // $40 - the definition is IMMEDIATE.
  96+ 6366
  97+ 6366              //  ______________________________________________________________________
  98+ 6366              //
  99+ 6366              //  Create a new "low-level" definition
 100+ 6366              //  This macro is used in the form  Create FORTH_NAME,n,"forth_name"
 101+ 6366              //  to create a new Forth Dictionary entry the same way Forth itself would do.
 102+ 6366              //  A word begins with a Length-Byte in range 1-31. Top 3 msb are used as flags
 103+ 6366              //  see SMUDGE_BIT and IMMEDIATE_BIT constant above.
 104+ 6366              //  It is followed by the Name of the word, i.e. a string expressed in 7-bit Ascii.
 105+ 6366              //  The last character of the Name must have the msb set to signal the end of it (END_BIT)
 106+ 6366              //  This macro acts much like the standard Forth definition CREATE
 107+ 6366
 108+ 6366              New_Def         macro   label, namec, runcode, bits
 109+ 6366 ~            temp_NFA        defl    $                   // save this NFA address to temp_NFA
 110+ 6366 ~
 111+ 6366 ~                            // dummy db directives used to calculate length of namec
 112+ 6366 ~                            db      namec
 113+ 6366 ~            len_NFA         defl    $ - temp_NFA
 114+ 6366 ~                            org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 115+ 6366 ~
 116+ 6366 ~                            db      len_NFA | END_BIT | bits  // The start of NFA must have msb set to signal the beginning of the sounted string
 117+ 6366 ~                            db      namec               // name string in 7-bit ascii, but
 118+ 6366 ~                            org     $-1                 // alter last byte of Name just above to set
 119+ 6366 ~                            db      {b $} | END_BIT     // msb as name end
 120+ 6366 ~
 121+ 6366 ~                            dw      last_NFA            // Link to previous definition Name
 122+ 6366 ~            label:          if runcode != 0 ; ok        // This is the start address of the direct jp(hl)
 123+ 6366 ~                            dw      runcode ; ok        // for primitive definitions  actual code
 124+ 6366 ~                            else
 125+ 6366 ~                            dw      $ + 2   ; ok        // is pointed by CFA
 126+ 6366 ~                            endif           ; ok        // for other definitions it "points" the correct handler
 127+ 6366 ~                            // Use of "; ok" to suppress "warning[fwdref]"
 128+ 6366 ~
 129+ 6366 ~            last_NFA        defl    temp_NFA            // keep track of NFA saved above
 130+ 6366                              endm
 131+ 6366
 132+ 6366              //  ______________________________________________________________________
 133+ 6366              //
 134+ 6366              // Create a "constant"
 135+ 6366              // The constant value is compiled in first PFA cell
 136+ 6366              Constant_Def    macro   label, namec, constant_value
 137+ 6366 ~                            New_Def  label, namec, Constant_Ptr, is_normal
 138+ 6366 ~                            dw      constant_value
 139+ 6366                              endm
 140+ 6366
 141+ 6366              //  ______________________________________________________________________
 142+ 6366              //
 143+ 6366              // Create a "variable"
 144+ 6366              // The when invoked, a variable returns a pointer, the address of first PFA cell
 145+ 6366              // this allow creation of "variables" which content is  of any length
 146+ 6366              Variable_Def    macro   label, namec, initial_value
 147+ 6366 ~                            New_Def  label, namec, Variable_Ptr, is_normal
 148+ 6366 ~                            dw      initial_value
 149+ 6366                              endm
 150+ 6366
 151+ 6366              //  ______________________________________________________________________
 152+ 6366              //
 153+ 6366              // Create a "user"
 154+ 6366              // It uses a single byte as offset to calculate the address of the variable
 155+ 6366              User_Def        macro   label, namec, offset_value
 156+ 6366 ~                            New_Def  label, namec, User_Ptr, is_normal
 157+ 6366 ~                            db      offset_value
 158+ 6366                              endm
 159+ 6366
 160+ 6366              //  ______________________________________________________________________
 161+ 6366              //
 162+ 6366              // Create a "colon-definition"
 163+ 6366              // The CFA contains a small routine i.e. "call Enter_Ptr".
 164+ 6366              // The PFA, three bytes later, contains the actual Forth definition
 165+ 6366              Colon_Def       macro   label, namec, bits
 166+ 6366 ~                            New_Def  label, namec, Enter_Ptr, bits ; ok
 167+ 6366                              endm
 168+ 6366
 169+ 6366              //  ______________________________________________________________________
 170+ 6366              //
 171+ 6366
 172+ 6366              S0_system:      equ     $D0E8               // Address of top of Calc Stack
 173+ 6366              TIB_system      equ     $D0E8               // TIB grows upwards, Return-Stack downward.
 174+ 6366              R0_system:      equ     $D188               // Address of top of Return Stack. This is S0 + $00A0
 175+ 6366              USER_system:    equ     $D188               // User variables zone.
 176+ 6366              FIRST_system:   equ     $D1E4               // Address of first BUFFER
 177+ 6366              LIMIT_system:   equ     $E000               // Address of first byte beyond last BUFFER
 178+ 6366
# file closed: C:\Zx\CSpect\Projects\vForth15_INDIRECT/source/system.asm
 109  6366                              include "L0.asm"
# file opened: C:\Zx\CSpect\Projects\vForth15_INDIRECT/source/L0.asm
   1+ 6366              //  ______________________________________________________________________
   2+ 6366              //
   3+ 6366              //  L0.asm
   4+ 6366              //
   5+ 6366              //  Origin-Area and Level-0 definitions
   6+ 6366              //  ______________________________________________________________________
   7+ 6366
   8+ 6366
   9+ 6366              Cold_origin:
  10+ 6366 A7                           and     a
  11+ 6367 C3 28 79                     jp      ColdRoutine
  12+ 636A              Warm_origin:
  13+ 636A 37                           scf
  14+ 636B C3 28 79                     jp      WarmRoutine
  15+ 636E
  16+ 636E              // +008
  17+ 636E E6 D0        SP_Basic:       dw      $D0E6               // These are bits with some "standard" meaning... 0101
  18+ 6370
  19+ 6370              // +00A
  20+ 6370 00 0E                        dw      $0E00
  21+ 6372
  22+ 6372              // +00C
  23+ 6372 09 87        Latest_origin:  dw      Latest_Definition   // Latest word (used in Cold_Start)
  24+ 6374
  25+ 6374              // +00E
  26+ 6374 0C 00        DEL_Char_Ptr:   dw      $000C               // This is the characther used as "Back-Space"
  27+ 6376
  28+ 6376              // +010
  29+ 6376 50 B2        CPU_Id          dw      $B250               // Z80 expressed in base 36
  30+ 6378
  31+ 6378              // +012
  32+ 6378 E8 D0        S0_origin:      dw      S0_system
  33+ 637A 88 D1        R0_origin:      dw      R0_system
  34+ 637C E8 D0        TIB_origin:     dw      TIB_system
  35+ 637E 1F 00        WIDTH_origin:   dw      31
  36+ 6380 01 00        WARNING_origin: dw      1
  37+ 6382 4F 87        FENCE_origin:   dw      Fence_Word
  38+ 6384 4F 87        DP_origin       dw      Fence_Word
  39+ 6386 36 78        VOCLINK_origin: dw      Voclink_Ptr
  40+ 6388 E4 D1                        dw      FIRST_system
  41+ 638A 00 E0                        dw      LIMIT_system
  42+ 638C
  43+ 638C              // +026
  44+ 638C 8F           Block_Face:     db      SOLIDBLOCK_CHAR     // Caps-Lock   Cursor face
  45+ 638D 8C           Half_Face:      db      HALFBLOCK_CHAR      // Caps-unlock Cursor face
  46+ 638E 5F           Underscore_Face:db      UNDERSCORE_CHAR     // Underscore  Cursor face
  47+ 638F 00                           db      0
  48+ 6390
  49+ 6390              // +02A
  50+ 6390 00 00        IX_Echo:        dw      $0000               // Echo IX after NextOS call
  51+ 6392
  52+ 6392              // +02C
  53+ 6392 00 00        SP_Saved:       dw      $0000               // Saved SP dufing NextOS call
  54+ 6394
  55+ 6394              // +02E
  56+ 6394 88 D1        USER_Pointer:   dw      USER_system
  57+ 6396
  58+ 6396              // +030
  59+ 6396 88 D1        RP_Pointer:     dw      $d188 // R0_system
  60+ 6398
  61+ 6398              // +32
  62+ 6398              // SP_Basic        dw      0
  63+ 6398
  64+ 6398
  65+ 6398              //  ______________________________________________________________________
  66+ 6398
  67+ 6398              // from this point we can use LDHLRP and LDRPHL Assembler macros
  68+ 6398              // instead of their equivalent long sequences.
  69+ 6398
  70+ 6398              //  ______________________________________________________________________
  71+ 6398
  72+ 6398              // address for "next" - inner interpreter
  73+ 6398              // This address must always be pointed by IX
  74+ 6398              // "next" macro simply does a  jp(ix)  instruction
  75+ 6398
  76+ 6398              // Psh2_Ptr:       push    de
  77+ 6398              // Psh1_Ptr:       push    hl
  78+ 6398
  79+ 6398              Next_Ptr:       // This address must always be kept in IX: "next" relies on that
  80+ 6398
  81+ 6398                              if ( 1 == DEBUGGING )
  82+ 6398 ~                            ld      hl, Next_Breakpoint_1
  83+ 6398 ~                            and     a
  84+ 6398 ~                            sbc     hl, bc
  85+ 6398 ~                            jr      nz, Next_Continue
  86+ 6398 ~                            nop // This is where you have to put a real breakpoint to intercept BC values...
  87+ 6398                              endif
  88+ 6398
  89+ 6398              Next_Continue:
  90+ 6398 0A                           ld      a, (bc)
  91+ 6399 03                           inc     bc
  92+ 639A 6F                           ld      l, a
  93+ 639B 0A                           ld      a, (bc)
  94+ 639C 03                           inc     bc
  95+ 639D 67                           ld      h, a                // hl contains a CFA (xt) of word being executed
  96+ 639E
  97+ 639E              // Execute xt i.e. CFA held in HL
  98+ 639E              Exec_Ptr:
  99+ 639E 5E                           ld      e, (hl)
 100+ 639F 23                           inc     hl
 101+ 63A0 56                           ld      d, (hl)
 102+ 63A1 EB                           ex      de, hl
 103+ 63A2 E9                           jp      (hl)                // and jump to it
 104+ 63A3                                                          // there you'll find the real code or a CALL to a ;code part
 105+ 63A3
 106+ 63A3              //  ______________________________________________________________________
 107+ 63A3              //
 108+ 63A3              // lit          -- x
 109+ 63A3              // puts on top of stack the value of the following word.
 110+ 63A3              // it is compiled in colon definition before a literal number
 111+ 63A3
 112+ 63A3                              New_Def  LIT, "LIT", is_code, is_normal
 112+ 63A3             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 112+ 63A3             >
 112+ 63A3             >                // dummy db directives used to calculate length of namec
 112+ 63A3 4C 49 54    >                db      "LIT"
 112+ 63A6             >len_NFA         defl    $ - temp_NFA
 112+ 63A6             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 112+ 63A3             >
 112+ 63A3 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 112+ 63A4 4C 49 54    >                db      "LIT"               // name string in 7-bit ascii, but
 112+ 63A7             >                org     $-1                 // alter last byte of Name just above to set
 112+ 63A6 D4          >                db      {b $} | END_BIT     // msb as name end
 112+ 63A7             >
 112+ 63A7 00 00       >                dw      last_NFA            // Link to previous definition Name
 112+ 63A9             >LIT:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 112+ 63A9 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
 112+ 63A9             >                else
 112+ 63A9 AB 63       >                dw      $ + 2   ; ok        // is pointed by CFA
 112+ 63AB             >                endif           ; ok        // for other definitions it "points" the correct handler
 112+ 63AB             >                // Use of "; ok" to suppress "warning[fwdref]"
 112+ 63AB             >
 112+ 63AB             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 113+ 63AB
 114+ 63AB 0A                           ld      a, (bc)
 115+ 63AC 03                           inc     bc
 116+ 63AD 6F                           ld      l, a
 117+ 63AE 0A                           ld      a, (bc)
 118+ 63AF 03                           inc     bc
 119+ 63B0 67                           ld      h, a
 120+ 63B1                              psh1
 120+ 63B1 E5          >                push    hl
 120+ 63B2 DD E9       >                jp      (ix)
 121+ 63B4
 122+ 63B4              //  ______________________________________________________________________
 123+ 63B4              //
 124+ 63B4              // execute      i*x xt -- j*x
 125+ 63B4              // execution token. usually xt is given by CFA
 126+ 63B4
 127+ 63B4                              New_Def  EXECUTE, "EXECUTE", is_code, is_normal
 127+ 63B4             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 127+ 63B4             >
 127+ 63B4             >                // dummy db directives used to calculate length of namec
 127+ 63B4 45 58 45 43 >                db      "EXECUTE"
 127+ 63B8 55 54 45    >
 127+ 63BB             >len_NFA         defl    $ - temp_NFA
 127+ 63BB             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 127+ 63B4             >
 127+ 63B4 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 127+ 63B5 45 58 45 43 >                db      "EXECUTE"               // name string in 7-bit ascii, but
 127+ 63B9 55 54 45    >
 127+ 63BC             >                org     $-1                 // alter last byte of Name just above to set
 127+ 63BB C5          >                db      {b $} | END_BIT     // msb as name end
 127+ 63BC             >
 127+ 63BC A3 63       >                dw      last_NFA            // Link to previous definition Name
 127+ 63BE             >EXECUTE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 127+ 63BE ~           >                dw      runcode ; ok        // for primitive definitions  actual code
 127+ 63BE             >                else
 127+ 63BE C0 63       >                dw      $ + 2   ; ok        // is pointed by CFA
 127+ 63C0             >                endif           ; ok        // for other definitions it "points" the correct handler
 127+ 63C0             >                // Use of "; ok" to suppress "warning[fwdref]"
 127+ 63C0             >
 127+ 63C0             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 128+ 63C0 E1                           pop     hl
 129+ 63C1 18 DB                        jr      Exec_Ptr
 130+ 63C3
 131+ 63C3
 132+ 63C3              //  ______________________________________________________________________
 133+ 63C3              //
 134+ 63C3              // (+loop)       --
 135+ 63C3              // compiled by +LOOP. it uses the top two values of return-stack to
 136+ 63C3              // keep track of index and limit, they are accessed via I and I'
 137+ 63C3                              New_Def C_PLOOP, "(+LOOP)", is_code, is_normal
 137+ 63C3             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 137+ 63C3             >
 137+ 63C3             >                // dummy db directives used to calculate length of namec
 137+ 63C3 28 2B 4C 4F >                db      "(+LOOP)"
 137+ 63C7 4F 50 29    >
 137+ 63CA             >len_NFA         defl    $ - temp_NFA
 137+ 63CA             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 137+ 63C3             >
 137+ 63C3 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 137+ 63C4 28 2B 4C 4F >                db      "(+LOOP)"               // name string in 7-bit ascii, but
 137+ 63C8 4F 50 29    >
 137+ 63CB             >                org     $-1                 // alter last byte of Name just above to set
 137+ 63CA A9          >                db      {b $} | END_BIT     // msb as name end
 137+ 63CB             >
 137+ 63CB B4 63       >                dw      last_NFA            // Link to previous definition Name
 137+ 63CD             >C_PLOOP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 137+ 63CD ~           >                dw      runcode ; ok        // for primitive definitions  actual code
 137+ 63CD             >                else
 137+ 63CD CF 63       >                dw      $ + 2   ; ok        // is pointed by CFA
 137+ 63CF             >                endif           ; ok        // for other definitions it "points" the correct handler
 137+ 63CF             >                // Use of "; ok" to suppress "warning[fwdref]"
 137+ 63CF             >
 137+ 63CF             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 138+ 63CF
 139+ 63CF              Loop_Ptr:
 140+ 63CF D9                           exx
 141+ 63D0                              ldhlrp                      // ld hl,rp macro 30h +Origin
 141+ 63D0 2A 96 63    >                ld      hl,(RP_Pointer)
 142+ 63D3
 143+ 63D3 C1                           pop     bc                  // bc is increment
 144+ 63D4
 145+ 63D4 5E                           ld      e, (hl)             // hl points to loop-index, add increment to it.
 146+ 63D5 7B                           ld      a, e                // de keeps index before increment.
 147+ 63D6 81                           add     c
 148+ 63D7 77                           ld      (hl), a
 149+ 63D8 23                           inc     hl
 150+ 63D9 56                           ld      d, (hl)
 151+ 63DA 7A                           ld      a, d
 152+ 63DB 88                           adc     b
 153+ 63DC 77                           ld      (hl),a
 154+ 63DD 23                           inc     hl
 155+ 63DE
 156+ 63DE 7B                           ld      a, e
 157+ 63DF 96                           sub     (hl)
 158+ 63E0 5F                           ld      e, a
 159+ 63E1 23                           inc     hl
 160+ 63E2 7A                           ld      a, d
 161+ 63E3 9E                           sbc     (hl)
 162+ 63E4 57                           ld      d, a                // DE is index - limit : limit is the "new zero"
 163+ 63E5
 164+ 63E5 EB                           ex      de, hl
 165+ 63E6 09                           add     hl, bc
 166+ 63E7
 167+ 63E7 CB 78                        bit     7, b                // keep increment-sign just before overwriting d
 168+ 63E9 28 01                        jr      z, Loop_NegativeIncrement
 169+ 63EB 3F                               ccf
 170+ 63EC              Loop_NegativeIncrement:
 171+ 63EC 38 03                        jr      c, Loop_Endif
 172+ 63EE D9                               exx
 173+ 63EF 18 26                            jr      Branch_Ptr      // perform branch consuming following cell
 174+ 63F1              Loop_Endif:
 175+ 63F1 EB                           ex      de, hl
 176+ 63F2 23                           inc     hl
 177+ 63F3                              ldrphl                      // ld rp,hl macro 30h +Origin
 177+ 63F3 22 96 63    >                ld      (RP_Pointer),hl
 178+ 63F6 D9                           exx
 179+ 63F7 03                           inc     bc                  // skip branch-style offset
 180+ 63F8 03                           inc     bc
 181+ 63F9                              next
 181+ 63F9 DD E9       >                jp      (ix)
 182+ 63FB
 183+ 63FB              //  ______________________________________________________________________
 184+ 63FB              //
 185+ 63FB              // (loop)       n --
 186+ 63FB              // same as (LOOP) but index is incremented by 1
 187+ 63FB              // compiled by LOOP.
 188+ 63FB                              New_Def C_LOOP, "(LOOP)", is_code, is_normal
 188+ 63FB             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 188+ 63FB             >
 188+ 63FB             >                // dummy db directives used to calculate length of namec
 188+ 63FB 28 4C 4F 4F >                db      "(LOOP)"
 188+ 63FF 50 29       >
 188+ 6401             >len_NFA         defl    $ - temp_NFA
 188+ 6401             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 188+ 63FB             >
 188+ 63FB 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 188+ 63FC 28 4C 4F 4F >                db      "(LOOP)"               // name string in 7-bit ascii, but
 188+ 6400 50 29       >
 188+ 6402             >                org     $-1                 // alter last byte of Name just above to set
 188+ 6401 A9          >                db      {b $} | END_BIT     // msb as name end
 188+ 6402             >
 188+ 6402 C3 63       >                dw      last_NFA            // Link to previous definition Name
 188+ 6404             >C_LOOP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 188+ 6404 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
 188+ 6404             >                else
 188+ 6404 06 64       >                dw      $ + 2   ; ok        // is pointed by CFA
 188+ 6406             >                endif           ; ok        // for other definitions it "points" the correct handler
 188+ 6406             >                // Use of "; ok" to suppress "warning[fwdref]"
 188+ 6406             >
 188+ 6406             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 189+ 6406 ED 8A 00 01                  push    1
 190+ 640A 18 C3                        jr      Loop_Ptr
 191+ 640C
 192+ 640C              //  ______________________________________________________________________
 193+ 640C              //
 194+ 640C              // branch       --
 195+ 640C              // unconditional branch in colon definition using the following cell as an offset from current IP value
 196+ 640C              // compiled by ELSE, AGAIN and some other immediate words
 197+ 640C
 198+ 640C                              New_Def BRANCH, "BRANCH", is_code, is_normal
 198+ 640C             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 198+ 640C             >
 198+ 640C             >                // dummy db directives used to calculate length of namec
 198+ 640C 42 52 41 4E >                db      "BRANCH"
 198+ 6410 43 48       >
 198+ 6412             >len_NFA         defl    $ - temp_NFA
 198+ 6412             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 198+ 640C             >
 198+ 640C 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 198+ 640D 42 52 41 4E >                db      "BRANCH"               // name string in 7-bit ascii, but
 198+ 6411 43 48       >
 198+ 6413             >                org     $-1                 // alter last byte of Name just above to set
 198+ 6412 C8          >                db      {b $} | END_BIT     // msb as name end
 198+ 6413             >
 198+ 6413 FB 63       >                dw      last_NFA            // Link to previous definition Name
 198+ 6415             >BRANCH:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 198+ 6415 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
 198+ 6415             >                else
 198+ 6415 17 64       >                dw      $ + 2   ; ok        // is pointed by CFA
 198+ 6417             >                endif           ; ok        // for other definitions it "points" the correct handler
 198+ 6417             >                // Use of "; ok" to suppress "warning[fwdref]"
 198+ 6417             >
 198+ 6417             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 199+ 6417              Branch_Ptr:
 200+ 6417 60                           ld      h, b
 201+ 6418 69                           ld      l, c
 202+ 6419 5E                           ld      e, (hl)
 203+ 641A 23                           inc     hl
 204+ 641B 56                           ld      d, (hl)
 205+ 641C 2B                           dec     hl                  // offset is calculated from current IP
 206+ 641D 19                           add     hl, de
 207+ 641E 4D                           ld      c, l
 208+ 641F 44                           ld      b, h
 209+ 6420                              next
 209+ 6420 DD E9       >                jp      (ix)
 210+ 6422
 211+ 6422
 212+ 6422              //  ______________________________________________________________________
 213+ 6422              //
 214+ 6422              // 0branch      f --
 215+ 6422              // conditional branch if the top-of-stack is ZERO or FALSE.
 216+ 6422              // compiled by IF, UNTIL and some other immediate words
 217+ 6422
 218+ 6422                              New_Def ZBRANCH, "0BRANCH", is_code, is_normal
 218+ 6422             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 218+ 6422             >
 218+ 6422             >                // dummy db directives used to calculate length of namec
 218+ 6422 30 42 52 41 >                db      "0BRANCH"
 218+ 6426 4E 43 48    >
 218+ 6429             >len_NFA         defl    $ - temp_NFA
 218+ 6429             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 218+ 6422             >
 218+ 6422 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 218+ 6423 30 42 52 41 >                db      "0BRANCH"               // name string in 7-bit ascii, but
 218+ 6427 4E 43 48    >
 218+ 642A             >                org     $-1                 // alter last byte of Name just above to set
 218+ 6429 C8          >                db      {b $} | END_BIT     // msb as name end
 218+ 642A             >
 218+ 642A 0C 64       >                dw      last_NFA            // Link to previous definition Name
 218+ 642C             >ZBRANCH:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 218+ 642C ~           >                dw      runcode ; ok        // for primitive definitions  actual code
 218+ 642C             >                else
 218+ 642C 2E 64       >                dw      $ + 2   ; ok        // is pointed by CFA
 218+ 642E             >                endif           ; ok        // for other definitions it "points" the correct handler
 218+ 642E             >                // Use of "; ok" to suppress "warning[fwdref]"
 218+ 642E             >
 218+ 642E             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 219+ 642E              ZBranch_Ptr:
 220+ 642E E1                           pop     hl
 221+ 642F 7D                           ld      a, l
 222+ 6430 B4                           or      h
 223+ 6431 28 E4                        jr      z, Branch_Ptr
 224+ 6433 03                           inc     bc                  // if not branch, skip offset cell.
 225+ 6434 03                           inc     bc
 226+ 6435                              next
 226+ 6435 DD E9       >                jp      (ix)
 227+ 6437
 228+ 6437              //  ______________________________________________________________________
 229+ 6437              //
 230+ 6437              // (leave)        --
 231+ 6437              // compiled by LEAVE
 232+ 6437              // this forces to exit from loop and jump past
 233+ 6437                              New_Def C_LEAVE, "(LEAVE)", is_code, is_normal
 233+ 6437             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 233+ 6437             >
 233+ 6437             >                // dummy db directives used to calculate length of namec
 233+ 6437 28 4C 45 41 >                db      "(LEAVE)"
 233+ 643B 56 45 29    >
 233+ 643E             >len_NFA         defl    $ - temp_NFA
 233+ 643E             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 233+ 6437             >
 233+ 6437 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 233+ 6438 28 4C 45 41 >                db      "(LEAVE)"               // name string in 7-bit ascii, but
 233+ 643C 56 45 29    >
 233+ 643F             >                org     $-1                 // alter last byte of Name just above to set
 233+ 643E A9          >                db      {b $} | END_BIT     // msb as name end
 233+ 643F             >
 233+ 643F 22 64       >                dw      last_NFA            // Link to previous definition Name
 233+ 6441             >C_LEAVE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 233+ 6441 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
 233+ 6441             >                else
 233+ 6441 43 64       >                dw      $ + 2   ; ok        // is pointed by CFA
 233+ 6443             >                endif           ; ok        // for other definitions it "points" the correct handler
 233+ 6443             >                // Use of "; ok" to suppress "warning[fwdref]"
 233+ 6443             >
 233+ 6443             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 234+ 6443
 235+ 6443                              ldhlrp
 235+ 6443 2A 96 63    >                ld      hl,(RP_Pointer)
 236+ 6446 11 04 00                     ld      de, 4
 237+ 6449 19                           add     hl, de
 238+ 644A                              ldrphl
 238+ 644A 22 96 63    >                ld      (RP_Pointer),hl
 239+ 644D
 240+ 644D 18 C8                        jr      Branch_Ptr       // perform branch consuming following cell
 241+ 644F                              next
 241+ 644F DD E9       >                jp      (ix)
 242+ 6451
 243+ 6451              //  ______________________________________________________________________
 244+ 6451              //
 245+ 6451              // (?do)        lim ind --
 246+ 6451              // compiled by ?DO to make a loop checking for lim == ind first
 247+ 6451              // at run-time (?DO) must be followed by a BRANCH offset
 248+ 6451              // used to skip the loop if lim == ind
 249+ 6451                              New_Def C_Q_DO, "(?DO)", is_code, is_normal
 249+ 6451             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 249+ 6451             >
 249+ 6451             >                // dummy db directives used to calculate length of namec
 249+ 6451 28 3F 44 4F >                db      "(?DO)"
 249+ 6455 29          >
 249+ 6456             >len_NFA         defl    $ - temp_NFA
 249+ 6456             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 249+ 6451             >
 249+ 6451 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 249+ 6452 28 3F 44 4F >                db      "(?DO)"               // name string in 7-bit ascii, but
 249+ 6456 29          >
 249+ 6457             >                org     $-1                 // alter last byte of Name just above to set
 249+ 6456 A9          >                db      {b $} | END_BIT     // msb as name end
 249+ 6457             >
 249+ 6457 37 64       >                dw      last_NFA            // Link to previous definition Name
 249+ 6459             >C_Q_DO:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 249+ 6459 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
 249+ 6459             >                else
 249+ 6459 5B 64       >                dw      $ + 2   ; ok        // is pointed by CFA
 249+ 645B             >                endif           ; ok        // for other definitions it "points" the correct handler
 249+ 645B             >                // Use of "; ok" to suppress "warning[fwdref]"
 249+ 645B             >
 249+ 645B             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 250+ 645B D1                           pop     de                  // de has the index
 251+ 645C E1                           pop     hl                  // hl has the limit
 252+ 645D E5                           push    hl
 253+ 645E D5                           push    de
 254+ 645F A7                           and     a                   // reset carry flag
 255+ 6460 ED 52                        sbc     hl, de              // compute limit - index
 256+ 6462 20 04                        jr      nz, Do_Ptr          // if zero then don't even begin loop
 257+ 6464 D1                               pop     de
 258+ 6465 E1                               pop     hl
 259+ 6466
 260+ 6466 18 AF                            jr      Branch_Ptr          // perform branch consuming following cell
 261+ 6468              Do_Ptr:
 262+ 6468                              ldhlrp                      // prepare RP
 262+ 6468 2A 96 63    >                ld      hl,(RP_Pointer)
 263+ 646B 2B                           dec     hl
 264+ 646C 2B                           dec     hl
 265+ 646D 2B                           dec     hl
 266+ 646E 2B                           dec     hl
 267+ 646F                              ldrphl
 267+ 646F 22 96 63    >                ld      (RP_Pointer),hl
 268+ 6472
 269+ 6472                              // store index as top RP
 270+ 6472 D1                           pop     de
 271+ 6473 73                           ld      (hl), e
 272+ 6474 23                           inc     hl
 273+ 6475 72                           ld      (hl), d
 274+ 6476 23                           inc     hl
 275+ 6477                              // stores lim as second from top RP
 276+ 6477 D1                           pop     de
 277+ 6478 73                           ld      (hl), e
 278+ 6479 23                           inc     hl
 279+ 647A 72                           ld      (hl), d
 280+ 647B
 281+ 647B                              // skip branch-style offseet
 282+ 647B 03                           inc     bc
 283+ 647C 03                           inc     bc
 284+ 647D                              next
 284+ 647D DD E9       >                jp      (ix)
 285+ 647F
 286+ 647F              //  ______________________________________________________________________
 287+ 647F              //
 288+ 647F              // (do)        lim ind --
 289+ 647F              // compiled by DO to make a loop checking for lim == ind first
 290+ 647F              // this is a simpler version of (?DO)
 291+ 647F                              New_Def C_DO, "(DO)", is_code, is_normal
 291+ 647F             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 291+ 647F             >
 291+ 647F             >                // dummy db directives used to calculate length of namec
 291+ 647F 28 44 4F 29 >                db      "(DO)"
 291+ 6483             >len_NFA         defl    $ - temp_NFA
 291+ 6483             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 291+ 647F             >
 291+ 647F 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 291+ 6480 28 44 4F 29 >                db      "(DO)"               // name string in 7-bit ascii, but
 291+ 6484             >                org     $-1                 // alter last byte of Name just above to set
 291+ 6483 A9          >                db      {b $} | END_BIT     // msb as name end
 291+ 6484             >
 291+ 6484 51 64       >                dw      last_NFA            // Link to previous definition Name
 291+ 6486             >C_DO:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 291+ 6486 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
 291+ 6486             >                else
 291+ 6486 88 64       >                dw      $ + 2   ; ok        // is pointed by CFA
 291+ 6488             >                endif           ; ok        // for other definitions it "points" the correct handler
 291+ 6488             >                // Use of "; ok" to suppress "warning[fwdref]"
 291+ 6488             >
 291+ 6488             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 292+ 6488 0B                           dec     bc                  // prepare IP beforehand
 293+ 6489 0B                           dec     bc                  // to balance the two final inc bc in (?do)
 294+ 648A 18 DC                        jr      Do_Ptr
 295+ 648C
 296+ 648C              //  ______________________________________________________________________
 297+ 648C              //
 298+ 648C              // i            -- n
 299+ 648C              // used between DO and LOOP or between DO e +LOOP to copy on top of stack
 300+ 648C              // the current value of the index-loop
 301+ 648C                              New_Def I, "I", is_code, is_normal
 301+ 648C             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 301+ 648C             >
 301+ 648C             >                // dummy db directives used to calculate length of namec
 301+ 648C 49          >                db      "I"
 301+ 648D             >len_NFA         defl    $ - temp_NFA
 301+ 648D             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 301+ 648C             >
 301+ 648C 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 301+ 648D 49          >                db      "I"               // name string in 7-bit ascii, but
 301+ 648E             >                org     $-1                 // alter last byte of Name just above to set
 301+ 648D C9          >                db      {b $} | END_BIT     // msb as name end
 301+ 648E             >
 301+ 648E 7F 64       >                dw      last_NFA            // Link to previous definition Name
 301+ 6490             >I:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 301+ 6490 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
 301+ 6490             >                else
 301+ 6490 92 64       >                dw      $ + 2   ; ok        // is pointed by CFA
 301+ 6492             >                endif           ; ok        // for other definitions it "points" the correct handler
 301+ 6492             >                // Use of "; ok" to suppress "warning[fwdref]"
 301+ 6492             >
 301+ 6492             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 302+ 6492              I_Ptr:
 303+ 6492
 304+ 6492                              ldhlrp
 304+ 6492 2A 96 63    >                ld      hl,(RP_Pointer)
 305+ 6495              I_Ptr_prime
 306+ 6495 5E                           ld      e, (hl)
 307+ 6496 23                           inc     hl
 308+ 6497 56                           ld      d, (hl)
 309+ 6498 D5                           push    de
 310+ 6499                              next
 310+ 6499 DD E9       >                jp      (ix)
 311+ 649B
 312+ 649B              //  ______________________________________________________________________
 313+ 649B              //
 314+ 649B              // i'            -- n
 315+ 649B              // used between DO and LOOP or between DO e +LOOP to copy on top of stack
 316+ 649B              // the limit of the index-loop
 317+ 649B
 318+ 649B                              New_Def II, "I'", is_code, is_normal
 318+ 649B             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 318+ 649B             >
 318+ 649B             >                // dummy db directives used to calculate length of namec
 318+ 649B 49 27       >                db      "I'"
 318+ 649D             >len_NFA         defl    $ - temp_NFA
 318+ 649D             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 318+ 649B             >
 318+ 649B 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 318+ 649C 49 27       >                db      "I'"               // name string in 7-bit ascii, but
 318+ 649E             >                org     $-1                 // alter last byte of Name just above to set
 318+ 649D A7          >                db      {b $} | END_BIT     // msb as name end
 318+ 649E             >
 318+ 649E 8C 64       >                dw      last_NFA            // Link to previous definition Name
 318+ 64A0             >II:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 318+ 64A0 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
 318+ 64A0             >                else
 318+ 64A0 A2 64       >                dw      $ + 2   ; ok        // is pointed by CFA
 318+ 64A2             >                endif           ; ok        // for other definitions it "points" the correct handler
 318+ 64A2             >                // Use of "; ok" to suppress "warning[fwdref]"
 318+ 64A2             >
 318+ 64A2             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 319+ 64A2                              ldhlrp
 319+ 64A2 2A 96 63    >                ld      hl,(RP_Pointer)
 320+ 64A5 23                           inc     hl
 321+ 64A6 23                           inc     hl
 322+ 64A7 18 EC                        jr      I_Ptr_prime
 323+ 64A9
 324+ 64A9
 325+ 64A9              //  ______________________________________________________________________
 326+ 64A9              //
 327+ 64A9              // digit        c n -- u 1  |  0
 328+ 64A9              // convert a character c using base n
 329+ 64A9              // returns a unsigned number and a true flag
 330+ 64A9              // or just a false flag if the conversion fails
 331+ 64A9                              New_Def DIGIT, "DIGIT", is_code, is_normal
 331+ 64A9             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 331+ 64A9             >
 331+ 64A9             >                // dummy db directives used to calculate length of namec
 331+ 64A9 44 49 47 49 >                db      "DIGIT"
 331+ 64AD 54          >
 331+ 64AE             >len_NFA         defl    $ - temp_NFA
 331+ 64AE             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 331+ 64A9             >
 331+ 64A9 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 331+ 64AA 44 49 47 49 >                db      "DIGIT"               // name string in 7-bit ascii, but
 331+ 64AE 54          >
 331+ 64AF             >                org     $-1                 // alter last byte of Name just above to set
 331+ 64AE D4          >                db      {b $} | END_BIT     // msb as name end
 331+ 64AF             >
 331+ 64AF 9B 64       >                dw      last_NFA            // Link to previous definition Name
 331+ 64B1             >DIGIT:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 331+ 64B1 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
 331+ 64B1             >                else
 331+ 64B1 B3 64       >                dw      $ + 2   ; ok        // is pointed by CFA
 331+ 64B3             >                endif           ; ok        // for other definitions it "points" the correct handler
 331+ 64B3             >                // Use of "; ok" to suppress "warning[fwdref]"
 331+ 64B3             >
 331+ 64B3             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 332+ 64B3 E1                           pop     hl                  // l has the base
 333+ 64B4 D1                           pop     de                  // e has the digit
 334+ 64B5 7B                           ld      a, e
 335+ 64B6 FE 60                        cp      $60                 // check if lowercase
 336+ 64B8 38 02                        jr      c, Digit_Uppercase
 337+ 64BA D6 20                            sub     $20                 // quick'n'dirty uppercase
 338+ 64BC              Digit_Uppercase:
 339+ 64BC D6 30                        sub     $30
 340+ 64BE 38 15                        jr      c, Digit_Fail       // fail when character < "0"
 341+ 64C0 FE 0A                            cp      $0A
 342+ 64C2 38 06                            jr      c, Digit_Decimal    // perhaps is not decimal
 343+ 64C4 D6 07                                sub     7                   // try hex and subtract 7
 344+ 64C6 FE 0A                                cp      $0A
 345+ 64C8 38 0B                                jr      c,  Digit_Fail      // it is not hex !
 346+ 64CA
 347+ 64CA              Digit_Decimal:
 348+ 64CA                              // compare digit
 349+ 64CA BD                           cp      l                   // compare with base
 350+ 64CB
 351+ 64CB 30 08                        jr      nc, Digit_Fail      // fail when greater than base
 352+ 64CD 5F                               ld      e, a                // digit is returned as second from TOS
 353+ 64CE 21 01 00                         ld      hl, 1
 354+ 64D1
 355+ 64D1                                  psh2
 355+ 64D1 D5          >                push    de
 355+ 64D2 E5          >                push    hl
 355+ 64D3 DD E9       >                jp      (ix)
 356+ 64D5              Digit_Fail:
 357+ 64D5 21 00 00                     ld      hl, 0
 358+ 64D8                              psh1
 358+ 64D8 E5          >                push    hl
 358+ 64D9 DD E9       >                jp      (ix)
 359+ 64DB
 360+ 64DB              //  ______________________________________________________________________
 361+ 64DB              //
 362+ 64DB              //  parametric uppercase routine
 363+ 64DB              //  depending on the following op-code the routine can be by-passed
 364+ 64DB              //  changing the behaviour of some callers.
 365+ 64DB              //  If it is "ret" then the system is Case-Sensitive
 366+ 64DB              //  If it is "Nop" then the system is Case-Insensitive
 367+ 64DB              //  Only A register is touched.
 368+ 64DB 00           Case_Sensitive: nop                         // Default is case-insensitive.
 369+ 64DC              Case_Upper:
 370+ 64DC FE 61                        cp      LC_A_CHAR           // lower-case "a"
 371+ 64DE D8                           ret     c                   // no change if A < "a"
 372+ 64DF FE 7B                        cp      LC_Z_CHAR + 1       // lower-case "z" + 1
 373+ 64E1 D0                           ret     nc                  // no change if A > "z"
 374+ 64E2 D6 20                        sub     $20                 // Make uppercase if A in ["a".."z"]
 375+ 64E4 C9                           ret
 376+ 64E5
 377+ 64E5              //  ______________________________________________________________________
 378+ 64E5              //
 379+ 64E5              //  caseon      --
 380+ 64E5              // set system case-sensitivity on
 381+ 64E5              // it patches a RET/NOP at the beginning of the uppercase-routine
 382+ 64E5                              New_Def CASEON, "CASEON", is_code, is_normal
 382+ 64E5             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 382+ 64E5             >
 382+ 64E5             >                // dummy db directives used to calculate length of namec
 382+ 64E5 43 41 53 45 >                db      "CASEON"
 382+ 64E9 4F 4E       >
 382+ 64EB             >len_NFA         defl    $ - temp_NFA
 382+ 64EB             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 382+ 64E5             >
 382+ 64E5 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 382+ 64E6 43 41 53 45 >                db      "CASEON"               // name string in 7-bit ascii, but
 382+ 64EA 4F 4E       >
 382+ 64EC             >                org     $-1                 // alter last byte of Name just above to set
 382+ 64EB CE          >                db      {b $} | END_BIT     // msb as name end
 382+ 64EC             >
 382+ 64EC A9 64       >                dw      last_NFA            // Link to previous definition Name
 382+ 64EE             >CASEON:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 382+ 64EE ~           >                dw      runcode ; ok        // for primitive definitions  actual code
 382+ 64EE             >                else
 382+ 64EE F0 64       >                dw      $ + 2   ; ok        // is pointed by CFA
 382+ 64F0             >                endif           ; ok        // for other definitions it "points" the correct handler
 382+ 64F0             >                // Use of "; ok" to suppress "warning[fwdref]"
 382+ 64F0             >
 382+ 64F0             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 383+ 64F0 3E C9                        ld      a, $C9              // "ret"
 384+ 64F2 32 DB 64                     ld      (Case_Sensitive), a
 385+ 64F5                              next
 385+ 64F5 DD E9       >                jp      (ix)
 386+ 64F7
 387+ 64F7              //  ______________________________________________________________________
 388+ 64F7              //
 389+ 64F7              //  caseoff     --
 390+ 64F7              // set system case-sensitivity on
 391+ 64F7              // it patches a RET/NOP at the beginning of the uppercase-routine
 392+ 64F7                              New_Def CASEOFF, "CASEOFF", is_code, is_normal
 392+ 64F7             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 392+ 64F7             >
 392+ 64F7             >                // dummy db directives used to calculate length of namec
 392+ 64F7 43 41 53 45 >                db      "CASEOFF"
 392+ 64FB 4F 46 46    >
 392+ 64FE             >len_NFA         defl    $ - temp_NFA
 392+ 64FE             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 392+ 64F7             >
 392+ 64F7 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 392+ 64F8 43 41 53 45 >                db      "CASEOFF"               // name string in 7-bit ascii, but
 392+ 64FC 4F 46 46    >
 392+ 64FF             >                org     $-1                 // alter last byte of Name just above to set
 392+ 64FE C6          >                db      {b $} | END_BIT     // msb as name end
 392+ 64FF             >
 392+ 64FF E5 64       >                dw      last_NFA            // Link to previous definition Name
 392+ 6501             >CASEOFF:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 392+ 6501 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
 392+ 6501             >                else
 392+ 6501 03 65       >                dw      $ + 2   ; ok        // is pointed by CFA
 392+ 6503             >                endif           ; ok        // for other definitions it "points" the correct handler
 392+ 6503             >                // Use of "; ok" to suppress "warning[fwdref]"
 392+ 6503             >
 392+ 6503             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 393+ 6503 3E 00                        ld      a, $00              // "nop"
 394+ 6505 32 DB 64                     ld      (Case_Sensitive), a
 395+ 6508                              next
 395+ 6508 DD E9       >                jp      (ix)
 396+ 650A
 397+ 650A              //  ______________________________________________________________________
 398+ 650A              //
 399+ 650A              //  upper       c1 -- c1 | c2
 400+ 650A              // character on top of stack is forced to Uppercase.
 401+ 650A                              New_Def UPPER, "UPPER", is_code, is_normal
 401+ 650A             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 401+ 650A             >
 401+ 650A             >                // dummy db directives used to calculate length of namec
 401+ 650A 55 50 50 45 >                db      "UPPER"
 401+ 650E 52          >
 401+ 650F             >len_NFA         defl    $ - temp_NFA
 401+ 650F             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 401+ 650A             >
 401+ 650A 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 401+ 650B 55 50 50 45 >                db      "UPPER"               // name string in 7-bit ascii, but
 401+ 650F 52          >
 401+ 6510             >                org     $-1                 // alter last byte of Name just above to set
 401+ 650F D2          >                db      {b $} | END_BIT     // msb as name end
 401+ 6510             >
 401+ 6510 F7 64       >                dw      last_NFA            // Link to previous definition Name
 401+ 6512             >UPPER:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 401+ 6512 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
 401+ 6512             >                else
 401+ 6512 14 65       >                dw      $ + 2   ; ok        // is pointed by CFA
 401+ 6514             >                endif           ; ok        // for other definitions it "points" the correct handler
 401+ 6514             >                // Use of "; ok" to suppress "warning[fwdref]"
 401+ 6514             >
 401+ 6514             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 402+ 6514 E1                           pop     hl
 403+ 6515 7D                           ld      a, l
 404+ 6516 CD DC 64                     call    Case_Upper
 405+ 6519 6F                           ld      l, a
 406+ 651A
 407+ 651A                              psh1
 407+ 651A E5          >                push    hl
 407+ 651B DD E9       >                jp      (ix)
 408+ 651D
 409+ 651D              //  ______________________________________________________________________
 410+ 651D              //
 411+ 651D              // (find)       addr voc -- ff | cfa b tf
 412+ 651D              // vocabulary search,
 413+ 651D              // - voc is starting word's NFA
 414+ 651D              // - addr is the string to be searched for
 415+ 651D              // On success, it returns the CFA of found word, the first NFA byte
 416+ 651D              // (which contains length and some flags) and a true flag.
 417+ 651D              // On fail, a false flag  (no more: leaves addr unchanged)
 418+ 651D                              New_Def C_FIND, "(FIND)", is_code, is_normal
 418+ 651D             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 418+ 651D             >
 418+ 651D             >                // dummy db directives used to calculate length of namec
 418+ 651D 28 46 49 4E >                db      "(FIND)"
 418+ 6521 44 29       >
 418+ 6523             >len_NFA         defl    $ - temp_NFA
 418+ 6523             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 418+ 651D             >
 418+ 651D 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 418+ 651E 28 46 49 4E >                db      "(FIND)"               // name string in 7-bit ascii, but
 418+ 6522 44 29       >
 418+ 6524             >                org     $-1                 // alter last byte of Name just above to set
 418+ 6523 A9          >                db      {b $} | END_BIT     // msb as name end
 418+ 6524             >
 418+ 6524 0A 65       >                dw      last_NFA            // Link to previous definition Name
 418+ 6526             >C_FIND:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 418+ 6526 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
 418+ 6526             >                else
 418+ 6526 28 65       >                dw      $ + 2   ; ok        // is pointed by CFA
 418+ 6528             >                endif           ; ok        // for other definitions it "points" the correct handler
 418+ 6528             >                // Use of "; ok" to suppress "warning[fwdref]"
 418+ 6528             >
 418+ 6528             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 419+ 6528                                                              // de has dictionary pointer
 420+ 6528 D1                               pop     de
 421+ 6529              Find_VocabularyLoop:
 422+ 6529 E1                               pop     hl                  // string pointer to search for
 423+ 652A E5                               push    hl                  // keep it on stack too for the end.
 424+ 652B 1A                               ld      a, (de)             // save NFA length byte
 425+ 652C 08                               ex      af,af'              // for later use (!)
 426+ 652D 1A                               ld      a, (de)             // reload NFA length byte
 427+ 652E AE                               xor     (hl)                // check if same length
 428+ 652F E6 3F                            and     $3F                 // by resetting 3 high bits (flags)
 429+ 6531                                  // word an text haven't the same length, skip to next vocabulary entry
 430+ 6531 20 2C                            jr      nz, Find_DifferentLenght
 431+ 6533
 432+ 6533              Find_ThisWord:  // begin loop
 433+ 6533 23                                   inc     hl
 434+ 6534 13                                   inc     de
 435+ 6535 1A                                   ld      a, (de)
 436+ 6536                                      // case insensitive option - begin
 437+ 6536 C5                                   push    bc
 438+ 6537 E6 80                                and     $80                 // split A in msb and the rest
 439+ 6539 47                                   ld      b, a
 440+ 653A 1A                                   ld      a, (de)
 441+ 653B E6 7F                                and     $7F                 // ... the rest (lower 7 bits)
 442+ 653D CD DB 64                             call    Case_Sensitive      // uppercase routine
 443+ 6540 4F                                   ld      c, a
 444+ 6541 7E                                   ld      a, (hl)
 445+ 6542 CD DB 64                             call    Case_Sensitive      // uppercase routine
 446+ 6545 A9                                   xor     c
 447+ 6546 A8                                   xor     b
 448+ 6547 C1                                   pop     bc
 449+ 6548                                      // case insensitive option - end
 450+ 6548 87                                   add     a                   // ignore msb during compare
 451+ 6549 20 12                                jr      nz, Find_DidntMatch  // jump if doesn't match (*)
 452+ 654B
 453+ 654B                                  // loop back until last byte msb is found set
 454+ 654B                                  // that bit marks the ending char of this word
 455+ 654B 30 E6                            jr      nc, Find_ThisWord
 456+ 654D
 457+ 654D                                  // match found !
 458+ 654D 21 03 00                             ld      hl, 3               // 3 bytes for CFA offset to skip LFA
 459+ 6550 19                                   add     hl, de
 460+ 6551 E3                                   ex      (sp), hl            // CFA on stack and drop addr
 461+ 6552 08                                   ex      af, af'             // retrieve NFA byte (!)
 462+ 6553 5F                                   ld      e, a
 463+ 6554 16 00                                ld      d, 0
 464+ 6556
 465+ 6556
 466+ 6556 21 FF FF                             ld      hl, -1
 467+ 6559                                      psh2
 467+ 6559 D5          >                push    de
 467+ 655A E5          >                push    hl
 467+ 655B DD E9       >                jp      (ix)
 468+ 655D
 469+ 655D              Find_DidntMatch: // didn't match (*)
 470+ 655D 38 05                            jr      c,  Find_WordEnd   // jump if not end of word (**)
 471+ 655F
 472+ 655F              Find_DifferentLenght:
 473+ 655F                              // consume chars until the end of the word
 474+ 655F                              // that is last byte msb is found set
 475+ 655F 13                               inc     de
 476+ 6560 1A                               ld      a, (de)
 477+ 6561 87                               add     a, a
 478+ 6562 30 FB                        jr      nc, Find_DifferentLenght
 479+ 6564
 480+ 6564              Find_WordEnd:   // word-end  found (**)
 481+ 6564                              // take LFA and use it
 482+ 6564 13                           inc     de
 483+ 6565 EB                           ex      de, hl
 484+ 6566 5E                           ld      e, (hl)
 485+ 6567 23                           inc     hl
 486+ 6568 56                           ld      d, (hl)
 487+ 6569 7A                           ld      a, d
 488+ 656A B3                           or      e
 489+ 656B
 490+ 656B                          // loop until end of vocabulary
 491+ 656B 20 BC                    jr      nz, Find_VocabularyLoop
 492+ 656D
 493+ 656D E1                       pop     hl              // with this, it leaves addr unchanged
 494+ 656E 21 00 00                 ld      hl, FALSE_FLAG
 495+ 6571
 496+ 6571                          psh1
 496+ 6571 E5          >                push    hl
 496+ 6572 DD E9       >                jp      (ix)
 497+ 6574
 498+ 6574              //  ______________________________________________________________________
 499+ 6574              //
 500+ 6574              // enclose      a c -- a  n1 n2 n3
 501+ 6574              // starting from a, using delimiter c, determines the offsets:
 502+ 6574              //   n1   the first character non-delimiter
 503+ 6574              //   n2   the first delimiter after the text
 504+ 6574              //   n3   the first character non enclosed.
 505+ 6574              // This procedure does not go beyond a 'nul' ASCII (0x00) that represents
 506+ 6574              // an uncoditional delimiter.
 507+ 6574              // Examples:
 508+ 6574              //   i:	c  c  x  x  x  c  x	 -- 2  5  6
 509+ 6574              //  ii:	c  c  x  x  x  'nul' -- 2  5  5
 510+ 6574              // iii:	c  c  'nul'          -- 2  3  2
 511+ 6574                              New_Def ENCLOSE, "ENCLOSE", is_code, is_normal
 511+ 6574             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 511+ 6574             >
 511+ 6574             >                // dummy db directives used to calculate length of namec
 511+ 6574 45 4E 43 4C >                db      "ENCLOSE"
 511+ 6578 4F 53 45    >
 511+ 657B             >len_NFA         defl    $ - temp_NFA
 511+ 657B             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 511+ 6574             >
 511+ 6574 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 511+ 6575 45 4E 43 4C >                db      "ENCLOSE"               // name string in 7-bit ascii, but
 511+ 6579 4F 53 45    >
 511+ 657C             >                org     $-1                 // alter last byte of Name just above to set
 511+ 657B C5          >                db      {b $} | END_BIT     // msb as name end
 511+ 657C             >
 511+ 657C 1D 65       >                dw      last_NFA            // Link to previous definition Name
 511+ 657E             >ENCLOSE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 511+ 657E ~           >                dw      runcode ; ok        // for primitive definitions  actual code
 511+ 657E             >                else
 511+ 657E 80 65       >                dw      $ + 2   ; ok        // is pointed by CFA
 511+ 6580             >                endif           ; ok        // for other definitions it "points" the correct handler
 511+ 6580             >                // Use of "; ok" to suppress "warning[fwdref]"
 511+ 6580             >
 511+ 6580             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 512+ 6580 D1                           pop     de                  //  e has the character
 513+ 6581 E1                           pop     hl                  // hl has the string address
 514+ 6582 E5                           push    hl
 515+ 6583 7B                           ld      a, e
 516+ 6584 11 FF FF                     ld      de, -1              // let's start from -1
 517+ 6587 2B                           dec     hl
 518+ 6588              Enclose_NonDelimiter:
 519+ 6588                              // find first non delimiter
 520+ 6588 23                               inc     hl
 521+ 6589 13                               inc     de
 522+ 658A BE                               cp      (hl)
 523+ 658B 28 FB                        jr      z, Enclose_NonDelimiter
 524+ 658D D5                           push    de
 525+ 658E
 526+ 658E C5                           push    bc                  // save Instruction Pointer
 527+ 658F
 528+ 658F 4F                           ld      c, a                // save char
 529+ 6590 7E                           ld      a, (hl)
 530+ 6591 A7                           and     a                   // stop if 0x00
 531+ 6592 20 07                        jr      nz, Enclose_NextChar
 532+ 6594
 533+ 6594                              /// case iii. no more character in string
 534+ 6594 C1                               pop     bc                  // restore Instruction Pointer
 535+ 6595 13                               inc     de
 536+ 6596 D5                               push    de
 537+ 6597 1B                               dec     de
 538+ 6598 D5                               push    de
 539+ 6599                                  next
 539+ 6599 DD E9       >                jp      (ix)
 540+ 659B              Enclose_NextChar:
 541+ 659B 79                               ld      a, c
 542+ 659C 23                               inc     hl
 543+ 659D 13                               inc     de
 544+ 659E BE                               cp      (hl)
 545+ 659F 20 06                            jr      nz, Enclose_NonSeparator
 546+ 65A1
 547+ 65A1                                      // case i. first non enclosed
 548+ 65A1 C1                                   pop     bc                  // restore Instruction Pointer
 549+ 65A2 D5                                   push    de
 550+ 65A3 13                                   inc     de
 551+ 65A4 D5                                   push    de
 552+ 65A5                                      next
 552+ 65A5 DD E9       >                jp      (ix)
 553+ 65A7              Enclose_NonSeparator:
 554+ 65A7 7E                               ld      a, (hl)
 555+ 65A8 A7                               and     a
 556+ 65A9 20 F0                        jr      nz, Enclose_NextChar
 557+ 65AB
 558+ 65AB                              // case ii. separator & terminator
 559+ 65AB C1                           pop     bc                  // restore Instruction Pointer
 560+ 65AC D5                           push    de
 561+ 65AD D5                           push    de
 562+ 65AE                              next
 562+ 65AE DD E9       >                jp      (ix)
 563+ 65B0
 564+ 65B0              //  ______________________________________________________________________
 565+ 65B0              //
 566+ 65B0              // (map)        a2 a1 n c1 -- c2
 567+ 65B0              // translate character c1 using mapping string a2 and a2
 568+ 65B0              // if c1 is not present within string a1 then
 569+ 65B0              // c2 = c2 if it is not translated. n is the length of both a1 and a2.
 570+ 65B0                              New_Def C_MAP, "(MAP)", is_code, is_normal
 570+ 65B0             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 570+ 65B0             >
 570+ 65B0             >                // dummy db directives used to calculate length of namec
 570+ 65B0 28 4D 41 50 >                db      "(MAP)"
 570+ 65B4 29          >
 570+ 65B5             >len_NFA         defl    $ - temp_NFA
 570+ 65B5             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 570+ 65B0             >
 570+ 65B0 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 570+ 65B1 28 4D 41 50 >                db      "(MAP)"               // name string in 7-bit ascii, but
 570+ 65B5 29          >
 570+ 65B6             >                org     $-1                 // alter last byte of Name just above to set
 570+ 65B5 A9          >                db      {b $} | END_BIT     // msb as name end
 570+ 65B6             >
 570+ 65B6 74 65       >                dw      last_NFA            // Link to previous definition Name
 570+ 65B8             >C_MAP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 570+ 65B8 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
 570+ 65B8             >                else
 570+ 65B8 BA 65       >                dw      $ + 2   ; ok        // is pointed by CFA
 570+ 65BA             >                endif           ; ok        // for other definitions it "points" the correct handler
 570+ 65BA             >                // Use of "; ok" to suppress "warning[fwdref]"
 570+ 65BA             >
 570+ 65BA             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 571+ 65BA D9                           exx
 572+ 65BB E1                           pop     hl
 573+ 65BC 7D                           ld      a, l
 574+ 65BD C1                           pop     bc
 575+ 65BE E1                           pop     hl
 576+ 65BF 50                           ld      d, b
 577+ 65C0 59                           ld      e, c
 578+ 65C1 ED B1                        cpir
 579+ 65C3 E1                           pop     hl
 580+ 65C4 20 05                        jr      nz, C_Map_Then
 580+ 65C6
 581+ 65C6 19                               add     hl, de
 582+ 65C7 2B                               dec     hl
 583+ 65C8 ED 42                            sbc     hl, bc
 584+ 65CA 7E                               ld      a, (hl)
 585+ 65CB              C_Map_Then:
 586+ 65CB 6F                           ld      l, a
 587+ 65CC 26 00                        ld      h, 0
 588+ 65CE E5                           push    hl
 589+ 65CF D9                           exx
 590+ 65D0                              next
 590+ 65D0 DD E9       >                jp      (ix)
 591+ 65D2
 592+ 65D2              //  ______________________________________________________________________
 593+ 65D2              //
 594+ 65D2              // (compare)    a1 a2 n -- b
 595+ 65D2              // this word performs a lexicographic compare of n bytes of text at address a1
 596+ 65D2              // with n bytes of text at address a2. It returns numeric a value:
 597+ 65D2              //  0 : if strings are equal
 598+ 65D2              // +1 : if string at a1 greater than string at a2
 599+ 65D2              // -1 : if string at a1 less than string at a2
 600+ 65D2              // strings can be 256 bytes in length at most.
 601+ 65D2                              New_Def C_COMPARE, "(COMPARE)", is_code, is_normal
 601+ 65D2             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 601+ 65D2             >
 601+ 65D2             >                // dummy db directives used to calculate length of namec
 601+ 65D2 28 43 4F 4D >                db      "(COMPARE)"
 601+ 65D6 50 41 52 45 >
 601+ 65DA 29          >
 601+ 65DB             >len_NFA         defl    $ - temp_NFA
 601+ 65DB             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 601+ 65D2             >
 601+ 65D2 89          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 601+ 65D3 28 43 4F 4D >                db      "(COMPARE)"               // name string in 7-bit ascii, but
 601+ 65D7 50 41 52 45 >
 601+ 65DB 29          >
 601+ 65DC             >                org     $-1                 // alter last byte of Name just above to set
 601+ 65DB A9          >                db      {b $} | END_BIT     // msb as name end
 601+ 65DC             >
 601+ 65DC B0 65       >                dw      last_NFA            // Link to previous definition Name
 601+ 65DE             >C_COMPARE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 601+ 65DE ~           >                dw      runcode ; ok        // for primitive definitions  actual code
 601+ 65DE             >                else
 601+ 65DE E0 65       >                dw      $ + 2   ; ok        // is pointed by CFA
 601+ 65E0             >                endif           ; ok        // for other definitions it "points" the correct handler
 601+ 65E0             >                // Use of "; ok" to suppress "warning[fwdref]"
 601+ 65E0             >
 601+ 65E0             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 602+ 65E0 D9                           exx
 603+ 65E1 E1                           pop     hl                  // Number of bytes
 604+ 65E2 7D                           ld      a, l
 605+ 65E3 E1                           pop     hl                  // hl points string a2
 606+ 65E4 D1                           pop     de                  // hl points string a1
 607+ 65E5              //              push    bc                  // Instruction pointer on stack
 608+ 65E5 47                           ld      b, a
 609+ 65E6              C_Compare_Loop:
 610+ 65E6 7E                               ld      a, (hl)
 611+ 65E7 CD DB 64                         call    Case_Sensitive
 612+ 65EA 4F                               ld      c, a
 613+ 65EB 1A                               ld      a, (de)
 614+ 65EC CD DB 64                         call    Case_Sensitive
 615+ 65EF B9                               cp      c
 616+ 65F0 13                               inc     de
 617+ 65F1 23                               inc     hl
 618+ 65F2 28 0E                            jr      z, C_Compare_Equal
 619+ 65F4 38 05                                jr      c, C_Compare_NotLessThan  // If LessThan
 620+ 65F6 21 01 00                                 ld      hl, 1               // a1 gt a2
 621+ 65F9 18 03                                jr      C_Compare_Then      // Else
 622+ 65FB              C_Compare_NotLessThan:
 623+ 65FB 21 FF FF                                 ld      hl, -1              // a1 lt a2
 624+ 65FE              C_Compare_Then:                                 // Endif
 625+ 65FE              //                      pop     bc              // restore Instruction Pointer
 626+ 65FE E5                                   push    hl
 627+ 65FF D9                                   exx
 628+ 6600
 629+ 6600                                      next
 629+ 6600 DD E9       >                jp      (ix)
 630+ 6602
 631+ 6602              C_Compare_Equal:
 632+ 6602 10 E2                        djnz    C_Compare_Loop
 633+ 6604 21 00 00                     ld      hl, 0               // a1 eq a2
 634+ 6607              //              pop     bc                  // restore Instruction Pointer
 635+ 6607 E5                           push    hl
 636+ 6608 D9                           exx
 637+ 6609
 638+ 6609                              next
 638+ 6609 DD E9       >                jp      (ix)
 639+ 660B
 640+ 660B              //  ______________________________________________________________________
 641+ 660B              //
 642+ 660B              // emitc        c --
 643+ 660B              // low level emit, calls ROM routine at #10 to send a character to
 644+ 660B              // the the current channel (see SELECT to change stream-channel)
 645+ 660B                              New_Def EMITC, "EMITC", is_code, is_normal
 645+ 660B             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 645+ 660B             >
 645+ 660B             >                // dummy db directives used to calculate length of namec
 645+ 660B 45 4D 49 54 >                db      "EMITC"
 645+ 660F 43          >
 645+ 6610             >len_NFA         defl    $ - temp_NFA
 645+ 6610             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 645+ 660B             >
 645+ 660B 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 645+ 660C 45 4D 49 54 >                db      "EMITC"               // name string in 7-bit ascii, but
 645+ 6610 43          >
 645+ 6611             >                org     $-1                 // alter last byte of Name just above to set
 645+ 6610 C3          >                db      {b $} | END_BIT     // msb as name end
 645+ 6611             >
 645+ 6611 D2 65       >                dw      last_NFA            // Link to previous definition Name
 645+ 6613             >EMITC:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 645+ 6613 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
 645+ 6613             >                else
 645+ 6613 15 66       >                dw      $ + 2   ; ok        // is pointed by CFA
 645+ 6615             >                endif           ; ok        // for other definitions it "points" the correct handler
 645+ 6615             >                // Use of "; ok" to suppress "warning[fwdref]"
 645+ 6615             >
 645+ 6615             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 646+ 6615 E1                           pop     hl
 647+ 6616 7D                           ld      a, l
 648+ 6617              Emitc_Ptr:
 649+ 6617 C5                           push    bc
 650+ 6618 DD E5                        push    ix
 651+ 661A D7                           rst     $10
 652+ 661B DD E1                        pop     ix
 653+ 661D C1                           pop     bc
 654+ 661E 3E FF                        ld      a, 255            // max possible
 655+ 6620 32 8C 5C                     ld      (SCR_CT), a
 656+ 6623
 657+ 6623                              next
 657+ 6623 DD E9       >                jp      (ix)
 658+ 6625
 659+ 6625              //  ______________________________________________________________________
 660+ 6625              //
 661+ 6625              // cr           --
 662+ 6625              // send a CR via EMITC
 663+ 6625                              New_Def CR, "CR", is_code, is_normal
 663+ 6625             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 663+ 6625             >
 663+ 6625             >                // dummy db directives used to calculate length of namec
 663+ 6625 43 52       >                db      "CR"
 663+ 6627             >len_NFA         defl    $ - temp_NFA
 663+ 6627             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 663+ 6625             >
 663+ 6625 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 663+ 6626 43 52       >                db      "CR"               // name string in 7-bit ascii, but
 663+ 6628             >                org     $-1                 // alter last byte of Name just above to set
 663+ 6627 D2          >                db      {b $} | END_BIT     // msb as name end
 663+ 6628             >
 663+ 6628 0B 66       >                dw      last_NFA            // Link to previous definition Name
 663+ 662A             >CR:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 663+ 662A ~           >                dw      runcode ; ok        // for primitive definitions  actual code
 663+ 662A             >                else
 663+ 662A 2C 66       >                dw      $ + 2   ; ok        // is pointed by CFA
 663+ 662C             >                endif           ; ok        // for other definitions it "points" the correct handler
 663+ 662C             >                // Use of "; ok" to suppress "warning[fwdref]"
 663+ 662C             >
 663+ 662C             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 664+ 662C
 665+ 662C 3E 0D                        ld      a, CR_CHAR
 666+ 662E 18 E7                        jr      Emitc_Ptr
 667+ 6630
 668+ 6630              Emitc_Vec:
 669+ 6630 75 66                        dw      C_Emit_Printable  // comma
 670+ 6632 7B 66                        dw      C_Emit_Bel        // bel
 671+ 6634 75 66                        dw      C_Emit_Printable  // bs
 672+ 6636 90 66                        dw      C_Emit_Tab        // tab
 673+ 6638 75 66                        dw      C_Emit_Printable  // cr
 674+ 663A 96 66                        dw      C_Emit_NL         // lf (unix newline)
 675+ 663C 75 66                        dw      C_Emit_Printable  // blank
 676+ 663E 75 66                        dw      C_Emit_Printable  // blank
 677+ 6640
 678+ 6640              Emit_Selector_Start:
 679+ 6640 06                           db      $06                 // comma
 680+ 6641 07                           db      $07                 // bel
 681+ 6642 08                           db      $08                 // bs
 682+ 6643 09                           db      $09                 // tab
 683+ 6644 0D                           db      $0D                 // cr
 684+ 6645 0A                           db      $0A                 // lf (unix newline)
 685+ 6646 20                           db      $20
 686+ 6647              Emit_Selector_End:
 687+ 6647 20                           db      $20
 688+ 6648
 689+ 6648              //  ______________________________________________________________________
 690+ 6648              //
 691+ 6648              // (?emit)      c1 -- c2 | c1
 692+ 6648              // decode a character to be sent via EMIT
 693+ 6648              // search first the Emit_Selector table, if found jump to the corresponding routine in Emit_Vector
 694+ 6648              // the routine should resolve anything and convert the character anyway.
 695+ 6648                              New_Def C_EMIT, "(?EMIT)", is_code, is_normal
 695+ 6648             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 695+ 6648             >
 695+ 6648             >                // dummy db directives used to calculate length of namec
 695+ 6648 28 3F 45 4D >                db      "(?EMIT)"
 695+ 664C 49 54 29    >
 695+ 664F             >len_NFA         defl    $ - temp_NFA
 695+ 664F             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 695+ 6648             >
 695+ 6648 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 695+ 6649 28 3F 45 4D >                db      "(?EMIT)"               // name string in 7-bit ascii, but
 695+ 664D 49 54 29    >
 695+ 6650             >                org     $-1                 // alter last byte of Name just above to set
 695+ 664F A9          >                db      {b $} | END_BIT     // msb as name end
 695+ 6650             >
 695+ 6650 25 66       >                dw      last_NFA            // Link to previous definition Name
 695+ 6652             >C_EMIT:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 695+ 6652 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
 695+ 6652             >                else
 695+ 6652 54 66       >                dw      $ + 2   ; ok        // is pointed by CFA
 695+ 6654             >                endif           ; ok        // for other definitions it "points" the correct handler
 695+ 6654             >                // Use of "; ok" to suppress "warning[fwdref]"
 695+ 6654             >
 695+ 6654             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 696+ 6654 D1                           pop     de
 697+ 6655 7B                           ld      a, e                //  de has c1
 698+ 6656 E6 7F                        and     $7F                 // 7-bit ascii only
 699+ 6658 C5                           push    bc                  // save Instruction Pointer
 700+ 6659 01 08 00                     ld      bc, Emit_Selector_End - Emit_Selector_Start + 1
 701+ 665C 21 47 66                     ld      hl, Emit_Selector_End
 702+ 665F ED B9                        cpdr                        // search for c1 in Emit_Selector table, backward
 703+ 6661 20 0B                        jr      nz, C_Emit_Not_Found
 704+ 6663                                  // Found then decode it
 705+ 6663 21 30 66                         ld      hl, Emitc_Vec
 706+ 6666 09                               add     hl, bc
 707+ 6667 09                               add     hl, bc
 708+ 6668 5E                               ld      e, (hl)
 709+ 6669 23                               inc     hl
 710+ 666A 56                               ld      d, (hl)
 711+ 666B EB                               ex      de, hl
 712+ 666C C1                               pop     bc                  // restore Instruction Pointer
 713+ 666D E9                               jp      (hl)                // one of the following labels
 714+ 666E              C_Emit_Not_Found:
 715+ 666E C1                           pop     bc                  // restore Instruction Pointer
 716+ 666F FE 20                        cp      BLANK_CHAR          // cp $20 non-printable check
 717+ 6671 30 02                        jr      nc, C_Emit_Printable
 718+ 6673 3E 00                            ld      a, NUL_CHAR         // NUL is never "printed"
 719+ 6675              C_Emit_Printable:
 720+ 6675 6F                           ld      l, a
 721+ 6676 26 00                        ld      h, 0
 722+ 6678
 723+ 6678                              psh1
 723+ 6678 E5          >                push    hl
 723+ 6679 DD E9       >                jp      (ix)
 724+ 667B
 725+ 667B              C_Emit_Bel:
 726+ 667B C5                           push    bc                  // save Instruction Pointer
 727+ 667C 11 00 01                     ld      de, $0100
 728+ 667F 21 00 02                     ld      hl, $0200
 729+ 6682 DD E5                        push    ix                  // save Next Pointer
 730+ 6684 CD B6 03                     call    $03B6               // bleep Standard-ROM routine
 731+ 6687 DD E1                        pop     ix                  // restore Next Pointer
 732+ 6689 C1                           pop     bc                  // restore Instruction Pointer
 733+ 668A 21 00 00                     ld      hl, NUL_CHAR
 734+ 668D
 735+ 668D                              psh1
 735+ 668D E5          >                push    hl
 735+ 668E DD E9       >                jp      (ix)
 736+ 6690
 737+ 6690 21 06 00     C_Emit_Tab:     ld      hl, COMMA_CHAR
 738+ 6693
 739+ 6693                              psh1
 739+ 6693 E5          >                push    hl
 739+ 6694 DD E9       >                jp      (ix)
 740+ 6696
 741+ 6696 21 0D 00     C_Emit_NL       ld      hl, CR_CHAR           // 0x0A --> 0x0D  à la Spectrum
 742+ 6699
 743+ 6699                              psh1
 743+ 6699 E5          >                push    hl
 743+ 669A DD E9       >                jp      (ix)
 744+ 669C
 745+ 669C              //  ______________________________________________________________________
 746+ 669C
 747+ 669C              Key_Table:
 748+ 669C E2                           db      $E2                 //  0: STOP  --> SYMBOL+A : ~
 749+ 669D C3                           db      $C3                 //  1: NOT   --> SYMBOL+S : |
 750+ 669E CD                           db      $CD                 //  2: STEP  --> SYMBOl+D : //
 751+ 669F CC                           db      $CC                 //  3: TO    --> SYMBOL+F : {
 752+ 66A0 CB                           db      $CB                 //  4: THEN  --> SYMBOL+G : }
 753+ 66A1 C6                           db      $C6                 //  5: AND   --> SYMBOL+Y : [
 754+ 66A2 C5                           db      $C5                 //  6: OR    --> SYMBOL+U : ]
 755+ 66A3 AC                           db      $AC                 //  7: AT    --> SYMBOL+I : (C) copyright symbol
 756+ 66A4 C7                           db      $C7                 //  8: <=    --> same as SHIFT-1 [EDIT]
 757+ 66A5 C8                           db      $C8                 //  9: >=    --> same as SHIFT-0 [BACKSPACE]
 758+ 66A6 C9                           db      $C9                 // 10: <>    --> SYMBOL+W is the same as CAPS (toggle) SHIFT+2
 759+ 66A7              Key_MapTo:
 760+ 66A7 06                           db      $06                 // 10: SYMBOL+W is the same as CAPS (toggle) SHIFT+2
 761+ 66A8 0C                           db      $0C                 //  9: same as SHIFT-0 [BACKSPACE]
 762+ 66A9 07                           db      $07                 //  8: same as SHIFT-1 [EDIT]
 763+ 66AA 7F                           db      $7F                 //  7: SYMBOL+I : (C) copyright symbol
 764+ 66AB 5D                           db      $5D                 //  6: SYMBOL+U : ]
 765+ 66AC 5B                           db      $5B                 //  5: SYMBOL+Y : [
 766+ 66AD 7D                           db      $7D                 //  4: SYMBOL+G : }
 767+ 66AE 7B                           db      $7B                 //  3: SYMBOL+F : {
 768+ 66AF 5C                           db      $5C                 //  2: SYMBOl+D : //
 769+ 66B0 7C                           db      $7C                 //  1: SYMBOL+S : |
 770+ 66B1 7E                           db      $7E                 //  0: SYMBOL+A : ~
 771+ 66B2
 772+ 66B2              //  ______________________________________________________________________
 773+ 66B2              //
 774+ 66B2              // curs         -- c
 775+ 66B2              // wait for a keypress
 776+ 66B2              // This definition need Standard ROM Interrupt to be served
 777+ 66B2
 778+ 66B2                              New_Def CUR, "CURS", is_code, is_normal
 778+ 66B2             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 778+ 66B2             >
 778+ 66B2             >                // dummy db directives used to calculate length of namec
 778+ 66B2 43 55 52 53 >                db      "CURS"
 778+ 66B6             >len_NFA         defl    $ - temp_NFA
 778+ 66B6             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 778+ 66B2             >
 778+ 66B2 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 778+ 66B3 43 55 52 53 >                db      "CURS"               // name string in 7-bit ascii, but
 778+ 66B7             >                org     $-1                 // alter last byte of Name just above to set
 778+ 66B6 D3          >                db      {b $} | END_BIT     // msb as name end
 778+ 66B7             >
 778+ 66B7 48 66       >                dw      last_NFA            // Link to previous definition Name
 778+ 66B9             >CUR:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 778+ 66B9 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
 778+ 66B9             >                else
 778+ 66B9 BB 66       >                dw      $ + 2   ; ok        // is pointed by CFA
 778+ 66BB             >                endif           ; ok        // for other definitions it "points" the correct handler
 778+ 66BB             >                // Use of "; ok" to suppress "warning[fwdref]"
 778+ 66BB             >
 778+ 66BB             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 779+ 66BB
 780+ 66BB C5                           push    bc                  // save Instruction Pointer
 781+ 66BC DD E5                        push    ix
 782+ 66BE
 783+ 66BE ED 73 92 63                  ld      (SP_Saved), sp      // be sure to not to be paged out.
 784+ 66C2 31 61 63                     ld      sp, Cold_origin - 5 // maybe $4000 in the future...
 785+ 66C5 FD CB 01 AE                  res     5, (iy + 1)         // FLAGS (5C3A+1)
 786+ 66C9
 787+ 66C9              Cur_Wait:
 788+ 66C9 76                               halt
 789+ 66CA 3E 02                            ld      a, 2                // selec channel #2 (Upper Video)
 790+ 66CC CD 01 16                         call    $1601               // SELECT Standard-ROM Routine
 791+ 66CF
 792+ 66CF                                  // software-flash: flips face every 320 ms
 793+ 66CF 3E 10                            ld      a, $10              // Timing based
 794+ 66D1 FD A6 3E                         and     (iy + $3E)          // FRAMES (5C3A+3E)
 795+ 66D4
 796+ 66D4 3A 8C 63                         ld      a, (Block_Face)     // see origin.asm
 797+ 66D7 20 0C                            jr      nz, Cur_Cursor
 798+ 66D9 3A 8D 63                             ld      a, (Half_Face)      // see origin.asm
 799+ 66DC FD CB 30 5E                          bit     3, (iy + $30)       // FLAGS2 (5C3A+$30) that is CAPS-LOCK
 800+ 66E0 28 03                                jr      z, Cur_Cursor
 801+ 66E2 3A 8E 63                                 ld      a, (Underscore_Face) // see origin
 802+ 66E5              Cur_Cursor:
 803+ 66E5 D7                               rst     $10
 804+ 66E6 3E 08                            ld      a, BACKSPACE_CHAR    // backspace
 805+ 66E8 D7                               rst     $10
 806+ 66E9
 807+ 66E9 FD CB 01 6E                      bit     5, (iy + 1)         // FLAGS (5C3A+1)
 808+ 66ED 28 DA                        jr      z, Cur_Wait
 809+ 66EF
 810+ 66EF 76                           halt    // this is to sync flashing cursor.
 811+ 66F0
 812+ 66F0 3E 20                        ld      a, BLANK_CHAR       // space to blank cursor
 813+ 66F2 D7                           rst     $10
 814+ 66F3 3E 08                        ld      a, BACKSPACE_CHAR   // backspace
 815+ 66F5 D7                           rst     $10
 816+ 66F6
 817+ 66F6 ED 7B 92 63                  ld      sp, (SP_Saved)
 818+ 66FA
 819+ 66FA DD E1                        pop     ix
 820+ 66FC C1                           pop     bc                  // Restore Instruction Pointer
 821+ 66FD
 822+ 66FD                              next
 822+ 66FD DD E9       >                jp      (ix)
 823+ 66FF
 824+ 66FF
 825+ 66FF              //  ______________________________________________________________________
 826+ 66FF              //
 827+ 66FF              // key          -- c
 828+ 66FF              // This definition need Standard ROM Interrupt to be served
 829+ 66FF
 830+ 66FF                              New_Def KEY, "KEY", is_code, is_normal
 830+ 66FF             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 830+ 66FF             >
 830+ 66FF             >                // dummy db directives used to calculate length of namec
 830+ 66FF 4B 45 59    >                db      "KEY"
 830+ 6702             >len_NFA         defl    $ - temp_NFA
 830+ 6702             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 830+ 66FF             >
 830+ 66FF 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 830+ 6700 4B 45 59    >                db      "KEY"               // name string in 7-bit ascii, but
 830+ 6703             >                org     $-1                 // alter last byte of Name just above to set
 830+ 6702 D9          >                db      {b $} | END_BIT     // msb as name end
 830+ 6703             >
 830+ 6703 B2 66       >                dw      last_NFA            // Link to previous definition Name
 830+ 6705             >KEY:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 830+ 6705 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
 830+ 6705             >                else
 830+ 6705 07 67       >                dw      $ + 2   ; ok        // is pointed by CFA
 830+ 6707             >                endif           ; ok        // for other definitions it "points" the correct handler
 830+ 6707             >                // Use of "; ok" to suppress "warning[fwdref]"
 830+ 6707             >
 830+ 6707             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 831+ 6707
 832+ 6707 C5                           push    bc
 833+ 6708
 834+ 6708              Key_Wait:
 835+ 6708 FD CB 01 6E                      bit     5, (iy + 1)         // FLAGS (5C3A+1)
 836+ 670C 28 FA                        jr      z, Key_Wait
 837+ 670E
 838+ 670E 3A 08 5C                     ld      a, (LASTK)          // get typed character (5C08)
 839+ 6711
 840+ 6711                              // decode character from above table
 841+ 6711 21 9C 66                     ld      hl, Key_Table
 842+ 6714 01 0B 00                     ld      bc, $000B
 843+ 6717 ED B1                        cpir
 844+ 6719 20 05                        jr      nz, Key_DontMap
 845+ 671B 21 A7 66                         ld      hl, Key_MapTo
 846+ 671E 09                               add     hl, bc
 847+ 671F 7E                               ld      a, (hl)
 848+ 6720 FE 06        Key_DontMap:    cp      $06                 // CAPS-LOCK management
 849+ 6722 20 09                        jr      nz, Key_NoCapsLock
 850+ 6724 21 6A 5C                         ld      hl, $5C6A           // FLAGS2
 851+ 6727 7E                               ld      a, (hl)
 852+ 6728 EE 08                            xor     $08
 853+ 672A 77                               ld      (hl), a
 854+ 672B 3E 00                            ld      a, NUL_CHAR
 855+ 672D 6F           Key_NoCapsLock: ld      l, a
 856+ 672E 26 00                        ld      h, 0                // Prepare TOS
 857+ 6730
 858+ 6730 FD CB 01 AE                  res     5, (iy + 1)         // FLAGS (5C3A+1)
 859+ 6734
 860+ 6734 C1                           pop     bc                  // Restore Instruction Pointer
 861+ 6735
 862+ 6735                              psh1
 862+ 6735 E5          >                push    hl
 862+ 6736 DD E9       >                jp      (ix)
 863+ 6738
 864+ 6738
 865+ 6738              //  ______________________________________________________________________
 866+ 6738              //
 867+ 6738              // click        --
 868+ 6738              // This definition need Standard ROM Interrupt to be served
 869+ 6738              //
 870+ 6738              //              New_Def CLICK, "CLICK", is_code, is_normal
 871+ 6738              //
 872+ 6738              //                push    bc
 873+ 6738              //              ld      a, ($5C48)          // BORDCR system variable
 874+ 6738              //              rra
 875+ 6738              //              rra
 876+ 6738              //              rra
 877+ 6738              //              or      $18                 // quick'n'dirty click
 878+ 6738              //              out     ($fe), a
 879+ 6738              //              ld      b, 0
 880+ 6738              //              djnz    $                   // wait loop
 881+ 6738              //              xor     $18
 882+ 6738              //              out     ($fe), a
 883+ 6738              //                pop     bc
 884+ 6738
 885+ 6738              //              next
 886+ 6738
 887+ 6738              //  ______________________________________________________________________
 888+ 6738              //
 889+ 6738              // key?         -- f
 890+ 6738              // key available
 891+ 6738              //
 892+ 6738              //              New_Def KEY_Q, "KEY?", is_code, is_normal
 893+ 6738              //
 894+ 6738              //              ld      hl, 0000
 895+ 6738              //              bit     5, (iy + 1)         // FLAGS (5C3A+1)
 896+ 6738              //              jr      z, Key_Q
 897+ 6738              //                  dec     hl
 898+ 6738              // Key_Q:
 899+ 6738              //                psh1
 900+ 6738              //              next
 901+ 6738
 902+ 6738              //  ______________________________________________________________________
 903+ 6738              //
 904+ 6738              // ?terminal    -- FALSE | TRUE
 905+ 6738              // test for BREAK keypress
 906+ 6738                              New_Def QTERMINAL, "?TERMINAL", is_code, is_normal
 906+ 6738             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 906+ 6738             >
 906+ 6738             >                // dummy db directives used to calculate length of namec
 906+ 6738 3F 54 45 52 >                db      "?TERMINAL"
 906+ 673C 4D 49 4E 41 >
 906+ 6740 4C          >
 906+ 6741             >len_NFA         defl    $ - temp_NFA
 906+ 6741             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 906+ 6738             >
 906+ 6738 89          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 906+ 6739 3F 54 45 52 >                db      "?TERMINAL"               // name string in 7-bit ascii, but
 906+ 673D 4D 49 4E 41 >
 906+ 6741 4C          >
 906+ 6742             >                org     $-1                 // alter last byte of Name just above to set
 906+ 6741 CC          >                db      {b $} | END_BIT     // msb as name end
 906+ 6742             >
 906+ 6742 FF 66       >                dw      last_NFA            // Link to previous definition Name
 906+ 6744             >QTERMINAL:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 906+ 6744 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
 906+ 6744             >                else
 906+ 6744 46 67       >                dw      $ + 2   ; ok        // is pointed by CFA
 906+ 6746             >                endif           ; ok        // for other definitions it "points" the correct handler
 906+ 6746             >                // Use of "; ok" to suppress "warning[fwdref]"
 906+ 6746             >
 906+ 6746             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 907+ 6746 D9                           exx
 908+ 6747 01 FE 7F                     ld      bc, $7ffe
 909+ 674A ED 50                        in      d, (c)
 910+ 674C 41                           ld      b, c
 911+ 674D ED 78                        in      a, (c)
 912+ 674F B2                           or       d
 913+ 6750 1F                           rra
 914+ 6751 3F                           ccf
 915+ 6752 ED 62                        sbc     hl, hl
 916+ 6754 E5                           push    hl
 917+ 6755 D9                           exx
 918+ 6756                              next
 918+ 6756 DD E9       >                jp      (ix)
 919+ 6758
 920+ 6758
 921+ 6758              //  ______________________________________________________________________
 922+ 6758              //
 923+ 6758              // inkey        -- c | 0
 924+ 6758              // call ROM inkey$ routine, returns c or "zero".
 925+ 6758
 926+ 6758                              New_Def INKEY, "INKEY", is_code, is_normal
 926+ 6758             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 926+ 6758             >
 926+ 6758             >                // dummy db directives used to calculate length of namec
 926+ 6758 49 4E 4B 45 >                db      "INKEY"
 926+ 675C 59          >
 926+ 675D             >len_NFA         defl    $ - temp_NFA
 926+ 675D             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 926+ 6758             >
 926+ 6758 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 926+ 6759 49 4E 4B 45 >                db      "INKEY"               // name string in 7-bit ascii, but
 926+ 675D 59          >
 926+ 675E             >                org     $-1                 // alter last byte of Name just above to set
 926+ 675D D9          >                db      {b $} | END_BIT     // msb as name end
 926+ 675E             >
 926+ 675E 38 67       >                dw      last_NFA            // Link to previous definition Name
 926+ 6760             >INKEY:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 926+ 6760 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
 926+ 6760             >                else
 926+ 6760 62 67       >                dw      $ + 2   ; ok        // is pointed by CFA
 926+ 6762             >                endif           ; ok        // for other definitions it "points" the correct handler
 926+ 6762             >                // Use of "; ok" to suppress "warning[fwdref]"
 926+ 6762             >
 926+ 6762             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 927+ 6762
 928+ 6762 C5                           push    bc
 929+ 6763 ED 73 92 63                  ld      (SP_Saved), sp
 930+ 6767 31 61 63                     ld      sp, Cold_origin - 5
 931+ 676A DD E5                        push    ix
 932+ 676C CD E6 15                     call    $15E6                   // instead of 15E9
 933+ 676F DD E1                        pop     ix
 934+ 6771 ED 7B 92 63                  ld      sp, (SP_Saved)
 935+ 6775 6F                           ld      l, a
 936+ 6776 26 00                        ld      h, 0
 937+ 6778 C1                           pop     bc
 938+ 6779                              psh1
 938+ 6779 E5          >                push    hl
 938+ 677A DD E9       >                jp      (ix)
 939+ 677C
 940+ 677C              //  ______________________________________________________________________
 941+ 677C              //
 942+ 677C              // select      n --
 943+ 677C              // selects the given channel number
 944+ 677C
 945+ 677C                              New_Def SELECT, "SELECT", is_code, is_normal
 945+ 677C             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 945+ 677C             >
 945+ 677C             >                // dummy db directives used to calculate length of namec
 945+ 677C 53 45 4C 45 >                db      "SELECT"
 945+ 6780 43 54       >
 945+ 6782             >len_NFA         defl    $ - temp_NFA
 945+ 6782             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 945+ 677C             >
 945+ 677C 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 945+ 677D 53 45 4C 45 >                db      "SELECT"               // name string in 7-bit ascii, but
 945+ 6781 43 54       >
 945+ 6783             >                org     $-1                 // alter last byte of Name just above to set
 945+ 6782 D4          >                db      {b $} | END_BIT     // msb as name end
 945+ 6783             >
 945+ 6783 58 67       >                dw      last_NFA            // Link to previous definition Name
 945+ 6785             >SELECT:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 945+ 6785 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
 945+ 6785             >                else
 945+ 6785 87 67       >                dw      $ + 2   ; ok        // is pointed by CFA
 945+ 6787             >                endif           ; ok        // for other definitions it "points" the correct handler
 945+ 6787             >                // Use of "; ok" to suppress "warning[fwdref]"
 945+ 6787             >
 945+ 6787             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 946+ 6787 E1                           pop     hl
 947+ 6788 C5                           push    bc
 948+ 6789 7D                           ld      a, l
 949+ 678A ED 73 92 63                  ld      (SP_Saved), sp
 950+ 678E 31 61 63                     ld      sp, Cold_origin - 5
 951+ 6791 DD E5                        push    ix
 952+ 6793 CD 01 16                     call    $1601
 953+ 6796 DD E1                        pop     ix
 954+ 6798 ED 7B 92 63                  ld      sp, (SP_Saved)
 955+ 679C C1                           pop     bc
 956+ 679D
 957+ 679D                              next
 957+ 679D DD E9       >                jp      (ix)
 958+ 679F
 959+ 679F              //  ______________________________________________________________________
 960+ 679F              //
 961+ 679F              // ZX Spectrum Next - Low Level disk primitives.
 962+ 679F              // this include is "here" for backward compatibility
 963+ 679F
 964+ 679F                              include "next-opt0.asm"
# file opened: C:\Zx\CSpect\Projects\vForth15_INDIRECT/source/next-opt0.asm
   1++679F              //  ______________________________________________________________________
   2++679F              //
   3++679F              //  next-opt.asm
   4++679F              //
   5++679F              //  ZX Spectrum Next - peculiar definitions
   6++679F              //  ______________________________________________________________________
   7++679F
   8++679F              //  ______________________________________________________________________
   9++679F              //
  10++679F              // f_seek       d u -- f
  11++679F              // Seek to position d in file-handle u.
  12++679F              // Return a false-flag 0 on success, True flag on error
  13++679F                              New_Def F_SEEK, "F_SEEK", is_code, is_normal
  13++679F             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  13++679F             >
  13++679F             >                // dummy db directives used to calculate length of namec
  13++679F 46 5F 53 45 >                db      "F_SEEK"
  13++67A3 45 4B       >
  13++67A5             >len_NFA         defl    $ - temp_NFA
  13++67A5             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  13++679F             >
  13++679F 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  13++67A0 46 5F 53 45 >                db      "F_SEEK"               // name string in 7-bit ascii, but
  13++67A4 45 4B       >
  13++67A6             >                org     $-1                 // alter last byte of Name just above to set
  13++67A5 CB          >                db      {b $} | END_BIT     // msb as name end
  13++67A6             >
  13++67A6 7C 67       >                dw      last_NFA            // Link to previous definition Name
  13++67A8             >F_SEEK:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
  13++67A8 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
  13++67A8             >                else
  13++67A8 AA 67       >                dw      $ + 2   ; ok        // is pointed by CFA
  13++67AA             >                endif           ; ok        // for other definitions it "points" the correct handler
  13++67AA             >                // Use of "; ok" to suppress "warning[fwdref]"
  13++67AA             >
  13++67AA             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  14++67AA E1                           pop     hl                  // file-handle
  15++67AB 7D                           ld      a, l                // file-handle
  16++67AC 60                           ld      h, b                // save Intruction Pointer
  17++67AD 69                           ld      l, c
  18++67AE C1                           pop     bc                  // bc has high-word of d
  19++67AF D1                           pop     de
  20++67B0 DD E5                        push    ix
  21++67B2 E5                           push    hl                  // save Instruction Pointer
  22++67B3 DD 21 00 00                  ld      ix, 0
  23++67B7 CF                           rst     $08
  24++67B8 9F                           db      $9F
  25++67B9              F_Seek_Exit:
  26++67B9 C1                           pop     bc                  // restore Instruction Pointer
  27++67BA DD E1                        pop     ix
  28++67BC ED 62                        sbc     hl, hl              // to get 0 or -1
  29++67BE
  30++67BE                              psh1
  30++67BE E5          >                push    hl
  30++67BF DD E9       >                jp      (ix)
  31++67C1
  32++67C1              //  ______________________________________________________________________
  33++67C1              //
  34++67C1              // f_close      u -- f
  35++67C1              // Close file-handle u.
  36++67C1              // Return 0 on success, True flag on error
  37++67C1
  38++67C1                              New_Def F_CLOSE, "F_CLOSE", is_code, is_normal
  38++67C1             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  38++67C1             >
  38++67C1             >                // dummy db directives used to calculate length of namec
  38++67C1 46 5F 43 4C >                db      "F_CLOSE"
  38++67C5 4F 53 45    >
  38++67C8             >len_NFA         defl    $ - temp_NFA
  38++67C8             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  38++67C1             >
  38++67C1 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  38++67C2 46 5F 43 4C >                db      "F_CLOSE"               // name string in 7-bit ascii, but
  38++67C6 4F 53 45    >
  38++67C9             >                org     $-1                 // alter last byte of Name just above to set
  38++67C8 C5          >                db      {b $} | END_BIT     // msb as name end
  38++67C9             >
  38++67C9 9F 67       >                dw      last_NFA            // Link to previous definition Name
  38++67CB             >F_CLOSE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
  38++67CB ~           >                dw      runcode ; ok        // for primitive definitions  actual code
  38++67CB             >                else
  38++67CB CD 67       >                dw      $ + 2   ; ok        // is pointed by CFA
  38++67CD             >                endif           ; ok        // for other definitions it "points" the correct handler
  38++67CD             >                // Use of "; ok" to suppress "warning[fwdref]"
  38++67CD             >
  38++67CD             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  39++67CD
  40++67CD E1                           pop     hl
  41++67CE 7D                           ld      a, l                // file-handle
  42++67CF DD E5                        push    ix
  43++67D1 C5                           push    bc                  // Save Instruction pointer
  44++67D2 CF                           rst     $08
  45++67D3 9B                           db      $9B
  46++67D4 18 E3                        jr      F_Seek_Exit
  47++67D6              //              pop     bc
  48++67D6              //              pop     ix
  49++67D6              //              sbc     hl, hl
  50++67D6              //              psh1
  51++67D6
  52++67D6              //  ______________________________________________________________________
  53++67D6              //
  54++67D6              // f_sync      u -- f
  55++67D6              // Close file-handle u.
  56++67D6              // Return 0 on success, True flag on error
  57++67D6
  58++67D6                              New_Def F_SYNC, "F_SYNC", is_code, is_normal
  58++67D6             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  58++67D6             >
  58++67D6             >                // dummy db directives used to calculate length of namec
  58++67D6 46 5F 53 59 >                db      "F_SYNC"
  58++67DA 4E 43       >
  58++67DC             >len_NFA         defl    $ - temp_NFA
  58++67DC             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  58++67D6             >
  58++67D6 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  58++67D7 46 5F 53 59 >                db      "F_SYNC"               // name string in 7-bit ascii, but
  58++67DB 4E 43       >
  58++67DD             >                org     $-1                 // alter last byte of Name just above to set
  58++67DC C3          >                db      {b $} | END_BIT     // msb as name end
  58++67DD             >
  58++67DD C1 67       >                dw      last_NFA            // Link to previous definition Name
  58++67DF             >F_SYNC:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
  58++67DF ~           >                dw      runcode ; ok        // for primitive definitions  actual code
  58++67DF             >                else
  58++67DF E1 67       >                dw      $ + 2   ; ok        // is pointed by CFA
  58++67E1             >                endif           ; ok        // for other definitions it "points" the correct handler
  58++67E1             >                // Use of "; ok" to suppress "warning[fwdref]"
  58++67E1             >
  58++67E1             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  59++67E1 E1                           pop     hl
  60++67E2 7D                           ld      a, l                // file-handle
  61++67E3 DD E5                        push    ix
  62++67E5 C5                           push    bc
  63++67E6 CF                           rst     $08
  64++67E7 9C                           db      $9C
  65++67E8 18 CF                        jr      F_Seek_Exit
  66++67EA              //              pop     bc
  67++67EA              //              pop     ix
  68++67EA              //              sbc     hl, hl
  69++67EA              //              psh1
  70++67EA
  71++67EA              //  ______________________________________________________________________
  72++67EA              //
  73++67EA              // f_fgetpos    u -- d f
  74++67EA              // Seek to position d in file-handle u.
  75++67EA              // Return a false-flag 0 on success, True flag on error
  76++67EA                              New_Def F_FGETPOS, "F_FGETPOS", is_code, is_normal
  76++67EA             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  76++67EA             >
  76++67EA             >                // dummy db directives used to calculate length of namec
  76++67EA 46 5F 46 47 >                db      "F_FGETPOS"
  76++67EE 45 54 50 4F >
  76++67F2 53          >
  76++67F3             >len_NFA         defl    $ - temp_NFA
  76++67F3             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  76++67EA             >
  76++67EA 89          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  76++67EB 46 5F 46 47 >                db      "F_FGETPOS"               // name string in 7-bit ascii, but
  76++67EF 45 54 50 4F >
  76++67F3 53          >
  76++67F4             >                org     $-1                 // alter last byte of Name just above to set
  76++67F3 D3          >                db      {b $} | END_BIT     // msb as name end
  76++67F4             >
  76++67F4 D6 67       >                dw      last_NFA            // Link to previous definition Name
  76++67F6             >F_FGETPOS:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
  76++67F6 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
  76++67F6             >                else
  76++67F6 F8 67       >                dw      $ + 2   ; ok        // is pointed by CFA
  76++67F8             >                endif           ; ok        // for other definitions it "points" the correct handler
  76++67F8             >                // Use of "; ok" to suppress "warning[fwdref]"
  76++67F8             >
  76++67F8             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  77++67F8 E1                           pop     hl
  78++67F9 7D                           ld      a, l                // file-handle
  79++67FA DD E5                        push    ix
  80++67FC C5                           push    bc
  81++67FD CF                           rst     $08
  82++67FE A0                           db      $A0
  83++67FF E1                           pop     hl                  // restore Instruction Pointer
  84++6800 DD E1                        pop     ix
  85++6802 D5                           push    de
  86++6803 C5                           push    bc
  87++6804 44                           ld      b, h                // restore Instruction Pointer
  88++6805 4D                           ld      c, l
  89++6806 ED 62                        sbc     hl, hl
  90++6808
  91++6808                              psh1
  91++6808 E5          >                push    hl
  91++6809 DD E9       >                jp      (ix)
  92++680B
  93++680B              //  ______________________________________________________________________
  94++680B              //
  95++680B              // f_read       a b u -- n f
  96++680B              // Read b bytes from file-handle u to address a
  97++680B              // Return the actual number n of bytes read
  98++680B              // Return 0 on success, True flag on error
  99++680B                              New_Def F_READ, "F_READ", is_code, is_normal
  99++680B             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  99++680B             >
  99++680B             >                // dummy db directives used to calculate length of namec
  99++680B 46 5F 52 45 >                db      "F_READ"
  99++680F 41 44       >
  99++6811             >len_NFA         defl    $ - temp_NFA
  99++6811             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  99++680B             >
  99++680B 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  99++680C 46 5F 52 45 >                db      "F_READ"               // name string in 7-bit ascii, but
  99++6810 41 44       >
  99++6812             >                org     $-1                 // alter last byte of Name just above to set
  99++6811 C4          >                db      {b $} | END_BIT     // msb as name end
  99++6812             >
  99++6812 EA 67       >                dw      last_NFA            // Link to previous definition Name
  99++6814             >F_READ:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
  99++6814 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
  99++6814             >                else
  99++6814 16 68       >                dw      $ + 2   ; ok        // is pointed by CFA
  99++6816             >                endif           ; ok        // for other definitions it "points" the correct handler
  99++6816             >                // Use of "; ok" to suppress "warning[fwdref]"
  99++6816             >
  99++6816             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 100++6816
 101++6816 50                           ld      d, b
 102++6817 59                           ld      e, c
 103++6818 E1                           pop     hl
 104++6819 7D                           ld      a, l                // file-handle
 105++681A C1                           pop     bc                  // bc has bytes to read
 106++681B DD E3                        ex      (sp), ix            // ix has address
 107++681D D5                           push    de                  // Save Instruction pointer
 108++681E CF                           rst     $08
 109++681F 9D                           db      $9D
 110++6820              F_Read_Exit:
 111++6820 C1                           pop     bc                  // Restore Instruction pointer
 112++6821 DD E1                        pop     ix                  // Restore ix
 113++6823 D5                           push    de                  // bytes written
 114++6824 ED 62                        sbc     hl, hl
 115++6826
 116++6826                              psh1
 116++6826 E5          >                push    hl
 116++6827 DD E9       >                jp      (ix)
 117++6829
 118++6829              //  ______________________________________________________________________
 119++6829              //
 120++6829              // f_write      a b u -- n f
 121++6829              // Write bytes currently stored at address a to file-handle u.
 122++6829              // Return the actual n bytes written and 0 on success, True flag on error.
 123++6829                              New_Def F_WRITE, "F_WRITE", is_code, is_normal
 123++6829             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 123++6829             >
 123++6829             >                // dummy db directives used to calculate length of namec
 123++6829 46 5F 57 52 >                db      "F_WRITE"
 123++682D 49 54 45    >
 123++6830             >len_NFA         defl    $ - temp_NFA
 123++6830             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 123++6829             >
 123++6829 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 123++682A 46 5F 57 52 >                db      "F_WRITE"               // name string in 7-bit ascii, but
 123++682E 49 54 45    >
 123++6831             >                org     $-1                 // alter last byte of Name just above to set
 123++6830 C5          >                db      {b $} | END_BIT     // msb as name end
 123++6831             >
 123++6831 0B 68       >                dw      last_NFA            // Link to previous definition Name
 123++6833             >F_WRITE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 123++6833 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
 123++6833             >                else
 123++6833 35 68       >                dw      $ + 2   ; ok        // is pointed by CFA
 123++6835             >                endif           ; ok        // for other definitions it "points" the correct handler
 123++6835             >                // Use of "; ok" to suppress "warning[fwdref]"
 123++6835             >
 123++6835             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 124++6835
 125++6835 50                           ld      d, b
 126++6836 59                           ld      e, c
 127++6837 E1                           pop     hl
 128++6838 7D                           ld      a, l                // file-handle
 129++6839 C1                           pop     bc                  // bc has bytes to read
 130++683A DD E3                        ex      (sp), ix            // ix has address
 131++683C D5                           push    de                  // Save Instruction pointer
 132++683D CF                           rst     $08
 133++683E 9E                           db      $9E
 134++683F 18 DF                        jr F_Read_Exit
 135++6841              //              pop     bc                  // Restore Instruction pointer
 136++6841              //              pop     ix                  // Restore ix
 137++6841              //              push    de                  // bytes written
 138++6841              //              sbc     hl, hl
 139++6841              //
 140++6841              //              psh1
 141++6841
 142++6841              //  ______________________________________________________________________
 143++6841              //
 144++6841              // f_open       a1 a2 b -- u f
 145++6841              // open a file
 146++6841              // a1 (filespec) is a null-terminated string, such as produced by ," definition
 147++6841              // a2 is address to an 8-byte header data used in some cases.
 148++6841              // b is access mode-byte, that is a combination of:
 149++6841              // any/all of:
 150++6841              //   esx_mode_read          $01 request read access
 151++6841              //   esx_mode_write         $02 request write access
 152++6841              //   esx_mode_use_header    $40 read/write +3DOS header
 153++6841              // plus one of:
 154++6841              //   esx_mode_open_exist    $00 only open existing file
 155++6841              //   esx_mode_open_creat    $08 open existing or create file
 156++6841              //   esx_mode_creat_noexist $04 create new file, error if exists
 157++6841              //   esx_mode_creat_trunc   $0c create new file, delete existing
 158++6841              // Return file-handle u and 0 on success, True flag on error
 159++6841                              New_Def F_OPEN, "F_OPEN", is_code, is_normal
 159++6841             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 159++6841             >
 159++6841             >                // dummy db directives used to calculate length of namec
 159++6841 46 5F 4F 50 >                db      "F_OPEN"
 159++6845 45 4E       >
 159++6847             >len_NFA         defl    $ - temp_NFA
 159++6847             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 159++6841             >
 159++6841 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 159++6842 46 5F 4F 50 >                db      "F_OPEN"               // name string in 7-bit ascii, but
 159++6846 45 4E       >
 159++6848             >                org     $-1                 // alter last byte of Name just above to set
 159++6847 CE          >                db      {b $} | END_BIT     // msb as name end
 159++6848             >
 159++6848 29 68       >                dw      last_NFA            // Link to previous definition Name
 159++684A             >F_OPEN:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 159++684A ~           >                dw      runcode ; ok        // for primitive definitions  actual code
 159++684A             >                else
 159++684A 4C 68       >                dw      $ + 2   ; ok        // is pointed by CFA
 159++684C             >                endif           ; ok        // for other definitions it "points" the correct handler
 159++684C             >                // Use of "; ok" to suppress "warning[fwdref]"
 159++684C             >
 159++684C             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 160++684C 60                           ld      h, b                // Save Instruction pointer
 161++684D 69                           ld      l, c
 162++684E C1                           pop     bc                  // file-mode
 163++684F 41                           ld      b, c                // file-mode
 164++6850 D1                           pop     de                  // 8-bytes buffer if any
 165++6851 DD E3                        ex      (sp), ix            // filespec nul-terminated
 166++6853 E5                           push    hl                  // Save Instruction pointer
 167++6854 3E 2A                        ld      a, "*"
 168++6856 CF                           rst     $08
 169++6857 9A                           db      $9A
 170++6858              F_Open_Exit:
 171++6858 5F                           ld      e, a
 172++6859 16 00                        ld      d, 0
 173++685B 18 C3                        jr      F_Read_Exit
 174++685D
 175++685D              //   \ CREATE FILENAME ," test.txt"   \ new Counted String
 176++685D              //   \ FILENAME 1+ PAD 1 F_OPEN
 177++685D              //   \ DROP
 178++685D              //   \ F_CLOSE
 179++685D
 180++685D
 181++685D              //  ______________________________________________________________________
 182++685D              //
 183++685D              // f_opendir    a1 a2 b -- u f
 184++685D              // open a file
 185++685D                              New_Def F_OPENDIR, "F_OPENDIR", is_code, is_normal
 185++685D             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 185++685D             >
 185++685D             >                // dummy db directives used to calculate length of namec
 185++685D 46 5F 4F 50 >                db      "F_OPENDIR"
 185++6861 45 4E 44 49 >
 185++6865 52          >
 185++6866             >len_NFA         defl    $ - temp_NFA
 185++6866             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 185++685D             >
 185++685D 89          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 185++685E 46 5F 4F 50 >                db      "F_OPENDIR"               // name string in 7-bit ascii, but
 185++6862 45 4E 44 49 >
 185++6866 52          >
 185++6867             >                org     $-1                 // alter last byte of Name just above to set
 185++6866 D2          >                db      {b $} | END_BIT     // msb as name end
 185++6867             >
 185++6867 41 68       >                dw      last_NFA            // Link to previous definition Name
 185++6869             >F_OPENDIR:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 185++6869 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
 185++6869             >                else
 185++6869 6B 68       >                dw      $ + 2   ; ok        // is pointed by CFA
 185++686B             >                endif           ; ok        // for other definitions it "points" the correct handler
 185++686B             >                // Use of "; ok" to suppress "warning[fwdref]"
 185++686B             >
 185++686B             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 186++686B DD E3                        ex      (sp), ix            // filespec nul-terminated
 187++686D C5                           push    bc                  // Save Instruction pointer
 188++686E 06 10                        ld      b, $10              // file-mode
 189++6870 3E 43                        ld      a, "C"
 190++6872 CF                           rst     $08
 191++6873 A3                           db      $A3
 192++6874 18 E2                        jr      F_Open_Exit
 193++6876
 194++6876
 195++6876              //  ______________________________________________________________________
 196++6876              //
 197++6876              // f_readdir    a1 a2 b -- u f
 198++6876              // open a file
 199++6876                              New_Def F_READDIR, "F_READDIR", is_code, is_normal
 199++6876             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 199++6876             >
 199++6876             >                // dummy db directives used to calculate length of namec
 199++6876 46 5F 52 45 >                db      "F_READDIR"
 199++687A 41 44 44 49 >
 199++687E 52          >
 199++687F             >len_NFA         defl    $ - temp_NFA
 199++687F             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 199++6876             >
 199++6876 89          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 199++6877 46 5F 52 45 >                db      "F_READDIR"               // name string in 7-bit ascii, but
 199++687B 41 44 44 49 >
 199++687F 52          >
 199++6880             >                org     $-1                 // alter last byte of Name just above to set
 199++687F D2          >                db      {b $} | END_BIT     // msb as name end
 199++6880             >
 199++6880 5D 68       >                dw      last_NFA            // Link to previous definition Name
 199++6882             >F_READDIR:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 199++6882 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
 199++6882             >                else
 199++6882 84 68       >                dw      $ + 2   ; ok        // is pointed by CFA
 199++6884             >                endif           ; ok        // for other definitions it "points" the correct handler
 199++6884             >                // Use of "; ok" to suppress "warning[fwdref]"
 199++6884             >
 199++6884             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 200++6884 E1                           pop     hl
 201++6885 7D                           ld      a, l
 202++6886 D1                           pop     de
 203++6887 DD E3                        ex      (sp), ix            // filespec nul-terminated
 204++6889 C5                           push    bc                  // Save Instruction pointer
 205++688A CF                           rst     $08
 206++688B A4                           db      $A4
 207++688C 18 CA                        jr      F_Open_Exit
 208++688E
# file closed: C:\Zx\CSpect\Projects\vForth15_INDIRECT/source/next-opt0.asm
 965+ 688E
 966+ 688E
 967+ 688E              //  ______________________________________________________________________
 968+ 688E              //
 969+ 688E              // cmove    a1 a2 u --
 970+ 688E              // If u > 0, moves memory content starting at address a1 for n bytes long
 971+ 688E              // storing then starting at address addr2.
 972+ 688E              // The content of a1 is moved first. See CMOVE> also.
 973+ 688E                              New_Def CMOVE, "CMOVE", is_code, is_normal
 973+ 688E             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 973+ 688E             >
 973+ 688E             >                // dummy db directives used to calculate length of namec
 973+ 688E 43 4D 4F 56 >                db      "CMOVE"
 973+ 6892 45          >
 973+ 6893             >len_NFA         defl    $ - temp_NFA
 973+ 6893             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 973+ 688E             >
 973+ 688E 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 973+ 688F 43 4D 4F 56 >                db      "CMOVE"               // name string in 7-bit ascii, but
 973+ 6893 45          >
 973+ 6894             >                org     $-1                 // alter last byte of Name just above to set
 973+ 6893 C5          >                db      {b $} | END_BIT     // msb as name end
 973+ 6894             >
 973+ 6894 76 68       >                dw      last_NFA            // Link to previous definition Name
 973+ 6896             >CMOVE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 973+ 6896 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
 973+ 6896             >                else
 973+ 6896 98 68       >                dw      $ + 2   ; ok        // is pointed by CFA
 973+ 6898             >                endif           ; ok        // for other definitions it "points" the correct handler
 973+ 6898             >                // Use of "; ok" to suppress "warning[fwdref]"
 973+ 6898             >
 973+ 6898             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 974+ 6898 D9                           exx
 975+ 6899 C1                           pop     bc                  // bc has counter
 976+ 689A D1                           pop     de                  // de now has dest
 977+ 689B E1                           pop     hl                  // hl has source, save Instruction Pointer
 978+ 689C 78                           ld      a, b
 979+ 689D B1                           or      c
 980+ 689E 28 02                        jr      z, Cmove_NoMove
 981+ 68A0 ED B0                            ldir
 982+ 68A2              Cmove_NoMove:
 983+ 68A2 D9                           exx
 984+ 68A3                              next
 984+ 68A3 DD E9       >                jp      (ix)
 985+ 68A5
 986+ 68A5              //  ______________________________________________________________________
 987+ 68A5              //
 988+ 68A5              // cmove>    a1 a2 u --
 989+ 68A5              // If u > 0, moves memory content starting at address a1 for n bytes long
 990+ 68A5              // storing then starting at address addr2.
 991+ 68A5              // The content of a1 is moved last. See cmove.
 992+ 68A5                              New_Def CMOVE_TO, "CMOVE>", is_code, is_normal
 992+ 68A5             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 992+ 68A5             >
 992+ 68A5             >                // dummy db directives used to calculate length of namec
 992+ 68A5 43 4D 4F 56 >                db      "CMOVE>"
 992+ 68A9 45 3E       >
 992+ 68AB             >len_NFA         defl    $ - temp_NFA
 992+ 68AB             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 992+ 68A5             >
 992+ 68A5 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 992+ 68A6 43 4D 4F 56 >                db      "CMOVE>"               // name string in 7-bit ascii, but
 992+ 68AA 45 3E       >
 992+ 68AC             >                org     $-1                 // alter last byte of Name just above to set
 992+ 68AB BE          >                db      {b $} | END_BIT     // msb as name end
 992+ 68AC             >
 992+ 68AC 8E 68       >                dw      last_NFA            // Link to previous definition Name
 992+ 68AE             >CMOVE_TO:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 992+ 68AE ~           >                dw      runcode ; ok        // for primitive definitions  actual code
 992+ 68AE             >                else
 992+ 68AE B0 68       >                dw      $ + 2   ; ok        // is pointed by CFA
 992+ 68B0             >                endif           ; ok        // for other definitions it "points" the correct handler
 992+ 68B0             >                // Use of "; ok" to suppress "warning[fwdref]"
 992+ 68B0             >
 992+ 68B0             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 993+ 68B0 D9                           exx
 994+ 68B1 C1                           pop     bc                  // bc has counter
 995+ 68B2 D1                           pop     de                  // de has dest
 996+ 68B3 E1                           pop     hl                  // hl has source, save Instruction Pointer
 997+ 68B4 78                           ld      a, b
 998+ 68B5 B1                           or      c
 999+ 68B6 28 08                        jr      z, CmoveV_NoMove
1000+ 68B8 EB                               ex      de, hl              // compute address to
1001+ 68B9 09                               add     hl, bc              // operate backward
1002+ 68BA 2B                               dec     hl
1003+ 68BB EB                               ex      de, hl
1004+ 68BC 09                               add     hl, bc
1005+ 68BD 2B                               dec     hl
1006+ 68BE ED B8                            lddr                        // backward
1007+ 68C0              CmoveV_NoMove:
1008+ 68C0 D9                           exx
1009+ 68C1                              next
1009+ 68C1 DD E9       >                jp      (ix)
1010+ 68C3
1011+ 68C3              //  ______________________________________________________________________
1012+ 68C3              //
1013+ 68C3              // um*      u1 u2 -- ud
1014+ 68C3              // Unsigned multiplication
1015+ 68C3              // A double-integer is kept in CPU registers as DEHL then pushed on stack.
1016+ 68C3              // On the stack a double number is treated as two single numbers
1017+ 68C3              // where DE is on the top of the stack and HL is the second from top,
1018+ 68C3              // Instead, in 2VARIABLE a double number is stored as EDLH.
1019+ 68C3              // this definition could use "MUL" Z80N new op-code.
1020+ 68C3                              New_Def UM_MUL, "UM*", is_code, is_normal
1020+ 68C3             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1020+ 68C3             >
1020+ 68C3             >                // dummy db directives used to calculate length of namec
1020+ 68C3 55 4D 2A    >                db      "UM*"
1020+ 68C6             >len_NFA         defl    $ - temp_NFA
1020+ 68C6             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1020+ 68C3             >
1020+ 68C3 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1020+ 68C4 55 4D 2A    >                db      "UM*"               // name string in 7-bit ascii, but
1020+ 68C7             >                org     $-1                 // alter last byte of Name just above to set
1020+ 68C6 AA          >                db      {b $} | END_BIT     // msb as name end
1020+ 68C7             >
1020+ 68C7 A5 68       >                dw      last_NFA            // Link to previous definition Name
1020+ 68C9             >UM_MUL:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1020+ 68C9 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1020+ 68C9             >                else
1020+ 68C9 CB 68       >                dw      $ + 2   ; ok        // is pointed by CFA
1020+ 68CB             >                endif           ; ok        // for other definitions it "points" the correct handler
1020+ 68CB             >                // Use of "; ok" to suppress "warning[fwdref]"
1020+ 68CB             >
1020+ 68CB             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1021+ 68CB D9                           exx
1022+ 68CC D1                           pop     de                    // de has u2 operand
1023+ 68CD E1                           pop     hl                    // hl has u1 operand
1024+ 68CE 45                           ld      b, l
1025+ 68CF 4B                           ld      c, e
1026+ 68D0 5D                           ld      e, l
1027+ 68D1 6A                           ld      l, d
1028+ 68D2 E5                           push    hl
1029+ 68D3 69                           ld      l, c
1030+ 68D4 ED 30                        mul
1031+ 68D6 EB                           ex      de, hl
1032+ 68D7 ED 30                        mul
1033+ 68D9 AF                           xor     a
1034+ 68DA 19                           add     hl, de
1035+ 68DB 8F                           adc     a
1036+ 68DC 59                           ld      e, c
1037+ 68DD 50                           ld      d, b
1038+ 68DE ED 30                        mul
1039+ 68E0 47                           ld      b, a
1040+ 68E1 4C                           ld      c, h
1041+ 68E2 7A                           ld      a, d
1042+ 68E3 85                           add     l
1043+ 68E4 67                           ld      h, a
1044+ 68E5 6B                           ld      l, e
1045+ 68E6 D1                           pop     de
1046+ 68E7 ED 30                        mul
1047+ 68E9 EB                           ex      de, hl
1048+ 68EA ED 4A                        adc     hl, bc
1049+ 68EC D5                           push    de
1050+ 68ED E5                           push    hl
1051+ 68EE D9                           exx
1052+ 68EF                              next
1052+ 68EF DD E9       >                jp      (ix)
1053+ 68F1
1054+ 68F1              //  ______________________________________________________________________
1055+ 68F1              //
1056+ 68F1              // um/mod      ud u1 -- q r
1057+ 68F1              // divides ud into u1 giving quotient q and remainder r
1058+ 68F1              // algorithm takes 16 bit at a time starting from msb
1059+ 68F1              // DE grows from lsb upward with quotient result
1060+ 68F1              // HL keeps the remainder at each stage of division
1061+ 68F1              // each loop 'lowers' the next binary digit to form the current dividend
1062+ 68F1                              New_Def UMDIVMOD, "UM/MOD", is_code, is_normal
1062+ 68F1             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1062+ 68F1             >
1062+ 68F1             >                // dummy db directives used to calculate length of namec
1062+ 68F1 55 4D 2F 4D >                db      "UM/MOD"
1062+ 68F5 4F 44       >
1062+ 68F7             >len_NFA         defl    $ - temp_NFA
1062+ 68F7             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1062+ 68F1             >
1062+ 68F1 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1062+ 68F2 55 4D 2F 4D >                db      "UM/MOD"               // name string in 7-bit ascii, but
1062+ 68F6 4F 44       >
1062+ 68F8             >                org     $-1                 // alter last byte of Name just above to set
1062+ 68F7 C4          >                db      {b $} | END_BIT     // msb as name end
1062+ 68F8             >
1062+ 68F8 C3 68       >                dw      last_NFA            // Link to previous definition Name
1062+ 68FA             >UMDIVMOD:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1062+ 68FA ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1062+ 68FA             >                else
1062+ 68FA FC 68       >                dw      $ + 2   ; ok        // is pointed by CFA
1062+ 68FC             >                endif           ; ok        // for other definitions it "points" the correct handler
1062+ 68FC             >                // Use of "; ok" to suppress "warning[fwdref]"
1062+ 68FC             >
1062+ 68FC             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1063+ 68FC D9                           exx
1064+ 68FD C1                           pop     bc                      // divisor
1065+ 68FE
1066+ 68FE E1                           pop     hl                      // < high part
1067+ 68FF D1                           pop     de                      // < low part and
1068+ 6900
1069+ 6900 7D                           ld      a, l                    // check without changing arguments
1070+ 6901 91                           sub     c                       // if divisor is greater than high part
1071+ 6902 7C                           ld      a, h                    // so quotient will be in range
1072+ 6903 98                           sbc     a, b
1073+ 6904 30 20                        jr      nc, Um_DivMod_OutOfRange
1074+ 6906 3E 10                            ld      a, 16
1075+ 6908              Um_DivMod_Loop:
1076+ 6908 CB 23                                sla     e
1077+ 690A CB 12                                rl      d
1078+ 690C ED 6A                                adc     hl, hl
1079+ 690E 30 05                                jr      nc, Um_DivMod_Carry
1080+ 6910 A7                                       and     a
1081+ 6911 ED 42                                    sbc     hl, bc
1082+ 6913 18 07                                jr      Um_DivMod_Endif    // else
1083+ 6915              Um_DivMod_Carry:
1084+ 6915 A7                                       and     a
1085+ 6916 ED 42                                    sbc     hl, bc
1086+ 6918 30 02                                    jr      nc, Um_DivMod_Endif
1087+ 691A 09                                           add     hl, bc
1088+ 691B 1B                                           dec     de
1089+ 691C              Um_DivMod_Endif:                                   // endif
1090+ 691C 13                                   inc     de
1091+ 691D 3D                                   dec     a
1092+ 691E 20 E8                            jr      nz, Um_DivMod_Loop
1093+ 6920 EB                               ex      de, hl
1094+ 6921              Um_DivMod_Bailout:
1095+ 6921 D5                               push    de                  // de := remanider
1096+ 6922 E5                               push    hl                  // hl := quotient
1097+ 6923 D9                               exx
1098+ 6924                                  next
1098+ 6924 DD E9       >                jp      (ix)
1099+ 6926
1100+ 6926              Um_DivMod_OutOfRange:
1101+ 6926 21 FF FF                     ld      hl, -1
1102+ 6929 54                           ld      d, h
1103+ 692A 5D                           ld      e, l
1104+ 692B 18 F4                        jr      Um_DivMod_Bailout
1105+ 692D
1106+ 692D              //  ______________________________________________________________________
1107+ 692D              //
1108+ 692D              // and          n1 n2 -- n3
1109+ 692D              // bit logical AND. Returns n3 as n1 & n2
1110+ 692D                              New_Def AND_OP, "AND", is_code, is_normal
1110+ 692D             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1110+ 692D             >
1110+ 692D             >                // dummy db directives used to calculate length of namec
1110+ 692D 41 4E 44    >                db      "AND"
1110+ 6930             >len_NFA         defl    $ - temp_NFA
1110+ 6930             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1110+ 692D             >
1110+ 692D 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1110+ 692E 41 4E 44    >                db      "AND"               // name string in 7-bit ascii, but
1110+ 6931             >                org     $-1                 // alter last byte of Name just above to set
1110+ 6930 C4          >                db      {b $} | END_BIT     // msb as name end
1110+ 6931             >
1110+ 6931 F1 68       >                dw      last_NFA            // Link to previous definition Name
1110+ 6933             >AND_OP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1110+ 6933 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1110+ 6933             >                else
1110+ 6933 35 69       >                dw      $ + 2   ; ok        // is pointed by CFA
1110+ 6935             >                endif           ; ok        // for other definitions it "points" the correct handler
1110+ 6935             >                // Use of "; ok" to suppress "warning[fwdref]"
1110+ 6935             >
1110+ 6935             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1111+ 6935 D1                           pop     de
1112+ 6936 E1                           pop     hl
1113+ 6937 7B                           ld      a, e
1114+ 6938 A5                           and     l
1115+ 6939 6F                           ld      l, a
1116+ 693A 7A                           ld      a, d
1117+ 693B A4                           and     h
1118+ 693C 67                           ld      h, a
1119+ 693D
1120+ 693D                              psh1
1120+ 693D E5          >                push    hl
1120+ 693E DD E9       >                jp      (ix)
1121+ 6940
1122+ 6940              //  ______________________________________________________________________
1123+ 6940              //
1124+ 6940              // or           n1 n2 -- n3
1125+ 6940              // bit logical OR. Returns n3 as n1 | n2
1126+ 6940                              New_Def OR_OP, "OR", is_code, is_normal
1126+ 6940             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1126+ 6940             >
1126+ 6940             >                // dummy db directives used to calculate length of namec
1126+ 6940 4F 52       >                db      "OR"
1126+ 6942             >len_NFA         defl    $ - temp_NFA
1126+ 6942             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1126+ 6940             >
1126+ 6940 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1126+ 6941 4F 52       >                db      "OR"               // name string in 7-bit ascii, but
1126+ 6943             >                org     $-1                 // alter last byte of Name just above to set
1126+ 6942 D2          >                db      {b $} | END_BIT     // msb as name end
1126+ 6943             >
1126+ 6943 2D 69       >                dw      last_NFA            // Link to previous definition Name
1126+ 6945             >OR_OP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1126+ 6945 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1126+ 6945             >                else
1126+ 6945 47 69       >                dw      $ + 2   ; ok        // is pointed by CFA
1126+ 6947             >                endif           ; ok        // for other definitions it "points" the correct handler
1126+ 6947             >                // Use of "; ok" to suppress "warning[fwdref]"
1126+ 6947             >
1126+ 6947             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1127+ 6947 D1                           pop     de
1128+ 6948 E1                           pop     hl
1129+ 6949 7B                           ld      a, e
1130+ 694A B5                           or      l
1131+ 694B 6F                           ld      l, a
1132+ 694C 7A                           ld      a, d
1133+ 694D B4                           or      h
1134+ 694E 67                           ld      h, a
1135+ 694F
1136+ 694F                              psh1
1136+ 694F E5          >                push    hl
1136+ 6950 DD E9       >                jp      (ix)
1137+ 6952
1138+ 6952              //  ______________________________________________________________________
1139+ 6952              //
1140+ 6952              // xor          n1 n2 -- n3
1141+ 6952              // bit logical OR. Returns n3 as n1 ^ n2
1142+ 6952                              New_Def XOR_OP, "XOR", is_code, is_normal
1142+ 6952             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1142+ 6952             >
1142+ 6952             >                // dummy db directives used to calculate length of namec
1142+ 6952 58 4F 52    >                db      "XOR"
1142+ 6955             >len_NFA         defl    $ - temp_NFA
1142+ 6955             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1142+ 6952             >
1142+ 6952 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1142+ 6953 58 4F 52    >                db      "XOR"               // name string in 7-bit ascii, but
1142+ 6956             >                org     $-1                 // alter last byte of Name just above to set
1142+ 6955 D2          >                db      {b $} | END_BIT     // msb as name end
1142+ 6956             >
1142+ 6956 40 69       >                dw      last_NFA            // Link to previous definition Name
1142+ 6958             >XOR_OP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1142+ 6958 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1142+ 6958             >                else
1142+ 6958 5A 69       >                dw      $ + 2   ; ok        // is pointed by CFA
1142+ 695A             >                endif           ; ok        // for other definitions it "points" the correct handler
1142+ 695A             >                // Use of "; ok" to suppress "warning[fwdref]"
1142+ 695A             >
1142+ 695A             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1143+ 695A D1                           pop     de
1144+ 695B E1                           pop     hl
1145+ 695C 7B                           ld      a, e
1146+ 695D AD                           xor     l
1147+ 695E 6F                           ld      l, a
1148+ 695F 7A                           ld      a, d
1149+ 6960 AC                           xor     h
1150+ 6961 67                           ld      h, a
1151+ 6962
1152+ 6962                              psh1
1152+ 6962 E5          >                push    hl
1152+ 6963 DD E9       >                jp      (ix)
1153+ 6965
1154+ 6965              //  ______________________________________________________________________
1155+ 6965              //
1156+ 6965              // sp@      -- a
1157+ 6965              // returns on top of stack the value of SP before execution
1158+ 6965                              New_Def SPFETCH, "SP@", is_code, is_normal
1158+ 6965             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1158+ 6965             >
1158+ 6965             >                // dummy db directives used to calculate length of namec
1158+ 6965 53 50 40    >                db      "SP@"
1158+ 6968             >len_NFA         defl    $ - temp_NFA
1158+ 6968             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1158+ 6965             >
1158+ 6965 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1158+ 6966 53 50 40    >                db      "SP@"               // name string in 7-bit ascii, but
1158+ 6969             >                org     $-1                 // alter last byte of Name just above to set
1158+ 6968 C0          >                db      {b $} | END_BIT     // msb as name end
1158+ 6969             >
1158+ 6969 52 69       >                dw      last_NFA            // Link to previous definition Name
1158+ 696B             >SPFETCH:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1158+ 696B ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1158+ 696B             >                else
1158+ 696B 6D 69       >                dw      $ + 2   ; ok        // is pointed by CFA
1158+ 696D             >                endif           ; ok        // for other definitions it "points" the correct handler
1158+ 696D             >                // Use of "; ok" to suppress "warning[fwdref]"
1158+ 696D             >
1158+ 696D             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1159+ 696D
1160+ 696D 21 00 00                     ld      hl, 0
1161+ 6970 39                           add     hl, sp
1162+ 6971
1163+ 6971                              psh1
1163+ 6971 E5          >                push    hl
1163+ 6972 DD E9       >                jp      (ix)
1164+ 6974
1165+ 6974              //  ______________________________________________________________________
1166+ 6974              //
1167+ 6974              // sp!      a --
1168+ 6974              // restore SP to the initial value passed
1169+ 6974              // normally it is S0, i.e. the word at offset 6 and 7 of user variabiles area.
1170+ 6974                              New_Def SPSTORE, "SP!", is_code, is_normal
1170+ 6974             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1170+ 6974             >
1170+ 6974             >                // dummy db directives used to calculate length of namec
1170+ 6974 53 50 21    >                db      "SP!"
1170+ 6977             >len_NFA         defl    $ - temp_NFA
1170+ 6977             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1170+ 6974             >
1170+ 6974 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1170+ 6975 53 50 21    >                db      "SP!"               // name string in 7-bit ascii, but
1170+ 6978             >                org     $-1                 // alter last byte of Name just above to set
1170+ 6977 A1          >                db      {b $} | END_BIT     // msb as name end
1170+ 6978             >
1170+ 6978 65 69       >                dw      last_NFA            // Link to previous definition Name
1170+ 697A             >SPSTORE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1170+ 697A ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1170+ 697A             >                else
1170+ 697A 7C 69       >                dw      $ + 2   ; ok        // is pointed by CFA
1170+ 697C             >                endif           ; ok        // for other definitions it "points" the correct handler
1170+ 697C             >                // Use of "; ok" to suppress "warning[fwdref]"
1170+ 697C             >
1170+ 697C             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1171+ 697C E1                           pop     hl
1172+ 697D F9                           ld      sp, hl
1173+ 697E
1174+ 697E                              next
1174+ 697E DD E9       >                jp      (ix)
1175+ 6980
1176+ 6980              //  ______________________________________________________________________
1177+ 6980              //
1178+ 6980              // rp@      -- a
1179+ 6980              // returns on top of stack the value of Return-Pointer
1180+ 6980                              New_Def RPFETCH, "RP@", is_code, is_normal
1180+ 6980             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1180+ 6980             >
1180+ 6980             >                // dummy db directives used to calculate length of namec
1180+ 6980 52 50 40    >                db      "RP@"
1180+ 6983             >len_NFA         defl    $ - temp_NFA
1180+ 6983             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1180+ 6980             >
1180+ 6980 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1180+ 6981 52 50 40    >                db      "RP@"               // name string in 7-bit ascii, but
1180+ 6984             >                org     $-1                 // alter last byte of Name just above to set
1180+ 6983 C0          >                db      {b $} | END_BIT     // msb as name end
1180+ 6984             >
1180+ 6984 74 69       >                dw      last_NFA            // Link to previous definition Name
1180+ 6986             >RPFETCH:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1180+ 6986 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1180+ 6986             >                else
1180+ 6986 88 69       >                dw      $ + 2   ; ok        // is pointed by CFA
1180+ 6988             >                endif           ; ok        // for other definitions it "points" the correct handler
1180+ 6988             >                // Use of "; ok" to suppress "warning[fwdref]"
1180+ 6988             >
1180+ 6988             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1181+ 6988
1182+ 6988                              ldhlrp
1182+ 6988 2A 96 63    >                ld      hl,(RP_Pointer)
1183+ 698B
1184+ 698B                              psh1
1184+ 698B E5          >                push    hl
1184+ 698C DD E9       >                jp      (ix)
1185+ 698E
1186+ 698E              //  ______________________________________________________________________
1187+ 698E              //
1188+ 698E              // rp!      a --
1189+ 698E              // restore RP to the initial value passed
1190+ 698E              // normally it is R0 @, i.e. the word at offset 8 of user variabiles area.
1191+ 698E                              New_Def RPSTORE, "RP!", is_code, is_normal
1191+ 698E             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1191+ 698E             >
1191+ 698E             >                // dummy db directives used to calculate length of namec
1191+ 698E 52 50 21    >                db      "RP!"
1191+ 6991             >len_NFA         defl    $ - temp_NFA
1191+ 6991             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1191+ 698E             >
1191+ 698E 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1191+ 698F 52 50 21    >                db      "RP!"               // name string in 7-bit ascii, but
1191+ 6992             >                org     $-1                 // alter last byte of Name just above to set
1191+ 6991 A1          >                db      {b $} | END_BIT     // msb as name end
1191+ 6992             >
1191+ 6992 80 69       >                dw      last_NFA            // Link to previous definition Name
1191+ 6994             >RPSTORE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1191+ 6994 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1191+ 6994             >                else
1191+ 6994 96 69       >                dw      $ + 2   ; ok        // is pointed by CFA
1191+ 6996             >                endif           ; ok        // for other definitions it "points" the correct handler
1191+ 6996             >                // Use of "; ok" to suppress "warning[fwdref]"
1191+ 6996             >
1191+ 6996             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1192+ 6996 E1                           pop     hl
1193+ 6997                              ldrphl
1193+ 6997 22 96 63    >                ld      (RP_Pointer),hl
1194+ 699A
1195+ 699A                              next
1195+ 699A DD E9       >                jp      (ix)
1196+ 699C
1197+ 699C              //  ______________________________________________________________________
1198+ 699C              //
1199+ 699C              // exit      --
1200+ 699C              // exits back to the caller word
1201+ 699C                              New_Def EXIT, "EXIT", is_code, is_normal
1201+ 699C             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1201+ 699C             >
1201+ 699C             >                // dummy db directives used to calculate length of namec
1201+ 699C 45 58 49 54 >                db      "EXIT"
1201+ 69A0             >len_NFA         defl    $ - temp_NFA
1201+ 69A0             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1201+ 699C             >
1201+ 699C 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1201+ 699D 45 58 49 54 >                db      "EXIT"               // name string in 7-bit ascii, but
1201+ 69A1             >                org     $-1                 // alter last byte of Name just above to set
1201+ 69A0 D4          >                db      {b $} | END_BIT     // msb as name end
1201+ 69A1             >
1201+ 69A1 8E 69       >                dw      last_NFA            // Link to previous definition Name
1201+ 69A3             >EXIT:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1201+ 69A3 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1201+ 69A3             >                else
1201+ 69A3 A5 69       >                dw      $ + 2   ; ok        // is pointed by CFA
1201+ 69A5             >                endif           ; ok        // for other definitions it "points" the correct handler
1201+ 69A5             >                // Use of "; ok" to suppress "warning[fwdref]"
1201+ 69A5             >
1201+ 69A5             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1202+ 69A5                              ldhlrp                      // Get Return Stack Pointer
1202+ 69A5 2A 96 63    >                ld      hl,(RP_Pointer)
1203+ 69A8 4E                           ld      c, (hl)             // pop Instruction Pointer
1204+ 69A9 23                           inc     hl                  // from Return Stack
1205+ 69AA 46                           ld      b, (hl)
1206+ 69AB 23                           inc     hl
1207+ 69AC                              ldrphl                      // Set Return Stack Pointer
1207+ 69AC 22 96 63    >                ld      (RP_Pointer),hl
1208+ 69AF                              next
1208+ 69AF DD E9       >                jp      (ix)
1209+ 69B1
1210+ 69B1              //  ______________________________________________________________________
1211+ 69B1              //
1212+ 69B1              // lastl      --
1213+ 69B1              // exits back to the caller word
1214+ 69B1              //              New_Def EXIT, "LASTL", is_code, is_normal
1215+ 69B1              //              ldhlrp                      // Get Return Stack Pointer
1216+ 69B1              //              ld      e, (hl)             // pop Instruction Pointer
1217+ 69B1              //              inc     hl                  // from Return Stack
1218+ 69B1              //              ld      d, (hl)
1219+ 69B1              //              inc     hl
1220+ 69B1              //              ld      (hl), e
1221+ 69B1              //              inc     hl
1222+ 69B1              //              ld      (hl), d
1223+ 69B1              //              next
1224+ 69B1
1225+ 69B1              //  ______________________________________________________________________
1226+ 69B1              //
1227+ 69B1              // >r      n --
1228+ 69B1              // pop from calculator-stack and push into return-stack
1229+ 69B1                              New_Def TO_R, ">R", is_code, is_normal
1229+ 69B1             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1229+ 69B1             >
1229+ 69B1             >                // dummy db directives used to calculate length of namec
1229+ 69B1 3E 52       >                db      ">R"
1229+ 69B3             >len_NFA         defl    $ - temp_NFA
1229+ 69B3             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1229+ 69B1             >
1229+ 69B1 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1229+ 69B2 3E 52       >                db      ">R"               // name string in 7-bit ascii, but
1229+ 69B4             >                org     $-1                 // alter last byte of Name just above to set
1229+ 69B3 D2          >                db      {b $} | END_BIT     // msb as name end
1229+ 69B4             >
1229+ 69B4 9C 69       >                dw      last_NFA            // Link to previous definition Name
1229+ 69B6             >TO_R:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1229+ 69B6 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1229+ 69B6             >                else
1229+ 69B6 B8 69       >                dw      $ + 2   ; ok        // is pointed by CFA
1229+ 69B8             >                endif           ; ok        // for other definitions it "points" the correct handler
1229+ 69B8             >                // Use of "; ok" to suppress "warning[fwdref]"
1229+ 69B8             >
1229+ 69B8             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1230+ 69B8 D1                           pop     de
1231+ 69B9                              ldhlrp
1231+ 69B9 2A 96 63    >                ld      hl,(RP_Pointer)
1232+ 69BC 2B                           dec     hl
1233+ 69BD 72                           ld      (hl), d             // store current TOS
1234+ 69BE 2B                           dec     hl                  // to Return Stack
1235+ 69BF 73                           ld      (hl), e
1236+ 69C0                              ldrphl
1236+ 69C0 22 96 63    >                ld      (RP_Pointer),hl
1237+ 69C3
1238+ 69C3                              next
1238+ 69C3 DD E9       >                jp      (ix)
1239+ 69C5
1240+ 69C5              //  ______________________________________________________________________
1241+ 69C5              //
1242+ 69C5              // r>      -- n
1243+ 69C5              // pop from return-stack and push into calculator-stack
1244+ 69C5                              New_Def R_TO, "R>", is_code, is_normal
1244+ 69C5             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1244+ 69C5             >
1244+ 69C5             >                // dummy db directives used to calculate length of namec
1244+ 69C5 52 3E       >                db      "R>"
1244+ 69C7             >len_NFA         defl    $ - temp_NFA
1244+ 69C7             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1244+ 69C5             >
1244+ 69C5 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1244+ 69C6 52 3E       >                db      "R>"               // name string in 7-bit ascii, but
1244+ 69C8             >                org     $-1                 // alter last byte of Name just above to set
1244+ 69C7 BE          >                db      {b $} | END_BIT     // msb as name end
1244+ 69C8             >
1244+ 69C8 B1 69       >                dw      last_NFA            // Link to previous definition Name
1244+ 69CA             >R_TO:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1244+ 69CA ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1244+ 69CA             >                else
1244+ 69CA CC 69       >                dw      $ + 2   ; ok        // is pointed by CFA
1244+ 69CC             >                endif           ; ok        // for other definitions it "points" the correct handler
1244+ 69CC             >                // Use of "; ok" to suppress "warning[fwdref]"
1244+ 69CC             >
1244+ 69CC             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1245+ 69CC
1246+ 69CC                              ldhlrp
1246+ 69CC 2A 96 63    >                ld      hl,(RP_Pointer)
1247+ 69CF 5E                           ld      e, (hl)             // retrieve from Return Stack
1248+ 69D0 23                           inc     hl
1249+ 69D1 56                           ld      d, (hl)
1250+ 69D2 23                           inc     hl
1251+ 69D3                              ldrphl
1251+ 69D3 22 96 63    >                ld      (RP_Pointer),hl
1252+ 69D6 D5                           push    de
1253+ 69D7                              next
1253+ 69D7 DD E9       >                jp      (ix)
1254+ 69D9
1255+ 69D9              //  ______________________________________________________________________
1256+ 69D9              //
1257+ 69D9              // r@            -- n
1258+ 69D9              // return on top of stack the value of top of return-stack
1259+ 69D9              // Since this is the same as I, we alter R's CFA to jump there
1260+ 69D9                              New_Def R_OP, "R@", I_Ptr, is_normal
1260+ 69D9             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1260+ 69D9             >
1260+ 69D9             >                // dummy db directives used to calculate length of namec
1260+ 69D9 52 40       >                db      "R@"
1260+ 69DB             >len_NFA         defl    $ - temp_NFA
1260+ 69DB             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1260+ 69D9             >
1260+ 69D9 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1260+ 69DA 52 40       >                db      "R@"               // name string in 7-bit ascii, but
1260+ 69DC             >                org     $-1                 // alter last byte of Name just above to set
1260+ 69DB C0          >                db      {b $} | END_BIT     // msb as name end
1260+ 69DC             >
1260+ 69DC C5 69       >                dw      last_NFA            // Link to previous definition Name
1260+ 69DE             >R_OP:          if I_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1260+ 69DE 92 64       >                dw      I_Ptr ; ok        // for primitive definitions  actual code
1260+ 69E0             >                else
1260+ 69E0 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
1260+ 69E0             >                endif           ; ok        // for other definitions it "points" the correct handler
1260+ 69E0             >                // Use of "; ok" to suppress "warning[fwdref]"
1260+ 69E0             >
1260+ 69E0             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1261+ 69E0
1262+ 69E0              //  ______________________________________________________________________
1263+ 69E0              //
1264+ 69E0              // r            -- n
1265+ 69E0              // return on top of stack the value of top of return-stack
1266+ 69E0              // Since this is the same as I, we alter R's CFA to jump there
1267+ 69E0              //              New_Def R_OLD, "R", I_Ptr, is_normal
1268+ 69E0
1269+ 69E0              //  ______________________________________________________________________
1270+ 69E0              //
1271+ 69E0              // 0=           n -- f
1272+ 69E0              // true (non zero) if n is zero, false (0) elsewere
1273+ 69E0                              New_Def ZEQUAL, "0=", is_code, is_normal
1273+ 69E0             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1273+ 69E0             >
1273+ 69E0             >                // dummy db directives used to calculate length of namec
1273+ 69E0 30 3D       >                db      "0="
1273+ 69E2             >len_NFA         defl    $ - temp_NFA
1273+ 69E2             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1273+ 69E0             >
1273+ 69E0 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1273+ 69E1 30 3D       >                db      "0="               // name string in 7-bit ascii, but
1273+ 69E3             >                org     $-1                 // alter last byte of Name just above to set
1273+ 69E2 BD          >                db      {b $} | END_BIT     // msb as name end
1273+ 69E3             >
1273+ 69E3 D9 69       >                dw      last_NFA            // Link to previous definition Name
1273+ 69E5             >ZEQUAL:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1273+ 69E5 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1273+ 69E5             >                else
1273+ 69E5 E7 69       >                dw      $ + 2   ; ok        // is pointed by CFA
1273+ 69E7             >                endif           ; ok        // for other definitions it "points" the correct handler
1273+ 69E7             >                // Use of "; ok" to suppress "warning[fwdref]"
1273+ 69E7             >
1273+ 69E7             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1274+ 69E7              Zero_Equal:
1275+ 69E7 E1                           pop     hl
1276+ 69E8 7D                           ld      a, l
1277+ 69E9 B4                           or      h
1278+ 69EA 21 00 00                     ld      hl, FALSE_FLAG
1279+ 69ED 20 01                        jr      nz, ZEqual_Skip
1280+ 69EF 2B                               dec     hl
1281+ 69F0              ZEqual_Skip:
1282+ 69F0                              psh1
1282+ 69F0 E5          >                push    hl
1282+ 69F1 DD E9       >                jp      (ix)
1283+ 69F3
1284+ 69F3              //  ______________________________________________________________________
1285+ 69F3              //
1286+ 69F3              // not         a1 -- a2
1287+ 69F3              // increment by 2 top of stack
1288+ 69F3                              New_Def NOT_OP, "NOT", Zero_Equal, is_normal
1288+ 69F3             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1288+ 69F3             >
1288+ 69F3             >                // dummy db directives used to calculate length of namec
1288+ 69F3 4E 4F 54    >                db      "NOT"
1288+ 69F6             >len_NFA         defl    $ - temp_NFA
1288+ 69F6             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1288+ 69F3             >
1288+ 69F3 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1288+ 69F4 4E 4F 54    >                db      "NOT"               // name string in 7-bit ascii, but
1288+ 69F7             >                org     $-1                 // alter last byte of Name just above to set
1288+ 69F6 D4          >                db      {b $} | END_BIT     // msb as name end
1288+ 69F7             >
1288+ 69F7 E0 69       >                dw      last_NFA            // Link to previous definition Name
1288+ 69F9             >NOT_OP:          if Zero_Equal != 0 ; ok        // This is the start address of the direct jp(hl)
1288+ 69F9 E7 69       >                dw      Zero_Equal ; ok        // for primitive definitions  actual code
1288+ 69FB             >                else
1288+ 69FB ~           >                dw      $ + 2   ; ok        // is pointed by CFA
1288+ 69FB             >                endif           ; ok        // for other definitions it "points" the correct handler
1288+ 69FB             >                // Use of "; ok" to suppress "warning[fwdref]"
1288+ 69FB             >
1288+ 69FB             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1289+ 69FB
1290+ 69FB              //  ______________________________________________________________________
1291+ 69FB              //
1292+ 69FB              // 0<           n -- f
1293+ 69FB              // true (non zero) if n is less than zero, false (0) elsewere
1294+ 69FB                              New_Def ZLESS, "0<", is_code, is_normal
1294+ 69FB             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1294+ 69FB             >
1294+ 69FB             >                // dummy db directives used to calculate length of namec
1294+ 69FB 30 3C       >                db      "0<"
1294+ 69FD             >len_NFA         defl    $ - temp_NFA
1294+ 69FD             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1294+ 69FB             >
1294+ 69FB 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1294+ 69FC 30 3C       >                db      "0<"               // name string in 7-bit ascii, but
1294+ 69FE             >                org     $-1                 // alter last byte of Name just above to set
1294+ 69FD BC          >                db      {b $} | END_BIT     // msb as name end
1294+ 69FE             >
1294+ 69FE F3 69       >                dw      last_NFA            // Link to previous definition Name
1294+ 6A00             >ZLESS:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1294+ 6A00 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1294+ 6A00             >                else
1294+ 6A00 02 6A       >                dw      $ + 2   ; ok        // is pointed by CFA
1294+ 6A02             >                endif           ; ok        // for other definitions it "points" the correct handler
1294+ 6A02             >                // Use of "; ok" to suppress "warning[fwdref]"
1294+ 6A02             >
1294+ 6A02             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1295+ 6A02 E1                           pop     hl
1296+ 6A03 29                           add     hl, hl
1297+ 6A04 ED 62                        sbc     hl, hl
1298+ 6A06                              psh1
1298+ 6A06 E5          >                push    hl
1298+ 6A07 DD E9       >                jp      (ix)
1299+ 6A09
1300+ 6A09              //  ______________________________________________________________________
1301+ 6A09              //
1302+ 6A09              // 0>           n -- f
1303+ 6A09              // true (non zero) if n is less than zero, false (0) elsewere
1304+ 6A09                              New_Def ZGREATER, "0>", is_code, is_normal
1304+ 6A09             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1304+ 6A09             >
1304+ 6A09             >                // dummy db directives used to calculate length of namec
1304+ 6A09 30 3E       >                db      "0>"
1304+ 6A0B             >len_NFA         defl    $ - temp_NFA
1304+ 6A0B             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1304+ 6A09             >
1304+ 6A09 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1304+ 6A0A 30 3E       >                db      "0>"               // name string in 7-bit ascii, but
1304+ 6A0C             >                org     $-1                 // alter last byte of Name just above to set
1304+ 6A0B BE          >                db      {b $} | END_BIT     // msb as name end
1304+ 6A0C             >
1304+ 6A0C FB 69       >                dw      last_NFA            // Link to previous definition Name
1304+ 6A0E             >ZGREATER:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1304+ 6A0E ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1304+ 6A0E             >                else
1304+ 6A0E 10 6A       >                dw      $ + 2   ; ok        // is pointed by CFA
1304+ 6A10             >                endif           ; ok        // for other definitions it "points" the correct handler
1304+ 6A10             >                // Use of "; ok" to suppress "warning[fwdref]"
1304+ 6A10             >
1304+ 6A10             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1305+ 6A10 E1                           pop     hl
1306+ 6A11 7D                           ld      a, l
1307+ 6A12 B4                           or      h
1308+ 6A13 29                           add     hl, hl
1309+ 6A14 21 00 00                     ld      hl, FALSE_FLAG
1310+ 6A17 38 04                        jr      c, ZGreater_Skip
1311+ 6A19 A7                               and     a
1312+ 6A1A 28 01                            jr      z, ZGreater_Skip
1313+ 6A1C 2B                                   dec     hl
1314+ 6A1D              ZGreater_Skip:
1315+ 6A1D                              psh1
1315+ 6A1D E5          >                push    hl
1315+ 6A1E DD E9       >                jp      (ix)
1316+ 6A20
1317+ 6A20              //  ______________________________________________________________________
1318+ 6A20              //
1319+ 6A20              // +            n1 n2 -- n3
1320+ 6A20              // returns the unsigned sum of two top values
1321+ 6A20                              New_Def PLUS, "+", is_code, is_normal
1321+ 6A20             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1321+ 6A20             >
1321+ 6A20             >                // dummy db directives used to calculate length of namec
1321+ 6A20 2B          >                db      "+"
1321+ 6A21             >len_NFA         defl    $ - temp_NFA
1321+ 6A21             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1321+ 6A20             >
1321+ 6A20 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1321+ 6A21 2B          >                db      "+"               // name string in 7-bit ascii, but
1321+ 6A22             >                org     $-1                 // alter last byte of Name just above to set
1321+ 6A21 AB          >                db      {b $} | END_BIT     // msb as name end
1321+ 6A22             >
1321+ 6A22 09 6A       >                dw      last_NFA            // Link to previous definition Name
1321+ 6A24             >PLUS:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1321+ 6A24 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1321+ 6A24             >                else
1321+ 6A24 26 6A       >                dw      $ + 2   ; ok        // is pointed by CFA
1321+ 6A26             >                endif           ; ok        // for other definitions it "points" the correct handler
1321+ 6A26             >                // Use of "; ok" to suppress "warning[fwdref]"
1321+ 6A26             >
1321+ 6A26             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1322+ 6A26 E1                           pop     hl
1323+ 6A27 D1                           pop     de
1324+ 6A28 19                           add     hl, de
1325+ 6A29
1326+ 6A29                              psh1
1326+ 6A29 E5          >                push    hl
1326+ 6A2A DD E9       >                jp      (ix)
1327+ 6A2C
1328+ 6A2C
1329+ 6A2C              //  ______________________________________________________________________
1330+ 6A2C              //
1331+ 6A2C              // d+           d1 d2 -- d3
1332+ 6A2C              // returns the unsigned sum of two top double-numbers
1333+ 6A2C              //      d2  d1
1334+ 6A2C              //      h l h l
1335+ 6A2C              // SP   LHEDLHED
1336+ 6A2C              // SP  +01234567
1337+ 6A2C                              New_Def DPLUS, "D+", is_code, is_normal
1337+ 6A2C             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1337+ 6A2C             >
1337+ 6A2C             >                // dummy db directives used to calculate length of namec
1337+ 6A2C 44 2B       >                db      "D+"
1337+ 6A2E             >len_NFA         defl    $ - temp_NFA
1337+ 6A2E             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1337+ 6A2C             >
1337+ 6A2C 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1337+ 6A2D 44 2B       >                db      "D+"               // name string in 7-bit ascii, but
1337+ 6A2F             >                org     $-1                 // alter last byte of Name just above to set
1337+ 6A2E AB          >                db      {b $} | END_BIT     // msb as name end
1337+ 6A2F             >
1337+ 6A2F 20 6A       >                dw      last_NFA            // Link to previous definition Name
1337+ 6A31             >DPLUS:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1337+ 6A31 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1337+ 6A31             >                else
1337+ 6A31 33 6A       >                dw      $ + 2   ; ok        // is pointed by CFA
1337+ 6A33             >                endif           ; ok        // for other definitions it "points" the correct handler
1337+ 6A33             >                // Use of "; ok" to suppress "warning[fwdref]"
1337+ 6A33             >
1337+ 6A33             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1338+ 6A33
1339+ 6A33 D9                           exx
1340+ 6A34 C1                           pop     bc                  // bc := d2.H
1341+ 6A35 D1                           pop     de                  // hl := d2.L
1342+ 6A36 E1                           pop     hl                  // d1.H
1343+ 6A37 E3                           ex      (sp), hl            // d1.L
1344+ 6A38 19                           add     hl, de              // hl := d2.L + d1.L
1345+ 6A39 E3                           ex      (sp), hl            // d1.H
1346+ 6A3A ED 4A                        adc     hl, bc              // d1.H + d2.H
1347+ 6A3C E5                           push    hl
1348+ 6A3D D9                           exx
1349+ 6A3E                              next
1349+ 6A3E DD E9       >                jp      (ix)
1350+ 6A40
1351+ 6A40              //  ______________________________________________________________________
1352+ 6A40              //
1353+ 6A40              // 1+           n1 -- n2
1354+ 6A40              // increment by 1 top of stack
1355+ 6A40                              New_Def ONE_PLUS, "1+", is_code, is_normal
1355+ 6A40             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1355+ 6A40             >
1355+ 6A40             >                // dummy db directives used to calculate length of namec
1355+ 6A40 31 2B       >                db      "1+"
1355+ 6A42             >len_NFA         defl    $ - temp_NFA
1355+ 6A42             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1355+ 6A40             >
1355+ 6A40 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1355+ 6A41 31 2B       >                db      "1+"               // name string in 7-bit ascii, but
1355+ 6A43             >                org     $-1                 // alter last byte of Name just above to set
1355+ 6A42 AB          >                db      {b $} | END_BIT     // msb as name end
1355+ 6A43             >
1355+ 6A43 2C 6A       >                dw      last_NFA            // Link to previous definition Name
1355+ 6A45             >ONE_PLUS:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1355+ 6A45 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1355+ 6A45             >                else
1355+ 6A45 47 6A       >                dw      $ + 2   ; ok        // is pointed by CFA
1355+ 6A47             >                endif           ; ok        // for other definitions it "points" the correct handler
1355+ 6A47             >                // Use of "; ok" to suppress "warning[fwdref]"
1355+ 6A47             >
1355+ 6A47             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1356+ 6A47 E1                           pop     hl
1357+ 6A48 23                           inc     hl
1358+ 6A49
1359+ 6A49                              psh1
1359+ 6A49 E5          >                push    hl
1359+ 6A4A DD E9       >                jp      (ix)
1360+ 6A4C
1361+ 6A4C              //  ______________________________________________________________________
1362+ 6A4C              //
1363+ 6A4C              // 1-           n1 -- n2
1364+ 6A4C              // decrement by 1 top of stack
1365+ 6A4C                              New_Def ONE_SUBTRACT, "1-", is_code, is_normal
1365+ 6A4C             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1365+ 6A4C             >
1365+ 6A4C             >                // dummy db directives used to calculate length of namec
1365+ 6A4C 31 2D       >                db      "1-"
1365+ 6A4E             >len_NFA         defl    $ - temp_NFA
1365+ 6A4E             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1365+ 6A4C             >
1365+ 6A4C 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1365+ 6A4D 31 2D       >                db      "1-"               // name string in 7-bit ascii, but
1365+ 6A4F             >                org     $-1                 // alter last byte of Name just above to set
1365+ 6A4E AD          >                db      {b $} | END_BIT     // msb as name end
1365+ 6A4F             >
1365+ 6A4F 40 6A       >                dw      last_NFA            // Link to previous definition Name
1365+ 6A51             >ONE_SUBTRACT:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1365+ 6A51 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1365+ 6A51             >                else
1365+ 6A51 53 6A       >                dw      $ + 2   ; ok        // is pointed by CFA
1365+ 6A53             >                endif           ; ok        // for other definitions it "points" the correct handler
1365+ 6A53             >                // Use of "; ok" to suppress "warning[fwdref]"
1365+ 6A53             >
1365+ 6A53             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1366+ 6A53 E1                           pop     hl
1367+ 6A54 2B                           dec     hl
1368+ 6A55
1369+ 6A55                              psh1
1369+ 6A55 E5          >                push    hl
1369+ 6A56 DD E9       >                jp      (ix)
1370+ 6A58
1371+ 6A58              //  ______________________________________________________________________
1372+ 6A58              //
1373+ 6A58              // 2+           n1 -- n2
1374+ 6A58              // increment by 2 top of stack
1375+ 6A58                              New_Def TWO_PLUS, "2+", is_code, is_normal
1375+ 6A58             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1375+ 6A58             >
1375+ 6A58             >                // dummy db directives used to calculate length of namec
1375+ 6A58 32 2B       >                db      "2+"
1375+ 6A5A             >len_NFA         defl    $ - temp_NFA
1375+ 6A5A             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1375+ 6A58             >
1375+ 6A58 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1375+ 6A59 32 2B       >                db      "2+"               // name string in 7-bit ascii, but
1375+ 6A5B             >                org     $-1                 // alter last byte of Name just above to set
1375+ 6A5A AB          >                db      {b $} | END_BIT     // msb as name end
1375+ 6A5B             >
1375+ 6A5B 4C 6A       >                dw      last_NFA            // Link to previous definition Name
1375+ 6A5D             >TWO_PLUS:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1375+ 6A5D ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1375+ 6A5D             >                else
1375+ 6A5D 5F 6A       >                dw      $ + 2   ; ok        // is pointed by CFA
1375+ 6A5F             >                endif           ; ok        // for other definitions it "points" the correct handler
1375+ 6A5F             >                // Use of "; ok" to suppress "warning[fwdref]"
1375+ 6A5F             >
1375+ 6A5F             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1376+ 6A5F              Two_Plus:
1377+ 6A5F E1                           pop     hl
1378+ 6A60 23                           inc     hl
1379+ 6A61 23                           inc     hl
1380+ 6A62
1381+ 6A62                              psh1
1381+ 6A62 E5          >                push    hl
1381+ 6A63 DD E9       >                jp      (ix)
1382+ 6A65
1383+ 6A65              //  ______________________________________________________________________
1384+ 6A65              //
1385+ 6A65              // cell+        a1 -- a2
1386+ 6A65              // increment by 2 top of stack
1387+ 6A65                              New_Def CELL_PLUS, "CELL+", Two_Plus, is_normal
1387+ 6A65             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1387+ 6A65             >
1387+ 6A65             >                // dummy db directives used to calculate length of namec
1387+ 6A65 43 45 4C 4C >                db      "CELL+"
1387+ 6A69 2B          >
1387+ 6A6A             >len_NFA         defl    $ - temp_NFA
1387+ 6A6A             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1387+ 6A65             >
1387+ 6A65 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1387+ 6A66 43 45 4C 4C >                db      "CELL+"               // name string in 7-bit ascii, but
1387+ 6A6A 2B          >
1387+ 6A6B             >                org     $-1                 // alter last byte of Name just above to set
1387+ 6A6A AB          >                db      {b $} | END_BIT     // msb as name end
1387+ 6A6B             >
1387+ 6A6B 58 6A       >                dw      last_NFA            // Link to previous definition Name
1387+ 6A6D             >CELL_PLUS:          if Two_Plus != 0 ; ok        // This is the start address of the direct jp(hl)
1387+ 6A6D 5F 6A       >                dw      Two_Plus ; ok        // for primitive definitions  actual code
1387+ 6A6F             >                else
1387+ 6A6F ~           >                dw      $ + 2   ; ok        // is pointed by CFA
1387+ 6A6F             >                endif           ; ok        // for other definitions it "points" the correct handler
1387+ 6A6F             >                // Use of "; ok" to suppress "warning[fwdref]"
1387+ 6A6F             >
1387+ 6A6F             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1388+ 6A6F
1389+ 6A6F              //  ______________________________________________________________________
1390+ 6A6F              //
1391+ 6A6F              // align        a1 -- a2
1392+ 6A6F              // align memory : not used
1393+ 6A6F              //              New_Def ALIGN_ADDR, "ALIGN", is_code, is_normal
1394+ 6A6F              //            next
1395+ 6A6F
1396+ 6A6F              //  ______________________________________________________________________
1397+ 6A6F              //
1398+ 6A6F              // cell-        a1 -- a2
1399+ 6A6F              // decrement by 2 top of stack
1400+ 6A6F                              New_Def CELL_MINUS, "CELL-", is_code, is_normal
1400+ 6A6F             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1400+ 6A6F             >
1400+ 6A6F             >                // dummy db directives used to calculate length of namec
1400+ 6A6F 43 45 4C 4C >                db      "CELL-"
1400+ 6A73 2D          >
1400+ 6A74             >len_NFA         defl    $ - temp_NFA
1400+ 6A74             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1400+ 6A6F             >
1400+ 6A6F 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1400+ 6A70 43 45 4C 4C >                db      "CELL-"               // name string in 7-bit ascii, but
1400+ 6A74 2D          >
1400+ 6A75             >                org     $-1                 // alter last byte of Name just above to set
1400+ 6A74 AD          >                db      {b $} | END_BIT     // msb as name end
1400+ 6A75             >
1400+ 6A75 65 6A       >                dw      last_NFA            // Link to previous definition Name
1400+ 6A77             >CELL_MINUS:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1400+ 6A77 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1400+ 6A77             >                else
1400+ 6A77 79 6A       >                dw      $ + 2   ; ok        // is pointed by CFA
1400+ 6A79             >                endif           ; ok        // for other definitions it "points" the correct handler
1400+ 6A79             >                // Use of "; ok" to suppress "warning[fwdref]"
1400+ 6A79             >
1400+ 6A79             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1401+ 6A79              CellMinus:
1402+ 6A79 E1                           pop     hl
1403+ 6A7A 2B                           dec     hl
1404+ 6A7B 2B                           dec     hl
1405+ 6A7C E5                           push    hl
1406+ 6A7D                              next
1406+ 6A7D DD E9       >                jp      (ix)
1407+ 6A7F
1408+ 6A7F              //  ______________________________________________________________________
1409+ 6A7F              //
1410+ 6A7F              // 2-           a1 -- a2
1411+ 6A7F              // decrement by 2 top of stack
1412+ 6A7F                              New_Def TWO_MINUS, "2-", CellMinus, is_normal
1412+ 6A7F             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1412+ 6A7F             >
1412+ 6A7F             >                // dummy db directives used to calculate length of namec
1412+ 6A7F 32 2D       >                db      "2-"
1412+ 6A81             >len_NFA         defl    $ - temp_NFA
1412+ 6A81             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1412+ 6A7F             >
1412+ 6A7F 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1412+ 6A80 32 2D       >                db      "2-"               // name string in 7-bit ascii, but
1412+ 6A82             >                org     $-1                 // alter last byte of Name just above to set
1412+ 6A81 AD          >                db      {b $} | END_BIT     // msb as name end
1412+ 6A82             >
1412+ 6A82 6F 6A       >                dw      last_NFA            // Link to previous definition Name
1412+ 6A84             >TWO_MINUS:          if CellMinus != 0 ; ok        // This is the start address of the direct jp(hl)
1412+ 6A84 79 6A       >                dw      CellMinus ; ok        // for primitive definitions  actual code
1412+ 6A86             >                else
1412+ 6A86 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
1412+ 6A86             >                endif           ; ok        // for other definitions it "points" the correct handler
1412+ 6A86             >                // Use of "; ok" to suppress "warning[fwdref]"
1412+ 6A86             >
1412+ 6A86             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1413+ 6A86
1414+ 6A86              //  ______________________________________________________________________
1415+ 6A86              //
1416+ 6A86              // negate        n1 -- n2
1417+ 6A86              // change the sign of number
1418+ 6A86                              New_Def MINUS, "NEGATE", is_code, is_normal
1418+ 6A86             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1418+ 6A86             >
1418+ 6A86             >                // dummy db directives used to calculate length of namec
1418+ 6A86 4E 45 47 41 >                db      "NEGATE"
1418+ 6A8A 54 45       >
1418+ 6A8C             >len_NFA         defl    $ - temp_NFA
1418+ 6A8C             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1418+ 6A86             >
1418+ 6A86 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1418+ 6A87 4E 45 47 41 >                db      "NEGATE"               // name string in 7-bit ascii, but
1418+ 6A8B 54 45       >
1418+ 6A8D             >                org     $-1                 // alter last byte of Name just above to set
1418+ 6A8C C5          >                db      {b $} | END_BIT     // msb as name end
1418+ 6A8D             >
1418+ 6A8D 7F 6A       >                dw      last_NFA            // Link to previous definition Name
1418+ 6A8F             >MINUS:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1418+ 6A8F ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1418+ 6A8F             >                else
1418+ 6A8F 91 6A       >                dw      $ + 2   ; ok        // is pointed by CFA
1418+ 6A91             >                endif           ; ok        // for other definitions it "points" the correct handler
1418+ 6A91             >                // Use of "; ok" to suppress "warning[fwdref]"
1418+ 6A91             >
1418+ 6A91             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1419+ 6A91 21 00 00                     ld      hl, 0               // subtract from 0
1420+ 6A94 D1                           pop     de
1421+ 6A95 B7                           or      a
1422+ 6A96 ED 52                        sbc     hl, de
1423+ 6A98
1424+ 6A98                              psh1
1424+ 6A98 E5          >                push    hl
1424+ 6A99 DD E9       >                jp      (ix)
1425+ 6A9B
1426+ 6A9B              //  ______________________________________________________________________
1427+ 6A9B              //
1428+ 6A9B              // dnegate      d1 -- d2
1429+ 6A9B              // change the sign of a double number
1430+ 6A9B                              New_Def DMINUS, "DNEGATE", is_code, is_normal
1430+ 6A9B             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1430+ 6A9B             >
1430+ 6A9B             >                // dummy db directives used to calculate length of namec
1430+ 6A9B 44 4E 45 47 >                db      "DNEGATE"
1430+ 6A9F 41 54 45    >
1430+ 6AA2             >len_NFA         defl    $ - temp_NFA
1430+ 6AA2             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1430+ 6A9B             >
1430+ 6A9B 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1430+ 6A9C 44 4E 45 47 >                db      "DNEGATE"               // name string in 7-bit ascii, but
1430+ 6AA0 41 54 45    >
1430+ 6AA3             >                org     $-1                 // alter last byte of Name just above to set
1430+ 6AA2 C5          >                db      {b $} | END_BIT     // msb as name end
1430+ 6AA3             >
1430+ 6AA3 86 6A       >                dw      last_NFA            // Link to previous definition Name
1430+ 6AA5             >DMINUS:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1430+ 6AA5 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1430+ 6AA5             >                else
1430+ 6AA5 A7 6A       >                dw      $ + 2   ; ok        // is pointed by CFA
1430+ 6AA7             >                endif           ; ok        // for other definitions it "points" the correct handler
1430+ 6AA7             >                // Use of "; ok" to suppress "warning[fwdref]"
1430+ 6AA7             >
1430+ 6AA7             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1431+ 6AA7 D9                           exx
1432+ 6AA8 C1                           pop     bc                  // d1.H
1433+ 6AA9 D1                           pop     de                  // d1.L
1434+ 6AAA AF                           xor     a
1435+ 6AAB 67                           ld      h, a
1436+ 6AAC 6F                           ld      l, a
1437+ 6AAD ED 52                        sbc     hl, de              // subtact from zero
1438+ 6AAF E5                           push    hl                  // > d2-L
1439+ 6AB0 67                           ld      h, a
1440+ 6AB1 6F                           ld      l, a
1441+ 6AB2 ED 42                        sbc     hl, bc              // subtract from zero with carry
1442+ 6AB4                                                          // > d2-H
1443+ 6AB4 E5                           push    hl
1444+ 6AB5 D9                           exx
1445+ 6AB6                              next
1445+ 6AB6 DD E9       >                jp      (ix)
1446+ 6AB8
1447+ 6AB8              //  ______________________________________________________________________
1448+ 6AB8              //
1449+ 6AB8              // over         n1 n2 -- n1 n2 n1
1450+ 6AB8              // copy the second value of stack and put it on top.
1451+ 6AB8                              New_Def OVER, "OVER", is_code, is_normal
1451+ 6AB8             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1451+ 6AB8             >
1451+ 6AB8             >                // dummy db directives used to calculate length of namec
1451+ 6AB8 4F 56 45 52 >                db      "OVER"
1451+ 6ABC             >len_NFA         defl    $ - temp_NFA
1451+ 6ABC             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1451+ 6AB8             >
1451+ 6AB8 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1451+ 6AB9 4F 56 45 52 >                db      "OVER"               // name string in 7-bit ascii, but
1451+ 6ABD             >                org     $-1                 // alter last byte of Name just above to set
1451+ 6ABC D2          >                db      {b $} | END_BIT     // msb as name end
1451+ 6ABD             >
1451+ 6ABD 9B 6A       >                dw      last_NFA            // Link to previous definition Name
1451+ 6ABF             >OVER:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1451+ 6ABF ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1451+ 6ABF             >                else
1451+ 6ABF C1 6A       >                dw      $ + 2   ; ok        // is pointed by CFA
1451+ 6AC1             >                endif           ; ok        // for other definitions it "points" the correct handler
1451+ 6AC1             >                // Use of "; ok" to suppress "warning[fwdref]"
1451+ 6AC1             >
1451+ 6AC1             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1452+ 6AC1 D1                           pop     de                  //   n2
1453+ 6AC2 E1                           pop     hl                  // < n1
1454+ 6AC3 E5                           push    hl                  // > n1
1455+ 6AC4 D5                           push    de                  // > n2
1456+ 6AC5 E5                           push    hl                  // > n1
1457+ 6AC6                              next
1457+ 6AC6 DD E9       >                jp      (ix)
1458+ 6AC8
1459+ 6AC8              //  ______________________________________________________________________
1460+ 6AC8              //
1461+ 6AC8              // drop         n1 --
1462+ 6AC8              // drops the top of stack
1463+ 6AC8                              New_Def DROP, "DROP", is_code, is_normal
1463+ 6AC8             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1463+ 6AC8             >
1463+ 6AC8             >                // dummy db directives used to calculate length of namec
1463+ 6AC8 44 52 4F 50 >                db      "DROP"
1463+ 6ACC             >len_NFA         defl    $ - temp_NFA
1463+ 6ACC             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1463+ 6AC8             >
1463+ 6AC8 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1463+ 6AC9 44 52 4F 50 >                db      "DROP"               // name string in 7-bit ascii, but
1463+ 6ACD             >                org     $-1                 // alter last byte of Name just above to set
1463+ 6ACC D0          >                db      {b $} | END_BIT     // msb as name end
1463+ 6ACD             >
1463+ 6ACD B8 6A       >                dw      last_NFA            // Link to previous definition Name
1463+ 6ACF             >DROP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1463+ 6ACF ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1463+ 6ACF             >                else
1463+ 6ACF D1 6A       >                dw      $ + 2   ; ok        // is pointed by CFA
1463+ 6AD1             >                endif           ; ok        // for other definitions it "points" the correct handler
1463+ 6AD1             >                // Use of "; ok" to suppress "warning[fwdref]"
1463+ 6AD1             >
1463+ 6AD1             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1464+ 6AD1 E1                           pop     hl                  // < n1 and discard previous TOS
1465+ 6AD2                              next
1465+ 6AD2 DD E9       >                jp      (ix)
1466+ 6AD4
1467+ 6AD4              //  ______________________________________________________________________
1468+ 6AD4              //
1469+ 6AD4              // nip          n1 n2 -- n2
1470+ 6AD4              // drops the second elemento on the stack
1471+ 6AD4                              New_Def NIP, "NIP", is_code, is_normal
1471+ 6AD4             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1471+ 6AD4             >
1471+ 6AD4             >                // dummy db directives used to calculate length of namec
1471+ 6AD4 4E 49 50    >                db      "NIP"
1471+ 6AD7             >len_NFA         defl    $ - temp_NFA
1471+ 6AD7             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1471+ 6AD4             >
1471+ 6AD4 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1471+ 6AD5 4E 49 50    >                db      "NIP"               // name string in 7-bit ascii, but
1471+ 6AD8             >                org     $-1                 // alter last byte of Name just above to set
1471+ 6AD7 D0          >                db      {b $} | END_BIT     // msb as name end
1471+ 6AD8             >
1471+ 6AD8 C8 6A       >                dw      last_NFA            // Link to previous definition Name
1471+ 6ADA             >NIP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1471+ 6ADA ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1471+ 6ADA             >                else
1471+ 6ADA DC 6A       >                dw      $ + 2   ; ok        // is pointed by CFA
1471+ 6ADC             >                endif           ; ok        // for other definitions it "points" the correct handler
1471+ 6ADC             >                // Use of "; ok" to suppress "warning[fwdref]"
1471+ 6ADC             >
1471+ 6ADC             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1472+ 6ADC
1473+ 6ADC E1                           pop     hl                  // < n1 discarded
1474+ 6ADD E3                           ex      (sp), hl
1475+ 6ADE                              next
1475+ 6ADE DD E9       >                jp      (ix)
1476+ 6AE0
1477+ 6AE0              //  ______________________________________________________________________
1478+ 6AE0              //
1479+ 6AE0              // tuck         n1 n2 -- n2 n1 n2
1480+ 6AE0              // copy the top element after the second.
1481+ 6AE0                              New_Def TUCK, "TUCK", is_code, is_normal
1481+ 6AE0             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1481+ 6AE0             >
1481+ 6AE0             >                // dummy db directives used to calculate length of namec
1481+ 6AE0 54 55 43 4B >                db      "TUCK"
1481+ 6AE4             >len_NFA         defl    $ - temp_NFA
1481+ 6AE4             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1481+ 6AE0             >
1481+ 6AE0 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1481+ 6AE1 54 55 43 4B >                db      "TUCK"               // name string in 7-bit ascii, but
1481+ 6AE5             >                org     $-1                 // alter last byte of Name just above to set
1481+ 6AE4 CB          >                db      {b $} | END_BIT     // msb as name end
1481+ 6AE5             >
1481+ 6AE5 D4 6A       >                dw      last_NFA            // Link to previous definition Name
1481+ 6AE7             >TUCK:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1481+ 6AE7 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1481+ 6AE7             >                else
1481+ 6AE7 E9 6A       >                dw      $ + 2   ; ok        // is pointed by CFA
1481+ 6AE9             >                endif           ; ok        // for other definitions it "points" the correct handler
1481+ 6AE9             >                // Use of "; ok" to suppress "warning[fwdref]"
1481+ 6AE9             >
1481+ 6AE9             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1482+ 6AE9 E1                           pop     hl
1483+ 6AEA D1                           pop     de                  // < n1
1484+ 6AEB E5                           push    hl                  // > n2  and TOS
1485+ 6AEC D5                           push    de                  // > n1
1486+ 6AED E5                           push    hl
1487+ 6AEE                              next
1487+ 6AEE DD E9       >                jp      (ix)
1488+ 6AF0
1489+ 6AF0              //  ______________________________________________________________________
1490+ 6AF0              //
1491+ 6AF0              // swap         n1 n2 -- n2 n1
1492+ 6AF0              // swaps the two values on top of stack
1493+ 6AF0                              New_Def SWAP, "SWAP", is_code, is_normal
1493+ 6AF0             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1493+ 6AF0             >
1493+ 6AF0             >                // dummy db directives used to calculate length of namec
1493+ 6AF0 53 57 41 50 >                db      "SWAP"
1493+ 6AF4             >len_NFA         defl    $ - temp_NFA
1493+ 6AF4             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1493+ 6AF0             >
1493+ 6AF0 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1493+ 6AF1 53 57 41 50 >                db      "SWAP"               // name string in 7-bit ascii, but
1493+ 6AF5             >                org     $-1                 // alter last byte of Name just above to set
1493+ 6AF4 D0          >                db      {b $} | END_BIT     // msb as name end
1493+ 6AF5             >
1493+ 6AF5 E0 6A       >                dw      last_NFA            // Link to previous definition Name
1493+ 6AF7             >SWAP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1493+ 6AF7 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1493+ 6AF7             >                else
1493+ 6AF7 F9 6A       >                dw      $ + 2   ; ok        // is pointed by CFA
1493+ 6AF9             >                endif           ; ok        // for other definitions it "points" the correct handler
1493+ 6AF9             >                // Use of "; ok" to suppress "warning[fwdref]"
1493+ 6AF9             >
1493+ 6AF9             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1494+ 6AF9 E1                           pop     hl                  // < n1
1495+ 6AFA E3                           ex      (sp),hl             // > n2
1496+ 6AFB E5                           push    hl                  // copy n1 to TOS
1497+ 6AFC                              next
1497+ 6AFC DD E9       >                jp      (ix)
1498+ 6AFE
1499+ 6AFE              //  ______________________________________________________________________
1500+ 6AFE              //
1501+ 6AFE              // dup         n -- n n
1502+ 6AFE              // duplicates the top value of stack
1503+ 6AFE                              New_Def DUP, "DUP", is_code, is_normal
1503+ 6AFE             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1503+ 6AFE             >
1503+ 6AFE             >                // dummy db directives used to calculate length of namec
1503+ 6AFE 44 55 50    >                db      "DUP"
1503+ 6B01             >len_NFA         defl    $ - temp_NFA
1503+ 6B01             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1503+ 6AFE             >
1503+ 6AFE 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1503+ 6AFF 44 55 50    >                db      "DUP"               // name string in 7-bit ascii, but
1503+ 6B02             >                org     $-1                 // alter last byte of Name just above to set
1503+ 6B01 D0          >                db      {b $} | END_BIT     // msb as name end
1503+ 6B02             >
1503+ 6B02 F0 6A       >                dw      last_NFA            // Link to previous definition Name
1503+ 6B04             >DUP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1503+ 6B04 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1503+ 6B04             >                else
1503+ 6B04 06 6B       >                dw      $ + 2   ; ok        // is pointed by CFA
1503+ 6B06             >                endif           ; ok        // for other definitions it "points" the correct handler
1503+ 6B06             >                // Use of "; ok" to suppress "warning[fwdref]"
1503+ 6B06             >
1503+ 6B06             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1504+ 6B06 E1                           pop     hl
1505+ 6B07 E5                           push    hl                  // > n duplicate TOS
1506+ 6B08 E5                           push    hl
1507+ 6B09                              next
1507+ 6B09 DD E9       >                jp      (ix)
1508+ 6B0B
1509+ 6B0B              //  ______________________________________________________________________
1510+ 6B0B              //
1511+ 6B0B              // rot         n1 n2 n3 -- n2 n3 n1
1512+ 6B0B              // Rotates the 3 top values of stack by picking the 3rd in access-order
1513+ 6B0B              // and putting it on top. The other two are shifted down one place.
1514+ 6B0B                              New_Def ROT, "ROT", is_code, is_normal
1514+ 6B0B             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1514+ 6B0B             >
1514+ 6B0B             >                // dummy db directives used to calculate length of namec
1514+ 6B0B 52 4F 54    >                db      "ROT"
1514+ 6B0E             >len_NFA         defl    $ - temp_NFA
1514+ 6B0E             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1514+ 6B0B             >
1514+ 6B0B 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1514+ 6B0C 52 4F 54    >                db      "ROT"               // name string in 7-bit ascii, but
1514+ 6B0F             >                org     $-1                 // alter last byte of Name just above to set
1514+ 6B0E D4          >                db      {b $} | END_BIT     // msb as name end
1514+ 6B0F             >
1514+ 6B0F FE 6A       >                dw      last_NFA            // Link to previous definition Name
1514+ 6B11             >ROT:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1514+ 6B11 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1514+ 6B11             >                else
1514+ 6B11 13 6B       >                dw      $ + 2   ; ok        // is pointed by CFA
1514+ 6B13             >                endif           ; ok        // for other definitions it "points" the correct handler
1514+ 6B13             >                // Use of "; ok" to suppress "warning[fwdref]"
1514+ 6B13             >
1514+ 6B13             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1515+ 6B13 D1                           pop     de                  // < n3
1516+ 6B14 E1                           pop     hl                  // < n2
1517+ 6B15 E3                           ex      (sp),hl             // > n2 < n1
1518+ 6B16 D5                           push    de                  // > n3
1519+ 6B17 E5                           push    hl                  // copy n1 to TOS
1520+ 6B18                              next
1520+ 6B18 DD E9       >                jp      (ix)
1521+ 6B1A
1522+ 6B1A              //  ______________________________________________________________________
1523+ 6B1A              //
1524+ 6B1A              // -rot         n1 n2 n3 -- n3 n1 n2
1525+ 6B1A              // Rotates the 3 top values of stack by picking the 1st in access-order
1526+ 6B1A              // and putting back to 3rd place. The other two are shifted down one place.
1527+ 6B1A                              New_Def DASH_ROT, "-ROT", is_code, is_normal
1527+ 6B1A             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1527+ 6B1A             >
1527+ 6B1A             >                // dummy db directives used to calculate length of namec
1527+ 6B1A 2D 52 4F 54 >                db      "-ROT"
1527+ 6B1E             >len_NFA         defl    $ - temp_NFA
1527+ 6B1E             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1527+ 6B1A             >
1527+ 6B1A 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1527+ 6B1B 2D 52 4F 54 >                db      "-ROT"               // name string in 7-bit ascii, but
1527+ 6B1F             >                org     $-1                 // alter last byte of Name just above to set
1527+ 6B1E D4          >                db      {b $} | END_BIT     // msb as name end
1527+ 6B1F             >
1527+ 6B1F 0B 6B       >                dw      last_NFA            // Link to previous definition Name
1527+ 6B21             >DASH_ROT:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1527+ 6B21 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1527+ 6B21             >                else
1527+ 6B21 23 6B       >                dw      $ + 2   ; ok        // is pointed by CFA
1527+ 6B23             >                endif           ; ok        // for other definitions it "points" the correct handler
1527+ 6B23             >                // Use of "; ok" to suppress "warning[fwdref]"
1527+ 6B23             >
1527+ 6B23             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1528+ 6B23 E1                           pop     hl                  // < n3
1529+ 6B24 D1                           pop     de                  // < n2
1530+ 6B25 E3                           ex      (sp),hl             // > n3 < n1
1531+ 6B26 E5                           push    hl                  // > n1
1532+ 6B27 D5                           push    de                  // copy n3 to TOS
1533+ 6B28                              next
1533+ 6B28 DD E9       >                jp      (ix)
1534+ 6B2A
1535+ 6B2A              //  ______________________________________________________________________
1536+ 6B2A              //
1537+ 6B2A              // pick        n1 -- nx
1538+ 6B2A              // picks the nth element from TOS
1539+ 6B2A                              New_Def PICK, "PICK", is_code, is_normal
1539+ 6B2A             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1539+ 6B2A             >
1539+ 6B2A             >                // dummy db directives used to calculate length of namec
1539+ 6B2A 50 49 43 4B >                db      "PICK"
1539+ 6B2E             >len_NFA         defl    $ - temp_NFA
1539+ 6B2E             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1539+ 6B2A             >
1539+ 6B2A 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1539+ 6B2B 50 49 43 4B >                db      "PICK"               // name string in 7-bit ascii, but
1539+ 6B2F             >                org     $-1                 // alter last byte of Name just above to set
1539+ 6B2E CB          >                db      {b $} | END_BIT     // msb as name end
1539+ 6B2F             >
1539+ 6B2F 1A 6B       >                dw      last_NFA            // Link to previous definition Name
1539+ 6B31             >PICK:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1539+ 6B31 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1539+ 6B31             >                else
1539+ 6B31 33 6B       >                dw      $ + 2   ; ok        // is pointed by CFA
1539+ 6B33             >                endif           ; ok        // for other definitions it "points" the correct handler
1539+ 6B33             >                // Use of "; ok" to suppress "warning[fwdref]"
1539+ 6B33             >
1539+ 6B33             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1540+ 6B33 E1                           pop     hl                  // take TOS as index
1541+ 6B34 29                           add     hl, hl              // as cells
1542+ 6B35 39                           add     hl, sp              // from Stack Pointer
1543+ 6B36 7E                           ld      a, (hl)             // replace TOS
1544+ 6B37 23                           inc     hl
1545+ 6B38 66                           ld      h, (hl)
1546+ 6B39 6F                           ld      l, a
1547+ 6B3A
1548+ 6B3A                              psh1
1548+ 6B3A E5          >                push    hl
1548+ 6B3B DD E9       >                jp      (ix)
1549+ 6B3D
1550+ 6B3D
1551+ 6B3D              //  ______________________________________________________________________
1552+ 6B3D              //
1553+ 6B3D              // roll        n1 n2 n3 ... n -- n2 n3 ... n1
1554+ 6B3D              // picks the nth element from TOS
1555+ 6B3D              //              New_Def ROLL, "ROLL", is_code, is_normal
1556+ 6B3D              //              exx                     // we need all registers free
1557+ 6B3D              //              pop     hl              // number of cells to roll
1558+ 6B3D              //              ld      a, h
1559+ 6B3D              //              or       l
1560+ 6B3D              //              jr      z, Roll_Zero
1561+ 6B3D              //                  add     hl, hl              // number of bytes to move
1562+ 6B3D              //                  ld      b, h
1563+ 6B3D              //                  ld      c, l
1564+ 6B3D              //                  add     hl, sp          // address of n1
1565+ 6B3D              //                  ld      a, (hl)         // take n1 into a and a,
1566+ 6B3D              //                  inc     hl
1567+ 6B3D              //                  ex      af, af'
1568+ 6B3D              //                  ld      a, (hl)         // take n1 into a and a,
1569+ 6B3D              //                  ld      d, h
1570+ 6B3D              //                  ld      e, l
1571+ 6B3D              //                  dec     hl
1572+ 6B3D              //                  dec     hl
1573+ 6B3D              //                  lddr
1574+ 6B3D              //                  ex      de, hl
1575+ 6B3D              //                  ld      (hl), a
1576+ 6B3D              //                  dec     hl
1577+ 6B3D              //                  ex      af, af'
1578+ 6B3D              //                  ld      (hl), a
1579+ 6B3D              //Roll_Zero:
1580+ 6B3D              //              exx
1581+ 6B3D              //              next
1582+ 6B3D
1583+ 6B3D
1584+ 6B3D              //  ______________________________________________________________________
1585+ 6B3D              //
1586+ 6B3D              // 2over        d1 d2 -- d1 d2 d1
1587+ 6B3D              //              n1 n2 n3 n4 -- n1 n2 n3 n4 n1 n2
1588+ 6B3D              // copy the second double of stack and put on top.
1589+ 6B3D              //              New_Def TWO_OVER, "2OVER", is_code, is_normal
1590+ 6B3D              //
1591+ 6B3D              //              ld      hl, 7
1592+ 6B3D              //              add     hl, sp
1593+ 6B3D              //              ld      d, (hl)
1594+ 6B3D              //              dec     hl
1595+ 6B3D              //              ld      e, (hl)             // d1-L
1596+ 6B3D              //              push    de
1597+ 6B3D              //              dec     hl
1598+ 6B3D              //              ld      d, (hl)
1599+ 6B3D              //              dec     hl
1600+ 6B3D              //              ld      e, (hl)             // d1-H
1601+ 6B3D              //              push    de
1602+ 6B3D              //              next
1603+ 6B3D
1604+ 6B3D              //  ______________________________________________________________________
1605+ 6B3D              //
1606+ 6B3D              // 2drop        d --
1607+ 6B3D              //              n1 n2 --
1608+ 6B3D              // drops the top double from stack
1609+ 6B3D                              New_Def TWO_DROP, "2DROP", is_code, is_normal
1609+ 6B3D             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1609+ 6B3D             >
1609+ 6B3D             >                // dummy db directives used to calculate length of namec
1609+ 6B3D 32 44 52 4F >                db      "2DROP"
1609+ 6B41 50          >
1609+ 6B42             >len_NFA         defl    $ - temp_NFA
1609+ 6B42             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1609+ 6B3D             >
1609+ 6B3D 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1609+ 6B3E 32 44 52 4F >                db      "2DROP"               // name string in 7-bit ascii, but
1609+ 6B42 50          >
1609+ 6B43             >                org     $-1                 // alter last byte of Name just above to set
1609+ 6B42 D0          >                db      {b $} | END_BIT     // msb as name end
1609+ 6B43             >
1609+ 6B43 2A 6B       >                dw      last_NFA            // Link to previous definition Name
1609+ 6B45             >TWO_DROP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1609+ 6B45 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1609+ 6B45             >                else
1609+ 6B45 47 6B       >                dw      $ + 2   ; ok        // is pointed by CFA
1609+ 6B47             >                endif           ; ok        // for other definitions it "points" the correct handler
1609+ 6B47             >                // Use of "; ok" to suppress "warning[fwdref]"
1609+ 6B47             >
1609+ 6B47             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1610+ 6B47 E1                           pop     hl
1611+ 6B48 E1                           pop     hl
1612+ 6B49                              next
1612+ 6B49 DD E9       >                jp      (ix)
1613+ 6B4B
1614+ 6B4B              //  ______________________________________________________________________
1615+ 6B4B              //
1616+ 6B4B              // 2nip         d1 d2 -- d2
1617+ 6B4B              //              n1 n2 n3 n4 -- n3 n4
1618+ 6B4B              // drops the second double on the stack
1619+ 6B4B              //              New_Def TWO_NIP, 4, "2nip"
1620+ 6B4B              //              ...
1621+ 6B4B
1622+ 6B4B              //  ______________________________________________________________________
1623+ 6B4B              //
1624+ 6B4B              // 2tuck         d1 d2 -- d2 d1 d2
1625+ 6B4B              // copy the top element after the second.
1626+ 6B4B              //              New_Def TWO_TUCK, 5, "2tuck"
1627+ 6B4B              //              ...
1628+ 6B4B
1629+ 6B4B              //  ______________________________________________________________________
1630+ 6B4B              //
1631+ 6B4B              // 2swap         d1 d2 -- d2 d1
1632+ 6B4B              //               n1 n2 n3 n4 -- n3 n4 n1 n2
1633+ 6B4B              // swaps the two doubles on top of stack
1634+ 6B4B                              New_Def TWO_SWAP, "2SWAP", is_code, is_normal
1634+ 6B4B             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1634+ 6B4B             >
1634+ 6B4B             >                // dummy db directives used to calculate length of namec
1634+ 6B4B 32 53 57 41 >                db      "2SWAP"
1634+ 6B4F 50          >
1634+ 6B50             >len_NFA         defl    $ - temp_NFA
1634+ 6B50             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1634+ 6B4B             >
1634+ 6B4B 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1634+ 6B4C 32 53 57 41 >                db      "2SWAP"               // name string in 7-bit ascii, but
1634+ 6B50 50          >
1634+ 6B51             >                org     $-1                 // alter last byte of Name just above to set
1634+ 6B50 D0          >                db      {b $} | END_BIT     // msb as name end
1634+ 6B51             >
1634+ 6B51 3D 6B       >                dw      last_NFA            // Link to previous definition Name
1634+ 6B53             >TWO_SWAP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1634+ 6B53 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1634+ 6B53             >                else
1634+ 6B53 55 6B       >                dw      $ + 2   ; ok        // is pointed by CFA
1634+ 6B55             >                endif           ; ok        // for other definitions it "points" the correct handler
1634+ 6B55             >                // Use of "; ok" to suppress "warning[fwdref]"
1634+ 6B55             >
1634+ 6B55             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1635+ 6B55 F1                           pop     af                  //   d2-H
1636+ 6B56 E1                           pop     hl                  // < d2-L
1637+ 6B57 D1                           pop     de                  // < d1-H
1638+ 6B58 E3                           ex      (sp), hl            // < d1-L > d2-L
1639+ 6B59 F5                           push    af                  // > d2-H
1640+ 6B5A E5                           push    hl                  // > d1-L
1641+ 6B5B D5                           push    de
1642+ 6B5C
1643+ 6B5C                              next
1643+ 6B5C DD E9       >                jp      (ix)
1644+ 6B5E
1645+ 6B5E              //  ______________________________________________________________________
1646+ 6B5E              //
1647+ 6B5E              // 2dup         d -- d d
1648+ 6B5E              //              n1 n2 -- n1 n2 n1 n2
1649+ 6B5E              // duplicates the top double of stack
1650+ 6B5E                              New_Def TWO_DUP, "2DUP", is_code, is_normal
1650+ 6B5E             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1650+ 6B5E             >
1650+ 6B5E             >                // dummy db directives used to calculate length of namec
1650+ 6B5E 32 44 55 50 >                db      "2DUP"
1650+ 6B62             >len_NFA         defl    $ - temp_NFA
1650+ 6B62             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1650+ 6B5E             >
1650+ 6B5E 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1650+ 6B5F 32 44 55 50 >                db      "2DUP"               // name string in 7-bit ascii, but
1650+ 6B63             >                org     $-1                 // alter last byte of Name just above to set
1650+ 6B62 D0          >                db      {b $} | END_BIT     // msb as name end
1650+ 6B63             >
1650+ 6B63 4B 6B       >                dw      last_NFA            // Link to previous definition Name
1650+ 6B65             >TWO_DUP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1650+ 6B65 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1650+ 6B65             >                else
1650+ 6B65 67 6B       >                dw      $ + 2   ; ok        // is pointed by CFA
1650+ 6B67             >                endif           ; ok        // for other definitions it "points" the correct handler
1650+ 6B67             >                // Use of "; ok" to suppress "warning[fwdref]"
1650+ 6B67             >
1650+ 6B67             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1651+ 6B67 E1                           pop     hl                  // < d-H
1652+ 6B68 D1                           pop     de                  // < d-L
1653+ 6B69 D5                           push    de                  // < d-L
1654+ 6B6A E5                           push    hl                  // > d-H
1655+ 6B6B D5                           push    de                  // > d-L
1656+ 6B6C E5                           push    hl                  // > d-H
1657+ 6B6D                              next
1657+ 6B6D DD E9       >                jp      (ix)
1658+ 6B6F
1659+ 6B6F              //  ______________________________________________________________________
1660+ 6B6F              //
1661+ 6B6F              // 2rot         d1 d2 d3 -- d2 d3 d1
1662+ 6B6F              //              n1 n2 n3 n4 n5 n6 -- n3 n4 n5 n6 n1 n2
1663+ 6B6F              // Rotates the 3 top doubles of stack by picking the 3rd in access-order
1664+ 6B6F              // and putting it on top. The other two are shifted down one place.
1665+ 6B6F              //              New_Def TWO?ROT, 4, "2rot"
1666+ 6B6F              //              ...
1667+ 6B6F              //              New_Def TWO_ROT, "2ROT", is_code, is_normal
1668+ 6B6F              //
1669+ 6B6F              //      d3  |d2  |d1  |
1670+ 6B6F              //      h l |h l |h l |
1671+ 6B6F              // SP   LHED|LHED|LHED|
1672+ 6B6F              // SP  +0123|4567|89ab|
1673+ 6B6F              //              ld      hl, $000B
1674+ 6B6F              //              add     hl, sp
1675+ 6B6F              //              ld      d, (hl)
1676+ 6B6F              //              dec     hl
1677+ 6B6F              //              ld      e, (hl)
1678+ 6B6F              //              dec     hl
1679+ 6B6F              //              push    de
1680+ 6B6F              //              ld      d, (hl)
1681+ 6B6F              //              dec     hl
1682+ 6B6F              //              ld      e, (hl)
1683+ 6B6F              //              dec     hl
1684+ 6B6F              //              push    de
1685+ 6B6F
1686+ 6B6F              //      d1  |d3  |d2  |d1  |
1687+ 6B6F              //      h l |h l |h l |h l |
1688+ 6B6F              // SP   LHED|LHED|LHED|LHED|
1689+ 6B6F              // SP       +0123|4567|89ab|
1690+ 6B6F
1691+ 6B6F              //              ld      d, h
1692+ 6B6F              //              ld      e, l
1693+ 6B6F              //              inc     de
1694+ 6B6F              //              inc     de
1695+ 6B6F              //              inc     de
1696+ 6B6F              //              inc     de
1697+ 6B6F              //              push    bc
1698+ 6B6F              //              ld      bc, $000C
1699+ 6B6F              //              lddr
1700+ 6B6F              //              pop     bc
1701+ 6B6F              //              pop     de
1702+ 6B6F              //              pop     de
1703+ 6B6F              //
1704+ 6B6F              //              next
1705+ 6B6F
1706+ 6B6F
1707+ 6B6F              //  ______________________________________________________________________
1708+ 6B6F              //
1709+ 6B6F              // +!           n a --
1710+ 6B6F              // Sums to the content of address a the number n.
1711+ 6B6F              // It is the same of  a @ n + a !
1712+ 6B6F                              New_Def PLUSSTORE, "+!", is_code, is_normal
1712+ 6B6F             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1712+ 6B6F             >
1712+ 6B6F             >                // dummy db directives used to calculate length of namec
1712+ 6B6F 2B 21       >                db      "+!"
1712+ 6B71             >len_NFA         defl    $ - temp_NFA
1712+ 6B71             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1712+ 6B6F             >
1712+ 6B6F 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1712+ 6B70 2B 21       >                db      "+!"               // name string in 7-bit ascii, but
1712+ 6B72             >                org     $-1                 // alter last byte of Name just above to set
1712+ 6B71 A1          >                db      {b $} | END_BIT     // msb as name end
1712+ 6B72             >
1712+ 6B72 5E 6B       >                dw      last_NFA            // Link to previous definition Name
1712+ 6B74             >PLUSSTORE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1712+ 6B74 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1712+ 6B74             >                else
1712+ 6B74 76 6B       >                dw      $ + 2   ; ok        // is pointed by CFA
1712+ 6B76             >                endif           ; ok        // for other definitions it "points" the correct handler
1712+ 6B76             >                // Use of "; ok" to suppress "warning[fwdref]"
1712+ 6B76             >
1712+ 6B76             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1713+ 6B76 E1                           pop     hl                  // hl is the address
1714+ 6B77 D1                           pop     de                  // de is the number
1715+ 6B78 7E                           ld      a, (hl)
1716+ 6B79 83                           add     e
1717+ 6B7A 77                           ld      (hl), a
1718+ 6B7B 23                           inc     hl
1719+ 6B7C 7E                           ld      a, (hl)
1720+ 6B7D 8A                           adc     d
1721+ 6B7E 77                           ld      (hl), a
1722+ 6B7F
1723+ 6B7F                              next
1723+ 6B7F DD E9       >                jp      (ix)
1724+ 6B81
1725+ 6B81              //  ______________________________________________________________________
1726+ 6B81              //
1727+ 6B81              // toggle       a n --
1728+ 6B81              // Complements (xor) the byte at addrress  a  with the model n.
1729+ 6B81                              New_Def TOGGLE, "TOGGLE", is_code, is_normal
1729+ 6B81             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1729+ 6B81             >
1729+ 6B81             >                // dummy db directives used to calculate length of namec
1729+ 6B81 54 4F 47 47 >                db      "TOGGLE"
1729+ 6B85 4C 45       >
1729+ 6B87             >len_NFA         defl    $ - temp_NFA
1729+ 6B87             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1729+ 6B81             >
1729+ 6B81 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1729+ 6B82 54 4F 47 47 >                db      "TOGGLE"               // name string in 7-bit ascii, but
1729+ 6B86 4C 45       >
1729+ 6B88             >                org     $-1                 // alter last byte of Name just above to set
1729+ 6B87 C5          >                db      {b $} | END_BIT     // msb as name end
1729+ 6B88             >
1729+ 6B88 6F 6B       >                dw      last_NFA            // Link to previous definition Name
1729+ 6B8A             >TOGGLE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1729+ 6B8A ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1729+ 6B8A             >                else
1729+ 6B8A 8C 6B       >                dw      $ + 2   ; ok        // is pointed by CFA
1729+ 6B8C             >                endif           ; ok        // for other definitions it "points" the correct handler
1729+ 6B8C             >                // Use of "; ok" to suppress "warning[fwdref]"
1729+ 6B8C             >
1729+ 6B8C             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1730+ 6B8C D1                           pop     de
1731+ 6B8D E1                           pop     hl
1732+ 6B8E 7E                           ld      a, (hl)
1733+ 6B8F AB                           xor     e
1734+ 6B90 77                           ld      (hl), a
1735+ 6B91
1736+ 6B91                              next
1736+ 6B91 DD E9       >                jp      (ix)
1737+ 6B93
1738+ 6B93              //  ______________________________________________________________________
1739+ 6B93              //
1740+ 6B93              // @            a -- n
1741+ 6B93              // fetch 16 bit number n from address a. Z80 keeps high byte is in high memory
1742+ 6B93                              New_Def FETCH, "@", is_code, is_normal
1742+ 6B93             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1742+ 6B93             >
1742+ 6B93             >                // dummy db directives used to calculate length of namec
1742+ 6B93 40          >                db      "@"
1742+ 6B94             >len_NFA         defl    $ - temp_NFA
1742+ 6B94             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1742+ 6B93             >
1742+ 6B93 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1742+ 6B94 40          >                db      "@"               // name string in 7-bit ascii, but
1742+ 6B95             >                org     $-1                 // alter last byte of Name just above to set
1742+ 6B94 C0          >                db      {b $} | END_BIT     // msb as name end
1742+ 6B95             >
1742+ 6B95 81 6B       >                dw      last_NFA            // Link to previous definition Name
1742+ 6B97             >FETCH:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1742+ 6B97 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1742+ 6B97             >                else
1742+ 6B97 99 6B       >                dw      $ + 2   ; ok        // is pointed by CFA
1742+ 6B99             >                endif           ; ok        // for other definitions it "points" the correct handler
1742+ 6B99             >                // Use of "; ok" to suppress "warning[fwdref]"
1742+ 6B99             >
1742+ 6B99             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1743+ 6B99 E1                           pop     hl
1744+ 6B9A 5E                           ld      e, (hl)             // low-byte
1745+ 6B9B 23                           inc     hl
1746+ 6B9C 56                           ld      d, (hl)             // high-byte
1747+ 6B9D D5                           push    de
1748+ 6B9E                              next
1748+ 6B9E DD E9       >                jp      (ix)
1749+ 6BA0
1750+ 6BA0              //  ______________________________________________________________________
1751+ 6BA0              //
1752+ 6BA0              // !            n a --
1753+ 6BA0              // store 16 bit number n from address a. Z80 keeps high byte is in high memory
1754+ 6BA0                              New_Def STORE, "!", is_code, is_normal
1754+ 6BA0             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1754+ 6BA0             >
1754+ 6BA0             >                // dummy db directives used to calculate length of namec
1754+ 6BA0 21          >                db      "!"
1754+ 6BA1             >len_NFA         defl    $ - temp_NFA
1754+ 6BA1             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1754+ 6BA0             >
1754+ 6BA0 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1754+ 6BA1 21          >                db      "!"               // name string in 7-bit ascii, but
1754+ 6BA2             >                org     $-1                 // alter last byte of Name just above to set
1754+ 6BA1 A1          >                db      {b $} | END_BIT     // msb as name end
1754+ 6BA2             >
1754+ 6BA2 93 6B       >                dw      last_NFA            // Link to previous definition Name
1754+ 6BA4             >STORE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1754+ 6BA4 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1754+ 6BA4             >                else
1754+ 6BA4 A6 6B       >                dw      $ + 2   ; ok        // is pointed by CFA
1754+ 6BA6             >                endif           ; ok        // for other definitions it "points" the correct handler
1754+ 6BA6             >                // Use of "; ok" to suppress "warning[fwdref]"
1754+ 6BA6             >
1754+ 6BA6             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1755+ 6BA6 E1                           pop     hl                  // address
1756+ 6BA7 D1                           pop     de                  // < n
1757+ 6BA8 73                           ld      (hl), e             // low-byte
1758+ 6BA9 23                           inc     hl
1759+ 6BAA 72                           ld      (hl), d             // high-byte
1760+ 6BAB
1761+ 6BAB                              next
1761+ 6BAB DD E9       >                jp      (ix)
1762+ 6BAD
1763+ 6BAD              //  ______________________________________________________________________
1764+ 6BAD              //
1765+ 6BAD              // c@           a -- c
1766+ 6BAD              // fetch a character n from address a
1767+ 6BAD                              New_Def CFETCH, "C@", is_code, is_normal
1767+ 6BAD             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1767+ 6BAD             >
1767+ 6BAD             >                // dummy db directives used to calculate length of namec
1767+ 6BAD 43 40       >                db      "C@"
1767+ 6BAF             >len_NFA         defl    $ - temp_NFA
1767+ 6BAF             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1767+ 6BAD             >
1767+ 6BAD 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1767+ 6BAE 43 40       >                db      "C@"               // name string in 7-bit ascii, but
1767+ 6BB0             >                org     $-1                 // alter last byte of Name just above to set
1767+ 6BAF C0          >                db      {b $} | END_BIT     // msb as name end
1767+ 6BB0             >
1767+ 6BB0 A0 6B       >                dw      last_NFA            // Link to previous definition Name
1767+ 6BB2             >CFETCH:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1767+ 6BB2 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1767+ 6BB2             >                else
1767+ 6BB2 B4 6B       >                dw      $ + 2   ; ok        // is pointed by CFA
1767+ 6BB4             >                endif           ; ok        // for other definitions it "points" the correct handler
1767+ 6BB4             >                // Use of "; ok" to suppress "warning[fwdref]"
1767+ 6BB4             >
1767+ 6BB4             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1768+ 6BB4 E1                           pop     hl
1769+ 6BB5 6E                           ld      l, (hl)             // low-byte
1770+ 6BB6 26 00                        ld      h, 0
1771+ 6BB8
1772+ 6BB8                              psh1
1772+ 6BB8 E5          >                push    hl
1772+ 6BB9 DD E9       >                jp      (ix)
1773+ 6BBB
1774+ 6BBB              //  ______________________________________________________________________
1775+ 6BBB              //
1776+ 6BBB              // c!           c a --
1777+ 6BBB              // fetch 16 bit number n from address a. Z80 keeps high byte is in high memory
1778+ 6BBB                              New_Def CSTORE, "C!", is_code, is_normal
1778+ 6BBB             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1778+ 6BBB             >
1778+ 6BBB             >                // dummy db directives used to calculate length of namec
1778+ 6BBB 43 21       >                db      "C!"
1778+ 6BBD             >len_NFA         defl    $ - temp_NFA
1778+ 6BBD             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1778+ 6BBB             >
1778+ 6BBB 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1778+ 6BBC 43 21       >                db      "C!"               // name string in 7-bit ascii, but
1778+ 6BBE             >                org     $-1                 // alter last byte of Name just above to set
1778+ 6BBD A1          >                db      {b $} | END_BIT     // msb as name end
1778+ 6BBE             >
1778+ 6BBE AD 6B       >                dw      last_NFA            // Link to previous definition Name
1778+ 6BC0             >CSTORE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1778+ 6BC0 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1778+ 6BC0             >                else
1778+ 6BC0 C2 6B       >                dw      $ + 2   ; ok        // is pointed by CFA
1778+ 6BC2             >                endif           ; ok        // for other definitions it "points" the correct handler
1778+ 6BC2             >                // Use of "; ok" to suppress "warning[fwdref]"
1778+ 6BC2             >
1778+ 6BC2             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1779+ 6BC2 E1                           pop     hl                  // < address
1780+ 6BC3 D1                           pop     de
1781+ 6BC4 73                           ld      (hl), e             // low-byte
1782+ 6BC5
1783+ 6BC5                              next
1783+ 6BC5 DD E9       >                jp      (ix)
1784+ 6BC7
1785+ 6BC7              //  ______________________________________________________________________
1786+ 6BC7              //
1787+ 6BC7              // 2@           a -- d
1788+ 6BC7              // fetch a 32 bits number d from address a and leaves it on top of the
1789+ 6BC7              // stack as two single numbers, high part as top of the stack.
1790+ 6BC7              // A double number is normally kept in CPU registers as HLDE.
1791+ 6BC7              // On stack a double number is treated as two single numbers
1792+ 6BC7              // where BC is on the top of the stack and HL is the second from top,
1793+ 6BC7              // so the sign of the number can be checked on top of stack
1794+ 6BC7              // and in the stack memory it appears as LHED.
1795+ 6BC7                              New_Def TWO_FETCH, "2@", is_code, is_normal
1795+ 6BC7             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1795+ 6BC7             >
1795+ 6BC7             >                // dummy db directives used to calculate length of namec
1795+ 6BC7 32 40       >                db      "2@"
1795+ 6BC9             >len_NFA         defl    $ - temp_NFA
1795+ 6BC9             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1795+ 6BC7             >
1795+ 6BC7 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1795+ 6BC8 32 40       >                db      "2@"               // name string in 7-bit ascii, but
1795+ 6BCA             >                org     $-1                 // alter last byte of Name just above to set
1795+ 6BC9 C0          >                db      {b $} | END_BIT     // msb as name end
1795+ 6BCA             >
1795+ 6BCA BB 6B       >                dw      last_NFA            // Link to previous definition Name
1795+ 6BCC             >TWO_FETCH:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1795+ 6BCC ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1795+ 6BCC             >                else
1795+ 6BCC CE 6B       >                dw      $ + 2   ; ok        // is pointed by CFA
1795+ 6BCE             >                endif           ; ok        // for other definitions it "points" the correct handler
1795+ 6BCE             >                // Use of "; ok" to suppress "warning[fwdref]"
1795+ 6BCE             >
1795+ 6BCE             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1796+ 6BCE E1                           pop     hl                  // address
1797+ 6BCF 5E                           ld      e, (hl)             // low-byte
1798+ 6BD0 23                           inc     hl
1799+ 6BD1 56                           ld      d, (hl)             // high-byte
1800+ 6BD2
1801+ 6BD2 23                           inc     hl
1802+ 6BD3 7E                           ld      a, (hl)             // low-byte
1803+ 6BD4 23                           inc     hl
1804+ 6BD5 66                           ld      h, (hl)             // high-byte
1805+ 6BD6 6F                           ld      l, a
1806+ 6BD7 E5                           push    hl
1807+ 6BD8 D5                           push    de
1808+ 6BD9                              next
1808+ 6BD9 DD E9       >                jp      (ix)
1809+ 6BDB
1810+ 6BDB              //  ______________________________________________________________________
1811+ 6BDB              //
1812+ 6BDB              // 2!           d a --
1813+ 6BDB              // stores a 32 bits number d from address a and leaves it on top of the
1814+ 6BDB              // stack as two single numbers, high part as top of the stack.
1815+ 6BDB              // A double number is normally kept in CPU registers as HLDE.
1816+ 6BDB              // On stack a double number is treated as two single numbers
1817+ 6BDB              // where BC is on the top of the stack and HL is the second from top,
1818+ 6BDB              // so the sign of the number can be checked on top of stack
1819+ 6BDB              // and in the stack memory it appears as LHED.
1820+ 6BDB                              New_Def TWO_STORE, "2!", is_code, is_normal
1820+ 6BDB             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1820+ 6BDB             >
1820+ 6BDB             >                // dummy db directives used to calculate length of namec
1820+ 6BDB 32 21       >                db      "2!"
1820+ 6BDD             >len_NFA         defl    $ - temp_NFA
1820+ 6BDD             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1820+ 6BDB             >
1820+ 6BDB 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1820+ 6BDC 32 21       >                db      "2!"               // name string in 7-bit ascii, but
1820+ 6BDE             >                org     $-1                 // alter last byte of Name just above to set
1820+ 6BDD A1          >                db      {b $} | END_BIT     // msb as name end
1820+ 6BDE             >
1820+ 6BDE C7 6B       >                dw      last_NFA            // Link to previous definition Name
1820+ 6BE0             >TWO_STORE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1820+ 6BE0 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1820+ 6BE0             >                else
1820+ 6BE0 E2 6B       >                dw      $ + 2   ; ok        // is pointed by CFA
1820+ 6BE2             >                endif           ; ok        // for other definitions it "points" the correct handler
1820+ 6BE2             >                // Use of "; ok" to suppress "warning[fwdref]"
1820+ 6BE2             >
1820+ 6BE2             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1821+ 6BE2 D9                           exx
1822+ 6BE3 E1                           pop     hl                  // address
1823+ 6BE4 C1                           pop     bc                  // < high-part
1824+ 6BE5 D1                           pop     de                  // < low-part > Instruction Pointer
1825+ 6BE6 71                           ld      (hl), c
1826+ 6BE7 23                           inc     hl
1827+ 6BE8 70                           ld      (hl), b
1828+ 6BE9 23                           inc     hl
1829+ 6BEA 73                           ld      (hl), e
1830+ 6BEB 23                           inc     hl
1831+ 6BEC 72                           ld      (hl), d
1832+ 6BED D9                           exx
1833+ 6BEE                              next
1833+ 6BEE DD E9       >                jp      (ix)
1834+ 6BF0
1835+ 6BF0              //  ______________________________________________________________________
1836+ 6BF0              //
1837+ 6BF0              // p@           a -- c
1838+ 6BF0              // Read one byte from port a and leave the result on top of stack
1839+ 6BF0                              New_Def PFETCH, "P@", is_code, is_normal
1839+ 6BF0             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1839+ 6BF0             >
1839+ 6BF0             >                // dummy db directives used to calculate length of namec
1839+ 6BF0 50 40       >                db      "P@"
1839+ 6BF2             >len_NFA         defl    $ - temp_NFA
1839+ 6BF2             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1839+ 6BF0             >
1839+ 6BF0 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1839+ 6BF1 50 40       >                db      "P@"               // name string in 7-bit ascii, but
1839+ 6BF3             >                org     $-1                 // alter last byte of Name just above to set
1839+ 6BF2 C0          >                db      {b $} | END_BIT     // msb as name end
1839+ 6BF3             >
1839+ 6BF3 DB 6B       >                dw      last_NFA            // Link to previous definition Name
1839+ 6BF5             >PFETCH:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1839+ 6BF5 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1839+ 6BF5             >                else
1839+ 6BF5 F7 6B       >                dw      $ + 2   ; ok        // is pointed by CFA
1839+ 6BF7             >                endif           ; ok        // for other definitions it "points" the correct handler
1839+ 6BF7             >                // Use of "; ok" to suppress "warning[fwdref]"
1839+ 6BF7             >
1839+ 6BF7             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1840+ 6BF7 D9                           exx
1841+ 6BF8 C1                           pop     bc
1842+ 6BF9 26 00                        ld      h, 0
1843+ 6BFB ED 68                        in      l, (c)
1844+ 6BFD E5                           push    hl
1845+ 6BFE D9                           exx
1846+ 6BFF                              next
1846+ 6BFF DD E9       >                jp      (ix)
1847+ 6C01
1848+ 6C01              //  ______________________________________________________________________
1849+ 6C01              //
1850+ 6C01              // p!           c a --
1851+ 6C01              // Send one byte (top of stack) to port a
1852+ 6C01                              New_Def PSTORE, "P!", is_code, is_normal
1852+ 6C01             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1852+ 6C01             >
1852+ 6C01             >                // dummy db directives used to calculate length of namec
1852+ 6C01 50 21       >                db      "P!"
1852+ 6C03             >len_NFA         defl    $ - temp_NFA
1852+ 6C03             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1852+ 6C01             >
1852+ 6C01 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1852+ 6C02 50 21       >                db      "P!"               // name string in 7-bit ascii, but
1852+ 6C04             >                org     $-1                 // alter last byte of Name just above to set
1852+ 6C03 A1          >                db      {b $} | END_BIT     // msb as name end
1852+ 6C04             >
1852+ 6C04 F0 6B       >                dw      last_NFA            // Link to previous definition Name
1852+ 6C06             >PSTORE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1852+ 6C06 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1852+ 6C06             >                else
1852+ 6C06 08 6C       >                dw      $ + 2   ; ok        // is pointed by CFA
1852+ 6C08             >                endif           ; ok        // for other definitions it "points" the correct handler
1852+ 6C08             >                // Use of "; ok" to suppress "warning[fwdref]"
1852+ 6C08             >
1852+ 6C08             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1853+ 6C08 D9                           exx
1854+ 6C09 C1                           pop     bc
1855+ 6C0A E1                           pop     hl                  // < c
1856+ 6C0B ED 69                        out     (c), l              // low-byte
1857+ 6C0D D9                           exx
1858+ 6C0E                              next
1858+ 6C0E DD E9       >                jp      (ix)
1859+ 6C10
1860+ 6C10
1861+ 6C10              //  ______________________________________________________________________
1862+ 6C10              //
1863+ 6C10              // 2*           n1 -- n2
1864+ 6C10              // doubles the number at top of stack
1865+ 6C10                              New_Def TWO_MUL, "2*", is_code, is_normal
1865+ 6C10             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1865+ 6C10             >
1865+ 6C10             >                // dummy db directives used to calculate length of namec
1865+ 6C10 32 2A       >                db      "2*"
1865+ 6C12             >len_NFA         defl    $ - temp_NFA
1865+ 6C12             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1865+ 6C10             >
1865+ 6C10 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1865+ 6C11 32 2A       >                db      "2*"               // name string in 7-bit ascii, but
1865+ 6C13             >                org     $-1                 // alter last byte of Name just above to set
1865+ 6C12 AA          >                db      {b $} | END_BIT     // msb as name end
1865+ 6C13             >
1865+ 6C13 01 6C       >                dw      last_NFA            // Link to previous definition Name
1865+ 6C15             >TWO_MUL:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1865+ 6C15 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1865+ 6C15             >                else
1865+ 6C15 17 6C       >                dw      $ + 2   ; ok        // is pointed by CFA
1865+ 6C17             >                endif           ; ok        // for other definitions it "points" the correct handler
1865+ 6C17             >                // Use of "; ok" to suppress "warning[fwdref]"
1865+ 6C17             >
1865+ 6C17             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1866+ 6C17              Two_Mul_Ptr:
1867+ 6C17 E1                           pop     hl
1868+ 6C18 29                           add     hl, hl
1869+ 6C19
1870+ 6C19                              psh1
1870+ 6C19 E5          >                push    hl
1870+ 6C1A DD E9       >                jp      (ix)
1871+ 6C1C
1872+ 6C1C              //  ______________________________________________________________________
1873+ 6C1C              //
1874+ 6C1C              // 2/           n1 -- n2
1875+ 6C1C              // halves the top of stack, sign is unchanged
1876+ 6C1C                              New_Def TWO_DIV, "2/", is_code, is_normal
1876+ 6C1C             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1876+ 6C1C             >
1876+ 6C1C             >                // dummy db directives used to calculate length of namec
1876+ 6C1C 32 2F       >                db      "2/"
1876+ 6C1E             >len_NFA         defl    $ - temp_NFA
1876+ 6C1E             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1876+ 6C1C             >
1876+ 6C1C 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1876+ 6C1D 32 2F       >                db      "2/"               // name string in 7-bit ascii, but
1876+ 6C1F             >                org     $-1                 // alter last byte of Name just above to set
1876+ 6C1E AF          >                db      {b $} | END_BIT     // msb as name end
1876+ 6C1F             >
1876+ 6C1F 10 6C       >                dw      last_NFA            // Link to previous definition Name
1876+ 6C21             >TWO_DIV:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1876+ 6C21 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1876+ 6C21             >                else
1876+ 6C21 23 6C       >                dw      $ + 2   ; ok        // is pointed by CFA
1876+ 6C23             >                endif           ; ok        // for other definitions it "points" the correct handler
1876+ 6C23             >                // Use of "; ok" to suppress "warning[fwdref]"
1876+ 6C23             >
1876+ 6C23             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1877+ 6C23 E1                           pop     hl
1878+ 6C24 CB 2C                        sra     h
1879+ 6C26 CB 1D                        rr      l
1880+ 6C28
1881+ 6C28                              psh1
1881+ 6C28 E5          >                push    hl
1881+ 6C29 DD E9       >                jp      (ix)
1882+ 6C2B
1883+ 6C2B              //  ______________________________________________________________________
1884+ 6C2B              //
1885+ 6C2B              // lshift       n1 u -- n2
1886+ 6C2B              // bit left shift of u bits
1887+ 6C2B                              New_Def LSHIFT, "LSHIFT", is_code, is_normal
1887+ 6C2B             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1887+ 6C2B             >
1887+ 6C2B             >                // dummy db directives used to calculate length of namec
1887+ 6C2B 4C 53 48 49 >                db      "LSHIFT"
1887+ 6C2F 46 54       >
1887+ 6C31             >len_NFA         defl    $ - temp_NFA
1887+ 6C31             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1887+ 6C2B             >
1887+ 6C2B 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1887+ 6C2C 4C 53 48 49 >                db      "LSHIFT"               // name string in 7-bit ascii, but
1887+ 6C30 46 54       >
1887+ 6C32             >                org     $-1                 // alter last byte of Name just above to set
1887+ 6C31 D4          >                db      {b $} | END_BIT     // msb as name end
1887+ 6C32             >
1887+ 6C32 1C 6C       >                dw      last_NFA            // Link to previous definition Name
1887+ 6C34             >LSHIFT:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1887+ 6C34 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1887+ 6C34             >                else
1887+ 6C34 36 6C       >                dw      $ + 2   ; ok        // is pointed by CFA
1887+ 6C36             >                endif           ; ok        // for other definitions it "points" the correct handler
1887+ 6C36             >                // Use of "; ok" to suppress "warning[fwdref]"
1887+ 6C36             >
1887+ 6C36             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1888+ 6C36 D9                           exx
1889+ 6C37 C1                           pop     bc
1890+ 6C38 41                           ld      b, c
1891+ 6C39 D1                           pop     de
1892+ 6C3A ED 28                        bsla    de, b
1893+ 6C3C D5                           push    de
1894+ 6C3D D9                           exx
1895+ 6C3E                              next
1895+ 6C3E DD E9       >                jp      (ix)
1896+ 6C40
1897+ 6C40              //  ______________________________________________________________________
1898+ 6C40              //
1899+ 6C40              // rshift       n1 u -- n2
1900+ 6C40              // bit right shift of u bits
1901+ 6C40                              New_Def RSHIFT, "RSHIFT", is_code, is_normal
1901+ 6C40             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1901+ 6C40             >
1901+ 6C40             >                // dummy db directives used to calculate length of namec
1901+ 6C40 52 53 48 49 >                db      "RSHIFT"
1901+ 6C44 46 54       >
1901+ 6C46             >len_NFA         defl    $ - temp_NFA
1901+ 6C46             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1901+ 6C40             >
1901+ 6C40 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1901+ 6C41 52 53 48 49 >                db      "RSHIFT"               // name string in 7-bit ascii, but
1901+ 6C45 46 54       >
1901+ 6C47             >                org     $-1                 // alter last byte of Name just above to set
1901+ 6C46 D4          >                db      {b $} | END_BIT     // msb as name end
1901+ 6C47             >
1901+ 6C47 2B 6C       >                dw      last_NFA            // Link to previous definition Name
1901+ 6C49             >RSHIFT:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1901+ 6C49 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1901+ 6C49             >                else
1901+ 6C49 4B 6C       >                dw      $ + 2   ; ok        // is pointed by CFA
1901+ 6C4B             >                endif           ; ok        // for other definitions it "points" the correct handler
1901+ 6C4B             >                // Use of "; ok" to suppress "warning[fwdref]"
1901+ 6C4B             >
1901+ 6C4B             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1902+ 6C4B D9                           exx
1903+ 6C4C C1                           pop     bc
1904+ 6C4D 41                           ld      b, c
1905+ 6C4E D1                           pop     de
1906+ 6C4F ED 2A                        bsrl    de, b
1907+ 6C51 D5                           push    de
1908+ 6C52 D9                           exx
1909+ 6C53                              next
1909+ 6C53 DD E9       >                jp      (ix)
1910+ 6C55
1911+ 6C55              //  ______________________________________________________________________
1912+ 6C55              //
1913+ 6C55              // cells        n1 -- n2
1914+ 6C55              // decrement by 2 top of stack
1915+ 6C55                              New_Def CELLS, "CELLS", Two_Mul_Ptr, is_normal
1915+ 6C55             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1915+ 6C55             >
1915+ 6C55             >                // dummy db directives used to calculate length of namec
1915+ 6C55 43 45 4C 4C >                db      "CELLS"
1915+ 6C59 53          >
1915+ 6C5A             >len_NFA         defl    $ - temp_NFA
1915+ 6C5A             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1915+ 6C55             >
1915+ 6C55 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1915+ 6C56 43 45 4C 4C >                db      "CELLS"               // name string in 7-bit ascii, but
1915+ 6C5A 53          >
1915+ 6C5B             >                org     $-1                 // alter last byte of Name just above to set
1915+ 6C5A D3          >                db      {b $} | END_BIT     // msb as name end
1915+ 6C5B             >
1915+ 6C5B 40 6C       >                dw      last_NFA            // Link to previous definition Name
1915+ 6C5D             >CELLS:          if Two_Mul_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1915+ 6C5D 17 6C       >                dw      Two_Mul_Ptr ; ok        // for primitive definitions  actual code
1915+ 6C5F             >                else
1915+ 6C5F ~           >                dw      $ + 2   ; ok        // is pointed by CFA
1915+ 6C5F             >                endif           ; ok        // for other definitions it "points" the correct handler
1915+ 6C5F             >                // Use of "; ok" to suppress "warning[fwdref]"
1915+ 6C5F             >
1915+ 6C5F             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1916+ 6C5F
1917+ 6C5F
1918+ 6C5F              //  ______________________________________________________________________
1919+ 6C5F
# file closed: C:\Zx\CSpect\Projects\vForth15_INDIRECT/source/L0.asm
 110  6C5F                              include "L1.asm"
# file opened: C:\Zx\CSpect\Projects\vForth15_INDIRECT/source/L1.asm
   1+ 6C5F              //  ______________________________________________________________________
   2+ 6C5F              //
   3+ 6C5F              //  L1.asm
   4+ 6C5F              //
   5+ 6C5F              //  Level-1 definitions and derivate
   6+ 6C5F              //  ______________________________________________________________________
   7+ 6C5F
   8+ 6C5F              //  ______________________________________________________________________
   9+ 6C5F              //
  10+ 6C5F              // :            -- cccc     ( compile time )
  11+ 6C5F              //              i*x -- j*x  ( run time )
  12+ 6C5F              // Colon Definition
  13+ 6C5F                              Colon_Def COLON, ":", is_normal      // has forward-ref
  13+ 6C5F             >                New_Def  COLON, ":", Enter_Ptr, is_normal ; ok
  13+ 6C5F             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  13+ 6C5F             >
  13+ 6C5F             >                // dummy db directives used to calculate length of namec
  13+ 6C5F 3A          >                db      ":"
  13+ 6C60             >len_NFA         defl    $ - temp_NFA
  13+ 6C60             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  13+ 6C5F             >
  13+ 6C5F 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  13+ 6C60 3A          >                db      ":"               // name string in 7-bit ascii, but
  13+ 6C61             >                org     $-1                 // alter last byte of Name just above to set
  13+ 6C60 BA          >                db      {b $} | END_BIT     // msb as name end
  13+ 6C61             >
  13+ 6C61 55 6C       >                dw      last_NFA            // Link to previous definition Name
  13+ 6C63             >COLON:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
  13+ 6C63 79 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
  13+ 6C65             >                else
  13+ 6C65 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
  13+ 6C65             >                endif           ; ok        // for other definitions it "points" the correct handler
  13+ 6C65             >                // Use of "; ok" to suppress "warning[fwdref]"
  13+ 6C65             >
  13+ 6C65             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  14+ 6C65
  15+ 6C65 C1 70                        dw      QEXEC                   // ?exec
  16+ 6C67 7C 70                        dw      STORE_CSP               // !csp
  17+ 6C69 34 6E 97 6B                  dw      CURRENT, FETCH          // current @
  18+ 6C6D 27 6E A4 6B                  dw      CONTEXT, STORE          // context !
  19+ 6C71 BC 76                        dw      CREATE                  // create  ( forward )
  20+ 6C73 6E 71                        dw      SMUDGE                  // dmudge
  21+ 6C75 59 71                        dw      SQUARED_CLOSE           // ]
  22+ 6C77 C4 71                        dw      C_SEMICOLON_CODE        // ;code ( change the 3-bytes CFA of defining word to call Enter_Ptr )
  23+ 6C79                                                              // ... immediate
  24+ 6C79              Enter_Ptr:
  25+ 6C79                              // via call coded in CFA
  26+ 6C79                              ldhlrp
  26+ 6C79 2A 96 63    >                ld      hl,(RP_Pointer)
  27+ 6C7C 2B                           dec     hl                  // push on Return-Stack current Instruction-Pointer
  28+ 6C7D 70                           ld      (hl), b
  29+ 6C7E 2B                           dec     hl
  30+ 6C7F 71                           ld      (hl), c
  31+ 6C80                              ldrphl
  31+ 6C80 22 96 63    >                ld      (RP_Pointer),hl
  32+ 6C83 13                           inc     de
  33+ 6C84 4B                           ld      c, e
  34+ 6C85 42                           ld      b, d
  35+ 6C86                              next
  35+ 6C86 DD E9       >                jp      (ix)
  36+ 6C88
  37+ 6C88              //  ______________________________________________________________________
  38+ 6C88              //
  39+ 6C88              // ;            --
  40+ 6C88              // Semicolon. End of Colon-Definition. Stack must be balanced.
  41+ 6C88                              Colon_Def SEMICOLON, ";", is_immediate   // has forward-ref
  41+ 6C88             >                New_Def  SEMICOLON, ";", Enter_Ptr, is_immediate ; ok
  41+ 6C88             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  41+ 6C88             >
  41+ 6C88             >                // dummy db directives used to calculate length of namec
  41+ 6C88 3B          >                db      ";"
  41+ 6C89             >len_NFA         defl    $ - temp_NFA
  41+ 6C89             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  41+ 6C88             >
  41+ 6C88 C1          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
  41+ 6C89 3B          >                db      ";"               // name string in 7-bit ascii, but
  41+ 6C8A             >                org     $-1                 // alter last byte of Name just above to set
  41+ 6C89 BB          >                db      {b $} | END_BIT     // msb as name end
  41+ 6C8A             >
  41+ 6C8A 5F 6C       >                dw      last_NFA            // Link to previous definition Name
  41+ 6C8C             >SEMICOLON:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
  41+ 6C8C 79 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
  41+ 6C8E             >                else
  41+ 6C8E ~           >                dw      $ + 2   ; ok        // is pointed by CFA
  41+ 6C8E             >                endif           ; ok        // for other definitions it "points" the correct handler
  41+ 6C8E             >                // Use of "; ok" to suppress "warning[fwdref]"
  41+ 6C8E             >
  41+ 6C8E             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  42+ 6C8E
  43+ 6C8E EB 70                        dw      QCSP                    // ?csp
  44+ 6C90 22 71 A3 69                  dw      COMPILE, EXIT           // [compile] ;s
  45+ 6C94 6E 71                        dw      SMUDGE                  // smudge
  46+ 6C96 4B 71                        dw      SQUARED_OPEN            // [
  47+ 6C98 A3 69                        dw      EXIT                    // ; immediate
  48+ 6C9A
  49+ 6C9A              //  ______________________________________________________________________
  50+ 6C9A              //
  51+ 6C9A              // noop         --
  52+ 6C9A                              New_Def NOOP, "NOOP", is_code, is_normal
  52+ 6C9A             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  52+ 6C9A             >
  52+ 6C9A             >                // dummy db directives used to calculate length of namec
  52+ 6C9A 4E 4F 4F 50 >                db      "NOOP"
  52+ 6C9E             >len_NFA         defl    $ - temp_NFA
  52+ 6C9E             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  52+ 6C9A             >
  52+ 6C9A 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  52+ 6C9B 4E 4F 4F 50 >                db      "NOOP"               // name string in 7-bit ascii, but
  52+ 6C9F             >                org     $-1                 // alter last byte of Name just above to set
  52+ 6C9E D0          >                db      {b $} | END_BIT     // msb as name end
  52+ 6C9F             >
  52+ 6C9F 88 6C       >                dw      last_NFA            // Link to previous definition Name
  52+ 6CA1             >NOOP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
  52+ 6CA1 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
  52+ 6CA1             >                else
  52+ 6CA1 A3 6C       >                dw      $ + 2   ; ok        // is pointed by CFA
  52+ 6CA3             >                endif           ; ok        // for other definitions it "points" the correct handler
  52+ 6CA3             >                // Use of "; ok" to suppress "warning[fwdref]"
  52+ 6CA3             >
  52+ 6CA3             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  53+ 6CA3                              next
  53+ 6CA3 DD E9       >                jp      (ix)
  54+ 6CA5
  55+ 6CA5              //  ______________________________________________________________________
  56+ 6CA5              //
  57+ 6CA5              // constant     n -- cccc     ( compile time )
  58+ 6CA5              //              -- n          ( run time )
  59+ 6CA5              // Constant definition.
  60+ 6CA5                              Colon_Def CONSTANT, "CONSTANT", is_normal   // has forward-ref
  60+ 6CA5             >                New_Def  CONSTANT, "CONSTANT", Enter_Ptr, is_normal ; ok
  60+ 6CA5             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  60+ 6CA5             >
  60+ 6CA5             >                // dummy db directives used to calculate length of namec
  60+ 6CA5 43 4F 4E 53 >                db      "CONSTANT"
  60+ 6CA9 54 41 4E 54 >
  60+ 6CAD             >len_NFA         defl    $ - temp_NFA
  60+ 6CAD             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  60+ 6CA5             >
  60+ 6CA5 88          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  60+ 6CA6 43 4F 4E 53 >                db      "CONSTANT"               // name string in 7-bit ascii, but
  60+ 6CAA 54 41 4E 54 >
  60+ 6CAE             >                org     $-1                 // alter last byte of Name just above to set
  60+ 6CAD D4          >                db      {b $} | END_BIT     // msb as name end
  60+ 6CAE             >
  60+ 6CAE 9A 6C       >                dw      last_NFA            // Link to previous definition Name
  60+ 6CB0             >CONSTANT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
  60+ 6CB0 79 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
  60+ 6CB2             >                else
  60+ 6CB2 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
  60+ 6CB2             >                endif           ; ok        // for other definitions it "points" the correct handler
  60+ 6CB2             >                // Use of "; ok" to suppress "warning[fwdref]"
  60+ 6CB2             >
  60+ 6CB2             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  61+ 6CB2
  62+ 6CB2 BC 76                        dw      CREATE                  // create
  63+ 6CB4 EF 6E                        dw      COMMA                   // ,    ( at PFA then, store the value )
  64+ 6CB6 C4 71                        dw      C_SEMICOLON_CODE        // ;code (  changes the 3-bytes CFA to call Constant_Ptr )
  65+ 6CB8              Constant_Ptr:
  66+ 6CB8
  67+ 6CB8 13                           inc     de
  68+ 6CB9 EB                           ex      de, hl
  69+ 6CBA
  70+ 6CBA 5E                           ld      e, (hl)
  71+ 6CBB 23                           inc     hl
  72+ 6CBC 56                           ld      d, (hl)
  73+ 6CBD D5                           push    de
  74+ 6CBE                              next
  74+ 6CBE DD E9       >                jp      (ix)
  75+ 6CC0
  76+ 6CC0              //  ______________________________________________________________________
  77+ 6CC0              //
  78+ 6CC0              // variable     n -- cccc     ( compile time )
  79+ 6CC0              //              -- a          ( run time )
  80+ 6CC0              // Variable definition, n is the initial value.
  81+ 6CC0                              Colon_Def VARIABLE, "VARIABLE", is_normal   // has forward-ref
  81+ 6CC0             >                New_Def  VARIABLE, "VARIABLE", Enter_Ptr, is_normal ; ok
  81+ 6CC0             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  81+ 6CC0             >
  81+ 6CC0             >                // dummy db directives used to calculate length of namec
  81+ 6CC0 56 41 52 49 >                db      "VARIABLE"
  81+ 6CC4 41 42 4C 45 >
  81+ 6CC8             >len_NFA         defl    $ - temp_NFA
  81+ 6CC8             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  81+ 6CC0             >
  81+ 6CC0 88          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  81+ 6CC1 56 41 52 49 >                db      "VARIABLE"               // name string in 7-bit ascii, but
  81+ 6CC5 41 42 4C 45 >
  81+ 6CC9             >                org     $-1                 // alter last byte of Name just above to set
  81+ 6CC8 C5          >                db      {b $} | END_BIT     // msb as name end
  81+ 6CC9             >
  81+ 6CC9 A5 6C       >                dw      last_NFA            // Link to previous definition Name
  81+ 6CCB             >VARIABLE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
  81+ 6CCB 79 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
  81+ 6CCD             >                else
  81+ 6CCD ~           >                dw      $ + 2   ; ok        // is pointed by CFA
  81+ 6CCD             >                endif           ; ok        // for other definitions it "points" the correct handler
  81+ 6CCD             >                // Use of "; ok" to suppress "warning[fwdref]"
  81+ 6CCD             >
  81+ 6CCD             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  82+ 6CCD
  83+ 6CCD F4 6C                        dw      ZERO
  84+ 6CCF B0 6C                        dw      CONSTANT                // constant
  85+ 6CD1 C4 71                        dw      C_SEMICOLON_CODE        // ;code ( changes the 3-bytes CFA to call Variable_Ptr )
  86+ 6CD3              Variable_Ptr:
  87+ 6CD3
  88+ 6CD3 13                           inc     de
  89+ 6CD4 D5                           push    de                  // balance TOS before overwrite it
  90+ 6CD5
  91+ 6CD5                              next
  91+ 6CD5 DD E9       >                jp      (ix)
  92+ 6CD7
  93+ 6CD7              //  ______________________________________________________________________
  94+ 6CD7              //
  95+ 6CD7              // user         b -- cccc     ( compile time )
  96+ 6CD7              //              -- a          ( run time )
  97+ 6CD7              // User variable definition
  98+ 6CD7                              Colon_Def USER, "USER", is_normal
  98+ 6CD7             >                New_Def  USER, "USER", Enter_Ptr, is_normal ; ok
  98+ 6CD7             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  98+ 6CD7             >
  98+ 6CD7             >                // dummy db directives used to calculate length of namec
  98+ 6CD7 55 53 45 52 >                db      "USER"
  98+ 6CDB             >len_NFA         defl    $ - temp_NFA
  98+ 6CDB             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  98+ 6CD7             >
  98+ 6CD7 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  98+ 6CD8 55 53 45 52 >                db      "USER"               // name string in 7-bit ascii, but
  98+ 6CDC             >                org     $-1                 // alter last byte of Name just above to set
  98+ 6CDB D2          >                db      {b $} | END_BIT     // msb as name end
  98+ 6CDC             >
  98+ 6CDC C0 6C       >                dw      last_NFA            // Link to previous definition Name
  98+ 6CDE             >USER:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
  98+ 6CDE 79 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
  98+ 6CE0             >                else
  98+ 6CE0 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
  98+ 6CE0             >                endif           ; ok        // for other definitions it "points" the correct handler
  98+ 6CE0             >                // Use of "; ok" to suppress "warning[fwdref]"
  98+ 6CE0             >
  98+ 6CE0             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  99+ 6CE0
 100+ 6CE0 BC 76                        dw      CREATE                  // create
 101+ 6CE2 00 6F                        dw      CCOMMA                  // c,
 102+ 6CE4 C4 71                        dw      C_SEMICOLON_CODE        // ;code () changes the 3-bytes CFA to call User_Ptr )
 103+ 6CE6
 104+ 6CE6
 105+ 6CE6              User_Ptr:
 106+ 6CE6                              // via call coded in CFA
 107+ 6CE6 13                           inc     de
 108+ 6CE7 1A                           ld      a, (de)
 109+ 6CE8 2A 94 63                     ld      hl, (USER_Pointer)
 110+ 6CEB ED 31                        add     hl, a
 111+ 6CED E5                           push    hl
 112+ 6CEE                              next
 112+ 6CEE DD E9       >                jp      (ix)
 113+ 6CF0
 114+ 6CF0              //  ______________________________________________________________________
 115+ 6CF0              //
 116+ 6CF0                              Constant_Def ZERO       ,   "0"     ,   0
 116+ 6CF0             >                New_Def  ZERO, "0", Constant_Ptr, is_normal
 116+ 6CF0             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 116+ 6CF0             >
 116+ 6CF0             >                // dummy db directives used to calculate length of namec
 116+ 6CF0 30          >                db      "0"
 116+ 6CF1             >len_NFA         defl    $ - temp_NFA
 116+ 6CF1             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 116+ 6CF0             >
 116+ 6CF0 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 116+ 6CF1 30          >                db      "0"               // name string in 7-bit ascii, but
 116+ 6CF2             >                org     $-1                 // alter last byte of Name just above to set
 116+ 6CF1 B0          >                db      {b $} | END_BIT     // msb as name end
 116+ 6CF2             >
 116+ 6CF2 D7 6C       >                dw      last_NFA            // Link to previous definition Name
 116+ 6CF4             >ZERO:          if Constant_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 116+ 6CF4 B8 6C       >                dw      Constant_Ptr ; ok        // for primitive definitions  actual code
 116+ 6CF6             >                else
 116+ 6CF6 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 116+ 6CF6             >                endif           ; ok        // for other definitions it "points" the correct handler
 116+ 6CF6             >                // Use of "; ok" to suppress "warning[fwdref]"
 116+ 6CF6             >
 116+ 6CF6             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 116+ 6CF6 00 00       >                dw      0
 117+ 6CF8                              Constant_Def ONE        ,   "1"     ,   1
 117+ 6CF8             >                New_Def  ONE, "1", Constant_Ptr, is_normal
 117+ 6CF8             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 117+ 6CF8             >
 117+ 6CF8             >                // dummy db directives used to calculate length of namec
 117+ 6CF8 31          >                db      "1"
 117+ 6CF9             >len_NFA         defl    $ - temp_NFA
 117+ 6CF9             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 117+ 6CF8             >
 117+ 6CF8 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 117+ 6CF9 31          >                db      "1"               // name string in 7-bit ascii, but
 117+ 6CFA             >                org     $-1                 // alter last byte of Name just above to set
 117+ 6CF9 B1          >                db      {b $} | END_BIT     // msb as name end
 117+ 6CFA             >
 117+ 6CFA F0 6C       >                dw      last_NFA            // Link to previous definition Name
 117+ 6CFC             >ONE:          if Constant_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 117+ 6CFC B8 6C       >                dw      Constant_Ptr ; ok        // for primitive definitions  actual code
 117+ 6CFE             >                else
 117+ 6CFE ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 117+ 6CFE             >                endif           ; ok        // for other definitions it "points" the correct handler
 117+ 6CFE             >                // Use of "; ok" to suppress "warning[fwdref]"
 117+ 6CFE             >
 117+ 6CFE             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 117+ 6CFE 01 00       >                dw      1
 118+ 6D00                              Constant_Def TWO        ,   "2"     ,   2
 118+ 6D00             >                New_Def  TWO, "2", Constant_Ptr, is_normal
 118+ 6D00             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 118+ 6D00             >
 118+ 6D00             >                // dummy db directives used to calculate length of namec
 118+ 6D00 32          >                db      "2"
 118+ 6D01             >len_NFA         defl    $ - temp_NFA
 118+ 6D01             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 118+ 6D00             >
 118+ 6D00 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 118+ 6D01 32          >                db      "2"               // name string in 7-bit ascii, but
 118+ 6D02             >                org     $-1                 // alter last byte of Name just above to set
 118+ 6D01 B2          >                db      {b $} | END_BIT     // msb as name end
 118+ 6D02             >
 118+ 6D02 F8 6C       >                dw      last_NFA            // Link to previous definition Name
 118+ 6D04             >TWO:          if Constant_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 118+ 6D04 B8 6C       >                dw      Constant_Ptr ; ok        // for primitive definitions  actual code
 118+ 6D06             >                else
 118+ 6D06 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 118+ 6D06             >                endif           ; ok        // for other definitions it "points" the correct handler
 118+ 6D06             >                // Use of "; ok" to suppress "warning[fwdref]"
 118+ 6D06             >
 118+ 6D06             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 118+ 6D06 02 00       >                dw      2
 119+ 6D08                              Constant_Def THREE      ,   "3"     ,   3
 119+ 6D08             >                New_Def  THREE, "3", Constant_Ptr, is_normal
 119+ 6D08             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 119+ 6D08             >
 119+ 6D08             >                // dummy db directives used to calculate length of namec
 119+ 6D08 33          >                db      "3"
 119+ 6D09             >len_NFA         defl    $ - temp_NFA
 119+ 6D09             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 119+ 6D08             >
 119+ 6D08 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 119+ 6D09 33          >                db      "3"               // name string in 7-bit ascii, but
 119+ 6D0A             >                org     $-1                 // alter last byte of Name just above to set
 119+ 6D09 B3          >                db      {b $} | END_BIT     // msb as name end
 119+ 6D0A             >
 119+ 6D0A 00 6D       >                dw      last_NFA            // Link to previous definition Name
 119+ 6D0C             >THREE:          if Constant_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 119+ 6D0C B8 6C       >                dw      Constant_Ptr ; ok        // for primitive definitions  actual code
 119+ 6D0E             >                else
 119+ 6D0E ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 119+ 6D0E             >                endif           ; ok        // for other definitions it "points" the correct handler
 119+ 6D0E             >                // Use of "; ok" to suppress "warning[fwdref]"
 119+ 6D0E             >
 119+ 6D0E             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 119+ 6D0E 03 00       >                dw      3
 120+ 6D10                              Constant_Def NEG_ONE    ,   "-1"    ,  -1
 120+ 6D10             >                New_Def  NEG_ONE, "-1", Constant_Ptr, is_normal
 120+ 6D10             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 120+ 6D10             >
 120+ 6D10             >                // dummy db directives used to calculate length of namec
 120+ 6D10 2D 31       >                db      "-1"
 120+ 6D12             >len_NFA         defl    $ - temp_NFA
 120+ 6D12             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 120+ 6D10             >
 120+ 6D10 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 120+ 6D11 2D 31       >                db      "-1"               // name string in 7-bit ascii, but
 120+ 6D13             >                org     $-1                 // alter last byte of Name just above to set
 120+ 6D12 B1          >                db      {b $} | END_BIT     // msb as name end
 120+ 6D13             >
 120+ 6D13 08 6D       >                dw      last_NFA            // Link to previous definition Name
 120+ 6D15             >NEG_ONE:          if Constant_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 120+ 6D15 B8 6C       >                dw      Constant_Ptr ; ok        // for primitive definitions  actual code
 120+ 6D17             >                else
 120+ 6D17 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 120+ 6D17             >                endif           ; ok        // for other definitions it "points" the correct handler
 120+ 6D17             >                // Use of "; ok" to suppress "warning[fwdref]"
 120+ 6D17             >
 120+ 6D17             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 120+ 6D17 FF FF       >                dw      -1
 121+ 6D19                              Constant_Def BL         ,   "BL"    , $20
 121+ 6D19             >                New_Def  BL, "BL", Constant_Ptr, is_normal
 121+ 6D19             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 121+ 6D19             >
 121+ 6D19             >                // dummy db directives used to calculate length of namec
 121+ 6D19 42 4C       >                db      "BL"
 121+ 6D1B             >len_NFA         defl    $ - temp_NFA
 121+ 6D1B             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 121+ 6D19             >
 121+ 6D19 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 121+ 6D1A 42 4C       >                db      "BL"               // name string in 7-bit ascii, but
 121+ 6D1C             >                org     $-1                 // alter last byte of Name just above to set
 121+ 6D1B CC          >                db      {b $} | END_BIT     // msb as name end
 121+ 6D1C             >
 121+ 6D1C 10 6D       >                dw      last_NFA            // Link to previous definition Name
 121+ 6D1E             >BL:          if Constant_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 121+ 6D1E B8 6C       >                dw      Constant_Ptr ; ok        // for primitive definitions  actual code
 121+ 6D20             >                else
 121+ 6D20 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 121+ 6D20             >                endif           ; ok        // for other definitions it "points" the correct handler
 121+ 6D20             >                // Use of "; ok" to suppress "warning[fwdref]"
 121+ 6D20             >
 121+ 6D20             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 121+ 6D20 20 00       >                dw      $20
 122+ 6D22                              Constant_Def CL         ,   "C/L"   ,  64
 122+ 6D22             >                New_Def  CL, "C/L", Constant_Ptr, is_normal
 122+ 6D22             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 122+ 6D22             >
 122+ 6D22             >                // dummy db directives used to calculate length of namec
 122+ 6D22 43 2F 4C    >                db      "C/L"
 122+ 6D25             >len_NFA         defl    $ - temp_NFA
 122+ 6D25             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 122+ 6D22             >
 122+ 6D22 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 122+ 6D23 43 2F 4C    >                db      "C/L"               // name string in 7-bit ascii, but
 122+ 6D26             >                org     $-1                 // alter last byte of Name just above to set
 122+ 6D25 CC          >                db      {b $} | END_BIT     // msb as name end
 122+ 6D26             >
 122+ 6D26 19 6D       >                dw      last_NFA            // Link to previous definition Name
 122+ 6D28             >CL:          if Constant_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 122+ 6D28 B8 6C       >                dw      Constant_Ptr ; ok        // for primitive definitions  actual code
 122+ 6D2A             >                else
 122+ 6D2A ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 122+ 6D2A             >                endif           ; ok        // for other definitions it "points" the correct handler
 122+ 6D2A             >                // Use of "; ok" to suppress "warning[fwdref]"
 122+ 6D2A             >
 122+ 6D2A             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 122+ 6D2A 40 00       >                dw      64
 123+ 6D2C                              Constant_Def BBUF       ,   "B/BUF" , 512
 123+ 6D2C             >                New_Def  BBUF, "B/BUF", Constant_Ptr, is_normal
 123+ 6D2C             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 123+ 6D2C             >
 123+ 6D2C             >                // dummy db directives used to calculate length of namec
 123+ 6D2C 42 2F 42 55 >                db      "B/BUF"
 123+ 6D30 46          >
 123+ 6D31             >len_NFA         defl    $ - temp_NFA
 123+ 6D31             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 123+ 6D2C             >
 123+ 6D2C 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 123+ 6D2D 42 2F 42 55 >                db      "B/BUF"               // name string in 7-bit ascii, but
 123+ 6D31 46          >
 123+ 6D32             >                org     $-1                 // alter last byte of Name just above to set
 123+ 6D31 C6          >                db      {b $} | END_BIT     // msb as name end
 123+ 6D32             >
 123+ 6D32 22 6D       >                dw      last_NFA            // Link to previous definition Name
 123+ 6D34             >BBUF:          if Constant_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 123+ 6D34 B8 6C       >                dw      Constant_Ptr ; ok        // for primitive definitions  actual code
 123+ 6D36             >                else
 123+ 6D36 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 123+ 6D36             >                endif           ; ok        // for other definitions it "points" the correct handler
 123+ 6D36             >                // Use of "; ok" to suppress "warning[fwdref]"
 123+ 6D36             >
 123+ 6D36             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 123+ 6D36 00 02       >                dw      512
 124+ 6D38                              Constant_Def BSCR       ,   "B/SCR" ,   2
 124+ 6D38             >                New_Def  BSCR, "B/SCR", Constant_Ptr, is_normal
 124+ 6D38             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 124+ 6D38             >
 124+ 6D38             >                // dummy db directives used to calculate length of namec
 124+ 6D38 42 2F 53 43 >                db      "B/SCR"
 124+ 6D3C 52          >
 124+ 6D3D             >len_NFA         defl    $ - temp_NFA
 124+ 6D3D             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 124+ 6D38             >
 124+ 6D38 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 124+ 6D39 42 2F 53 43 >                db      "B/SCR"               // name string in 7-bit ascii, but
 124+ 6D3D 52          >
 124+ 6D3E             >                org     $-1                 // alter last byte of Name just above to set
 124+ 6D3D D2          >                db      {b $} | END_BIT     // msb as name end
 124+ 6D3E             >
 124+ 6D3E 2C 6D       >                dw      last_NFA            // Link to previous definition Name
 124+ 6D40             >BSCR:          if Constant_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 124+ 6D40 B8 6C       >                dw      Constant_Ptr ; ok        // for primitive definitions  actual code
 124+ 6D42             >                else
 124+ 6D42 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 124+ 6D42             >                endif           ; ok        // for other definitions it "points" the correct handler
 124+ 6D42             >                // Use of "; ok" to suppress "warning[fwdref]"
 124+ 6D42             >
 124+ 6D42             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 124+ 6D42 02 00       >                dw      2
 125+ 6D44                              Constant_Def LSCR       ,   "L/SCR" ,  16
 125+ 6D44             >                New_Def  LSCR, "L/SCR", Constant_Ptr, is_normal
 125+ 6D44             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 125+ 6D44             >
 125+ 6D44             >                // dummy db directives used to calculate length of namec
 125+ 6D44 4C 2F 53 43 >                db      "L/SCR"
 125+ 6D48 52          >
 125+ 6D49             >len_NFA         defl    $ - temp_NFA
 125+ 6D49             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 125+ 6D44             >
 125+ 6D44 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 125+ 6D45 4C 2F 53 43 >                db      "L/SCR"               // name string in 7-bit ascii, but
 125+ 6D49 52          >
 125+ 6D4A             >                org     $-1                 // alter last byte of Name just above to set
 125+ 6D49 D2          >                db      {b $} | END_BIT     // msb as name end
 125+ 6D4A             >
 125+ 6D4A 38 6D       >                dw      last_NFA            // Link to previous definition Name
 125+ 6D4C             >LSCR:          if Constant_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 125+ 6D4C B8 6C       >                dw      Constant_Ptr ; ok        // for primitive definitions  actual code
 125+ 6D4E             >                else
 125+ 6D4E ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 125+ 6D4E             >                endif           ; ok        // for other definitions it "points" the correct handler
 125+ 6D4E             >                // Use of "; ok" to suppress "warning[fwdref]"
 125+ 6D4E             >
 125+ 6D4E             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 125+ 6D4E 10 00       >                dw      16
 126+ 6D50
 127+ 6D50              //  ______________________________________________________________________
 128+ 6D50              //
 129+ 6D50              // +origin         --
 130+ 6D50              //              Colon_Def PLUS_ORIGIN, "+ORIGIN", is_normal
 131+ 6D50              //              dw      LIT, Cold_origin        // [ hex 6366 ] literal
 132+ 6D50              //              dw      PLUS                    // +
 133+ 6D50              //              dw      EXIT                    // ;
 134+ 6D50                              New_Def PLUS_ORIGIN, "+ORIGIN", is_code, is_normal
 134+ 6D50             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 134+ 6D50             >
 134+ 6D50             >                // dummy db directives used to calculate length of namec
 134+ 6D50 2B 4F 52 49 >                db      "+ORIGIN"
 134+ 6D54 47 49 4E    >
 134+ 6D57             >len_NFA         defl    $ - temp_NFA
 134+ 6D57             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 134+ 6D50             >
 134+ 6D50 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 134+ 6D51 2B 4F 52 49 >                db      "+ORIGIN"               // name string in 7-bit ascii, but
 134+ 6D55 47 49 4E    >
 134+ 6D58             >                org     $-1                 // alter last byte of Name just above to set
 134+ 6D57 CE          >                db      {b $} | END_BIT     // msb as name end
 134+ 6D58             >
 134+ 6D58 44 6D       >                dw      last_NFA            // Link to previous definition Name
 134+ 6D5A             >PLUS_ORIGIN:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 134+ 6D5A ~           >                dw      runcode ; ok        // for primitive definitions  actual code
 134+ 6D5A             >                else
 134+ 6D5A 5C 6D       >                dw      $ + 2   ; ok        // is pointed by CFA
 134+ 6D5C             >                endif           ; ok        // for other definitions it "points" the correct handler
 134+ 6D5C             >                // Use of "; ok" to suppress "warning[fwdref]"
 134+ 6D5C             >
 134+ 6D5C             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 135+ 6D5C E1                           pop     hl
 136+ 6D5D 11 66 63                     ld      de,  Cold_origin
 137+ 6D60 19                           add     hl, de
 138+ 6D61 E5                           push    hl
 139+ 6D62                              next
 139+ 6D62 DD E9       >                jp      (ix)
 140+ 6D64
 141+ 6D64
 142+ 6D64              //  ______________________________________________________________________
 143+ 6D64              //
 144+ 6D64                              Constant_Def CNEXT      ,   "(NEXT)", Next_Ptr
 144+ 6D64             >                New_Def  CNEXT, "(NEXT)", Constant_Ptr, is_normal
 144+ 6D64             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 144+ 6D64             >
 144+ 6D64             >                // dummy db directives used to calculate length of namec
 144+ 6D64 28 4E 45 58 >                db      "(NEXT)"
 144+ 6D68 54 29       >
 144+ 6D6A             >len_NFA         defl    $ - temp_NFA
 144+ 6D6A             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 144+ 6D64             >
 144+ 6D64 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 144+ 6D65 28 4E 45 58 >                db      "(NEXT)"               // name string in 7-bit ascii, but
 144+ 6D69 54 29       >
 144+ 6D6B             >                org     $-1                 // alter last byte of Name just above to set
 144+ 6D6A A9          >                db      {b $} | END_BIT     // msb as name end
 144+ 6D6B             >
 144+ 6D6B 50 6D       >                dw      last_NFA            // Link to previous definition Name
 144+ 6D6D             >CNEXT:          if Constant_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 144+ 6D6D B8 6C       >                dw      Constant_Ptr ; ok        // for primitive definitions  actual code
 144+ 6D6F             >                else
 144+ 6D6F ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 144+ 6D6F             >                endif           ; ok        // for other definitions it "points" the correct handler
 144+ 6D6F             >                // Use of "; ok" to suppress "warning[fwdref]"
 144+ 6D6F             >
 144+ 6D6F             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 144+ 6D6F 98 63       >                dw      Next_Ptr
 145+ 6D71
 146+ 6D71              //  ______________________________________________________________________
 147+ 6D71              //
 148+ 6D71
 149+ 6D71                              User_Def S0         , "S0"        , 06 // starting value of Stack-Pointer
 149+ 6D71             >                New_Def  S0, "S0", User_Ptr, is_normal
 149+ 6D71             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 149+ 6D71             >
 149+ 6D71             >                // dummy db directives used to calculate length of namec
 149+ 6D71 53 30       >                db      "S0"
 149+ 6D73             >len_NFA         defl    $ - temp_NFA
 149+ 6D73             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 149+ 6D71             >
 149+ 6D71 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 149+ 6D72 53 30       >                db      "S0"               // name string in 7-bit ascii, but
 149+ 6D74             >                org     $-1                 // alter last byte of Name just above to set
 149+ 6D73 B0          >                db      {b $} | END_BIT     // msb as name end
 149+ 6D74             >
 149+ 6D74 64 6D       >                dw      last_NFA            // Link to previous definition Name
 149+ 6D76             >S0:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 149+ 6D76 E6 6C       >                dw      User_Ptr ; ok        // for primitive definitions  actual code
 149+ 6D78             >                else
 149+ 6D78 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 149+ 6D78             >                endif           ; ok        // for other definitions it "points" the correct handler
 149+ 6D78             >                // Use of "; ok" to suppress "warning[fwdref]"
 149+ 6D78             >
 149+ 6D78             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 149+ 6D78 06          >                db      06
 150+ 6D79                              User_Def R0         , "R0"        , 08 // starting value of Return-Pointer
 150+ 6D79             >                New_Def  R0, "R0", User_Ptr, is_normal
 150+ 6D79             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 150+ 6D79             >
 150+ 6D79             >                // dummy db directives used to calculate length of namec
 150+ 6D79 52 30       >                db      "R0"
 150+ 6D7B             >len_NFA         defl    $ - temp_NFA
 150+ 6D7B             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 150+ 6D79             >
 150+ 6D79 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 150+ 6D7A 52 30       >                db      "R0"               // name string in 7-bit ascii, but
 150+ 6D7C             >                org     $-1                 // alter last byte of Name just above to set
 150+ 6D7B B0          >                db      {b $} | END_BIT     // msb as name end
 150+ 6D7C             >
 150+ 6D7C 71 6D       >                dw      last_NFA            // Link to previous definition Name
 150+ 6D7E             >R0:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 150+ 6D7E E6 6C       >                dw      User_Ptr ; ok        // for primitive definitions  actual code
 150+ 6D80             >                else
 150+ 6D80 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 150+ 6D80             >                endif           ; ok        // for other definitions it "points" the correct handler
 150+ 6D80             >                // Use of "; ok" to suppress "warning[fwdref]"
 150+ 6D80             >
 150+ 6D80             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 150+ 6D80 08          >                db      08
 151+ 6D81                              User_Def TIB        , "TIB"       , 10 // input terminal buffer address
 151+ 6D81             >                New_Def  TIB, "TIB", User_Ptr, is_normal
 151+ 6D81             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 151+ 6D81             >
 151+ 6D81             >                // dummy db directives used to calculate length of namec
 151+ 6D81 54 49 42    >                db      "TIB"
 151+ 6D84             >len_NFA         defl    $ - temp_NFA
 151+ 6D84             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 151+ 6D81             >
 151+ 6D81 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 151+ 6D82 54 49 42    >                db      "TIB"               // name string in 7-bit ascii, but
 151+ 6D85             >                org     $-1                 // alter last byte of Name just above to set
 151+ 6D84 C2          >                db      {b $} | END_BIT     // msb as name end
 151+ 6D85             >
 151+ 6D85 79 6D       >                dw      last_NFA            // Link to previous definition Name
 151+ 6D87             >TIB:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 151+ 6D87 E6 6C       >                dw      User_Ptr ; ok        // for primitive definitions  actual code
 151+ 6D89             >                else
 151+ 6D89 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 151+ 6D89             >                endif           ; ok        // for other definitions it "points" the correct handler
 151+ 6D89             >                // Use of "; ok" to suppress "warning[fwdref]"
 151+ 6D89             >
 151+ 6D89             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 151+ 6D89 0A          >                db      10
 152+ 6D8A                              User_Def WIDTH      , "WIDTH"     , 12 // maximum number of characters for a word name
 152+ 6D8A             >                New_Def  WIDTH, "WIDTH", User_Ptr, is_normal
 152+ 6D8A             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 152+ 6D8A             >
 152+ 6D8A             >                // dummy db directives used to calculate length of namec
 152+ 6D8A 57 49 44 54 >                db      "WIDTH"
 152+ 6D8E 48          >
 152+ 6D8F             >len_NFA         defl    $ - temp_NFA
 152+ 6D8F             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 152+ 6D8A             >
 152+ 6D8A 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 152+ 6D8B 57 49 44 54 >                db      "WIDTH"               // name string in 7-bit ascii, but
 152+ 6D8F 48          >
 152+ 6D90             >                org     $-1                 // alter last byte of Name just above to set
 152+ 6D8F C8          >                db      {b $} | END_BIT     // msb as name end
 152+ 6D90             >
 152+ 6D90 81 6D       >                dw      last_NFA            // Link to previous definition Name
 152+ 6D92             >WIDTH:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 152+ 6D92 E6 6C       >                dw      User_Ptr ; ok        // for primitive definitions  actual code
 152+ 6D94             >                else
 152+ 6D94 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 152+ 6D94             >                endif           ; ok        // for other definitions it "points" the correct handler
 152+ 6D94             >                // Use of "; ok" to suppress "warning[fwdref]"
 152+ 6D94             >
 152+ 6D94             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 152+ 6D94 0C          >                db      12
 153+ 6D95                              User_Def WARNING    , "WARNING"   , 14 // error reporting method: 0 base, 1 verbose
 153+ 6D95             >                New_Def  WARNING, "WARNING", User_Ptr, is_normal
 153+ 6D95             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 153+ 6D95             >
 153+ 6D95             >                // dummy db directives used to calculate length of namec
 153+ 6D95 57 41 52 4E >                db      "WARNING"
 153+ 6D99 49 4E 47    >
 153+ 6D9C             >len_NFA         defl    $ - temp_NFA
 153+ 6D9C             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 153+ 6D95             >
 153+ 6D95 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 153+ 6D96 57 41 52 4E >                db      "WARNING"               // name string in 7-bit ascii, but
 153+ 6D9A 49 4E 47    >
 153+ 6D9D             >                org     $-1                 // alter last byte of Name just above to set
 153+ 6D9C C7          >                db      {b $} | END_BIT     // msb as name end
 153+ 6D9D             >
 153+ 6D9D 8A 6D       >                dw      last_NFA            // Link to previous definition Name
 153+ 6D9F             >WARNING:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 153+ 6D9F E6 6C       >                dw      User_Ptr ; ok        // for primitive definitions  actual code
 153+ 6DA1             >                else
 153+ 6DA1 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 153+ 6DA1             >                endif           ; ok        // for other definitions it "points" the correct handler
 153+ 6DA1             >                // Use of "; ok" to suppress "warning[fwdref]"
 153+ 6DA1             >
 153+ 6DA1             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 153+ 6DA1 0E          >                db      14
 154+ 6DA2                              User_Def FENCE      , "FENCE"     , 16 // minimum address where FORGET can work
 154+ 6DA2             >                New_Def  FENCE, "FENCE", User_Ptr, is_normal
 154+ 6DA2             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 154+ 6DA2             >
 154+ 6DA2             >                // dummy db directives used to calculate length of namec
 154+ 6DA2 46 45 4E 43 >                db      "FENCE"
 154+ 6DA6 45          >
 154+ 6DA7             >len_NFA         defl    $ - temp_NFA
 154+ 6DA7             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 154+ 6DA2             >
 154+ 6DA2 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 154+ 6DA3 46 45 4E 43 >                db      "FENCE"               // name string in 7-bit ascii, but
 154+ 6DA7 45          >
 154+ 6DA8             >                org     $-1                 // alter last byte of Name just above to set
 154+ 6DA7 C5          >                db      {b $} | END_BIT     // msb as name end
 154+ 6DA8             >
 154+ 6DA8 95 6D       >                dw      last_NFA            // Link to previous definition Name
 154+ 6DAA             >FENCE:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 154+ 6DAA E6 6C       >                dw      User_Ptr ; ok        // for primitive definitions  actual code
 154+ 6DAC             >                else
 154+ 6DAC ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 154+ 6DAC             >                endif           ; ok        // for other definitions it "points" the correct handler
 154+ 6DAC             >                // Use of "; ok" to suppress "warning[fwdref]"
 154+ 6DAC             >
 154+ 6DAC             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 154+ 6DAC 10          >                db      16
 155+ 6DAD                              User_Def DP         , "DP"        , 18 // Dictionary Pointer
 155+ 6DAD             >                New_Def  DP, "DP", User_Ptr, is_normal
 155+ 6DAD             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 155+ 6DAD             >
 155+ 6DAD             >                // dummy db directives used to calculate length of namec
 155+ 6DAD 44 50       >                db      "DP"
 155+ 6DAF             >len_NFA         defl    $ - temp_NFA
 155+ 6DAF             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 155+ 6DAD             >
 155+ 6DAD 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 155+ 6DAE 44 50       >                db      "DP"               // name string in 7-bit ascii, but
 155+ 6DB0             >                org     $-1                 // alter last byte of Name just above to set
 155+ 6DAF D0          >                db      {b $} | END_BIT     // msb as name end
 155+ 6DB0             >
 155+ 6DB0 A2 6D       >                dw      last_NFA            // Link to previous definition Name
 155+ 6DB2             >DP:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 155+ 6DB2 E6 6C       >                dw      User_Ptr ; ok        // for primitive definitions  actual code
 155+ 6DB4             >                else
 155+ 6DB4 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 155+ 6DB4             >                endif           ; ok        // for other definitions it "points" the correct handler
 155+ 6DB4             >                // Use of "; ok" to suppress "warning[fwdref]"
 155+ 6DB4             >
 155+ 6DB4             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 155+ 6DB4 12          >                db      18
 156+ 6DB5                              User_Def VOC_LINK   , "VOC-LINK"  , 20 // pointer to the latest vocabulary
 156+ 6DB5             >                New_Def  VOC_LINK, "VOC-LINK", User_Ptr, is_normal
 156+ 6DB5             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 156+ 6DB5             >
 156+ 6DB5             >                // dummy db directives used to calculate length of namec
 156+ 6DB5 56 4F 43 2D >                db      "VOC-LINK"
 156+ 6DB9 4C 49 4E 4B >
 156+ 6DBD             >len_NFA         defl    $ - temp_NFA
 156+ 6DBD             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 156+ 6DB5             >
 156+ 6DB5 88          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 156+ 6DB6 56 4F 43 2D >                db      "VOC-LINK"               // name string in 7-bit ascii, but
 156+ 6DBA 4C 49 4E 4B >
 156+ 6DBE             >                org     $-1                 // alter last byte of Name just above to set
 156+ 6DBD CB          >                db      {b $} | END_BIT     // msb as name end
 156+ 6DBE             >
 156+ 6DBE AD 6D       >                dw      last_NFA            // Link to previous definition Name
 156+ 6DC0             >VOC_LINK:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 156+ 6DC0 E6 6C       >                dw      User_Ptr ; ok        // for primitive definitions  actual code
 156+ 6DC2             >                else
 156+ 6DC2 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 156+ 6DC2             >                endif           ; ok        // for other definitions it "points" the correct handler
 156+ 6DC2             >                // Use of "; ok" to suppress "warning[fwdref]"
 156+ 6DC2             >
 156+ 6DC2             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 156+ 6DC2 14          >                db      20
 157+ 6DC3                              User_Def FIRST      , "FIRST"     , 22 // address of first buffer
 157+ 6DC3             >                New_Def  FIRST, "FIRST", User_Ptr, is_normal
 157+ 6DC3             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 157+ 6DC3             >
 157+ 6DC3             >                // dummy db directives used to calculate length of namec
 157+ 6DC3 46 49 52 53 >                db      "FIRST"
 157+ 6DC7 54          >
 157+ 6DC8             >len_NFA         defl    $ - temp_NFA
 157+ 6DC8             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 157+ 6DC3             >
 157+ 6DC3 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 157+ 6DC4 46 49 52 53 >                db      "FIRST"               // name string in 7-bit ascii, but
 157+ 6DC8 54          >
 157+ 6DC9             >                org     $-1                 // alter last byte of Name just above to set
 157+ 6DC8 D4          >                db      {b $} | END_BIT     // msb as name end
 157+ 6DC9             >
 157+ 6DC9 B5 6D       >                dw      last_NFA            // Link to previous definition Name
 157+ 6DCB             >FIRST:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 157+ 6DCB E6 6C       >                dw      User_Ptr ; ok        // for primitive definitions  actual code
 157+ 6DCD             >                else
 157+ 6DCD ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 157+ 6DCD             >                endif           ; ok        // for other definitions it "points" the correct handler
 157+ 6DCD             >                // Use of "; ok" to suppress "warning[fwdref]"
 157+ 6DCD             >
 157+ 6DCD             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 157+ 6DCD 16          >                db      22
 158+ 6DCE                              User_Def LIMIT      , "LIMIT"     , 24 // address of last buffer
 158+ 6DCE             >                New_Def  LIMIT, "LIMIT", User_Ptr, is_normal
 158+ 6DCE             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 158+ 6DCE             >
 158+ 6DCE             >                // dummy db directives used to calculate length of namec
 158+ 6DCE 4C 49 4D 49 >                db      "LIMIT"
 158+ 6DD2 54          >
 158+ 6DD3             >len_NFA         defl    $ - temp_NFA
 158+ 6DD3             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 158+ 6DCE             >
 158+ 6DCE 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 158+ 6DCF 4C 49 4D 49 >                db      "LIMIT"               // name string in 7-bit ascii, but
 158+ 6DD3 54          >
 158+ 6DD4             >                org     $-1                 // alter last byte of Name just above to set
 158+ 6DD3 D4          >                db      {b $} | END_BIT     // msb as name end
 158+ 6DD4             >
 158+ 6DD4 C3 6D       >                dw      last_NFA            // Link to previous definition Name
 158+ 6DD6             >LIMIT:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 158+ 6DD6 E6 6C       >                dw      User_Ptr ; ok        // for primitive definitions  actual code
 158+ 6DD8             >                else
 158+ 6DD8 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 158+ 6DD8             >                endif           ; ok        // for other definitions it "points" the correct handler
 158+ 6DD8             >                // Use of "; ok" to suppress "warning[fwdref]"
 158+ 6DD8             >
 158+ 6DD8             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 158+ 6DD8 18          >                db      24
 159+ 6DD9                              User_Def EXP        , "EXP"       , 26 // keeps the exponent in number conversion
 159+ 6DD9             >                New_Def  EXP, "EXP", User_Ptr, is_normal
 159+ 6DD9             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 159+ 6DD9             >
 159+ 6DD9             >                // dummy db directives used to calculate length of namec
 159+ 6DD9 45 58 50    >                db      "EXP"
 159+ 6DDC             >len_NFA         defl    $ - temp_NFA
 159+ 6DDC             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 159+ 6DD9             >
 159+ 6DD9 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 159+ 6DDA 45 58 50    >                db      "EXP"               // name string in 7-bit ascii, but
 159+ 6DDD             >                org     $-1                 // alter last byte of Name just above to set
 159+ 6DDC D0          >                db      {b $} | END_BIT     // msb as name end
 159+ 6DDD             >
 159+ 6DDD CE 6D       >                dw      last_NFA            // Link to previous definition Name
 159+ 6DDF             >EXP:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 159+ 6DDF E6 6C       >                dw      User_Ptr ; ok        // for primitive definitions  actual code
 159+ 6DE1             >                else
 159+ 6DE1 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 159+ 6DE1             >                endif           ; ok        // for other definitions it "points" the correct handler
 159+ 6DE1             >                // Use of "; ok" to suppress "warning[fwdref]"
 159+ 6DE1             >
 159+ 6DE1             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 159+ 6DE1 1A          >                db      26
 160+ 6DE2                              User_Def NMODE      , "NMODE"     , 28 // number mode: 0 integer, 1 floating point
 160+ 6DE2             >                New_Def  NMODE, "NMODE", User_Ptr, is_normal
 160+ 6DE2             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 160+ 6DE2             >
 160+ 6DE2             >                // dummy db directives used to calculate length of namec
 160+ 6DE2 4E 4D 4F 44 >                db      "NMODE"
 160+ 6DE6 45          >
 160+ 6DE7             >len_NFA         defl    $ - temp_NFA
 160+ 6DE7             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 160+ 6DE2             >
 160+ 6DE2 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 160+ 6DE3 4E 4D 4F 44 >                db      "NMODE"               // name string in 7-bit ascii, but
 160+ 6DE7 45          >
 160+ 6DE8             >                org     $-1                 // alter last byte of Name just above to set
 160+ 6DE7 C5          >                db      {b $} | END_BIT     // msb as name end
 160+ 6DE8             >
 160+ 6DE8 D9 6D       >                dw      last_NFA            // Link to previous definition Name
 160+ 6DEA             >NMODE:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 160+ 6DEA E6 6C       >                dw      User_Ptr ; ok        // for primitive definitions  actual code
 160+ 6DEC             >                else
 160+ 6DEC ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 160+ 6DEC             >                endif           ; ok        // for other definitions it "points" the correct handler
 160+ 6DEC             >                // Use of "; ok" to suppress "warning[fwdref]"
 160+ 6DEC             >
 160+ 6DEC             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 160+ 6DEC 1C          >                db      28
 161+ 6DED                              User_Def BLK        , "BLK"       , 30 // block number to be interpreted. 0 for terminal
 161+ 6DED             >                New_Def  BLK, "BLK", User_Ptr, is_normal
 161+ 6DED             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 161+ 6DED             >
 161+ 6DED             >                // dummy db directives used to calculate length of namec
 161+ 6DED 42 4C 4B    >                db      "BLK"
 161+ 6DF0             >len_NFA         defl    $ - temp_NFA
 161+ 6DF0             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 161+ 6DED             >
 161+ 6DED 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 161+ 6DEE 42 4C 4B    >                db      "BLK"               // name string in 7-bit ascii, but
 161+ 6DF1             >                org     $-1                 // alter last byte of Name just above to set
 161+ 6DF0 CB          >                db      {b $} | END_BIT     // msb as name end
 161+ 6DF1             >
 161+ 6DF1 E2 6D       >                dw      last_NFA            // Link to previous definition Name
 161+ 6DF3             >BLK:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 161+ 6DF3 E6 6C       >                dw      User_Ptr ; ok        // for primitive definitions  actual code
 161+ 6DF5             >                else
 161+ 6DF5 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 161+ 6DF5             >                endif           ; ok        // for other definitions it "points" the correct handler
 161+ 6DF5             >                // Use of "; ok" to suppress "warning[fwdref]"
 161+ 6DF5             >
 161+ 6DF5             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 161+ 6DF5 1E          >                db      30
 162+ 6DF6                              User_Def TO_IN      , ">IN"       , 32 // incremented when consuming input buffer
 162+ 6DF6             >                New_Def  TO_IN, ">IN", User_Ptr, is_normal
 162+ 6DF6             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 162+ 6DF6             >
 162+ 6DF6             >                // dummy db directives used to calculate length of namec
 162+ 6DF6 3E 49 4E    >                db      ">IN"
 162+ 6DF9             >len_NFA         defl    $ - temp_NFA
 162+ 6DF9             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 162+ 6DF6             >
 162+ 6DF6 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 162+ 6DF7 3E 49 4E    >                db      ">IN"               // name string in 7-bit ascii, but
 162+ 6DFA             >                org     $-1                 // alter last byte of Name just above to set
 162+ 6DF9 CE          >                db      {b $} | END_BIT     // msb as name end
 162+ 6DFA             >
 162+ 6DFA ED 6D       >                dw      last_NFA            // Link to previous definition Name
 162+ 6DFC             >TO_IN:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 162+ 6DFC E6 6C       >                dw      User_Ptr ; ok        // for primitive definitions  actual code
 162+ 6DFE             >                else
 162+ 6DFE ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 162+ 6DFE             >                endif           ; ok        // for other definitions it "points" the correct handler
 162+ 6DFE             >                // Use of "; ok" to suppress "warning[fwdref]"
 162+ 6DFE             >
 162+ 6DFE             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 162+ 6DFE 20          >                db      32
 163+ 6DFF                              User_Def OUT        , "OUT"       , 34 // incremented when sending to output
 163+ 6DFF             >                New_Def  OUT, "OUT", User_Ptr, is_normal
 163+ 6DFF             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 163+ 6DFF             >
 163+ 6DFF             >                // dummy db directives used to calculate length of namec
 163+ 6DFF 4F 55 54    >                db      "OUT"
 163+ 6E02             >len_NFA         defl    $ - temp_NFA
 163+ 6E02             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 163+ 6DFF             >
 163+ 6DFF 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 163+ 6E00 4F 55 54    >                db      "OUT"               // name string in 7-bit ascii, but
 163+ 6E03             >                org     $-1                 // alter last byte of Name just above to set
 163+ 6E02 D4          >                db      {b $} | END_BIT     // msb as name end
 163+ 6E03             >
 163+ 6E03 F6 6D       >                dw      last_NFA            // Link to previous definition Name
 163+ 6E05             >OUT:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 163+ 6E05 E6 6C       >                dw      User_Ptr ; ok        // for primitive definitions  actual code
 163+ 6E07             >                else
 163+ 6E07 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 163+ 6E07             >                endif           ; ok        // for other definitions it "points" the correct handler
 163+ 6E07             >                // Use of "; ok" to suppress "warning[fwdref]"
 163+ 6E07             >
 163+ 6E07             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 163+ 6E07 22          >                db      34
 164+ 6E08                              User_Def SCR        , "SCR"       , 36 // latest screen retreieved by LIST
 164+ 6E08             >                New_Def  SCR, "SCR", User_Ptr, is_normal
 164+ 6E08             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 164+ 6E08             >
 164+ 6E08             >                // dummy db directives used to calculate length of namec
 164+ 6E08 53 43 52    >                db      "SCR"
 164+ 6E0B             >len_NFA         defl    $ - temp_NFA
 164+ 6E0B             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 164+ 6E08             >
 164+ 6E08 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 164+ 6E09 53 43 52    >                db      "SCR"               // name string in 7-bit ascii, but
 164+ 6E0C             >                org     $-1                 // alter last byte of Name just above to set
 164+ 6E0B D2          >                db      {b $} | END_BIT     // msb as name end
 164+ 6E0C             >
 164+ 6E0C FF 6D       >                dw      last_NFA            // Link to previous definition Name
 164+ 6E0E             >SCR:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 164+ 6E0E E6 6C       >                dw      User_Ptr ; ok        // for primitive definitions  actual code
 164+ 6E10             >                else
 164+ 6E10 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 164+ 6E10             >                endif           ; ok        // for other definitions it "points" the correct handler
 164+ 6E10             >                // Use of "; ok" to suppress "warning[fwdref]"
 164+ 6E10             >
 164+ 6E10             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 164+ 6E10 24          >                db      36
 165+ 6E11                              User_Def OFFSET     , "OFFSET"    , 38 //
 165+ 6E11             >                New_Def  OFFSET, "OFFSET", User_Ptr, is_normal
 165+ 6E11             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 165+ 6E11             >
 165+ 6E11             >                // dummy db directives used to calculate length of namec
 165+ 6E11 4F 46 46 53 >                db      "OFFSET"
 165+ 6E15 45 54       >
 165+ 6E17             >len_NFA         defl    $ - temp_NFA
 165+ 6E17             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 165+ 6E11             >
 165+ 6E11 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 165+ 6E12 4F 46 46 53 >                db      "OFFSET"               // name string in 7-bit ascii, but
 165+ 6E16 45 54       >
 165+ 6E18             >                org     $-1                 // alter last byte of Name just above to set
 165+ 6E17 D4          >                db      {b $} | END_BIT     // msb as name end
 165+ 6E18             >
 165+ 6E18 08 6E       >                dw      last_NFA            // Link to previous definition Name
 165+ 6E1A             >OFFSET:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 165+ 6E1A E6 6C       >                dw      User_Ptr ; ok        // for primitive definitions  actual code
 165+ 6E1C             >                else
 165+ 6E1C ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 165+ 6E1C             >                endif           ; ok        // for other definitions it "points" the correct handler
 165+ 6E1C             >                // Use of "; ok" to suppress "warning[fwdref]"
 165+ 6E1C             >
 165+ 6E1C             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 165+ 6E1C 26          >                db      38
 166+ 6E1D                              User_Def CONTEXT    , "CONTEXT"   , 40 // pointer to the vocabulary where search begins
 166+ 6E1D             >                New_Def  CONTEXT, "CONTEXT", User_Ptr, is_normal
 166+ 6E1D             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 166+ 6E1D             >
 166+ 6E1D             >                // dummy db directives used to calculate length of namec
 166+ 6E1D 43 4F 4E 54 >                db      "CONTEXT"
 166+ 6E21 45 58 54    >
 166+ 6E24             >len_NFA         defl    $ - temp_NFA
 166+ 6E24             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 166+ 6E1D             >
 166+ 6E1D 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 166+ 6E1E 43 4F 4E 54 >                db      "CONTEXT"               // name string in 7-bit ascii, but
 166+ 6E22 45 58 54    >
 166+ 6E25             >                org     $-1                 // alter last byte of Name just above to set
 166+ 6E24 D4          >                db      {b $} | END_BIT     // msb as name end
 166+ 6E25             >
 166+ 6E25 11 6E       >                dw      last_NFA            // Link to previous definition Name
 166+ 6E27             >CONTEXT:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 166+ 6E27 E6 6C       >                dw      User_Ptr ; ok        // for primitive definitions  actual code
 166+ 6E29             >                else
 166+ 6E29 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 166+ 6E29             >                endif           ; ok        // for other definitions it "points" the correct handler
 166+ 6E29             >                // Use of "; ok" to suppress "warning[fwdref]"
 166+ 6E29             >
 166+ 6E29             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 166+ 6E29 28          >                db      40
 167+ 6E2A                              User_Def CURRENT    , "CURRENT"   , 42 // pointer to the vocabulary where search continues
 167+ 6E2A             >                New_Def  CURRENT, "CURRENT", User_Ptr, is_normal
 167+ 6E2A             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 167+ 6E2A             >
 167+ 6E2A             >                // dummy db directives used to calculate length of namec
 167+ 6E2A 43 55 52 52 >                db      "CURRENT"
 167+ 6E2E 45 4E 54    >
 167+ 6E31             >len_NFA         defl    $ - temp_NFA
 167+ 6E31             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 167+ 6E2A             >
 167+ 6E2A 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 167+ 6E2B 43 55 52 52 >                db      "CURRENT"               // name string in 7-bit ascii, but
 167+ 6E2F 45 4E 54    >
 167+ 6E32             >                org     $-1                 // alter last byte of Name just above to set
 167+ 6E31 D4          >                db      {b $} | END_BIT     // msb as name end
 167+ 6E32             >
 167+ 6E32 1D 6E       >                dw      last_NFA            // Link to previous definition Name
 167+ 6E34             >CURRENT:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 167+ 6E34 E6 6C       >                dw      User_Ptr ; ok        // for primitive definitions  actual code
 167+ 6E36             >                else
 167+ 6E36 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 167+ 6E36             >                endif           ; ok        // for other definitions it "points" the correct handler
 167+ 6E36             >                // Use of "; ok" to suppress "warning[fwdref]"
 167+ 6E36             >
 167+ 6E36             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 167+ 6E36 2A          >                db      42
 168+ 6E37                              User_Def STATE      , "STATE"     , 44 // compilation status. 0 interpreting.
 168+ 6E37             >                New_Def  STATE, "STATE", User_Ptr, is_normal
 168+ 6E37             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 168+ 6E37             >
 168+ 6E37             >                // dummy db directives used to calculate length of namec
 168+ 6E37 53 54 41 54 >                db      "STATE"
 168+ 6E3B 45          >
 168+ 6E3C             >len_NFA         defl    $ - temp_NFA
 168+ 6E3C             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 168+ 6E37             >
 168+ 6E37 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 168+ 6E38 53 54 41 54 >                db      "STATE"               // name string in 7-bit ascii, but
 168+ 6E3C 45          >
 168+ 6E3D             >                org     $-1                 // alter last byte of Name just above to set
 168+ 6E3C C5          >                db      {b $} | END_BIT     // msb as name end
 168+ 6E3D             >
 168+ 6E3D 2A 6E       >                dw      last_NFA            // Link to previous definition Name
 168+ 6E3F             >STATE:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 168+ 6E3F E6 6C       >                dw      User_Ptr ; ok        // for primitive definitions  actual code
 168+ 6E41             >                else
 168+ 6E41 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 168+ 6E41             >                endif           ; ok        // for other definitions it "points" the correct handler
 168+ 6E41             >                // Use of "; ok" to suppress "warning[fwdref]"
 168+ 6E41             >
 168+ 6E41             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 168+ 6E41 2C          >                db      44
 169+ 6E42                              User_Def BASE       , "BASE"      , 46 //
 169+ 6E42             >                New_Def  BASE, "BASE", User_Ptr, is_normal
 169+ 6E42             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 169+ 6E42             >
 169+ 6E42             >                // dummy db directives used to calculate length of namec
 169+ 6E42 42 41 53 45 >                db      "BASE"
 169+ 6E46             >len_NFA         defl    $ - temp_NFA
 169+ 6E46             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 169+ 6E42             >
 169+ 6E42 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 169+ 6E43 42 41 53 45 >                db      "BASE"               // name string in 7-bit ascii, but
 169+ 6E47             >                org     $-1                 // alter last byte of Name just above to set
 169+ 6E46 C5          >                db      {b $} | END_BIT     // msb as name end
 169+ 6E47             >
 169+ 6E47 37 6E       >                dw      last_NFA            // Link to previous definition Name
 169+ 6E49             >BASE:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 169+ 6E49 E6 6C       >                dw      User_Ptr ; ok        // for primitive definitions  actual code
 169+ 6E4B             >                else
 169+ 6E4B ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 169+ 6E4B             >                endif           ; ok        // for other definitions it "points" the correct handler
 169+ 6E4B             >                // Use of "; ok" to suppress "warning[fwdref]"
 169+ 6E4B             >
 169+ 6E4B             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 169+ 6E4B 2E          >                db      46
 170+ 6E4C                              User_Def DPL        , "DPL"       , 48 // number of digits after decimal point in conversion
 170+ 6E4C             >                New_Def  DPL, "DPL", User_Ptr, is_normal
 170+ 6E4C             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 170+ 6E4C             >
 170+ 6E4C             >                // dummy db directives used to calculate length of namec
 170+ 6E4C 44 50 4C    >                db      "DPL"
 170+ 6E4F             >len_NFA         defl    $ - temp_NFA
 170+ 6E4F             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 170+ 6E4C             >
 170+ 6E4C 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 170+ 6E4D 44 50 4C    >                db      "DPL"               // name string in 7-bit ascii, but
 170+ 6E50             >                org     $-1                 // alter last byte of Name just above to set
 170+ 6E4F CC          >                db      {b $} | END_BIT     // msb as name end
 170+ 6E50             >
 170+ 6E50 42 6E       >                dw      last_NFA            // Link to previous definition Name
 170+ 6E52             >DPL:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 170+ 6E52 E6 6C       >                dw      User_Ptr ; ok        // for primitive definitions  actual code
 170+ 6E54             >                else
 170+ 6E54 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 170+ 6E54             >                endif           ; ok        // for other definitions it "points" the correct handler
 170+ 6E54             >                // Use of "; ok" to suppress "warning[fwdref]"
 170+ 6E54             >
 170+ 6E54             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 170+ 6E54 30          >                db      48
 171+ 6E55                              User_Def FLD        , "FLD"       , 50 // output field width
 171+ 6E55             >                New_Def  FLD, "FLD", User_Ptr, is_normal
 171+ 6E55             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 171+ 6E55             >
 171+ 6E55             >                // dummy db directives used to calculate length of namec
 171+ 6E55 46 4C 44    >                db      "FLD"
 171+ 6E58             >len_NFA         defl    $ - temp_NFA
 171+ 6E58             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 171+ 6E55             >
 171+ 6E55 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 171+ 6E56 46 4C 44    >                db      "FLD"               // name string in 7-bit ascii, but
 171+ 6E59             >                org     $-1                 // alter last byte of Name just above to set
 171+ 6E58 C4          >                db      {b $} | END_BIT     // msb as name end
 171+ 6E59             >
 171+ 6E59 4C 6E       >                dw      last_NFA            // Link to previous definition Name
 171+ 6E5B             >FLD:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 171+ 6E5B E6 6C       >                dw      User_Ptr ; ok        // for primitive definitions  actual code
 171+ 6E5D             >                else
 171+ 6E5D ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 171+ 6E5D             >                endif           ; ok        // for other definitions it "points" the correct handler
 171+ 6E5D             >                // Use of "; ok" to suppress "warning[fwdref]"
 171+ 6E5D             >
 171+ 6E5D             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 171+ 6E5D 32          >                db      50
 172+ 6E5E                              User_Def CSP        , "CSP"       , 52 // used to temporary store Stack-Pointer value
 172+ 6E5E             >                New_Def  CSP, "CSP", User_Ptr, is_normal
 172+ 6E5E             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 172+ 6E5E             >
 172+ 6E5E             >                // dummy db directives used to calculate length of namec
 172+ 6E5E 43 53 50    >                db      "CSP"
 172+ 6E61             >len_NFA         defl    $ - temp_NFA
 172+ 6E61             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 172+ 6E5E             >
 172+ 6E5E 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 172+ 6E5F 43 53 50    >                db      "CSP"               // name string in 7-bit ascii, but
 172+ 6E62             >                org     $-1                 // alter last byte of Name just above to set
 172+ 6E61 D0          >                db      {b $} | END_BIT     // msb as name end
 172+ 6E62             >
 172+ 6E62 55 6E       >                dw      last_NFA            // Link to previous definition Name
 172+ 6E64             >CSP:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 172+ 6E64 E6 6C       >                dw      User_Ptr ; ok        // for primitive definitions  actual code
 172+ 6E66             >                else
 172+ 6E66 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 172+ 6E66             >                endif           ; ok        // for other definitions it "points" the correct handler
 172+ 6E66             >                // Use of "; ok" to suppress "warning[fwdref]"
 172+ 6E66             >
 172+ 6E66             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 172+ 6E66 34          >                db      52
 173+ 6E67                              User_Def RSHARP     , "R#"        , 54 // location of editing cursor
 173+ 6E67             >                New_Def  RSHARP, "R#", User_Ptr, is_normal
 173+ 6E67             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 173+ 6E67             >
 173+ 6E67             >                // dummy db directives used to calculate length of namec
 173+ 6E67 52 23       >                db      "R#"
 173+ 6E69             >len_NFA         defl    $ - temp_NFA
 173+ 6E69             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 173+ 6E67             >
 173+ 6E67 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 173+ 6E68 52 23       >                db      "R#"               // name string in 7-bit ascii, but
 173+ 6E6A             >                org     $-1                 // alter last byte of Name just above to set
 173+ 6E69 A3          >                db      {b $} | END_BIT     // msb as name end
 173+ 6E6A             >
 173+ 6E6A 5E 6E       >                dw      last_NFA            // Link to previous definition Name
 173+ 6E6C             >RSHARP:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 173+ 6E6C E6 6C       >                dw      User_Ptr ; ok        // for primitive definitions  actual code
 173+ 6E6E             >                else
 173+ 6E6E ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 173+ 6E6E             >                endif           ; ok        // for other definitions it "points" the correct handler
 173+ 6E6E             >                // Use of "; ok" to suppress "warning[fwdref]"
 173+ 6E6E             >
 173+ 6E6E             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 173+ 6E6E 36          >                db      54
 174+ 6E6F                              User_Def HLD        , "HLD"       , 56 // last character during a number conversion output
 174+ 6E6F             >                New_Def  HLD, "HLD", User_Ptr, is_normal
 174+ 6E6F             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 174+ 6E6F             >
 174+ 6E6F             >                // dummy db directives used to calculate length of namec
 174+ 6E6F 48 4C 44    >                db      "HLD"
 174+ 6E72             >len_NFA         defl    $ - temp_NFA
 174+ 6E72             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 174+ 6E6F             >
 174+ 6E6F 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 174+ 6E70 48 4C 44    >                db      "HLD"               // name string in 7-bit ascii, but
 174+ 6E73             >                org     $-1                 // alter last byte of Name just above to set
 174+ 6E72 C4          >                db      {b $} | END_BIT     // msb as name end
 174+ 6E73             >
 174+ 6E73 67 6E       >                dw      last_NFA            // Link to previous definition Name
 174+ 6E75             >HLD:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 174+ 6E75 E6 6C       >                dw      User_Ptr ; ok        // for primitive definitions  actual code
 174+ 6E77             >                else
 174+ 6E77 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 174+ 6E77             >                endif           ; ok        // for other definitions it "points" the correct handler
 174+ 6E77             >                // Use of "; ok" to suppress "warning[fwdref]"
 174+ 6E77             >
 174+ 6E77             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 174+ 6E77 38          >                db      56
 175+ 6E78                              User_Def USE        , "USE"       , 58 // address of last used block
 175+ 6E78             >                New_Def  USE, "USE", User_Ptr, is_normal
 175+ 6E78             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 175+ 6E78             >
 175+ 6E78             >                // dummy db directives used to calculate length of namec
 175+ 6E78 55 53 45    >                db      "USE"
 175+ 6E7B             >len_NFA         defl    $ - temp_NFA
 175+ 6E7B             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 175+ 6E78             >
 175+ 6E78 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 175+ 6E79 55 53 45    >                db      "USE"               // name string in 7-bit ascii, but
 175+ 6E7C             >                org     $-1                 // alter last byte of Name just above to set
 175+ 6E7B C5          >                db      {b $} | END_BIT     // msb as name end
 175+ 6E7C             >
 175+ 6E7C 6F 6E       >                dw      last_NFA            // Link to previous definition Name
 175+ 6E7E             >USE:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 175+ 6E7E E6 6C       >                dw      User_Ptr ; ok        // for primitive definitions  actual code
 175+ 6E80             >                else
 175+ 6E80 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 175+ 6E80             >                endif           ; ok        // for other definitions it "points" the correct handler
 175+ 6E80             >                // Use of "; ok" to suppress "warning[fwdref]"
 175+ 6E80             >
 175+ 6E80             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 175+ 6E80 3A          >                db      58
 176+ 6E81                              User_Def PREV       , "PREV"      , 60 // address of previous used block
 176+ 6E81             >                New_Def  PREV, "PREV", User_Ptr, is_normal
 176+ 6E81             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 176+ 6E81             >
 176+ 6E81             >                // dummy db directives used to calculate length of namec
 176+ 6E81 50 52 45 56 >                db      "PREV"
 176+ 6E85             >len_NFA         defl    $ - temp_NFA
 176+ 6E85             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 176+ 6E81             >
 176+ 6E81 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 176+ 6E82 50 52 45 56 >                db      "PREV"               // name string in 7-bit ascii, but
 176+ 6E86             >                org     $-1                 // alter last byte of Name just above to set
 176+ 6E85 D6          >                db      {b $} | END_BIT     // msb as name end
 176+ 6E86             >
 176+ 6E86 78 6E       >                dw      last_NFA            // Link to previous definition Name
 176+ 6E88             >PREV:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 176+ 6E88 E6 6C       >                dw      User_Ptr ; ok        // for primitive definitions  actual code
 176+ 6E8A             >                else
 176+ 6E8A ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 176+ 6E8A             >                endif           ; ok        // for other definitions it "points" the correct handler
 176+ 6E8A             >                // Use of "; ok" to suppress "warning[fwdref]"
 176+ 6E8A             >
 176+ 6E8A             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 176+ 6E8A 3C          >                db      60
 177+ 6E8B                              User_Def LP         , "LP"        , 62 // line printer (not used)
 177+ 6E8B             >                New_Def  LP, "LP", User_Ptr, is_normal
 177+ 6E8B             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 177+ 6E8B             >
 177+ 6E8B             >                // dummy db directives used to calculate length of namec
 177+ 6E8B 4C 50       >                db      "LP"
 177+ 6E8D             >len_NFA         defl    $ - temp_NFA
 177+ 6E8D             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 177+ 6E8B             >
 177+ 6E8B 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 177+ 6E8C 4C 50       >                db      "LP"               // name string in 7-bit ascii, but
 177+ 6E8E             >                org     $-1                 // alter last byte of Name just above to set
 177+ 6E8D D0          >                db      {b $} | END_BIT     // msb as name end
 177+ 6E8E             >
 177+ 6E8E 81 6E       >                dw      last_NFA            // Link to previous definition Name
 177+ 6E90             >LP:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 177+ 6E90 E6 6C       >                dw      User_Ptr ; ok        // for primitive definitions  actual code
 177+ 6E92             >                else
 177+ 6E92 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 177+ 6E92             >                endif           ; ok        // for other definitions it "points" the correct handler
 177+ 6E92             >                // Use of "; ok" to suppress "warning[fwdref]"
 177+ 6E92             >
 177+ 6E92             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 177+ 6E92 3E          >                db      62
 178+ 6E93                              User_Def PLACE      , "PLACE"     , 64 // number of digits after decimal point in output
 178+ 6E93             >                New_Def  PLACE, "PLACE", User_Ptr, is_normal
 178+ 6E93             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 178+ 6E93             >
 178+ 6E93             >                // dummy db directives used to calculate length of namec
 178+ 6E93 50 4C 41 43 >                db      "PLACE"
 178+ 6E97 45          >
 178+ 6E98             >len_NFA         defl    $ - temp_NFA
 178+ 6E98             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 178+ 6E93             >
 178+ 6E93 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 178+ 6E94 50 4C 41 43 >                db      "PLACE"               // name string in 7-bit ascii, but
 178+ 6E98 45          >
 178+ 6E99             >                org     $-1                 // alter last byte of Name just above to set
 178+ 6E98 C5          >                db      {b $} | END_BIT     // msb as name end
 178+ 6E99             >
 178+ 6E99 8B 6E       >                dw      last_NFA            // Link to previous definition Name
 178+ 6E9B             >PLACE:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 178+ 6E9B E6 6C       >                dw      User_Ptr ; ok        // for primitive definitions  actual code
 178+ 6E9D             >                else
 178+ 6E9D ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 178+ 6E9D             >                endif           ; ok        // for other definitions it "points" the correct handler
 178+ 6E9D             >                // Use of "; ok" to suppress "warning[fwdref]"
 178+ 6E9D             >
 178+ 6E9D             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 178+ 6E9D 40          >                db      64
 179+ 6E9E                              User_Def SOURCE_ID  , "SOURCE-ID" , 66 // data-stream number in INCLUDE and LOAD-
 179+ 6E9E             >                New_Def  SOURCE_ID, "SOURCE-ID", User_Ptr, is_normal
 179+ 6E9E             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 179+ 6E9E             >
 179+ 6E9E             >                // dummy db directives used to calculate length of namec
 179+ 6E9E 53 4F 55 52 >                db      "SOURCE-ID"
 179+ 6EA2 43 45 2D 49 >
 179+ 6EA6 44          >
 179+ 6EA7             >len_NFA         defl    $ - temp_NFA
 179+ 6EA7             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 179+ 6E9E             >
 179+ 6E9E 89          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 179+ 6E9F 53 4F 55 52 >                db      "SOURCE-ID"               // name string in 7-bit ascii, but
 179+ 6EA3 43 45 2D 49 >
 179+ 6EA7 44          >
 179+ 6EA8             >                org     $-1                 // alter last byte of Name just above to set
 179+ 6EA7 C4          >                db      {b $} | END_BIT     // msb as name end
 179+ 6EA8             >
 179+ 6EA8 93 6E       >                dw      last_NFA            // Link to previous definition Name
 179+ 6EAA             >SOURCE_ID:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 179+ 6EAA E6 6C       >                dw      User_Ptr ; ok        // for primitive definitions  actual code
 179+ 6EAC             >                else
 179+ 6EAC ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 179+ 6EAC             >                endif           ; ok        // for other definitions it "points" the correct handler
 179+ 6EAC             >                // Use of "; ok" to suppress "warning[fwdref]"
 179+ 6EAC             >
 179+ 6EAC             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 179+ 6EAC 42          >                db      66
 180+ 6EAD                              User_Def SPAN       , "SPAN"      , 68 // number of character of last EXPECT
 180+ 6EAD             >                New_Def  SPAN, "SPAN", User_Ptr, is_normal
 180+ 6EAD             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 180+ 6EAD             >
 180+ 6EAD             >                // dummy db directives used to calculate length of namec
 180+ 6EAD 53 50 41 4E >                db      "SPAN"
 180+ 6EB1             >len_NFA         defl    $ - temp_NFA
 180+ 6EB1             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 180+ 6EAD             >
 180+ 6EAD 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 180+ 6EAE 53 50 41 4E >                db      "SPAN"               // name string in 7-bit ascii, but
 180+ 6EB2             >                org     $-1                 // alter last byte of Name just above to set
 180+ 6EB1 CE          >                db      {b $} | END_BIT     // msb as name end
 180+ 6EB2             >
 180+ 6EB2 9E 6E       >                dw      last_NFA            // Link to previous definition Name
 180+ 6EB4             >SPAN:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 180+ 6EB4 E6 6C       >                dw      User_Ptr ; ok        // for primitive definitions  actual code
 180+ 6EB6             >                else
 180+ 6EB6 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 180+ 6EB6             >                endif           ; ok        // for other definitions it "points" the correct handler
 180+ 6EB6             >                // Use of "; ok" to suppress "warning[fwdref]"
 180+ 6EB6             >
 180+ 6EB6             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 180+ 6EB6 44          >                db      68
 181+ 6EB7                              User_Def HANDLER    , "HANDLER"   , 70 // Used by THROW-CATCH
 181+ 6EB7             >                New_Def  HANDLER, "HANDLER", User_Ptr, is_normal
 181+ 6EB7             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 181+ 6EB7             >
 181+ 6EB7             >                // dummy db directives used to calculate length of namec
 181+ 6EB7 48 41 4E 44 >                db      "HANDLER"
 181+ 6EBB 4C 45 52    >
 181+ 6EBE             >len_NFA         defl    $ - temp_NFA
 181+ 6EBE             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 181+ 6EB7             >
 181+ 6EB7 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 181+ 6EB8 48 41 4E 44 >                db      "HANDLER"               // name string in 7-bit ascii, but
 181+ 6EBC 4C 45 52    >
 181+ 6EBF             >                org     $-1                 // alter last byte of Name just above to set
 181+ 6EBE D2          >                db      {b $} | END_BIT     // msb as name end
 181+ 6EBF             >
 181+ 6EBF AD 6E       >                dw      last_NFA            // Link to previous definition Name
 181+ 6EC1             >HANDLER:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 181+ 6EC1 E6 6C       >                dw      User_Ptr ; ok        // for primitive definitions  actual code
 181+ 6EC3             >                else
 181+ 6EC3 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 181+ 6EC3             >                endif           ; ok        // for other definitions it "points" the correct handler
 181+ 6EC3             >                // Use of "; ok" to suppress "warning[fwdref]"
 181+ 6EC3             >
 181+ 6EC3             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 181+ 6EC3 46          >                db      70
 182+ 6EC4                              User_Def HP         , "HP"        , 72 // heap-pointer address
 182+ 6EC4             >                New_Def  HP, "HP", User_Ptr, is_normal
 182+ 6EC4             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 182+ 6EC4             >
 182+ 6EC4             >                // dummy db directives used to calculate length of namec
 182+ 6EC4 48 50       >                db      "HP"
 182+ 6EC6             >len_NFA         defl    $ - temp_NFA
 182+ 6EC6             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 182+ 6EC4             >
 182+ 6EC4 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 182+ 6EC5 48 50       >                db      "HP"               // name string in 7-bit ascii, but
 182+ 6EC7             >                org     $-1                 // alter last byte of Name just above to set
 182+ 6EC6 D0          >                db      {b $} | END_BIT     // msb as name end
 182+ 6EC7             >
 182+ 6EC7 B7 6E       >                dw      last_NFA            // Link to previous definition Name
 182+ 6EC9             >HP:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 182+ 6EC9 E6 6C       >                dw      User_Ptr ; ok        // for primitive definitions  actual code
 182+ 6ECB             >                else
 182+ 6ECB ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 182+ 6ECB             >                endif           ; ok        // for other definitions it "points" the correct handler
 182+ 6ECB             >                // Use of "; ok" to suppress "warning[fwdref]"
 182+ 6ECB             >
 182+ 6ECB             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 182+ 6ECB 48          >                db      72
 183+ 6ECC
 184+ 6ECC              //  ______________________________________________________________________
 185+ 6ECC              //
 186+ 6ECC              // here         -- a
 187+ 6ECC                              Colon_Def HERE, "HERE", is_normal
 187+ 6ECC             >                New_Def  HERE, "HERE", Enter_Ptr, is_normal ; ok
 187+ 6ECC             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 187+ 6ECC             >
 187+ 6ECC             >                // dummy db directives used to calculate length of namec
 187+ 6ECC 48 45 52 45 >                db      "HERE"
 187+ 6ED0             >len_NFA         defl    $ - temp_NFA
 187+ 6ED0             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 187+ 6ECC             >
 187+ 6ECC 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 187+ 6ECD 48 45 52 45 >                db      "HERE"               // name string in 7-bit ascii, but
 187+ 6ED1             >                org     $-1                 // alter last byte of Name just above to set
 187+ 6ED0 C5          >                db      {b $} | END_BIT     // msb as name end
 187+ 6ED1             >
 187+ 6ED1 C4 6E       >                dw      last_NFA            // Link to previous definition Name
 187+ 6ED3             >HERE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 187+ 6ED3 79 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 187+ 6ED5             >                else
 187+ 6ED5 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 187+ 6ED5             >                endif           ; ok        // for other definitions it "points" the correct handler
 187+ 6ED5             >                // Use of "; ok" to suppress "warning[fwdref]"
 187+ 6ED5             >
 187+ 6ED5             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 188+ 6ED5 B2 6D 97 6B                  dw      DP, FETCH               // dp @
 189+ 6ED9 A3 69                        dw      EXIT                    // ;
 190+ 6EDB
 191+ 6EDB              //  ______________________________________________________________________
 192+ 6EDB              //
 193+ 6EDB              // allot        n --
 194+ 6EDB                              Colon_Def ALLOT, "ALLOT", is_normal
 194+ 6EDB             >                New_Def  ALLOT, "ALLOT", Enter_Ptr, is_normal ; ok
 194+ 6EDB             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 194+ 6EDB             >
 194+ 6EDB             >                // dummy db directives used to calculate length of namec
 194+ 6EDB 41 4C 4C 4F >                db      "ALLOT"
 194+ 6EDF 54          >
 194+ 6EE0             >len_NFA         defl    $ - temp_NFA
 194+ 6EE0             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 194+ 6EDB             >
 194+ 6EDB 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 194+ 6EDC 41 4C 4C 4F >                db      "ALLOT"               // name string in 7-bit ascii, but
 194+ 6EE0 54          >
 194+ 6EE1             >                org     $-1                 // alter last byte of Name just above to set
 194+ 6EE0 D4          >                db      {b $} | END_BIT     // msb as name end
 194+ 6EE1             >
 194+ 6EE1 CC 6E       >                dw      last_NFA            // Link to previous definition Name
 194+ 6EE3             >ALLOT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 194+ 6EE3 79 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 194+ 6EE5             >                else
 194+ 6EE5 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 194+ 6EE5             >                endif           ; ok        // for other definitions it "points" the correct handler
 194+ 6EE5             >                // Use of "; ok" to suppress "warning[fwdref]"
 194+ 6EE5             >
 194+ 6EE5             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 195+ 6EE5 B2 6D 74 6B                  dw      DP,  PLUSSTORE          // dp +!
 196+ 6EE9 A3 69                        dw      EXIT                    // ;
 197+ 6EEB
 198+ 6EEB              //  ______________________________________________________________________
 199+ 6EEB              //
 200+ 6EEB              // comma        n --
 201+ 6EEB                              Colon_Def COMMA, ",", is_normal
 201+ 6EEB             >                New_Def  COMMA, ",", Enter_Ptr, is_normal ; ok
 201+ 6EEB             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 201+ 6EEB             >
 201+ 6EEB             >                // dummy db directives used to calculate length of namec
 201+ 6EEB 2C          >                db      ","
 201+ 6EEC             >len_NFA         defl    $ - temp_NFA
 201+ 6EEC             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 201+ 6EEB             >
 201+ 6EEB 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 201+ 6EEC 2C          >                db      ","               // name string in 7-bit ascii, but
 201+ 6EED             >                org     $-1                 // alter last byte of Name just above to set
 201+ 6EEC AC          >                db      {b $} | END_BIT     // msb as name end
 201+ 6EED             >
 201+ 6EED DB 6E       >                dw      last_NFA            // Link to previous definition Name
 201+ 6EEF             >COMMA:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 201+ 6EEF 79 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 201+ 6EF1             >                else
 201+ 6EF1 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 201+ 6EF1             >                endif           ; ok        // for other definitions it "points" the correct handler
 201+ 6EF1             >                // Use of "; ok" to suppress "warning[fwdref]"
 201+ 6EF1             >
 201+ 6EF1             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 202+ 6EF1 D3 6E A4 6B                  dw      HERE, STORE             // here !
 203+ 6EF5 04 6D E3 6E                  dw      TWO, ALLOT              // 2 allot
 204+ 6EF9 A3 69                        dw      EXIT                    // ;
 205+ 6EFB
 206+ 6EFB              //  ______________________________________________________________________
 207+ 6EFB              //
 208+ 6EFB              // ccomma       c --
 209+ 6EFB                              Colon_Def CCOMMA, "C,", is_normal
 209+ 6EFB             >                New_Def  CCOMMA, "C,", Enter_Ptr, is_normal ; ok
 209+ 6EFB             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 209+ 6EFB             >
 209+ 6EFB             >                // dummy db directives used to calculate length of namec
 209+ 6EFB 43 2C       >                db      "C,"
 209+ 6EFD             >len_NFA         defl    $ - temp_NFA
 209+ 6EFD             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 209+ 6EFB             >
 209+ 6EFB 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 209+ 6EFC 43 2C       >                db      "C,"               // name string in 7-bit ascii, but
 209+ 6EFE             >                org     $-1                 // alter last byte of Name just above to set
 209+ 6EFD AC          >                db      {b $} | END_BIT     // msb as name end
 209+ 6EFE             >
 209+ 6EFE EB 6E       >                dw      last_NFA            // Link to previous definition Name
 209+ 6F00             >CCOMMA:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 209+ 6F00 79 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 209+ 6F02             >                else
 209+ 6F02 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 209+ 6F02             >                endif           ; ok        // for other definitions it "points" the correct handler
 209+ 6F02             >                // Use of "; ok" to suppress "warning[fwdref]"
 209+ 6F02             >
 209+ 6F02             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 210+ 6F02 D3 6E C0 6B                  dw      HERE, CSTORE            // here c!
 211+ 6F06 FC 6C E3 6E                  dw      ONE, ALLOT              // 1 allot
 212+ 6F0A A3 69                        dw      EXIT                    // ;
 213+ 6F0C
 214+ 6F0C              //  ______________________________________________________________________
 215+ 6F0C              //
 216+ 6F0C              // s>d          n -- d
 217+ 6F0C              // converts a single precision integer in a double precision
 218+ 6F0C                              New_Def S_TO_D, "S>D", is_code, is_normal
 218+ 6F0C             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 218+ 6F0C             >
 218+ 6F0C             >                // dummy db directives used to calculate length of namec
 218+ 6F0C 53 3E 44    >                db      "S>D"
 218+ 6F0F             >len_NFA         defl    $ - temp_NFA
 218+ 6F0F             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 218+ 6F0C             >
 218+ 6F0C 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 218+ 6F0D 53 3E 44    >                db      "S>D"               // name string in 7-bit ascii, but
 218+ 6F10             >                org     $-1                 // alter last byte of Name just above to set
 218+ 6F0F C4          >                db      {b $} | END_BIT     // msb as name end
 218+ 6F10             >
 218+ 6F10 FB 6E       >                dw      last_NFA            // Link to previous definition Name
 218+ 6F12             >S_TO_D:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 218+ 6F12 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
 218+ 6F12             >                else
 218+ 6F12 14 6F       >                dw      $ + 2   ; ok        // is pointed by CFA
 218+ 6F14             >                endif           ; ok        // for other definitions it "points" the correct handler
 218+ 6F14             >                // Use of "; ok" to suppress "warning[fwdref]"
 218+ 6F14             >
 218+ 6F14             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 219+ 6F14 E1                           pop     hl
 220+ 6F15 7C                           ld      a, h
 221+ 6F16 E5                           push    hl
 222+ 6F17 17                           rla
 223+ 6F18 ED 62                        sbc     hl, hl
 224+ 6F1A E5                           push    hl
 225+ 6F1B                              next
 225+ 6F1B DD E9       >                jp      (ix)
 226+ 6F1D
 227+ 6F1D              //  ______________________________________________________________________
 228+ 6F1D              //
 229+ 6F1D              // -            n1 n2 -- n3
 230+ 6F1D              // subtraction
 231+ 6F1D                              New_Def SUBTRACT, "-", is_code, is_normal
 231+ 6F1D             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 231+ 6F1D             >
 231+ 6F1D             >                // dummy db directives used to calculate length of namec
 231+ 6F1D 2D          >                db      "-"
 231+ 6F1E             >len_NFA         defl    $ - temp_NFA
 231+ 6F1E             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 231+ 6F1D             >
 231+ 6F1D 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 231+ 6F1E 2D          >                db      "-"               // name string in 7-bit ascii, but
 231+ 6F1F             >                org     $-1                 // alter last byte of Name just above to set
 231+ 6F1E AD          >                db      {b $} | END_BIT     // msb as name end
 231+ 6F1F             >
 231+ 6F1F 0C 6F       >                dw      last_NFA            // Link to previous definition Name
 231+ 6F21             >SUBTRACT:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 231+ 6F21 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
 231+ 6F21             >                else
 231+ 6F21 23 6F       >                dw      $ + 2   ; ok        // is pointed by CFA
 231+ 6F23             >                endif           ; ok        // for other definitions it "points" the correct handler
 231+ 6F23             >                // Use of "; ok" to suppress "warning[fwdref]"
 231+ 6F23             >
 231+ 6F23             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 232+ 6F23 D1                           pop     de
 233+ 6F24 E1                           pop     hl
 234+ 6F25 A7                           and     a
 235+ 6F26 ED 52                        sbc     hl, de
 236+ 6F28
 237+ 6F28                              psh1
 237+ 6F28 E5          >                push    hl
 237+ 6F29 DD E9       >                jp      (ix)
 238+ 6F2B
 239+ 6F2B              //  ______________________________________________________________________
 240+ 6F2B              //
 241+ 6F2B              // =            n1 n2 -- n3
 242+ 6F2B              // equals
 243+ 6F2B                              Colon_Def EQUALS, "=", is_normal
 243+ 6F2B             >                New_Def  EQUALS, "=", Enter_Ptr, is_normal ; ok
 243+ 6F2B             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 243+ 6F2B             >
 243+ 6F2B             >                // dummy db directives used to calculate length of namec
 243+ 6F2B 3D          >                db      "="
 243+ 6F2C             >len_NFA         defl    $ - temp_NFA
 243+ 6F2C             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 243+ 6F2B             >
 243+ 6F2B 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 243+ 6F2C 3D          >                db      "="               // name string in 7-bit ascii, but
 243+ 6F2D             >                org     $-1                 // alter last byte of Name just above to set
 243+ 6F2C BD          >                db      {b $} | END_BIT     // msb as name end
 243+ 6F2D             >
 243+ 6F2D 1D 6F       >                dw      last_NFA            // Link to previous definition Name
 243+ 6F2F             >EQUALS:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 243+ 6F2F 79 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 243+ 6F31             >                else
 243+ 6F31 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 243+ 6F31             >                endif           ; ok        // for other definitions it "points" the correct handler
 243+ 6F31             >                // Use of "; ok" to suppress "warning[fwdref]"
 243+ 6F31             >
 243+ 6F31             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 244+ 6F31 21 6F E5 69                  dw      SUBTRACT, ZEQUAL        // - 0=
 245+ 6F35 A3 69                        dw      EXIT                    // ;
 246+ 6F37
 247+ 6F37              //  ______________________________________________________________________
 248+ 6F37              //
 249+ 6F37              // u<           u1 u2 -- u3
 250+ 6F37              // unsigned less-than
 251+ 6F37                              New_Def ULESS, "U<", is_code, is_normal
 251+ 6F37             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 251+ 6F37             >
 251+ 6F37             >                // dummy db directives used to calculate length of namec
 251+ 6F37 55 3C       >                db      "U<"
 251+ 6F39             >len_NFA         defl    $ - temp_NFA
 251+ 6F39             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 251+ 6F37             >
 251+ 6F37 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 251+ 6F38 55 3C       >                db      "U<"               // name string in 7-bit ascii, but
 251+ 6F3A             >                org     $-1                 // alter last byte of Name just above to set
 251+ 6F39 BC          >                db      {b $} | END_BIT     // msb as name end
 251+ 6F3A             >
 251+ 6F3A 2B 6F       >                dw      last_NFA            // Link to previous definition Name
 251+ 6F3C             >ULESS:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 251+ 6F3C ~           >                dw      runcode ; ok        // for primitive definitions  actual code
 251+ 6F3C             >                else
 251+ 6F3C 3E 6F       >                dw      $ + 2   ; ok        // is pointed by CFA
 251+ 6F3E             >                endif           ; ok        // for other definitions it "points" the correct handler
 251+ 6F3E             >                // Use of "; ok" to suppress "warning[fwdref]"
 251+ 6F3E             >
 251+ 6F3E             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 252+ 6F3E D1                           pop     de
 253+ 6F3F E1                           pop     hl
 254+ 6F40 A7                           and     a
 255+ 6F41 ED 52                        sbc     hl, de
 256+ 6F43 ED 62                        sbc     hl, hl
 257+ 6F45 E5                           push    hl
 258+ 6F46                              next
 258+ 6F46 DD E9       >                jp      (ix)
 259+ 6F48
 260+ 6F48              //  ______________________________________________________________________
 261+ 6F48              //
 262+ 6F48              // <           n1 n2 -- n3
 263+ 6F48              // less-than
 264+ 6F48                              New_Def LESS, "<", is_code, is_normal
 264+ 6F48             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 264+ 6F48             >
 264+ 6F48             >                // dummy db directives used to calculate length of namec
 264+ 6F48 3C          >                db      "<"
 264+ 6F49             >len_NFA         defl    $ - temp_NFA
 264+ 6F49             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 264+ 6F48             >
 264+ 6F48 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 264+ 6F49 3C          >                db      "<"               // name string in 7-bit ascii, but
 264+ 6F4A             >                org     $-1                 // alter last byte of Name just above to set
 264+ 6F49 BC          >                db      {b $} | END_BIT     // msb as name end
 264+ 6F4A             >
 264+ 6F4A 37 6F       >                dw      last_NFA            // Link to previous definition Name
 264+ 6F4C             >LESS:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 264+ 6F4C ~           >                dw      runcode ; ok        // for primitive definitions  actual code
 264+ 6F4C             >                else
 264+ 6F4C 4E 6F       >                dw      $ + 2   ; ok        // is pointed by CFA
 264+ 6F4E             >                endif           ; ok        // for other definitions it "points" the correct handler
 264+ 6F4E             >                // Use of "; ok" to suppress "warning[fwdref]"
 264+ 6F4E             >
 264+ 6F4E             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 265+ 6F4E D1                           pop     de
 266+ 6F4F E1                           pop     hl
 267+ 6F50 7C                           ld      a, h
 268+ 6F51 EE 80                        xor     $80
 269+ 6F53 67                           ld      h, a
 270+ 6F54 7A                           ld      a, d
 271+ 6F55 EE 80                        xor     $80
 272+ 6F57 57                           ld      d, a
 273+ 6F58              //              and     a
 274+ 6F58 ED 52                        sbc     hl, de
 275+ 6F5A ED 62                        sbc     hl, hl
 276+ 6F5C                              psh1
 276+ 6F5C E5          >                push    hl
 276+ 6F5D DD E9       >                jp      (ix)
 277+ 6F5F
 278+ 6F5F              //  ______________________________________________________________________
 279+ 6F5F              //
 280+ 6F5F              // >            n1 n2 -- n3
 281+ 6F5F              // greater than
 282+ 6F5F                              Colon_Def GREATER, ">", is_normal
 282+ 6F5F             >                New_Def  GREATER, ">", Enter_Ptr, is_normal ; ok
 282+ 6F5F             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 282+ 6F5F             >
 282+ 6F5F             >                // dummy db directives used to calculate length of namec
 282+ 6F5F 3E          >                db      ">"
 282+ 6F60             >len_NFA         defl    $ - temp_NFA
 282+ 6F60             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 282+ 6F5F             >
 282+ 6F5F 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 282+ 6F60 3E          >                db      ">"               // name string in 7-bit ascii, but
 282+ 6F61             >                org     $-1                 // alter last byte of Name just above to set
 282+ 6F60 BE          >                db      {b $} | END_BIT     // msb as name end
 282+ 6F61             >
 282+ 6F61 48 6F       >                dw      last_NFA            // Link to previous definition Name
 282+ 6F63             >GREATER:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 282+ 6F63 79 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 282+ 6F65             >                else
 282+ 6F65 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 282+ 6F65             >                endif           ; ok        // for other definitions it "points" the correct handler
 282+ 6F65             >                // Use of "; ok" to suppress "warning[fwdref]"
 282+ 6F65             >
 282+ 6F65             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 283+ 6F65 F7 6A 4C 6F                  dw      SWAP, LESS              // swap <
 284+ 6F69 A3 69                        dw      EXIT                    // ;
 285+ 6F6B              //  ______________________________________________________________________
 286+ 6F6B              //
 287+ 6F6B              // min          n1 n2 -- n3
 288+ 6F6B              // minimum between n1 and n2
 289+ 6F6B                              Colon_Def MIN, "MIN" , is_normal
 289+ 6F6B             >                New_Def  MIN, "MIN", Enter_Ptr, is_normal ; ok
 289+ 6F6B             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 289+ 6F6B             >
 289+ 6F6B             >                // dummy db directives used to calculate length of namec
 289+ 6F6B 4D 49 4E    >                db      "MIN"
 289+ 6F6E             >len_NFA         defl    $ - temp_NFA
 289+ 6F6E             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 289+ 6F6B             >
 289+ 6F6B 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 289+ 6F6C 4D 49 4E    >                db      "MIN"               // name string in 7-bit ascii, but
 289+ 6F6F             >                org     $-1                 // alter last byte of Name just above to set
 289+ 6F6E CE          >                db      {b $} | END_BIT     // msb as name end
 289+ 6F6F             >
 289+ 6F6F 5F 6F       >                dw      last_NFA            // Link to previous definition Name
 289+ 6F71             >MIN:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 289+ 6F71 79 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 289+ 6F73             >                else
 289+ 6F73 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 289+ 6F73             >                endif           ; ok        // for other definitions it "points" the correct handler
 289+ 6F73             >                // Use of "; ok" to suppress "warning[fwdref]"
 289+ 6F73             >
 289+ 6F73             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 290+ 6F73 65 6B                        dw      TWO_DUP                 // 2dup
 291+ 6F75 63 6F                        dw      GREATER                 // >
 292+ 6F77 2C 64                        dw      ZBRANCH
 293+ 6F79 04 00                        dw      Min_Skip - $   // if
 294+ 6F7B F7 6A                        dw          SWAP                //      swap
 295+ 6F7D              Min_Skip:                                       // endif
 296+ 6F7D CF 6A                        dw      DROP                    // drop
 297+ 6F7F A3 69                        dw      EXIT                    // ;
 298+ 6F81
 299+ 6F81              //  ______________________________________________________________________
 300+ 6F81              //
 301+ 6F81              // max          n1 n2 -- n3
 302+ 6F81              // maximum between n1 and n2
 303+ 6F81                              Colon_Def MAX, "MAX", is_normal
 303+ 6F81             >                New_Def  MAX, "MAX", Enter_Ptr, is_normal ; ok
 303+ 6F81             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 303+ 6F81             >
 303+ 6F81             >                // dummy db directives used to calculate length of namec
 303+ 6F81 4D 41 58    >                db      "MAX"
 303+ 6F84             >len_NFA         defl    $ - temp_NFA
 303+ 6F84             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 303+ 6F81             >
 303+ 6F81 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 303+ 6F82 4D 41 58    >                db      "MAX"               // name string in 7-bit ascii, but
 303+ 6F85             >                org     $-1                 // alter last byte of Name just above to set
 303+ 6F84 D8          >                db      {b $} | END_BIT     // msb as name end
 303+ 6F85             >
 303+ 6F85 6B 6F       >                dw      last_NFA            // Link to previous definition Name
 303+ 6F87             >MAX:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 303+ 6F87 79 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 303+ 6F89             >                else
 303+ 6F89 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 303+ 6F89             >                endif           ; ok        // for other definitions it "points" the correct handler
 303+ 6F89             >                // Use of "; ok" to suppress "warning[fwdref]"
 303+ 6F89             >
 303+ 6F89             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 304+ 6F89 65 6B                        dw      TWO_DUP                 // 2dup
 305+ 6F8B 4C 6F                        dw      LESS                    // <
 306+ 6F8D 2C 64                        dw      ZBRANCH
 307+ 6F8F 04 00                        dw      Max_Skip - $   // if
 308+ 6F91 F7 6A                        dw          SWAP                //      swap
 309+ 6F93              Max_Skip:                                       // endif
 310+ 6F93 CF 6A                        dw      DROP                    // drop
 311+ 6F95 A3 69                        dw      EXIT                    // ;
 312+ 6F97
 313+ 6F97              //  ______________________________________________________________________
 314+ 6F97              //
 315+ 6F97              // ?dup         n -- 0 | n n
 316+ 6F97              // duplicate if not zero
 317+ 6F97                              New_Def QDUP, "?DUP", is_code, is_normal
 317+ 6F97             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 317+ 6F97             >
 317+ 6F97             >                // dummy db directives used to calculate length of namec
 317+ 6F97 3F 44 55 50 >                db      "?DUP"
 317+ 6F9B             >len_NFA         defl    $ - temp_NFA
 317+ 6F9B             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 317+ 6F97             >
 317+ 6F97 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 317+ 6F98 3F 44 55 50 >                db      "?DUP"               // name string in 7-bit ascii, but
 317+ 6F9C             >                org     $-1                 // alter last byte of Name just above to set
 317+ 6F9B D0          >                db      {b $} | END_BIT     // msb as name end
 317+ 6F9C             >
 317+ 6F9C 81 6F       >                dw      last_NFA            // Link to previous definition Name
 317+ 6F9E             >QDUP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 317+ 6F9E ~           >                dw      runcode ; ok        // for primitive definitions  actual code
 317+ 6F9E             >                else
 317+ 6F9E A0 6F       >                dw      $ + 2   ; ok        // is pointed by CFA
 317+ 6FA0             >                endif           ; ok        // for other definitions it "points" the correct handler
 317+ 6FA0             >                // Use of "; ok" to suppress "warning[fwdref]"
 317+ 6FA0             >
 317+ 6FA0             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 318+ 6FA0              QDup_Ptr:
 319+ 6FA0 E1                           pop     hl
 320+ 6FA1 7C                           ld      a, h
 321+ 6FA2 B5                           or      l
 322+ 6FA3 28 01                        jr      z, QDup_Skip
 323+ 6FA5 E5                               push    hl
 324+ 6FA6              QDup_Skip:
 325+ 6FA6                              psh1
 325+ 6FA6 E5          >                push    hl
 325+ 6FA7 DD E9       >                jp      (ix)
 326+ 6FA9
 327+ 6FA9              //  ______________________________________________________________________
 328+ 6FA9              //
 329+ 6FA9              // -dup         n -- 0 | n n
 330+ 6FA9              // duplicate if not zero
 331+ 6FA9                              New_Def LDUP, "-DUP", QDup_Ptr, is_normal
 331+ 6FA9             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 331+ 6FA9             >
 331+ 6FA9             >                // dummy db directives used to calculate length of namec
 331+ 6FA9 2D 44 55 50 >                db      "-DUP"
 331+ 6FAD             >len_NFA         defl    $ - temp_NFA
 331+ 6FAD             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 331+ 6FA9             >
 331+ 6FA9 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 331+ 6FAA 2D 44 55 50 >                db      "-DUP"               // name string in 7-bit ascii, but
 331+ 6FAE             >                org     $-1                 // alter last byte of Name just above to set
 331+ 6FAD D0          >                db      {b $} | END_BIT     // msb as name end
 331+ 6FAE             >
 331+ 6FAE 97 6F       >                dw      last_NFA            // Link to previous definition Name
 331+ 6FB0             >LDUP:          if QDup_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 331+ 6FB0 A0 6F       >                dw      QDup_Ptr ; ok        // for primitive definitions  actual code
 331+ 6FB2             >                else
 331+ 6FB2 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 331+ 6FB2             >                endif           ; ok        // for other definitions it "points" the correct handler
 331+ 6FB2             >                // Use of "; ok" to suppress "warning[fwdref]"
 331+ 6FB2             >
 331+ 6FB2             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 332+ 6FB2
 333+ 6FB2              //  ______________________________________________________________________
 334+ 6FB2              //
 335+ 6FB2              // emit         c --
 336+ 6FB2                              Colon_Def EMIT, "EMIT", is_normal
 336+ 6FB2             >                New_Def  EMIT, "EMIT", Enter_Ptr, is_normal ; ok
 336+ 6FB2             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 336+ 6FB2             >
 336+ 6FB2             >                // dummy db directives used to calculate length of namec
 336+ 6FB2 45 4D 49 54 >                db      "EMIT"
 336+ 6FB6             >len_NFA         defl    $ - temp_NFA
 336+ 6FB6             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 336+ 6FB2             >
 336+ 6FB2 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 336+ 6FB3 45 4D 49 54 >                db      "EMIT"               // name string in 7-bit ascii, but
 336+ 6FB7             >                org     $-1                 // alter last byte of Name just above to set
 336+ 6FB6 D4          >                db      {b $} | END_BIT     // msb as name end
 336+ 6FB7             >
 336+ 6FB7 A9 6F       >                dw      last_NFA            // Link to previous definition Name
 336+ 6FB9             >EMIT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 336+ 6FB9 79 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 336+ 6FBB             >                else
 336+ 6FBB ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 336+ 6FBB             >                endif           ; ok        // for other definitions it "points" the correct handler
 336+ 6FBB             >                // Use of "; ok" to suppress "warning[fwdref]"
 336+ 6FBB             >
 336+ 6FBB             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 337+ 6FBB 52 66                        dw      C_EMIT                      // (?emit)
 338+ 6FBD 9E 6F                        dw      QDUP                        // ?dup
 339+ 6FBF                                                                  // if
 340+ 6FBF 2C 64                        dw      ZBRANCH
 341+ 6FC1 0A 00                        dw      Emit_Skip - $
 342+ 6FC3 13 66                        dw          EMITC                   //      emitc
 343+ 6FC5 FC 6C                        dw          ONE                     //      1
 344+ 6FC7 05 6E 74 6B                  dw          OUT, PLUSSTORE        //      out +!
 345+ 6FCB              Emit_Skip:                                          // endif
 346+ 6FCB A3 69                        dw      EXIT                        // ;
 347+ 6FCD
 348+ 6FCD              //  ______________________________________________________________________
 349+ 6FCD              //
 350+ 6FCD              // space        --
 351+ 6FCD                              Colon_Def SPACE, "SPACE", is_normal
 351+ 6FCD             >                New_Def  SPACE, "SPACE", Enter_Ptr, is_normal ; ok
 351+ 6FCD             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 351+ 6FCD             >
 351+ 6FCD             >                // dummy db directives used to calculate length of namec
 351+ 6FCD 53 50 41 43 >                db      "SPACE"
 351+ 6FD1 45          >
 351+ 6FD2             >len_NFA         defl    $ - temp_NFA
 351+ 6FD2             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 351+ 6FCD             >
 351+ 6FCD 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 351+ 6FCE 53 50 41 43 >                db      "SPACE"               // name string in 7-bit ascii, but
 351+ 6FD2 45          >
 351+ 6FD3             >                org     $-1                 // alter last byte of Name just above to set
 351+ 6FD2 C5          >                db      {b $} | END_BIT     // msb as name end
 351+ 6FD3             >
 351+ 6FD3 B2 6F       >                dw      last_NFA            // Link to previous definition Name
 351+ 6FD5             >SPACE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 351+ 6FD5 79 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 351+ 6FD7             >                else
 351+ 6FD7 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 351+ 6FD7             >                endif           ; ok        // for other definitions it "points" the correct handler
 351+ 6FD7             >                // Use of "; ok" to suppress "warning[fwdref]"
 351+ 6FD7             >
 351+ 6FD7             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 352+ 6FD7 1E 6D B9 6F                  dw      BL, EMIT                // bl emit
 353+ 6FDB A3 69                        dw      EXIT                    // ;
 354+ 6FDD
 355+ 6FDD              //  ______________________________________________________________________
 356+ 6FDD              //
 357+ 6FDD              // traverse     a n -- a
 358+ 6FDD              // A dictionary entry is structured as follows
 359+ 6FDD              // NFA: +0   one byte of word-length (n<32) | some flags (immediate, smudge) | $80
 360+ 6FDD              //      +1   word name, last character is toggled with $80
 361+ 6FDD              // LFA: +1+n link to NFA ofprevious  dictionary entry.
 362+ 6FDD              // CFA: +3+n routine address. Colon definitions here have pointer to code
 363+ 6FDD              // PFA: +5+n "is_code", definitions have no PFA.
 364+ 6FDD              //
 365+ 6FDD                              Colon_Def TRAVERSE, "TRAVERSE", is_normal
 365+ 6FDD             >                New_Def  TRAVERSE, "TRAVERSE", Enter_Ptr, is_normal ; ok
 365+ 6FDD             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 365+ 6FDD             >
 365+ 6FDD             >                // dummy db directives used to calculate length of namec
 365+ 6FDD 54 52 41 56 >                db      "TRAVERSE"
 365+ 6FE1 45 52 53 45 >
 365+ 6FE5             >len_NFA         defl    $ - temp_NFA
 365+ 6FE5             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 365+ 6FDD             >
 365+ 6FDD 88          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 365+ 6FDE 54 52 41 56 >                db      "TRAVERSE"               // name string in 7-bit ascii, but
 365+ 6FE2 45 52 53 45 >
 365+ 6FE6             >                org     $-1                 // alter last byte of Name just above to set
 365+ 6FE5 C5          >                db      {b $} | END_BIT     // msb as name end
 365+ 6FE6             >
 365+ 6FE6 CD 6F       >                dw      last_NFA            // Link to previous definition Name
 365+ 6FE8             >TRAVERSE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 365+ 6FE8 79 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 365+ 6FEA             >                else
 365+ 6FEA ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 365+ 6FEA             >                endif           ; ok        // for other definitions it "points" the correct handler
 365+ 6FEA             >                // Use of "; ok" to suppress "warning[fwdref]"
 365+ 6FEA             >
 365+ 6FEA             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 366+ 6FEA F7 6A                        dw      SWAP                    // swap
 367+ 6FEC              Traverse_Begin:                                 // begin
 368+ 6FEC BF 6A 24 6A                  dw          OVER, PLUS          //      over +
 369+ 6FF0 A9 63 7F 00                  dw          LIT, 127            //      127
 370+ 6FF4 BF 6A B2 6B                  dw          OVER, CFETCH        //      over @
 371+ 6FF8 4C 6F                        dw          LESS                //      <
 372+ 6FFA                                                              // until
 373+ 6FFA 2C 64                        dw      ZBRANCH
 374+ 6FFC F0 FF                        dw      Traverse_Begin - $
 375+ 6FFE DA 6A                        dw      NIP                     //  nip
 376+ 7000 A3 69                        dw      EXIT                    //  ;
 377+ 7002
 378+ 7002              //  ______________________________________________________________________
 379+ 7002              //
 380+ 7002              // latest       -- nfa
 381+ 7002                              Colon_Def LATEST, "LATEST", is_normal
 381+ 7002             >                New_Def  LATEST, "LATEST", Enter_Ptr, is_normal ; ok
 381+ 7002             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 381+ 7002             >
 381+ 7002             >                // dummy db directives used to calculate length of namec
 381+ 7002 4C 41 54 45 >                db      "LATEST"
 381+ 7006 53 54       >
 381+ 7008             >len_NFA         defl    $ - temp_NFA
 381+ 7008             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 381+ 7002             >
 381+ 7002 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 381+ 7003 4C 41 54 45 >                db      "LATEST"               // name string in 7-bit ascii, but
 381+ 7007 53 54       >
 381+ 7009             >                org     $-1                 // alter last byte of Name just above to set
 381+ 7008 D4          >                db      {b $} | END_BIT     // msb as name end
 381+ 7009             >
 381+ 7009 DD 6F       >                dw      last_NFA            // Link to previous definition Name
 381+ 700B             >LATEST:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 381+ 700B 79 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 381+ 700D             >                else
 381+ 700D ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 381+ 700D             >                endif           ; ok        // for other definitions it "points" the correct handler
 381+ 700D             >                // Use of "; ok" to suppress "warning[fwdref]"
 381+ 700D             >
 381+ 700D             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 382+ 700D 34 6E                        dw      CURRENT                 // current
 383+ 700F 97 6B 97 6B                  dw      FETCH, FETCH            // @ @
 384+ 7013 A3 69                        dw      EXIT                    // ;
 385+ 7015
 386+ 7015              //  ______________________________________________________________________
 387+ 7015              //
 388+ 7015              // lfa          pfa -- lfa
 389+ 7015                              Colon_Def LFA, "LFA", is_normal
 389+ 7015             >                New_Def  LFA, "LFA", Enter_Ptr, is_normal ; ok
 389+ 7015             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 389+ 7015             >
 389+ 7015             >                // dummy db directives used to calculate length of namec
 389+ 7015 4C 46 41    >                db      "LFA"
 389+ 7018             >len_NFA         defl    $ - temp_NFA
 389+ 7018             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 389+ 7015             >
 389+ 7015 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 389+ 7016 4C 46 41    >                db      "LFA"               // name string in 7-bit ascii, but
 389+ 7019             >                org     $-1                 // alter last byte of Name just above to set
 389+ 7018 C1          >                db      {b $} | END_BIT     // msb as name end
 389+ 7019             >
 389+ 7019 02 70       >                dw      last_NFA            // Link to previous definition Name
 389+ 701B             >LFA:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 389+ 701B 79 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 389+ 701D             >                else
 389+ 701D ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 389+ 701D             >                endif           ; ok        // for other definitions it "points" the correct handler
 389+ 701D             >                // Use of "; ok" to suppress "warning[fwdref]"
 389+ 701D             >
 389+ 701D             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 390+ 701D 77 6A                        dw      CELL_MINUS              // cell-
 391+ 701F 77 6A                        dw      CELL_MINUS              // cell-
 392+ 7021 A3 69                        dw      EXIT                    // ;
 393+ 7023
 394+ 7023              //  ______________________________________________________________________
 395+ 7023              //
 396+ 7023              // cfa          pfa -- cfa
 397+ 7023                              Colon_Def CFA, "CFA", is_normal
 397+ 7023             >                New_Def  CFA, "CFA", Enter_Ptr, is_normal ; ok
 397+ 7023             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 397+ 7023             >
 397+ 7023             >                // dummy db directives used to calculate length of namec
 397+ 7023 43 46 41    >                db      "CFA"
 397+ 7026             >len_NFA         defl    $ - temp_NFA
 397+ 7026             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 397+ 7023             >
 397+ 7023 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 397+ 7024 43 46 41    >                db      "CFA"               // name string in 7-bit ascii, but
 397+ 7027             >                org     $-1                 // alter last byte of Name just above to set
 397+ 7026 C1          >                db      {b $} | END_BIT     // msb as name end
 397+ 7027             >
 397+ 7027 15 70       >                dw      last_NFA            // Link to previous definition Name
 397+ 7029             >CFA:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 397+ 7029 79 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 397+ 702B             >                else
 397+ 702B ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 397+ 702B             >                endif           ; ok        // for other definitions it "points" the correct handler
 397+ 702B             >                // Use of "; ok" to suppress "warning[fwdref]"
 397+ 702B             >
 397+ 702B             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 398+ 702B 77 6A                        dw      CELL_MINUS              // cell-
 399+ 702D A3 69                        dw      EXIT                    // ;
 400+ 702F
 401+ 702F              //  ______________________________________________________________________
 402+ 702F              //
 403+ 702F              // nfa          pfa -- nfa
 404+ 702F                              Colon_Def NFA, "NFA", is_normal
 404+ 702F             >                New_Def  NFA, "NFA", Enter_Ptr, is_normal ; ok
 404+ 702F             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 404+ 702F             >
 404+ 702F             >                // dummy db directives used to calculate length of namec
 404+ 702F 4E 46 41    >                db      "NFA"
 404+ 7032             >len_NFA         defl    $ - temp_NFA
 404+ 7032             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 404+ 702F             >
 404+ 702F 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 404+ 7030 4E 46 41    >                db      "NFA"               // name string in 7-bit ascii, but
 404+ 7033             >                org     $-1                 // alter last byte of Name just above to set
 404+ 7032 C1          >                db      {b $} | END_BIT     // msb as name end
 404+ 7033             >
 404+ 7033 23 70       >                dw      last_NFA            // Link to previous definition Name
 404+ 7035             >NFA:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 404+ 7035 79 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 404+ 7037             >                else
 404+ 7037 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 404+ 7037             >                endif           ; ok        // for other definitions it "points" the correct handler
 404+ 7037             >                // Use of "; ok" to suppress "warning[fwdref]"
 404+ 7037             >
 404+ 7037             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 405+ 7037 A9 63 05 00                  dw      LIT, 5                  // 5
 406+ 703B 21 6F                        dw      SUBTRACT                // -
 407+ 703D 15 6D                        dw      NEG_ONE                 // -1
 408+ 703F E8 6F                        dw      TRAVERSE                // traverse
 409+ 7041 A3 69                        dw      EXIT                    // ;
 410+ 7043
 411+ 7043              //  ______________________________________________________________________
 412+ 7043              //
 413+ 7043              // pfa          nfa -- pfa
 414+ 7043                              Colon_Def PFA, "PFA", is_normal
 414+ 7043             >                New_Def  PFA, "PFA", Enter_Ptr, is_normal ; ok
 414+ 7043             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 414+ 7043             >
 414+ 7043             >                // dummy db directives used to calculate length of namec
 414+ 7043 50 46 41    >                db      "PFA"
 414+ 7046             >len_NFA         defl    $ - temp_NFA
 414+ 7046             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 414+ 7043             >
 414+ 7043 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 414+ 7044 50 46 41    >                db      "PFA"               // name string in 7-bit ascii, but
 414+ 7047             >                org     $-1                 // alter last byte of Name just above to set
 414+ 7046 C1          >                db      {b $} | END_BIT     // msb as name end
 414+ 7047             >
 414+ 7047 2F 70       >                dw      last_NFA            // Link to previous definition Name
 414+ 7049             >PFA:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 414+ 7049 79 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 414+ 704B             >                else
 414+ 704B ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 414+ 704B             >                endif           ; ok        // for other definitions it "points" the correct handler
 414+ 704B             >                // Use of "; ok" to suppress "warning[fwdref]"
 414+ 704B             >
 414+ 704B             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 415+ 704B FC 6C                        dw      ONE                     // 1
 416+ 704D E8 6F                        dw      TRAVERSE                // traverse
 417+ 704F A9 63 05 00                  dw      LIT, 5                  // 6
 418+ 7053 24 6A                        dw      PLUS                    // +
 419+ 7055 A3 69                        dw      EXIT                    // ;
 420+ 7057
 421+ 7057              //  ______________________________________________________________________
 422+ 7057              //
 423+ 7057              // >body        cfa -- pfa
 424+ 7057                              Colon_Def TO_BODY, ">BODY", is_normal
 424+ 7057             >                New_Def  TO_BODY, ">BODY", Enter_Ptr, is_normal ; ok
 424+ 7057             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 424+ 7057             >
 424+ 7057             >                // dummy db directives used to calculate length of namec
 424+ 7057 3E 42 4F 44 >                db      ">BODY"
 424+ 705B 59          >
 424+ 705C             >len_NFA         defl    $ - temp_NFA
 424+ 705C             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 424+ 7057             >
 424+ 7057 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 424+ 7058 3E 42 4F 44 >                db      ">BODY"               // name string in 7-bit ascii, but
 424+ 705C 59          >
 424+ 705D             >                org     $-1                 // alter last byte of Name just above to set
 424+ 705C D9          >                db      {b $} | END_BIT     // msb as name end
 424+ 705D             >
 424+ 705D 43 70       >                dw      last_NFA            // Link to previous definition Name
 424+ 705F             >TO_BODY:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 424+ 705F 79 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 424+ 7061             >                else
 424+ 7061 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 424+ 7061             >                endif           ; ok        // for other definitions it "points" the correct handler
 424+ 7061             >                // Use of "; ok" to suppress "warning[fwdref]"
 424+ 7061             >
 424+ 7061             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 425+ 7061 6D 6A                        dw      CELL_PLUS               // cell+
 426+ 7063 A3 69                        dw      EXIT                    // ;
 427+ 7065
 428+ 7065              //  ______________________________________________________________________
 429+ 7065              //
 430+ 7065              // <name        cfa -- nfa
 431+ 7065                              Colon_Def TO_NAME, "<NAME", is_normal
 431+ 7065             >                New_Def  TO_NAME, "<NAME", Enter_Ptr, is_normal ; ok
 431+ 7065             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 431+ 7065             >
 431+ 7065             >                // dummy db directives used to calculate length of namec
 431+ 7065 3C 4E 41 4D >                db      "<NAME"
 431+ 7069 45          >
 431+ 706A             >len_NFA         defl    $ - temp_NFA
 431+ 706A             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 431+ 7065             >
 431+ 7065 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 431+ 7066 3C 4E 41 4D >                db      "<NAME"               // name string in 7-bit ascii, but
 431+ 706A 45          >
 431+ 706B             >                org     $-1                 // alter last byte of Name just above to set
 431+ 706A C5          >                db      {b $} | END_BIT     // msb as name end
 431+ 706B             >
 431+ 706B 57 70       >                dw      last_NFA            // Link to previous definition Name
 431+ 706D             >TO_NAME:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 431+ 706D 79 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 431+ 706F             >                else
 431+ 706F ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 431+ 706F             >                endif           ; ok        // for other definitions it "points" the correct handler
 431+ 706F             >                // Use of "; ok" to suppress "warning[fwdref]"
 431+ 706F             >
 431+ 706F             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 432+ 706F 5F 70                        dw      TO_BODY                 // >body
 433+ 7071 35 70                        dw      NFA                     // nfa
 434+ 7073 A3 69                        dw      EXIT                    // ;
 435+ 7075
 436+ 7075              //  ______________________________________________________________________
 437+ 7075              //
 438+ 7075              // !csp         --
 439+ 7075              // store in user variable CSP current value of SP. Used at compile-time for syntax checkng
 440+ 7075                              Colon_Def STORE_CSP, "!CSP", is_normal
 440+ 7075             >                New_Def  STORE_CSP, "!CSP", Enter_Ptr, is_normal ; ok
 440+ 7075             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 440+ 7075             >
 440+ 7075             >                // dummy db directives used to calculate length of namec
 440+ 7075 21 43 53 50 >                db      "!CSP"
 440+ 7079             >len_NFA         defl    $ - temp_NFA
 440+ 7079             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 440+ 7075             >
 440+ 7075 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 440+ 7076 21 43 53 50 >                db      "!CSP"               // name string in 7-bit ascii, but
 440+ 707A             >                org     $-1                 // alter last byte of Name just above to set
 440+ 7079 D0          >                db      {b $} | END_BIT     // msb as name end
 440+ 707A             >
 440+ 707A 65 70       >                dw      last_NFA            // Link to previous definition Name
 440+ 707C             >STORE_CSP:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 440+ 707C 79 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 440+ 707E             >                else
 440+ 707E ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 440+ 707E             >                endif           ; ok        // for other definitions it "points" the correct handler
 440+ 707E             >                // Use of "; ok" to suppress "warning[fwdref]"
 440+ 707E             >
 440+ 707E             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 441+ 707E 6B 69                        dw      SPFETCH                 // sp@
 442+ 7080 64 6E A4 6B                  dw      CSP, STORE              // csp !
 443+ 7084 A3 69                        dw      EXIT                    // ;
 444+ 7086
 445+ 7086              //  ______________________________________________________________________
 446+ 7086              //
 447+ 7086              // ?error       f n --
 448+ 7086              // rase error n if flag f it true
 449+ 7086                              Colon_Def QERROR, "?ERROR", is_normal
 449+ 7086             >                New_Def  QERROR, "?ERROR", Enter_Ptr, is_normal ; ok
 449+ 7086             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 449+ 7086             >
 449+ 7086             >                // dummy db directives used to calculate length of namec
 449+ 7086 3F 45 52 52 >                db      "?ERROR"
 449+ 708A 4F 52       >
 449+ 708C             >len_NFA         defl    $ - temp_NFA
 449+ 708C             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 449+ 7086             >
 449+ 7086 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 449+ 7087 3F 45 52 52 >                db      "?ERROR"               // name string in 7-bit ascii, but
 449+ 708B 4F 52       >
 449+ 708D             >                org     $-1                 // alter last byte of Name just above to set
 449+ 708C D2          >                db      {b $} | END_BIT     // msb as name end
 449+ 708D             >
 449+ 708D 75 70       >                dw      last_NFA            // Link to previous definition Name
 449+ 708F             >QERROR:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 449+ 708F 79 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 449+ 7091             >                else
 449+ 7091 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 449+ 7091             >                endif           ; ok        // for other definitions it "points" the correct handler
 449+ 7091             >                // Use of "; ok" to suppress "warning[fwdref]"
 449+ 7091             >
 449+ 7091             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 450+ 7091 F7 6A                        dw      SWAP                    // swap
 451+ 7093                                                              // if
 452+ 7093 2C 64                        dw      ZBRANCH
 453+ 7095 08 00                        dw      QError_Else - $
 454+ 7097 F9 75                        dw          ERROR               //      error  ( is a forward-ref )
 455+ 7099                                                              // else
 456+ 7099 15 64                        dw      BRANCH
 457+ 709B 04 00                        dw      QError_Endif - $
 458+ 709D              QError_Else:
 459+ 709D CF 6A                        dw          DROP                //      drop
 460+ 709F              QError_Endif:                                   // endif
 461+ 709F A3 69                        dw      EXIT                    // ;
 462+ 70A1
 463+ 70A1              //  ______________________________________________________________________
 464+ 70A1              //
 465+ 70A1              // ?comp       --
 466+ 70A1              // raise msg #17 if not compiling
 467+ 70A1                              Colon_Def QCOMP, "?COMP", is_normal
 467+ 70A1             >                New_Def  QCOMP, "?COMP", Enter_Ptr, is_normal ; ok
 467+ 70A1             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 467+ 70A1             >
 467+ 70A1             >                // dummy db directives used to calculate length of namec
 467+ 70A1 3F 43 4F 4D >                db      "?COMP"
 467+ 70A5 50          >
 467+ 70A6             >len_NFA         defl    $ - temp_NFA
 467+ 70A6             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 467+ 70A1             >
 467+ 70A1 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 467+ 70A2 3F 43 4F 4D >                db      "?COMP"               // name string in 7-bit ascii, but
 467+ 70A6 50          >
 467+ 70A7             >                org     $-1                 // alter last byte of Name just above to set
 467+ 70A6 D0          >                db      {b $} | END_BIT     // msb as name end
 467+ 70A7             >
 467+ 70A7 86 70       >                dw      last_NFA            // Link to previous definition Name
 467+ 70A9             >QCOMP:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 467+ 70A9 79 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 467+ 70AB             >                else
 467+ 70AB ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 467+ 70AB             >                endif           ; ok        // for other definitions it "points" the correct handler
 467+ 70AB             >                // Use of "; ok" to suppress "warning[fwdref]"
 467+ 70AB             >
 467+ 70AB             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 468+ 70AB 3F 6E 97 6B                  dw      STATE, FETCH            // state @
 469+ 70AF E5 69                        dw      ZEQUAL                  // 0=
 470+ 70B1 A9 63 11 00                  dw      LIT, 17                 // 17  ( can't be executed )
 471+ 70B5 8F 70                        dw      QERROR                  // ?error
 472+ 70B7 A3 69                        dw      EXIT                    // ;
 473+ 70B9
 474+ 70B9              //  ______________________________________________________________________
 475+ 70B9              //
 476+ 70B9              // ?exec       --
 477+ 70B9              // raise msg #18 if compiling
 478+ 70B9                              Colon_Def QEXEC, "?EXEC", is_normal
 478+ 70B9             >                New_Def  QEXEC, "?EXEC", Enter_Ptr, is_normal ; ok
 478+ 70B9             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 478+ 70B9             >
 478+ 70B9             >                // dummy db directives used to calculate length of namec
 478+ 70B9 3F 45 58 45 >                db      "?EXEC"
 478+ 70BD 43          >
 478+ 70BE             >len_NFA         defl    $ - temp_NFA
 478+ 70BE             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 478+ 70B9             >
 478+ 70B9 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 478+ 70BA 3F 45 58 45 >                db      "?EXEC"               // name string in 7-bit ascii, but
 478+ 70BE 43          >
 478+ 70BF             >                org     $-1                 // alter last byte of Name just above to set
 478+ 70BE C3          >                db      {b $} | END_BIT     // msb as name end
 478+ 70BF             >
 478+ 70BF A1 70       >                dw      last_NFA            // Link to previous definition Name
 478+ 70C1             >QEXEC:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 478+ 70C1 79 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 478+ 70C3             >                else
 478+ 70C3 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 478+ 70C3             >                endif           ; ok        // for other definitions it "points" the correct handler
 478+ 70C3             >                // Use of "; ok" to suppress "warning[fwdref]"
 478+ 70C3             >
 478+ 70C3             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 479+ 70C3 3F 6E 97 6B                  dw      STATE, FETCH            // state @
 480+ 70C7 A9 63 12 00                  dw      LIT, 18                 // 18  ( can't be compiled )
 481+ 70CB 8F 70                        dw      QERROR                  // ?error
 482+ 70CD A3 69                        dw      EXIT                    // ;
 483+ 70CF
 484+ 70CF              //  ______________________________________________________________________
 485+ 70CF              //
 486+ 70CF              // ?pairs       n1 n2 --
 487+ 70CF              // raise msg #19 if n1 != n2. Compiler pushes some placeholder to stack for syntax checking
 488+ 70CF                              Colon_Def QPAIRS, "?PAIRS", is_normal
 488+ 70CF             >                New_Def  QPAIRS, "?PAIRS", Enter_Ptr, is_normal ; ok
 488+ 70CF             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 488+ 70CF             >
 488+ 70CF             >                // dummy db directives used to calculate length of namec
 488+ 70CF 3F 50 41 49 >                db      "?PAIRS"
 488+ 70D3 52 53       >
 488+ 70D5             >len_NFA         defl    $ - temp_NFA
 488+ 70D5             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 488+ 70CF             >
 488+ 70CF 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 488+ 70D0 3F 50 41 49 >                db      "?PAIRS"               // name string in 7-bit ascii, but
 488+ 70D4 52 53       >
 488+ 70D6             >                org     $-1                 // alter last byte of Name just above to set
 488+ 70D5 D3          >                db      {b $} | END_BIT     // msb as name end
 488+ 70D6             >
 488+ 70D6 B9 70       >                dw      last_NFA            // Link to previous definition Name
 488+ 70D8             >QPAIRS:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 488+ 70D8 79 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 488+ 70DA             >                else
 488+ 70DA ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 488+ 70DA             >                endif           ; ok        // for other definitions it "points" the correct handler
 488+ 70DA             >                // Use of "; ok" to suppress "warning[fwdref]"
 488+ 70DA             >
 488+ 70DA             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 489+ 70DA 21 6F                        dw      SUBTRACT                // -
 490+ 70DC A9 63 13 00                  dw      LIT, 19                 // 18  ( syntax error )
 491+ 70E0 8F 70                        dw      QERROR                  // ?error
 492+ 70E2 A3 69                        dw      EXIT                    // ;
 493+ 70E4
 494+ 70E4              //  ______________________________________________________________________
 495+ 70E4              //
 496+ 70E4              // ?csp       --
 497+ 70E4              // raise msg #20 if surrent SP in not what previously saved in CSP.
 498+ 70E4              // Compiler relies on that for  syntax checking of structures
 499+ 70E4                              Colon_Def QCSP, "?CSP", is_normal
 499+ 70E4             >                New_Def  QCSP, "?CSP", Enter_Ptr, is_normal ; ok
 499+ 70E4             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 499+ 70E4             >
 499+ 70E4             >                // dummy db directives used to calculate length of namec
 499+ 70E4 3F 43 53 50 >                db      "?CSP"
 499+ 70E8             >len_NFA         defl    $ - temp_NFA
 499+ 70E8             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 499+ 70E4             >
 499+ 70E4 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 499+ 70E5 3F 43 53 50 >                db      "?CSP"               // name string in 7-bit ascii, but
 499+ 70E9             >                org     $-1                 // alter last byte of Name just above to set
 499+ 70E8 D0          >                db      {b $} | END_BIT     // msb as name end
 499+ 70E9             >
 499+ 70E9 CF 70       >                dw      last_NFA            // Link to previous definition Name
 499+ 70EB             >QCSP:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 499+ 70EB 79 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 499+ 70ED             >                else
 499+ 70ED ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 499+ 70ED             >                endif           ; ok        // for other definitions it "points" the correct handler
 499+ 70ED             >                // Use of "; ok" to suppress "warning[fwdref]"
 499+ 70ED             >
 499+ 70ED             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 500+ 70ED 6B 69                        dw      SPFETCH                 // sp@
 501+ 70EF 64 6E 97 6B                  dw      CSP, FETCH              // csp @
 502+ 70F3 21 6F                        dw      SUBTRACT                // -
 503+ 70F5 A9 63 14 00                  dw      LIT, 20                 // 20  ( bad definition end )
 504+ 70F9 8F 70                        dw      QERROR                  // ?error
 505+ 70FB A3 69                        dw      EXIT                    // ;
 506+ 70FD
 507+ 70FD              //  ______________________________________________________________________
 508+ 70FD              //
 509+ 70FD              // ?loading      --
 510+ 70FD              // raise msg #22 if not loading
 511+ 70FD                              Colon_Def QLOADING, "?LOADING", is_normal
 511+ 70FD             >                New_Def  QLOADING, "?LOADING", Enter_Ptr, is_normal ; ok
 511+ 70FD             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 511+ 70FD             >
 511+ 70FD             >                // dummy db directives used to calculate length of namec
 511+ 70FD 3F 4C 4F 41 >                db      "?LOADING"
 511+ 7101 44 49 4E 47 >
 511+ 7105             >len_NFA         defl    $ - temp_NFA
 511+ 7105             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 511+ 70FD             >
 511+ 70FD 88          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 511+ 70FE 3F 4C 4F 41 >                db      "?LOADING"               // name string in 7-bit ascii, but
 511+ 7102 44 49 4E 47 >
 511+ 7106             >                org     $-1                 // alter last byte of Name just above to set
 511+ 7105 C7          >                db      {b $} | END_BIT     // msb as name end
 511+ 7106             >
 511+ 7106 E4 70       >                dw      last_NFA            // Link to previous definition Name
 511+ 7108             >QLOADING:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 511+ 7108 79 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 511+ 710A             >                else
 511+ 710A ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 511+ 710A             >                endif           ; ok        // for other definitions it "points" the correct handler
 511+ 710A             >                // Use of "; ok" to suppress "warning[fwdref]"
 511+ 710A             >
 511+ 710A             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 512+ 710A F3 6D 97 6B                  dw      BLK, FETCH              // blk @
 513+ 710E E5 69                        dw      ZEQUAL                  // 0=
 514+ 7110 A9 63 16 00                  dw      LIT, 22                 // 22  ( aren't loading now )
 515+ 7114 8F 70                        dw      QERROR                  // ?error
 516+ 7116 A3 69                        dw      EXIT                    // ;
 517+ 7118
 518+ 7118              //  ______________________________________________________________________
 519+ 7118              //
 520+ 7118              // compile      --
 521+ 7118              // compiles the following word
 522+ 7118                              Colon_Def COMPILE, "COMPILE", is_normal
 522+ 7118             >                New_Def  COMPILE, "COMPILE", Enter_Ptr, is_normal ; ok
 522+ 7118             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 522+ 7118             >
 522+ 7118             >                // dummy db directives used to calculate length of namec
 522+ 7118 43 4F 4D 50 >                db      "COMPILE"
 522+ 711C 49 4C 45    >
 522+ 711F             >len_NFA         defl    $ - temp_NFA
 522+ 711F             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 522+ 7118             >
 522+ 7118 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 522+ 7119 43 4F 4D 50 >                db      "COMPILE"               // name string in 7-bit ascii, but
 522+ 711D 49 4C 45    >
 522+ 7120             >                org     $-1                 // alter last byte of Name just above to set
 522+ 711F C5          >                db      {b $} | END_BIT     // msb as name end
 522+ 7120             >
 522+ 7120 FD 70       >                dw      last_NFA            // Link to previous definition Name
 522+ 7122             >COMPILE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 522+ 7122 79 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 522+ 7124             >                else
 522+ 7124 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 522+ 7124             >                endif           ; ok        // for other definitions it "points" the correct handler
 522+ 7124             >                // Use of "; ok" to suppress "warning[fwdref]"
 522+ 7124             >
 522+ 7124             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 523+ 7124 A9 70                        dw      QCOMP                   // ?comp
 524+ 7126 CA 69                        dw      R_TO                    // r>
 525+ 7128 04 6B 6D 6A                  dw      DUP, CELL_PLUS          // dup, cell+
 526+ 712C B6 69                        dw      TO_R                    // >r
 527+ 712E 97 6B EF 6E                  dw      FETCH, COMMA            // @ ,
 528+ 7132 A3 69                        dw      EXIT                    // ;
 529+ 7134
 530+ 7134              //  ______________________________________________________________________
 531+ 7134              //
 532+ 7134              // compile,     --
 533+ 7134              // compiles the following word
 534+ 7134                              Colon_Def COMPILE_XT, "COMPILE,", is_normal
 534+ 7134             >                New_Def  COMPILE_XT, "COMPILE,", Enter_Ptr, is_normal ; ok
 534+ 7134             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 534+ 7134             >
 534+ 7134             >                // dummy db directives used to calculate length of namec
 534+ 7134 43 4F 4D 50 >                db      "COMPILE,"
 534+ 7138 49 4C 45 2C >
 534+ 713C             >len_NFA         defl    $ - temp_NFA
 534+ 713C             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 534+ 7134             >
 534+ 7134 88          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 534+ 7135 43 4F 4D 50 >                db      "COMPILE,"               // name string in 7-bit ascii, but
 534+ 7139 49 4C 45 2C >
 534+ 713D             >                org     $-1                 // alter last byte of Name just above to set
 534+ 713C AC          >                db      {b $} | END_BIT     // msb as name end
 534+ 713D             >
 534+ 713D 18 71       >                dw      last_NFA            // Link to previous definition Name
 534+ 713F             >COMPILE_XT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 534+ 713F 79 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 534+ 7141             >                else
 534+ 7141 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 534+ 7141             >                endif           ; ok        // for other definitions it "points" the correct handler
 534+ 7141             >                // Use of "; ok" to suppress "warning[fwdref]"
 534+ 7141             >
 534+ 7141             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 535+ 7141 A9 70                        dw      QCOMP                   // ?comp
 536+ 7143 EF 6E                        dw      COMMA                   // ,
 537+ 7145 A3 69                        dw      EXIT                    // ;
 538+ 7147
 539+ 7147              //  ______________________________________________________________________
 540+ 7147              //
 541+ 7147              // [            --
 542+ 7147              // stop compilation
 543+ 7147                              Colon_Def SQUARED_OPEN, "[", is_immediate
 543+ 7147             >                New_Def  SQUARED_OPEN, "[", Enter_Ptr, is_immediate ; ok
 543+ 7147             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 543+ 7147             >
 543+ 7147             >                // dummy db directives used to calculate length of namec
 543+ 7147 5B          >                db      "["
 543+ 7148             >len_NFA         defl    $ - temp_NFA
 543+ 7148             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 543+ 7147             >
 543+ 7147 C1          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 543+ 7148 5B          >                db      "["               // name string in 7-bit ascii, but
 543+ 7149             >                org     $-1                 // alter last byte of Name just above to set
 543+ 7148 DB          >                db      {b $} | END_BIT     // msb as name end
 543+ 7149             >
 543+ 7149 34 71       >                dw      last_NFA            // Link to previous definition Name
 543+ 714B             >SQUARED_OPEN:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 543+ 714B 79 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 543+ 714D             >                else
 543+ 714D ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 543+ 714D             >                endif           ; ok        // for other definitions it "points" the correct handler
 543+ 714D             >                // Use of "; ok" to suppress "warning[fwdref]"
 543+ 714D             >
 543+ 714D             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 544+ 714D F4 6C                        dw      ZERO                    // 0
 545+ 714F 3F 6E A4 6B                  dw      STATE, STORE            // state !
 546+ 7153 A3 69                        dw      EXIT                    // ; immediate
 547+ 7155
 548+ 7155              //  ______________________________________________________________________
 549+ 7155              //
 550+ 7155              // ]            --
 551+ 7155              // start compilation
 552+ 7155                              Colon_Def SQUARED_CLOSE, "]", is_normal
 552+ 7155             >                New_Def  SQUARED_CLOSE, "]", Enter_Ptr, is_normal ; ok
 552+ 7155             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 552+ 7155             >
 552+ 7155             >                // dummy db directives used to calculate length of namec
 552+ 7155 5D          >                db      "]"
 552+ 7156             >len_NFA         defl    $ - temp_NFA
 552+ 7156             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 552+ 7155             >
 552+ 7155 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 552+ 7156 5D          >                db      "]"               // name string in 7-bit ascii, but
 552+ 7157             >                org     $-1                 // alter last byte of Name just above to set
 552+ 7156 DD          >                db      {b $} | END_BIT     // msb as name end
 552+ 7157             >
 552+ 7157 47 71       >                dw      last_NFA            // Link to previous definition Name
 552+ 7159             >SQUARED_CLOSE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 552+ 7159 79 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 552+ 715B             >                else
 552+ 715B ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 552+ 715B             >                endif           ; ok        // for other definitions it "points" the correct handler
 552+ 715B             >                // Use of "; ok" to suppress "warning[fwdref]"
 552+ 715B             >
 552+ 715B             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 553+ 715B A9 63 C0 00                  dw      LIT, $C0                // 192
 554+ 715F 3F 6E A4 6B                  dw      STATE, STORE            // state !
 555+ 7163 A3 69                        dw      EXIT                    // ;
 556+ 7165
 557+ 7165              //  ______________________________________________________________________
 558+ 7165              //
 559+ 7165              // smudge       --
 560+ 7165              // toggle smudge bit of latest definition
 561+ 7165                              Colon_Def SMUDGE, "SMUDGE", is_normal
 561+ 7165             >                New_Def  SMUDGE, "SMUDGE", Enter_Ptr, is_normal ; ok
 561+ 7165             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 561+ 7165             >
 561+ 7165             >                // dummy db directives used to calculate length of namec
 561+ 7165 53 4D 55 44 >                db      "SMUDGE"
 561+ 7169 47 45       >
 561+ 716B             >len_NFA         defl    $ - temp_NFA
 561+ 716B             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 561+ 7165             >
 561+ 7165 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 561+ 7166 53 4D 55 44 >                db      "SMUDGE"               // name string in 7-bit ascii, but
 561+ 716A 47 45       >
 561+ 716C             >                org     $-1                 // alter last byte of Name just above to set
 561+ 716B C5          >                db      {b $} | END_BIT     // msb as name end
 561+ 716C             >
 561+ 716C 55 71       >                dw      last_NFA            // Link to previous definition Name
 561+ 716E             >SMUDGE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 561+ 716E 79 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 561+ 7170             >                else
 561+ 7170 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 561+ 7170             >                endif           ; ok        // for other definitions it "points" the correct handler
 561+ 7170             >                // Use of "; ok" to suppress "warning[fwdref]"
 561+ 7170             >
 561+ 7170             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 562+ 7170 0B 70                        dw      LATEST                  // latest
 563+ 7172 A9 63 20 00                  dw      LIT, SMUDGE_BIT         // 32
 564+ 7176 8A 6B                        dw      TOGGLE                  // toggle
 565+ 7178 A3 69                        dw      EXIT                    // ;
 566+ 717A
 567+ 717A              //  ______________________________________________________________________
 568+ 717A              //
 569+ 717A              // immediate    --
 570+ 717A              // make immediate the latest definition
 571+ 717A                              Colon_Def IMMEDIATE, "IMMEDIATE", is_normal
 571+ 717A             >                New_Def  IMMEDIATE, "IMMEDIATE", Enter_Ptr, is_normal ; ok
 571+ 717A             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 571+ 717A             >
 571+ 717A             >                // dummy db directives used to calculate length of namec
 571+ 717A 49 4D 4D 45 >                db      "IMMEDIATE"
 571+ 717E 44 49 41 54 >
 571+ 7182 45          >
 571+ 7183             >len_NFA         defl    $ - temp_NFA
 571+ 7183             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 571+ 717A             >
 571+ 717A 89          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 571+ 717B 49 4D 4D 45 >                db      "IMMEDIATE"               // name string in 7-bit ascii, but
 571+ 717F 44 49 41 54 >
 571+ 7183 45          >
 571+ 7184             >                org     $-1                 // alter last byte of Name just above to set
 571+ 7183 C5          >                db      {b $} | END_BIT     // msb as name end
 571+ 7184             >
 571+ 7184 65 71       >                dw      last_NFA            // Link to previous definition Name
 571+ 7186             >IMMEDIATE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 571+ 7186 79 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 571+ 7188             >                else
 571+ 7188 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 571+ 7188             >                endif           ; ok        // for other definitions it "points" the correct handler
 571+ 7188             >                // Use of "; ok" to suppress "warning[fwdref]"
 571+ 7188             >
 571+ 7188             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 572+ 7188 0B 70                        dw      LATEST                  // latest
 573+ 718A A9 63 40 00                  dw      LIT, $40                // 64
 574+ 718E 8A 6B                        dw      TOGGLE                  // toggle
 575+ 7190 A3 69                        dw      EXIT                    // ;
 576+ 7192
 577+ 7192              //  ______________________________________________________________________
 578+ 7192              //
 579+ 7192              // hex          --
 580+ 7192              // change numeration base
 581+ 7192                              Colon_Def HEX, "HEX", is_normal
 581+ 7192             >                New_Def  HEX, "HEX", Enter_Ptr, is_normal ; ok
 581+ 7192             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 581+ 7192             >
 581+ 7192             >                // dummy db directives used to calculate length of namec
 581+ 7192 48 45 58    >                db      "HEX"
 581+ 7195             >len_NFA         defl    $ - temp_NFA
 581+ 7195             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 581+ 7192             >
 581+ 7192 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 581+ 7193 48 45 58    >                db      "HEX"               // name string in 7-bit ascii, but
 581+ 7196             >                org     $-1                 // alter last byte of Name just above to set
 581+ 7195 D8          >                db      {b $} | END_BIT     // msb as name end
 581+ 7196             >
 581+ 7196 7A 71       >                dw      last_NFA            // Link to previous definition Name
 581+ 7198             >HEX:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 581+ 7198 79 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 581+ 719A             >                else
 581+ 719A ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 581+ 719A             >                endif           ; ok        // for other definitions it "points" the correct handler
 581+ 719A             >                // Use of "; ok" to suppress "warning[fwdref]"
 581+ 719A             >
 581+ 719A             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 582+ 719A A9 63 10 00                  dw      LIT, 16                 // 16
 583+ 719E 49 6E A4 6B                  dw      BASE, STORE             // base !
 584+ 71A2 A3 69                        dw      EXIT                    // ;
 585+ 71A4
 586+ 71A4              //  ______________________________________________________________________
 587+ 71A4              //
 588+ 71A4              // decimal      --
 589+ 71A4              // change numeration base
 590+ 71A4                              Colon_Def DECIMAL, "DECIMAL", is_normal
 590+ 71A4             >                New_Def  DECIMAL, "DECIMAL", Enter_Ptr, is_normal ; ok
 590+ 71A4             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 590+ 71A4             >
 590+ 71A4             >                // dummy db directives used to calculate length of namec
 590+ 71A4 44 45 43 49 >                db      "DECIMAL"
 590+ 71A8 4D 41 4C    >
 590+ 71AB             >len_NFA         defl    $ - temp_NFA
 590+ 71AB             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 590+ 71A4             >
 590+ 71A4 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 590+ 71A5 44 45 43 49 >                db      "DECIMAL"               // name string in 7-bit ascii, but
 590+ 71A9 4D 41 4C    >
 590+ 71AC             >                org     $-1                 // alter last byte of Name just above to set
 590+ 71AB CC          >                db      {b $} | END_BIT     // msb as name end
 590+ 71AC             >
 590+ 71AC 92 71       >                dw      last_NFA            // Link to previous definition Name
 590+ 71AE             >DECIMAL:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 590+ 71AE 79 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 590+ 71B0             >                else
 590+ 71B0 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 590+ 71B0             >                endif           ; ok        // for other definitions it "points" the correct handler
 590+ 71B0             >                // Use of "; ok" to suppress "warning[fwdref]"
 590+ 71B0             >
 590+ 71B0             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 591+ 71B0 A9 63 0A 00                  dw      LIT, 10                 // 10
 592+ 71B4 49 6E A4 6B                  dw      BASE, STORE             // base !
 593+ 71B8 A3 69                        dw      EXIT                    // ;
 594+ 71BA
 595+ 71BA              //  ______________________________________________________________________
 596+ 71BA              //
 597+ 71BA              // (;code)       --
 598+ 71BA              // patch to CFA to call/jump to the "following code"
 599+ 71BA                              Colon_Def C_SEMICOLON_CODE, "(;CODE)", is_normal
 599+ 71BA             >                New_Def  C_SEMICOLON_CODE, "(;CODE)", Enter_Ptr, is_normal ; ok
 599+ 71BA             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 599+ 71BA             >
 599+ 71BA             >                // dummy db directives used to calculate length of namec
 599+ 71BA 28 3B 43 4F >                db      "(;CODE)"
 599+ 71BE 44 45 29    >
 599+ 71C1             >len_NFA         defl    $ - temp_NFA
 599+ 71C1             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 599+ 71BA             >
 599+ 71BA 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 599+ 71BB 28 3B 43 4F >                db      "(;CODE)"               // name string in 7-bit ascii, but
 599+ 71BF 44 45 29    >
 599+ 71C2             >                org     $-1                 // alter last byte of Name just above to set
 599+ 71C1 A9          >                db      {b $} | END_BIT     // msb as name end
 599+ 71C2             >
 599+ 71C2 A4 71       >                dw      last_NFA            // Link to previous definition Name
 599+ 71C4             >C_SEMICOLON_CODE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 599+ 71C4 79 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 599+ 71C6             >                else
 599+ 71C6 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 599+ 71C6             >                endif           ; ok        // for other definitions it "points" the correct handler
 599+ 71C6             >                // Use of "; ok" to suppress "warning[fwdref]"
 599+ 71C6             >
 599+ 71C6             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 600+ 71C6 CA 69                        dw      R_TO                    // r>       ( Return Stack has IP to caller's next cell )
 601+ 71C8 0B 70                        dw      LATEST                  // latest   ( Word being defined in this moment )
 602+ 71CA 49 70 29 70                  dw      PFA, CFA                // pfa cfa  ( cfa of latest word )
 603+ 71CE
 604+ 71CE
 605+ 71CE
 606+ 71CE
 607+ 71CE
 608+ 71CE A4 6B                        dw      STORE                   // !
 609+ 71D0 A3 69                        dw      EXIT                    // ;
 610+ 71D2
 611+ 71D2              //  ______________________________________________________________________
 612+ 71D2              //
 613+ 71D2              // ;code        --
 614+ 71D2                              Colon_Def SEMICOLON_CODE, ";CODE", is_immediate
 614+ 71D2             >                New_Def  SEMICOLON_CODE, ";CODE", Enter_Ptr, is_immediate ; ok
 614+ 71D2             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 614+ 71D2             >
 614+ 71D2             >                // dummy db directives used to calculate length of namec
 614+ 71D2 3B 43 4F 44 >                db      ";CODE"
 614+ 71D6 45          >
 614+ 71D7             >len_NFA         defl    $ - temp_NFA
 614+ 71D7             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 614+ 71D2             >
 614+ 71D2 C5          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 614+ 71D3 3B 43 4F 44 >                db      ";CODE"               // name string in 7-bit ascii, but
 614+ 71D7 45          >
 614+ 71D8             >                org     $-1                 // alter last byte of Name just above to set
 614+ 71D7 C5          >                db      {b $} | END_BIT     // msb as name end
 614+ 71D8             >
 614+ 71D8 BA 71       >                dw      last_NFA            // Link to previous definition Name
 614+ 71DA             >SEMICOLON_CODE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 614+ 71DA 79 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 614+ 71DC             >                else
 614+ 71DC ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 614+ 71DC             >                endif           ; ok        // for other definitions it "points" the correct handler
 614+ 71DC             >                // Use of "; ok" to suppress "warning[fwdref]"
 614+ 71DC             >
 614+ 71DC             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 615+ 71DC EB 70                        dw      QCSP                    // ?csp
 616+ 71DE 22 71                        dw      COMPILE                 // compile
 617+ 71E0 C4 71                        dw      C_SEMICOLON_CODE        // (;code)
 618+ 71E2 4B 71                        dw      SQUARED_OPEN            // [
 619+ 71E4 A1 6C                        dw      NOOP                    // noop () can be patched later to ASSEMBLER... )
 620+ 71E6 A3 69                        dw      EXIT                    // ; immediate
 621+ 71E8
 622+ 71E8              //  ______________________________________________________________________
 623+ 71E8              //
 624+ 71E8              // <builds      --
 625+ 71E8                              Colon_Def CBUILDS, "<BUILDS", is_normal
 625+ 71E8             >                New_Def  CBUILDS, "<BUILDS", Enter_Ptr, is_normal ; ok
 625+ 71E8             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 625+ 71E8             >
 625+ 71E8             >                // dummy db directives used to calculate length of namec
 625+ 71E8 3C 42 55 49 >                db      "<BUILDS"
 625+ 71EC 4C 44 53    >
 625+ 71EF             >len_NFA         defl    $ - temp_NFA
 625+ 71EF             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 625+ 71E8             >
 625+ 71E8 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 625+ 71E9 3C 42 55 49 >                db      "<BUILDS"               // name string in 7-bit ascii, but
 625+ 71ED 4C 44 53    >
 625+ 71F0             >                org     $-1                 // alter last byte of Name just above to set
 625+ 71EF D3          >                db      {b $} | END_BIT     // msb as name end
 625+ 71F0             >
 625+ 71F0 D2 71       >                dw      last_NFA            // Link to previous definition Name
 625+ 71F2             >CBUILDS:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 625+ 71F2 79 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 625+ 71F4             >                else
 625+ 71F4 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 625+ 71F4             >                endif           ; ok        // for other definitions it "points" the correct handler
 625+ 71F4             >                // Use of "; ok" to suppress "warning[fwdref]"
 625+ 71F4             >
 625+ 71F4             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 626+ 71F4 F4 6C                        dw      ZERO                    // 0
 627+ 71F6 B0 6C                        dw      CONSTANT                // constant
 628+ 71F8 A3 69                        dw      EXIT                    // ;
 629+ 71FA
 630+ 71FA              //  ______________________________________________________________________
 631+ 71FA              //
 632+ 71FA              // recurse      --
 633+ 71FA              //              Colon_Def RECURSE, "RECURSE", is_immediate
 634+ 71FA              //              dw      QCOMP                   // ?comp
 635+ 71FA              //              dw      LATEST                  // latest
 636+ 71FA              //              dw      PFA, CFA                // pfa cfa
 637+ 71FA              //              dw      COMMA                   // ,
 638+ 71FA              //              dw      EXIT                    // ; immediate
 639+ 71FA
 640+ 71FA              //  ______________________________________________________________________
 641+ 71FA              //
 642+ 71FA              // does>     --
 643+ 71FA                              Colon_Def DOES_TO, "DOES>", is_normal
 643+ 71FA             >                New_Def  DOES_TO, "DOES>", Enter_Ptr, is_normal ; ok
 643+ 71FA             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 643+ 71FA             >
 643+ 71FA             >                // dummy db directives used to calculate length of namec
 643+ 71FA 44 4F 45 53 >                db      "DOES>"
 643+ 71FE 3E          >
 643+ 71FF             >len_NFA         defl    $ - temp_NFA
 643+ 71FF             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 643+ 71FA             >
 643+ 71FA 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 643+ 71FB 44 4F 45 53 >                db      "DOES>"               // name string in 7-bit ascii, but
 643+ 71FF 3E          >
 643+ 7200             >                org     $-1                 // alter last byte of Name just above to set
 643+ 71FF BE          >                db      {b $} | END_BIT     // msb as name end
 643+ 7200             >
 643+ 7200 E8 71       >                dw      last_NFA            // Link to previous definition Name
 643+ 7202             >DOES_TO:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 643+ 7202 79 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 643+ 7204             >                else
 643+ 7204 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 643+ 7204             >                endif           ; ok        // for other definitions it "points" the correct handler
 643+ 7204             >                // Use of "; ok" to suppress "warning[fwdref]"
 643+ 7204             >
 643+ 7204             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 644+ 7204 CA 69                        dw      R_TO                    // r>
 645+ 7206 0B 70                        dw      LATEST                  // latest
 646+ 7208 49 70                        dw      PFA                     // pfa
 647+ 720A A4 6B                        dw      STORE                   // !
 648+ 720C C4 71                        dw      C_SEMICOLON_CODE        // ;code
 649+ 720E              Does_Ptr:
 650+ 720E                              // via call coded in CFA
 651+ 720E                              ldhlrp
 651+ 720E 2A 96 63    >                ld      hl,(RP_Pointer)
 652+ 7211 2B                           dec     hl                  // push on Return-Stack current Instruction-Pointer
 653+ 7212 70                           ld      (hl), b
 654+ 7213 2B                           dec     hl
 655+ 7214 71                           ld      (hl), c
 656+ 7215                              ldrphl
 656+ 7215 22 96 63    >                ld      (RP_Pointer),hl
 657+ 7218 13                           inc     de
 658+ 7219 EB                           ex      de, hl
 659+ 721A 4E                           ld      c, (hl)
 660+ 721B 23                           inc     hl
 661+ 721C 46                           ld      b, (hl)
 662+ 721D 23                           inc     hl
 663+ 721E
 664+ 721E                              psh1
 664+ 721E E5          >                push    hl
 664+ 721F DD E9       >                jp      (ix)
 665+ 7221                              // SMUDGE !
 666+ 7221
 667+ 7221              //  ______________________________________________________________________
 668+ 7221              //
 669+ 7221              // count        a -- a2 n
 670+ 7221              // expects a counted string at address a, returns string address and counter
 671+ 7221                              New_Def COUNT, "COUNT", is_code, is_normal
 671+ 7221             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 671+ 7221             >
 671+ 7221             >                // dummy db directives used to calculate length of namec
 671+ 7221 43 4F 55 4E >                db      "COUNT"
 671+ 7225 54          >
 671+ 7226             >len_NFA         defl    $ - temp_NFA
 671+ 7226             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 671+ 7221             >
 671+ 7221 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 671+ 7222 43 4F 55 4E >                db      "COUNT"               // name string in 7-bit ascii, but
 671+ 7226 54          >
 671+ 7227             >                org     $-1                 // alter last byte of Name just above to set
 671+ 7226 D4          >                db      {b $} | END_BIT     // msb as name end
 671+ 7227             >
 671+ 7227 FA 71       >                dw      last_NFA            // Link to previous definition Name
 671+ 7229             >COUNT:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 671+ 7229 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
 671+ 7229             >                else
 671+ 7229 2B 72       >                dw      $ + 2   ; ok        // is pointed by CFA
 671+ 722B             >                endif           ; ok        // for other definitions it "points" the correct handler
 671+ 722B             >                // Use of "; ok" to suppress "warning[fwdref]"
 671+ 722B             >
 671+ 722B             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 672+ 722B E1                           pop     hl
 673+ 722C 5E                           ld      e, (hl)
 674+ 722D 16 00                        ld      d, 0
 675+ 722F 23                           inc     hl
 676+ 7230              Count_Ptr:
 677+ 7230 E5                           push    hl
 678+ 7231 D5                           push    de
 679+ 7232                              next
 679+ 7232 DD E9       >                jp      (ix)
 680+ 7234
 681+ 7234
 682+ 7234              //  ______________________________________________________________________
 683+ 7234              //
 684+ 7234              // bounds       a n -- a+n n
 685+ 7234              // given an address and a length ( a n ) calculate the bound addresses
 686+ 7234              // suitable for DO-LOOP
 687+ 7234                              New_Def BOUNDS, "BOUNDS", is_code, is_normal
 687+ 7234             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 687+ 7234             >
 687+ 7234             >                // dummy db directives used to calculate length of namec
 687+ 7234 42 4F 55 4E >                db      "BOUNDS"
 687+ 7238 44 53       >
 687+ 723A             >len_NFA         defl    $ - temp_NFA
 687+ 723A             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 687+ 7234             >
 687+ 7234 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 687+ 7235 42 4F 55 4E >                db      "BOUNDS"               // name string in 7-bit ascii, but
 687+ 7239 44 53       >
 687+ 723B             >                org     $-1                 // alter last byte of Name just above to set
 687+ 723A D3          >                db      {b $} | END_BIT     // msb as name end
 687+ 723B             >
 687+ 723B 21 72       >                dw      last_NFA            // Link to previous definition Name
 687+ 723D             >BOUNDS:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 687+ 723D ~           >                dw      runcode ; ok        // for primitive definitions  actual code
 687+ 723D             >                else
 687+ 723D 3F 72       >                dw      $ + 2   ; ok        // is pointed by CFA
 687+ 723F             >                endif           ; ok        // for other definitions it "points" the correct handler
 687+ 723F             >                // Use of "; ok" to suppress "warning[fwdref]"
 687+ 723F             >
 687+ 723F             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 688+ 723F E1                           pop     hl
 689+ 7240 D1                           pop     de
 690+ 7241 19                           add     hl, de
 691+ 7242 18 EC                        jr      Count_Ptr
 692+ 7244
 693+ 7244              //  ______________________________________________________________________
 694+ 7244              //
 695+ 7244              // leave        --
 696+ 7244              // Compile (leave) to leave current LOOP and jump just after it
 697+ 7244                              Colon_Def LEAVE, "LEAVE", is_immediate
 697+ 7244             >                New_Def  LEAVE, "LEAVE", Enter_Ptr, is_immediate ; ok
 697+ 7244             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 697+ 7244             >
 697+ 7244             >                // dummy db directives used to calculate length of namec
 697+ 7244 4C 45 41 56 >                db      "LEAVE"
 697+ 7248 45          >
 697+ 7249             >len_NFA         defl    $ - temp_NFA
 697+ 7249             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 697+ 7244             >
 697+ 7244 C5          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 697+ 7245 4C 45 41 56 >                db      "LEAVE"               // name string in 7-bit ascii, but
 697+ 7249 45          >
 697+ 724A             >                org     $-1                 // alter last byte of Name just above to set
 697+ 7249 C5          >                db      {b $} | END_BIT     // msb as name end
 697+ 724A             >
 697+ 724A 34 72       >                dw      last_NFA            // Link to previous definition Name
 697+ 724C             >LEAVE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 697+ 724C 79 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 697+ 724E             >                else
 697+ 724E ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 697+ 724E             >                endif           ; ok        // for other definitions it "points" the correct handler
 697+ 724E             >                // Use of "; ok" to suppress "warning[fwdref]"
 697+ 724E             >
 697+ 724E             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 698+ 724E 22 71 41 64                  dw      COMPILE, C_LEAVE       // compile (leave)     \ unloop and branch
 699+ 7252 D3 6E B6 69                  dw      HERE, TO_R, ZERO, COMMA // here >r 0 ,
 699+ 7256 F4 6C EF 6E
 700+ 725A F4 6C F4 6C                  dw      ZERO, ZERO
 701+ 725E 6B 69 04 6B                  dw      SPFETCH, DUP
 702+ 7262 6D 6A 6D 6A                  dw      CELL_PLUS, CELL_PLUS
 703+ 7266 E7 6A                        dw      TUCK
 704+ 7268 64 6E 97 6B                  dw      CSP, FETCH
 705+ 726C F7 6A 21 6F                  dw      SWAP, SUBTRACT
 706+ 7270 96 68                        dw      CMOVE
 707+ 7272 64 6E 97 6B                  dw      CSP, FETCH, CELL_MINUS
 707+ 7276 77 6A
 708+ 7278 CA 69 BF 6A                  dw      R_TO, OVER, STORE
 708+ 727C A4 6B
 709+ 727E 77 6A F4 6C                  dw      CELL_MINUS, ZERO
 710+ 7282 F7 6A A4 6B                  dw      SWAP, STORE
 711+ 7286 A3 69                        dw      EXIT                    // ;
 712+ 7288
 713+ 7288              //  ______________________________________________________________________
 714+ 7288              //
 715+ 7288              // type         a n --
 716+ 7288              // Sends to current output channel n characters starting at address a.
 717+ 7288                              Colon_Def TYPE, "TYPE", is_normal
 717+ 7288             >                New_Def  TYPE, "TYPE", Enter_Ptr, is_normal ; ok
 717+ 7288             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 717+ 7288             >
 717+ 7288             >                // dummy db directives used to calculate length of namec
 717+ 7288 54 59 50 45 >                db      "TYPE"
 717+ 728C             >len_NFA         defl    $ - temp_NFA
 717+ 728C             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 717+ 7288             >
 717+ 7288 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 717+ 7289 54 59 50 45 >                db      "TYPE"               // name string in 7-bit ascii, but
 717+ 728D             >                org     $-1                 // alter last byte of Name just above to set
 717+ 728C C5          >                db      {b $} | END_BIT     // msb as name end
 717+ 728D             >
 717+ 728D 44 72       >                dw      last_NFA            // Link to previous definition Name
 717+ 728F             >TYPE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 717+ 728F 79 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 717+ 7291             >                else
 717+ 7291 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 717+ 7291             >                endif           ; ok        // for other definitions it "points" the correct handler
 717+ 7291             >                // Use of "; ok" to suppress "warning[fwdref]"
 717+ 7291             >
 717+ 7291             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 718+ 7291 3D 72                        dw      BOUNDS                  // bounds
 719+ 7293 59 64                        dw      C_Q_DO                  // ?do
 720+ 7295 0C 00                        dw      Type_Skip - $
 721+ 7297              Type_Loop:
 722+ 7297 90 64 B2 6B                  dw          I, CFETCH           //      i c@
 723+ 729B B9 6F                        dw          EMIT                //      emit
 724+ 729D 04 64                        dw      C_LOOP                  // loop
 725+ 729F F8 FF                        dw      Type_Loop - $
 726+ 72A1              Type_Skip:
 727+ 72A1 A3 69                        dw      EXIT                    // ;
 728+ 72A3
 729+ 72A3              //  ______________________________________________________________________
 730+ 72A3              //
 731+ 72A3              // -trailing    a n1 -- a n2
 732+ 72A3              // Assumes that an n1 bytes-long string is stored at address a
 733+ 72A3              // and the string contains a space delimited word,
 734+ 72A3              // Finds n2 as the position of the first character after the word.
 735+ 72A3                              Colon_Def LTRAILING, "-TRAILING", is_normal
 735+ 72A3             >                New_Def  LTRAILING, "-TRAILING", Enter_Ptr, is_normal ; ok
 735+ 72A3             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 735+ 72A3             >
 735+ 72A3             >                // dummy db directives used to calculate length of namec
 735+ 72A3 2D 54 52 41 >                db      "-TRAILING"
 735+ 72A7 49 4C 49 4E >
 735+ 72AB 47          >
 735+ 72AC             >len_NFA         defl    $ - temp_NFA
 735+ 72AC             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 735+ 72A3             >
 735+ 72A3 89          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 735+ 72A4 2D 54 52 41 >                db      "-TRAILING"               // name string in 7-bit ascii, but
 735+ 72A8 49 4C 49 4E >
 735+ 72AC 47          >
 735+ 72AD             >                org     $-1                 // alter last byte of Name just above to set
 735+ 72AC C7          >                db      {b $} | END_BIT     // msb as name end
 735+ 72AD             >
 735+ 72AD 88 72       >                dw      last_NFA            // Link to previous definition Name
 735+ 72AF             >LTRAILING:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 735+ 72AF 79 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 735+ 72B1             >                else
 735+ 72B1 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 735+ 72B1             >                endif           ; ok        // for other definitions it "points" the correct handler
 735+ 72B1             >                // Use of "; ok" to suppress "warning[fwdref]"
 735+ 72B1             >
 735+ 72B1             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 736+ 72B1 04 6B F4 6C                  dw      DUP, ZERO               // dup 0
 737+ 72B5                                                              // do
 738+ 72B5 59 64                        dw      C_Q_DO
 739+ 72B7 20 00                        dw      LTrailing_Leave - $
 740+ 72B9              LTrailing_Loop:
 741+ 72B9 65 6B 24 6A                  dw          TWO_DUP, PLUS       //      2dup +
 742+ 72BD 51 6A                        dw          ONE_SUBTRACT        //      1-
 743+ 72BF B2 6B                        dw          CFETCH              //      c@
 744+ 72C1 1E 6D 21 6F                  dw          BL, SUBTRACT        //      bl -
 745+ 72C5                                                              //      if
 746+ 72C5 2C 64                        dw          ZBRANCH
 747+ 72C7 0A 00                        dw          LTrailing_Else - $
 748+ 72C9 41 64                        dw              C_LEAVE         //          leave
 749+ 72CB 0C 00                        dw              LTrailing_Leave - $
 750+ 72CD 15 64                        dw          BRANCH              //      else
 751+ 72CF 04 00                        dw          LTrailing_Endif - $
 752+ 72D1              LTrailing_Else:
 753+ 72D1 51 6A                        dw              ONE_SUBTRACT    //          1-
 754+ 72D3              LTrailing_Endif:                                //      endif
 755+ 72D3                                                              // loop
 756+ 72D3 04 64                        dw      C_LOOP
 757+ 72D5 E4 FF                        dw      LTrailing_Loop - $
 758+ 72D7              LTrailing_Leave:
 759+ 72D7 A3 69                        dw      EXIT                    // ;
 760+ 72D9
 761+ 72D9              //  ______________________________________________________________________
 762+ 72D9              //
 763+ 72D9              // accept       a n1 -- n2
 764+ 72D9              // Accepts at most n1 characters from terminal and stores them at address a
 765+ 72D9              // CR stops input. A 'nul' is added as trailer.
 766+ 72D9              // n2 is the string length. n2 is kept in span user variable also.
 767+ 72D9                              Colon_Def ACCEPT, "ACCEPT", is_normal
 767+ 72D9             >                New_Def  ACCEPT, "ACCEPT", Enter_Ptr, is_normal ; ok
 767+ 72D9             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 767+ 72D9             >
 767+ 72D9             >                // dummy db directives used to calculate length of namec
 767+ 72D9 41 43 43 45 >                db      "ACCEPT"
 767+ 72DD 50 54       >
 767+ 72DF             >len_NFA         defl    $ - temp_NFA
 767+ 72DF             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 767+ 72D9             >
 767+ 72D9 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 767+ 72DA 41 43 43 45 >                db      "ACCEPT"               // name string in 7-bit ascii, but
 767+ 72DE 50 54       >
 767+ 72E0             >                org     $-1                 // alter last byte of Name just above to set
 767+ 72DF D4          >                db      {b $} | END_BIT     // msb as name end
 767+ 72E0             >
 767+ 72E0 A3 72       >                dw      last_NFA            // Link to previous definition Name
 767+ 72E2             >ACCEPT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 767+ 72E2 79 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 767+ 72E4             >                else
 767+ 72E4 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 767+ 72E4             >                endif           ; ok        // for other definitions it "points" the correct handler
 767+ 72E4             >                // Use of "; ok" to suppress "warning[fwdref]"
 767+ 72E4             >
 767+ 72E4             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 768+ 72E4 BF 6A 24 6A                  dw      OVER, PLUS, OVER        //                      ( a  n1+a  a )
 768+ 72E8 BF 6A
 769+ 72EA F4 6C 21 6B                  dw      ZERO, DASH_ROT          //                      ( a  0     a+n1  a )
 770+ 72EE                                                              // do
 771+ 72EE 59 64                        dw      C_Q_DO
 772+ 72F0 8C 00                        dw      Accept_Leave - $
 773+ 72F2              Accept_Loop:
 774+ 72F2 B9 66                        dw          CUR
 775+ 72F4 CF 6A 05 67                  dw          DROP, KEY           //      drop key        ( a  c )
 776+ 72F8 04 6B                        dw          DUP                 //      dup             ( a  c  c )
 777+ 72FA A9 63 0E 00                  dw          LIT, $0E            //      0E
 778+ 72FE 5A 6D                        dw          PLUS_ORIGIN         //      +origin
 779+ 7300 97 6B                        dw          FETCH               //      @               ( a  c  c  del )
 780+ 7302 2F 6F                        dw          EQUALS              //      =               ( a  c  c==del )
 781+ 7304                                                              //      if
 782+ 7304 2C 64                        dw          ZBRANCH
 783+ 7306 2C 00                        dw          Accept_Else_0 - $
 784+ 7308 CF 6A                        dw              DROP            //          drop        ( a  )
 785+ 730A 04 6B 90 64                  dw              DUP, I, EQUALS  //          dup i =     ( a  a==i )
 785+ 730E 2F 6F
 786+ 7310 FC 6C 33 69                  dw              ONE, AND_OP     //          1 and
 787+ 7314 04 6B                        dw              DUP             //          dup         ( a  a==i  a==i )
 788+ 7316 CA 69                        dw              R_TO            //          r> 2 - + r>
 789+ 7318 84 6A 24 6A                  dw              TWO_MINUS, PLUS //      ( decrement index by 1 or 2 )
 790+ 731C B6 69                        dw              TO_R            //
 791+ 731E                                                              //          if
 792+ 731E 2C 64                        dw              ZBRANCH
 793+ 7320 0A 00                        dw              Accept_Else_1 - $
 794+ 7322 A9 63 07 00                  dw                  LIT, 7      //              7       ( a  7 )
 795+ 7326                                                              //          else
 796+ 7326 15 64                        dw              BRANCH
 797+ 7328 06 00                        dw              Accept_Endif_1 - $
 798+ 732A              Accept_Else_1:
 799+ 732A A9 63 08 00                  dw                  LIT, 8      //              8       ( a  8 )
 800+ 732E              Accept_Endif_1:                                 //          endif
 801+ 732E 15 64                        dw          BRANCH
 802+ 7330 2E 00                        dw          Accept_Endif_0 - $
 803+ 7332              Accept_Else_0:                                  //      else
 804+ 7332 04 6B                        dw              DUP             //          dup         ( a  c  c )
 805+ 7334 A9 63 0D 00                  dw              LIT, 13         //          13
 806+ 7338 2F 6F                        dw              EQUALS          //          =           ( a  c  c==CR )
 807+ 733A                                                              //          if
 808+ 733A 2C 64                        dw              ZBRANCH
 809+ 733C 0C 00                        dw              Accept_Else_2 - $
 810+ 733E CF 6A 1E 6D                  dw                  DROP, BL    //              drop bl ( a  bl )
 811+ 7342 F4 6C                        dw                  ZERO        //              0       ( a  c  0 )
 812+ 7344                                                              //          else
 813+ 7344 15 64                        dw              BRANCH
 814+ 7346 04 00                        dw              Accept_Endif_2 - $
 815+ 7348              Accept_Else_2:
 816+ 7348 04 6B                        dw                  DUP         //              dup     ( a  c  c )
 817+ 734A                                                              //          endif
 818+ 734A              Accept_Endif_2:
 819+ 734A 90 64 C0 6B                  dw              I, CSTORE       //          i           ( a  c )
 820+ 734E 04 6B 1E 6D                  dw              DUP, BL, LESS   //          dup bl <    ( a  c  c<BL )
 820+ 7352 4C 6F
 821+ 7354                                                              //          if
 822+ 7354 2C 64                        dw              ZBRANCH
 823+ 7356 08 00                        dw              Accept_Endif_3 - $
 824+ 7358 CA 69                        dw                  R_TO        //              r>
 825+ 735A 51 6A                        dw                  ONE_SUBTRACT//              1-
 826+ 735C B6 69                        dw                  TO_R        //              >r
 827+ 735E                                                              //          endif
 828+ 735E              Accept_Endif_3:
 829+ 735E              Accept_Endif_0:                                 //      endif
 830+ 735E B9 6F                        dw          EMIT                //      emit
 831+ 7360 F4 6C 90 64                  dw          ZERO, I, ONE_PLUS   //      0 i 1+ !
 831+ 7364 45 6A
 832+ 7366 A4 6B                        dw          STORE               //          ( zero pad )
 833+ 7368 90 64                        dw          I                   //      i
 834+ 736A 90 64 B2 6B                  dw          I, CFETCH, ZEQUAL   //      i 0= if
 834+ 736E E5 69
 835+ 7370 2C 64                        dw          ZBRANCH             //
 836+ 7372 06 00                        dw              Accept_Endif_4 - $
 837+ 7374 41 64                        dw                  C_LEAVE     //              leave
 838+ 7376 06 00                        dw                  Accept_Leave - $
 839+ 7378              Accept_Endif_4:                                 //      endif
 840+ 7378                                                              // loop
 841+ 7378 04 64                        dw      C_LOOP
 842+ 737A 78 FF                        dw      Accept_Loop - $
 843+ 737C              Accept_Leave:
 844+ 737C F7 6A 21 6F                  dw      SWAP, SUBTRACT          // swap -
 845+ 7380 45 6A                        dw      ONE_PLUS                // 1+
 846+ 7382 04 6B B4 6E                  dw      DUP, SPAN, STORE        // dup span !
 846+ 7386 A4 6B
 847+ 7388 A3 69                        dw      EXIT                    // ;
 848+ 738A
 849+ 738A              //  ______________________________________________________________________
 850+ 738A              //
 851+ 738A              // expect      a n --
 852+ 738A              // Accepts at most n1 characters from terminal and stores them at address a
 853+ 738A              // CR stops input. A 'nul' is added as trailer.
 854+ 738A              // n2 is the string length. n2 is kept in span user variable also.
 855+ 738A              //              Colon_Def EXPECT, "EXPECT", is_normal
 856+ 738A              //              dw      ACCEPT, DROP            // accept drop
 857+ 738A              //              dw      EXIT                    // ;
 858+ 738A
 859+ 738A              //  ______________________________________________________________________
 860+ 738A              //
 861+ 738A              // query        --
 862+ 738A              // Accept at most 80 character from console. CR stops.
 863+ 738A              // Text is stored in TIB. Variable IN is zeroed.
 864+ 738A                              Colon_Def QUERY, "QUERY", is_normal
 864+ 738A             >                New_Def  QUERY, "QUERY", Enter_Ptr, is_normal ; ok
 864+ 738A             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 864+ 738A             >
 864+ 738A             >                // dummy db directives used to calculate length of namec
 864+ 738A 51 55 45 52 >                db      "QUERY"
 864+ 738E 59          >
 864+ 738F             >len_NFA         defl    $ - temp_NFA
 864+ 738F             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 864+ 738A             >
 864+ 738A 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 864+ 738B 51 55 45 52 >                db      "QUERY"               // name string in 7-bit ascii, but
 864+ 738F 59          >
 864+ 7390             >                org     $-1                 // alter last byte of Name just above to set
 864+ 738F D9          >                db      {b $} | END_BIT     // msb as name end
 864+ 7390             >
 864+ 7390 D9 72       >                dw      last_NFA            // Link to previous definition Name
 864+ 7392             >QUERY:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 864+ 7392 79 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 864+ 7394             >                else
 864+ 7394 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 864+ 7394             >                endif           ; ok        // for other definitions it "points" the correct handler
 864+ 7394             >                // Use of "; ok" to suppress "warning[fwdref]"
 864+ 7394             >
 864+ 7394             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 865+ 7394 87 6D 97 6B                  dw      TIB, FETCH              // tib @
 866+ 7398 A9 63 50 00                  dw      LIT, 80                 // 80
 867+ 739C E2 72 CF 6A                  dw      ACCEPT, DROP            // accept drop
 868+ 73A0 F4 6C FC 6D                  dw      ZERO, TO_IN, STORE      // 0 >in !
 868+ 73A4 A4 6B
 869+ 73A6 A3 69                        dw      EXIT                    // ;
 870+ 73A8
 871+ 73A8              //  ______________________________________________________________________
 872+ 73A8              //
 873+ 73A8              // fill        a n c --
 874+ 73A8              // If n > 0, fills n locations starting from address a with the value c.
 875+ 73A8                              New_Def FILL, "FILL", is_code, is_normal
 875+ 73A8             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 875+ 73A8             >
 875+ 73A8             >                // dummy db directives used to calculate length of namec
 875+ 73A8 46 49 4C 4C >                db      "FILL"
 875+ 73AC             >len_NFA         defl    $ - temp_NFA
 875+ 73AC             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 875+ 73A8             >
 875+ 73A8 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 875+ 73A9 46 49 4C 4C >                db      "FILL"               // name string in 7-bit ascii, but
 875+ 73AD             >                org     $-1                 // alter last byte of Name just above to set
 875+ 73AC CC          >                db      {b $} | END_BIT     // msb as name end
 875+ 73AD             >
 875+ 73AD 8A 73       >                dw      last_NFA            // Link to previous definition Name
 875+ 73AF             >FILL:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 875+ 73AF ~           >                dw      runcode ; ok        // for primitive definitions  actual code
 875+ 73AF             >                else
 875+ 73AF B1 73       >                dw      $ + 2   ; ok        // is pointed by CFA
 875+ 73B1             >                endif           ; ok        // for other definitions it "points" the correct handler
 875+ 73B1             >                // Use of "; ok" to suppress "warning[fwdref]"
 875+ 73B1             >
 875+ 73B1             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 876+ 73B1 D9                           exx
 877+ 73B2 D1                           pop     de                  // de has character
 878+ 73B3 C1                           pop     bc                  // bc has counter
 879+ 73B4 E1                           pop     hl                  // hl has address, save Instruction Pointer
 880+ 73B5              Fill_Loop:
 881+ 73B5 78                               ld      a, b
 882+ 73B6 B1                               or      c
 883+ 73B7 28 05                        jr      z, Fill_While_End
 884+ 73B9 73                               ld      (hl), e
 885+ 73BA 0B                               dec     bc
 886+ 73BB 23                               inc     hl
 887+ 73BC 18 F7                        jr      Fill_Loop
 888+ 73BE              Fill_While_End:
 889+ 73BE D9                           exx
 890+ 73BF
 891+ 73BF                              next
 891+ 73BF DD E9       >                jp      (ix)
 892+ 73C1
 893+ 73C1              //  ______________________________________________________________________
 894+ 73C1              //
 895+ 73C1              // erase        a n --
 896+ 73C1              // If n > 0, fills n locations starting from address a with 'nul' characters.
 897+ 73C1                              Colon_Def ERASE, "ERASE", is_normal
 897+ 73C1             >                New_Def  ERASE, "ERASE", Enter_Ptr, is_normal ; ok
 897+ 73C1             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 897+ 73C1             >
 897+ 73C1             >                // dummy db directives used to calculate length of namec
 897+ 73C1 45 52 41 53 >                db      "ERASE"
 897+ 73C5 45          >
 897+ 73C6             >len_NFA         defl    $ - temp_NFA
 897+ 73C6             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 897+ 73C1             >
 897+ 73C1 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 897+ 73C2 45 52 41 53 >                db      "ERASE"               // name string in 7-bit ascii, but
 897+ 73C6 45          >
 897+ 73C7             >                org     $-1                 // alter last byte of Name just above to set
 897+ 73C6 C5          >                db      {b $} | END_BIT     // msb as name end
 897+ 73C7             >
 897+ 73C7 A8 73       >                dw      last_NFA            // Link to previous definition Name
 897+ 73C9             >ERASE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 897+ 73C9 79 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 897+ 73CB             >                else
 897+ 73CB ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 897+ 73CB             >                endif           ; ok        // for other definitions it "points" the correct handler
 897+ 73CB             >                // Use of "; ok" to suppress "warning[fwdref]"
 897+ 73CB             >
 897+ 73CB             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 898+ 73CB F4 6C AF 73                  dw      ZERO, FILL              // 0 fill
 899+ 73CF A3 69                        dw      EXIT                    // ;
 900+ 73D1
 901+ 73D1              //  ______________________________________________________________________
 902+ 73D1              //
 903+ 73D1              // blank        a n --
 904+ 73D1              // If n > 0, fills n locations starting from address a with 'nul' characters.
 905+ 73D1                              Colon_Def BLANK, "BLANK", is_normal
 905+ 73D1             >                New_Def  BLANK, "BLANK", Enter_Ptr, is_normal ; ok
 905+ 73D1             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 905+ 73D1             >
 905+ 73D1             >                // dummy db directives used to calculate length of namec
 905+ 73D1 42 4C 41 4E >                db      "BLANK"
 905+ 73D5 4B          >
 905+ 73D6             >len_NFA         defl    $ - temp_NFA
 905+ 73D6             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 905+ 73D1             >
 905+ 73D1 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 905+ 73D2 42 4C 41 4E >                db      "BLANK"               // name string in 7-bit ascii, but
 905+ 73D6 4B          >
 905+ 73D7             >                org     $-1                 // alter last byte of Name just above to set
 905+ 73D6 CB          >                db      {b $} | END_BIT     // msb as name end
 905+ 73D7             >
 905+ 73D7 C1 73       >                dw      last_NFA            // Link to previous definition Name
 905+ 73D9             >BLANK:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 905+ 73D9 79 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 905+ 73DB             >                else
 905+ 73DB ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 905+ 73DB             >                endif           ; ok        // for other definitions it "points" the correct handler
 905+ 73DB             >                // Use of "; ok" to suppress "warning[fwdref]"
 905+ 73DB             >
 905+ 73DB             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 906+ 73DB 1E 6D AF 73                  dw      BL, FILL                // bl fill
 907+ 73DF A3 69                        dw      EXIT                    // ;
 908+ 73E1
 909+ 73E1              //  ______________________________________________________________________
 910+ 73E1              //
 911+ 73E1              // hold         c --
 912+ 73E1              // Used between <# and #> to insert a character c in numeric formatting.
 913+ 73E1                              Colon_Def HOLD, "HOLD", is_normal
 913+ 73E1             >                New_Def  HOLD, "HOLD", Enter_Ptr, is_normal ; ok
 913+ 73E1             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 913+ 73E1             >
 913+ 73E1             >                // dummy db directives used to calculate length of namec
 913+ 73E1 48 4F 4C 44 >                db      "HOLD"
 913+ 73E5             >len_NFA         defl    $ - temp_NFA
 913+ 73E5             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 913+ 73E1             >
 913+ 73E1 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 913+ 73E2 48 4F 4C 44 >                db      "HOLD"               // name string in 7-bit ascii, but
 913+ 73E6             >                org     $-1                 // alter last byte of Name just above to set
 913+ 73E5 C4          >                db      {b $} | END_BIT     // msb as name end
 913+ 73E6             >
 913+ 73E6 D1 73       >                dw      last_NFA            // Link to previous definition Name
 913+ 73E8             >HOLD:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 913+ 73E8 79 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 913+ 73EA             >                else
 913+ 73EA ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 913+ 73EA             >                endif           ; ok        // for other definitions it "points" the correct handler
 913+ 73EA             >                // Use of "; ok" to suppress "warning[fwdref]"
 913+ 73EA             >
 913+ 73EA             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 914+ 73EA 15 6D                        dw      NEG_ONE                 // -1
 915+ 73EC 75 6E 74 6B                  dw      HLD, PLUSSTORE          // hld +!
 916+ 73F0 75 6E 97 6B                  dw      HLD, FETCH, CSTORE      // hld @ c!
 916+ 73F4 C0 6B
 917+ 73F6 A3 69                        dw      EXIT                    // ;
 918+ 73F8
 919+ 73F8              //  ______________________________________________________________________
 920+ 73F8              //
 921+ 73F8              // pad         -- a
 922+ 73F8              // leaves the buffer text address. This is at a fixed distance over HERE.
 923+ 73F8                              Colon_Def PAD, "PAD", is_normal
 923+ 73F8             >                New_Def  PAD, "PAD", Enter_Ptr, is_normal ; ok
 923+ 73F8             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 923+ 73F8             >
 923+ 73F8             >                // dummy db directives used to calculate length of namec
 923+ 73F8 50 41 44    >                db      "PAD"
 923+ 73FB             >len_NFA         defl    $ - temp_NFA
 923+ 73FB             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 923+ 73F8             >
 923+ 73F8 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 923+ 73F9 50 41 44    >                db      "PAD"               // name string in 7-bit ascii, but
 923+ 73FC             >                org     $-1                 // alter last byte of Name just above to set
 923+ 73FB C4          >                db      {b $} | END_BIT     // msb as name end
 923+ 73FC             >
 923+ 73FC E1 73       >                dw      last_NFA            // Link to previous definition Name
 923+ 73FE             >PAD:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 923+ 73FE 79 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 923+ 7400             >                else
 923+ 7400 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 923+ 7400             >                endif           ; ok        // for other definitions it "points" the correct handler
 923+ 7400             >                // Use of "; ok" to suppress "warning[fwdref]"
 923+ 7400             >
 923+ 7400             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 924+ 7400 D3 6E                        dw      HERE                    // here
 925+ 7402 A9 63 44 00                  dw      LIT, 68                 // 68
 926+ 7406 24 6A                        dw      PLUS                    // +
 927+ 7408 A3 69                        dw      EXIT                    // ;
 928+ 740A
 929+ 740A              //  ______________________________________________________________________
 930+ 740A              //
 931+ 740A              // word         c -- a
 932+ 740A              // reads characters from input streams until it encouners a c delimiter.
 933+ 740A              // Stores that packet so it starts from HERE
 934+ 740A              // WORD leaves a counter as first byte and ends the packet with two spaces.
 935+ 740A              // Other occurrences of c are ignored.
 936+ 740A              // If BLK is zero, text is taken from terminal buffer TIB.
 937+ 740A              // Otherwise text is taken from the disk-block given by BLK.
 938+ 740A              // "in" variable is incremented of the number of character read.
 939+ 740A              // The number of characters read is given by ENCLOSE.
 940+ 740A                              Colon_Def WORD, "WORD", is_normal
 940+ 740A             >                New_Def  WORD, "WORD", Enter_Ptr, is_normal ; ok
 940+ 740A             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 940+ 740A             >
 940+ 740A             >                // dummy db directives used to calculate length of namec
 940+ 740A 57 4F 52 44 >                db      "WORD"
 940+ 740E             >len_NFA         defl    $ - temp_NFA
 940+ 740E             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 940+ 740A             >
 940+ 740A 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 940+ 740B 57 4F 52 44 >                db      "WORD"               // name string in 7-bit ascii, but
 940+ 740F             >                org     $-1                 // alter last byte of Name just above to set
 940+ 740E C4          >                db      {b $} | END_BIT     // msb as name end
 940+ 740F             >
 940+ 740F F8 73       >                dw      last_NFA            // Link to previous definition Name
 940+ 7411             >WORD:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 940+ 7411 79 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 940+ 7413             >                else
 940+ 7413 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 940+ 7413             >                endif           ; ok        // for other definitions it "points" the correct handler
 940+ 7413             >                // Use of "; ok" to suppress "warning[fwdref]"
 940+ 7413             >
 940+ 7413             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 941+ 7413 F3 6D 97 6B                  dw      BLK, FETCH              // blk @
 942+ 7417                                                              // if
 943+ 7417 2C 64                        dw      ZBRANCH
 944+ 7419 0C 00                        dw      Word_Else - $
 945+ 741B F3 6D 97 6B                  dw          BLK, FETCH          //      blk @
 946+ 741F 5C 7D                        dw          BLOCK               //      block ( forward )
 947+ 7421                                                              // else
 948+ 7421 15 64                        dw      BRANCH
 949+ 7423 06 00                        dw      Word_Endif - $
 950+ 7425              Word_Else:
 951+ 7425 87 6D 97 6B                  dw         TIB, FETCH           //      tib @
 952+ 7429              Word_Endif:                                     // endif
 953+ 7429 FC 6D 97 6B                  dw      TO_IN, FETCH, PLUS      // >in @ +
 953+ 742D 24 6A
 954+ 742F F7 6A 7E 65                  dw      SWAP, ENCLOSE           // swap enclose
 955+ 7433 D3 6E A9 63                  dw      HERE, LIT, 34, BLANK    // here 34 blank
 955+ 7437 22 00 D9 73
 956+ 743B FC 6D 74 6B                  dw      TO_IN, PLUSSTORE        // >in @ +
 957+ 743F BF 6A 21 6F                  dw      OVER, SUBTRACT, TO_R    // over - >r
 957+ 7443 B6 69
 958+ 7445 DE 69 D3 6E                  dw      R_OP, HERE, CSTORE      // r here c!
 958+ 7449 C0 6B
 959+ 744B 24 6A                        dw      PLUS                    // +
 960+ 744D D3 6E 45 6A                  dw      HERE, ONE_PLUS, R_TO    // here 1+ r>
 960+ 7451 CA 69
 961+ 7453 96 68                        dw      CMOVE                   // cmove
 962+ 7455 D3 6E                        dw      HERE                    // here
 963+ 7457 A3 69                        dw      EXIT                    // ;
 964+ 7459
 965+ 7459              //  ______________________________________________________________________
 966+ 7459              //
 967+ 7459              // (.")         --
 968+ 7459              // Direct procedure compiled by ." and  .(  It executes TYPE.
 969+ 7459                              Colon_Def C_DOT_QUOTE, '(.")', is_normal
 969+ 7459             >                New_Def  C_DOT_QUOTE, '(.")', Enter_Ptr, is_normal ; ok
 969+ 7459             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 969+ 7459             >
 969+ 7459             >                // dummy db directives used to calculate length of namec
 969+ 7459 28 2E 22 29 >                db      '(.")'
 969+ 745D             >len_NFA         defl    $ - temp_NFA
 969+ 745D             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 969+ 7459             >
 969+ 7459 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 969+ 745A 28 2E 22 29 >                db      '(.")'               // name string in 7-bit ascii, but
 969+ 745E             >                org     $-1                 // alter last byte of Name just above to set
 969+ 745D A9          >                db      {b $} | END_BIT     // msb as name end
 969+ 745E             >
 969+ 745E 0A 74       >                dw      last_NFA            // Link to previous definition Name
 969+ 7460             >C_DOT_QUOTE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 969+ 7460 79 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 969+ 7462             >                else
 969+ 7462 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 969+ 7462             >                endif           ; ok        // for other definitions it "points" the correct handler
 969+ 7462             >                // Use of "; ok" to suppress "warning[fwdref]"
 969+ 7462             >
 969+ 7462             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 970+ 7462 DE 69 29 72                  dw      R_OP, COUNT             // r count
 971+ 7466 04 6B 45 6A                  dw      DUP, ONE_PLUS           // dup 1+
 972+ 746A CA 69 24 6A                  dw      R_TO, PLUS, TO_R        // r> + >r  ( advance IP )
 972+ 746E B6 69
 973+ 7470 8F 72                        dw      TYPE                    // type
 974+ 7472 A3 69                        dw      EXIT                    // ;
 975+ 7474
 976+ 7474              //  ______________________________________________________________________
 977+ 7474              //
 978+ 7474              // char         -- c
 979+ 7474              // get first character from next input word
 980+ 7474                              Colon_Def CHAR,  "CHAR", is_normal
 980+ 7474             >                New_Def  CHAR, "CHAR", Enter_Ptr, is_normal ; ok
 980+ 7474             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 980+ 7474             >
 980+ 7474             >                // dummy db directives used to calculate length of namec
 980+ 7474 43 48 41 52 >                db      "CHAR"
 980+ 7478             >len_NFA         defl    $ - temp_NFA
 980+ 7478             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 980+ 7474             >
 980+ 7474 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 980+ 7475 43 48 41 52 >                db      "CHAR"               // name string in 7-bit ascii, but
 980+ 7479             >                org     $-1                 // alter last byte of Name just above to set
 980+ 7478 D2          >                db      {b $} | END_BIT     // msb as name end
 980+ 7479             >
 980+ 7479 59 74       >                dw      last_NFA            // Link to previous definition Name
 980+ 747B             >CHAR:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 980+ 747B 79 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 980+ 747D             >                else
 980+ 747D ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 980+ 747D             >                endif           ; ok        // for other definitions it "points" the correct handler
 980+ 747D             >                // Use of "; ok" to suppress "warning[fwdref]"
 980+ 747D             >
 980+ 747D             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 981+ 747D 1E 6D 11 74                  dw      BL, WORD                // bl word
 982+ 7481 45 6A B2 6B                  dw      ONE_PLUS, CFETCH        // 1+ c@
 983+ 7485 A3 69                        dw      EXIT                    // ;
 984+ 7487
 985+ 7487              //  ______________________________________________________________________
 986+ 7487              //
 987+ 7487              // ,"           --
 988+ 7487              // compiles a string terminated by " as a counted string from next input stream
 989+ 7487                              Colon_Def COMMA_QUOTE,  ',"', is_normal
 989+ 7487             >                New_Def  COMMA_QUOTE, ',"', Enter_Ptr, is_normal ; ok
 989+ 7487             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 989+ 7487             >
 989+ 7487             >                // dummy db directives used to calculate length of namec
 989+ 7487 2C 22       >                db      ',"'
 989+ 7489             >len_NFA         defl    $ - temp_NFA
 989+ 7489             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 989+ 7487             >
 989+ 7487 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 989+ 7488 2C 22       >                db      ',"'               // name string in 7-bit ascii, but
 989+ 748A             >                org     $-1                 // alter last byte of Name just above to set
 989+ 7489 A2          >                db      {b $} | END_BIT     // msb as name end
 989+ 748A             >
 989+ 748A 74 74       >                dw      last_NFA            // Link to previous definition Name
 989+ 748C             >COMMA_QUOTE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 989+ 748C 79 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 989+ 748E             >                else
 989+ 748E ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 989+ 748E             >                endif           ; ok        // for other definitions it "points" the correct handler
 989+ 748E             >                // Use of "; ok" to suppress "warning[fwdref]"
 989+ 748E             >
 989+ 748E             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 990+ 748E A9 63 22 00                  dw      LIT, DQUOTE_CHAR        // [char] "
 991+ 7492 11 74                        dw      WORD                    // word
 992+ 7494 B2 6B 45 6A                  dw      CFETCH, ONE_PLUS        // c@ 1+
 993+ 7498 E3 6E                        dw      ALLOT                   // allot
 994+ 749A F4 6C 00 6F                  dw      ZERO, CCOMMA            // 0 c,  ( nul-terminated string - useful anyway )
 995+ 749E A3 69                        dw      EXIT
 996+ 74A0
 997+ 74A0              //  ______________________________________________________________________
 998+ 74A0              //
 999+ 74A0              // .c           c --
1000+ 74A0              // intermediate general purpose string builder, used by ." and .(
1001+ 74A0                              Colon_Def DOT_C,  ".C", is_immediate
1001+ 74A0             >                New_Def  DOT_C, ".C", Enter_Ptr, is_immediate ; ok
1001+ 74A0             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1001+ 74A0             >
1001+ 74A0             >                // dummy db directives used to calculate length of namec
1001+ 74A0 2E 43       >                db      ".C"
1001+ 74A2             >len_NFA         defl    $ - temp_NFA
1001+ 74A2             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1001+ 74A0             >
1001+ 74A0 C2          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
1001+ 74A1 2E 43       >                db      ".C"               // name string in 7-bit ascii, but
1001+ 74A3             >                org     $-1                 // alter last byte of Name just above to set
1001+ 74A2 C3          >                db      {b $} | END_BIT     // msb as name end
1001+ 74A3             >
1001+ 74A3 87 74       >                dw      last_NFA            // Link to previous definition Name
1001+ 74A5             >DOT_C:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1001+ 74A5 79 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
1001+ 74A7             >                else
1001+ 74A7 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
1001+ 74A7             >                endif           ; ok        // for other definitions it "points" the correct handler
1001+ 74A7             >                // Use of "; ok" to suppress "warning[fwdref]"
1001+ 74A7             >
1001+ 74A7             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1002+ 74A7 3F 6E 97 6B                  dw      STATE, FETCH            // state @
1003+ 74AB                                                              // if
1004+ 74AB 2C 64                        dw      ZBRANCH
1005+ 74AD 12 00                        dw      Dot_C_Else - $
1006+ 74AF 22 71 60 74                  dw          COMPILE, C_DOT_QUOTE //     compile (.")
1007+ 74B3 11 74 B2 6B                  dw          WORD, CFETCH        //      word c@
1008+ 74B7 45 6A E3 6E                  dw          ONE_PLUS, ALLOT     //      1+ allot
1009+ 74BB                                                              // else
1010+ 74BB 15 64                        dw      BRANCH
1011+ 74BD 08 00                        dw      Dot_C_Endif - $
1012+ 74BF              Dot_C_Else:
1013+ 74BF 11 74 29 72                  dw          WORD, COUNT, TYPE   //      word count type
1013+ 74C3 8F 72
1014+ 74C5              Dot_C_Endif:                                    // endif
1015+ 74C5 A3 69                        dw      EXIT                    ;
1016+ 74C7
1017+ 74C7              //  ______________________________________________________________________
1018+ 74C7              //
1019+ 74C7              // ."           c --
1020+ 74C7                              Colon_Def DOT_QUOTE,  '."', is_immediate
1020+ 74C7             >                New_Def  DOT_QUOTE, '."', Enter_Ptr, is_immediate ; ok
1020+ 74C7             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1020+ 74C7             >
1020+ 74C7             >                // dummy db directives used to calculate length of namec
1020+ 74C7 2E 22       >                db      '."'
1020+ 74C9             >len_NFA         defl    $ - temp_NFA
1020+ 74C9             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1020+ 74C7             >
1020+ 74C7 C2          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
1020+ 74C8 2E 22       >                db      '."'               // name string in 7-bit ascii, but
1020+ 74CA             >                org     $-1                 // alter last byte of Name just above to set
1020+ 74C9 A2          >                db      {b $} | END_BIT     // msb as name end
1020+ 74CA             >
1020+ 74CA A0 74       >                dw      last_NFA            // Link to previous definition Name
1020+ 74CC             >DOT_QUOTE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1020+ 74CC 79 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
1020+ 74CE             >                else
1020+ 74CE ~           >                dw      $ + 2   ; ok        // is pointed by CFA
1020+ 74CE             >                endif           ; ok        // for other definitions it "points" the correct handler
1020+ 74CE             >                // Use of "; ok" to suppress "warning[fwdref]"
1020+ 74CE             >
1020+ 74CE             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1021+ 74CE A9 63 22 00                  dw      LIT, DQUOTE_CHAR        // [char] "
1022+ 74D2 A5 74                        dw      DOT_C                   // [compile] .c
1023+ 74D4 A3 69                        dw      EXIT                    // ; immediate
1024+ 74D6
1025+ 74D6              //  ______________________________________________________________________
1026+ 74D6              //
1027+ 74D6              // .(           c --
1028+ 74D6                              Colon_Def DOT_BRACKET,  ".(", is_immediate
1028+ 74D6             >                New_Def  DOT_BRACKET, ".(", Enter_Ptr, is_immediate ; ok
1028+ 74D6             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1028+ 74D6             >
1028+ 74D6             >                // dummy db directives used to calculate length of namec
1028+ 74D6 2E 28       >                db      ".("
1028+ 74D8             >len_NFA         defl    $ - temp_NFA
1028+ 74D8             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1028+ 74D6             >
1028+ 74D6 C2          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
1028+ 74D7 2E 28       >                db      ".("               // name string in 7-bit ascii, but
1028+ 74D9             >                org     $-1                 // alter last byte of Name just above to set
1028+ 74D8 A8          >                db      {b $} | END_BIT     // msb as name end
1028+ 74D9             >
1028+ 74D9 C7 74       >                dw      last_NFA            // Link to previous definition Name
1028+ 74DB             >DOT_BRACKET:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1028+ 74DB 79 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
1028+ 74DD             >                else
1028+ 74DD ~           >                dw      $ + 2   ; ok        // is pointed by CFA
1028+ 74DD             >                endif           ; ok        // for other definitions it "points" the correct handler
1028+ 74DD             >                // Use of "; ok" to suppress "warning[fwdref]"
1028+ 74DD             >
1028+ 74DD             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1029+ 74DD A9 63 29 00                  dw      LIT, ")"                // [char] )
1030+ 74E1 A5 74                        dw      DOT_C                   // [compile] .c
1031+ 74E3 A3 69                        dw      EXIT                    // ; immediate
1032+ 74E5
1033+ 74E5              //  ______________________________________________________________________
1034+ 74E5              //
1035+ 74E5              // (sgn)        a -- a f
1036+ 74E5              // determines if char in addr a is a sign (+ or -), and in that case increments
1037+ 74E5              // a flag. Returns f as the sign, true for negative, false for positive.
1038+ 74E5              // called by NUMBER and (EXP)
1039+ 74E5                              Colon_Def CSGN,  "(SGN)", is_normal
1039+ 74E5             >                New_Def  CSGN, "(SGN)", Enter_Ptr, is_normal ; ok
1039+ 74E5             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1039+ 74E5             >
1039+ 74E5             >                // dummy db directives used to calculate length of namec
1039+ 74E5 28 53 47 4E >                db      "(SGN)"
1039+ 74E9 29          >
1039+ 74EA             >len_NFA         defl    $ - temp_NFA
1039+ 74EA             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1039+ 74E5             >
1039+ 74E5 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1039+ 74E6 28 53 47 4E >                db      "(SGN)"               // name string in 7-bit ascii, but
1039+ 74EA 29          >
1039+ 74EB             >                org     $-1                 // alter last byte of Name just above to set
1039+ 74EA A9          >                db      {b $} | END_BIT     // msb as name end
1039+ 74EB             >
1039+ 74EB D6 74       >                dw      last_NFA            // Link to previous definition Name
1039+ 74ED             >CSGN:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1039+ 74ED 79 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
1039+ 74EF             >                else
1039+ 74EF ~           >                dw      $ + 2   ; ok        // is pointed by CFA
1039+ 74EF             >                endif           ; ok        // for other definitions it "points" the correct handler
1039+ 74EF             >                // Use of "; ok" to suppress "warning[fwdref]"
1039+ 74EF             >
1039+ 74EF             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1040+ 74EF 04 6B 45 6A                  dw      DUP, ONE_PLUS, CFETCH   // dup 1+ c@
1040+ 74F3 B2 6B
1041+ 74F5 04 6B A9 63                  dw      DUP, LIT, "-", EQUALS   // dup [char] - =
1041+ 74F9 2D 00 2F 6F
1042+ 74FD                                                              // if
1043+ 74FD 2C 64                        dw      ZBRANCH
1044+ 74FF 12 00                        dw      CSgn_Else_0 - $
1045+ 7501 CF 6A                        dw          DROP                //      drop
1046+ 7503 45 6A                        dw          ONE_PLUS            //      1+
1047+ 7505 FC 6C 52 6E                  dw          ONE, DPL, PLUSSTORE //      1 dpl +!
1047+ 7509 74 6B
1048+ 750B FC 6C                        dw          ONE                 //      1
1049+ 750D                                                              // else
1050+ 750D 15 64                        dw      BRANCH
1051+ 750F 16 00                        dw      CSgn_Endif_0 - $
1052+ 7511              CSgn_Else_0:
1053+ 7511 A9 63 2B 00                  dw          LIT, "+", EQUALS    //      [char] + =
1053+ 7515 2F 6F
1054+ 7517                                                              //      if
1055+ 7517 2C 64                        dw          ZBRANCH
1056+ 7519 0A 00                        dw          CSgn_Endif_1 - $
1057+ 751B 45 6A                        dw              ONE_PLUS        //          1+
1058+ 751D FC 6C 52 6E                  dw              ONE, DPL        //          1 dpl
1059+ 7521 74 6B                        dw              PLUSSTORE       //          +!
1060+ 7523              CSgn_Endif_1                                    //      endif
1061+ 7523 F4 6C                        dw          ZERO                //      0
1062+ 7525              CSgn_Endif_0:                                   // endif
1063+ 7525 A3 69                        dw      EXIT
1064+ 7527
1065+ 7527              //  ______________________________________________________________________
1066+ 7527              //
1067+ 7527              // (number)     d a -- d1 a1
1068+ 7527              // using the current BASE parse characters stored in address a
1069+ 7527              // accumulating a double precision integer d
1070+ 7527              // the process stops at the first not-convertible character
1071+ 7527              // A double-number is kept in CPU registers as HLDE.
1072+ 7527              // On the stack a double number is treated as two single numbers
1073+ 7527              // where HL is on the top of the stack and DE is the second from top,
1074+ 7527              // so in the stack memory it appears as LHED.
1075+ 7527              // Instead, in 2VARIABLE a double number is stored as EDLH.
1076+ 7527                              Colon_Def CNUMBER,  "(NUMBER)", is_normal
1076+ 7527             >                New_Def  CNUMBER, "(NUMBER)", Enter_Ptr, is_normal ; ok
1076+ 7527             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1076+ 7527             >
1076+ 7527             >                // dummy db directives used to calculate length of namec
1076+ 7527 28 4E 55 4D >                db      "(NUMBER)"
1076+ 752B 42 45 52 29 >
1076+ 752F             >len_NFA         defl    $ - temp_NFA
1076+ 752F             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1076+ 7527             >
1076+ 7527 88          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1076+ 7528 28 4E 55 4D >                db      "(NUMBER)"               // name string in 7-bit ascii, but
1076+ 752C 42 45 52 29 >
1076+ 7530             >                org     $-1                 // alter last byte of Name just above to set
1076+ 752F A9          >                db      {b $} | END_BIT     // msb as name end
1076+ 7530             >
1076+ 7530 E5 74       >                dw      last_NFA            // Link to previous definition Name
1076+ 7532             >CNUMBER:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1076+ 7532 79 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
1076+ 7534             >                else
1076+ 7534 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
1076+ 7534             >                endif           ; ok        // for other definitions it "points" the correct handler
1076+ 7534             >                // Use of "; ok" to suppress "warning[fwdref]"
1076+ 7534             >
1076+ 7534             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1077+ 7534                                                              // begin
1078+ 7534              CNumber_Begin:
1079+ 7534 45 6A                        dw          ONE_PLUS            //      1+
1080+ 7536 04 6B B6 69                  dw          DUP, TO_R           //      dup >r
1081+ 753A B2 6B                        dw          CFETCH              //      @
1082+ 753C 49 6E 97 6B                  dw          BASE, FETCH         //      base @
1083+ 7540 B1 64                        dw          DIGIT               //      digit
1084+ 7542                                                              // while
1085+ 7542 2C 64                        dw      ZBRANCH
1086+ 7544 2C 00                        dw      CNumber_While_end - $
1087+ 7546 F7 6A                        dw          SWAP                //      swap
1088+ 7548 49 6E 97 6B                  dw          BASE, FETCH         //      base @
1089+ 754C C9 68                        dw          UM_MUL              //      um*
1090+ 754E CF 6A 11 6B                  dw          DROP, ROT           //      drop rot
1091+ 7552 49 6E 97 6B                  dw          BASE, FETCH         //      base @
1092+ 7556 C9 68                        dw          UM_MUL              //      um*
1093+ 7558 31 6A                        dw          DPLUS               //      d+
1094+ 755A 52 6E 97 6B                  dw          DPL, FETCH          //      dpl @
1095+ 755E 45 6A                        dw          ONE_PLUS            //      1+
1096+ 7560                                                              //      if
1097+ 7560 2C 64                        dw          ZBRANCH
1098+ 7562 08 00                        dw          CNumber_Endif - $
1099+ 7564 FC 6C 52 6E                  dw              ONE, DPL        //          1 dpl
1100+ 7568 74 6B                        dw              PLUSSTORE       //          +!
1101+ 756A              CNumber_Endif:                                  //      endif
1102+ 756A CA 69                        dw             R_TO             //      r>  ( balance rp )
1103+ 756C 15 64                        dw      BRANCH
1104+ 756E C6 FF                        dw      CNumber_Begin - $
1105+ 7570              CNumber_While_end:                              // repeat
1106+ 7570 CA 69                        dw      R_TO                    // r>  ( balance rp on exit while-repeat )
1107+ 7572 A3 69                        dw      EXIT                    // ;
1108+ 7574
1109+ 7574              //  ______________________________________________________________________
1110+ 7574              //
1111+ 7574              // number       a -- d
1112+ 7574                              Colon_Def NUMBER,  "NUMBER", is_normal
1112+ 7574             >                New_Def  NUMBER, "NUMBER", Enter_Ptr, is_normal ; ok
1112+ 7574             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1112+ 7574             >
1112+ 7574             >                // dummy db directives used to calculate length of namec
1112+ 7574 4E 55 4D 42 >                db      "NUMBER"
1112+ 7578 45 52       >
1112+ 757A             >len_NFA         defl    $ - temp_NFA
1112+ 757A             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1112+ 7574             >
1112+ 7574 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1112+ 7575 4E 55 4D 42 >                db      "NUMBER"               // name string in 7-bit ascii, but
1112+ 7579 45 52       >
1112+ 757B             >                org     $-1                 // alter last byte of Name just above to set
1112+ 757A D2          >                db      {b $} | END_BIT     // msb as name end
1112+ 757B             >
1112+ 757B 27 75       >                dw      last_NFA            // Link to previous definition Name
1112+ 757D             >NUMBER:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1112+ 757D 79 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
1112+ 757F             >                else
1112+ 757F ~           >                dw      $ + 2   ; ok        // is pointed by CFA
1112+ 757F             >                endif           ; ok        // for other definitions it "points" the correct handler
1112+ 757F             >                // Use of "; ok" to suppress "warning[fwdref]"
1112+ 757F             >
1112+ 757F             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1113+ 757F F4 6C F4 6C                  dw      ZERO, ZERO              // 0 0
1114+ 7583 11 6B                        dw      ROT                     // rot
1115+ 7585 ED 74 B6 69                  dw      CSGN, TO_R              // (sgn) >r
1116+ 7589 15 6D 52 6E                  dw      NEG_ONE, DPL, STORE     // -1 dpl !
1116+ 758D A4 6B
1117+ 758F 32 75                        dw      CNUMBER                 // (number)
1118+ 7591 04 6B B2 6B                  dw      DUP, CFETCH             // dup c@
1119+ 7595 A9 63 2E 00                  dw      LIT, 46, EQUALS         // [char] . =  ( decimal point )
1119+ 7599 2F 6F
1120+ 759B                                                              // if
1121+ 759B 2C 64                        dw      ZBRANCH
1122+ 759D 0A 00                        dw      Number_Endif_1 - $
1123+ 759F F4 6C 52 6E                  dw          ZERO, DPL, STORE    //      0 dpl !
1123+ 75A3 A4 6B
1124+ 75A5 32 75                        dw          CNUMBER             //      (number)
1125+ 75A7              Number_Endif_1:                                 // endif
1126+ 75A7 B2 6B 1E 6D                  dw      CFETCH, BL              // c@ bl
1127+ 75AB 21 6F F4 6C                  dw      SUBTRACT, ZERO, QERROR  // - 0 ?error
1127+ 75AF 8F 70
1128+ 75B1 CA 69                        dw      R_TO                    // r>
1129+ 75B3                                                              // if
1130+ 75B3 2C 64                        dw      ZBRANCH
1131+ 75B5 04 00                        dw      Number_Endif_2 - $
1132+ 75B7 A5 6A                        dw          DMINUS              //      dminus
1133+ 75B9              Number_Endif_2:                                 // endif
1134+ 75B9 A3 69                        dw      EXIT                    // ;
1135+ 75BB
1136+ 75BB              //  ______________________________________________________________________
1137+ 75BB              //
1138+ 75BB              // -find        a -- d
1139+ 75BB                              Colon_Def LFIND,  "-FIND", is_normal
1139+ 75BB             >                New_Def  LFIND, "-FIND", Enter_Ptr, is_normal ; ok
1139+ 75BB             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1139+ 75BB             >
1139+ 75BB             >                // dummy db directives used to calculate length of namec
1139+ 75BB 2D 46 49 4E >                db      "-FIND"
1139+ 75BF 44          >
1139+ 75C0             >len_NFA         defl    $ - temp_NFA
1139+ 75C0             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1139+ 75BB             >
1139+ 75BB 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1139+ 75BC 2D 46 49 4E >                db      "-FIND"               // name string in 7-bit ascii, but
1139+ 75C0 44          >
1139+ 75C1             >                org     $-1                 // alter last byte of Name just above to set
1139+ 75C0 C4          >                db      {b $} | END_BIT     // msb as name end
1139+ 75C1             >
1139+ 75C1 74 75       >                dw      last_NFA            // Link to previous definition Name
1139+ 75C3             >LFIND:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1139+ 75C3 79 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
1139+ 75C5             >                else
1139+ 75C5 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
1139+ 75C5             >                endif           ; ok        // for other definitions it "points" the correct handler
1139+ 75C5             >                // Use of "; ok" to suppress "warning[fwdref]"
1139+ 75C5             >
1139+ 75C5             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1140+ 75C5 1E 6D 11 74                  dw      BL, WORD                // bl word
1141+ 75C9 27 6E 97 6B                  dw      CONTEXT, FETCH, FETCH   // context @ @
1141+ 75CD 97 6B
1142+ 75CF 26 65                        dw      C_FIND                  // (find)
1143+ 75D1 9E 6F                        dw      QDUP                    // ?dup
1144+ 75D3 E5 69                        dw      ZEQUAL                  // 0=
1145+ 75D5                                                              // if
1146+ 75D5 2C 64                        dw      ZBRANCH
1147+ 75D7 08 00                        dw      LFind_Endif - $
1148+ 75D9 D3 6E                        dw          HERE                //      here
1149+ 75DB 0B 70                        dw          LATEST              //      latest
1150+ 75DD 26 65                        dw          C_FIND              //      (find)
1151+ 75DF              LFind_Endif:                                    // endif
1152+ 75DF A3 69                        dw      EXIT                    // ;
1153+ 75E1
1154+ 75E1              //  ______________________________________________________________________
1155+ 75E1              //
1156+ 75E1              // (abort)      --
1157+ 75E1                              Colon_Def CABORT,  "(ABORT)", is_normal
1157+ 75E1             >                New_Def  CABORT, "(ABORT)", Enter_Ptr, is_normal ; ok
1157+ 75E1             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1157+ 75E1             >
1157+ 75E1             >                // dummy db directives used to calculate length of namec
1157+ 75E1 28 41 42 4F >                db      "(ABORT)"
1157+ 75E5 52 54 29    >
1157+ 75E8             >len_NFA         defl    $ - temp_NFA
1157+ 75E8             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1157+ 75E1             >
1157+ 75E1 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1157+ 75E2 28 41 42 4F >                db      "(ABORT)"               // name string in 7-bit ascii, but
1157+ 75E6 52 54 29    >
1157+ 75E9             >                org     $-1                 // alter last byte of Name just above to set
1157+ 75E8 A9          >                db      {b $} | END_BIT     // msb as name end
1157+ 75E9             >
1157+ 75E9 BB 75       >                dw      last_NFA            // Link to previous definition Name
1157+ 75EB             >CABORT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1157+ 75EB 79 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
1157+ 75ED             >                else
1157+ 75ED ~           >                dw      $ + 2   ; ok        // is pointed by CFA
1157+ 75ED             >                endif           ; ok        // for other definitions it "points" the correct handler
1157+ 75ED             >                // Use of "; ok" to suppress "warning[fwdref]"
1157+ 75ED             >
1157+ 75ED             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1158+ 75ED AA 78                        dw      ABORT                   // abort
1159+ 75EF A3 69                        dw      EXIT                    // ;
1160+ 75F1
1161+ 75F1              //  ______________________________________________________________________
1162+ 75F1              //
1163+ 75F1              // error        n --
1164+ 75F1              // raise an error
1165+ 75F1              // if WARNING is 0, prints "MSG#n".
1166+ 75F1              // if WARNING is 1, prints line n of screen 4.
1167+ 75F1              // if WARNING is -1 does (ABORT) that normally does ABORT
1168+ 75F1              // value can be negative or beyond block 4.
1169+ 75F1                              Colon_Def ERROR,  "ERROR", is_normal
1169+ 75F1             >                New_Def  ERROR, "ERROR", Enter_Ptr, is_normal ; ok
1169+ 75F1             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1169+ 75F1             >
1169+ 75F1             >                // dummy db directives used to calculate length of namec
1169+ 75F1 45 52 52 4F >                db      "ERROR"
1169+ 75F5 52          >
1169+ 75F6             >len_NFA         defl    $ - temp_NFA
1169+ 75F6             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1169+ 75F1             >
1169+ 75F1 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1169+ 75F2 45 52 52 4F >                db      "ERROR"               // name string in 7-bit ascii, but
1169+ 75F6 52          >
1169+ 75F7             >                org     $-1                 // alter last byte of Name just above to set
1169+ 75F6 D2          >                db      {b $} | END_BIT     // msb as name end
1169+ 75F7             >
1169+ 75F7 E1 75       >                dw      last_NFA            // Link to previous definition Name
1169+ 75F9             >ERROR:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1169+ 75F9 79 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
1169+ 75FB             >                else
1169+ 75FB ~           >                dw      $ + 2   ; ok        // is pointed by CFA
1169+ 75FB             >                endif           ; ok        // for other definitions it "points" the correct handler
1169+ 75FB             >                // Use of "; ok" to suppress "warning[fwdref]"
1169+ 75FB             >
1169+ 75FB             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1170+ 75FB 9F 6D 97 6B                  dw      WARNING, FETCH, ZLESS   // warning @ 0<
1170+ 75FF 00 6A
1171+ 7601                                                              // if
1172+ 7601 2C 64                        dw      ZBRANCH
1173+ 7603 04 00                        dw      Error_Endif_1 - $
1174+ 7605 EB 75                        dw          CABORT              //      (abort)
1175+ 7607              Error_Endif_1:                                  // endif
1176+ 7607 D3 6E 29 72                  dw      HERE, COUNT, TYPE       // here count type
1176+ 760B 8F 72
1177+ 760D 60 74                        dw      C_DOT_QUOTE             // .( ? )
1178+ 760F 02 3F 20                     db      2, "? "
1179+ 7612 DB 7A                        dw      MESSAGE                 // message  ( forward )
1180+ 7614 76 6D 97 6B                  dw      S0, FETCH, SPSTORE      // s0 @ sp!
1180+ 7618 7A 69
1181+ 761A F3 6D 97 6B                  dw      BLK, FETCH, QDUP        // blk @ ?dup
1181+ 761E 9E 6F
1182+ 7620                                                              // if
1183+ 7620 2C 64                        dw      ZBRANCH
1184+ 7622 08 00                        dw      Error_Endif_2 - $
1185+ 7624 FC 6D 97 6B                  dw          TO_IN, FETCH, SWAP  //      >in @ swap
1185+ 7628 F7 6A
1186+ 762A              Error_Endif_2:                                  // endif
1187+ 762A 69 78                        dw      QUIT                    // quit ( forward )
1188+ 762C A3 69                        dw      EXIT                    // ;
1189+ 762E              //  ______________________________________________________________________
1190+ 762E              //
1191+ 762E              // id.          nfa --
1192+ 762E                              Colon_Def ID_DOT,  "ID.", is_normal
1192+ 762E             >                New_Def  ID_DOT, "ID.", Enter_Ptr, is_normal ; ok
1192+ 762E             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1192+ 762E             >
1192+ 762E             >                // dummy db directives used to calculate length of namec
1192+ 762E 49 44 2E    >                db      "ID."
1192+ 7631             >len_NFA         defl    $ - temp_NFA
1192+ 7631             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1192+ 762E             >
1192+ 762E 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1192+ 762F 49 44 2E    >                db      "ID."               // name string in 7-bit ascii, but
1192+ 7632             >                org     $-1                 // alter last byte of Name just above to set
1192+ 7631 AE          >                db      {b $} | END_BIT     // msb as name end
1192+ 7632             >
1192+ 7632 F1 75       >                dw      last_NFA            // Link to previous definition Name
1192+ 7634             >ID_DOT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1192+ 7634 79 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
1192+ 7636             >                else
1192+ 7636 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
1192+ 7636             >                endif           ; ok        // for other definitions it "points" the correct handler
1192+ 7636             >                // Use of "; ok" to suppress "warning[fwdref]"
1192+ 7636             >
1192+ 7636             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1193+ 7636 FE 73 A9 63                  dw      PAD, LIT, 32, LIT, 96   // pad 32 96
1193+ 763A 20 00 A9 63
1193+ 763E 60 00
1194+ 7640 AF 73                        dw      FILL                    // fill
1195+ 7642 04 6B 49 70                  dw      DUP, PFA, LFA           // dup pfa lfa
1195+ 7646 1B 70
1196+ 7648 BF 6A 21 6F                  dw      OVER, SUBTRACT          // over -
1197+ 764C FE 73 F7 6A                  dw      PAD, SWAP               // pad swap
1198+ 7650 96 68                        dw      CMOVE                   // cmove
1199+ 7652 FE 73 29 72                  dw      PAD, COUNT, LIT, $1F    // pad count 01F
1199+ 7656 A9 63 1F 00
1200+ 765A 33 69                        dw      AND_OP                  // and  ( use only lower bits )
1201+ 765C 8F 72 D5 6F                  dw      TYPE, SPACE             // type
1202+ 7660 A3 69                        dw      EXIT                    // ;
1203+ 7662
1204+ 7662              //  ______________________________________________________________________
1205+ 7662              //
1206+ 7662              // code         -- cccc
1207+ 7662                              Colon_Def CODE,  "CODE", is_normal
1207+ 7662             >                New_Def  CODE, "CODE", Enter_Ptr, is_normal ; ok
1207+ 7662             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1207+ 7662             >
1207+ 7662             >                // dummy db directives used to calculate length of namec
1207+ 7662 43 4F 44 45 >                db      "CODE"
1207+ 7666             >len_NFA         defl    $ - temp_NFA
1207+ 7666             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1207+ 7662             >
1207+ 7662 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1207+ 7663 43 4F 44 45 >                db      "CODE"               // name string in 7-bit ascii, but
1207+ 7667             >                org     $-1                 // alter last byte of Name just above to set
1207+ 7666 C5          >                db      {b $} | END_BIT     // msb as name end
1207+ 7667             >
1207+ 7667 2E 76       >                dw      last_NFA            // Link to previous definition Name
1207+ 7669             >CODE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1207+ 7669 79 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
1207+ 766B             >                else
1207+ 766B ~           >                dw      $ + 2   ; ok        // is pointed by CFA
1207+ 766B             >                endif           ; ok        // for other definitions it "points" the correct handler
1207+ 766B             >                // Use of "; ok" to suppress "warning[fwdref]"
1207+ 766B             >
1207+ 766B             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1208+ 766B C3 75                        dw      LFIND                   // -find
1209+ 766D                                                              // if
1210+ 766D 2C 64                        dw      ZBRANCH
1211+ 766F 10 00                        dw      Code_Endif - $
1212+ 7671 CF 6A                        dw          DROP                //      drop
1213+ 7673 6D 70 34 76                  dw          TO_NAME, ID_DOT     //      >name id.
1214+ 7677 A9 63 04 00                  dw          LIT, 4, MESSAGE     //      4 message
1214+ 767B DB 7A
1215+ 767D D5 6F                        dw          SPACE               //      space
1216+ 767F              Code_Endif:                                     // endif
1217+ 767F D3 6E                        dw      HERE                    // here
1218+ 7681                                                              // ( ---- here begins NFA ---- )
1219+ 7681 04 6B B2 6B                  dw      DUP, CFETCH             // dup c@
1220+ 7685 92 6D 97 6B                  dw      WIDTH, FETCH, MIN       // width @ min  ( max 31 character length )
1220+ 7689 71 6F
1221+ 768B 45 6A E3 6E                  dw      ONE_PLUS, ALLOT         // 1+ allot
1222+ 768F 04 6B                        dw      DUP                     // dup
1223+ 7691 A9 63                        dw      LIT
1224+ 7693 A0 00                        dw      SMUDGE_BIT | END_BIT    // 160
1225+ 7695 8A 6B                        dw      TOGGLE                  // toggle
1226+ 7697 D3 6E 51 6A                  dw      HERE, ONE_SUBTRACT      // here 1- ( last character )
1227+ 769B A9 63 80 00                  dw      LIT, END_BIT, TOGGLE    // 128 toggle
1227+ 769F 8A 6B
1228+ 76A1                                                              // ( ---- here is LFA ---- )
1229+ 76A1 0B 70 EF 6E                  dw      LATEST, COMMA           // latest ,
1230+ 76A5 34 6E 97 6B                  dw      CURRENT, FETCH, STORE   // current @ ! ( save this word as the latest )
1230+ 76A9 A4 6B
1231+ 76AB D3 6E 6D 6A                  dw      HERE, CELL_PLUS, COMMA  // ( CFA point PFA )
1231+ 76AF EF 6E
1232+ 76B1 A3 69                        dw      EXIT                    // ;
1233+ 76B3
1234+ 76B3              //  ______________________________________________________________________
1235+ 76B3              //
1236+ 76B3              // create       -- cccc     ( compile time )
1237+ 76B3              //              -- a        ( run time )
1238+ 76B3                              Colon_Def CREATE,  "CREATE", is_normal
1238+ 76B3             >                New_Def  CREATE, "CREATE", Enter_Ptr, is_normal ; ok
1238+ 76B3             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1238+ 76B3             >
1238+ 76B3             >                // dummy db directives used to calculate length of namec
1238+ 76B3 43 52 45 41 >                db      "CREATE"
1238+ 76B7 54 45       >
1238+ 76B9             >len_NFA         defl    $ - temp_NFA
1238+ 76B9             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1238+ 76B3             >
1238+ 76B3 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1238+ 76B4 43 52 45 41 >                db      "CREATE"               // name string in 7-bit ascii, but
1238+ 76B8 54 45       >
1238+ 76BA             >                org     $-1                 // alter last byte of Name just above to set
1238+ 76B9 C5          >                db      {b $} | END_BIT     // msb as name end
1238+ 76BA             >
1238+ 76BA 62 76       >                dw      last_NFA            // Link to previous definition Name
1238+ 76BC             >CREATE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1238+ 76BC 79 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
1238+ 76BE             >                else
1238+ 76BE ~           >                dw      $ + 2   ; ok        // is pointed by CFA
1238+ 76BE             >                endif           ; ok        // for other definitions it "points" the correct handler
1238+ 76BE             >                // Use of "; ok" to suppress "warning[fwdref]"
1238+ 76BE             >
1238+ 76BE             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1239+ 76BE 69 76 6E 71                  dw      CODE, SMUDGE        // code smudge
1240+ 76C2
1241+ 76C2
1242+ 76C2 C4 71                        dw      C_SEMICOLON_CODE
1243+ 76C4                              // this routine is called from the call coded in CFA
1244+ 76C4              Create_Ptr:
1245+ 76C4 13                           inc     de
1246+ 76C5 D5                           push    de                  // balance TOS before overwrite it
1247+ 76C6
1248+ 76C6                              next
1248+ 76C6 DD E9       >                jp      (ix)
1249+ 76C8
1250+ 76C8              //  ______________________________________________________________________
1251+ 76C8              //
1252+ 76C8              // [compile]    -- cccc     ( compile time )
1253+ 76C8                              Colon_Def COMPILE_IMMEDIATE,  "[COMPILE]", is_immediate
1253+ 76C8             >                New_Def  COMPILE_IMMEDIATE, "[COMPILE]", Enter_Ptr, is_immediate ; ok
1253+ 76C8             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1253+ 76C8             >
1253+ 76C8             >                // dummy db directives used to calculate length of namec
1253+ 76C8 5B 43 4F 4D >                db      "[COMPILE]"
1253+ 76CC 50 49 4C 45 >
1253+ 76D0 5D          >
1253+ 76D1             >len_NFA         defl    $ - temp_NFA
1253+ 76D1             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1253+ 76C8             >
1253+ 76C8 C9          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
1253+ 76C9 5B 43 4F 4D >                db      "[COMPILE]"               // name string in 7-bit ascii, but
1253+ 76CD 50 49 4C 45 >
1253+ 76D1 5D          >
1253+ 76D2             >                org     $-1                 // alter last byte of Name just above to set
1253+ 76D1 DD          >                db      {b $} | END_BIT     // msb as name end
1253+ 76D2             >
1253+ 76D2 B3 76       >                dw      last_NFA            // Link to previous definition Name
1253+ 76D4             >COMPILE_IMMEDIATE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1253+ 76D4 79 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
1253+ 76D6             >                else
1253+ 76D6 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
1253+ 76D6             >                endif           ; ok        // for other definitions it "points" the correct handler
1253+ 76D6             >                // Use of "; ok" to suppress "warning[fwdref]"
1253+ 76D6             >
1253+ 76D6             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1254+ 76D6 C3 75                        dw      LFIND                   // -find      (  cfa  b  f  )
1255+ 76D8 E5 69                        dw      ZEQUAL                  // 0=         (  cfa  b  )
1256+ 76DA F4 6C 8F 70                  dw      ZERO, QERROR            // 0 ?error
1257+ 76DE CF 6A                        dw      DROP                    // drop       (  cfa  )
1258+ 76E0 EF 6E                        dw      COMMA                   // ,
1259+ 76E2 A3 69                        dw      EXIT                    // ; immediate
1260+ 76E4
1261+ 76E4              //  ______________________________________________________________________
1262+ 76E4              //
1263+ 76E4              // literal      n --      ( compile time )
1264+ 76E4                              Colon_Def LITERAL,  "LITERAL", is_immediate
1264+ 76E4             >                New_Def  LITERAL, "LITERAL", Enter_Ptr, is_immediate ; ok
1264+ 76E4             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1264+ 76E4             >
1264+ 76E4             >                // dummy db directives used to calculate length of namec
1264+ 76E4 4C 49 54 45 >                db      "LITERAL"
1264+ 76E8 52 41 4C    >
1264+ 76EB             >len_NFA         defl    $ - temp_NFA
1264+ 76EB             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1264+ 76E4             >
1264+ 76E4 C7          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
1264+ 76E5 4C 49 54 45 >                db      "LITERAL"               // name string in 7-bit ascii, but
1264+ 76E9 52 41 4C    >
1264+ 76EC             >                org     $-1                 // alter last byte of Name just above to set
1264+ 76EB CC          >                db      {b $} | END_BIT     // msb as name end
1264+ 76EC             >
1264+ 76EC C8 76       >                dw      last_NFA            // Link to previous definition Name
1264+ 76EE             >LITERAL:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1264+ 76EE 79 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
1264+ 76F0             >                else
1264+ 76F0 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
1264+ 76F0             >                endif           ; ok        // for other definitions it "points" the correct handler
1264+ 76F0             >                // Use of "; ok" to suppress "warning[fwdref]"
1264+ 76F0             >
1264+ 76F0             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1265+ 76F0 3F 6E 97 6B                  dw      STATE, FETCH            // state @
1266+ 76F4                                                              // if
1267+ 76F4 2C 64                        dw      ZBRANCH
1268+ 76F6 08 00                        dw      Literal_Endif - $
1269+ 76F8 22 71 A9 63                  dw          COMPILE, LIT        //      compile lit
1270+ 76FC EF 6E                        dw          COMMA               //      ,
1271+ 76FE              Literal_Endif:                                  // endif
1272+ 76FE A3 69                        dw      EXIT                    // ; immediate
1273+ 7700
1274+ 7700              //  ______________________________________________________________________
1275+ 7700              //
1276+ 7700              // dliteral     n --      ( compile time )
1277+ 7700                              Colon_Def DLITERAL,  "DLITERAL", is_immediate
1277+ 7700             >                New_Def  DLITERAL, "DLITERAL", Enter_Ptr, is_immediate ; ok
1277+ 7700             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1277+ 7700             >
1277+ 7700             >                // dummy db directives used to calculate length of namec
1277+ 7700 44 4C 49 54 >                db      "DLITERAL"
1277+ 7704 45 52 41 4C >
1277+ 7708             >len_NFA         defl    $ - temp_NFA
1277+ 7708             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1277+ 7700             >
1277+ 7700 C8          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
1277+ 7701 44 4C 49 54 >                db      "DLITERAL"               // name string in 7-bit ascii, but
1277+ 7705 45 52 41 4C >
1277+ 7709             >                org     $-1                 // alter last byte of Name just above to set
1277+ 7708 CC          >                db      {b $} | END_BIT     // msb as name end
1277+ 7709             >
1277+ 7709 E4 76       >                dw      last_NFA            // Link to previous definition Name
1277+ 770B             >DLITERAL:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1277+ 770B 79 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
1277+ 770D             >                else
1277+ 770D ~           >                dw      $ + 2   ; ok        // is pointed by CFA
1277+ 770D             >                endif           ; ok        // for other definitions it "points" the correct handler
1277+ 770D             >                // Use of "; ok" to suppress "warning[fwdref]"
1277+ 770D             >
1277+ 770D             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1278+ 770D 3F 6E 97 6B                  dw      STATE, FETCH            // state @
1279+ 7711                                                              // if
1280+ 7711 2C 64                        dw      ZBRANCH
1281+ 7713 08 00                        dw      DLiteral_Endif - $
1282+ 7715 F7 6A                        dw          SWAP                //      swap
1283+ 7717 EE 76 EE 76                  dw          LITERAL,  LITERAL   //      [compile] literal [compile] literal
1284+ 771B              DLiteral_Endif:                                 // endif
1285+ 771B A3 69                        dw      EXIT                    // ; immediate
1286+ 771D
1287+ 771D              //  ______________________________________________________________________
1288+ 771D              //
1289+ 771D              // [char]       n --      ( compile time )
1290+ 771D              // inside colon definition, gets first character from next input word
1291+ 771D              // and compiles it as literal.
1292+ 771D                              Colon_Def COMPILE_CHAR,  "[CHAR]", is_immediate
1292+ 771D             >                New_Def  COMPILE_CHAR, "[CHAR]", Enter_Ptr, is_immediate ; ok
1292+ 771D             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1292+ 771D             >
1292+ 771D             >                // dummy db directives used to calculate length of namec
1292+ 771D 5B 43 48 41 >                db      "[CHAR]"
1292+ 7721 52 5D       >
1292+ 7723             >len_NFA         defl    $ - temp_NFA
1292+ 7723             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1292+ 771D             >
1292+ 771D C6          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
1292+ 771E 5B 43 48 41 >                db      "[CHAR]"               // name string in 7-bit ascii, but
1292+ 7722 52 5D       >
1292+ 7724             >                org     $-1                 // alter last byte of Name just above to set
1292+ 7723 DD          >                db      {b $} | END_BIT     // msb as name end
1292+ 7724             >
1292+ 7724 00 77       >                dw      last_NFA            // Link to previous definition Name
1292+ 7726             >COMPILE_CHAR:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1292+ 7726 79 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
1292+ 7728             >                else
1292+ 7728 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
1292+ 7728             >                endif           ; ok        // for other definitions it "points" the correct handler
1292+ 7728             >                // Use of "; ok" to suppress "warning[fwdref]"
1292+ 7728             >
1292+ 7728             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1293+ 7728 7B 74 EE 76                  dw      CHAR, LITERAL           // char [compile] literal
1294+ 772C A3 69                        dw      EXIT                    // ; immediate
1295+ 772E
1296+ 772E              //  ______________________________________________________________________
1297+ 772E              //
1298+ 772E              // 0x00         n --      ( compile time )
1299+ 772E                              Colon_Def NUL_WORD,  $00, is_immediate
1299+ 772E             >                New_Def  NUL_WORD, $00, Enter_Ptr, is_immediate ; ok
1299+ 772E             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1299+ 772E             >
1299+ 772E             >                // dummy db directives used to calculate length of namec
1299+ 772E 00          >                db      $00
1299+ 772F             >len_NFA         defl    $ - temp_NFA
1299+ 772F             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1299+ 772E             >
1299+ 772E C1          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
1299+ 772F 00          >                db      $00               // name string in 7-bit ascii, but
1299+ 7730             >                org     $-1                 // alter last byte of Name just above to set
1299+ 772F 80          >                db      {b $} | END_BIT     // msb as name end
1299+ 7730             >
1299+ 7730 1D 77       >                dw      last_NFA            // Link to previous definition Name
1299+ 7732             >NUL_WORD:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1299+ 7732 79 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
1299+ 7734             >                else
1299+ 7734 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
1299+ 7734             >                endif           ; ok        // for other definitions it "points" the correct handler
1299+ 7734             >                // Use of "; ok" to suppress "warning[fwdref]"
1299+ 7734             >
1299+ 7734             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1300+ 7734 F3 6D 97 6B                  dw      BLK, FETCH, ONE         // blk @ 1
1300+ 7738 FC 6C
1301+ 773A 63 6F                        dw      GREATER                 // > if
1302+ 773C                                                              // if
1303+ 773C 2C 64                        dw      ZBRANCH
1304+ 773E 28 00                        dw      Nul_Else_1 - $
1305+ 7740 FC 6C F3 6D                  dw          ONE, BLK, PLUSSTORE //      1 blk +!
1305+ 7744 74 6B
1306+ 7746 F4 6C FC 6D                  dw          ZERO, TO_IN, STORE  //      0 >in !
1306+ 774A A4 6B
1307+ 774C F3 6D 97 6B                  dw          BLK, FETCH          //      blk @
1308+ 7750 40 6D                        dw          BSCR                //      b/scr
1309+ 7752 51 6A                        dw          ONE_SUBTRACT        //      1 -
1310+ 7754 33 69                        dw          AND_OP              //      and  ( this is tricky )
1311+ 7756 E5 69                        dw          ZEQUAL              //      0=
1312+ 7758                                                              //      if
1313+ 7758 2C 64                        dw          ZBRANCH
1314+ 775A 08 00                        dw          Nul_Endif_2 - $
1315+ 775C C1 70                        dw              QEXEC           //          ?exec
1316+ 775E CA 69 CF 6A                  dw              R_TO, DROP      //          r> drop
1317+ 7762              Nul_Endif_2:                                    //      endif
1318+ 7762 15 64                        dw      BRANCH
1319+ 7764 06 00                        dw      Nul_Endif_1 - $
1320+ 7766              Nul_Else_1:                                     // else
1321+ 7766 CA 69 CF 6A                  dw          R_TO, DROP          //      r> drop
1322+ 776A              Nul_Endif_1:                                    // endif
1323+ 776A A3 69                        dw      EXIT                    // ;
1324+ 776C
1325+ 776C              //  ______________________________________________________________________
1326+ 776C              //
1327+ 776C              // ?stack       --
1328+ 776C              // Raise error #1 if stack is empty and you pop it
1329+ 776C              // Raise error #7 if stack is full.
1330+ 776C              // This means SP must always stay between HERE and FFFF
1331+ 776C              // For 128K BANK paging purpose SP must be <= BFE0 and 50 words room
1332+ 776C              // for Next 8K MMU paging this is $DOE8
1333+ 776C                              Colon_Def QSTACK, "?STACK", is_normal
1333+ 776C             >                New_Def  QSTACK, "?STACK", Enter_Ptr, is_normal ; ok
1333+ 776C             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1333+ 776C             >
1333+ 776C             >                // dummy db directives used to calculate length of namec
1333+ 776C 3F 53 54 41 >                db      "?STACK"
1333+ 7770 43 4B       >
1333+ 7772             >len_NFA         defl    $ - temp_NFA
1333+ 7772             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1333+ 776C             >
1333+ 776C 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1333+ 776D 3F 53 54 41 >                db      "?STACK"               // name string in 7-bit ascii, but
1333+ 7771 43 4B       >
1333+ 7773             >                org     $-1                 // alter last byte of Name just above to set
1333+ 7772 CB          >                db      {b $} | END_BIT     // msb as name end
1333+ 7773             >
1333+ 7773 2E 77       >                dw      last_NFA            // Link to previous definition Name
1333+ 7775             >QSTACK:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1333+ 7775 79 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
1333+ 7777             >                else
1333+ 7777 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
1333+ 7777             >                endif           ; ok        // for other definitions it "points" the correct handler
1333+ 7777             >                // Use of "; ok" to suppress "warning[fwdref]"
1333+ 7777             >
1333+ 7777             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1334+ 7777 6B 69                        dw      SPFETCH                 // sp@
1335+ 7779 76 6D 97 6B                  dw      S0, FETCH               // s0 @
1336+ 777D F7 6A 3C 6F                  dw      SWAP, ULESS             // swap u<
1337+ 7781 FC 6C 8F 70                  dw      ONE, QERROR             // 1 ?error
1338+ 7785 D3 6E                        dw      HERE                    // here
1339+ 7787 76 6D 97 6B                  dw      S0, FETCH, LESS         // s0 @ <
1339+ 778B 4C 6F
1340+ 778D                                                              // if
1341+ 778D 2C 64                        dw      ZBRANCH
1342+ 778F 14 00                        dw      QStack_Endif - $
1343+ 7791 6B 69                        dw          SPFETCH             //      sp@
1344+ 7793 D3 6E A9 63                  dw          HERE, LIT, 128      //      here 128
1344+ 7797 80 00
1345+ 7799 24 6A 3C 6F                  dw          PLUS, ULESS         //      plus u<
1346+ 779D A9 63 07 00                  dw          LIT, 7, QERROR      //      7 Cerror
1346+ 77A1 8F 70
1347+ 77A3              QStack_Endif:                                   // endif
1348+ 77A3 A3 69                        dw      EXIT                    // ;
1349+ 77A5
1350+ 77A5
# file closed: C:\Zx\CSpect\Projects\vForth15_INDIRECT/source/L1.asm
 111  77A5                              include "L2.asm"
# file opened: C:\Zx\CSpect\Projects\vForth15_INDIRECT/source/L2.asm
   1+ 77A5              //  ______________________________________________________________________
   2+ 77A5              //
   3+ 77A5              //  L2.asm
   4+ 77A5              //
   5+ 77A5              //  Level-2
   6+ 77A5              //  the Forth interpreter, vocabulary, cold/warm start and quit from Forth.
   7+ 77A5              //  ______________________________________________________________________
   8+ 77A5
   9+ 77A5
  10+ 77A5              //  ______________________________________________________________________
  11+ 77A5              //
  12+ 77A5              // interpret    --
  13+ 77A5              // This is the text interpreter.
  14+ 77A5              // It executes or compiles, depending on STATE, the text coming from
  15+ 77A5              // current input stream.
  16+ 77A5              // If the word search fails after parsing CONTEXT and CURRENT vocabulary,
  17+ 77A5              // the word is interpreted as numeric and converted, using current BASE,
  18+ 77A5              // leaving on top of stack a single or double precision number, depending
  19+ 77A5              // on the presence of a decimal point.
  20+ 77A5              // If the number conversion fails, the terminal is notified with ? followed
  21+ 77A5              // by the offending word.
  22+ 77A5                              Colon_Def INTERPRET, "INTERPRET", is_normal
  22+ 77A5             >                New_Def  INTERPRET, "INTERPRET", Enter_Ptr, is_normal ; ok
  22+ 77A5             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  22+ 77A5             >
  22+ 77A5             >                // dummy db directives used to calculate length of namec
  22+ 77A5 49 4E 54 45 >                db      "INTERPRET"
  22+ 77A9 52 50 52 45 >
  22+ 77AD 54          >
  22+ 77AE             >len_NFA         defl    $ - temp_NFA
  22+ 77AE             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  22+ 77A5             >
  22+ 77A5 89          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  22+ 77A6 49 4E 54 45 >                db      "INTERPRET"               // name string in 7-bit ascii, but
  22+ 77AA 52 50 52 45 >
  22+ 77AE 54          >
  22+ 77AF             >                org     $-1                 // alter last byte of Name just above to set
  22+ 77AE D4          >                db      {b $} | END_BIT     // msb as name end
  22+ 77AF             >
  22+ 77AF 6C 77       >                dw      last_NFA            // Link to previous definition Name
  22+ 77B1             >INTERPRET:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
  22+ 77B1 79 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
  22+ 77B3             >                else
  22+ 77B3 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
  22+ 77B3             >                endif           ; ok        // for other definitions it "points" the correct handler
  22+ 77B3             >                // Use of "; ok" to suppress "warning[fwdref]"
  22+ 77B3             >
  22+ 77B3             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  23+ 77B3
  24+ 77B3              Interpret_Begin:                                        // begin
  25+ 77B3 C3 75                        dw          LFIND                       //      -find
  26+ 77B5                                                                      //      if
  27+ 77B5 2C 64                        dw          ZBRANCH
  28+ 77B7 1A 00                        dw          Interpret_Else_1 - $
  29+ 77B9 3F 6E 97 6B                  dw              STATE, FETCH, LESS      //          state @ <
  29+ 77BD 4C 6F
  30+ 77BF                                                                      //          if
  31+ 77BF 2C 64                        dw              ZBRANCH
  32+ 77C1 08 00                        dw              Interpret_Else_2 - $
  33+ 77C3 3F 71                        dw                  COMPILE_XT          //              compile,
  34+ 77C5                                                                      //          else
  35+ 77C5 15 64                        dw              BRANCH
  36+ 77C7 06 00                        dw              Interpret_Endif_2 - $
  37+ 77C9              Interpret_Else_2:
  38+ 77C9 BE 63 A1 6C                  dw                  EXECUTE, NOOP       //              execute nooop
  39+ 77CD              Interpret_Endif_2:                                      //          endif
  40+ 77CD                                                                      //      else
  41+ 77CD 15 64                        dw          BRANCH
  42+ 77CF 1A 00                        dw          Interpret_Endif_1 - $
  43+ 77D1              Interpret_Else_1:
  44+ 77D1 D3 6E 7D 75                  dw              HERE, NUMBER            //          here number
  45+ 77D5 52 6E 97 6B                  dw              DPL, FETCH, ONE_PLUS    //          dpl @ 1+
  45+ 77D9 45 6A
  46+ 77DB                                                                      //          if
  47+ 77DB 2C 64                        dw              ZBRANCH
  48+ 77DD 08 00                        dw              Interpret_Else_3 - $
  49+ 77DF              //              dw                  NMODE, FETCH        //              nmode @
  50+ 77DF              //                                                      //              if
  51+ 77DF              //              dw                  ZBRANCH
  52+ 77DF              //              dw                  Interpret_Endif_4 - $
  53+ 77DF              //              dw                      ONE, ZERO       //                  1 0
  54+ 77DF              //              dw                      TWO_DROP        //                  2drop
  55+ 77DF              //Interpret_Endif_4:                                      //              endif
  56+ 77DF 0B 77                        dw                  DLITERAL            //              [compile] dliteral
  57+ 77E1                                                                      //          else
  58+ 77E1 15 64                        dw              BRANCH
  59+ 77E3 06 00                        dw              Interpret_Endif_3 - $
  60+ 77E5              Interpret_Else_3:
  61+ 77E5 CF 6A                        dw                  DROP                //              drop
  62+ 77E7 EE 76                        dw                  LITERAL             //              [compile]  literal
  63+ 77E9              Interpret_Endif_3:                                      //          endif
  64+ 77E9              Interpret_Endif_1:                                      //      endif
  65+ 77E9 75 77                        dw          QSTACK                      //      ?stack
  66+ 77EB              //              dw          QTERMINAL                   //      ?terminal
  67+ 77EB              //                                                      //      if
  68+ 77EB              //              dw          ZBRANCH
  69+ 77EB              //              dw          Interpret_Endif_5 - $
  70+ 77EB              //              dw              CABORT                  //          (abort)
  71+ 77EB              //Interpret_Endif_5:                                      //      endif
  72+ 77EB 15 64                        dw      BRANCH
  73+ 77ED C6 FF                        dw      Interpret_Begin - $
  74+ 77EF A3 69                        dw      EXIT                            // ;
  75+ 77F1
  76+ 77F1              //  ______________________________________________________________________
  77+ 77F1              //
  78+ 77F1              // vocabulary   -- cccc     ( compile time )
  79+ 77F1              // Defining word used in the form   VOCABULARY cccc
  80+ 77F1              // creates the word  cccc  that gives the name to the vocabulary.
  81+ 77F1              // Giving  cccc  makes the vocabulary CONTEXT so its words are executed first
  82+ 77F1              // Giving  cccc DEFINITIONS makes  the vocabulary  CURRENT
  83+ 77F1              // so new definitions can be inserted in that vocabulary.
  84+ 77F1                              Colon_Def VOCABULARY, "VOCABULARY", is_normal
  84+ 77F1             >                New_Def  VOCABULARY, "VOCABULARY", Enter_Ptr, is_normal ; ok
  84+ 77F1             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  84+ 77F1             >
  84+ 77F1             >                // dummy db directives used to calculate length of namec
  84+ 77F1 56 4F 43 41 >                db      "VOCABULARY"
  84+ 77F5 42 55 4C 41 >
  84+ 77F9 52 59       >
  84+ 77FB             >len_NFA         defl    $ - temp_NFA
  84+ 77FB             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  84+ 77F1             >
  84+ 77F1 8A          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  84+ 77F2 56 4F 43 41 >                db      "VOCABULARY"               // name string in 7-bit ascii, but
  84+ 77F6 42 55 4C 41 >
  84+ 77FA 52 59       >
  84+ 77FC             >                org     $-1                 // alter last byte of Name just above to set
  84+ 77FB D9          >                db      {b $} | END_BIT     // msb as name end
  84+ 77FC             >
  84+ 77FC A5 77       >                dw      last_NFA            // Link to previous definition Name
  84+ 77FE             >VOCABULARY:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
  84+ 77FE 79 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
  84+ 7800             >                else
  84+ 7800 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
  84+ 7800             >                endif           ; ok        // for other definitions it "points" the correct handler
  84+ 7800             >                // Use of "; ok" to suppress "warning[fwdref]"
  84+ 7800             >
  84+ 7800             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  85+ 7800
  86+ 7800 F2 71                        dw      CBUILDS
  87+ 7802
  88+ 7802 A9 63 81 A0                  dw      LIT, $A081, COMMA       // $81A0 ,
  88+ 7806 EF 6E
  89+ 7808 34 6E 97 6B                  dw      CURRENT, FETCH          // current @
  90+ 780C 77 6A EF 6E                  dw      CELL_MINUS, COMMA       // cell- ,
  91+ 7810 D3 6E                        dw      HERE                    // here
  92+ 7812 C0 6D 97 6B                  dw      VOC_LINK, FETCH, COMMA  // voc-link @ ,
  92+ 7816 EF 6E
  93+ 7818 C0 6D A4 6B                  dw      VOC_LINK, STORE         // voc-link !
  94+ 781C
  95+ 781C 02 72                        dw      DOES_TO                 // does>
  96+ 781E              Vocabulary_Does:
  97+ 781E 6D 6A                        dw      CELL_PLUS               // cell+
  98+ 7820 27 6E A4 6B                  dw      CONTEXT, STORE          // context !
  99+ 7824 A3 69                        dw      EXIT                    // ;
 100+ 7826
 101+ 7826              //  ______________________________________________________________________
 102+ 7826              //
 103+ 7826              // forth        --
 104+ 7826              // Name of the first vocabulary.
 105+ 7826              // It makes FORTH the CONTEXT vocabulary.
 106+ 7826              // Until new user vocabulary are defined, new colon-definitions becomes
 107+ 7826              // part of FORTH. It is immediate, so it will executed during the creation
 108+ 7826              // of a colon definition to be able to select the vocabulary.
 109+ 7826
 110+ 7826                              New_Def FORTH, "FORTH", Does_Ptr, is_immediate
 110+ 7826             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 110+ 7826             >
 110+ 7826             >                // dummy db directives used to calculate length of namec
 110+ 7826 46 4F 52 54 >                db      "FORTH"
 110+ 782A 48          >
 110+ 782B             >len_NFA         defl    $ - temp_NFA
 110+ 782B             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 110+ 7826             >
 110+ 7826 C5          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 110+ 7827 46 4F 52 54 >                db      "FORTH"               // name string in 7-bit ascii, but
 110+ 782B 48          >
 110+ 782C             >                org     $-1                 // alter last byte of Name just above to set
 110+ 782B C8          >                db      {b $} | END_BIT     // msb as name end
 110+ 782C             >
 110+ 782C F1 77       >                dw      last_NFA            // Link to previous definition Name
 110+ 782E             >FORTH:          if Does_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 110+ 782E 0E 72       >                dw      Does_Ptr ; ok        // for primitive definitions  actual code
 110+ 7830             >                else
 110+ 7830 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 110+ 7830             >                endif           ; ok        // for other definitions it "points" the correct handler
 110+ 7830             >                // Use of "; ok" to suppress "warning[fwdref]"
 110+ 7830             >
 110+ 7830             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 111+ 7830 1E 78                        dw      Vocabulary_Does
 112+ 7832 81 A0                        db      $81, $A0
 113+ 7834              Forth_Latest_Ptr:
 114+ 7834 4F 87                        dw      Here_Dictionary // Fence_Word // Latest_Definition // Here_Dictionary
 115+ 7836              Voclink_Ptr:
 116+ 7836 00 00                        dw      0
 117+ 7838              // Any new vocabulary is structured as follow:
 118+ 7838              // PFA+0 points to DOES> part of VOCABULARY to perform CELL+ CONTEXT !
 119+ 7838              // PFA+2 is 81,A0 i.e. a null-word used as LATEST in the new vocabulary
 120+ 7838              // PFA+4 always contains the LATEST word of this VOCABULARY.
 121+ 7838              //       at creations it points to the null-word of its parent vocabulary
 122+ 7838              //       that is normally FORTH, For example ASSEMBLER points FORTH's null-word
 123+ 7838              // PFA+6 is the pointer that builds up the vocabulary linked list.
 124+ 7838              //       FORTH has 0 here to signal the end of the list and user's variable
 125+ 7838              //       VOC-LINK points to PFA+6 of the newest vocabulary created.
 126+ 7838              //       While FORTH is the only vocabulary, VOC-LINK points to FORTH's PFA+6
 127+ 7838              //       When ASSEMBLER is created, its PFA+6 points to FORTH's PFA+6, and so on
 128+ 7838
 129+ 7838              //  ______________________________________________________________________
 130+ 7838              //
 131+ 7838              // definitions  --
 132+ 7838              // Used in the form  cccc DEFINITIONS
 133+ 7838              // set the CURRENT vocabulary at CONTEXT to insert new definitions in
 134+ 7838              // vocabulary cccc.
 135+ 7838                              Colon_Def DEFINITIONS, "DEFINITIONS", is_normal
 135+ 7838             >                New_Def  DEFINITIONS, "DEFINITIONS", Enter_Ptr, is_normal ; ok
 135+ 7838             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 135+ 7838             >
 135+ 7838             >                // dummy db directives used to calculate length of namec
 135+ 7838 44 45 46 49 >                db      "DEFINITIONS"
 135+ 783C 4E 49 54 49 >
 135+ 7840 4F 4E 53    >
 135+ 7843             >len_NFA         defl    $ - temp_NFA
 135+ 7843             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 135+ 7838             >
 135+ 7838 8B          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 135+ 7839 44 45 46 49 >                db      "DEFINITIONS"               // name string in 7-bit ascii, but
 135+ 783D 4E 49 54 49 >
 135+ 7841 4F 4E 53    >
 135+ 7844             >                org     $-1                 // alter last byte of Name just above to set
 135+ 7843 D3          >                db      {b $} | END_BIT     // msb as name end
 135+ 7844             >
 135+ 7844 26 78       >                dw      last_NFA            // Link to previous definition Name
 135+ 7846             >DEFINITIONS:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 135+ 7846 79 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 135+ 7848             >                else
 135+ 7848 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 135+ 7848             >                endif           ; ok        // for other definitions it "points" the correct handler
 135+ 7848             >                // Use of "; ok" to suppress "warning[fwdref]"
 135+ 7848             >
 135+ 7848             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 136+ 7848 27 6E 97 6B                  dw      CONTEXT, FETCH          // context @
 137+ 784C 34 6E A4 6B                  dw      CURRENT, STORE          // current !
 138+ 7850 A3 69                        dw      EXIT                    // ;
 139+ 7852
 140+ 7852              //  ______________________________________________________________________
 141+ 7852              //
 142+ 7852              // (            -- cccc )
 143+ 7852              // the following text is interpreted as a comment until a closing )
 144+ 7852                              Colon_Def COMMENT_BRAKET, "(", is_immediate
 144+ 7852             >                New_Def  COMMENT_BRAKET, "(", Enter_Ptr, is_immediate ; ok
 144+ 7852             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 144+ 7852             >
 144+ 7852             >                // dummy db directives used to calculate length of namec
 144+ 7852 28          >                db      "("
 144+ 7853             >len_NFA         defl    $ - temp_NFA
 144+ 7853             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 144+ 7852             >
 144+ 7852 C1          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 144+ 7853 28          >                db      "("               // name string in 7-bit ascii, but
 144+ 7854             >                org     $-1                 // alter last byte of Name just above to set
 144+ 7853 A8          >                db      {b $} | END_BIT     // msb as name end
 144+ 7854             >
 144+ 7854 38 78       >                dw      last_NFA            // Link to previous definition Name
 144+ 7856             >COMMENT_BRAKET:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 144+ 7856 79 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 144+ 7858             >                else
 144+ 7858 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 144+ 7858             >                endif           ; ok        // for other definitions it "points" the correct handler
 144+ 7858             >                // Use of "; ok" to suppress "warning[fwdref]"
 144+ 7858             >
 144+ 7858             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 145+ 7858 A9 63 29 00                  dw      LIT, ")"                // [char] )
 146+ 785C 11 74 CF 6A                  dw      WORD, DROP              // word drop
 147+ 7860 A3 69                        dw      EXIT                    // ;
 148+ 7862
 149+ 7862              //  ______________________________________________________________________
 150+ 7862              //
 151+ 7862              // quit         --
 152+ 7862              // \ Erase the return-stack, stop any compilation and give controlo to the console. No message is issued.
 153+ 7862                              Colon_Def QUIT, "QUIT", is_normal
 153+ 7862             >                New_Def  QUIT, "QUIT", Enter_Ptr, is_normal ; ok
 153+ 7862             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 153+ 7862             >
 153+ 7862             >                // dummy db directives used to calculate length of namec
 153+ 7862 51 55 49 54 >                db      "QUIT"
 153+ 7866             >len_NFA         defl    $ - temp_NFA
 153+ 7866             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 153+ 7862             >
 153+ 7862 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 153+ 7863 51 55 49 54 >                db      "QUIT"               // name string in 7-bit ascii, but
 153+ 7867             >                org     $-1                 // alter last byte of Name just above to set
 153+ 7866 D4          >                db      {b $} | END_BIT     // msb as name end
 153+ 7867             >
 153+ 7867 52 78       >                dw      last_NFA            // Link to previous definition Name
 153+ 7869             >QUIT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 153+ 7869 79 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 153+ 786B             >                else
 153+ 786B ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 153+ 786B             >                endif           ; ok        // for other definitions it "points" the correct handler
 153+ 786B             >                // Use of "; ok" to suppress "warning[fwdref]"
 153+ 786B             >
 153+ 786B             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 154+ 786B
 155+ 786B AA 6E 97 6B                  dw      SOURCE_ID, FETCH        // source-id @
 156+ 786F CB 67 CF 6A                  dw      F_CLOSE, DROP           // f_close drop
 157+ 7873 F4 6C AA 6E                  dw      ZERO, SOURCE_ID, STORE  // 0 source-id !
 157+ 7877 A4 6B
 158+ 7879 F4 6C F3 6D                  dw      ZERO, BLK, STORE        // 0 blk !
 158+ 787D A4 6B
 159+ 787F 4B 71                        dw      SQUARED_OPEN            // [compile] [
 160+ 7881                                                              // begin
 161+ 7881              Quit_Begin:
 162+ 7881 7E 6D 97 6B                  dw      R0, FETCH, RPSTORE      //      r0 @ rp!
 162+ 7885 94 69
 163+ 7887 2A 66                        dw      CR                      //      cr
 164+ 7889 92 73                        dw      QUERY                   //      query
 165+ 788B              Next_Breakpoint_1:
 166+ 788B B1 77                        dw      INTERPRET               //      interpret
 167+ 788D 3F 6E 97 6B                  dw      STATE, FETCH, ZEQUAL    //      state @ 0=
 167+ 7891 E5 69
 168+ 7893                                                              //      if
 169+ 7893 2C 64                        dw      ZBRANCH
 170+ 7895 07 00                        dw      Quit_Endif - $
 171+ 7897 60 74                        dw          C_DOT_QUOTE
 172+ 7899 02 6F 6B                     db          2, "ok"             //          .( ok)
 173+ 789C              Quit_Endif:                                     //      else
 174+ 789C                                                              // again
 175+ 789C 15 64                        dw      BRANCH
 176+ 789E E3 FF                        dw      Quit_Begin - $
 177+ 78A0 A3 69                        dw      EXIT                    // ;
 178+ 78A2
 179+ 78A2              //  ______________________________________________________________________
 180+ 78A2              //
 181+ 78A2              // abort        --
 182+ 78A2                              Colon_Def ABORT, "ABORT", is_normal
 182+ 78A2             >                New_Def  ABORT, "ABORT", Enter_Ptr, is_normal ; ok
 182+ 78A2             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 182+ 78A2             >
 182+ 78A2             >                // dummy db directives used to calculate length of namec
 182+ 78A2 41 42 4F 52 >                db      "ABORT"
 182+ 78A6 54          >
 182+ 78A7             >len_NFA         defl    $ - temp_NFA
 182+ 78A7             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 182+ 78A2             >
 182+ 78A2 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 182+ 78A3 41 42 4F 52 >                db      "ABORT"               // name string in 7-bit ascii, but
 182+ 78A7 54          >
 182+ 78A8             >                org     $-1                 // alter last byte of Name just above to set
 182+ 78A7 D4          >                db      {b $} | END_BIT     // msb as name end
 182+ 78A8             >
 182+ 78A8 62 78       >                dw      last_NFA            // Link to previous definition Name
 182+ 78AA             >ABORT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 182+ 78AA 79 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 182+ 78AC             >                else
 182+ 78AC ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 182+ 78AC             >                endif           ; ok        // for other definitions it "points" the correct handler
 182+ 78AC             >                // Use of "; ok" to suppress "warning[fwdref]"
 182+ 78AC             >
 182+ 78AC             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 183+ 78AC 76 6D 97 6B                  dw      S0, FETCH, SPSTORE      // s0 @ sp!
 183+ 78B0 7A 69
 184+ 78B2 AE 71                        dw      DECIMAL                 // decimal
 185+ 78B4 2E 78                        dw      FORTH                   // [compile] forth
 186+ 78B6 46 78                        dw      DEFINITIONS             // definitions
 187+ 78B8              Autoexec_Ptr:
 188+ 78B8 6F 85                        dw      AUTOEXEC                // autoexec, patched to noop
 189+ 78BA 69 78                        dw      QUIT                    // quit
 190+ 78BC A3 69                        dw      EXIT                    // ;
 191+ 78BE
 192+ 78BE              //  ______________________________________________________________________
 193+ 78BE              //
 194+ 78BE              // warm         --
 195+ 78BE                              Colon_Def WARM, "WARM", is_normal
 195+ 78BE             >                New_Def  WARM, "WARM", Enter_Ptr, is_normal ; ok
 195+ 78BE             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 195+ 78BE             >
 195+ 78BE             >                // dummy db directives used to calculate length of namec
 195+ 78BE 57 41 52 4D >                db      "WARM"
 195+ 78C2             >len_NFA         defl    $ - temp_NFA
 195+ 78C2             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 195+ 78BE             >
 195+ 78BE 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 195+ 78BF 57 41 52 4D >                db      "WARM"               // name string in 7-bit ascii, but
 195+ 78C3             >                org     $-1                 // alter last byte of Name just above to set
 195+ 78C2 CD          >                db      {b $} | END_BIT     // msb as name end
 195+ 78C3             >
 195+ 78C3 A2 78       >                dw      last_NFA            // Link to previous definition Name
 195+ 78C5             >WARM:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 195+ 78C5 79 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 195+ 78C7             >                else
 195+ 78C7 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 195+ 78C7             >                endif           ; ok        // for other definitions it "points" the correct handler
 195+ 78C7             >                // Use of "; ok" to suppress "warning[fwdref]"
 195+ 78C7             >
 195+ 78C7             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 196+ 78C7 44 7C                        dw      BLK_INIT                // blk-init
 197+ 78C9 20 84                        dw      SPLASH                  // splash
 198+ 78CB A9 63 07 00                  dw      LIT, 7, EMIT            // 7 emit
 198+ 78CF B9 6F
 199+ 78D1 AA 78                        dw      ABORT                   // abort
 200+ 78D3 A3 69                        dw      EXIT                    // exit
 201+ 78D5
 202+ 78D5              //  ______________________________________________________________________
 203+ 78D5              //
 204+ 78D5              // cold         --
 205+ 78D5                              Colon_Def COLD, "COLD", is_normal
 205+ 78D5             >                New_Def  COLD, "COLD", Enter_Ptr, is_normal ; ok
 205+ 78D5             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 205+ 78D5             >
 205+ 78D5             >                // dummy db directives used to calculate length of namec
 205+ 78D5 43 4F 4C 44 >                db      "COLD"
 205+ 78D9             >len_NFA         defl    $ - temp_NFA
 205+ 78D9             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 205+ 78D5             >
 205+ 78D5 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 205+ 78D6 43 4F 4C 44 >                db      "COLD"               // name string in 7-bit ascii, but
 205+ 78DA             >                org     $-1                 // alter last byte of Name just above to set
 205+ 78D9 C4          >                db      {b $} | END_BIT     // msb as name end
 205+ 78DA             >
 205+ 78DA BE 78       >                dw      last_NFA            // Link to previous definition Name
 205+ 78DC             >COLD:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 205+ 78DC 79 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 205+ 78DE             >                else
 205+ 78DE ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 205+ 78DE             >                endif           ; ok        // for other definitions it "points" the correct handler
 205+ 78DE             >                // Use of "; ok" to suppress "warning[fwdref]"
 205+ 78DE             >
 205+ 78DE             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 206+ 78DE A9 63 78 63                  dw      LIT, S0_origin          // [ hex $12 +origin ] Literal
 207+ 78E2 A9 63 94 63                  dw      LIT, USER_Pointer       // [ hex $3E +origin ] literal
 208+ 78E6 97 6B                        dw      FETCH                   // @
 209+ 78E8 A9 63 06 00                  dw      LIT, 6, PLUS            // 6 +
 209+ 78EC 24 6A
 210+ 78EE A9 63 14 00                  dw      LIT, 20                 // 20
 211+ 78F2 96 68                        dw      CMOVE
 212+ 78F4 A9 63 72 63                  dw      LIT, Latest_origin      // [ hex 0C +origin ] literal
 213+ 78F8 97 6B                        dw      FETCH                   // @
 214+ 78FA A9 63 34 78                  dw      LIT, Forth_Latest_Ptr   // [ ' forth >body 4 + ] Literal
 215+ 78FE A4 6B                        dw      STORE                   // !
 216+ 7900 F4 6C EA 6D                  dw      ZERO, NMODE, STORE      // 0 nmode !
 216+ 7904 A4 6B
 217+ 7906 CB 6D 97 6B                  dw      FIRST, FETCH, DUP       // first @ dup
 217+ 790A 04 6B
 218+ 790C 7E 6E A4 6B                  dw      USE, STORE              // use !
 219+ 7910 88 6E A4 6B                  dw      PREV, STORE             // prev !
 220+ 7914 A9 63 04 00                  dw      LIT, 4, PLACE, STORE    // 4 place !
 220+ 7918 9B 6E A4 6B
 221+ 791C              //              dw      LIT, 8
 222+ 791C              //              dw      LIT, FLAGS2, CSTORE     // 8 5C6A c!
 223+ 791C 04 6D C9 6E                  dw      TWO, HP, STORE          // 2 hp !
 223+ 7920 A4 6B
 224+ 7922 C5 78        Warm_Start:     dw      WARM
 225+ 7924 DC 78        Cold_Start:     dw      COLD
 226+ 7926 A3 69                        dw      EXIT
 227+ 7928
 228+ 7928              //  ______________________________________________________________________
 229+ 7928              WarmRoutine:
 230+ 7928              ColdRoutine:
 231+ 7928 DD 21 98 63                  ld      ix, Next_Ptr
 232+ 792C D9                           exx
 233+ 792D E5                           push    hl
 234+ 792E D9                           exx
 235+ 792F
 236+ 792F ED 73 6E 63                  ld      (SP_Basic), sp
 237+ 7933 ED 7B 78 63                  ld      sp, (S0_origin)
 238+ 7937              //              nop
 239+ 7937 2A 7A 63                     ld      hl, (R0_origin)
 240+ 793A              //              nop
 241+ 793A                              ldrphl
 241+ 793A 22 96 63    >                ld      (RP_Pointer),hl
 242+ 793D 01 22 79                     ld      bc, Warm_Start
 243+ 7940 38 02                        jr      c, Warm_Skip
 244+ 7942 03                           inc     bc
 245+ 7943 03                           inc     bc
 246+ 7944              Warm_Skip:
 247+ 7944                              next
 247+ 7944 DD E9       >                jp      (ix)
 248+ 7946
 249+ 7946              //  ______________________________________________________________________
 250+ 7946              //
 251+ 7946              // basic        --
 252+ 7946                              New_Def BASIC, "BASIC", is_code, is_normal
 252+ 7946             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 252+ 7946             >
 252+ 7946             >                // dummy db directives used to calculate length of namec
 252+ 7946 42 41 53 49 >                db      "BASIC"
 252+ 794A 43          >
 252+ 794B             >len_NFA         defl    $ - temp_NFA
 252+ 794B             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 252+ 7946             >
 252+ 7946 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 252+ 7947 42 41 53 49 >                db      "BASIC"               // name string in 7-bit ascii, but
 252+ 794B 43          >
 252+ 794C             >                org     $-1                 // alter last byte of Name just above to set
 252+ 794B C3          >                db      {b $} | END_BIT     // msb as name end
 252+ 794C             >
 252+ 794C D5 78       >                dw      last_NFA            // Link to previous definition Name
 252+ 794E             >BASIC:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 252+ 794E ~           >                dw      runcode ; ok        // for primitive definitions  actual code
 252+ 794E             >                else
 252+ 794E 50 79       >                dw      $ + 2   ; ok        // is pointed by CFA
 252+ 7950             >                endif           ; ok        // for other definitions it "points" the correct handler
 252+ 7950             >                // Use of "; ok" to suppress "warning[fwdref]"
 252+ 7950             >
 252+ 7950             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 253+ 7950 C1                           pop     bc
 254+ 7951 21 00 00                     ld      hl, 0
 255+ 7954 39                           add     hl, sp
 256+ 7955 ED 7B 6E 63                  ld      sp, (SP_Basic)
 257+ 7959              //              nop
 258+ 7959 22 6E 63                     ld      (SP_Basic),hl
 259+ 795C D9                           exx
 260+ 795D E1                           pop     hl
 261+ 795E D9                           exx
 262+ 795F C9                           ret     // to Basic
 263+ 7960
 264+ 7960              //  ______________________________________________________________________
 265+ 7960              //
 266+ 7960              // +-           n1 n2 -- n3
 267+ 7960              // leaves n1 with the sign of n2 as n3.
 268+ 7960                              Colon_Def PLUS_MINUS, "+-", is_normal
 268+ 7960             >                New_Def  PLUS_MINUS, "+-", Enter_Ptr, is_normal ; ok
 268+ 7960             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 268+ 7960             >
 268+ 7960             >                // dummy db directives used to calculate length of namec
 268+ 7960 2B 2D       >                db      "+-"
 268+ 7962             >len_NFA         defl    $ - temp_NFA
 268+ 7962             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 268+ 7960             >
 268+ 7960 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 268+ 7961 2B 2D       >                db      "+-"               // name string in 7-bit ascii, but
 268+ 7963             >                org     $-1                 // alter last byte of Name just above to set
 268+ 7962 AD          >                db      {b $} | END_BIT     // msb as name end
 268+ 7963             >
 268+ 7963 46 79       >                dw      last_NFA            // Link to previous definition Name
 268+ 7965             >PLUS_MINUS:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 268+ 7965 79 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 268+ 7967             >                else
 268+ 7967 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 268+ 7967             >                endif           ; ok        // for other definitions it "points" the correct handler
 268+ 7967             >                // Use of "; ok" to suppress "warning[fwdref]"
 268+ 7967             >
 268+ 7967             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 269+ 7967 00 6A                        dw      ZLESS                   // 0<
 270+ 7969                                                              // if
 271+ 7969 2C 64                        dw      ZBRANCH
 272+ 796B 04 00                        dw      Plus_Minus_Endif - $
 273+ 796D 8F 6A                        dw          MINUS               //      minus
 274+ 796F              Plus_Minus_Endif:                               // endif
 275+ 796F A3 69                        dw      EXIT                    // ;
 276+ 7971
 277+ 7971              //  ______________________________________________________________________
 278+ 7971              //
 279+ 7971              // d+-          d1 n -- d2
 280+ 7971              // leaves d1 with the sign of n as d2.
 281+ 7971                              Colon_Def DPLUS_MINUS, "D+-", is_normal
 281+ 7971             >                New_Def  DPLUS_MINUS, "D+-", Enter_Ptr, is_normal ; ok
 281+ 7971             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 281+ 7971             >
 281+ 7971             >                // dummy db directives used to calculate length of namec
 281+ 7971 44 2B 2D    >                db      "D+-"
 281+ 7974             >len_NFA         defl    $ - temp_NFA
 281+ 7974             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 281+ 7971             >
 281+ 7971 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 281+ 7972 44 2B 2D    >                db      "D+-"               // name string in 7-bit ascii, but
 281+ 7975             >                org     $-1                 // alter last byte of Name just above to set
 281+ 7974 AD          >                db      {b $} | END_BIT     // msb as name end
 281+ 7975             >
 281+ 7975 60 79       >                dw      last_NFA            // Link to previous definition Name
 281+ 7977             >DPLUS_MINUS:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 281+ 7977 79 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 281+ 7979             >                else
 281+ 7979 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 281+ 7979             >                endif           ; ok        // for other definitions it "points" the correct handler
 281+ 7979             >                // Use of "; ok" to suppress "warning[fwdref]"
 281+ 7979             >
 281+ 7979             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 282+ 7979 00 6A                        dw      ZLESS                   // 0<
 283+ 797B                                                              // if
 284+ 797B 2C 64                        dw      ZBRANCH
 285+ 797D 04 00                        dw      DPlus_Minus_Endif - $
 286+ 797F A5 6A                        dw          DMINUS              //      dminus
 287+ 7981              DPlus_Minus_Endif:                              // endif
 288+ 7981 A3 69                        dw      EXIT                    // ;
 289+ 7983
 290+ 7983              //  ______________________________________________________________________
 291+ 7983              //
 292+ 7983              // abs          n1 -- n2
 293+ 7983                              Colon_Def ABS_OP, "ABS", is_normal
 293+ 7983             >                New_Def  ABS_OP, "ABS", Enter_Ptr, is_normal ; ok
 293+ 7983             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 293+ 7983             >
 293+ 7983             >                // dummy db directives used to calculate length of namec
 293+ 7983 41 42 53    >                db      "ABS"
 293+ 7986             >len_NFA         defl    $ - temp_NFA
 293+ 7986             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 293+ 7983             >
 293+ 7983 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 293+ 7984 41 42 53    >                db      "ABS"               // name string in 7-bit ascii, but
 293+ 7987             >                org     $-1                 // alter last byte of Name just above to set
 293+ 7986 D3          >                db      {b $} | END_BIT     // msb as name end
 293+ 7987             >
 293+ 7987 71 79       >                dw      last_NFA            // Link to previous definition Name
 293+ 7989             >ABS_OP:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 293+ 7989 79 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 293+ 798B             >                else
 293+ 798B ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 293+ 798B             >                endif           ; ok        // for other definitions it "points" the correct handler
 293+ 798B             >                // Use of "; ok" to suppress "warning[fwdref]"
 293+ 798B             >
 293+ 798B             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 294+ 798B 04 6B                        dw      DUP                     // dup
 295+ 798D 65 79                        dw      PLUS_MINUS              // +-
 296+ 798F A3 69                        dw      EXIT                    // ;
 297+ 7991
 298+ 7991              //  ______________________________________________________________________
 299+ 7991              //
 300+ 7991              // dabs         d1 -- d2
 301+ 7991                              Colon_Def DABS, "DABS", is_normal
 301+ 7991             >                New_Def  DABS, "DABS", Enter_Ptr, is_normal ; ok
 301+ 7991             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 301+ 7991             >
 301+ 7991             >                // dummy db directives used to calculate length of namec
 301+ 7991 44 41 42 53 >                db      "DABS"
 301+ 7995             >len_NFA         defl    $ - temp_NFA
 301+ 7995             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 301+ 7991             >
 301+ 7991 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 301+ 7992 44 41 42 53 >                db      "DABS"               // name string in 7-bit ascii, but
 301+ 7996             >                org     $-1                 // alter last byte of Name just above to set
 301+ 7995 D3          >                db      {b $} | END_BIT     // msb as name end
 301+ 7996             >
 301+ 7996 83 79       >                dw      last_NFA            // Link to previous definition Name
 301+ 7998             >DABS:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 301+ 7998 79 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 301+ 799A             >                else
 301+ 799A ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 301+ 799A             >                endif           ; ok        // for other definitions it "points" the correct handler
 301+ 799A             >                // Use of "; ok" to suppress "warning[fwdref]"
 301+ 799A             >
 301+ 799A             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 302+ 799A 04 6B                        dw      DUP                     // dup
 303+ 799C 77 79                        dw      DPLUS_MINUS             // d+-
 304+ 799E A3 69                        dw      EXIT                    // ;
 305+ 79A0
 306+ 79A0              //  ______________________________________________________________________
 307+ 79A0              //
 308+ 79A0              // m*           n1 n2 -- d
 309+ 79A0              // multiply two integer giving a double
 310+ 79A0                              Colon_Def MMUL, "M*", is_normal
 310+ 79A0             >                New_Def  MMUL, "M*", Enter_Ptr, is_normal ; ok
 310+ 79A0             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 310+ 79A0             >
 310+ 79A0             >                // dummy db directives used to calculate length of namec
 310+ 79A0 4D 2A       >                db      "M*"
 310+ 79A2             >len_NFA         defl    $ - temp_NFA
 310+ 79A2             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 310+ 79A0             >
 310+ 79A0 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 310+ 79A1 4D 2A       >                db      "M*"               // name string in 7-bit ascii, but
 310+ 79A3             >                org     $-1                 // alter last byte of Name just above to set
 310+ 79A2 AA          >                db      {b $} | END_BIT     // msb as name end
 310+ 79A3             >
 310+ 79A3 91 79       >                dw      last_NFA            // Link to previous definition Name
 310+ 79A5             >MMUL:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 310+ 79A5 79 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 310+ 79A7             >                else
 310+ 79A7 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 310+ 79A7             >                endif           ; ok        // for other definitions it "points" the correct handler
 310+ 79A7             >                // Use of "; ok" to suppress "warning[fwdref]"
 310+ 79A7             >
 310+ 79A7             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 311+ 79A7 65 6B 58 69                  dw      TWO_DUP, XOR_OP, TO_R   // 2dup xor >r
 311+ 79AB B6 69
 312+ 79AD 89 79 F7 6A                  dw      ABS_OP, SWAP            // abs swap
 313+ 79B1 89 79 C9 68                  dw      ABS_OP, UM_MUL          // abs um*
 314+ 79B5 CA 69 77 79                  dw      R_TO, DPLUS_MINUS       // r> d+-
 315+ 79B9 A3 69                        dw      EXIT                    // ;
 316+ 79BB
 317+ 79BB              //  ______________________________________________________________________
 318+ 79BB              //
 319+ 79BB              // sm/rem       d n -- q r
 320+ 79BB              // Symmetric division: divides a double into n giving quotient q and remainder r
 321+ 79BB              // the remainder has the sign of d.
 322+ 79BB                              Colon_Def SMDIVM, "SM/REM", is_normal
 322+ 79BB             >                New_Def  SMDIVM, "SM/REM", Enter_Ptr, is_normal ; ok
 322+ 79BB             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 322+ 79BB             >
 322+ 79BB             >                // dummy db directives used to calculate length of namec
 322+ 79BB 53 4D 2F 52 >                db      "SM/REM"
 322+ 79BF 45 4D       >
 322+ 79C1             >len_NFA         defl    $ - temp_NFA
 322+ 79C1             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 322+ 79BB             >
 322+ 79BB 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 322+ 79BC 53 4D 2F 52 >                db      "SM/REM"               // name string in 7-bit ascii, but
 322+ 79C0 45 4D       >
 322+ 79C2             >                org     $-1                 // alter last byte of Name just above to set
 322+ 79C1 CD          >                db      {b $} | END_BIT     // msb as name end
 322+ 79C2             >
 322+ 79C2 A0 79       >                dw      last_NFA            // Link to previous definition Name
 322+ 79C4             >SMDIVM:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 322+ 79C4 79 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 322+ 79C6             >                else
 322+ 79C6 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 322+ 79C6             >                endif           ; ok        // for other definitions it "points" the correct handler
 322+ 79C6             >                // Use of "; ok" to suppress "warning[fwdref]"
 322+ 79C6             >
 322+ 79C6             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 323+ 79C6 BF 6A B6 69                  dw      OVER, TO_R, TO_R        // over >r >r
 323+ 79CA B6 69
 324+ 79CC 98 79 DE 69                  dw      DABS, R_OP, ABS_OP      // dabs r abs
 324+ 79D0 89 79
 325+ 79D2 FA 68                        dw      UMDIVMOD                // um/mod
 326+ 79D4 CA 69                        dw      R_TO                    // r>
 327+ 79D6 DE 69 58 69                  dw      R_OP, XOR_OP            // r xor
 328+ 79DA 65 79 F7 6A                  dw      PLUS_MINUS, SWAP        // +- swap
 329+ 79DE CA 69                        dw      R_TO                    // r>
 330+ 79E0 65 79 F7 6A                  dw      PLUS_MINUS, SWAP        // +- swap
 331+ 79E4 A3 69                        dw      EXIT                    // ;
 332+ 79E6
 333+ 79E6              //  ______________________________________________________________________
 334+ 79E6              //
 335+ 79E6              // fm/mod       d n -- q r
 336+ 79E6              // Floored division: divides a double into n giving quotient q and remainder r
 337+ 79E6              // the remainder has the sign of d.
 338+ 79E6                              Colon_Def FMDIVM, "FM/MOD", is_normal
 338+ 79E6             >                New_Def  FMDIVM, "FM/MOD", Enter_Ptr, is_normal ; ok
 338+ 79E6             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 338+ 79E6             >
 338+ 79E6             >                // dummy db directives used to calculate length of namec
 338+ 79E6 46 4D 2F 4D >                db      "FM/MOD"
 338+ 79EA 4F 44       >
 338+ 79EC             >len_NFA         defl    $ - temp_NFA
 338+ 79EC             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 338+ 79E6             >
 338+ 79E6 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 338+ 79E7 46 4D 2F 4D >                db      "FM/MOD"               // name string in 7-bit ascii, but
 338+ 79EB 4F 44       >
 338+ 79ED             >                org     $-1                 // alter last byte of Name just above to set
 338+ 79EC C4          >                db      {b $} | END_BIT     // msb as name end
 338+ 79ED             >
 338+ 79ED BB 79       >                dw      last_NFA            // Link to previous definition Name
 338+ 79EF             >FMDIVM:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 338+ 79EF 79 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 338+ 79F1             >                else
 338+ 79F1 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 338+ 79F1             >                endif           ; ok        // for other definitions it "points" the correct handler
 338+ 79F1             >                // Use of "; ok" to suppress "warning[fwdref]"
 338+ 79F1             >
 338+ 79F1             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 339+ 79F1 04 6B B6 69                  dw      DUP, TO_R               // dup >r
 340+ 79F5 C4 79                        dw      SMDIVM
 341+ 79F7 BF 6A 04 6B                  dw      OVER, DUP
 342+ 79FB E5 69 E5 69                  dw      ZEQUAL, ZEQUAL
 343+ 79FF F7 6A 00 6A                  dw      SWAP, ZLESS
 344+ 7A03 DE 69 00 6A                  dw      R_OP, ZLESS
 345+ 7A07 58 69 33 69                  dw      XOR_OP, AND_OP
 346+ 7A0B 2C 64                        dw      ZBRANCH
 347+ 7A0D 10 00                        dw      Fm_Mod_Else - $
 348+ 7A0F 51 6A                        dw          ONE_SUBTRACT
 349+ 7A11 F7 6A CA 69                  dw          SWAP, R_TO
 350+ 7A15 24 6A F7 6A                  dw          PLUS, SWAP
 351+ 7A19 15 64                        dw      BRANCH
 352+ 7A1B 06 00                        dw      Fm_Mod_Endif - $
 353+ 7A1D              Fm_Mod_Else:
 354+ 7A1D CA 69 CF 6A                  dw          R_TO, DROP
 355+ 7A21              Fm_Mod_Endif:
 356+ 7A21 A3 69                        dw      EXIT
 357+ 7A23              //              dw      TWO_DUP                 // 2dup
 358+ 7A23              //              dw      XOR_OP, TO_R, TO_R      // xor >r >r
 359+ 7A23              //              dw      DABS, R_OP, ABS_OP      // dabs r abs
 360+ 7A23              //              dw      UMDIVMOD                // um/mod
 361+ 7A23              //              dw      SWAP                    // swap
 362+ 7A23              //              dw      II, ZLESS               // i'
 363+ 7A23              //              dw      ONE, AND_OP, PLUS       // 0< 1 and +
 364+ 7A23              //              dw      R_TO                    // r>
 365+ 7A23              //              dw      PLUS_MINUS, SWAP        // +- swap
 366+ 7A23              //              dw      R_OP                    // r@
 367+ 7A23              //              dw      ZLESS                   // i'
 368+ 7A23              //              dw      ONE, AND_OP, PLUS       // 0< 1 and +
 369+ 7A23              //              dw      R_TO                    // r>
 370+ 7A23              //              dw      PLUS_MINUS              // +- swap
 371+ 7A23              //              dw      EXIT                    // ;
 372+ 7A23
 373+ 7A23              //  ______________________________________________________________________
 374+ 7A23              //
 375+ 7A23              // m/mod        d n -- q r
 376+ 7A23              // multiply two integer giving a double
 377+ 7A23                              Colon_Def MDIVM, "M/MOD", is_normal
 377+ 7A23             >                New_Def  MDIVM, "M/MOD", Enter_Ptr, is_normal ; ok
 377+ 7A23             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 377+ 7A23             >
 377+ 7A23             >                // dummy db directives used to calculate length of namec
 377+ 7A23 4D 2F 4D 4F >                db      "M/MOD"
 377+ 7A27 44          >
 377+ 7A28             >len_NFA         defl    $ - temp_NFA
 377+ 7A28             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 377+ 7A23             >
 377+ 7A23 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 377+ 7A24 4D 2F 4D 4F >                db      "M/MOD"               // name string in 7-bit ascii, but
 377+ 7A28 44          >
 377+ 7A29             >                org     $-1                 // alter last byte of Name just above to set
 377+ 7A28 C4          >                db      {b $} | END_BIT     // msb as name end
 377+ 7A29             >
 377+ 7A29 E6 79       >                dw      last_NFA            // Link to previous definition Name
 377+ 7A2B             >MDIVM:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 377+ 7A2B 79 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 377+ 7A2D             >                else
 377+ 7A2D ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 377+ 7A2D             >                endif           ; ok        // for other definitions it "points" the correct handler
 377+ 7A2D             >                // Use of "; ok" to suppress "warning[fwdref]"
 377+ 7A2D             >
 377+ 7A2D             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 378+ 7A2D C4 79                        dw      SMDIVM
 379+ 7A2F A3 69                        dw      EXIT                    // ;
 380+ 7A31
 381+ 7A31              //  ______________________________________________________________________
 382+ 7A31              //
 383+ 7A31              // m/           d n -- q
 384+ 7A31              // multiply two integer giving a double
 385+ 7A31                              Colon_Def MDIV, "M/", is_normal
 385+ 7A31             >                New_Def  MDIV, "M/", Enter_Ptr, is_normal ; ok
 385+ 7A31             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 385+ 7A31             >
 385+ 7A31             >                // dummy db directives used to calculate length of namec
 385+ 7A31 4D 2F       >                db      "M/"
 385+ 7A33             >len_NFA         defl    $ - temp_NFA
 385+ 7A33             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 385+ 7A31             >
 385+ 7A31 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 385+ 7A32 4D 2F       >                db      "M/"               // name string in 7-bit ascii, but
 385+ 7A34             >                org     $-1                 // alter last byte of Name just above to set
 385+ 7A33 AF          >                db      {b $} | END_BIT     // msb as name end
 385+ 7A34             >
 385+ 7A34 23 7A       >                dw      last_NFA            // Link to previous definition Name
 385+ 7A36             >MDIV:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 385+ 7A36 79 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 385+ 7A38             >                else
 385+ 7A38 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 385+ 7A38             >                endif           ; ok        // for other definitions it "points" the correct handler
 385+ 7A38             >                // Use of "; ok" to suppress "warning[fwdref]"
 385+ 7A38             >
 385+ 7A38             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 386+ 7A38 2B 7A DA 6A                  dw      MDIVM, NIP
 387+ 7A3C A3 69                        dw      EXIT                    // ;
 388+ 7A3E
 389+ 7A3E              //  ______________________________________________________________________
 390+ 7A3E              //
 391+ 7A3E              // *            n1 n2 -- n3
 392+ 7A3E              // multiply two integer
 393+ 7A3E                              Colon_Def MUL, "*", is_normal
 393+ 7A3E             >                New_Def  MUL, "*", Enter_Ptr, is_normal ; ok
 393+ 7A3E             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 393+ 7A3E             >
 393+ 7A3E             >                // dummy db directives used to calculate length of namec
 393+ 7A3E 2A          >                db      "*"
 393+ 7A3F             >len_NFA         defl    $ - temp_NFA
 393+ 7A3F             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 393+ 7A3E             >
 393+ 7A3E 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 393+ 7A3F 2A          >                db      "*"               // name string in 7-bit ascii, but
 393+ 7A40             >                org     $-1                 // alter last byte of Name just above to set
 393+ 7A3F AA          >                db      {b $} | END_BIT     // msb as name end
 393+ 7A40             >
 393+ 7A40 31 7A       >                dw      last_NFA            // Link to previous definition Name
 393+ 7A42             >MUL:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 393+ 7A42 79 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 393+ 7A44             >                else
 393+ 7A44 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 393+ 7A44             >                endif           ; ok        // for other definitions it "points" the correct handler
 393+ 7A44             >                // Use of "; ok" to suppress "warning[fwdref]"
 393+ 7A44             >
 393+ 7A44             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 394+ 7A44 A5 79 CF 6A                  dw      MMUL, DROP              // m* drop
 395+ 7A48 A3 69                        dw      EXIT                    // ;
 396+ 7A4A
 397+ 7A4A              //  ______________________________________________________________________
 398+ 7A4A              //
 399+ 7A4A              // /mod         n1 n2 -- n3 n4
 400+ 7A4A              // leaves quotient n4 and remainder n3 of the integer division n1 / n2.
 401+ 7A4A              // The remainder has the sign of n1
 402+ 7A4A                              Colon_Def DIVMOD, "/MOD", is_normal
 402+ 7A4A             >                New_Def  DIVMOD, "/MOD", Enter_Ptr, is_normal ; ok
 402+ 7A4A             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 402+ 7A4A             >
 402+ 7A4A             >                // dummy db directives used to calculate length of namec
 402+ 7A4A 2F 4D 4F 44 >                db      "/MOD"
 402+ 7A4E             >len_NFA         defl    $ - temp_NFA
 402+ 7A4E             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 402+ 7A4A             >
 402+ 7A4A 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 402+ 7A4B 2F 4D 4F 44 >                db      "/MOD"               // name string in 7-bit ascii, but
 402+ 7A4F             >                org     $-1                 // alter last byte of Name just above to set
 402+ 7A4E C4          >                db      {b $} | END_BIT     // msb as name end
 402+ 7A4F             >
 402+ 7A4F 3E 7A       >                dw      last_NFA            // Link to previous definition Name
 402+ 7A51             >DIVMOD:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 402+ 7A51 79 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 402+ 7A53             >                else
 402+ 7A53 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 402+ 7A53             >                endif           ; ok        // for other definitions it "points" the correct handler
 402+ 7A53             >                // Use of "; ok" to suppress "warning[fwdref]"
 402+ 7A53             >
 402+ 7A53             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 403+ 7A53 B6 69 12 6F                  dw      TO_R, S_TO_D, R_TO      // >r s->d r>
 403+ 7A57 CA 69
 404+ 7A59 2B 7A                        dw      MDIVM                   // m/mod
 405+ 7A5B A3 69                        dw      EXIT                    // ;
 406+ 7A5D
 407+ 7A5D              //  ______________________________________________________________________
 408+ 7A5D              //
 409+ 7A5D              // /            n1 n2 -- n3
 410+ 7A5D              // division
 411+ 7A5D                              Colon_Def DIV, "/", is_normal
 411+ 7A5D             >                New_Def  DIV, "/", Enter_Ptr, is_normal ; ok
 411+ 7A5D             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 411+ 7A5D             >
 411+ 7A5D             >                // dummy db directives used to calculate length of namec
 411+ 7A5D 2F          >                db      "/"
 411+ 7A5E             >len_NFA         defl    $ - temp_NFA
 411+ 7A5E             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 411+ 7A5D             >
 411+ 7A5D 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 411+ 7A5E 2F          >                db      "/"               // name string in 7-bit ascii, but
 411+ 7A5F             >                org     $-1                 // alter last byte of Name just above to set
 411+ 7A5E AF          >                db      {b $} | END_BIT     // msb as name end
 411+ 7A5F             >
 411+ 7A5F 4A 7A       >                dw      last_NFA            // Link to previous definition Name
 411+ 7A61             >DIV:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 411+ 7A61 79 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 411+ 7A63             >                else
 411+ 7A63 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 411+ 7A63             >                endif           ; ok        // for other definitions it "points" the correct handler
 411+ 7A63             >                // Use of "; ok" to suppress "warning[fwdref]"
 411+ 7A63             >
 411+ 7A63             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 412+ 7A63 51 7A DA 6A                  dw      DIVMOD, NIP             // /mod nip
 413+ 7A67 A3 69                        dw      EXIT                    // ;
 414+ 7A69
 415+ 7A69              //  ______________________________________________________________________
 416+ 7A69              //
 417+ 7A69              // mod          n1 n2 -- n3
 418+ 7A69                              Colon_Def MOD, "MOD", is_normal
 418+ 7A69             >                New_Def  MOD, "MOD", Enter_Ptr, is_normal ; ok
 418+ 7A69             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 418+ 7A69             >
 418+ 7A69             >                // dummy db directives used to calculate length of namec
 418+ 7A69 4D 4F 44    >                db      "MOD"
 418+ 7A6C             >len_NFA         defl    $ - temp_NFA
 418+ 7A6C             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 418+ 7A69             >
 418+ 7A69 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 418+ 7A6A 4D 4F 44    >                db      "MOD"               // name string in 7-bit ascii, but
 418+ 7A6D             >                org     $-1                 // alter last byte of Name just above to set
 418+ 7A6C C4          >                db      {b $} | END_BIT     // msb as name end
 418+ 7A6D             >
 418+ 7A6D 5D 7A       >                dw      last_NFA            // Link to previous definition Name
 418+ 7A6F             >MOD:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 418+ 7A6F 79 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 418+ 7A71             >                else
 418+ 7A71 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 418+ 7A71             >                endif           ; ok        // for other definitions it "points" the correct handler
 418+ 7A71             >                // Use of "; ok" to suppress "warning[fwdref]"
 418+ 7A71             >
 418+ 7A71             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 419+ 7A71 51 7A CF 6A                  dw      DIVMOD, DROP            // /mod drop
 420+ 7A75 A3 69                        dw      EXIT                    // ;
 421+ 7A77
 422+ 7A77              //  ______________________________________________________________________
 423+ 7A77              //
 424+ 7A77              // */mod        n1 n2 n3 -- n4 n5
 425+ 7A77              // leaves the quotient n5 and the remainder n4 of the operation
 426+ 7A77              // (n1 * n2) / n3. The intermediate passage through a double number
 427+ 7A77              // avoids loss of precision
 428+ 7A77                              Colon_Def MUL_DIV_MOD, "*/MOD", is_normal
 428+ 7A77             >                New_Def  MUL_DIV_MOD, "*/MOD", Enter_Ptr, is_normal ; ok
 428+ 7A77             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 428+ 7A77             >
 428+ 7A77             >                // dummy db directives used to calculate length of namec
 428+ 7A77 2A 2F 4D 4F >                db      "*/MOD"
 428+ 7A7B 44          >
 428+ 7A7C             >len_NFA         defl    $ - temp_NFA
 428+ 7A7C             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 428+ 7A77             >
 428+ 7A77 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 428+ 7A78 2A 2F 4D 4F >                db      "*/MOD"               // name string in 7-bit ascii, but
 428+ 7A7C 44          >
 428+ 7A7D             >                org     $-1                 // alter last byte of Name just above to set
 428+ 7A7C C4          >                db      {b $} | END_BIT     // msb as name end
 428+ 7A7D             >
 428+ 7A7D 69 7A       >                dw      last_NFA            // Link to previous definition Name
 428+ 7A7F             >MUL_DIV_MOD:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 428+ 7A7F 79 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 428+ 7A81             >                else
 428+ 7A81 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 428+ 7A81             >                endif           ; ok        // for other definitions it "points" the correct handler
 428+ 7A81             >                // Use of "; ok" to suppress "warning[fwdref]"
 428+ 7A81             >
 428+ 7A81             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 429+ 7A81 B6 69 A5 79                  dw      TO_R, MMUL              // >r  m*
 430+ 7A85 CA 69 2B 7A                  dw      R_TO, MDIVM             // r>  m/mod
 431+ 7A89 A3 69                        dw      EXIT                    // ;
 432+ 7A8B
 433+ 7A8B              //  ______________________________________________________________________
 434+ 7A8B              //
 435+ 7A8B              // */          n1 n2 n3 -- n4
 436+ 7A8B              // (n1 * n2) / n3. The intermediate passage through a double number avoids loss of precision
 437+ 7A8B                              Colon_Def MUL_DIV, "*/", is_normal
 437+ 7A8B             >                New_Def  MUL_DIV, "*/", Enter_Ptr, is_normal ; ok
 437+ 7A8B             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 437+ 7A8B             >
 437+ 7A8B             >                // dummy db directives used to calculate length of namec
 437+ 7A8B 2A 2F       >                db      "*/"
 437+ 7A8D             >len_NFA         defl    $ - temp_NFA
 437+ 7A8D             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 437+ 7A8B             >
 437+ 7A8B 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 437+ 7A8C 2A 2F       >                db      "*/"               // name string in 7-bit ascii, but
 437+ 7A8E             >                org     $-1                 // alter last byte of Name just above to set
 437+ 7A8D AF          >                db      {b $} | END_BIT     // msb as name end
 437+ 7A8E             >
 437+ 7A8E 77 7A       >                dw      last_NFA            // Link to previous definition Name
 437+ 7A90             >MUL_DIV:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 437+ 7A90 79 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 437+ 7A92             >                else
 437+ 7A92 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 437+ 7A92             >                endif           ; ok        // for other definitions it "points" the correct handler
 437+ 7A92             >                // Use of "; ok" to suppress "warning[fwdref]"
 437+ 7A92             >
 437+ 7A92             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 438+ 7A92 7F 7A                        dw     MUL_DIV_MOD              // */mod
 439+ 7A94 DA 6A                        dw     NIP                      // nip
 440+ 7A96 A3 69                        dw     EXIT                     // ;
 441+ 7A98
 442+ 7A98
 443+ 7A98              //  ______________________________________________________________________
 444+ 7A98              //
 445+ 7A98              // m/mod        ud1 u2 -- u3 ud4
 446+ 7A98              // mixed operation: it leaves the remainder u3 and the quotient ud4 of ud1 / u1.
 447+ 7A98              // All terms are unsigned.
 448+ 7A98              //              Colon_Def MDIV_MOD, "M/MOD", is_normal
 449+ 7A98              //              dw      TO_R                    // >r           ( ud1 )
 450+ 7A98              //              dw      ZERO, R_OP, UMDIVMOD    // 0 r um/mod   ( l rem1 h/r )
 451+ 7A98              //              dw      R_TO, SWAP, TO_R        // r> swap >r   ( l rem )
 452+ 7A98              //              dw      UMDIVMOD                // um/mod       ( rem2 l/r )
 453+ 7A98              //              dw      R_TO                    // r>           ( rem2 l/r h/r )
 454+ 7A98              //              dw      EXIT                    // ;
 455+ 7A98
 456+ 7A98              //  ______________________________________________________________________
 457+ 7A98              //
 458+ 7A98              // (line)       n1 n2 -- a b
 459+ 7A98              // sends the line n1 of block n2 to the disk buffer.
 460+ 7A98              // it returns the address a and ca counter b = C/L meaning a whole line.
 461+ 7A98                              Colon_Def CLINE, "(LINE)", is_normal
 461+ 7A98             >                New_Def  CLINE, "(LINE)", Enter_Ptr, is_normal ; ok
 461+ 7A98             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 461+ 7A98             >
 461+ 7A98             >                // dummy db directives used to calculate length of namec
 461+ 7A98 28 4C 49 4E >                db      "(LINE)"
 461+ 7A9C 45 29       >
 461+ 7A9E             >len_NFA         defl    $ - temp_NFA
 461+ 7A9E             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 461+ 7A98             >
 461+ 7A98 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 461+ 7A99 28 4C 49 4E >                db      "(LINE)"               // name string in 7-bit ascii, but
 461+ 7A9D 45 29       >
 461+ 7A9F             >                org     $-1                 // alter last byte of Name just above to set
 461+ 7A9E A9          >                db      {b $} | END_BIT     // msb as name end
 461+ 7A9F             >
 461+ 7A9F 8B 7A       >                dw      last_NFA            // Link to previous definition Name
 461+ 7AA1             >CLINE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 461+ 7AA1 79 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 461+ 7AA3             >                else
 461+ 7AA3 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 461+ 7AA3             >                endif           ; ok        // for other definitions it "points" the correct handler
 461+ 7AA3             >                // Use of "; ok" to suppress "warning[fwdref]"
 461+ 7AA3             >
 461+ 7AA3             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 462+ 7AA3 B6 69                        dw      TO_R                    // >r
 463+ 7AA5 A1 6C                        dw      NOOP                    // noop
 464+ 7AA7 28 6D                        dw      CL                      // c/l
 465+ 7AA9 34 6D 7F 7A                  dw      BBUF, MUL_DIV_MOD       // */mod
 466+ 7AAD CA 69                        dw      R_TO                    // r>
 467+ 7AAF 40 6D 42 7A                  dw      BSCR, MUL, PLUS         // b/scr * +
 467+ 7AB3 24 6A
 468+ 7AB5 5C 7D                        dw      BLOCK                   // block   ( forward )
 469+ 7AB7 24 6A                        dw      PLUS                    // +
 470+ 7AB9 A1 6C                        dw      NOOP                    // noop
 471+ 7ABB 28 6D                        dw      CL                      // c/l
 472+ 7ABD A3 69                        dw      EXIT                    // ;
 473+ 7ABF
 474+ 7ABF              //  ______________________________________________________________________
 475+ 7ABF              //
 476+ 7ABF              // .line        n1 n2 --
 477+ 7ABF              // Sends to output line  n1  of screen n2.
 478+ 7ABF                              Colon_Def DOT_LINE, ".LINE", is_normal
 478+ 7ABF             >                New_Def  DOT_LINE, ".LINE", Enter_Ptr, is_normal ; ok
 478+ 7ABF             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 478+ 7ABF             >
 478+ 7ABF             >                // dummy db directives used to calculate length of namec
 478+ 7ABF 2E 4C 49 4E >                db      ".LINE"
 478+ 7AC3 45          >
 478+ 7AC4             >len_NFA         defl    $ - temp_NFA
 478+ 7AC4             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 478+ 7ABF             >
 478+ 7ABF 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 478+ 7AC0 2E 4C 49 4E >                db      ".LINE"               // name string in 7-bit ascii, but
 478+ 7AC4 45          >
 478+ 7AC5             >                org     $-1                 // alter last byte of Name just above to set
 478+ 7AC4 C5          >                db      {b $} | END_BIT     // msb as name end
 478+ 7AC5             >
 478+ 7AC5 98 7A       >                dw      last_NFA            // Link to previous definition Name
 478+ 7AC7             >DOT_LINE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 478+ 7AC7 79 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 478+ 7AC9             >                else
 478+ 7AC9 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 478+ 7AC9             >                endif           ; ok        // for other definitions it "points" the correct handler
 478+ 7AC9             >                // Use of "; ok" to suppress "warning[fwdref]"
 478+ 7AC9             >
 478+ 7AC9             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 479+ 7AC9 A1 7A AF 72                  dw      CLINE, LTRAILING, TYPE  // (line) -trailing type
 479+ 7ACD 8F 72
 480+ 7ACF A3 69                        dw      EXIT                    // ;
 481+ 7AD1
 482+ 7AD1              //  ______________________________________________________________________
 483+ 7AD1              //
 484+ 7AD1              // message       n1 n2 --
 485+ 7AD1              // prints error message to current channel.
 486+ 7AD1              // if WARNING is 0, prints "MSG#n".
 487+ 7AD1              // if WARNING is 1, prints line n of screen 4.
 488+ 7AD1              // if WARNING is -1, see ERROR
 489+ 7AD1              // value can be negative or beyond block 4.
 490+ 7AD1                              Colon_Def MESSAGE, "MESSAGE", is_normal
 490+ 7AD1             >                New_Def  MESSAGE, "MESSAGE", Enter_Ptr, is_normal ; ok
 490+ 7AD1             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 490+ 7AD1             >
 490+ 7AD1             >                // dummy db directives used to calculate length of namec
 490+ 7AD1 4D 45 53 53 >                db      "MESSAGE"
 490+ 7AD5 41 47 45    >
 490+ 7AD8             >len_NFA         defl    $ - temp_NFA
 490+ 7AD8             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 490+ 7AD1             >
 490+ 7AD1 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 490+ 7AD2 4D 45 53 53 >                db      "MESSAGE"               // name string in 7-bit ascii, but
 490+ 7AD6 41 47 45    >
 490+ 7AD9             >                org     $-1                 // alter last byte of Name just above to set
 490+ 7AD8 C5          >                db      {b $} | END_BIT     // msb as name end
 490+ 7AD9             >
 490+ 7AD9 BF 7A       >                dw      last_NFA            // Link to previous definition Name
 490+ 7ADB             >MESSAGE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 490+ 7ADB 79 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 490+ 7ADD             >                else
 490+ 7ADD ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 490+ 7ADD             >                endif           ; ok        // for other definitions it "points" the correct handler
 490+ 7ADD             >                // Use of "; ok" to suppress "warning[fwdref]"
 490+ 7ADD             >
 490+ 7ADD             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 491+ 7ADD 9F 6D 97 6B                  dw      WARNING, FETCH          // warning @
 492+ 7AE1                                                              // if
 493+ 7AE1 2C 64                        dw      ZBRANCH
 494+ 7AE3 18 00                        dw      Message_Else - $
 495+ 7AE5 A9 63 04 00                  dw          LIT, 4              //      4
 496+ 7AE9 1A 6E 97 6B                  dw          OFFSET, FETCH       //      offset @
 497+ 7AED 40 6D 61 7A                  dw          BSCR, DIV, SUBTRACT //      b/scr / -
 497+ 7AF1 21 6F
 498+ 7AF3 C7 7A                        dw          DOT_LINE            //      .line
 499+ 7AF5 D5 6F                        dw          SPACE               //      space
 500+ 7AF7                                                              // else
 501+ 7AF7
 502+ 7AF7 15 64                        dw      BRANCH
 503+ 7AF9 0B 00                        dw      Message_ENdif - $
 504+ 7AFB              Message_Else:
 505+ 7AFB 60 74                        dw          C_DOT_QUOTE         //      .( msg#)
 506+ 7AFD 04 6D 73 67                  db          4, "msg#"
 506+ 7B01 23
 507+ 7B02 19 83                        dw          DOT                 //      .  ( forward )
 508+ 7B04              Message_ENdif:                                  // endif
 509+ 7B04 A3 69                        dw      EXIT                    // ;
 510+ 7B06
 511+ 7B06
 512+ 7B06              //  ______________________________________________________________________
 513+ 7B06              //
 514+ 7B06              // device
 515+ 7B06                              Variable_Def DEVICE,   "DEVICE",   2
 515+ 7B06             >                New_Def  DEVICE, "DEVICE", Variable_Ptr, is_normal
 515+ 7B06             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 515+ 7B06             >
 515+ 7B06             >                // dummy db directives used to calculate length of namec
 515+ 7B06 44 45 56 49 >                db      "DEVICE"
 515+ 7B0A 43 45       >
 515+ 7B0C             >len_NFA         defl    $ - temp_NFA
 515+ 7B0C             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 515+ 7B06             >
 515+ 7B06 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 515+ 7B07 44 45 56 49 >                db      "DEVICE"               // name string in 7-bit ascii, but
 515+ 7B0B 43 45       >
 515+ 7B0D             >                org     $-1                 // alter last byte of Name just above to set
 515+ 7B0C C5          >                db      {b $} | END_BIT     // msb as name end
 515+ 7B0D             >
 515+ 7B0D D1 7A       >                dw      last_NFA            // Link to previous definition Name
 515+ 7B0F             >DEVICE:          if Variable_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 515+ 7B0F D3 6C       >                dw      Variable_Ptr ; ok        // for primitive definitions  actual code
 515+ 7B11             >                else
 515+ 7B11 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 515+ 7B11             >                endif           ; ok        // for other definitions it "points" the correct handler
 515+ 7B11             >                // Use of "; ok" to suppress "warning[fwdref]"
 515+ 7B11             >
 515+ 7B11             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 515+ 7B11 02 00       >                dw      2
 516+ 7B13
 517+ 7B13              //  ______________________________________________________________________
 518+ 7B13
# file closed: C:\Zx\CSpect\Projects\vForth15_INDIRECT/source/L2.asm
 112  7B13                              include "next-opt1.asm"
# file opened: C:\Zx\CSpect\Projects\vForth15_INDIRECT/source/next-opt1.asm
   1+ 7B13              //  ______________________________________________________________________
   2+ 7B13              //
   3+ 7B13              //  next-opt.asm
   4+ 7B13              //
   5+ 7B13              //  ZX Spectrum Next - peculiar definitions
   6+ 7B13              //  ______________________________________________________________________
   7+ 7B13
   8+ 7B13              //  ______________________________________________________________________
   9+ 7B13              //
  10+ 7B13              // reg@         n -- b
  11+ 7B13              // read Next REGister n giving byte b
  12+ 7B13
  13+ 7B13                              New_Def REG_FETCH, "REG@", is_code, is_normal
  13+ 7B13             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  13+ 7B13             >
  13+ 7B13             >                // dummy db directives used to calculate length of namec
  13+ 7B13 52 45 47 40 >                db      "REG@"
  13+ 7B17             >len_NFA         defl    $ - temp_NFA
  13+ 7B17             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  13+ 7B13             >
  13+ 7B13 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  13+ 7B14 52 45 47 40 >                db      "REG@"               // name string in 7-bit ascii, but
  13+ 7B18             >                org     $-1                 // alter last byte of Name just above to set
  13+ 7B17 C0          >                db      {b $} | END_BIT     // msb as name end
  13+ 7B18             >
  13+ 7B18 06 7B       >                dw      last_NFA            // Link to previous definition Name
  13+ 7B1A             >REG_FETCH:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
  13+ 7B1A ~           >                dw      runcode ; ok        // for primitive definitions  actual code
  13+ 7B1A             >                else
  13+ 7B1A 1C 7B       >                dw      $ + 2   ; ok        // is pointed by CFA
  13+ 7B1C             >                endif           ; ok        // for other definitions it "points" the correct handler
  13+ 7B1C             >                // Use of "; ok" to suppress "warning[fwdref]"
  13+ 7B1C             >
  13+ 7B1C             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  14+ 7B1C D9                           exx
  15+ 7B1D 01 3B 24                     ld      bc, $243B
  16+ 7B20 E1                           pop     hl
  17+ 7B21 ED 69                        out     (c), l
  18+ 7B23 04                           inc     b
  19+ 7B24 ED 68                        in      l,(c)
  20+ 7B26 E5                           push    hl
  21+ 7B27 D9                           exx
  22+ 7B28                              next
  22+ 7B28 DD E9       >                jp      (ix)
  23+ 7B2A
  24+ 7B2A
  25+ 7B2A              //  ______________________________________________________________________
  26+ 7B2A              //
  27+ 7B2A              // reg!         b n --
  28+ 7B2A              // write value b to Next REGister n
  29+ 7B2A
  30+ 7B2A                              New_Def REG_STORE, "REG!", is_code, is_normal
  30+ 7B2A             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  30+ 7B2A             >
  30+ 7B2A             >                // dummy db directives used to calculate length of namec
  30+ 7B2A 52 45 47 21 >                db      "REG!"
  30+ 7B2E             >len_NFA         defl    $ - temp_NFA
  30+ 7B2E             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  30+ 7B2A             >
  30+ 7B2A 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  30+ 7B2B 52 45 47 21 >                db      "REG!"               // name string in 7-bit ascii, but
  30+ 7B2F             >                org     $-1                 // alter last byte of Name just above to set
  30+ 7B2E A1          >                db      {b $} | END_BIT     // msb as name end
  30+ 7B2F             >
  30+ 7B2F 13 7B       >                dw      last_NFA            // Link to previous definition Name
  30+ 7B31             >REG_STORE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
  30+ 7B31 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
  30+ 7B31             >                else
  30+ 7B31 33 7B       >                dw      $ + 2   ; ok        // is pointed by CFA
  30+ 7B33             >                endif           ; ok        // for other definitions it "points" the correct handler
  30+ 7B33             >                // Use of "; ok" to suppress "warning[fwdref]"
  30+ 7B33             >
  30+ 7B33             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  31+ 7B33 D9                           exx
  32+ 7B34 01 3B 24                     ld      bc, $243B
  33+ 7B37 E1                           pop     hl
  34+ 7B38 ED 69                        out     (c), l
  35+ 7B3A 04                           inc     b
  36+ 7B3B E1                           pop     hl
  37+ 7B3C ED 69                        out     (c), l
  38+ 7B3E D9                           exx
  39+ 7B3F                              next
  39+ 7B3F DD E9       >                jp      (ix)
  40+ 7B41
  41+ 7B41
  42+ 7B41              //  ______________________________________________________________________
  43+ 7B41              //
  44+ 7B41              // mmu7@        -- n
  45+ 7B41              // query current page in MMU7 8K-RAM : 0 and 223
  46+ 7B41
  47+ 7B41                              Colon_Def MMU7_FETCH, "MMU7@", is_normal
  47+ 7B41             >                New_Def  MMU7_FETCH, "MMU7@", Enter_Ptr, is_normal ; ok
  47+ 7B41             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  47+ 7B41             >
  47+ 7B41             >                // dummy db directives used to calculate length of namec
  47+ 7B41 4D 4D 55 37 >                db      "MMU7@"
  47+ 7B45 40          >
  47+ 7B46             >len_NFA         defl    $ - temp_NFA
  47+ 7B46             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  47+ 7B41             >
  47+ 7B41 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  47+ 7B42 4D 4D 55 37 >                db      "MMU7@"               // name string in 7-bit ascii, but
  47+ 7B46 40          >
  47+ 7B47             >                org     $-1                 // alter last byte of Name just above to set
  47+ 7B46 C0          >                db      {b $} | END_BIT     // msb as name end
  47+ 7B47             >
  47+ 7B47 2A 7B       >                dw      last_NFA            // Link to previous definition Name
  47+ 7B49             >MMU7_FETCH:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
  47+ 7B49 79 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
  47+ 7B4B             >                else
  47+ 7B4B ~           >                dw      $ + 2   ; ok        // is pointed by CFA
  47+ 7B4B             >                endif           ; ok        // for other definitions it "points" the correct handler
  47+ 7B4B             >                // Use of "; ok" to suppress "warning[fwdref]"
  47+ 7B4B             >
  47+ 7B4B             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  48+ 7B4B A9 63 57 00                  dw      LIT, 87, REG_FETCH
  48+ 7B4F 1A 7B
  49+ 7B51 A3 69                        dw      EXIT
  50+ 7B53
  51+ 7B53              //  ______________________________________________________________________
  52+ 7B53              //
  53+ 7B53              // mmu7!        n --
  54+ 7B53              // set MMU7 8K-RAM page to n given between 0 and 223
  55+ 7B53              // optimized version that uses NEXTREG n,A Z80n op-code.
  56+ 7B53
  57+ 7B53                              New_Def MMU7_STORE, "MMU7!", is_code, is_normal
  57+ 7B53             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  57+ 7B53             >
  57+ 7B53             >                // dummy db directives used to calculate length of namec
  57+ 7B53 4D 4D 55 37 >                db      "MMU7!"
  57+ 7B57 21          >
  57+ 7B58             >len_NFA         defl    $ - temp_NFA
  57+ 7B58             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  57+ 7B53             >
  57+ 7B53 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  57+ 7B54 4D 4D 55 37 >                db      "MMU7!"               // name string in 7-bit ascii, but
  57+ 7B58 21          >
  57+ 7B59             >                org     $-1                 // alter last byte of Name just above to set
  57+ 7B58 A1          >                db      {b $} | END_BIT     // msb as name end
  57+ 7B59             >
  57+ 7B59 41 7B       >                dw      last_NFA            // Link to previous definition Name
  57+ 7B5B             >MMU7_STORE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
  57+ 7B5B ~           >                dw      runcode ; ok        // for primitive definitions  actual code
  57+ 7B5B             >                else
  57+ 7B5B 5D 7B       >                dw      $ + 2   ; ok        // is pointed by CFA
  57+ 7B5D             >                endif           ; ok        // for other definitions it "points" the correct handler
  57+ 7B5D             >                // Use of "; ok" to suppress "warning[fwdref]"
  57+ 7B5D             >
  57+ 7B5D             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  58+ 7B5D E1                           pop     hl
  59+ 7B5E 7D                           ld      a, l
  60+ 7B5F ED 92 57                     nextreg 87, a
  61+ 7B62
  62+ 7B62                              next
  62+ 7B62 DD E9       >                jp      (ix)
  63+ 7B64
  64+ 7B64              //  ______________________________________________________________________
  65+ 7B64              //
  66+ 7B64              // >far         ha -- a n
  67+ 7B64              // decode bits 765 of H as one of the 8K-page between 64 and 71 (40h-47h)
  68+ 7B64              // take lower bits of H and L as an offset from E000h
  69+ 7B64              // then return address  a  between E000h-FFFFh
  70+ 7B64              // and page number n  between 64-71 (40h-47h)
  71+ 7B64              // For example, in hex:
  72+ 7B64              //   0000 >FAR  gives  40.E000
  73+ 7B64              //   1FFF >FAR  gives  40.FFFF
  74+ 7B64              //   2000 >FAR  gives  41.E000
  75+ 7B64              //   3FFF >FAR  gives  41.FFFF
  76+ 7B64              //   EFFF >FAR  gives  47.EFFF
  77+ 7B64              //   FFFF >FAR  gives  47.FFFF
  78+ 7B64              //                New_Def TO_FAR, ">FAR", is_code, is_normal
  79+ 7B64              //                pop     de
  80+ 7B64              //                ld      a, d
  81+ 7B64              //                and     $E0
  82+ 7B64              //                rlca
  83+ 7B64              //                rlca
  84+ 7B64              //                rlca
  85+ 7B64              //                add     $40
  86+ 7B64              //                ld      l, a
  87+ 7B64              //                ld      h, 0
  88+ 7B64              //                ld      a, d
  89+ 7B64              //                or      $E0
  90+ 7B64              //                ld      d, a
  91+ 7B64              //                push    hl
  92+ 7B64              //                push    de
  93+ 7B64              //                next
  94+ 7B64
  95+ 7B64              //  ______________________________________________________________________
  96+ 7B64              //
  97+ 7B64              // <far         a n  -- ha
  98+ 7B64              // given an address E000-FFFF and a page number n (64-71 or 40h-47h)
  99+ 7B64              // reverse of >FAR: encodes a FAR address compressing
 100+ 7B64              // to bits 765 of H, lower bits of HL address offset from E000h
 101+ 7B64              //                New_Def FROM_FAR, "<FAR", is_code, is_normal
 102+ 7B64              //                pop     de                  // page number in e
 103+ 7B64              //                pop     hl                  // address in hl
 104+ 7B64              //                ld      a, e
 105+ 7B64              //                sub     $40                 // reduced to 0-7
 106+ 7B64              //                rrca
 107+ 7B64              //                rrca
 108+ 7B64              //                rrca
 109+ 7B64              //                ld      d, a                // save to d bits 765
 110+ 7B64              //                ld      a, h                // drops
 111+ 7B64              //                and     $1F
 112+ 7B64              //                or      d
 113+ 7B64              //                ld      h, a
 114+ 7B64              //
 115+ 7B64              //                psh1
 116+ 7B64
 117+ 7B64              //  ______________________________________________________________________
 118+ 7B64              //
 119+ 7B64              // m_p3dos      n1 n2 n3 n4 a -- n5 n6 n7 n8  f
 120+ 7B64              // NextZXOS call wrapper.
 121+ 7B64              //  n1 = hl register parameter value
 122+ 7B64              //  n2 = de register parameter value
 123+ 7B64              //  n3 = bc register parameter value
 124+ 7B64              //  n4 =  a register parameter value
 125+ 7B64              //   a = routine address in ROM 3
 126+ 7B64              // ----
 127+ 7B64              //  n5 = hl returned value
 128+ 7B64              //  n6 = de returned value
 129+ 7B64              //  n7 = bc returned value
 130+ 7B64              //  n8 =  a returned value
 131+ 7B64              //   f
 132+ 7B64                              New_Def M_P3DOS, "M_P3DOS", is_code, is_normal
 132+ 7B64             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 132+ 7B64             >
 132+ 7B64             >                // dummy db directives used to calculate length of namec
 132+ 7B64 4D 5F 50 33 >                db      "M_P3DOS"
 132+ 7B68 44 4F 53    >
 132+ 7B6B             >len_NFA         defl    $ - temp_NFA
 132+ 7B6B             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 132+ 7B64             >
 132+ 7B64 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 132+ 7B65 4D 5F 50 33 >                db      "M_P3DOS"               // name string in 7-bit ascii, but
 132+ 7B69 44 4F 53    >
 132+ 7B6C             >                org     $-1                 // alter last byte of Name just above to set
 132+ 7B6B D3          >                db      {b $} | END_BIT     // msb as name end
 132+ 7B6C             >
 132+ 7B6C 53 7B       >                dw      last_NFA            // Link to previous definition Name
 132+ 7B6E             >M_P3DOS:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 132+ 7B6E ~           >                dw      runcode ; ok        // for primitive definitions  actual code
 132+ 7B6E             >                else
 132+ 7B6E 70 7B       >                dw      $ + 2   ; ok        // is pointed by CFA
 132+ 7B70             >                endif           ; ok        // for other definitions it "points" the correct handler
 132+ 7B70             >                // Use of "; ok" to suppress "warning[fwdref]"
 132+ 7B70             >
 132+ 7B70             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 133+ 7B70 D1                           pop     de                  // dos call entry address in de
 134+ 7B71 E1                           pop     hl                  // a register
 135+ 7B72 7D                           ld      a, l
 136+ 7B73 D9                           exx
 137+ 7B74 C1                           pop     bc
 138+ 7B75 D1                           pop     de
 139+ 7B76 E1                           pop     hl
 140+ 7B77 D9                           exx
 141+ 7B78
 142+ 7B78 C5                           push    bc
 143+ 7B79 DD E5                        push    ix
 144+ 7B7B
 145+ 7B7B              //              ld      (SP_Saved), sp
 146+ 7B7B              //              ld      sp, Cold_origin - 5
 147+ 7B7B 0E 07                        ld      c, 7                // use 7 RAM Bank
 148+ 7B7D
 149+ 7B7D CF                           rst     08
 150+ 7B7E 94                           db      $94
 151+ 7B7F
 152+ 7B7F              //              ld      sp, (SP_Saved)
 153+ 7B7F              //              push    ix
 154+ 7B7F              //              pop     hl
 155+ 7B7F              //              ld      (IX_Echo), hl
 156+ 7B7F DD 22 90 63                  ld      (IX_Echo), ix
 157+ 7B83              //              nop
 158+ 7B83 DD E1                        pop     ix
 159+ 7B85 E3                           ex      (sp), hl            // hl argument and retrieve bc
 160+ 7B86 D5                           push    de
 161+ 7B87 C5                           push    bc
 162+ 7B88 4D                           ld      c, l
 163+ 7B89 44                           ld      b, h
 164+ 7B8A
 165+ 7B8A 26 00                        ld      h, 0
 166+ 7B8C 6F                           ld      l, a
 167+ 7B8D E5                           push    hl
 168+ 7B8E ED 62                        sbc     hl, hl              // -1 for OK ; 0 for KO but now...
 169+ 7B90 23                           inc     hl                  //  0 for OK ; 1 for ko
 170+ 7B91
 171+ 7B91                              psh1
 171+ 7B91 E5          >                push    hl
 171+ 7B92 DD E9       >                jp      (ix)
 172+ 7B94
 173+ 7B94              //  ______________________________________________________________________
 174+ 7B94              //
 175+ 7B94              // blk-fh
 176+ 7B94                              Variable_Def BLK_FH,   "BLK-FH",   1
 176+ 7B94             >                New_Def  BLK_FH, "BLK-FH", Variable_Ptr, is_normal
 176+ 7B94             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 176+ 7B94             >
 176+ 7B94             >                // dummy db directives used to calculate length of namec
 176+ 7B94 42 4C 4B 2D >                db      "BLK-FH"
 176+ 7B98 46 48       >
 176+ 7B9A             >len_NFA         defl    $ - temp_NFA
 176+ 7B9A             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 176+ 7B94             >
 176+ 7B94 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 176+ 7B95 42 4C 4B 2D >                db      "BLK-FH"               // name string in 7-bit ascii, but
 176+ 7B99 46 48       >
 176+ 7B9B             >                org     $-1                 // alter last byte of Name just above to set
 176+ 7B9A C8          >                db      {b $} | END_BIT     // msb as name end
 176+ 7B9B             >
 176+ 7B9B 64 7B       >                dw      last_NFA            // Link to previous definition Name
 176+ 7B9D             >BLK_FH:          if Variable_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 176+ 7B9D D3 6C       >                dw      Variable_Ptr ; ok        // for primitive definitions  actual code
 176+ 7B9F             >                else
 176+ 7B9F ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 176+ 7B9F             >                endif           ; ok        // for other definitions it "points" the correct handler
 176+ 7B9F             >                // Use of "; ok" to suppress "warning[fwdref]"
 176+ 7B9F             >
 176+ 7B9F             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 176+ 7B9F 01 00       >                dw      1
 177+ 7BA1
 178+ 7BA1                              New_Def BLK_FNAME,   "BLK-FNAME", Create_Ptr, is_normal
 178+ 7BA1             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 178+ 7BA1             >
 178+ 7BA1             >                // dummy db directives used to calculate length of namec
 178+ 7BA1 42 4C 4B 2D >                db      "BLK-FNAME"
 178+ 7BA5 46 4E 41 4D >
 178+ 7BA9 45          >
 178+ 7BAA             >len_NFA         defl    $ - temp_NFA
 178+ 7BAA             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 178+ 7BA1             >
 178+ 7BA1 89          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 178+ 7BA2 42 4C 4B 2D >                db      "BLK-FNAME"               // name string in 7-bit ascii, but
 178+ 7BA6 46 4E 41 4D >
 178+ 7BAA 45          >
 178+ 7BAB             >                org     $-1                 // alter last byte of Name just above to set
 178+ 7BAA C5          >                db      {b $} | END_BIT     // msb as name end
 178+ 7BAB             >
 178+ 7BAB 94 7B       >                dw      last_NFA            // Link to previous definition Name
 178+ 7BAD             >BLK_FNAME:          if Create_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 178+ 7BAD C4 76       >                dw      Create_Ptr ; ok        // for primitive definitions  actual code
 178+ 7BAF             >                else
 178+ 7BAF ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 178+ 7BAF             >                endif           ; ok        // for other definitions it "points" the correct handler
 178+ 7BAF             >                // Use of "; ok" to suppress "warning[fwdref]"
 178+ 7BAF             >
 178+ 7BAF             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 179+ 7BAF 0E 21 42 6C                  db      14, "!Blocks-64.bin", 0
 179+ 7BB3 6F 63 6B 73
 179+ 7BB7 2D 36 34 2E
 179+ 7BBB 62 69 6E 00
 180+ 7BBF 00 00 00...                  ds      24
 181+ 7BD7
 182+ 7BD7              //  ______________________________________________________________________
 183+ 7BD7              //
 184+ 7BD7              // blk-seek     n --
 185+ 7BD7              // seek block n  within blocks!.bin  file
 186+ 7BD7                              Colon_Def BLK_SEEK, "BLK-SEEK", is_normal
 186+ 7BD7             >                New_Def  BLK_SEEK, "BLK-SEEK", Enter_Ptr, is_normal ; ok
 186+ 7BD7             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 186+ 7BD7             >
 186+ 7BD7             >                // dummy db directives used to calculate length of namec
 186+ 7BD7 42 4C 4B 2D >                db      "BLK-SEEK"
 186+ 7BDB 53 45 45 4B >
 186+ 7BDF             >len_NFA         defl    $ - temp_NFA
 186+ 7BDF             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 186+ 7BD7             >
 186+ 7BD7 88          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 186+ 7BD8 42 4C 4B 2D >                db      "BLK-SEEK"               // name string in 7-bit ascii, but
 186+ 7BDC 53 45 45 4B >
 186+ 7BE0             >                org     $-1                 // alter last byte of Name just above to set
 186+ 7BDF CB          >                db      {b $} | END_BIT     // msb as name end
 186+ 7BE0             >
 186+ 7BE0 A1 7B       >                dw      last_NFA            // Link to previous definition Name
 186+ 7BE2             >BLK_SEEK:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 186+ 7BE2 79 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 186+ 7BE4             >                else
 186+ 7BE4 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 186+ 7BE4             >                endif           ; ok        // for other definitions it "points" the correct handler
 186+ 7BE4             >                // Use of "; ok" to suppress "warning[fwdref]"
 186+ 7BE4             >
 186+ 7BE4             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 187+ 7BE4 34 6D A5 79                  dw  BBUF, MMUL
 188+ 7BE8 9D 7B 97 6B                  dw  BLK_FH, FETCH
 189+ 7BEC A8 67                        dw  F_SEEK
 190+ 7BEE A9 63 2D 00                  dw  LIT, $2D, QERROR
 190+ 7BF2 8F 70
 191+ 7BF4 A3 69                        dw  EXIT
 192+ 7BF6
 193+ 7BF6              //  ______________________________________________________________________
 194+ 7BF6              //
 195+ 7BF6              // blk-read     n --
 196+ 7BF6              // seek block n  within blocks!.bin  file
 197+ 7BF6                              Colon_Def BLK_READ, "BLK-READ", is_normal
 197+ 7BF6             >                New_Def  BLK_READ, "BLK-READ", Enter_Ptr, is_normal ; ok
 197+ 7BF6             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 197+ 7BF6             >
 197+ 7BF6             >                // dummy db directives used to calculate length of namec
 197+ 7BF6 42 4C 4B 2D >                db      "BLK-READ"
 197+ 7BFA 52 45 41 44 >
 197+ 7BFE             >len_NFA         defl    $ - temp_NFA
 197+ 7BFE             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 197+ 7BF6             >
 197+ 7BF6 88          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 197+ 7BF7 42 4C 4B 2D >                db      "BLK-READ"               // name string in 7-bit ascii, but
 197+ 7BFB 52 45 41 44 >
 197+ 7BFF             >                org     $-1                 // alter last byte of Name just above to set
 197+ 7BFE C4          >                db      {b $} | END_BIT     // msb as name end
 197+ 7BFF             >
 197+ 7BFF D7 7B       >                dw      last_NFA            // Link to previous definition Name
 197+ 7C01             >BLK_READ:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 197+ 7C01 79 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 197+ 7C03             >                else
 197+ 7C03 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 197+ 7C03             >                endif           ; ok        // for other definitions it "points" the correct handler
 197+ 7C03             >                // Use of "; ok" to suppress "warning[fwdref]"
 197+ 7C03             >
 197+ 7C03             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 198+ 7C03 E2 7B                        dw  BLK_SEEK
 199+ 7C05 34 6D                        dw  BBUF
 200+ 7C07 9D 7B 97 6B                  dw  BLK_FH, FETCH
 201+ 7C0B 14 68                        dw  F_READ
 202+ 7C0D A9 63 2E 00                  dw  LIT, $2E, QERROR
 202+ 7C11 8F 70
 203+ 7C13 CF 6A                        dw  DROP
 204+ 7C15 A3 69                        dw  EXIT
 205+ 7C17
 206+ 7C17              //  ______________________________________________________________________
 207+ 7C17              //
 208+ 7C17              // blk-write     n --
 209+ 7C17              // seek block n  within blocks!.bin  file
 210+ 7C17                              Colon_Def BLK_WRITE, "BLK-WRITE", is_normal
 210+ 7C17             >                New_Def  BLK_WRITE, "BLK-WRITE", Enter_Ptr, is_normal ; ok
 210+ 7C17             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 210+ 7C17             >
 210+ 7C17             >                // dummy db directives used to calculate length of namec
 210+ 7C17 42 4C 4B 2D >                db      "BLK-WRITE"
 210+ 7C1B 57 52 49 54 >
 210+ 7C1F 45          >
 210+ 7C20             >len_NFA         defl    $ - temp_NFA
 210+ 7C20             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 210+ 7C17             >
 210+ 7C17 89          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 210+ 7C18 42 4C 4B 2D >                db      "BLK-WRITE"               // name string in 7-bit ascii, but
 210+ 7C1C 57 52 49 54 >
 210+ 7C20 45          >
 210+ 7C21             >                org     $-1                 // alter last byte of Name just above to set
 210+ 7C20 C5          >                db      {b $} | END_BIT     // msb as name end
 210+ 7C21             >
 210+ 7C21 F6 7B       >                dw      last_NFA            // Link to previous definition Name
 210+ 7C23             >BLK_WRITE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 210+ 7C23 79 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 210+ 7C25             >                else
 210+ 7C25 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 210+ 7C25             >                endif           ; ok        // for other definitions it "points" the correct handler
 210+ 7C25             >                // Use of "; ok" to suppress "warning[fwdref]"
 210+ 7C25             >
 210+ 7C25             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 211+ 7C25 E2 7B                        dw  BLK_SEEK
 212+ 7C27 34 6D                        dw  BBUF
 213+ 7C29 9D 7B 97 6B                  dw  BLK_FH, FETCH
 214+ 7C2D 33 68                        dw  F_WRITE
 215+ 7C2F A9 63 2F 00                  dw  LIT, $2F, QERROR
 215+ 7C33 8F 70
 216+ 7C35 CF 6A                        dw  DROP
 217+ 7C37 A3 69                        dw  EXIT
 218+ 7C39
 219+ 7C39              //  ______________________________________________________________________
 220+ 7C39              //
 221+ 7C39              // blk-init     n --
 222+ 7C39              // seek block n  within blocks!.bin  file
 223+ 7C39                              Colon_Def BLK_INIT, "BLK-INIT", is_normal
 223+ 7C39             >                New_Def  BLK_INIT, "BLK-INIT", Enter_Ptr, is_normal ; ok
 223+ 7C39             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 223+ 7C39             >
 223+ 7C39             >                // dummy db directives used to calculate length of namec
 223+ 7C39 42 4C 4B 2D >                db      "BLK-INIT"
 223+ 7C3D 49 4E 49 54 >
 223+ 7C41             >len_NFA         defl    $ - temp_NFA
 223+ 7C41             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 223+ 7C39             >
 223+ 7C39 88          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 223+ 7C3A 42 4C 4B 2D >                db      "BLK-INIT"               // name string in 7-bit ascii, but
 223+ 7C3E 49 4E 49 54 >
 223+ 7C42             >                org     $-1                 // alter last byte of Name just above to set
 223+ 7C41 D4          >                db      {b $} | END_BIT     // msb as name end
 223+ 7C42             >
 223+ 7C42 17 7C       >                dw      last_NFA            // Link to previous definition Name
 223+ 7C44             >BLK_INIT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 223+ 7C44 79 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 223+ 7C46             >                else
 223+ 7C46 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 223+ 7C46             >                endif           ; ok        // for other definitions it "points" the correct handler
 223+ 7C46             >                // Use of "; ok" to suppress "warning[fwdref]"
 223+ 7C46             >
 223+ 7C46             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 224+ 7C46 9D 7B 97 6B                  dw  BLK_FH, FETCH, F_CLOSE, DROP
 224+ 7C4A CB 67 CF 6A
 225+ 7C4E AD 7B 45 6A                  dw  BLK_FNAME, ONE_PLUS
 226+ 7C52 D3 6E 0C 6D                  dw  HERE, THREE, F_OPEN         // open for update (read+write)
 226+ 7C56 4A 68
 227+ 7C58 A9 63 2C 00                  dw  LIT, $2C, QERROR
 227+ 7C5C 8F 70
 228+ 7C5E 9D 7B A4 6B                  dw  BLK_FH, STORE
 229+ 7C62 A3 69                        dw  EXIT
 230+ 7C64
 231+ 7C64              //  ______________________________________________________________________
 232+ 7C64              //
 233+ 7C64              // #sec
 234+ 7C64              // number of 512 Byte "sector" available on thie sysstem.
 235+ 7C64              // it addd up to 16 MByte of data that can be used as source or pool for almost anything.
 236+ 7C64
 237+ 7C64                              Constant_Def NSEC , "#SEC", 32767
 237+ 7C64             >                New_Def  NSEC, "#SEC", Constant_Ptr, is_normal
 237+ 7C64             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 237+ 7C64             >
 237+ 7C64             >                // dummy db directives used to calculate length of namec
 237+ 7C64 23 53 45 43 >                db      "#SEC"
 237+ 7C68             >len_NFA         defl    $ - temp_NFA
 237+ 7C68             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 237+ 7C64             >
 237+ 7C64 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 237+ 7C65 23 53 45 43 >                db      "#SEC"               // name string in 7-bit ascii, but
 237+ 7C69             >                org     $-1                 // alter last byte of Name just above to set
 237+ 7C68 C3          >                db      {b $} | END_BIT     // msb as name end
 237+ 7C69             >
 237+ 7C69 39 7C       >                dw      last_NFA            // Link to previous definition Name
 237+ 7C6B             >NSEC:          if Constant_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 237+ 7C6B B8 6C       >                dw      Constant_Ptr ; ok        // for primitive definitions  actual code
 237+ 7C6D             >                else
 237+ 7C6D ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 237+ 7C6D             >                endif           ; ok        // for other definitions it "points" the correct handler
 237+ 7C6D             >                // Use of "; ok" to suppress "warning[fwdref]"
 237+ 7C6D             >
 237+ 7C6D             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 237+ 7C6D FF 7F       >                dw      32767
 238+ 7C6F
 239+ 7C6F              //  ______________________________________________________________________
 240+ 7C6F
 241+ 7C6F
 242+ 7C6F
# file closed: C:\Zx\CSpect\Projects\vForth15_INDIRECT/source/next-opt1.asm
 113  7C6F                              include "L3.asm"
# file opened: C:\Zx\CSpect\Projects\vForth15_INDIRECT/source/L3.asm
   1+ 7C6F              //  ______________________________________________________________________
   2+ 7C6F              //
   3+ 7C6F              //  L3.asm
   4+ 7C6F              //
   5+ 7C6F              //  Continuation of L2.asm
   6+ 7C6F              //  I/O Block definitions
   7+ 7C6F              //  ______________________________________________________________________
   8+ 7C6F
   9+ 7C6F
  10+ 7C6F              //  ______________________________________________________________________
  11+ 7C6F              //
  12+ 7C6F              // r/w          a n f --
  13+ 7C6F              // read/write block n depending on flag f, true-flag means read, false-flag means write.
  14+ 7C6F                              Colon_Def READ_WRITE, "R/W", is_normal
  14+ 7C6F             >                New_Def  READ_WRITE, "R/W", Enter_Ptr, is_normal ; ok
  14+ 7C6F             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  14+ 7C6F             >
  14+ 7C6F             >                // dummy db directives used to calculate length of namec
  14+ 7C6F 52 2F 57    >                db      "R/W"
  14+ 7C72             >len_NFA         defl    $ - temp_NFA
  14+ 7C72             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  14+ 7C6F             >
  14+ 7C6F 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  14+ 7C70 52 2F 57    >                db      "R/W"               // name string in 7-bit ascii, but
  14+ 7C73             >                org     $-1                 // alter last byte of Name just above to set
  14+ 7C72 D7          >                db      {b $} | END_BIT     // msb as name end
  14+ 7C73             >
  14+ 7C73 64 7C       >                dw      last_NFA            // Link to previous definition Name
  14+ 7C75             >READ_WRITE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
  14+ 7C75 79 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
  14+ 7C77             >                else
  14+ 7C77 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
  14+ 7C77             >                endif           ; ok        // for other definitions it "points" the correct handler
  14+ 7C77             >                // Use of "; ok" to suppress "warning[fwdref]"
  14+ 7C77             >
  14+ 7C77             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  15+ 7C77 B6 69                        dw      TO_R                    // >r
  16+ 7C79 51 6A                        dw      ONE_SUBTRACT            // 1-
  17+ 7C7B 04 6B 00 6A                  dw      DUP, ZLESS              // dup 0<
  18+ 7C7F BF 6A 6B 7C                  dw      OVER, NSEC              // over #sec
  19+ 7C83 51 6A 63 6F                  dw      ONE_SUBTRACT, GREATER   // 1- >
  20+ 7C87 45 69                        dw      OR_OP                   // or
  21+ 7C89 A9 63 06 00                  dw      LIT, 6, QERROR          // 6 ?error
  21+ 7C8D 8F 70
  22+ 7C8F CA 69                        dw      R_TO                    // r>
  23+ 7C91                                                              // if
  24+ 7C91 2C 64                        dw      ZBRANCH
  25+ 7C93 08 00                        dw      Read_Write_Else - $
  26+ 7C95 01 7C                        dw          BLK_READ            //      blk-read
  27+ 7C97 15 64                        dw      BRANCH
  28+ 7C99 04 00                        dw      Read_Write_Endif - $
  29+ 7C9B              Read_Write_Else:                                // else
  30+ 7C9B 23 7C                        dw          BLK_WRITE           //      blk-write
  31+ 7C9D              Read_Write_Endif:                               // endif
  32+ 7C9D A3 69                        dw      EXIT                    // ;
  33+ 7C9F
  34+ 7C9F
  35+ 7C9F              //  ______________________________________________________________________
  36+ 7C9F              //
  37+ 7C9F              // +buf        a1 -- a2 f
  38+ 7C9F              // advences to next buffer, cyclically rotating along them
  39+ 7C9F                              Colon_Def PBUF, "+BUF", is_normal
  39+ 7C9F             >                New_Def  PBUF, "+BUF", Enter_Ptr, is_normal ; ok
  39+ 7C9F             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  39+ 7C9F             >
  39+ 7C9F             >                // dummy db directives used to calculate length of namec
  39+ 7C9F 2B 42 55 46 >                db      "+BUF"
  39+ 7CA3             >len_NFA         defl    $ - temp_NFA
  39+ 7CA3             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  39+ 7C9F             >
  39+ 7C9F 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  39+ 7CA0 2B 42 55 46 >                db      "+BUF"               // name string in 7-bit ascii, but
  39+ 7CA4             >                org     $-1                 // alter last byte of Name just above to set
  39+ 7CA3 C6          >                db      {b $} | END_BIT     // msb as name end
  39+ 7CA4             >
  39+ 7CA4 6F 7C       >                dw      last_NFA            // Link to previous definition Name
  39+ 7CA6             >PBUF:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
  39+ 7CA6 79 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
  39+ 7CA8             >                else
  39+ 7CA8 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
  39+ 7CA8             >                endif           ; ok        // for other definitions it "points" the correct handler
  39+ 7CA8             >                // Use of "; ok" to suppress "warning[fwdref]"
  39+ 7CA8             >
  39+ 7CA8             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  40+ 7CA8 A9 63 04 02                  dw      LIT, 516, PLUS          // 516 +
  40+ 7CAC 24 6A
  41+ 7CAE 04 6B D6 6D                  dw      DUP, LIMIT, FETCH       // dup limit @
  41+ 7CB2 97 6B
  42+ 7CB4 2F 6F                        dw      EQUALS                  // =
  43+ 7CB6                                                              // if
  44+ 7CB6 2C 64                        dw      ZBRANCH
  45+ 7CB8 08 00                        dw      PBuf_Endif - $
  46+ 7CBA CF 6A                        dw          DROP                //      drop
  47+ 7CBC CB 6D 97 6B                  dw          FIRST, FETCH        //      first @
  48+ 7CC0              PBuf_Endif:                                     // endif
  49+ 7CC0 04 6B 88 6E                  dw      DUP, PREV, FETCH        // dup prev @
  49+ 7CC4 97 6B
  50+ 7CC6 21 6F                        dw      SUBTRACT                // -
  51+ 7CC8 A3 69                        dw      EXIT                    // ;
  52+ 7CCA
  53+ 7CCA              //  ______________________________________________________________________
  54+ 7CCA              //
  55+ 7CCA              // update       --
  56+ 7CCA              // mark the last used block to be written to disk
  57+ 7CCA                              Colon_Def UPDATE, "UPDATE", is_normal
  57+ 7CCA             >                New_Def  UPDATE, "UPDATE", Enter_Ptr, is_normal ; ok
  57+ 7CCA             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  57+ 7CCA             >
  57+ 7CCA             >                // dummy db directives used to calculate length of namec
  57+ 7CCA 55 50 44 41 >                db      "UPDATE"
  57+ 7CCE 54 45       >
  57+ 7CD0             >len_NFA         defl    $ - temp_NFA
  57+ 7CD0             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  57+ 7CCA             >
  57+ 7CCA 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  57+ 7CCB 55 50 44 41 >                db      "UPDATE"               // name string in 7-bit ascii, but
  57+ 7CCF 54 45       >
  57+ 7CD1             >                org     $-1                 // alter last byte of Name just above to set
  57+ 7CD0 C5          >                db      {b $} | END_BIT     // msb as name end
  57+ 7CD1             >
  57+ 7CD1 9F 7C       >                dw      last_NFA            // Link to previous definition Name
  57+ 7CD3             >UPDATE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
  57+ 7CD3 79 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
  57+ 7CD5             >                else
  57+ 7CD5 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
  57+ 7CD5             >                endif           ; ok        // for other definitions it "points" the correct handler
  57+ 7CD5             >                // Use of "; ok" to suppress "warning[fwdref]"
  57+ 7CD5             >
  57+ 7CD5             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  58+ 7CD5 88 6E 97 6B                  dw      PREV, FETCH, FETCH      // prev @ @
  58+ 7CD9 97 6B
  59+ 7CDB A9 63 00 80                  dw      LIT, $8000, OR_OP       // $8000, or
  59+ 7CDF 45 69
  60+ 7CE1 88 6E 97 6B                  dw      PREV, FETCH, STORE      // prev @ !
  60+ 7CE5 A4 6B
  61+ 7CE7 A3 69                        dw      EXIT                    // ;
  62+ 7CE9
  63+ 7CE9
  64+ 7CE9              //  ______________________________________________________________________
  65+ 7CE9              //
  66+ 7CE9              // empty-buffers --
  67+ 7CE9                              Colon_Def EMPTY_BUFFERS, "EMPTY-BUFFERS", is_normal
  67+ 7CE9             >                New_Def  EMPTY_BUFFERS, "EMPTY-BUFFERS", Enter_Ptr, is_normal ; ok
  67+ 7CE9             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  67+ 7CE9             >
  67+ 7CE9             >                // dummy db directives used to calculate length of namec
  67+ 7CE9 45 4D 50 54 >                db      "EMPTY-BUFFERS"
  67+ 7CED 59 2D 42 55 >
  67+ 7CF1 46 46 45 52 >
  67+ 7CF5 53          >
  67+ 7CF6             >len_NFA         defl    $ - temp_NFA
  67+ 7CF6             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  67+ 7CE9             >
  67+ 7CE9 8D          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  67+ 7CEA 45 4D 50 54 >                db      "EMPTY-BUFFERS"               // name string in 7-bit ascii, but
  67+ 7CEE 59 2D 42 55 >
  67+ 7CF2 46 46 45 52 >
  67+ 7CF6 53          >
  67+ 7CF7             >                org     $-1                 // alter last byte of Name just above to set
  67+ 7CF6 D3          >                db      {b $} | END_BIT     // msb as name end
  67+ 7CF7             >
  67+ 7CF7 CA 7C       >                dw      last_NFA            // Link to previous definition Name
  67+ 7CF9             >EMPTY_BUFFERS:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
  67+ 7CF9 79 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
  67+ 7CFB             >                else
  67+ 7CFB ~           >                dw      $ + 2   ; ok        // is pointed by CFA
  67+ 7CFB             >                endif           ; ok        // for other definitions it "points" the correct handler
  67+ 7CFB             >                // Use of "; ok" to suppress "warning[fwdref]"
  67+ 7CFB             >
  67+ 7CFB             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  68+ 7CFB CB 6D 97 6B                  dw      FIRST, FETCH            // first @
  69+ 7CFF D6 6D 97 6B                  dw      LIMIT, FETCH            // limit @
  70+ 7D03 BF 6A 21 6F                  dw      OVER, SUBTRACT, ERASE   // over - erase
  70+ 7D07 C9 73
  71+ 7D09 A3 69                        dw      EXIT                    // ;
  72+ 7D0B
  73+ 7D0B              //  ______________________________________________________________________
  74+ 7D0B              //
  75+ 7D0B              // buffer       n -- a
  76+ 7D0B              // read block n and gives the address to a buffer
  77+ 7D0B              // any block previously inside the buffer, if modified, is rewritten to
  78+ 7D0B              // disk before reading the block n.
  79+ 7D0B
  80+ 7D0B                              Colon_Def BUFFER, "BUFFER", is_normal
  80+ 7D0B             >                New_Def  BUFFER, "BUFFER", Enter_Ptr, is_normal ; ok
  80+ 7D0B             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  80+ 7D0B             >
  80+ 7D0B             >                // dummy db directives used to calculate length of namec
  80+ 7D0B 42 55 46 46 >                db      "BUFFER"
  80+ 7D0F 45 52       >
  80+ 7D11             >len_NFA         defl    $ - temp_NFA
  80+ 7D11             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  80+ 7D0B             >
  80+ 7D0B 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  80+ 7D0C 42 55 46 46 >                db      "BUFFER"               // name string in 7-bit ascii, but
  80+ 7D10 45 52       >
  80+ 7D12             >                org     $-1                 // alter last byte of Name just above to set
  80+ 7D11 D2          >                db      {b $} | END_BIT     // msb as name end
  80+ 7D12             >
  80+ 7D12 E9 7C       >                dw      last_NFA            // Link to previous definition Name
  80+ 7D14             >BUFFER:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
  80+ 7D14 79 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
  80+ 7D16             >                else
  80+ 7D16 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
  80+ 7D16             >                endif           ; ok        // for other definitions it "points" the correct handler
  80+ 7D16             >                // Use of "; ok" to suppress "warning[fwdref]"
  80+ 7D16             >
  80+ 7D16             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  81+ 7D16 7E 6E 97 6B                  dw      USE, FETCH              // use @
  82+ 7D1A 04 6B B6 69                  dw      DUP, TO_R               // dup >r
  83+ 7D1E                                                              // begin
  84+ 7D1E              Buffer_Begin:
  85+ 7D1E A6 7C                        dw          PBUF                //      +buf
  86+ 7D20                                                              // until
  87+ 7D20 2C 64                        dw      ZBRANCH
  88+ 7D22 FC FF                        dw      Buffer_Begin - $
  89+ 7D24 7E 6E A4 6B                  dw      USE, STORE              // use !
  90+ 7D28 DE 69 97 6B                  dw      R_OP, FETCH, ZLESS      // r @ 0<
  90+ 7D2C 00 6A
  91+ 7D2E                                                              // if
  92+ 7D2E 2C 64                        dw      ZBRANCH
  93+ 7D30 14 00                        dw      Buffer_Endif - $
  94+ 7D32 DE 69 6D 6A                  dw          R_OP, CELL_PLUS     //      r cell+
  95+ 7D36 DE 69 97 6B                  dw          R_OP, FETCH         //      r fetch
  96+ 7D3A A9 63 FF 7F                  dw          LIT, $7FFF          //      7FFF
  97+ 7D3E 33 69                        dw          AND_OP              //      and
  98+ 7D40 F4 6C 75 7C                  dw          ZERO, READ_WRITE    //      0 r/w
  99+ 7D44              Buffer_Endif:                                   // endif
 100+ 7D44 DE 69 A4 6B                  dw      R_OP, STORE             // r !
 101+ 7D48 DE 69 88 6E                  dw      R_OP, PREV, STORE       // r prev !
 101+ 7D4C A4 6B
 102+ 7D4E CA 69 6D 6A                  dw      R_TO, CELL_PLUS         // r> cell+
 103+ 7D52 A3 69                        dw      EXIT                    // ;
 104+ 7D54
 105+ 7D54              //  ______________________________________________________________________
 106+ 7D54              //
 107+ 7D54              // block        n -- a
 108+ 7D54              // Leaves the buffer address that contains the block n.
 109+ 7D54              // If the block is not already present, it will be loaded from disk
 110+ 7D54              // The block previously inside the buffer, if modified, is rewritten to
 111+ 7D54              // disk before reading the block n.
 112+ 7D54              // See also BUFFER, R/W, UPDATE, FLUSH.
 113+ 7D54
 114+ 7D54                              Colon_Def BLOCK, "BLOCK", is_normal
 114+ 7D54             >                New_Def  BLOCK, "BLOCK", Enter_Ptr, is_normal ; ok
 114+ 7D54             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 114+ 7D54             >
 114+ 7D54             >                // dummy db directives used to calculate length of namec
 114+ 7D54 42 4C 4F 43 >                db      "BLOCK"
 114+ 7D58 4B          >
 114+ 7D59             >len_NFA         defl    $ - temp_NFA
 114+ 7D59             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 114+ 7D54             >
 114+ 7D54 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 114+ 7D55 42 4C 4F 43 >                db      "BLOCK"               // name string in 7-bit ascii, but
 114+ 7D59 4B          >
 114+ 7D5A             >                org     $-1                 // alter last byte of Name just above to set
 114+ 7D59 CB          >                db      {b $} | END_BIT     // msb as name end
 114+ 7D5A             >
 114+ 7D5A 0B 7D       >                dw      last_NFA            // Link to previous definition Name
 114+ 7D5C             >BLOCK:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 114+ 7D5C 79 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 114+ 7D5E             >                else
 114+ 7D5E ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 114+ 7D5E             >                endif           ; ok        // for other definitions it "points" the correct handler
 114+ 7D5E             >                // Use of "; ok" to suppress "warning[fwdref]"
 114+ 7D5E             >
 114+ 7D5E             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 115+ 7D5E 1A 6E 97 6B                  dw      OFFSET, FETCH           // offset @
 116+ 7D62 24 6A B6 69                  dw      PLUS, TO_R              // + >r
 117+ 7D66 88 6E 97 6B                  dw      PREV, FETCH             // prev @
 118+ 7D6A 04 6B 97 6B                  dw      DUP, FETCH              // dup @
 119+ 7D6E DE 69 21 6F                  dw      R_OP, SUBTRACT          // r -
 120+ 7D72 04 6B 24 6A                  dw      DUP, PLUS               // dup +  ( trick: check equality without most significant bit )
 121+ 7D76                                                              // if
 122+ 7D76 2C 64                        dw        ZBRANCH
 123+ 7D78 32 00                        dw        Block_Endif_1 - $
 124+ 7D7A              Block_Begin:                                    //      begin
 125+ 7D7A A6 7C E5 69                  dw          PBUF, ZEQUAL        //          +buf 0
 126+ 7D7E                                                              //          if
 127+ 7D7E 2C 64                        dw          ZBRANCH
 128+ 7D80 12 00                        dw          Block_Endif_2 - $
 129+ 7D82 CF 6A                        dw              DROP            //              drop
 130+ 7D84 DE 69 14 7D                  dw              R_OP, BUFFER    //              r buffer
 131+ 7D88 04 6B                        dw              DUP             //              dup
 132+ 7D8A DE 69 FC 6C                  dw              R_OP, ONE       //              r 1
 133+ 7D8E 75 7C                        dw              READ_WRITE      //              r/w
 134+ 7D90 84 6A                        dw              TWO_MINUS       //              2-
 135+ 7D92              Block_Endif_2:                                  //          endif
 136+ 7D92 04 6B 97 6B                  dw          DUP, FETCH, R_OP    //          dup @ r
 136+ 7D96 DE 69
 137+ 7D98 21 6F 04 6B                  dw          SUBTRACT, DUP       //          - dup
 138+ 7D9C 24 6A E5 69                  dw          PLUS, ZEQUAL        //          + 0=
 139+ 7DA0                                                              //      until
 140+ 7DA0 2C 64                        dw        ZBRANCH
 141+ 7DA2 D8 FF                        dw        Block_Begin - $
 142+ 7DA4 04 6B 88 6E                  dw        DUP, PREV, STORE      //      dup prev !
 142+ 7DA8 A4 6B
 143+ 7DAA              Block_Endif_1:                                  // endif
 144+ 7DAA CA 69 CF 6A                  dw      R_TO, DROP, CELL_PLUS   // r> drop cell+
 144+ 7DAE 6D 6A
 145+ 7DB0 A3 69                        dw      EXIT                    // ;
 146+ 7DB2
 147+ 7DB2              //  ______________________________________________________________________
 148+ 7DB2              //
 149+ 7DB2              // #buff        -- n
 150+ 7DB2              // number of buffers available. must be the difference between LIMIT and FIRST divided by 516
 151+ 7DB2                              Constant_Def NBUFF,   "#BUFF", 7
 151+ 7DB2             >                New_Def  NBUFF, "#BUFF", Constant_Ptr, is_normal
 151+ 7DB2             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 151+ 7DB2             >
 151+ 7DB2             >                // dummy db directives used to calculate length of namec
 151+ 7DB2 23 42 55 46 >                db      "#BUFF"
 151+ 7DB6 46          >
 151+ 7DB7             >len_NFA         defl    $ - temp_NFA
 151+ 7DB7             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 151+ 7DB2             >
 151+ 7DB2 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 151+ 7DB3 23 42 55 46 >                db      "#BUFF"               // name string in 7-bit ascii, but
 151+ 7DB7 46          >
 151+ 7DB8             >                org     $-1                 // alter last byte of Name just above to set
 151+ 7DB7 C6          >                db      {b $} | END_BIT     // msb as name end
 151+ 7DB8             >
 151+ 7DB8 54 7D       >                dw      last_NFA            // Link to previous definition Name
 151+ 7DBA             >NBUFF:          if Constant_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 151+ 7DBA B8 6C       >                dw      Constant_Ptr ; ok        // for primitive definitions  actual code
 151+ 7DBC             >                else
 151+ 7DBC ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 151+ 7DBC             >                endif           ; ok        // for other definitions it "points" the correct handler
 151+ 7DBC             >                // Use of "; ok" to suppress "warning[fwdref]"
 151+ 7DBC             >
 151+ 7DBC             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 151+ 7DBC 07 00       >                dw      7
 152+ 7DBE
 153+ 7DBE              //  ______________________________________________________________________
 154+ 7DBE              //
 155+ 7DBE              // flush        --
 156+ 7DBE                              Colon_Def FLUSH, "FLUSH", is_normal
 156+ 7DBE             >                New_Def  FLUSH, "FLUSH", Enter_Ptr, is_normal ; ok
 156+ 7DBE             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 156+ 7DBE             >
 156+ 7DBE             >                // dummy db directives used to calculate length of namec
 156+ 7DBE 46 4C 55 53 >                db      "FLUSH"
 156+ 7DC2 48          >
 156+ 7DC3             >len_NFA         defl    $ - temp_NFA
 156+ 7DC3             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 156+ 7DBE             >
 156+ 7DBE 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 156+ 7DBF 46 4C 55 53 >                db      "FLUSH"               // name string in 7-bit ascii, but
 156+ 7DC3 48          >
 156+ 7DC4             >                org     $-1                 // alter last byte of Name just above to set
 156+ 7DC3 C8          >                db      {b $} | END_BIT     // msb as name end
 156+ 7DC4             >
 156+ 7DC4 B2 7D       >                dw      last_NFA            // Link to previous definition Name
 156+ 7DC6             >FLUSH:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 156+ 7DC6 79 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 156+ 7DC8             >                else
 156+ 7DC8 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 156+ 7DC8             >                endif           ; ok        // for other definitions it "points" the correct handler
 156+ 7DC8             >                // Use of "; ok" to suppress "warning[fwdref]"
 156+ 7DC8             >
 156+ 7DC8             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 157+ 7DC8 BA 7D 45 6A                  dw      NBUFF, ONE_PLUS, ZERO   // #buff 1+ 0
 157+ 7DCC F4 6C
 158+ 7DCE              Flush_Do:                                       // do
 159+ 7DCE 86 64                        dw      C_DO
 160+ 7DD0 F4 6C 14 7D                  dw      ZERO, BUFFER, DROP      //      0 buffer drop
 160+ 7DD4 CF 6A
 161+ 7DD6                                                              // loop
 162+ 7DD6 04 64 F8 FF                  dw      C_LOOP, Flush_Do - $
 163+ 7DDA 9D 7B 97 6B                  dw      BLK_FH, FETCH           // blk-fh @     ( ZX-Next dependance )
 164+ 7DDE DF 67 CF 6A                  dw      F_SYNC, DROP            // f_sync drop
 165+ 7DE2 A3 69                        dw      EXIT                    // exit
 166+ 7DE4
 167+ 7DE4              //  ______________________________________________________________________
 168+ 7DE4              //
 169+ 7DE4              // f_getline    a m fh -- n
 170+ 7DE4              // Given an open filehandle read next line (terminated with $0D or $0A)
 171+ 7DE4              // Address a is left for subsequent processing
 172+ 7DE4              // and n as the actual number of byte read, that is the length of line
 173+ 7DE4                              Colon_Def F_GETLINE, "F_GETLINE", is_normal
 173+ 7DE4             >                New_Def  F_GETLINE, "F_GETLINE", Enter_Ptr, is_normal ; ok
 173+ 7DE4             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 173+ 7DE4             >
 173+ 7DE4             >                // dummy db directives used to calculate length of namec
 173+ 7DE4 46 5F 47 45 >                db      "F_GETLINE"
 173+ 7DE8 54 4C 49 4E >
 173+ 7DEC 45          >
 173+ 7DED             >len_NFA         defl    $ - temp_NFA
 173+ 7DED             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 173+ 7DE4             >
 173+ 7DE4 89          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 173+ 7DE5 46 5F 47 45 >                db      "F_GETLINE"               // name string in 7-bit ascii, but
 173+ 7DE9 54 4C 49 4E >
 173+ 7DED 45          >
 173+ 7DEE             >                org     $-1                 // alter last byte of Name just above to set
 173+ 7DED C5          >                db      {b $} | END_BIT     // msb as name end
 173+ 7DEE             >
 173+ 7DEE BE 7D       >                dw      last_NFA            // Link to previous definition Name
 173+ 7DF0             >F_GETLINE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 173+ 7DF0 79 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 173+ 7DF2             >                else
 173+ 7DF2 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 173+ 7DF2             >                endif           ; ok        // for other definitions it "points" the correct handler
 173+ 7DF2             >                // Use of "; ok" to suppress "warning[fwdref]"
 173+ 7DF2             >
 173+ 7DF2             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 174+ 7DF2 B6 69                        dw      TO_R                    // >r               ( a  m  )     \  fh
 175+ 7DF4 E7 6A                        dw      TUCK                    // tuck             ( m a m )
 176+ 7DF6 DE 69 F6 67                  dw      R_OP, F_FGETPOS         // r f_fgetpos      ( m a m d f )
 177+ 7DFA A9 63 2C 00                  dw      LIT, 44, QERROR         // 44 ?error        ( m a m d )
 177+ 7DFE 8F 70
 178+ 7E00
 179+ 7E00 53 6B BF 6A                  dw      TWO_SWAP, OVER          // 2swap over       ( m d a m )
 180+ 7E04 45 6A F7 6A                  dw      ONE_PLUS, SWAP          // 1+ swap          ( m d a a+1 m )
 181+ 7E08
 182+ 7E08 DE 69 14 68                  dw      R_OP, F_READ            // r f_read         ( m d a n f )
 183+ 7E0C A9 63 2E 00                  dw      LIT, 46, QERROR         // 46 ?error        ( m d a n )
 183+ 7E10 8F 70
 184+ 7E12                                                              // if ( at least 1 chr was read )  \  fh
 185+ 7E12 2C 64                        dw      ZBRANCH
 186+ 7E14 3C 00                        dw      FGetline_Else - $
 187+ 7E16 A9 63 0A 00                  dw          LIT, 10, ENCLOSE    //      10 enclose       ( m d a x b x )
 187+ 7E1A 7E 65
 188+ 7E1C CF 6A DA 6A                  dw          DROP, NIP           //      drop nip         ( m d a b )
 189+ 7E20 F7 6A                        dw          SWAP                //      drop swap        ( m d b a )
 190+ 7E22 A9 63 0D 00                  dw          LIT, 13, ENCLOSE    //      13 enclose       ( m d b a x c x )
 190+ 7E26 7E 65
 191+ 7E28 CF 6A DA 6A                  dw          DROP, NIP           //      drop nip         ( m d b a c )
 192+ 7E2C 11 6B 71 6F                  dw          ROT, MIN            //      rot min          ( m d a n )
 193+ 7E30 04 6B B4 6E                  dw          DUP, SPAN, STORE    //      dup span !       ( m d a n )
 193+ 7E34 A4 6B
 194+ 7E36 04 6B B6 69                  dw          DUP, TO_R           //      dup >r           ( m d a n )      \ fh n
 195+ 7E3A 53 6B CA 69                  dw          TWO_SWAP, R_TO      //      2swap r>         ( m a n d n )    \ fh
 196+ 7E3E F4 6C 31 6A                  dw          ZERO, DPLUS         //      0 d+             ( m a n d+n )
 197+ 7E42 CA 69 A8 67                  dw          R_TO, F_SEEK        //      r> f_seek        ( m a n f )
 198+ 7E46 A9 63 2D 00                  dw          LIT, 45, QERROR     //      45 ?error        ( m a n )
 198+ 7E4A 8F 70
 199+ 7E4C                                                              // else
 200+ 7E4C 15 64                        dw      BRANCH
 201+ 7E4E 0C 00                        dw      FGetline_Endif - $
 202+ 7E50              FGetline_Else:
 203+ 7E50 CA 69                        dw          R_TO                //      r>              ( m d a fh )
 204+ 7E52 53 6B 45 6B                  dw          TWO_SWAP, TWO_DROP  //      2swap 2drop     ( m a fh )
 205+ 7E56 CF 6A F4 6C                  dw          DROP, ZERO          //      drop, 0         ( m a 0 )
 206+ 7E5A              FGetline_Endif:                                 // endif
 207+ 7E5A B6 69 04 6B                  dw      TO_R, DUP, DUP          // >r dup dup           ( m a a a )
 207+ 7E5E 04 6B
 208+ 7E60 45 6A F7 6A                  dw      ONE_PLUS, SWAP          // 1+ swap              ( m a a+1 a )
 209+ 7E64 DE 69 96 68                  dw      R_OP, CMOVE             // r cmove              ( m a )
 210+ 7E68 65 6B 24 6A                  dw      TWO_DUP, PLUS           // 2dup +               ( m a m+a )
 211+ 7E6C F4 6C F7 6A                  dw      ZERO, SWAP              // 0 swap
 212+ 7E70 77 6A A4 6B                  dw      CELL_MINUS,  STORE      // cell-  !             ( m a )
 213+ 7E74 DE 69 24 6A                  dw      R_OP, PLUS, ONE_SUBTRACT// r + 1-               ( m a+n1 )
 213+ 7E78 51 6A
 214+ 7E7A F7 6A DE 69                  dw      SWAP, R_OP, SUBTRACT    // swap r -             ( a+n+1 m-n )
 214+ 7E7E 21 6F
 215+ 7E80 D9 73                        dw      BLANK                   // blank
 216+ 7E82 CA 69                        dw      R_TO                    // r>                   ( n )
 217+ 7E84 A3 69                        dw      EXIT                    // ;
 218+ 7E86
 219+ 7E86              //  ______________________________________________________________________
 220+ 7E86              //
 221+ 7E86              // f_include    fh --
 222+ 7E86              // Given a filehandle includes the source from file
 223+ 7E86                              Colon_Def F_INCLUDE, "F_INCLUDE", is_normal
 223+ 7E86             >                New_Def  F_INCLUDE, "F_INCLUDE", Enter_Ptr, is_normal ; ok
 223+ 7E86             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 223+ 7E86             >
 223+ 7E86             >                // dummy db directives used to calculate length of namec
 223+ 7E86 46 5F 49 4E >                db      "F_INCLUDE"
 223+ 7E8A 43 4C 55 44 >
 223+ 7E8E 45          >
 223+ 7E8F             >len_NFA         defl    $ - temp_NFA
 223+ 7E8F             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 223+ 7E86             >
 223+ 7E86 89          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 223+ 7E87 46 5F 49 4E >                db      "F_INCLUDE"               // name string in 7-bit ascii, but
 223+ 7E8B 43 4C 55 44 >
 223+ 7E8F 45          >
 223+ 7E90             >                org     $-1                 // alter last byte of Name just above to set
 223+ 7E8F C5          >                db      {b $} | END_BIT     // msb as name end
 223+ 7E90             >
 223+ 7E90 E4 7D       >                dw      last_NFA            // Link to previous definition Name
 223+ 7E92             >F_INCLUDE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 223+ 7E92 79 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 223+ 7E94             >                else
 223+ 7E94 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 223+ 7E94             >                endif           ; ok        // for other definitions it "points" the correct handler
 223+ 7E94             >                // Use of "; ok" to suppress "warning[fwdref]"
 223+ 7E94             >
 223+ 7E94             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 224+ 7E94 F3 6D 97 6B                  dw      BLK, FETCH, TO_R        // blk @ >r
 224+ 7E98 B6 69
 225+ 7E9A FC 6D 97 6B                  dw      TO_IN, FETCH, TO_R      // >in @ >r
 225+ 7E9E B6 69
 226+ 7EA0 AA 6E 97 6B                  dw      SOURCE_ID, FETCH, TO_R  // source-id @ >r
 226+ 7EA4 B6 69
 227+ 7EA6 DE 69                        dw      R_OP                    // r
 228+ 7EA8                                                              // if
 229+ 7EA8 2C 64                        dw      ZBRANCH
 230+ 7EAA 20 00                        dw      FInclude_Else_1 - $
 231+ 7EAC DE 69 F6 67                  dw          R_OP, F_FGETPOS     //      r f_getpos
 232+ 7EB0 A9 63 2C 00                  dw          LIT, 44, QERROR     //      44 ?error
 232+ 7EB4 8F 70
 233+ 7EB6 FC 6D 97 6B                  dw          TO_IN, FETCH        //      >in @ 2-
 234+ 7EBA 84 6A                        dw          TWO_MINUS
 235+ 7EBC B4 6E 97 6B                  dw          SPAN, FETCH         //      span @ -
 236+ 7EC0 21 6F                        dw          SUBTRACT
 237+ 7EC2 12 6F 31 6A                  dw          S_TO_D, DPLUS       //      s>d d+
 238+ 7EC6                                                              // else
 239+ 7EC6 15 64                        dw      BRANCH
 240+ 7EC8 06 00                        dw      FInclude_Endif_1 - $
 241+ 7ECA              FInclude_Else_1:
 242+ 7ECA F4 6C F4 6C                  dw          ZERO, ZERO          //      0 0
 243+ 7ECE                                                              // endif
 244+ 7ECE              FInclude_Endif_1:
 245+ 7ECE B6 69 B6 69                  dw      TO_R, TO_R              // >r >r
 246+ 7ED2 AA 6E A4 6B                  dw      SOURCE_ID, STORE        // source-id !
 247+ 7ED6              FInclude_Begin:                                 // begin
 248+ 7ED6 FC 6C 5C 7D                  dw          ONE, BLOCK, BBUF    //      1 block b/buf
 248+ 7EDA 34 6D
 249+ 7EDC 65 6B D9 73                  dw          TWO_DUP, BLANK      //      2dup blank
 250+ 7EE0 F7 6A 45 6A                  dw          SWAP, ONE_PLUS      //      swap 1+
 251+ 7EE4 F7 6A 77 6A                  dw          SWAP, CELL_MINUS    //      swap cell-
 252+ 7EE8 AA 6E 97 6B                  dw          SOURCE_ID, FETCH    //      source-id @
 253+ 7EEC F0 7D                        dw          F_GETLINE           //      f_getline
 254+ 7EEE                                                              // while
 255+ 7EEE 2C 64                        dw      ZBRANCH
 256+ 7EF0 14 00                        dw      FInclude_Repeat - $
 257+ 7EF2 FC 6C F3 6D                  dw          ONE, BLK, STORE     //      1 blk !
 257+ 7EF6 A4 6B
 258+ 7EF8 F4 6C FC 6D                  dw          ZERO, TO_IN, STORE  //      0 >in !
 258+ 7EFC A4 6B
 259+ 7EFE B1 77                        dw          INTERPRET           //      interpret
 260+ 7F00 15 64                        dw      BRANCH
 261+ 7F02 D4 FF                        dw      FInclude_Begin - $
 262+ 7F04              FInclude_Repeat:                                // repeat
 263+ 7F04 AA 6E 97 6B                  dw      SOURCE_ID, FETCH        // source-id @
 264+ 7F08 F4 6C AA 6E                  dw      ZERO, SOURCE_ID, STORE  // 0 source-id !
 264+ 7F0C A4 6B
 265+ 7F0E CB 67                        dw      F_CLOSE                 // f_close
 266+ 7F10 A9 63 2A 00                  dw      LIT, 42, QERROR         // 42 ?error
 266+ 7F14 8F 70
 267+ 7F16 CA 69 CA 69                  dw      R_TO, R_TO, R_TO        // r> r> r>
 267+ 7F1A CA 69
 268+ 7F1C 04 6B AA 6E                  dw      DUP, SOURCE_ID, STORE   // dup source-id !
 268+ 7F20 A4 6B
 269+ 7F22                                                              // if
 270+ 7F22 2C 64                        dw      ZBRANCH
 271+ 7F24 12 00                        dw      FInclude_Else_2 - $
 272+ 7F26 AA 6E 97 6B                  dw          SOURCE_ID, FETCH    //      source-id @
 273+ 7F2A A8 67                        dw          F_SEEK              //      f_seek
 274+ 7F2C A9 63 2B 00                  dw          LIT, 43, QERROR     //      43, ?error
 274+ 7F30 8F 70
 275+ 7F32                                                              // else
 276+ 7F32 15 64                        dw      BRANCH
 277+ 7F34 04 00                        dw      FInclude_Endif_2 - $
 278+ 7F36              FInclude_Else_2:
 279+ 7F36 45 6B                        dw          TWO_DROP            //      2drop
 280+ 7F38              FInclude_Endif_2:                               // endif
 281+ 7F38 CA 69 FC 6D                  dw      R_TO, TO_IN, STORE      // r> >in !
 281+ 7F3C A4 6B
 282+ 7F3E CA 69 F3 6D                  dw      R_TO, BLK, STORE        // r> blk !
 282+ 7F42 A4 6B
 283+ 7F44 A3 69                        dw      EXIT                    // ;
 284+ 7F46
 285+ 7F46              //  ______________________________________________________________________
 286+ 7F46              //
 287+ 7F46              // open<         -- fh
 288+ 7F46              // Open the following filename and return it file-handle
 289+ 7F46              // Used in the form OPEN CCCC
 290+ 7F46                              Colon_Def OPEN_FH, "OPEN<", is_normal
 290+ 7F46             >                New_Def  OPEN_FH, "OPEN<", Enter_Ptr, is_normal ; ok
 290+ 7F46             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 290+ 7F46             >
 290+ 7F46             >                // dummy db directives used to calculate length of namec
 290+ 7F46 4F 50 45 4E >                db      "OPEN<"
 290+ 7F4A 3C          >
 290+ 7F4B             >len_NFA         defl    $ - temp_NFA
 290+ 7F4B             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 290+ 7F46             >
 290+ 7F46 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 290+ 7F47 4F 50 45 4E >                db      "OPEN<"               // name string in 7-bit ascii, but
 290+ 7F4B 3C          >
 290+ 7F4C             >                org     $-1                 // alter last byte of Name just above to set
 290+ 7F4B BC          >                db      {b $} | END_BIT     // msb as name end
 290+ 7F4C             >
 290+ 7F4C 86 7E       >                dw      last_NFA            // Link to previous definition Name
 290+ 7F4E             >OPEN_FH:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 290+ 7F4E 79 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 290+ 7F50             >                else
 290+ 7F50 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 290+ 7F50             >                endif           ; ok        // for other definitions it "points" the correct handler
 290+ 7F50             >                // Use of "; ok" to suppress "warning[fwdref]"
 290+ 7F50             >
 290+ 7F50             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 291+ 7F50 1E 6D                        dw      BL
 292+ 7F52 11 74 29 72                  dw      WORD, COUNT, OVER       // bl word count over
 292+ 7F56 BF 6A
 293+ 7F58 24 6A F4 6C                  dw      PLUS, ZERO, SWAP, STORE // + 0 swap !
 293+ 7F5C F7 6A A4 6B
 294+ 7F60 FE 73 FC 6C                  dw      PAD, ONE, F_OPEN        // pad 1 f_open
 294+ 7F64 4A 68
 295+ 7F66 A9 63 2B 00                  dw      LIT, 43                 // 43
 296+ 7F6A 8F 70                        dw      QERROR                  // ?error
 297+ 7F6C A3 69                        dw      EXIT                    // ;
 298+ 7F6E
 299+ 7F6E              //  ______________________________________________________________________
 300+ 7F6E              //
 301+ 7F6E              // include      -- cccc
 302+ 7F6E              // Include the following filename
 303+ 7F6E                              Colon_Def INCLUDE, "INCLUDE", is_normal
 303+ 7F6E             >                New_Def  INCLUDE, "INCLUDE", Enter_Ptr, is_normal ; ok
 303+ 7F6E             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 303+ 7F6E             >
 303+ 7F6E             >                // dummy db directives used to calculate length of namec
 303+ 7F6E 49 4E 43 4C >                db      "INCLUDE"
 303+ 7F72 55 44 45    >
 303+ 7F75             >len_NFA         defl    $ - temp_NFA
 303+ 7F75             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 303+ 7F6E             >
 303+ 7F6E 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 303+ 7F6F 49 4E 43 4C >                db      "INCLUDE"               // name string in 7-bit ascii, but
 303+ 7F73 55 44 45    >
 303+ 7F76             >                org     $-1                 // alter last byte of Name just above to set
 303+ 7F75 C5          >                db      {b $} | END_BIT     // msb as name end
 303+ 7F76             >
 303+ 7F76 46 7F       >                dw      last_NFA            // Link to previous definition Name
 303+ 7F78             >INCLUDE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 303+ 7F78 79 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 303+ 7F7A             >                else
 303+ 7F7A ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 303+ 7F7A             >                endif           ; ok        // for other definitions it "points" the correct handler
 303+ 7F7A             >                // Use of "; ok" to suppress "warning[fwdref]"
 303+ 7F7A             >
 303+ 7F7A             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 304+ 7F7A 4E 7F                        dw      OPEN_FH                 // open
 305+ 7F7C 04 6B 92 7E                  dw      DUP, F_INCLUDE          // dup f_include
 306+ 7F80 CB 67 CF 6A                  dw      F_CLOSE, DROP           // f_close drop
 307+ 7F84 A3 69                        dw      EXIT                    // ;
 308+ 7F86
 309+ 7F86              //  ______________________________________________________________________
 310+ 7F86              //
 311+ 7F86              // needs
 312+ 7F86              // check for cccc exists in vocabulary
 313+ 7F86              // if it doesn't then  INCLUDE  inc/cccc.F
 314+ 7F86
 315+ 7F86              // temp filename cccc.f as counted string zero-padded
 316+ 7F86                              New_Def NEEDS_W,   "NEEDS-W", Create_Ptr, is_normal
 316+ 7F86             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 316+ 7F86             >
 316+ 7F86             >                // dummy db directives used to calculate length of namec
 316+ 7F86 4E 45 45 44 >                db      "NEEDS-W"
 316+ 7F8A 53 2D 57    >
 316+ 7F8D             >len_NFA         defl    $ - temp_NFA
 316+ 7F8D             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 316+ 7F86             >
 316+ 7F86 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 316+ 7F87 4E 45 45 44 >                db      "NEEDS-W"               // name string in 7-bit ascii, but
 316+ 7F8B 53 2D 57    >
 316+ 7F8E             >                org     $-1                 // alter last byte of Name just above to set
 316+ 7F8D D7          >                db      {b $} | END_BIT     // msb as name end
 316+ 7F8E             >
 316+ 7F8E 6E 7F       >                dw      last_NFA            // Link to previous definition Name
 316+ 7F90             >NEEDS_W:          if Create_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 316+ 7F90 C4 76       >                dw      Create_Ptr ; ok        // for primitive definitions  actual code
 316+ 7F92             >                else
 316+ 7F92 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 316+ 7F92             >                endif           ; ok        // for other definitions it "points" the correct handler
 316+ 7F92             >                // Use of "; ok" to suppress "warning[fwdref]"
 316+ 7F92             >
 316+ 7F92             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 317+ 7F92 00 00 00...                  ds      35                      // 32 + .f + 0x00 = len 35
 318+ 7FB5              // temp complete path+filename
 319+ 7FB5                              New_Def NEEDS_FN,  "NEEDS-FN", Create_Ptr, is_normal
 319+ 7FB5             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 319+ 7FB5             >
 319+ 7FB5             >                // dummy db directives used to calculate length of namec
 319+ 7FB5 4E 45 45 44 >                db      "NEEDS-FN"
 319+ 7FB9 53 2D 46 4E >
 319+ 7FBD             >len_NFA         defl    $ - temp_NFA
 319+ 7FBD             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 319+ 7FB5             >
 319+ 7FB5 88          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 319+ 7FB6 4E 45 45 44 >                db      "NEEDS-FN"               // name string in 7-bit ascii, but
 319+ 7FBA 53 2D 46 4E >
 319+ 7FBE             >                org     $-1                 // alter last byte of Name just above to set
 319+ 7FBD CE          >                db      {b $} | END_BIT     // msb as name end
 319+ 7FBE             >
 319+ 7FBE 86 7F       >                dw      last_NFA            // Link to previous definition Name
 319+ 7FC0             >NEEDS_FN:          if Create_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 319+ 7FC0 C4 76       >                dw      Create_Ptr ; ok        // for primitive definitions  actual code
 319+ 7FC2             >                else
 319+ 7FC2 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 319+ 7FC2             >                endif           ; ok        // for other definitions it "points" the correct handler
 319+ 7FC2             >                // Use of "; ok" to suppress "warning[fwdref]"
 319+ 7FC2             >
 319+ 7FC2             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 320+ 7FC2 00 00 00...                  ds      40
 321+ 7FEA              // constant path
 322+ 7FEA                              New_Def NEEDS_INC,  "NEEDS-INC", Create_Ptr, is_normal
 322+ 7FEA             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 322+ 7FEA             >
 322+ 7FEA             >                // dummy db directives used to calculate length of namec
 322+ 7FEA 4E 45 45 44 >                db      "NEEDS-INC"
 322+ 7FEE 53 2D 49 4E >
 322+ 7FF2 43          >
 322+ 7FF3             >len_NFA         defl    $ - temp_NFA
 322+ 7FF3             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 322+ 7FEA             >
 322+ 7FEA 89          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 322+ 7FEB 4E 45 45 44 >                db      "NEEDS-INC"               // name string in 7-bit ascii, but
 322+ 7FEF 53 2D 49 4E >
 322+ 7FF3 43          >
 322+ 7FF4             >                org     $-1                 // alter last byte of Name just above to set
 322+ 7FF3 C3          >                db      {b $} | END_BIT     // msb as name end
 322+ 7FF4             >
 322+ 7FF4 B5 7F       >                dw      last_NFA            // Link to previous definition Name
 322+ 7FF6             >NEEDS_INC:          if Create_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 322+ 7FF6 C4 76       >                dw      Create_Ptr ; ok        // for primitive definitions  actual code
 322+ 7FF8             >                else
 322+ 7FF8 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 322+ 7FF8             >                endif           ; ok        // for other definitions it "points" the correct handler
 322+ 7FF8             >                // Use of "; ok" to suppress "warning[fwdref]"
 322+ 7FF8             >
 322+ 7FF8             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 323+ 7FF8 04 69 6E 63                  db      4, "inc/", 0
 323+ 7FFC 2F 00
 324+ 7FFE                              New_Def NEEDS_LIB,  "NEEDS-LIB", Create_Ptr, is_normal
 324+ 7FFE             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 324+ 7FFE             >
 324+ 7FFE             >                // dummy db directives used to calculate length of namec
 324+ 7FFE 4E 45 45 44 >                db      "NEEDS-LIB"
 324+ 8002 53 2D 4C 49 >
 324+ 8006 42          >
 324+ 8007             >len_NFA         defl    $ - temp_NFA
 324+ 8007             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 324+ 7FFE             >
 324+ 7FFE 89          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 324+ 7FFF 4E 45 45 44 >                db      "NEEDS-LIB"               // name string in 7-bit ascii, but
 324+ 8003 53 2D 4C 49 >
 324+ 8007 42          >
 324+ 8008             >                org     $-1                 // alter last byte of Name just above to set
 324+ 8007 C2          >                db      {b $} | END_BIT     // msb as name end
 324+ 8008             >
 324+ 8008 EA 7F       >                dw      last_NFA            // Link to previous definition Name
 324+ 800A             >NEEDS_LIB:          if Create_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 324+ 800A C4 76       >                dw      Create_Ptr ; ok        // for primitive definitions  actual code
 324+ 800C             >                else
 324+ 800C ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 324+ 800C             >                endif           ; ok        // for other definitions it "points" the correct handler
 324+ 800C             >                // Use of "; ok" to suppress "warning[fwdref]"
 324+ 800C             >
 324+ 800C             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 325+ 800C 04 6C 69 62                  db      4, "lib/", 0
 325+ 8010 2F 00
 326+ 8012
 327+ 8012              // Concatenate path at a and filename and include it
 328+ 8012              // No error is issued if filename doesn't exist.
 329+ 8012                              Colon_Def NEEDS_SLASH, "NEEDS/", is_normal
 329+ 8012             >                New_Def  NEEDS_SLASH, "NEEDS/", Enter_Ptr, is_normal ; ok
 329+ 8012             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 329+ 8012             >
 329+ 8012             >                // dummy db directives used to calculate length of namec
 329+ 8012 4E 45 45 44 >                db      "NEEDS/"
 329+ 8016 53 2F       >
 329+ 8018             >len_NFA         defl    $ - temp_NFA
 329+ 8018             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 329+ 8012             >
 329+ 8012 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 329+ 8013 4E 45 45 44 >                db      "NEEDS/"               // name string in 7-bit ascii, but
 329+ 8017 53 2F       >
 329+ 8019             >                org     $-1                 // alter last byte of Name just above to set
 329+ 8018 AF          >                db      {b $} | END_BIT     // msb as name end
 329+ 8019             >
 329+ 8019 FE 7F       >                dw      last_NFA            // Link to previous definition Name
 329+ 801B             >NEEDS_SLASH:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 329+ 801B 79 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 329+ 801D             >                else
 329+ 801D ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 329+ 801D             >                endif           ; ok        // for other definitions it "points" the correct handler
 329+ 801D             >                // Use of "; ok" to suppress "warning[fwdref]"
 329+ 801D             >
 329+ 801D             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 330+ 801D 29 72 E7 6A                  dw      COUNT, TUCK             // n a n
 331+ 8021 C0 7F F7 6A                  dw      NEEDS_FN, SWAP, CMOVE   // n        \ Path
 331+ 8025 96 68
 332+ 8027 C0 7F 24 6A                  dw      NEEDS_FN, PLUS          // a1+n     \ Concat
 333+ 802B 90 7F 45 6A                  dw      NEEDS_W, ONE_PLUS, SWAP
 333+ 802F F7 6A
 334+ 8031 A9 63 23 00                  dw      LIT, 35
 335+ 8035 96 68                        dw      CMOVE
 336+ 8037 C0 7F                        dw      NEEDS_FN
 337+ 8039 FE 73 FC 6C                  dw      PAD, ONE, F_OPEN
 337+ 803D 4A 68
 338+ 803F E5 69                        dw      ZEQUAL
 339+ 8041 2C 64                        dw      ZBRANCH
 340+ 8043 08 00                        dw      Needs_1 - $
 341+ 8045 92 7E                        dw          F_INCLUDE
 342+ 8047 15 64                        dw      BRANCH
 343+ 8049 04 00                        dw      Needs_2 - $
 344+ 804B              Needs_1:
 345+ 804B              //              dw          NEEDS_W, COUNT, TYPE, SPACE
 346+ 804B              //              dw          LIT, 43, MESSAGE
 347+ 804B CF 6A                        dw          DROP
 348+ 804D              Needs_2:
 349+ 804D A3 69                        dw      EXIT                    // ;
 350+ 804F
 351+ 804F
 352+ 804F                              New_Def NDOM,   "NDOM", Create_Ptr, is_normal
 352+ 804F             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 352+ 804F             >
 352+ 804F             >                // dummy db directives used to calculate length of namec
 352+ 804F 4E 44 4F 4D >                db      "NDOM"
 352+ 8053             >len_NFA         defl    $ - temp_NFA
 352+ 8053             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 352+ 804F             >
 352+ 804F 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 352+ 8050 4E 44 4F 4D >                db      "NDOM"               // name string in 7-bit ascii, but
 352+ 8054             >                org     $-1                 // alter last byte of Name just above to set
 352+ 8053 CD          >                db      {b $} | END_BIT     // msb as name end
 352+ 8054             >
 352+ 8054 12 80       >                dw      last_NFA            // Link to previous definition Name
 352+ 8056             >NDOM:          if Create_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 352+ 8056 C4 76       >                dw      Create_Ptr ; ok        // for primitive definitions  actual code
 352+ 8058             >                else
 352+ 8058 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 352+ 8058             >                endif           ; ok        // for other definitions it "points" the correct handler
 352+ 8058             >                // Use of "; ok" to suppress "warning[fwdref]"
 352+ 8058             >
 352+ 8058             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 353+ 8058              //              db $3A, $3F, $2F, $2A, $7C, $5C, $3C, $3E, $22
 354+ 8058 3A 3F 2F 2A                  db ':?/*|\<>"'
 354+ 805C 7C 5C 3C 3E
 354+ 8060 22
 355+ 8061 00                           db 0
 356+ 8062
 357+ 8062                              New_Def NCDM,   "NCDM", Create_Ptr, is_normal
 357+ 8062             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 357+ 8062             >
 357+ 8062             >                // dummy db directives used to calculate length of namec
 357+ 8062 4E 43 44 4D >                db      "NCDM"
 357+ 8066             >len_NFA         defl    $ - temp_NFA
 357+ 8066             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 357+ 8062             >
 357+ 8062 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 357+ 8063 4E 43 44 4D >                db      "NCDM"               // name string in 7-bit ascii, but
 357+ 8067             >                org     $-1                 // alter last byte of Name just above to set
 357+ 8066 CD          >                db      {b $} | END_BIT     // msb as name end
 357+ 8067             >
 357+ 8067 4F 80       >                dw      last_NFA            // Link to previous definition Name
 357+ 8069             >NCDM:          if Create_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 357+ 8069 C4 76       >                dw      Create_Ptr ; ok        // for primitive definitions  actual code
 357+ 806B             >                else
 357+ 806B ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 357+ 806B             >                endif           ; ok        // for other definitions it "points" the correct handler
 357+ 806B             >                // Use of "; ok" to suppress "warning[fwdref]"
 357+ 806B             >
 357+ 806B             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 358+ 806B              //              db $5F, $5E, $25, $26, $24, $5F, $7B, $7D, $7E
 359+ 806B 5F 5E 25 26                  db '_^%&$_{}~'
 359+ 806F 24 5F 7B 7D
 359+ 8073 7E
 360+ 8074 00                           db 0
 361+ 8075
 362+ 8075              // Replace illegal character in filename using the map here above
 363+ 8075              // at the moment we need only  "
 364+ 8075                              Colon_Def NEEDS_CHECK, "MAP-FN", is_normal
 364+ 8075             >                New_Def  NEEDS_CHECK, "MAP-FN", Enter_Ptr, is_normal ; ok
 364+ 8075             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 364+ 8075             >
 364+ 8075             >                // dummy db directives used to calculate length of namec
 364+ 8075 4D 41 50 2D >                db      "MAP-FN"
 364+ 8079 46 4E       >
 364+ 807B             >len_NFA         defl    $ - temp_NFA
 364+ 807B             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 364+ 8075             >
 364+ 8075 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 364+ 8076 4D 41 50 2D >                db      "MAP-FN"               // name string in 7-bit ascii, but
 364+ 807A 46 4E       >
 364+ 807C             >                org     $-1                 // alter last byte of Name just above to set
 364+ 807B CE          >                db      {b $} | END_BIT     // msb as name end
 364+ 807C             >
 364+ 807C 62 80       >                dw      last_NFA            // Link to previous definition Name
 364+ 807E             >NEEDS_CHECK:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 364+ 807E 79 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 364+ 8080             >                else
 364+ 8080 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 364+ 8080             >                endif           ; ok        // for other definitions it "points" the correct handler
 364+ 8080             >                // Use of "; ok" to suppress "warning[fwdref]"
 364+ 8080             >
 364+ 8080             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 365+ 8080 29 72 3D 72                  dw      COUNT, BOUNDS
 366+ 8084 86 64                        dw      C_DO
 367+ 8086              Needs_3:
 368+ 8086 69 80 56 80                  dw          NCDM, NDOM, LIT, 10
 368+ 808A A9 63 0A 00
 369+ 808E 90 64 B2 6B                  dw          I, CFETCH
 370+ 8092 B8 65                        dw          C_MAP
 371+ 8094 90 64 C0 6B                  dw          I, CSTORE
 372+ 8098              Needs_4:
 373+ 8098 04 64                        dw      C_LOOP
 374+ 809A EC FF                        dw      Needs_3 - $
 375+ 809C A3 69                        dw      EXIT
 376+ 809E
 377+ 809E
 378+ 809E              // include  "path/cccc.f" if cccc is not defined
 379+ 809E              // filename cccc.f is temporary stored at NEEDS-W
 380+ 809E                              Colon_Def NEEDS_PATH, "NEEDS-F", is_normal
 380+ 809E             >                New_Def  NEEDS_PATH, "NEEDS-F", Enter_Ptr, is_normal ; ok
 380+ 809E             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 380+ 809E             >
 380+ 809E             >                // dummy db directives used to calculate length of namec
 380+ 809E 4E 45 45 44 >                db      "NEEDS-F"
 380+ 80A2 53 2D 46    >
 380+ 80A5             >len_NFA         defl    $ - temp_NFA
 380+ 80A5             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 380+ 809E             >
 380+ 809E 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 380+ 809F 4E 45 45 44 >                db      "NEEDS-F"               // name string in 7-bit ascii, but
 380+ 80A3 53 2D 46    >
 380+ 80A6             >                org     $-1                 // alter last byte of Name just above to set
 380+ 80A5 C6          >                db      {b $} | END_BIT     // msb as name end
 380+ 80A6             >
 380+ 80A6 75 80       >                dw      last_NFA            // Link to previous definition Name
 380+ 80A8             >NEEDS_PATH:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 380+ 80A8 79 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 380+ 80AA             >                else
 380+ 80AA ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 380+ 80AA             >                endif           ; ok        // for other definitions it "points" the correct handler
 380+ 80AA             >                // Use of "; ok" to suppress "warning[fwdref]"
 380+ 80AA             >
 380+ 80AA             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 381+ 80AA C3 75                        dw      LFIND
 382+ 80AC 2C 64                        dw      ZBRANCH
 383+ 80AE 0A 00                        dw      Needs_5 - $
 384+ 80B0
 385+ 80B0 CF 6A 45 6B                  dw          DROP, TWO_DROP
 386+ 80B4 15 64                        dw      BRANCH
 387+ 80B6 2C 00                        dw      Needs_6 - $
 388+ 80B8              Needs_5:
 389+ 80B8 90 7F                        dw          NEEDS_W
 390+ 80BA A9 63 23 00                  dw          LIT, 35
 391+ 80BE C9 73                        dw          ERASE                   // a
 392+ 80C0 D3 6E B2 6B                  dw          HERE, CFETCH, ONE_PLUS  // a n
 392+ 80C4 45 6A
 393+ 80C6 D3 6E BF 6A                  dw          HERE, OVER              // a n here n
 394+ 80CA 90 7F F7 6A                  dw          NEEDS_W, SWAP, CMOVE    // a n
 394+ 80CE 96 68
 395+ 80D0 90 7F 7E 80                  dw          NEEDS_W, NEEDS_CHECK
 396+ 80D4 90 7F 24 6A                  dw          NEEDS_W, PLUS           // a a1+1
 397+ 80D8 A9 63 2E 66                  dw          LIT, $662E              // a a1+1 ".F"
 398+ 80DC F7 6A A4 6B                  dw          SWAP, STORE             // a
 399+ 80E0 1B 80                        dw          NEEDS_SLASH
 400+ 80E2              Needs_6:
 401+ 80E2 A3 69                        dw      EXIT
 402+ 80E4
 403+ 80E4
 404+ 80E4              // check for cccc exists in vocabulary
 405+ 80E4              // if it doesn't then  INCLUDE  inc/cccc.F
 406+ 80E4              // search in inc subdirectory
 407+ 80E4                              Colon_Def NEEDS, "NEEDS", is_normal
 407+ 80E4             >                New_Def  NEEDS, "NEEDS", Enter_Ptr, is_normal ; ok
 407+ 80E4             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 407+ 80E4             >
 407+ 80E4             >                // dummy db directives used to calculate length of namec
 407+ 80E4 4E 45 45 44 >                db      "NEEDS"
 407+ 80E8 53          >
 407+ 80E9             >len_NFA         defl    $ - temp_NFA
 407+ 80E9             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 407+ 80E4             >
 407+ 80E4 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 407+ 80E5 4E 45 45 44 >                db      "NEEDS"               // name string in 7-bit ascii, but
 407+ 80E9 53          >
 407+ 80EA             >                org     $-1                 // alter last byte of Name just above to set
 407+ 80E9 D3          >                db      {b $} | END_BIT     // msb as name end
 407+ 80EA             >
 407+ 80EA 9E 80       >                dw      last_NFA            // Link to previous definition Name
 407+ 80EC             >NEEDS:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 407+ 80EC 79 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 407+ 80EE             >                else
 407+ 80EE ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 407+ 80EE             >                endif           ; ok        // for other definitions it "points" the correct handler
 407+ 80EE             >                // Use of "; ok" to suppress "warning[fwdref]"
 407+ 80EE             >
 407+ 80EE             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 408+ 80EE FC 6D 97 6B                  dw      TO_IN, FETCH
 409+ 80F2 04 6B                        dw      DUP
 410+ 80F4 F6 7F A8 80                  dw      NEEDS_INC, NEEDS_PATH
 411+ 80F8 FC 6D A4 6B                  dw      TO_IN, STORE
 412+ 80FC 0A 80 A8 80                  dw      NEEDS_LIB, NEEDS_PATH
 413+ 8100 FC 6D A4 6B                  dw      TO_IN, STORE
 414+ 8104 C3 75                        dw      LFIND
 415+ 8106 2C 64                        dw      ZBRANCH
 416+ 8108 08 00                        dw      Needs_10 - $
 417+ 810A 45 6B                        dw          TWO_DROP
 418+ 810C 15 64                        dw      BRANCH
 419+ 810E 10 00                        dw      Needs_11 - $
 420+ 8110              Needs_10:
 421+ 8110 90 7F 29 72                  dw      NEEDS_W, COUNT, TYPE, SPACE
 421+ 8114 8F 72 D5 6F
 422+ 8118 A9 63 2B 00                  dw      LIT, 43, MESSAGE
 422+ 811C DB 7A
 423+ 811E              Needs_11:
 424+ 811E A3 69                        dw      EXIT
 425+ 8120
 426+ 8120
 427+ 8120              //  ______________________________________________________________________
 428+ 8120              //
 429+ 8120              // load+        n --
 430+ 8120                              Colon_Def LOAD_P, "LOAD+", is_normal
 430+ 8120             >                New_Def  LOAD_P, "LOAD+", Enter_Ptr, is_normal ; ok
 430+ 8120             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 430+ 8120             >
 430+ 8120             >                // dummy db directives used to calculate length of namec
 430+ 8120 4C 4F 41 44 >                db      "LOAD+"
 430+ 8124 2B          >
 430+ 8125             >len_NFA         defl    $ - temp_NFA
 430+ 8125             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 430+ 8120             >
 430+ 8120 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 430+ 8121 4C 4F 41 44 >                db      "LOAD+"               // name string in 7-bit ascii, but
 430+ 8125 2B          >
 430+ 8126             >                org     $-1                 // alter last byte of Name just above to set
 430+ 8125 AB          >                db      {b $} | END_BIT     // msb as name end
 430+ 8126             >
 430+ 8126 E4 80       >                dw      last_NFA            // Link to previous definition Name
 430+ 8128             >LOAD_P:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 430+ 8128 79 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 430+ 812A             >                else
 430+ 812A ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 430+ 812A             >                endif           ; ok        // for other definitions it "points" the correct handler
 430+ 812A             >                // Use of "; ok" to suppress "warning[fwdref]"
 430+ 812A             >
 430+ 812A             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 431+ 812A F3 6D 97 6B                  dw      BLK, FETCH, TO_R        // blk @ >r
 431+ 812E B6 69
 432+ 8130 FC 6D 97 6B                  dw      TO_IN, FETCH, TO_R      // >in @ >r
 432+ 8134 B6 69
 433+ 8136
 434+ 8136 F4 6C FC 6D                  dw      ZERO, TO_IN, STORE      // 0 >in !
 434+ 813A A4 6B
 435+ 813C 40 6D 42 7A                  dw      BSCR, MUL, BLK, STORE   // b/scr * blk !
 435+ 8140 F3 6D A4 6B
 436+ 8144 B1 77                        dw      INTERPRET               // interpret
 437+ 8146
 438+ 8146 CA 69 FC 6D                  dw      R_TO, TO_IN, STORE      // r> >in !
 438+ 814A A4 6B
 439+ 814C CA 69 F3 6D                  dw      R_TO, BLK, STORE        // r> blk !
 439+ 8150 A4 6B
 440+ 8152 A3 69                        dw      EXIT                    // ;
 441+ 8154
 442+ 8154              //  ______________________________________________________________________
 443+ 8154              //
 444+ 8154              // -->          --
 445+ 8154                              Colon_Def LOAD_NEXT, "-->", is_immediate
 445+ 8154             >                New_Def  LOAD_NEXT, "-->", Enter_Ptr, is_immediate ; ok
 445+ 8154             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 445+ 8154             >
 445+ 8154             >                // dummy db directives used to calculate length of namec
 445+ 8154 2D 2D 3E    >                db      "-->"
 445+ 8157             >len_NFA         defl    $ - temp_NFA
 445+ 8157             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 445+ 8154             >
 445+ 8154 C3          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 445+ 8155 2D 2D 3E    >                db      "-->"               // name string in 7-bit ascii, but
 445+ 8158             >                org     $-1                 // alter last byte of Name just above to set
 445+ 8157 BE          >                db      {b $} | END_BIT     // msb as name end
 445+ 8158             >
 445+ 8158 20 81       >                dw      last_NFA            // Link to previous definition Name
 445+ 815A             >LOAD_NEXT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 445+ 815A 79 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 445+ 815C             >                else
 445+ 815C ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 445+ 815C             >                endif           ; ok        // for other definitions it "points" the correct handler
 445+ 815C             >                // Use of "; ok" to suppress "warning[fwdref]"
 445+ 815C             >
 445+ 815C             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 446+ 815C 08 71                        dw      QLOADING                // ?loading
 447+ 815E F4 6C FC 6D                  dw      ZERO, TO_IN, STORE      // 0 >in !
 447+ 8162 A4 6B
 448+ 8164 40 6D                        dw      BSCR                    // b/scr
 449+ 8166 F3 6D 97 6B                  dw      BLK, FETCH              // blk @
 450+ 816A BF 6A                        dw      OVER                    // over
 451+ 816C 6F 7A                        dw      MOD                     // mod
 452+ 816E 21 6F                        dw      SUBTRACT                // -
 453+ 8170 F3 6D 74 6B                  dw      BLK, PLUSSTORE          // +!
 454+ 8174 A3 69                        dw      EXIT                    // ;
 455+ 8176
 456+ 8176              //  ______________________________________________________________________
 457+ 8176              //
 458+ 8176              // '            -- xt
 459+ 8176                              Colon_Def TICK, "'", is_normal
 459+ 8176             >                New_Def  TICK, "'", Enter_Ptr, is_normal ; ok
 459+ 8176             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 459+ 8176             >
 459+ 8176             >                // dummy db directives used to calculate length of namec
 459+ 8176 27          >                db      "'"
 459+ 8177             >len_NFA         defl    $ - temp_NFA
 459+ 8177             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 459+ 8176             >
 459+ 8176 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 459+ 8177 27          >                db      "'"               // name string in 7-bit ascii, but
 459+ 8178             >                org     $-1                 // alter last byte of Name just above to set
 459+ 8177 A7          >                db      {b $} | END_BIT     // msb as name end
 459+ 8178             >
 459+ 8178 54 81       >                dw      last_NFA            // Link to previous definition Name
 459+ 817A             >TICK:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 459+ 817A 79 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 459+ 817C             >                else
 459+ 817C ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 459+ 817C             >                endif           ; ok        // for other definitions it "points" the correct handler
 459+ 817C             >                // Use of "; ok" to suppress "warning[fwdref]"
 459+ 817C             >
 459+ 817C             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 460+ 817C C3 75                        dw      LFIND                   // -find
 461+ 817E E5 69                        dw      ZEQUAL                  // 0=
 462+ 8180 F4 6C 8F 70                  dw      ZERO, QERROR            // 0 ?error
 463+ 8184 CF 6A                        dw      DROP                    // drop
 464+ 8186 A3 69                        dw      EXIT                    // ;
 465+ 8188
 466+ 8188              //  ______________________________________________________________________
 467+ 8188              //
 468+ 8188              // forget       -- cccc
 469+ 8188                              Colon_Def FORGET, "FORGET", is_normal
 469+ 8188             >                New_Def  FORGET, "FORGET", Enter_Ptr, is_normal ; ok
 469+ 8188             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 469+ 8188             >
 469+ 8188             >                // dummy db directives used to calculate length of namec
 469+ 8188 46 4F 52 47 >                db      "FORGET"
 469+ 818C 45 54       >
 469+ 818E             >len_NFA         defl    $ - temp_NFA
 469+ 818E             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 469+ 8188             >
 469+ 8188 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 469+ 8189 46 4F 52 47 >                db      "FORGET"               // name string in 7-bit ascii, but
 469+ 818D 45 54       >
 469+ 818F             >                org     $-1                 // alter last byte of Name just above to set
 469+ 818E D4          >                db      {b $} | END_BIT     // msb as name end
 469+ 818F             >
 469+ 818F 76 81       >                dw      last_NFA            // Link to previous definition Name
 469+ 8191             >FORGET:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 469+ 8191 79 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 469+ 8193             >                else
 469+ 8193 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 469+ 8193             >                endif           ; ok        // for other definitions it "points" the correct handler
 469+ 8193             >                // Use of "; ok" to suppress "warning[fwdref]"
 469+ 8193             >
 469+ 8193             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 470+ 8193 34 6E 97 6B                  dw      CURRENT, FETCH          // current @
 471+ 8197 27 6E 97 6B                  dw      CONTEXT, FETCH          // context @
 472+ 819B 21 6F A9 63                  dw      SUBTRACT, LIT, 23, QERROR // - 23 ?error
 472+ 819F 17 00 8F 70
 473+ 81A3 7A 81 5F 70                  dw      TICK, TO_BODY           // ' >body
 474+ 81A7 04 6B AA 6D                  dw      DUP, FENCE, FETCH       // dup fence @
 474+ 81AB 97 6B
 475+ 81AD 3C 6F A9 63                  dw      ULESS, LIT, 21, QERROR  // u< 21 ?error
 475+ 81B1 15 00 8F 70
 476+ 81B5 04 6B 35 70                  dw      DUP, NFA, DP, STORE     // dup nfa dp !
 476+ 81B9 B2 6D A4 6B
 477+ 81BD 1B 70 97 6B                  dw      LFA, FETCH              // lfa @
 478+ 81C1 27 6E 97 6B                  dw      CONTEXT, FETCH, STORE   // context @ !
 478+ 81C5 A4 6B
 479+ 81C7 A3 69                        dw      EXIT                    // ;
 480+ 81C9
 481+ 81C9              //  ______________________________________________________________________
 482+ 81C9              //
 483+ 81C9              // marker       -- cccc
 484+ 81C9                              Colon_Def MARKER, "MARKER", is_immediate
 484+ 81C9             >                New_Def  MARKER, "MARKER", Enter_Ptr, is_immediate ; ok
 484+ 81C9             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 484+ 81C9             >
 484+ 81C9             >                // dummy db directives used to calculate length of namec
 484+ 81C9 4D 41 52 4B >                db      "MARKER"
 484+ 81CD 45 52       >
 484+ 81CF             >len_NFA         defl    $ - temp_NFA
 484+ 81CF             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 484+ 81C9             >
 484+ 81C9 C6          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 484+ 81CA 4D 41 52 4B >                db      "MARKER"               // name string in 7-bit ascii, but
 484+ 81CE 45 52       >
 484+ 81D0             >                org     $-1                 // alter last byte of Name just above to set
 484+ 81CF D2          >                db      {b $} | END_BIT     // msb as name end
 484+ 81D0             >
 484+ 81D0 88 81       >                dw      last_NFA            // Link to previous definition Name
 484+ 81D2             >MARKER:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 484+ 81D2 79 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 484+ 81D4             >                else
 484+ 81D4 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 484+ 81D4             >                endif           ; ok        // for other definitions it "points" the correct handler
 484+ 81D4             >                // Use of "; ok" to suppress "warning[fwdref]"
 484+ 81D4             >
 484+ 81D4             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 485+ 81D4 F2 71                        dw      CBUILDS
 486+ 81D6 C0 6D 97 6B                  dw      VOC_LINK, FETCH, COMMA
 486+ 81DA EF 6E
 487+ 81DC 34 6E 97 6B                  dw      CURRENT, FETCH, COMMA
 487+ 81E0 EF 6E
 488+ 81E2 27 6E 97 6B                  dw      CONTEXT, FETCH, COMMA
 488+ 81E6 EF 6E
 489+ 81E8 0B 70 EF 6E                  dw      LATEST, COMMA
 490+ 81EC 0B 70 49 70                  dw      LATEST, PFA, LFA, FETCH, COMMA
 490+ 81F0 1B 70 97 6B
 490+ 81F4 EF 6E
 491+ 81F6 02 72                        dw      DOES_TO
 492+ 81F8 04 6B 97 6B                  dw      DUP, FETCH, VOC_LINK, STORE, CELL_PLUS
 492+ 81FC C0 6D A4 6B
 492+ 8200 6D 6A
 493+ 8202 04 6B 97 6B                  dw      DUP, FETCH, CURRENT, STORE, CELL_PLUS
 493+ 8206 34 6E A4 6B
 493+ 820A 6D 6A
 494+ 820C 04 6B 97 6B                  dw      DUP, FETCH, CONTEXT, STORE, CELL_PLUS
 494+ 8210 27 6E A4 6B
 494+ 8214 6D 6A
 495+ 8216 04 6B 97 6B                  dw      DUP, FETCH, DP, STORE, CELL_PLUS
 495+ 821A B2 6D A4 6B
 495+ 821E 6D 6A
 496+ 8220 97 6B 34 6E                  dw           FETCH, CURRENT, FETCH, STORE
 496+ 8224 97 6B A4 6B
 497+ 8228 A3 69                        dw      EXIT
 498+ 822A
 499+ 822A              //  ______________________________________________________________________
 500+ 822A              //
 501+ 822A              // spaces       n --
 502+ 822A                              Colon_Def SPACES, "SPACES", is_normal
 502+ 822A             >                New_Def  SPACES, "SPACES", Enter_Ptr, is_normal ; ok
 502+ 822A             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 502+ 822A             >
 502+ 822A             >                // dummy db directives used to calculate length of namec
 502+ 822A 53 50 41 43 >                db      "SPACES"
 502+ 822E 45 53       >
 502+ 8230             >len_NFA         defl    $ - temp_NFA
 502+ 8230             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 502+ 822A             >
 502+ 822A 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 502+ 822B 53 50 41 43 >                db      "SPACES"               // name string in 7-bit ascii, but
 502+ 822F 45 53       >
 502+ 8231             >                org     $-1                 // alter last byte of Name just above to set
 502+ 8230 D3          >                db      {b $} | END_BIT     // msb as name end
 502+ 8231             >
 502+ 8231 C9 81       >                dw      last_NFA            // Link to previous definition Name
 502+ 8233             >SPACES:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 502+ 8233 79 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 502+ 8235             >                else
 502+ 8235 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 502+ 8235             >                endif           ; ok        // for other definitions it "points" the correct handler
 502+ 8235             >                // Use of "; ok" to suppress "warning[fwdref]"
 502+ 8235             >
 502+ 8235             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 503+ 8235 F4 6C 87 6F                  dw      ZERO, MAX
 504+ 8239 F4 6C 59 64                  dw      ZERO, C_Q_DO
 505+ 823D 08 00                        dw      Spaces_Leave - $
 506+ 823F              Spaces_Loop:
 507+ 823F D5 6F                        dw          SPACE
 508+ 8241 04 64                        dw      C_LOOP
 509+ 8243 FC FF                        dw      Spaces_Loop - $
 510+ 8245              Spaces_Leave:
 511+ 8245 A3 69                        dw      EXIT                    // ;
 512+ 8247
 513+ 8247              //  ______________________________________________________________________
 514+ 8247              //
 515+ 8247              // <#           --
 516+ 8247                              Colon_Def BEGIN_DASH, "<#", is_normal
 516+ 8247             >                New_Def  BEGIN_DASH, "<#", Enter_Ptr, is_normal ; ok
 516+ 8247             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 516+ 8247             >
 516+ 8247             >                // dummy db directives used to calculate length of namec
 516+ 8247 3C 23       >                db      "<#"
 516+ 8249             >len_NFA         defl    $ - temp_NFA
 516+ 8249             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 516+ 8247             >
 516+ 8247 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 516+ 8248 3C 23       >                db      "<#"               // name string in 7-bit ascii, but
 516+ 824A             >                org     $-1                 // alter last byte of Name just above to set
 516+ 8249 A3          >                db      {b $} | END_BIT     // msb as name end
 516+ 824A             >
 516+ 824A 2A 82       >                dw      last_NFA            // Link to previous definition Name
 516+ 824C             >BEGIN_DASH:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 516+ 824C 79 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 516+ 824E             >                else
 516+ 824E ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 516+ 824E             >                endif           ; ok        // for other definitions it "points" the correct handler
 516+ 824E             >                // Use of "; ok" to suppress "warning[fwdref]"
 516+ 824E             >
 516+ 824E             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 517+ 824E FE 73 75 6E                  dw      PAD, HLD, STORE
 517+ 8252 A4 6B
 518+ 8254 A3 69                        dw      EXIT
 519+ 8256
 520+ 8256              //  ______________________________________________________________________
 521+ 8256              //
 522+ 8256              // #>           --
 523+ 8256                              Colon_Def DASH_END, "#>", is_normal
 523+ 8256             >                New_Def  DASH_END, "#>", Enter_Ptr, is_normal ; ok
 523+ 8256             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 523+ 8256             >
 523+ 8256             >                // dummy db directives used to calculate length of namec
 523+ 8256 23 3E       >                db      "#>"
 523+ 8258             >len_NFA         defl    $ - temp_NFA
 523+ 8258             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 523+ 8256             >
 523+ 8256 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 523+ 8257 23 3E       >                db      "#>"               // name string in 7-bit ascii, but
 523+ 8259             >                org     $-1                 // alter last byte of Name just above to set
 523+ 8258 BE          >                db      {b $} | END_BIT     // msb as name end
 523+ 8259             >
 523+ 8259 47 82       >                dw      last_NFA            // Link to previous definition Name
 523+ 825B             >DASH_END:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 523+ 825B 79 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 523+ 825D             >                else
 523+ 825D ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 523+ 825D             >                endif           ; ok        // for other definitions it "points" the correct handler
 523+ 825D             >                // Use of "; ok" to suppress "warning[fwdref]"
 523+ 825D             >
 523+ 825D             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 524+ 825D 45 6B                        dw      TWO_DROP
 525+ 825F 75 6E 97 6B                  dw      HLD, FETCH, PAD, OVER, SUBTRACT
 525+ 8263 FE 73 BF 6A
 525+ 8267 21 6F
 526+ 8269 A3 69                        dw      EXIT
 527+ 826B
 528+ 826B              //  ______________________________________________________________________
 529+ 826B              //
 530+ 826B              // sign         n d -- d
 531+ 826B                              Colon_Def SIGN, "SIGN", is_normal
 531+ 826B             >                New_Def  SIGN, "SIGN", Enter_Ptr, is_normal ; ok
 531+ 826B             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 531+ 826B             >
 531+ 826B             >                // dummy db directives used to calculate length of namec
 531+ 826B 53 49 47 4E >                db      "SIGN"
 531+ 826F             >len_NFA         defl    $ - temp_NFA
 531+ 826F             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 531+ 826B             >
 531+ 826B 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 531+ 826C 53 49 47 4E >                db      "SIGN"               // name string in 7-bit ascii, but
 531+ 8270             >                org     $-1                 // alter last byte of Name just above to set
 531+ 826F CE          >                db      {b $} | END_BIT     // msb as name end
 531+ 8270             >
 531+ 8270 56 82       >                dw      last_NFA            // Link to previous definition Name
 531+ 8272             >SIGN:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 531+ 8272 79 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 531+ 8274             >                else
 531+ 8274 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 531+ 8274             >                endif           ; ok        // for other definitions it "points" the correct handler
 531+ 8274             >                // Use of "; ok" to suppress "warning[fwdref]"
 531+ 8274             >
 531+ 8274             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 532+ 8274 00 6A                        dw      ZLESS
 533+ 8276 2C 64                        dw      ZBRANCH
 534+ 8278 08 00                        dw      Sign_Endif - $
 535+ 827A A9 63 2D 00                  dw          LIT, 45, HOLD
 535+ 827E E8 73
 536+ 8280              Sign_Endif:
 537+ 8280 A3 69                        dw      EXIT
 538+ 8282
 539+ 8282              //  ______________________________________________________________________
 540+ 8282              //
 541+ 8282              // #           d1 -- d2
 542+ 8282                              Colon_Def DASH, "#", is_normal
 542+ 8282             >                New_Def  DASH, "#", Enter_Ptr, is_normal ; ok
 542+ 8282             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 542+ 8282             >
 542+ 8282             >                // dummy db directives used to calculate length of namec
 542+ 8282 23          >                db      "#"
 542+ 8283             >len_NFA         defl    $ - temp_NFA
 542+ 8283             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 542+ 8282             >
 542+ 8282 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 542+ 8283 23          >                db      "#"               // name string in 7-bit ascii, but
 542+ 8284             >                org     $-1                 // alter last byte of Name just above to set
 542+ 8283 A3          >                db      {b $} | END_BIT     // msb as name end
 542+ 8284             >
 542+ 8284 6B 82       >                dw      last_NFA            // Link to previous definition Name
 542+ 8286             >DASH:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 542+ 8286 79 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 542+ 8288             >                else
 542+ 8288 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 542+ 8288             >                endif           ; ok        // for other definitions it "points" the correct handler
 542+ 8288             >                // Use of "; ok" to suppress "warning[fwdref]"
 542+ 8288             >
 542+ 8288             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 543+ 8288 49 6E 97 6B                  dw      BASE, FETCH
 544+ 828C
 545+ 828C B6 69                        dw      TO_R                    // >r           ( ud1 )
 546+ 828E F4 6C DE 69                  dw      ZERO, R_OP, UMDIVMOD    // 0 r um/mod   ( l rem1 h/r )
 546+ 8292 FA 68
 547+ 8294 CA 69 F7 6A                  dw      R_TO, SWAP, TO_R        // r> swap >r   ( l rem )
 547+ 8298 B6 69
 548+ 829A FA 68                        dw      UMDIVMOD                // um/mod       ( rem2 l/r )
 549+ 829C CA 69                        dw      R_TO                    // r>           ( rem2 l/r h/r )
 550+ 829E
 551+ 829E 11 6B                        dw      ROT
 552+ 82A0 A9 63 09 00                  dw      LIT, 9, OVER, LESS
 552+ 82A4 BF 6A 4C 6F
 553+ 82A8 2C 64                        dw      ZBRANCH
 554+ 82AA 08 00                        dw      Dash_Endif - $
 555+ 82AC A9 63 07 00                  dw          LIT, 7, PLUS
 555+ 82B0 24 6A
 556+ 82B2              Dash_Endif:
 557+ 82B2
 558+ 82B2 A9 63 30 00                  dw      LIT, 48, PLUS, HOLD
 558+ 82B6 24 6A E8 73
 559+ 82BA A3 69                        dw      EXIT
 560+ 82BC
 561+ 82BC              //  ______________________________________________________________________
 562+ 82BC              //
 563+ 82BC              // #s           d1 -- d2
 564+ 82BC                              Colon_Def DASHES, "#S", is_normal
 564+ 82BC             >                New_Def  DASHES, "#S", Enter_Ptr, is_normal ; ok
 564+ 82BC             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 564+ 82BC             >
 564+ 82BC             >                // dummy db directives used to calculate length of namec
 564+ 82BC 23 53       >                db      "#S"
 564+ 82BE             >len_NFA         defl    $ - temp_NFA
 564+ 82BE             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 564+ 82BC             >
 564+ 82BC 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 564+ 82BD 23 53       >                db      "#S"               // name string in 7-bit ascii, but
 564+ 82BF             >                org     $-1                 // alter last byte of Name just above to set
 564+ 82BE D3          >                db      {b $} | END_BIT     // msb as name end
 564+ 82BF             >
 564+ 82BF 82 82       >                dw      last_NFA            // Link to previous definition Name
 564+ 82C1             >DASHES:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 564+ 82C1 79 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 564+ 82C3             >                else
 564+ 82C3 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 564+ 82C3             >                endif           ; ok        // for other definitions it "points" the correct handler
 564+ 82C3             >                // Use of "; ok" to suppress "warning[fwdref]"
 564+ 82C3             >
 564+ 82C3             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 565+ 82C3              Dashes_Begin:
 566+ 82C3 86 82 65 6B                  dw      DASH, TWO_DUP
 567+ 82C7 45 69 E5 69                  dw          OR_OP, ZEQUAL
 568+ 82CB 2C 64                        dw      ZBRANCH
 569+ 82CD F6 FF                        dw      Dashes_Begin - $
 570+ 82CF A3 69                        dw      EXIT
 571+ 82D1
 572+ 82D1              //  ______________________________________________________________________
 573+ 82D1              //
 574+ 82D1              // d.r          d n --
 575+ 82D1                              Colon_Def D_DOT_R, "D.R", is_normal
 575+ 82D1             >                New_Def  D_DOT_R, "D.R", Enter_Ptr, is_normal ; ok
 575+ 82D1             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 575+ 82D1             >
 575+ 82D1             >                // dummy db directives used to calculate length of namec
 575+ 82D1 44 2E 52    >                db      "D.R"
 575+ 82D4             >len_NFA         defl    $ - temp_NFA
 575+ 82D4             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 575+ 82D1             >
 575+ 82D1 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 575+ 82D2 44 2E 52    >                db      "D.R"               // name string in 7-bit ascii, but
 575+ 82D5             >                org     $-1                 // alter last byte of Name just above to set
 575+ 82D4 D2          >                db      {b $} | END_BIT     // msb as name end
 575+ 82D5             >
 575+ 82D5 BC 82       >                dw      last_NFA            // Link to previous definition Name
 575+ 82D7             >D_DOT_R:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 575+ 82D7 79 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 575+ 82D9             >                else
 575+ 82D9 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 575+ 82D9             >                endif           ; ok        // for other definitions it "points" the correct handler
 575+ 82D9             >                // Use of "; ok" to suppress "warning[fwdref]"
 575+ 82D9             >
 575+ 82D9             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 576+ 82D9 B6 69                        dw      TO_R
 577+ 82DB E7 6A 98 79                  dw      TUCK, DABS
 578+ 82DF 4C 82 C1 82                  dw      BEGIN_DASH, DASHES, ROT, SIGN, DASH_END
 578+ 82E3 11 6B 72 82
 578+ 82E7 5B 82
 579+ 82E9 CA 69                        dw      R_TO
 580+ 82EB BF 6A 21 6F                  dw      OVER, SUBTRACT, SPACES, TYPE
 580+ 82EF 33 82 8F 72
 581+ 82F3 A3 69                        dw      EXIT
 582+ 82F5
 583+ 82F5              //  ______________________________________________________________________
 584+ 82F5              //
 585+ 82F5              // .r           n1 n2 --
 586+ 82F5                              Colon_Def DOT_R, ".R", is_normal
 586+ 82F5             >                New_Def  DOT_R, ".R", Enter_Ptr, is_normal ; ok
 586+ 82F5             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 586+ 82F5             >
 586+ 82F5             >                // dummy db directives used to calculate length of namec
 586+ 82F5 2E 52       >                db      ".R"
 586+ 82F7             >len_NFA         defl    $ - temp_NFA
 586+ 82F7             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 586+ 82F5             >
 586+ 82F5 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 586+ 82F6 2E 52       >                db      ".R"               // name string in 7-bit ascii, but
 586+ 82F8             >                org     $-1                 // alter last byte of Name just above to set
 586+ 82F7 D2          >                db      {b $} | END_BIT     // msb as name end
 586+ 82F8             >
 586+ 82F8 D1 82       >                dw      last_NFA            // Link to previous definition Name
 586+ 82FA             >DOT_R:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 586+ 82FA 79 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 586+ 82FC             >                else
 586+ 82FC ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 586+ 82FC             >                endif           ; ok        // for other definitions it "points" the correct handler
 586+ 82FC             >                // Use of "; ok" to suppress "warning[fwdref]"
 586+ 82FC             >
 586+ 82FC             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 587+ 82FC B6 69                        dw      TO_R
 588+ 82FE 12 6F CA 69                  dw      S_TO_D, R_TO
 589+ 8302 D7 82                        dw      D_DOT_R
 590+ 8304 A3 69                        dw      EXIT
 591+ 8306
 592+ 8306              //  ______________________________________________________________________
 593+ 8306              //
 594+ 8306              // d.           d --
 595+ 8306                              Colon_Def D_DOT, "D.", is_normal
 595+ 8306             >                New_Def  D_DOT, "D.", Enter_Ptr, is_normal ; ok
 595+ 8306             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 595+ 8306             >
 595+ 8306             >                // dummy db directives used to calculate length of namec
 595+ 8306 44 2E       >                db      "D."
 595+ 8308             >len_NFA         defl    $ - temp_NFA
 595+ 8308             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 595+ 8306             >
 595+ 8306 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 595+ 8307 44 2E       >                db      "D."               // name string in 7-bit ascii, but
 595+ 8309             >                org     $-1                 // alter last byte of Name just above to set
 595+ 8308 AE          >                db      {b $} | END_BIT     // msb as name end
 595+ 8309             >
 595+ 8309 F5 82       >                dw      last_NFA            // Link to previous definition Name
 595+ 830B             >D_DOT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 595+ 830B 79 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 595+ 830D             >                else
 595+ 830D ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 595+ 830D             >                endif           ; ok        // for other definitions it "points" the correct handler
 595+ 830D             >                // Use of "; ok" to suppress "warning[fwdref]"
 595+ 830D             >
 595+ 830D             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 596+ 830D F4 6C D7 82                  dw      ZERO, D_DOT_R, SPACE
 596+ 8311 D5 6F
 597+ 8313 A3 69                        dw      EXIT
 598+ 8315
 599+ 8315              //  ______________________________________________________________________
 600+ 8315              //
 601+ 8315              // .            n --
 602+ 8315                              Colon_Def DOT, ".", is_normal
 602+ 8315             >                New_Def  DOT, ".", Enter_Ptr, is_normal ; ok
 602+ 8315             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 602+ 8315             >
 602+ 8315             >                // dummy db directives used to calculate length of namec
 602+ 8315 2E          >                db      "."
 602+ 8316             >len_NFA         defl    $ - temp_NFA
 602+ 8316             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 602+ 8315             >
 602+ 8315 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 602+ 8316 2E          >                db      "."               // name string in 7-bit ascii, but
 602+ 8317             >                org     $-1                 // alter last byte of Name just above to set
 602+ 8316 AE          >                db      {b $} | END_BIT     // msb as name end
 602+ 8317             >
 602+ 8317 06 83       >                dw      last_NFA            // Link to previous definition Name
 602+ 8319             >DOT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 602+ 8319 79 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 602+ 831B             >                else
 602+ 831B ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 602+ 831B             >                endif           ; ok        // for other definitions it "points" the correct handler
 602+ 831B             >                // Use of "; ok" to suppress "warning[fwdref]"
 602+ 831B             >
 602+ 831B             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 603+ 831B 12 6F 0B 83                  dw      S_TO_D, D_DOT
 604+ 831F A3 69                        dw      EXIT
 605+ 8321
 606+ 8321              //  ______________________________________________________________________
 607+ 8321              //
 608+ 8321              // ?            n --
 609+ 8321                              Colon_Def QUESTION, "?", is_normal
 609+ 8321             >                New_Def  QUESTION, "?", Enter_Ptr, is_normal ; ok
 609+ 8321             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 609+ 8321             >
 609+ 8321             >                // dummy db directives used to calculate length of namec
 609+ 8321 3F          >                db      "?"
 609+ 8322             >len_NFA         defl    $ - temp_NFA
 609+ 8322             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 609+ 8321             >
 609+ 8321 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 609+ 8322 3F          >                db      "?"               // name string in 7-bit ascii, but
 609+ 8323             >                org     $-1                 // alter last byte of Name just above to set
 609+ 8322 BF          >                db      {b $} | END_BIT     // msb as name end
 609+ 8323             >
 609+ 8323 15 83       >                dw      last_NFA            // Link to previous definition Name
 609+ 8325             >QUESTION:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 609+ 8325 79 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 609+ 8327             >                else
 609+ 8327 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 609+ 8327             >                endif           ; ok        // for other definitions it "points" the correct handler
 609+ 8327             >                // Use of "; ok" to suppress "warning[fwdref]"
 609+ 8327             >
 609+ 8327             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 610+ 8327 97 6B 19 83                  dw      FETCH, DOT
 611+ 832B A3 69                        dw      EXIT
 612+ 832D
 613+ 832D              //  ______________________________________________________________________
 614+ 832D              //
 615+ 832D              // u.           u --
 616+ 832D                              Colon_Def U_DOT, "U.", is_normal
 616+ 832D             >                New_Def  U_DOT, "U.", Enter_Ptr, is_normal ; ok
 616+ 832D             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 616+ 832D             >
 616+ 832D             >                // dummy db directives used to calculate length of namec
 616+ 832D 55 2E       >                db      "U."
 616+ 832F             >len_NFA         defl    $ - temp_NFA
 616+ 832F             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 616+ 832D             >
 616+ 832D 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 616+ 832E 55 2E       >                db      "U."               // name string in 7-bit ascii, but
 616+ 8330             >                org     $-1                 // alter last byte of Name just above to set
 616+ 832F AE          >                db      {b $} | END_BIT     // msb as name end
 616+ 8330             >
 616+ 8330 21 83       >                dw      last_NFA            // Link to previous definition Name
 616+ 8332             >U_DOT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 616+ 8332 79 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 616+ 8334             >                else
 616+ 8334 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 616+ 8334             >                endif           ; ok        // for other definitions it "points" the correct handler
 616+ 8334             >                // Use of "; ok" to suppress "warning[fwdref]"
 616+ 8334             >
 616+ 8334             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 617+ 8334 F4 6C 0B 83                  dw      ZERO, D_DOT
 618+ 8338 A3 69                        dw      EXIT
 619+ 833A
 620+ 833A              //  ______________________________________________________________________
 621+ 833A              //
 622+ 833A              // words        --
 623+ 833A                              Colon_Def WORDS, "WORDS", is_normal
 623+ 833A             >                New_Def  WORDS, "WORDS", Enter_Ptr, is_normal ; ok
 623+ 833A             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 623+ 833A             >
 623+ 833A             >                // dummy db directives used to calculate length of namec
 623+ 833A 57 4F 52 44 >                db      "WORDS"
 623+ 833E 53          >
 623+ 833F             >len_NFA         defl    $ - temp_NFA
 623+ 833F             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 623+ 833A             >
 623+ 833A 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 623+ 833B 57 4F 52 44 >                db      "WORDS"               // name string in 7-bit ascii, but
 623+ 833F 53          >
 623+ 8340             >                org     $-1                 // alter last byte of Name just above to set
 623+ 833F D3          >                db      {b $} | END_BIT     // msb as name end
 623+ 8340             >
 623+ 8340 2D 83       >                dw      last_NFA            // Link to previous definition Name
 623+ 8342             >WORDS:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 623+ 8342 79 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 623+ 8344             >                else
 623+ 8344 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 623+ 8344             >                endif           ; ok        // for other definitions it "points" the correct handler
 623+ 8344             >                // Use of "; ok" to suppress "warning[fwdref]"
 623+ 8344             >
 623+ 8344             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 624+ 8344 A9 63 80 00                  dw      LIT, 128, OUT, STORE
 624+ 8348 05 6E A4 6B
 625+ 834C 27 6E 97 6B                  dw      CONTEXT, FETCH, FETCH
 625+ 8350 97 6B
 626+ 8352              Words_Begin:
 627+ 8352 04 6B B2 6B                  dw          DUP, CFETCH, LIT, $1F, AND_OP
 627+ 8356 A9 63 1F 00
 627+ 835A 33 69
 628+ 835C 05 6E 97 6B                  dw          OUT, FETCH, PLUS
 628+ 8360 24 6A
 629+ 8362 28 6D 4C 6F                  dw          CL, LESS, ZEQUAL
 629+ 8366 E5 69
 630+ 8368 2C 64                        dw          ZBRANCH
 631+ 836A 0A 00                        dw          Words_Endif - $
 632+ 836C 2A 66 F4 6C                  dw              CR, ZERO, OUT, STORE
 632+ 8370 05 6E A4 6B
 633+ 8374              Words_Endif:
 634+ 8374 04 6B 34 76                  dw          DUP, ID_DOT
 635+ 8378 49 70 1B 70                  dw          PFA, LFA, FETCH
 635+ 837C 97 6B
 636+ 837E 04 6B E5 69                  dw          DUP, ZEQUAL
 637+ 8382 44 67 45 69                  dw          QTERMINAL, OR_OP
 638+ 8386 2C 64                        dw      ZBRANCH
 639+ 8388 CA FF                        dw      Words_Begin - $
 640+ 838A CF 6A                        dw      DROP
 641+ 838C A3 69                        dw      EXIT
 642+ 838E
 643+ 838E              //  ______________________________________________________________________
 644+ 838E              //
 645+ 838E              // list         n --
 646+ 838E                              Colon_Def LIST, "LIST", is_normal
 646+ 838E             >                New_Def  LIST, "LIST", Enter_Ptr, is_normal ; ok
 646+ 838E             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 646+ 838E             >
 646+ 838E             >                // dummy db directives used to calculate length of namec
 646+ 838E 4C 49 53 54 >                db      "LIST"
 646+ 8392             >len_NFA         defl    $ - temp_NFA
 646+ 8392             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 646+ 838E             >
 646+ 838E 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 646+ 838F 4C 49 53 54 >                db      "LIST"               // name string in 7-bit ascii, but
 646+ 8393             >                org     $-1                 // alter last byte of Name just above to set
 646+ 8392 D4          >                db      {b $} | END_BIT     // msb as name end
 646+ 8393             >
 646+ 8393 3A 83       >                dw      last_NFA            // Link to previous definition Name
 646+ 8395             >LIST:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 646+ 8395 79 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 646+ 8397             >                else
 646+ 8397 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 646+ 8397             >                endif           ; ok        // for other definitions it "points" the correct handler
 646+ 8397             >                // Use of "; ok" to suppress "warning[fwdref]"
 646+ 8397             >
 646+ 8397             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 647+ 8397 AE 71 2A 66                  dw      DECIMAL, CR
 648+ 839B 04 6B 0E 6E                  dw      DUP, SCR, STORE
 648+ 839F A4 6B
 649+ 83A1 60 74                        dw      C_DOT_QUOTE
 650+ 83A3 05 53 63 72                  db      5, "Scr# "
 650+ 83A7 23 20
 651+ 83A9 19 83                        dw      DOT
 652+ 83AB 4C 6D F4 6C                  dw      LSCR, ZERO, C_DO
 652+ 83AF 86 64
 653+ 83B1              List_Loop:
 654+ 83B1 2A 66                        dw          CR
 655+ 83B3 90 64 0C 6D                  dw          I, THREE
 656+ 83B7 FA 82 D5 6F                  dw          DOT_R, SPACE
 657+ 83BB 90 64 0E 6E                  dw          I, SCR, FETCH, DOT_LINE
 657+ 83BF 97 6B C7 7A
 658+ 83C3 44 67                        dw          QTERMINAL
 659+ 83C5 2C 64                        dw          ZBRANCH
 660+ 83C7 06 00                        dw          List_Endif - $
 661+ 83C9 41 64                        dw              C_LEAVE
 662+ 83CB 06 00                        dw              List_Leave - $
 663+ 83CD              List_Endif:
 664+ 83CD 04 64                        dw      C_LOOP
 665+ 83CF E2 FF                        dw      List_Loop - $
 666+ 83D1              List_Leave:
 667+ 83D1 2A 66                        dw      CR
 668+ 83D3 A3 69                        dw      EXIT
 669+ 83D5
 670+ 83D5              //  ______________________________________________________________________
 671+ 83D5              //
 672+ 83D5              // index        n1 n2 --
 673+ 83D5                              Colon_Def INDEX, "INDEX", is_normal
 673+ 83D5             >                New_Def  INDEX, "INDEX", Enter_Ptr, is_normal ; ok
 673+ 83D5             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 673+ 83D5             >
 673+ 83D5             >                // dummy db directives used to calculate length of namec
 673+ 83D5 49 4E 44 45 >                db      "INDEX"
 673+ 83D9 58          >
 673+ 83DA             >len_NFA         defl    $ - temp_NFA
 673+ 83DA             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 673+ 83D5             >
 673+ 83D5 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 673+ 83D6 49 4E 44 45 >                db      "INDEX"               // name string in 7-bit ascii, but
 673+ 83DA 58          >
 673+ 83DB             >                org     $-1                 // alter last byte of Name just above to set
 673+ 83DA D8          >                db      {b $} | END_BIT     // msb as name end
 673+ 83DB             >
 673+ 83DB 8E 83       >                dw      last_NFA            // Link to previous definition Name
 673+ 83DD             >INDEX:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 673+ 83DD 79 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 673+ 83DF             >                else
 673+ 83DF ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 673+ 83DF             >                endif           ; ok        // for other definitions it "points" the correct handler
 673+ 83DF             >                // Use of "; ok" to suppress "warning[fwdref]"
 673+ 83DF             >
 673+ 83DF             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 674+ 83DF 45 6A F7 6A                  dw      ONE_PLUS, SWAP, C_DO
 674+ 83E3 86 64
 675+ 83E5              Index_Loop:
 676+ 83E5 2A 66 90 64                  dw          CR, I, THREE
 676+ 83E9 0C 6D
 677+ 83EB FA 82 D5 6F                  dw          DOT_R, SPACE
 678+ 83EF F4 6C 90 64                  dw          ZERO, I, DOT_LINE
 678+ 83F3 C7 7A
 679+ 83F5 44 67                        dw          QTERMINAL
 680+ 83F7 2C 64                        dw          ZBRANCH
 681+ 83F9 06 00                        dw          Index_Endif - $
 682+ 83FB 41 64                        dw              C_LEAVE
 683+ 83FD 06 00                        dw              Index_Leave - $
 684+ 83FF              Index_Endif:
 685+ 83FF 04 64                        dw      C_LOOP
 686+ 8401 E4 FF                        dw      Index_Loop - $
 687+ 8403              Index_Leave:
 688+ 8403 2A 66                        dw      CR
 689+ 8405 A3 69                        dw      EXIT
 690+ 8407
 691+ 8407              //  ______________________________________________________________________
 692+ 8407              //
 693+ 8407              // cls          --
 694+ 8407                              Colon_Def CLS, "CLS", is_normal
 694+ 8407             >                New_Def  CLS, "CLS", Enter_Ptr, is_normal ; ok
 694+ 8407             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 694+ 8407             >
 694+ 8407             >                // dummy db directives used to calculate length of namec
 694+ 8407 43 4C 53    >                db      "CLS"
 694+ 840A             >len_NFA         defl    $ - temp_NFA
 694+ 840A             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 694+ 8407             >
 694+ 8407 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 694+ 8408 43 4C 53    >                db      "CLS"               // name string in 7-bit ascii, but
 694+ 840B             >                org     $-1                 // alter last byte of Name just above to set
 694+ 840A D3          >                db      {b $} | END_BIT     // msb as name end
 694+ 840B             >
 694+ 840B D5 83       >                dw      last_NFA            // Link to previous definition Name
 694+ 840D             >CLS:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 694+ 840D 79 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 694+ 840F             >                else
 694+ 840F ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 694+ 840F             >                endif           ; ok        // for other definitions it "points" the correct handler
 694+ 840F             >                // Use of "; ok" to suppress "warning[fwdref]"
 694+ 840F             >
 694+ 840F             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 695+ 840F A9 63 0E 00                  dw      LIT, $0E, EMITC
 695+ 8413 13 66
 696+ 8415 A3 69                        dw      EXIT
 697+ 8417
 698+ 8417              //  ______________________________________________________________________
 699+ 8417              //
 700+ 8417              // splash       --
 701+ 8417                              Colon_Def SPLASH, "SPLASH", is_normal
 701+ 8417             >                New_Def  SPLASH, "SPLASH", Enter_Ptr, is_normal ; ok
 701+ 8417             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 701+ 8417             >
 701+ 8417             >                // dummy db directives used to calculate length of namec
 701+ 8417 53 50 4C 41 >                db      "SPLASH"
 701+ 841B 53 48       >
 701+ 841D             >len_NFA         defl    $ - temp_NFA
 701+ 841D             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 701+ 8417             >
 701+ 8417 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 701+ 8418 53 50 4C 41 >                db      "SPLASH"               // name string in 7-bit ascii, but
 701+ 841C 53 48       >
 701+ 841E             >                org     $-1                 // alter last byte of Name just above to set
 701+ 841D C8          >                db      {b $} | END_BIT     // msb as name end
 701+ 841E             >
 701+ 841E 07 84       >                dw      last_NFA            // Link to previous definition Name
 701+ 8420             >SPLASH:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 701+ 8420 79 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 701+ 8422             >                else
 701+ 8422 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 701+ 8422             >                endif           ; ok        // for other definitions it "points" the correct handler
 701+ 8422             >                // Use of "; ok" to suppress "warning[fwdref]"
 701+ 8422             >
 701+ 8422             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 702+ 8422 0D 84                        dw      CLS
 703+ 8424 60 74                        dw      C_DOT_QUOTE
 704+ 8426 5A                           db      90  // length of the following string CR included.
 705+ 8427 76 2D 46 6F                  db      "v-Forth 1.52 NextZXOS version", 13
 705+ 842B 72 74 68 20
 705+ 842F 31 2E 35 32
 705+ 8433 20 4E 65 78
 705+ 8437 74 5A 58 4F
 705+ 843B 53 20 76 65
 705+ 843F 72 73 69 6F
 705+ 8443 6E 0D
 706+ 8445 49 6E 64 69                  db      "Indirect Threaded - build 20230106", 13
 706+ 8449 72 65 63 74
 706+ 844D 20 54 68 72
 706+ 8451 65 61 64 65
 706+ 8455 64 20 2D 20
 706+ 8459 62 75 69 6C
 706+ 845D 64 20 32 30
 706+ 8461 32 33 30 31
 706+ 8465 30 36 0D
 707+ 8468 31 39 39 30                  db      "1990-2023 Matteo Vitturi", 13
 707+ 846C 2D 32 30 32
 707+ 8470 33 20 4D 61
 707+ 8474 74 74 65 6F
 707+ 8478 20 56 69 74
 707+ 847C 74 75 72 69
 707+ 8480 0D
 708+ 8481 A3 69                        dw      EXIT
 709+ 8483
 710+ 8483              //  ______________________________________________________________________
 711+ 8483              //
 712+ 8483              // video        --
 713+ 8483                              Colon_Def VIDEO, "VIDEO", is_normal
 713+ 8483             >                New_Def  VIDEO, "VIDEO", Enter_Ptr, is_normal ; ok
 713+ 8483             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 713+ 8483             >
 713+ 8483             >                // dummy db directives used to calculate length of namec
 713+ 8483 56 49 44 45 >                db      "VIDEO"
 713+ 8487 4F          >
 713+ 8488             >len_NFA         defl    $ - temp_NFA
 713+ 8488             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 713+ 8483             >
 713+ 8483 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 713+ 8484 56 49 44 45 >                db      "VIDEO"               // name string in 7-bit ascii, but
 713+ 8488 4F          >
 713+ 8489             >                org     $-1                 // alter last byte of Name just above to set
 713+ 8488 CF          >                db      {b $} | END_BIT     // msb as name end
 713+ 8489             >
 713+ 8489 17 84       >                dw      last_NFA            // Link to previous definition Name
 713+ 848B             >VIDEO:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 713+ 848B 79 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 713+ 848D             >                else
 713+ 848D ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 713+ 848D             >                endif           ; ok        // for other definitions it "points" the correct handler
 713+ 848D             >                // Use of "; ok" to suppress "warning[fwdref]"
 713+ 848D             >
 713+ 848D             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 714+ 848D 04 6D 04 6B                  dw      TWO, DUP, DEVICE, STORE
 714+ 8491 0F 7B A4 6B
 715+ 8495 85 67                        dw      SELECT
 716+ 8497 A3 69                        dw      EXIT
 717+ 8499
 718+ 8499              //  ______________________________________________________________________
 719+ 8499              //
 720+ 8499              // accept-      a n1 -- n2
 721+ 8499                              Colon_Def ACCEPT_N, "ACCEPT-", is_normal
 721+ 8499             >                New_Def  ACCEPT_N, "ACCEPT-", Enter_Ptr, is_normal ; ok
 721+ 8499             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 721+ 8499             >
 721+ 8499             >                // dummy db directives used to calculate length of namec
 721+ 8499 41 43 43 45 >                db      "ACCEPT-"
 721+ 849D 50 54 2D    >
 721+ 84A0             >len_NFA         defl    $ - temp_NFA
 721+ 84A0             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 721+ 8499             >
 721+ 8499 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 721+ 849A 41 43 43 45 >                db      "ACCEPT-"               // name string in 7-bit ascii, but
 721+ 849E 50 54 2D    >
 721+ 84A1             >                org     $-1                 // alter last byte of Name just above to set
 721+ 84A0 AD          >                db      {b $} | END_BIT     // msb as name end
 721+ 84A1             >
 721+ 84A1 83 84       >                dw      last_NFA            // Link to previous definition Name
 721+ 84A3             >ACCEPT_N:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 721+ 84A3 79 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 721+ 84A5             >                else
 721+ 84A5 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 721+ 84A5             >                endif           ; ok        // for other definitions it "points" the correct handler
 721+ 84A5             >                // Use of "; ok" to suppress "warning[fwdref]"
 721+ 84A5             >
 721+ 84A5             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 722+ 84A5 B6 69                        dw      TO_R
 723+ 84A7 F4 6C                        dw      ZERO
 724+ 84A9 F7 6A                        dw      SWAP
 725+ 84AB 04 6B                        dw      DUP
 726+ 84AD CA 69                        dw      R_TO
 727+ 84AF 24 6A                        dw      PLUS
 728+ 84B1 F7 6A                        dw      SWAP
 729+ 84B3 86 64                        dw      C_DO
 730+ 84B5              AcceptN_Loop:
 731+ 84B5 49 7B                        dw          MMU7_FETCH
 732+ 84B7 60 67                        dw          INKEY
 733+ 84B9 F7 6A 5B 7B                  dw          SWAP, MMU7_STORE
 734+ 84BD 04 6B E5 69                  dw          DUP, ZEQUAL
 735+ 84C1 2C 64                        dw          ZBRANCH
 736+ 84C3 06 00                        dw          AcceptN_Endif_1 - $
 737+ 84C5              //              dw              VIDEO, QUIT
 738+ 84C5 41 64                        dw              C_LEAVE
 739+ 84C7 3A 00                        dw              AcceptN_Leave - $
 740+ 84C9
 741+ 84C9              AcceptN_Endif_1:
 742+ 84C9 04 6B A9 63                  dw          DUP, LIT, 13, EQUALS
 742+ 84CD 0D 00 2F 6F
 743+ 84D1 2C 64                        dw          ZBRANCH
 744+ 84D3 06 00                        dw          AcceptN_Endif_2 - $
 745+ 84D5 CF 6A F4 6C                  dw              DROP, ZERO
 746+ 84D9              AcceptN_Endif_2:
 747+ 84D9 04 6B A9 63                  dw          DUP, LIT, 10, EQUALS
 747+ 84DD 0A 00 2F 6F
 748+ 84E1 2C 64                        dw          ZBRANCH
 749+ 84E3 06 00                        dw          AcceptN_Endif_3 - $
 750+ 84E5 CF 6A F4 6C                  dw              DROP, ZERO
 751+ 84E9              AcceptN_Endif_3:
 752+ 84E9 90 64 C0 6B                  dw          I, CSTORE, ONE_PLUS
 752+ 84ED 45 6A
 753+ 84EF
 754+ 84EF 90 64 B2 6B                  dw          I, CFETCH, ZEQUAL   //      i 0= if
 754+ 84F3 E5 69
 755+ 84F5 2C 64                        dw          ZBRANCH
 756+ 84F7 06 00                        dw              AcceptN_Endif_4 - $
 757+ 84F9 41 64                        dw                  C_LEAVE     //              leave
 758+ 84FB 06 00                        dw                  AcceptN_Leave - $
 759+ 84FD              AcceptN_Endif_4:                                 //      endif
 760+ 84FD
 761+ 84FD 04 64                        dw      C_LOOP
 762+ 84FF B6 FF                        dw      AcceptN_Loop -$
 763+ 8501              AcceptN_Leave:
 764+ 8501 A3 69                        dw      EXIT
 765+ 8503
 766+ 8503              //  ______________________________________________________________________
 767+ 8503              //
 768+ 8503              // load-        n --
 769+ 8503              // Provided that a stream n is OPEN# via the standart BASIC
 770+ 8503              // it accepts text from stream #n to the normal INTERPRET
 771+ 8503              // up to now, text-file must end with QUIT
 772+ 8503                              Colon_Def LOAD_N, "LOAD-", is_normal
 772+ 8503             >                New_Def  LOAD_N, "LOAD-", Enter_Ptr, is_normal ; ok
 772+ 8503             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 772+ 8503             >
 772+ 8503             >                // dummy db directives used to calculate length of namec
 772+ 8503 4C 4F 41 44 >                db      "LOAD-"
 772+ 8507 2D          >
 772+ 8508             >len_NFA         defl    $ - temp_NFA
 772+ 8508             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 772+ 8503             >
 772+ 8503 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 772+ 8504 4C 4F 41 44 >                db      "LOAD-"               // name string in 7-bit ascii, but
 772+ 8508 2D          >
 772+ 8509             >                org     $-1                 // alter last byte of Name just above to set
 772+ 8508 AD          >                db      {b $} | END_BIT     // msb as name end
 772+ 8509             >
 772+ 8509 99 84       >                dw      last_NFA            // Link to previous definition Name
 772+ 850B             >LOAD_N:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 772+ 850B 79 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 772+ 850D             >                else
 772+ 850D ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 772+ 850D             >                endif           ; ok        // for other definitions it "points" the correct handler
 772+ 850D             >                // Use of "; ok" to suppress "warning[fwdref]"
 772+ 850D             >
 772+ 850D             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 773+ 850D AA 6E A4 6B                  dw      SOURCE_ID, STORE
 774+ 8511              Load_N_Begin:
 775+ 8511 87 6D 97 6B                  dw          TIB, FETCH
 776+ 8515 04 6B A9 63                  dw          DUP, LIT, 80
 776+ 8519 50 00
 777+ 851B 65 6B D9 73                  dw          TWO_DUP, BLANK
 778+ 851F AA 6E 97 6B                  dw          SOURCE_ID, FETCH
 779+ 8523 89 79 04 6B                  dw          ABS_OP, DUP, DEVICE, STORE
 779+ 8527 0F 7B A4 6B
 780+ 852B 85 67                        dw          SELECT
 781+ 852D A3 84                        dw          ACCEPT_N
 782+ 852F 8B 84                        dw          VIDEO
 783+ 8531 45 6B                        dw          TWO_DROP
 784+ 8533 F4 6C F3 6D                  dw          ZERO, BLK, STORE
 784+ 8537 A4 6B
 785+ 8539 F4 6C FC 6D                  dw          ZERO, TO_IN, STORE
 785+ 853D A4 6B
 786+ 853F B1 77                        dw          INTERPRET
 787+ 8541 44 67                        dw          QTERMINAL
 788+ 8543 2C 64                        dw      ZBRANCH
 789+ 8545 CC FF                        dw      Load_N_Begin - $
 790+ 8547 A3 69                        dw      EXIT
 791+ 8549
 792+ 8549              //  ______________________________________________________________________
 793+ 8549              //
 794+ 8549              // load         n --
 795+ 8549              // if n is positive, it loads screen #n (as usual)
 796+ 8549              // if n is negative, it connects stream #n to the normal INTERPRET
 797+ 8549              // this second way is useful if you want to load any kind of file
 798+ 8549              // provied that it is OPEN# the usual BASIC way.
 799+ 8549                              Colon_Def LOAD, "LOAD", is_normal
 799+ 8549             >                New_Def  LOAD, "LOAD", Enter_Ptr, is_normal ; ok
 799+ 8549             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 799+ 8549             >
 799+ 8549             >                // dummy db directives used to calculate length of namec
 799+ 8549 4C 4F 41 44 >                db      "LOAD"
 799+ 854D             >len_NFA         defl    $ - temp_NFA
 799+ 854D             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 799+ 8549             >
 799+ 8549 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 799+ 854A 4C 4F 41 44 >                db      "LOAD"               // name string in 7-bit ascii, but
 799+ 854E             >                org     $-1                 // alter last byte of Name just above to set
 799+ 854D C4          >                db      {b $} | END_BIT     // msb as name end
 799+ 854E             >
 799+ 854E 03 85       >                dw      last_NFA            // Link to previous definition Name
 799+ 8550             >LOAD:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 799+ 8550 79 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 799+ 8552             >                else
 799+ 8552 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 799+ 8552             >                endif           ; ok        // for other definitions it "points" the correct handler
 799+ 8552             >                // Use of "; ok" to suppress "warning[fwdref]"
 799+ 8552             >
 799+ 8552             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 800+ 8552 04 6B 00 6A                  dw      DUP, ZLESS
 801+ 8556 2C 64                        dw      ZBRANCH
 802+ 8558 08 00                        dw      Load_Else - $
 803+ 855A 0B 85                        dw          LOAD_N
 804+ 855C 15 64                        dw      BRANCH
 805+ 855E 04 00                        dw      Load_Endif - $
 806+ 8560              Load_Else:
 807+ 8560 28 81                        dw          LOAD_P
 808+ 8562              Load_Endif:
 809+ 8562 A3 69                        dw      EXIT
 810+ 8564
 811+ 8564
 812+ 8564              //  ______________________________________________________________________
 813+ 8564              //
 814+ 8564              // autoexec     --
 815+ 8564              // this word is called the first time the Forth system boot to
 816+ 8564              // load Screen# 1. Once called it patches itself to prevent furhter runs.
 817+ 8564                              Colon_Def AUTOEXEC, "AUTOEXEC", is_normal
 817+ 8564             >                New_Def  AUTOEXEC, "AUTOEXEC", Enter_Ptr, is_normal ; ok
 817+ 8564             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 817+ 8564             >
 817+ 8564             >                // dummy db directives used to calculate length of namec
 817+ 8564 41 55 54 4F >                db      "AUTOEXEC"
 817+ 8568 45 58 45 43 >
 817+ 856C             >len_NFA         defl    $ - temp_NFA
 817+ 856C             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 817+ 8564             >
 817+ 8564 88          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 817+ 8565 41 55 54 4F >                db      "AUTOEXEC"               // name string in 7-bit ascii, but
 817+ 8569 45 58 45 43 >
 817+ 856D             >                org     $-1                 // alter last byte of Name just above to set
 817+ 856C C3          >                db      {b $} | END_BIT     // msb as name end
 817+ 856D             >
 817+ 856D 49 85       >                dw      last_NFA            // Link to previous definition Name
 817+ 856F             >AUTOEXEC:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 817+ 856F 79 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 817+ 8571             >                else
 817+ 8571 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 817+ 8571             >                endif           ; ok        // for other definitions it "points" the correct handler
 817+ 8571             >                // Use of "; ok" to suppress "warning[fwdref]"
 817+ 8571             >
 817+ 8571             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 818+ 8571 A9 63 0B 00                  dw      LIT, 11
 819+ 8575 A9 63 A1 6C                  dw      LIT, NOOP
 820+ 8579 A9 63 B8 78                  dw      LIT, Autoexec_Ptr
 821+ 857D A4 6B                        dw      STORE
 822+ 857F 50 85                        dw      LOAD
 823+ 8581 69 78                        dw      QUIT
 824+ 8583 A3 69                        dw      EXIT
 825+ 8585
 826+ 8585
 827+ 8585              //  ______________________________________________________________________
 828+ 8585              //
 829+ 8585              // bye     --
 830+ 8585              //
 831+ 8585                              Colon_Def BYE, "BYE", is_normal
 831+ 8585             >                New_Def  BYE, "BYE", Enter_Ptr, is_normal ; ok
 831+ 8585             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 831+ 8585             >
 831+ 8585             >                // dummy db directives used to calculate length of namec
 831+ 8585 42 59 45    >                db      "BYE"
 831+ 8588             >len_NFA         defl    $ - temp_NFA
 831+ 8588             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 831+ 8585             >
 831+ 8585 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 831+ 8586 42 59 45    >                db      "BYE"               // name string in 7-bit ascii, but
 831+ 8589             >                org     $-1                 // alter last byte of Name just above to set
 831+ 8588 C5          >                db      {b $} | END_BIT     // msb as name end
 831+ 8589             >
 831+ 8589 64 85       >                dw      last_NFA            // Link to previous definition Name
 831+ 858B             >BYE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 831+ 858B 79 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 831+ 858D             >                else
 831+ 858D ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 831+ 858D             >                endif           ; ok        // for other definitions it "points" the correct handler
 831+ 858D             >                // Use of "; ok" to suppress "warning[fwdref]"
 831+ 858D             >
 831+ 858D             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 832+ 858D C6 7D                        dw      FLUSH
 833+ 858F F9 7C                        dw      EMPTY_BUFFERS
 834+ 8591 9D 7B 97 6B                  dw      BLK_FH, FETCH, F_CLOSE, DROP
 834+ 8595 CB 67 CF 6A
 835+ 8599 F4 6C 5A 6D                  dw      ZERO, PLUS_ORIGIN
 836+ 859D 4E 79                        dw      BASIC
 837+ 859F
 838+ 859F              //  ______________________________________________________________________
 839+ 859F              //
 840+ 859F              // invv     --
 841+ 859F              //
 842+ 859F              //              Colon_Def INVV, "INVV", is_normal
 843+ 859F              //              dw      LIT, 20, EMITC, ONE, EMITC
 844+ 859F              //              dw      EXIT
 845+ 859F
 846+ 859F              //  ______________________________________________________________________
 847+ 859F              //
 848+ 859F              // truv     --
 849+ 859F              //
 850+ 859F              //              Colon_Def TRUV, "TRUV", is_normal
 851+ 859F              //              dw      LIT, 20, EMITC, ZERO, EMITC
 852+ 859F              //              dw      EXIT
 853+ 859F
 854+ 859F              //  ______________________________________________________________________
 855+ 859F              //
 856+ 859F              // mark     --
 857+ 859F              //
 858+ 859F              //              Colon_Def MARK, "MARK", is_normal
 859+ 859F              //              dw      INVV, TYPE, TRUV
 860+ 859F              //              dw      EXIT
 861+ 859F
 862+ 859F              //  ______________________________________________________________________
 863+ 859F              //
 864+ 859F              // back     --
 865+ 859F              //
 866+ 859F                              Colon_Def BACK, "BACK", is_normal
 866+ 859F             >                New_Def  BACK, "BACK", Enter_Ptr, is_normal ; ok
 866+ 859F             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 866+ 859F             >
 866+ 859F             >                // dummy db directives used to calculate length of namec
 866+ 859F 42 41 43 4B >                db      "BACK"
 866+ 85A3             >len_NFA         defl    $ - temp_NFA
 866+ 85A3             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 866+ 859F             >
 866+ 859F 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 866+ 85A0 42 41 43 4B >                db      "BACK"               // name string in 7-bit ascii, but
 866+ 85A4             >                org     $-1                 // alter last byte of Name just above to set
 866+ 85A3 CB          >                db      {b $} | END_BIT     // msb as name end
 866+ 85A4             >
 866+ 85A4 85 85       >                dw      last_NFA            // Link to previous definition Name
 866+ 85A6             >BACK:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 866+ 85A6 79 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 866+ 85A8             >                else
 866+ 85A8 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 866+ 85A8             >                endif           ; ok        // for other definitions it "points" the correct handler
 866+ 85A8             >                // Use of "; ok" to suppress "warning[fwdref]"
 866+ 85A8             >
 866+ 85A8             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 867+ 85A8 D3 6E 21 6F                  dw      HERE, SUBTRACT, COMMA
 867+ 85AC EF 6E
 868+ 85AE A3 69                        dw      EXIT
 869+ 85B0
 870+ 85B0              //  ______________________________________________________________________
 871+ 85B0              //
 872+ 85B0              // if          ( -- a 2 ) \ compile-time
 873+ 85B0              // IF ... THEN
 874+ 85B0              // IF ... ELSE ... ENDIF
 875+ 85B0                              Colon_Def IF, "IF", is_immediate
 875+ 85B0             >                New_Def  IF, "IF", Enter_Ptr, is_immediate ; ok
 875+ 85B0             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 875+ 85B0             >
 875+ 85B0             >                // dummy db directives used to calculate length of namec
 875+ 85B0 49 46       >                db      "IF"
 875+ 85B2             >len_NFA         defl    $ - temp_NFA
 875+ 85B2             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 875+ 85B0             >
 875+ 85B0 C2          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 875+ 85B1 49 46       >                db      "IF"               // name string in 7-bit ascii, but
 875+ 85B3             >                org     $-1                 // alter last byte of Name just above to set
 875+ 85B2 C6          >                db      {b $} | END_BIT     // msb as name end
 875+ 85B3             >
 875+ 85B3 9F 85       >                dw      last_NFA            // Link to previous definition Name
 875+ 85B5             >IF:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 875+ 85B5 79 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 875+ 85B7             >                else
 875+ 85B7 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 875+ 85B7             >                endif           ; ok        // for other definitions it "points" the correct handler
 875+ 85B7             >                // Use of "; ok" to suppress "warning[fwdref]"
 875+ 85B7             >
 875+ 85B7             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 876+ 85B7 22 71 2C 64                  dw      COMPILE, ZBRANCH
 877+ 85BB D3 6E F4 6C                  dw      HERE, ZERO, COMMA
 877+ 85BF EF 6E
 878+ 85C1 04 6D                        dw      TWO
 879+ 85C3 A3 69                        dw      EXIT
 880+ 85C5
 881+ 85C5              //  ______________________________________________________________________
 882+ 85C5              //
 883+ 85C5              // then        ( a 2 -- ) \ compile-time
 884+ 85C5              //
 885+ 85C5                              Colon_Def THEN, "THEN", is_immediate
 885+ 85C5             >                New_Def  THEN, "THEN", Enter_Ptr, is_immediate ; ok
 885+ 85C5             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 885+ 85C5             >
 885+ 85C5             >                // dummy db directives used to calculate length of namec
 885+ 85C5 54 48 45 4E >                db      "THEN"
 885+ 85C9             >len_NFA         defl    $ - temp_NFA
 885+ 85C9             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 885+ 85C5             >
 885+ 85C5 C4          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 885+ 85C6 54 48 45 4E >                db      "THEN"               // name string in 7-bit ascii, but
 885+ 85CA             >                org     $-1                 // alter last byte of Name just above to set
 885+ 85C9 CE          >                db      {b $} | END_BIT     // msb as name end
 885+ 85CA             >
 885+ 85CA B0 85       >                dw      last_NFA            // Link to previous definition Name
 885+ 85CC             >THEN:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 885+ 85CC 79 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 885+ 85CE             >                else
 885+ 85CE ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 885+ 85CE             >                endif           ; ok        // for other definitions it "points" the correct handler
 885+ 85CE             >                // Use of "; ok" to suppress "warning[fwdref]"
 885+ 85CE             >
 885+ 85CE             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 886+ 85CE A9 70                        dw      QCOMP
 887+ 85D0 04 6D D8 70                  dw      TWO, QPAIRS
 888+ 85D4 D3 6E BF 6A                  dw      HERE, OVER, SUBTRACT, SWAP, STORE
 888+ 85D8 21 6F F7 6A
 888+ 85DC A4 6B
 889+ 85DE A3 69                        dw      EXIT
 890+ 85E0
 891+ 85E0              //  ______________________________________________________________________
 892+ 85E0              //
 893+ 85E0              // endif       ( a 2 -- ) \ compile-time
 894+ 85E0              //
 895+ 85E0                              Colon_Def ENDIF, "ENDIF", is_immediate
 895+ 85E0             >                New_Def  ENDIF, "ENDIF", Enter_Ptr, is_immediate ; ok
 895+ 85E0             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 895+ 85E0             >
 895+ 85E0             >                // dummy db directives used to calculate length of namec
 895+ 85E0 45 4E 44 49 >                db      "ENDIF"
 895+ 85E4 46          >
 895+ 85E5             >len_NFA         defl    $ - temp_NFA
 895+ 85E5             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 895+ 85E0             >
 895+ 85E0 C5          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 895+ 85E1 45 4E 44 49 >                db      "ENDIF"               // name string in 7-bit ascii, but
 895+ 85E5 46          >
 895+ 85E6             >                org     $-1                 // alter last byte of Name just above to set
 895+ 85E5 C6          >                db      {b $} | END_BIT     // msb as name end
 895+ 85E6             >
 895+ 85E6 C5 85       >                dw      last_NFA            // Link to previous definition Name
 895+ 85E8             >ENDIF:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 895+ 85E8 79 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 895+ 85EA             >                else
 895+ 85EA ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 895+ 85EA             >                endif           ; ok        // for other definitions it "points" the correct handler
 895+ 85EA             >                // Use of "; ok" to suppress "warning[fwdref]"
 895+ 85EA             >
 895+ 85EA             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 896+ 85EA CC 85                        dw      THEN
 897+ 85EC A3 69                        dw      EXIT
 898+ 85EE
 899+ 85EE              //  ______________________________________________________________________
 900+ 85EE              //
 901+ 85EE              // else        ( a1 2 -- a2 2 ) \ compile-time
 902+ 85EE              //
 903+ 85EE                              Colon_Def ELSE, "ELSE", is_immediate
 903+ 85EE             >                New_Def  ELSE, "ELSE", Enter_Ptr, is_immediate ; ok
 903+ 85EE             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 903+ 85EE             >
 903+ 85EE             >                // dummy db directives used to calculate length of namec
 903+ 85EE 45 4C 53 45 >                db      "ELSE"
 903+ 85F2             >len_NFA         defl    $ - temp_NFA
 903+ 85F2             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 903+ 85EE             >
 903+ 85EE C4          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 903+ 85EF 45 4C 53 45 >                db      "ELSE"               // name string in 7-bit ascii, but
 903+ 85F3             >                org     $-1                 // alter last byte of Name just above to set
 903+ 85F2 C5          >                db      {b $} | END_BIT     // msb as name end
 903+ 85F3             >
 903+ 85F3 E0 85       >                dw      last_NFA            // Link to previous definition Name
 903+ 85F5             >ELSE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 903+ 85F5 79 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 903+ 85F7             >                else
 903+ 85F7 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 903+ 85F7             >                endif           ; ok        // for other definitions it "points" the correct handler
 903+ 85F7             >                // Use of "; ok" to suppress "warning[fwdref]"
 903+ 85F7             >
 903+ 85F7             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 904+ 85F7 A9 70                        dw      QCOMP
 905+ 85F9 04 6D D8 70                  dw      TWO, QPAIRS
 906+ 85FD 22 71 15 64                  dw      COMPILE, BRANCH
 907+ 8601 D3 6E F4 6C                  dw      HERE, ZERO, COMMA
 907+ 8605 EF 6E
 908+ 8607 F7 6A 04 6D                  dw      SWAP, TWO, THEN
 908+ 860B CC 85
 909+ 860D 04 6D                        dw      TWO
 910+ 860F A3 69                        dw      EXIT
 911+ 8611
 912+ 8611              //  ______________________________________________________________________
 913+ 8611              //
 914+ 8611              // begin        ( -- a 1 ) \ compile-time
 915+ 8611              // BEGIN ... AGAIN
 916+ 8611              // BEGIN ... f UNTIL
 917+ 8611              // BEGIN ... f WHILE ... REPEAT
 918+ 8611                              Colon_Def BEGIN, "BEGIN", is_immediate
 918+ 8611             >                New_Def  BEGIN, "BEGIN", Enter_Ptr, is_immediate ; ok
 918+ 8611             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 918+ 8611             >
 918+ 8611             >                // dummy db directives used to calculate length of namec
 918+ 8611 42 45 47 49 >                db      "BEGIN"
 918+ 8615 4E          >
 918+ 8616             >len_NFA         defl    $ - temp_NFA
 918+ 8616             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 918+ 8611             >
 918+ 8611 C5          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 918+ 8612 42 45 47 49 >                db      "BEGIN"               // name string in 7-bit ascii, but
 918+ 8616 4E          >
 918+ 8617             >                org     $-1                 // alter last byte of Name just above to set
 918+ 8616 CE          >                db      {b $} | END_BIT     // msb as name end
 918+ 8617             >
 918+ 8617 EE 85       >                dw      last_NFA            // Link to previous definition Name
 918+ 8619             >BEGIN:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 918+ 8619 79 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 918+ 861B             >                else
 918+ 861B ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 918+ 861B             >                endif           ; ok        // for other definitions it "points" the correct handler
 918+ 861B             >                // Use of "; ok" to suppress "warning[fwdref]"
 918+ 861B             >
 918+ 861B             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 919+ 861B A9 70                        dw      QCOMP
 920+ 861D D3 6E                        dw      HERE
 921+ 861F 04 6D                        dw      TWO
 922+ 8621 A3 69                        dw      EXIT
 923+ 8623
 924+ 8623              //  ______________________________________________________________________
 925+ 8623              //
 926+ 8623              // again        ( a 1 -- ) \ compile-time
 927+ 8623                              Colon_Def AGAIN, "AGAIN", is_immediate
 927+ 8623             >                New_Def  AGAIN, "AGAIN", Enter_Ptr, is_immediate ; ok
 927+ 8623             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 927+ 8623             >
 927+ 8623             >                // dummy db directives used to calculate length of namec
 927+ 8623 41 47 41 49 >                db      "AGAIN"
 927+ 8627 4E          >
 927+ 8628             >len_NFA         defl    $ - temp_NFA
 927+ 8628             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 927+ 8623             >
 927+ 8623 C5          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 927+ 8624 41 47 41 49 >                db      "AGAIN"               // name string in 7-bit ascii, but
 927+ 8628 4E          >
 927+ 8629             >                org     $-1                 // alter last byte of Name just above to set
 927+ 8628 CE          >                db      {b $} | END_BIT     // msb as name end
 927+ 8629             >
 927+ 8629 11 86       >                dw      last_NFA            // Link to previous definition Name
 927+ 862B             >AGAIN:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 927+ 862B 79 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 927+ 862D             >                else
 927+ 862D ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 927+ 862D             >                endif           ; ok        // for other definitions it "points" the correct handler
 927+ 862D             >                // Use of "; ok" to suppress "warning[fwdref]"
 927+ 862D             >
 927+ 862D             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 928+ 862D A9 70                        dw      QCOMP
 929+ 862F 04 6D D8 70                  dw      TWO, QPAIRS
 930+ 8633 22 71 15 64                  dw      COMPILE, BRANCH
 931+ 8637 A6 85                        dw      BACK
 932+ 8639 A3 69                        dw      EXIT
 933+ 863B
 934+ 863B              //  ______________________________________________________________________
 935+ 863B              //
 936+ 863B              // until        ( a 1 -- ) \ compile-time
 937+ 863B                              Colon_Def UNTIL, "UNTIL", is_immediate
 937+ 863B             >                New_Def  UNTIL, "UNTIL", Enter_Ptr, is_immediate ; ok
 937+ 863B             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 937+ 863B             >
 937+ 863B             >                // dummy db directives used to calculate length of namec
 937+ 863B 55 4E 54 49 >                db      "UNTIL"
 937+ 863F 4C          >
 937+ 8640             >len_NFA         defl    $ - temp_NFA
 937+ 8640             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 937+ 863B             >
 937+ 863B C5          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 937+ 863C 55 4E 54 49 >                db      "UNTIL"               // name string in 7-bit ascii, but
 937+ 8640 4C          >
 937+ 8641             >                org     $-1                 // alter last byte of Name just above to set
 937+ 8640 CC          >                db      {b $} | END_BIT     // msb as name end
 937+ 8641             >
 937+ 8641 23 86       >                dw      last_NFA            // Link to previous definition Name
 937+ 8643             >UNTIL:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 937+ 8643 79 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 937+ 8645             >                else
 937+ 8645 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 937+ 8645             >                endif           ; ok        // for other definitions it "points" the correct handler
 937+ 8645             >                // Use of "; ok" to suppress "warning[fwdref]"
 937+ 8645             >
 937+ 8645             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 938+ 8645 A9 70                        dw      QCOMP
 939+ 8647 04 6D D8 70                  dw      TWO, QPAIRS
 940+ 864B 22 71 2C 64                  dw      COMPILE, ZBRANCH
 941+ 864F A6 85                        dw      BACK
 942+ 8651 A3 69                        dw      EXIT
 943+ 8653
 944+ 8653              //  ______________________________________________________________________
 945+ 8653              //
 946+ 8653              // end          ( a 1 -- ) \ compile-time
 947+ 8653                              Colon_Def END, "END", is_immediate
 947+ 8653             >                New_Def  END, "END", Enter_Ptr, is_immediate ; ok
 947+ 8653             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 947+ 8653             >
 947+ 8653             >                // dummy db directives used to calculate length of namec
 947+ 8653 45 4E 44    >                db      "END"
 947+ 8656             >len_NFA         defl    $ - temp_NFA
 947+ 8656             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 947+ 8653             >
 947+ 8653 C3          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 947+ 8654 45 4E 44    >                db      "END"               // name string in 7-bit ascii, but
 947+ 8657             >                org     $-1                 // alter last byte of Name just above to set
 947+ 8656 C4          >                db      {b $} | END_BIT     // msb as name end
 947+ 8657             >
 947+ 8657 3B 86       >                dw      last_NFA            // Link to previous definition Name
 947+ 8659             >END:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 947+ 8659 79 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 947+ 865B             >                else
 947+ 865B ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 947+ 865B             >                endif           ; ok        // for other definitions it "points" the correct handler
 947+ 865B             >                // Use of "; ok" to suppress "warning[fwdref]"
 947+ 865B             >
 947+ 865B             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 948+ 865B 43 86                        dw      UNTIL
 949+ 865D A3 69                        dw      EXIT
 950+ 865F
 951+ 865F              //  ______________________________________________________________________
 952+ 865F              //
 953+ 865F              // while        ( a1 1 -- a1 1 a2 4 ) \ compile-time
 954+ 865F                              Colon_Def WHILE, "WHILE", is_immediate
 954+ 865F             >                New_Def  WHILE, "WHILE", Enter_Ptr, is_immediate ; ok
 954+ 865F             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 954+ 865F             >
 954+ 865F             >                // dummy db directives used to calculate length of namec
 954+ 865F 57 48 49 4C >                db      "WHILE"
 954+ 8663 45          >
 954+ 8664             >len_NFA         defl    $ - temp_NFA
 954+ 8664             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 954+ 865F             >
 954+ 865F C5          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 954+ 8660 57 48 49 4C >                db      "WHILE"               // name string in 7-bit ascii, but
 954+ 8664 45          >
 954+ 8665             >                org     $-1                 // alter last byte of Name just above to set
 954+ 8664 C5          >                db      {b $} | END_BIT     // msb as name end
 954+ 8665             >
 954+ 8665 53 86       >                dw      last_NFA            // Link to previous definition Name
 954+ 8667             >WHILE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 954+ 8667 79 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 954+ 8669             >                else
 954+ 8669 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 954+ 8669             >                endif           ; ok        // for other definitions it "points" the correct handler
 954+ 8669             >                // Use of "; ok" to suppress "warning[fwdref]"
 954+ 8669             >
 954+ 8669             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 955+ 8669 B5 85                        dw      IF
 956+ 866B              //              dw      TWO_PLUS // ( that is 4 )
 957+ 866B 53 6B                        dw      TWO_SWAP
 958+ 866D A3 69                        dw      EXIT
 959+ 866F
 960+ 866F              //  ______________________________________________________________________
 961+ 866F              //
 962+ 866F              // repeat       ( a1 1 a2 4 -- ) \ compile-time
 963+ 866F                              Colon_Def REPEAT, "REPEAT", is_immediate
 963+ 866F             >                New_Def  REPEAT, "REPEAT", Enter_Ptr, is_immediate ; ok
 963+ 866F             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 963+ 866F             >
 963+ 866F             >                // dummy db directives used to calculate length of namec
 963+ 866F 52 45 50 45 >                db      "REPEAT"
 963+ 8673 41 54       >
 963+ 8675             >len_NFA         defl    $ - temp_NFA
 963+ 8675             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 963+ 866F             >
 963+ 866F C6          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 963+ 8670 52 45 50 45 >                db      "REPEAT"               // name string in 7-bit ascii, but
 963+ 8674 41 54       >
 963+ 8676             >                org     $-1                 // alter last byte of Name just above to set
 963+ 8675 D4          >                db      {b $} | END_BIT     // msb as name end
 963+ 8676             >
 963+ 8676 5F 86       >                dw      last_NFA            // Link to previous definition Name
 963+ 8678             >REPEAT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 963+ 8678 79 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 963+ 867A             >                else
 963+ 867A ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 963+ 867A             >                endif           ; ok        // for other definitions it "points" the correct handler
 963+ 867A             >                // Use of "; ok" to suppress "warning[fwdref]"
 963+ 867A             >
 963+ 867A             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 964+ 867A 2B 86                        dw      AGAIN
 965+ 867C              //              dw      TWO_MINUS
 966+ 867C CC 85                        dw      THEN
 967+ 867E A3 69                        dw      EXIT
 968+ 8680
 969+ 8680              //  ______________________________________________________________________
 970+ 8680              //
 971+ 8680              // ?do-
 972+ 8680              // special version of "BACK" used by ?DO and LOOP
 973+ 8680                              Colon_Def C_DO_BACK, "?DO-", is_normal
 973+ 8680             >                New_Def  C_DO_BACK, "?DO-", Enter_Ptr, is_normal ; ok
 973+ 8680             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 973+ 8680             >
 973+ 8680             >                // dummy db directives used to calculate length of namec
 973+ 8680 3F 44 4F 2D >                db      "?DO-"
 973+ 8684             >len_NFA         defl    $ - temp_NFA
 973+ 8684             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 973+ 8680             >
 973+ 8680 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 973+ 8681 3F 44 4F 2D >                db      "?DO-"               // name string in 7-bit ascii, but
 973+ 8685             >                org     $-1                 // alter last byte of Name just above to set
 973+ 8684 AD          >                db      {b $} | END_BIT     // msb as name end
 973+ 8685             >
 973+ 8685 6F 86       >                dw      last_NFA            // Link to previous definition Name
 973+ 8687             >C_DO_BACK:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 973+ 8687 79 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 973+ 8689             >                else
 973+ 8689 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 973+ 8689             >                endif           ; ok        // for other definitions it "points" the correct handler
 973+ 8689             >                // Use of "; ok" to suppress "warning[fwdref]"
 973+ 8689             >
 973+ 8689             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 974+ 8689 A6 85                        dw      BACK
 975+ 868B              CDoBack_Begin:
 976+ 868B 6B 69 64 6E                  dw      SPFETCH, CSP, FETCH, SUBTRACT
 976+ 868F 97 6B 21 6F
 977+ 8693 2C 64                        dw      ZBRANCH
 978+ 8695 0A 00                        dw      CDoBack_While - $
 979+ 8697 5D 6A CC 85                  dw          TWO_PLUS, THEN
 980+ 869B 15 64                        dw      BRANCH
 981+ 869D EE FF                        dw      CDoBack_Begin - $
 982+ 869F              CDoBack_While:
 983+ 869F EB 70 64 6E                  dw      QCSP, CSP, STORE
 983+ 86A3 A4 6B
 984+ 86A5 A3 69                        dw      EXIT
 985+ 86A7
 986+ 86A7              //  ______________________________________________________________________
 987+ 86A7              //
 988+ 86A7              // do
 989+ 86A7              // DO  ... LOOP
 990+ 86A7              // DO  ... n +LOOP
 991+ 86A7              // ?DO ... LOOP
 992+ 86A7              // ?DO ... n +LOOP
 993+ 86A7                              Colon_Def DO, "DO", is_immediate
 993+ 86A7             >                New_Def  DO, "DO", Enter_Ptr, is_immediate ; ok
 993+ 86A7             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 993+ 86A7             >
 993+ 86A7             >                // dummy db directives used to calculate length of namec
 993+ 86A7 44 4F       >                db      "DO"
 993+ 86A9             >len_NFA         defl    $ - temp_NFA
 993+ 86A9             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 993+ 86A7             >
 993+ 86A7 C2          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 993+ 86A8 44 4F       >                db      "DO"               // name string in 7-bit ascii, but
 993+ 86AA             >                org     $-1                 // alter last byte of Name just above to set
 993+ 86A9 CF          >                db      {b $} | END_BIT     // msb as name end
 993+ 86AA             >
 993+ 86AA 80 86       >                dw      last_NFA            // Link to previous definition Name
 993+ 86AC             >DO:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 993+ 86AC 79 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 993+ 86AE             >                else
 993+ 86AE ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 993+ 86AE             >                endif           ; ok        // for other definitions it "points" the correct handler
 993+ 86AE             >                // Use of "; ok" to suppress "warning[fwdref]"
 993+ 86AE             >
 993+ 86AE             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 994+ 86AE 22 71 86 64                  dw      COMPILE, C_DO
 995+ 86B2 64 6E 97 6B                  dw      CSP, FETCH, STORE_CSP
 995+ 86B6 7C 70
 996+ 86B8 D3 6E 0C 6D                  dw      HERE, THREE
 997+ 86BC A3 69                        dw      EXIT
 998+ 86BE
 999+ 86BE              //  ______________________________________________________________________
1000+ 86BE              //
1001+ 86BE              // loop
1002+ 86BE                              Colon_Def LOOP, "LOOP", is_immediate
1002+ 86BE             >                New_Def  LOOP, "LOOP", Enter_Ptr, is_immediate ; ok
1002+ 86BE             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1002+ 86BE             >
1002+ 86BE             >                // dummy db directives used to calculate length of namec
1002+ 86BE 4C 4F 4F 50 >                db      "LOOP"
1002+ 86C2             >len_NFA         defl    $ - temp_NFA
1002+ 86C2             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1002+ 86BE             >
1002+ 86BE C4          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
1002+ 86BF 4C 4F 4F 50 >                db      "LOOP"               // name string in 7-bit ascii, but
1002+ 86C3             >                org     $-1                 // alter last byte of Name just above to set
1002+ 86C2 D0          >                db      {b $} | END_BIT     // msb as name end
1002+ 86C3             >
1002+ 86C3 A7 86       >                dw      last_NFA            // Link to previous definition Name
1002+ 86C5             >LOOP:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1002+ 86C5 79 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
1002+ 86C7             >                else
1002+ 86C7 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
1002+ 86C7             >                endif           ; ok        // for other definitions it "points" the correct handler
1002+ 86C7             >                // Use of "; ok" to suppress "warning[fwdref]"
1002+ 86C7             >
1002+ 86C7             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1003+ 86C7 0C 6D D8 70                  dw      THREE, QPAIRS
1004+ 86CB 22 71 04 64                  dw      COMPILE, C_LOOP
1005+ 86CF 87 86                        dw      C_DO_BACK
1006+ 86D1 A3 69                        dw      EXIT
1007+ 86D3
1008+ 86D3              //  ______________________________________________________________________
1009+ 86D3              //
1010+ 86D3              // +loop
1011+ 86D3                              Colon_Def PLOOP, "+LOOP", is_immediate
1011+ 86D3             >                New_Def  PLOOP, "+LOOP", Enter_Ptr, is_immediate ; ok
1011+ 86D3             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1011+ 86D3             >
1011+ 86D3             >                // dummy db directives used to calculate length of namec
1011+ 86D3 2B 4C 4F 4F >                db      "+LOOP"
1011+ 86D7 50          >
1011+ 86D8             >len_NFA         defl    $ - temp_NFA
1011+ 86D8             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1011+ 86D3             >
1011+ 86D3 C5          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
1011+ 86D4 2B 4C 4F 4F >                db      "+LOOP"               // name string in 7-bit ascii, but
1011+ 86D8 50          >
1011+ 86D9             >                org     $-1                 // alter last byte of Name just above to set
1011+ 86D8 D0          >                db      {b $} | END_BIT     // msb as name end
1011+ 86D9             >
1011+ 86D9 BE 86       >                dw      last_NFA            // Link to previous definition Name
1011+ 86DB             >PLOOP:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1011+ 86DB 79 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
1011+ 86DD             >                else
1011+ 86DD ~           >                dw      $ + 2   ; ok        // is pointed by CFA
1011+ 86DD             >                endif           ; ok        // for other definitions it "points" the correct handler
1011+ 86DD             >                // Use of "; ok" to suppress "warning[fwdref]"
1011+ 86DD             >
1011+ 86DD             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1012+ 86DD 0C 6D D8 70                  dw      THREE, QPAIRS
1013+ 86E1 22 71 CD 63                  dw      COMPILE, C_PLOOP
1014+ 86E5 87 86                        dw      C_DO_BACK
1015+ 86E7 A3 69                        dw      EXIT
1016+ 86E9
1017+ 86E9              //  ______________________________________________________________________
1018+ 86E9              //
1019+ 86E9              // ?do
1020+ 86E9                              Colon_Def QDO, "?DO", is_immediate
1020+ 86E9             >                New_Def  QDO, "?DO", Enter_Ptr, is_immediate ; ok
1020+ 86E9             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1020+ 86E9             >
1020+ 86E9             >                // dummy db directives used to calculate length of namec
1020+ 86E9 3F 44 4F    >                db      "?DO"
1020+ 86EC             >len_NFA         defl    $ - temp_NFA
1020+ 86EC             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1020+ 86E9             >
1020+ 86E9 C3          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
1020+ 86EA 3F 44 4F    >                db      "?DO"               // name string in 7-bit ascii, but
1020+ 86ED             >                org     $-1                 // alter last byte of Name just above to set
1020+ 86EC CF          >                db      {b $} | END_BIT     // msb as name end
1020+ 86ED             >
1020+ 86ED D3 86       >                dw      last_NFA            // Link to previous definition Name
1020+ 86EF             >QDO:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1020+ 86EF 79 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
1020+ 86F1             >                else
1020+ 86F1 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
1020+ 86F1             >                endif           ; ok        // for other definitions it "points" the correct handler
1020+ 86F1             >                // Use of "; ok" to suppress "warning[fwdref]"
1020+ 86F1             >
1020+ 86F1             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1021+ 86F1 22 71 59 64                  dw      COMPILE, C_Q_DO
1022+ 86F5 64 6E 97 6B                  dw      CSP, FETCH, STORE_CSP
1022+ 86F9 7C 70
1023+ 86FB D3 6E F4 6C                  dw      HERE, ZERO, COMMA, ZERO
1023+ 86FF EF 6E F4 6C
1024+ 8703 D3 6E 0C 6D                  dw      HERE, THREE
1025+ 8707 A3 69                        dw      EXIT
1026+ 8709
1027+ 8709              Latest_Definition:
1028+ 8709              //  ______________________________________________________________________
1029+ 8709              //
1030+ 8709              // \
1031+ 8709                              Colon_Def BACKSLASH, "\\", is_immediate  // this is a single back-slash
1031+ 8709             >                New_Def  BACKSLASH, "\\", Enter_Ptr, is_immediate ; ok
1031+ 8709             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1031+ 8709             >
1031+ 8709             >                // dummy db directives used to calculate length of namec
1031+ 8709 5C          >                db      "\\"
1031+ 870A             >len_NFA         defl    $ - temp_NFA
1031+ 870A             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1031+ 8709             >
1031+ 8709 C1          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
1031+ 870A 5C          >                db      "\\"               // name string in 7-bit ascii, but
1031+ 870B             >                org     $-1                 // alter last byte of Name just above to set
1031+ 870A DC          >                db      {b $} | END_BIT     // msb as name end
1031+ 870B             >
1031+ 870B E9 86       >                dw      last_NFA            // Link to previous definition Name
1031+ 870D             >BACKSLASH:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1031+ 870D 79 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
1031+ 870F             >                else
1031+ 870F ~           >                dw      $ + 2   ; ok        // is pointed by CFA
1031+ 870F             >                endif           ; ok        // for other definitions it "points" the correct handler
1031+ 870F             >                // Use of "; ok" to suppress "warning[fwdref]"
1031+ 870F             >
1031+ 870F             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1032+ 870F F3 6D 97 6B                  dw      BLK, FETCH
1033+ 8713 2C 64                        dw      ZBRANCH
1034+ 8715 30 00                        dw      Backslash_Else_1 - $
1035+ 8717 F3 6D 97 6B                  dw          BLK, FETCH, ONE, GREATER  // BLOCK 1 is used as temp-line in INCLUDE file
1035+ 871B FC 6C 63 6F
1036+ 871F 2C 64                        dw          ZBRANCH
1037+ 8721 18 00                        dw          Backslash_Else_2 - $
1038+ 8723 FC 6D 97 6B                  dw              TO_IN, FETCH, CL, MOD, CL
1038+ 8727 28 6D 6F 7A
1038+ 872B 28 6D
1039+ 872D F7 6A 21 6F                  dw              SWAP, SUBTRACT, TO_IN, PLUSSTORE
1039+ 8731 FC 6D 74 6B
1040+ 8735 15 64                        dw          BRANCH
1041+ 8737 0A 00                        dw          Backslash_Endif_2 - $
1042+ 8739              Backslash_Else_2:
1043+ 8739 34 6D 77 6A                  dw              BBUF, CELL_MINUS, TO_IN, STORE
1043+ 873D FC 6D A4 6B
1044+ 8741              Backslash_Endif_2:
1045+ 8741 15 64                        dw      BRANCH
1046+ 8743 0A 00                        dw      Backslash_Endif_1 - $
1047+ 8745              Backslash_Else_1:
1048+ 8745 A9 63 50 00                  dw          LIT, 80, TO_IN, STORE
1048+ 8749 FC 6D A4 6B
1049+ 874D              Backslash_Endif_1:
1050+ 874D A3 69                        dw      EXIT
1051+ 874F
1052+ 874F              Fence_Word:
1053+ 874F              //  ______________________________________________________________________
1054+ 874F              //
1055+ 874F
1056+ 874F 00           Here_Dictionary db      0
1057+ 8750
# file closed: C:\Zx\CSpect\Projects\vForth15_INDIRECT/source/L3.asm
 114  8750
 115  8750              // now we save the compiled file so we can either run it or debug it
 116  8750                              SAVENEX OPEN "output/main.nex", ORIGIN
 117  8750                              SAVENEX CORE 3, 0, 0                                // Next core 3.0.0 required as minimum
 118  8750                              SAVENEX CFG  0
 119  8750                              SAVENEX BANK 2, 0
 120  8750                              SAVENEX AUTO
 121  8750                              SAVENEX CLOSE
 122  8750
 123  8750              //              PAGE 7 ;set 7 page to current slot
 124  8750              //              SAVEBIN "ram7.bin",$C000,$4000 ;- save 4000h begin from C000h of RAM to file
 125  8750              //              SAVEBIN "output/ram2.bin", $8000, 9800 ;- save 3000h begin from 8000h of RAM to file
 126  8750
 127  8750                              SAVETAP "output/F15E.tap", CODE, "forth15e", ORIGIN, 10000
 128  8750
 129  8750                              SAVEBIN "output/forth15E.bin", ORIGIN, 10000
 130  8750
 131  8750                              END
# file closed: C:\Zx\CSpect\Projects\vForth15_INDIRECT/source/main.asm
