# file opened: C:\Zx\CSpect\Projects\vForth16_DIRECT_RP/source/main.asm
   1  0000              //  ______________________________________________________________________
   2  0000              //
   3  0000              //  main.asm
   4  0000              //  ______________________________________________________________________
   5  0000              //
   6  0000              //  v-Forth 1.6 NextZXOS version
   7  0000              //  build 20230321
   8  0000              //
   9  0000              //  Direct-Threaded version.
  10  0000              //
  11  0000              //  NextZXOS version
  12  0000              //  ______________________________________________________________________
  13  0000              //
  14  0000              //  This work is available as-is with no whatsoever warranty.
  15  0000              //  Copying, modifying and distributing this software is allowed
  16  0000              //  provided that the copyright notice is kept.
  17  0000              //  ______________________________________________________________________
  18  0000              //
  19  0000              //  by Matteo Vitturi, 1990-2023
  20  0000              //
  21  0000              //  https://sites.google.com/view/vforth/vforth15-next
  22  0000              //  https://www.oocities.org/matteo_vitturi/english/index.htm
  23  0000              //
  24  0000              //  This is the complete compiler for v.Forth for SINCLAIR ZX Spectrum Next.
  25  0000              //  Each line of this source list mustn't exceed 80 bytes.
  26  0000              //  Z80N (ZX Spectrum Next) extension is available.
  27  0000              //
  28  0000              //  This list has been tested using the following configuration:
  29  0000              //      - CSpect emulator V.2.12.30
  30  0000              //  ______________________________________________________________________
  31  0000              //
  32  0000              //  Z80 Registers usage map
  33  0000              //
  34  0000              //  AF
  35  0000              //  BC - Instruction Pointer: should be preserved during ROM/OS calls
  36  0000              //  DE - Return Stack Pointer: should be preserved during ROM/OS calls
  37  0000              //  HL - Working
  38  0000              //
  39  0000              //  AF'- Sometime used for backup purpose
  40  0000              //  BC'- Not used
  41  0000              //  DE'- Not used
  42  0000              //  HL'- Not used
  43  0000              //
  44  0000              //  SP - Calculator Stack Pointer
  45  0000              //  IX - Inner interpreter "next" address pointer. This way jp (ix) is 2T-state faster than JP next
  46  0000              //  IY - (ZX System: must be preserved to interact with standard ROM)
  47  0000              //
  48  0000              //  ______________________________________________________________________
  49  0000              //
  50  0000              //  _________________
  51  0000              //
  52  0000              //  FORTH DEFINITIONS
  53  0000              //  _________________
  54  0000
  55  0000                              OPT     --zxnext
  56  0000              //  ______________________________________________________________________
  57  0000              //
  58  0000              // this controls some debugging code in L0.asm
  59  0000              //  0 for final binary release.
  60  0000              //  1 for debugging with Visual Studio Code and DeZog
  61  0000              // -1 for for binary comparison with Forth generated code.
  62  0000              DEBUGGING       equ     -1
  63  0000              //
  64  0000              //  ______________________________________________________________________
  65  0000
  66  0000                              if ( -1 == DEBUGGING )
  67  0000              ORIGIN          equ     $62E6                   // for binary comparison
  68  0000              //ORIGIN          equ     $8CC1                   // for binary comparison
  69  0000                              endif
  70  0000              //  ______________________________________________________________________
  71  0000
  72  0000                              if (  0 == DEBUGGING )
  73  0000 ~            ORIGIN          equ     $6366                   // binary and Tape
  74  0000                              endif
  75  0000              //  ______________________________________________________________________
  76  0000
  77  0000                              if (  1 == DEBUGGING )
  78  0000 ~            ORIGIN          equ     $8080                   // for DeZog
  79  0000                              endif
  80  0000              //  ______________________________________________________________________
  81  0000
  82  0000                              DEVICE  ZXSPECTRUMNEXT
  83  0000
  84  0000                              ORG     ORIGIN
  85  62E6
  86  62E6                              if ( -1 == DEBUGGING )
  87  62E6 00 00 00...                  ds 128                            // for binary comparison
  88  62EA                              endif
  89  6366
  90  6366              //  ______________________________________________________________________
  91  6366              //
  92  6366              //  Naming convention for Label vs Forth correspondance
  93  6366              //  Forth words are named as they are named for real with some exception to avoid assembler syntax errors.
  94  6366              //    - Leading "0" is converted into "Z_"
  95  6366              //    - Leading "(" is converted into "C_", closing bracket is omitted
  96  6366              //    - Leading numbers are converted in letters: ONE_  TWO_ etc.
  97  6366              //    - Question mark "?" is converted into "Q" or omitted if needed / useful.
  98  6366              //    - Plus sign "+" is converted in _PLUS or ADD_ depending.
  99  6366              //    - Minus sign "-" in L (for Line), MINUS or SUBTRACT depending
 100  6366              //    - Greater-Than sign ">" in _GREATER or TO_ depending
 101  6366              //    - Equal sign "=" is converted in EQUAL
 102  6366              //    - Less-Than sign "<" in _LESS or FROM_ (or TO_ again) depending
 103  6366              //    - Asterisk sign "*" is converted in _MUL or STAR
 104  6366              //    - Slash "/" is converted in _DIV or omitted if it is clear what it means
 105  6366              //    - Exclamation mark "!" is converted in STORE
 106  6366              //    - At-Sign "@" is converted in FETCH
 107  6366              //    - Words that collide with Assembler are normally suffixed with "_OP"
 108  6366
 109  6366                              include "system.asm"
# file opened: C:\Zx\CSpect\Projects\vForth16_DIRECT_RP/source/system.asm
   1+ 6366              //  ______________________________________________________________________
   2+ 6366              //
   3+ 6366              //  system.asm
   4+ 6366              //  ______________________________________________________________________
   5+ 6366
   6+ 6366              // Registers:
   7+ 6366              //
   8+ 6366              //      BC: Instruction Pointer
   9+ 6366              //      DE:
  10+ 6366              //      HL: W register
  11+ 6366              //      SP: Calc stack Pointer
  12+ 6366              //      IX: Inner-Interpreter Address
  13+ 6366
  14+ 6366              //  ______________________________________________________________________
  15+ 6366              //
  16+ 6366              // ZX-Spectrum standard system variables
  17+ 6366              SCR_CT          equ     $5C8C                   // SCR-CT system variable
  18+ 6366              LASTK           equ     $5C08                   // LASTK system variable
  19+ 6366              BORDCR          equ     $5C48                   // BORDCR system variable
  20+ 6366              FLAGS2          equ     $5C6A                   // for caps-lock
  21+ 6366
  22+ 6366              //  ______________________________________________________________________
  23+ 6366              //
  24+ 6366              // Flag constants
  25+ 6366              TRUE_FLAG       equ     $FFFF
  26+ 6366              FALSE_FLAG      equ     $0000
  27+ 6366
  28+ 6366              //  ______________________________________________________________________
  29+ 6366              //
  30+ 6366              // Ascii char constants
  31+ 6366              NUL_CHAR        equ     $00
  32+ 6366              COMMA_CHAR      equ     $06
  33+ 6366              BACKSPACE_CHAR  equ     $08
  34+ 6366              CR_CHAR         equ     $0D
  35+ 6366              BLANK_CHAR      equ     $20
  36+ 6366              QUOTE_CHAR      equ     "'"
  37+ 6366              DQUOTE_CHAR     equ     '"'
  38+ 6366              UNDERSCORE_CHAR equ     $5F
  39+ 6366              SOLIDBLOCK_CHAR equ     $8F
  40+ 6366              HALFBLOCK_CHAR  equ     $8C
  41+ 6366              LC_A_CHAR       equ     $61                 // lower-case "a"
  42+ 6366              LC_Z_CHAR       equ     $7A                 // lower-case "z"
  43+ 6366
  44+ 6366
  45+ 6366              //  ______________________________________________________________________
  46+ 6366              //
  47+ 6366
  48+ 6366                              // emulate something like:  ld hl,rp
  49+ 6366              ldhlrp          macro
  50+ 6366 ~                            ld      hl,(RP_Pointer)
  51+ 6366                              endm
  52+ 6366
  53+ 6366                              // emulate something like:  ld rp,hl
  54+ 6366              ldrphl          macro
  55+ 6366 ~                            ld      (RP_Pointer),hl
  56+ 6366                              endm
  57+ 6366
  58+ 6366              //  ______________________________________________________________________
  59+ 6366              //
  60+ 6366              //  Inner interpreter next-address pointer. This is 2T-state faster than "jp address"
  61+ 6366              next            macro
  62+ 6366 ~                            jp      (ix)
  63+ 6366                              endm
  64+ 6366
  65+ 6366              psh1            macro
  66+ 6366 ~                            push    hl
  67+ 6366 ~                            jp      (ix)
  68+ 6366                              endm
  69+ 6366
  70+ 6366              psh2            macro
  71+ 6366 ~                            push    de
  72+ 6366 ~                            push    hl
  73+ 6366 ~                            jp      (ix)
  74+ 6366                              endm
  75+ 6366
  76+ 6366              //  ______________________________________________________________________
  77+ 6366              //
  78+ 6366              // Bit constants in length-byte
  79+ 6366
  80+ 6366              SMUDGE_BIT      equ     %00100000               // $20
  81+ 6366              IMMEDIATE_BIT   equ     %01000000               // $40
  82+ 6366              END_BIT         equ     %10000000               // $80
  83+ 6366
  84+ 6366
  85+ 6366              //  ______________________________________________________________________
  86+ 6366              //
  87+ 6366              //  To create Forth words using this (nice) Assembler, we have to use the two following
  88+ 6366              //  pointers
  89+ 6366              temp_NFA        defl    0
  90+ 6366              last_NFA        defl    0
  91+ 6366              len_NFA         defl    0
  92+ 6366
  93+ 6366              is_code         equ     0                   // so the direct machine-code starts at CFA
  94+ 6366              is_normal       equ     0                   // so the direct machine-code starts at CFA
  95+ 6366              is_immediate    equ     IMMEDIATE_BIT       // $40 - the definition is IMMEDIATE.
  96+ 6366
  97+ 6366              //  ______________________________________________________________________
  98+ 6366              //
  99+ 6366              //  Create a new "low-level" definition
 100+ 6366              //  This macro is used in the form  Create FORTH_NAME,n,"forth_name"
 101+ 6366              //  to create a new Forth Dictionary entry the same way Forth itself would do.
 102+ 6366              //  A word begins with a Length-Byte in range 1-31. Top 3 msb are used as flags
 103+ 6366              //  see SMUDGE_BIT and IMMEDIATE_BIT constant above.
 104+ 6366              //  It is followed by the Name of the word, i.e. a string expressed in 7-bit Ascii.
 105+ 6366              //  The last character of the Name must have the msb set to signal the end of it (END_BIT)
 106+ 6366              //  This macro acts much like the standard Forth definition CREATE
 107+ 6366
 108+ 6366              New_Def         macro   label, namec, runcode, bits
 109+ 6366 ~            temp_NFA        defl    $                   // save this NFA address to temp_NFA
 110+ 6366 ~
 111+ 6366 ~                            // dummy db directives used to calculate length of namec
 112+ 6366 ~                            db      namec
 113+ 6366 ~            len_NFA         defl    $ - temp_NFA
 114+ 6366 ~                            org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 115+ 6366 ~
 116+ 6366 ~                            db      len_NFA | END_BIT | bits  // The start of NFA must have msb set to signal the beginning of the sounted string
 117+ 6366 ~                            db      namec               // name string in 7-bit ascii, but
 118+ 6366 ~                            org     $-1                 // alter last byte of Name just above to set
 119+ 6366 ~                            db      {b $} | END_BIT     // msb as name end
 120+ 6366 ~
 121+ 6366 ~                            dw      last_NFA            // Link to previous definition Name
 122+ 6366 ~            label:          if runcode != 0 ; ok        // This is the start address of the direct jp(hl)
 123+ 6366 ~                            call    runcode ; ok        // for primitive definitions  actual code
 124+ 6366 ~
 125+ 6366 ~
 126+ 6366 ~                            endif           ; ok        // for other definitions it "points" the correct handler
 127+ 6366 ~                            // Use of "; ok" to suppress "warning[fwdref]"
 128+ 6366 ~
 129+ 6366 ~            last_NFA        defl    temp_NFA            // keep track of NFA saved above
 130+ 6366                              endm
 131+ 6366
 132+ 6366              //  ______________________________________________________________________
 133+ 6366              //
 134+ 6366              // Create a "constant"
 135+ 6366              // The constant value is compiled in first PFA cell
 136+ 6366              Constant_Def    macro   label, namec, constant_value
 137+ 6366 ~                            New_Def  label, namec, Constant_Ptr, is_normal
 138+ 6366 ~                            dw      constant_value
 139+ 6366                              endm
 140+ 6366
 141+ 6366              //  ______________________________________________________________________
 142+ 6366              //
 143+ 6366              // Create a "variable"
 144+ 6366              // The when invoked, a variable returns a pointer, the address of first PFA cell
 145+ 6366              // this allow creation of "variables" which content is  of any length
 146+ 6366              Variable_Def    macro   label, namec, initial_value
 147+ 6366 ~                            New_Def  label, namec, Variable_Ptr, is_normal
 148+ 6366 ~                            dw      initial_value
 149+ 6366                              endm
 150+ 6366
 151+ 6366              //  ______________________________________________________________________
 152+ 6366              //
 153+ 6366              // Create a "user"
 154+ 6366              // It uses a single byte as offset to calculate the address of the variable
 155+ 6366              User_Def        macro   label, namec, offset_value
 156+ 6366 ~                            New_Def  label, namec, User_Ptr, is_normal
 157+ 6366 ~                            db      offset_value
 158+ 6366                              endm
 159+ 6366
 160+ 6366              //  ______________________________________________________________________
 161+ 6366              //
 162+ 6366              // Create a "colon-definition"
 163+ 6366              // The CFA contains a small routine i.e. "call Enter_Ptr".
 164+ 6366              // The PFA, three bytes later, contains the actual Forth definition
 165+ 6366              Colon_Def       macro   label, namec, bits
 166+ 6366 ~                            New_Def  label, namec, Enter_Ptr, bits ; ok
 167+ 6366                              endm
 168+ 6366
 169+ 6366              //  ______________________________________________________________________
 170+ 6366              //
 171+ 6366
 172+ 6366              S0_system:      equ     $D0E8               // Address of top of Calc Stack
 173+ 6366              TIB_system      equ     $D0E8               // TIB grows upwards, Return-Stack downward.
 174+ 6366              R0_system:      equ     $D188               // Address of top of Return Stack. This is S0 + $00A0
 175+ 6366              USER_system:    equ     $D188               // User variables zone.
 176+ 6366              FIRST_system:   equ     $D1E4               // Address of first BUFFER
 177+ 6366              LIMIT_system:   equ     $E000               // Address of first byte beyond last BUFFER
 178+ 6366
# file closed: C:\Zx\CSpect\Projects\vForth16_DIRECT_RP/source/system.asm
 110  6366                              include "L0.asm"
# file opened: C:\Zx\CSpect\Projects\vForth16_DIRECT_RP/source/L0.asm
   1+ 6366              //  ______________________________________________________________________
   2+ 6366              //
   3+ 6366              //  L0.asm
   4+ 6366              //
   5+ 6366              //  Origin-Area and Level-0 definitions
   6+ 6366              //  ______________________________________________________________________
   7+ 6366
   8+ 6366
   9+ 6366              Cold_origin:
  10+ 6366 A7                           and     a
  11+ 6367 C3 1E 79                     jp      ColdRoutine
  12+ 636A              Warm_origin:
  13+ 636A 37                           scf
  14+ 636B C3 1E 79                     jp      WarmRoutine
  15+ 636E
  16+ 636E              // +008
  17+ 636E E6 D0        SP_Basic:       dw      $D0E6               // These are bits with some "standard" meaning... 0101
  18+ 6370
  19+ 6370              // +00A
  20+ 6370 00 0E                        dw      $0E00
  21+ 6372
  22+ 6372              // +00C
  23+ 6372 88 86        Latest_origin:  dw      Latest_Definition   // Latest word (used in Cold_Start)
  24+ 6374
  25+ 6374              // +00E
  26+ 6374 0C 00        DEL_Char_Ptr:   dw      $000C               // This is the characther used as "Back-Space"
  27+ 6376
  28+ 6376              // +010
  29+ 6376 50 B2        CPU_Id          dw      $B250               // Z80 expressed in base 36
  30+ 6378
  31+ 6378              // +012
  32+ 6378 E8 D0        S0_origin:      dw      S0_system
  33+ 637A 88 D1        R0_origin:      dw      R0_system
  34+ 637C E8 D0        TIB_origin:     dw      TIB_system
  35+ 637E 1F 00        WIDTH_origin:   dw      31
  36+ 6380 01 00        WARNING_origin: dw      1
  37+ 6382 D5 86        FENCE_origin:   dw      Fence_Word
  38+ 6384 D5 86        DP_origin       dw      Fence_Word
  39+ 6386 26 78        VOCLINK_origin: dw      Voclink_Ptr
  40+ 6388 E4 D1                        dw      FIRST_system
  41+ 638A 00 E0                        dw      LIMIT_system
  42+ 638C
  43+ 638C              // +026
  44+ 638C 8F           Block_Face:     db      SOLIDBLOCK_CHAR     // Caps-Lock   Cursor face
  45+ 638D 8C           Half_Face:      db      HALFBLOCK_CHAR      // Caps-unlock Cursor face
  46+ 638E 5F           Underscore_Face:db      UNDERSCORE_CHAR     // Underscore  Cursor face
  47+ 638F 00                           db      0
  48+ 6390
  49+ 6390              // +02A
  50+ 6390 00 00        IX_Echo:        dw      $0000               // Echo IX after NextOS call
  51+ 6392
  52+ 6392              // +02C
  53+ 6392 00 00        SP_Saved:       dw      $0000               // Saved SP dufing NextOS call
  54+ 6394
  55+ 6394              // +02E
  56+ 6394 88 D1        USER_Pointer:   dw      USER_system
  57+ 6396
  58+ 6396              // +030
  59+ 6396 88 D1        RP_Pointer:     dw      $d188 // R0_system
  60+ 6398
  61+ 6398              // +32
  62+ 6398              // SP_Basic        dw      0
  63+ 6398
  64+ 6398
  65+ 6398              //  ______________________________________________________________________
  66+ 6398
  67+ 6398              // from this point we can use LDHLRP and LDRPHL Assembler macros
  68+ 6398              // instead of their equivalent long sequences.
  69+ 6398
  70+ 6398              //  ______________________________________________________________________
  71+ 6398
  72+ 6398              // address for "next" - inner interpreter
  73+ 6398              // This address must always be pointed by IX
  74+ 6398              // "next" macro simply does a  jp(ix)  instruction
  75+ 6398
  76+ 6398              // Psh2_Ptr:       push    de
  77+ 6398              // Psh1_Ptr:       push    hl
  78+ 6398
  79+ 6398              Next_Ptr:       // This address must always be kept in IX: "next" relies on that
  80+ 6398
  81+ 6398                              if ( 1 == DEBUGGING )
  82+ 6398 ~                            ld      hl, Next_Breakpoint_1
  83+ 6398 ~                            and     a
  84+ 6398 ~                            sbc     hl, bc
  85+ 6398 ~                            jr      nz, Next_Continue
  86+ 6398 ~                            nop // This is where you have to put a real breakpoint to intercept BC values...
  87+ 6398                              endif
  88+ 6398
  89+ 6398              Next_Continue:
  90+ 6398 0A                           ld      a, (bc)
  91+ 6399 03                           inc     bc
  92+ 639A 6F                           ld      l, a
  93+ 639B 0A                           ld      a, (bc)
  94+ 639C 03                           inc     bc
  95+ 639D 67                           ld      h, a                // hl contains a CFA (xt) of word being executed
  96+ 639E
  97+ 639E              // Execute xt i.e. CFA held in HL
  98+ 639E              Exec_Ptr:
  99+ 639E
 100+ 639E
 101+ 639E
 102+ 639E
 103+ 639E E9                           jp      (hl)                // and jump to it
 104+ 639F                                                          // there you'll find the real code or a CALL to a ;code part
 105+ 639F
 106+ 639F              //  ______________________________________________________________________
 107+ 639F              //
 108+ 639F              // lit          -- x
 109+ 639F              // puts on top of stack the value of the following word.
 110+ 639F              // it is compiled in colon definition before a literal number
 111+ 639F
 112+ 639F                              New_Def  LIT, "LIT", is_code, is_normal
 112+ 639F             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 112+ 639F             >
 112+ 639F             >                // dummy db directives used to calculate length of namec
 112+ 639F 4C 49 54    >                db      "LIT"
 112+ 63A2             >len_NFA         defl    $ - temp_NFA
 112+ 63A2             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 112+ 639F             >
 112+ 639F 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 112+ 63A0 4C 49 54    >                db      "LIT"               // name string in 7-bit ascii, but
 112+ 63A3             >                org     $-1                 // alter last byte of Name just above to set
 112+ 63A2 D4          >                db      {b $} | END_BIT     // msb as name end
 112+ 63A3             >
 112+ 63A3 00 00       >                dw      last_NFA            // Link to previous definition Name
 112+ 63A5             >LIT:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 112+ 63A5 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 112+ 63A5 ~           >
 112+ 63A5 ~           >
 112+ 63A5             >                endif           ; ok        // for other definitions it "points" the correct handler
 112+ 63A5             >                // Use of "; ok" to suppress "warning[fwdref]"
 112+ 63A5             >
 112+ 63A5             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 113+ 63A5
 114+ 63A5 0A                           ld      a, (bc)
 115+ 63A6 03                           inc     bc
 116+ 63A7 6F                           ld      l, a
 117+ 63A8 0A                           ld      a, (bc)
 118+ 63A9 03                           inc     bc
 119+ 63AA 67                           ld      h, a
 120+ 63AB E5                           push    hl
 121+ 63AC                              next
 121+ 63AC DD E9       >                jp      (ix)
 122+ 63AE
 123+ 63AE              //  ______________________________________________________________________
 124+ 63AE              //
 125+ 63AE              // execute      i*x xt -- j*x
 126+ 63AE              // execution token. usually xt is given by CFA
 127+ 63AE
 128+ 63AE                              New_Def  EXECUTE, "EXECUTE", is_code, is_normal
 128+ 63AE             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 128+ 63AE             >
 128+ 63AE             >                // dummy db directives used to calculate length of namec
 128+ 63AE 45 58 45 43 >                db      "EXECUTE"
 128+ 63B2 55 54 45    >
 128+ 63B5             >len_NFA         defl    $ - temp_NFA
 128+ 63B5             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 128+ 63AE             >
 128+ 63AE 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 128+ 63AF 45 58 45 43 >                db      "EXECUTE"               // name string in 7-bit ascii, but
 128+ 63B3 55 54 45    >
 128+ 63B6             >                org     $-1                 // alter last byte of Name just above to set
 128+ 63B5 C5          >                db      {b $} | END_BIT     // msb as name end
 128+ 63B6             >
 128+ 63B6 9F 63       >                dw      last_NFA            // Link to previous definition Name
 128+ 63B8             >EXECUTE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 128+ 63B8 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 128+ 63B8 ~           >
 128+ 63B8 ~           >
 128+ 63B8             >                endif           ; ok        // for other definitions it "points" the correct handler
 128+ 63B8             >                // Use of "; ok" to suppress "warning[fwdref]"
 128+ 63B8             >
 128+ 63B8             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 129+ 63B8 C9                           ret
 130+ 63B9
 131+ 63B9
 132+ 63B9              //  ______________________________________________________________________
 133+ 63B9              //
 134+ 63B9              // (+loop)      n --
 135+ 63B9              // compiled by +LOOP. it uses the top two values of return-stack to
 136+ 63B9              // keep track of index and limit, they are accessed via I and I'
 137+ 63B9              // Add n to the loop index. If the loop index did not cross the boundary
 138+ 63B9              // between the loop limit minus one and the loop limit, continue execution
 139+ 63B9              // at the beginning of the loop. Otherwise, discard the current loop control
 140+ 63B9              // parameters and continue execution immediately following the loop.
 141+ 63B9                              New_Def C_PLOOP, "(+LOOP)", is_code, is_normal
 141+ 63B9             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 141+ 63B9             >
 141+ 63B9             >                // dummy db directives used to calculate length of namec
 141+ 63B9 28 2B 4C 4F >                db      "(+LOOP)"
 141+ 63BD 4F 50 29    >
 141+ 63C0             >len_NFA         defl    $ - temp_NFA
 141+ 63C0             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 141+ 63B9             >
 141+ 63B9 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 141+ 63BA 28 2B 4C 4F >                db      "(+LOOP)"               // name string in 7-bit ascii, but
 141+ 63BE 4F 50 29    >
 141+ 63C1             >                org     $-1                 // alter last byte of Name just above to set
 141+ 63C0 A9          >                db      {b $} | END_BIT     // msb as name end
 141+ 63C1             >
 141+ 63C1 AE 63       >                dw      last_NFA            // Link to previous definition Name
 141+ 63C3             >C_PLOOP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 141+ 63C3 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 141+ 63C3 ~           >
 141+ 63C3 ~           >
 141+ 63C3             >                endif           ; ok        // for other definitions it "points" the correct handler
 141+ 63C3             >                // Use of "; ok" to suppress "warning[fwdref]"
 141+ 63C3             >
 141+ 63C3             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 142+ 63C3
 143+ 63C3              Loop_Ptr:
 144+ 63C3 E1                           pop     hl                  // get increment
 145+ 63C4 EB                           ex      de, hl
 146+ 63C5                              // *** ldhlrp
 147+ 63C5 C5                           push    bc                  // Save IP
 148+ 63C6 42                           ld      b, d                // bc is increment
 149+ 63C7 4B                           ld      c, e
 150+ 63C8 E5                           push    hl
 151+ 63C9 5E                           ld      e, (hl)             // hl points to loop-index, add increment to it.
 152+ 63CA 7B                           ld      a, e                // de keeps index before increment.
 153+ 63CB 81                           add     c
 154+ 63CC 77                           ld      (hl), a
 155+ 63CD 23                           inc     hl
 156+ 63CE 56                           ld      d, (hl)
 157+ 63CF 7A                           ld      a, d
 158+ 63D0 88                           adc     b
 159+ 63D1 77                           ld      (hl),a
 160+ 63D2 23                           inc     hl
 161+ 63D3
 162+ 63D3 7B                           ld      a, e
 163+ 63D4 96                           sub     (hl)
 164+ 63D5 5F                           ld      e, a
 165+ 63D6 23                           inc     hl
 166+ 63D7 7A                           ld      a, d
 167+ 63D8 9E                           sbc     (hl)
 168+ 63D9 57                           ld      d, a                // DE is index - limit : limit is the "new zero"
 169+ 63DA
 170+ 63DA EB                           ex      de, hl              // swap HL and DE, so restore DE:=RP+3
 171+ 63DB 09                           add     hl, bc
 172+ 63DC CB 78                        bit     7, b                // keep increment-sign just before overwriting d
 173+ 63DE 28 01                        jr      z, Loop_NegativeIncrement
 174+ 63E0 3F                               ccf                     // carry-flag tracks bonudary limit crossing.
 175+ 63E1              Loop_NegativeIncrement:
 176+ 63E1 38 04                        jr      c, Loop_Endif
 177+ 63E3 D1                               pop     de              // Discard RP+3, retrieve original RP
 178+ 63E4 C1                               pop     bc                  // Retrieve IP
 179+ 63E5 18 21                            jr      Branch_Ptr      // perform branch consuming following cell
 180+ 63E7              Loop_Endif:
 181+ 63E7 C1                           pop     bc                  // discard original RP
 182+ 63E8 EB                           ex      de, hl
 183+ 63E9 23                           inc     hl                  // keep    RP+4 (exit from loop)
 184+ 63EA                              // *** ldrphl                      // ld rp,hl macro 30h +Origin
 185+ 63EA EB                           ex      de, hl
 186+ 63EB C1                           pop     bc                  // Retrieve IP
 187+ 63EC 03                           inc     bc                  // skip branch-style offset
 188+ 63ED 03                           inc     bc
 189+ 63EE                              next
 189+ 63EE DD E9       >                jp      (ix)
 190+ 63F0
 191+ 63F0              //  ______________________________________________________________________
 192+ 63F0              //
 193+ 63F0              // (loop)       n --
 194+ 63F0              // same as (LOOP) but index is incremented by 1
 195+ 63F0              // compiled by LOOP.
 196+ 63F0                              New_Def C_LOOP, "(LOOP)", is_code, is_normal
 196+ 63F0             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 196+ 63F0             >
 196+ 63F0             >                // dummy db directives used to calculate length of namec
 196+ 63F0 28 4C 4F 4F >                db      "(LOOP)"
 196+ 63F4 50 29       >
 196+ 63F6             >len_NFA         defl    $ - temp_NFA
 196+ 63F6             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 196+ 63F0             >
 196+ 63F0 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 196+ 63F1 28 4C 4F 4F >                db      "(LOOP)"               // name string in 7-bit ascii, but
 196+ 63F5 50 29       >
 196+ 63F7             >                org     $-1                 // alter last byte of Name just above to set
 196+ 63F6 A9          >                db      {b $} | END_BIT     // msb as name end
 196+ 63F7             >
 196+ 63F7 B9 63       >                dw      last_NFA            // Link to previous definition Name
 196+ 63F9             >C_LOOP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 196+ 63F9 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 196+ 63F9 ~           >
 196+ 63F9 ~           >
 196+ 63F9             >                endif           ; ok        // for other definitions it "points" the correct handler
 196+ 63F9             >                // Use of "; ok" to suppress "warning[fwdref]"
 196+ 63F9             >
 196+ 63F9             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 197+ 63F9 ED 8A 00 01                  push    1
 198+ 63FD 18 C4                        jr      Loop_Ptr
 199+ 63FF
 200+ 63FF              //  ______________________________________________________________________
 201+ 63FF              //
 202+ 63FF              // branch       --
 203+ 63FF              // unconditional branch in colon definition using the following cell as an offset from current IP value
 204+ 63FF              // compiled by ELSE, AGAIN and some other immediate words
 205+ 63FF
 206+ 63FF                              New_Def BRANCH, "BRANCH", is_code, is_normal
 206+ 63FF             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 206+ 63FF             >
 206+ 63FF             >                // dummy db directives used to calculate length of namec
 206+ 63FF 42 52 41 4E >                db      "BRANCH"
 206+ 6403 43 48       >
 206+ 6405             >len_NFA         defl    $ - temp_NFA
 206+ 6405             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 206+ 63FF             >
 206+ 63FF 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 206+ 6400 42 52 41 4E >                db      "BRANCH"               // name string in 7-bit ascii, but
 206+ 6404 43 48       >
 206+ 6406             >                org     $-1                 // alter last byte of Name just above to set
 206+ 6405 C8          >                db      {b $} | END_BIT     // msb as name end
 206+ 6406             >
 206+ 6406 F0 63       >                dw      last_NFA            // Link to previous definition Name
 206+ 6408             >BRANCH:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 206+ 6408 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 206+ 6408 ~           >
 206+ 6408 ~           >
 206+ 6408             >                endif           ; ok        // for other definitions it "points" the correct handler
 206+ 6408             >                // Use of "; ok" to suppress "warning[fwdref]"
 206+ 6408             >
 206+ 6408             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 207+ 6408              Branch_Ptr:
 208+ 6408 0A                           ld      a, (bc)
 209+ 6409 6F                           ld      l, a
 210+ 640A 03                           inc     bc
 211+ 640B 0A                           ld      a, (bc)
 212+ 640C 67                           ld      h, a
 213+ 640D 0B                           dec     bc
 214+ 640E 09                           add     hl, bc
 215+ 640F 4D                           ld      c, l
 216+ 6410 44                           ld      b, h
 217+ 6411                              next
 217+ 6411 DD E9       >                jp      (ix)
 218+ 6413
 219+ 6413
 220+ 6413              //  ______________________________________________________________________
 221+ 6413              //
 222+ 6413              // 0branch      f --
 223+ 6413              // conditional branch if the top-of-stack is ZERO or FALSE.
 224+ 6413              // compiled by IF, UNTIL and some other immediate words
 225+ 6413
 226+ 6413                              New_Def ZBRANCH, "0BRANCH", is_code, is_normal
 226+ 6413             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 226+ 6413             >
 226+ 6413             >                // dummy db directives used to calculate length of namec
 226+ 6413 30 42 52 41 >                db      "0BRANCH"
 226+ 6417 4E 43 48    >
 226+ 641A             >len_NFA         defl    $ - temp_NFA
 226+ 641A             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 226+ 6413             >
 226+ 6413 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 226+ 6414 30 42 52 41 >                db      "0BRANCH"               // name string in 7-bit ascii, but
 226+ 6418 4E 43 48    >
 226+ 641B             >                org     $-1                 // alter last byte of Name just above to set
 226+ 641A C8          >                db      {b $} | END_BIT     // msb as name end
 226+ 641B             >
 226+ 641B FF 63       >                dw      last_NFA            // Link to previous definition Name
 226+ 641D             >ZBRANCH:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 226+ 641D ~           >                call    runcode ; ok        // for primitive definitions  actual code
 226+ 641D ~           >
 226+ 641D ~           >
 226+ 641D             >                endif           ; ok        // for other definitions it "points" the correct handler
 226+ 641D             >                // Use of "; ok" to suppress "warning[fwdref]"
 226+ 641D             >
 226+ 641D             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 227+ 641D              ZBranch_Ptr:
 228+ 641D E1                           pop     hl
 229+ 641E 7D                           ld      a, l
 230+ 641F B4                           or      h
 231+ 6420 28 E6                        jr      z, Branch_Ptr
 232+ 6422 03                           inc     bc                  // if not branch, skip offset cell.
 233+ 6423 03                           inc     bc
 234+ 6424                              next
 234+ 6424 DD E9       >                jp      (ix)
 235+ 6426
 236+ 6426              //  ______________________________________________________________________
 237+ 6426              //
 238+ 6426              // (leave)        --
 239+ 6426              // compiled by LEAVE
 240+ 6426              // this forces to exit from loop and jump past
 241+ 6426                              New_Def C_LEAVE, "(LEAVE)", is_code, is_normal
 241+ 6426             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 241+ 6426             >
 241+ 6426             >                // dummy db directives used to calculate length of namec
 241+ 6426 28 4C 45 41 >                db      "(LEAVE)"
 241+ 642A 56 45 29    >
 241+ 642D             >len_NFA         defl    $ - temp_NFA
 241+ 642D             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 241+ 6426             >
 241+ 6426 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 241+ 6427 28 4C 45 41 >                db      "(LEAVE)"               // name string in 7-bit ascii, but
 241+ 642B 56 45 29    >
 241+ 642E             >                org     $-1                 // alter last byte of Name just above to set
 241+ 642D A9          >                db      {b $} | END_BIT     // msb as name end
 241+ 642E             >
 241+ 642E 13 64       >                dw      last_NFA            // Link to previous definition Name
 241+ 6430             >C_LEAVE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 241+ 6430 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 241+ 6430 ~           >
 241+ 6430 ~           >
 241+ 6430             >                endif           ; ok        // for other definitions it "points" the correct handler
 241+ 6430             >                // Use of "; ok" to suppress "warning[fwdref]"
 241+ 6430             >
 241+ 6430             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 242+ 6430 EB                           ex      de, hl
 243+ 6431                              // *** ldhlrp
 244+ 6431 3E 04                        ld      a, 4
 245+ 6433 ED 31                        add     hl, a
 246+ 6435                              // *** ldrphl
 247+ 6435 EB                           ex      de, hl
 248+ 6436 18 D0                        jr      Branch_Ptr       // perform branch consuming following cell
 249+ 6438                              next
 249+ 6438 DD E9       >                jp      (ix)
 250+ 643A
 251+ 643A              //  ______________________________________________________________________
 252+ 643A              //
 253+ 643A              // (?do)        lim ind --
 254+ 643A              // compiled by ?DO to make a loop checking for lim == ind first
 255+ 643A              // at run-time (?DO) must be followed by a BRANCH offset
 256+ 643A              // used to skip the loop if lim == ind
 257+ 643A                              New_Def C_Q_DO, "(?DO)", is_code, is_normal
 257+ 643A             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 257+ 643A             >
 257+ 643A             >                // dummy db directives used to calculate length of namec
 257+ 643A 28 3F 44 4F >                db      "(?DO)"
 257+ 643E 29          >
 257+ 643F             >len_NFA         defl    $ - temp_NFA
 257+ 643F             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 257+ 643A             >
 257+ 643A 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 257+ 643B 28 3F 44 4F >                db      "(?DO)"               // name string in 7-bit ascii, but
 257+ 643F 29          >
 257+ 6440             >                org     $-1                 // alter last byte of Name just above to set
 257+ 643F A9          >                db      {b $} | END_BIT     // msb as name end
 257+ 6440             >
 257+ 6440 26 64       >                dw      last_NFA            // Link to previous definition Name
 257+ 6442             >C_Q_DO:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 257+ 6442 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 257+ 6442 ~           >
 257+ 6442 ~           >
 257+ 6442             >                endif           ; ok        // for other definitions it "points" the correct handler
 257+ 6442             >                // Use of "; ok" to suppress "warning[fwdref]"
 257+ 6442             >
 257+ 6442             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 258+ 6442 D9                           exx
 259+ 6443 D1                            pop     de                  // de has the index
 260+ 6444 E1                            pop     hl                  // hl has the limit
 261+ 6445 44                            ld      b, h
 262+ 6446 4D                            ld      c, l
 263+ 6447 E5                            push    hl                  // put them back to stack for later
 264+ 6448 D5                            push    de
 265+ 6449 A7                            and     a                   // reset carry flag
 266+ 644A ED 52                         sbc     hl, de              // compute limit - index
 267+ 644C D9                           exx
 268+ 644D 20 04                        jr      nz, Do_Ptr          // if zero then don't even begin loop
 269+ 644F E1                               pop     hl
 270+ 6450 E1                               pop     hl
 271+ 6451 18 B5                            jr      Branch_Ptr          // perform branch consuming following cell
 272+ 6453              Do_Ptr:
 273+ 6453                              // *** ldhlrp                 // prepare RP
 274+ 6453                              // *** ex      de, hl
 275+ 6453 1B                           dec     de
 276+ 6454 1B                           dec     de
 277+ 6455 1B                           dec     de
 278+ 6456 1B                           dec     de
 279+ 6457 D5                           push    de                  // pass it to h'l'
 280+ 6458                              // *** ex      de, hl
 281+ 6458                              // *** ldrphl
 282+ 6458 D9                           exx
 283+ 6459 E1                            pop     hl
 284+ 645A
 285+ 645A                               // store index as top RP
 286+ 645A D1                            pop     de
 287+ 645B 73                            ld      (hl), e
 288+ 645C 23                            inc     hl
 289+ 645D 72                            ld      (hl), d
 290+ 645E 23                            inc     hl
 291+ 645F                               // stores lim as second from top RP
 292+ 645F D1                            pop     de
 293+ 6460 73                            ld      (hl), e
 294+ 6461 23                            inc     hl
 295+ 6462 72                            ld      (hl), d
 296+ 6463 D9                           exx
 297+ 6464                              // skip branch-style offseet
 298+ 6464 03                           inc     bc
 299+ 6465 03                           inc     bc
 300+ 6466                              next
 300+ 6466 DD E9       >                jp      (ix)
 301+ 6468
 302+ 6468              //  ______________________________________________________________________
 303+ 6468              //
 304+ 6468              // (do)        lim ind --
 305+ 6468              // compiled by DO to make a loop checking for lim == ind first
 306+ 6468              // this is a simpler version of (?DO)
 307+ 6468                              New_Def C_DO, "(DO)", is_code, is_normal
 307+ 6468             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 307+ 6468             >
 307+ 6468             >                // dummy db directives used to calculate length of namec
 307+ 6468 28 44 4F 29 >                db      "(DO)"
 307+ 646C             >len_NFA         defl    $ - temp_NFA
 307+ 646C             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 307+ 6468             >
 307+ 6468 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 307+ 6469 28 44 4F 29 >                db      "(DO)"               // name string in 7-bit ascii, but
 307+ 646D             >                org     $-1                 // alter last byte of Name just above to set
 307+ 646C A9          >                db      {b $} | END_BIT     // msb as name end
 307+ 646D             >
 307+ 646D 3A 64       >                dw      last_NFA            // Link to previous definition Name
 307+ 646F             >C_DO:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 307+ 646F ~           >                call    runcode ; ok        // for primitive definitions  actual code
 307+ 646F ~           >
 307+ 646F ~           >
 307+ 646F             >                endif           ; ok        // for other definitions it "points" the correct handler
 307+ 646F             >                // Use of "; ok" to suppress "warning[fwdref]"
 307+ 646F             >
 307+ 646F             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 308+ 646F 0B                           dec     bc                  // prepare IP beforehand
 309+ 6470 0B                           dec     bc                  // to balance the two final inc bc in (?do)
 310+ 6471 18 E0                        jr      Do_Ptr
 311+ 6473
 312+ 6473              //  ______________________________________________________________________
 313+ 6473              //
 314+ 6473              // i            -- n
 315+ 6473              // used between DO and LOOP or between DO e +LOOP to copy on top of stack
 316+ 6473              // the current value of the index-loop
 317+ 6473                              New_Def I, "I", is_code, is_normal
 317+ 6473             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 317+ 6473             >
 317+ 6473             >                // dummy db directives used to calculate length of namec
 317+ 6473 49          >                db      "I"
 317+ 6474             >len_NFA         defl    $ - temp_NFA
 317+ 6474             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 317+ 6473             >
 317+ 6473 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 317+ 6474 49          >                db      "I"               // name string in 7-bit ascii, but
 317+ 6475             >                org     $-1                 // alter last byte of Name just above to set
 317+ 6474 C9          >                db      {b $} | END_BIT     // msb as name end
 317+ 6475             >
 317+ 6475 68 64       >                dw      last_NFA            // Link to previous definition Name
 317+ 6477             >I:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 317+ 6477 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 317+ 6477 ~           >
 317+ 6477 ~           >
 317+ 6477             >                endif           ; ok        // for other definitions it "points" the correct handler
 317+ 6477             >                // Use of "; ok" to suppress "warning[fwdref]"
 317+ 6477             >
 317+ 6477             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 318+ 6477              I_Ptr:
 319+ 6477 62                           ld      h, d
 320+ 6478 6B                           ld      l, e
 321+ 6479                              // *** ldhlrp
 322+ 6479              I_Ptr_prime:
 323+ 6479 7E                           ld      a, (hl)
 324+ 647A 23                           inc     hl
 325+ 647B 66                           ld      h, (hl)
 326+ 647C 6F                           ld      l, a
 327+ 647D E5                           push    hl
 328+ 647E                              next
 328+ 647E DD E9       >                jp      (ix)
 329+ 6480
 330+ 6480
 331+ 6480              //  ______________________________________________________________________
 332+ 6480              //
 333+ 6480              // i'            -- n
 334+ 6480              // used between DO and LOOP or between DO e +LOOP to copy on top of stack
 335+ 6480              // the limit of the index-loop
 336+ 6480
 337+ 6480                              New_Def II, "I'", is_code, is_normal
 337+ 6480             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 337+ 6480             >
 337+ 6480             >                // dummy db directives used to calculate length of namec
 337+ 6480 49 27       >                db      "I'"
 337+ 6482             >len_NFA         defl    $ - temp_NFA
 337+ 6482             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 337+ 6480             >
 337+ 6480 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 337+ 6481 49 27       >                db      "I'"               // name string in 7-bit ascii, but
 337+ 6483             >                org     $-1                 // alter last byte of Name just above to set
 337+ 6482 A7          >                db      {b $} | END_BIT     // msb as name end
 337+ 6483             >
 337+ 6483 73 64       >                dw      last_NFA            // Link to previous definition Name
 337+ 6485             >II:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 337+ 6485 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 337+ 6485 ~           >
 337+ 6485 ~           >
 337+ 6485             >                endif           ; ok        // for other definitions it "points" the correct handler
 337+ 6485             >                // Use of "; ok" to suppress "warning[fwdref]"
 337+ 6485             >
 337+ 6485             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 338+ 6485 62                           ld      h, d
 339+ 6486 6B                           ld      l, e
 340+ 6487                              // *** ldhlrp
 341+ 6487 23                           inc     hl
 342+ 6488 23                           inc     hl
 343+ 6489 18 EE                        jr      I_Ptr_prime
 344+ 648B
 345+ 648B
 346+ 648B              //  ______________________________________________________________________
 347+ 648B              //
 348+ 648B              // digit        c n -- u tf  |  ff
 349+ 648B              // convert a character c using base n
 350+ 648B              // returns a unsigned number and a true flag
 351+ 648B              // or just a false flag if the conversion fails
 352+ 648B                              New_Def DIGIT, "DIGIT", is_code, is_normal
 352+ 648B             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 352+ 648B             >
 352+ 648B             >                // dummy db directives used to calculate length of namec
 352+ 648B 44 49 47 49 >                db      "DIGIT"
 352+ 648F 54          >
 352+ 6490             >len_NFA         defl    $ - temp_NFA
 352+ 6490             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 352+ 648B             >
 352+ 648B 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 352+ 648C 44 49 47 49 >                db      "DIGIT"               // name string in 7-bit ascii, but
 352+ 6490 54          >
 352+ 6491             >                org     $-1                 // alter last byte of Name just above to set
 352+ 6490 D4          >                db      {b $} | END_BIT     // msb as name end
 352+ 6491             >
 352+ 6491 80 64       >                dw      last_NFA            // Link to previous definition Name
 352+ 6493             >DIGIT:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 352+ 6493 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 352+ 6493 ~           >
 352+ 6493 ~           >
 352+ 6493             >                endif           ; ok        // for other definitions it "points" the correct handler
 352+ 6493             >                // Use of "; ok" to suppress "warning[fwdref]"
 352+ 6493             >
 352+ 6493             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 353+ 6493 D9                           exx
 354+ 6494 E1                           pop     hl                  // l has the base
 355+ 6495 D1                           pop     de                  // e has the digit
 356+ 6496 7B                           ld      a, e
 357+ 6497 FE 60                        cp      $60                 // check if lowercase
 358+ 6499 38 02                        jr      c, Digit_Uppercase
 359+ 649B D6 20                            sub     $20                 // quick'n'dirty uppercase
 360+ 649D              Digit_Uppercase:
 361+ 649D D6 30                        sub     $30
 362+ 649F 38 16                        jr      c, Digit_Fail       // fail when character < "0"
 363+ 64A1 FE 0A                            cp      $0A
 364+ 64A3 38 06                            jr      c, Digit_Decimal    // perhaps is not decimal
 365+ 64A5 D6 07                                sub     7                   // try hex and subtract 7
 366+ 64A7 FE 0A                                cp      $0A
 367+ 64A9 38 0C                                jr      c,  Digit_Fail      // it is not hex !
 368+ 64AB
 369+ 64AB              Digit_Decimal:
 370+ 64AB                              // compare digit
 371+ 64AB BD                           cp      l                   // compare with base
 372+ 64AC 30 09                        jr      nc, Digit_Fail      // fail when greater than base
 373+ 64AE 5F                               ld      e, a                // digit is returned as second from TOS
 374+ 64AF 21 01 00                         ld      hl, 1
 375+ 64B2 D5                               push    de
 376+ 64B3 E5                               push    hl
 377+ 64B4 D9                               exx
 378+ 64B5                                  next
 378+ 64B5 DD E9       >                jp      (ix)
 379+ 64B7              Digit_Fail:
 380+ 64B7 21 00 00                     ld      hl, 0
 381+ 64BA E5                           push    hl
 382+ 64BB D9                           exx
 383+ 64BC                              next
 383+ 64BC DD E9       >                jp      (ix)
 384+ 64BE
 385+ 64BE              //  ______________________________________________________________________
 386+ 64BE              //
 387+ 64BE              //  parametric uppercase routine
 388+ 64BE              //  depending on the following op-code the routine can be by-passed
 389+ 64BE              //  changing the behaviour of some callers.
 390+ 64BE              //  If it is "ret" then the system is Case-Sensitive
 391+ 64BE              //  If it is "Nop" then the system is Case-Insensitive
 392+ 64BE              //  Only A register is touched.
 393+ 64BE 00           Case_Sensitive: nop                         // Default is case-insensitive.
 394+ 64BF              Case_Upper:
 395+ 64BF FE 61                        cp      LC_A_CHAR           // lower-case "a"
 396+ 64C1 D8                           ret     c                   // no change if A < "a"
 397+ 64C2 FE 7B                        cp      LC_Z_CHAR + 1       // lower-case "z" + 1
 398+ 64C4 D0                           ret     nc                  // no change if A > "z"
 399+ 64C5 D6 20                        sub     $20                 // Make uppercase if A in ["a".."z"]
 400+ 64C7 C9                           ret
 401+ 64C8
 402+ 64C8              //  ______________________________________________________________________
 403+ 64C8              //
 404+ 64C8              //  caseon      --
 405+ 64C8              // set system case-sensitivity on
 406+ 64C8              // it patches a RET/NOP at the beginning of the uppercase-routine
 407+ 64C8                              New_Def CASEON, "CASEON", is_code, is_normal
 407+ 64C8             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 407+ 64C8             >
 407+ 64C8             >                // dummy db directives used to calculate length of namec
 407+ 64C8 43 41 53 45 >                db      "CASEON"
 407+ 64CC 4F 4E       >
 407+ 64CE             >len_NFA         defl    $ - temp_NFA
 407+ 64CE             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 407+ 64C8             >
 407+ 64C8 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 407+ 64C9 43 41 53 45 >                db      "CASEON"               // name string in 7-bit ascii, but
 407+ 64CD 4F 4E       >
 407+ 64CF             >                org     $-1                 // alter last byte of Name just above to set
 407+ 64CE CE          >                db      {b $} | END_BIT     // msb as name end
 407+ 64CF             >
 407+ 64CF 8B 64       >                dw      last_NFA            // Link to previous definition Name
 407+ 64D1             >CASEON:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 407+ 64D1 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 407+ 64D1 ~           >
 407+ 64D1 ~           >
 407+ 64D1             >                endif           ; ok        // for other definitions it "points" the correct handler
 407+ 64D1             >                // Use of "; ok" to suppress "warning[fwdref]"
 407+ 64D1             >
 407+ 64D1             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 408+ 64D1 3E C9                        ld      a, $C9              // "ret"
 409+ 64D3 32 BE 64                     ld      (Case_Sensitive), a
 410+ 64D6                              next
 410+ 64D6 DD E9       >                jp      (ix)
 411+ 64D8
 412+ 64D8              //  ______________________________________________________________________
 413+ 64D8              //
 414+ 64D8              //  caseoff     --
 415+ 64D8              // set system case-sensitivity on
 416+ 64D8              // it patches a RET/NOP at the beginning of the uppercase-routine
 417+ 64D8                              New_Def CASEOFF, "CASEOFF", is_code, is_normal
 417+ 64D8             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 417+ 64D8             >
 417+ 64D8             >                // dummy db directives used to calculate length of namec
 417+ 64D8 43 41 53 45 >                db      "CASEOFF"
 417+ 64DC 4F 46 46    >
 417+ 64DF             >len_NFA         defl    $ - temp_NFA
 417+ 64DF             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 417+ 64D8             >
 417+ 64D8 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 417+ 64D9 43 41 53 45 >                db      "CASEOFF"               // name string in 7-bit ascii, but
 417+ 64DD 4F 46 46    >
 417+ 64E0             >                org     $-1                 // alter last byte of Name just above to set
 417+ 64DF C6          >                db      {b $} | END_BIT     // msb as name end
 417+ 64E0             >
 417+ 64E0 C8 64       >                dw      last_NFA            // Link to previous definition Name
 417+ 64E2             >CASEOFF:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 417+ 64E2 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 417+ 64E2 ~           >
 417+ 64E2 ~           >
 417+ 64E2             >                endif           ; ok        // for other definitions it "points" the correct handler
 417+ 64E2             >                // Use of "; ok" to suppress "warning[fwdref]"
 417+ 64E2             >
 417+ 64E2             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 418+ 64E2 3E 00                        ld      a, $00              // "nop"
 419+ 64E4 32 BE 64                     ld      (Case_Sensitive), a
 420+ 64E7                              next
 420+ 64E7 DD E9       >                jp      (ix)
 421+ 64E9
 422+ 64E9              //  ______________________________________________________________________
 423+ 64E9              //
 424+ 64E9              //  upper       c1 -- c1 | c2
 425+ 64E9              // character on top of stack is forced to Uppercase.
 426+ 64E9                              New_Def UPPER, "UPPER", is_code, is_normal
 426+ 64E9             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 426+ 64E9             >
 426+ 64E9             >                // dummy db directives used to calculate length of namec
 426+ 64E9 55 50 50 45 >                db      "UPPER"
 426+ 64ED 52          >
 426+ 64EE             >len_NFA         defl    $ - temp_NFA
 426+ 64EE             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 426+ 64E9             >
 426+ 64E9 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 426+ 64EA 55 50 50 45 >                db      "UPPER"               // name string in 7-bit ascii, but
 426+ 64EE 52          >
 426+ 64EF             >                org     $-1                 // alter last byte of Name just above to set
 426+ 64EE D2          >                db      {b $} | END_BIT     // msb as name end
 426+ 64EF             >
 426+ 64EF D8 64       >                dw      last_NFA            // Link to previous definition Name
 426+ 64F1             >UPPER:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 426+ 64F1 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 426+ 64F1 ~           >
 426+ 64F1 ~           >
 426+ 64F1             >                endif           ; ok        // for other definitions it "points" the correct handler
 426+ 64F1             >                // Use of "; ok" to suppress "warning[fwdref]"
 426+ 64F1             >
 426+ 64F1             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 427+ 64F1 E1                           pop     hl
 428+ 64F2 7D                           ld      a, l
 429+ 64F3 CD BF 64                     call    Case_Upper
 430+ 64F6 6F                           ld      l, a
 431+ 64F7
 432+ 64F7                              psh1
 432+ 64F7 E5          >                push    hl
 432+ 64F8 DD E9       >                jp      (ix)
 433+ 64FA
 434+ 64FA              //  ______________________________________________________________________
 435+ 64FA              //
 436+ 64FA              // (find)       addr voc -- 0 | cfa b 1
 437+ 64FA              // vocabulary search,
 438+ 64FA              // - voc is starting word's NFA
 439+ 64FA              // - addr is the string to be searched for
 440+ 64FA              // On success, it returns the CFA of found word, the first NFA byte
 441+ 64FA              // (which contains length and some flags) and a true flag.
 442+ 64FA              // On fail, a false flag  (no more: leaves addr unchanged)
 443+ 64FA                              New_Def C_FIND, "(FIND)", is_code, is_normal
 443+ 64FA             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 443+ 64FA             >
 443+ 64FA             >                // dummy db directives used to calculate length of namec
 443+ 64FA 28 46 49 4E >                db      "(FIND)"
 443+ 64FE 44 29       >
 443+ 6500             >len_NFA         defl    $ - temp_NFA
 443+ 6500             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 443+ 64FA             >
 443+ 64FA 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 443+ 64FB 28 46 49 4E >                db      "(FIND)"               // name string in 7-bit ascii, but
 443+ 64FF 44 29       >
 443+ 6501             >                org     $-1                 // alter last byte of Name just above to set
 443+ 6500 A9          >                db      {b $} | END_BIT     // msb as name end
 443+ 6501             >
 443+ 6501 E9 64       >                dw      last_NFA            // Link to previous definition Name
 443+ 6503             >C_FIND:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 443+ 6503 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 443+ 6503 ~           >
 443+ 6503 ~           >
 443+ 6503             >                endif           ; ok        // for other definitions it "points" the correct handler
 443+ 6503             >                // Use of "; ok" to suppress "warning[fwdref]"
 443+ 6503             >
 443+ 6503             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 444+ 6503 D9                           exx
 445+ 6504 D1                           pop     de                      // de has dictionary pointer
 446+ 6505              Find_VocabularyLoop:
 447+ 6505 E1                               pop     hl                  // string pointer to search for
 448+ 6506 E5                               push    hl                  // keep it on stack too for the end.
 449+ 6507 1A                               ld      a, (de)             // save NFA length byte
 450+ 6508 08                               ex      af,af'              // for later use (!)
 451+ 6509 1A                               ld      a, (de)             // reload NFA length byte
 452+ 650A AE                               xor     (hl)                // check if same length
 453+ 650B E6 3F                            and     $3F                 // by resetting 3 high bits (flags)
 454+ 650D                                  // word and text haven't the same length, skip to next vocabulary entry
 455+ 650D 20 2B                            jr      nz, Find_DifferentLenght
 456+ 650F
 457+ 650F              Find_ThisWord:      // begin loop
 458+ 650F 23                                   inc     hl
 459+ 6510 13                                   inc     de
 460+ 6511 1A                                   ld      a, (de)
 461+ 6512                                      // case insensitive option - begin
 462+ 6512                                      // push    bc
 463+ 6512 E6 80                                and     $80                 // split A in msb and the rest
 464+ 6514 47                                   ld      b, a
 465+ 6515 1A                                   ld      a, (de)
 466+ 6516 E6 7F                                and     $7F                 // ... the rest (lower 7 bits)
 467+ 6518 CD BE 64                             call    Case_Sensitive      // uppercase routine
 468+ 651B 4F                                   ld      c, a
 469+ 651C 7E                                   ld      a, (hl)
 470+ 651D CD BE 64                             call    Case_Sensitive      // uppercase routine
 471+ 6520 A9                                   xor     c
 472+ 6521 A8                                   xor     b
 473+ 6522                                      // pop     bc
 474+ 6522                                      // case insensitive option - end
 475+ 6522 87                                   add     a                   // ignore msb during compare
 476+ 6523 20 13                                jr      nz, Find_DidntMatch  // jump if doesn't match (*)
 477+ 6525
 478+ 6525                                  // loop back until last byte msb is found set
 479+ 6525                                  // that bit marks the ending char of this word
 480+ 6525 30 E8                            jr      nc, Find_ThisWord
 481+ 6527
 482+ 6527                                  // match found !
 483+ 6527 21 03 00                         ld      hl, 3               // 3 bytes for CFA offset to skip LFA
 484+ 652A 19                               add     hl, de
 485+ 652B E3                               ex      (sp), hl            // CFA on stack and drop addr
 486+ 652C 08                               ex      af, af'             // retrieve NFA byte (!)
 487+ 652D 5F                               ld      e, a
 488+ 652E 16 00                            ld      d, 0
 489+ 6530 21 FF FF                         ld      hl, -1
 490+ 6533 D5                               push    de
 491+ 6534 E5                               push    hl
 492+ 6535 D9                               exx
 493+ 6536                                  next
 493+ 6536 DD E9       >                jp      (ix)
 494+ 6538
 495+ 6538              Find_DidntMatch: // didn't match (*)
 496+ 6538 38 05                            jr      c,  Find_WordEnd   // jump if not end of word (**)
 497+ 653A
 498+ 653A              Find_DifferentLenght:
 499+ 653A                                  // consume chars until the end of the word
 500+ 653A                                  // that is last byte msb is found set
 501+ 653A 13                                   inc     de
 502+ 653B 1A                                   ld      a, (de)
 503+ 653C 87                                   add     a, a
 504+ 653D 30 FB                            jr      nc, Find_DifferentLenght
 505+ 653F
 506+ 653F              Find_WordEnd:   // word-end  found (**)
 507+ 653F                                  // take LFA and use it
 508+ 653F 13                               inc     de
 509+ 6540 EB                               ex      de, hl
 510+ 6541 5E                               ld      e, (hl)
 511+ 6542 23                               inc     hl
 512+ 6543 56                               ld      d, (hl)
 513+ 6544 7A                               ld      a, d
 514+ 6545 B3                               or      e
 515+ 6546
 516+ 6546                              // loop until end of vocabulary
 517+ 6546 20 BD                        jr      nz, Find_VocabularyLoop
 518+ 6548
 519+ 6548 E1                           pop     hl              // without this, leaves addr unchanged
 520+ 6549 21 00 00                     ld      hl, 0
 521+ 654C E5                           push    hl
 522+ 654D D9                           exx
 523+ 654E                              next
 523+ 654E DD E9       >                jp      (ix)
 524+ 6550
 525+ 6550              //  ______________________________________________________________________
 526+ 6550              //
 527+ 6550              // enclose      a c -- a  n1 n2 n3
 528+ 6550              // starting from a, using delimiter c, determines the offsets:
 529+ 6550              //   n1   the first character non-delimiter
 530+ 6550              //   n2   the first delimiter after the text
 531+ 6550              //   n3   the first character non enclosed.
 532+ 6550              // This procedure does not go beyond a 'nul' ASCII (0x00) that represents
 533+ 6550              // an uncoditional delimiter.
 534+ 6550              // Examples:
 535+ 6550              //   i:	c  c  x  x  x  c  x	 -- 2  5  6
 536+ 6550              //  ii:	c  c  x  x  x  'nul' -- 2  5  5
 537+ 6550              // iii:	c  c  'nul'          -- 2  3  2
 538+ 6550                              New_Def ENCLOSE, "ENCLOSE", is_code, is_normal
 538+ 6550             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 538+ 6550             >
 538+ 6550             >                // dummy db directives used to calculate length of namec
 538+ 6550 45 4E 43 4C >                db      "ENCLOSE"
 538+ 6554 4F 53 45    >
 538+ 6557             >len_NFA         defl    $ - temp_NFA
 538+ 6557             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 538+ 6550             >
 538+ 6550 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 538+ 6551 45 4E 43 4C >                db      "ENCLOSE"               // name string in 7-bit ascii, but
 538+ 6555 4F 53 45    >
 538+ 6558             >                org     $-1                 // alter last byte of Name just above to set
 538+ 6557 C5          >                db      {b $} | END_BIT     // msb as name end
 538+ 6558             >
 538+ 6558 FA 64       >                dw      last_NFA            // Link to previous definition Name
 538+ 655A             >ENCLOSE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 538+ 655A ~           >                call    runcode ; ok        // for primitive definitions  actual code
 538+ 655A ~           >
 538+ 655A ~           >
 538+ 655A             >                endif           ; ok        // for other definitions it "points" the correct handler
 538+ 655A             >                // Use of "; ok" to suppress "warning[fwdref]"
 538+ 655A             >
 538+ 655A             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 539+ 655A D9                           exx
 540+ 655B D1                           pop     de                  //  e has the character
 541+ 655C E1                           pop     hl                  // hl has the string address
 542+ 655D E5                           push    hl
 543+ 655E 7B                           ld      a, e
 544+ 655F 11 FF FF                     ld      de, -1              // let's start from -1
 545+ 6562 2B                           dec     hl
 546+ 6563              Enclose_NonDelimiter:
 547+ 6563                              // find first non delimiter
 548+ 6563 23                               inc     hl
 549+ 6564 13                               inc     de
 550+ 6565 BE                               cp      (hl)
 551+ 6566 28 FB                        jr      z, Enclose_NonDelimiter
 552+ 6568 D5                           push    de
 553+ 6569
 554+ 6569                              // push    bc                  // save Instruction Pointer
 555+ 6569
 556+ 6569 4F                           ld      c, a                // save char
 557+ 656A 7E                           ld      a, (hl)
 558+ 656B A7                           and     a                   // stop if 0x00
 559+ 656C 20 07                        jr      nz, Enclose_NextChar
 560+ 656E                              /// case iii. no more character in string
 561+ 656E                                  // pop     bc                  // restore Instruction Pointer
 562+ 656E 13                               inc     de
 563+ 656F D5                               push    de
 564+ 6570 1B                               dec     de
 565+ 6571 D5                               push    de
 566+ 6572 D9                               exx
 567+ 6573                                  next
 567+ 6573 DD E9       >                jp      (ix)
 568+ 6575              Enclose_NextChar:
 569+ 6575 79                               ld      a, c
 570+ 6576 23                               inc     hl
 571+ 6577 13                               inc     de
 572+ 6578 BE                               cp      (hl)
 573+ 6579 20 06                            jr      nz, Enclose_NonSeparator
 574+ 657B                                      // case i. first non enclosed
 575+ 657B                                      // pop     bc                  // restore Instruction Pointer
 576+ 657B D5                                   push    de
 577+ 657C 13                                   inc     de
 578+ 657D D5                                   push    de
 579+ 657E D9                                   exx
 580+ 657F                                      next
 580+ 657F DD E9       >                jp      (ix)
 581+ 6581              Enclose_NonSeparator:
 582+ 6581 7E                               ld      a, (hl)
 583+ 6582 A7                               and     a
 584+ 6583 20 F0                        jr      nz, Enclose_NextChar
 585+ 6585
 586+ 6585                              // case ii. separator & terminator
 587+ 6585                              // pop     bc                  // restore Instruction Pointer
 588+ 6585 D5                           push    de
 589+ 6586 D5                           push    de
 590+ 6587 D9                           exx
 591+ 6588                              next
 591+ 6588 DD E9       >                jp      (ix)
 592+ 658A
 593+ 658A              //  ______________________________________________________________________
 594+ 658A              //
 595+ 658A              // (map)        a2 a1 n c1 -- c2
 596+ 658A              // translate character c1 using mapping string a2 and a2
 597+ 658A              // if c1 is not present within string a1 then
 598+ 658A              // c2 = c2 if it is not translated. n is the length of both a1 and a2.
 599+ 658A                              New_Def C_MAP, "(MAP)", is_code, is_normal
 599+ 658A             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 599+ 658A             >
 599+ 658A             >                // dummy db directives used to calculate length of namec
 599+ 658A 28 4D 41 50 >                db      "(MAP)"
 599+ 658E 29          >
 599+ 658F             >len_NFA         defl    $ - temp_NFA
 599+ 658F             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 599+ 658A             >
 599+ 658A 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 599+ 658B 28 4D 41 50 >                db      "(MAP)"               // name string in 7-bit ascii, but
 599+ 658F 29          >
 599+ 6590             >                org     $-1                 // alter last byte of Name just above to set
 599+ 658F A9          >                db      {b $} | END_BIT     // msb as name end
 599+ 6590             >
 599+ 6590 50 65       >                dw      last_NFA            // Link to previous definition Name
 599+ 6592             >C_MAP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 599+ 6592 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 599+ 6592 ~           >
 599+ 6592 ~           >
 599+ 6592             >                endif           ; ok        // for other definitions it "points" the correct handler
 599+ 6592             >                // Use of "; ok" to suppress "warning[fwdref]"
 599+ 6592             >
 599+ 6592             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 600+ 6592 D9                           exx
 601+ 6593 E1                           pop     hl
 602+ 6594 7D                           ld      a, l
 603+ 6595 C1                           pop     bc
 604+ 6596 E1                           pop     hl
 605+ 6597 50                           ld      d, b
 606+ 6598 59                           ld      e, c
 607+ 6599 ED B1                        cpir
 608+ 659B E1                           pop     hl
 609+ 659C 20 05                        jr      nz, C_Map_Then
 609+ 659E
 610+ 659E 19                               add     hl, de
 611+ 659F 2B                               dec     hl
 612+ 65A0 ED 42                            sbc     hl, bc
 613+ 65A2 7E                               ld      a, (hl)
 614+ 65A3              C_Map_Then:
 615+ 65A3 6F                           ld      l, a
 616+ 65A4 26 00                        ld      h, 0
 617+ 65A6 E5                           push    hl
 618+ 65A7 D9                           exx
 619+ 65A8                              next
 619+ 65A8 DD E9       >                jp      (ix)
 620+ 65AA
 621+ 65AA              //  ______________________________________________________________________
 622+ 65AA              //
 623+ 65AA              // (compare)    a1 a2 n -- b
 624+ 65AA              // this word performs a lexicographic compare of n bytes of text at address a1
 625+ 65AA              // with n bytes of text at address a2. It returns numeric a value:
 626+ 65AA              //  0 : if strings are equal
 627+ 65AA              // +1 : if string at a1 greater than string at a2
 628+ 65AA              // -1 : if string at a1 less than string at a2
 629+ 65AA              // strings can be 256 bytes in length at most.
 630+ 65AA                              New_Def C_COMPARE, "(COMPARE)", is_code, is_normal
 630+ 65AA             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 630+ 65AA             >
 630+ 65AA             >                // dummy db directives used to calculate length of namec
 630+ 65AA 28 43 4F 4D >                db      "(COMPARE)"
 630+ 65AE 50 41 52 45 >
 630+ 65B2 29          >
 630+ 65B3             >len_NFA         defl    $ - temp_NFA
 630+ 65B3             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 630+ 65AA             >
 630+ 65AA 89          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 630+ 65AB 28 43 4F 4D >                db      "(COMPARE)"               // name string in 7-bit ascii, but
 630+ 65AF 50 41 52 45 >
 630+ 65B3 29          >
 630+ 65B4             >                org     $-1                 // alter last byte of Name just above to set
 630+ 65B3 A9          >                db      {b $} | END_BIT     // msb as name end
 630+ 65B4             >
 630+ 65B4 8A 65       >                dw      last_NFA            // Link to previous definition Name
 630+ 65B6             >C_COMPARE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 630+ 65B6 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 630+ 65B6 ~           >
 630+ 65B6 ~           >
 630+ 65B6             >                endif           ; ok        // for other definitions it "points" the correct handler
 630+ 65B6             >                // Use of "; ok" to suppress "warning[fwdref]"
 630+ 65B6             >
 630+ 65B6             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 631+ 65B6 D9                           exx
 632+ 65B7 E1                           pop     hl                  // Number of bytes
 633+ 65B8 7D                           ld      a, l
 634+ 65B9 E1                           pop     hl                  // hl points string a2
 635+ 65BA D1                           pop     de                  // hl points string a1
 636+ 65BB              //              push    bc                  // Instruction pointer on stack
 637+ 65BB 47                           ld      b, a
 638+ 65BC              C_Compare_Loop:
 639+ 65BC 7E                               ld      a, (hl)
 640+ 65BD CD BE 64                         call    Case_Sensitive
 641+ 65C0 4F                               ld      c, a
 642+ 65C1 1A                               ld      a, (de)
 643+ 65C2 CD BE 64                         call    Case_Sensitive
 644+ 65C5 B9                               cp      c
 645+ 65C6 13                               inc     de
 646+ 65C7 23                               inc     hl
 647+ 65C8 28 0E                            jr      z, C_Compare_Equal
 648+ 65CA 38 05                                jr      c, C_Compare_NotLessThan  // If LessThan
 649+ 65CC 21 01 00                                 ld      hl, 1               // a1 gt a2
 650+ 65CF 18 03                                jr      C_Compare_Then      // Else
 651+ 65D1              C_Compare_NotLessThan:
 652+ 65D1 21 FF FF                                 ld      hl, -1              // a1 lt a2
 653+ 65D4              C_Compare_Then:                                 // Endif
 654+ 65D4              //                      pop     bc              // restore Instruction Pointer
 655+ 65D4 E5                                   push    hl
 656+ 65D5 D9                                   exx
 657+ 65D6
 658+ 65D6                                      next
 658+ 65D6 DD E9       >                jp      (ix)
 659+ 65D8
 660+ 65D8              C_Compare_Equal:
 661+ 65D8 10 E2                        djnz    C_Compare_Loop
 662+ 65DA 21 00 00                     ld      hl, 0               // a1 eq a2
 663+ 65DD              //              pop     bc                  // restore Instruction Pointer
 664+ 65DD E5                           push    hl
 665+ 65DE D9                           exx
 666+ 65DF
 667+ 65DF                              next
 667+ 65DF DD E9       >                jp      (ix)
 668+ 65E1
 669+ 65E1              //  ______________________________________________________________________
 670+ 65E1              //
 671+ 65E1              // emitc        c --
 672+ 65E1              // low level emit, calls ROM routine at #10 to send a character to
 673+ 65E1              // the the current channel (see SELECT to change stream-channel)
 674+ 65E1                              New_Def EMITC, "EMITC", is_code, is_normal
 674+ 65E1             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 674+ 65E1             >
 674+ 65E1             >                // dummy db directives used to calculate length of namec
 674+ 65E1 45 4D 49 54 >                db      "EMITC"
 674+ 65E5 43          >
 674+ 65E6             >len_NFA         defl    $ - temp_NFA
 674+ 65E6             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 674+ 65E1             >
 674+ 65E1 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 674+ 65E2 45 4D 49 54 >                db      "EMITC"               // name string in 7-bit ascii, but
 674+ 65E6 43          >
 674+ 65E7             >                org     $-1                 // alter last byte of Name just above to set
 674+ 65E6 C3          >                db      {b $} | END_BIT     // msb as name end
 674+ 65E7             >
 674+ 65E7 AA 65       >                dw      last_NFA            // Link to previous definition Name
 674+ 65E9             >EMITC:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 674+ 65E9 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 674+ 65E9 ~           >
 674+ 65E9 ~           >
 674+ 65E9             >                endif           ; ok        // for other definitions it "points" the correct handler
 674+ 65E9             >                // Use of "; ok" to suppress "warning[fwdref]"
 674+ 65E9             >
 674+ 65E9             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 675+ 65E9 E1                           pop     hl
 676+ 65EA 7D                           ld      a, l
 677+ 65EB              Emitc_Ptr:
 678+ 65EB C5                           push    bc
 679+ 65EC D5                           push    de
 680+ 65ED DD E5                        push    ix
 681+ 65EF D7                           rst     $10
 682+ 65F0 DD E1                        pop     ix
 683+ 65F2 D1                           pop     de
 684+ 65F3 C1                           pop     bc
 685+ 65F4 3E FF                        ld      a, 255            // max possible
 686+ 65F6 32 8C 5C                     ld      (SCR_CT), a
 687+ 65F9                              next
 687+ 65F9 DD E9       >                jp      (ix)
 688+ 65FB
 689+ 65FB              //  ______________________________________________________________________
 690+ 65FB              //
 691+ 65FB              // cr           --
 692+ 65FB              // send a CR via EMITC
 693+ 65FB                              New_Def CR, "CR", is_code, is_normal
 693+ 65FB             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 693+ 65FB             >
 693+ 65FB             >                // dummy db directives used to calculate length of namec
 693+ 65FB 43 52       >                db      "CR"
 693+ 65FD             >len_NFA         defl    $ - temp_NFA
 693+ 65FD             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 693+ 65FB             >
 693+ 65FB 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 693+ 65FC 43 52       >                db      "CR"               // name string in 7-bit ascii, but
 693+ 65FE             >                org     $-1                 // alter last byte of Name just above to set
 693+ 65FD D2          >                db      {b $} | END_BIT     // msb as name end
 693+ 65FE             >
 693+ 65FE E1 65       >                dw      last_NFA            // Link to previous definition Name
 693+ 6600             >CR:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 693+ 6600 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 693+ 6600 ~           >
 693+ 6600 ~           >
 693+ 6600             >                endif           ; ok        // for other definitions it "points" the correct handler
 693+ 6600             >                // Use of "; ok" to suppress "warning[fwdref]"
 693+ 6600             >
 693+ 6600             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 694+ 6600
 695+ 6600 3E 0D                        ld      a, CR_CHAR
 696+ 6602 18 E7                        jr      Emitc_Ptr
 697+ 6604
 698+ 6604              Emitc_Vec:
 699+ 6604 45 66                        dw      C_Emit_Printable  // comma
 700+ 6606 4C 66                        dw      C_Emit_Bel        // bel
 701+ 6608 45 66                        dw      C_Emit_Printable  // bs
 702+ 660A 64 66                        dw      C_Emit_Tab        // tab
 703+ 660C 45 66                        dw      C_Emit_Printable  // cr
 704+ 660E 6B 66                        dw      C_Emit_NL         // lf (unix newline)
 705+ 6610 45 66                        dw      C_Emit_Printable  // blank
 706+ 6612 45 66                        dw      C_Emit_Printable  // blank
 707+ 6614
 708+ 6614              Emit_Selector_Start:
 709+ 6614 06                           db      $06                 // comma
 710+ 6615 07                           db      $07                 // bel
 711+ 6616 08                           db      $08                 // bs
 712+ 6617 09                           db      $09                 // tab
 713+ 6618 0D                           db      $0D                 // cr
 714+ 6619 0A                           db      $0A                 // lf (unix newline)
 715+ 661A 20                           db      $20
 716+ 661B              Emit_Selector_End:
 717+ 661B 20                           db      $20
 718+ 661C
 719+ 661C              //  ______________________________________________________________________
 720+ 661C              //
 721+ 661C              // (?emit)      c1 -- c2 | c1
 722+ 661C              // decode a character to be sent via EMIT
 723+ 661C              // search first the Emit_Selector table, if found jump to the corresponding routine in Emit_Vector
 724+ 661C              // the routine should resolve anything and convert the character anyway.
 725+ 661C                              New_Def C_EMIT, "(?EMIT)", is_code, is_normal
 725+ 661C             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 725+ 661C             >
 725+ 661C             >                // dummy db directives used to calculate length of namec
 725+ 661C 28 3F 45 4D >                db      "(?EMIT)"
 725+ 6620 49 54 29    >
 725+ 6623             >len_NFA         defl    $ - temp_NFA
 725+ 6623             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 725+ 661C             >
 725+ 661C 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 725+ 661D 28 3F 45 4D >                db      "(?EMIT)"               // name string in 7-bit ascii, but
 725+ 6621 49 54 29    >
 725+ 6624             >                org     $-1                 // alter last byte of Name just above to set
 725+ 6623 A9          >                db      {b $} | END_BIT     // msb as name end
 725+ 6624             >
 725+ 6624 FB 65       >                dw      last_NFA            // Link to previous definition Name
 725+ 6626             >C_EMIT:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 725+ 6626 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 725+ 6626 ~           >
 725+ 6626 ~           >
 725+ 6626             >                endif           ; ok        // for other definitions it "points" the correct handler
 725+ 6626             >                // Use of "; ok" to suppress "warning[fwdref]"
 725+ 6626             >
 725+ 6626             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 726+ 6626 D9                           exx
 727+ 6627 D1                           pop     de
 728+ 6628 7B                           ld      a, e                //  de has c1
 729+ 6629 E6 7F                        and     $7F                 // 7-bit ascii only
 730+ 662B                              // push    bc                  // save Instruction Pointer
 731+ 662B 01 08 00                     ld      bc, Emit_Selector_End - Emit_Selector_Start + 1
 732+ 662E 21 1B 66                     ld      hl, Emit_Selector_End
 733+ 6631 ED B9                        cpdr                        // search for c1 in Emit_Selector table, backward
 734+ 6633 20 0A                        jr      nz, C_Emit_Not_Found
 735+ 6635                                  // Found then decode it
 736+ 6635 21 04 66                         ld      hl, Emitc_Vec
 737+ 6638 09                               add     hl, bc
 738+ 6639 09                               add     hl, bc
 739+ 663A 5E                               ld      e, (hl)
 740+ 663B 23                               inc     hl
 741+ 663C 56                               ld      d, (hl)
 742+ 663D EB                               ex      de, hl
 743+ 663E                                  // pop     bc                  // restore Instruction Pointer
 744+ 663E E9                               jp      (hl)                // one of the following labels
 745+ 663F              C_Emit_Not_Found:
 746+ 663F                              // pop     bc                  // restore Instruction Pointer
 747+ 663F FE 20                        cp      BLANK_CHAR          // cp $20 non-printable check
 748+ 6641 30 02                        jr      nc, C_Emit_Printable
 749+ 6643 3E 00                            ld      a, NUL_CHAR         // NUL is never "printed"
 750+ 6645              C_Emit_Printable:
 751+ 6645 6F                           ld      l, a
 752+ 6646 26 00                        ld      h, 0
 753+ 6648 E5                           push    hl
 754+ 6649 D9                           exx
 755+ 664A                              next
 755+ 664A DD E9       >                jp      (ix)
 756+ 664C
 757+ 664C              C_Emit_Bel:
 758+ 664C D9                            exx
 759+ 664D C5                           push    bc                  // save Instruction Pointer
 760+ 664E D5                           push    de
 761+ 664F 11 00 01                     ld      de, $0100
 762+ 6652 21 00 02                     ld      hl, $0200
 763+ 6655 DD E5                        push    ix                  // save Next Pointer
 764+ 6657 CD B6 03                     call    $03B6               // bleep Standard-ROM routine
 765+ 665A DD E1                        pop     ix                  // restore Next Pointer
 766+ 665C D1                           pop     de
 767+ 665D C1                           pop     bc                  // restore Instruction Pointer
 768+ 665E 21 00 00                     ld      hl, NUL_CHAR
 769+ 6661 E5                           push    hl
 770+ 6662                              next
 770+ 6662 DD E9       >                jp      (ix)
 771+ 6664
 772+ 6664 21 06 00     C_Emit_Tab:     ld      hl, COMMA_CHAR
 773+ 6667 E5                           push    hl
 774+ 6668 D9                           exx
 775+ 6669                              next
 775+ 6669 DD E9       >                jp      (ix)
 776+ 666B
 777+ 666B 21 0D 00     C_Emit_NL       ld      hl, CR_CHAR           // 0x0A --> 0x0D  à la Spectrum
 778+ 666E E5                           push    hl
 779+ 666F D9                           exx
 780+ 6670                              next
 780+ 6670 DD E9       >                jp      (ix)
 781+ 6672
 782+ 6672              //  ______________________________________________________________________
 783+ 6672
 784+ 6672              Key_Table:
 785+ 6672 E2                           db      $E2                 //  0: STOP  --> SYMBOL+A : ~
 786+ 6673 C3                           db      $C3                 //  1: NOT   --> SYMBOL+S : |
 787+ 6674 CD                           db      $CD                 //  2: STEP  --> SYMBOl+D : //
 788+ 6675 CC                           db      $CC                 //  3: TO    --> SYMBOL+F : {
 789+ 6676 CB                           db      $CB                 //  4: THEN  --> SYMBOL+G : }
 790+ 6677 C6                           db      $C6                 //  5: AND   --> SYMBOL+Y : [
 791+ 6678 C5                           db      $C5                 //  6: OR    --> SYMBOL+U : ]
 792+ 6679 AC                           db      $AC                 //  7: AT    --> SYMBOL+I : (C) copyright symbol
 793+ 667A C7                           db      $C7                 //  8: <=    --> same as SHIFT-1 [EDIT]
 794+ 667B C8                           db      $C8                 //  9: >=    --> same as SHIFT-0 [BACKSPACE]
 795+ 667C C9                           db      $C9                 // 10: <>    --> SYMBOL+W is the same as CAPS (toggle) SHIFT+2
 796+ 667D              Key_MapTo:
 797+ 667D 06                           db      $06                 // 10: SYMBOL+W is the same as CAPS (toggle) SHIFT+2
 798+ 667E 0C                           db      $0C                 //  9: same as SHIFT-0 [BACKSPACE]
 799+ 667F 07                           db      $07                 //  8: same as SHIFT-1 [EDIT]
 800+ 6680 7F                           db      $7F                 //  7: SYMBOL+I : (C) copyright symbol
 801+ 6681 5D                           db      $5D                 //  6: SYMBOL+U : ]
 802+ 6682 5B                           db      $5B                 //  5: SYMBOL+Y : [
 803+ 6683 7D                           db      $7D                 //  4: SYMBOL+G : }
 804+ 6684 7B                           db      $7B                 //  3: SYMBOL+F : {
 805+ 6685 5C                           db      $5C                 //  2: SYMBOl+D : //
 806+ 6686 7C                           db      $7C                 //  1: SYMBOL+S : |
 807+ 6687 7E                           db      $7E                 //  0: SYMBOL+A : ~
 808+ 6688
 809+ 6688              //  ______________________________________________________________________
 810+ 6688              //
 811+ 6688              // curs         -- c
 812+ 6688              // wait for a keypress
 813+ 6688              // This definition need Standard ROM Interrupt to be served
 814+ 6688
 815+ 6688                              New_Def CUR, "CURS", is_code, is_normal
 815+ 6688             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 815+ 6688             >
 815+ 6688             >                // dummy db directives used to calculate length of namec
 815+ 6688 43 55 52 53 >                db      "CURS"
 815+ 668C             >len_NFA         defl    $ - temp_NFA
 815+ 668C             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 815+ 6688             >
 815+ 6688 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 815+ 6689 43 55 52 53 >                db      "CURS"               // name string in 7-bit ascii, but
 815+ 668D             >                org     $-1                 // alter last byte of Name just above to set
 815+ 668C D3          >                db      {b $} | END_BIT     // msb as name end
 815+ 668D             >
 815+ 668D 1C 66       >                dw      last_NFA            // Link to previous definition Name
 815+ 668F             >CUR:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 815+ 668F ~           >                call    runcode ; ok        // for primitive definitions  actual code
 815+ 668F ~           >
 815+ 668F ~           >
 815+ 668F             >                endif           ; ok        // for other definitions it "points" the correct handler
 815+ 668F             >                // Use of "; ok" to suppress "warning[fwdref]"
 815+ 668F             >
 815+ 668F             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 816+ 668F
 817+ 668F C5                           push    bc                  // save Instruction Pointer
 818+ 6690 D5                           push    de                  // save Return Stack Pointer
 819+ 6691 DD E5                        push    ix
 820+ 6693 ED 73 92 63                  ld      (SP_Saved), sp      // be sure to not to be paged out.
 821+ 6697 31 61 63                     ld      sp, Cold_origin - 5 // maybe $8000 in the future...
 822+ 669A FD CB 01 AE                  res     5, (iy + 1)         // FLAGS (5C3A+1)
 823+ 669E
 824+ 669E              Cur_Wait:
 825+ 669E 76                               halt
 826+ 669F 3E 02                            ld      a, 2                // selec channel #2 (Upper Video)
 827+ 66A1 CD 01 16                         call    $1601               // SELECT Standard-ROM Routine
 828+ 66A4
 829+ 66A4                                  // software-flash: flips face every 320 ms
 830+ 66A4 3E 10                            ld      a, $10              // Timing based
 831+ 66A6 FD A6 3E                         and     (iy + $3E)          // FRAMES (5C3A+3E)
 832+ 66A9
 833+ 66A9 3A 8C 63                         ld      a, (Block_Face)     // see origin.asm
 834+ 66AC 20 0C                            jr      nz, Cur_Cursor
 835+ 66AE 3A 8D 63                             ld      a, (Half_Face)      // see origin.asm
 836+ 66B1 FD CB 30 5E                          bit     3, (iy + $30)       // FLAGS2 (5C3A+$30) that is CAPS-LOCK
 837+ 66B5 28 03                                jr      z, Cur_Cursor
 838+ 66B7 3A 8E 63                                 ld      a, (Underscore_Face) // see origin
 839+ 66BA              Cur_Cursor:
 840+ 66BA D7                               rst     $10
 841+ 66BB 3E 08                            ld      a, BACKSPACE_CHAR    // backspace
 842+ 66BD D7                               rst     $10
 843+ 66BE
 844+ 66BE FD CB 01 6E                      bit     5, (iy + 1)         // FLAGS (5C3A+1)
 845+ 66C2 28 DA                        jr      z, Cur_Wait
 846+ 66C4
 847+ 66C4 76                           halt    // this is to sync flashing cursor.
 848+ 66C5
 849+ 66C5 3E 20                        ld      a, BLANK_CHAR       // space to blank cursor
 850+ 66C7 D7                           rst     $10
 851+ 66C8 3E 08                        ld      a, BACKSPACE_CHAR   // backspace
 852+ 66CA D7                           rst     $10
 853+ 66CB
 854+ 66CB ED 7B 92 63                  ld      sp, (SP_Saved)
 855+ 66CF
 856+ 66CF DD E1                        pop     ix
 857+ 66D1 D1                           pop     de                  // Restore Return Stack Pointer
 858+ 66D2 C1                           pop     bc                  // Restore Instruction Pointer
 859+ 66D3                              next
 859+ 66D3 DD E9       >                jp      (ix)
 860+ 66D5
 861+ 66D5
 862+ 66D5              //  ______________________________________________________________________
 863+ 66D5              //
 864+ 66D5              // key          -- c
 865+ 66D5              // This definition need Standard ROM Interrupt to be served
 866+ 66D5
 867+ 66D5                              New_Def KEY, "KEY", is_code, is_normal
 867+ 66D5             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 867+ 66D5             >
 867+ 66D5             >                // dummy db directives used to calculate length of namec
 867+ 66D5 4B 45 59    >                db      "KEY"
 867+ 66D8             >len_NFA         defl    $ - temp_NFA
 867+ 66D8             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 867+ 66D5             >
 867+ 66D5 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 867+ 66D6 4B 45 59    >                db      "KEY"               // name string in 7-bit ascii, but
 867+ 66D9             >                org     $-1                 // alter last byte of Name just above to set
 867+ 66D8 D9          >                db      {b $} | END_BIT     // msb as name end
 867+ 66D9             >
 867+ 66D9 88 66       >                dw      last_NFA            // Link to previous definition Name
 867+ 66DB             >KEY:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 867+ 66DB ~           >                call    runcode ; ok        // for primitive definitions  actual code
 867+ 66DB ~           >
 867+ 66DB ~           >
 867+ 66DB             >                endif           ; ok        // for other definitions it "points" the correct handler
 867+ 66DB             >                // Use of "; ok" to suppress "warning[fwdref]"
 867+ 66DB             >
 867+ 66DB             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 868+ 66DB
 869+ 66DB C5                           push    bc                  // Save Instruction Pointer
 870+ 66DC
 871+ 66DC              Key_Wait:
 872+ 66DC FD CB 01 6E                      bit     5, (iy + 1)         // FLAGS (5C3A+1)
 873+ 66E0 28 FA                        jr      z, Key_Wait
 874+ 66E2
 875+ 66E2 3A 08 5C                     ld      a, (LASTK)          // get typed character (5C08)
 876+ 66E5
 877+ 66E5                              // decode character from above table
 878+ 66E5 21 72 66                     ld      hl, Key_Table
 879+ 66E8 01 0B 00                     ld      bc, $000B
 880+ 66EB ED B1                        cpir
 881+ 66ED 20 05                        jr      nz, Key_DontMap
 882+ 66EF 21 7D 66                         ld      hl, Key_MapTo
 883+ 66F2 09                               add     hl, bc
 884+ 66F3 7E                               ld      a, (hl)
 885+ 66F4 FE 06        Key_DontMap:    cp      $06                 // CAPS-LOCK management
 886+ 66F6 20 09                        jr      nz, Key_NoCapsLock
 887+ 66F8 21 6A 5C                         ld      hl, $5C6A           // FLAGS2
 888+ 66FB 7E                               ld      a, (hl)
 889+ 66FC EE 08                            xor     $08
 890+ 66FE 77                               ld      (hl), a
 891+ 66FF 3E 00                            ld      a, NUL_CHAR
 892+ 6701 6F           Key_NoCapsLock: ld      l, a
 893+ 6702 26 00                        ld      h, 0                // Prepare TOS
 894+ 6704
 895+ 6704 FD CB 01 AE                  res     5, (iy + 1)         // FLAGS (5C3A+1)
 896+ 6708
 897+ 6708 C1                           pop     bc                  // Restore Instruction Pointer
 898+ 6709
 899+ 6709                              psh1
 899+ 6709 E5          >                push    hl
 899+ 670A DD E9       >                jp      (ix)
 900+ 670C
 901+ 670C
 902+ 670C              //  ______________________________________________________________________
 903+ 670C              //
 904+ 670C              // click        --
 905+ 670C              // This definition need Standard ROM Interrupt to be served
 906+ 670C              //
 907+ 670C              //              New_Def CLICK, "CLICK", is_code, is_normal
 908+ 670C              //
 909+ 670C              //                push    bc
 910+ 670C              //              ld      a, ($5C48)          // BORDCR system variable
 911+ 670C              //              rra
 912+ 670C              //              rra
 913+ 670C              //              rra
 914+ 670C              //              or      $18                 // quick'n'dirty click
 915+ 670C              //              out     ($fe), a
 916+ 670C              //              ld      b, 0
 917+ 670C              //              djnz    $                   // wait loop
 918+ 670C              //              xor     $18
 919+ 670C              //              out     ($fe), a
 920+ 670C              //                pop     bc
 921+ 670C
 922+ 670C              //              next
 923+ 670C
 924+ 670C              //  ______________________________________________________________________
 925+ 670C              //
 926+ 670C              // key?         -- f
 927+ 670C              // key available
 928+ 670C              //
 929+ 670C              //              New_Def KEY_Q, "KEY?", is_code, is_normal
 930+ 670C              //
 931+ 670C              //              ld      hl, 0000
 932+ 670C              //              bit     5, (iy + 1)         // FLAGS (5C3A+1)
 933+ 670C              //              jr      z, Key_Q
 934+ 670C              //                  dec     hl
 935+ 670C              // Key_Q:
 936+ 670C              //                psh1
 937+ 670C              //              next
 938+ 670C
 939+ 670C              //  ______________________________________________________________________
 940+ 670C              //
 941+ 670C              // ?terminal    -- FALSE | TRUE
 942+ 670C              // test for BREAK keypress
 943+ 670C                              New_Def QTERMINAL, "?TERMINAL", is_code, is_normal
 943+ 670C             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 943+ 670C             >
 943+ 670C             >                // dummy db directives used to calculate length of namec
 943+ 670C 3F 54 45 52 >                db      "?TERMINAL"
 943+ 6710 4D 49 4E 41 >
 943+ 6714 4C          >
 943+ 6715             >len_NFA         defl    $ - temp_NFA
 943+ 6715             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 943+ 670C             >
 943+ 670C 89          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 943+ 670D 3F 54 45 52 >                db      "?TERMINAL"               // name string in 7-bit ascii, but
 943+ 6711 4D 49 4E 41 >
 943+ 6715 4C          >
 943+ 6716             >                org     $-1                 // alter last byte of Name just above to set
 943+ 6715 CC          >                db      {b $} | END_BIT     // msb as name end
 943+ 6716             >
 943+ 6716 D5 66       >                dw      last_NFA            // Link to previous definition Name
 943+ 6718             >QTERMINAL:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 943+ 6718 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 943+ 6718 ~           >
 943+ 6718 ~           >
 943+ 6718             >                endif           ; ok        // for other definitions it "points" the correct handler
 943+ 6718             >                // Use of "; ok" to suppress "warning[fwdref]"
 943+ 6718             >
 943+ 6718             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 944+ 6718 D9                           exx
 945+ 6719 01 FE 7F                     ld      bc, $7ffe
 946+ 671C ED 50                        in      d, (c)
 947+ 671E 41                           ld      b, c
 948+ 671F ED 78                        in      a, (c)
 949+ 6721 B2                           or       d
 950+ 6722 1F                           rra
 951+ 6723 3F                           ccf
 952+ 6724 ED 62                        sbc     hl, hl
 953+ 6726 E5                           push    hl
 954+ 6727 D9                           exx
 955+ 6728                              next
 955+ 6728 DD E9       >                jp      (ix)
 956+ 672A
 957+ 672A
 958+ 672A              //  ______________________________________________________________________
 959+ 672A              //
 960+ 672A              // inkey        -- c | 0
 961+ 672A              // call ROM inkey$ routine, returns c or "zero".
 962+ 672A              //
 963+ 672A              //              New_Def INKEY, "INKEY", is_code, is_normal
 964+ 672A              //              push    bc
 965+ 672A              //              push    de
 966+ 672A              //              ld      (SP_Saved), sp
 967+ 672A              //              ld      sp, Cold_origin - 5
 968+ 672A              //              push    ix
 969+ 672A              //              call    $15E6                   // instead of 15E9
 970+ 672A              //              pop     ix
 971+ 672A              //              ld      sp, (SP_Saved)
 972+ 672A              //              ld      l, a
 973+ 672A              //              ld      h, 0
 974+ 672A              //              pop     de
 975+ 672A              //              pop     bc
 976+ 672A              //              psh1
 977+ 672A
 978+ 672A              //  ______________________________________________________________________
 979+ 672A              //
 980+ 672A              // select      n --
 981+ 672A              // selects the given channel number
 982+ 672A
 983+ 672A                              New_Def SELECT, "SELECT", is_code, is_normal
 983+ 672A             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 983+ 672A             >
 983+ 672A             >                // dummy db directives used to calculate length of namec
 983+ 672A 53 45 4C 45 >                db      "SELECT"
 983+ 672E 43 54       >
 983+ 6730             >len_NFA         defl    $ - temp_NFA
 983+ 6730             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 983+ 672A             >
 983+ 672A 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 983+ 672B 53 45 4C 45 >                db      "SELECT"               // name string in 7-bit ascii, but
 983+ 672F 43 54       >
 983+ 6731             >                org     $-1                 // alter last byte of Name just above to set
 983+ 6730 D4          >                db      {b $} | END_BIT     // msb as name end
 983+ 6731             >
 983+ 6731 0C 67       >                dw      last_NFA            // Link to previous definition Name
 983+ 6733             >SELECT:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 983+ 6733 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 983+ 6733 ~           >
 983+ 6733 ~           >
 983+ 6733             >                endif           ; ok        // for other definitions it "points" the correct handler
 983+ 6733             >                // Use of "; ok" to suppress "warning[fwdref]"
 983+ 6733             >
 983+ 6733             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 984+ 6733 E1                           pop     hl
 985+ 6734 C5                           push    bc
 986+ 6735 D5                           push    de
 987+ 6736 7D                           ld      a, l
 988+ 6737 ED 73 92 63                  ld      (SP_Saved), sp
 989+ 673B 31 61 63                     ld      sp, Cold_origin - 5
 990+ 673E DD E5                        push    ix
 991+ 6740 CD 01 16                     call    $1601
 992+ 6743 DD E1                        pop     ix
 993+ 6745 ED 7B 92 63                  ld      sp, (SP_Saved)
 994+ 6749 D1                           pop     de
 995+ 674A C1                           pop     bc
 996+ 674B                              next
 996+ 674B DD E9       >                jp      (ix)
 997+ 674D
 998+ 674D              //  ______________________________________________________________________
 999+ 674D              //
1000+ 674D              // ZX Spectrum Next - Low Level disk primitives.
1001+ 674D              // this include is "here" for backward compatibility
1002+ 674D
1003+ 674D                              include "next-opt0.asm"
# file opened: C:\Zx\CSpect\Projects\vForth16_DIRECT_RP/source/next-opt0.asm
   1++674D              //  ______________________________________________________________________
   2++674D              //
   3++674D              //  next-opt.asm
   4++674D              //
   5++674D              //  ZX Spectrum Next - peculiar definitions
   6++674D              //  ______________________________________________________________________
   7++674D
   8++674D              //  ______________________________________________________________________
   9++674D              //
  10++674D              // f_seek       d u -- f
  11++674D              // Seek to position d in file-handle u.
  12++674D              // Return a false-flag 0 on success, True flag on error
  13++674D                              New_Def F_SEEK, "F_SEEK", is_code, is_normal
  13++674D             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  13++674D             >
  13++674D             >                // dummy db directives used to calculate length of namec
  13++674D 46 5F 53 45 >                db      "F_SEEK"
  13++6751 45 4B       >
  13++6753             >len_NFA         defl    $ - temp_NFA
  13++6753             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  13++674D             >
  13++674D 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  13++674E 46 5F 53 45 >                db      "F_SEEK"               // name string in 7-bit ascii, but
  13++6752 45 4B       >
  13++6754             >                org     $-1                 // alter last byte of Name just above to set
  13++6753 CB          >                db      {b $} | END_BIT     // msb as name end
  13++6754             >
  13++6754 2A 67       >                dw      last_NFA            // Link to previous definition Name
  13++6756             >F_SEEK:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
  13++6756 ~           >                call    runcode ; ok        // for primitive definitions  actual code
  13++6756 ~           >
  13++6756 ~           >
  13++6756             >                endif           ; ok        // for other definitions it "points" the correct handler
  13++6756             >                // Use of "; ok" to suppress "warning[fwdref]"
  13++6756             >
  13++6756             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  14++6756 D9                            exx
  15++6757 E1                            pop     hl                  // file-handle
  16++6758 7D                            ld      a, l
  17++6759 C1                            pop     bc                  // bc has high-word of d
  18++675A D1                            pop     de
  19++675B D9                           exx
  20++675C DD E5                        push    ix
  21++675E D5                           push    de
  22++675F C5                           push    bc                  // save Instruction Pointer
  23++6760 D9                            exx
  24++6761 DD 21 00 00                   ld      ix, 0
  25++6765 CF                            rst     $08
  26++6766 9F                            db      $9F
  27++6767              F_Seek_Exit:
  28++6767 C1                           pop     bc                  // restore Instruction Pointer
  29++6768 D1                           pop     de
  30++6769 DD E1                        pop     ix
  31++676B ED 62                        sbc     hl, hl              // to get 0 or -1
  32++676D
  33++676D                              psh1
  33++676D E5          >                push    hl
  33++676E DD E9       >                jp      (ix)
  34++6770
  35++6770              //  ______________________________________________________________________
  36++6770              //
  37++6770              // f_close      u -- f
  38++6770              // Close file-handle u.
  39++6770              // Return 0 on success, True flag on error
  40++6770
  41++6770                              New_Def F_CLOSE, "F_CLOSE", is_code, is_normal
  41++6770             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  41++6770             >
  41++6770             >                // dummy db directives used to calculate length of namec
  41++6770 46 5F 43 4C >                db      "F_CLOSE"
  41++6774 4F 53 45    >
  41++6777             >len_NFA         defl    $ - temp_NFA
  41++6777             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  41++6770             >
  41++6770 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  41++6771 46 5F 43 4C >                db      "F_CLOSE"               // name string in 7-bit ascii, but
  41++6775 4F 53 45    >
  41++6778             >                org     $-1                 // alter last byte of Name just above to set
  41++6777 C5          >                db      {b $} | END_BIT     // msb as name end
  41++6778             >
  41++6778 4D 67       >                dw      last_NFA            // Link to previous definition Name
  41++677A             >F_CLOSE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
  41++677A ~           >                call    runcode ; ok        // for primitive definitions  actual code
  41++677A ~           >
  41++677A ~           >
  41++677A             >                endif           ; ok        // for other definitions it "points" the correct handler
  41++677A             >                // Use of "; ok" to suppress "warning[fwdref]"
  41++677A             >
  41++677A             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  42++677A
  43++677A E1                           pop     hl
  44++677B 7D                           ld      a, l                // file-handle
  45++677C DD E5                        push    ix
  46++677E D5                           push    de
  47++677F C5                           push    bc                  // Save Instruction pointer
  48++6780 CF                           rst     $08
  49++6781 9B                           db      $9B
  50++6782 18 E3                        jr      F_Seek_Exit
  51++6784              //              pop     de
  52++6784              //              pop     bc
  53++6784              //              pop     ix
  54++6784              //              sbc     hl, hl
  55++6784              //              psh1
  56++6784
  57++6784              //  ______________________________________________________________________
  58++6784              //
  59++6784              // f_sync      u -- f
  60++6784              // Close file-handle u.
  61++6784              // Return 0 on success, True flag on error
  62++6784
  63++6784                              New_Def F_SYNC, "F_SYNC", is_code, is_normal
  63++6784             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  63++6784             >
  63++6784             >                // dummy db directives used to calculate length of namec
  63++6784 46 5F 53 59 >                db      "F_SYNC"
  63++6788 4E 43       >
  63++678A             >len_NFA         defl    $ - temp_NFA
  63++678A             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  63++6784             >
  63++6784 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  63++6785 46 5F 53 59 >                db      "F_SYNC"               // name string in 7-bit ascii, but
  63++6789 4E 43       >
  63++678B             >                org     $-1                 // alter last byte of Name just above to set
  63++678A C3          >                db      {b $} | END_BIT     // msb as name end
  63++678B             >
  63++678B 70 67       >                dw      last_NFA            // Link to previous definition Name
  63++678D             >F_SYNC:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
  63++678D ~           >                call    runcode ; ok        // for primitive definitions  actual code
  63++678D ~           >
  63++678D ~           >
  63++678D             >                endif           ; ok        // for other definitions it "points" the correct handler
  63++678D             >                // Use of "; ok" to suppress "warning[fwdref]"
  63++678D             >
  63++678D             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  64++678D E1                           pop     hl
  65++678E 7D                           ld      a, l                // file-handle
  66++678F DD E5                        push    ix
  67++6791 D5                           push    de
  68++6792 C5                           push    bc
  69++6793 CF                           rst     $08
  70++6794 9C                           db      $9C
  71++6795 18 D0                        jr      F_Seek_Exit
  72++6797              //              pop     de
  73++6797              //              pop     bc
  74++6797              //              pop     ix
  75++6797              //              sbc     hl, hl
  76++6797              //              psh1
  77++6797
  78++6797              //  ______________________________________________________________________
  79++6797              //
  80++6797              // f_fgetpos    u -- d f
  81++6797              // Seek to position d in file-handle u.
  82++6797              // Return a false-flag 0 on success, True flag on error
  83++6797                              New_Def F_FGETPOS, "F_FGETPOS", is_code, is_normal
  83++6797             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  83++6797             >
  83++6797             >                // dummy db directives used to calculate length of namec
  83++6797 46 5F 46 47 >                db      "F_FGETPOS"
  83++679B 45 54 50 4F >
  83++679F 53          >
  83++67A0             >len_NFA         defl    $ - temp_NFA
  83++67A0             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  83++6797             >
  83++6797 89          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  83++6798 46 5F 46 47 >                db      "F_FGETPOS"               // name string in 7-bit ascii, but
  83++679C 45 54 50 4F >
  83++67A0 53          >
  83++67A1             >                org     $-1                 // alter last byte of Name just above to set
  83++67A0 D3          >                db      {b $} | END_BIT     // msb as name end
  83++67A1             >
  83++67A1 84 67       >                dw      last_NFA            // Link to previous definition Name
  83++67A3             >F_FGETPOS:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
  83++67A3 ~           >                call    runcode ; ok        // for primitive definitions  actual code
  83++67A3 ~           >
  83++67A3 ~           >
  83++67A3             >                endif           ; ok        // for other definitions it "points" the correct handler
  83++67A3             >                // Use of "; ok" to suppress "warning[fwdref]"
  83++67A3             >
  83++67A3             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  84++67A3 E1                            pop     hl
  85++67A4 7D                            ld      a, l                // file-handle
  86++67A5 DD E5                         push    ix
  87++67A7 D5                            push    de
  88++67A8 C5                            push    bc
  89++67A9 CF                            rst     $08
  90++67AA A0                            db      $A0
  91++67AB D9                           exx
  92++67AC C1                           pop     bc                  // IP
  93++67AD D1                           pop     de                  // Return Stack Pointer
  94++67AE DD E1                        pop     ix
  95++67B0 D9                            exx
  96++67B1 D5                            push    de
  97++67B2 C5                            push    bc
  98++67B3 ED 62                         sbc     hl, hl
  99++67B5 E5                            push    hl
 100++67B6 D9                           exx
 101++67B7                              next
 101++67B7 DD E9       >                jp      (ix)
 102++67B9
 103++67B9              //  ______________________________________________________________________
 104++67B9              //
 105++67B9              // f_read       a b u -- n f
 106++67B9              // Read b bytes from file-handle u to address a
 107++67B9              // Return the actual number n of bytes read
 108++67B9              // Return 0 on success, True flag on error
 109++67B9                              New_Def F_READ, "F_READ", is_code, is_normal
 109++67B9             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 109++67B9             >
 109++67B9             >                // dummy db directives used to calculate length of namec
 109++67B9 46 5F 52 45 >                db      "F_READ"
 109++67BD 41 44       >
 109++67BF             >len_NFA         defl    $ - temp_NFA
 109++67BF             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 109++67B9             >
 109++67B9 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 109++67BA 46 5F 52 45 >                db      "F_READ"               // name string in 7-bit ascii, but
 109++67BE 41 44       >
 109++67C0             >                org     $-1                 // alter last byte of Name just above to set
 109++67BF C4          >                db      {b $} | END_BIT     // msb as name end
 109++67C0             >
 109++67C0 97 67       >                dw      last_NFA            // Link to previous definition Name
 109++67C2             >F_READ:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 109++67C2 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 109++67C2 ~           >
 109++67C2 ~           >
 109++67C2             >                endif           ; ok        // for other definitions it "points" the correct handler
 109++67C2             >                // Use of "; ok" to suppress "warning[fwdref]"
 109++67C2             >
 109++67C2             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 110++67C2 D9                            exx
 111++67C3 E1                            pop     hl
 112++67C4 7D                            ld      a, l                // file-handle
 113++67C5 C1                            pop     bc                  // bc has bytes to read
 114++67C6 DD E3                         ex      (sp), ix            // ix has address
 115++67C8 D9                           exx
 116++67C9 D5                           push    de                  // Save Return Stack pointer
 117++67CA C5                           push    bc                  // Save Instruction pointer
 118++67CB D9                            exx
 119++67CC CF                            rst     $08
 120++67CD 9D                            db      $9D
 121++67CE              F_Read_Exit:
 122++67CE D9                           exx
 123++67CF C1                           pop     bc                  // Restore Instruction pointer
 124++67D0 D1                           pop     de                  // Restore Return Stack pointer
 125++67D1 DD E1                        pop     ix                  // Restore ix
 126++67D3 D9                            exx
 127++67D4 D5                            push    de                  // bytes involved in i/o operation
 128++67D5 ED 62                         sbc     hl, hl
 129++67D7 E5                            push    hl
 130++67D8 D9                           exx
 131++67D9                              next
 131++67D9 DD E9       >                jp      (ix)
 132++67DB
 133++67DB              //  ______________________________________________________________________
 134++67DB              //
 135++67DB              // f_write      a b u -- n f
 136++67DB              // Write bytes currently stored at address a to file-handle u.
 137++67DB              // Return the actual n bytes written and 0 on success, True flag on error.
 138++67DB                              New_Def F_WRITE, "F_WRITE", is_code, is_normal
 138++67DB             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 138++67DB             >
 138++67DB             >                // dummy db directives used to calculate length of namec
 138++67DB 46 5F 57 52 >                db      "F_WRITE"
 138++67DF 49 54 45    >
 138++67E2             >len_NFA         defl    $ - temp_NFA
 138++67E2             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 138++67DB             >
 138++67DB 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 138++67DC 46 5F 57 52 >                db      "F_WRITE"               // name string in 7-bit ascii, but
 138++67E0 49 54 45    >
 138++67E3             >                org     $-1                 // alter last byte of Name just above to set
 138++67E2 C5          >                db      {b $} | END_BIT     // msb as name end
 138++67E3             >
 138++67E3 B9 67       >                dw      last_NFA            // Link to previous definition Name
 138++67E5             >F_WRITE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 138++67E5 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 138++67E5 ~           >
 138++67E5 ~           >
 138++67E5             >                endif           ; ok        // for other definitions it "points" the correct handler
 138++67E5             >                // Use of "; ok" to suppress "warning[fwdref]"
 138++67E5             >
 138++67E5             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 139++67E5 D9                            exx
 140++67E6 E1                            pop     hl
 141++67E7 7D                            ld      a, l                // file-handle
 142++67E8 C1                            pop     bc                  // bc has bytes to read
 143++67E9 DD E3                         ex      (sp), ix            // ix has address
 144++67EB D9                           exx
 145++67EC D5                           push    de                  // Save Return Stack pointer
 146++67ED C5                           push    bc                  // Save Instruction pointer
 147++67EE D9                            exx
 148++67EF CF                            rst     $08
 149++67F0 9E                            db      $9E
 150++67F1 18 DB                         jr F_Read_Exit
 151++67F3              //                exx
 152++67F3              //                pop     de                  // Restore Return Stack pointer
 153++67F3              //                pop     bc                  // Restore Instruction pointer
 154++67F3              //                pop     ix                  // Restore ix
 155++67F3              //                 exx
 156++67F3              //                 push    de                  // bytes involved in i/o operation
 157++67F3              //                 sbc     hl, hl
 158++67F3              //                 push    hl
 159++67F3              //                exx
 160++67F3              //                next
 161++67F3
 162++67F3              //  ______________________________________________________________________
 163++67F3              //
 164++67F3              // f_open       a1 a2 b -- u f
 165++67F3              // open a file
 166++67F3              // a1 (filespec) is a null-terminated string, such as produced by ," definition
 167++67F3              // a2 is address to an 8-byte header data used in some cases.
 168++67F3              // b is access mode-byte, that is a combination of:
 169++67F3              // any/all of:
 170++67F3              //   esx_mode_read          $01 request read access
 171++67F3              //   esx_mode_write         $02 request write access
 172++67F3              //   esx_mode_use_header    $40 read/write +3DOS header
 173++67F3              // plus one of:
 174++67F3              //   esx_mode_open_exist    $00 only open existing file
 175++67F3              //   esx_mode_open_creat    $08 open existing or create file
 176++67F3              //   esx_mode_creat_noexist $04 create new file, error if exists
 177++67F3              //   esx_mode_creat_trunc   $0c create new file, delete existing
 178++67F3              // Return file-handle u and 0 on success, True flag on error
 179++67F3                              New_Def F_OPEN, "F_OPEN", is_code, is_normal
 179++67F3             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 179++67F3             >
 179++67F3             >                // dummy db directives used to calculate length of namec
 179++67F3 46 5F 4F 50 >                db      "F_OPEN"
 179++67F7 45 4E       >
 179++67F9             >len_NFA         defl    $ - temp_NFA
 179++67F9             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 179++67F3             >
 179++67F3 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 179++67F4 46 5F 4F 50 >                db      "F_OPEN"               // name string in 7-bit ascii, but
 179++67F8 45 4E       >
 179++67FA             >                org     $-1                 // alter last byte of Name just above to set
 179++67F9 CE          >                db      {b $} | END_BIT     // msb as name end
 179++67FA             >
 179++67FA DB 67       >                dw      last_NFA            // Link to previous definition Name
 179++67FC             >F_OPEN:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 179++67FC ~           >                call    runcode ; ok        // for primitive definitions  actual code
 179++67FC ~           >
 179++67FC ~           >
 179++67FC             >                endif           ; ok        // for other definitions it "points" the correct handler
 179++67FC             >                // Use of "; ok" to suppress "warning[fwdref]"
 179++67FC             >
 179++67FC             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 180++67FC D9                            exx
 181++67FD C1                            pop     bc                  // file-mode
 182++67FE 41                            ld      b, c                // file-mode
 183++67FF D1                            pop     de                  // 8-bytes buffer if any
 184++6800 DD E3                         ex      (sp), ix            // filespec nul-terminated
 185++6802 D9                           exx
 186++6803 D5                           push    de                  // Save Return Stack pointer
 187++6804 C5                           push    bc                  // Save Instruction pointer
 188++6805 D9                            exx
 189++6806 3E 2A                         ld      a, "*"
 190++6808 CF                            rst     $08
 191++6809 9A                            db      $9A
 192++680A              F_Open_Exit:
 193++680A 5F                            ld      e, a                // return the handle-number
 194++680B 16 00                         ld      d, 0
 195++680D 18 BF                        jr F_Read_Exit
 196++680F
 197++680F              //   \ CREATE FILENAME ," test.txt"   \ new Counted String
 198++680F              //   \ FILENAME 1+ PAD 1 F_OPEN
 199++680F              //   \ DROP
 200++680F              //   \ F_CLOSE
 201++680F
 202++680F
 203++680F              //  ______________________________________________________________________
 204++680F              //
 205++680F              // f_opendir    a1 -- u f
 206++680F              // open a file
 207++680F                              New_Def F_OPENDIR, "F_OPENDIR", is_code, is_normal
 207++680F             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 207++680F             >
 207++680F             >                // dummy db directives used to calculate length of namec
 207++680F 46 5F 4F 50 >                db      "F_OPENDIR"
 207++6813 45 4E 44 49 >
 207++6817 52          >
 207++6818             >len_NFA         defl    $ - temp_NFA
 207++6818             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 207++680F             >
 207++680F 89          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 207++6810 46 5F 4F 50 >                db      "F_OPENDIR"               // name string in 7-bit ascii, but
 207++6814 45 4E 44 49 >
 207++6818 52          >
 207++6819             >                org     $-1                 // alter last byte of Name just above to set
 207++6818 D2          >                db      {b $} | END_BIT     // msb as name end
 207++6819             >
 207++6819 F3 67       >                dw      last_NFA            // Link to previous definition Name
 207++681B             >F_OPENDIR:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 207++681B ~           >                call    runcode ; ok        // for primitive definitions  actual code
 207++681B ~           >
 207++681B ~           >
 207++681B             >                endif           ; ok        // for other definitions it "points" the correct handler
 207++681B             >                // Use of "; ok" to suppress "warning[fwdref]"
 207++681B             >
 207++681B             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 208++681B DD E3                        ex      (sp), ix            // filespec nul-terminated
 209++681D D5                           push    de                  // Save Return Stack pointer
 210++681E C5                           push    bc                  // Save Instruction pointer
 211++681F 06 10                        ld      b, $10              // file-mode
 212++6821 3E 43                        ld      a, "C"
 213++6823 CF                           rst     $08
 214++6824 A3                           db      $A3
 215++6825 18 E3                        jr      F_Open_Exit
 216++6827
 217++6827
 218++6827              //  ______________________________________________________________________
 219++6827              //
 220++6827              // f_readdir    a1 a2 b -- u f
 221++6827              // open a file
 222++6827                              New_Def F_READDIR, "F_READDIR", is_code, is_normal
 222++6827             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 222++6827             >
 222++6827             >                // dummy db directives used to calculate length of namec
 222++6827 46 5F 52 45 >                db      "F_READDIR"
 222++682B 41 44 44 49 >
 222++682F 52          >
 222++6830             >len_NFA         defl    $ - temp_NFA
 222++6830             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 222++6827             >
 222++6827 89          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 222++6828 46 5F 52 45 >                db      "F_READDIR"               // name string in 7-bit ascii, but
 222++682C 41 44 44 49 >
 222++6830 52          >
 222++6831             >                org     $-1                 // alter last byte of Name just above to set
 222++6830 D2          >                db      {b $} | END_BIT     // msb as name end
 222++6831             >
 222++6831 0F 68       >                dw      last_NFA            // Link to previous definition Name
 222++6833             >F_READDIR:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 222++6833 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 222++6833 ~           >
 222++6833 ~           >
 222++6833             >                endif           ; ok        // for other definitions it "points" the correct handler
 222++6833             >                // Use of "; ok" to suppress "warning[fwdref]"
 222++6833             >
 222++6833             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 223++6833 D9                            exx
 224++6834 E1                            pop     hl
 225++6835 7D                            ld      a, l
 226++6836 D1                            pop     de
 227++6837 DD E3                         ex      (sp), ix            // filespec nul-terminated
 228++6839 D9                           exx
 229++683A D5                           push    de                  // Save Return Stack pointer
 230++683B C5                           push    bc                  // Save Instruction pointer
 231++683C D9                            exx
 232++683D CF                            rst     $08
 233++683E A4                            db      $A4
 234++683F 18 C9                         jr      F_Open_Exit
 235++6841
# file closed: C:\Zx\CSpect\Projects\vForth16_DIRECT_RP/source/next-opt0.asm
1004+ 6841
1005+ 6841
1006+ 6841              //  ______________________________________________________________________
1007+ 6841              //
1008+ 6841              // cmove    a1 a2 u --
1009+ 6841              // If u > 0, moves memory content starting at address a1 for n bytes long
1010+ 6841              // storing then starting at address addr2.
1011+ 6841              // The content of a1 is moved first. See CMOVE> also.
1012+ 6841                              New_Def CMOVE, "CMOVE", is_code, is_normal
1012+ 6841             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1012+ 6841             >
1012+ 6841             >                // dummy db directives used to calculate length of namec
1012+ 6841 43 4D 4F 56 >                db      "CMOVE"
1012+ 6845 45          >
1012+ 6846             >len_NFA         defl    $ - temp_NFA
1012+ 6846             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1012+ 6841             >
1012+ 6841 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1012+ 6842 43 4D 4F 56 >                db      "CMOVE"               // name string in 7-bit ascii, but
1012+ 6846 45          >
1012+ 6847             >                org     $-1                 // alter last byte of Name just above to set
1012+ 6846 C5          >                db      {b $} | END_BIT     // msb as name end
1012+ 6847             >
1012+ 6847 27 68       >                dw      last_NFA            // Link to previous definition Name
1012+ 6849             >CMOVE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1012+ 6849 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1012+ 6849 ~           >
1012+ 6849 ~           >
1012+ 6849             >                endif           ; ok        // for other definitions it "points" the correct handler
1012+ 6849             >                // Use of "; ok" to suppress "warning[fwdref]"
1012+ 6849             >
1012+ 6849             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1013+ 6849 D9                           exx
1014+ 684A
1015+ 684A C1                           pop     bc                  // bc has counter
1016+ 684B D1                           pop     de                  // de now has dest
1017+ 684C E1                           pop     hl                 // hl has source, save Instruction Pointer
1018+ 684D 78                           ld      a, b
1019+ 684E B1                           or      c
1020+ 684F 28 02                        jr      z, Cmove_NoMove
1021+ 6851 ED B0                            ldir
1022+ 6853              Cmove_NoMove:
1023+ 6853 D9                           exx
1024+ 6854
1025+ 6854                              next
1025+ 6854 DD E9       >                jp      (ix)
1026+ 6856
1027+ 6856              //  ______________________________________________________________________
1028+ 6856              //
1029+ 6856              // cmove>    a1 a2 u --
1030+ 6856              // If u > 0, moves memory content starting at address a1 for n bytes long
1031+ 6856              // storing then starting at address addr2.
1032+ 6856              // The content of a1 is moved last. See cmove.
1033+ 6856                              New_Def CMOVE_TO, "CMOVE>", is_code, is_normal
1033+ 6856             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1033+ 6856             >
1033+ 6856             >                // dummy db directives used to calculate length of namec
1033+ 6856 43 4D 4F 56 >                db      "CMOVE>"
1033+ 685A 45 3E       >
1033+ 685C             >len_NFA         defl    $ - temp_NFA
1033+ 685C             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1033+ 6856             >
1033+ 6856 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1033+ 6857 43 4D 4F 56 >                db      "CMOVE>"               // name string in 7-bit ascii, but
1033+ 685B 45 3E       >
1033+ 685D             >                org     $-1                 // alter last byte of Name just above to set
1033+ 685C BE          >                db      {b $} | END_BIT     // msb as name end
1033+ 685D             >
1033+ 685D 41 68       >                dw      last_NFA            // Link to previous definition Name
1033+ 685F             >CMOVE_TO:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1033+ 685F ~           >                call    runcode ; ok        // for primitive definitions  actual code
1033+ 685F ~           >
1033+ 685F ~           >
1033+ 685F             >                endif           ; ok        // for other definitions it "points" the correct handler
1033+ 685F             >                // Use of "; ok" to suppress "warning[fwdref]"
1033+ 685F             >
1033+ 685F             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1034+ 685F D9                           exx
1035+ 6860
1036+ 6860 C1                           pop     bc                  // bc has counter
1037+ 6861 D1                           pop     de                  // de has dest
1038+ 6862 E1                           pop     hl                  // hl has source, save Instruction Pointer
1039+ 6863 78                           ld      a, b
1040+ 6864 B1                           or      c
1041+ 6865 28 08                        jr      z, CmoveV_NoMove
1042+ 6867 EB                               ex      de, hl              // compute address to
1043+ 6868 09                               add     hl, bc              // operate backward
1044+ 6869 2B                               dec     hl
1045+ 686A EB                               ex      de, hl
1046+ 686B 09                               add     hl, bc
1047+ 686C 2B                               dec     hl
1048+ 686D ED B8                            lddr                        // backward
1049+ 686F              CmoveV_NoMove:
1050+ 686F D9                           exx
1051+ 6870
1052+ 6870                              next
1052+ 6870 DD E9       >                jp      (ix)
1053+ 6872
1054+ 6872              //  ______________________________________________________________________
1055+ 6872              //
1056+ 6872              // um*      u1 u2 -- ud
1057+ 6872              // Unsigned multiplication
1058+ 6872              // A double-integer is kept in CPU registers as DEHL then pushed on stack.
1059+ 6872              // On the stack a double number is treated as two single numbers
1060+ 6872              // where DE is on the top of the stack and HL is the second from top,
1061+ 6872              // Instead, in 2VARIABLE a double number is stored as EDLH.
1062+ 6872              // this definition could use "MUL" Z80N new op-code.
1063+ 6872                              New_Def UM_MUL, "UM*", is_code, is_normal
1063+ 6872             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1063+ 6872             >
1063+ 6872             >                // dummy db directives used to calculate length of namec
1063+ 6872 55 4D 2A    >                db      "UM*"
1063+ 6875             >len_NFA         defl    $ - temp_NFA
1063+ 6875             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1063+ 6872             >
1063+ 6872 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1063+ 6873 55 4D 2A    >                db      "UM*"               // name string in 7-bit ascii, but
1063+ 6876             >                org     $-1                 // alter last byte of Name just above to set
1063+ 6875 AA          >                db      {b $} | END_BIT     // msb as name end
1063+ 6876             >
1063+ 6876 56 68       >                dw      last_NFA            // Link to previous definition Name
1063+ 6878             >UM_MUL:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1063+ 6878 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1063+ 6878 ~           >
1063+ 6878 ~           >
1063+ 6878             >                endif           ; ok        // for other definitions it "points" the correct handler
1063+ 6878             >                // Use of "; ok" to suppress "warning[fwdref]"
1063+ 6878             >
1063+ 6878             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1064+ 6878 D9                           exx
1065+ 6879 D1                           pop     de                    // de has u2 operand
1066+ 687A E1                           pop     hl                    // hl has u1 operand
1067+ 687B 45                           ld      b, l
1068+ 687C 4B                           ld      c, e
1069+ 687D 5D                           ld      e, l
1070+ 687E 6A                           ld      l, d
1071+ 687F E5                           push    hl
1072+ 6880 69                           ld      l, c
1073+ 6881 ED 30                        mul
1074+ 6883 EB                           ex      de, hl
1075+ 6884 ED 30                        mul
1076+ 6886 AF                           xor     a
1077+ 6887 19                           add     hl, de
1078+ 6888 8F                           adc     a
1079+ 6889 59                           ld      e, c
1080+ 688A 50                           ld      d, b
1081+ 688B ED 30                        mul
1082+ 688D 47                           ld      b, a
1083+ 688E 4C                           ld      c, h
1084+ 688F 7A                           ld      a, d
1085+ 6890 85                           add     l
1086+ 6891 67                           ld      h, a
1087+ 6892 6B                           ld      l, e
1088+ 6893 D1                           pop     de
1089+ 6894 ED 30                        mul
1090+ 6896 EB                           ex      de, hl
1091+ 6897 ED 4A                        adc     hl, bc
1092+ 6899 D5                           push    de
1093+ 689A E5                           push    hl
1094+ 689B D9                           exx
1095+ 689C                              next
1095+ 689C DD E9       >                jp      (ix)
1096+ 689E
1097+ 689E              //  ______________________________________________________________________
1098+ 689E              //
1099+ 689E              // um/mod      ud u1 -- q r
1100+ 689E              // divides ud into u1 giving quotient q and remainder r
1101+ 689E              // algorithm takes 16 bit at a time starting from msb
1102+ 689E              // DE grows from lsb upward with quotient result
1103+ 689E              // HL keeps the remainder at each stage of division
1104+ 689E              // each loop 'lowers' the next binary digit to form the current dividend
1105+ 689E                              New_Def UMDIVMOD, "UM/MOD", is_code, is_normal
1105+ 689E             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1105+ 689E             >
1105+ 689E             >                // dummy db directives used to calculate length of namec
1105+ 689E 55 4D 2F 4D >                db      "UM/MOD"
1105+ 68A2 4F 44       >
1105+ 68A4             >len_NFA         defl    $ - temp_NFA
1105+ 68A4             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1105+ 689E             >
1105+ 689E 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1105+ 689F 55 4D 2F 4D >                db      "UM/MOD"               // name string in 7-bit ascii, but
1105+ 68A3 4F 44       >
1105+ 68A5             >                org     $-1                 // alter last byte of Name just above to set
1105+ 68A4 C4          >                db      {b $} | END_BIT     // msb as name end
1105+ 68A5             >
1105+ 68A5 72 68       >                dw      last_NFA            // Link to previous definition Name
1105+ 68A7             >UMDIVMOD:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1105+ 68A7 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1105+ 68A7 ~           >
1105+ 68A7 ~           >
1105+ 68A7             >                endif           ; ok        // for other definitions it "points" the correct handler
1105+ 68A7             >                // Use of "; ok" to suppress "warning[fwdref]"
1105+ 68A7             >
1105+ 68A7             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1106+ 68A7 D9                           exx
1107+ 68A8 C1                           pop     bc                      // divisor
1108+ 68A9
1109+ 68A9 E1                           pop     hl                      // < high part
1110+ 68AA D1                           pop     de                      // < low part and
1111+ 68AB
1112+ 68AB 7D                           ld      a, l                    // check without changing arguments
1113+ 68AC 91                           sub     c                       // if divisor is greater than high part
1114+ 68AD 7C                           ld      a, h                    // so quotient will be in range
1115+ 68AE 98                           sbc     a, b
1116+ 68AF 30 20                        jr      nc, Um_DivMod_OutOfRange
1117+ 68B1 3E 10                            ld      a, 16
1118+ 68B3              Um_DivMod_Loop:
1119+ 68B3 CB 23                                sla     e
1120+ 68B5 CB 12                                rl      d
1121+ 68B7 ED 6A                                adc     hl, hl
1122+ 68B9 30 05                                jr      nc, Um_DivMod_Carry
1123+ 68BB A7                                       and     a
1124+ 68BC ED 42                                    sbc     hl, bc
1125+ 68BE 18 07                                jr      Um_DivMod_Endif    // else
1126+ 68C0              Um_DivMod_Carry:
1127+ 68C0 A7                                       and     a
1128+ 68C1 ED 42                                    sbc     hl, bc
1129+ 68C3 30 02                                    jr      nc, Um_DivMod_Endif
1130+ 68C5 09                                           add     hl, bc
1131+ 68C6 1B                                           dec     de
1132+ 68C7              Um_DivMod_Endif:                                   // endif
1133+ 68C7 13                                   inc     de
1134+ 68C8 3D                                   dec     a
1135+ 68C9 20 E8                            jr      nz, Um_DivMod_Loop
1136+ 68CB EB                               ex      de, hl
1137+ 68CC              Um_DivMod_Bailout:
1138+ 68CC D5                               push    de                  // de := remanider
1139+ 68CD E5                               push    hl                  // hl := quotient
1140+ 68CE D9                               exx
1141+ 68CF                                  next
1141+ 68CF DD E9       >                jp      (ix)
1142+ 68D1
1143+ 68D1              Um_DivMod_OutOfRange:
1144+ 68D1 21 FF FF                     ld      hl, -1
1145+ 68D4 54                           ld      d, h
1146+ 68D5 5D                           ld      e, l
1147+ 68D6 18 F4                        jr      Um_DivMod_Bailout
1148+ 68D8
1149+ 68D8              //  ______________________________________________________________________
1150+ 68D8              //
1151+ 68D8              // and          n1 n2 -- n3
1152+ 68D8              // bit logical AND. Returns n3 as n1 & n2
1153+ 68D8                              New_Def AND_OP, "AND", is_code, is_normal
1153+ 68D8             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1153+ 68D8             >
1153+ 68D8             >                // dummy db directives used to calculate length of namec
1153+ 68D8 41 4E 44    >                db      "AND"
1153+ 68DB             >len_NFA         defl    $ - temp_NFA
1153+ 68DB             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1153+ 68D8             >
1153+ 68D8 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1153+ 68D9 41 4E 44    >                db      "AND"               // name string in 7-bit ascii, but
1153+ 68DC             >                org     $-1                 // alter last byte of Name just above to set
1153+ 68DB C4          >                db      {b $} | END_BIT     // msb as name end
1153+ 68DC             >
1153+ 68DC 9E 68       >                dw      last_NFA            // Link to previous definition Name
1153+ 68DE             >AND_OP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1153+ 68DE ~           >                call    runcode ; ok        // for primitive definitions  actual code
1153+ 68DE ~           >
1153+ 68DE ~           >
1153+ 68DE             >                endif           ; ok        // for other definitions it "points" the correct handler
1153+ 68DE             >                // Use of "; ok" to suppress "warning[fwdref]"
1153+ 68DE             >
1153+ 68DE             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1154+ 68DE D9                           exx
1155+ 68DF D1                           pop     de
1156+ 68E0 E1                           pop     hl
1157+ 68E1 7B                           ld      a, e
1158+ 68E2 A5                           and     l
1159+ 68E3 6F                           ld      l, a
1160+ 68E4 7A                           ld      a, d
1161+ 68E5 A4                           and     h
1162+ 68E6 67                           ld      h, a
1163+ 68E7 E5                           push    hl
1164+ 68E8 D9                           exx
1165+ 68E9                              next
1165+ 68E9 DD E9       >                jp      (ix)
1166+ 68EB
1167+ 68EB              //  ______________________________________________________________________
1168+ 68EB              //
1169+ 68EB              // or           n1 n2 -- n3
1170+ 68EB              // bit logical OR. Returns n3 as n1 | n2
1171+ 68EB                              New_Def OR_OP, "OR", is_code, is_normal
1171+ 68EB             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1171+ 68EB             >
1171+ 68EB             >                // dummy db directives used to calculate length of namec
1171+ 68EB 4F 52       >                db      "OR"
1171+ 68ED             >len_NFA         defl    $ - temp_NFA
1171+ 68ED             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1171+ 68EB             >
1171+ 68EB 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1171+ 68EC 4F 52       >                db      "OR"               // name string in 7-bit ascii, but
1171+ 68EE             >                org     $-1                 // alter last byte of Name just above to set
1171+ 68ED D2          >                db      {b $} | END_BIT     // msb as name end
1171+ 68EE             >
1171+ 68EE D8 68       >                dw      last_NFA            // Link to previous definition Name
1171+ 68F0             >OR_OP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1171+ 68F0 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1171+ 68F0 ~           >
1171+ 68F0 ~           >
1171+ 68F0             >                endif           ; ok        // for other definitions it "points" the correct handler
1171+ 68F0             >                // Use of "; ok" to suppress "warning[fwdref]"
1171+ 68F0             >
1171+ 68F0             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1172+ 68F0 D9                           exx
1173+ 68F1 D1                           pop     de
1174+ 68F2 E1                           pop     hl
1175+ 68F3 7B                           ld      a, e
1176+ 68F4 B5                           or      l
1177+ 68F5 6F                           ld      l, a
1178+ 68F6 7A                           ld      a, d
1179+ 68F7 B4                           or      h
1180+ 68F8 67                           ld      h, a
1181+ 68F9 E5                           push    hl
1182+ 68FA D9                           exx
1183+ 68FB                              next
1183+ 68FB DD E9       >                jp      (ix)
1184+ 68FD
1185+ 68FD              //  ______________________________________________________________________
1186+ 68FD              //
1187+ 68FD              // xor          n1 n2 -- n3
1188+ 68FD              // bit logical OR. Returns n3 as n1 ^ n2
1189+ 68FD                              New_Def XOR_OP, "XOR", is_code, is_normal
1189+ 68FD             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1189+ 68FD             >
1189+ 68FD             >                // dummy db directives used to calculate length of namec
1189+ 68FD 58 4F 52    >                db      "XOR"
1189+ 6900             >len_NFA         defl    $ - temp_NFA
1189+ 6900             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1189+ 68FD             >
1189+ 68FD 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1189+ 68FE 58 4F 52    >                db      "XOR"               // name string in 7-bit ascii, but
1189+ 6901             >                org     $-1                 // alter last byte of Name just above to set
1189+ 6900 D2          >                db      {b $} | END_BIT     // msb as name end
1189+ 6901             >
1189+ 6901 EB 68       >                dw      last_NFA            // Link to previous definition Name
1189+ 6903             >XOR_OP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1189+ 6903 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1189+ 6903 ~           >
1189+ 6903 ~           >
1189+ 6903             >                endif           ; ok        // for other definitions it "points" the correct handler
1189+ 6903             >                // Use of "; ok" to suppress "warning[fwdref]"
1189+ 6903             >
1189+ 6903             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1190+ 6903 D9                           exx
1191+ 6904 D1                           pop     de
1192+ 6905 E1                           pop     hl
1193+ 6906 7B                           ld      a, e
1194+ 6907 AD                           xor     l
1195+ 6908 6F                           ld      l, a
1196+ 6909 7A                           ld      a, d
1197+ 690A AC                           xor     h
1198+ 690B 67                           ld      h, a
1199+ 690C E5                           push    hl
1200+ 690D D9                           exx
1201+ 690E                              next
1201+ 690E DD E9       >                jp      (ix)
1202+ 6910
1203+ 6910              //  ______________________________________________________________________
1204+ 6910              //
1205+ 6910              // sp@      -- a
1206+ 6910              // returns on top of stack the value of SP before execution
1207+ 6910                              New_Def SPFETCH, "SP@", is_code, is_normal
1207+ 6910             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1207+ 6910             >
1207+ 6910             >                // dummy db directives used to calculate length of namec
1207+ 6910 53 50 40    >                db      "SP@"
1207+ 6913             >len_NFA         defl    $ - temp_NFA
1207+ 6913             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1207+ 6910             >
1207+ 6910 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1207+ 6911 53 50 40    >                db      "SP@"               // name string in 7-bit ascii, but
1207+ 6914             >                org     $-1                 // alter last byte of Name just above to set
1207+ 6913 C0          >                db      {b $} | END_BIT     // msb as name end
1207+ 6914             >
1207+ 6914 FD 68       >                dw      last_NFA            // Link to previous definition Name
1207+ 6916             >SPFETCH:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1207+ 6916 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1207+ 6916 ~           >
1207+ 6916 ~           >
1207+ 6916             >                endif           ; ok        // for other definitions it "points" the correct handler
1207+ 6916             >                // Use of "; ok" to suppress "warning[fwdref]"
1207+ 6916             >
1207+ 6916             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1208+ 6916
1209+ 6916 21 00 00                     ld      hl, 0
1210+ 6919 39                           add     hl, sp
1211+ 691A
1212+ 691A                              psh1
1212+ 691A E5          >                push    hl
1212+ 691B DD E9       >                jp      (ix)
1213+ 691D
1214+ 691D              //  ______________________________________________________________________
1215+ 691D              //
1216+ 691D              // sp!      a --
1217+ 691D              // restore SP to the initial value passed
1218+ 691D              // normally it is S0, i.e. the word at offset 6 and 7 of user variabiles area.
1219+ 691D                              New_Def SPSTORE, "SP!", is_code, is_normal
1219+ 691D             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1219+ 691D             >
1219+ 691D             >                // dummy db directives used to calculate length of namec
1219+ 691D 53 50 21    >                db      "SP!"
1219+ 6920             >len_NFA         defl    $ - temp_NFA
1219+ 6920             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1219+ 691D             >
1219+ 691D 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1219+ 691E 53 50 21    >                db      "SP!"               // name string in 7-bit ascii, but
1219+ 6921             >                org     $-1                 // alter last byte of Name just above to set
1219+ 6920 A1          >                db      {b $} | END_BIT     // msb as name end
1219+ 6921             >
1219+ 6921 10 69       >                dw      last_NFA            // Link to previous definition Name
1219+ 6923             >SPSTORE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1219+ 6923 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1219+ 6923 ~           >
1219+ 6923 ~           >
1219+ 6923             >                endif           ; ok        // for other definitions it "points" the correct handler
1219+ 6923             >                // Use of "; ok" to suppress "warning[fwdref]"
1219+ 6923             >
1219+ 6923             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1220+ 6923 E1                           pop     hl
1221+ 6924 F9                           ld      sp, hl
1222+ 6925
1223+ 6925                              next
1223+ 6925 DD E9       >                jp      (ix)
1224+ 6927
1225+ 6927              //  ______________________________________________________________________
1226+ 6927              //
1227+ 6927              // rp@      -- a
1228+ 6927              // returns on top of stack the value of Return-Pointer
1229+ 6927                              New_Def RPFETCH, "RP@", is_code, is_normal
1229+ 6927             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1229+ 6927             >
1229+ 6927             >                // dummy db directives used to calculate length of namec
1229+ 6927 52 50 40    >                db      "RP@"
1229+ 692A             >len_NFA         defl    $ - temp_NFA
1229+ 692A             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1229+ 6927             >
1229+ 6927 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1229+ 6928 52 50 40    >                db      "RP@"               // name string in 7-bit ascii, but
1229+ 692B             >                org     $-1                 // alter last byte of Name just above to set
1229+ 692A C0          >                db      {b $} | END_BIT     // msb as name end
1229+ 692B             >
1229+ 692B 1D 69       >                dw      last_NFA            // Link to previous definition Name
1229+ 692D             >RPFETCH:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1229+ 692D ~           >                call    runcode ; ok        // for primitive definitions  actual code
1229+ 692D ~           >
1229+ 692D ~           >
1229+ 692D             >                endif           ; ok        // for other definitions it "points" the correct handler
1229+ 692D             >                // Use of "; ok" to suppress "warning[fwdref]"
1229+ 692D             >
1229+ 692D             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1230+ 692D
1231+ 692D                              // *** ldhlrp
1232+ 692D                              // *** ex      de, hl
1233+ 692D D5                           push de
1234+ 692E
1235+ 692E                              next
1235+ 692E DD E9       >                jp      (ix)
1236+ 6930
1237+ 6930              //  ______________________________________________________________________
1238+ 6930              //
1239+ 6930              // rp!      a --
1240+ 6930              // restore RP to the initial value passed
1241+ 6930              // normally it is R0 @, i.e. the word at offset 8 of user variabiles area.
1242+ 6930                              New_Def RPSTORE, "RP!", is_code, is_normal
1242+ 6930             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1242+ 6930             >
1242+ 6930             >                // dummy db directives used to calculate length of namec
1242+ 6930 52 50 21    >                db      "RP!"
1242+ 6933             >len_NFA         defl    $ - temp_NFA
1242+ 6933             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1242+ 6930             >
1242+ 6930 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1242+ 6931 52 50 21    >                db      "RP!"               // name string in 7-bit ascii, but
1242+ 6934             >                org     $-1                 // alter last byte of Name just above to set
1242+ 6933 A1          >                db      {b $} | END_BIT     // msb as name end
1242+ 6934             >
1242+ 6934 27 69       >                dw      last_NFA            // Link to previous definition Name
1242+ 6936             >RPSTORE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1242+ 6936 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1242+ 6936 ~           >
1242+ 6936 ~           >
1242+ 6936             >                endif           ; ok        // for other definitions it "points" the correct handler
1242+ 6936             >                // Use of "; ok" to suppress "warning[fwdref]"
1242+ 6936             >
1242+ 6936             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1243+ 6936 D1                           pop     de
1244+ 6937                              // *** ex      de, hl
1245+ 6937                              // *** ldrphl
1246+ 6937
1247+ 6937                              next
1247+ 6937 DD E9       >                jp      (ix)
1248+ 6939
1249+ 6939              //  ______________________________________________________________________
1250+ 6939              //
1251+ 6939              // exit       --
1252+ 6939              // exits back to the caller word
1253+ 6939                              New_Def EXIT, "EXIT", is_code, is_normal
1253+ 6939             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1253+ 6939             >
1253+ 6939             >                // dummy db directives used to calculate length of namec
1253+ 6939 45 58 49 54 >                db      "EXIT"
1253+ 693D             >len_NFA         defl    $ - temp_NFA
1253+ 693D             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1253+ 6939             >
1253+ 6939 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1253+ 693A 45 58 49 54 >                db      "EXIT"               // name string in 7-bit ascii, but
1253+ 693E             >                org     $-1                 // alter last byte of Name just above to set
1253+ 693D D4          >                db      {b $} | END_BIT     // msb as name end
1253+ 693E             >
1253+ 693E 30 69       >                dw      last_NFA            // Link to previous definition Name
1253+ 6940             >EXIT:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1253+ 6940 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1253+ 6940 ~           >
1253+ 6940 ~           >
1253+ 6940             >                endif           ; ok        // for other definitions it "points" the correct handler
1253+ 6940             >                // Use of "; ok" to suppress "warning[fwdref]"
1253+ 6940             >
1253+ 6940             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1254+ 6940 EB                           ex      de, hl
1255+ 6941                              // *** ldhlrp                      // Get Return Stack Pointer
1256+ 6941 4E                           ld      c, (hl)             // pop Instruction Pointer
1257+ 6942 23                           inc     hl                  // from Return Stack
1258+ 6943 46                           ld      b, (hl)
1259+ 6944 23                           inc     hl
1260+ 6945                              // *** ldrphl                      // Set Return Stack Pointer
1261+ 6945 EB                           ex      de, hl
1262+ 6946                              next
1262+ 6946 DD E9       >                jp      (ix)
1263+ 6948
1264+ 6948              //  ______________________________________________________________________
1265+ 6948              //
1266+ 6948              // lastl      --
1267+ 6948              // exits back to the caller word
1268+ 6948              //              New_Def EXIT, "LASTL", is_code, is_normal
1269+ 6948              //              push    de
1270+ 6948              //              ex      de, hl //**
1271+ 6948              //              // *** ldhlrp                      // Get Return Stack Pointer
1272+ 6948              //              ld      e, (hl)             // pop Instruction Pointer
1273+ 6948              //              inc     hl                  // from Return Stack
1274+ 6948              //              ld      d, (hl)
1275+ 6948              //              inc     hl
1276+ 6948              //              ld      (hl), e
1277+ 6948              //              inc     hl
1278+ 6948              //              ld      (hl), d
1279+ 6948              //              add     hl, -3
1280+ 6948              //              pop     de
1281+ 6948              //              next
1282+ 6948
1283+ 6948              //  ______________________________________________________________________
1284+ 6948              //
1285+ 6948              // >r      n --
1286+ 6948              // pop from calculator-stack and push into return-stack
1287+ 6948                              New_Def TO_R, ">R", is_code, is_normal
1287+ 6948             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1287+ 6948             >
1287+ 6948             >                // dummy db directives used to calculate length of namec
1287+ 6948 3E 52       >                db      ">R"
1287+ 694A             >len_NFA         defl    $ - temp_NFA
1287+ 694A             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1287+ 6948             >
1287+ 6948 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1287+ 6949 3E 52       >                db      ">R"               // name string in 7-bit ascii, but
1287+ 694B             >                org     $-1                 // alter last byte of Name just above to set
1287+ 694A D2          >                db      {b $} | END_BIT     // msb as name end
1287+ 694B             >
1287+ 694B 39 69       >                dw      last_NFA            // Link to previous definition Name
1287+ 694D             >TO_R:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1287+ 694D ~           >                call    runcode ; ok        // for primitive definitions  actual code
1287+ 694D ~           >
1287+ 694D ~           >
1287+ 694D             >                endif           ; ok        // for other definitions it "points" the correct handler
1287+ 694D             >                // Use of "; ok" to suppress "warning[fwdref]"
1287+ 694D             >
1287+ 694D             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1288+ 694D E1                           pop     hl
1289+ 694E EB                           ex      de, hl //**
1290+ 694F                              // *** ldhlrp
1291+ 694F 2B                           dec     hl
1292+ 6950 72                           ld      (hl), d             // store current TOS
1293+ 6951 2B                           dec     hl                  // to Return Stack
1294+ 6952 73                           ld      (hl), e
1295+ 6953                              // *** ldrphl
1296+ 6953 EB                           ex      de, hl //**
1297+ 6954                              next
1297+ 6954 DD E9       >                jp      (ix)
1298+ 6956
1299+ 6956              //  ______________________________________________________________________
1300+ 6956              //
1301+ 6956              // r>      -- n
1302+ 6956              // pop from return-stack and push into calculator-stack
1303+ 6956                              New_Def R_TO, "R>", is_code, is_normal
1303+ 6956             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1303+ 6956             >
1303+ 6956             >                // dummy db directives used to calculate length of namec
1303+ 6956 52 3E       >                db      "R>"
1303+ 6958             >len_NFA         defl    $ - temp_NFA
1303+ 6958             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1303+ 6956             >
1303+ 6956 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1303+ 6957 52 3E       >                db      "R>"               // name string in 7-bit ascii, but
1303+ 6959             >                org     $-1                 // alter last byte of Name just above to set
1303+ 6958 BE          >                db      {b $} | END_BIT     // msb as name end
1303+ 6959             >
1303+ 6959 48 69       >                dw      last_NFA            // Link to previous definition Name
1303+ 695B             >R_TO:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1303+ 695B ~           >                call    runcode ; ok        // for primitive definitions  actual code
1303+ 695B ~           >
1303+ 695B ~           >
1303+ 695B             >                endif           ; ok        // for other definitions it "points" the correct handler
1303+ 695B             >                // Use of "; ok" to suppress "warning[fwdref]"
1303+ 695B             >
1303+ 695B             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1304+ 695B
1305+ 695B EB                           ex      de, hl //**
1306+ 695C                              // *** ldhlrp
1307+ 695C 5E                           ld      e, (hl)             // retrieve from Return Stack
1308+ 695D 23                           inc     hl
1309+ 695E 56                           ld      d, (hl)
1310+ 695F 23                           inc     hl
1311+ 6960                              // *** ldrphl
1312+ 6960 EB                           ex      de, hl //**
1313+ 6961 E5                           push    hl
1314+ 6962                              next
1314+ 6962 DD E9       >                jp      (ix)
1315+ 6964
1316+ 6964              //  ______________________________________________________________________
1317+ 6964              //
1318+ 6964              // r@           -- n
1319+ 6964              // return on top of stack the value of top of return-stack
1320+ 6964              // Since this is the same as I, we alter R's CFA to jump there
1321+ 6964                              New_Def R_OP, "R@", is_code, is_normal
1321+ 6964             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1321+ 6964             >
1321+ 6964             >                // dummy db directives used to calculate length of namec
1321+ 6964 52 40       >                db      "R@"
1321+ 6966             >len_NFA         defl    $ - temp_NFA
1321+ 6966             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1321+ 6964             >
1321+ 6964 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1321+ 6965 52 40       >                db      "R@"               // name string in 7-bit ascii, but
1321+ 6967             >                org     $-1                 // alter last byte of Name just above to set
1321+ 6966 C0          >                db      {b $} | END_BIT     // msb as name end
1321+ 6967             >
1321+ 6967 56 69       >                dw      last_NFA            // Link to previous definition Name
1321+ 6969             >R_OP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1321+ 6969 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1321+ 6969 ~           >
1321+ 6969 ~           >
1321+ 6969             >                endif           ; ok        // for other definitions it "points" the correct handler
1321+ 6969             >                // Use of "; ok" to suppress "warning[fwdref]"
1321+ 6969             >
1321+ 6969             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1322+ 6969 C3 77 64                     jp      I_Ptr
1323+ 696C
1324+ 696C              //  ______________________________________________________________________
1325+ 696C              //
1326+ 696C              // r            -- n
1327+ 696C              // return on top of stack the value of top of return-stack
1328+ 696C              // Since this is the same as I, we alter R's CFA to jump there
1329+ 696C              //              New_Def R_OLD, "R", is_code, is_normal
1330+ 696C              //              jp      I_Ptr
1331+ 696C
1332+ 696C              //  ______________________________________________________________________
1333+ 696C              //
1334+ 696C              // 0=           n -- f
1335+ 696C              // true (non zero) if n is zero, false (0) elsewere
1336+ 696C                              New_Def ZEQUAL, "0=", is_code, is_normal
1336+ 696C             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1336+ 696C             >
1336+ 696C             >                // dummy db directives used to calculate length of namec
1336+ 696C 30 3D       >                db      "0="
1336+ 696E             >len_NFA         defl    $ - temp_NFA
1336+ 696E             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1336+ 696C             >
1336+ 696C 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1336+ 696D 30 3D       >                db      "0="               // name string in 7-bit ascii, but
1336+ 696F             >                org     $-1                 // alter last byte of Name just above to set
1336+ 696E BD          >                db      {b $} | END_BIT     // msb as name end
1336+ 696F             >
1336+ 696F 64 69       >                dw      last_NFA            // Link to previous definition Name
1336+ 6971             >ZEQUAL:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1336+ 6971 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1336+ 6971 ~           >
1336+ 6971 ~           >
1336+ 6971             >                endif           ; ok        // for other definitions it "points" the correct handler
1336+ 6971             >                // Use of "; ok" to suppress "warning[fwdref]"
1336+ 6971             >
1336+ 6971             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1337+ 6971              Zero_Equal:
1338+ 6971 E1                           pop     hl
1339+ 6972 7D                           ld      a, l
1340+ 6973 B4                           or      h
1341+ 6974 21 00 00                     ld      hl, FALSE_FLAG
1342+ 6977 20 01                        jr      nz, ZEqual_Skip
1343+ 6979 2B                               dec     hl
1344+ 697A              ZEqual_Skip:
1345+ 697A                              psh1
1345+ 697A E5          >                push    hl
1345+ 697B DD E9       >                jp      (ix)
1346+ 697D
1347+ 697D              //  ______________________________________________________________________
1348+ 697D              //
1349+ 697D              // not         a1 -- a2
1350+ 697D              // increment by 2 top of stack
1351+ 697D                              New_Def NOT_OP, "NOT", is_code, is_normal
1351+ 697D             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1351+ 697D             >
1351+ 697D             >                // dummy db directives used to calculate length of namec
1351+ 697D 4E 4F 54    >                db      "NOT"
1351+ 6980             >len_NFA         defl    $ - temp_NFA
1351+ 6980             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1351+ 697D             >
1351+ 697D 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1351+ 697E 4E 4F 54    >                db      "NOT"               // name string in 7-bit ascii, but
1351+ 6981             >                org     $-1                 // alter last byte of Name just above to set
1351+ 6980 D4          >                db      {b $} | END_BIT     // msb as name end
1351+ 6981             >
1351+ 6981 6C 69       >                dw      last_NFA            // Link to previous definition Name
1351+ 6983             >NOT_OP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1351+ 6983 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1351+ 6983 ~           >
1351+ 6983 ~           >
1351+ 6983             >                endif           ; ok        // for other definitions it "points" the correct handler
1351+ 6983             >                // Use of "; ok" to suppress "warning[fwdref]"
1351+ 6983             >
1351+ 6983             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1352+ 6983 C3 71 69                     jp      Zero_Equal
1353+ 6986
1354+ 6986              //  ______________________________________________________________________
1355+ 6986              //
1356+ 6986              // 0<           n -- f
1357+ 6986              // true (non zero) if n is less than zero, false (0) elsewere
1358+ 6986                              New_Def ZLESS, "0<", is_code, is_normal
1358+ 6986             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1358+ 6986             >
1358+ 6986             >                // dummy db directives used to calculate length of namec
1358+ 6986 30 3C       >                db      "0<"
1358+ 6988             >len_NFA         defl    $ - temp_NFA
1358+ 6988             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1358+ 6986             >
1358+ 6986 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1358+ 6987 30 3C       >                db      "0<"               // name string in 7-bit ascii, but
1358+ 6989             >                org     $-1                 // alter last byte of Name just above to set
1358+ 6988 BC          >                db      {b $} | END_BIT     // msb as name end
1358+ 6989             >
1358+ 6989 7D 69       >                dw      last_NFA            // Link to previous definition Name
1358+ 698B             >ZLESS:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1358+ 698B ~           >                call    runcode ; ok        // for primitive definitions  actual code
1358+ 698B ~           >
1358+ 698B ~           >
1358+ 698B             >                endif           ; ok        // for other definitions it "points" the correct handler
1358+ 698B             >                // Use of "; ok" to suppress "warning[fwdref]"
1358+ 698B             >
1358+ 698B             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1359+ 698B E1                           pop     hl
1360+ 698C 29                           add     hl, hl
1361+ 698D ED 62                        sbc     hl, hl
1362+ 698F                              psh1
1362+ 698F E5          >                push    hl
1362+ 6990 DD E9       >                jp      (ix)
1363+ 6992
1364+ 6992              //  ______________________________________________________________________
1365+ 6992              //
1366+ 6992              // 0>           n -- f
1367+ 6992              // true (non zero) if n is less than zero, false (0) elsewere
1368+ 6992                              New_Def ZGREATER, "0>", is_code, is_normal
1368+ 6992             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1368+ 6992             >
1368+ 6992             >                // dummy db directives used to calculate length of namec
1368+ 6992 30 3E       >                db      "0>"
1368+ 6994             >len_NFA         defl    $ - temp_NFA
1368+ 6994             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1368+ 6992             >
1368+ 6992 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1368+ 6993 30 3E       >                db      "0>"               // name string in 7-bit ascii, but
1368+ 6995             >                org     $-1                 // alter last byte of Name just above to set
1368+ 6994 BE          >                db      {b $} | END_BIT     // msb as name end
1368+ 6995             >
1368+ 6995 86 69       >                dw      last_NFA            // Link to previous definition Name
1368+ 6997             >ZGREATER:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1368+ 6997 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1368+ 6997 ~           >
1368+ 6997 ~           >
1368+ 6997             >                endif           ; ok        // for other definitions it "points" the correct handler
1368+ 6997             >                // Use of "; ok" to suppress "warning[fwdref]"
1368+ 6997             >
1368+ 6997             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1369+ 6997 E1                           pop     hl
1370+ 6998 7D                           ld      a, l
1371+ 6999 B4                           or      h
1372+ 699A 29                           add     hl, hl
1373+ 699B 21 00 00                     ld      hl, FALSE_FLAG
1374+ 699E 38 04                        jr      c, ZGreater_Skip
1375+ 69A0 A7                               and     a
1376+ 69A1 28 01                            jr      z, ZGreater_Skip
1377+ 69A3 2B                                   dec     hl
1378+ 69A4              ZGreater_Skip:
1379+ 69A4                              psh1
1379+ 69A4 E5          >                push    hl
1379+ 69A5 DD E9       >                jp      (ix)
1380+ 69A7
1381+ 69A7              //  ______________________________________________________________________
1382+ 69A7              //
1383+ 69A7              // +            n1 n2 -- n3
1384+ 69A7              // returns the unsigned sum of two top values
1385+ 69A7                              New_Def PLUS, "+", is_code, is_normal
1385+ 69A7             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1385+ 69A7             >
1385+ 69A7             >                // dummy db directives used to calculate length of namec
1385+ 69A7 2B          >                db      "+"
1385+ 69A8             >len_NFA         defl    $ - temp_NFA
1385+ 69A8             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1385+ 69A7             >
1385+ 69A7 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1385+ 69A8 2B          >                db      "+"               // name string in 7-bit ascii, but
1385+ 69A9             >                org     $-1                 // alter last byte of Name just above to set
1385+ 69A8 AB          >                db      {b $} | END_BIT     // msb as name end
1385+ 69A9             >
1385+ 69A9 92 69       >                dw      last_NFA            // Link to previous definition Name
1385+ 69AB             >PLUS:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1385+ 69AB ~           >                call    runcode ; ok        // for primitive definitions  actual code
1385+ 69AB ~           >
1385+ 69AB ~           >
1385+ 69AB             >                endif           ; ok        // for other definitions it "points" the correct handler
1385+ 69AB             >                // Use of "; ok" to suppress "warning[fwdref]"
1385+ 69AB             >
1385+ 69AB             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1386+ 69AB D9                           exx
1387+ 69AC E1                           pop     hl
1388+ 69AD D1                           pop     de
1389+ 69AE 19                           add     hl, de
1390+ 69AF E5                           push    hl
1391+ 69B0 D9                           exx
1392+ 69B1                              next
1392+ 69B1 DD E9       >                jp      (ix)
1393+ 69B3
1394+ 69B3
1395+ 69B3              //  ______________________________________________________________________
1396+ 69B3              //
1397+ 69B3              // d+           d1 d2 -- d3
1398+ 69B3              // returns the unsigned sum of two top double-numbers
1399+ 69B3              //      d2  d1
1400+ 69B3              //      h l h l
1401+ 69B3              // SP   LHEDLHED
1402+ 69B3              // SP  +01234567
1403+ 69B3                              New_Def DPLUS, "D+", is_code, is_normal
1403+ 69B3             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1403+ 69B3             >
1403+ 69B3             >                // dummy db directives used to calculate length of namec
1403+ 69B3 44 2B       >                db      "D+"
1403+ 69B5             >len_NFA         defl    $ - temp_NFA
1403+ 69B5             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1403+ 69B3             >
1403+ 69B3 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1403+ 69B4 44 2B       >                db      "D+"               // name string in 7-bit ascii, but
1403+ 69B6             >                org     $-1                 // alter last byte of Name just above to set
1403+ 69B5 AB          >                db      {b $} | END_BIT     // msb as name end
1403+ 69B6             >
1403+ 69B6 A7 69       >                dw      last_NFA            // Link to previous definition Name
1403+ 69B8             >DPLUS:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1403+ 69B8 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1403+ 69B8 ~           >
1403+ 69B8 ~           >
1403+ 69B8             >                endif           ; ok        // for other definitions it "points" the correct handler
1403+ 69B8             >                // Use of "; ok" to suppress "warning[fwdref]"
1403+ 69B8             >
1403+ 69B8             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1404+ 69B8
1405+ 69B8 D9                           exx
1406+ 69B9 C1                           pop     bc                  // bc := d2.H
1407+ 69BA D1                           pop     de                  // hl := d2.L
1408+ 69BB E1                           pop     hl                  // d1.H
1409+ 69BC E3                           ex      (sp), hl            // d1.L
1410+ 69BD 19                           add     hl, de              // hl := d2.L + d1.L
1411+ 69BE E3                           ex      (sp), hl            // d1.H
1412+ 69BF ED 4A                        adc     hl, bc              // d1.H + d2.H
1413+ 69C1 E5                           push    hl
1414+ 69C2 D9                           exx
1415+ 69C3                              next
1415+ 69C3 DD E9       >                jp      (ix)
1416+ 69C5
1417+ 69C5              //  ______________________________________________________________________
1418+ 69C5              //
1419+ 69C5              // 1+           n1 -- n2
1420+ 69C5              // increment by 1 top of stack
1421+ 69C5                              New_Def ONE_PLUS, "1+", is_code, is_normal
1421+ 69C5             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1421+ 69C5             >
1421+ 69C5             >                // dummy db directives used to calculate length of namec
1421+ 69C5 31 2B       >                db      "1+"
1421+ 69C7             >len_NFA         defl    $ - temp_NFA
1421+ 69C7             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1421+ 69C5             >
1421+ 69C5 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1421+ 69C6 31 2B       >                db      "1+"               // name string in 7-bit ascii, but
1421+ 69C8             >                org     $-1                 // alter last byte of Name just above to set
1421+ 69C7 AB          >                db      {b $} | END_BIT     // msb as name end
1421+ 69C8             >
1421+ 69C8 B3 69       >                dw      last_NFA            // Link to previous definition Name
1421+ 69CA             >ONE_PLUS:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1421+ 69CA ~           >                call    runcode ; ok        // for primitive definitions  actual code
1421+ 69CA ~           >
1421+ 69CA ~           >
1421+ 69CA             >                endif           ; ok        // for other definitions it "points" the correct handler
1421+ 69CA             >                // Use of "; ok" to suppress "warning[fwdref]"
1421+ 69CA             >
1421+ 69CA             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1422+ 69CA E1                           pop     hl
1423+ 69CB 23                           inc     hl
1424+ 69CC
1425+ 69CC                              psh1
1425+ 69CC E5          >                push    hl
1425+ 69CD DD E9       >                jp      (ix)
1426+ 69CF
1427+ 69CF              //  ______________________________________________________________________
1428+ 69CF              //
1429+ 69CF              // 1-           n1 -- n2
1430+ 69CF              // decrement by 1 top of stack
1431+ 69CF                              New_Def ONE_SUBTRACT, "1-", is_code, is_normal
1431+ 69CF             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1431+ 69CF             >
1431+ 69CF             >                // dummy db directives used to calculate length of namec
1431+ 69CF 31 2D       >                db      "1-"
1431+ 69D1             >len_NFA         defl    $ - temp_NFA
1431+ 69D1             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1431+ 69CF             >
1431+ 69CF 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1431+ 69D0 31 2D       >                db      "1-"               // name string in 7-bit ascii, but
1431+ 69D2             >                org     $-1                 // alter last byte of Name just above to set
1431+ 69D1 AD          >                db      {b $} | END_BIT     // msb as name end
1431+ 69D2             >
1431+ 69D2 C5 69       >                dw      last_NFA            // Link to previous definition Name
1431+ 69D4             >ONE_SUBTRACT:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1431+ 69D4 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1431+ 69D4 ~           >
1431+ 69D4 ~           >
1431+ 69D4             >                endif           ; ok        // for other definitions it "points" the correct handler
1431+ 69D4             >                // Use of "; ok" to suppress "warning[fwdref]"
1431+ 69D4             >
1431+ 69D4             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1432+ 69D4 E1                           pop     hl
1433+ 69D5 2B                           dec     hl
1434+ 69D6
1435+ 69D6                              psh1
1435+ 69D6 E5          >                push    hl
1435+ 69D7 DD E9       >                jp      (ix)
1436+ 69D9
1437+ 69D9              //  ______________________________________________________________________
1438+ 69D9              //
1439+ 69D9              // 2+           n1 -- n2
1440+ 69D9              // increment by 2 top of stack
1441+ 69D9                              New_Def TWO_PLUS, "2+", is_code, is_normal
1441+ 69D9             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1441+ 69D9             >
1441+ 69D9             >                // dummy db directives used to calculate length of namec
1441+ 69D9 32 2B       >                db      "2+"
1441+ 69DB             >len_NFA         defl    $ - temp_NFA
1441+ 69DB             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1441+ 69D9             >
1441+ 69D9 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1441+ 69DA 32 2B       >                db      "2+"               // name string in 7-bit ascii, but
1441+ 69DC             >                org     $-1                 // alter last byte of Name just above to set
1441+ 69DB AB          >                db      {b $} | END_BIT     // msb as name end
1441+ 69DC             >
1441+ 69DC CF 69       >                dw      last_NFA            // Link to previous definition Name
1441+ 69DE             >TWO_PLUS:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1441+ 69DE ~           >                call    runcode ; ok        // for primitive definitions  actual code
1441+ 69DE ~           >
1441+ 69DE ~           >
1441+ 69DE             >                endif           ; ok        // for other definitions it "points" the correct handler
1441+ 69DE             >                // Use of "; ok" to suppress "warning[fwdref]"
1441+ 69DE             >
1441+ 69DE             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1442+ 69DE              Two_Plus:
1443+ 69DE E1                           pop     hl
1444+ 69DF 23                           inc     hl
1445+ 69E0 23                           inc     hl
1446+ 69E1
1447+ 69E1                              psh1
1447+ 69E1 E5          >                push    hl
1447+ 69E2 DD E9       >                jp      (ix)
1448+ 69E4
1449+ 69E4              //  ______________________________________________________________________
1450+ 69E4              //
1451+ 69E4              // cell+        a1 -- a2
1452+ 69E4              // increment by 2 top of stack
1453+ 69E4                              New_Def CELL_PLUS, "CELL+", is_code, is_normal
1453+ 69E4             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1453+ 69E4             >
1453+ 69E4             >                // dummy db directives used to calculate length of namec
1453+ 69E4 43 45 4C 4C >                db      "CELL+"
1453+ 69E8 2B          >
1453+ 69E9             >len_NFA         defl    $ - temp_NFA
1453+ 69E9             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1453+ 69E4             >
1453+ 69E4 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1453+ 69E5 43 45 4C 4C >                db      "CELL+"               // name string in 7-bit ascii, but
1453+ 69E9 2B          >
1453+ 69EA             >                org     $-1                 // alter last byte of Name just above to set
1453+ 69E9 AB          >                db      {b $} | END_BIT     // msb as name end
1453+ 69EA             >
1453+ 69EA D9 69       >                dw      last_NFA            // Link to previous definition Name
1453+ 69EC             >CELL_PLUS:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1453+ 69EC ~           >                call    runcode ; ok        // for primitive definitions  actual code
1453+ 69EC ~           >
1453+ 69EC ~           >
1453+ 69EC             >                endif           ; ok        // for other definitions it "points" the correct handler
1453+ 69EC             >                // Use of "; ok" to suppress "warning[fwdref]"
1453+ 69EC             >
1453+ 69EC             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1454+ 69EC C3 DE 69                     jp      Two_Plus
1455+ 69EF
1456+ 69EF              //  ______________________________________________________________________
1457+ 69EF              //
1458+ 69EF              // align        a1 -- a2
1459+ 69EF              // align memory : not used
1460+ 69EF              //              New_Def ALIGN_ADDR, "ALIGN", is_code, is_normal
1461+ 69EF              //            next
1462+ 69EF
1463+ 69EF              //  ______________________________________________________________________
1464+ 69EF              //
1465+ 69EF              // cell-        a1 -- a2
1466+ 69EF              // decrement by 2 top of stack
1467+ 69EF                              New_Def CELL_MINUS, "CELL-", is_code, is_normal
1467+ 69EF             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1467+ 69EF             >
1467+ 69EF             >                // dummy db directives used to calculate length of namec
1467+ 69EF 43 45 4C 4C >                db      "CELL-"
1467+ 69F3 2D          >
1467+ 69F4             >len_NFA         defl    $ - temp_NFA
1467+ 69F4             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1467+ 69EF             >
1467+ 69EF 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1467+ 69F0 43 45 4C 4C >                db      "CELL-"               // name string in 7-bit ascii, but
1467+ 69F4 2D          >
1467+ 69F5             >                org     $-1                 // alter last byte of Name just above to set
1467+ 69F4 AD          >                db      {b $} | END_BIT     // msb as name end
1467+ 69F5             >
1467+ 69F5 E4 69       >                dw      last_NFA            // Link to previous definition Name
1467+ 69F7             >CELL_MINUS:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1467+ 69F7 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1467+ 69F7 ~           >
1467+ 69F7 ~           >
1467+ 69F7             >                endif           ; ok        // for other definitions it "points" the correct handler
1467+ 69F7             >                // Use of "; ok" to suppress "warning[fwdref]"
1467+ 69F7             >
1467+ 69F7             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1468+ 69F7              CellMinus:
1469+ 69F7 E1                           pop     hl
1470+ 69F8 2B                           dec     hl
1471+ 69F9 2B                           dec     hl
1472+ 69FA
1473+ 69FA                              psh1
1473+ 69FA E5          >                push    hl
1473+ 69FB DD E9       >                jp      (ix)
1474+ 69FD
1475+ 69FD              //  ______________________________________________________________________
1476+ 69FD              //
1477+ 69FD              // 2-           a1 -- a2
1478+ 69FD              // decrement by 2 top of stack
1479+ 69FD                              New_Def TWO_MINUS, "2-", is_code, is_normal
1479+ 69FD             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1479+ 69FD             >
1479+ 69FD             >                // dummy db directives used to calculate length of namec
1479+ 69FD 32 2D       >                db      "2-"
1479+ 69FF             >len_NFA         defl    $ - temp_NFA
1479+ 69FF             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1479+ 69FD             >
1479+ 69FD 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1479+ 69FE 32 2D       >                db      "2-"               // name string in 7-bit ascii, but
1479+ 6A00             >                org     $-1                 // alter last byte of Name just above to set
1479+ 69FF AD          >                db      {b $} | END_BIT     // msb as name end
1479+ 6A00             >
1479+ 6A00 EF 69       >                dw      last_NFA            // Link to previous definition Name
1479+ 6A02             >TWO_MINUS:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1479+ 6A02 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1479+ 6A02 ~           >
1479+ 6A02 ~           >
1479+ 6A02             >                endif           ; ok        // for other definitions it "points" the correct handler
1479+ 6A02             >                // Use of "; ok" to suppress "warning[fwdref]"
1479+ 6A02             >
1479+ 6A02             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1480+ 6A02 C3 F7 69                     jp      CellMinus
1481+ 6A05
1482+ 6A05              //  ______________________________________________________________________
1483+ 6A05              //
1484+ 6A05              // negate       n1 -- n2
1485+ 6A05              // change the sign of number
1486+ 6A05                              New_Def MINUS, "NEGATE", is_code, is_normal
1486+ 6A05             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1486+ 6A05             >
1486+ 6A05             >                // dummy db directives used to calculate length of namec
1486+ 6A05 4E 45 47 41 >                db      "NEGATE"
1486+ 6A09 54 45       >
1486+ 6A0B             >len_NFA         defl    $ - temp_NFA
1486+ 6A0B             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1486+ 6A05             >
1486+ 6A05 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1486+ 6A06 4E 45 47 41 >                db      "NEGATE"               // name string in 7-bit ascii, but
1486+ 6A0A 54 45       >
1486+ 6A0C             >                org     $-1                 // alter last byte of Name just above to set
1486+ 6A0B C5          >                db      {b $} | END_BIT     // msb as name end
1486+ 6A0C             >
1486+ 6A0C FD 69       >                dw      last_NFA            // Link to previous definition Name
1486+ 6A0E             >MINUS:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1486+ 6A0E ~           >                call    runcode ; ok        // for primitive definitions  actual code
1486+ 6A0E ~           >
1486+ 6A0E ~           >
1486+ 6A0E             >                endif           ; ok        // for other definitions it "points" the correct handler
1486+ 6A0E             >                // Use of "; ok" to suppress "warning[fwdref]"
1486+ 6A0E             >
1486+ 6A0E             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1487+ 6A0E D9                           exx
1488+ 6A0F 21 00 00                     ld      hl, 0               // subtract from 0
1489+ 6A12 D1                           pop     de
1490+ 6A13 B7                           or      a
1491+ 6A14 ED 52                        sbc     hl, de
1492+ 6A16 E5                           push    hl
1493+ 6A17 D9                           exx
1494+ 6A18                              next
1494+ 6A18 DD E9       >                jp      (ix)
1495+ 6A1A
1496+ 6A1A              //  ______________________________________________________________________
1497+ 6A1A              //
1498+ 6A1A              // dnegate      d1 -- d2
1499+ 6A1A              // change the sign of a double number
1500+ 6A1A                              New_Def DMINUS, "DNEGATE", is_code, is_normal
1500+ 6A1A             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1500+ 6A1A             >
1500+ 6A1A             >                // dummy db directives used to calculate length of namec
1500+ 6A1A 44 4E 45 47 >                db      "DNEGATE"
1500+ 6A1E 41 54 45    >
1500+ 6A21             >len_NFA         defl    $ - temp_NFA
1500+ 6A21             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1500+ 6A1A             >
1500+ 6A1A 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1500+ 6A1B 44 4E 45 47 >                db      "DNEGATE"               // name string in 7-bit ascii, but
1500+ 6A1F 41 54 45    >
1500+ 6A22             >                org     $-1                 // alter last byte of Name just above to set
1500+ 6A21 C5          >                db      {b $} | END_BIT     // msb as name end
1500+ 6A22             >
1500+ 6A22 05 6A       >                dw      last_NFA            // Link to previous definition Name
1500+ 6A24             >DMINUS:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1500+ 6A24 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1500+ 6A24 ~           >
1500+ 6A24 ~           >
1500+ 6A24             >                endif           ; ok        // for other definitions it "points" the correct handler
1500+ 6A24             >                // Use of "; ok" to suppress "warning[fwdref]"
1500+ 6A24             >
1500+ 6A24             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1501+ 6A24 D9                           exx
1502+ 6A25 C1                           pop     bc                  // d1.H
1503+ 6A26 D1                           pop     de                  // d1.L
1504+ 6A27 AF                           xor     a
1505+ 6A28 67                           ld      h, a
1506+ 6A29 6F                           ld      l, a
1507+ 6A2A ED 52                        sbc     hl, de              // subtact from zero
1508+ 6A2C E5                           push    hl                  // > d2-L
1509+ 6A2D 67                           ld      h, a
1510+ 6A2E 6F                           ld      l, a
1511+ 6A2F ED 42                        sbc     hl, bc              // subtract from zero with carry
1512+ 6A31                                                          // > d2-H
1513+ 6A31 E5                           push    hl
1514+ 6A32 D9                           exx
1515+ 6A33                              next
1515+ 6A33 DD E9       >                jp      (ix)
1516+ 6A35
1517+ 6A35              //  ______________________________________________________________________
1518+ 6A35              //
1519+ 6A35              // over         n1 n2 -- n1 n2 n1
1520+ 6A35              // copy the second value of stack and put it on top.
1521+ 6A35                              New_Def OVER, "OVER", is_code, is_normal
1521+ 6A35             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1521+ 6A35             >
1521+ 6A35             >                // dummy db directives used to calculate length of namec
1521+ 6A35 4F 56 45 52 >                db      "OVER"
1521+ 6A39             >len_NFA         defl    $ - temp_NFA
1521+ 6A39             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1521+ 6A35             >
1521+ 6A35 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1521+ 6A36 4F 56 45 52 >                db      "OVER"               // name string in 7-bit ascii, but
1521+ 6A3A             >                org     $-1                 // alter last byte of Name just above to set
1521+ 6A39 D2          >                db      {b $} | END_BIT     // msb as name end
1521+ 6A3A             >
1521+ 6A3A 1A 6A       >                dw      last_NFA            // Link to previous definition Name
1521+ 6A3C             >OVER:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1521+ 6A3C ~           >                call    runcode ; ok        // for primitive definitions  actual code
1521+ 6A3C ~           >
1521+ 6A3C ~           >
1521+ 6A3C             >                endif           ; ok        // for other definitions it "points" the correct handler
1521+ 6A3C             >                // Use of "; ok" to suppress "warning[fwdref]"
1521+ 6A3C             >
1521+ 6A3C             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1522+ 6A3C                              // exx     // we can use af instead OPTIMIZATION possible
1523+ 6A3C F1                           pop     af                  //   n2
1524+ 6A3D E1                           pop     hl                  // < n1
1525+ 6A3E E5                           push    hl                  // > n1
1526+ 6A3F F5                           push    af                  // > n2
1527+ 6A40 E5                           push    hl                  // > n1
1528+ 6A41                              // exx
1529+ 6A41                              next
1529+ 6A41 DD E9       >                jp      (ix)
1530+ 6A43
1531+ 6A43              //  ______________________________________________________________________
1532+ 6A43              //
1533+ 6A43              // drop         n1 --
1534+ 6A43              // drops the top of stack
1535+ 6A43                              New_Def DROP, "DROP", is_code, is_normal
1535+ 6A43             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1535+ 6A43             >
1535+ 6A43             >                // dummy db directives used to calculate length of namec
1535+ 6A43 44 52 4F 50 >                db      "DROP"
1535+ 6A47             >len_NFA         defl    $ - temp_NFA
1535+ 6A47             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1535+ 6A43             >
1535+ 6A43 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1535+ 6A44 44 52 4F 50 >                db      "DROP"               // name string in 7-bit ascii, but
1535+ 6A48             >                org     $-1                 // alter last byte of Name just above to set
1535+ 6A47 D0          >                db      {b $} | END_BIT     // msb as name end
1535+ 6A48             >
1535+ 6A48 35 6A       >                dw      last_NFA            // Link to previous definition Name
1535+ 6A4A             >DROP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1535+ 6A4A ~           >                call    runcode ; ok        // for primitive definitions  actual code
1535+ 6A4A ~           >
1535+ 6A4A ~           >
1535+ 6A4A             >                endif           ; ok        // for other definitions it "points" the correct handler
1535+ 6A4A             >                // Use of "; ok" to suppress "warning[fwdref]"
1535+ 6A4A             >
1535+ 6A4A             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1536+ 6A4A E1                           pop     hl                  // < n1 and discard previous TOS
1537+ 6A4B                              next
1537+ 6A4B DD E9       >                jp      (ix)
1538+ 6A4D
1539+ 6A4D              //  ______________________________________________________________________
1540+ 6A4D              //
1541+ 6A4D              // nip          n1 n2 -- n2
1542+ 6A4D              // drops the second elemento on the stack
1543+ 6A4D                              New_Def NIP, "NIP", is_code, is_normal
1543+ 6A4D             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1543+ 6A4D             >
1543+ 6A4D             >                // dummy db directives used to calculate length of namec
1543+ 6A4D 4E 49 50    >                db      "NIP"
1543+ 6A50             >len_NFA         defl    $ - temp_NFA
1543+ 6A50             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1543+ 6A4D             >
1543+ 6A4D 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1543+ 6A4E 4E 49 50    >                db      "NIP"               // name string in 7-bit ascii, but
1543+ 6A51             >                org     $-1                 // alter last byte of Name just above to set
1543+ 6A50 D0          >                db      {b $} | END_BIT     // msb as name end
1543+ 6A51             >
1543+ 6A51 43 6A       >                dw      last_NFA            // Link to previous definition Name
1543+ 6A53             >NIP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1543+ 6A53 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1543+ 6A53 ~           >
1543+ 6A53 ~           >
1543+ 6A53             >                endif           ; ok        // for other definitions it "points" the correct handler
1543+ 6A53             >                // Use of "; ok" to suppress "warning[fwdref]"
1543+ 6A53             >
1543+ 6A53             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1544+ 6A53
1545+ 6A53 E1                           pop     hl                  // < n1 discarded
1546+ 6A54 E3                           ex      (sp), hl
1547+ 6A55                              next
1547+ 6A55 DD E9       >                jp      (ix)
1548+ 6A57
1549+ 6A57              //  ______________________________________________________________________
1550+ 6A57              //
1551+ 6A57              // tuck         n1 n2 -- n2 n1 n2
1552+ 6A57              // copy the top element after the second.
1553+ 6A57                              New_Def TUCK, "TUCK", is_code, is_normal
1553+ 6A57             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1553+ 6A57             >
1553+ 6A57             >                // dummy db directives used to calculate length of namec
1553+ 6A57 54 55 43 4B >                db      "TUCK"
1553+ 6A5B             >len_NFA         defl    $ - temp_NFA
1553+ 6A5B             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1553+ 6A57             >
1553+ 6A57 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1553+ 6A58 54 55 43 4B >                db      "TUCK"               // name string in 7-bit ascii, but
1553+ 6A5C             >                org     $-1                 // alter last byte of Name just above to set
1553+ 6A5B CB          >                db      {b $} | END_BIT     // msb as name end
1553+ 6A5C             >
1553+ 6A5C 4D 6A       >                dw      last_NFA            // Link to previous definition Name
1553+ 6A5E             >TUCK:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1553+ 6A5E ~           >                call    runcode ; ok        // for primitive definitions  actual code
1553+ 6A5E ~           >
1553+ 6A5E ~           >
1553+ 6A5E             >                endif           ; ok        // for other definitions it "points" the correct handler
1553+ 6A5E             >                // Use of "; ok" to suppress "warning[fwdref]"
1553+ 6A5E             >
1553+ 6A5E             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1554+ 6A5E E1                           pop     hl
1555+ 6A5F F1                           pop     af                  // < n1
1556+ 6A60 E5                           push    hl                  // > n2  and TOS
1557+ 6A61 F5                           push    af                  // > n1
1558+ 6A62 E5                           push    hl
1559+ 6A63                              next
1559+ 6A63 DD E9       >                jp      (ix)
1560+ 6A65
1561+ 6A65              //  ______________________________________________________________________
1562+ 6A65              //
1563+ 6A65              // swap         n1 n2 -- n2 n1
1564+ 6A65              // swaps the two values on top of stack
1565+ 6A65                              New_Def SWAP, "SWAP", is_code, is_normal
1565+ 6A65             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1565+ 6A65             >
1565+ 6A65             >                // dummy db directives used to calculate length of namec
1565+ 6A65 53 57 41 50 >                db      "SWAP"
1565+ 6A69             >len_NFA         defl    $ - temp_NFA
1565+ 6A69             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1565+ 6A65             >
1565+ 6A65 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1565+ 6A66 53 57 41 50 >                db      "SWAP"               // name string in 7-bit ascii, but
1565+ 6A6A             >                org     $-1                 // alter last byte of Name just above to set
1565+ 6A69 D0          >                db      {b $} | END_BIT     // msb as name end
1565+ 6A6A             >
1565+ 6A6A 57 6A       >                dw      last_NFA            // Link to previous definition Name
1565+ 6A6C             >SWAP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1565+ 6A6C ~           >                call    runcode ; ok        // for primitive definitions  actual code
1565+ 6A6C ~           >
1565+ 6A6C ~           >
1565+ 6A6C             >                endif           ; ok        // for other definitions it "points" the correct handler
1565+ 6A6C             >                // Use of "; ok" to suppress "warning[fwdref]"
1565+ 6A6C             >
1565+ 6A6C             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1566+ 6A6C E1                           pop     hl                  // < n1
1567+ 6A6D E3                           ex      (sp),hl             // > n2
1568+ 6A6E E5                           push    hl                  // copy n1 to TOS
1569+ 6A6F                              next
1569+ 6A6F DD E9       >                jp      (ix)
1570+ 6A71
1571+ 6A71              //  ______________________________________________________________________
1572+ 6A71              //
1573+ 6A71              // dup         n -- n n
1574+ 6A71              // duplicates the top value of stack
1575+ 6A71                              New_Def DUP, "DUP", is_code, is_normal
1575+ 6A71             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1575+ 6A71             >
1575+ 6A71             >                // dummy db directives used to calculate length of namec
1575+ 6A71 44 55 50    >                db      "DUP"
1575+ 6A74             >len_NFA         defl    $ - temp_NFA
1575+ 6A74             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1575+ 6A71             >
1575+ 6A71 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1575+ 6A72 44 55 50    >                db      "DUP"               // name string in 7-bit ascii, but
1575+ 6A75             >                org     $-1                 // alter last byte of Name just above to set
1575+ 6A74 D0          >                db      {b $} | END_BIT     // msb as name end
1575+ 6A75             >
1575+ 6A75 65 6A       >                dw      last_NFA            // Link to previous definition Name
1575+ 6A77             >DUP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1575+ 6A77 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1575+ 6A77 ~           >
1575+ 6A77 ~           >
1575+ 6A77             >                endif           ; ok        // for other definitions it "points" the correct handler
1575+ 6A77             >                // Use of "; ok" to suppress "warning[fwdref]"
1575+ 6A77             >
1575+ 6A77             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1576+ 6A77 E1                           pop     hl
1577+ 6A78 E5                           push    hl                  // > n duplicate TOS
1578+ 6A79 E5                           push    hl
1579+ 6A7A                              next
1579+ 6A7A DD E9       >                jp      (ix)
1580+ 6A7C
1581+ 6A7C              //  ______________________________________________________________________
1582+ 6A7C              //
1583+ 6A7C              // rot         n1 n2 n3 -- n2 n3 n1
1584+ 6A7C              // Rotates the 3 top values of stack by picking the 3rd in access-order
1585+ 6A7C              // and putting it on top. The other two are shifted down one place.
1586+ 6A7C                              New_Def ROT, "ROT", is_code, is_normal
1586+ 6A7C             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1586+ 6A7C             >
1586+ 6A7C             >                // dummy db directives used to calculate length of namec
1586+ 6A7C 52 4F 54    >                db      "ROT"
1586+ 6A7F             >len_NFA         defl    $ - temp_NFA
1586+ 6A7F             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1586+ 6A7C             >
1586+ 6A7C 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1586+ 6A7D 52 4F 54    >                db      "ROT"               // name string in 7-bit ascii, but
1586+ 6A80             >                org     $-1                 // alter last byte of Name just above to set
1586+ 6A7F D4          >                db      {b $} | END_BIT     // msb as name end
1586+ 6A80             >
1586+ 6A80 71 6A       >                dw      last_NFA            // Link to previous definition Name
1586+ 6A82             >ROT:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1586+ 6A82 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1586+ 6A82 ~           >
1586+ 6A82 ~           >
1586+ 6A82             >                endif           ; ok        // for other definitions it "points" the correct handler
1586+ 6A82             >                // Use of "; ok" to suppress "warning[fwdref]"
1586+ 6A82             >
1586+ 6A82             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1587+ 6A82 D9                           exx
1588+ 6A83 D1                           pop     de                  // < n3
1589+ 6A84 E1                           pop     hl                  // < n2
1590+ 6A85 E3                           ex      (sp),hl             // > n2 < n1
1591+ 6A86 D5                           push    de                  // > n3
1592+ 6A87 E5                           push    hl                  // copy n1 to TOS
1593+ 6A88 D9                           exx
1594+ 6A89                              next
1594+ 6A89 DD E9       >                jp      (ix)
1595+ 6A8B
1596+ 6A8B              //  ______________________________________________________________________
1597+ 6A8B              //
1598+ 6A8B              // -rot         n1 n2 n3 -- n3 n1 n2
1599+ 6A8B              // Rotates the 3 top values of stack by picking the 1st in access-order
1600+ 6A8B              // and putting back to 3rd place. The other two are shifted down one place.
1601+ 6A8B                              New_Def DASH_ROT, "-ROT", is_code, is_normal
1601+ 6A8B             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1601+ 6A8B             >
1601+ 6A8B             >                // dummy db directives used to calculate length of namec
1601+ 6A8B 2D 52 4F 54 >                db      "-ROT"
1601+ 6A8F             >len_NFA         defl    $ - temp_NFA
1601+ 6A8F             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1601+ 6A8B             >
1601+ 6A8B 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1601+ 6A8C 2D 52 4F 54 >                db      "-ROT"               // name string in 7-bit ascii, but
1601+ 6A90             >                org     $-1                 // alter last byte of Name just above to set
1601+ 6A8F D4          >                db      {b $} | END_BIT     // msb as name end
1601+ 6A90             >
1601+ 6A90 7C 6A       >                dw      last_NFA            // Link to previous definition Name
1601+ 6A92             >DASH_ROT:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1601+ 6A92 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1601+ 6A92 ~           >
1601+ 6A92 ~           >
1601+ 6A92             >                endif           ; ok        // for other definitions it "points" the correct handler
1601+ 6A92             >                // Use of "; ok" to suppress "warning[fwdref]"
1601+ 6A92             >
1601+ 6A92             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1602+ 6A92 D9                           exx
1603+ 6A93 E1                           pop     hl                  // < n3
1604+ 6A94 D1                           pop     de                  // < n2
1605+ 6A95 E3                           ex      (sp),hl             // > n3 < n1
1606+ 6A96 E5                           push    hl                  // > n1
1607+ 6A97 D5                           push    de                  // copy n3 to TOS
1608+ 6A98 D9                           exx
1609+ 6A99                              next
1609+ 6A99 DD E9       >                jp      (ix)
1610+ 6A9B
1611+ 6A9B              //  ______________________________________________________________________
1612+ 6A9B              //
1613+ 6A9B              // pick        n1 -- nx
1614+ 6A9B              // picks the nth element from TOS
1615+ 6A9B                              New_Def PICK, "PICK", is_code, is_normal
1615+ 6A9B             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1615+ 6A9B             >
1615+ 6A9B             >                // dummy db directives used to calculate length of namec
1615+ 6A9B 50 49 43 4B >                db      "PICK"
1615+ 6A9F             >len_NFA         defl    $ - temp_NFA
1615+ 6A9F             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1615+ 6A9B             >
1615+ 6A9B 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1615+ 6A9C 50 49 43 4B >                db      "PICK"               // name string in 7-bit ascii, but
1615+ 6AA0             >                org     $-1                 // alter last byte of Name just above to set
1615+ 6A9F CB          >                db      {b $} | END_BIT     // msb as name end
1615+ 6AA0             >
1615+ 6AA0 8B 6A       >                dw      last_NFA            // Link to previous definition Name
1615+ 6AA2             >PICK:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1615+ 6AA2 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1615+ 6AA2 ~           >
1615+ 6AA2 ~           >
1615+ 6AA2             >                endif           ; ok        // for other definitions it "points" the correct handler
1615+ 6AA2             >                // Use of "; ok" to suppress "warning[fwdref]"
1615+ 6AA2             >
1615+ 6AA2             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1616+ 6AA2 E1                           pop     hl                  // take TOS as index
1617+ 6AA3 29                           add     hl, hl              // as cells
1618+ 6AA4 39                           add     hl, sp              // from Stack Pointer
1619+ 6AA5 7E                           ld      a, (hl)             // replace TOS
1620+ 6AA6 23                           inc     hl
1621+ 6AA7 66                           ld      h, (hl)
1622+ 6AA8 6F                           ld      l, a
1623+ 6AA9 E5                           push    hl
1624+ 6AAA                              next
1624+ 6AAA DD E9       >                jp      (ix)
1625+ 6AAC
1626+ 6AAC
1627+ 6AAC              //  ______________________________________________________________________
1628+ 6AAC              //
1629+ 6AAC              // roll        n1 n2 n3 ... n -- n2 n3 ... n1
1630+ 6AAC              // picks the nth element from TOS
1631+ 6AAC              //              New_Def ROLL, "ROLL", is_code, is_normal
1632+ 6AAC              //              exx                     // we need all registers free
1633+ 6AAC              //              pop     hl              // number of cells to roll
1634+ 6AAC              //              ld      a, h
1635+ 6AAC              //              or       l
1636+ 6AAC              //              jr      z, Roll_Zero
1637+ 6AAC              //                  add     hl, hl              // number of bytes to move
1638+ 6AAC              //                  ld      b, h
1639+ 6AAC              //                  ld      c, l
1640+ 6AAC              //                  add     hl, sp          // address of n1
1641+ 6AAC              //                  ld      a, (hl)         // take n1 into a and a,
1642+ 6AAC              //                  inc     hl
1643+ 6AAC              //                  ex      af, af'
1644+ 6AAC              //                  ld      a, (hl)         // take n1 into a and a,
1645+ 6AAC              //                  ld      d, h
1646+ 6AAC              //                  ld      e, l
1647+ 6AAC              //                  dec     hl
1648+ 6AAC              //                  dec     hl
1649+ 6AAC              //                  lddr
1650+ 6AAC              //                  ex      de, hl
1651+ 6AAC              //                  ld      (hl), a
1652+ 6AAC              //                  dec     hl
1653+ 6AAC              //                  ex      af, af'
1654+ 6AAC              //                  ld      (hl), a
1655+ 6AAC              //Roll_Zero:
1656+ 6AAC              //              exx
1657+ 6AAC              //              next
1658+ 6AAC
1659+ 6AAC
1660+ 6AAC              //  ______________________________________________________________________
1661+ 6AAC              //
1662+ 6AAC              // 2over        d1 d2 -- d1 d2 d1
1663+ 6AAC              //              n1 n2 n3 n4 -- n1 n2 n3 n4 n1 n2
1664+ 6AAC              // copy the second double of stack and put on top.
1665+ 6AAC              //              New_Def TWO_OVER, "2OVER", is_code, is_normal
1666+ 6AAC              //              exx
1667+ 6AAC              //              ld      hl, 7
1668+ 6AAC              //              add     hl, sp
1669+ 6AAC              //              ld      d, (hl)
1670+ 6AAC              //              dec     hl
1671+ 6AAC              //              ld      e, (hl)             // d1-L
1672+ 6AAC              //              push    de
1673+ 6AAC              //              dec     hl
1674+ 6AAC              //              ld      d, (hl)
1675+ 6AAC              //              dec     hl
1676+ 6AAC              //              ld      e, (hl)             // d1-H
1677+ 6AAC              //              push    de
1678+ 6AAC              //              exx
1679+ 6AAC              //              next
1680+ 6AAC
1681+ 6AAC              //  ______________________________________________________________________
1682+ 6AAC              //
1683+ 6AAC              // 2drop        d --
1684+ 6AAC              //              n1 n2 --
1685+ 6AAC              // drops the top double from stack
1686+ 6AAC                              New_Def TWO_DROP, "2DROP", is_code, is_normal
1686+ 6AAC             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1686+ 6AAC             >
1686+ 6AAC             >                // dummy db directives used to calculate length of namec
1686+ 6AAC 32 44 52 4F >                db      "2DROP"
1686+ 6AB0 50          >
1686+ 6AB1             >len_NFA         defl    $ - temp_NFA
1686+ 6AB1             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1686+ 6AAC             >
1686+ 6AAC 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1686+ 6AAD 32 44 52 4F >                db      "2DROP"               // name string in 7-bit ascii, but
1686+ 6AB1 50          >
1686+ 6AB2             >                org     $-1                 // alter last byte of Name just above to set
1686+ 6AB1 D0          >                db      {b $} | END_BIT     // msb as name end
1686+ 6AB2             >
1686+ 6AB2 9B 6A       >                dw      last_NFA            // Link to previous definition Name
1686+ 6AB4             >TWO_DROP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1686+ 6AB4 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1686+ 6AB4 ~           >
1686+ 6AB4 ~           >
1686+ 6AB4             >                endif           ; ok        // for other definitions it "points" the correct handler
1686+ 6AB4             >                // Use of "; ok" to suppress "warning[fwdref]"
1686+ 6AB4             >
1686+ 6AB4             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1687+ 6AB4 E1                           pop     hl
1688+ 6AB5 E1                           pop     hl
1689+ 6AB6                              next
1689+ 6AB6 DD E9       >                jp      (ix)
1690+ 6AB8
1691+ 6AB8              //  ______________________________________________________________________
1692+ 6AB8              //
1693+ 6AB8              // 2nip         d1 d2 -- d2
1694+ 6AB8              //              n1 n2 n3 n4 -- n3 n4
1695+ 6AB8              // drops the second double on the stack
1696+ 6AB8              //              New_Def TWO_NIP, 4, "2nip"
1697+ 6AB8              //              ...
1698+ 6AB8
1699+ 6AB8              //  ______________________________________________________________________
1700+ 6AB8              //
1701+ 6AB8              // 2tuck         d1 d2 -- d2 d1 d2
1702+ 6AB8              // copy the top element after the second.
1703+ 6AB8              //              New_Def TWO_TUCK, 5, "2tuck"
1704+ 6AB8              //              ...
1705+ 6AB8
1706+ 6AB8              //  ______________________________________________________________________
1707+ 6AB8              //
1708+ 6AB8              // 2swap         d1 d2 -- d2 d1
1709+ 6AB8              //               n1 n2 n3 n4 -- n3 n4 n1 n2
1710+ 6AB8              // swaps the two doubles on top of stack
1711+ 6AB8                              New_Def TWO_SWAP, "2SWAP", is_code, is_normal
1711+ 6AB8             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1711+ 6AB8             >
1711+ 6AB8             >                // dummy db directives used to calculate length of namec
1711+ 6AB8 32 53 57 41 >                db      "2SWAP"
1711+ 6ABC 50          >
1711+ 6ABD             >len_NFA         defl    $ - temp_NFA
1711+ 6ABD             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1711+ 6AB8             >
1711+ 6AB8 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1711+ 6AB9 32 53 57 41 >                db      "2SWAP"               // name string in 7-bit ascii, but
1711+ 6ABD 50          >
1711+ 6ABE             >                org     $-1                 // alter last byte of Name just above to set
1711+ 6ABD D0          >                db      {b $} | END_BIT     // msb as name end
1711+ 6ABE             >
1711+ 6ABE AC 6A       >                dw      last_NFA            // Link to previous definition Name
1711+ 6AC0             >TWO_SWAP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1711+ 6AC0 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1711+ 6AC0 ~           >
1711+ 6AC0 ~           >
1711+ 6AC0             >                endif           ; ok        // for other definitions it "points" the correct handler
1711+ 6AC0             >                // Use of "; ok" to suppress "warning[fwdref]"
1711+ 6AC0             >
1711+ 6AC0             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1712+ 6AC0 D9                           exx
1713+ 6AC1 F1                           pop     af                  //   d2-H
1714+ 6AC2 E1                           pop     hl                  // < d2-L
1715+ 6AC3 D1                           pop     de                  // < d1-H
1716+ 6AC4 E3                           ex      (sp), hl            // < d1-L > d2-L
1717+ 6AC5 F5                           push    af                  // > d2-H
1718+ 6AC6 E5                           push    hl                  // > d1-L
1719+ 6AC7 D5                           push    de
1720+ 6AC8 D9                           exx
1721+ 6AC9                              next
1721+ 6AC9 DD E9       >                jp      (ix)
1722+ 6ACB
1723+ 6ACB              //  ______________________________________________________________________
1724+ 6ACB              //
1725+ 6ACB              // 2dup         d -- d d
1726+ 6ACB              //              n1 n2 -- n1 n2 n1 n2
1727+ 6ACB              // duplicates the top double of stack
1728+ 6ACB                              New_Def TWO_DUP, "2DUP", is_code, is_normal
1728+ 6ACB             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1728+ 6ACB             >
1728+ 6ACB             >                // dummy db directives used to calculate length of namec
1728+ 6ACB 32 44 55 50 >                db      "2DUP"
1728+ 6ACF             >len_NFA         defl    $ - temp_NFA
1728+ 6ACF             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1728+ 6ACB             >
1728+ 6ACB 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1728+ 6ACC 32 44 55 50 >                db      "2DUP"               // name string in 7-bit ascii, but
1728+ 6AD0             >                org     $-1                 // alter last byte of Name just above to set
1728+ 6ACF D0          >                db      {b $} | END_BIT     // msb as name end
1728+ 6AD0             >
1728+ 6AD0 B8 6A       >                dw      last_NFA            // Link to previous definition Name
1728+ 6AD2             >TWO_DUP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1728+ 6AD2 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1728+ 6AD2 ~           >
1728+ 6AD2 ~           >
1728+ 6AD2             >                endif           ; ok        // for other definitions it "points" the correct handler
1728+ 6AD2             >                // Use of "; ok" to suppress "warning[fwdref]"
1728+ 6AD2             >
1728+ 6AD2             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1729+ 6AD2 E1                           pop     hl                  // < d-H
1730+ 6AD3 F1                           pop     af                  // < d-L
1731+ 6AD4 F5                           push    af                  // < d-L
1732+ 6AD5 E5                           push    hl                  // > d-H
1733+ 6AD6 F5                           push    af                  // > d-L
1734+ 6AD7 E5                           push    hl                  // > d-H
1735+ 6AD8                              next
1735+ 6AD8 DD E9       >                jp      (ix)
1736+ 6ADA
1737+ 6ADA              //  ______________________________________________________________________
1738+ 6ADA              //
1739+ 6ADA              // 2rot         d1 d2 d3 -- d2 d3 d1
1740+ 6ADA              //              n1 n2 n3 n4 n5 n6 -- n3 n4 n5 n6 n1 n2
1741+ 6ADA              // Rotates the 3 top doubles of stack by picking the 3rd in access-order
1742+ 6ADA              // and putting it on top. The other two are shifted down one place.
1743+ 6ADA              //              New_Def TWO?ROT, 4, "2rot"
1744+ 6ADA              //              ...
1745+ 6ADA              //              New_Def TWO_ROT, "2ROT", is_code, is_normal
1746+ 6ADA              //
1747+ 6ADA              //      d3  |d2  |d1  |
1748+ 6ADA              //      h l |h l |h l |
1749+ 6ADA              // SP   LHED|LHED|LHED|
1750+ 6ADA              // SP  +0123|4567|89ab|
1751+ 6ADA              //              ld      hl, $000B
1752+ 6ADA              //              add     hl, sp
1753+ 6ADA              //              ld      d, (hl)
1754+ 6ADA              //              dec     hl
1755+ 6ADA              //              ld      e, (hl)
1756+ 6ADA              //              dec     hl
1757+ 6ADA              //              push    de
1758+ 6ADA              //              ld      d, (hl)
1759+ 6ADA              //              dec     hl
1760+ 6ADA              //              ld      e, (hl)
1761+ 6ADA              //              dec     hl
1762+ 6ADA              //              push    de
1763+ 6ADA
1764+ 6ADA              //      d1  |d3  |d2  |d1  |
1765+ 6ADA              //      h l |h l |h l |h l |
1766+ 6ADA              // SP   LHED|LHED|LHED|LHED|
1767+ 6ADA              // SP       +0123|4567|89ab|
1768+ 6ADA
1769+ 6ADA              //              ld      d, h
1770+ 6ADA              //              ld      e, l
1771+ 6ADA              //              inc     de
1772+ 6ADA              //              inc     de
1773+ 6ADA              //              inc     de
1774+ 6ADA              //              inc     de
1775+ 6ADA              //              push    bc
1776+ 6ADA              //              ld      bc, $000C
1777+ 6ADA              //              lddr
1778+ 6ADA              //              pop     bc
1779+ 6ADA              //              pop     de
1780+ 6ADA              //              pop     de
1781+ 6ADA              //
1782+ 6ADA              //              next
1783+ 6ADA
1784+ 6ADA
1785+ 6ADA              //  ______________________________________________________________________
1786+ 6ADA              //
1787+ 6ADA              // +!           n a --
1788+ 6ADA              // Sums to the content of address a the number n.
1789+ 6ADA              // It is the same of  a @ n + a !
1790+ 6ADA                              New_Def PLUSSTORE, "+!", is_code, is_normal
1790+ 6ADA             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1790+ 6ADA             >
1790+ 6ADA             >                // dummy db directives used to calculate length of namec
1790+ 6ADA 2B 21       >                db      "+!"
1790+ 6ADC             >len_NFA         defl    $ - temp_NFA
1790+ 6ADC             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1790+ 6ADA             >
1790+ 6ADA 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1790+ 6ADB 2B 21       >                db      "+!"               // name string in 7-bit ascii, but
1790+ 6ADD             >                org     $-1                 // alter last byte of Name just above to set
1790+ 6ADC A1          >                db      {b $} | END_BIT     // msb as name end
1790+ 6ADD             >
1790+ 6ADD CB 6A       >                dw      last_NFA            // Link to previous definition Name
1790+ 6ADF             >PLUSSTORE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1790+ 6ADF ~           >                call    runcode ; ok        // for primitive definitions  actual code
1790+ 6ADF ~           >
1790+ 6ADF ~           >
1790+ 6ADF             >                endif           ; ok        // for other definitions it "points" the correct handler
1790+ 6ADF             >                // Use of "; ok" to suppress "warning[fwdref]"
1790+ 6ADF             >
1790+ 6ADF             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1791+ 6ADF D9                           exx
1792+ 6AE0 E1                           pop     hl                  // hl is the address
1793+ 6AE1 D1                           pop     de                  // de is the number
1794+ 6AE2 7E                           ld      a, (hl)
1795+ 6AE3 83                           add     e
1796+ 6AE4 77                           ld      (hl), a
1797+ 6AE5 23                           inc     hl
1798+ 6AE6 7E                           ld      a, (hl)
1799+ 6AE7 8A                           adc     d
1800+ 6AE8 77                           ld      (hl), a
1801+ 6AE9 D9                           exx
1802+ 6AEA                              next
1802+ 6AEA DD E9       >                jp      (ix)
1803+ 6AEC
1804+ 6AEC              //  ______________________________________________________________________
1805+ 6AEC              //
1806+ 6AEC              // toggle       a n --
1807+ 6AEC              // Complements (xor) the byte at addrress  a  with the model n.
1808+ 6AEC                              New_Def TOGGLE, "TOGGLE", is_code, is_normal
1808+ 6AEC             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1808+ 6AEC             >
1808+ 6AEC             >                // dummy db directives used to calculate length of namec
1808+ 6AEC 54 4F 47 47 >                db      "TOGGLE"
1808+ 6AF0 4C 45       >
1808+ 6AF2             >len_NFA         defl    $ - temp_NFA
1808+ 6AF2             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1808+ 6AEC             >
1808+ 6AEC 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1808+ 6AED 54 4F 47 47 >                db      "TOGGLE"               // name string in 7-bit ascii, but
1808+ 6AF1 4C 45       >
1808+ 6AF3             >                org     $-1                 // alter last byte of Name just above to set
1808+ 6AF2 C5          >                db      {b $} | END_BIT     // msb as name end
1808+ 6AF3             >
1808+ 6AF3 DA 6A       >                dw      last_NFA            // Link to previous definition Name
1808+ 6AF5             >TOGGLE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1808+ 6AF5 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1808+ 6AF5 ~           >
1808+ 6AF5 ~           >
1808+ 6AF5             >                endif           ; ok        // for other definitions it "points" the correct handler
1808+ 6AF5             >                // Use of "; ok" to suppress "warning[fwdref]"
1808+ 6AF5             >
1808+ 6AF5             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1809+ 6AF5 E1                           pop     hl
1810+ 6AF6 7D                           ld      a, l
1811+ 6AF7 E1                           pop     hl
1812+ 6AF8 AE                           xor     (hl)
1813+ 6AF9 77                           ld      (hl), a
1814+ 6AFA
1815+ 6AFA                              next
1815+ 6AFA DD E9       >                jp      (ix)
1816+ 6AFC
1817+ 6AFC              //  ______________________________________________________________________
1818+ 6AFC              //
1819+ 6AFC              // @            a -- n
1820+ 6AFC              // fetch 16 bit number n from address a. Z80 keeps high byte is in high memory
1821+ 6AFC                              New_Def FETCH, "@", is_code, is_normal
1821+ 6AFC             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1821+ 6AFC             >
1821+ 6AFC             >                // dummy db directives used to calculate length of namec
1821+ 6AFC 40          >                db      "@"
1821+ 6AFD             >len_NFA         defl    $ - temp_NFA
1821+ 6AFD             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1821+ 6AFC             >
1821+ 6AFC 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1821+ 6AFD 40          >                db      "@"               // name string in 7-bit ascii, but
1821+ 6AFE             >                org     $-1                 // alter last byte of Name just above to set
1821+ 6AFD C0          >                db      {b $} | END_BIT     // msb as name end
1821+ 6AFE             >
1821+ 6AFE EC 6A       >                dw      last_NFA            // Link to previous definition Name
1821+ 6B00             >FETCH:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1821+ 6B00 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1821+ 6B00 ~           >
1821+ 6B00 ~           >
1821+ 6B00             >                endif           ; ok        // for other definitions it "points" the correct handler
1821+ 6B00             >                // Use of "; ok" to suppress "warning[fwdref]"
1821+ 6B00             >
1821+ 6B00             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1822+ 6B00 E1                           pop     hl
1823+ 6B01 7E                           ld      a, (hl)             // low-byte
1824+ 6B02 23                           inc     hl
1825+ 6B03 66                           ld      h, (hl)             // high-byte
1826+ 6B04 6F                           ld      l, a
1827+ 6B05 E5                           push    hl
1828+ 6B06                              next
1828+ 6B06 DD E9       >                jp      (ix)
1829+ 6B08
1830+ 6B08              //  ______________________________________________________________________
1831+ 6B08              //
1832+ 6B08              // !            n a --
1833+ 6B08              // store 16 bit number n from address a. Z80 keeps high byte is in high memory
1834+ 6B08                              New_Def STORE, "!", is_code, is_normal
1834+ 6B08             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1834+ 6B08             >
1834+ 6B08             >                // dummy db directives used to calculate length of namec
1834+ 6B08 21          >                db      "!"
1834+ 6B09             >len_NFA         defl    $ - temp_NFA
1834+ 6B09             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1834+ 6B08             >
1834+ 6B08 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1834+ 6B09 21          >                db      "!"               // name string in 7-bit ascii, but
1834+ 6B0A             >                org     $-1                 // alter last byte of Name just above to set
1834+ 6B09 A1          >                db      {b $} | END_BIT     // msb as name end
1834+ 6B0A             >
1834+ 6B0A FC 6A       >                dw      last_NFA            // Link to previous definition Name
1834+ 6B0C             >STORE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1834+ 6B0C ~           >                call    runcode ; ok        // for primitive definitions  actual code
1834+ 6B0C ~           >
1834+ 6B0C ~           >
1834+ 6B0C             >                endif           ; ok        // for other definitions it "points" the correct handler
1834+ 6B0C             >                // Use of "; ok" to suppress "warning[fwdref]"
1834+ 6B0C             >
1834+ 6B0C             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1835+ 6B0C D9                           exx
1836+ 6B0D E1                           pop     hl                  // address
1837+ 6B0E D1                           pop     de                  // < n
1838+ 6B0F 73                           ld      (hl), e             // low-byte
1839+ 6B10 23                           inc     hl
1840+ 6B11 72                           ld      (hl), d             // high-byte
1841+ 6B12 D9                           exx
1842+ 6B13                              next
1842+ 6B13 DD E9       >                jp      (ix)
1843+ 6B15
1844+ 6B15              //  ______________________________________________________________________
1845+ 6B15              //
1846+ 6B15              // c@           a -- c
1847+ 6B15              // fetch a character n from address a
1848+ 6B15                              New_Def CFETCH, "C@", is_code, is_normal
1848+ 6B15             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1848+ 6B15             >
1848+ 6B15             >                // dummy db directives used to calculate length of namec
1848+ 6B15 43 40       >                db      "C@"
1848+ 6B17             >len_NFA         defl    $ - temp_NFA
1848+ 6B17             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1848+ 6B15             >
1848+ 6B15 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1848+ 6B16 43 40       >                db      "C@"               // name string in 7-bit ascii, but
1848+ 6B18             >                org     $-1                 // alter last byte of Name just above to set
1848+ 6B17 C0          >                db      {b $} | END_BIT     // msb as name end
1848+ 6B18             >
1848+ 6B18 08 6B       >                dw      last_NFA            // Link to previous definition Name
1848+ 6B1A             >CFETCH:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1848+ 6B1A ~           >                call    runcode ; ok        // for primitive definitions  actual code
1848+ 6B1A ~           >
1848+ 6B1A ~           >
1848+ 6B1A             >                endif           ; ok        // for other definitions it "points" the correct handler
1848+ 6B1A             >                // Use of "; ok" to suppress "warning[fwdref]"
1848+ 6B1A             >
1848+ 6B1A             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1849+ 6B1A E1                           pop     hl
1850+ 6B1B 6E                           ld      l, (hl)             // low-byte
1851+ 6B1C 26 00                        ld      h, 0
1852+ 6B1E
1853+ 6B1E                              psh1
1853+ 6B1E E5          >                push    hl
1853+ 6B1F DD E9       >                jp      (ix)
1854+ 6B21
1855+ 6B21              //  ______________________________________________________________________
1856+ 6B21              //
1857+ 6B21              // c!           c a --
1858+ 6B21              // fetch 16 bit number n from address a. Z80 keeps high byte is in high memory
1859+ 6B21                              New_Def CSTORE, "C!", is_code, is_normal
1859+ 6B21             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1859+ 6B21             >
1859+ 6B21             >                // dummy db directives used to calculate length of namec
1859+ 6B21 43 21       >                db      "C!"
1859+ 6B23             >len_NFA         defl    $ - temp_NFA
1859+ 6B23             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1859+ 6B21             >
1859+ 6B21 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1859+ 6B22 43 21       >                db      "C!"               // name string in 7-bit ascii, but
1859+ 6B24             >                org     $-1                 // alter last byte of Name just above to set
1859+ 6B23 A1          >                db      {b $} | END_BIT     // msb as name end
1859+ 6B24             >
1859+ 6B24 15 6B       >                dw      last_NFA            // Link to previous definition Name
1859+ 6B26             >CSTORE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1859+ 6B26 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1859+ 6B26 ~           >
1859+ 6B26 ~           >
1859+ 6B26             >                endif           ; ok        // for other definitions it "points" the correct handler
1859+ 6B26             >                // Use of "; ok" to suppress "warning[fwdref]"
1859+ 6B26             >
1859+ 6B26             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1860+ 6B26 D9                           exx
1861+ 6B27 E1                           pop     hl                  // < address
1862+ 6B28 D1                           pop     de
1863+ 6B29 73                           ld      (hl), e             // low-byte
1864+ 6B2A D9                           exx
1865+ 6B2B                              next
1865+ 6B2B DD E9       >                jp      (ix)
1866+ 6B2D
1867+ 6B2D              //  ______________________________________________________________________
1868+ 6B2D              //
1869+ 6B2D              // 2@           a -- d
1870+ 6B2D              // fetch a 32 bits number d from address a and leaves it on top of the
1871+ 6B2D              // stack as two single numbers, high part as top of the stack.
1872+ 6B2D              // A double number is normally kept in CPU registers as HLDE.
1873+ 6B2D              // On stack a double number is treated as two single numbers
1874+ 6B2D              // where BC is on the top of the stack and HL is the second from top,
1875+ 6B2D              // so the sign of the number can be checked on top of stack
1876+ 6B2D              // and in the stack memory it appears as LHED.
1877+ 6B2D                              New_Def TWO_FETCH, "2@", is_code, is_normal
1877+ 6B2D             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1877+ 6B2D             >
1877+ 6B2D             >                // dummy db directives used to calculate length of namec
1877+ 6B2D 32 40       >                db      "2@"
1877+ 6B2F             >len_NFA         defl    $ - temp_NFA
1877+ 6B2F             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1877+ 6B2D             >
1877+ 6B2D 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1877+ 6B2E 32 40       >                db      "2@"               // name string in 7-bit ascii, but
1877+ 6B30             >                org     $-1                 // alter last byte of Name just above to set
1877+ 6B2F C0          >                db      {b $} | END_BIT     // msb as name end
1877+ 6B30             >
1877+ 6B30 21 6B       >                dw      last_NFA            // Link to previous definition Name
1877+ 6B32             >TWO_FETCH:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1877+ 6B32 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1877+ 6B32 ~           >
1877+ 6B32 ~           >
1877+ 6B32             >                endif           ; ok        // for other definitions it "points" the correct handler
1877+ 6B32             >                // Use of "; ok" to suppress "warning[fwdref]"
1877+ 6B32             >
1877+ 6B32             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1878+ 6B32 D9                           exx
1879+ 6B33 E1                           pop     hl                  // address
1880+ 6B34 5E                           ld      e, (hl)             // low-byte
1881+ 6B35 23                           inc     hl
1882+ 6B36 56                           ld      d, (hl)             // high-byte
1883+ 6B37 23                           inc     hl
1884+ 6B38 7E                           ld      a, (hl)             // low-byte
1885+ 6B39 23                           inc     hl
1886+ 6B3A 66                           ld      h, (hl)             // high-byte
1887+ 6B3B 6F                           ld      l, a
1888+ 6B3C E5                           push    hl
1889+ 6B3D D5                           push    de
1890+ 6B3E D9                           exx
1891+ 6B3F                              next
1891+ 6B3F DD E9       >                jp      (ix)
1892+ 6B41
1893+ 6B41              //  ______________________________________________________________________
1894+ 6B41              //
1895+ 6B41              // 2!           d a --
1896+ 6B41              // stores a 32 bits number d from address a and leaves it on top of the
1897+ 6B41              // stack as two single numbers, high part as top of the stack.
1898+ 6B41              // A double number is normally kept in CPU registers as HLDE.
1899+ 6B41              // On stack a double number is treated as two single numbers
1900+ 6B41              // where BC is on the top of the stack and HL is the second from top,
1901+ 6B41              // so the sign of the number can be checked on top of stack
1902+ 6B41              // and in the stack memory it appears as LHED.
1903+ 6B41                              New_Def TWO_STORE, "2!", is_code, is_normal
1903+ 6B41             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1903+ 6B41             >
1903+ 6B41             >                // dummy db directives used to calculate length of namec
1903+ 6B41 32 21       >                db      "2!"
1903+ 6B43             >len_NFA         defl    $ - temp_NFA
1903+ 6B43             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1903+ 6B41             >
1903+ 6B41 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1903+ 6B42 32 21       >                db      "2!"               // name string in 7-bit ascii, but
1903+ 6B44             >                org     $-1                 // alter last byte of Name just above to set
1903+ 6B43 A1          >                db      {b $} | END_BIT     // msb as name end
1903+ 6B44             >
1903+ 6B44 2D 6B       >                dw      last_NFA            // Link to previous definition Name
1903+ 6B46             >TWO_STORE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1903+ 6B46 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1903+ 6B46 ~           >
1903+ 6B46 ~           >
1903+ 6B46             >                endif           ; ok        // for other definitions it "points" the correct handler
1903+ 6B46             >                // Use of "; ok" to suppress "warning[fwdref]"
1903+ 6B46             >
1903+ 6B46             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1904+ 6B46 D9                           exx
1905+ 6B47 E1                           pop     hl                  // address
1906+ 6B48 C1                           pop     bc                  // < high-part
1907+ 6B49 D1                           pop     de                  // < low-part > Instruction Pointer
1908+ 6B4A 71                           ld      (hl), c
1909+ 6B4B 23                           inc     hl
1910+ 6B4C 70                           ld      (hl), b
1911+ 6B4D 23                           inc     hl
1912+ 6B4E 73                           ld      (hl), e
1913+ 6B4F 23                           inc     hl
1914+ 6B50 72                           ld      (hl), d
1915+ 6B51 D9                           exx
1916+ 6B52                              next
1916+ 6B52 DD E9       >                jp      (ix)
1917+ 6B54
1918+ 6B54              //  ______________________________________________________________________
1919+ 6B54              //
1920+ 6B54              // p@           a -- c
1921+ 6B54              // Read one byte from port a and leave the result on top of stack
1922+ 6B54                              New_Def PFETCH, "P@", is_code, is_normal
1922+ 6B54             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1922+ 6B54             >
1922+ 6B54             >                // dummy db directives used to calculate length of namec
1922+ 6B54 50 40       >                db      "P@"
1922+ 6B56             >len_NFA         defl    $ - temp_NFA
1922+ 6B56             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1922+ 6B54             >
1922+ 6B54 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1922+ 6B55 50 40       >                db      "P@"               // name string in 7-bit ascii, but
1922+ 6B57             >                org     $-1                 // alter last byte of Name just above to set
1922+ 6B56 C0          >                db      {b $} | END_BIT     // msb as name end
1922+ 6B57             >
1922+ 6B57 41 6B       >                dw      last_NFA            // Link to previous definition Name
1922+ 6B59             >PFETCH:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1922+ 6B59 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1922+ 6B59 ~           >
1922+ 6B59 ~           >
1922+ 6B59             >                endif           ; ok        // for other definitions it "points" the correct handler
1922+ 6B59             >                // Use of "; ok" to suppress "warning[fwdref]"
1922+ 6B59             >
1922+ 6B59             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1923+ 6B59 D9                           exx
1924+ 6B5A C1                           pop     bc
1925+ 6B5B 26 00                        ld      h, 0
1926+ 6B5D ED 68                        in      l, (c)
1927+ 6B5F E5                           push    hl
1928+ 6B60 D9                           exx
1929+ 6B61                              next
1929+ 6B61 DD E9       >                jp      (ix)
1930+ 6B63
1931+ 6B63              //  ______________________________________________________________________
1932+ 6B63              //
1933+ 6B63              // p!           c a --
1934+ 6B63              // Send one byte (top of stack) to port a
1935+ 6B63                              New_Def PSTORE, "P!", is_code, is_normal
1935+ 6B63             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1935+ 6B63             >
1935+ 6B63             >                // dummy db directives used to calculate length of namec
1935+ 6B63 50 21       >                db      "P!"
1935+ 6B65             >len_NFA         defl    $ - temp_NFA
1935+ 6B65             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1935+ 6B63             >
1935+ 6B63 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1935+ 6B64 50 21       >                db      "P!"               // name string in 7-bit ascii, but
1935+ 6B66             >                org     $-1                 // alter last byte of Name just above to set
1935+ 6B65 A1          >                db      {b $} | END_BIT     // msb as name end
1935+ 6B66             >
1935+ 6B66 54 6B       >                dw      last_NFA            // Link to previous definition Name
1935+ 6B68             >PSTORE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1935+ 6B68 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1935+ 6B68 ~           >
1935+ 6B68 ~           >
1935+ 6B68             >                endif           ; ok        // for other definitions it "points" the correct handler
1935+ 6B68             >                // Use of "; ok" to suppress "warning[fwdref]"
1935+ 6B68             >
1935+ 6B68             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1936+ 6B68 D9                           exx
1937+ 6B69 C1                           pop     bc
1938+ 6B6A E1                           pop     hl                  // < c
1939+ 6B6B ED 69                        out     (c), l              // low-byte
1940+ 6B6D D9                           exx
1941+ 6B6E                              next
1941+ 6B6E DD E9       >                jp      (ix)
1942+ 6B70
1943+ 6B70
1944+ 6B70              //  ______________________________________________________________________
1945+ 6B70              //
1946+ 6B70              // 2*           n1 -- n2
1947+ 6B70              // doubles the number at top of stack
1948+ 6B70                              New_Def TWO_MUL, "2*", is_code, is_normal
1948+ 6B70             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1948+ 6B70             >
1948+ 6B70             >                // dummy db directives used to calculate length of namec
1948+ 6B70 32 2A       >                db      "2*"
1948+ 6B72             >len_NFA         defl    $ - temp_NFA
1948+ 6B72             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1948+ 6B70             >
1948+ 6B70 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1948+ 6B71 32 2A       >                db      "2*"               // name string in 7-bit ascii, but
1948+ 6B73             >                org     $-1                 // alter last byte of Name just above to set
1948+ 6B72 AA          >                db      {b $} | END_BIT     // msb as name end
1948+ 6B73             >
1948+ 6B73 63 6B       >                dw      last_NFA            // Link to previous definition Name
1948+ 6B75             >TWO_MUL:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1948+ 6B75 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1948+ 6B75 ~           >
1948+ 6B75 ~           >
1948+ 6B75             >                endif           ; ok        // for other definitions it "points" the correct handler
1948+ 6B75             >                // Use of "; ok" to suppress "warning[fwdref]"
1948+ 6B75             >
1948+ 6B75             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1949+ 6B75              Two_Mul_Ptr:
1950+ 6B75 E1                           pop     hl
1951+ 6B76 29                           add     hl, hl
1952+ 6B77
1953+ 6B77                              psh1
1953+ 6B77 E5          >                push    hl
1953+ 6B78 DD E9       >                jp      (ix)
1954+ 6B7A
1955+ 6B7A              //  ______________________________________________________________________
1956+ 6B7A              //
1957+ 6B7A              // 2/           n1 -- n2
1958+ 6B7A              // halves the top of stack, sign is unchanged
1959+ 6B7A                              New_Def TWO_DIV, "2/", is_code, is_normal
1959+ 6B7A             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1959+ 6B7A             >
1959+ 6B7A             >                // dummy db directives used to calculate length of namec
1959+ 6B7A 32 2F       >                db      "2/"
1959+ 6B7C             >len_NFA         defl    $ - temp_NFA
1959+ 6B7C             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1959+ 6B7A             >
1959+ 6B7A 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1959+ 6B7B 32 2F       >                db      "2/"               // name string in 7-bit ascii, but
1959+ 6B7D             >                org     $-1                 // alter last byte of Name just above to set
1959+ 6B7C AF          >                db      {b $} | END_BIT     // msb as name end
1959+ 6B7D             >
1959+ 6B7D 70 6B       >                dw      last_NFA            // Link to previous definition Name
1959+ 6B7F             >TWO_DIV:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1959+ 6B7F ~           >                call    runcode ; ok        // for primitive definitions  actual code
1959+ 6B7F ~           >
1959+ 6B7F ~           >
1959+ 6B7F             >                endif           ; ok        // for other definitions it "points" the correct handler
1959+ 6B7F             >                // Use of "; ok" to suppress "warning[fwdref]"
1959+ 6B7F             >
1959+ 6B7F             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1960+ 6B7F E1                           pop     hl
1961+ 6B80 CB 2C                        sra     h
1962+ 6B82 CB 1D                        rr      l
1963+ 6B84
1964+ 6B84                              psh1
1964+ 6B84 E5          >                push    hl
1964+ 6B85 DD E9       >                jp      (ix)
1965+ 6B87
1966+ 6B87              //  ______________________________________________________________________
1967+ 6B87              //
1968+ 6B87              // lshift       n1 u -- n2
1969+ 6B87              // bit left shift of u bits
1970+ 6B87                              New_Def LSHIFT, "LSHIFT", is_code, is_normal
1970+ 6B87             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1970+ 6B87             >
1970+ 6B87             >                // dummy db directives used to calculate length of namec
1970+ 6B87 4C 53 48 49 >                db      "LSHIFT"
1970+ 6B8B 46 54       >
1970+ 6B8D             >len_NFA         defl    $ - temp_NFA
1970+ 6B8D             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1970+ 6B87             >
1970+ 6B87 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1970+ 6B88 4C 53 48 49 >                db      "LSHIFT"               // name string in 7-bit ascii, but
1970+ 6B8C 46 54       >
1970+ 6B8E             >                org     $-1                 // alter last byte of Name just above to set
1970+ 6B8D D4          >                db      {b $} | END_BIT     // msb as name end
1970+ 6B8E             >
1970+ 6B8E 7A 6B       >                dw      last_NFA            // Link to previous definition Name
1970+ 6B90             >LSHIFT:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1970+ 6B90 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1970+ 6B90 ~           >
1970+ 6B90 ~           >
1970+ 6B90             >                endif           ; ok        // for other definitions it "points" the correct handler
1970+ 6B90             >                // Use of "; ok" to suppress "warning[fwdref]"
1970+ 6B90             >
1970+ 6B90             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1971+ 6B90 D9                           exx
1972+ 6B91 C1                           pop     bc
1973+ 6B92 41                           ld      b, c
1974+ 6B93 D1                           pop     de
1975+ 6B94 ED 28                        bsla    de, b
1976+ 6B96 D5                           push    de
1977+ 6B97 D9                           exx
1978+ 6B98                              next
1978+ 6B98 DD E9       >                jp      (ix)
1979+ 6B9A
1980+ 6B9A              //  ______________________________________________________________________
1981+ 6B9A              //
1982+ 6B9A              // rshift       n1 u -- n2
1983+ 6B9A              // bit right shift of u bits
1984+ 6B9A                              New_Def RSHIFT, "RSHIFT", is_code, is_normal
1984+ 6B9A             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1984+ 6B9A             >
1984+ 6B9A             >                // dummy db directives used to calculate length of namec
1984+ 6B9A 52 53 48 49 >                db      "RSHIFT"
1984+ 6B9E 46 54       >
1984+ 6BA0             >len_NFA         defl    $ - temp_NFA
1984+ 6BA0             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1984+ 6B9A             >
1984+ 6B9A 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1984+ 6B9B 52 53 48 49 >                db      "RSHIFT"               // name string in 7-bit ascii, but
1984+ 6B9F 46 54       >
1984+ 6BA1             >                org     $-1                 // alter last byte of Name just above to set
1984+ 6BA0 D4          >                db      {b $} | END_BIT     // msb as name end
1984+ 6BA1             >
1984+ 6BA1 87 6B       >                dw      last_NFA            // Link to previous definition Name
1984+ 6BA3             >RSHIFT:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1984+ 6BA3 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1984+ 6BA3 ~           >
1984+ 6BA3 ~           >
1984+ 6BA3             >                endif           ; ok        // for other definitions it "points" the correct handler
1984+ 6BA3             >                // Use of "; ok" to suppress "warning[fwdref]"
1984+ 6BA3             >
1984+ 6BA3             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1985+ 6BA3 D9                           exx
1986+ 6BA4 C1                           pop     bc
1987+ 6BA5 41                           ld      b, c
1988+ 6BA6 D1                           pop     de
1989+ 6BA7 ED 2A                        bsrl    de, b
1990+ 6BA9 D5                           push    de
1991+ 6BAA D9                           exx
1992+ 6BAB                              next
1992+ 6BAB DD E9       >                jp      (ix)
1993+ 6BAD
1994+ 6BAD              //  ______________________________________________________________________
1995+ 6BAD              //
1996+ 6BAD              // cells        n1 -- n2
1997+ 6BAD              // decrement by 2 top of stack
1998+ 6BAD                              New_Def CELLS, "CELLS", is_code, is_normal
1998+ 6BAD             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1998+ 6BAD             >
1998+ 6BAD             >                // dummy db directives used to calculate length of namec
1998+ 6BAD 43 45 4C 4C >                db      "CELLS"
1998+ 6BB1 53          >
1998+ 6BB2             >len_NFA         defl    $ - temp_NFA
1998+ 6BB2             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1998+ 6BAD             >
1998+ 6BAD 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1998+ 6BAE 43 45 4C 4C >                db      "CELLS"               // name string in 7-bit ascii, but
1998+ 6BB2 53          >
1998+ 6BB3             >                org     $-1                 // alter last byte of Name just above to set
1998+ 6BB2 D3          >                db      {b $} | END_BIT     // msb as name end
1998+ 6BB3             >
1998+ 6BB3 9A 6B       >                dw      last_NFA            // Link to previous definition Name
1998+ 6BB5             >CELLS:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1998+ 6BB5 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1998+ 6BB5 ~           >
1998+ 6BB5 ~           >
1998+ 6BB5             >                endif           ; ok        // for other definitions it "points" the correct handler
1998+ 6BB5             >                // Use of "; ok" to suppress "warning[fwdref]"
1998+ 6BB5             >
1998+ 6BB5             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1999+ 6BB5 C3 75 6B                     jp      Two_Mul_Ptr
2000+ 6BB8
2001+ 6BB8
2002+ 6BB8              //  ______________________________________________________________________
2003+ 6BB8
# file closed: C:\Zx\CSpect\Projects\vForth16_DIRECT_RP/source/L0.asm
 111  6BB8                              include "L1.asm"
# file opened: C:\Zx\CSpect\Projects\vForth16_DIRECT_RP/source/L1.asm
   1+ 6BB8              //  ______________________________________________________________________
   2+ 6BB8              //
   3+ 6BB8              //  L1.asm
   4+ 6BB8              //
   5+ 6BB8              //  Level-1 definitions and derivate
   6+ 6BB8              //  ______________________________________________________________________
   7+ 6BB8
   8+ 6BB8              //  ______________________________________________________________________
   9+ 6BB8              //
  10+ 6BB8              // :            -- cccc     ( compile time )
  11+ 6BB8              //              i*x -- j*x  ( run time )
  12+ 6BB8              // Colon Definition
  13+ 6BB8                              Colon_Def COLON, ":", is_normal      // has forward-ref
  13+ 6BB8             >                New_Def  COLON, ":", Enter_Ptr, is_normal ; ok
  13+ 6BB8             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  13+ 6BB8             >
  13+ 6BB8             >                // dummy db directives used to calculate length of namec
  13+ 6BB8 3A          >                db      ":"
  13+ 6BB9             >len_NFA         defl    $ - temp_NFA
  13+ 6BB9             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  13+ 6BB8             >
  13+ 6BB8 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  13+ 6BB9 3A          >                db      ":"               // name string in 7-bit ascii, but
  13+ 6BBA             >                org     $-1                 // alter last byte of Name just above to set
  13+ 6BB9 BA          >                db      {b $} | END_BIT     // msb as name end
  13+ 6BBA             >
  13+ 6BBA AD 6B       >                dw      last_NFA            // Link to previous definition Name
  13+ 6BBC             >COLON:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
  13+ 6BBC CD D3 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
  13+ 6BBF             >
  13+ 6BBF             >
  13+ 6BBF             >                endif           ; ok        // for other definitions it "points" the correct handler
  13+ 6BBF             >                // Use of "; ok" to suppress "warning[fwdref]"
  13+ 6BBF             >
  13+ 6BBF             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  14+ 6BBF
  15+ 6BBF 5A 70                        dw      QEXEC                   // ?exec
  16+ 6BC1 12 70                        dw      STORE_CSP               // !csp
  17+ 6BC3 A5 6D 00 6B                  dw      CURRENT, FETCH          // current @
  18+ 6BC7 97 6D 0C 6B                  dw      CONTEXT, STORE          // context !
  19+ 6BCB 90 76                        dw      CREATE                  // create  ( forward )
  20+ 6BCD 0F 71                        dw      SMUDGE                  // dmudge
  21+ 6BCF F9 70                        dw      SQUARED_CLOSE           // ]
  22+ 6BD1 69 71                        dw      C_SEMICOLON_CODE        // ;code ( change the 3-bytes CFA of defining word to call Enter_Ptr )
  23+ 6BD3                                                              // ... immediate
  24+ 6BD3              Enter_Ptr:
  25+ 6BD3                              // via call coded in CFA
  26+ 6BD3 EB                           ex      de, hl //**
  27+ 6BD4                              // *** ldhlrp
  28+ 6BD4 2B                           dec     hl                  // push on Return-Stack current Instruction-Pointer
  29+ 6BD5 70                           ld      (hl), b
  30+ 6BD6 2B                           dec     hl
  31+ 6BD7 71                           ld      (hl), c
  32+ 6BD8                              // *** ldrphl
  33+ 6BD8 EB                           ex      de, hl //**
  34+ 6BD9
  35+ 6BD9
  36+ 6BD9 C1                           pop     bc                  // points to PFA of "this" word
  37+ 6BDA                              next
  37+ 6BDA DD E9       >                jp      (ix)
  38+ 6BDC
  39+ 6BDC              //  ______________________________________________________________________
  40+ 6BDC              //
  41+ 6BDC              // ;            --
  42+ 6BDC              // Semicolon. End of Colon-Definition. Stack must be balanced.
  43+ 6BDC                              Colon_Def SEMICOLON, ";", is_immediate   // has forward-ref
  43+ 6BDC             >                New_Def  SEMICOLON, ";", Enter_Ptr, is_immediate ; ok
  43+ 6BDC             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  43+ 6BDC             >
  43+ 6BDC             >                // dummy db directives used to calculate length of namec
  43+ 6BDC 3B          >                db      ";"
  43+ 6BDD             >len_NFA         defl    $ - temp_NFA
  43+ 6BDD             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  43+ 6BDC             >
  43+ 6BDC C1          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
  43+ 6BDD 3B          >                db      ";"               // name string in 7-bit ascii, but
  43+ 6BDE             >                org     $-1                 // alter last byte of Name just above to set
  43+ 6BDD BB          >                db      {b $} | END_BIT     // msb as name end
  43+ 6BDE             >
  43+ 6BDE B8 6B       >                dw      last_NFA            // Link to previous definition Name
  43+ 6BE0             >SEMICOLON:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
  43+ 6BE0 CD D3 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
  43+ 6BE3             >
  43+ 6BE3             >
  43+ 6BE3             >                endif           ; ok        // for other definitions it "points" the correct handler
  43+ 6BE3             >                // Use of "; ok" to suppress "warning[fwdref]"
  43+ 6BE3             >
  43+ 6BE3             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  44+ 6BE3
  45+ 6BE3 86 70                        dw      QCSP                    // ?csp
  46+ 6BE5 BF 70 40 69                  dw      COMPILE, EXIT           // [compile] ;s
  47+ 6BE9 0F 71                        dw      SMUDGE                  // smudge
  48+ 6BEB EA 70                        dw      SQUARED_OPEN            // [
  49+ 6BED 40 69                        dw      EXIT                    // ; immediate
  50+ 6BEF
  51+ 6BEF              //  ______________________________________________________________________
  52+ 6BEF              //
  53+ 6BEF              // noop         --
  54+ 6BEF
  55+ 6BEF                              New_Def NOOP, "NOOP", is_code, is_normal
  55+ 6BEF             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  55+ 6BEF             >
  55+ 6BEF             >                // dummy db directives used to calculate length of namec
  55+ 6BEF 4E 4F 4F 50 >                db      "NOOP"
  55+ 6BF3             >len_NFA         defl    $ - temp_NFA
  55+ 6BF3             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  55+ 6BEF             >
  55+ 6BEF 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  55+ 6BF0 4E 4F 4F 50 >                db      "NOOP"               // name string in 7-bit ascii, but
  55+ 6BF4             >                org     $-1                 // alter last byte of Name just above to set
  55+ 6BF3 D0          >                db      {b $} | END_BIT     // msb as name end
  55+ 6BF4             >
  55+ 6BF4 DC 6B       >                dw      last_NFA            // Link to previous definition Name
  55+ 6BF6             >NOOP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
  55+ 6BF6 ~           >                call    runcode ; ok        // for primitive definitions  actual code
  55+ 6BF6 ~           >
  55+ 6BF6 ~           >
  55+ 6BF6             >                endif           ; ok        // for other definitions it "points" the correct handler
  55+ 6BF6             >                // Use of "; ok" to suppress "warning[fwdref]"
  55+ 6BF6             >
  55+ 6BF6             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  56+ 6BF6                              next
  56+ 6BF6 DD E9       >                jp      (ix)
  57+ 6BF8
  58+ 6BF8              //  ______________________________________________________________________
  59+ 6BF8              //
  60+ 6BF8              // constant     n -- cccc     ( compile time )
  61+ 6BF8              //              -- n          ( run time )
  62+ 6BF8              // Constant definition.
  63+ 6BF8                              Colon_Def CONSTANT, "CONSTANT", is_normal   // has forward-ref
  63+ 6BF8             >                New_Def  CONSTANT, "CONSTANT", Enter_Ptr, is_normal ; ok
  63+ 6BF8             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  63+ 6BF8             >
  63+ 6BF8             >                // dummy db directives used to calculate length of namec
  63+ 6BF8 43 4F 4E 53 >                db      "CONSTANT"
  63+ 6BFC 54 41 4E 54 >
  63+ 6C00             >len_NFA         defl    $ - temp_NFA
  63+ 6C00             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  63+ 6BF8             >
  63+ 6BF8 88          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  63+ 6BF9 43 4F 4E 53 >                db      "CONSTANT"               // name string in 7-bit ascii, but
  63+ 6BFD 54 41 4E 54 >
  63+ 6C01             >                org     $-1                 // alter last byte of Name just above to set
  63+ 6C00 D4          >                db      {b $} | END_BIT     // msb as name end
  63+ 6C01             >
  63+ 6C01 EF 6B       >                dw      last_NFA            // Link to previous definition Name
  63+ 6C03             >CONSTANT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
  63+ 6C03 CD D3 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
  63+ 6C06             >
  63+ 6C06             >
  63+ 6C06             >                endif           ; ok        // for other definitions it "points" the correct handler
  63+ 6C06             >                // Use of "; ok" to suppress "warning[fwdref]"
  63+ 6C06             >
  63+ 6C06             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  64+ 6C06
  65+ 6C06 90 76                        dw      CREATE                  // create
  66+ 6C08 72 6E                        dw      COMMA                   // ,    ( at PFA then, store the value )
  67+ 6C0A 69 71                        dw      C_SEMICOLON_CODE        // ;code (  changes the 3-bytes CFA to call Constant_Ptr )
  68+ 6C0C              Constant_Ptr:
  69+ 6C0C
  70+ 6C0C
  71+ 6C0C E1                           pop     hl
  72+ 6C0D
  73+ 6C0D 7E                           ld      a, (hl)
  74+ 6C0E 23                           inc     hl
  75+ 6C0F 66                           ld      h, (hl)
  76+ 6C10 6F                           ld      l, a
  77+ 6C11 E5                           push    hl
  78+ 6C12                              next
  78+ 6C12 DD E9       >                jp      (ix)
  79+ 6C14
  80+ 6C14              //  ______________________________________________________________________
  81+ 6C14              //
  82+ 6C14              // variable     n -- cccc     ( compile time )
  83+ 6C14              //              -- a          ( run time )
  84+ 6C14              // Variable definition, n is the initial value.
  85+ 6C14                              Colon_Def VARIABLE, "VARIABLE", is_normal   // has forward-ref
  85+ 6C14             >                New_Def  VARIABLE, "VARIABLE", Enter_Ptr, is_normal ; ok
  85+ 6C14             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  85+ 6C14             >
  85+ 6C14             >                // dummy db directives used to calculate length of namec
  85+ 6C14 56 41 52 49 >                db      "VARIABLE"
  85+ 6C18 41 42 4C 45 >
  85+ 6C1C             >len_NFA         defl    $ - temp_NFA
  85+ 6C1C             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  85+ 6C14             >
  85+ 6C14 88          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  85+ 6C15 56 41 52 49 >                db      "VARIABLE"               // name string in 7-bit ascii, but
  85+ 6C19 41 42 4C 45 >
  85+ 6C1D             >                org     $-1                 // alter last byte of Name just above to set
  85+ 6C1C C5          >                db      {b $} | END_BIT     // msb as name end
  85+ 6C1D             >
  85+ 6C1D F8 6B       >                dw      last_NFA            // Link to previous definition Name
  85+ 6C1F             >VARIABLE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
  85+ 6C1F CD D3 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
  85+ 6C22             >
  85+ 6C22             >
  85+ 6C22             >                endif           ; ok        // for other definitions it "points" the correct handler
  85+ 6C22             >                // Use of "; ok" to suppress "warning[fwdref]"
  85+ 6C22             >
  85+ 6C22             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  86+ 6C22
  87+ 6C22 48 6C                        dw      ZERO
  88+ 6C24 03 6C                        dw      CONSTANT                // constant
  89+ 6C26 69 71                        dw      C_SEMICOLON_CODE        // ;code ( changes the 3-bytes CFA to call Variable_Ptr )
  90+ 6C28              Variable_Ptr:
  91+ 6C28
  92+ 6C28
  93+ 6C28
  94+ 6C28
  95+ 6C28                              next
  95+ 6C28 DD E9       >                jp      (ix)
  96+ 6C2A
  97+ 6C2A              //  ______________________________________________________________________
  98+ 6C2A              //
  99+ 6C2A              // user         b -- cccc     ( compile time )
 100+ 6C2A              //              -- a          ( run time )
 101+ 6C2A              // User variable definition
 102+ 6C2A                              Colon_Def USER, "USER", is_normal
 102+ 6C2A             >                New_Def  USER, "USER", Enter_Ptr, is_normal ; ok
 102+ 6C2A             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 102+ 6C2A             >
 102+ 6C2A             >                // dummy db directives used to calculate length of namec
 102+ 6C2A 55 53 45 52 >                db      "USER"
 102+ 6C2E             >len_NFA         defl    $ - temp_NFA
 102+ 6C2E             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 102+ 6C2A             >
 102+ 6C2A 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 102+ 6C2B 55 53 45 52 >                db      "USER"               // name string in 7-bit ascii, but
 102+ 6C2F             >                org     $-1                 // alter last byte of Name just above to set
 102+ 6C2E D2          >                db      {b $} | END_BIT     // msb as name end
 102+ 6C2F             >
 102+ 6C2F 14 6C       >                dw      last_NFA            // Link to previous definition Name
 102+ 6C31             >USER:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 102+ 6C31 CD D3 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 102+ 6C34             >
 102+ 6C34             >
 102+ 6C34             >                endif           ; ok        // for other definitions it "points" the correct handler
 102+ 6C34             >                // Use of "; ok" to suppress "warning[fwdref]"
 102+ 6C34             >
 102+ 6C34             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 103+ 6C34
 104+ 6C34 90 76                        dw      CREATE                  // create
 105+ 6C36 84 6E                        dw      CCOMMA                  // c,
 106+ 6C38 69 71                        dw      C_SEMICOLON_CODE        // ;code () changes the 3-bytes CFA to call User_Ptr )
 107+ 6C3A
 108+ 6C3A
 109+ 6C3A              User_Ptr:
 110+ 6C3A                              // via call coded in CFA
 111+ 6C3A E1                           pop     hl
 112+ 6C3B
 113+ 6C3B 7E                           ld      a, (hl)
 114+ 6C3C 2A 94 63                     ld      hl, (USER_Pointer)
 115+ 6C3F ED 31                        add     hl, a
 116+ 6C41 E5                           push    hl
 117+ 6C42                              next
 117+ 6C42 DD E9       >                jp      (ix)
 118+ 6C44
 119+ 6C44              //  ______________________________________________________________________
 120+ 6C44              //
 121+ 6C44                              Constant_Def ZERO       ,   "0"     ,   0
 121+ 6C44             >                New_Def  ZERO, "0", Constant_Ptr, is_normal
 121+ 6C44             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 121+ 6C44             >
 121+ 6C44             >                // dummy db directives used to calculate length of namec
 121+ 6C44 30          >                db      "0"
 121+ 6C45             >len_NFA         defl    $ - temp_NFA
 121+ 6C45             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 121+ 6C44             >
 121+ 6C44 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 121+ 6C45 30          >                db      "0"               // name string in 7-bit ascii, but
 121+ 6C46             >                org     $-1                 // alter last byte of Name just above to set
 121+ 6C45 B0          >                db      {b $} | END_BIT     // msb as name end
 121+ 6C46             >
 121+ 6C46 2A 6C       >                dw      last_NFA            // Link to previous definition Name
 121+ 6C48             >ZERO:          if Constant_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 121+ 6C48 CD 0C 6C    >                call    Constant_Ptr ; ok        // for primitive definitions  actual code
 121+ 6C4B             >
 121+ 6C4B             >
 121+ 6C4B             >                endif           ; ok        // for other definitions it "points" the correct handler
 121+ 6C4B             >                // Use of "; ok" to suppress "warning[fwdref]"
 121+ 6C4B             >
 121+ 6C4B             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 121+ 6C4B 00 00       >                dw      0
 122+ 6C4D                              Constant_Def ONE        ,   "1"     ,   1
 122+ 6C4D             >                New_Def  ONE, "1", Constant_Ptr, is_normal
 122+ 6C4D             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 122+ 6C4D             >
 122+ 6C4D             >                // dummy db directives used to calculate length of namec
 122+ 6C4D 31          >                db      "1"
 122+ 6C4E             >len_NFA         defl    $ - temp_NFA
 122+ 6C4E             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 122+ 6C4D             >
 122+ 6C4D 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 122+ 6C4E 31          >                db      "1"               // name string in 7-bit ascii, but
 122+ 6C4F             >                org     $-1                 // alter last byte of Name just above to set
 122+ 6C4E B1          >                db      {b $} | END_BIT     // msb as name end
 122+ 6C4F             >
 122+ 6C4F 44 6C       >                dw      last_NFA            // Link to previous definition Name
 122+ 6C51             >ONE:          if Constant_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 122+ 6C51 CD 0C 6C    >                call    Constant_Ptr ; ok        // for primitive definitions  actual code
 122+ 6C54             >
 122+ 6C54             >
 122+ 6C54             >                endif           ; ok        // for other definitions it "points" the correct handler
 122+ 6C54             >                // Use of "; ok" to suppress "warning[fwdref]"
 122+ 6C54             >
 122+ 6C54             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 122+ 6C54 01 00       >                dw      1
 123+ 6C56                              Constant_Def TWO        ,   "2"     ,   2
 123+ 6C56             >                New_Def  TWO, "2", Constant_Ptr, is_normal
 123+ 6C56             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 123+ 6C56             >
 123+ 6C56             >                // dummy db directives used to calculate length of namec
 123+ 6C56 32          >                db      "2"
 123+ 6C57             >len_NFA         defl    $ - temp_NFA
 123+ 6C57             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 123+ 6C56             >
 123+ 6C56 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 123+ 6C57 32          >                db      "2"               // name string in 7-bit ascii, but
 123+ 6C58             >                org     $-1                 // alter last byte of Name just above to set
 123+ 6C57 B2          >                db      {b $} | END_BIT     // msb as name end
 123+ 6C58             >
 123+ 6C58 4D 6C       >                dw      last_NFA            // Link to previous definition Name
 123+ 6C5A             >TWO:          if Constant_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 123+ 6C5A CD 0C 6C    >                call    Constant_Ptr ; ok        // for primitive definitions  actual code
 123+ 6C5D             >
 123+ 6C5D             >
 123+ 6C5D             >                endif           ; ok        // for other definitions it "points" the correct handler
 123+ 6C5D             >                // Use of "; ok" to suppress "warning[fwdref]"
 123+ 6C5D             >
 123+ 6C5D             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 123+ 6C5D 02 00       >                dw      2
 124+ 6C5F                              Constant_Def THREE      ,   "3"     ,   3
 124+ 6C5F             >                New_Def  THREE, "3", Constant_Ptr, is_normal
 124+ 6C5F             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 124+ 6C5F             >
 124+ 6C5F             >                // dummy db directives used to calculate length of namec
 124+ 6C5F 33          >                db      "3"
 124+ 6C60             >len_NFA         defl    $ - temp_NFA
 124+ 6C60             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 124+ 6C5F             >
 124+ 6C5F 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 124+ 6C60 33          >                db      "3"               // name string in 7-bit ascii, but
 124+ 6C61             >                org     $-1                 // alter last byte of Name just above to set
 124+ 6C60 B3          >                db      {b $} | END_BIT     // msb as name end
 124+ 6C61             >
 124+ 6C61 56 6C       >                dw      last_NFA            // Link to previous definition Name
 124+ 6C63             >THREE:          if Constant_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 124+ 6C63 CD 0C 6C    >                call    Constant_Ptr ; ok        // for primitive definitions  actual code
 124+ 6C66             >
 124+ 6C66             >
 124+ 6C66             >                endif           ; ok        // for other definitions it "points" the correct handler
 124+ 6C66             >                // Use of "; ok" to suppress "warning[fwdref]"
 124+ 6C66             >
 124+ 6C66             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 124+ 6C66 03 00       >                dw      3
 125+ 6C68                              Constant_Def NEG_ONE    ,   "-1"    ,  -1
 125+ 6C68             >                New_Def  NEG_ONE, "-1", Constant_Ptr, is_normal
 125+ 6C68             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 125+ 6C68             >
 125+ 6C68             >                // dummy db directives used to calculate length of namec
 125+ 6C68 2D 31       >                db      "-1"
 125+ 6C6A             >len_NFA         defl    $ - temp_NFA
 125+ 6C6A             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 125+ 6C68             >
 125+ 6C68 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 125+ 6C69 2D 31       >                db      "-1"               // name string in 7-bit ascii, but
 125+ 6C6B             >                org     $-1                 // alter last byte of Name just above to set
 125+ 6C6A B1          >                db      {b $} | END_BIT     // msb as name end
 125+ 6C6B             >
 125+ 6C6B 5F 6C       >                dw      last_NFA            // Link to previous definition Name
 125+ 6C6D             >NEG_ONE:          if Constant_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 125+ 6C6D CD 0C 6C    >                call    Constant_Ptr ; ok        // for primitive definitions  actual code
 125+ 6C70             >
 125+ 6C70             >
 125+ 6C70             >                endif           ; ok        // for other definitions it "points" the correct handler
 125+ 6C70             >                // Use of "; ok" to suppress "warning[fwdref]"
 125+ 6C70             >
 125+ 6C70             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 125+ 6C70 FF FF       >                dw      -1
 126+ 6C72                              Constant_Def BL         ,   "BL"    , $20
 126+ 6C72             >                New_Def  BL, "BL", Constant_Ptr, is_normal
 126+ 6C72             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 126+ 6C72             >
 126+ 6C72             >                // dummy db directives used to calculate length of namec
 126+ 6C72 42 4C       >                db      "BL"
 126+ 6C74             >len_NFA         defl    $ - temp_NFA
 126+ 6C74             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 126+ 6C72             >
 126+ 6C72 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 126+ 6C73 42 4C       >                db      "BL"               // name string in 7-bit ascii, but
 126+ 6C75             >                org     $-1                 // alter last byte of Name just above to set
 126+ 6C74 CC          >                db      {b $} | END_BIT     // msb as name end
 126+ 6C75             >
 126+ 6C75 68 6C       >                dw      last_NFA            // Link to previous definition Name
 126+ 6C77             >BL:          if Constant_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 126+ 6C77 CD 0C 6C    >                call    Constant_Ptr ; ok        // for primitive definitions  actual code
 126+ 6C7A             >
 126+ 6C7A             >
 126+ 6C7A             >                endif           ; ok        // for other definitions it "points" the correct handler
 126+ 6C7A             >                // Use of "; ok" to suppress "warning[fwdref]"
 126+ 6C7A             >
 126+ 6C7A             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 126+ 6C7A 20 00       >                dw      $20
 127+ 6C7C                              Constant_Def CL         ,   "C/L"   ,  64
 127+ 6C7C             >                New_Def  CL, "C/L", Constant_Ptr, is_normal
 127+ 6C7C             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 127+ 6C7C             >
 127+ 6C7C             >                // dummy db directives used to calculate length of namec
 127+ 6C7C 43 2F 4C    >                db      "C/L"
 127+ 6C7F             >len_NFA         defl    $ - temp_NFA
 127+ 6C7F             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 127+ 6C7C             >
 127+ 6C7C 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 127+ 6C7D 43 2F 4C    >                db      "C/L"               // name string in 7-bit ascii, but
 127+ 6C80             >                org     $-1                 // alter last byte of Name just above to set
 127+ 6C7F CC          >                db      {b $} | END_BIT     // msb as name end
 127+ 6C80             >
 127+ 6C80 72 6C       >                dw      last_NFA            // Link to previous definition Name
 127+ 6C82             >CL:          if Constant_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 127+ 6C82 CD 0C 6C    >                call    Constant_Ptr ; ok        // for primitive definitions  actual code
 127+ 6C85             >
 127+ 6C85             >
 127+ 6C85             >                endif           ; ok        // for other definitions it "points" the correct handler
 127+ 6C85             >                // Use of "; ok" to suppress "warning[fwdref]"
 127+ 6C85             >
 127+ 6C85             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 127+ 6C85 40 00       >                dw      64
 128+ 6C87                              Constant_Def BBUF       ,   "B/BUF" , 512
 128+ 6C87             >                New_Def  BBUF, "B/BUF", Constant_Ptr, is_normal
 128+ 6C87             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 128+ 6C87             >
 128+ 6C87             >                // dummy db directives used to calculate length of namec
 128+ 6C87 42 2F 42 55 >                db      "B/BUF"
 128+ 6C8B 46          >
 128+ 6C8C             >len_NFA         defl    $ - temp_NFA
 128+ 6C8C             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 128+ 6C87             >
 128+ 6C87 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 128+ 6C88 42 2F 42 55 >                db      "B/BUF"               // name string in 7-bit ascii, but
 128+ 6C8C 46          >
 128+ 6C8D             >                org     $-1                 // alter last byte of Name just above to set
 128+ 6C8C C6          >                db      {b $} | END_BIT     // msb as name end
 128+ 6C8D             >
 128+ 6C8D 7C 6C       >                dw      last_NFA            // Link to previous definition Name
 128+ 6C8F             >BBUF:          if Constant_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 128+ 6C8F CD 0C 6C    >                call    Constant_Ptr ; ok        // for primitive definitions  actual code
 128+ 6C92             >
 128+ 6C92             >
 128+ 6C92             >                endif           ; ok        // for other definitions it "points" the correct handler
 128+ 6C92             >                // Use of "; ok" to suppress "warning[fwdref]"
 128+ 6C92             >
 128+ 6C92             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 128+ 6C92 00 02       >                dw      512
 129+ 6C94                              Constant_Def BSCR       ,   "B/SCR" ,   2
 129+ 6C94             >                New_Def  BSCR, "B/SCR", Constant_Ptr, is_normal
 129+ 6C94             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 129+ 6C94             >
 129+ 6C94             >                // dummy db directives used to calculate length of namec
 129+ 6C94 42 2F 53 43 >                db      "B/SCR"
 129+ 6C98 52          >
 129+ 6C99             >len_NFA         defl    $ - temp_NFA
 129+ 6C99             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 129+ 6C94             >
 129+ 6C94 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 129+ 6C95 42 2F 53 43 >                db      "B/SCR"               // name string in 7-bit ascii, but
 129+ 6C99 52          >
 129+ 6C9A             >                org     $-1                 // alter last byte of Name just above to set
 129+ 6C99 D2          >                db      {b $} | END_BIT     // msb as name end
 129+ 6C9A             >
 129+ 6C9A 87 6C       >                dw      last_NFA            // Link to previous definition Name
 129+ 6C9C             >BSCR:          if Constant_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 129+ 6C9C CD 0C 6C    >                call    Constant_Ptr ; ok        // for primitive definitions  actual code
 129+ 6C9F             >
 129+ 6C9F             >
 129+ 6C9F             >                endif           ; ok        // for other definitions it "points" the correct handler
 129+ 6C9F             >                // Use of "; ok" to suppress "warning[fwdref]"
 129+ 6C9F             >
 129+ 6C9F             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 129+ 6C9F 02 00       >                dw      2
 130+ 6CA1                              Constant_Def LSCR       ,   "L/SCR" ,  16
 130+ 6CA1             >                New_Def  LSCR, "L/SCR", Constant_Ptr, is_normal
 130+ 6CA1             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 130+ 6CA1             >
 130+ 6CA1             >                // dummy db directives used to calculate length of namec
 130+ 6CA1 4C 2F 53 43 >                db      "L/SCR"
 130+ 6CA5 52          >
 130+ 6CA6             >len_NFA         defl    $ - temp_NFA
 130+ 6CA6             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 130+ 6CA1             >
 130+ 6CA1 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 130+ 6CA2 4C 2F 53 43 >                db      "L/SCR"               // name string in 7-bit ascii, but
 130+ 6CA6 52          >
 130+ 6CA7             >                org     $-1                 // alter last byte of Name just above to set
 130+ 6CA6 D2          >                db      {b $} | END_BIT     // msb as name end
 130+ 6CA7             >
 130+ 6CA7 94 6C       >                dw      last_NFA            // Link to previous definition Name
 130+ 6CA9             >LSCR:          if Constant_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 130+ 6CA9 CD 0C 6C    >                call    Constant_Ptr ; ok        // for primitive definitions  actual code
 130+ 6CAC             >
 130+ 6CAC             >
 130+ 6CAC             >                endif           ; ok        // for other definitions it "points" the correct handler
 130+ 6CAC             >                // Use of "; ok" to suppress "warning[fwdref]"
 130+ 6CAC             >
 130+ 6CAC             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 130+ 6CAC 10 00       >                dw      16
 131+ 6CAE
 132+ 6CAE              //  ______________________________________________________________________
 133+ 6CAE              //
 134+ 6CAE              // +origin         --
 135+ 6CAE              //              Colon_Def PLUS_ORIGIN, "+ORIGIN", is_normal
 136+ 6CAE              //              dw      LIT, Cold_origin        // [ hex 6366 ] literal
 137+ 6CAE              //              dw      PLUS                    // +
 138+ 6CAE              //              dw      EXIT                    // ;
 139+ 6CAE                              New_Def  PLUS_ORIGIN, "+ORIGIN", is_code, is_normal
 139+ 6CAE             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 139+ 6CAE             >
 139+ 6CAE             >                // dummy db directives used to calculate length of namec
 139+ 6CAE 2B 4F 52 49 >                db      "+ORIGIN"
 139+ 6CB2 47 49 4E    >
 139+ 6CB5             >len_NFA         defl    $ - temp_NFA
 139+ 6CB5             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 139+ 6CAE             >
 139+ 6CAE 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 139+ 6CAF 2B 4F 52 49 >                db      "+ORIGIN"               // name string in 7-bit ascii, but
 139+ 6CB3 47 49 4E    >
 139+ 6CB6             >                org     $-1                 // alter last byte of Name just above to set
 139+ 6CB5 CE          >                db      {b $} | END_BIT     // msb as name end
 139+ 6CB6             >
 139+ 6CB6 A1 6C       >                dw      last_NFA            // Link to previous definition Name
 139+ 6CB8             >PLUS_ORIGIN:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 139+ 6CB8 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 139+ 6CB8 ~           >
 139+ 6CB8 ~           >
 139+ 6CB8             >                endif           ; ok        // for other definitions it "points" the correct handler
 139+ 6CB8             >                // Use of "; ok" to suppress "warning[fwdref]"
 139+ 6CB8             >
 139+ 6CB8             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 140+ 6CB8 D9                           exx
 141+ 6CB9 E1                           pop     hl
 142+ 6CBA 11 66 63                     ld      de, Cold_origin
 143+ 6CBD 19                           add     hl, de
 144+ 6CBE E5                           push    hl
 145+ 6CBF D9                           exx
 146+ 6CC0                              next
 146+ 6CC0 DD E9       >                jp      (ix)
 147+ 6CC2
 148+ 6CC2
 149+ 6CC2              //  ______________________________________________________________________
 150+ 6CC2              //
 151+ 6CC2                              Constant_Def CNEXT      ,   "(NEXT)", Next_Ptr
 151+ 6CC2             >                New_Def  CNEXT, "(NEXT)", Constant_Ptr, is_normal
 151+ 6CC2             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 151+ 6CC2             >
 151+ 6CC2             >                // dummy db directives used to calculate length of namec
 151+ 6CC2 28 4E 45 58 >                db      "(NEXT)"
 151+ 6CC6 54 29       >
 151+ 6CC8             >len_NFA         defl    $ - temp_NFA
 151+ 6CC8             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 151+ 6CC2             >
 151+ 6CC2 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 151+ 6CC3 28 4E 45 58 >                db      "(NEXT)"               // name string in 7-bit ascii, but
 151+ 6CC7 54 29       >
 151+ 6CC9             >                org     $-1                 // alter last byte of Name just above to set
 151+ 6CC8 A9          >                db      {b $} | END_BIT     // msb as name end
 151+ 6CC9             >
 151+ 6CC9 AE 6C       >                dw      last_NFA            // Link to previous definition Name
 151+ 6CCB             >CNEXT:          if Constant_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 151+ 6CCB CD 0C 6C    >                call    Constant_Ptr ; ok        // for primitive definitions  actual code
 151+ 6CCE             >
 151+ 6CCE             >
 151+ 6CCE             >                endif           ; ok        // for other definitions it "points" the correct handler
 151+ 6CCE             >                // Use of "; ok" to suppress "warning[fwdref]"
 151+ 6CCE             >
 151+ 6CCE             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 151+ 6CCE 98 63       >                dw      Next_Ptr
 152+ 6CD0
 153+ 6CD0              //  ______________________________________________________________________
 154+ 6CD0              //
 155+ 6CD0
 156+ 6CD0                              User_Def S0         , "S0"        , 06 // starting value of Stack-Pointer
 156+ 6CD0             >                New_Def  S0, "S0", User_Ptr, is_normal
 156+ 6CD0             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 156+ 6CD0             >
 156+ 6CD0             >                // dummy db directives used to calculate length of namec
 156+ 6CD0 53 30       >                db      "S0"
 156+ 6CD2             >len_NFA         defl    $ - temp_NFA
 156+ 6CD2             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 156+ 6CD0             >
 156+ 6CD0 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 156+ 6CD1 53 30       >                db      "S0"               // name string in 7-bit ascii, but
 156+ 6CD3             >                org     $-1                 // alter last byte of Name just above to set
 156+ 6CD2 B0          >                db      {b $} | END_BIT     // msb as name end
 156+ 6CD3             >
 156+ 6CD3 C2 6C       >                dw      last_NFA            // Link to previous definition Name
 156+ 6CD5             >S0:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 156+ 6CD5 CD 3A 6C    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 156+ 6CD8             >
 156+ 6CD8             >
 156+ 6CD8             >                endif           ; ok        // for other definitions it "points" the correct handler
 156+ 6CD8             >                // Use of "; ok" to suppress "warning[fwdref]"
 156+ 6CD8             >
 156+ 6CD8             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 156+ 6CD8 06          >                db      06
 157+ 6CD9                              User_Def R0         , "R0"        , 08 // starting value of Return-Pointer
 157+ 6CD9             >                New_Def  R0, "R0", User_Ptr, is_normal
 157+ 6CD9             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 157+ 6CD9             >
 157+ 6CD9             >                // dummy db directives used to calculate length of namec
 157+ 6CD9 52 30       >                db      "R0"
 157+ 6CDB             >len_NFA         defl    $ - temp_NFA
 157+ 6CDB             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 157+ 6CD9             >
 157+ 6CD9 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 157+ 6CDA 52 30       >                db      "R0"               // name string in 7-bit ascii, but
 157+ 6CDC             >                org     $-1                 // alter last byte of Name just above to set
 157+ 6CDB B0          >                db      {b $} | END_BIT     // msb as name end
 157+ 6CDC             >
 157+ 6CDC D0 6C       >                dw      last_NFA            // Link to previous definition Name
 157+ 6CDE             >R0:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 157+ 6CDE CD 3A 6C    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 157+ 6CE1             >
 157+ 6CE1             >
 157+ 6CE1             >                endif           ; ok        // for other definitions it "points" the correct handler
 157+ 6CE1             >                // Use of "; ok" to suppress "warning[fwdref]"
 157+ 6CE1             >
 157+ 6CE1             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 157+ 6CE1 08          >                db      08
 158+ 6CE2                              User_Def TIB        , "TIB"       , 10 // input terminal buffer address
 158+ 6CE2             >                New_Def  TIB, "TIB", User_Ptr, is_normal
 158+ 6CE2             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 158+ 6CE2             >
 158+ 6CE2             >                // dummy db directives used to calculate length of namec
 158+ 6CE2 54 49 42    >                db      "TIB"
 158+ 6CE5             >len_NFA         defl    $ - temp_NFA
 158+ 6CE5             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 158+ 6CE2             >
 158+ 6CE2 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 158+ 6CE3 54 49 42    >                db      "TIB"               // name string in 7-bit ascii, but
 158+ 6CE6             >                org     $-1                 // alter last byte of Name just above to set
 158+ 6CE5 C2          >                db      {b $} | END_BIT     // msb as name end
 158+ 6CE6             >
 158+ 6CE6 D9 6C       >                dw      last_NFA            // Link to previous definition Name
 158+ 6CE8             >TIB:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 158+ 6CE8 CD 3A 6C    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 158+ 6CEB             >
 158+ 6CEB             >
 158+ 6CEB             >                endif           ; ok        // for other definitions it "points" the correct handler
 158+ 6CEB             >                // Use of "; ok" to suppress "warning[fwdref]"
 158+ 6CEB             >
 158+ 6CEB             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 158+ 6CEB 0A          >                db      10
 159+ 6CEC                              User_Def WIDTH      , "WIDTH"     , 12 // maximum number of characters for a word name
 159+ 6CEC             >                New_Def  WIDTH, "WIDTH", User_Ptr, is_normal
 159+ 6CEC             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 159+ 6CEC             >
 159+ 6CEC             >                // dummy db directives used to calculate length of namec
 159+ 6CEC 57 49 44 54 >                db      "WIDTH"
 159+ 6CF0 48          >
 159+ 6CF1             >len_NFA         defl    $ - temp_NFA
 159+ 6CF1             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 159+ 6CEC             >
 159+ 6CEC 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 159+ 6CED 57 49 44 54 >                db      "WIDTH"               // name string in 7-bit ascii, but
 159+ 6CF1 48          >
 159+ 6CF2             >                org     $-1                 // alter last byte of Name just above to set
 159+ 6CF1 C8          >                db      {b $} | END_BIT     // msb as name end
 159+ 6CF2             >
 159+ 6CF2 E2 6C       >                dw      last_NFA            // Link to previous definition Name
 159+ 6CF4             >WIDTH:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 159+ 6CF4 CD 3A 6C    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 159+ 6CF7             >
 159+ 6CF7             >
 159+ 6CF7             >                endif           ; ok        // for other definitions it "points" the correct handler
 159+ 6CF7             >                // Use of "; ok" to suppress "warning[fwdref]"
 159+ 6CF7             >
 159+ 6CF7             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 159+ 6CF7 0C          >                db      12
 160+ 6CF8                              User_Def WARNING    , "WARNING"   , 14 // error reporting method: 0 base, 1 verbose
 160+ 6CF8             >                New_Def  WARNING, "WARNING", User_Ptr, is_normal
 160+ 6CF8             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 160+ 6CF8             >
 160+ 6CF8             >                // dummy db directives used to calculate length of namec
 160+ 6CF8 57 41 52 4E >                db      "WARNING"
 160+ 6CFC 49 4E 47    >
 160+ 6CFF             >len_NFA         defl    $ - temp_NFA
 160+ 6CFF             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 160+ 6CF8             >
 160+ 6CF8 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 160+ 6CF9 57 41 52 4E >                db      "WARNING"               // name string in 7-bit ascii, but
 160+ 6CFD 49 4E 47    >
 160+ 6D00             >                org     $-1                 // alter last byte of Name just above to set
 160+ 6CFF C7          >                db      {b $} | END_BIT     // msb as name end
 160+ 6D00             >
 160+ 6D00 EC 6C       >                dw      last_NFA            // Link to previous definition Name
 160+ 6D02             >WARNING:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 160+ 6D02 CD 3A 6C    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 160+ 6D05             >
 160+ 6D05             >
 160+ 6D05             >                endif           ; ok        // for other definitions it "points" the correct handler
 160+ 6D05             >                // Use of "; ok" to suppress "warning[fwdref]"
 160+ 6D05             >
 160+ 6D05             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 160+ 6D05 0E          >                db      14
 161+ 6D06                              User_Def FENCE      , "FENCE"     , 16 // minimum address where FORGET can work
 161+ 6D06             >                New_Def  FENCE, "FENCE", User_Ptr, is_normal
 161+ 6D06             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 161+ 6D06             >
 161+ 6D06             >                // dummy db directives used to calculate length of namec
 161+ 6D06 46 45 4E 43 >                db      "FENCE"
 161+ 6D0A 45          >
 161+ 6D0B             >len_NFA         defl    $ - temp_NFA
 161+ 6D0B             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 161+ 6D06             >
 161+ 6D06 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 161+ 6D07 46 45 4E 43 >                db      "FENCE"               // name string in 7-bit ascii, but
 161+ 6D0B 45          >
 161+ 6D0C             >                org     $-1                 // alter last byte of Name just above to set
 161+ 6D0B C5          >                db      {b $} | END_BIT     // msb as name end
 161+ 6D0C             >
 161+ 6D0C F8 6C       >                dw      last_NFA            // Link to previous definition Name
 161+ 6D0E             >FENCE:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 161+ 6D0E CD 3A 6C    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 161+ 6D11             >
 161+ 6D11             >
 161+ 6D11             >                endif           ; ok        // for other definitions it "points" the correct handler
 161+ 6D11             >                // Use of "; ok" to suppress "warning[fwdref]"
 161+ 6D11             >
 161+ 6D11             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 161+ 6D11 10          >                db      16
 162+ 6D12                              User_Def DP         , "DP"        , 18 // Dictionary Pointer
 162+ 6D12             >                New_Def  DP, "DP", User_Ptr, is_normal
 162+ 6D12             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 162+ 6D12             >
 162+ 6D12             >                // dummy db directives used to calculate length of namec
 162+ 6D12 44 50       >                db      "DP"
 162+ 6D14             >len_NFA         defl    $ - temp_NFA
 162+ 6D14             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 162+ 6D12             >
 162+ 6D12 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 162+ 6D13 44 50       >                db      "DP"               // name string in 7-bit ascii, but
 162+ 6D15             >                org     $-1                 // alter last byte of Name just above to set
 162+ 6D14 D0          >                db      {b $} | END_BIT     // msb as name end
 162+ 6D15             >
 162+ 6D15 06 6D       >                dw      last_NFA            // Link to previous definition Name
 162+ 6D17             >DP:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 162+ 6D17 CD 3A 6C    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 162+ 6D1A             >
 162+ 6D1A             >
 162+ 6D1A             >                endif           ; ok        // for other definitions it "points" the correct handler
 162+ 6D1A             >                // Use of "; ok" to suppress "warning[fwdref]"
 162+ 6D1A             >
 162+ 6D1A             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 162+ 6D1A 12          >                db      18
 163+ 6D1B                              User_Def VOC_LINK   , "VOC-LINK"  , 20 // pointer to the latest vocabulary
 163+ 6D1B             >                New_Def  VOC_LINK, "VOC-LINK", User_Ptr, is_normal
 163+ 6D1B             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 163+ 6D1B             >
 163+ 6D1B             >                // dummy db directives used to calculate length of namec
 163+ 6D1B 56 4F 43 2D >                db      "VOC-LINK"
 163+ 6D1F 4C 49 4E 4B >
 163+ 6D23             >len_NFA         defl    $ - temp_NFA
 163+ 6D23             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 163+ 6D1B             >
 163+ 6D1B 88          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 163+ 6D1C 56 4F 43 2D >                db      "VOC-LINK"               // name string in 7-bit ascii, but
 163+ 6D20 4C 49 4E 4B >
 163+ 6D24             >                org     $-1                 // alter last byte of Name just above to set
 163+ 6D23 CB          >                db      {b $} | END_BIT     // msb as name end
 163+ 6D24             >
 163+ 6D24 12 6D       >                dw      last_NFA            // Link to previous definition Name
 163+ 6D26             >VOC_LINK:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 163+ 6D26 CD 3A 6C    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 163+ 6D29             >
 163+ 6D29             >
 163+ 6D29             >                endif           ; ok        // for other definitions it "points" the correct handler
 163+ 6D29             >                // Use of "; ok" to suppress "warning[fwdref]"
 163+ 6D29             >
 163+ 6D29             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 163+ 6D29 14          >                db      20
 164+ 6D2A                              User_Def FIRST      , "FIRST"     , 22 // address of first buffer
 164+ 6D2A             >                New_Def  FIRST, "FIRST", User_Ptr, is_normal
 164+ 6D2A             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 164+ 6D2A             >
 164+ 6D2A             >                // dummy db directives used to calculate length of namec
 164+ 6D2A 46 49 52 53 >                db      "FIRST"
 164+ 6D2E 54          >
 164+ 6D2F             >len_NFA         defl    $ - temp_NFA
 164+ 6D2F             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 164+ 6D2A             >
 164+ 6D2A 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 164+ 6D2B 46 49 52 53 >                db      "FIRST"               // name string in 7-bit ascii, but
 164+ 6D2F 54          >
 164+ 6D30             >                org     $-1                 // alter last byte of Name just above to set
 164+ 6D2F D4          >                db      {b $} | END_BIT     // msb as name end
 164+ 6D30             >
 164+ 6D30 1B 6D       >                dw      last_NFA            // Link to previous definition Name
 164+ 6D32             >FIRST:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 164+ 6D32 CD 3A 6C    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 164+ 6D35             >
 164+ 6D35             >
 164+ 6D35             >                endif           ; ok        // for other definitions it "points" the correct handler
 164+ 6D35             >                // Use of "; ok" to suppress "warning[fwdref]"
 164+ 6D35             >
 164+ 6D35             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 164+ 6D35 16          >                db      22
 165+ 6D36                              User_Def LIMIT      , "LIMIT"     , 24 // address of last buffer
 165+ 6D36             >                New_Def  LIMIT, "LIMIT", User_Ptr, is_normal
 165+ 6D36             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 165+ 6D36             >
 165+ 6D36             >                // dummy db directives used to calculate length of namec
 165+ 6D36 4C 49 4D 49 >                db      "LIMIT"
 165+ 6D3A 54          >
 165+ 6D3B             >len_NFA         defl    $ - temp_NFA
 165+ 6D3B             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 165+ 6D36             >
 165+ 6D36 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 165+ 6D37 4C 49 4D 49 >                db      "LIMIT"               // name string in 7-bit ascii, but
 165+ 6D3B 54          >
 165+ 6D3C             >                org     $-1                 // alter last byte of Name just above to set
 165+ 6D3B D4          >                db      {b $} | END_BIT     // msb as name end
 165+ 6D3C             >
 165+ 6D3C 2A 6D       >                dw      last_NFA            // Link to previous definition Name
 165+ 6D3E             >LIMIT:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 165+ 6D3E CD 3A 6C    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 165+ 6D41             >
 165+ 6D41             >
 165+ 6D41             >                endif           ; ok        // for other definitions it "points" the correct handler
 165+ 6D41             >                // Use of "; ok" to suppress "warning[fwdref]"
 165+ 6D41             >
 165+ 6D41             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 165+ 6D41 18          >                db      24
 166+ 6D42                              User_Def EXP        , "EXP"       , 26 // keeps the exponent in number conversion
 166+ 6D42             >                New_Def  EXP, "EXP", User_Ptr, is_normal
 166+ 6D42             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 166+ 6D42             >
 166+ 6D42             >                // dummy db directives used to calculate length of namec
 166+ 6D42 45 58 50    >                db      "EXP"
 166+ 6D45             >len_NFA         defl    $ - temp_NFA
 166+ 6D45             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 166+ 6D42             >
 166+ 6D42 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 166+ 6D43 45 58 50    >                db      "EXP"               // name string in 7-bit ascii, but
 166+ 6D46             >                org     $-1                 // alter last byte of Name just above to set
 166+ 6D45 D0          >                db      {b $} | END_BIT     // msb as name end
 166+ 6D46             >
 166+ 6D46 36 6D       >                dw      last_NFA            // Link to previous definition Name
 166+ 6D48             >EXP:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 166+ 6D48 CD 3A 6C    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 166+ 6D4B             >
 166+ 6D4B             >
 166+ 6D4B             >                endif           ; ok        // for other definitions it "points" the correct handler
 166+ 6D4B             >                // Use of "; ok" to suppress "warning[fwdref]"
 166+ 6D4B             >
 166+ 6D4B             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 166+ 6D4B 1A          >                db      26
 167+ 6D4C                              User_Def NMODE      , "NMODE"     , 28 // number mode: 0 integer, 1 floating point
 167+ 6D4C             >                New_Def  NMODE, "NMODE", User_Ptr, is_normal
 167+ 6D4C             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 167+ 6D4C             >
 167+ 6D4C             >                // dummy db directives used to calculate length of namec
 167+ 6D4C 4E 4D 4F 44 >                db      "NMODE"
 167+ 6D50 45          >
 167+ 6D51             >len_NFA         defl    $ - temp_NFA
 167+ 6D51             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 167+ 6D4C             >
 167+ 6D4C 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 167+ 6D4D 4E 4D 4F 44 >                db      "NMODE"               // name string in 7-bit ascii, but
 167+ 6D51 45          >
 167+ 6D52             >                org     $-1                 // alter last byte of Name just above to set
 167+ 6D51 C5          >                db      {b $} | END_BIT     // msb as name end
 167+ 6D52             >
 167+ 6D52 42 6D       >                dw      last_NFA            // Link to previous definition Name
 167+ 6D54             >NMODE:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 167+ 6D54 CD 3A 6C    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 167+ 6D57             >
 167+ 6D57             >
 167+ 6D57             >                endif           ; ok        // for other definitions it "points" the correct handler
 167+ 6D57             >                // Use of "; ok" to suppress "warning[fwdref]"
 167+ 6D57             >
 167+ 6D57             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 167+ 6D57 1C          >                db      28
 168+ 6D58                              User_Def BLK        , "BLK"       , 30 // block number to be interpreted. 0 for terminal
 168+ 6D58             >                New_Def  BLK, "BLK", User_Ptr, is_normal
 168+ 6D58             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 168+ 6D58             >
 168+ 6D58             >                // dummy db directives used to calculate length of namec
 168+ 6D58 42 4C 4B    >                db      "BLK"
 168+ 6D5B             >len_NFA         defl    $ - temp_NFA
 168+ 6D5B             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 168+ 6D58             >
 168+ 6D58 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 168+ 6D59 42 4C 4B    >                db      "BLK"               // name string in 7-bit ascii, but
 168+ 6D5C             >                org     $-1                 // alter last byte of Name just above to set
 168+ 6D5B CB          >                db      {b $} | END_BIT     // msb as name end
 168+ 6D5C             >
 168+ 6D5C 4C 6D       >                dw      last_NFA            // Link to previous definition Name
 168+ 6D5E             >BLK:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 168+ 6D5E CD 3A 6C    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 168+ 6D61             >
 168+ 6D61             >
 168+ 6D61             >                endif           ; ok        // for other definitions it "points" the correct handler
 168+ 6D61             >                // Use of "; ok" to suppress "warning[fwdref]"
 168+ 6D61             >
 168+ 6D61             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 168+ 6D61 1E          >                db      30
 169+ 6D62                              User_Def TO_IN      , ">IN"       , 32 // incremented when consuming input buffer
 169+ 6D62             >                New_Def  TO_IN, ">IN", User_Ptr, is_normal
 169+ 6D62             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 169+ 6D62             >
 169+ 6D62             >                // dummy db directives used to calculate length of namec
 169+ 6D62 3E 49 4E    >                db      ">IN"
 169+ 6D65             >len_NFA         defl    $ - temp_NFA
 169+ 6D65             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 169+ 6D62             >
 169+ 6D62 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 169+ 6D63 3E 49 4E    >                db      ">IN"               // name string in 7-bit ascii, but
 169+ 6D66             >                org     $-1                 // alter last byte of Name just above to set
 169+ 6D65 CE          >                db      {b $} | END_BIT     // msb as name end
 169+ 6D66             >
 169+ 6D66 58 6D       >                dw      last_NFA            // Link to previous definition Name
 169+ 6D68             >TO_IN:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 169+ 6D68 CD 3A 6C    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 169+ 6D6B             >
 169+ 6D6B             >
 169+ 6D6B             >                endif           ; ok        // for other definitions it "points" the correct handler
 169+ 6D6B             >                // Use of "; ok" to suppress "warning[fwdref]"
 169+ 6D6B             >
 169+ 6D6B             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 169+ 6D6B 20          >                db      32
 170+ 6D6C                              User_Def OUT        , "OUT"       , 34 // incremented when sending to output
 170+ 6D6C             >                New_Def  OUT, "OUT", User_Ptr, is_normal
 170+ 6D6C             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 170+ 6D6C             >
 170+ 6D6C             >                // dummy db directives used to calculate length of namec
 170+ 6D6C 4F 55 54    >                db      "OUT"
 170+ 6D6F             >len_NFA         defl    $ - temp_NFA
 170+ 6D6F             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 170+ 6D6C             >
 170+ 6D6C 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 170+ 6D6D 4F 55 54    >                db      "OUT"               // name string in 7-bit ascii, but
 170+ 6D70             >                org     $-1                 // alter last byte of Name just above to set
 170+ 6D6F D4          >                db      {b $} | END_BIT     // msb as name end
 170+ 6D70             >
 170+ 6D70 62 6D       >                dw      last_NFA            // Link to previous definition Name
 170+ 6D72             >OUT:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 170+ 6D72 CD 3A 6C    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 170+ 6D75             >
 170+ 6D75             >
 170+ 6D75             >                endif           ; ok        // for other definitions it "points" the correct handler
 170+ 6D75             >                // Use of "; ok" to suppress "warning[fwdref]"
 170+ 6D75             >
 170+ 6D75             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 170+ 6D75 22          >                db      34
 171+ 6D76                              User_Def SCR        , "SCR"       , 36 // latest screen retreieved by LIST
 171+ 6D76             >                New_Def  SCR, "SCR", User_Ptr, is_normal
 171+ 6D76             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 171+ 6D76             >
 171+ 6D76             >                // dummy db directives used to calculate length of namec
 171+ 6D76 53 43 52    >                db      "SCR"
 171+ 6D79             >len_NFA         defl    $ - temp_NFA
 171+ 6D79             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 171+ 6D76             >
 171+ 6D76 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 171+ 6D77 53 43 52    >                db      "SCR"               // name string in 7-bit ascii, but
 171+ 6D7A             >                org     $-1                 // alter last byte of Name just above to set
 171+ 6D79 D2          >                db      {b $} | END_BIT     // msb as name end
 171+ 6D7A             >
 171+ 6D7A 6C 6D       >                dw      last_NFA            // Link to previous definition Name
 171+ 6D7C             >SCR:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 171+ 6D7C CD 3A 6C    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 171+ 6D7F             >
 171+ 6D7F             >
 171+ 6D7F             >                endif           ; ok        // for other definitions it "points" the correct handler
 171+ 6D7F             >                // Use of "; ok" to suppress "warning[fwdref]"
 171+ 6D7F             >
 171+ 6D7F             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 171+ 6D7F 24          >                db      36
 172+ 6D80                              User_Def OFFSET     , "OFFSET"    , 38 //
 172+ 6D80             >                New_Def  OFFSET, "OFFSET", User_Ptr, is_normal
 172+ 6D80             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 172+ 6D80             >
 172+ 6D80             >                // dummy db directives used to calculate length of namec
 172+ 6D80 4F 46 46 53 >                db      "OFFSET"
 172+ 6D84 45 54       >
 172+ 6D86             >len_NFA         defl    $ - temp_NFA
 172+ 6D86             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 172+ 6D80             >
 172+ 6D80 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 172+ 6D81 4F 46 46 53 >                db      "OFFSET"               // name string in 7-bit ascii, but
 172+ 6D85 45 54       >
 172+ 6D87             >                org     $-1                 // alter last byte of Name just above to set
 172+ 6D86 D4          >                db      {b $} | END_BIT     // msb as name end
 172+ 6D87             >
 172+ 6D87 76 6D       >                dw      last_NFA            // Link to previous definition Name
 172+ 6D89             >OFFSET:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 172+ 6D89 CD 3A 6C    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 172+ 6D8C             >
 172+ 6D8C             >
 172+ 6D8C             >                endif           ; ok        // for other definitions it "points" the correct handler
 172+ 6D8C             >                // Use of "; ok" to suppress "warning[fwdref]"
 172+ 6D8C             >
 172+ 6D8C             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 172+ 6D8C 26          >                db      38
 173+ 6D8D                              User_Def CONTEXT    , "CONTEXT"   , 40 // pointer to the vocabulary where search begins
 173+ 6D8D             >                New_Def  CONTEXT, "CONTEXT", User_Ptr, is_normal
 173+ 6D8D             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 173+ 6D8D             >
 173+ 6D8D             >                // dummy db directives used to calculate length of namec
 173+ 6D8D 43 4F 4E 54 >                db      "CONTEXT"
 173+ 6D91 45 58 54    >
 173+ 6D94             >len_NFA         defl    $ - temp_NFA
 173+ 6D94             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 173+ 6D8D             >
 173+ 6D8D 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 173+ 6D8E 43 4F 4E 54 >                db      "CONTEXT"               // name string in 7-bit ascii, but
 173+ 6D92 45 58 54    >
 173+ 6D95             >                org     $-1                 // alter last byte of Name just above to set
 173+ 6D94 D4          >                db      {b $} | END_BIT     // msb as name end
 173+ 6D95             >
 173+ 6D95 80 6D       >                dw      last_NFA            // Link to previous definition Name
 173+ 6D97             >CONTEXT:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 173+ 6D97 CD 3A 6C    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 173+ 6D9A             >
 173+ 6D9A             >
 173+ 6D9A             >                endif           ; ok        // for other definitions it "points" the correct handler
 173+ 6D9A             >                // Use of "; ok" to suppress "warning[fwdref]"
 173+ 6D9A             >
 173+ 6D9A             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 173+ 6D9A 28          >                db      40
 174+ 6D9B                              User_Def CURRENT    , "CURRENT"   , 42 // pointer to the vocabulary where search continues
 174+ 6D9B             >                New_Def  CURRENT, "CURRENT", User_Ptr, is_normal
 174+ 6D9B             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 174+ 6D9B             >
 174+ 6D9B             >                // dummy db directives used to calculate length of namec
 174+ 6D9B 43 55 52 52 >                db      "CURRENT"
 174+ 6D9F 45 4E 54    >
 174+ 6DA2             >len_NFA         defl    $ - temp_NFA
 174+ 6DA2             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 174+ 6D9B             >
 174+ 6D9B 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 174+ 6D9C 43 55 52 52 >                db      "CURRENT"               // name string in 7-bit ascii, but
 174+ 6DA0 45 4E 54    >
 174+ 6DA3             >                org     $-1                 // alter last byte of Name just above to set
 174+ 6DA2 D4          >                db      {b $} | END_BIT     // msb as name end
 174+ 6DA3             >
 174+ 6DA3 8D 6D       >                dw      last_NFA            // Link to previous definition Name
 174+ 6DA5             >CURRENT:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 174+ 6DA5 CD 3A 6C    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 174+ 6DA8             >
 174+ 6DA8             >
 174+ 6DA8             >                endif           ; ok        // for other definitions it "points" the correct handler
 174+ 6DA8             >                // Use of "; ok" to suppress "warning[fwdref]"
 174+ 6DA8             >
 174+ 6DA8             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 174+ 6DA8 2A          >                db      42
 175+ 6DA9                              User_Def STATE      , "STATE"     , 44 // compilation status. 0 interpreting.
 175+ 6DA9             >                New_Def  STATE, "STATE", User_Ptr, is_normal
 175+ 6DA9             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 175+ 6DA9             >
 175+ 6DA9             >                // dummy db directives used to calculate length of namec
 175+ 6DA9 53 54 41 54 >                db      "STATE"
 175+ 6DAD 45          >
 175+ 6DAE             >len_NFA         defl    $ - temp_NFA
 175+ 6DAE             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 175+ 6DA9             >
 175+ 6DA9 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 175+ 6DAA 53 54 41 54 >                db      "STATE"               // name string in 7-bit ascii, but
 175+ 6DAE 45          >
 175+ 6DAF             >                org     $-1                 // alter last byte of Name just above to set
 175+ 6DAE C5          >                db      {b $} | END_BIT     // msb as name end
 175+ 6DAF             >
 175+ 6DAF 9B 6D       >                dw      last_NFA            // Link to previous definition Name
 175+ 6DB1             >STATE:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 175+ 6DB1 CD 3A 6C    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 175+ 6DB4             >
 175+ 6DB4             >
 175+ 6DB4             >                endif           ; ok        // for other definitions it "points" the correct handler
 175+ 6DB4             >                // Use of "; ok" to suppress "warning[fwdref]"
 175+ 6DB4             >
 175+ 6DB4             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 175+ 6DB4 2C          >                db      44
 176+ 6DB5                              User_Def BASE       , "BASE"      , 46 //
 176+ 6DB5             >                New_Def  BASE, "BASE", User_Ptr, is_normal
 176+ 6DB5             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 176+ 6DB5             >
 176+ 6DB5             >                // dummy db directives used to calculate length of namec
 176+ 6DB5 42 41 53 45 >                db      "BASE"
 176+ 6DB9             >len_NFA         defl    $ - temp_NFA
 176+ 6DB9             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 176+ 6DB5             >
 176+ 6DB5 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 176+ 6DB6 42 41 53 45 >                db      "BASE"               // name string in 7-bit ascii, but
 176+ 6DBA             >                org     $-1                 // alter last byte of Name just above to set
 176+ 6DB9 C5          >                db      {b $} | END_BIT     // msb as name end
 176+ 6DBA             >
 176+ 6DBA A9 6D       >                dw      last_NFA            // Link to previous definition Name
 176+ 6DBC             >BASE:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 176+ 6DBC CD 3A 6C    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 176+ 6DBF             >
 176+ 6DBF             >
 176+ 6DBF             >                endif           ; ok        // for other definitions it "points" the correct handler
 176+ 6DBF             >                // Use of "; ok" to suppress "warning[fwdref]"
 176+ 6DBF             >
 176+ 6DBF             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 176+ 6DBF 2E          >                db      46
 177+ 6DC0                              User_Def DPL        , "DPL"       , 48 // number of digits after decimal point in conversion
 177+ 6DC0             >                New_Def  DPL, "DPL", User_Ptr, is_normal
 177+ 6DC0             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 177+ 6DC0             >
 177+ 6DC0             >                // dummy db directives used to calculate length of namec
 177+ 6DC0 44 50 4C    >                db      "DPL"
 177+ 6DC3             >len_NFA         defl    $ - temp_NFA
 177+ 6DC3             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 177+ 6DC0             >
 177+ 6DC0 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 177+ 6DC1 44 50 4C    >                db      "DPL"               // name string in 7-bit ascii, but
 177+ 6DC4             >                org     $-1                 // alter last byte of Name just above to set
 177+ 6DC3 CC          >                db      {b $} | END_BIT     // msb as name end
 177+ 6DC4             >
 177+ 6DC4 B5 6D       >                dw      last_NFA            // Link to previous definition Name
 177+ 6DC6             >DPL:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 177+ 6DC6 CD 3A 6C    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 177+ 6DC9             >
 177+ 6DC9             >
 177+ 6DC9             >                endif           ; ok        // for other definitions it "points" the correct handler
 177+ 6DC9             >                // Use of "; ok" to suppress "warning[fwdref]"
 177+ 6DC9             >
 177+ 6DC9             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 177+ 6DC9 30          >                db      48
 178+ 6DCA                              User_Def FLD        , "FLD"       , 50 // output field width
 178+ 6DCA             >                New_Def  FLD, "FLD", User_Ptr, is_normal
 178+ 6DCA             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 178+ 6DCA             >
 178+ 6DCA             >                // dummy db directives used to calculate length of namec
 178+ 6DCA 46 4C 44    >                db      "FLD"
 178+ 6DCD             >len_NFA         defl    $ - temp_NFA
 178+ 6DCD             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 178+ 6DCA             >
 178+ 6DCA 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 178+ 6DCB 46 4C 44    >                db      "FLD"               // name string in 7-bit ascii, but
 178+ 6DCE             >                org     $-1                 // alter last byte of Name just above to set
 178+ 6DCD C4          >                db      {b $} | END_BIT     // msb as name end
 178+ 6DCE             >
 178+ 6DCE C0 6D       >                dw      last_NFA            // Link to previous definition Name
 178+ 6DD0             >FLD:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 178+ 6DD0 CD 3A 6C    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 178+ 6DD3             >
 178+ 6DD3             >
 178+ 6DD3             >                endif           ; ok        // for other definitions it "points" the correct handler
 178+ 6DD3             >                // Use of "; ok" to suppress "warning[fwdref]"
 178+ 6DD3             >
 178+ 6DD3             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 178+ 6DD3 32          >                db      50
 179+ 6DD4                              User_Def CSP        , "CSP"       , 52 // used to temporary store Stack-Pointer value
 179+ 6DD4             >                New_Def  CSP, "CSP", User_Ptr, is_normal
 179+ 6DD4             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 179+ 6DD4             >
 179+ 6DD4             >                // dummy db directives used to calculate length of namec
 179+ 6DD4 43 53 50    >                db      "CSP"
 179+ 6DD7             >len_NFA         defl    $ - temp_NFA
 179+ 6DD7             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 179+ 6DD4             >
 179+ 6DD4 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 179+ 6DD5 43 53 50    >                db      "CSP"               // name string in 7-bit ascii, but
 179+ 6DD8             >                org     $-1                 // alter last byte of Name just above to set
 179+ 6DD7 D0          >                db      {b $} | END_BIT     // msb as name end
 179+ 6DD8             >
 179+ 6DD8 CA 6D       >                dw      last_NFA            // Link to previous definition Name
 179+ 6DDA             >CSP:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 179+ 6DDA CD 3A 6C    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 179+ 6DDD             >
 179+ 6DDD             >
 179+ 6DDD             >                endif           ; ok        // for other definitions it "points" the correct handler
 179+ 6DDD             >                // Use of "; ok" to suppress "warning[fwdref]"
 179+ 6DDD             >
 179+ 6DDD             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 179+ 6DDD 34          >                db      52
 180+ 6DDE                              User_Def RSHARP     , "R#"        , 54 // location of editing cursor
 180+ 6DDE             >                New_Def  RSHARP, "R#", User_Ptr, is_normal
 180+ 6DDE             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 180+ 6DDE             >
 180+ 6DDE             >                // dummy db directives used to calculate length of namec
 180+ 6DDE 52 23       >                db      "R#"
 180+ 6DE0             >len_NFA         defl    $ - temp_NFA
 180+ 6DE0             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 180+ 6DDE             >
 180+ 6DDE 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 180+ 6DDF 52 23       >                db      "R#"               // name string in 7-bit ascii, but
 180+ 6DE1             >                org     $-1                 // alter last byte of Name just above to set
 180+ 6DE0 A3          >                db      {b $} | END_BIT     // msb as name end
 180+ 6DE1             >
 180+ 6DE1 D4 6D       >                dw      last_NFA            // Link to previous definition Name
 180+ 6DE3             >RSHARP:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 180+ 6DE3 CD 3A 6C    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 180+ 6DE6             >
 180+ 6DE6             >
 180+ 6DE6             >                endif           ; ok        // for other definitions it "points" the correct handler
 180+ 6DE6             >                // Use of "; ok" to suppress "warning[fwdref]"
 180+ 6DE6             >
 180+ 6DE6             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 180+ 6DE6 36          >                db      54
 181+ 6DE7                              User_Def HLD        , "HLD"       , 56 // last character during a number conversion output
 181+ 6DE7             >                New_Def  HLD, "HLD", User_Ptr, is_normal
 181+ 6DE7             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 181+ 6DE7             >
 181+ 6DE7             >                // dummy db directives used to calculate length of namec
 181+ 6DE7 48 4C 44    >                db      "HLD"
 181+ 6DEA             >len_NFA         defl    $ - temp_NFA
 181+ 6DEA             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 181+ 6DE7             >
 181+ 6DE7 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 181+ 6DE8 48 4C 44    >                db      "HLD"               // name string in 7-bit ascii, but
 181+ 6DEB             >                org     $-1                 // alter last byte of Name just above to set
 181+ 6DEA C4          >                db      {b $} | END_BIT     // msb as name end
 181+ 6DEB             >
 181+ 6DEB DE 6D       >                dw      last_NFA            // Link to previous definition Name
 181+ 6DED             >HLD:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 181+ 6DED CD 3A 6C    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 181+ 6DF0             >
 181+ 6DF0             >
 181+ 6DF0             >                endif           ; ok        // for other definitions it "points" the correct handler
 181+ 6DF0             >                // Use of "; ok" to suppress "warning[fwdref]"
 181+ 6DF0             >
 181+ 6DF0             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 181+ 6DF0 38          >                db      56
 182+ 6DF1                              User_Def USE        , "USE"       , 58 // address of last used block
 182+ 6DF1             >                New_Def  USE, "USE", User_Ptr, is_normal
 182+ 6DF1             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 182+ 6DF1             >
 182+ 6DF1             >                // dummy db directives used to calculate length of namec
 182+ 6DF1 55 53 45    >                db      "USE"
 182+ 6DF4             >len_NFA         defl    $ - temp_NFA
 182+ 6DF4             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 182+ 6DF1             >
 182+ 6DF1 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 182+ 6DF2 55 53 45    >                db      "USE"               // name string in 7-bit ascii, but
 182+ 6DF5             >                org     $-1                 // alter last byte of Name just above to set
 182+ 6DF4 C5          >                db      {b $} | END_BIT     // msb as name end
 182+ 6DF5             >
 182+ 6DF5 E7 6D       >                dw      last_NFA            // Link to previous definition Name
 182+ 6DF7             >USE:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 182+ 6DF7 CD 3A 6C    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 182+ 6DFA             >
 182+ 6DFA             >
 182+ 6DFA             >                endif           ; ok        // for other definitions it "points" the correct handler
 182+ 6DFA             >                // Use of "; ok" to suppress "warning[fwdref]"
 182+ 6DFA             >
 182+ 6DFA             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 182+ 6DFA 3A          >                db      58
 183+ 6DFB                              User_Def PREV       , "PREV"      , 60 // address of previous used block
 183+ 6DFB             >                New_Def  PREV, "PREV", User_Ptr, is_normal
 183+ 6DFB             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 183+ 6DFB             >
 183+ 6DFB             >                // dummy db directives used to calculate length of namec
 183+ 6DFB 50 52 45 56 >                db      "PREV"
 183+ 6DFF             >len_NFA         defl    $ - temp_NFA
 183+ 6DFF             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 183+ 6DFB             >
 183+ 6DFB 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 183+ 6DFC 50 52 45 56 >                db      "PREV"               // name string in 7-bit ascii, but
 183+ 6E00             >                org     $-1                 // alter last byte of Name just above to set
 183+ 6DFF D6          >                db      {b $} | END_BIT     // msb as name end
 183+ 6E00             >
 183+ 6E00 F1 6D       >                dw      last_NFA            // Link to previous definition Name
 183+ 6E02             >PREV:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 183+ 6E02 CD 3A 6C    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 183+ 6E05             >
 183+ 6E05             >
 183+ 6E05             >                endif           ; ok        // for other definitions it "points" the correct handler
 183+ 6E05             >                // Use of "; ok" to suppress "warning[fwdref]"
 183+ 6E05             >
 183+ 6E05             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 183+ 6E05 3C          >                db      60
 184+ 6E06                              User_Def LP         , "LP"        , 62 // line printer (not used)
 184+ 6E06             >                New_Def  LP, "LP", User_Ptr, is_normal
 184+ 6E06             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 184+ 6E06             >
 184+ 6E06             >                // dummy db directives used to calculate length of namec
 184+ 6E06 4C 50       >                db      "LP"
 184+ 6E08             >len_NFA         defl    $ - temp_NFA
 184+ 6E08             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 184+ 6E06             >
 184+ 6E06 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 184+ 6E07 4C 50       >                db      "LP"               // name string in 7-bit ascii, but
 184+ 6E09             >                org     $-1                 // alter last byte of Name just above to set
 184+ 6E08 D0          >                db      {b $} | END_BIT     // msb as name end
 184+ 6E09             >
 184+ 6E09 FB 6D       >                dw      last_NFA            // Link to previous definition Name
 184+ 6E0B             >LP:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 184+ 6E0B CD 3A 6C    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 184+ 6E0E             >
 184+ 6E0E             >
 184+ 6E0E             >                endif           ; ok        // for other definitions it "points" the correct handler
 184+ 6E0E             >                // Use of "; ok" to suppress "warning[fwdref]"
 184+ 6E0E             >
 184+ 6E0E             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 184+ 6E0E 3E          >                db      62
 185+ 6E0F                              User_Def PLACE      , "PLACE"     , 64 // number of digits after decimal point in output
 185+ 6E0F             >                New_Def  PLACE, "PLACE", User_Ptr, is_normal
 185+ 6E0F             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 185+ 6E0F             >
 185+ 6E0F             >                // dummy db directives used to calculate length of namec
 185+ 6E0F 50 4C 41 43 >                db      "PLACE"
 185+ 6E13 45          >
 185+ 6E14             >len_NFA         defl    $ - temp_NFA
 185+ 6E14             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 185+ 6E0F             >
 185+ 6E0F 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 185+ 6E10 50 4C 41 43 >                db      "PLACE"               // name string in 7-bit ascii, but
 185+ 6E14 45          >
 185+ 6E15             >                org     $-1                 // alter last byte of Name just above to set
 185+ 6E14 C5          >                db      {b $} | END_BIT     // msb as name end
 185+ 6E15             >
 185+ 6E15 06 6E       >                dw      last_NFA            // Link to previous definition Name
 185+ 6E17             >PLACE:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 185+ 6E17 CD 3A 6C    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 185+ 6E1A             >
 185+ 6E1A             >
 185+ 6E1A             >                endif           ; ok        // for other definitions it "points" the correct handler
 185+ 6E1A             >                // Use of "; ok" to suppress "warning[fwdref]"
 185+ 6E1A             >
 185+ 6E1A             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 185+ 6E1A 40          >                db      64
 186+ 6E1B                              User_Def SOURCE_ID  , "SOURCE-ID" , 66 // data-stream number in INCLUDE and LOAD-
 186+ 6E1B             >                New_Def  SOURCE_ID, "SOURCE-ID", User_Ptr, is_normal
 186+ 6E1B             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 186+ 6E1B             >
 186+ 6E1B             >                // dummy db directives used to calculate length of namec
 186+ 6E1B 53 4F 55 52 >                db      "SOURCE-ID"
 186+ 6E1F 43 45 2D 49 >
 186+ 6E23 44          >
 186+ 6E24             >len_NFA         defl    $ - temp_NFA
 186+ 6E24             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 186+ 6E1B             >
 186+ 6E1B 89          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 186+ 6E1C 53 4F 55 52 >                db      "SOURCE-ID"               // name string in 7-bit ascii, but
 186+ 6E20 43 45 2D 49 >
 186+ 6E24 44          >
 186+ 6E25             >                org     $-1                 // alter last byte of Name just above to set
 186+ 6E24 C4          >                db      {b $} | END_BIT     // msb as name end
 186+ 6E25             >
 186+ 6E25 0F 6E       >                dw      last_NFA            // Link to previous definition Name
 186+ 6E27             >SOURCE_ID:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 186+ 6E27 CD 3A 6C    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 186+ 6E2A             >
 186+ 6E2A             >
 186+ 6E2A             >                endif           ; ok        // for other definitions it "points" the correct handler
 186+ 6E2A             >                // Use of "; ok" to suppress "warning[fwdref]"
 186+ 6E2A             >
 186+ 6E2A             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 186+ 6E2A 42          >                db      66
 187+ 6E2B                              User_Def SPAN       , "SPAN"      , 68 // number of character of last EXPECT
 187+ 6E2B             >                New_Def  SPAN, "SPAN", User_Ptr, is_normal
 187+ 6E2B             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 187+ 6E2B             >
 187+ 6E2B             >                // dummy db directives used to calculate length of namec
 187+ 6E2B 53 50 41 4E >                db      "SPAN"
 187+ 6E2F             >len_NFA         defl    $ - temp_NFA
 187+ 6E2F             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 187+ 6E2B             >
 187+ 6E2B 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 187+ 6E2C 53 50 41 4E >                db      "SPAN"               // name string in 7-bit ascii, but
 187+ 6E30             >                org     $-1                 // alter last byte of Name just above to set
 187+ 6E2F CE          >                db      {b $} | END_BIT     // msb as name end
 187+ 6E30             >
 187+ 6E30 1B 6E       >                dw      last_NFA            // Link to previous definition Name
 187+ 6E32             >SPAN:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 187+ 6E32 CD 3A 6C    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 187+ 6E35             >
 187+ 6E35             >
 187+ 6E35             >                endif           ; ok        // for other definitions it "points" the correct handler
 187+ 6E35             >                // Use of "; ok" to suppress "warning[fwdref]"
 187+ 6E35             >
 187+ 6E35             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 187+ 6E35 44          >                db      68
 188+ 6E36                              User_Def HANDLER    , "HANDLER"   , 70 // Used by THROW-CATCH
 188+ 6E36             >                New_Def  HANDLER, "HANDLER", User_Ptr, is_normal
 188+ 6E36             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 188+ 6E36             >
 188+ 6E36             >                // dummy db directives used to calculate length of namec
 188+ 6E36 48 41 4E 44 >                db      "HANDLER"
 188+ 6E3A 4C 45 52    >
 188+ 6E3D             >len_NFA         defl    $ - temp_NFA
 188+ 6E3D             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 188+ 6E36             >
 188+ 6E36 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 188+ 6E37 48 41 4E 44 >                db      "HANDLER"               // name string in 7-bit ascii, but
 188+ 6E3B 4C 45 52    >
 188+ 6E3E             >                org     $-1                 // alter last byte of Name just above to set
 188+ 6E3D D2          >                db      {b $} | END_BIT     // msb as name end
 188+ 6E3E             >
 188+ 6E3E 2B 6E       >                dw      last_NFA            // Link to previous definition Name
 188+ 6E40             >HANDLER:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 188+ 6E40 CD 3A 6C    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 188+ 6E43             >
 188+ 6E43             >
 188+ 6E43             >                endif           ; ok        // for other definitions it "points" the correct handler
 188+ 6E43             >                // Use of "; ok" to suppress "warning[fwdref]"
 188+ 6E43             >
 188+ 6E43             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 188+ 6E43 46          >                db      70
 189+ 6E44                              User_Def HP         , "HP"        , 72 // heap-pointer address
 189+ 6E44             >                New_Def  HP, "HP", User_Ptr, is_normal
 189+ 6E44             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 189+ 6E44             >
 189+ 6E44             >                // dummy db directives used to calculate length of namec
 189+ 6E44 48 50       >                db      "HP"
 189+ 6E46             >len_NFA         defl    $ - temp_NFA
 189+ 6E46             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 189+ 6E44             >
 189+ 6E44 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 189+ 6E45 48 50       >                db      "HP"               // name string in 7-bit ascii, but
 189+ 6E47             >                org     $-1                 // alter last byte of Name just above to set
 189+ 6E46 D0          >                db      {b $} | END_BIT     // msb as name end
 189+ 6E47             >
 189+ 6E47 36 6E       >                dw      last_NFA            // Link to previous definition Name
 189+ 6E49             >HP:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 189+ 6E49 CD 3A 6C    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 189+ 6E4C             >
 189+ 6E4C             >
 189+ 6E4C             >                endif           ; ok        // for other definitions it "points" the correct handler
 189+ 6E4C             >                // Use of "; ok" to suppress "warning[fwdref]"
 189+ 6E4C             >
 189+ 6E4C             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 189+ 6E4C 48          >                db      72
 190+ 6E4D
 191+ 6E4D              //  ______________________________________________________________________
 192+ 6E4D              //
 193+ 6E4D              // here         -- a
 194+ 6E4D                              Colon_Def HERE, "HERE", is_normal
 194+ 6E4D             >                New_Def  HERE, "HERE", Enter_Ptr, is_normal ; ok
 194+ 6E4D             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 194+ 6E4D             >
 194+ 6E4D             >                // dummy db directives used to calculate length of namec
 194+ 6E4D 48 45 52 45 >                db      "HERE"
 194+ 6E51             >len_NFA         defl    $ - temp_NFA
 194+ 6E51             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 194+ 6E4D             >
 194+ 6E4D 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 194+ 6E4E 48 45 52 45 >                db      "HERE"               // name string in 7-bit ascii, but
 194+ 6E52             >                org     $-1                 // alter last byte of Name just above to set
 194+ 6E51 C5          >                db      {b $} | END_BIT     // msb as name end
 194+ 6E52             >
 194+ 6E52 44 6E       >                dw      last_NFA            // Link to previous definition Name
 194+ 6E54             >HERE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 194+ 6E54 CD D3 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 194+ 6E57             >
 194+ 6E57             >
 194+ 6E57             >                endif           ; ok        // for other definitions it "points" the correct handler
 194+ 6E57             >                // Use of "; ok" to suppress "warning[fwdref]"
 194+ 6E57             >
 194+ 6E57             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 195+ 6E57 17 6D 00 6B                  dw      DP, FETCH               // dp @
 196+ 6E5B 40 69                        dw      EXIT                    // ;
 197+ 6E5D
 198+ 6E5D              //  ______________________________________________________________________
 199+ 6E5D              //
 200+ 6E5D              // allot        n --
 201+ 6E5D                              Colon_Def ALLOT, "ALLOT", is_normal
 201+ 6E5D             >                New_Def  ALLOT, "ALLOT", Enter_Ptr, is_normal ; ok
 201+ 6E5D             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 201+ 6E5D             >
 201+ 6E5D             >                // dummy db directives used to calculate length of namec
 201+ 6E5D 41 4C 4C 4F >                db      "ALLOT"
 201+ 6E61 54          >
 201+ 6E62             >len_NFA         defl    $ - temp_NFA
 201+ 6E62             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 201+ 6E5D             >
 201+ 6E5D 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 201+ 6E5E 41 4C 4C 4F >                db      "ALLOT"               // name string in 7-bit ascii, but
 201+ 6E62 54          >
 201+ 6E63             >                org     $-1                 // alter last byte of Name just above to set
 201+ 6E62 D4          >                db      {b $} | END_BIT     // msb as name end
 201+ 6E63             >
 201+ 6E63 4D 6E       >                dw      last_NFA            // Link to previous definition Name
 201+ 6E65             >ALLOT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 201+ 6E65 CD D3 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 201+ 6E68             >
 201+ 6E68             >
 201+ 6E68             >                endif           ; ok        // for other definitions it "points" the correct handler
 201+ 6E68             >                // Use of "; ok" to suppress "warning[fwdref]"
 201+ 6E68             >
 201+ 6E68             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 202+ 6E68 17 6D DF 6A                  dw      DP,  PLUSSTORE          // dp +!
 203+ 6E6C 40 69                        dw      EXIT                    // ;
 204+ 6E6E
 205+ 6E6E              //  ______________________________________________________________________
 206+ 6E6E              //
 207+ 6E6E              // comma        n --
 208+ 6E6E                              Colon_Def COMMA, ",", is_normal
 208+ 6E6E             >                New_Def  COMMA, ",", Enter_Ptr, is_normal ; ok
 208+ 6E6E             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 208+ 6E6E             >
 208+ 6E6E             >                // dummy db directives used to calculate length of namec
 208+ 6E6E 2C          >                db      ","
 208+ 6E6F             >len_NFA         defl    $ - temp_NFA
 208+ 6E6F             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 208+ 6E6E             >
 208+ 6E6E 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 208+ 6E6F 2C          >                db      ","               // name string in 7-bit ascii, but
 208+ 6E70             >                org     $-1                 // alter last byte of Name just above to set
 208+ 6E6F AC          >                db      {b $} | END_BIT     // msb as name end
 208+ 6E70             >
 208+ 6E70 5D 6E       >                dw      last_NFA            // Link to previous definition Name
 208+ 6E72             >COMMA:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 208+ 6E72 CD D3 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 208+ 6E75             >
 208+ 6E75             >
 208+ 6E75             >                endif           ; ok        // for other definitions it "points" the correct handler
 208+ 6E75             >                // Use of "; ok" to suppress "warning[fwdref]"
 208+ 6E75             >
 208+ 6E75             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 209+ 6E75 54 6E 0C 6B                  dw      HERE, STORE             // here !
 210+ 6E79 5A 6C 65 6E                  dw      TWO, ALLOT              // 2 allot
 211+ 6E7D 40 69                        dw      EXIT                    // ;
 212+ 6E7F
 213+ 6E7F              //  ______________________________________________________________________
 214+ 6E7F              //
 215+ 6E7F              // ccomma       c --
 216+ 6E7F                              Colon_Def CCOMMA, "C,", is_normal
 216+ 6E7F             >                New_Def  CCOMMA, "C,", Enter_Ptr, is_normal ; ok
 216+ 6E7F             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 216+ 6E7F             >
 216+ 6E7F             >                // dummy db directives used to calculate length of namec
 216+ 6E7F 43 2C       >                db      "C,"
 216+ 6E81             >len_NFA         defl    $ - temp_NFA
 216+ 6E81             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 216+ 6E7F             >
 216+ 6E7F 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 216+ 6E80 43 2C       >                db      "C,"               // name string in 7-bit ascii, but
 216+ 6E82             >                org     $-1                 // alter last byte of Name just above to set
 216+ 6E81 AC          >                db      {b $} | END_BIT     // msb as name end
 216+ 6E82             >
 216+ 6E82 6E 6E       >                dw      last_NFA            // Link to previous definition Name
 216+ 6E84             >CCOMMA:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 216+ 6E84 CD D3 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 216+ 6E87             >
 216+ 6E87             >
 216+ 6E87             >                endif           ; ok        // for other definitions it "points" the correct handler
 216+ 6E87             >                // Use of "; ok" to suppress "warning[fwdref]"
 216+ 6E87             >
 216+ 6E87             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 217+ 6E87 54 6E 26 6B                  dw      HERE, CSTORE            // here c!
 218+ 6E8B 51 6C 65 6E                  dw      ONE, ALLOT              // 1 allot
 219+ 6E8F 40 69                        dw      EXIT                    // ;
 220+ 6E91
 221+ 6E91              //  ______________________________________________________________________
 222+ 6E91              //
 223+ 6E91              // s>d          n -- d
 224+ 6E91              // converts a single precision integer in a double precision
 225+ 6E91                              New_Def S_TO_D, "S>D", is_code, is_normal
 225+ 6E91             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 225+ 6E91             >
 225+ 6E91             >                // dummy db directives used to calculate length of namec
 225+ 6E91 53 3E 44    >                db      "S>D"
 225+ 6E94             >len_NFA         defl    $ - temp_NFA
 225+ 6E94             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 225+ 6E91             >
 225+ 6E91 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 225+ 6E92 53 3E 44    >                db      "S>D"               // name string in 7-bit ascii, but
 225+ 6E95             >                org     $-1                 // alter last byte of Name just above to set
 225+ 6E94 C4          >                db      {b $} | END_BIT     // msb as name end
 225+ 6E95             >
 225+ 6E95 7F 6E       >                dw      last_NFA            // Link to previous definition Name
 225+ 6E97             >S_TO_D:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 225+ 6E97 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 225+ 6E97 ~           >
 225+ 6E97 ~           >
 225+ 6E97             >                endif           ; ok        // for other definitions it "points" the correct handler
 225+ 6E97             >                // Use of "; ok" to suppress "warning[fwdref]"
 225+ 6E97             >
 225+ 6E97             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 226+ 6E97 E1                           pop     hl
 227+ 6E98 7C                           ld      a, h
 228+ 6E99 E5                           push    hl
 229+ 6E9A 17                           rla
 230+ 6E9B ED 62                        sbc     hl, hl
 231+ 6E9D E5                           push    hl
 232+ 6E9E                              next
 232+ 6E9E DD E9       >                jp      (ix)
 233+ 6EA0
 234+ 6EA0              //  ______________________________________________________________________
 235+ 6EA0              //
 236+ 6EA0              // -            n1 n2 -- n3
 237+ 6EA0              // subtraction
 238+ 6EA0                              New_Def SUBTRACT, "-", is_code, is_normal
 238+ 6EA0             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 238+ 6EA0             >
 238+ 6EA0             >                // dummy db directives used to calculate length of namec
 238+ 6EA0 2D          >                db      "-"
 238+ 6EA1             >len_NFA         defl    $ - temp_NFA
 238+ 6EA1             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 238+ 6EA0             >
 238+ 6EA0 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 238+ 6EA1 2D          >                db      "-"               // name string in 7-bit ascii, but
 238+ 6EA2             >                org     $-1                 // alter last byte of Name just above to set
 238+ 6EA1 AD          >                db      {b $} | END_BIT     // msb as name end
 238+ 6EA2             >
 238+ 6EA2 91 6E       >                dw      last_NFA            // Link to previous definition Name
 238+ 6EA4             >SUBTRACT:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 238+ 6EA4 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 238+ 6EA4 ~           >
 238+ 6EA4 ~           >
 238+ 6EA4             >                endif           ; ok        // for other definitions it "points" the correct handler
 238+ 6EA4             >                // Use of "; ok" to suppress "warning[fwdref]"
 238+ 6EA4             >
 238+ 6EA4             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 239+ 6EA4 D9                           exx
 240+ 6EA5 D1                           pop     de
 241+ 6EA6 E1                           pop     hl
 242+ 6EA7 A7                           and     a
 243+ 6EA8 ED 52                        sbc     hl, de
 244+ 6EAA E5                           push    hl
 245+ 6EAB D9                           exx
 246+ 6EAC                              next
 246+ 6EAC DD E9       >                jp      (ix)
 247+ 6EAE
 248+ 6EAE
 249+ 6EAE              //  ______________________________________________________________________
 250+ 6EAE              //
 251+ 6EAE              // =            n1 n2 -- n3
 252+ 6EAE              // equals
 253+ 6EAE                              Colon_Def EQUALS, "=", is_normal
 253+ 6EAE             >                New_Def  EQUALS, "=", Enter_Ptr, is_normal ; ok
 253+ 6EAE             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 253+ 6EAE             >
 253+ 6EAE             >                // dummy db directives used to calculate length of namec
 253+ 6EAE 3D          >                db      "="
 253+ 6EAF             >len_NFA         defl    $ - temp_NFA
 253+ 6EAF             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 253+ 6EAE             >
 253+ 6EAE 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 253+ 6EAF 3D          >                db      "="               // name string in 7-bit ascii, but
 253+ 6EB0             >                org     $-1                 // alter last byte of Name just above to set
 253+ 6EAF BD          >                db      {b $} | END_BIT     // msb as name end
 253+ 6EB0             >
 253+ 6EB0 A0 6E       >                dw      last_NFA            // Link to previous definition Name
 253+ 6EB2             >EQUALS:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 253+ 6EB2 CD D3 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 253+ 6EB5             >
 253+ 6EB5             >
 253+ 6EB5             >                endif           ; ok        // for other definitions it "points" the correct handler
 253+ 6EB5             >                // Use of "; ok" to suppress "warning[fwdref]"
 253+ 6EB5             >
 253+ 6EB5             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 254+ 6EB5 A4 6E 71 69                  dw      SUBTRACT, ZEQUAL        // - 0=
 255+ 6EB9 40 69                        dw      EXIT                    // ;
 256+ 6EBB
 257+ 6EBB              //  ______________________________________________________________________
 258+ 6EBB              //
 259+ 6EBB              // u<           u1 u2 -- u3
 260+ 6EBB              // unsigned less-than
 261+ 6EBB                              New_Def ULESS, "U<", is_code, is_normal
 261+ 6EBB             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 261+ 6EBB             >
 261+ 6EBB             >                // dummy db directives used to calculate length of namec
 261+ 6EBB 55 3C       >                db      "U<"
 261+ 6EBD             >len_NFA         defl    $ - temp_NFA
 261+ 6EBD             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 261+ 6EBB             >
 261+ 6EBB 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 261+ 6EBC 55 3C       >                db      "U<"               // name string in 7-bit ascii, but
 261+ 6EBE             >                org     $-1                 // alter last byte of Name just above to set
 261+ 6EBD BC          >                db      {b $} | END_BIT     // msb as name end
 261+ 6EBE             >
 261+ 6EBE AE 6E       >                dw      last_NFA            // Link to previous definition Name
 261+ 6EC0             >ULESS:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 261+ 6EC0 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 261+ 6EC0 ~           >
 261+ 6EC0 ~           >
 261+ 6EC0             >                endif           ; ok        // for other definitions it "points" the correct handler
 261+ 6EC0             >                // Use of "; ok" to suppress "warning[fwdref]"
 261+ 6EC0             >
 261+ 6EC0             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 262+ 6EC0 D9                           exx
 263+ 6EC1 D1                           pop     de
 264+ 6EC2 E1                           pop     hl
 265+ 6EC3 A7                           and     a
 266+ 6EC4 ED 52                        sbc     hl, de
 267+ 6EC6 ED 62                        sbc     hl, hl
 268+ 6EC8 E5                           push    hl
 269+ 6EC9 D9                           exx
 270+ 6ECA                              next
 270+ 6ECA DD E9       >                jp      (ix)
 271+ 6ECC
 272+ 6ECC              //  ______________________________________________________________________
 273+ 6ECC              //
 274+ 6ECC              // <           n1 n2 -- n3
 275+ 6ECC              // less-than
 276+ 6ECC                              New_Def LESS, "<", is_code, is_normal
 276+ 6ECC             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 276+ 6ECC             >
 276+ 6ECC             >                // dummy db directives used to calculate length of namec
 276+ 6ECC 3C          >                db      "<"
 276+ 6ECD             >len_NFA         defl    $ - temp_NFA
 276+ 6ECD             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 276+ 6ECC             >
 276+ 6ECC 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 276+ 6ECD 3C          >                db      "<"               // name string in 7-bit ascii, but
 276+ 6ECE             >                org     $-1                 // alter last byte of Name just above to set
 276+ 6ECD BC          >                db      {b $} | END_BIT     // msb as name end
 276+ 6ECE             >
 276+ 6ECE BB 6E       >                dw      last_NFA            // Link to previous definition Name
 276+ 6ED0             >LESS:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 276+ 6ED0 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 276+ 6ED0 ~           >
 276+ 6ED0 ~           >
 276+ 6ED0             >                endif           ; ok        // for other definitions it "points" the correct handler
 276+ 6ED0             >                // Use of "; ok" to suppress "warning[fwdref]"
 276+ 6ED0             >
 276+ 6ED0             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 277+ 6ED0 D9                           exx
 278+ 6ED1 D1                           pop     de
 279+ 6ED2 E1                           pop     hl
 280+ 6ED3 7C                           ld      a, h
 281+ 6ED4 EE 80                        xor     $80
 282+ 6ED6 67                           ld      h, a
 283+ 6ED7 7A                           ld      a, d
 284+ 6ED8 EE 80                        xor     $80
 285+ 6EDA 57                           ld      d, a
 286+ 6EDB              //              and     a
 287+ 6EDB ED 52                        sbc     hl, de
 288+ 6EDD ED 62                        sbc     hl, hl
 289+ 6EDF E5                           push    hl
 290+ 6EE0 D9                           exx
 291+ 6EE1                              next
 291+ 6EE1 DD E9       >                jp      (ix)
 292+ 6EE3
 293+ 6EE3              //  ______________________________________________________________________
 294+ 6EE3              //
 295+ 6EE3              // >            n1 n2 -- n3
 296+ 6EE3              // greater than
 297+ 6EE3                              Colon_Def GREATER, ">", is_normal
 297+ 6EE3             >                New_Def  GREATER, ">", Enter_Ptr, is_normal ; ok
 297+ 6EE3             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 297+ 6EE3             >
 297+ 6EE3             >                // dummy db directives used to calculate length of namec
 297+ 6EE3 3E          >                db      ">"
 297+ 6EE4             >len_NFA         defl    $ - temp_NFA
 297+ 6EE4             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 297+ 6EE3             >
 297+ 6EE3 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 297+ 6EE4 3E          >                db      ">"               // name string in 7-bit ascii, but
 297+ 6EE5             >                org     $-1                 // alter last byte of Name just above to set
 297+ 6EE4 BE          >                db      {b $} | END_BIT     // msb as name end
 297+ 6EE5             >
 297+ 6EE5 CC 6E       >                dw      last_NFA            // Link to previous definition Name
 297+ 6EE7             >GREATER:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 297+ 6EE7 CD D3 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 297+ 6EEA             >
 297+ 6EEA             >
 297+ 6EEA             >                endif           ; ok        // for other definitions it "points" the correct handler
 297+ 6EEA             >                // Use of "; ok" to suppress "warning[fwdref]"
 297+ 6EEA             >
 297+ 6EEA             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 298+ 6EEA 6C 6A D0 6E                  dw      SWAP, LESS              // swap <
 299+ 6EEE 40 69                        dw      EXIT                    // ;
 300+ 6EF0              //  ______________________________________________________________________
 301+ 6EF0              //
 302+ 6EF0              // min          n1 n2 -- n3
 303+ 6EF0              // minimum between n1 and n2
 304+ 6EF0                              Colon_Def MIN, "MIN" , is_normal
 304+ 6EF0             >                New_Def  MIN, "MIN", Enter_Ptr, is_normal ; ok
 304+ 6EF0             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 304+ 6EF0             >
 304+ 6EF0             >                // dummy db directives used to calculate length of namec
 304+ 6EF0 4D 49 4E    >                db      "MIN"
 304+ 6EF3             >len_NFA         defl    $ - temp_NFA
 304+ 6EF3             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 304+ 6EF0             >
 304+ 6EF0 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 304+ 6EF1 4D 49 4E    >                db      "MIN"               // name string in 7-bit ascii, but
 304+ 6EF4             >                org     $-1                 // alter last byte of Name just above to set
 304+ 6EF3 CE          >                db      {b $} | END_BIT     // msb as name end
 304+ 6EF4             >
 304+ 6EF4 E3 6E       >                dw      last_NFA            // Link to previous definition Name
 304+ 6EF6             >MIN:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 304+ 6EF6 CD D3 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 304+ 6EF9             >
 304+ 6EF9             >
 304+ 6EF9             >                endif           ; ok        // for other definitions it "points" the correct handler
 304+ 6EF9             >                // Use of "; ok" to suppress "warning[fwdref]"
 304+ 6EF9             >
 304+ 6EF9             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 305+ 6EF9 D2 6A                        dw      TWO_DUP                 // 2dup
 306+ 6EFB E7 6E                        dw      GREATER                 // >
 307+ 6EFD 1D 64                        dw      ZBRANCH
 308+ 6EFF 04 00                        dw      Min_Skip - $   // if
 309+ 6F01 6C 6A                        dw          SWAP                //      swap
 310+ 6F03              Min_Skip:                                       // endif
 311+ 6F03 4A 6A                        dw      DROP                    // drop
 312+ 6F05 40 69                        dw      EXIT                    // ;
 313+ 6F07
 314+ 6F07              //  ______________________________________________________________________
 315+ 6F07              //
 316+ 6F07              // max          n1 n2 -- n3
 317+ 6F07              // maximum between n1 and n2
 318+ 6F07                              Colon_Def MAX, "MAX", is_normal
 318+ 6F07             >                New_Def  MAX, "MAX", Enter_Ptr, is_normal ; ok
 318+ 6F07             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 318+ 6F07             >
 318+ 6F07             >                // dummy db directives used to calculate length of namec
 318+ 6F07 4D 41 58    >                db      "MAX"
 318+ 6F0A             >len_NFA         defl    $ - temp_NFA
 318+ 6F0A             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 318+ 6F07             >
 318+ 6F07 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 318+ 6F08 4D 41 58    >                db      "MAX"               // name string in 7-bit ascii, but
 318+ 6F0B             >                org     $-1                 // alter last byte of Name just above to set
 318+ 6F0A D8          >                db      {b $} | END_BIT     // msb as name end
 318+ 6F0B             >
 318+ 6F0B F0 6E       >                dw      last_NFA            // Link to previous definition Name
 318+ 6F0D             >MAX:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 318+ 6F0D CD D3 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 318+ 6F10             >
 318+ 6F10             >
 318+ 6F10             >                endif           ; ok        // for other definitions it "points" the correct handler
 318+ 6F10             >                // Use of "; ok" to suppress "warning[fwdref]"
 318+ 6F10             >
 318+ 6F10             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 319+ 6F10 D2 6A                        dw      TWO_DUP                 // 2dup
 320+ 6F12 D0 6E                        dw      LESS                    // <
 321+ 6F14 1D 64                        dw      ZBRANCH
 322+ 6F16 04 00                        dw      Max_Skip - $   // if
 323+ 6F18 6C 6A                        dw          SWAP                //      swap
 324+ 6F1A              Max_Skip:                                       // endif
 325+ 6F1A 4A 6A                        dw      DROP                    // drop
 326+ 6F1C 40 69                        dw      EXIT                    // ;
 327+ 6F1E
 328+ 6F1E              //  ______________________________________________________________________
 329+ 6F1E              //
 330+ 6F1E              // ?dup         n -- 0 | n n
 331+ 6F1E              // duplicate if not zero
 332+ 6F1E                              New_Def QDUP, "?DUP", is_code, is_normal
 332+ 6F1E             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 332+ 6F1E             >
 332+ 6F1E             >                // dummy db directives used to calculate length of namec
 332+ 6F1E 3F 44 55 50 >                db      "?DUP"
 332+ 6F22             >len_NFA         defl    $ - temp_NFA
 332+ 6F22             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 332+ 6F1E             >
 332+ 6F1E 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 332+ 6F1F 3F 44 55 50 >                db      "?DUP"               // name string in 7-bit ascii, but
 332+ 6F23             >                org     $-1                 // alter last byte of Name just above to set
 332+ 6F22 D0          >                db      {b $} | END_BIT     // msb as name end
 332+ 6F23             >
 332+ 6F23 07 6F       >                dw      last_NFA            // Link to previous definition Name
 332+ 6F25             >QDUP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 332+ 6F25 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 332+ 6F25 ~           >
 332+ 6F25 ~           >
 332+ 6F25             >                endif           ; ok        // for other definitions it "points" the correct handler
 332+ 6F25             >                // Use of "; ok" to suppress "warning[fwdref]"
 332+ 6F25             >
 332+ 6F25             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 333+ 6F25              QDup_Ptr:
 334+ 6F25 E1                           pop     hl
 335+ 6F26 7C                           ld      a, h
 336+ 6F27 B5                           or      l
 337+ 6F28 28 01                        jr      z, QDup_Skip
 338+ 6F2A E5                               push    hl
 339+ 6F2B              QDup_Skip:
 340+ 6F2B                              psh1
 340+ 6F2B E5          >                push    hl
 340+ 6F2C DD E9       >                jp      (ix)
 341+ 6F2E
 342+ 6F2E              //  ______________________________________________________________________
 343+ 6F2E              //
 344+ 6F2E              // -dup         n -- 0 | n n
 345+ 6F2E              // duplicate if not zero
 346+ 6F2E                              New_Def LDUP, "-DUP", is_code, is_normal
 346+ 6F2E             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 346+ 6F2E             >
 346+ 6F2E             >                // dummy db directives used to calculate length of namec
 346+ 6F2E 2D 44 55 50 >                db      "-DUP"
 346+ 6F32             >len_NFA         defl    $ - temp_NFA
 346+ 6F32             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 346+ 6F2E             >
 346+ 6F2E 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 346+ 6F2F 2D 44 55 50 >                db      "-DUP"               // name string in 7-bit ascii, but
 346+ 6F33             >                org     $-1                 // alter last byte of Name just above to set
 346+ 6F32 D0          >                db      {b $} | END_BIT     // msb as name end
 346+ 6F33             >
 346+ 6F33 1E 6F       >                dw      last_NFA            // Link to previous definition Name
 346+ 6F35             >LDUP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 346+ 6F35 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 346+ 6F35 ~           >
 346+ 6F35 ~           >
 346+ 6F35             >                endif           ; ok        // for other definitions it "points" the correct handler
 346+ 6F35             >                // Use of "; ok" to suppress "warning[fwdref]"
 346+ 6F35             >
 346+ 6F35             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 347+ 6F35 C3 25 6F                     jp      QDup_Ptr
 348+ 6F38
 349+ 6F38              //  ______________________________________________________________________
 350+ 6F38              //
 351+ 6F38              // emit         c --
 352+ 6F38                              Colon_Def EMIT, "EMIT", is_normal
 352+ 6F38             >                New_Def  EMIT, "EMIT", Enter_Ptr, is_normal ; ok
 352+ 6F38             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 352+ 6F38             >
 352+ 6F38             >                // dummy db directives used to calculate length of namec
 352+ 6F38 45 4D 49 54 >                db      "EMIT"
 352+ 6F3C             >len_NFA         defl    $ - temp_NFA
 352+ 6F3C             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 352+ 6F38             >
 352+ 6F38 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 352+ 6F39 45 4D 49 54 >                db      "EMIT"               // name string in 7-bit ascii, but
 352+ 6F3D             >                org     $-1                 // alter last byte of Name just above to set
 352+ 6F3C D4          >                db      {b $} | END_BIT     // msb as name end
 352+ 6F3D             >
 352+ 6F3D 2E 6F       >                dw      last_NFA            // Link to previous definition Name
 352+ 6F3F             >EMIT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 352+ 6F3F CD D3 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 352+ 6F42             >
 352+ 6F42             >
 352+ 6F42             >                endif           ; ok        // for other definitions it "points" the correct handler
 352+ 6F42             >                // Use of "; ok" to suppress "warning[fwdref]"
 352+ 6F42             >
 352+ 6F42             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 353+ 6F42 26 66                        dw      C_EMIT                      // (?emit)
 354+ 6F44 25 6F                        dw      QDUP                        // ?dup
 355+ 6F46                                                                  // if
 356+ 6F46 1D 64                        dw      ZBRANCH
 357+ 6F48 0A 00                        dw      Emit_Skip - $
 358+ 6F4A E9 65                        dw          EMITC                   //      emitc
 359+ 6F4C 51 6C                        dw          ONE                     //      1
 360+ 6F4E 72 6D DF 6A                  dw          OUT, PLUSSTORE        //      out +!
 361+ 6F52              Emit_Skip:                                          // endif
 362+ 6F52 40 69                        dw      EXIT                        // ;
 363+ 6F54
 364+ 6F54              //  ______________________________________________________________________
 365+ 6F54              //
 366+ 6F54              // space        --
 367+ 6F54                              Colon_Def SPACE, "SPACE", is_normal
 367+ 6F54             >                New_Def  SPACE, "SPACE", Enter_Ptr, is_normal ; ok
 367+ 6F54             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 367+ 6F54             >
 367+ 6F54             >                // dummy db directives used to calculate length of namec
 367+ 6F54 53 50 41 43 >                db      "SPACE"
 367+ 6F58 45          >
 367+ 6F59             >len_NFA         defl    $ - temp_NFA
 367+ 6F59             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 367+ 6F54             >
 367+ 6F54 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 367+ 6F55 53 50 41 43 >                db      "SPACE"               // name string in 7-bit ascii, but
 367+ 6F59 45          >
 367+ 6F5A             >                org     $-1                 // alter last byte of Name just above to set
 367+ 6F59 C5          >                db      {b $} | END_BIT     // msb as name end
 367+ 6F5A             >
 367+ 6F5A 38 6F       >                dw      last_NFA            // Link to previous definition Name
 367+ 6F5C             >SPACE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 367+ 6F5C CD D3 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 367+ 6F5F             >
 367+ 6F5F             >
 367+ 6F5F             >                endif           ; ok        // for other definitions it "points" the correct handler
 367+ 6F5F             >                // Use of "; ok" to suppress "warning[fwdref]"
 367+ 6F5F             >
 367+ 6F5F             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 368+ 6F5F 77 6C 3F 6F                  dw      BL, EMIT                // bl emit
 369+ 6F63 40 69                        dw      EXIT                    // ;
 370+ 6F65
 371+ 6F65              //  ______________________________________________________________________
 372+ 6F65              //
 373+ 6F65              // traverse     a n -- a
 374+ 6F65              // A dictionary entry is structured as follows
 375+ 6F65              // NFA: +0   one byte of word-length (n<32) | some flags (immediate, smudge) | $80
 376+ 6F65              //      +1   word name, last character is toggled with $80
 377+ 6F65              // LFA: +1+n link to NFA ofprevious  dictionary entry.
 378+ 6F65              // CFA: +3+n routine address. Colon definitions here have a CALL aa
 379+ 6F65              // PFA: +6+n "is_code", definitions have no PFA. // +5
 380+ 6F65              //
 381+ 6F65                              Colon_Def TRAVERSE, "TRAVERSE", is_normal
 381+ 6F65             >                New_Def  TRAVERSE, "TRAVERSE", Enter_Ptr, is_normal ; ok
 381+ 6F65             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 381+ 6F65             >
 381+ 6F65             >                // dummy db directives used to calculate length of namec
 381+ 6F65 54 52 41 56 >                db      "TRAVERSE"
 381+ 6F69 45 52 53 45 >
 381+ 6F6D             >len_NFA         defl    $ - temp_NFA
 381+ 6F6D             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 381+ 6F65             >
 381+ 6F65 88          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 381+ 6F66 54 52 41 56 >                db      "TRAVERSE"               // name string in 7-bit ascii, but
 381+ 6F6A 45 52 53 45 >
 381+ 6F6E             >                org     $-1                 // alter last byte of Name just above to set
 381+ 6F6D C5          >                db      {b $} | END_BIT     // msb as name end
 381+ 6F6E             >
 381+ 6F6E 54 6F       >                dw      last_NFA            // Link to previous definition Name
 381+ 6F70             >TRAVERSE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 381+ 6F70 CD D3 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 381+ 6F73             >
 381+ 6F73             >
 381+ 6F73             >                endif           ; ok        // for other definitions it "points" the correct handler
 381+ 6F73             >                // Use of "; ok" to suppress "warning[fwdref]"
 381+ 6F73             >
 381+ 6F73             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 382+ 6F73 6C 6A                        dw      SWAP                    // swap
 383+ 6F75              Traverse_Begin:                                 // begin
 384+ 6F75 3C 6A AB 69                  dw          OVER, PLUS          //      over +
 385+ 6F79 A5 63 7F 00                  dw          LIT, 127            //      127
 386+ 6F7D 3C 6A 1A 6B                  dw          OVER, CFETCH        //      over @
 387+ 6F81 D0 6E                        dw          LESS                //      <
 388+ 6F83                                                              // until
 389+ 6F83 1D 64                        dw      ZBRANCH
 390+ 6F85 F0 FF                        dw      Traverse_Begin - $
 391+ 6F87 53 6A                        dw      NIP                     //  nip
 392+ 6F89 40 69                        dw      EXIT                    //  ;
 393+ 6F8B
 394+ 6F8B              //  ______________________________________________________________________
 395+ 6F8B              //
 396+ 6F8B              // latest       -- nfa
 397+ 6F8B                              Colon_Def LATEST, "LATEST", is_normal
 397+ 6F8B             >                New_Def  LATEST, "LATEST", Enter_Ptr, is_normal ; ok
 397+ 6F8B             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 397+ 6F8B             >
 397+ 6F8B             >                // dummy db directives used to calculate length of namec
 397+ 6F8B 4C 41 54 45 >                db      "LATEST"
 397+ 6F8F 53 54       >
 397+ 6F91             >len_NFA         defl    $ - temp_NFA
 397+ 6F91             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 397+ 6F8B             >
 397+ 6F8B 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 397+ 6F8C 4C 41 54 45 >                db      "LATEST"               // name string in 7-bit ascii, but
 397+ 6F90 53 54       >
 397+ 6F92             >                org     $-1                 // alter last byte of Name just above to set
 397+ 6F91 D4          >                db      {b $} | END_BIT     // msb as name end
 397+ 6F92             >
 397+ 6F92 65 6F       >                dw      last_NFA            // Link to previous definition Name
 397+ 6F94             >LATEST:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 397+ 6F94 CD D3 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 397+ 6F97             >
 397+ 6F97             >
 397+ 6F97             >                endif           ; ok        // for other definitions it "points" the correct handler
 397+ 6F97             >                // Use of "; ok" to suppress "warning[fwdref]"
 397+ 6F97             >
 397+ 6F97             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 398+ 6F97 A5 6D                        dw      CURRENT                 // current
 399+ 6F99 00 6B 00 6B                  dw      FETCH, FETCH            // @ @
 400+ 6F9D 40 69                        dw      EXIT                    // ;
 401+ 6F9F
 402+ 6F9F              //  ______________________________________________________________________
 403+ 6F9F              //
 404+ 6F9F              // lfa          pfa -- lfa
 405+ 6F9F                              Colon_Def LFA, "LFA", is_normal
 405+ 6F9F             >                New_Def  LFA, "LFA", Enter_Ptr, is_normal ; ok
 405+ 6F9F             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 405+ 6F9F             >
 405+ 6F9F             >                // dummy db directives used to calculate length of namec
 405+ 6F9F 4C 46 41    >                db      "LFA"
 405+ 6FA2             >len_NFA         defl    $ - temp_NFA
 405+ 6FA2             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 405+ 6F9F             >
 405+ 6F9F 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 405+ 6FA0 4C 46 41    >                db      "LFA"               // name string in 7-bit ascii, but
 405+ 6FA3             >                org     $-1                 // alter last byte of Name just above to set
 405+ 6FA2 C1          >                db      {b $} | END_BIT     // msb as name end
 405+ 6FA3             >
 405+ 6FA3 8B 6F       >                dw      last_NFA            // Link to previous definition Name
 405+ 6FA5             >LFA:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 405+ 6FA5 CD D3 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 405+ 6FA8             >
 405+ 6FA8             >
 405+ 6FA8             >                endif           ; ok        // for other definitions it "points" the correct handler
 405+ 6FA8             >                // Use of "; ok" to suppress "warning[fwdref]"
 405+ 6FA8             >
 405+ 6FA8             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 406+ 6FA8 A5 63 05 00                  dw      LIT, 5                  // cell- --> 5
 407+ 6FAC A4 6E                        dw      SUBTRACT                // cell- --> -
 408+ 6FAE 40 69                        dw      EXIT                    // ;
 409+ 6FB0
 410+ 6FB0              //  ______________________________________________________________________
 411+ 6FB0              //
 412+ 6FB0              // cfa          pfa -- cfa
 413+ 6FB0                              Colon_Def CFA, "CFA", is_normal
 413+ 6FB0             >                New_Def  CFA, "CFA", Enter_Ptr, is_normal ; ok
 413+ 6FB0             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 413+ 6FB0             >
 413+ 6FB0             >                // dummy db directives used to calculate length of namec
 413+ 6FB0 43 46 41    >                db      "CFA"
 413+ 6FB3             >len_NFA         defl    $ - temp_NFA
 413+ 6FB3             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 413+ 6FB0             >
 413+ 6FB0 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 413+ 6FB1 43 46 41    >                db      "CFA"               // name string in 7-bit ascii, but
 413+ 6FB4             >                org     $-1                 // alter last byte of Name just above to set
 413+ 6FB3 C1          >                db      {b $} | END_BIT     // msb as name end
 413+ 6FB4             >
 413+ 6FB4 9F 6F       >                dw      last_NFA            // Link to previous definition Name
 413+ 6FB6             >CFA:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 413+ 6FB6 CD D3 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 413+ 6FB9             >
 413+ 6FB9             >
 413+ 6FB9             >                endif           ; ok        // for other definitions it "points" the correct handler
 413+ 6FB9             >                // Use of "; ok" to suppress "warning[fwdref]"
 413+ 6FB9             >
 413+ 6FB9             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 414+ 6FB9              //              dw      CELL_MINUS              // cell-
 415+ 6FB9 63 6C A4 6E                  dw      THREE, SUBTRACT         // 3 -
 416+ 6FBD 40 69                        dw      EXIT                    // ;
 417+ 6FBF
 418+ 6FBF              //  ______________________________________________________________________
 419+ 6FBF              //
 420+ 6FBF              // nfa          pfa -- nfa
 421+ 6FBF                              Colon_Def NFA, "NFA", is_normal
 421+ 6FBF             >                New_Def  NFA, "NFA", Enter_Ptr, is_normal ; ok
 421+ 6FBF             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 421+ 6FBF             >
 421+ 6FBF             >                // dummy db directives used to calculate length of namec
 421+ 6FBF 4E 46 41    >                db      "NFA"
 421+ 6FC2             >len_NFA         defl    $ - temp_NFA
 421+ 6FC2             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 421+ 6FBF             >
 421+ 6FBF 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 421+ 6FC0 4E 46 41    >                db      "NFA"               // name string in 7-bit ascii, but
 421+ 6FC3             >                org     $-1                 // alter last byte of Name just above to set
 421+ 6FC2 C1          >                db      {b $} | END_BIT     // msb as name end
 421+ 6FC3             >
 421+ 6FC3 B0 6F       >                dw      last_NFA            // Link to previous definition Name
 421+ 6FC5             >NFA:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 421+ 6FC5 CD D3 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 421+ 6FC8             >
 421+ 6FC8             >
 421+ 6FC8             >                endif           ; ok        // for other definitions it "points" the correct handler
 421+ 6FC8             >                // Use of "; ok" to suppress "warning[fwdref]"
 421+ 6FC8             >
 421+ 6FC8             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 422+ 6FC8 A5 63 06 00                  dw      LIT, 6                  // 5 --> 6
 423+ 6FCC A4 6E                        dw      SUBTRACT                // -
 424+ 6FCE 6D 6C                        dw      NEG_ONE                 // -1
 425+ 6FD0 70 6F                        dw      TRAVERSE                // traverse
 426+ 6FD2 40 69                        dw      EXIT                    // ;
 427+ 6FD4
 428+ 6FD4              //  ______________________________________________________________________
 429+ 6FD4              //
 430+ 6FD4              // pfa          nfa -- pfa
 431+ 6FD4                              Colon_Def PFA, "PFA", is_normal
 431+ 6FD4             >                New_Def  PFA, "PFA", Enter_Ptr, is_normal ; ok
 431+ 6FD4             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 431+ 6FD4             >
 431+ 6FD4             >                // dummy db directives used to calculate length of namec
 431+ 6FD4 50 46 41    >                db      "PFA"
 431+ 6FD7             >len_NFA         defl    $ - temp_NFA
 431+ 6FD7             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 431+ 6FD4             >
 431+ 6FD4 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 431+ 6FD5 50 46 41    >                db      "PFA"               // name string in 7-bit ascii, but
 431+ 6FD8             >                org     $-1                 // alter last byte of Name just above to set
 431+ 6FD7 C1          >                db      {b $} | END_BIT     // msb as name end
 431+ 6FD8             >
 431+ 6FD8 BF 6F       >                dw      last_NFA            // Link to previous definition Name
 431+ 6FDA             >PFA:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 431+ 6FDA CD D3 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 431+ 6FDD             >
 431+ 6FDD             >
 431+ 6FDD             >                endif           ; ok        // for other definitions it "points" the correct handler
 431+ 6FDD             >                // Use of "; ok" to suppress "warning[fwdref]"
 431+ 6FDD             >
 431+ 6FDD             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 432+ 6FDD 51 6C                        dw      ONE                     // 1
 433+ 6FDF 70 6F                        dw      TRAVERSE                // traverse
 434+ 6FE1 A5 63 06 00                  dw      LIT, 6                  // 5 --> 6
 435+ 6FE5 AB 69                        dw      PLUS                    // +
 436+ 6FE7 40 69                        dw      EXIT                    // ;
 437+ 6FE9
 438+ 6FE9              //  ______________________________________________________________________
 439+ 6FE9              //
 440+ 6FE9              // >body        cfa -- pfa
 441+ 6FE9                              Colon_Def TO_BODY, ">BODY", is_normal
 441+ 6FE9             >                New_Def  TO_BODY, ">BODY", Enter_Ptr, is_normal ; ok
 441+ 6FE9             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 441+ 6FE9             >
 441+ 6FE9             >                // dummy db directives used to calculate length of namec
 441+ 6FE9 3E 42 4F 44 >                db      ">BODY"
 441+ 6FED 59          >
 441+ 6FEE             >len_NFA         defl    $ - temp_NFA
 441+ 6FEE             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 441+ 6FE9             >
 441+ 6FE9 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 441+ 6FEA 3E 42 4F 44 >                db      ">BODY"               // name string in 7-bit ascii, but
 441+ 6FEE 59          >
 441+ 6FEF             >                org     $-1                 // alter last byte of Name just above to set
 441+ 6FEE D9          >                db      {b $} | END_BIT     // msb as name end
 441+ 6FEF             >
 441+ 6FEF D4 6F       >                dw      last_NFA            // Link to previous definition Name
 441+ 6FF1             >TO_BODY:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 441+ 6FF1 CD D3 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 441+ 6FF4             >
 441+ 6FF4             >
 441+ 6FF4             >                endif           ; ok        // for other definitions it "points" the correct handler
 441+ 6FF4             >                // Use of "; ok" to suppress "warning[fwdref]"
 441+ 6FF4             >
 441+ 6FF4             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 442+ 6FF4 63 6C AB 69                  dw      THREE, PLUS             // cell+ --> 3 +
 443+ 6FF8 40 69                        dw      EXIT                    // ;
 444+ 6FFA
 445+ 6FFA              //  ______________________________________________________________________
 446+ 6FFA              //
 447+ 6FFA              // <name        cfa -- nfa
 448+ 6FFA                              Colon_Def TO_NAME, "<NAME", is_normal
 448+ 6FFA             >                New_Def  TO_NAME, "<NAME", Enter_Ptr, is_normal ; ok
 448+ 6FFA             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 448+ 6FFA             >
 448+ 6FFA             >                // dummy db directives used to calculate length of namec
 448+ 6FFA 3C 4E 41 4D >                db      "<NAME"
 448+ 6FFE 45          >
 448+ 6FFF             >len_NFA         defl    $ - temp_NFA
 448+ 6FFF             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 448+ 6FFA             >
 448+ 6FFA 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 448+ 6FFB 3C 4E 41 4D >                db      "<NAME"               // name string in 7-bit ascii, but
 448+ 6FFF 45          >
 448+ 7000             >                org     $-1                 // alter last byte of Name just above to set
 448+ 6FFF C5          >                db      {b $} | END_BIT     // msb as name end
 448+ 7000             >
 448+ 7000 E9 6F       >                dw      last_NFA            // Link to previous definition Name
 448+ 7002             >TO_NAME:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 448+ 7002 CD D3 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 448+ 7005             >
 448+ 7005             >
 448+ 7005             >                endif           ; ok        // for other definitions it "points" the correct handler
 448+ 7005             >                // Use of "; ok" to suppress "warning[fwdref]"
 448+ 7005             >
 448+ 7005             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 449+ 7005 F1 6F                        dw      TO_BODY                 // >body
 450+ 7007 C5 6F                        dw      NFA                     // nfa
 451+ 7009 40 69                        dw      EXIT                    // ;
 452+ 700B
 453+ 700B              //  ______________________________________________________________________
 454+ 700B              //
 455+ 700B              // !csp         --
 456+ 700B              // store in user variable CSP current value of SP. Used at compile-time for syntax checkng
 457+ 700B                              Colon_Def STORE_CSP, "!CSP", is_normal
 457+ 700B             >                New_Def  STORE_CSP, "!CSP", Enter_Ptr, is_normal ; ok
 457+ 700B             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 457+ 700B             >
 457+ 700B             >                // dummy db directives used to calculate length of namec
 457+ 700B 21 43 53 50 >                db      "!CSP"
 457+ 700F             >len_NFA         defl    $ - temp_NFA
 457+ 700F             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 457+ 700B             >
 457+ 700B 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 457+ 700C 21 43 53 50 >                db      "!CSP"               // name string in 7-bit ascii, but
 457+ 7010             >                org     $-1                 // alter last byte of Name just above to set
 457+ 700F D0          >                db      {b $} | END_BIT     // msb as name end
 457+ 7010             >
 457+ 7010 FA 6F       >                dw      last_NFA            // Link to previous definition Name
 457+ 7012             >STORE_CSP:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 457+ 7012 CD D3 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 457+ 7015             >
 457+ 7015             >
 457+ 7015             >                endif           ; ok        // for other definitions it "points" the correct handler
 457+ 7015             >                // Use of "; ok" to suppress "warning[fwdref]"
 457+ 7015             >
 457+ 7015             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 458+ 7015 16 69                        dw      SPFETCH                 // sp@
 459+ 7017 DA 6D 0C 6B                  dw      CSP, STORE              // csp !
 460+ 701B 40 69                        dw      EXIT                    // ;
 461+ 701D
 462+ 701D              //  ______________________________________________________________________
 463+ 701D              //
 464+ 701D              // ?error       f n --
 465+ 701D              // rase error n if flag f it true
 466+ 701D                              Colon_Def QERROR, "?ERROR", is_normal
 466+ 701D             >                New_Def  QERROR, "?ERROR", Enter_Ptr, is_normal ; ok
 466+ 701D             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 466+ 701D             >
 466+ 701D             >                // dummy db directives used to calculate length of namec
 466+ 701D 3F 45 52 52 >                db      "?ERROR"
 466+ 7021 4F 52       >
 466+ 7023             >len_NFA         defl    $ - temp_NFA
 466+ 7023             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 466+ 701D             >
 466+ 701D 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 466+ 701E 3F 45 52 52 >                db      "?ERROR"               // name string in 7-bit ascii, but
 466+ 7022 4F 52       >
 466+ 7024             >                org     $-1                 // alter last byte of Name just above to set
 466+ 7023 D2          >                db      {b $} | END_BIT     // msb as name end
 466+ 7024             >
 466+ 7024 0B 70       >                dw      last_NFA            // Link to previous definition Name
 466+ 7026             >QERROR:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 466+ 7026 CD D3 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 466+ 7029             >
 466+ 7029             >
 466+ 7029             >                endif           ; ok        // for other definitions it "points" the correct handler
 466+ 7029             >                // Use of "; ok" to suppress "warning[fwdref]"
 466+ 7029             >
 466+ 7029             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 467+ 7029 6C 6A                        dw      SWAP                    // swap
 468+ 702B                                                              // if
 469+ 702B 1D 64                        dw      ZBRANCH
 470+ 702D 08 00                        dw      QError_Else - $
 471+ 702F D0 75                        dw          ERROR               //      error  ( is a forward-ref )
 472+ 7031                                                              // else
 473+ 7031 08 64                        dw      BRANCH
 474+ 7033 04 00                        dw      QError_Endif - $
 475+ 7035              QError_Else:
 476+ 7035 4A 6A                        dw          DROP                //      drop
 477+ 7037              QError_Endif:                                   // endif
 478+ 7037 40 69                        dw      EXIT                    // ;
 479+ 7039
 480+ 7039              //  ______________________________________________________________________
 481+ 7039              //
 482+ 7039              // ?comp       --
 483+ 7039              // raise msg #17 if not compiling
 484+ 7039                              Colon_Def QCOMP, "?COMP", is_normal
 484+ 7039             >                New_Def  QCOMP, "?COMP", Enter_Ptr, is_normal ; ok
 484+ 7039             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 484+ 7039             >
 484+ 7039             >                // dummy db directives used to calculate length of namec
 484+ 7039 3F 43 4F 4D >                db      "?COMP"
 484+ 703D 50          >
 484+ 703E             >len_NFA         defl    $ - temp_NFA
 484+ 703E             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 484+ 7039             >
 484+ 7039 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 484+ 703A 3F 43 4F 4D >                db      "?COMP"               // name string in 7-bit ascii, but
 484+ 703E 50          >
 484+ 703F             >                org     $-1                 // alter last byte of Name just above to set
 484+ 703E D0          >                db      {b $} | END_BIT     // msb as name end
 484+ 703F             >
 484+ 703F 1D 70       >                dw      last_NFA            // Link to previous definition Name
 484+ 7041             >QCOMP:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 484+ 7041 CD D3 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 484+ 7044             >
 484+ 7044             >
 484+ 7044             >                endif           ; ok        // for other definitions it "points" the correct handler
 484+ 7044             >                // Use of "; ok" to suppress "warning[fwdref]"
 484+ 7044             >
 484+ 7044             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 485+ 7044 B1 6D 00 6B                  dw      STATE, FETCH            // state @
 486+ 7048 71 69                        dw      ZEQUAL                  // 0=
 487+ 704A A5 63 11 00                  dw      LIT, 17                 // 17  ( can't be executed )
 488+ 704E 26 70                        dw      QERROR                  // ?error
 489+ 7050 40 69                        dw      EXIT                    // ;
 490+ 7052
 491+ 7052              //  ______________________________________________________________________
 492+ 7052              //
 493+ 7052              // ?exec       --
 494+ 7052              // raise msg #18 if compiling
 495+ 7052                              Colon_Def QEXEC, "?EXEC", is_normal
 495+ 7052             >                New_Def  QEXEC, "?EXEC", Enter_Ptr, is_normal ; ok
 495+ 7052             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 495+ 7052             >
 495+ 7052             >                // dummy db directives used to calculate length of namec
 495+ 7052 3F 45 58 45 >                db      "?EXEC"
 495+ 7056 43          >
 495+ 7057             >len_NFA         defl    $ - temp_NFA
 495+ 7057             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 495+ 7052             >
 495+ 7052 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 495+ 7053 3F 45 58 45 >                db      "?EXEC"               // name string in 7-bit ascii, but
 495+ 7057 43          >
 495+ 7058             >                org     $-1                 // alter last byte of Name just above to set
 495+ 7057 C3          >                db      {b $} | END_BIT     // msb as name end
 495+ 7058             >
 495+ 7058 39 70       >                dw      last_NFA            // Link to previous definition Name
 495+ 705A             >QEXEC:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 495+ 705A CD D3 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 495+ 705D             >
 495+ 705D             >
 495+ 705D             >                endif           ; ok        // for other definitions it "points" the correct handler
 495+ 705D             >                // Use of "; ok" to suppress "warning[fwdref]"
 495+ 705D             >
 495+ 705D             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 496+ 705D B1 6D 00 6B                  dw      STATE, FETCH            // state @
 497+ 7061 A5 63 12 00                  dw      LIT, 18                 // 18  ( can't be compiled )
 498+ 7065 26 70                        dw      QERROR                  // ?error
 499+ 7067 40 69                        dw      EXIT                    // ;
 500+ 7069
 501+ 7069              //  ______________________________________________________________________
 502+ 7069              //
 503+ 7069              // ?pairs       n1 n2 --
 504+ 7069              // raise msg #19 if n1 != n2. Compiler pushes some placeholder to stack for syntax checking
 505+ 7069                              Colon_Def QPAIRS, "?PAIRS", is_normal
 505+ 7069             >                New_Def  QPAIRS, "?PAIRS", Enter_Ptr, is_normal ; ok
 505+ 7069             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 505+ 7069             >
 505+ 7069             >                // dummy db directives used to calculate length of namec
 505+ 7069 3F 50 41 49 >                db      "?PAIRS"
 505+ 706D 52 53       >
 505+ 706F             >len_NFA         defl    $ - temp_NFA
 505+ 706F             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 505+ 7069             >
 505+ 7069 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 505+ 706A 3F 50 41 49 >                db      "?PAIRS"               // name string in 7-bit ascii, but
 505+ 706E 52 53       >
 505+ 7070             >                org     $-1                 // alter last byte of Name just above to set
 505+ 706F D3          >                db      {b $} | END_BIT     // msb as name end
 505+ 7070             >
 505+ 7070 52 70       >                dw      last_NFA            // Link to previous definition Name
 505+ 7072             >QPAIRS:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 505+ 7072 CD D3 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 505+ 7075             >
 505+ 7075             >
 505+ 7075             >                endif           ; ok        // for other definitions it "points" the correct handler
 505+ 7075             >                // Use of "; ok" to suppress "warning[fwdref]"
 505+ 7075             >
 505+ 7075             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 506+ 7075 A4 6E                        dw      SUBTRACT                // -
 507+ 7077 A5 63 13 00                  dw      LIT, 19                 // 18  ( syntax error )
 508+ 707B 26 70                        dw      QERROR                  // ?error
 509+ 707D 40 69                        dw      EXIT                    // ;
 510+ 707F
 511+ 707F              //  ______________________________________________________________________
 512+ 707F              //
 513+ 707F              // ?csp       --
 514+ 707F              // raise msg #20 if surrent SP in not what previously saved in CSP.
 515+ 707F              // Compiler relies on that for  syntax checking of structures
 516+ 707F                              Colon_Def QCSP, "?CSP", is_normal
 516+ 707F             >                New_Def  QCSP, "?CSP", Enter_Ptr, is_normal ; ok
 516+ 707F             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 516+ 707F             >
 516+ 707F             >                // dummy db directives used to calculate length of namec
 516+ 707F 3F 43 53 50 >                db      "?CSP"
 516+ 7083             >len_NFA         defl    $ - temp_NFA
 516+ 7083             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 516+ 707F             >
 516+ 707F 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 516+ 7080 3F 43 53 50 >                db      "?CSP"               // name string in 7-bit ascii, but
 516+ 7084             >                org     $-1                 // alter last byte of Name just above to set
 516+ 7083 D0          >                db      {b $} | END_BIT     // msb as name end
 516+ 7084             >
 516+ 7084 69 70       >                dw      last_NFA            // Link to previous definition Name
 516+ 7086             >QCSP:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 516+ 7086 CD D3 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 516+ 7089             >
 516+ 7089             >
 516+ 7089             >                endif           ; ok        // for other definitions it "points" the correct handler
 516+ 7089             >                // Use of "; ok" to suppress "warning[fwdref]"
 516+ 7089             >
 516+ 7089             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 517+ 7089 16 69                        dw      SPFETCH                 // sp@
 518+ 708B DA 6D 00 6B                  dw      CSP, FETCH              // csp @
 519+ 708F A4 6E                        dw      SUBTRACT                // -
 520+ 7091 A5 63 14 00                  dw      LIT, 20                 // 20  ( bad definition end )
 521+ 7095 26 70                        dw      QERROR                  // ?error
 522+ 7097 40 69                        dw      EXIT                    // ;
 523+ 7099
 524+ 7099              //  ______________________________________________________________________
 525+ 7099              //
 526+ 7099              // ?loading      --
 527+ 7099              // raise msg #22 if not loading
 528+ 7099                              Colon_Def QLOADING, "?LOADING", is_normal
 528+ 7099             >                New_Def  QLOADING, "?LOADING", Enter_Ptr, is_normal ; ok
 528+ 7099             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 528+ 7099             >
 528+ 7099             >                // dummy db directives used to calculate length of namec
 528+ 7099 3F 4C 4F 41 >                db      "?LOADING"
 528+ 709D 44 49 4E 47 >
 528+ 70A1             >len_NFA         defl    $ - temp_NFA
 528+ 70A1             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 528+ 7099             >
 528+ 7099 88          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 528+ 709A 3F 4C 4F 41 >                db      "?LOADING"               // name string in 7-bit ascii, but
 528+ 709E 44 49 4E 47 >
 528+ 70A2             >                org     $-1                 // alter last byte of Name just above to set
 528+ 70A1 C7          >                db      {b $} | END_BIT     // msb as name end
 528+ 70A2             >
 528+ 70A2 7F 70       >                dw      last_NFA            // Link to previous definition Name
 528+ 70A4             >QLOADING:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 528+ 70A4 CD D3 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 528+ 70A7             >
 528+ 70A7             >
 528+ 70A7             >                endif           ; ok        // for other definitions it "points" the correct handler
 528+ 70A7             >                // Use of "; ok" to suppress "warning[fwdref]"
 528+ 70A7             >
 528+ 70A7             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 529+ 70A7 5E 6D 00 6B                  dw      BLK, FETCH              // blk @
 530+ 70AB 71 69                        dw      ZEQUAL                  // 0=
 531+ 70AD A5 63 16 00                  dw      LIT, 22                 // 22  ( aren't loading now )
 532+ 70B1 26 70                        dw      QERROR                  // ?error
 533+ 70B3 40 69                        dw      EXIT                    // ;
 534+ 70B5
 535+ 70B5              //  ______________________________________________________________________
 536+ 70B5              //
 537+ 70B5              // compile      --
 538+ 70B5              // compiles the following word
 539+ 70B5                              Colon_Def COMPILE, "COMPILE", is_normal
 539+ 70B5             >                New_Def  COMPILE, "COMPILE", Enter_Ptr, is_normal ; ok
 539+ 70B5             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 539+ 70B5             >
 539+ 70B5             >                // dummy db directives used to calculate length of namec
 539+ 70B5 43 4F 4D 50 >                db      "COMPILE"
 539+ 70B9 49 4C 45    >
 539+ 70BC             >len_NFA         defl    $ - temp_NFA
 539+ 70BC             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 539+ 70B5             >
 539+ 70B5 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 539+ 70B6 43 4F 4D 50 >                db      "COMPILE"               // name string in 7-bit ascii, but
 539+ 70BA 49 4C 45    >
 539+ 70BD             >                org     $-1                 // alter last byte of Name just above to set
 539+ 70BC C5          >                db      {b $} | END_BIT     // msb as name end
 539+ 70BD             >
 539+ 70BD 99 70       >                dw      last_NFA            // Link to previous definition Name
 539+ 70BF             >COMPILE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 539+ 70BF CD D3 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 539+ 70C2             >
 539+ 70C2             >
 539+ 70C2             >                endif           ; ok        // for other definitions it "points" the correct handler
 539+ 70C2             >                // Use of "; ok" to suppress "warning[fwdref]"
 539+ 70C2             >
 539+ 70C2             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 540+ 70C2 41 70                        dw      QCOMP                   // ?comp
 541+ 70C4 5B 69                        dw      R_TO                    // r>
 542+ 70C6 77 6A EC 69                  dw      DUP, CELL_PLUS          // dup, cell+
 543+ 70CA 4D 69                        dw      TO_R                    // >r
 544+ 70CC 00 6B 72 6E                  dw      FETCH, COMMA            // @ ,
 545+ 70D0 40 69                        dw      EXIT                    // ;
 546+ 70D2
 547+ 70D2              //  ______________________________________________________________________
 548+ 70D2              //
 549+ 70D2              // compile,     --
 550+ 70D2              // compiles the following word
 551+ 70D2                              Colon_Def COMPILE_XT, "COMPILE,", is_normal
 551+ 70D2             >                New_Def  COMPILE_XT, "COMPILE,", Enter_Ptr, is_normal ; ok
 551+ 70D2             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 551+ 70D2             >
 551+ 70D2             >                // dummy db directives used to calculate length of namec
 551+ 70D2 43 4F 4D 50 >                db      "COMPILE,"
 551+ 70D6 49 4C 45 2C >
 551+ 70DA             >len_NFA         defl    $ - temp_NFA
 551+ 70DA             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 551+ 70D2             >
 551+ 70D2 88          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 551+ 70D3 43 4F 4D 50 >                db      "COMPILE,"               // name string in 7-bit ascii, but
 551+ 70D7 49 4C 45 2C >
 551+ 70DB             >                org     $-1                 // alter last byte of Name just above to set
 551+ 70DA AC          >                db      {b $} | END_BIT     // msb as name end
 551+ 70DB             >
 551+ 70DB B5 70       >                dw      last_NFA            // Link to previous definition Name
 551+ 70DD             >COMPILE_XT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 551+ 70DD CD D3 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 551+ 70E0             >
 551+ 70E0             >
 551+ 70E0             >                endif           ; ok        // for other definitions it "points" the correct handler
 551+ 70E0             >                // Use of "; ok" to suppress "warning[fwdref]"
 551+ 70E0             >
 551+ 70E0             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 552+ 70E0 41 70                        dw      QCOMP                   // ?comp
 553+ 70E2 72 6E                        dw      COMMA                   // ,
 554+ 70E4 40 69                        dw      EXIT                    // ;
 555+ 70E6
 556+ 70E6              //  ______________________________________________________________________
 557+ 70E6              //
 558+ 70E6              // [            --
 559+ 70E6              // stop compilation
 560+ 70E6                              Colon_Def SQUARED_OPEN, "[", is_immediate
 560+ 70E6             >                New_Def  SQUARED_OPEN, "[", Enter_Ptr, is_immediate ; ok
 560+ 70E6             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 560+ 70E6             >
 560+ 70E6             >                // dummy db directives used to calculate length of namec
 560+ 70E6 5B          >                db      "["
 560+ 70E7             >len_NFA         defl    $ - temp_NFA
 560+ 70E7             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 560+ 70E6             >
 560+ 70E6 C1          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 560+ 70E7 5B          >                db      "["               // name string in 7-bit ascii, but
 560+ 70E8             >                org     $-1                 // alter last byte of Name just above to set
 560+ 70E7 DB          >                db      {b $} | END_BIT     // msb as name end
 560+ 70E8             >
 560+ 70E8 D2 70       >                dw      last_NFA            // Link to previous definition Name
 560+ 70EA             >SQUARED_OPEN:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 560+ 70EA CD D3 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 560+ 70ED             >
 560+ 70ED             >
 560+ 70ED             >                endif           ; ok        // for other definitions it "points" the correct handler
 560+ 70ED             >                // Use of "; ok" to suppress "warning[fwdref]"
 560+ 70ED             >
 560+ 70ED             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 561+ 70ED 48 6C                        dw      ZERO                    // 0
 562+ 70EF B1 6D 0C 6B                  dw      STATE, STORE            // state !
 563+ 70F3 40 69                        dw      EXIT                    // ; immediate
 564+ 70F5
 565+ 70F5              //  ______________________________________________________________________
 566+ 70F5              //
 567+ 70F5              // ]            --
 568+ 70F5              // start compilation
 569+ 70F5                              Colon_Def SQUARED_CLOSE, "]", is_normal
 569+ 70F5             >                New_Def  SQUARED_CLOSE, "]", Enter_Ptr, is_normal ; ok
 569+ 70F5             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 569+ 70F5             >
 569+ 70F5             >                // dummy db directives used to calculate length of namec
 569+ 70F5 5D          >                db      "]"
 569+ 70F6             >len_NFA         defl    $ - temp_NFA
 569+ 70F6             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 569+ 70F5             >
 569+ 70F5 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 569+ 70F6 5D          >                db      "]"               // name string in 7-bit ascii, but
 569+ 70F7             >                org     $-1                 // alter last byte of Name just above to set
 569+ 70F6 DD          >                db      {b $} | END_BIT     // msb as name end
 569+ 70F7             >
 569+ 70F7 E6 70       >                dw      last_NFA            // Link to previous definition Name
 569+ 70F9             >SQUARED_CLOSE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 569+ 70F9 CD D3 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 569+ 70FC             >
 569+ 70FC             >
 569+ 70FC             >                endif           ; ok        // for other definitions it "points" the correct handler
 569+ 70FC             >                // Use of "; ok" to suppress "warning[fwdref]"
 569+ 70FC             >
 569+ 70FC             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 570+ 70FC A5 63 C0 00                  dw      LIT, $C0                // 192
 571+ 7100 B1 6D 0C 6B                  dw      STATE, STORE            // state !
 572+ 7104 40 69                        dw      EXIT                    // ;
 573+ 7106
 574+ 7106              //  ______________________________________________________________________
 575+ 7106              //
 576+ 7106              // smudge       --
 577+ 7106              // toggle smudge bit of latest definition
 578+ 7106                              Colon_Def SMUDGE, "SMUDGE", is_normal
 578+ 7106             >                New_Def  SMUDGE, "SMUDGE", Enter_Ptr, is_normal ; ok
 578+ 7106             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 578+ 7106             >
 578+ 7106             >                // dummy db directives used to calculate length of namec
 578+ 7106 53 4D 55 44 >                db      "SMUDGE"
 578+ 710A 47 45       >
 578+ 710C             >len_NFA         defl    $ - temp_NFA
 578+ 710C             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 578+ 7106             >
 578+ 7106 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 578+ 7107 53 4D 55 44 >                db      "SMUDGE"               // name string in 7-bit ascii, but
 578+ 710B 47 45       >
 578+ 710D             >                org     $-1                 // alter last byte of Name just above to set
 578+ 710C C5          >                db      {b $} | END_BIT     // msb as name end
 578+ 710D             >
 578+ 710D F5 70       >                dw      last_NFA            // Link to previous definition Name
 578+ 710F             >SMUDGE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 578+ 710F CD D3 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 578+ 7112             >
 578+ 7112             >
 578+ 7112             >                endif           ; ok        // for other definitions it "points" the correct handler
 578+ 7112             >                // Use of "; ok" to suppress "warning[fwdref]"
 578+ 7112             >
 578+ 7112             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 579+ 7112 94 6F                        dw      LATEST                  // latest
 580+ 7114 A5 63 20 00                  dw      LIT, SMUDGE_BIT         // 32
 581+ 7118 F5 6A                        dw      TOGGLE                  // toggle
 582+ 711A 40 69                        dw      EXIT                    // ;
 583+ 711C
 584+ 711C              //  ______________________________________________________________________
 585+ 711C              //
 586+ 711C              // immediate    --
 587+ 711C              // make immediate the latest definition
 588+ 711C                              Colon_Def IMMEDIATE, "IMMEDIATE", is_normal
 588+ 711C             >                New_Def  IMMEDIATE, "IMMEDIATE", Enter_Ptr, is_normal ; ok
 588+ 711C             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 588+ 711C             >
 588+ 711C             >                // dummy db directives used to calculate length of namec
 588+ 711C 49 4D 4D 45 >                db      "IMMEDIATE"
 588+ 7120 44 49 41 54 >
 588+ 7124 45          >
 588+ 7125             >len_NFA         defl    $ - temp_NFA
 588+ 7125             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 588+ 711C             >
 588+ 711C 89          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 588+ 711D 49 4D 4D 45 >                db      "IMMEDIATE"               // name string in 7-bit ascii, but
 588+ 7121 44 49 41 54 >
 588+ 7125 45          >
 588+ 7126             >                org     $-1                 // alter last byte of Name just above to set
 588+ 7125 C5          >                db      {b $} | END_BIT     // msb as name end
 588+ 7126             >
 588+ 7126 06 71       >                dw      last_NFA            // Link to previous definition Name
 588+ 7128             >IMMEDIATE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 588+ 7128 CD D3 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 588+ 712B             >
 588+ 712B             >
 588+ 712B             >                endif           ; ok        // for other definitions it "points" the correct handler
 588+ 712B             >                // Use of "; ok" to suppress "warning[fwdref]"
 588+ 712B             >
 588+ 712B             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 589+ 712B 94 6F                        dw      LATEST                  // latest
 590+ 712D A5 63 40 00                  dw      LIT, $40                // 64
 591+ 7131 F5 6A                        dw      TOGGLE                  // toggle
 592+ 7133 40 69                        dw      EXIT                    // ;
 593+ 7135
 594+ 7135              //  ______________________________________________________________________
 595+ 7135              //
 596+ 7135              // hex          --
 597+ 7135              // change numeration base
 598+ 7135                              Colon_Def HEX, "HEX", is_normal
 598+ 7135             >                New_Def  HEX, "HEX", Enter_Ptr, is_normal ; ok
 598+ 7135             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 598+ 7135             >
 598+ 7135             >                // dummy db directives used to calculate length of namec
 598+ 7135 48 45 58    >                db      "HEX"
 598+ 7138             >len_NFA         defl    $ - temp_NFA
 598+ 7138             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 598+ 7135             >
 598+ 7135 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 598+ 7136 48 45 58    >                db      "HEX"               // name string in 7-bit ascii, but
 598+ 7139             >                org     $-1                 // alter last byte of Name just above to set
 598+ 7138 D8          >                db      {b $} | END_BIT     // msb as name end
 598+ 7139             >
 598+ 7139 1C 71       >                dw      last_NFA            // Link to previous definition Name
 598+ 713B             >HEX:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 598+ 713B CD D3 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 598+ 713E             >
 598+ 713E             >
 598+ 713E             >                endif           ; ok        // for other definitions it "points" the correct handler
 598+ 713E             >                // Use of "; ok" to suppress "warning[fwdref]"
 598+ 713E             >
 598+ 713E             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 599+ 713E A5 63 10 00                  dw      LIT, 16                 // 16
 600+ 7142 BC 6D 0C 6B                  dw      BASE, STORE             // base !
 601+ 7146 40 69                        dw      EXIT                    // ;
 602+ 7148
 603+ 7148              //  ______________________________________________________________________
 604+ 7148              //
 605+ 7148              // decimal      --
 606+ 7148              // change numeration base
 607+ 7148                              Colon_Def DECIMAL, "DECIMAL", is_normal
 607+ 7148             >                New_Def  DECIMAL, "DECIMAL", Enter_Ptr, is_normal ; ok
 607+ 7148             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 607+ 7148             >
 607+ 7148             >                // dummy db directives used to calculate length of namec
 607+ 7148 44 45 43 49 >                db      "DECIMAL"
 607+ 714C 4D 41 4C    >
 607+ 714F             >len_NFA         defl    $ - temp_NFA
 607+ 714F             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 607+ 7148             >
 607+ 7148 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 607+ 7149 44 45 43 49 >                db      "DECIMAL"               // name string in 7-bit ascii, but
 607+ 714D 4D 41 4C    >
 607+ 7150             >                org     $-1                 // alter last byte of Name just above to set
 607+ 714F CC          >                db      {b $} | END_BIT     // msb as name end
 607+ 7150             >
 607+ 7150 35 71       >                dw      last_NFA            // Link to previous definition Name
 607+ 7152             >DECIMAL:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 607+ 7152 CD D3 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 607+ 7155             >
 607+ 7155             >
 607+ 7155             >                endif           ; ok        // for other definitions it "points" the correct handler
 607+ 7155             >                // Use of "; ok" to suppress "warning[fwdref]"
 607+ 7155             >
 607+ 7155             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 608+ 7155 A5 63 0A 00                  dw      LIT, 10                 // 10
 609+ 7159 BC 6D 0C 6B                  dw      BASE, STORE             // base !
 610+ 715D 40 69                        dw      EXIT                    // ;
 611+ 715F
 612+ 715F              //  ______________________________________________________________________
 613+ 715F              //
 614+ 715F              // (;code)       --
 615+ 715F              // patch to CFA to call/jump to the "following code"
 616+ 715F                              Colon_Def C_SEMICOLON_CODE, "(;CODE)", is_normal
 616+ 715F             >                New_Def  C_SEMICOLON_CODE, "(;CODE)", Enter_Ptr, is_normal ; ok
 616+ 715F             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 616+ 715F             >
 616+ 715F             >                // dummy db directives used to calculate length of namec
 616+ 715F 28 3B 43 4F >                db      "(;CODE)"
 616+ 7163 44 45 29    >
 616+ 7166             >len_NFA         defl    $ - temp_NFA
 616+ 7166             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 616+ 715F             >
 616+ 715F 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 616+ 7160 28 3B 43 4F >                db      "(;CODE)"               // name string in 7-bit ascii, but
 616+ 7164 44 45 29    >
 616+ 7167             >                org     $-1                 // alter last byte of Name just above to set
 616+ 7166 A9          >                db      {b $} | END_BIT     // msb as name end
 616+ 7167             >
 616+ 7167 48 71       >                dw      last_NFA            // Link to previous definition Name
 616+ 7169             >C_SEMICOLON_CODE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 616+ 7169 CD D3 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 616+ 716C             >
 616+ 716C             >
 616+ 716C             >                endif           ; ok        // for other definitions it "points" the correct handler
 616+ 716C             >                // Use of "; ok" to suppress "warning[fwdref]"
 616+ 716C             >
 616+ 716C             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 617+ 716C 5B 69                        dw      R_TO                    // r>       ( Return Stack has IP to caller's next cell )
 618+ 716E 94 6F                        dw      LATEST                  // latest   ( Word being defined in this moment )
 619+ 7170 DA 6F B6 6F                  dw      PFA, CFA                // pfa cfa  ( cfa of latest word )
 620+ 7174
 621+ 7174 A5 63 CD 00                  dw      LIT, $CD                // $CD      ( At Latest CFA put "call" op-code )
 622+ 7178 3C 6A 26 6B                  dw      OVER, CSTORE            // over c!  ( why can't use comma? because CFA was already ALLOTted by create? )
 623+ 717C CA 69                        dw      ONE_PLUS                // 1+       ( At Latest CFA+1 put address for call. )
 624+ 717E
 625+ 717E 0C 6B                        dw      STORE                   // !
 626+ 7180 40 69                        dw      EXIT                    // ;
 627+ 7182
 628+ 7182              //  ______________________________________________________________________
 629+ 7182              //
 630+ 7182              // ;code        --
 631+ 7182                              Colon_Def SEMICOLON_CODE, ";CODE", is_immediate
 631+ 7182             >                New_Def  SEMICOLON_CODE, ";CODE", Enter_Ptr, is_immediate ; ok
 631+ 7182             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 631+ 7182             >
 631+ 7182             >                // dummy db directives used to calculate length of namec
 631+ 7182 3B 43 4F 44 >                db      ";CODE"
 631+ 7186 45          >
 631+ 7187             >len_NFA         defl    $ - temp_NFA
 631+ 7187             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 631+ 7182             >
 631+ 7182 C5          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 631+ 7183 3B 43 4F 44 >                db      ";CODE"               // name string in 7-bit ascii, but
 631+ 7187 45          >
 631+ 7188             >                org     $-1                 // alter last byte of Name just above to set
 631+ 7187 C5          >                db      {b $} | END_BIT     // msb as name end
 631+ 7188             >
 631+ 7188 5F 71       >                dw      last_NFA            // Link to previous definition Name
 631+ 718A             >SEMICOLON_CODE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 631+ 718A CD D3 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 631+ 718D             >
 631+ 718D             >
 631+ 718D             >                endif           ; ok        // for other definitions it "points" the correct handler
 631+ 718D             >                // Use of "; ok" to suppress "warning[fwdref]"
 631+ 718D             >
 631+ 718D             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 632+ 718D 86 70                        dw      QCSP                    // ?csp
 633+ 718F BF 70                        dw      COMPILE                 // compile
 634+ 7191 69 71                        dw      C_SEMICOLON_CODE        // (;code)
 635+ 7193 EA 70                        dw      SQUARED_OPEN            // [
 636+ 7195 F6 6B                        dw      NOOP                    // noop () can be patched later to ASSEMBLER... )
 637+ 7197 40 69                        dw      EXIT                    // ; immediate
 638+ 7199
 639+ 7199              //  ______________________________________________________________________
 640+ 7199              //
 641+ 7199              // <builds      --
 642+ 7199                              Colon_Def CBUILDS, "<BUILDS", is_normal
 642+ 7199             >                New_Def  CBUILDS, "<BUILDS", Enter_Ptr, is_normal ; ok
 642+ 7199             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 642+ 7199             >
 642+ 7199             >                // dummy db directives used to calculate length of namec
 642+ 7199 3C 42 55 49 >                db      "<BUILDS"
 642+ 719D 4C 44 53    >
 642+ 71A0             >len_NFA         defl    $ - temp_NFA
 642+ 71A0             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 642+ 7199             >
 642+ 7199 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 642+ 719A 3C 42 55 49 >                db      "<BUILDS"               // name string in 7-bit ascii, but
 642+ 719E 4C 44 53    >
 642+ 71A1             >                org     $-1                 // alter last byte of Name just above to set
 642+ 71A0 D3          >                db      {b $} | END_BIT     // msb as name end
 642+ 71A1             >
 642+ 71A1 82 71       >                dw      last_NFA            // Link to previous definition Name
 642+ 71A3             >CBUILDS:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 642+ 71A3 CD D3 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 642+ 71A6             >
 642+ 71A6             >
 642+ 71A6             >                endif           ; ok        // for other definitions it "points" the correct handler
 642+ 71A6             >                // Use of "; ok" to suppress "warning[fwdref]"
 642+ 71A6             >
 642+ 71A6             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 643+ 71A6 48 6C                        dw      ZERO                    // 0
 644+ 71A8 03 6C                        dw      CONSTANT                // constant
 645+ 71AA 40 69                        dw      EXIT                    // ;
 646+ 71AC
 647+ 71AC              //  ______________________________________________________________________
 648+ 71AC              //
 649+ 71AC              // recurse      --
 650+ 71AC              //              Colon_Def RECURSE, "RECURSE", is_immediate
 651+ 71AC              //              dw      QCOMP                   // ?comp
 652+ 71AC              //              dw      LATEST                  // latest
 653+ 71AC              //              dw      PFA, CFA                // pfa cfa
 654+ 71AC              //              dw      COMMA                   // ,
 655+ 71AC              //              dw      EXIT                    // ; immediate
 656+ 71AC
 657+ 71AC              //  ______________________________________________________________________
 658+ 71AC              //
 659+ 71AC              // does>     --
 660+ 71AC                              Colon_Def DOES_TO, "DOES>", is_normal
 660+ 71AC             >                New_Def  DOES_TO, "DOES>", Enter_Ptr, is_normal ; ok
 660+ 71AC             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 660+ 71AC             >
 660+ 71AC             >                // dummy db directives used to calculate length of namec
 660+ 71AC 44 4F 45 53 >                db      "DOES>"
 660+ 71B0 3E          >
 660+ 71B1             >len_NFA         defl    $ - temp_NFA
 660+ 71B1             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 660+ 71AC             >
 660+ 71AC 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 660+ 71AD 44 4F 45 53 >                db      "DOES>"               // name string in 7-bit ascii, but
 660+ 71B1 3E          >
 660+ 71B2             >                org     $-1                 // alter last byte of Name just above to set
 660+ 71B1 BE          >                db      {b $} | END_BIT     // msb as name end
 660+ 71B2             >
 660+ 71B2 99 71       >                dw      last_NFA            // Link to previous definition Name
 660+ 71B4             >DOES_TO:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 660+ 71B4 CD D3 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 660+ 71B7             >
 660+ 71B7             >
 660+ 71B7             >                endif           ; ok        // for other definitions it "points" the correct handler
 660+ 71B7             >                // Use of "; ok" to suppress "warning[fwdref]"
 660+ 71B7             >
 660+ 71B7             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 661+ 71B7 5B 69                        dw      R_TO                    // r>
 662+ 71B9 94 6F                        dw      LATEST                  // latest
 663+ 71BB DA 6F                        dw      PFA                     // pfa
 664+ 71BD 0C 6B                        dw      STORE                   // !
 665+ 71BF 69 71                        dw      C_SEMICOLON_CODE        // ;code
 666+ 71C1              Does_Ptr:
 667+ 71C1                              // via call coded in CFA
 668+ 71C1 EB                           ex      de, hl //**
 669+ 71C2                              // *** ldhlrp
 670+ 71C2 2B                           dec     hl                  // push on Return-Stack current Instruction-Pointer
 671+ 71C3 70                           ld      (hl), b
 672+ 71C4 2B                           dec     hl
 673+ 71C5 71                           ld      (hl), c
 674+ 71C6                              // *** ldrphl
 675+ 71C6 EB                           ex      de, hl //**
 676+ 71C7 E1                           pop     hl                  // CFA has a call to this, so PFA -> IP
 677+ 71C8
 678+ 71C8 4E                           ld      c, (hl)
 679+ 71C9 23                           inc     hl
 680+ 71CA 46                           ld      b, (hl)
 681+ 71CB 23                           inc     hl
 682+ 71CC
 683+ 71CC                              psh1
 683+ 71CC E5          >                push    hl
 683+ 71CD DD E9       >                jp      (ix)
 684+ 71CF                              // SMUDGE !
 685+ 71CF
 686+ 71CF              //  ______________________________________________________________________
 687+ 71CF              //
 688+ 71CF              // count        a -- a2 n
 689+ 71CF              // expects a counted string at address a, returns string address and counter
 690+ 71CF                              New_Def COUNT, "COUNT", is_code, is_normal
 690+ 71CF             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 690+ 71CF             >
 690+ 71CF             >                // dummy db directives used to calculate length of namec
 690+ 71CF 43 4F 55 4E >                db      "COUNT"
 690+ 71D3 54          >
 690+ 71D4             >len_NFA         defl    $ - temp_NFA
 690+ 71D4             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 690+ 71CF             >
 690+ 71CF 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 690+ 71D0 43 4F 55 4E >                db      "COUNT"               // name string in 7-bit ascii, but
 690+ 71D4 54          >
 690+ 71D5             >                org     $-1                 // alter last byte of Name just above to set
 690+ 71D4 D4          >                db      {b $} | END_BIT     // msb as name end
 690+ 71D5             >
 690+ 71D5 AC 71       >                dw      last_NFA            // Link to previous definition Name
 690+ 71D7             >COUNT:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 690+ 71D7 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 690+ 71D7 ~           >
 690+ 71D7 ~           >
 690+ 71D7             >                endif           ; ok        // for other definitions it "points" the correct handler
 690+ 71D7             >                // Use of "; ok" to suppress "warning[fwdref]"
 690+ 71D7             >
 690+ 71D7             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 691+ 71D7 D9                           exx
 692+ 71D8 E1                           pop     hl
 693+ 71D9 5E                           ld      e, (hl)
 694+ 71DA 16 00                        ld      d, 0
 695+ 71DC 23                           inc     hl
 696+ 71DD              Count_Here:
 697+ 71DD E5                           push    hl
 698+ 71DE D5                           push    de
 699+ 71DF D9                           exx
 700+ 71E0                              next
 700+ 71E0 DD E9       >                jp      (ix)
 701+ 71E2              //                pop     hl
 702+ 71E2              //                ld      a, (hl)
 703+ 71E2              //                inc     hl
 704+ 71E2              //                push    hl
 705+ 71E2              //                ld      h, 0
 706+ 71E2              //                ld      l, a
 707+ 71E2              //                push    hl
 708+ 71E2              //                next
 709+ 71E2
 710+ 71E2              //  ______________________________________________________________________
 711+ 71E2              //
 712+ 71E2              // bounds       a n -- a+n n
 713+ 71E2              // given an address and a length ( a n ) calculate the bound addresses
 714+ 71E2              // suitable for DO-LOOP
 715+ 71E2                              New_Def BOUNDS, "BOUNDS", is_code, is_normal
 715+ 71E2             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 715+ 71E2             >
 715+ 71E2             >                // dummy db directives used to calculate length of namec
 715+ 71E2 42 4F 55 4E >                db      "BOUNDS"
 715+ 71E6 44 53       >
 715+ 71E8             >len_NFA         defl    $ - temp_NFA
 715+ 71E8             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 715+ 71E2             >
 715+ 71E2 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 715+ 71E3 42 4F 55 4E >                db      "BOUNDS"               // name string in 7-bit ascii, but
 715+ 71E7 44 53       >
 715+ 71E9             >                org     $-1                 // alter last byte of Name just above to set
 715+ 71E8 D3          >                db      {b $} | END_BIT     // msb as name end
 715+ 71E9             >
 715+ 71E9 CF 71       >                dw      last_NFA            // Link to previous definition Name
 715+ 71EB             >BOUNDS:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 715+ 71EB ~           >                call    runcode ; ok        // for primitive definitions  actual code
 715+ 71EB ~           >
 715+ 71EB ~           >
 715+ 71EB             >                endif           ; ok        // for other definitions it "points" the correct handler
 715+ 71EB             >                // Use of "; ok" to suppress "warning[fwdref]"
 715+ 71EB             >
 715+ 71EB             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 716+ 71EB D9                           exx
 717+ 71EC E1                           pop     hl
 718+ 71ED D1                           pop     de
 719+ 71EE 19                           add     hl, de
 720+ 71EF 18 EC                        jr      Count_Here
 721+ 71F1                              // push    hl
 722+ 71F1                              // push    de
 723+ 71F1                              // exx
 724+ 71F1                              // next
 725+ 71F1
 726+ 71F1              //  ______________________________________________________________________
 727+ 71F1              //
 728+ 71F1              // leave        --
 729+ 71F1              // Compile (leave) to leave current LOOP and jump just after it
 730+ 71F1                              Colon_Def LEAVE, "LEAVE", is_immediate
 730+ 71F1             >                New_Def  LEAVE, "LEAVE", Enter_Ptr, is_immediate ; ok
 730+ 71F1             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 730+ 71F1             >
 730+ 71F1             >                // dummy db directives used to calculate length of namec
 730+ 71F1 4C 45 41 56 >                db      "LEAVE"
 730+ 71F5 45          >
 730+ 71F6             >len_NFA         defl    $ - temp_NFA
 730+ 71F6             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 730+ 71F1             >
 730+ 71F1 C5          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 730+ 71F2 4C 45 41 56 >                db      "LEAVE"               // name string in 7-bit ascii, but
 730+ 71F6 45          >
 730+ 71F7             >                org     $-1                 // alter last byte of Name just above to set
 730+ 71F6 C5          >                db      {b $} | END_BIT     // msb as name end
 730+ 71F7             >
 730+ 71F7 E2 71       >                dw      last_NFA            // Link to previous definition Name
 730+ 71F9             >LEAVE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 730+ 71F9 CD D3 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 730+ 71FC             >
 730+ 71FC             >
 730+ 71FC             >                endif           ; ok        // for other definitions it "points" the correct handler
 730+ 71FC             >                // Use of "; ok" to suppress "warning[fwdref]"
 730+ 71FC             >
 730+ 71FC             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 731+ 71FC BF 70 30 64                  dw      COMPILE, C_LEAVE       // compile (leave)     \ unloop and branch
 732+ 7200 54 6E 4D 69                  dw      HERE, TO_R, ZERO, COMMA // here >r 0 ,
 732+ 7204 48 6C 72 6E
 733+ 7208 48 6C 48 6C                  dw      ZERO, ZERO
 734+ 720C 16 69 77 6A                  dw      SPFETCH, DUP
 735+ 7210 EC 69 EC 69                  dw      CELL_PLUS, CELL_PLUS
 736+ 7214 5E 6A                        dw      TUCK
 737+ 7216 DA 6D 00 6B                  dw      CSP, FETCH
 738+ 721A 6C 6A A4 6E                  dw      SWAP, SUBTRACT
 739+ 721E 49 68                        dw      CMOVE
 740+ 7220 DA 6D 00 6B                  dw      CSP, FETCH, CELL_MINUS
 740+ 7224 F7 69
 741+ 7226 5B 69 3C 6A                  dw      R_TO, OVER, STORE
 741+ 722A 0C 6B
 742+ 722C F7 69 48 6C                  dw      CELL_MINUS, ZERO
 743+ 7230 6C 6A 0C 6B                  dw      SWAP, STORE
 744+ 7234 40 69                        dw      EXIT                    // ;
 745+ 7236
 746+ 7236              //  ______________________________________________________________________
 747+ 7236              //
 748+ 7236              // type         a n --
 749+ 7236              // Sends to current output channel n characters starting at address a.
 750+ 7236                              Colon_Def TYPE, "TYPE", is_normal
 750+ 7236             >                New_Def  TYPE, "TYPE", Enter_Ptr, is_normal ; ok
 750+ 7236             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 750+ 7236             >
 750+ 7236             >                // dummy db directives used to calculate length of namec
 750+ 7236 54 59 50 45 >                db      "TYPE"
 750+ 723A             >len_NFA         defl    $ - temp_NFA
 750+ 723A             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 750+ 7236             >
 750+ 7236 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 750+ 7237 54 59 50 45 >                db      "TYPE"               // name string in 7-bit ascii, but
 750+ 723B             >                org     $-1                 // alter last byte of Name just above to set
 750+ 723A C5          >                db      {b $} | END_BIT     // msb as name end
 750+ 723B             >
 750+ 723B F1 71       >                dw      last_NFA            // Link to previous definition Name
 750+ 723D             >TYPE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 750+ 723D CD D3 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 750+ 7240             >
 750+ 7240             >
 750+ 7240             >                endif           ; ok        // for other definitions it "points" the correct handler
 750+ 7240             >                // Use of "; ok" to suppress "warning[fwdref]"
 750+ 7240             >
 750+ 7240             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 751+ 7240 EB 71                        dw      BOUNDS                  // bounds
 752+ 7242 42 64                        dw      C_Q_DO                  // ?do
 753+ 7244 0C 00                        dw      Type_Skip - $
 754+ 7246              Type_Loop:
 755+ 7246 77 64 1A 6B                  dw          I, CFETCH           //      i c@
 756+ 724A 3F 6F                        dw          EMIT                //      emit
 757+ 724C F9 63                        dw      C_LOOP                  // loop
 758+ 724E F8 FF                        dw      Type_Loop - $
 759+ 7250              Type_Skip:
 760+ 7250 40 69                        dw      EXIT                    // ;
 761+ 7252
 762+ 7252              //  ______________________________________________________________________
 763+ 7252              //
 764+ 7252              // -trailing    a n1 -- a n2
 765+ 7252              // Assumes that an n1 bytes-long string is stored at address a
 766+ 7252              // and the string contains a space delimited word,
 767+ 7252              // Finds n2 as the position of the first character after the word.
 768+ 7252                              Colon_Def LTRAILING, "-TRAILING", is_normal
 768+ 7252             >                New_Def  LTRAILING, "-TRAILING", Enter_Ptr, is_normal ; ok
 768+ 7252             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 768+ 7252             >
 768+ 7252             >                // dummy db directives used to calculate length of namec
 768+ 7252 2D 54 52 41 >                db      "-TRAILING"
 768+ 7256 49 4C 49 4E >
 768+ 725A 47          >
 768+ 725B             >len_NFA         defl    $ - temp_NFA
 768+ 725B             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 768+ 7252             >
 768+ 7252 89          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 768+ 7253 2D 54 52 41 >                db      "-TRAILING"               // name string in 7-bit ascii, but
 768+ 7257 49 4C 49 4E >
 768+ 725B 47          >
 768+ 725C             >                org     $-1                 // alter last byte of Name just above to set
 768+ 725B C7          >                db      {b $} | END_BIT     // msb as name end
 768+ 725C             >
 768+ 725C 36 72       >                dw      last_NFA            // Link to previous definition Name
 768+ 725E             >LTRAILING:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 768+ 725E CD D3 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 768+ 7261             >
 768+ 7261             >
 768+ 7261             >                endif           ; ok        // for other definitions it "points" the correct handler
 768+ 7261             >                // Use of "; ok" to suppress "warning[fwdref]"
 768+ 7261             >
 768+ 7261             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 769+ 7261 77 6A 48 6C                  dw      DUP, ZERO               // dup 0
 770+ 7265                                                              // do
 771+ 7265 42 64                        dw      C_Q_DO
 772+ 7267 20 00                        dw      LTrailing_Leave - $
 773+ 7269              LTrailing_Loop:
 774+ 7269 D2 6A AB 69                  dw          TWO_DUP, PLUS       //      2dup +
 775+ 726D D4 69                        dw          ONE_SUBTRACT        //      1-
 776+ 726F 1A 6B                        dw          CFETCH              //      c@
 777+ 7271 77 6C A4 6E                  dw          BL, SUBTRACT        //      bl -
 778+ 7275                                                              //      if
 779+ 7275 1D 64                        dw          ZBRANCH
 780+ 7277 0A 00                        dw          LTrailing_Else - $
 781+ 7279 30 64                        dw              C_LEAVE         //          leave
 782+ 727B 0C 00                        dw              LTrailing_Leave - $
 783+ 727D 08 64                        dw          BRANCH              //      else
 784+ 727F 04 00                        dw          LTrailing_Endif - $
 785+ 7281              LTrailing_Else:
 786+ 7281 D4 69                        dw              ONE_SUBTRACT    //          1-
 787+ 7283              LTrailing_Endif:                                //      endif
 788+ 7283                                                              // loop
 789+ 7283 F9 63                        dw      C_LOOP
 790+ 7285 E4 FF                        dw      LTrailing_Loop - $
 791+ 7287              LTrailing_Leave:
 792+ 7287 40 69                        dw      EXIT                    // ;
 793+ 7289
 794+ 7289              //  ______________________________________________________________________
 795+ 7289              //
 796+ 7289              // accept       a n1 -- n2
 797+ 7289              // Accepts at most n1 characters from terminal and stores them at address a
 798+ 7289              // CR stops input. A 'nul' is added as trailer.
 799+ 7289              // n2 is the string length. n2 is kept in span user variable also.
 800+ 7289                              Colon_Def ACCEPT, "ACCEPT", is_normal
 800+ 7289             >                New_Def  ACCEPT, "ACCEPT", Enter_Ptr, is_normal ; ok
 800+ 7289             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 800+ 7289             >
 800+ 7289             >                // dummy db directives used to calculate length of namec
 800+ 7289 41 43 43 45 >                db      "ACCEPT"
 800+ 728D 50 54       >
 800+ 728F             >len_NFA         defl    $ - temp_NFA
 800+ 728F             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 800+ 7289             >
 800+ 7289 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 800+ 728A 41 43 43 45 >                db      "ACCEPT"               // name string in 7-bit ascii, but
 800+ 728E 50 54       >
 800+ 7290             >                org     $-1                 // alter last byte of Name just above to set
 800+ 728F D4          >                db      {b $} | END_BIT     // msb as name end
 800+ 7290             >
 800+ 7290 52 72       >                dw      last_NFA            // Link to previous definition Name
 800+ 7292             >ACCEPT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 800+ 7292 CD D3 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 800+ 7295             >
 800+ 7295             >
 800+ 7295             >                endif           ; ok        // for other definitions it "points" the correct handler
 800+ 7295             >                // Use of "; ok" to suppress "warning[fwdref]"
 800+ 7295             >
 800+ 7295             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 801+ 7295 3C 6A AB 69                  dw      OVER, PLUS, OVER        //                      ( a  n1+a  a )
 801+ 7299 3C 6A
 802+ 729B 48 6C 92 6A                  dw      ZERO, DASH_ROT          //                      ( a  0     a+n1  a )
 803+ 729F                                                              // do
 804+ 729F 42 64                        dw      C_Q_DO
 805+ 72A1 8C 00                        dw      Accept_Leave - $
 806+ 72A3              Accept_Loop:
 807+ 72A3 8F 66                        dw          CUR
 808+ 72A5 4A 6A DB 66                  dw          DROP, KEY           //      drop key        ( a  c )
 809+ 72A9 77 6A                        dw          DUP                 //      dup             ( a  c  c )
 810+ 72AB A5 63 0E 00                  dw          LIT, $0E            //      0E
 811+ 72AF B8 6C                        dw          PLUS_ORIGIN         //      +origin
 812+ 72B1 00 6B                        dw          FETCH               //      @               ( a  c  c  del )
 813+ 72B3 B2 6E                        dw          EQUALS              //      =               ( a  c  c==del )
 814+ 72B5                                                              //      if
 815+ 72B5 1D 64                        dw          ZBRANCH
 816+ 72B7 2C 00                        dw          Accept_Else_0 - $
 817+ 72B9 4A 6A                        dw              DROP            //          drop        ( a  )
 818+ 72BB 77 6A 77 64                  dw              DUP, I, EQUALS  //          dup i =     ( a  a==i )
 818+ 72BF B2 6E
 819+ 72C1 51 6C DE 68                  dw              ONE, AND_OP     //          1 and
 820+ 72C5 77 6A                        dw              DUP             //          dup         ( a  a==i  a==i )
 821+ 72C7 5B 69                        dw              R_TO            //          r> 2 - + r>
 822+ 72C9 02 6A AB 69                  dw              TWO_MINUS, PLUS //      ( decrement index by 1 or 2 )
 823+ 72CD 4D 69                        dw              TO_R            //
 824+ 72CF                                                              //          if
 825+ 72CF 1D 64                        dw              ZBRANCH
 826+ 72D1 0A 00                        dw              Accept_Else_1 - $
 827+ 72D3 A5 63 07 00                  dw                  LIT, 7      //              7       ( a  7 )
 828+ 72D7                                                              //          else
 829+ 72D7 08 64                        dw              BRANCH
 830+ 72D9 06 00                        dw              Accept_Endif_1 - $
 831+ 72DB              Accept_Else_1:
 832+ 72DB A5 63 08 00                  dw                  LIT, 8      //              8       ( a  8 )
 833+ 72DF              Accept_Endif_1:                                 //          endif
 834+ 72DF 08 64                        dw          BRANCH
 835+ 72E1 2E 00                        dw          Accept_Endif_0 - $
 836+ 72E3              Accept_Else_0:                                  //      else
 837+ 72E3 77 6A                        dw              DUP             //          dup         ( a  c  c )
 838+ 72E5 A5 63 0D 00                  dw              LIT, 13         //          13
 839+ 72E9 B2 6E                        dw              EQUALS          //          =           ( a  c  c==CR )
 840+ 72EB                                                              //          if
 841+ 72EB 1D 64                        dw              ZBRANCH
 842+ 72ED 0C 00                        dw              Accept_Else_2 - $
 843+ 72EF 4A 6A 77 6C                  dw                  DROP, BL    //              drop bl ( a  bl )
 844+ 72F3 48 6C                        dw                  ZERO        //              0       ( a  c  0 )
 845+ 72F5                                                              //          else
 846+ 72F5 08 64                        dw              BRANCH
 847+ 72F7 04 00                        dw              Accept_Endif_2 - $
 848+ 72F9              Accept_Else_2:
 849+ 72F9 77 6A                        dw                  DUP         //              dup     ( a  c  c )
 850+ 72FB                                                              //          endif
 851+ 72FB              Accept_Endif_2:
 852+ 72FB 77 64 26 6B                  dw              I, CSTORE       //          i           ( a  c )
 853+ 72FF 77 6A 77 6C                  dw              DUP, BL, LESS   //          dup bl <    ( a  c  c<BL )
 853+ 7303 D0 6E
 854+ 7305                                                              //          if
 855+ 7305 1D 64                        dw              ZBRANCH
 856+ 7307 08 00                        dw              Accept_Endif_3 - $
 857+ 7309 5B 69                        dw                  R_TO        //              r>
 858+ 730B D4 69                        dw                  ONE_SUBTRACT//              1-
 859+ 730D 4D 69                        dw                  TO_R        //              >r
 860+ 730F                                                              //          endif
 861+ 730F              Accept_Endif_3:
 862+ 730F              Accept_Endif_0:                                 //      endif
 863+ 730F 3F 6F                        dw          EMIT                //      emit
 864+ 7311 48 6C 77 64                  dw          ZERO, I, ONE_PLUS   //      0 i 1+ !
 864+ 7315 CA 69
 865+ 7317 0C 6B                        dw          STORE               //          ( zero pad )
 866+ 7319 77 64                        dw          I                   //      i
 867+ 731B 77 64 1A 6B                  dw          I, CFETCH, ZEQUAL   //      i 0= if
 867+ 731F 71 69
 868+ 7321 1D 64                        dw          ZBRANCH             //
 869+ 7323 06 00                        dw              Accept_Endif_4 - $
 870+ 7325 30 64                        dw                  C_LEAVE     //              leave
 871+ 7327 06 00                        dw                  Accept_Leave - $
 872+ 7329              Accept_Endif_4:                                 //      endif
 873+ 7329                                                              // loop
 874+ 7329 F9 63                        dw      C_LOOP
 875+ 732B 78 FF                        dw      Accept_Loop - $
 876+ 732D              Accept_Leave:
 877+ 732D 6C 6A A4 6E                  dw      SWAP, SUBTRACT          // swap -
 878+ 7331 CA 69                        dw      ONE_PLUS                // 1+
 879+ 7333 77 6A 32 6E                  dw      DUP, SPAN, STORE        // dup span !
 879+ 7337 0C 6B
 880+ 7339 40 69                        dw      EXIT                    // ;
 881+ 733B
 882+ 733B              //  ______________________________________________________________________
 883+ 733B              //
 884+ 733B              // expect      a n --
 885+ 733B              // Accepts at most n1 characters from terminal and stores them at address a
 886+ 733B              // CR stops input. A 'nul' is added as trailer.
 887+ 733B              // n2 is the string length. n2 is kept in span user variable also.
 888+ 733B              //              Colon_Def EXPECT, "EXPECT", is_normal
 889+ 733B              //              dw      ACCEPT, DROP            // accept drop
 890+ 733B              //              dw      EXIT                    // ;
 891+ 733B
 892+ 733B              //  ______________________________________________________________________
 893+ 733B              //
 894+ 733B              // query        --
 895+ 733B              // Accept at most 80 character from console. CR stops.
 896+ 733B              // Text is stored in TIB. Variable IN is zeroed.
 897+ 733B                              Colon_Def QUERY, "QUERY", is_normal
 897+ 733B             >                New_Def  QUERY, "QUERY", Enter_Ptr, is_normal ; ok
 897+ 733B             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 897+ 733B             >
 897+ 733B             >                // dummy db directives used to calculate length of namec
 897+ 733B 51 55 45 52 >                db      "QUERY"
 897+ 733F 59          >
 897+ 7340             >len_NFA         defl    $ - temp_NFA
 897+ 7340             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 897+ 733B             >
 897+ 733B 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 897+ 733C 51 55 45 52 >                db      "QUERY"               // name string in 7-bit ascii, but
 897+ 7340 59          >
 897+ 7341             >                org     $-1                 // alter last byte of Name just above to set
 897+ 7340 D9          >                db      {b $} | END_BIT     // msb as name end
 897+ 7341             >
 897+ 7341 89 72       >                dw      last_NFA            // Link to previous definition Name
 897+ 7343             >QUERY:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 897+ 7343 CD D3 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 897+ 7346             >
 897+ 7346             >
 897+ 7346             >                endif           ; ok        // for other definitions it "points" the correct handler
 897+ 7346             >                // Use of "; ok" to suppress "warning[fwdref]"
 897+ 7346             >
 897+ 7346             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 898+ 7346 E8 6C 00 6B                  dw      TIB, FETCH              // tib @
 899+ 734A A5 63 50 00                  dw      LIT, 80                 // 80
 900+ 734E 92 72 4A 6A                  dw      ACCEPT, DROP            // accept drop
 901+ 7352 48 6C 68 6D                  dw      ZERO, TO_IN, STORE      // 0 >in !
 901+ 7356 0C 6B
 902+ 7358 40 69                        dw      EXIT                    // ;
 903+ 735A
 904+ 735A              //  ______________________________________________________________________
 905+ 735A              //
 906+ 735A              // fill        a n c --
 907+ 735A              // If n > 0, fills n locations starting from address a with the value c.
 908+ 735A                              New_Def FILL, "FILL", is_code, is_normal
 908+ 735A             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 908+ 735A             >
 908+ 735A             >                // dummy db directives used to calculate length of namec
 908+ 735A 46 49 4C 4C >                db      "FILL"
 908+ 735E             >len_NFA         defl    $ - temp_NFA
 908+ 735E             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 908+ 735A             >
 908+ 735A 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 908+ 735B 46 49 4C 4C >                db      "FILL"               // name string in 7-bit ascii, but
 908+ 735F             >                org     $-1                 // alter last byte of Name just above to set
 908+ 735E CC          >                db      {b $} | END_BIT     // msb as name end
 908+ 735F             >
 908+ 735F 3B 73       >                dw      last_NFA            // Link to previous definition Name
 908+ 7361             >FILL:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 908+ 7361 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 908+ 7361 ~           >
 908+ 7361 ~           >
 908+ 7361             >                endif           ; ok        // for other definitions it "points" the correct handler
 908+ 7361             >                // Use of "; ok" to suppress "warning[fwdref]"
 908+ 7361             >
 908+ 7361             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 909+ 7361 D9                           exx
 910+ 7362 D1                           pop     de                  // de has character
 911+ 7363 C1                           pop     bc                  // bc has counter
 912+ 7364 E1                           pop     hl                  // hl has address, save Instruction Pointer
 913+ 7365              Fill_Loop:
 914+ 7365 78                               ld      a, b
 915+ 7366 B1                               or      c
 916+ 7367 28 05                        jr      z, Fill_While_End
 917+ 7369 73                               ld      (hl), e
 918+ 736A 0B                               dec     bc
 919+ 736B 23                               inc     hl
 920+ 736C 18 F7                        jr      Fill_Loop
 921+ 736E              Fill_While_End:
 922+ 736E D9                           exx
 923+ 736F                              next
 923+ 736F DD E9       >                jp      (ix)
 924+ 7371
 925+ 7371              //  ______________________________________________________________________
 926+ 7371              //
 927+ 7371              // erase        a n --
 928+ 7371              // If n > 0, fills n locations starting from address a with 'nul' characters.
 929+ 7371                              Colon_Def ERASE, "ERASE", is_normal
 929+ 7371             >                New_Def  ERASE, "ERASE", Enter_Ptr, is_normal ; ok
 929+ 7371             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 929+ 7371             >
 929+ 7371             >                // dummy db directives used to calculate length of namec
 929+ 7371 45 52 41 53 >                db      "ERASE"
 929+ 7375 45          >
 929+ 7376             >len_NFA         defl    $ - temp_NFA
 929+ 7376             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 929+ 7371             >
 929+ 7371 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 929+ 7372 45 52 41 53 >                db      "ERASE"               // name string in 7-bit ascii, but
 929+ 7376 45          >
 929+ 7377             >                org     $-1                 // alter last byte of Name just above to set
 929+ 7376 C5          >                db      {b $} | END_BIT     // msb as name end
 929+ 7377             >
 929+ 7377 5A 73       >                dw      last_NFA            // Link to previous definition Name
 929+ 7379             >ERASE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 929+ 7379 CD D3 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 929+ 737C             >
 929+ 737C             >
 929+ 737C             >                endif           ; ok        // for other definitions it "points" the correct handler
 929+ 737C             >                // Use of "; ok" to suppress "warning[fwdref]"
 929+ 737C             >
 929+ 737C             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 930+ 737C 48 6C 61 73                  dw      ZERO, FILL              // 0 fill
 931+ 7380 40 69                        dw      EXIT                    // ;
 932+ 7382
 933+ 7382              //  ______________________________________________________________________
 934+ 7382              //
 935+ 7382              // blank        a n --
 936+ 7382              // If n > 0, fills n locations starting from address a with 'nul' characters.
 937+ 7382                              Colon_Def BLANK, "BLANK", is_normal
 937+ 7382             >                New_Def  BLANK, "BLANK", Enter_Ptr, is_normal ; ok
 937+ 7382             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 937+ 7382             >
 937+ 7382             >                // dummy db directives used to calculate length of namec
 937+ 7382 42 4C 41 4E >                db      "BLANK"
 937+ 7386 4B          >
 937+ 7387             >len_NFA         defl    $ - temp_NFA
 937+ 7387             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 937+ 7382             >
 937+ 7382 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 937+ 7383 42 4C 41 4E >                db      "BLANK"               // name string in 7-bit ascii, but
 937+ 7387 4B          >
 937+ 7388             >                org     $-1                 // alter last byte of Name just above to set
 937+ 7387 CB          >                db      {b $} | END_BIT     // msb as name end
 937+ 7388             >
 937+ 7388 71 73       >                dw      last_NFA            // Link to previous definition Name
 937+ 738A             >BLANK:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 937+ 738A CD D3 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 937+ 738D             >
 937+ 738D             >
 937+ 738D             >                endif           ; ok        // for other definitions it "points" the correct handler
 937+ 738D             >                // Use of "; ok" to suppress "warning[fwdref]"
 937+ 738D             >
 937+ 738D             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 938+ 738D 77 6C 61 73                  dw      BL, FILL                // bl fill
 939+ 7391 40 69                        dw      EXIT                    // ;
 940+ 7393
 941+ 7393              //  ______________________________________________________________________
 942+ 7393              //
 943+ 7393              // hold         c --
 944+ 7393              // Used between <# and #> to insert a character c in numeric formatting.
 945+ 7393                              Colon_Def HOLD, "HOLD", is_normal
 945+ 7393             >                New_Def  HOLD, "HOLD", Enter_Ptr, is_normal ; ok
 945+ 7393             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 945+ 7393             >
 945+ 7393             >                // dummy db directives used to calculate length of namec
 945+ 7393 48 4F 4C 44 >                db      "HOLD"
 945+ 7397             >len_NFA         defl    $ - temp_NFA
 945+ 7397             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 945+ 7393             >
 945+ 7393 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 945+ 7394 48 4F 4C 44 >                db      "HOLD"               // name string in 7-bit ascii, but
 945+ 7398             >                org     $-1                 // alter last byte of Name just above to set
 945+ 7397 C4          >                db      {b $} | END_BIT     // msb as name end
 945+ 7398             >
 945+ 7398 82 73       >                dw      last_NFA            // Link to previous definition Name
 945+ 739A             >HOLD:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 945+ 739A CD D3 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 945+ 739D             >
 945+ 739D             >
 945+ 739D             >                endif           ; ok        // for other definitions it "points" the correct handler
 945+ 739D             >                // Use of "; ok" to suppress "warning[fwdref]"
 945+ 739D             >
 945+ 739D             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 946+ 739D 6D 6C                        dw      NEG_ONE                 // -1
 947+ 739F ED 6D DF 6A                  dw      HLD, PLUSSTORE          // hld +!
 948+ 73A3 ED 6D 00 6B                  dw      HLD, FETCH, CSTORE      // hld @ c!
 948+ 73A7 26 6B
 949+ 73A9 40 69                        dw      EXIT                    // ;
 950+ 73AB
 951+ 73AB              //  ______________________________________________________________________
 952+ 73AB              //
 953+ 73AB              // pad         -- a
 954+ 73AB              // leaves the buffer text address. This is at a fixed distance over HERE.
 955+ 73AB                              Colon_Def PAD, "PAD", is_normal
 955+ 73AB             >                New_Def  PAD, "PAD", Enter_Ptr, is_normal ; ok
 955+ 73AB             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 955+ 73AB             >
 955+ 73AB             >                // dummy db directives used to calculate length of namec
 955+ 73AB 50 41 44    >                db      "PAD"
 955+ 73AE             >len_NFA         defl    $ - temp_NFA
 955+ 73AE             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 955+ 73AB             >
 955+ 73AB 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 955+ 73AC 50 41 44    >                db      "PAD"               // name string in 7-bit ascii, but
 955+ 73AF             >                org     $-1                 // alter last byte of Name just above to set
 955+ 73AE C4          >                db      {b $} | END_BIT     // msb as name end
 955+ 73AF             >
 955+ 73AF 93 73       >                dw      last_NFA            // Link to previous definition Name
 955+ 73B1             >PAD:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 955+ 73B1 CD D3 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 955+ 73B4             >
 955+ 73B4             >
 955+ 73B4             >                endif           ; ok        // for other definitions it "points" the correct handler
 955+ 73B4             >                // Use of "; ok" to suppress "warning[fwdref]"
 955+ 73B4             >
 955+ 73B4             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 956+ 73B4 54 6E                        dw      HERE                    // here
 957+ 73B6 A5 63 44 00                  dw      LIT, 68                 // 68
 958+ 73BA AB 69                        dw      PLUS                    // +
 959+ 73BC 40 69                        dw      EXIT                    // ;
 960+ 73BE
 961+ 73BE              //  ______________________________________________________________________
 962+ 73BE              //
 963+ 73BE              // word         c -- a
 964+ 73BE              // reads characters from input streams until it encouners a c delimiter.
 965+ 73BE              // Stores that packet so it starts from HERE
 966+ 73BE              // WORD leaves a counter as first byte and ends the packet with two spaces.
 967+ 73BE              // Other occurrences of c are ignored.
 968+ 73BE              // If BLK is zero, text is taken from terminal buffer TIB.
 969+ 73BE              // Otherwise text is taken from the disk-block given by BLK.
 970+ 73BE              // "in" variable is incremented of the number of character read.
 971+ 73BE              // The number of characters read is given by ENCLOSE.
 972+ 73BE                              Colon_Def WORD, "WORD", is_normal
 972+ 73BE             >                New_Def  WORD, "WORD", Enter_Ptr, is_normal ; ok
 972+ 73BE             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 972+ 73BE             >
 972+ 73BE             >                // dummy db directives used to calculate length of namec
 972+ 73BE 57 4F 52 44 >                db      "WORD"
 972+ 73C2             >len_NFA         defl    $ - temp_NFA
 972+ 73C2             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 972+ 73BE             >
 972+ 73BE 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 972+ 73BF 57 4F 52 44 >                db      "WORD"               // name string in 7-bit ascii, but
 972+ 73C3             >                org     $-1                 // alter last byte of Name just above to set
 972+ 73C2 C4          >                db      {b $} | END_BIT     // msb as name end
 972+ 73C3             >
 972+ 73C3 AB 73       >                dw      last_NFA            // Link to previous definition Name
 972+ 73C5             >WORD:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 972+ 73C5 CD D3 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 972+ 73C8             >
 972+ 73C8             >
 972+ 73C8             >                endif           ; ok        // for other definitions it "points" the correct handler
 972+ 73C8             >                // Use of "; ok" to suppress "warning[fwdref]"
 972+ 73C8             >
 972+ 73C8             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 973+ 73C8 5E 6D 00 6B                  dw      BLK, FETCH              // blk @
 974+ 73CC                                                              // if
 975+ 73CC 1D 64                        dw      ZBRANCH
 976+ 73CE 0C 00                        dw      Word_Else - $
 977+ 73D0 5E 6D 00 6B                  dw          BLK, FETCH          //      blk @
 978+ 73D4 6F 7D                        dw          BLOCK               //      block ( forward )
 979+ 73D6                                                              // else
 980+ 73D6 08 64                        dw      BRANCH
 981+ 73D8 06 00                        dw      Word_Endif - $
 982+ 73DA              Word_Else:
 983+ 73DA E8 6C 00 6B                  dw         TIB, FETCH           //      tib @
 984+ 73DE              Word_Endif:                                     // endif
 985+ 73DE 68 6D 00 6B                  dw      TO_IN, FETCH, PLUS      // >in @ +
 985+ 73E2 AB 69
 986+ 73E4 6C 6A 5A 65                  dw      SWAP, ENCLOSE           // swap enclose
 987+ 73E8 54 6E A5 63                  dw      HERE, LIT, 34, BLANK    // here 34 blank
 987+ 73EC 22 00 8A 73
 988+ 73F0 68 6D DF 6A                  dw      TO_IN, PLUSSTORE        // >in @ +
 989+ 73F4 3C 6A A4 6E                  dw      OVER, SUBTRACT, TO_R    // over - >r
 989+ 73F8 4D 69
 990+ 73FA 69 69 54 6E                  dw      R_OP, HERE, CSTORE      // r here c!
 990+ 73FE 26 6B
 991+ 7400 AB 69                        dw      PLUS                    // +
 992+ 7402 54 6E CA 69                  dw      HERE, ONE_PLUS, R_TO    // here 1+ r>
 992+ 7406 5B 69
 993+ 7408 49 68                        dw      CMOVE                   // cmove
 994+ 740A 54 6E                        dw      HERE                    // here
 995+ 740C 40 69                        dw      EXIT                    // ;
 996+ 740E
 997+ 740E              //  ______________________________________________________________________
 998+ 740E              //
 999+ 740E              // (.")         --
1000+ 740E              // Direct procedure compiled by ." and  .(  It executes TYPE.
1001+ 740E                              Colon_Def C_DOT_QUOTE, '(.")', is_normal
1001+ 740E             >                New_Def  C_DOT_QUOTE, '(.")', Enter_Ptr, is_normal ; ok
1001+ 740E             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1001+ 740E             >
1001+ 740E             >                // dummy db directives used to calculate length of namec
1001+ 740E 28 2E 22 29 >                db      '(.")'
1001+ 7412             >len_NFA         defl    $ - temp_NFA
1001+ 7412             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1001+ 740E             >
1001+ 740E 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1001+ 740F 28 2E 22 29 >                db      '(.")'               // name string in 7-bit ascii, but
1001+ 7413             >                org     $-1                 // alter last byte of Name just above to set
1001+ 7412 A9          >                db      {b $} | END_BIT     // msb as name end
1001+ 7413             >
1001+ 7413 BE 73       >                dw      last_NFA            // Link to previous definition Name
1001+ 7415             >C_DOT_QUOTE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1001+ 7415 CD D3 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1001+ 7418             >
1001+ 7418             >
1001+ 7418             >                endif           ; ok        // for other definitions it "points" the correct handler
1001+ 7418             >                // Use of "; ok" to suppress "warning[fwdref]"
1001+ 7418             >
1001+ 7418             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1002+ 7418 69 69 D7 71                  dw      R_OP, COUNT             // r count
1003+ 741C 77 6A CA 69                  dw      DUP, ONE_PLUS           // dup 1+
1004+ 7420 5B 69 AB 69                  dw      R_TO, PLUS, TO_R        // r> + >r  ( advance IP )
1004+ 7424 4D 69
1005+ 7426 3D 72                        dw      TYPE                    // type
1006+ 7428 40 69                        dw      EXIT                    // ;
1007+ 742A
1008+ 742A              //  ______________________________________________________________________
1009+ 742A              //
1010+ 742A              // char         -- c
1011+ 742A              // get first character from next input word
1012+ 742A                              Colon_Def CHAR,  "CHAR", is_normal
1012+ 742A             >                New_Def  CHAR, "CHAR", Enter_Ptr, is_normal ; ok
1012+ 742A             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1012+ 742A             >
1012+ 742A             >                // dummy db directives used to calculate length of namec
1012+ 742A 43 48 41 52 >                db      "CHAR"
1012+ 742E             >len_NFA         defl    $ - temp_NFA
1012+ 742E             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1012+ 742A             >
1012+ 742A 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1012+ 742B 43 48 41 52 >                db      "CHAR"               // name string in 7-bit ascii, but
1012+ 742F             >                org     $-1                 // alter last byte of Name just above to set
1012+ 742E D2          >                db      {b $} | END_BIT     // msb as name end
1012+ 742F             >
1012+ 742F 0E 74       >                dw      last_NFA            // Link to previous definition Name
1012+ 7431             >CHAR:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1012+ 7431 CD D3 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1012+ 7434             >
1012+ 7434             >
1012+ 7434             >                endif           ; ok        // for other definitions it "points" the correct handler
1012+ 7434             >                // Use of "; ok" to suppress "warning[fwdref]"
1012+ 7434             >
1012+ 7434             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1013+ 7434 77 6C C5 73                  dw      BL, WORD                // bl word
1014+ 7438 CA 69 1A 6B                  dw      ONE_PLUS, CFETCH        // 1+ c@
1015+ 743C 40 69                        dw      EXIT                    // ;
1016+ 743E
1017+ 743E              //  ______________________________________________________________________
1018+ 743E              //
1019+ 743E              // ,"           --
1020+ 743E              // compiles a string terminated by " as a counted string from next input stream
1021+ 743E                              Colon_Def COMMA_QUOTE,  ',"', is_normal
1021+ 743E             >                New_Def  COMMA_QUOTE, ',"', Enter_Ptr, is_normal ; ok
1021+ 743E             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1021+ 743E             >
1021+ 743E             >                // dummy db directives used to calculate length of namec
1021+ 743E 2C 22       >                db      ',"'
1021+ 7440             >len_NFA         defl    $ - temp_NFA
1021+ 7440             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1021+ 743E             >
1021+ 743E 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1021+ 743F 2C 22       >                db      ',"'               // name string in 7-bit ascii, but
1021+ 7441             >                org     $-1                 // alter last byte of Name just above to set
1021+ 7440 A2          >                db      {b $} | END_BIT     // msb as name end
1021+ 7441             >
1021+ 7441 2A 74       >                dw      last_NFA            // Link to previous definition Name
1021+ 7443             >COMMA_QUOTE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1021+ 7443 CD D3 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1021+ 7446             >
1021+ 7446             >
1021+ 7446             >                endif           ; ok        // for other definitions it "points" the correct handler
1021+ 7446             >                // Use of "; ok" to suppress "warning[fwdref]"
1021+ 7446             >
1021+ 7446             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1022+ 7446 A5 63 22 00                  dw      LIT, DQUOTE_CHAR        // [char] "
1023+ 744A C5 73                        dw      WORD                    // word
1024+ 744C 1A 6B CA 69                  dw      CFETCH, ONE_PLUS        // c@ 1+
1025+ 7450 65 6E                        dw      ALLOT                   // allot
1026+ 7452 48 6C 84 6E                  dw      ZERO, CCOMMA            // 0 c,  ( nul-terminated string - useful anyway )
1027+ 7456 40 69                        dw      EXIT
1028+ 7458
1029+ 7458              //  ______________________________________________________________________
1030+ 7458              //
1031+ 7458              // .c           c --
1032+ 7458              // intermediate general purpose string builder, used by ." and .(
1033+ 7458                              Colon_Def DOT_C,  ".C", is_immediate
1033+ 7458             >                New_Def  DOT_C, ".C", Enter_Ptr, is_immediate ; ok
1033+ 7458             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1033+ 7458             >
1033+ 7458             >                // dummy db directives used to calculate length of namec
1033+ 7458 2E 43       >                db      ".C"
1033+ 745A             >len_NFA         defl    $ - temp_NFA
1033+ 745A             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1033+ 7458             >
1033+ 7458 C2          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
1033+ 7459 2E 43       >                db      ".C"               // name string in 7-bit ascii, but
1033+ 745B             >                org     $-1                 // alter last byte of Name just above to set
1033+ 745A C3          >                db      {b $} | END_BIT     // msb as name end
1033+ 745B             >
1033+ 745B 3E 74       >                dw      last_NFA            // Link to previous definition Name
1033+ 745D             >DOT_C:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1033+ 745D CD D3 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1033+ 7460             >
1033+ 7460             >
1033+ 7460             >                endif           ; ok        // for other definitions it "points" the correct handler
1033+ 7460             >                // Use of "; ok" to suppress "warning[fwdref]"
1033+ 7460             >
1033+ 7460             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1034+ 7460 B1 6D 00 6B                  dw      STATE, FETCH            // state @
1035+ 7464                                                              // if
1036+ 7464 1D 64                        dw      ZBRANCH
1037+ 7466 12 00                        dw      Dot_C_Else - $
1038+ 7468 BF 70 15 74                  dw          COMPILE, C_DOT_QUOTE //     compile (.")
1039+ 746C C5 73 1A 6B                  dw          WORD, CFETCH        //      word c@
1040+ 7470 CA 69 65 6E                  dw          ONE_PLUS, ALLOT     //      1+ allot
1041+ 7474                                                              // else
1042+ 7474 08 64                        dw      BRANCH
1043+ 7476 08 00                        dw      Dot_C_Endif - $
1044+ 7478              Dot_C_Else:
1045+ 7478 C5 73 D7 71                  dw          WORD, COUNT, TYPE   //      word count type
1045+ 747C 3D 72
1046+ 747E              Dot_C_Endif:                                    // endif
1047+ 747E 40 69                        dw      EXIT                    ;
1048+ 7480
1049+ 7480              //  ______________________________________________________________________
1050+ 7480              //
1051+ 7480              // ."           c --
1052+ 7480                              Colon_Def DOT_QUOTE,  '."', is_immediate
1052+ 7480             >                New_Def  DOT_QUOTE, '."', Enter_Ptr, is_immediate ; ok
1052+ 7480             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1052+ 7480             >
1052+ 7480             >                // dummy db directives used to calculate length of namec
1052+ 7480 2E 22       >                db      '."'
1052+ 7482             >len_NFA         defl    $ - temp_NFA
1052+ 7482             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1052+ 7480             >
1052+ 7480 C2          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
1052+ 7481 2E 22       >                db      '."'               // name string in 7-bit ascii, but
1052+ 7483             >                org     $-1                 // alter last byte of Name just above to set
1052+ 7482 A2          >                db      {b $} | END_BIT     // msb as name end
1052+ 7483             >
1052+ 7483 58 74       >                dw      last_NFA            // Link to previous definition Name
1052+ 7485             >DOT_QUOTE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1052+ 7485 CD D3 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1052+ 7488             >
1052+ 7488             >
1052+ 7488             >                endif           ; ok        // for other definitions it "points" the correct handler
1052+ 7488             >                // Use of "; ok" to suppress "warning[fwdref]"
1052+ 7488             >
1052+ 7488             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1053+ 7488 A5 63 22 00                  dw      LIT, DQUOTE_CHAR        // [char] "
1054+ 748C 5D 74                        dw      DOT_C                   // [compile] .c
1055+ 748E 40 69                        dw      EXIT                    // ; immediate
1056+ 7490
1057+ 7490              //  ______________________________________________________________________
1058+ 7490              //
1059+ 7490              // .(           c --
1060+ 7490                              Colon_Def DOT_BRACKET,  ".(", is_immediate
1060+ 7490             >                New_Def  DOT_BRACKET, ".(", Enter_Ptr, is_immediate ; ok
1060+ 7490             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1060+ 7490             >
1060+ 7490             >                // dummy db directives used to calculate length of namec
1060+ 7490 2E 28       >                db      ".("
1060+ 7492             >len_NFA         defl    $ - temp_NFA
1060+ 7492             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1060+ 7490             >
1060+ 7490 C2          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
1060+ 7491 2E 28       >                db      ".("               // name string in 7-bit ascii, but
1060+ 7493             >                org     $-1                 // alter last byte of Name just above to set
1060+ 7492 A8          >                db      {b $} | END_BIT     // msb as name end
1060+ 7493             >
1060+ 7493 80 74       >                dw      last_NFA            // Link to previous definition Name
1060+ 7495             >DOT_BRACKET:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1060+ 7495 CD D3 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1060+ 7498             >
1060+ 7498             >
1060+ 7498             >                endif           ; ok        // for other definitions it "points" the correct handler
1060+ 7498             >                // Use of "; ok" to suppress "warning[fwdref]"
1060+ 7498             >
1060+ 7498             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1061+ 7498 A5 63 29 00                  dw      LIT, ")"                // [char] )
1062+ 749C 5D 74                        dw      DOT_C                   // [compile] .c
1063+ 749E 40 69                        dw      EXIT                    // ; immediate
1064+ 74A0
1065+ 74A0              //  ______________________________________________________________________
1066+ 74A0              //
1067+ 74A0              // (sgn)        a -- a f
1068+ 74A0              // determines if char in addr a is a sign (+ or -), and in that case increments
1069+ 74A0              // a flag. Returns f as the sign, true for negative, false for positive.
1070+ 74A0              // called by NUMBER and (EXP)
1071+ 74A0                              Colon_Def CSGN,  "(SGN)", is_normal
1071+ 74A0             >                New_Def  CSGN, "(SGN)", Enter_Ptr, is_normal ; ok
1071+ 74A0             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1071+ 74A0             >
1071+ 74A0             >                // dummy db directives used to calculate length of namec
1071+ 74A0 28 53 47 4E >                db      "(SGN)"
1071+ 74A4 29          >
1071+ 74A5             >len_NFA         defl    $ - temp_NFA
1071+ 74A5             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1071+ 74A0             >
1071+ 74A0 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1071+ 74A1 28 53 47 4E >                db      "(SGN)"               // name string in 7-bit ascii, but
1071+ 74A5 29          >
1071+ 74A6             >                org     $-1                 // alter last byte of Name just above to set
1071+ 74A5 A9          >                db      {b $} | END_BIT     // msb as name end
1071+ 74A6             >
1071+ 74A6 90 74       >                dw      last_NFA            // Link to previous definition Name
1071+ 74A8             >CSGN:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1071+ 74A8 CD D3 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1071+ 74AB             >
1071+ 74AB             >
1071+ 74AB             >                endif           ; ok        // for other definitions it "points" the correct handler
1071+ 74AB             >                // Use of "; ok" to suppress "warning[fwdref]"
1071+ 74AB             >
1071+ 74AB             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1072+ 74AB 77 6A CA 69                  dw      DUP, ONE_PLUS, CFETCH   // dup 1+ c@
1072+ 74AF 1A 6B
1073+ 74B1 77 6A A5 63                  dw      DUP, LIT, "-", EQUALS   // dup [char] - =
1073+ 74B5 2D 00 B2 6E
1074+ 74B9                                                              // if
1075+ 74B9 1D 64                        dw      ZBRANCH
1076+ 74BB 12 00                        dw      CSgn_Else_0 - $
1077+ 74BD 4A 6A                        dw          DROP                //      drop
1078+ 74BF CA 69                        dw          ONE_PLUS            //      1+
1079+ 74C1 51 6C C6 6D                  dw          ONE, DPL, PLUSSTORE //      1 dpl +!
1079+ 74C5 DF 6A
1080+ 74C7 51 6C                        dw          ONE                 //      1
1081+ 74C9                                                              // else
1082+ 74C9 08 64                        dw      BRANCH
1083+ 74CB 16 00                        dw      CSgn_Endif_0 - $
1084+ 74CD              CSgn_Else_0:
1085+ 74CD A5 63 2B 00                  dw          LIT, "+", EQUALS    //      [char] + =
1085+ 74D1 B2 6E
1086+ 74D3                                                              //      if
1087+ 74D3 1D 64                        dw          ZBRANCH
1088+ 74D5 0A 00                        dw          CSgn_Endif_1 - $
1089+ 74D7 CA 69                        dw              ONE_PLUS        //          1+
1090+ 74D9 51 6C C6 6D                  dw              ONE, DPL        //          1 dpl
1091+ 74DD DF 6A                        dw              PLUSSTORE       //          +!
1092+ 74DF              CSgn_Endif_1                                    //      endif
1093+ 74DF 48 6C                        dw          ZERO                //      0
1094+ 74E1              CSgn_Endif_0:                                   // endif
1095+ 74E1 40 69                        dw      EXIT
1096+ 74E3
1097+ 74E3              //  ______________________________________________________________________
1098+ 74E3              //
1099+ 74E3              // (number)     d a -- d1 a1
1100+ 74E3              // using the current BASE parse characters stored in address a
1101+ 74E3              // accumulating a double precision integer d
1102+ 74E3              // the process stops at the first not-convertible character
1103+ 74E3              // A double-number is kept in CPU registers as HLDE.
1104+ 74E3              // On the stack a double number is treated as two single numbers
1105+ 74E3              // where HL is on the top of the stack and DE is the second from top,
1106+ 74E3              // so in the stack memory it appears as LHED.
1107+ 74E3              // Instead, in 2VARIABLE a double number is stored as EDLH.
1108+ 74E3                              Colon_Def CNUMBER,  "(NUMBER)", is_normal
1108+ 74E3             >                New_Def  CNUMBER, "(NUMBER)", Enter_Ptr, is_normal ; ok
1108+ 74E3             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1108+ 74E3             >
1108+ 74E3             >                // dummy db directives used to calculate length of namec
1108+ 74E3 28 4E 55 4D >                db      "(NUMBER)"
1108+ 74E7 42 45 52 29 >
1108+ 74EB             >len_NFA         defl    $ - temp_NFA
1108+ 74EB             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1108+ 74E3             >
1108+ 74E3 88          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1108+ 74E4 28 4E 55 4D >                db      "(NUMBER)"               // name string in 7-bit ascii, but
1108+ 74E8 42 45 52 29 >
1108+ 74EC             >                org     $-1                 // alter last byte of Name just above to set
1108+ 74EB A9          >                db      {b $} | END_BIT     // msb as name end
1108+ 74EC             >
1108+ 74EC A0 74       >                dw      last_NFA            // Link to previous definition Name
1108+ 74EE             >CNUMBER:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1108+ 74EE CD D3 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1108+ 74F1             >
1108+ 74F1             >
1108+ 74F1             >                endif           ; ok        // for other definitions it "points" the correct handler
1108+ 74F1             >                // Use of "; ok" to suppress "warning[fwdref]"
1108+ 74F1             >
1108+ 74F1             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1109+ 74F1                                                              // begin
1110+ 74F1              CNumber_Begin:
1111+ 74F1 CA 69                        dw          ONE_PLUS            //      1+
1112+ 74F3 77 6A 4D 69                  dw          DUP, TO_R           //      dup >r
1113+ 74F7 1A 6B                        dw          CFETCH              //      @
1114+ 74F9 BC 6D 00 6B                  dw          BASE, FETCH         //      base @
1115+ 74FD 93 64                        dw          DIGIT               //      digit
1116+ 74FF                                                              // while
1117+ 74FF 1D 64                        dw      ZBRANCH
1118+ 7501 2C 00                        dw      CNumber_While_end - $
1119+ 7503 6C 6A                        dw          SWAP                //      swap
1120+ 7505 BC 6D 00 6B                  dw          BASE, FETCH         //      base @
1121+ 7509 78 68                        dw          UM_MUL              //      um*
1122+ 750B 4A 6A 82 6A                  dw          DROP, ROT           //      drop rot
1123+ 750F BC 6D 00 6B                  dw          BASE, FETCH         //      base @
1124+ 7513 78 68                        dw          UM_MUL              //      um*
1125+ 7515 B8 69                        dw          DPLUS               //      d+
1126+ 7517 C6 6D 00 6B                  dw          DPL, FETCH          //      dpl @
1127+ 751B CA 69                        dw          ONE_PLUS            //      1+
1128+ 751D                                                              //      if
1129+ 751D 1D 64                        dw          ZBRANCH
1130+ 751F 08 00                        dw          CNumber_Endif - $
1131+ 7521 51 6C C6 6D                  dw              ONE, DPL        //          1 dpl
1132+ 7525 DF 6A                        dw              PLUSSTORE       //          +!
1133+ 7527              CNumber_Endif:                                  //      endif
1134+ 7527 5B 69                        dw             R_TO             //      r>  ( balance rp )
1135+ 7529 08 64                        dw      BRANCH
1136+ 752B C6 FF                        dw      CNumber_Begin - $
1137+ 752D              CNumber_While_end:                              // repeat
1138+ 752D 5B 69                        dw      R_TO                    // r>  ( balance rp on exit while-repeat )
1139+ 752F 40 69                        dw      EXIT                    // ;
1140+ 7531
1141+ 7531              //  ______________________________________________________________________
1142+ 7531              //
1143+ 7531              // number       a -- d
1144+ 7531                              Colon_Def NUMBER,  "NUMBER", is_normal
1144+ 7531             >                New_Def  NUMBER, "NUMBER", Enter_Ptr, is_normal ; ok
1144+ 7531             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1144+ 7531             >
1144+ 7531             >                // dummy db directives used to calculate length of namec
1144+ 7531 4E 55 4D 42 >                db      "NUMBER"
1144+ 7535 45 52       >
1144+ 7537             >len_NFA         defl    $ - temp_NFA
1144+ 7537             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1144+ 7531             >
1144+ 7531 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1144+ 7532 4E 55 4D 42 >                db      "NUMBER"               // name string in 7-bit ascii, but
1144+ 7536 45 52       >
1144+ 7538             >                org     $-1                 // alter last byte of Name just above to set
1144+ 7537 D2          >                db      {b $} | END_BIT     // msb as name end
1144+ 7538             >
1144+ 7538 E3 74       >                dw      last_NFA            // Link to previous definition Name
1144+ 753A             >NUMBER:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1144+ 753A CD D3 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1144+ 753D             >
1144+ 753D             >
1144+ 753D             >                endif           ; ok        // for other definitions it "points" the correct handler
1144+ 753D             >                // Use of "; ok" to suppress "warning[fwdref]"
1144+ 753D             >
1144+ 753D             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1145+ 753D 48 6C 48 6C                  dw      ZERO, ZERO              // 0 0
1146+ 7541 82 6A                        dw      ROT                     // rot
1147+ 7543 A8 74 4D 69                  dw      CSGN, TO_R              // (sgn) >r
1148+ 7547 6D 6C C6 6D                  dw      NEG_ONE, DPL, STORE     // -1 dpl !
1148+ 754B 0C 6B
1149+ 754D EE 74                        dw      CNUMBER                 // (number)
1150+ 754F 77 6A 1A 6B                  dw      DUP, CFETCH             // dup c@
1151+ 7553 A5 63 2E 00                  dw      LIT, 46, EQUALS         // [char] . =  ( decimal point )
1151+ 7557 B2 6E
1152+ 7559                                                              // if
1153+ 7559 1D 64                        dw      ZBRANCH
1154+ 755B 0A 00                        dw      Number_Endif_1 - $
1155+ 755D 48 6C C6 6D                  dw          ZERO, DPL, STORE    //      0 dpl !
1155+ 7561 0C 6B
1156+ 7563 EE 74                        dw          CNUMBER             //      (number)
1157+ 7565              Number_Endif_1:                                 // endif
1158+ 7565 1A 6B 77 6C                  dw      CFETCH, BL              // c@ bl
1159+ 7569 A4 6E 48 6C                  dw      SUBTRACT, ZERO, QERROR  // - 0 ?error
1159+ 756D 26 70
1160+ 756F 5B 69                        dw      R_TO                    // r>
1161+ 7571                                                              // if
1162+ 7571 1D 64                        dw      ZBRANCH
1163+ 7573 04 00                        dw      Number_Endif_2 - $
1164+ 7575 24 6A                        dw          DMINUS              //      dminus
1165+ 7577              Number_Endif_2:                                 // endif
1166+ 7577 40 69                        dw      EXIT                    // ;
1167+ 7579
1168+ 7579              //  ______________________________________________________________________
1169+ 7579              //
1170+ 7579              // twofind      a -- d
1171+ 7579                              Colon_Def TWOFIND,  "2FIND", is_normal
1171+ 7579             >                New_Def  TWOFIND, "2FIND", Enter_Ptr, is_normal ; ok
1171+ 7579             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1171+ 7579             >
1171+ 7579             >                // dummy db directives used to calculate length of namec
1171+ 7579 32 46 49 4E >                db      "2FIND"
1171+ 757D 44          >
1171+ 757E             >len_NFA         defl    $ - temp_NFA
1171+ 757E             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1171+ 7579             >
1171+ 7579 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1171+ 757A 32 46 49 4E >                db      "2FIND"               // name string in 7-bit ascii, but
1171+ 757E 44          >
1171+ 757F             >                org     $-1                 // alter last byte of Name just above to set
1171+ 757E C4          >                db      {b $} | END_BIT     // msb as name end
1171+ 757F             >
1171+ 757F 31 75       >                dw      last_NFA            // Link to previous definition Name
1171+ 7581             >TWOFIND:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1171+ 7581 CD D3 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1171+ 7584             >
1171+ 7584             >
1171+ 7584             >                endif           ; ok        // for other definitions it "points" the correct handler
1171+ 7584             >                // Use of "; ok" to suppress "warning[fwdref]"
1171+ 7584             >
1171+ 7584             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1172+ 7584 4D 69 69 69                  dw      TO_R, R_OP              // >r r@
1173+ 7588 97 6D 00 6B                  dw      CONTEXT, FETCH, FETCH   // context @ @
1173+ 758C 00 6B
1174+ 758E 03 65                        dw      C_FIND                  // (find)
1175+ 7590 25 6F                        dw      QDUP                    // ?dup
1176+ 7592 71 69                        dw      ZEQUAL                  // 0=
1177+ 7594                                                              // if
1178+ 7594 1D 64                        dw      ZBRANCH
1179+ 7596 08 00                        dw      LFind_Endif - $
1180+ 7598 69 69                        dw          R_OP                //      r@
1181+ 759A 94 6F                        dw          LATEST              //      latest
1182+ 759C 03 65                        dw          C_FIND              //      (find)
1183+ 759E              LFind_Endif:                                    // endif
1184+ 759E 5B 69 4A 6A                  dw      R_TO, DROP              // r> drop
1185+ 75A2 40 69                        dw      EXIT                    // ;
1186+ 75A4
1187+ 75A4              //  ______________________________________________________________________
1188+ 75A4              //
1189+ 75A4              // -find        a -- d
1190+ 75A4                              Colon_Def LFIND,  "-FIND", is_normal
1190+ 75A4             >                New_Def  LFIND, "-FIND", Enter_Ptr, is_normal ; ok
1190+ 75A4             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1190+ 75A4             >
1190+ 75A4             >                // dummy db directives used to calculate length of namec
1190+ 75A4 2D 46 49 4E >                db      "-FIND"
1190+ 75A8 44          >
1190+ 75A9             >len_NFA         defl    $ - temp_NFA
1190+ 75A9             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1190+ 75A4             >
1190+ 75A4 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1190+ 75A5 2D 46 49 4E >                db      "-FIND"               // name string in 7-bit ascii, but
1190+ 75A9 44          >
1190+ 75AA             >                org     $-1                 // alter last byte of Name just above to set
1190+ 75A9 C4          >                db      {b $} | END_BIT     // msb as name end
1190+ 75AA             >
1190+ 75AA 79 75       >                dw      last_NFA            // Link to previous definition Name
1190+ 75AC             >LFIND:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1190+ 75AC CD D3 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1190+ 75AF             >
1190+ 75AF             >
1190+ 75AF             >                endif           ; ok        // for other definitions it "points" the correct handler
1190+ 75AF             >                // Use of "; ok" to suppress "warning[fwdref]"
1190+ 75AF             >
1190+ 75AF             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1191+ 75AF 77 6C C5 73                  dw      BL, WORD                // bl word
1192+ 75B3 81 75                        dw      TWOFIND                 // 2find
1193+ 75B5 40 69                        dw      EXIT                    // ;
1194+ 75B7
1195+ 75B7              //  ______________________________________________________________________
1196+ 75B7              //
1197+ 75B7              // (abort)      --
1198+ 75B7                              Colon_Def CABORT,  "(ABORT)", is_normal
1198+ 75B7             >                New_Def  CABORT, "(ABORT)", Enter_Ptr, is_normal ; ok
1198+ 75B7             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1198+ 75B7             >
1198+ 75B7             >                // dummy db directives used to calculate length of namec
1198+ 75B7 28 41 42 4F >                db      "(ABORT)"
1198+ 75BB 52 54 29    >
1198+ 75BE             >len_NFA         defl    $ - temp_NFA
1198+ 75BE             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1198+ 75B7             >
1198+ 75B7 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1198+ 75B8 28 41 42 4F >                db      "(ABORT)"               // name string in 7-bit ascii, but
1198+ 75BC 52 54 29    >
1198+ 75BF             >                org     $-1                 // alter last byte of Name just above to set
1198+ 75BE A9          >                db      {b $} | END_BIT     // msb as name end
1198+ 75BF             >
1198+ 75BF A4 75       >                dw      last_NFA            // Link to previous definition Name
1198+ 75C1             >CABORT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1198+ 75C1 CD D3 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1198+ 75C4             >
1198+ 75C4             >
1198+ 75C4             >                endif           ; ok        // for other definitions it "points" the correct handler
1198+ 75C4             >                // Use of "; ok" to suppress "warning[fwdref]"
1198+ 75C4             >
1198+ 75C4             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1199+ 75C4 9D 78                        dw      ABORT                   // abort
1200+ 75C6 40 69                        dw      EXIT                    // ;
1201+ 75C8
1202+ 75C8              //  ______________________________________________________________________
1203+ 75C8              //
1204+ 75C8              // error        n --
1205+ 75C8              // raise an error
1206+ 75C8              // if WARNING is 0, prints "MSG#n".
1207+ 75C8              // if WARNING is 1, prints line n of screen 4.
1208+ 75C8              // if WARNING is -1 does (ABORT) that normally does ABORT
1209+ 75C8              // value can be negative or beyond block 4.
1210+ 75C8                              Colon_Def ERROR,  "ERROR", is_normal
1210+ 75C8             >                New_Def  ERROR, "ERROR", Enter_Ptr, is_normal ; ok
1210+ 75C8             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1210+ 75C8             >
1210+ 75C8             >                // dummy db directives used to calculate length of namec
1210+ 75C8 45 52 52 4F >                db      "ERROR"
1210+ 75CC 52          >
1210+ 75CD             >len_NFA         defl    $ - temp_NFA
1210+ 75CD             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1210+ 75C8             >
1210+ 75C8 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1210+ 75C9 45 52 52 4F >                db      "ERROR"               // name string in 7-bit ascii, but
1210+ 75CD 52          >
1210+ 75CE             >                org     $-1                 // alter last byte of Name just above to set
1210+ 75CD D2          >                db      {b $} | END_BIT     // msb as name end
1210+ 75CE             >
1210+ 75CE B7 75       >                dw      last_NFA            // Link to previous definition Name
1210+ 75D0             >ERROR:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1210+ 75D0 CD D3 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1210+ 75D3             >
1210+ 75D3             >
1210+ 75D3             >                endif           ; ok        // for other definitions it "points" the correct handler
1210+ 75D3             >                // Use of "; ok" to suppress "warning[fwdref]"
1210+ 75D3             >
1210+ 75D3             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1211+ 75D3 02 6D 00 6B                  dw      WARNING, FETCH, ZLESS   // warning @ 0<
1211+ 75D7 8B 69
1212+ 75D9                                                              // if
1213+ 75D9 1D 64                        dw      ZBRANCH
1214+ 75DB 04 00                        dw      Error_Endif_1 - $
1215+ 75DD C1 75                        dw          CABORT              //      (abort)
1216+ 75DF              Error_Endif_1:                                  // endif
1217+ 75DF 54 6E D7 71                  dw      HERE, COUNT, TYPE       // here count type
1217+ 75E3 3D 72
1218+ 75E5 15 74                        dw      C_DOT_QUOTE             // .( ? )
1219+ 75E7 02 3F 20                     db      2, "? "
1220+ 75EA E1 7A                        dw      MESSAGE                 // message  ( forward )
1221+ 75EC D5 6C 00 6B                  dw      S0, FETCH, SPSTORE      // s0 @ sp!
1221+ 75F0 23 69
1222+ 75F2 5E 6D 00 6B                  dw      BLK, FETCH, QDUP        // blk @ ?dup
1222+ 75F6 25 6F
1223+ 75F8                                                              // if
1224+ 75F8 1D 64                        dw      ZBRANCH
1225+ 75FA 08 00                        dw      Error_Endif_2 - $
1226+ 75FC 68 6D 00 6B                  dw          TO_IN, FETCH, SWAP  //      >in @ swap
1226+ 7600 6C 6A
1227+ 7602              Error_Endif_2:                                  // endif
1228+ 7602 5B 78                        dw      QUIT                    // quit ( forward )
1229+ 7604 40 69                        dw      EXIT                    // ;
1230+ 7606              //  ______________________________________________________________________
1231+ 7606              //
1232+ 7606              // id.          nfa --
1233+ 7606                              Colon_Def ID_DOT,  "ID.", is_normal
1233+ 7606             >                New_Def  ID_DOT, "ID.", Enter_Ptr, is_normal ; ok
1233+ 7606             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1233+ 7606             >
1233+ 7606             >                // dummy db directives used to calculate length of namec
1233+ 7606 49 44 2E    >                db      "ID."
1233+ 7609             >len_NFA         defl    $ - temp_NFA
1233+ 7609             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1233+ 7606             >
1233+ 7606 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1233+ 7607 49 44 2E    >                db      "ID."               // name string in 7-bit ascii, but
1233+ 760A             >                org     $-1                 // alter last byte of Name just above to set
1233+ 7609 AE          >                db      {b $} | END_BIT     // msb as name end
1233+ 760A             >
1233+ 760A C8 75       >                dw      last_NFA            // Link to previous definition Name
1233+ 760C             >ID_DOT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1233+ 760C CD D3 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1233+ 760F             >
1233+ 760F             >
1233+ 760F             >                endif           ; ok        // for other definitions it "points" the correct handler
1233+ 760F             >                // Use of "; ok" to suppress "warning[fwdref]"
1233+ 760F             >
1233+ 760F             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1234+ 760F B1 73 A5 63                  dw      PAD, LIT, 32, LIT, 96   // pad 32 96
1234+ 7613 20 00 A5 63
1234+ 7617 60 00
1235+ 7619 61 73                        dw      FILL                    // fill
1236+ 761B 77 6A DA 6F                  dw      DUP, PFA, LFA           // dup pfa lfa
1236+ 761F A5 6F
1237+ 7621 3C 6A A4 6E                  dw      OVER, SUBTRACT          // over -
1238+ 7625 B1 73 6C 6A                  dw      PAD, SWAP               // pad swap
1239+ 7629 49 68                        dw      CMOVE                   // cmove
1240+ 762B B1 73 D7 71                  dw      PAD, COUNT, LIT, $1F    // pad count 01F
1240+ 762F A5 63 1F 00
1241+ 7633 DE 68                        dw      AND_OP                  // and  ( use only lower bits )
1242+ 7635 3D 72 5C 6F                  dw      TYPE, SPACE             // type
1243+ 7639 40 69                        dw      EXIT                    // ;
1244+ 763B
1245+ 763B              //  ______________________________________________________________________
1246+ 763B              //
1247+ 763B              // code         -- cccc
1248+ 763B                              Colon_Def CODE,  "CODE", is_normal
1248+ 763B             >                New_Def  CODE, "CODE", Enter_Ptr, is_normal ; ok
1248+ 763B             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1248+ 763B             >
1248+ 763B             >                // dummy db directives used to calculate length of namec
1248+ 763B 43 4F 44 45 >                db      "CODE"
1248+ 763F             >len_NFA         defl    $ - temp_NFA
1248+ 763F             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1248+ 763B             >
1248+ 763B 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1248+ 763C 43 4F 44 45 >                db      "CODE"               // name string in 7-bit ascii, but
1248+ 7640             >                org     $-1                 // alter last byte of Name just above to set
1248+ 763F C5          >                db      {b $} | END_BIT     // msb as name end
1248+ 7640             >
1248+ 7640 06 76       >                dw      last_NFA            // Link to previous definition Name
1248+ 7642             >CODE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1248+ 7642 CD D3 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1248+ 7645             >
1248+ 7645             >
1248+ 7645             >                endif           ; ok        // for other definitions it "points" the correct handler
1248+ 7645             >                // Use of "; ok" to suppress "warning[fwdref]"
1248+ 7645             >
1248+ 7645             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1249+ 7645 AC 75                        dw      LFIND                   // -find
1250+ 7647                                                              // if
1251+ 7647 1D 64                        dw      ZBRANCH
1252+ 7649 10 00                        dw      Code_Endif - $
1253+ 764B 4A 6A                        dw          DROP                //      drop
1254+ 764D 02 70 0C 76                  dw          TO_NAME, ID_DOT     //      >name id.
1255+ 7651 A5 63 04 00                  dw          LIT, 4, MESSAGE     //      4 message
1255+ 7655 E1 7A
1256+ 7657 5C 6F                        dw          SPACE               //      space
1257+ 7659              Code_Endif:                                     // endif
1258+ 7659 54 6E                        dw      HERE                    // here
1259+ 765B                                                              // ( ---- here begins NFA ---- )
1260+ 765B 77 6A 1A 6B                  dw      DUP, CFETCH             // dup c@
1261+ 765F F4 6C 00 6B                  dw      WIDTH, FETCH, MIN       // width @ min  ( max 31 character length )
1261+ 7663 F6 6E
1262+ 7665 CA 69 65 6E                  dw      ONE_PLUS, ALLOT         // 1+ allot
1263+ 7669 77 6A                        dw      DUP                     // dup
1264+ 766B A5 63                        dw      LIT
1265+ 766D A0 00                        dw      SMUDGE_BIT | END_BIT    // 160
1266+ 766F F5 6A                        dw      TOGGLE                  // toggle
1267+ 7671 54 6E D4 69                  dw      HERE, ONE_SUBTRACT      // here 1- ( last character )
1268+ 7675 A5 63 80 00                  dw      LIT, END_BIT, TOGGLE    // 128 toggle
1268+ 7679 F5 6A
1269+ 767B                                                              // ( ---- here is LFA ---- )
1270+ 767B 94 6F 72 6E                  dw      LATEST, COMMA           // latest ,
1271+ 767F A5 6D 00 6B                  dw      CURRENT, FETCH, STORE   // current @ ! ( save this word as the latest )
1271+ 7683 0C 6B
1272+ 7685                                                              // ( ---- here is LFA ---- )
1273+ 7685              //              dw      HERE, CELL_PLUS, COMMA  // ( CFA is empty and PFA yet to exist )
1274+ 7685 40 69                        dw      EXIT                    // ;
1275+ 7687
1276+ 7687              //  ______________________________________________________________________
1277+ 7687              //
1278+ 7687              // create       -- cccc     ( compile time )
1279+ 7687              //              -- a        ( run time )
1280+ 7687                              Colon_Def CREATE,  "CREATE", is_normal
1280+ 7687             >                New_Def  CREATE, "CREATE", Enter_Ptr, is_normal ; ok
1280+ 7687             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1280+ 7687             >
1280+ 7687             >                // dummy db directives used to calculate length of namec
1280+ 7687 43 52 45 41 >                db      "CREATE"
1280+ 768B 54 45       >
1280+ 768D             >len_NFA         defl    $ - temp_NFA
1280+ 768D             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1280+ 7687             >
1280+ 7687 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1280+ 7688 43 52 45 41 >                db      "CREATE"               // name string in 7-bit ascii, but
1280+ 768C 54 45       >
1280+ 768E             >                org     $-1                 // alter last byte of Name just above to set
1280+ 768D C5          >                db      {b $} | END_BIT     // msb as name end
1280+ 768E             >
1280+ 768E 3B 76       >                dw      last_NFA            // Link to previous definition Name
1280+ 7690             >CREATE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1280+ 7690 CD D3 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1280+ 7693             >
1280+ 7693             >
1280+ 7693             >                endif           ; ok        // for other definitions it "points" the correct handler
1280+ 7693             >                // Use of "; ok" to suppress "warning[fwdref]"
1280+ 7693             >
1280+ 7693             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1281+ 7693 42 76 0F 71                  dw      CODE, SMUDGE            // code smudge
1282+ 7697 A5 63 CD 00                  dw      LIT, $CD, CCOMMA        // 00CD c,
1282+ 769B 84 6E
1283+ 769D A5 63 28 6C                  dw      LIT, Variable_Ptr, COMMA// Variable_Ptr ,
1283+ 76A1 72 6E
1284+ 76A3 69 71                        dw      C_SEMICOLON_CODE
1285+ 76A5                              // this routine is called from the call coded in CFA
1286+ 76A5              Create_Ptr:
1287+ 76A5
1288+ 76A5
1289+ 76A5
1290+ 76A5                              next
1290+ 76A5 DD E9       >                jp      (ix)
1291+ 76A7
1292+ 76A7              //  ______________________________________________________________________
1293+ 76A7              //
1294+ 76A7              // [compile]    -- cccc     ( compile time )
1295+ 76A7                              Colon_Def COMPILE_IMMEDIATE,  "[COMPILE]", is_immediate
1295+ 76A7             >                New_Def  COMPILE_IMMEDIATE, "[COMPILE]", Enter_Ptr, is_immediate ; ok
1295+ 76A7             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1295+ 76A7             >
1295+ 76A7             >                // dummy db directives used to calculate length of namec
1295+ 76A7 5B 43 4F 4D >                db      "[COMPILE]"
1295+ 76AB 50 49 4C 45 >
1295+ 76AF 5D          >
1295+ 76B0             >len_NFA         defl    $ - temp_NFA
1295+ 76B0             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1295+ 76A7             >
1295+ 76A7 C9          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
1295+ 76A8 5B 43 4F 4D >                db      "[COMPILE]"               // name string in 7-bit ascii, but
1295+ 76AC 50 49 4C 45 >
1295+ 76B0 5D          >
1295+ 76B1             >                org     $-1                 // alter last byte of Name just above to set
1295+ 76B0 DD          >                db      {b $} | END_BIT     // msb as name end
1295+ 76B1             >
1295+ 76B1 87 76       >                dw      last_NFA            // Link to previous definition Name
1295+ 76B3             >COMPILE_IMMEDIATE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1295+ 76B3 CD D3 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1295+ 76B6             >
1295+ 76B6             >
1295+ 76B6             >                endif           ; ok        // for other definitions it "points" the correct handler
1295+ 76B6             >                // Use of "; ok" to suppress "warning[fwdref]"
1295+ 76B6             >
1295+ 76B6             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1296+ 76B6 AC 75                        dw      LFIND                   // -find      (  cfa  b  f  )
1297+ 76B8 71 69                        dw      ZEQUAL                  // 0=         (  cfa  b  )
1298+ 76BA 48 6C 26 70                  dw      ZERO, QERROR            // 0 ?error
1299+ 76BE 4A 6A                        dw      DROP                    // drop       (  cfa  )
1300+ 76C0 72 6E                        dw      COMMA                   // ,
1301+ 76C2 40 69                        dw      EXIT                    // ; immediate
1302+ 76C4
1303+ 76C4              //  ______________________________________________________________________
1304+ 76C4              //
1305+ 76C4              // literal      n --      ( compile time )
1306+ 76C4                              Colon_Def LITERAL,  "LITERAL", is_immediate
1306+ 76C4             >                New_Def  LITERAL, "LITERAL", Enter_Ptr, is_immediate ; ok
1306+ 76C4             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1306+ 76C4             >
1306+ 76C4             >                // dummy db directives used to calculate length of namec
1306+ 76C4 4C 49 54 45 >                db      "LITERAL"
1306+ 76C8 52 41 4C    >
1306+ 76CB             >len_NFA         defl    $ - temp_NFA
1306+ 76CB             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1306+ 76C4             >
1306+ 76C4 C7          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
1306+ 76C5 4C 49 54 45 >                db      "LITERAL"               // name string in 7-bit ascii, but
1306+ 76C9 52 41 4C    >
1306+ 76CC             >                org     $-1                 // alter last byte of Name just above to set
1306+ 76CB CC          >                db      {b $} | END_BIT     // msb as name end
1306+ 76CC             >
1306+ 76CC A7 76       >                dw      last_NFA            // Link to previous definition Name
1306+ 76CE             >LITERAL:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1306+ 76CE CD D3 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1306+ 76D1             >
1306+ 76D1             >
1306+ 76D1             >                endif           ; ok        // for other definitions it "points" the correct handler
1306+ 76D1             >                // Use of "; ok" to suppress "warning[fwdref]"
1306+ 76D1             >
1306+ 76D1             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1307+ 76D1 B1 6D 00 6B                  dw      STATE, FETCH            // state @
1308+ 76D5                                                              // if
1309+ 76D5 1D 64                        dw      ZBRANCH
1310+ 76D7 08 00                        dw      Literal_Endif - $
1311+ 76D9 BF 70 A5 63                  dw          COMPILE, LIT        //      compile lit
1312+ 76DD 72 6E                        dw          COMMA               //      ,
1313+ 76DF              Literal_Endif:                                  // endif
1314+ 76DF 40 69                        dw      EXIT                    // ; immediate
1315+ 76E1
1316+ 76E1              //  ______________________________________________________________________
1317+ 76E1              //
1318+ 76E1              // dliteral     n --      ( compile time )
1319+ 76E1                              Colon_Def DLITERAL,  "DLITERAL", is_immediate
1319+ 76E1             >                New_Def  DLITERAL, "DLITERAL", Enter_Ptr, is_immediate ; ok
1319+ 76E1             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1319+ 76E1             >
1319+ 76E1             >                // dummy db directives used to calculate length of namec
1319+ 76E1 44 4C 49 54 >                db      "DLITERAL"
1319+ 76E5 45 52 41 4C >
1319+ 76E9             >len_NFA         defl    $ - temp_NFA
1319+ 76E9             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1319+ 76E1             >
1319+ 76E1 C8          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
1319+ 76E2 44 4C 49 54 >                db      "DLITERAL"               // name string in 7-bit ascii, but
1319+ 76E6 45 52 41 4C >
1319+ 76EA             >                org     $-1                 // alter last byte of Name just above to set
1319+ 76E9 CC          >                db      {b $} | END_BIT     // msb as name end
1319+ 76EA             >
1319+ 76EA C4 76       >                dw      last_NFA            // Link to previous definition Name
1319+ 76EC             >DLITERAL:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1319+ 76EC CD D3 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1319+ 76EF             >
1319+ 76EF             >
1319+ 76EF             >                endif           ; ok        // for other definitions it "points" the correct handler
1319+ 76EF             >                // Use of "; ok" to suppress "warning[fwdref]"
1319+ 76EF             >
1319+ 76EF             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1320+ 76EF B1 6D 00 6B                  dw      STATE, FETCH            // state @
1321+ 76F3                                                              // if
1322+ 76F3 1D 64                        dw      ZBRANCH
1323+ 76F5 08 00                        dw      DLiteral_Endif - $
1324+ 76F7 6C 6A                        dw          SWAP                //      swap
1325+ 76F9 CE 76 CE 76                  dw          LITERAL,  LITERAL   //      [compile] literal [compile] literal
1326+ 76FD              DLiteral_Endif:                                 // endif
1327+ 76FD 40 69                        dw      EXIT                    // ; immediate
1328+ 76FF
1329+ 76FF              //  ______________________________________________________________________
1330+ 76FF              //
1331+ 76FF              // [char]       n --      ( compile time )
1332+ 76FF              // inside colon definition, gets first character from next input word
1333+ 76FF              // and compiles it as literal.
1334+ 76FF                              Colon_Def COMPILE_CHAR,  "[CHAR]", is_immediate
1334+ 76FF             >                New_Def  COMPILE_CHAR, "[CHAR]", Enter_Ptr, is_immediate ; ok
1334+ 76FF             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1334+ 76FF             >
1334+ 76FF             >                // dummy db directives used to calculate length of namec
1334+ 76FF 5B 43 48 41 >                db      "[CHAR]"
1334+ 7703 52 5D       >
1334+ 7705             >len_NFA         defl    $ - temp_NFA
1334+ 7705             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1334+ 76FF             >
1334+ 76FF C6          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
1334+ 7700 5B 43 48 41 >                db      "[CHAR]"               // name string in 7-bit ascii, but
1334+ 7704 52 5D       >
1334+ 7706             >                org     $-1                 // alter last byte of Name just above to set
1334+ 7705 DD          >                db      {b $} | END_BIT     // msb as name end
1334+ 7706             >
1334+ 7706 E1 76       >                dw      last_NFA            // Link to previous definition Name
1334+ 7708             >COMPILE_CHAR:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1334+ 7708 CD D3 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1334+ 770B             >
1334+ 770B             >
1334+ 770B             >                endif           ; ok        // for other definitions it "points" the correct handler
1334+ 770B             >                // Use of "; ok" to suppress "warning[fwdref]"
1334+ 770B             >
1334+ 770B             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1335+ 770B 31 74 CE 76                  dw      CHAR, LITERAL           // char [compile] literal
1336+ 770F 40 69                        dw      EXIT                    // ; immediate
1337+ 7711
1338+ 7711              //  ______________________________________________________________________
1339+ 7711              //
1340+ 7711              // 0x00         n --      ( compile time )
1341+ 7711                              Colon_Def NUL_WORD,  $00, is_immediate
1341+ 7711             >                New_Def  NUL_WORD, $00, Enter_Ptr, is_immediate ; ok
1341+ 7711             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1341+ 7711             >
1341+ 7711             >                // dummy db directives used to calculate length of namec
1341+ 7711 00          >                db      $00
1341+ 7712             >len_NFA         defl    $ - temp_NFA
1341+ 7712             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1341+ 7711             >
1341+ 7711 C1          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
1341+ 7712 00          >                db      $00               // name string in 7-bit ascii, but
1341+ 7713             >                org     $-1                 // alter last byte of Name just above to set
1341+ 7712 80          >                db      {b $} | END_BIT     // msb as name end
1341+ 7713             >
1341+ 7713 FF 76       >                dw      last_NFA            // Link to previous definition Name
1341+ 7715             >NUL_WORD:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1341+ 7715 CD D3 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1341+ 7718             >
1341+ 7718             >
1341+ 7718             >                endif           ; ok        // for other definitions it "points" the correct handler
1341+ 7718             >                // Use of "; ok" to suppress "warning[fwdref]"
1341+ 7718             >
1341+ 7718             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1342+ 7718 5E 6D 00 6B                  dw      BLK, FETCH, ONE         // blk @ 1
1342+ 771C 51 6C
1343+ 771E E7 6E                        dw      GREATER                 // > if
1344+ 7720                                                              // if
1345+ 7720 1D 64                        dw      ZBRANCH
1346+ 7722 28 00                        dw      Nul_Else_1 - $
1347+ 7724 51 6C 5E 6D                  dw          ONE, BLK, PLUSSTORE //      1 blk +!
1347+ 7728 DF 6A
1348+ 772A 48 6C 68 6D                  dw          ZERO, TO_IN, STORE  //      0 >in !
1348+ 772E 0C 6B
1349+ 7730 5E 6D 00 6B                  dw          BLK, FETCH          //      blk @
1350+ 7734 9C 6C                        dw          BSCR                //      b/scr
1351+ 7736 D4 69                        dw          ONE_SUBTRACT        //      1 -
1352+ 7738 DE 68                        dw          AND_OP              //      and  ( this is tricky )
1353+ 773A 71 69                        dw          ZEQUAL              //      0=
1354+ 773C                                                              //      if
1355+ 773C 1D 64                        dw          ZBRANCH
1356+ 773E 08 00                        dw          Nul_Endif_2 - $
1357+ 7740 5A 70                        dw              QEXEC           //          ?exec
1358+ 7742 5B 69 4A 6A                  dw              R_TO, DROP      //          r> drop
1359+ 7746              Nul_Endif_2:                                    //      endif
1360+ 7746 08 64                        dw      BRANCH
1361+ 7748 06 00                        dw      Nul_Endif_1 - $
1362+ 774A              Nul_Else_1:                                     // else
1363+ 774A 5B 69 4A 6A                  dw          R_TO, DROP          //      r> drop
1364+ 774E              Nul_Endif_1:                                    // endif
1365+ 774E 40 69                        dw      EXIT                    // ;
1366+ 7750
1367+ 7750              //  ______________________________________________________________________
1368+ 7750              //
1369+ 7750              // ?stack       --
1370+ 7750              // Raise error #1 if stack is empty and you pop it
1371+ 7750              // Raise error #7 if stack is full.
1372+ 7750              // This means SP must always stay between HERE and FFFF
1373+ 7750              // For 128K BANK paging purpose SP must be <= BFE0 and 50 words room
1374+ 7750              // for Next 8K MMU paging this is $DOE8
1375+ 7750                              Colon_Def QSTACK, "?STACK", is_normal
1375+ 7750             >                New_Def  QSTACK, "?STACK", Enter_Ptr, is_normal ; ok
1375+ 7750             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1375+ 7750             >
1375+ 7750             >                // dummy db directives used to calculate length of namec
1375+ 7750 3F 53 54 41 >                db      "?STACK"
1375+ 7754 43 4B       >
1375+ 7756             >len_NFA         defl    $ - temp_NFA
1375+ 7756             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1375+ 7750             >
1375+ 7750 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1375+ 7751 3F 53 54 41 >                db      "?STACK"               // name string in 7-bit ascii, but
1375+ 7755 43 4B       >
1375+ 7757             >                org     $-1                 // alter last byte of Name just above to set
1375+ 7756 CB          >                db      {b $} | END_BIT     // msb as name end
1375+ 7757             >
1375+ 7757 11 77       >                dw      last_NFA            // Link to previous definition Name
1375+ 7759             >QSTACK:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1375+ 7759 CD D3 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1375+ 775C             >
1375+ 775C             >
1375+ 775C             >                endif           ; ok        // for other definitions it "points" the correct handler
1375+ 775C             >                // Use of "; ok" to suppress "warning[fwdref]"
1375+ 775C             >
1375+ 775C             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1376+ 775C 16 69                        dw      SPFETCH                 // sp@
1377+ 775E D5 6C 00 6B                  dw      S0, FETCH               // s0 @
1378+ 7762 6C 6A C0 6E                  dw      SWAP, ULESS             // swap u<
1379+ 7766 51 6C 26 70                  dw      ONE, QERROR             // 1 ?error
1380+ 776A 54 6E                        dw      HERE                    // here
1381+ 776C D5 6C 00 6B                  dw      S0, FETCH, LESS         // s0 @ <
1381+ 7770 D0 6E
1382+ 7772                                                              // if
1383+ 7772 1D 64                        dw      ZBRANCH
1384+ 7774 14 00                        dw      QStack_Endif - $
1385+ 7776 16 69                        dw          SPFETCH             //      sp@
1386+ 7778 54 6E A5 63                  dw          HERE, LIT, 128      //      here 128
1386+ 777C 80 00
1387+ 777E AB 69 C0 6E                  dw          PLUS, ULESS         //      plus u<
1388+ 7782 A5 63 07 00                  dw          LIT, 7, QERROR      //      7 Cerror
1388+ 7786 26 70
1389+ 7788              QStack_Endif:                                   // endif
1390+ 7788 40 69                        dw      EXIT                    // ;
1391+ 778A
1392+ 778A
# file closed: C:\Zx\CSpect\Projects\vForth16_DIRECT_RP/source/L1.asm
 112  778A                              include "L2.asm"
# file opened: C:\Zx\CSpect\Projects\vForth16_DIRECT_RP/source/L2.asm
   1+ 778A              //  ______________________________________________________________________
   2+ 778A              //
   3+ 778A              //  L2.asm
   4+ 778A              //
   5+ 778A              //  Level-2 3dos
   6+ 778A              //  the Forth interpreter, vocabulary, cold/warm start and quit from Forth.
   7+ 778A              //  ______________________________________________________________________
   8+ 778A
   9+ 778A
  10+ 778A              //  ______________________________________________________________________
  11+ 778A              //
  12+ 778A              // interpret    --
  13+ 778A              // This is the text interpreter.
  14+ 778A              // It executes or compiles, depending on STATE, the text coming from
  15+ 778A              // current input stream.
  16+ 778A              // If the word search fails after parsing CONTEXT and CURRENT vocabulary,
  17+ 778A              // the word is interpreted as numeric and converted, using current BASE,
  18+ 778A              // leaving on top of stack a single or double precision number, depending
  19+ 778A              // on the presence of a decimal point.
  20+ 778A              // If the number conversion fails, the terminal is notified with ? followed
  21+ 778A              // by the offending word.
  22+ 778A                              Colon_Def INTERPRET, "INTERPRET", is_normal
  22+ 778A             >                New_Def  INTERPRET, "INTERPRET", Enter_Ptr, is_normal ; ok
  22+ 778A             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  22+ 778A             >
  22+ 778A             >                // dummy db directives used to calculate length of namec
  22+ 778A 49 4E 54 45 >                db      "INTERPRET"
  22+ 778E 52 50 52 45 >
  22+ 7792 54          >
  22+ 7793             >len_NFA         defl    $ - temp_NFA
  22+ 7793             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  22+ 778A             >
  22+ 778A 89          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  22+ 778B 49 4E 54 45 >                db      "INTERPRET"               // name string in 7-bit ascii, but
  22+ 778F 52 50 52 45 >
  22+ 7793 54          >
  22+ 7794             >                org     $-1                 // alter last byte of Name just above to set
  22+ 7793 D4          >                db      {b $} | END_BIT     // msb as name end
  22+ 7794             >
  22+ 7794 50 77       >                dw      last_NFA            // Link to previous definition Name
  22+ 7796             >INTERPRET:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
  22+ 7796 CD D3 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
  22+ 7799             >
  22+ 7799             >
  22+ 7799             >                endif           ; ok        // for other definitions it "points" the correct handler
  22+ 7799             >                // Use of "; ok" to suppress "warning[fwdref]"
  22+ 7799             >
  22+ 7799             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  23+ 7799
  24+ 7799              Interpret_Begin:                                        // begin
  25+ 7799 AC 75                        dw          LFIND                       //      -find
  26+ 779B                                                                      //      if
  27+ 779B 1D 64                        dw          ZBRANCH
  28+ 779D 1A 00                        dw          Interpret_Else_1 - $
  29+ 779F B1 6D 00 6B                  dw              STATE, FETCH, LESS      //          state @ <
  29+ 77A3 D0 6E
  30+ 77A5                                                                      //          if
  31+ 77A5 1D 64                        dw              ZBRANCH
  32+ 77A7 08 00                        dw              Interpret_Else_2 - $
  33+ 77A9 DD 70                        dw                  COMPILE_XT          //              compile,
  34+ 77AB                                                                      //          else
  35+ 77AB 08 64                        dw              BRANCH
  36+ 77AD 06 00                        dw              Interpret_Endif_2 - $
  37+ 77AF              Interpret_Else_2:
  38+ 77AF B8 63 F6 6B                  dw                  EXECUTE, NOOP       //              execute nooop
  39+ 77B3              Interpret_Endif_2:                                      //          endif
  40+ 77B3                                                                      //      else
  41+ 77B3 08 64                        dw          BRANCH
  42+ 77B5 1A 00                        dw          Interpret_Endif_1 - $
  43+ 77B7              Interpret_Else_1:
  44+ 77B7 54 6E 3A 75                  dw              HERE, NUMBER            //          here number
  45+ 77BB C6 6D 00 6B                  dw              DPL, FETCH, ONE_PLUS    //          dpl @ 1+
  45+ 77BF CA 69
  46+ 77C1                                                                      //          if
  47+ 77C1 1D 64                        dw              ZBRANCH
  48+ 77C3 08 00                        dw              Interpret_Else_3 - $
  49+ 77C5              //              dw                  NMODE, FETCH        //              nmode @
  50+ 77C5              //                                                      //              if
  51+ 77C5              //              dw                  ZBRANCH
  52+ 77C5              //              dw                  Interpret_Endif_4 - $
  53+ 77C5              //              dw                      ONE, ZERO       //                  1 0
  54+ 77C5              //              dw                      TWO_DROP        //                  2drop
  55+ 77C5              //Interpret_Endif_4:                                      //              endif
  56+ 77C5 EC 76                        dw                  DLITERAL            //              [compile] dliteral
  57+ 77C7                                                                      //          else
  58+ 77C7 08 64                        dw              BRANCH
  59+ 77C9 06 00                        dw              Interpret_Endif_3 - $
  60+ 77CB              Interpret_Else_3:
  61+ 77CB 4A 6A                        dw                  DROP                //              drop
  62+ 77CD CE 76                        dw                  LITERAL             //              [compile]  literal
  63+ 77CF              Interpret_Endif_3:                                      //          endif
  64+ 77CF              Interpret_Endif_1:                                      //      endif
  65+ 77CF 59 77                        dw          QSTACK                      //      ?stack
  66+ 77D1 18 67                        dw          QTERMINAL                   //      ?terminal
  67+ 77D3                                                                      //      if
  68+ 77D3 1D 64                        dw          ZBRANCH
  69+ 77D5 04 00                        dw          Interpret_Endif_5 - $
  70+ 77D7 5B 78                        dw              QUIT                    //          quit
  71+ 77D9              Interpret_Endif_5:                                      //      endif
  72+ 77D9 08 64                        dw      BRANCH
  73+ 77DB BE FF                        dw      Interpret_Begin - $
  74+ 77DD 40 69                        dw      EXIT                            // ;
  75+ 77DF
  76+ 77DF              //  ______________________________________________________________________
  77+ 77DF              //
  78+ 77DF              // vocabulary   -- cccc     ( compile time )
  79+ 77DF              // Defining word used in the form   VOCABULARY cccc
  80+ 77DF              // creates the word  cccc  that gives the name to the vocabulary.
  81+ 77DF              // Giving  cccc  makes the vocabulary CONTEXT so its words are executed first
  82+ 77DF              // Giving  cccc DEFINITIONS makes  the vocabulary  CURRENT
  83+ 77DF              // so new definitions can be inserted in that vocabulary.
  84+ 77DF                              Colon_Def VOCABULARY, "VOCABULARY", is_normal
  84+ 77DF             >                New_Def  VOCABULARY, "VOCABULARY", Enter_Ptr, is_normal ; ok
  84+ 77DF             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  84+ 77DF             >
  84+ 77DF             >                // dummy db directives used to calculate length of namec
  84+ 77DF 56 4F 43 41 >                db      "VOCABULARY"
  84+ 77E3 42 55 4C 41 >
  84+ 77E7 52 59       >
  84+ 77E9             >len_NFA         defl    $ - temp_NFA
  84+ 77E9             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  84+ 77DF             >
  84+ 77DF 8A          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  84+ 77E0 56 4F 43 41 >                db      "VOCABULARY"               // name string in 7-bit ascii, but
  84+ 77E4 42 55 4C 41 >
  84+ 77E8 52 59       >
  84+ 77EA             >                org     $-1                 // alter last byte of Name just above to set
  84+ 77E9 D9          >                db      {b $} | END_BIT     // msb as name end
  84+ 77EA             >
  84+ 77EA 8A 77       >                dw      last_NFA            // Link to previous definition Name
  84+ 77EC             >VOCABULARY:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
  84+ 77EC CD D3 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
  84+ 77EF             >
  84+ 77EF             >
  84+ 77EF             >                endif           ; ok        // for other definitions it "points" the correct handler
  84+ 77EF             >                // Use of "; ok" to suppress "warning[fwdref]"
  84+ 77EF             >
  84+ 77EF             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  85+ 77EF
  86+ 77EF A3 71                        dw      CBUILDS
  87+ 77F1
  88+ 77F1 A5 63 81 A0                  dw      LIT, $A081, COMMA       // $81A0 ,
  88+ 77F5 72 6E
  89+ 77F7 A5 6D 00 6B                  dw      CURRENT, FETCH          // current @
  90+ 77FB F7 69 72 6E                  dw      CELL_MINUS, COMMA       // cell- ,
  91+ 77FF 54 6E                        dw      HERE                    // here
  92+ 7801 26 6D 00 6B                  dw      VOC_LINK, FETCH, COMMA  // voc-link @ ,
  92+ 7805 72 6E
  93+ 7807 26 6D 0C 6B                  dw      VOC_LINK, STORE         // voc-link !
  94+ 780B
  95+ 780B B4 71                        dw      DOES_TO                 // does>
  96+ 780D              Vocabulary_Does:
  97+ 780D EC 69                        dw      CELL_PLUS               // cell+
  98+ 780F 97 6D 0C 6B                  dw      CONTEXT, STORE          // context !
  99+ 7813 40 69                        dw      EXIT                    // ;
 100+ 7815
 101+ 7815              //  ______________________________________________________________________
 102+ 7815              //
 103+ 7815              // forth        --
 104+ 7815              // Name of the first vocabulary.
 105+ 7815              // It makes FORTH the CONTEXT vocabulary.
 106+ 7815              // Until new user vocabulary are defined, new colon-definitions becomes
 107+ 7815              // part of FORTH. It is immediate, so it will executed during the creation
 108+ 7815              // of a colon definition to be able to select the vocabulary.
 109+ 7815
 110+ 7815                              New_Def FORTH, "FORTH", Does_Ptr, is_immediate
 110+ 7815             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 110+ 7815             >
 110+ 7815             >                // dummy db directives used to calculate length of namec
 110+ 7815 46 4F 52 54 >                db      "FORTH"
 110+ 7819 48          >
 110+ 781A             >len_NFA         defl    $ - temp_NFA
 110+ 781A             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 110+ 7815             >
 110+ 7815 C5          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 110+ 7816 46 4F 52 54 >                db      "FORTH"               // name string in 7-bit ascii, but
 110+ 781A 48          >
 110+ 781B             >                org     $-1                 // alter last byte of Name just above to set
 110+ 781A C8          >                db      {b $} | END_BIT     // msb as name end
 110+ 781B             >
 110+ 781B DF 77       >                dw      last_NFA            // Link to previous definition Name
 110+ 781D             >FORTH:          if Does_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 110+ 781D CD C1 71    >                call    Does_Ptr ; ok        // for primitive definitions  actual code
 110+ 7820             >
 110+ 7820             >
 110+ 7820             >                endif           ; ok        // for other definitions it "points" the correct handler
 110+ 7820             >                // Use of "; ok" to suppress "warning[fwdref]"
 110+ 7820             >
 110+ 7820             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 111+ 7820 0D 78                        dw      Vocabulary_Does
 112+ 7822 81 A0                        db      $81, $A0
 113+ 7824              Forth_Latest_Ptr:
 114+ 7824 D5 86                        dw      Here_Dictionary // Fence_Word // Latest_Definition // Here_Dictionary
 115+ 7826              Voclink_Ptr:
 116+ 7826 00 00                        dw      0
 117+ 7828              // Any new vocabulary is structured as follow:
 118+ 7828              // PFA+0 points to DOES> part of VOCABULARY to perform CELL+ CONTEXT !
 119+ 7828              // PFA+2 is 81,A0 i.e. a null-word used as LATEST in the new vocabulary
 120+ 7828              // PFA+4 always contains the LATEST word of this VOCABULARY.
 121+ 7828              //       at creations it points to the null-word of its parent vocabulary
 122+ 7828              //       that is normally FORTH, For example ASSEMBLER points FORTH's null-word
 123+ 7828              // PFA+6 is the pointer that builds up the vocabulary linked list.
 124+ 7828              //       FORTH has 0 here to signal the end of the list and user's variable
 125+ 7828              //       VOC-LINK points to PFA+6 of the newest vocabulary created.
 126+ 7828              //       While FORTH is the only vocabulary, VOC-LINK points to FORTH's PFA+6
 127+ 7828              //       When ASSEMBLER is created, its PFA+6 points to FORTH's PFA+6, and so on
 128+ 7828
 129+ 7828              //  ______________________________________________________________________
 130+ 7828              //
 131+ 7828              // definitions  --
 132+ 7828              // Used in the form  cccc DEFINITIONS
 133+ 7828              // set the CURRENT vocabulary at CONTEXT to insert new definitions in
 134+ 7828              // vocabulary cccc.
 135+ 7828                              Colon_Def DEFINITIONS, "DEFINITIONS", is_normal
 135+ 7828             >                New_Def  DEFINITIONS, "DEFINITIONS", Enter_Ptr, is_normal ; ok
 135+ 7828             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 135+ 7828             >
 135+ 7828             >                // dummy db directives used to calculate length of namec
 135+ 7828 44 45 46 49 >                db      "DEFINITIONS"
 135+ 782C 4E 49 54 49 >
 135+ 7830 4F 4E 53    >
 135+ 7833             >len_NFA         defl    $ - temp_NFA
 135+ 7833             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 135+ 7828             >
 135+ 7828 8B          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 135+ 7829 44 45 46 49 >                db      "DEFINITIONS"               // name string in 7-bit ascii, but
 135+ 782D 4E 49 54 49 >
 135+ 7831 4F 4E 53    >
 135+ 7834             >                org     $-1                 // alter last byte of Name just above to set
 135+ 7833 D3          >                db      {b $} | END_BIT     // msb as name end
 135+ 7834             >
 135+ 7834 15 78       >                dw      last_NFA            // Link to previous definition Name
 135+ 7836             >DEFINITIONS:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 135+ 7836 CD D3 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 135+ 7839             >
 135+ 7839             >
 135+ 7839             >                endif           ; ok        // for other definitions it "points" the correct handler
 135+ 7839             >                // Use of "; ok" to suppress "warning[fwdref]"
 135+ 7839             >
 135+ 7839             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 136+ 7839 97 6D 00 6B                  dw      CONTEXT, FETCH          // context @
 137+ 783D A5 6D 0C 6B                  dw      CURRENT, STORE          // current !
 138+ 7841 40 69                        dw      EXIT                    // ;
 139+ 7843
 140+ 7843              //  ______________________________________________________________________
 141+ 7843              //
 142+ 7843              // (            -- cccc )
 143+ 7843              // the following text is interpreted as a comment until a closing )
 144+ 7843                              Colon_Def COMMENT_BRAKET, "(", is_immediate
 144+ 7843             >                New_Def  COMMENT_BRAKET, "(", Enter_Ptr, is_immediate ; ok
 144+ 7843             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 144+ 7843             >
 144+ 7843             >                // dummy db directives used to calculate length of namec
 144+ 7843 28          >                db      "("
 144+ 7844             >len_NFA         defl    $ - temp_NFA
 144+ 7844             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 144+ 7843             >
 144+ 7843 C1          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 144+ 7844 28          >                db      "("               // name string in 7-bit ascii, but
 144+ 7845             >                org     $-1                 // alter last byte of Name just above to set
 144+ 7844 A8          >                db      {b $} | END_BIT     // msb as name end
 144+ 7845             >
 144+ 7845 28 78       >                dw      last_NFA            // Link to previous definition Name
 144+ 7847             >COMMENT_BRAKET:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 144+ 7847 CD D3 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 144+ 784A             >
 144+ 784A             >
 144+ 784A             >                endif           ; ok        // for other definitions it "points" the correct handler
 144+ 784A             >                // Use of "; ok" to suppress "warning[fwdref]"
 144+ 784A             >
 144+ 784A             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 145+ 784A A5 63 29 00                  dw      LIT, ")"                // [char] )
 146+ 784E C5 73 4A 6A                  dw      WORD, DROP              // word drop
 147+ 7852 40 69                        dw      EXIT                    // ;
 148+ 7854
 149+ 7854              //  ______________________________________________________________________
 150+ 7854              //
 151+ 7854              // quit         --
 152+ 7854              // \ Erase the return-stack, stop any compilation and give controlo to the console. No message is issued.
 153+ 7854                              Colon_Def QUIT, "QUIT", is_normal
 153+ 7854             >                New_Def  QUIT, "QUIT", Enter_Ptr, is_normal ; ok
 153+ 7854             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 153+ 7854             >
 153+ 7854             >                // dummy db directives used to calculate length of namec
 153+ 7854 51 55 49 54 >                db      "QUIT"
 153+ 7858             >len_NFA         defl    $ - temp_NFA
 153+ 7858             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 153+ 7854             >
 153+ 7854 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 153+ 7855 51 55 49 54 >                db      "QUIT"               // name string in 7-bit ascii, but
 153+ 7859             >                org     $-1                 // alter last byte of Name just above to set
 153+ 7858 D4          >                db      {b $} | END_BIT     // msb as name end
 153+ 7859             >
 153+ 7859 43 78       >                dw      last_NFA            // Link to previous definition Name
 153+ 785B             >QUIT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 153+ 785B CD D3 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 153+ 785E             >
 153+ 785E             >
 153+ 785E             >                endif           ; ok        // for other definitions it "points" the correct handler
 153+ 785E             >                // Use of "; ok" to suppress "warning[fwdref]"
 153+ 785E             >
 153+ 785E             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 154+ 785E
 155+ 785E 27 6E 00 6B                  dw      SOURCE_ID, FETCH        // source-id @
 156+ 7862 7A 67 4A 6A                  dw      F_CLOSE, DROP           // f_close drop
 157+ 7866 48 6C 27 6E                  dw      ZERO, SOURCE_ID, STORE  // 0 source-id !
 157+ 786A 0C 6B
 158+ 786C 48 6C 5E 6D                  dw      ZERO, BLK, STORE        // 0 blk !
 158+ 7870 0C 6B
 159+ 7872 EA 70                        dw      SQUARED_OPEN            // [compile] [
 160+ 7874                                                              // begin
 161+ 7874              Quit_Begin:
 162+ 7874 DE 6C 00 6B                  dw      R0, FETCH, RPSTORE      //      r0 @ rp!
 162+ 7878 36 69
 163+ 787A 00 66                        dw      CR                      //      cr
 164+ 787C 43 73                        dw      QUERY                   //      query
 165+ 787E              Next_Breakpoint_1:
 166+ 787E 96 77                        dw      INTERPRET               //      interpret
 167+ 7880 B1 6D 00 6B                  dw      STATE, FETCH, ZEQUAL    //      state @ 0=
 167+ 7884 71 69
 168+ 7886                                                              //      if
 169+ 7886 1D 64                        dw      ZBRANCH
 170+ 7888 07 00                        dw      Quit_Endif - $
 171+ 788A 15 74                        dw          C_DOT_QUOTE
 172+ 788C 02 6F 6B                     db          2, "ok"             //          .( ok)
 173+ 788F              Quit_Endif:                                     //      else
 174+ 788F                                                              // again
 175+ 788F 08 64                        dw      BRANCH
 176+ 7891 E3 FF                        dw      Quit_Begin - $
 177+ 7893 40 69                        dw      EXIT                    // ;
 178+ 7895
 179+ 7895              //  ______________________________________________________________________
 180+ 7895              //
 181+ 7895              // abort        --
 182+ 7895                              Colon_Def ABORT, "ABORT", is_normal
 182+ 7895             >                New_Def  ABORT, "ABORT", Enter_Ptr, is_normal ; ok
 182+ 7895             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 182+ 7895             >
 182+ 7895             >                // dummy db directives used to calculate length of namec
 182+ 7895 41 42 4F 52 >                db      "ABORT"
 182+ 7899 54          >
 182+ 789A             >len_NFA         defl    $ - temp_NFA
 182+ 789A             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 182+ 7895             >
 182+ 7895 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 182+ 7896 41 42 4F 52 >                db      "ABORT"               // name string in 7-bit ascii, but
 182+ 789A 54          >
 182+ 789B             >                org     $-1                 // alter last byte of Name just above to set
 182+ 789A D4          >                db      {b $} | END_BIT     // msb as name end
 182+ 789B             >
 182+ 789B 54 78       >                dw      last_NFA            // Link to previous definition Name
 182+ 789D             >ABORT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 182+ 789D CD D3 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 182+ 78A0             >
 182+ 78A0             >
 182+ 78A0             >                endif           ; ok        // for other definitions it "points" the correct handler
 182+ 78A0             >                // Use of "; ok" to suppress "warning[fwdref]"
 182+ 78A0             >
 182+ 78A0             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 183+ 78A0 D5 6C 00 6B                  dw      S0, FETCH, SPSTORE      // s0 @ sp!
 183+ 78A4 23 69
 184+ 78A6 52 71                        dw      DECIMAL                 // decimal
 185+ 78A8 1D 78                        dw      FORTH                   // [compile] forth
 186+ 78AA 36 78                        dw      DEFINITIONS             // definitions
 187+ 78AC              Autoexec_Ptr:
 188+ 78AC DC 84                        dw      AUTOEXEC                // autoexec, patched to noop
 189+ 78AE 5B 78                        dw      QUIT                    // quit
 190+ 78B0 40 69                        dw      EXIT                    // ;
 191+ 78B2
 192+ 78B2              //  ______________________________________________________________________
 193+ 78B2              //
 194+ 78B2              // warm         --
 195+ 78B2                              Colon_Def WARM, "WARM", is_normal
 195+ 78B2             >                New_Def  WARM, "WARM", Enter_Ptr, is_normal ; ok
 195+ 78B2             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 195+ 78B2             >
 195+ 78B2             >                // dummy db directives used to calculate length of namec
 195+ 78B2 57 41 52 4D >                db      "WARM"
 195+ 78B6             >len_NFA         defl    $ - temp_NFA
 195+ 78B6             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 195+ 78B2             >
 195+ 78B2 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 195+ 78B3 57 41 52 4D >                db      "WARM"               // name string in 7-bit ascii, but
 195+ 78B7             >                org     $-1                 // alter last byte of Name just above to set
 195+ 78B6 CD          >                db      {b $} | END_BIT     // msb as name end
 195+ 78B7             >
 195+ 78B7 95 78       >                dw      last_NFA            // Link to previous definition Name
 195+ 78B9             >WARM:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 195+ 78B9 CD D3 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 195+ 78BC             >
 195+ 78BC             >
 195+ 78BC             >                endif           ; ok        // for other definitions it "points" the correct handler
 195+ 78BC             >                // Use of "; ok" to suppress "warning[fwdref]"
 195+ 78BC             >
 195+ 78BC             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 196+ 78BC 50 7C                        dw      BLK_INIT                // blk-init
 197+ 78BE 58 84                        dw      SPLASH                  // splash
 198+ 78C0 A5 63 07 00                  dw      LIT, 7, EMIT            // 7 emit
 198+ 78C4 3F 6F
 199+ 78C6 9D 78                        dw      ABORT                   // abort
 200+ 78C8 40 69                        dw      EXIT                    // exit
 201+ 78CA
 202+ 78CA              //  ______________________________________________________________________
 203+ 78CA              //
 204+ 78CA              // cold         --
 205+ 78CA                              Colon_Def COLD, "COLD", is_normal
 205+ 78CA             >                New_Def  COLD, "COLD", Enter_Ptr, is_normal ; ok
 205+ 78CA             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 205+ 78CA             >
 205+ 78CA             >                // dummy db directives used to calculate length of namec
 205+ 78CA 43 4F 4C 44 >                db      "COLD"
 205+ 78CE             >len_NFA         defl    $ - temp_NFA
 205+ 78CE             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 205+ 78CA             >
 205+ 78CA 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 205+ 78CB 43 4F 4C 44 >                db      "COLD"               // name string in 7-bit ascii, but
 205+ 78CF             >                org     $-1                 // alter last byte of Name just above to set
 205+ 78CE C4          >                db      {b $} | END_BIT     // msb as name end
 205+ 78CF             >
 205+ 78CF B2 78       >                dw      last_NFA            // Link to previous definition Name
 205+ 78D1             >COLD:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 205+ 78D1 CD D3 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 205+ 78D4             >
 205+ 78D4             >
 205+ 78D4             >                endif           ; ok        // for other definitions it "points" the correct handler
 205+ 78D4             >                // Use of "; ok" to suppress "warning[fwdref]"
 205+ 78D4             >
 205+ 78D4             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 206+ 78D4 A5 63 78 63                  dw      LIT, S0_origin          // [ hex $12 +origin ] Literal
 207+ 78D8 A5 63 94 63                  dw      LIT, USER_Pointer       // [ hex $3E +origin ] literal
 208+ 78DC 00 6B                        dw      FETCH                   // @
 209+ 78DE A5 63 06 00                  dw      LIT, 6, PLUS            // 6 +
 209+ 78E2 AB 69
 210+ 78E4 A5 63 14 00                  dw      LIT, 20                 // 20
 211+ 78E8 49 68                        dw      CMOVE
 212+ 78EA A5 63 72 63                  dw      LIT, Latest_origin      // [ hex 0C +origin ] literal
 213+ 78EE 00 6B                        dw      FETCH                   // @
 214+ 78F0 A5 63 24 78                  dw      LIT, Forth_Latest_Ptr   // [ ' forth >body 4 + ] Literal
 215+ 78F4 0C 6B                        dw      STORE                   // !
 216+ 78F6 48 6C 54 6D                  dw      ZERO, NMODE, STORE      // 0 nmode !
 216+ 78FA 0C 6B
 217+ 78FC 32 6D 00 6B                  dw      FIRST, FETCH, DUP       // first @ dup
 217+ 7900 77 6A
 218+ 7902 F7 6D 0C 6B                  dw      USE, STORE              // use !
 219+ 7906 02 6E 0C 6B                  dw      PREV, STORE             // prev !
 220+ 790A A5 63 04 00                  dw      LIT, 4, PLACE, STORE    // 4 place !
 220+ 790E 17 6E 0C 6B
 221+ 7912              //              dw      LIT, 8
 222+ 7912              //              dw      LIT, FLAGS2, CSTORE     // 8 5C6A c!
 223+ 7912 5A 6C 49 6E                  dw      TWO, HP, STORE          // 2 hp !
 223+ 7916 0C 6B
 224+ 7918 B9 78        Warm_Start:     dw      WARM
 225+ 791A D1 78        Cold_Start:     dw      COLD
 226+ 791C 40 69                        dw      EXIT
 227+ 791E
 228+ 791E              //  ______________________________________________________________________
 229+ 791E              WarmRoutine:
 230+ 791E              ColdRoutine:
 231+ 791E DD 21 98 63                  ld      ix, Next_Ptr            // Inner Interpreter Pointer
 232+ 7922
 233+ 7922 D9                           exx
 234+ 7923 E5                           push    hl                      // save Basic's return address
 235+ 7924 D9                           exx
 236+ 7925 ED 73 6E 63                  ld      (SP_Basic), sp
 237+ 7929
 238+ 7929                              // pre-set the four main 16-bit registers
 239+ 7929 ED 7B 78 63                  ld      sp, (S0_origin)         // Calculator Stack Pointer
 240+ 792D 2A 7A 63                     ld      hl, (R0_origin)         // Return Stack Pointer
 241+ 7930                              // ld      de, (R0_origin)         // Return Stack Pointer
 242+ 7930                              ldrphl
 242+ 7930 22 96 63    >                ld      (RP_Pointer),hl
 243+ 7933 EB                           ex      de, hl
 244+ 7934 01 18 79                     ld      bc, Warm_Start          // Instruction Pointer
 245+ 7937
 246+ 7937 38 02                        jr      c, Warm_Skip
 247+ 7939 03                           inc     bc
 248+ 793A 03                           inc     bc
 249+ 793B              Warm_Skip:
 250+ 793B                              next
 250+ 793B DD E9       >                jp      (ix)
 251+ 793D
 252+ 793D              //  ______________________________________________________________________
 253+ 793D              //
 254+ 793D              // basic        --
 255+ 793D                              New_Def BASIC, "BASIC", is_code, is_normal
 255+ 793D             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 255+ 793D             >
 255+ 793D             >                // dummy db directives used to calculate length of namec
 255+ 793D 42 41 53 49 >                db      "BASIC"
 255+ 7941 43          >
 255+ 7942             >len_NFA         defl    $ - temp_NFA
 255+ 7942             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 255+ 793D             >
 255+ 793D 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 255+ 793E 42 41 53 49 >                db      "BASIC"               // name string in 7-bit ascii, but
 255+ 7942 43          >
 255+ 7943             >                org     $-1                 // alter last byte of Name just above to set
 255+ 7942 C3          >                db      {b $} | END_BIT     // msb as name end
 255+ 7943             >
 255+ 7943 CA 78       >                dw      last_NFA            // Link to previous definition Name
 255+ 7945             >BASIC:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 255+ 7945 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 255+ 7945 ~           >
 255+ 7945 ~           >
 255+ 7945             >                endif           ; ok        // for other definitions it "points" the correct handler
 255+ 7945             >                // Use of "; ok" to suppress "warning[fwdref]"
 255+ 7945             >
 255+ 7945             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 256+ 7945 C1                           pop     bc                      // return  TOS  value to Basic
 257+ 7946 21 00 00                     ld      hl, 0
 258+ 7949 39                           add     hl, sp
 259+ 794A ED 7B 6E 63                  ld      sp, (SP_Basic)          // restore Basic's SP
 260+ 794E              //              nop
 261+ 794E 22 6E 63                     ld      (SP_Basic),hl           // but also save Forth's
 262+ 7951 D9                           exx
 263+ 7952 E1                           pop     hl                      // restore h'l'
 264+ 7953 D9                           exx
 265+ 7954 C9                           ret                             // to where USR Basic was left
 266+ 7955
 267+ 7955              //  ______________________________________________________________________
 268+ 7955              //
 269+ 7955              // +-           n1 n2 -- n3
 270+ 7955              // leaves n1 with the sign of n2 as n3.
 271+ 7955                              Colon_Def PLUS_MINUS, "+-", is_normal
 271+ 7955             >                New_Def  PLUS_MINUS, "+-", Enter_Ptr, is_normal ; ok
 271+ 7955             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 271+ 7955             >
 271+ 7955             >                // dummy db directives used to calculate length of namec
 271+ 7955 2B 2D       >                db      "+-"
 271+ 7957             >len_NFA         defl    $ - temp_NFA
 271+ 7957             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 271+ 7955             >
 271+ 7955 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 271+ 7956 2B 2D       >                db      "+-"               // name string in 7-bit ascii, but
 271+ 7958             >                org     $-1                 // alter last byte of Name just above to set
 271+ 7957 AD          >                db      {b $} | END_BIT     // msb as name end
 271+ 7958             >
 271+ 7958 3D 79       >                dw      last_NFA            // Link to previous definition Name
 271+ 795A             >PLUS_MINUS:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 271+ 795A CD D3 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 271+ 795D             >
 271+ 795D             >
 271+ 795D             >                endif           ; ok        // for other definitions it "points" the correct handler
 271+ 795D             >                // Use of "; ok" to suppress "warning[fwdref]"
 271+ 795D             >
 271+ 795D             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 272+ 795D 8B 69                        dw      ZLESS                   // 0<
 273+ 795F                                                              // if
 274+ 795F 1D 64                        dw      ZBRANCH
 275+ 7961 04 00                        dw      Plus_Minus_Endif - $
 276+ 7963 0E 6A                        dw          MINUS               //      minus
 277+ 7965              Plus_Minus_Endif:                               // endif
 278+ 7965 40 69                        dw      EXIT                    // ;
 279+ 7967
 280+ 7967              //  ______________________________________________________________________
 281+ 7967              //
 282+ 7967              // d+-          d1 n -- d2
 283+ 7967              // leaves d1 with the sign of n as d2.
 284+ 7967                              Colon_Def DPLUS_MINUS, "D+-", is_normal
 284+ 7967             >                New_Def  DPLUS_MINUS, "D+-", Enter_Ptr, is_normal ; ok
 284+ 7967             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 284+ 7967             >
 284+ 7967             >                // dummy db directives used to calculate length of namec
 284+ 7967 44 2B 2D    >                db      "D+-"
 284+ 796A             >len_NFA         defl    $ - temp_NFA
 284+ 796A             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 284+ 7967             >
 284+ 7967 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 284+ 7968 44 2B 2D    >                db      "D+-"               // name string in 7-bit ascii, but
 284+ 796B             >                org     $-1                 // alter last byte of Name just above to set
 284+ 796A AD          >                db      {b $} | END_BIT     // msb as name end
 284+ 796B             >
 284+ 796B 55 79       >                dw      last_NFA            // Link to previous definition Name
 284+ 796D             >DPLUS_MINUS:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 284+ 796D CD D3 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 284+ 7970             >
 284+ 7970             >
 284+ 7970             >                endif           ; ok        // for other definitions it "points" the correct handler
 284+ 7970             >                // Use of "; ok" to suppress "warning[fwdref]"
 284+ 7970             >
 284+ 7970             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 285+ 7970 8B 69                        dw      ZLESS                   // 0<
 286+ 7972                                                              // if
 287+ 7972 1D 64                        dw      ZBRANCH
 288+ 7974 04 00                        dw      DPlus_Minus_Endif - $
 289+ 7976 24 6A                        dw          DMINUS              //      dminus
 290+ 7978              DPlus_Minus_Endif:                              // endif
 291+ 7978 40 69                        dw      EXIT                    // ;
 292+ 797A
 293+ 797A              //  ______________________________________________________________________
 294+ 797A              //
 295+ 797A              // abs          n1 -- n2
 296+ 797A                              Colon_Def ABS_OP, "ABS", is_normal
 296+ 797A             >                New_Def  ABS_OP, "ABS", Enter_Ptr, is_normal ; ok
 296+ 797A             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 296+ 797A             >
 296+ 797A             >                // dummy db directives used to calculate length of namec
 296+ 797A 41 42 53    >                db      "ABS"
 296+ 797D             >len_NFA         defl    $ - temp_NFA
 296+ 797D             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 296+ 797A             >
 296+ 797A 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 296+ 797B 41 42 53    >                db      "ABS"               // name string in 7-bit ascii, but
 296+ 797E             >                org     $-1                 // alter last byte of Name just above to set
 296+ 797D D3          >                db      {b $} | END_BIT     // msb as name end
 296+ 797E             >
 296+ 797E 67 79       >                dw      last_NFA            // Link to previous definition Name
 296+ 7980             >ABS_OP:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 296+ 7980 CD D3 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 296+ 7983             >
 296+ 7983             >
 296+ 7983             >                endif           ; ok        // for other definitions it "points" the correct handler
 296+ 7983             >                // Use of "; ok" to suppress "warning[fwdref]"
 296+ 7983             >
 296+ 7983             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 297+ 7983 77 6A                        dw      DUP                     // dup
 298+ 7985 5A 79                        dw      PLUS_MINUS              // +-
 299+ 7987 40 69                        dw      EXIT                    // ;
 300+ 7989
 301+ 7989              //  ______________________________________________________________________
 302+ 7989              //
 303+ 7989              // dabs         d1 -- d2
 304+ 7989                              Colon_Def DABS, "DABS", is_normal
 304+ 7989             >                New_Def  DABS, "DABS", Enter_Ptr, is_normal ; ok
 304+ 7989             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 304+ 7989             >
 304+ 7989             >                // dummy db directives used to calculate length of namec
 304+ 7989 44 41 42 53 >                db      "DABS"
 304+ 798D             >len_NFA         defl    $ - temp_NFA
 304+ 798D             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 304+ 7989             >
 304+ 7989 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 304+ 798A 44 41 42 53 >                db      "DABS"               // name string in 7-bit ascii, but
 304+ 798E             >                org     $-1                 // alter last byte of Name just above to set
 304+ 798D D3          >                db      {b $} | END_BIT     // msb as name end
 304+ 798E             >
 304+ 798E 7A 79       >                dw      last_NFA            // Link to previous definition Name
 304+ 7990             >DABS:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 304+ 7990 CD D3 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 304+ 7993             >
 304+ 7993             >
 304+ 7993             >                endif           ; ok        // for other definitions it "points" the correct handler
 304+ 7993             >                // Use of "; ok" to suppress "warning[fwdref]"
 304+ 7993             >
 304+ 7993             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 305+ 7993 77 6A                        dw      DUP                     // dup
 306+ 7995 6D 79                        dw      DPLUS_MINUS             // d+-
 307+ 7997 40 69                        dw      EXIT                    // ;
 308+ 7999
 309+ 7999              //  ______________________________________________________________________
 310+ 7999              //
 311+ 7999              // m*           n1 n2 -- d
 312+ 7999              // multiply two integer giving a double
 313+ 7999                              Colon_Def MMUL, "M*", is_normal
 313+ 7999             >                New_Def  MMUL, "M*", Enter_Ptr, is_normal ; ok
 313+ 7999             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 313+ 7999             >
 313+ 7999             >                // dummy db directives used to calculate length of namec
 313+ 7999 4D 2A       >                db      "M*"
 313+ 799B             >len_NFA         defl    $ - temp_NFA
 313+ 799B             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 313+ 7999             >
 313+ 7999 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 313+ 799A 4D 2A       >                db      "M*"               // name string in 7-bit ascii, but
 313+ 799C             >                org     $-1                 // alter last byte of Name just above to set
 313+ 799B AA          >                db      {b $} | END_BIT     // msb as name end
 313+ 799C             >
 313+ 799C 89 79       >                dw      last_NFA            // Link to previous definition Name
 313+ 799E             >MMUL:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 313+ 799E CD D3 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 313+ 79A1             >
 313+ 79A1             >
 313+ 79A1             >                endif           ; ok        // for other definitions it "points" the correct handler
 313+ 79A1             >                // Use of "; ok" to suppress "warning[fwdref]"
 313+ 79A1             >
 313+ 79A1             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 314+ 79A1 D2 6A 03 69                  dw      TWO_DUP, XOR_OP, TO_R   // 2dup xor >r
 314+ 79A5 4D 69
 315+ 79A7 80 79 6C 6A                  dw      ABS_OP, SWAP            // abs swap
 316+ 79AB 80 79 78 68                  dw      ABS_OP, UM_MUL          // abs um*
 317+ 79AF 5B 69 6D 79                  dw      R_TO, DPLUS_MINUS       // r> d+-
 318+ 79B3 40 69                        dw      EXIT                    // ;
 319+ 79B5
 320+ 79B5              //  ______________________________________________________________________
 321+ 79B5              //
 322+ 79B5              // sm/rem       d n -- q r
 323+ 79B5              // Symmetric division: divides a double into n giving quotient q and remainder r
 324+ 79B5              // the remainder has the sign of d.
 325+ 79B5                              Colon_Def SMDIVM, "SM/REM", is_normal
 325+ 79B5             >                New_Def  SMDIVM, "SM/REM", Enter_Ptr, is_normal ; ok
 325+ 79B5             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 325+ 79B5             >
 325+ 79B5             >                // dummy db directives used to calculate length of namec
 325+ 79B5 53 4D 2F 52 >                db      "SM/REM"
 325+ 79B9 45 4D       >
 325+ 79BB             >len_NFA         defl    $ - temp_NFA
 325+ 79BB             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 325+ 79B5             >
 325+ 79B5 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 325+ 79B6 53 4D 2F 52 >                db      "SM/REM"               // name string in 7-bit ascii, but
 325+ 79BA 45 4D       >
 325+ 79BC             >                org     $-1                 // alter last byte of Name just above to set
 325+ 79BB CD          >                db      {b $} | END_BIT     // msb as name end
 325+ 79BC             >
 325+ 79BC 99 79       >                dw      last_NFA            // Link to previous definition Name
 325+ 79BE             >SMDIVM:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 325+ 79BE CD D3 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 325+ 79C1             >
 325+ 79C1             >
 325+ 79C1             >                endif           ; ok        // for other definitions it "points" the correct handler
 325+ 79C1             >                // Use of "; ok" to suppress "warning[fwdref]"
 325+ 79C1             >
 325+ 79C1             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 326+ 79C1 3C 6A 4D 69                  dw      OVER, TO_R, TO_R        // over >r >r
 326+ 79C5 4D 69
 327+ 79C7 90 79 69 69                  dw      DABS, R_OP, ABS_OP      // dabs r abs
 327+ 79CB 80 79
 328+ 79CD A7 68                        dw      UMDIVMOD                // um/mod
 329+ 79CF 5B 69                        dw      R_TO                    // r>
 330+ 79D1 69 69 03 69                  dw      R_OP, XOR_OP            // r xor
 331+ 79D5 5A 79 6C 6A                  dw      PLUS_MINUS, SWAP        // +- swap
 332+ 79D9 5B 69                        dw      R_TO                    // r>
 333+ 79DB 5A 79 6C 6A                  dw      PLUS_MINUS, SWAP        // +- swap
 334+ 79DF 40 69                        dw      EXIT                    // ;
 335+ 79E1
 336+ 79E1              //  ______________________________________________________________________
 337+ 79E1              //
 338+ 79E1              // fm/mod       d n -- q r
 339+ 79E1              // Floored division: divides a double into n giving quotient q and remainder r
 340+ 79E1              // the remainder has the sign of d.
 341+ 79E1                              Colon_Def FMDIVM, "FM/MOD", is_normal
 341+ 79E1             >                New_Def  FMDIVM, "FM/MOD", Enter_Ptr, is_normal ; ok
 341+ 79E1             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 341+ 79E1             >
 341+ 79E1             >                // dummy db directives used to calculate length of namec
 341+ 79E1 46 4D 2F 4D >                db      "FM/MOD"
 341+ 79E5 4F 44       >
 341+ 79E7             >len_NFA         defl    $ - temp_NFA
 341+ 79E7             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 341+ 79E1             >
 341+ 79E1 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 341+ 79E2 46 4D 2F 4D >                db      "FM/MOD"               // name string in 7-bit ascii, but
 341+ 79E6 4F 44       >
 341+ 79E8             >                org     $-1                 // alter last byte of Name just above to set
 341+ 79E7 C4          >                db      {b $} | END_BIT     // msb as name end
 341+ 79E8             >
 341+ 79E8 B5 79       >                dw      last_NFA            // Link to previous definition Name
 341+ 79EA             >FMDIVM:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 341+ 79EA CD D3 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 341+ 79ED             >
 341+ 79ED             >
 341+ 79ED             >                endif           ; ok        // for other definitions it "points" the correct handler
 341+ 79ED             >                // Use of "; ok" to suppress "warning[fwdref]"
 341+ 79ED             >
 341+ 79ED             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 342+ 79ED 77 6A 4D 69                  dw      DUP, TO_R               // dup >r
 343+ 79F1 BE 79                        dw      SMDIVM
 344+ 79F3 3C 6A 77 6A                  dw      OVER, DUP
 345+ 79F7 71 69 71 69                  dw      ZEQUAL, ZEQUAL
 346+ 79FB 6C 6A 8B 69                  dw      SWAP, ZLESS
 347+ 79FF 69 69 8B 69                  dw      R_OP, ZLESS
 348+ 7A03 03 69 DE 68                  dw      XOR_OP, AND_OP
 349+ 7A07 1D 64                        dw      ZBRANCH
 350+ 7A09 10 00                        dw      Fm_Mod_Else - $
 351+ 7A0B D4 69                        dw          ONE_SUBTRACT
 352+ 7A0D 6C 6A 5B 69                  dw          SWAP, R_TO
 353+ 7A11 AB 69 6C 6A                  dw          PLUS, SWAP
 354+ 7A15 08 64                        dw      BRANCH
 355+ 7A17 06 00                        dw      Fm_Mod_Endif - $
 356+ 7A19              Fm_Mod_Else:
 357+ 7A19 5B 69 4A 6A                  dw          R_TO, DROP
 358+ 7A1D              Fm_Mod_Endif:
 359+ 7A1D 40 69                        dw      EXIT
 360+ 7A1F              //              dw      TWO_DUP                 // 2dup
 361+ 7A1F              //              dw      XOR_OP, TO_R, TO_R      // xor >r >r
 362+ 7A1F              //              dw      DABS, R_OP, ABS_OP      // dabs r abs
 363+ 7A1F              //              dw      UMDIVMOD                // um/mod
 364+ 7A1F              //              dw      SWAP                    // swap
 365+ 7A1F              //              dw      II, ZLESS               // i'
 366+ 7A1F              //              dw      ONE, AND_OP, PLUS       // 0< 1 and +
 367+ 7A1F              //              dw      R_TO                    // r>
 368+ 7A1F              //              dw      PLUS_MINUS, SWAP        // +- swap
 369+ 7A1F              //              dw      R_OP                    // r@
 370+ 7A1F              //              dw      ZLESS                   // i'
 371+ 7A1F              //              dw      ONE, AND_OP, PLUS       // 0< 1 and +
 372+ 7A1F              //              dw      R_TO                    // r>
 373+ 7A1F              //              dw      PLUS_MINUS              // +- swap
 374+ 7A1F              //              dw      EXIT                    // ;
 375+ 7A1F
 376+ 7A1F              //  ______________________________________________________________________
 377+ 7A1F              //
 378+ 7A1F              // m/mod        d n -- q r
 379+ 7A1F              // multiply two integer giving a double
 380+ 7A1F                              Colon_Def MDIVM, "M/MOD", is_normal
 380+ 7A1F             >                New_Def  MDIVM, "M/MOD", Enter_Ptr, is_normal ; ok
 380+ 7A1F             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 380+ 7A1F             >
 380+ 7A1F             >                // dummy db directives used to calculate length of namec
 380+ 7A1F 4D 2F 4D 4F >                db      "M/MOD"
 380+ 7A23 44          >
 380+ 7A24             >len_NFA         defl    $ - temp_NFA
 380+ 7A24             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 380+ 7A1F             >
 380+ 7A1F 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 380+ 7A20 4D 2F 4D 4F >                db      "M/MOD"               // name string in 7-bit ascii, but
 380+ 7A24 44          >
 380+ 7A25             >                org     $-1                 // alter last byte of Name just above to set
 380+ 7A24 C4          >                db      {b $} | END_BIT     // msb as name end
 380+ 7A25             >
 380+ 7A25 E1 79       >                dw      last_NFA            // Link to previous definition Name
 380+ 7A27             >MDIVM:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 380+ 7A27 CD D3 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 380+ 7A2A             >
 380+ 7A2A             >
 380+ 7A2A             >                endif           ; ok        // for other definitions it "points" the correct handler
 380+ 7A2A             >                // Use of "; ok" to suppress "warning[fwdref]"
 380+ 7A2A             >
 380+ 7A2A             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 381+ 7A2A BE 79                        dw      SMDIVM
 382+ 7A2C 40 69                        dw      EXIT                    // ;
 383+ 7A2E
 384+ 7A2E              //  ______________________________________________________________________
 385+ 7A2E              //
 386+ 7A2E              // m/           d n -- q
 387+ 7A2E              // multiply two integer giving a double
 388+ 7A2E                              Colon_Def MDIV, "M/", is_normal
 388+ 7A2E             >                New_Def  MDIV, "M/", Enter_Ptr, is_normal ; ok
 388+ 7A2E             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 388+ 7A2E             >
 388+ 7A2E             >                // dummy db directives used to calculate length of namec
 388+ 7A2E 4D 2F       >                db      "M/"
 388+ 7A30             >len_NFA         defl    $ - temp_NFA
 388+ 7A30             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 388+ 7A2E             >
 388+ 7A2E 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 388+ 7A2F 4D 2F       >                db      "M/"               // name string in 7-bit ascii, but
 388+ 7A31             >                org     $-1                 // alter last byte of Name just above to set
 388+ 7A30 AF          >                db      {b $} | END_BIT     // msb as name end
 388+ 7A31             >
 388+ 7A31 1F 7A       >                dw      last_NFA            // Link to previous definition Name
 388+ 7A33             >MDIV:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 388+ 7A33 CD D3 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 388+ 7A36             >
 388+ 7A36             >
 388+ 7A36             >                endif           ; ok        // for other definitions it "points" the correct handler
 388+ 7A36             >                // Use of "; ok" to suppress "warning[fwdref]"
 388+ 7A36             >
 388+ 7A36             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 389+ 7A36 27 7A 53 6A                  dw      MDIVM, NIP
 390+ 7A3A 40 69                        dw      EXIT                    // ;
 391+ 7A3C
 392+ 7A3C              //  ______________________________________________________________________
 393+ 7A3C              //
 394+ 7A3C              // *            n1 n2 -- n3
 395+ 7A3C              // multiply two integer
 396+ 7A3C                              Colon_Def MUL, "*", is_normal
 396+ 7A3C             >                New_Def  MUL, "*", Enter_Ptr, is_normal ; ok
 396+ 7A3C             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 396+ 7A3C             >
 396+ 7A3C             >                // dummy db directives used to calculate length of namec
 396+ 7A3C 2A          >                db      "*"
 396+ 7A3D             >len_NFA         defl    $ - temp_NFA
 396+ 7A3D             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 396+ 7A3C             >
 396+ 7A3C 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 396+ 7A3D 2A          >                db      "*"               // name string in 7-bit ascii, but
 396+ 7A3E             >                org     $-1                 // alter last byte of Name just above to set
 396+ 7A3D AA          >                db      {b $} | END_BIT     // msb as name end
 396+ 7A3E             >
 396+ 7A3E 2E 7A       >                dw      last_NFA            // Link to previous definition Name
 396+ 7A40             >MUL:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 396+ 7A40 CD D3 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 396+ 7A43             >
 396+ 7A43             >
 396+ 7A43             >                endif           ; ok        // for other definitions it "points" the correct handler
 396+ 7A43             >                // Use of "; ok" to suppress "warning[fwdref]"
 396+ 7A43             >
 396+ 7A43             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 397+ 7A43 9E 79 4A 6A                  dw      MMUL, DROP              // m* drop
 398+ 7A47 40 69                        dw      EXIT                    // ;
 399+ 7A49
 400+ 7A49              //  ______________________________________________________________________
 401+ 7A49              //
 402+ 7A49              // /mod         n1 n2 -- n3 n4
 403+ 7A49              // leaves quotient n4 and remainder n3 of the integer division n1 / n2.
 404+ 7A49              // The remainder has the sign of n1
 405+ 7A49                              Colon_Def DIVMOD, "/MOD", is_normal
 405+ 7A49             >                New_Def  DIVMOD, "/MOD", Enter_Ptr, is_normal ; ok
 405+ 7A49             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 405+ 7A49             >
 405+ 7A49             >                // dummy db directives used to calculate length of namec
 405+ 7A49 2F 4D 4F 44 >                db      "/MOD"
 405+ 7A4D             >len_NFA         defl    $ - temp_NFA
 405+ 7A4D             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 405+ 7A49             >
 405+ 7A49 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 405+ 7A4A 2F 4D 4F 44 >                db      "/MOD"               // name string in 7-bit ascii, but
 405+ 7A4E             >                org     $-1                 // alter last byte of Name just above to set
 405+ 7A4D C4          >                db      {b $} | END_BIT     // msb as name end
 405+ 7A4E             >
 405+ 7A4E 3C 7A       >                dw      last_NFA            // Link to previous definition Name
 405+ 7A50             >DIVMOD:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 405+ 7A50 CD D3 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 405+ 7A53             >
 405+ 7A53             >
 405+ 7A53             >                endif           ; ok        // for other definitions it "points" the correct handler
 405+ 7A53             >                // Use of "; ok" to suppress "warning[fwdref]"
 405+ 7A53             >
 405+ 7A53             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 406+ 7A53 4D 69 97 6E                  dw      TO_R, S_TO_D, R_TO      // >r s->d r>
 406+ 7A57 5B 69
 407+ 7A59 27 7A                        dw      MDIVM                   // m/mod
 408+ 7A5B 40 69                        dw      EXIT                    // ;
 409+ 7A5D
 410+ 7A5D              //  ______________________________________________________________________
 411+ 7A5D              //
 412+ 7A5D              // /            n1 n2 -- n3
 413+ 7A5D              // division
 414+ 7A5D                              Colon_Def DIV, "/", is_normal
 414+ 7A5D             >                New_Def  DIV, "/", Enter_Ptr, is_normal ; ok
 414+ 7A5D             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 414+ 7A5D             >
 414+ 7A5D             >                // dummy db directives used to calculate length of namec
 414+ 7A5D 2F          >                db      "/"
 414+ 7A5E             >len_NFA         defl    $ - temp_NFA
 414+ 7A5E             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 414+ 7A5D             >
 414+ 7A5D 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 414+ 7A5E 2F          >                db      "/"               // name string in 7-bit ascii, but
 414+ 7A5F             >                org     $-1                 // alter last byte of Name just above to set
 414+ 7A5E AF          >                db      {b $} | END_BIT     // msb as name end
 414+ 7A5F             >
 414+ 7A5F 49 7A       >                dw      last_NFA            // Link to previous definition Name
 414+ 7A61             >DIV:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 414+ 7A61 CD D3 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 414+ 7A64             >
 414+ 7A64             >
 414+ 7A64             >                endif           ; ok        // for other definitions it "points" the correct handler
 414+ 7A64             >                // Use of "; ok" to suppress "warning[fwdref]"
 414+ 7A64             >
 414+ 7A64             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 415+ 7A64 50 7A 53 6A                  dw      DIVMOD, NIP             // /mod nip
 416+ 7A68 40 69                        dw      EXIT                    // ;
 417+ 7A6A
 418+ 7A6A              //  ______________________________________________________________________
 419+ 7A6A              //
 420+ 7A6A              // mod          n1 n2 -- n3
 421+ 7A6A                              Colon_Def MOD, "MOD", is_normal
 421+ 7A6A             >                New_Def  MOD, "MOD", Enter_Ptr, is_normal ; ok
 421+ 7A6A             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 421+ 7A6A             >
 421+ 7A6A             >                // dummy db directives used to calculate length of namec
 421+ 7A6A 4D 4F 44    >                db      "MOD"
 421+ 7A6D             >len_NFA         defl    $ - temp_NFA
 421+ 7A6D             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 421+ 7A6A             >
 421+ 7A6A 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 421+ 7A6B 4D 4F 44    >                db      "MOD"               // name string in 7-bit ascii, but
 421+ 7A6E             >                org     $-1                 // alter last byte of Name just above to set
 421+ 7A6D C4          >                db      {b $} | END_BIT     // msb as name end
 421+ 7A6E             >
 421+ 7A6E 5D 7A       >                dw      last_NFA            // Link to previous definition Name
 421+ 7A70             >MOD:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 421+ 7A70 CD D3 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 421+ 7A73             >
 421+ 7A73             >
 421+ 7A73             >                endif           ; ok        // for other definitions it "points" the correct handler
 421+ 7A73             >                // Use of "; ok" to suppress "warning[fwdref]"
 421+ 7A73             >
 421+ 7A73             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 422+ 7A73 50 7A 4A 6A                  dw      DIVMOD, DROP            // /mod drop
 423+ 7A77 40 69                        dw      EXIT                    // ;
 424+ 7A79
 425+ 7A79              //  ______________________________________________________________________
 426+ 7A79              //
 427+ 7A79              // */mod        n1 n2 n3 -- n4 n5
 428+ 7A79              // leaves the quotient n5 and the remainder n4 of the operation
 429+ 7A79              // (n1 * n2) / n3. The intermediate passage through a double number
 430+ 7A79              // avoids loss of precision
 431+ 7A79                              Colon_Def MUL_DIV_MOD, "*/MOD", is_normal
 431+ 7A79             >                New_Def  MUL_DIV_MOD, "*/MOD", Enter_Ptr, is_normal ; ok
 431+ 7A79             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 431+ 7A79             >
 431+ 7A79             >                // dummy db directives used to calculate length of namec
 431+ 7A79 2A 2F 4D 4F >                db      "*/MOD"
 431+ 7A7D 44          >
 431+ 7A7E             >len_NFA         defl    $ - temp_NFA
 431+ 7A7E             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 431+ 7A79             >
 431+ 7A79 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 431+ 7A7A 2A 2F 4D 4F >                db      "*/MOD"               // name string in 7-bit ascii, but
 431+ 7A7E 44          >
 431+ 7A7F             >                org     $-1                 // alter last byte of Name just above to set
 431+ 7A7E C4          >                db      {b $} | END_BIT     // msb as name end
 431+ 7A7F             >
 431+ 7A7F 6A 7A       >                dw      last_NFA            // Link to previous definition Name
 431+ 7A81             >MUL_DIV_MOD:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 431+ 7A81 CD D3 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 431+ 7A84             >
 431+ 7A84             >
 431+ 7A84             >                endif           ; ok        // for other definitions it "points" the correct handler
 431+ 7A84             >                // Use of "; ok" to suppress "warning[fwdref]"
 431+ 7A84             >
 431+ 7A84             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 432+ 7A84 4D 69 9E 79                  dw      TO_R, MMUL              // >r  m*
 433+ 7A88 5B 69 27 7A                  dw      R_TO, MDIVM             // r>  m/mod
 434+ 7A8C 40 69                        dw      EXIT                    // ;
 435+ 7A8E
 436+ 7A8E              //  ______________________________________________________________________
 437+ 7A8E              //
 438+ 7A8E              // */          n1 n2 n3 -- n4
 439+ 7A8E              // (n1 * n2) / n3. The intermediate passage through a double number avoids loss of precision
 440+ 7A8E                              Colon_Def MUL_DIV, "*/", is_normal
 440+ 7A8E             >                New_Def  MUL_DIV, "*/", Enter_Ptr, is_normal ; ok
 440+ 7A8E             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 440+ 7A8E             >
 440+ 7A8E             >                // dummy db directives used to calculate length of namec
 440+ 7A8E 2A 2F       >                db      "*/"
 440+ 7A90             >len_NFA         defl    $ - temp_NFA
 440+ 7A90             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 440+ 7A8E             >
 440+ 7A8E 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 440+ 7A8F 2A 2F       >                db      "*/"               // name string in 7-bit ascii, but
 440+ 7A91             >                org     $-1                 // alter last byte of Name just above to set
 440+ 7A90 AF          >                db      {b $} | END_BIT     // msb as name end
 440+ 7A91             >
 440+ 7A91 79 7A       >                dw      last_NFA            // Link to previous definition Name
 440+ 7A93             >MUL_DIV:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 440+ 7A93 CD D3 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 440+ 7A96             >
 440+ 7A96             >
 440+ 7A96             >                endif           ; ok        // for other definitions it "points" the correct handler
 440+ 7A96             >                // Use of "; ok" to suppress "warning[fwdref]"
 440+ 7A96             >
 440+ 7A96             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 441+ 7A96 81 7A                        dw     MUL_DIV_MOD              // */mod
 442+ 7A98 53 6A                        dw     NIP                      // nip
 443+ 7A9A 40 69                        dw     EXIT                     // ;
 444+ 7A9C
 445+ 7A9C
 446+ 7A9C              //  ______________________________________________________________________
 447+ 7A9C              //
 448+ 7A9C              // m/mod        ud1 u2 -- u3 ud4
 449+ 7A9C              // mixed operation: it leaves the remainder u3 and the quotient ud4 of ud1 / u1.
 450+ 7A9C              // All terms are unsigned.
 451+ 7A9C              //              Colon_Def MDIV_MOD, "M/MOD", is_normal
 452+ 7A9C              //              dw      TO_R                    // >r           ( ud1 )
 453+ 7A9C              //              dw      ZERO, R_OP, UMDIVMOD    // 0 r um/mod   ( l rem1 h/r )
 454+ 7A9C              //              dw      R_TO, SWAP, TO_R        // r> swap >r   ( l rem )
 455+ 7A9C              //              dw      UMDIVMOD                // um/mod       ( rem2 l/r )
 456+ 7A9C              //              dw      R_TO                    // r>           ( rem2 l/r h/r )
 457+ 7A9C              //              dw      EXIT                    // ;
 458+ 7A9C
 459+ 7A9C              //  ______________________________________________________________________
 460+ 7A9C              //
 461+ 7A9C              // (line)       n1 n2 -- a b
 462+ 7A9C              // sends the line n1 of block n2 to the disk buffer.
 463+ 7A9C              // it returns the address a and ca counter b = C/L meaning a whole line.
 464+ 7A9C                              Colon_Def CLINE, "(LINE)", is_normal
 464+ 7A9C             >                New_Def  CLINE, "(LINE)", Enter_Ptr, is_normal ; ok
 464+ 7A9C             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 464+ 7A9C             >
 464+ 7A9C             >                // dummy db directives used to calculate length of namec
 464+ 7A9C 28 4C 49 4E >                db      "(LINE)"
 464+ 7AA0 45 29       >
 464+ 7AA2             >len_NFA         defl    $ - temp_NFA
 464+ 7AA2             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 464+ 7A9C             >
 464+ 7A9C 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 464+ 7A9D 28 4C 49 4E >                db      "(LINE)"               // name string in 7-bit ascii, but
 464+ 7AA1 45 29       >
 464+ 7AA3             >                org     $-1                 // alter last byte of Name just above to set
 464+ 7AA2 A9          >                db      {b $} | END_BIT     // msb as name end
 464+ 7AA3             >
 464+ 7AA3 8E 7A       >                dw      last_NFA            // Link to previous definition Name
 464+ 7AA5             >CLINE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 464+ 7AA5 CD D3 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 464+ 7AA8             >
 464+ 7AA8             >
 464+ 7AA8             >                endif           ; ok        // for other definitions it "points" the correct handler
 464+ 7AA8             >                // Use of "; ok" to suppress "warning[fwdref]"
 464+ 7AA8             >
 464+ 7AA8             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 465+ 7AA8 4D 69                        dw      TO_R                    // >r
 466+ 7AAA F6 6B                        dw      NOOP                    // noop
 467+ 7AAC 82 6C                        dw      CL                      // c/l
 468+ 7AAE 8F 6C 81 7A                  dw      BBUF, MUL_DIV_MOD       // */mod
 469+ 7AB2 5B 69                        dw      R_TO                    // r>
 470+ 7AB4 9C 6C 40 7A                  dw      BSCR, MUL, PLUS         // b/scr * +
 470+ 7AB8 AB 69
 471+ 7ABA 6F 7D                        dw      BLOCK                   // block   ( forward )
 472+ 7ABC AB 69                        dw      PLUS                    // +
 473+ 7ABE F6 6B                        dw      NOOP                    // noop
 474+ 7AC0 82 6C                        dw      CL                      // c/l
 475+ 7AC2 40 69                        dw      EXIT                    // ;
 476+ 7AC4
 477+ 7AC4              //  ______________________________________________________________________
 478+ 7AC4              //
 479+ 7AC4              // .line        n1 n2 --
 480+ 7AC4              // Sends to output line  n1  of screen n2.
 481+ 7AC4                              Colon_Def DOT_LINE, ".LINE", is_normal
 481+ 7AC4             >                New_Def  DOT_LINE, ".LINE", Enter_Ptr, is_normal ; ok
 481+ 7AC4             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 481+ 7AC4             >
 481+ 7AC4             >                // dummy db directives used to calculate length of namec
 481+ 7AC4 2E 4C 49 4E >                db      ".LINE"
 481+ 7AC8 45          >
 481+ 7AC9             >len_NFA         defl    $ - temp_NFA
 481+ 7AC9             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 481+ 7AC4             >
 481+ 7AC4 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 481+ 7AC5 2E 4C 49 4E >                db      ".LINE"               // name string in 7-bit ascii, but
 481+ 7AC9 45          >
 481+ 7ACA             >                org     $-1                 // alter last byte of Name just above to set
 481+ 7AC9 C5          >                db      {b $} | END_BIT     // msb as name end
 481+ 7ACA             >
 481+ 7ACA 9C 7A       >                dw      last_NFA            // Link to previous definition Name
 481+ 7ACC             >DOT_LINE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 481+ 7ACC CD D3 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 481+ 7ACF             >
 481+ 7ACF             >
 481+ 7ACF             >                endif           ; ok        // for other definitions it "points" the correct handler
 481+ 7ACF             >                // Use of "; ok" to suppress "warning[fwdref]"
 481+ 7ACF             >
 481+ 7ACF             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 482+ 7ACF A5 7A 5E 72                  dw      CLINE, LTRAILING, TYPE  // (line) -trailing type
 482+ 7AD3 3D 72
 483+ 7AD5 40 69                        dw      EXIT                    // ;
 484+ 7AD7
 485+ 7AD7              //  ______________________________________________________________________
 486+ 7AD7              //
 487+ 7AD7              // message       n1 n2 --
 488+ 7AD7              // prints error message to current channel.
 489+ 7AD7              // if WARNING is 0, prints "MSG#n".
 490+ 7AD7              // if WARNING is 1, prints line n of screen 4.
 491+ 7AD7              // if WARNING is -1, see ERROR
 492+ 7AD7              // value can be negative or beyond block 4.
 493+ 7AD7                              Colon_Def MESSAGE, "MESSAGE", is_normal
 493+ 7AD7             >                New_Def  MESSAGE, "MESSAGE", Enter_Ptr, is_normal ; ok
 493+ 7AD7             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 493+ 7AD7             >
 493+ 7AD7             >                // dummy db directives used to calculate length of namec
 493+ 7AD7 4D 45 53 53 >                db      "MESSAGE"
 493+ 7ADB 41 47 45    >
 493+ 7ADE             >len_NFA         defl    $ - temp_NFA
 493+ 7ADE             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 493+ 7AD7             >
 493+ 7AD7 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 493+ 7AD8 4D 45 53 53 >                db      "MESSAGE"               // name string in 7-bit ascii, but
 493+ 7ADC 41 47 45    >
 493+ 7ADF             >                org     $-1                 // alter last byte of Name just above to set
 493+ 7ADE C5          >                db      {b $} | END_BIT     // msb as name end
 493+ 7ADF             >
 493+ 7ADF C4 7A       >                dw      last_NFA            // Link to previous definition Name
 493+ 7AE1             >MESSAGE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 493+ 7AE1 CD D3 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 493+ 7AE4             >
 493+ 7AE4             >
 493+ 7AE4             >                endif           ; ok        // for other definitions it "points" the correct handler
 493+ 7AE4             >                // Use of "; ok" to suppress "warning[fwdref]"
 493+ 7AE4             >
 493+ 7AE4             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 494+ 7AE4 02 6D 00 6B                  dw      WARNING, FETCH          // warning @
 495+ 7AE8                                                              // if
 496+ 7AE8 1D 64                        dw      ZBRANCH
 497+ 7AEA 18 00                        dw      Message_Else - $
 498+ 7AEC A5 63 04 00                  dw          LIT, 4              //      4
 499+ 7AF0 89 6D 00 6B                  dw          OFFSET, FETCH       //      offset @
 500+ 7AF4 9C 6C 61 7A                  dw          BSCR, DIV, SUBTRACT //      b/scr / -
 500+ 7AF8 A4 6E
 501+ 7AFA CC 7A                        dw          DOT_LINE            //      .line
 502+ 7AFC 5C 6F                        dw          SPACE               //      space
 503+ 7AFE                                                              // else
 504+ 7AFE
 505+ 7AFE 08 64                        dw      BRANCH
 506+ 7B00 0B 00                        dw      Message_ENdif - $
 507+ 7B02              Message_Else:
 508+ 7B02 15 74                        dw          C_DOT_QUOTE         //      .( msg#)
 509+ 7B04 04 6D 73 67                  db          4, "msg#"
 509+ 7B08 23
 510+ 7B09 4A 83                        dw          DOT                 //      .  ( forward )
 511+ 7B0B              Message_ENdif:                                  // endif
 512+ 7B0B 40 69                        dw      EXIT                    // ;
 513+ 7B0D
 514+ 7B0D
 515+ 7B0D              //  ______________________________________________________________________
 516+ 7B0D              //
 517+ 7B0D              // device
 518+ 7B0D                              Variable_Def DEVICE,   "DEVICE",   2
 518+ 7B0D             >                New_Def  DEVICE, "DEVICE", Variable_Ptr, is_normal
 518+ 7B0D             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 518+ 7B0D             >
 518+ 7B0D             >                // dummy db directives used to calculate length of namec
 518+ 7B0D 44 45 56 49 >                db      "DEVICE"
 518+ 7B11 43 45       >
 518+ 7B13             >len_NFA         defl    $ - temp_NFA
 518+ 7B13             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 518+ 7B0D             >
 518+ 7B0D 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 518+ 7B0E 44 45 56 49 >                db      "DEVICE"               // name string in 7-bit ascii, but
 518+ 7B12 43 45       >
 518+ 7B14             >                org     $-1                 // alter last byte of Name just above to set
 518+ 7B13 C5          >                db      {b $} | END_BIT     // msb as name end
 518+ 7B14             >
 518+ 7B14 D7 7A       >                dw      last_NFA            // Link to previous definition Name
 518+ 7B16             >DEVICE:          if Variable_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 518+ 7B16 CD 28 6C    >                call    Variable_Ptr ; ok        // for primitive definitions  actual code
 518+ 7B19             >
 518+ 7B19             >
 518+ 7B19             >                endif           ; ok        // for other definitions it "points" the correct handler
 518+ 7B19             >                // Use of "; ok" to suppress "warning[fwdref]"
 518+ 7B19             >
 518+ 7B19             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 518+ 7B19 02 00       >                dw      2
 519+ 7B1B
 520+ 7B1B              //  ______________________________________________________________________
 521+ 7B1B
# file closed: C:\Zx\CSpect\Projects\vForth16_DIRECT_RP/source/L2.asm
 113  7B1B                              include "next-opt1.asm"
# file opened: C:\Zx\CSpect\Projects\vForth16_DIRECT_RP/source/next-opt1.asm
   1+ 7B1B              //  ______________________________________________________________________
   2+ 7B1B              //
   3+ 7B1B              //  next-opt.asm
   4+ 7B1B              //
   5+ 7B1B              //  ZX Spectrum Next - peculiar definitions
   6+ 7B1B              //  ______________________________________________________________________
   7+ 7B1B
   8+ 7B1B              //  ______________________________________________________________________
   9+ 7B1B              //
  10+ 7B1B              // reg@         n -- b
  11+ 7B1B              // read Next REGister n giving byte b
  12+ 7B1B              //
  13+ 7B1B              //              Colon_Def REG_FETCH, "REG@", is_normal
  14+ 7B1B              //              dw      LIT, $243B
  15+ 7B1B              //              dw      PSTORE
  16+ 7B1B              //              dw      LIT, $253B
  17+ 7B1B              //              dw      PFETCH
  18+ 7B1B              //              dw      EXIT
  19+ 7B1B                              New_Def REG_FETCH, "REG@", is_code, is_normal
  19+ 7B1B             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  19+ 7B1B             >
  19+ 7B1B             >                // dummy db directives used to calculate length of namec
  19+ 7B1B 52 45 47 40 >                db      "REG@"
  19+ 7B1F             >len_NFA         defl    $ - temp_NFA
  19+ 7B1F             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  19+ 7B1B             >
  19+ 7B1B 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  19+ 7B1C 52 45 47 40 >                db      "REG@"               // name string in 7-bit ascii, but
  19+ 7B20             >                org     $-1                 // alter last byte of Name just above to set
  19+ 7B1F C0          >                db      {b $} | END_BIT     // msb as name end
  19+ 7B20             >
  19+ 7B20 0D 7B       >                dw      last_NFA            // Link to previous definition Name
  19+ 7B22             >REG_FETCH:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
  19+ 7B22 ~           >                call    runcode ; ok        // for primitive definitions  actual code
  19+ 7B22 ~           >
  19+ 7B22 ~           >
  19+ 7B22             >                endif           ; ok        // for other definitions it "points" the correct handler
  19+ 7B22             >                // Use of "; ok" to suppress "warning[fwdref]"
  19+ 7B22             >
  19+ 7B22             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  20+ 7B22 D9                           exx
  21+ 7B23 01 3B 24                     ld      bc, $243B
  22+ 7B26 E1                           pop     hl
  23+ 7B27 ED 69                        out     (c), l
  24+ 7B29 04                           inc     b
  25+ 7B2A ED 68                        in      l, (c)
  26+ 7B2C E5                           push    hl
  27+ 7B2D D9                           exx
  28+ 7B2E                              next
  28+ 7B2E DD E9       >                jp      (ix)
  29+ 7B30
  30+ 7B30
  31+ 7B30              //  ______________________________________________________________________
  32+ 7B30              //
  33+ 7B30              // reg!         b n --
  34+ 7B30              // write value b to Next REGister n
  35+ 7B30              //
  36+ 7B30              //              Colon_Def REG_STORE, "REG!", is_normal
  37+ 7B30              //              dw      LIT, $243B
  38+ 7B30              //              dw      PSTORE
  39+ 7B30              //              dw      LIT, $253B
  40+ 7B30              //              dw      PSTORE
  41+ 7B30              //              dw      EXIT
  42+ 7B30                              New_Def REG_STORE, "REG!", is_code, is_normal
  42+ 7B30             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  42+ 7B30             >
  42+ 7B30             >                // dummy db directives used to calculate length of namec
  42+ 7B30 52 45 47 21 >                db      "REG!"
  42+ 7B34             >len_NFA         defl    $ - temp_NFA
  42+ 7B34             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  42+ 7B30             >
  42+ 7B30 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  42+ 7B31 52 45 47 21 >                db      "REG!"               // name string in 7-bit ascii, but
  42+ 7B35             >                org     $-1                 // alter last byte of Name just above to set
  42+ 7B34 A1          >                db      {b $} | END_BIT     // msb as name end
  42+ 7B35             >
  42+ 7B35 1B 7B       >                dw      last_NFA            // Link to previous definition Name
  42+ 7B37             >REG_STORE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
  42+ 7B37 ~           >                call    runcode ; ok        // for primitive definitions  actual code
  42+ 7B37 ~           >
  42+ 7B37 ~           >
  42+ 7B37             >                endif           ; ok        // for other definitions it "points" the correct handler
  42+ 7B37             >                // Use of "; ok" to suppress "warning[fwdref]"
  42+ 7B37             >
  42+ 7B37             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  43+ 7B37 D9                           exx
  44+ 7B38 01 3B 24                     ld      bc, $243B
  45+ 7B3B E1                           pop     hl
  46+ 7B3C ED 69                        out     (c), l
  47+ 7B3E 04                           inc     b
  48+ 7B3F E1                           pop     hl
  49+ 7B40 ED 69                        out     (c), l
  50+ 7B42 D9                           exx
  51+ 7B43                              next
  51+ 7B43 DD E9       >                jp      (ix)
  52+ 7B45
  53+ 7B45
  54+ 7B45              //  ______________________________________________________________________
  55+ 7B45              //
  56+ 7B45              // mmu7@        -- n
  57+ 7B45              // query current page in MMU7 8K-RAM : 0 and 223
  58+ 7B45
  59+ 7B45                              Colon_Def MMU7_FETCH, "MMU7@", is_normal
  59+ 7B45             >                New_Def  MMU7_FETCH, "MMU7@", Enter_Ptr, is_normal ; ok
  59+ 7B45             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  59+ 7B45             >
  59+ 7B45             >                // dummy db directives used to calculate length of namec
  59+ 7B45 4D 4D 55 37 >                db      "MMU7@"
  59+ 7B49 40          >
  59+ 7B4A             >len_NFA         defl    $ - temp_NFA
  59+ 7B4A             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  59+ 7B45             >
  59+ 7B45 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  59+ 7B46 4D 4D 55 37 >                db      "MMU7@"               // name string in 7-bit ascii, but
  59+ 7B4A 40          >
  59+ 7B4B             >                org     $-1                 // alter last byte of Name just above to set
  59+ 7B4A C0          >                db      {b $} | END_BIT     // msb as name end
  59+ 7B4B             >
  59+ 7B4B 30 7B       >                dw      last_NFA            // Link to previous definition Name
  59+ 7B4D             >MMU7_FETCH:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
  59+ 7B4D CD D3 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
  59+ 7B50             >
  59+ 7B50             >
  59+ 7B50             >                endif           ; ok        // for other definitions it "points" the correct handler
  59+ 7B50             >                // Use of "; ok" to suppress "warning[fwdref]"
  59+ 7B50             >
  59+ 7B50             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  60+ 7B50 A5 63 57 00                  dw      LIT, 87, REG_FETCH
  60+ 7B54 22 7B
  61+ 7B56 40 69                        dw      EXIT
  62+ 7B58
  63+ 7B58              //  ______________________________________________________________________
  64+ 7B58              //
  65+ 7B58              // mmu7!        n --
  66+ 7B58              // set MMU7 8K-RAM page to n given between 0 and 223
  67+ 7B58              // optimized version that uses NEXTREG n,A Z80n op-code.
  68+ 7B58
  69+ 7B58                              New_Def MMU7_STORE, "MMU7!", is_code, is_normal
  69+ 7B58             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  69+ 7B58             >
  69+ 7B58             >                // dummy db directives used to calculate length of namec
  69+ 7B58 4D 4D 55 37 >                db      "MMU7!"
  69+ 7B5C 21          >
  69+ 7B5D             >len_NFA         defl    $ - temp_NFA
  69+ 7B5D             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  69+ 7B58             >
  69+ 7B58 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  69+ 7B59 4D 4D 55 37 >                db      "MMU7!"               // name string in 7-bit ascii, but
  69+ 7B5D 21          >
  69+ 7B5E             >                org     $-1                 // alter last byte of Name just above to set
  69+ 7B5D A1          >                db      {b $} | END_BIT     // msb as name end
  69+ 7B5E             >
  69+ 7B5E 45 7B       >                dw      last_NFA            // Link to previous definition Name
  69+ 7B60             >MMU7_STORE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
  69+ 7B60 ~           >                call    runcode ; ok        // for primitive definitions  actual code
  69+ 7B60 ~           >
  69+ 7B60 ~           >
  69+ 7B60             >                endif           ; ok        // for other definitions it "points" the correct handler
  69+ 7B60             >                // Use of "; ok" to suppress "warning[fwdref]"
  69+ 7B60             >
  69+ 7B60             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  70+ 7B60 E1                           pop     hl
  71+ 7B61 7D                           ld      a, l
  72+ 7B62 ED 92 57                     nextreg 87, a
  73+ 7B65
  74+ 7B65                              next
  74+ 7B65 DD E9       >                jp      (ix)
  75+ 7B67
  76+ 7B67              //  ______________________________________________________________________
  77+ 7B67              //
  78+ 7B67              // >far         ha -- a n
  79+ 7B67              // decode bits 765 of H as one of the 8K-page between 64 and 71 (40h-47h)
  80+ 7B67              // take lower bits of H and L as an offset from E000h
  81+ 7B67              // then return address  a  between E000h-FFFFh
  82+ 7B67              // and page number n  between 64-71 (40h-47h)
  83+ 7B67              // For example, in hex:
  84+ 7B67              //   0000 >FAR  gives  40.E000
  85+ 7B67              //   1FFF >FAR  gives  40.FFFF
  86+ 7B67              //   2000 >FAR  gives  41.E000
  87+ 7B67              //   3FFF >FAR  gives  41.FFFF
  88+ 7B67              //   EFFF >FAR  gives  47.EFFF
  89+ 7B67              //   FFFF >FAR  gives  47.FFFF
  90+ 7B67              //                New_Def TO_FAR, ">FAR", is_code, is_normal
  91+ 7B67              //                pop     de
  92+ 7B67              //                ld      a, d
  93+ 7B67              //                and     $E0
  94+ 7B67              //                rlca
  95+ 7B67              //                rlca
  96+ 7B67              //                rlca
  97+ 7B67              //                add     $40
  98+ 7B67              //                ld      l, a
  99+ 7B67              //                ld      h, 0
 100+ 7B67              //                ld      a, d
 101+ 7B67              //                or      $E0
 102+ 7B67              //                ld      d, a
 103+ 7B67              //                push    hl
 104+ 7B67              //                push    de
 105+ 7B67              //                next
 106+ 7B67
 107+ 7B67              //  ______________________________________________________________________
 108+ 7B67              //
 109+ 7B67              // <far         a n  -- ha
 110+ 7B67              // given an address E000-FFFF and a page number n (64-71 or 40h-47h)
 111+ 7B67              // reverse of >FAR: encodes a FAR address compressing
 112+ 7B67              // to bits 765 of H, lower bits of HL address offset from E000h
 113+ 7B67              //                New_Def FROM_FAR, "<FAR", is_code, is_normal
 114+ 7B67              //                pop     de                  // page number in e
 115+ 7B67              //                pop     hl                  // address in hl
 116+ 7B67              //                ld      a, e
 117+ 7B67              //                sub     $40                 // reduced to 0-7
 118+ 7B67              //                rrca
 119+ 7B67              //                rrca
 120+ 7B67              //                rrca
 121+ 7B67              //                ld      d, a                // save to d bits 765
 122+ 7B67              //                ld      a, h                // drops
 123+ 7B67              //                and     $1F
 124+ 7B67              //                or      d
 125+ 7B67              //                ld      h, a
 126+ 7B67              //
 127+ 7B67              //                psh1
 128+ 7B67
 129+ 7B67              //  ______________________________________________________________________
 130+ 7B67              //
 131+ 7B67              // m_p3dos      n1 n2 n3 n4 a -- n5 n6 n7 n8  f
 132+ 7B67              // NextZXOS call wrapper.
 133+ 7B67              //  n1 = hl register parameter value
 134+ 7B67              //  n2 = de register parameter value
 135+ 7B67              //  n3 = bc register parameter value
 136+ 7B67              //  n4 =  a register parameter value
 137+ 7B67              //   a = routine address in ROM 3
 138+ 7B67              // ----
 139+ 7B67              //  n5 = hl returned value
 140+ 7B67              //  n6 = de returned value
 141+ 7B67              //  n7 = bc returned value
 142+ 7B67              //  n8 =  a returned value
 143+ 7B67              //   f
 144+ 7B67                              New_Def M_P3DOS, "M_P3DOS", is_code, is_normal
 144+ 7B67             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 144+ 7B67             >
 144+ 7B67             >                // dummy db directives used to calculate length of namec
 144+ 7B67 4D 5F 50 33 >                db      "M_P3DOS"
 144+ 7B6B 44 4F 53    >
 144+ 7B6E             >len_NFA         defl    $ - temp_NFA
 144+ 7B6E             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 144+ 7B67             >
 144+ 7B67 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 144+ 7B68 4D 5F 50 33 >                db      "M_P3DOS"               // name string in 7-bit ascii, but
 144+ 7B6C 44 4F 53    >
 144+ 7B6F             >                org     $-1                 // alter last byte of Name just above to set
 144+ 7B6E D3          >                db      {b $} | END_BIT     // msb as name end
 144+ 7B6F             >
 144+ 7B6F 58 7B       >                dw      last_NFA            // Link to previous definition Name
 144+ 7B71             >M_P3DOS:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 144+ 7B71 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 144+ 7B71 ~           >
 144+ 7B71 ~           >
 144+ 7B71             >                endif           ; ok        // for other definitions it "points" the correct handler
 144+ 7B71             >                // Use of "; ok" to suppress "warning[fwdref]"
 144+ 7B71             >
 144+ 7B71             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 145+ 7B71 D9                            exx
 146+ 7B72 E1                            pop     hl                  // dos call entry address a  //  n1 n2 n3 n4
 147+ 7B73 D1                            pop     de                  // a register argument       //  n1 n2 n3
 148+ 7B74 7B                            ld      a, e
 149+ 7B75 C1                            pop     bc                  // bc' argument              //  n1 n2
 150+ 7B76 D1                            pop     de                  // de' argument              //  n1
 151+ 7B77 E3                            ex      (sp), hl            // hl' argument and entry address in TOS
 152+ 7B78 D9                           exx
 153+ 7B79 E1                           pop     hl                  // entry address a
 154+ 7B7A DD E5                        push    ix
 155+ 7B7C D5                           push    de
 156+ 7B7D C5                           push    bc
 157+ 7B7E EB                           ex      de, hl              // de is entry address
 158+ 7B7F              //              ld      (SP_Saved), sp
 159+ 7B7F              //              ld      sp, Cold_origin - 5
 160+ 7B7F 0E 07                        ld      c, 7                // use 7 RAM Bank
 161+ 7B81
 162+ 7B81 CF                           rst     08
 163+ 7B82 94                           db      $94
 164+ 7B83
 165+ 7B83              //              ld      sp, (SP_Saved)
 166+ 7B83              //              push    ix
 167+ 7B83              //              pop     hl
 168+ 7B83              //              ld      (IX_Echo), hl
 169+ 7B83 DD 22 90 63                  ld      (IX_Echo), ix
 170+ 7B87
 171+ 7B87 D9                           exx
 172+ 7B88 C1                           pop     bc
 173+ 7B89 D1                           pop     de
 174+ 7B8A DD E1                        pop     ix
 175+ 7B8C D9                            exx
 176+ 7B8D E5                            push    hl
 177+ 7B8E D5                            push    de
 178+ 7B8F C5                            push    bc
 179+ 7B90 26 00                         ld      h, 0
 180+ 7B92 6F                            ld      l, a
 181+ 7B93 E5                            push    hl
 182+ 7B94 D9                           exx
 183+ 7B95 ED 62                        sbc     hl, hl              // -1 for OK ; 0 for KO but now...
 184+ 7B97 23                           inc     hl                  //  0 for OK ; 1 for ko
 185+ 7B98 E5                           push    hl
 186+ 7B99                              next
 186+ 7B99 DD E9       >                jp      (ix)
 187+ 7B9B
 188+ 7B9B              //  ______________________________________________________________________
 189+ 7B9B              //
 190+ 7B9B              // blk-fh
 191+ 7B9B                              Variable_Def BLK_FH,   "BLK-FH",   1
 191+ 7B9B             >                New_Def  BLK_FH, "BLK-FH", Variable_Ptr, is_normal
 191+ 7B9B             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 191+ 7B9B             >
 191+ 7B9B             >                // dummy db directives used to calculate length of namec
 191+ 7B9B 42 4C 4B 2D >                db      "BLK-FH"
 191+ 7B9F 46 48       >
 191+ 7BA1             >len_NFA         defl    $ - temp_NFA
 191+ 7BA1             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 191+ 7B9B             >
 191+ 7B9B 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 191+ 7B9C 42 4C 4B 2D >                db      "BLK-FH"               // name string in 7-bit ascii, but
 191+ 7BA0 46 48       >
 191+ 7BA2             >                org     $-1                 // alter last byte of Name just above to set
 191+ 7BA1 C8          >                db      {b $} | END_BIT     // msb as name end
 191+ 7BA2             >
 191+ 7BA2 67 7B       >                dw      last_NFA            // Link to previous definition Name
 191+ 7BA4             >BLK_FH:          if Variable_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 191+ 7BA4 CD 28 6C    >                call    Variable_Ptr ; ok        // for primitive definitions  actual code
 191+ 7BA7             >
 191+ 7BA7             >
 191+ 7BA7             >                endif           ; ok        // for other definitions it "points" the correct handler
 191+ 7BA7             >                // Use of "; ok" to suppress "warning[fwdref]"
 191+ 7BA7             >
 191+ 7BA7             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 191+ 7BA7 01 00       >                dw      1
 192+ 7BA9
 193+ 7BA9                              New_Def BLK_FNAME,   "BLK-FNAME", Create_Ptr, is_normal
 193+ 7BA9             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 193+ 7BA9             >
 193+ 7BA9             >                // dummy db directives used to calculate length of namec
 193+ 7BA9 42 4C 4B 2D >                db      "BLK-FNAME"
 193+ 7BAD 46 4E 41 4D >
 193+ 7BB1 45          >
 193+ 7BB2             >len_NFA         defl    $ - temp_NFA
 193+ 7BB2             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 193+ 7BA9             >
 193+ 7BA9 89          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 193+ 7BAA 42 4C 4B 2D >                db      "BLK-FNAME"               // name string in 7-bit ascii, but
 193+ 7BAE 46 4E 41 4D >
 193+ 7BB2 45          >
 193+ 7BB3             >                org     $-1                 // alter last byte of Name just above to set
 193+ 7BB2 C5          >                db      {b $} | END_BIT     // msb as name end
 193+ 7BB3             >
 193+ 7BB3 9B 7B       >                dw      last_NFA            // Link to previous definition Name
 193+ 7BB5             >BLK_FNAME:          if Create_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 193+ 7BB5 CD A5 76    >                call    Create_Ptr ; ok        // for primitive definitions  actual code
 193+ 7BB8             >
 193+ 7BB8             >
 193+ 7BB8             >                endif           ; ok        // for other definitions it "points" the correct handler
 193+ 7BB8             >                // Use of "; ok" to suppress "warning[fwdref]"
 193+ 7BB8             >
 193+ 7BB8             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 194+ 7BB8 0E 21 42 6C                  db      14, "!Blocks-64.bin", 0
 194+ 7BBC 6F 63 6B 73
 194+ 7BC0 2D 36 34 2E
 194+ 7BC4 62 69 6E 00
 195+ 7BC8 00 00 00...                  ds      24
 196+ 7BE0
 197+ 7BE0              //  ______________________________________________________________________
 198+ 7BE0              //
 199+ 7BE0              // blk-seek     n --
 200+ 7BE0              // seek block n  within blocks!.bin  file
 201+ 7BE0                              Colon_Def BLK_SEEK, "BLK-SEEK", is_normal
 201+ 7BE0             >                New_Def  BLK_SEEK, "BLK-SEEK", Enter_Ptr, is_normal ; ok
 201+ 7BE0             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 201+ 7BE0             >
 201+ 7BE0             >                // dummy db directives used to calculate length of namec
 201+ 7BE0 42 4C 4B 2D >                db      "BLK-SEEK"
 201+ 7BE4 53 45 45 4B >
 201+ 7BE8             >len_NFA         defl    $ - temp_NFA
 201+ 7BE8             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 201+ 7BE0             >
 201+ 7BE0 88          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 201+ 7BE1 42 4C 4B 2D >                db      "BLK-SEEK"               // name string in 7-bit ascii, but
 201+ 7BE5 53 45 45 4B >
 201+ 7BE9             >                org     $-1                 // alter last byte of Name just above to set
 201+ 7BE8 CB          >                db      {b $} | END_BIT     // msb as name end
 201+ 7BE9             >
 201+ 7BE9 A9 7B       >                dw      last_NFA            // Link to previous definition Name
 201+ 7BEB             >BLK_SEEK:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 201+ 7BEB CD D3 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 201+ 7BEE             >
 201+ 7BEE             >
 201+ 7BEE             >                endif           ; ok        // for other definitions it "points" the correct handler
 201+ 7BEE             >                // Use of "; ok" to suppress "warning[fwdref]"
 201+ 7BEE             >
 201+ 7BEE             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 202+ 7BEE 8F 6C 9E 79                  dw  BBUF, MMUL
 203+ 7BF2 A4 7B 00 6B                  dw  BLK_FH, FETCH
 204+ 7BF6 56 67                        dw  F_SEEK
 205+ 7BF8 A5 63 2D 00                  dw  LIT, $2D, QERROR
 205+ 7BFC 26 70
 206+ 7BFE 40 69                        dw  EXIT
 207+ 7C00
 208+ 7C00              //  ______________________________________________________________________
 209+ 7C00              //
 210+ 7C00              // blk-read     n --
 211+ 7C00              // seek block n  within blocks!.bin  file
 212+ 7C00                              Colon_Def BLK_READ, "BLK-READ", is_normal
 212+ 7C00             >                New_Def  BLK_READ, "BLK-READ", Enter_Ptr, is_normal ; ok
 212+ 7C00             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 212+ 7C00             >
 212+ 7C00             >                // dummy db directives used to calculate length of namec
 212+ 7C00 42 4C 4B 2D >                db      "BLK-READ"
 212+ 7C04 52 45 41 44 >
 212+ 7C08             >len_NFA         defl    $ - temp_NFA
 212+ 7C08             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 212+ 7C00             >
 212+ 7C00 88          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 212+ 7C01 42 4C 4B 2D >                db      "BLK-READ"               // name string in 7-bit ascii, but
 212+ 7C05 52 45 41 44 >
 212+ 7C09             >                org     $-1                 // alter last byte of Name just above to set
 212+ 7C08 C4          >                db      {b $} | END_BIT     // msb as name end
 212+ 7C09             >
 212+ 7C09 E0 7B       >                dw      last_NFA            // Link to previous definition Name
 212+ 7C0B             >BLK_READ:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 212+ 7C0B CD D3 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 212+ 7C0E             >
 212+ 7C0E             >
 212+ 7C0E             >                endif           ; ok        // for other definitions it "points" the correct handler
 212+ 7C0E             >                // Use of "; ok" to suppress "warning[fwdref]"
 212+ 7C0E             >
 212+ 7C0E             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 213+ 7C0E EB 7B                        dw  BLK_SEEK
 214+ 7C10 8F 6C                        dw  BBUF
 215+ 7C12 A4 7B 00 6B                  dw  BLK_FH, FETCH
 216+ 7C16 C2 67                        dw  F_READ
 217+ 7C18 A5 63 2E 00                  dw  LIT, $2E, QERROR
 217+ 7C1C 26 70
 218+ 7C1E 4A 6A                        dw  DROP
 219+ 7C20 40 69                        dw  EXIT
 220+ 7C22
 221+ 7C22              //  ______________________________________________________________________
 222+ 7C22              //
 223+ 7C22              // blk-write     n --
 224+ 7C22              // seek block n  within blocks!.bin  file
 225+ 7C22                              Colon_Def BLK_WRITE, "BLK-WRITE", is_normal
 225+ 7C22             >                New_Def  BLK_WRITE, "BLK-WRITE", Enter_Ptr, is_normal ; ok
 225+ 7C22             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 225+ 7C22             >
 225+ 7C22             >                // dummy db directives used to calculate length of namec
 225+ 7C22 42 4C 4B 2D >                db      "BLK-WRITE"
 225+ 7C26 57 52 49 54 >
 225+ 7C2A 45          >
 225+ 7C2B             >len_NFA         defl    $ - temp_NFA
 225+ 7C2B             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 225+ 7C22             >
 225+ 7C22 89          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 225+ 7C23 42 4C 4B 2D >                db      "BLK-WRITE"               // name string in 7-bit ascii, but
 225+ 7C27 57 52 49 54 >
 225+ 7C2B 45          >
 225+ 7C2C             >                org     $-1                 // alter last byte of Name just above to set
 225+ 7C2B C5          >                db      {b $} | END_BIT     // msb as name end
 225+ 7C2C             >
 225+ 7C2C 00 7C       >                dw      last_NFA            // Link to previous definition Name
 225+ 7C2E             >BLK_WRITE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 225+ 7C2E CD D3 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 225+ 7C31             >
 225+ 7C31             >
 225+ 7C31             >                endif           ; ok        // for other definitions it "points" the correct handler
 225+ 7C31             >                // Use of "; ok" to suppress "warning[fwdref]"
 225+ 7C31             >
 225+ 7C31             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 226+ 7C31 EB 7B                        dw  BLK_SEEK
 227+ 7C33 8F 6C                        dw  BBUF
 228+ 7C35 A4 7B 00 6B                  dw  BLK_FH, FETCH
 229+ 7C39 E5 67                        dw  F_WRITE
 230+ 7C3B A5 63 2F 00                  dw  LIT, $2F, QERROR
 230+ 7C3F 26 70
 231+ 7C41 4A 6A                        dw  DROP
 232+ 7C43 40 69                        dw  EXIT
 233+ 7C45
 234+ 7C45              //  ______________________________________________________________________
 235+ 7C45              //
 236+ 7C45              // blk-init     n --
 237+ 7C45              // seek block n  within blocks!.bin  file
 238+ 7C45                              Colon_Def BLK_INIT, "BLK-INIT", is_normal
 238+ 7C45             >                New_Def  BLK_INIT, "BLK-INIT", Enter_Ptr, is_normal ; ok
 238+ 7C45             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 238+ 7C45             >
 238+ 7C45             >                // dummy db directives used to calculate length of namec
 238+ 7C45 42 4C 4B 2D >                db      "BLK-INIT"
 238+ 7C49 49 4E 49 54 >
 238+ 7C4D             >len_NFA         defl    $ - temp_NFA
 238+ 7C4D             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 238+ 7C45             >
 238+ 7C45 88          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 238+ 7C46 42 4C 4B 2D >                db      "BLK-INIT"               // name string in 7-bit ascii, but
 238+ 7C4A 49 4E 49 54 >
 238+ 7C4E             >                org     $-1                 // alter last byte of Name just above to set
 238+ 7C4D D4          >                db      {b $} | END_BIT     // msb as name end
 238+ 7C4E             >
 238+ 7C4E 22 7C       >                dw      last_NFA            // Link to previous definition Name
 238+ 7C50             >BLK_INIT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 238+ 7C50 CD D3 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 238+ 7C53             >
 238+ 7C53             >
 238+ 7C53             >                endif           ; ok        // for other definitions it "points" the correct handler
 238+ 7C53             >                // Use of "; ok" to suppress "warning[fwdref]"
 238+ 7C53             >
 238+ 7C53             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 239+ 7C53 A4 7B 00 6B                  dw  BLK_FH, FETCH, F_CLOSE, DROP
 239+ 7C57 7A 67 4A 6A
 240+ 7C5B B5 7B CA 69                  dw  BLK_FNAME, ONE_PLUS
 241+ 7C5F 54 6E 63 6C                  dw  HERE, THREE, F_OPEN         // open for update (read+write)
 241+ 7C63 FC 67
 242+ 7C65 A5 63 2C 00                  dw  LIT, $2C, QERROR
 242+ 7C69 26 70
 243+ 7C6B A4 7B 0C 6B                  dw  BLK_FH, STORE
 244+ 7C6F 40 69                        dw  EXIT
 245+ 7C71
 246+ 7C71              //  ______________________________________________________________________
 247+ 7C71              //
 248+ 7C71              // #sec
 249+ 7C71              // number of 512-Byte "sectors" available on thie sysstem.
 250+ 7C71              // it adds up to 16 MByte of data that can be used as source or pool for almost anything.
 251+ 7C71
 252+ 7C71                              Constant_Def NSEC , "#SEC", 32767
 252+ 7C71             >                New_Def  NSEC, "#SEC", Constant_Ptr, is_normal
 252+ 7C71             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 252+ 7C71             >
 252+ 7C71             >                // dummy db directives used to calculate length of namec
 252+ 7C71 23 53 45 43 >                db      "#SEC"
 252+ 7C75             >len_NFA         defl    $ - temp_NFA
 252+ 7C75             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 252+ 7C71             >
 252+ 7C71 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 252+ 7C72 23 53 45 43 >                db      "#SEC"               // name string in 7-bit ascii, but
 252+ 7C76             >                org     $-1                 // alter last byte of Name just above to set
 252+ 7C75 C3          >                db      {b $} | END_BIT     // msb as name end
 252+ 7C76             >
 252+ 7C76 45 7C       >                dw      last_NFA            // Link to previous definition Name
 252+ 7C78             >NSEC:          if Constant_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 252+ 7C78 CD 0C 6C    >                call    Constant_Ptr ; ok        // for primitive definitions  actual code
 252+ 7C7B             >
 252+ 7C7B             >
 252+ 7C7B             >                endif           ; ok        // for other definitions it "points" the correct handler
 252+ 7C7B             >                // Use of "; ok" to suppress "warning[fwdref]"
 252+ 7C7B             >
 252+ 7C7B             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 252+ 7C7B FF 7F       >                dw      32767
 253+ 7C7D
 254+ 7C7D              //  ______________________________________________________________________
 255+ 7C7D
 256+ 7C7D
 257+ 7C7D
# file closed: C:\Zx\CSpect\Projects\vForth16_DIRECT_RP/source/next-opt1.asm
 114  7C7D                              include "L3.asm"
# file opened: C:\Zx\CSpect\Projects\vForth16_DIRECT_RP/source/L3.asm
   1+ 7C7D              //  ______________________________________________________________________
   2+ 7C7D              //
   3+ 7C7D              //  L3.asm
   4+ 7C7D              //
   5+ 7C7D              //  Continuation of L2.asm
   6+ 7C7D              //  I/O Block definitions
   7+ 7C7D              //  ______________________________________________________________________
   8+ 7C7D
   9+ 7C7D
  10+ 7C7D              //  ______________________________________________________________________
  11+ 7C7D              //
  12+ 7C7D              // r/w          a n f --
  13+ 7C7D              // read/write block n depending on flag f, true-flag means read, false-flag means write.
  14+ 7C7D                              Colon_Def READ_WRITE, "R/W", is_normal
  14+ 7C7D             >                New_Def  READ_WRITE, "R/W", Enter_Ptr, is_normal ; ok
  14+ 7C7D             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  14+ 7C7D             >
  14+ 7C7D             >                // dummy db directives used to calculate length of namec
  14+ 7C7D 52 2F 57    >                db      "R/W"
  14+ 7C80             >len_NFA         defl    $ - temp_NFA
  14+ 7C80             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  14+ 7C7D             >
  14+ 7C7D 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  14+ 7C7E 52 2F 57    >                db      "R/W"               // name string in 7-bit ascii, but
  14+ 7C81             >                org     $-1                 // alter last byte of Name just above to set
  14+ 7C80 D7          >                db      {b $} | END_BIT     // msb as name end
  14+ 7C81             >
  14+ 7C81 71 7C       >                dw      last_NFA            // Link to previous definition Name
  14+ 7C83             >READ_WRITE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
  14+ 7C83 CD D3 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
  14+ 7C86             >
  14+ 7C86             >
  14+ 7C86             >                endif           ; ok        // for other definitions it "points" the correct handler
  14+ 7C86             >                // Use of "; ok" to suppress "warning[fwdref]"
  14+ 7C86             >
  14+ 7C86             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  15+ 7C86 4D 69                        dw      TO_R                    // >r
  16+ 7C88 D4 69                        dw      ONE_SUBTRACT            // 1-
  17+ 7C8A 77 6A 8B 69                  dw      DUP, ZLESS              // dup 0<
  18+ 7C8E 3C 6A 78 7C                  dw      OVER, NSEC              // over #sec
  19+ 7C92 D4 69 E7 6E                  dw      ONE_SUBTRACT, GREATER   // 1- >
  20+ 7C96 F0 68                        dw      OR_OP                   // or
  21+ 7C98 A5 63 06 00                  dw      LIT, 6, QERROR          // 6 ?error
  21+ 7C9C 26 70
  22+ 7C9E 5B 69                        dw      R_TO                    // r>
  23+ 7CA0                                                              // if
  24+ 7CA0 1D 64                        dw      ZBRANCH
  25+ 7CA2 08 00                        dw      Read_Write_Else - $
  26+ 7CA4 0B 7C                        dw          BLK_READ            //      blk-read
  27+ 7CA6 08 64                        dw      BRANCH
  28+ 7CA8 04 00                        dw      Read_Write_Endif - $
  29+ 7CAA              Read_Write_Else:                                // else
  30+ 7CAA 2E 7C                        dw          BLK_WRITE           //      blk-write
  31+ 7CAC              Read_Write_Endif:                               // endif
  32+ 7CAC 40 69                        dw      EXIT                    // ;
  33+ 7CAE
  34+ 7CAE
  35+ 7CAE              //  ______________________________________________________________________
  36+ 7CAE              //
  37+ 7CAE              // +buf        a1 -- a2 f
  38+ 7CAE              // advences to next buffer, cyclically rotating along them
  39+ 7CAE                              Colon_Def PBUF, "+BUF", is_normal
  39+ 7CAE             >                New_Def  PBUF, "+BUF", Enter_Ptr, is_normal ; ok
  39+ 7CAE             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  39+ 7CAE             >
  39+ 7CAE             >                // dummy db directives used to calculate length of namec
  39+ 7CAE 2B 42 55 46 >                db      "+BUF"
  39+ 7CB2             >len_NFA         defl    $ - temp_NFA
  39+ 7CB2             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  39+ 7CAE             >
  39+ 7CAE 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  39+ 7CAF 2B 42 55 46 >                db      "+BUF"               // name string in 7-bit ascii, but
  39+ 7CB3             >                org     $-1                 // alter last byte of Name just above to set
  39+ 7CB2 C6          >                db      {b $} | END_BIT     // msb as name end
  39+ 7CB3             >
  39+ 7CB3 7D 7C       >                dw      last_NFA            // Link to previous definition Name
  39+ 7CB5             >PBUF:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
  39+ 7CB5 CD D3 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
  39+ 7CB8             >
  39+ 7CB8             >
  39+ 7CB8             >                endif           ; ok        // for other definitions it "points" the correct handler
  39+ 7CB8             >                // Use of "; ok" to suppress "warning[fwdref]"
  39+ 7CB8             >
  39+ 7CB8             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  40+ 7CB8 A5 63 04 02                  dw      LIT, 516, PLUS          // 516 +
  40+ 7CBC AB 69
  41+ 7CBE 77 6A 3E 6D                  dw      DUP, LIMIT, FETCH       // dup limit @
  41+ 7CC2 00 6B
  42+ 7CC4 B2 6E                        dw      EQUALS                  // =
  43+ 7CC6                                                              // if
  44+ 7CC6 1D 64                        dw      ZBRANCH
  45+ 7CC8 08 00                        dw      PBuf_Endif - $
  46+ 7CCA 4A 6A                        dw          DROP                //      drop
  47+ 7CCC 32 6D 00 6B                  dw          FIRST, FETCH        //      first @
  48+ 7CD0              PBuf_Endif:                                     // endif
  49+ 7CD0 77 6A 02 6E                  dw      DUP, PREV, FETCH        // dup prev @
  49+ 7CD4 00 6B
  50+ 7CD6 A4 6E                        dw      SUBTRACT                // -
  51+ 7CD8 40 69                        dw      EXIT                    // ;
  52+ 7CDA
  53+ 7CDA              //  ______________________________________________________________________
  54+ 7CDA              //
  55+ 7CDA              // update       --
  56+ 7CDA              // mark the last used block to be written to disk
  57+ 7CDA                              Colon_Def UPDATE, "UPDATE", is_normal
  57+ 7CDA             >                New_Def  UPDATE, "UPDATE", Enter_Ptr, is_normal ; ok
  57+ 7CDA             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  57+ 7CDA             >
  57+ 7CDA             >                // dummy db directives used to calculate length of namec
  57+ 7CDA 55 50 44 41 >                db      "UPDATE"
  57+ 7CDE 54 45       >
  57+ 7CE0             >len_NFA         defl    $ - temp_NFA
  57+ 7CE0             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  57+ 7CDA             >
  57+ 7CDA 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  57+ 7CDB 55 50 44 41 >                db      "UPDATE"               // name string in 7-bit ascii, but
  57+ 7CDF 54 45       >
  57+ 7CE1             >                org     $-1                 // alter last byte of Name just above to set
  57+ 7CE0 C5          >                db      {b $} | END_BIT     // msb as name end
  57+ 7CE1             >
  57+ 7CE1 AE 7C       >                dw      last_NFA            // Link to previous definition Name
  57+ 7CE3             >UPDATE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
  57+ 7CE3 CD D3 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
  57+ 7CE6             >
  57+ 7CE6             >
  57+ 7CE6             >                endif           ; ok        // for other definitions it "points" the correct handler
  57+ 7CE6             >                // Use of "; ok" to suppress "warning[fwdref]"
  57+ 7CE6             >
  57+ 7CE6             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  58+ 7CE6 02 6E 00 6B                  dw      PREV, FETCH, FETCH      // prev @ @
  58+ 7CEA 00 6B
  59+ 7CEC A5 63 00 80                  dw      LIT, $8000, OR_OP       // $8000, or
  59+ 7CF0 F0 68
  60+ 7CF2 02 6E 00 6B                  dw      PREV, FETCH, STORE      // prev @ !
  60+ 7CF6 0C 6B
  61+ 7CF8 40 69                        dw      EXIT                    // ;
  62+ 7CFA
  63+ 7CFA
  64+ 7CFA              //  ______________________________________________________________________
  65+ 7CFA              //
  66+ 7CFA              // empty-buffers --
  67+ 7CFA                              Colon_Def EMPTY_BUFFERS, "EMPTY-BUFFERS", is_normal
  67+ 7CFA             >                New_Def  EMPTY_BUFFERS, "EMPTY-BUFFERS", Enter_Ptr, is_normal ; ok
  67+ 7CFA             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  67+ 7CFA             >
  67+ 7CFA             >                // dummy db directives used to calculate length of namec
  67+ 7CFA 45 4D 50 54 >                db      "EMPTY-BUFFERS"
  67+ 7CFE 59 2D 42 55 >
  67+ 7D02 46 46 45 52 >
  67+ 7D06 53          >
  67+ 7D07             >len_NFA         defl    $ - temp_NFA
  67+ 7D07             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  67+ 7CFA             >
  67+ 7CFA 8D          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  67+ 7CFB 45 4D 50 54 >                db      "EMPTY-BUFFERS"               // name string in 7-bit ascii, but
  67+ 7CFF 59 2D 42 55 >
  67+ 7D03 46 46 45 52 >
  67+ 7D07 53          >
  67+ 7D08             >                org     $-1                 // alter last byte of Name just above to set
  67+ 7D07 D3          >                db      {b $} | END_BIT     // msb as name end
  67+ 7D08             >
  67+ 7D08 DA 7C       >                dw      last_NFA            // Link to previous definition Name
  67+ 7D0A             >EMPTY_BUFFERS:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
  67+ 7D0A CD D3 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
  67+ 7D0D             >
  67+ 7D0D             >
  67+ 7D0D             >                endif           ; ok        // for other definitions it "points" the correct handler
  67+ 7D0D             >                // Use of "; ok" to suppress "warning[fwdref]"
  67+ 7D0D             >
  67+ 7D0D             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  68+ 7D0D 32 6D 00 6B                  dw      FIRST, FETCH            // first @
  69+ 7D11 3E 6D 00 6B                  dw      LIMIT, FETCH            // limit @
  70+ 7D15 3C 6A A4 6E                  dw      OVER, SUBTRACT, ERASE   // over - erase
  70+ 7D19 79 73
  71+ 7D1B 40 69                        dw      EXIT                    // ;
  72+ 7D1D
  73+ 7D1D              //  ______________________________________________________________________
  74+ 7D1D              //
  75+ 7D1D              // buffer       n -- a
  76+ 7D1D              // read block n and gives the address to a buffer
  77+ 7D1D              // any block previously inside the buffer, if modified, is rewritten to
  78+ 7D1D              // disk before reading the block n.
  79+ 7D1D
  80+ 7D1D                              Colon_Def BUFFER, "BUFFER", is_normal
  80+ 7D1D             >                New_Def  BUFFER, "BUFFER", Enter_Ptr, is_normal ; ok
  80+ 7D1D             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  80+ 7D1D             >
  80+ 7D1D             >                // dummy db directives used to calculate length of namec
  80+ 7D1D 42 55 46 46 >                db      "BUFFER"
  80+ 7D21 45 52       >
  80+ 7D23             >len_NFA         defl    $ - temp_NFA
  80+ 7D23             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  80+ 7D1D             >
  80+ 7D1D 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  80+ 7D1E 42 55 46 46 >                db      "BUFFER"               // name string in 7-bit ascii, but
  80+ 7D22 45 52       >
  80+ 7D24             >                org     $-1                 // alter last byte of Name just above to set
  80+ 7D23 D2          >                db      {b $} | END_BIT     // msb as name end
  80+ 7D24             >
  80+ 7D24 FA 7C       >                dw      last_NFA            // Link to previous definition Name
  80+ 7D26             >BUFFER:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
  80+ 7D26 CD D3 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
  80+ 7D29             >
  80+ 7D29             >
  80+ 7D29             >                endif           ; ok        // for other definitions it "points" the correct handler
  80+ 7D29             >                // Use of "; ok" to suppress "warning[fwdref]"
  80+ 7D29             >
  80+ 7D29             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  81+ 7D29 F7 6D 00 6B                  dw      USE, FETCH              // use @
  82+ 7D2D 77 6A 4D 69                  dw      DUP, TO_R               // dup >r
  83+ 7D31                                                              // begin
  84+ 7D31              Buffer_Begin:
  85+ 7D31 B5 7C                        dw          PBUF                //      +buf
  86+ 7D33                                                              // until
  87+ 7D33 1D 64                        dw      ZBRANCH
  88+ 7D35 FC FF                        dw      Buffer_Begin - $
  89+ 7D37 F7 6D 0C 6B                  dw      USE, STORE              // use !
  90+ 7D3B 69 69 00 6B                  dw      R_OP, FETCH, ZLESS      // r @ 0<
  90+ 7D3F 8B 69
  91+ 7D41                                                              // if
  92+ 7D41 1D 64                        dw      ZBRANCH
  93+ 7D43 14 00                        dw      Buffer_Endif - $
  94+ 7D45 69 69 EC 69                  dw          R_OP, CELL_PLUS     //      r cell+
  95+ 7D49 69 69 00 6B                  dw          R_OP, FETCH         //      r fetch
  96+ 7D4D A5 63 FF 7F                  dw          LIT, $7FFF          //      7FFF
  97+ 7D51 DE 68                        dw          AND_OP              //      and
  98+ 7D53 48 6C 83 7C                  dw          ZERO, READ_WRITE    //      0 r/w
  99+ 7D57              Buffer_Endif:                                   // endif
 100+ 7D57 69 69 0C 6B                  dw      R_OP, STORE             // r !
 101+ 7D5B 69 69 02 6E                  dw      R_OP, PREV, STORE       // r prev !
 101+ 7D5F 0C 6B
 102+ 7D61 5B 69 EC 69                  dw      R_TO, CELL_PLUS         // r> cell+
 103+ 7D65 40 69                        dw      EXIT                    // ;
 104+ 7D67
 105+ 7D67              //  ______________________________________________________________________
 106+ 7D67              //
 107+ 7D67              // block        n -- a
 108+ 7D67              // Leaves the buffer address that contains the block n.
 109+ 7D67              // If the block is not already present, it will be loaded from disk
 110+ 7D67              // The block previously inside the buffer, if modified, is rewritten to
 111+ 7D67              // disk before reading the block n.
 112+ 7D67              // See also BUFFER, R/W, UPDATE, FLUSH.
 113+ 7D67
 114+ 7D67                              Colon_Def BLOCK, "BLOCK", is_normal
 114+ 7D67             >                New_Def  BLOCK, "BLOCK", Enter_Ptr, is_normal ; ok
 114+ 7D67             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 114+ 7D67             >
 114+ 7D67             >                // dummy db directives used to calculate length of namec
 114+ 7D67 42 4C 4F 43 >                db      "BLOCK"
 114+ 7D6B 4B          >
 114+ 7D6C             >len_NFA         defl    $ - temp_NFA
 114+ 7D6C             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 114+ 7D67             >
 114+ 7D67 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 114+ 7D68 42 4C 4F 43 >                db      "BLOCK"               // name string in 7-bit ascii, but
 114+ 7D6C 4B          >
 114+ 7D6D             >                org     $-1                 // alter last byte of Name just above to set
 114+ 7D6C CB          >                db      {b $} | END_BIT     // msb as name end
 114+ 7D6D             >
 114+ 7D6D 1D 7D       >                dw      last_NFA            // Link to previous definition Name
 114+ 7D6F             >BLOCK:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 114+ 7D6F CD D3 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 114+ 7D72             >
 114+ 7D72             >
 114+ 7D72             >                endif           ; ok        // for other definitions it "points" the correct handler
 114+ 7D72             >                // Use of "; ok" to suppress "warning[fwdref]"
 114+ 7D72             >
 114+ 7D72             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 115+ 7D72 89 6D 00 6B                  dw      OFFSET, FETCH           // offset @
 116+ 7D76 AB 69 4D 69                  dw      PLUS, TO_R              // + >r
 117+ 7D7A 02 6E 00 6B                  dw      PREV, FETCH             // prev @
 118+ 7D7E 77 6A 00 6B                  dw      DUP, FETCH              // dup @
 119+ 7D82 69 69 A4 6E                  dw      R_OP, SUBTRACT          // r -
 120+ 7D86 77 6A AB 69                  dw      DUP, PLUS               // dup +  ( trick: check equality without most significant bit )
 121+ 7D8A                                                              // if
 122+ 7D8A 1D 64                        dw        ZBRANCH
 123+ 7D8C 32 00                        dw        Block_Endif_1 - $
 124+ 7D8E              Block_Begin:                                    //      begin
 125+ 7D8E B5 7C 71 69                  dw          PBUF, ZEQUAL        //          +buf 0
 126+ 7D92                                                              //          if
 127+ 7D92 1D 64                        dw          ZBRANCH
 128+ 7D94 12 00                        dw          Block_Endif_2 - $
 129+ 7D96 4A 6A                        dw              DROP            //              drop
 130+ 7D98 69 69 26 7D                  dw              R_OP, BUFFER    //              r buffer
 131+ 7D9C 77 6A                        dw              DUP             //              dup
 132+ 7D9E 69 69 51 6C                  dw              R_OP, ONE       //              r 1
 133+ 7DA2 83 7C                        dw              READ_WRITE      //              r/w
 134+ 7DA4 02 6A                        dw              TWO_MINUS       //              2-
 135+ 7DA6              Block_Endif_2:                                  //          endif
 136+ 7DA6 77 6A 00 6B                  dw          DUP, FETCH, R_OP    //          dup @ r
 136+ 7DAA 69 69
 137+ 7DAC A4 6E 77 6A                  dw          SUBTRACT, DUP       //          - dup
 138+ 7DB0 AB 69 71 69                  dw          PLUS, ZEQUAL        //          + 0=
 139+ 7DB4                                                              //      until
 140+ 7DB4 1D 64                        dw        ZBRANCH
 141+ 7DB6 D8 FF                        dw        Block_Begin - $
 142+ 7DB8 77 6A 02 6E                  dw        DUP, PREV, STORE      //      dup prev !
 142+ 7DBC 0C 6B
 143+ 7DBE              Block_Endif_1:                                  // endif
 144+ 7DBE 5B 69 4A 6A                  dw      R_TO, DROP, CELL_PLUS   // r> drop cell+
 144+ 7DC2 EC 69
 145+ 7DC4 40 69                        dw      EXIT                    // ;
 146+ 7DC6
 147+ 7DC6              //  ______________________________________________________________________
 148+ 7DC6              //
 149+ 7DC6              // #buff        -- n
 150+ 7DC6              // number of buffers available. must be the difference between LIMIT and FIRST divided by 516
 151+ 7DC6                              Constant_Def NBUFF,   "#BUFF", 7
 151+ 7DC6             >                New_Def  NBUFF, "#BUFF", Constant_Ptr, is_normal
 151+ 7DC6             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 151+ 7DC6             >
 151+ 7DC6             >                // dummy db directives used to calculate length of namec
 151+ 7DC6 23 42 55 46 >                db      "#BUFF"
 151+ 7DCA 46          >
 151+ 7DCB             >len_NFA         defl    $ - temp_NFA
 151+ 7DCB             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 151+ 7DC6             >
 151+ 7DC6 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 151+ 7DC7 23 42 55 46 >                db      "#BUFF"               // name string in 7-bit ascii, but
 151+ 7DCB 46          >
 151+ 7DCC             >                org     $-1                 // alter last byte of Name just above to set
 151+ 7DCB C6          >                db      {b $} | END_BIT     // msb as name end
 151+ 7DCC             >
 151+ 7DCC 67 7D       >                dw      last_NFA            // Link to previous definition Name
 151+ 7DCE             >NBUFF:          if Constant_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 151+ 7DCE CD 0C 6C    >                call    Constant_Ptr ; ok        // for primitive definitions  actual code
 151+ 7DD1             >
 151+ 7DD1             >
 151+ 7DD1             >                endif           ; ok        // for other definitions it "points" the correct handler
 151+ 7DD1             >                // Use of "; ok" to suppress "warning[fwdref]"
 151+ 7DD1             >
 151+ 7DD1             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 151+ 7DD1 07 00       >                dw      7
 152+ 7DD3
 153+ 7DD3              //  ______________________________________________________________________
 154+ 7DD3              //
 155+ 7DD3              // flush        --
 156+ 7DD3                              Colon_Def FLUSH, "FLUSH", is_normal
 156+ 7DD3             >                New_Def  FLUSH, "FLUSH", Enter_Ptr, is_normal ; ok
 156+ 7DD3             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 156+ 7DD3             >
 156+ 7DD3             >                // dummy db directives used to calculate length of namec
 156+ 7DD3 46 4C 55 53 >                db      "FLUSH"
 156+ 7DD7 48          >
 156+ 7DD8             >len_NFA         defl    $ - temp_NFA
 156+ 7DD8             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 156+ 7DD3             >
 156+ 7DD3 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 156+ 7DD4 46 4C 55 53 >                db      "FLUSH"               // name string in 7-bit ascii, but
 156+ 7DD8 48          >
 156+ 7DD9             >                org     $-1                 // alter last byte of Name just above to set
 156+ 7DD8 C8          >                db      {b $} | END_BIT     // msb as name end
 156+ 7DD9             >
 156+ 7DD9 C6 7D       >                dw      last_NFA            // Link to previous definition Name
 156+ 7DDB             >FLUSH:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 156+ 7DDB CD D3 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 156+ 7DDE             >
 156+ 7DDE             >
 156+ 7DDE             >                endif           ; ok        // for other definitions it "points" the correct handler
 156+ 7DDE             >                // Use of "; ok" to suppress "warning[fwdref]"
 156+ 7DDE             >
 156+ 7DDE             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 157+ 7DDE CE 7D CA 69                  dw      NBUFF, ONE_PLUS, ZERO   // #buff 1+ 0
 157+ 7DE2 48 6C
 158+ 7DE4              Flush_Do:                                       // do
 159+ 7DE4 6F 64                        dw      C_DO
 160+ 7DE6 48 6C 26 7D                  dw      ZERO, BUFFER, DROP      //      0 buffer drop
 160+ 7DEA 4A 6A
 161+ 7DEC                                                              // loop
 162+ 7DEC F9 63 F8 FF                  dw      C_LOOP, Flush_Do - $
 163+ 7DF0 A4 7B 00 6B                  dw      BLK_FH, FETCH           // blk-fh @     ( ZX-Next dependance )
 164+ 7DF4 8D 67 4A 6A                  dw      F_SYNC, DROP            // f_sync drop
 165+ 7DF8 40 69                        dw      EXIT                    // exit
 166+ 7DFA
 167+ 7DFA              //  ______________________________________________________________________
 168+ 7DFA              //
 169+ 7DFA              // f_getline    a m fh -- n
 170+ 7DFA              // Given an open filehandle read next line (terminated with $0D or $0A)
 171+ 7DFA              // Address a is left for subsequent processing
 172+ 7DFA              // and n as the actual number of byte read, that is the length of line
 173+ 7DFA                              Colon_Def F_GETLINE, "F_GETLINE", is_normal
 173+ 7DFA             >                New_Def  F_GETLINE, "F_GETLINE", Enter_Ptr, is_normal ; ok
 173+ 7DFA             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 173+ 7DFA             >
 173+ 7DFA             >                // dummy db directives used to calculate length of namec
 173+ 7DFA 46 5F 47 45 >                db      "F_GETLINE"
 173+ 7DFE 54 4C 49 4E >
 173+ 7E02 45          >
 173+ 7E03             >len_NFA         defl    $ - temp_NFA
 173+ 7E03             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 173+ 7DFA             >
 173+ 7DFA 89          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 173+ 7DFB 46 5F 47 45 >                db      "F_GETLINE"               // name string in 7-bit ascii, but
 173+ 7DFF 54 4C 49 4E >
 173+ 7E03 45          >
 173+ 7E04             >                org     $-1                 // alter last byte of Name just above to set
 173+ 7E03 C5          >                db      {b $} | END_BIT     // msb as name end
 173+ 7E04             >
 173+ 7E04 D3 7D       >                dw      last_NFA            // Link to previous definition Name
 173+ 7E06             >F_GETLINE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 173+ 7E06 CD D3 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 173+ 7E09             >
 173+ 7E09             >
 173+ 7E09             >                endif           ; ok        // for other definitions it "points" the correct handler
 173+ 7E09             >                // Use of "; ok" to suppress "warning[fwdref]"
 173+ 7E09             >
 173+ 7E09             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 174+ 7E09 4D 69                        dw      TO_R                    // >r               ( a  m  )     \  fh
 175+ 7E0B 5E 6A                        dw      TUCK                    // tuck             ( m a m )
 176+ 7E0D 69 69 A3 67                  dw      R_OP, F_FGETPOS         // r f_fgetpos      ( m a m d f )
 177+ 7E11 A5 63 2C 00                  dw      LIT, 44, QERROR         // 44 ?error        ( m a m d )
 177+ 7E15 26 70
 178+ 7E17
 179+ 7E17 C0 6A 3C 6A                  dw      TWO_SWAP, OVER          // 2swap over       ( m d a m )
 180+ 7E1B CA 69 6C 6A                  dw      ONE_PLUS, SWAP          // 1+ swap          ( m d a a+1 m )
 181+ 7E1F
 182+ 7E1F 69 69 C2 67                  dw      R_OP, F_READ            // r f_read         ( m d a n f )
 183+ 7E23 A5 63 2E 00                  dw      LIT, 46, QERROR         // 46 ?error        ( m d a n )
 183+ 7E27 26 70
 184+ 7E29                                                              // if ( at least 1 chr was read )  \  fh
 185+ 7E29 1D 64                        dw      ZBRANCH
 186+ 7E2B 3C 00                        dw      FGetline_Else - $
 187+ 7E2D A5 63 0A 00                  dw          LIT, 10, ENCLOSE    //      10 enclose       ( m d a x b x )
 187+ 7E31 5A 65
 188+ 7E33 4A 6A 53 6A                  dw          DROP, NIP           //      drop nip         ( m d a b )
 189+ 7E37 6C 6A                        dw          SWAP                //      drop swap        ( m d b a )
 190+ 7E39 A5 63 0D 00                  dw          LIT, 13, ENCLOSE    //      13 enclose       ( m d b a x c x )
 190+ 7E3D 5A 65
 191+ 7E3F 4A 6A 53 6A                  dw          DROP, NIP           //      drop nip         ( m d b a c )
 192+ 7E43 82 6A F6 6E                  dw          ROT, MIN            //      rot min          ( m d a n )
 193+ 7E47 77 6A 32 6E                  dw          DUP, SPAN, STORE    //      dup span !       ( m d a n )
 193+ 7E4B 0C 6B
 194+ 7E4D 77 6A 4D 69                  dw          DUP, TO_R           //      dup >r           ( m d a n )      \ fh n
 195+ 7E51 C0 6A 5B 69                  dw          TWO_SWAP, R_TO      //      2swap r>         ( m a n d n )    \ fh
 196+ 7E55 48 6C B8 69                  dw          ZERO, DPLUS         //      0 d+             ( m a n d+n )
 197+ 7E59 5B 69 56 67                  dw          R_TO, F_SEEK        //      r> f_seek        ( m a n f )
 198+ 7E5D A5 63 2D 00                  dw          LIT, 45, QERROR     //      45 ?error        ( m a n )
 198+ 7E61 26 70
 199+ 7E63                                                              // else
 200+ 7E63 08 64                        dw      BRANCH
 201+ 7E65 0C 00                        dw      FGetline_Endif - $
 202+ 7E67              FGetline_Else:
 203+ 7E67 5B 69                        dw          R_TO                //      r>              ( m d a fh )
 204+ 7E69 C0 6A B4 6A                  dw          TWO_SWAP, TWO_DROP  //      2swap 2drop     ( m a fh )
 205+ 7E6D 4A 6A 48 6C                  dw          DROP, ZERO          //      drop, 0         ( m a 0 )
 206+ 7E71              FGetline_Endif:                                 // endif
 207+ 7E71 4D 69 77 6A                  dw      TO_R, DUP, DUP          // >r dup dup           ( m a a a )
 207+ 7E75 77 6A
 208+ 7E77 CA 69 6C 6A                  dw      ONE_PLUS, SWAP          // 1+ swap              ( m a a+1 a )
 209+ 7E7B 69 69 49 68                  dw      R_OP, CMOVE             // r cmove              ( m a )
 210+ 7E7F D2 6A AB 69                  dw      TWO_DUP, PLUS           // 2dup +               ( m a m+a )
 211+ 7E83 48 6C 6C 6A                  dw      ZERO, SWAP              // 0 swap
 212+ 7E87 F7 69 0C 6B                  dw      CELL_MINUS,  STORE      // cell-  !             ( m a )
 213+ 7E8B 69 69 AB 69                  dw      R_OP, PLUS, ONE_SUBTRACT// r + 1-               ( m a+n1 )
 213+ 7E8F D4 69
 214+ 7E91 6C 6A 69 69                  dw      SWAP, R_OP, SUBTRACT    // swap r -             ( a+n+1 m-n )
 214+ 7E95 A4 6E
 215+ 7E97 8A 73                        dw      BLANK                   // blank
 216+ 7E99 5B 69                        dw      R_TO                    // r>                   ( n )
 217+ 7E9B 40 69                        dw      EXIT                    // ;
 218+ 7E9D
 219+ 7E9D              //  ______________________________________________________________________
 220+ 7E9D              //
 221+ 7E9D              // f_include    fh --
 222+ 7E9D              // Given a filehandle includes the source from file
 223+ 7E9D                              Colon_Def F_INCLUDE, "F_INCLUDE", is_normal
 223+ 7E9D             >                New_Def  F_INCLUDE, "F_INCLUDE", Enter_Ptr, is_normal ; ok
 223+ 7E9D             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 223+ 7E9D             >
 223+ 7E9D             >                // dummy db directives used to calculate length of namec
 223+ 7E9D 46 5F 49 4E >                db      "F_INCLUDE"
 223+ 7EA1 43 4C 55 44 >
 223+ 7EA5 45          >
 223+ 7EA6             >len_NFA         defl    $ - temp_NFA
 223+ 7EA6             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 223+ 7E9D             >
 223+ 7E9D 89          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 223+ 7E9E 46 5F 49 4E >                db      "F_INCLUDE"               // name string in 7-bit ascii, but
 223+ 7EA2 43 4C 55 44 >
 223+ 7EA6 45          >
 223+ 7EA7             >                org     $-1                 // alter last byte of Name just above to set
 223+ 7EA6 C5          >                db      {b $} | END_BIT     // msb as name end
 223+ 7EA7             >
 223+ 7EA7 FA 7D       >                dw      last_NFA            // Link to previous definition Name
 223+ 7EA9             >F_INCLUDE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 223+ 7EA9 CD D3 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 223+ 7EAC             >
 223+ 7EAC             >
 223+ 7EAC             >                endif           ; ok        // for other definitions it "points" the correct handler
 223+ 7EAC             >                // Use of "; ok" to suppress "warning[fwdref]"
 223+ 7EAC             >
 223+ 7EAC             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 224+ 7EAC 5E 6D 00 6B                  dw      BLK, FETCH, TO_R        // blk @ >r
 224+ 7EB0 4D 69
 225+ 7EB2 68 6D 00 6B                  dw      TO_IN, FETCH, TO_R      // >in @ >r
 225+ 7EB6 4D 69
 226+ 7EB8 27 6E 00 6B                  dw      SOURCE_ID, FETCH, TO_R  // source-id @ >r
 226+ 7EBC 4D 69
 227+ 7EBE 69 69                        dw      R_OP                    // r
 228+ 7EC0                                                              // if
 229+ 7EC0 1D 64                        dw      ZBRANCH
 230+ 7EC2 20 00                        dw      FInclude_Else_1 - $
 231+ 7EC4 69 69 A3 67                  dw          R_OP, F_FGETPOS     //      r f_getpos
 232+ 7EC8 A5 63 2C 00                  dw          LIT, 44, QERROR     //      44 ?error
 232+ 7ECC 26 70
 233+ 7ECE 68 6D 00 6B                  dw          TO_IN, FETCH        //      >in @ 2-
 234+ 7ED2 02 6A                        dw          TWO_MINUS
 235+ 7ED4 32 6E 00 6B                  dw          SPAN, FETCH         //      span @ -
 236+ 7ED8 A4 6E                        dw          SUBTRACT
 237+ 7EDA 97 6E B8 69                  dw          S_TO_D, DPLUS       //      s>d d+
 238+ 7EDE                                                              // else
 239+ 7EDE 08 64                        dw      BRANCH
 240+ 7EE0 06 00                        dw      FInclude_Endif_1 - $
 241+ 7EE2              FInclude_Else_1:
 242+ 7EE2 48 6C 48 6C                  dw          ZERO, ZERO          //      0 0
 243+ 7EE6                                                              // endif
 244+ 7EE6              FInclude_Endif_1:
 245+ 7EE6 4D 69 4D 69                  dw      TO_R, TO_R              // >r >r
 246+ 7EEA 27 6E 0C 6B                  dw      SOURCE_ID, STORE        // source-id !
 247+ 7EEE              FInclude_Begin:                                 // begin
 248+ 7EEE 51 6C 6F 7D                  dw          ONE, BLOCK, BBUF    //      1 block b/buf
 248+ 7EF2 8F 6C
 249+ 7EF4 D2 6A 8A 73                  dw          TWO_DUP, BLANK      //      2dup blank
 250+ 7EF8 6C 6A CA 69                  dw          SWAP, ONE_PLUS      //      swap 1+
 251+ 7EFC 6C 6A F7 69                  dw          SWAP, CELL_MINUS    //      swap cell-
 252+ 7F00 27 6E 00 6B                  dw          SOURCE_ID, FETCH    //      source-id @
 253+ 7F04 06 7E                        dw          F_GETLINE           //      f_getline
 254+ 7F06                                                              // while
 255+ 7F06 1D 64                        dw      ZBRANCH
 256+ 7F08 14 00                        dw      FInclude_Repeat - $
 257+ 7F0A 51 6C 5E 6D                  dw          ONE, BLK, STORE     //      1 blk !
 257+ 7F0E 0C 6B
 258+ 7F10 48 6C 68 6D                  dw          ZERO, TO_IN, STORE  //      0 >in !
 258+ 7F14 0C 6B
 259+ 7F16 96 77                        dw          INTERPRET           //      interpret
 260+ 7F18 08 64                        dw      BRANCH
 261+ 7F1A D4 FF                        dw      FInclude_Begin - $
 262+ 7F1C              FInclude_Repeat:                                // repeat
 263+ 7F1C 27 6E 00 6B                  dw      SOURCE_ID, FETCH        // source-id @
 264+ 7F20 48 6C 27 6E                  dw      ZERO, SOURCE_ID, STORE  // 0 source-id !
 264+ 7F24 0C 6B
 265+ 7F26 7A 67                        dw      F_CLOSE                 // f_close
 266+ 7F28 A5 63 2A 00                  dw      LIT, 42, QERROR         // 42 ?error
 266+ 7F2C 26 70
 267+ 7F2E 5B 69 5B 69                  dw      R_TO, R_TO, R_TO        // r> r> r>
 267+ 7F32 5B 69
 268+ 7F34 77 6A 27 6E                  dw      DUP, SOURCE_ID, STORE   // dup source-id !
 268+ 7F38 0C 6B
 269+ 7F3A                                                              // if
 270+ 7F3A 1D 64                        dw      ZBRANCH
 271+ 7F3C 12 00                        dw      FInclude_Else_2 - $
 272+ 7F3E 27 6E 00 6B                  dw          SOURCE_ID, FETCH    //      source-id @
 273+ 7F42 56 67                        dw          F_SEEK              //      f_seek
 274+ 7F44 A5 63 2B 00                  dw          LIT, 43, QERROR     //      43, ?error
 274+ 7F48 26 70
 275+ 7F4A                                                              // else
 276+ 7F4A 08 64                        dw      BRANCH
 277+ 7F4C 04 00                        dw      FInclude_Endif_2 - $
 278+ 7F4E              FInclude_Else_2:
 279+ 7F4E B4 6A                        dw          TWO_DROP            //      2drop
 280+ 7F50              FInclude_Endif_2:                               // endif
 281+ 7F50 5B 69 68 6D                  dw      R_TO, TO_IN, STORE      // r> >in !
 281+ 7F54 0C 6B
 282+ 7F56 5B 69 5E 6D                  dw      R_TO, BLK, STORE        // r> blk !
 282+ 7F5A 0C 6B
 283+ 7F5C 40 69                        dw      EXIT                    // ;
 284+ 7F5E
 285+ 7F5E              //  ______________________________________________________________________
 286+ 7F5E              //
 287+ 7F5E              // open<         -- fh
 288+ 7F5E              // Open the following filename and return it file-handle
 289+ 7F5E              // Used in the form OPEN CCCC
 290+ 7F5E                              Colon_Def OPEN_FH, "OPEN<", is_normal
 290+ 7F5E             >                New_Def  OPEN_FH, "OPEN<", Enter_Ptr, is_normal ; ok
 290+ 7F5E             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 290+ 7F5E             >
 290+ 7F5E             >                // dummy db directives used to calculate length of namec
 290+ 7F5E 4F 50 45 4E >                db      "OPEN<"
 290+ 7F62 3C          >
 290+ 7F63             >len_NFA         defl    $ - temp_NFA
 290+ 7F63             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 290+ 7F5E             >
 290+ 7F5E 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 290+ 7F5F 4F 50 45 4E >                db      "OPEN<"               // name string in 7-bit ascii, but
 290+ 7F63 3C          >
 290+ 7F64             >                org     $-1                 // alter last byte of Name just above to set
 290+ 7F63 BC          >                db      {b $} | END_BIT     // msb as name end
 290+ 7F64             >
 290+ 7F64 9D 7E       >                dw      last_NFA            // Link to previous definition Name
 290+ 7F66             >OPEN_FH:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 290+ 7F66 CD D3 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 290+ 7F69             >
 290+ 7F69             >
 290+ 7F69             >                endif           ; ok        // for other definitions it "points" the correct handler
 290+ 7F69             >                // Use of "; ok" to suppress "warning[fwdref]"
 290+ 7F69             >
 290+ 7F69             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 291+ 7F69 77 6C                        dw      BL
 292+ 7F6B C5 73 D7 71                  dw      WORD, COUNT, OVER       // bl word count over
 292+ 7F6F 3C 6A
 293+ 7F71 AB 69 48 6C                  dw      PLUS, ZERO, SWAP, STORE // + 0 swap !
 293+ 7F75 6C 6A 0C 6B
 294+ 7F79 B1 73 51 6C                  dw      PAD, ONE, F_OPEN        // pad 1 f_open
 294+ 7F7D FC 67
 295+ 7F7F A5 63 2B 00                  dw      LIT, 43                 // 43
 296+ 7F83 26 70                        dw      QERROR                  // ?error
 297+ 7F85 40 69                        dw      EXIT                    // ;
 298+ 7F87
 299+ 7F87              //  ______________________________________________________________________
 300+ 7F87              //
 301+ 7F87              // include      -- cccc
 302+ 7F87              // Include the following filename
 303+ 7F87                              Colon_Def INCLUDE, "INCLUDE", is_normal
 303+ 7F87             >                New_Def  INCLUDE, "INCLUDE", Enter_Ptr, is_normal ; ok
 303+ 7F87             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 303+ 7F87             >
 303+ 7F87             >                // dummy db directives used to calculate length of namec
 303+ 7F87 49 4E 43 4C >                db      "INCLUDE"
 303+ 7F8B 55 44 45    >
 303+ 7F8E             >len_NFA         defl    $ - temp_NFA
 303+ 7F8E             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 303+ 7F87             >
 303+ 7F87 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 303+ 7F88 49 4E 43 4C >                db      "INCLUDE"               // name string in 7-bit ascii, but
 303+ 7F8C 55 44 45    >
 303+ 7F8F             >                org     $-1                 // alter last byte of Name just above to set
 303+ 7F8E C5          >                db      {b $} | END_BIT     // msb as name end
 303+ 7F8F             >
 303+ 7F8F 5E 7F       >                dw      last_NFA            // Link to previous definition Name
 303+ 7F91             >INCLUDE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 303+ 7F91 CD D3 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 303+ 7F94             >
 303+ 7F94             >
 303+ 7F94             >                endif           ; ok        // for other definitions it "points" the correct handler
 303+ 7F94             >                // Use of "; ok" to suppress "warning[fwdref]"
 303+ 7F94             >
 303+ 7F94             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 304+ 7F94 66 7F                        dw      OPEN_FH                 // open
 305+ 7F96 77 6A A9 7E                  dw      DUP, F_INCLUDE          // dup f_include
 306+ 7F9A 7A 67 4A 6A                  dw      F_CLOSE, DROP           // f_close drop
 307+ 7F9E 40 69                        dw      EXIT                    // ;
 308+ 7FA0
 309+ 7FA0              //  ______________________________________________________________________
 310+ 7FA0              //
 311+ 7FA0              // needs
 312+ 7FA0              // check for cccc exists in vocabulary
 313+ 7FA0              // if it doesn't then  INCLUDE  inc/cccc.F
 314+ 7FA0
 315+ 7FA0              // temp filename cccc.f as counted string zero-padded
 316+ 7FA0                              New_Def NEEDS_W,   "NEEDS-W", Create_Ptr, is_normal
 316+ 7FA0             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 316+ 7FA0             >
 316+ 7FA0             >                // dummy db directives used to calculate length of namec
 316+ 7FA0 4E 45 45 44 >                db      "NEEDS-W"
 316+ 7FA4 53 2D 57    >
 316+ 7FA7             >len_NFA         defl    $ - temp_NFA
 316+ 7FA7             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 316+ 7FA0             >
 316+ 7FA0 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 316+ 7FA1 4E 45 45 44 >                db      "NEEDS-W"               // name string in 7-bit ascii, but
 316+ 7FA5 53 2D 57    >
 316+ 7FA8             >                org     $-1                 // alter last byte of Name just above to set
 316+ 7FA7 D7          >                db      {b $} | END_BIT     // msb as name end
 316+ 7FA8             >
 316+ 7FA8 87 7F       >                dw      last_NFA            // Link to previous definition Name
 316+ 7FAA             >NEEDS_W:          if Create_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 316+ 7FAA CD A5 76    >                call    Create_Ptr ; ok        // for primitive definitions  actual code
 316+ 7FAD             >
 316+ 7FAD             >
 316+ 7FAD             >                endif           ; ok        // for other definitions it "points" the correct handler
 316+ 7FAD             >                // Use of "; ok" to suppress "warning[fwdref]"
 316+ 7FAD             >
 316+ 7FAD             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 317+ 7FAD 00 00 00...                  ds      35                      // 32 + .f + 0x00 = len 35
 318+ 7FD0              // temp complete path+filename
 319+ 7FD0                              New_Def NEEDS_FN,  "NEEDS-FN", Create_Ptr, is_normal
 319+ 7FD0             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 319+ 7FD0             >
 319+ 7FD0             >                // dummy db directives used to calculate length of namec
 319+ 7FD0 4E 45 45 44 >                db      "NEEDS-FN"
 319+ 7FD4 53 2D 46 4E >
 319+ 7FD8             >len_NFA         defl    $ - temp_NFA
 319+ 7FD8             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 319+ 7FD0             >
 319+ 7FD0 88          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 319+ 7FD1 4E 45 45 44 >                db      "NEEDS-FN"               // name string in 7-bit ascii, but
 319+ 7FD5 53 2D 46 4E >
 319+ 7FD9             >                org     $-1                 // alter last byte of Name just above to set
 319+ 7FD8 CE          >                db      {b $} | END_BIT     // msb as name end
 319+ 7FD9             >
 319+ 7FD9 A0 7F       >                dw      last_NFA            // Link to previous definition Name
 319+ 7FDB             >NEEDS_FN:          if Create_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 319+ 7FDB CD A5 76    >                call    Create_Ptr ; ok        // for primitive definitions  actual code
 319+ 7FDE             >
 319+ 7FDE             >
 319+ 7FDE             >                endif           ; ok        // for other definitions it "points" the correct handler
 319+ 7FDE             >                // Use of "; ok" to suppress "warning[fwdref]"
 319+ 7FDE             >
 319+ 7FDE             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 320+ 7FDE 00 00 00...                  ds      40
 321+ 8006              // constant path
 322+ 8006                              New_Def NEEDS_INC,  "NEEDS-INC", Create_Ptr, is_normal
 322+ 8006             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 322+ 8006             >
 322+ 8006             >                // dummy db directives used to calculate length of namec
 322+ 8006 4E 45 45 44 >                db      "NEEDS-INC"
 322+ 800A 53 2D 49 4E >
 322+ 800E 43          >
 322+ 800F             >len_NFA         defl    $ - temp_NFA
 322+ 800F             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 322+ 8006             >
 322+ 8006 89          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 322+ 8007 4E 45 45 44 >                db      "NEEDS-INC"               // name string in 7-bit ascii, but
 322+ 800B 53 2D 49 4E >
 322+ 800F 43          >
 322+ 8010             >                org     $-1                 // alter last byte of Name just above to set
 322+ 800F C3          >                db      {b $} | END_BIT     // msb as name end
 322+ 8010             >
 322+ 8010 D0 7F       >                dw      last_NFA            // Link to previous definition Name
 322+ 8012             >NEEDS_INC:          if Create_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 322+ 8012 CD A5 76    >                call    Create_Ptr ; ok        // for primitive definitions  actual code
 322+ 8015             >
 322+ 8015             >
 322+ 8015             >                endif           ; ok        // for other definitions it "points" the correct handler
 322+ 8015             >                // Use of "; ok" to suppress "warning[fwdref]"
 322+ 8015             >
 322+ 8015             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 323+ 8015 04 69 6E 63                  db      4, "inc/", 0
 323+ 8019 2F 00
 324+ 801B                              New_Def NEEDS_LIB,  "NEEDS-LIB", Create_Ptr, is_normal
 324+ 801B             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 324+ 801B             >
 324+ 801B             >                // dummy db directives used to calculate length of namec
 324+ 801B 4E 45 45 44 >                db      "NEEDS-LIB"
 324+ 801F 53 2D 4C 49 >
 324+ 8023 42          >
 324+ 8024             >len_NFA         defl    $ - temp_NFA
 324+ 8024             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 324+ 801B             >
 324+ 801B 89          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 324+ 801C 4E 45 45 44 >                db      "NEEDS-LIB"               // name string in 7-bit ascii, but
 324+ 8020 53 2D 4C 49 >
 324+ 8024 42          >
 324+ 8025             >                org     $-1                 // alter last byte of Name just above to set
 324+ 8024 C2          >                db      {b $} | END_BIT     // msb as name end
 324+ 8025             >
 324+ 8025 06 80       >                dw      last_NFA            // Link to previous definition Name
 324+ 8027             >NEEDS_LIB:          if Create_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 324+ 8027 CD A5 76    >                call    Create_Ptr ; ok        // for primitive definitions  actual code
 324+ 802A             >
 324+ 802A             >
 324+ 802A             >                endif           ; ok        // for other definitions it "points" the correct handler
 324+ 802A             >                // Use of "; ok" to suppress "warning[fwdref]"
 324+ 802A             >
 324+ 802A             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 325+ 802A 04 6C 69 62                  db      4, "lib/", 0
 325+ 802E 2F 00
 326+ 8030
 327+ 8030              // Concatenate path at a and filename and include it
 328+ 8030              // No error is issued if filename doesn't exist.
 329+ 8030                              Colon_Def NEEDS_SLASH, "NEEDS/", is_normal
 329+ 8030             >                New_Def  NEEDS_SLASH, "NEEDS/", Enter_Ptr, is_normal ; ok
 329+ 8030             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 329+ 8030             >
 329+ 8030             >                // dummy db directives used to calculate length of namec
 329+ 8030 4E 45 45 44 >                db      "NEEDS/"
 329+ 8034 53 2F       >
 329+ 8036             >len_NFA         defl    $ - temp_NFA
 329+ 8036             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 329+ 8030             >
 329+ 8030 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 329+ 8031 4E 45 45 44 >                db      "NEEDS/"               // name string in 7-bit ascii, but
 329+ 8035 53 2F       >
 329+ 8037             >                org     $-1                 // alter last byte of Name just above to set
 329+ 8036 AF          >                db      {b $} | END_BIT     // msb as name end
 329+ 8037             >
 329+ 8037 1B 80       >                dw      last_NFA            // Link to previous definition Name
 329+ 8039             >NEEDS_SLASH:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 329+ 8039 CD D3 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 329+ 803C             >
 329+ 803C             >
 329+ 803C             >                endif           ; ok        // for other definitions it "points" the correct handler
 329+ 803C             >                // Use of "; ok" to suppress "warning[fwdref]"
 329+ 803C             >
 329+ 803C             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 330+ 803C D7 71 5E 6A                  dw      COUNT, TUCK             // n a n
 331+ 8040 DB 7F 6C 6A                  dw      NEEDS_FN, SWAP, CMOVE   // n        \ Path
 331+ 8044 49 68
 332+ 8046 DB 7F AB 69                  dw      NEEDS_FN, PLUS          // a1+n     \ Concat
 333+ 804A AA 7F CA 69                  dw      NEEDS_W, ONE_PLUS, SWAP
 333+ 804E 6C 6A
 334+ 8050 A5 63 23 00                  dw      LIT, 35
 335+ 8054 49 68                        dw      CMOVE
 336+ 8056 DB 7F                        dw      NEEDS_FN
 337+ 8058 B1 73 51 6C                  dw      PAD, ONE, F_OPEN
 337+ 805C FC 67
 338+ 805E 71 69                        dw      ZEQUAL
 339+ 8060 1D 64                        dw      ZBRANCH
 340+ 8062 08 00                        dw      Needs_1 - $
 341+ 8064 A9 7E                        dw          F_INCLUDE
 342+ 8066 08 64                        dw      BRANCH
 343+ 8068 04 00                        dw      Needs_2 - $
 344+ 806A              Needs_1:
 345+ 806A              //              dw          NEEDS_W, COUNT, TYPE, SPACE
 346+ 806A              //              dw          LIT, 43, MESSAGE
 347+ 806A 4A 6A                        dw          DROP
 348+ 806C              Needs_2:
 349+ 806C 40 69                        dw      EXIT                    // ;
 350+ 806E
 351+ 806E
 352+ 806E                              New_Def NDOM,   "NDOM", Create_Ptr, is_normal
 352+ 806E             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 352+ 806E             >
 352+ 806E             >                // dummy db directives used to calculate length of namec
 352+ 806E 4E 44 4F 4D >                db      "NDOM"
 352+ 8072             >len_NFA         defl    $ - temp_NFA
 352+ 8072             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 352+ 806E             >
 352+ 806E 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 352+ 806F 4E 44 4F 4D >                db      "NDOM"               // name string in 7-bit ascii, but
 352+ 8073             >                org     $-1                 // alter last byte of Name just above to set
 352+ 8072 CD          >                db      {b $} | END_BIT     // msb as name end
 352+ 8073             >
 352+ 8073 30 80       >                dw      last_NFA            // Link to previous definition Name
 352+ 8075             >NDOM:          if Create_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 352+ 8075 CD A5 76    >                call    Create_Ptr ; ok        // for primitive definitions  actual code
 352+ 8078             >
 352+ 8078             >
 352+ 8078             >                endif           ; ok        // for other definitions it "points" the correct handler
 352+ 8078             >                // Use of "; ok" to suppress "warning[fwdref]"
 352+ 8078             >
 352+ 8078             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 353+ 8078              //              db $3A, $3F, $2F, $2A, $7C, $5C, $3C, $3E, $22
 354+ 8078 3A 3F 2F 2A                  db ':?/*|\<>"'
 354+ 807C 7C 5C 3C 3E
 354+ 8080 22
 355+ 8081 00                           db 0
 356+ 8082
 357+ 8082                              New_Def NCDM,   "NCDM", Create_Ptr, is_normal
 357+ 8082             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 357+ 8082             >
 357+ 8082             >                // dummy db directives used to calculate length of namec
 357+ 8082 4E 43 44 4D >                db      "NCDM"
 357+ 8086             >len_NFA         defl    $ - temp_NFA
 357+ 8086             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 357+ 8082             >
 357+ 8082 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 357+ 8083 4E 43 44 4D >                db      "NCDM"               // name string in 7-bit ascii, but
 357+ 8087             >                org     $-1                 // alter last byte of Name just above to set
 357+ 8086 CD          >                db      {b $} | END_BIT     // msb as name end
 357+ 8087             >
 357+ 8087 6E 80       >                dw      last_NFA            // Link to previous definition Name
 357+ 8089             >NCDM:          if Create_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 357+ 8089 CD A5 76    >                call    Create_Ptr ; ok        // for primitive definitions  actual code
 357+ 808C             >
 357+ 808C             >
 357+ 808C             >                endif           ; ok        // for other definitions it "points" the correct handler
 357+ 808C             >                // Use of "; ok" to suppress "warning[fwdref]"
 357+ 808C             >
 357+ 808C             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 358+ 808C              //              db $5F, $5E, $25, $26, $24, $5F, $7B, $7D, $7E
 359+ 808C 5F 5E 25 26                  db '_^%&$_{}~'
 359+ 8090 24 5F 7B 7D
 359+ 8094 7E
 360+ 8095 00                           db 0
 361+ 8096
 362+ 8096              // Replace illegal character in filename using the map here above
 363+ 8096              // at the moment we need only  "
 364+ 8096                              Colon_Def NEEDS_CHECK, "MAP-FN", is_normal
 364+ 8096             >                New_Def  NEEDS_CHECK, "MAP-FN", Enter_Ptr, is_normal ; ok
 364+ 8096             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 364+ 8096             >
 364+ 8096             >                // dummy db directives used to calculate length of namec
 364+ 8096 4D 41 50 2D >                db      "MAP-FN"
 364+ 809A 46 4E       >
 364+ 809C             >len_NFA         defl    $ - temp_NFA
 364+ 809C             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 364+ 8096             >
 364+ 8096 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 364+ 8097 4D 41 50 2D >                db      "MAP-FN"               // name string in 7-bit ascii, but
 364+ 809B 46 4E       >
 364+ 809D             >                org     $-1                 // alter last byte of Name just above to set
 364+ 809C CE          >                db      {b $} | END_BIT     // msb as name end
 364+ 809D             >
 364+ 809D 82 80       >                dw      last_NFA            // Link to previous definition Name
 364+ 809F             >NEEDS_CHECK:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 364+ 809F CD D3 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 364+ 80A2             >
 364+ 80A2             >
 364+ 80A2             >                endif           ; ok        // for other definitions it "points" the correct handler
 364+ 80A2             >                // Use of "; ok" to suppress "warning[fwdref]"
 364+ 80A2             >
 364+ 80A2             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 365+ 80A2 D7 71 EB 71                  dw      COUNT, BOUNDS
 366+ 80A6 6F 64                        dw      C_DO
 367+ 80A8              Needs_3:
 368+ 80A8 89 80 75 80                  dw          NCDM, NDOM, LIT, 10
 368+ 80AC A5 63 0A 00
 369+ 80B0 77 64 1A 6B                  dw          I, CFETCH
 370+ 80B4 92 65                        dw          C_MAP
 371+ 80B6 77 64 26 6B                  dw          I, CSTORE
 372+ 80BA              Needs_4:
 373+ 80BA F9 63                        dw      C_LOOP
 374+ 80BC EC FF                        dw      Needs_3 - $
 375+ 80BE 40 69                        dw      EXIT
 376+ 80C0
 377+ 80C0
 378+ 80C0              // include  "path/cccc.f" if cccc is not defined
 379+ 80C0              // filename cccc.f is temporary stored at NEEDS-W
 380+ 80C0                              Colon_Def NEEDS_PATH, "NEEDS-F", is_normal
 380+ 80C0             >                New_Def  NEEDS_PATH, "NEEDS-F", Enter_Ptr, is_normal ; ok
 380+ 80C0             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 380+ 80C0             >
 380+ 80C0             >                // dummy db directives used to calculate length of namec
 380+ 80C0 4E 45 45 44 >                db      "NEEDS-F"
 380+ 80C4 53 2D 46    >
 380+ 80C7             >len_NFA         defl    $ - temp_NFA
 380+ 80C7             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 380+ 80C0             >
 380+ 80C0 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 380+ 80C1 4E 45 45 44 >                db      "NEEDS-F"               // name string in 7-bit ascii, but
 380+ 80C5 53 2D 46    >
 380+ 80C8             >                org     $-1                 // alter last byte of Name just above to set
 380+ 80C7 C6          >                db      {b $} | END_BIT     // msb as name end
 380+ 80C8             >
 380+ 80C8 96 80       >                dw      last_NFA            // Link to previous definition Name
 380+ 80CA             >NEEDS_PATH:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 380+ 80CA CD D3 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 380+ 80CD             >
 380+ 80CD             >
 380+ 80CD             >                endif           ; ok        // for other definitions it "points" the correct handler
 380+ 80CD             >                // Use of "; ok" to suppress "warning[fwdref]"
 380+ 80CD             >
 380+ 80CD             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 381+ 80CD AC 75                        dw      LFIND
 382+ 80CF 1D 64                        dw      ZBRANCH
 383+ 80D1 0A 00                        dw      Needs_5 - $
 384+ 80D3
 385+ 80D3 4A 6A B4 6A                  dw          DROP, TWO_DROP
 386+ 80D7 08 64                        dw      BRANCH
 387+ 80D9 2C 00                        dw      Needs_6 - $
 388+ 80DB              Needs_5:
 389+ 80DB AA 7F                        dw          NEEDS_W
 390+ 80DD A5 63 23 00                  dw          LIT, 35
 391+ 80E1 79 73                        dw          ERASE                   // a
 392+ 80E3 54 6E 1A 6B                  dw          HERE, CFETCH, ONE_PLUS  // a n
 392+ 80E7 CA 69
 393+ 80E9 54 6E 3C 6A                  dw          HERE, OVER              // a n here n
 394+ 80ED AA 7F 6C 6A                  dw          NEEDS_W, SWAP, CMOVE    // a n
 394+ 80F1 49 68
 395+ 80F3 AA 7F 9F 80                  dw          NEEDS_W, NEEDS_CHECK
 396+ 80F7 AA 7F AB 69                  dw          NEEDS_W, PLUS           // a a1+1
 397+ 80FB A5 63 2E 66                  dw          LIT, $662E              // a a1+1 ".F"
 398+ 80FF 6C 6A 0C 6B                  dw          SWAP, STORE             // a
 399+ 8103 39 80                        dw          NEEDS_SLASH
 400+ 8105              Needs_6:
 401+ 8105 40 69                        dw      EXIT
 402+ 8107
 403+ 8107
 404+ 8107              // check for cccc exists in vocabulary
 405+ 8107              // if it doesn't then  INCLUDE  inc/cccc.F
 406+ 8107              // search in inc subdirectory
 407+ 8107                              Colon_Def NEEDS, "NEEDS", is_normal
 407+ 8107             >                New_Def  NEEDS, "NEEDS", Enter_Ptr, is_normal ; ok
 407+ 8107             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 407+ 8107             >
 407+ 8107             >                // dummy db directives used to calculate length of namec
 407+ 8107 4E 45 45 44 >                db      "NEEDS"
 407+ 810B 53          >
 407+ 810C             >len_NFA         defl    $ - temp_NFA
 407+ 810C             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 407+ 8107             >
 407+ 8107 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 407+ 8108 4E 45 45 44 >                db      "NEEDS"               // name string in 7-bit ascii, but
 407+ 810C 53          >
 407+ 810D             >                org     $-1                 // alter last byte of Name just above to set
 407+ 810C D3          >                db      {b $} | END_BIT     // msb as name end
 407+ 810D             >
 407+ 810D C0 80       >                dw      last_NFA            // Link to previous definition Name
 407+ 810F             >NEEDS:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 407+ 810F CD D3 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 407+ 8112             >
 407+ 8112             >
 407+ 8112             >                endif           ; ok        // for other definitions it "points" the correct handler
 407+ 8112             >                // Use of "; ok" to suppress "warning[fwdref]"
 407+ 8112             >
 407+ 8112             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 408+ 8112 68 6D 00 6B                  dw      TO_IN, FETCH
 409+ 8116 77 6A                        dw      DUP
 410+ 8118 12 80 CA 80                  dw      NEEDS_INC, NEEDS_PATH
 411+ 811C 68 6D 0C 6B                  dw      TO_IN, STORE
 412+ 8120 27 80 CA 80                  dw      NEEDS_LIB, NEEDS_PATH
 413+ 8124 68 6D 0C 6B                  dw      TO_IN, STORE
 414+ 8128 AC 75                        dw      LFIND
 415+ 812A 1D 64                        dw      ZBRANCH
 416+ 812C 08 00                        dw      Needs_10 - $
 417+ 812E B4 6A                        dw          TWO_DROP
 418+ 8130 08 64                        dw      BRANCH
 419+ 8132 10 00                        dw      Needs_11 - $
 420+ 8134              Needs_10:
 421+ 8134 AA 7F D7 71                  dw      NEEDS_W, COUNT, TYPE, SPACE
 421+ 8138 3D 72 5C 6F
 422+ 813C A5 63 2B 00                  dw      LIT, 43, MESSAGE
 422+ 8140 E1 7A
 423+ 8142              Needs_11:
 424+ 8142 40 69                        dw      EXIT
 425+ 8144
 426+ 8144
 427+ 8144              //  ______________________________________________________________________
 428+ 8144              //
 429+ 8144              // load         n --
 430+ 8144                              Colon_Def LOAD, "LOAD", is_normal
 430+ 8144             >                New_Def  LOAD, "LOAD", Enter_Ptr, is_normal ; ok
 430+ 8144             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 430+ 8144             >
 430+ 8144             >                // dummy db directives used to calculate length of namec
 430+ 8144 4C 4F 41 44 >                db      "LOAD"
 430+ 8148             >len_NFA         defl    $ - temp_NFA
 430+ 8148             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 430+ 8144             >
 430+ 8144 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 430+ 8145 4C 4F 41 44 >                db      "LOAD"               // name string in 7-bit ascii, but
 430+ 8149             >                org     $-1                 // alter last byte of Name just above to set
 430+ 8148 C4          >                db      {b $} | END_BIT     // msb as name end
 430+ 8149             >
 430+ 8149 07 81       >                dw      last_NFA            // Link to previous definition Name
 430+ 814B             >LOAD:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 430+ 814B CD D3 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 430+ 814E             >
 430+ 814E             >
 430+ 814E             >                endif           ; ok        // for other definitions it "points" the correct handler
 430+ 814E             >                // Use of "; ok" to suppress "warning[fwdref]"
 430+ 814E             >
 430+ 814E             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 431+ 814E 5E 6D 00 6B                  dw      BLK, FETCH, TO_R        // blk @ >r
 431+ 8152 4D 69
 432+ 8154 68 6D 00 6B                  dw      TO_IN, FETCH, TO_R      // >in @ >r
 432+ 8158 4D 69
 433+ 815A
 434+ 815A 48 6C 68 6D                  dw      ZERO, TO_IN, STORE      // 0 >in !
 434+ 815E 0C 6B
 435+ 8160 9C 6C 40 7A                  dw      BSCR, MUL, BLK, STORE   // b/scr * blk !
 435+ 8164 5E 6D 0C 6B
 436+ 8168 96 77                        dw      INTERPRET               // interpret
 437+ 816A
 438+ 816A 5B 69 68 6D                  dw      R_TO, TO_IN, STORE      // r> >in !
 438+ 816E 0C 6B
 439+ 8170 5B 69 5E 6D                  dw      R_TO, BLK, STORE        // r> blk !
 439+ 8174 0C 6B
 440+ 8176 40 69                        dw      EXIT                    // ;
 441+ 8178
 442+ 8178              //  ______________________________________________________________________
 443+ 8178              //
 444+ 8178              // -->          --
 445+ 8178                              Colon_Def LOAD_NEXT, "-->", is_immediate
 445+ 8178             >                New_Def  LOAD_NEXT, "-->", Enter_Ptr, is_immediate ; ok
 445+ 8178             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 445+ 8178             >
 445+ 8178             >                // dummy db directives used to calculate length of namec
 445+ 8178 2D 2D 3E    >                db      "-->"
 445+ 817B             >len_NFA         defl    $ - temp_NFA
 445+ 817B             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 445+ 8178             >
 445+ 8178 C3          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 445+ 8179 2D 2D 3E    >                db      "-->"               // name string in 7-bit ascii, but
 445+ 817C             >                org     $-1                 // alter last byte of Name just above to set
 445+ 817B BE          >                db      {b $} | END_BIT     // msb as name end
 445+ 817C             >
 445+ 817C 44 81       >                dw      last_NFA            // Link to previous definition Name
 445+ 817E             >LOAD_NEXT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 445+ 817E CD D3 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 445+ 8181             >
 445+ 8181             >
 445+ 8181             >                endif           ; ok        // for other definitions it "points" the correct handler
 445+ 8181             >                // Use of "; ok" to suppress "warning[fwdref]"
 445+ 8181             >
 445+ 8181             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 446+ 8181 A4 70                        dw      QLOADING                // ?loading
 447+ 8183 48 6C 68 6D                  dw      ZERO, TO_IN, STORE      // 0 >in !
 447+ 8187 0C 6B
 448+ 8189 9C 6C                        dw      BSCR                    // b/scr
 449+ 818B 5E 6D 00 6B                  dw      BLK, FETCH              // blk @
 450+ 818F 3C 6A                        dw      OVER                    // over
 451+ 8191 70 7A                        dw      MOD                     // mod
 452+ 8193 A4 6E                        dw      SUBTRACT                // -
 453+ 8195 5E 6D DF 6A                  dw      BLK, PLUSSTORE          // +!
 454+ 8199 40 69                        dw      EXIT                    // ;
 455+ 819B
 456+ 819B              //  ______________________________________________________________________
 457+ 819B              //
 458+ 819B              // '            -- xt
 459+ 819B                              Colon_Def TICK, "'", is_normal
 459+ 819B             >                New_Def  TICK, "'", Enter_Ptr, is_normal ; ok
 459+ 819B             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 459+ 819B             >
 459+ 819B             >                // dummy db directives used to calculate length of namec
 459+ 819B 27          >                db      "'"
 459+ 819C             >len_NFA         defl    $ - temp_NFA
 459+ 819C             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 459+ 819B             >
 459+ 819B 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 459+ 819C 27          >                db      "'"               // name string in 7-bit ascii, but
 459+ 819D             >                org     $-1                 // alter last byte of Name just above to set
 459+ 819C A7          >                db      {b $} | END_BIT     // msb as name end
 459+ 819D             >
 459+ 819D 78 81       >                dw      last_NFA            // Link to previous definition Name
 459+ 819F             >TICK:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 459+ 819F CD D3 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 459+ 81A2             >
 459+ 81A2             >
 459+ 81A2             >                endif           ; ok        // for other definitions it "points" the correct handler
 459+ 81A2             >                // Use of "; ok" to suppress "warning[fwdref]"
 459+ 81A2             >
 459+ 81A2             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 460+ 81A2 AC 75                        dw      LFIND                   // -find
 461+ 81A4 71 69                        dw      ZEQUAL                  // 0=
 462+ 81A6 48 6C 26 70                  dw      ZERO, QERROR            // 0 ?error
 463+ 81AA 4A 6A                        dw      DROP                    // drop
 464+ 81AC 40 69                        dw      EXIT                    // ;
 465+ 81AE
 466+ 81AE              //  ______________________________________________________________________
 467+ 81AE              //
 468+ 81AE              // forget       -- cccc
 469+ 81AE                              Colon_Def FORGET, "FORGET", is_normal
 469+ 81AE             >                New_Def  FORGET, "FORGET", Enter_Ptr, is_normal ; ok
 469+ 81AE             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 469+ 81AE             >
 469+ 81AE             >                // dummy db directives used to calculate length of namec
 469+ 81AE 46 4F 52 47 >                db      "FORGET"
 469+ 81B2 45 54       >
 469+ 81B4             >len_NFA         defl    $ - temp_NFA
 469+ 81B4             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 469+ 81AE             >
 469+ 81AE 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 469+ 81AF 46 4F 52 47 >                db      "FORGET"               // name string in 7-bit ascii, but
 469+ 81B3 45 54       >
 469+ 81B5             >                org     $-1                 // alter last byte of Name just above to set
 469+ 81B4 D4          >                db      {b $} | END_BIT     // msb as name end
 469+ 81B5             >
 469+ 81B5 9B 81       >                dw      last_NFA            // Link to previous definition Name
 469+ 81B7             >FORGET:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 469+ 81B7 CD D3 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 469+ 81BA             >
 469+ 81BA             >
 469+ 81BA             >                endif           ; ok        // for other definitions it "points" the correct handler
 469+ 81BA             >                // Use of "; ok" to suppress "warning[fwdref]"
 469+ 81BA             >
 469+ 81BA             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 470+ 81BA A5 6D 00 6B                  dw      CURRENT, FETCH          // current @
 471+ 81BE 97 6D 00 6B                  dw      CONTEXT, FETCH          // context @
 472+ 81C2 A4 6E A5 63                  dw      SUBTRACT, LIT, 23, QERROR // - 23 ?error
 472+ 81C6 17 00 26 70
 473+ 81CA 9F 81 F1 6F                  dw      TICK, TO_BODY           // ' >body
 474+ 81CE 77 6A 0E 6D                  dw      DUP, FENCE, FETCH       // dup fence @
 474+ 81D2 00 6B
 475+ 81D4 C0 6E A5 63                  dw      ULESS, LIT, 21, QERROR  // u< 21 ?error
 475+ 81D8 15 00 26 70
 476+ 81DC 77 6A C5 6F                  dw      DUP, NFA, DP, STORE     // dup nfa dp !
 476+ 81E0 17 6D 0C 6B
 477+ 81E4 A5 6F 00 6B                  dw      LFA, FETCH              // lfa @
 478+ 81E8 97 6D 00 6B                  dw      CONTEXT, FETCH, STORE   // context @ !
 478+ 81EC 0C 6B
 479+ 81EE 40 69                        dw      EXIT                    // ;
 480+ 81F0
 481+ 81F0              //  ______________________________________________________________________
 482+ 81F0              //
 483+ 81F0              // marker       -- cccc
 484+ 81F0                              Colon_Def MARKER, "MARKER", is_immediate
 484+ 81F0             >                New_Def  MARKER, "MARKER", Enter_Ptr, is_immediate ; ok
 484+ 81F0             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 484+ 81F0             >
 484+ 81F0             >                // dummy db directives used to calculate length of namec
 484+ 81F0 4D 41 52 4B >                db      "MARKER"
 484+ 81F4 45 52       >
 484+ 81F6             >len_NFA         defl    $ - temp_NFA
 484+ 81F6             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 484+ 81F0             >
 484+ 81F0 C6          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 484+ 81F1 4D 41 52 4B >                db      "MARKER"               // name string in 7-bit ascii, but
 484+ 81F5 45 52       >
 484+ 81F7             >                org     $-1                 // alter last byte of Name just above to set
 484+ 81F6 D2          >                db      {b $} | END_BIT     // msb as name end
 484+ 81F7             >
 484+ 81F7 AE 81       >                dw      last_NFA            // Link to previous definition Name
 484+ 81F9             >MARKER:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 484+ 81F9 CD D3 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 484+ 81FC             >
 484+ 81FC             >
 484+ 81FC             >                endif           ; ok        // for other definitions it "points" the correct handler
 484+ 81FC             >                // Use of "; ok" to suppress "warning[fwdref]"
 484+ 81FC             >
 484+ 81FC             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 485+ 81FC A3 71                        dw      CBUILDS
 486+ 81FE 26 6D 00 6B                  dw      VOC_LINK, FETCH, COMMA
 486+ 8202 72 6E
 487+ 8204 A5 6D 00 6B                  dw      CURRENT, FETCH, COMMA
 487+ 8208 72 6E
 488+ 820A 97 6D 00 6B                  dw      CONTEXT, FETCH, COMMA
 488+ 820E 72 6E
 489+ 8210 94 6F 72 6E                  dw      LATEST, COMMA
 490+ 8214 94 6F DA 6F                  dw      LATEST, PFA, LFA, FETCH, COMMA
 490+ 8218 A5 6F 00 6B
 490+ 821C 72 6E
 491+ 821E B4 71                        dw      DOES_TO
 492+ 8220 77 6A 00 6B                  dw      DUP, FETCH, VOC_LINK, STORE, CELL_PLUS
 492+ 8224 26 6D 0C 6B
 492+ 8228 EC 69
 493+ 822A 77 6A 00 6B                  dw      DUP, FETCH, CURRENT, STORE, CELL_PLUS
 493+ 822E A5 6D 0C 6B
 493+ 8232 EC 69
 494+ 8234 77 6A 00 6B                  dw      DUP, FETCH, CONTEXT, STORE, CELL_PLUS
 494+ 8238 97 6D 0C 6B
 494+ 823C EC 69
 495+ 823E 77 6A 00 6B                  dw      DUP, FETCH, DP, STORE, CELL_PLUS
 495+ 8242 17 6D 0C 6B
 495+ 8246 EC 69
 496+ 8248 00 6B A5 6D                  dw           FETCH, CURRENT, FETCH, STORE
 496+ 824C 00 6B 0C 6B
 497+ 8250 40 69                        dw      EXIT
 498+ 8252
 499+ 8252              //  ______________________________________________________________________
 500+ 8252              //
 501+ 8252              // spaces       n --
 502+ 8252                              Colon_Def SPACES, "SPACES", is_normal
 502+ 8252             >                New_Def  SPACES, "SPACES", Enter_Ptr, is_normal ; ok
 502+ 8252             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 502+ 8252             >
 502+ 8252             >                // dummy db directives used to calculate length of namec
 502+ 8252 53 50 41 43 >                db      "SPACES"
 502+ 8256 45 53       >
 502+ 8258             >len_NFA         defl    $ - temp_NFA
 502+ 8258             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 502+ 8252             >
 502+ 8252 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 502+ 8253 53 50 41 43 >                db      "SPACES"               // name string in 7-bit ascii, but
 502+ 8257 45 53       >
 502+ 8259             >                org     $-1                 // alter last byte of Name just above to set
 502+ 8258 D3          >                db      {b $} | END_BIT     // msb as name end
 502+ 8259             >
 502+ 8259 F0 81       >                dw      last_NFA            // Link to previous definition Name
 502+ 825B             >SPACES:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 502+ 825B CD D3 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 502+ 825E             >
 502+ 825E             >
 502+ 825E             >                endif           ; ok        // for other definitions it "points" the correct handler
 502+ 825E             >                // Use of "; ok" to suppress "warning[fwdref]"
 502+ 825E             >
 502+ 825E             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 503+ 825E 48 6C 0D 6F                  dw      ZERO, MAX
 504+ 8262 48 6C 42 64                  dw      ZERO, C_Q_DO
 505+ 8266 08 00                        dw      Spaces_Leave - $
 506+ 8268              Spaces_Loop:
 507+ 8268 5C 6F                        dw          SPACE
 508+ 826A F9 63                        dw      C_LOOP
 509+ 826C FC FF                        dw      Spaces_Loop - $
 510+ 826E              Spaces_Leave:
 511+ 826E 40 69                        dw      EXIT                    // ;
 512+ 8270
 513+ 8270              //  ______________________________________________________________________
 514+ 8270              //
 515+ 8270              // <#           --
 516+ 8270                              Colon_Def BEGIN_DASH, "<#", is_normal
 516+ 8270             >                New_Def  BEGIN_DASH, "<#", Enter_Ptr, is_normal ; ok
 516+ 8270             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 516+ 8270             >
 516+ 8270             >                // dummy db directives used to calculate length of namec
 516+ 8270 3C 23       >                db      "<#"
 516+ 8272             >len_NFA         defl    $ - temp_NFA
 516+ 8272             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 516+ 8270             >
 516+ 8270 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 516+ 8271 3C 23       >                db      "<#"               // name string in 7-bit ascii, but
 516+ 8273             >                org     $-1                 // alter last byte of Name just above to set
 516+ 8272 A3          >                db      {b $} | END_BIT     // msb as name end
 516+ 8273             >
 516+ 8273 52 82       >                dw      last_NFA            // Link to previous definition Name
 516+ 8275             >BEGIN_DASH:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 516+ 8275 CD D3 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 516+ 8278             >
 516+ 8278             >
 516+ 8278             >                endif           ; ok        // for other definitions it "points" the correct handler
 516+ 8278             >                // Use of "; ok" to suppress "warning[fwdref]"
 516+ 8278             >
 516+ 8278             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 517+ 8278 B1 73 ED 6D                  dw      PAD, HLD, STORE
 517+ 827C 0C 6B
 518+ 827E 40 69                        dw      EXIT
 519+ 8280
 520+ 8280              //  ______________________________________________________________________
 521+ 8280              //
 522+ 8280              // #>           --
 523+ 8280                              Colon_Def DASH_END, "#>", is_normal
 523+ 8280             >                New_Def  DASH_END, "#>", Enter_Ptr, is_normal ; ok
 523+ 8280             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 523+ 8280             >
 523+ 8280             >                // dummy db directives used to calculate length of namec
 523+ 8280 23 3E       >                db      "#>"
 523+ 8282             >len_NFA         defl    $ - temp_NFA
 523+ 8282             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 523+ 8280             >
 523+ 8280 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 523+ 8281 23 3E       >                db      "#>"               // name string in 7-bit ascii, but
 523+ 8283             >                org     $-1                 // alter last byte of Name just above to set
 523+ 8282 BE          >                db      {b $} | END_BIT     // msb as name end
 523+ 8283             >
 523+ 8283 70 82       >                dw      last_NFA            // Link to previous definition Name
 523+ 8285             >DASH_END:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 523+ 8285 CD D3 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 523+ 8288             >
 523+ 8288             >
 523+ 8288             >                endif           ; ok        // for other definitions it "points" the correct handler
 523+ 8288             >                // Use of "; ok" to suppress "warning[fwdref]"
 523+ 8288             >
 523+ 8288             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 524+ 8288 B4 6A                        dw      TWO_DROP
 525+ 828A ED 6D 00 6B                  dw      HLD, FETCH, PAD, OVER, SUBTRACT
 525+ 828E B1 73 3C 6A
 525+ 8292 A4 6E
 526+ 8294 40 69                        dw      EXIT
 527+ 8296
 528+ 8296              //  ______________________________________________________________________
 529+ 8296              //
 530+ 8296              // sign         n d -- d
 531+ 8296                              Colon_Def SIGN, "SIGN", is_normal
 531+ 8296             >                New_Def  SIGN, "SIGN", Enter_Ptr, is_normal ; ok
 531+ 8296             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 531+ 8296             >
 531+ 8296             >                // dummy db directives used to calculate length of namec
 531+ 8296 53 49 47 4E >                db      "SIGN"
 531+ 829A             >len_NFA         defl    $ - temp_NFA
 531+ 829A             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 531+ 8296             >
 531+ 8296 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 531+ 8297 53 49 47 4E >                db      "SIGN"               // name string in 7-bit ascii, but
 531+ 829B             >                org     $-1                 // alter last byte of Name just above to set
 531+ 829A CE          >                db      {b $} | END_BIT     // msb as name end
 531+ 829B             >
 531+ 829B 80 82       >                dw      last_NFA            // Link to previous definition Name
 531+ 829D             >SIGN:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 531+ 829D CD D3 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 531+ 82A0             >
 531+ 82A0             >
 531+ 82A0             >                endif           ; ok        // for other definitions it "points" the correct handler
 531+ 82A0             >                // Use of "; ok" to suppress "warning[fwdref]"
 531+ 82A0             >
 531+ 82A0             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 532+ 82A0 8B 69                        dw      ZLESS
 533+ 82A2 1D 64                        dw      ZBRANCH
 534+ 82A4 08 00                        dw      Sign_Endif - $
 535+ 82A6 A5 63 2D 00                  dw          LIT, 45, HOLD
 535+ 82AA 9A 73
 536+ 82AC              Sign_Endif:
 537+ 82AC 40 69                        dw      EXIT
 538+ 82AE
 539+ 82AE              //  ______________________________________________________________________
 540+ 82AE              //
 541+ 82AE              // #           d1 -- d2
 542+ 82AE                              Colon_Def DASH, "#", is_normal
 542+ 82AE             >                New_Def  DASH, "#", Enter_Ptr, is_normal ; ok
 542+ 82AE             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 542+ 82AE             >
 542+ 82AE             >                // dummy db directives used to calculate length of namec
 542+ 82AE 23          >                db      "#"
 542+ 82AF             >len_NFA         defl    $ - temp_NFA
 542+ 82AF             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 542+ 82AE             >
 542+ 82AE 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 542+ 82AF 23          >                db      "#"               // name string in 7-bit ascii, but
 542+ 82B0             >                org     $-1                 // alter last byte of Name just above to set
 542+ 82AF A3          >                db      {b $} | END_BIT     // msb as name end
 542+ 82B0             >
 542+ 82B0 96 82       >                dw      last_NFA            // Link to previous definition Name
 542+ 82B2             >DASH:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 542+ 82B2 CD D3 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 542+ 82B5             >
 542+ 82B5             >
 542+ 82B5             >                endif           ; ok        // for other definitions it "points" the correct handler
 542+ 82B5             >                // Use of "; ok" to suppress "warning[fwdref]"
 542+ 82B5             >
 542+ 82B5             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 543+ 82B5 BC 6D 00 6B                  dw      BASE, FETCH
 544+ 82B9
 545+ 82B9 4D 69                        dw      TO_R                    // >r           ( ud1 )
 546+ 82BB 48 6C 69 69                  dw      ZERO, R_OP, UMDIVMOD    // 0 r um/mod   ( l rem1 h/r )
 546+ 82BF A7 68
 547+ 82C1 5B 69 6C 6A                  dw      R_TO, SWAP, TO_R        // r> swap >r   ( l rem )
 547+ 82C5 4D 69
 548+ 82C7 A7 68                        dw      UMDIVMOD                // um/mod       ( rem2 l/r )
 549+ 82C9 5B 69                        dw      R_TO                    // r>           ( rem2 l/r h/r )
 550+ 82CB
 551+ 82CB 82 6A                        dw      ROT
 552+ 82CD A5 63 09 00                  dw      LIT, 9, OVER, LESS
 552+ 82D1 3C 6A D0 6E
 553+ 82D5 1D 64                        dw      ZBRANCH
 554+ 82D7 08 00                        dw      Dash_Endif - $
 555+ 82D9 A5 63 07 00                  dw          LIT, 7, PLUS
 555+ 82DD AB 69
 556+ 82DF              Dash_Endif:
 557+ 82DF
 558+ 82DF A5 63 30 00                  dw      LIT, 48, PLUS, HOLD
 558+ 82E3 AB 69 9A 73
 559+ 82E7 40 69                        dw      EXIT
 560+ 82E9
 561+ 82E9              //  ______________________________________________________________________
 562+ 82E9              //
 563+ 82E9              // #s           d1 -- d2
 564+ 82E9                              Colon_Def DASHES, "#S", is_normal
 564+ 82E9             >                New_Def  DASHES, "#S", Enter_Ptr, is_normal ; ok
 564+ 82E9             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 564+ 82E9             >
 564+ 82E9             >                // dummy db directives used to calculate length of namec
 564+ 82E9 23 53       >                db      "#S"
 564+ 82EB             >len_NFA         defl    $ - temp_NFA
 564+ 82EB             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 564+ 82E9             >
 564+ 82E9 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 564+ 82EA 23 53       >                db      "#S"               // name string in 7-bit ascii, but
 564+ 82EC             >                org     $-1                 // alter last byte of Name just above to set
 564+ 82EB D3          >                db      {b $} | END_BIT     // msb as name end
 564+ 82EC             >
 564+ 82EC AE 82       >                dw      last_NFA            // Link to previous definition Name
 564+ 82EE             >DASHES:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 564+ 82EE CD D3 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 564+ 82F1             >
 564+ 82F1             >
 564+ 82F1             >                endif           ; ok        // for other definitions it "points" the correct handler
 564+ 82F1             >                // Use of "; ok" to suppress "warning[fwdref]"
 564+ 82F1             >
 564+ 82F1             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 565+ 82F1              Dashes_Begin:
 566+ 82F1 B2 82 D2 6A                  dw      DASH, TWO_DUP
 567+ 82F5 F0 68 71 69                  dw          OR_OP, ZEQUAL
 568+ 82F9 1D 64                        dw      ZBRANCH
 569+ 82FB F6 FF                        dw      Dashes_Begin - $
 570+ 82FD 40 69                        dw      EXIT
 571+ 82FF
 572+ 82FF              //  ______________________________________________________________________
 573+ 82FF              //
 574+ 82FF              // d.r          d n --
 575+ 82FF                              Colon_Def D_DOT_R, "D.R", is_normal
 575+ 82FF             >                New_Def  D_DOT_R, "D.R", Enter_Ptr, is_normal ; ok
 575+ 82FF             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 575+ 82FF             >
 575+ 82FF             >                // dummy db directives used to calculate length of namec
 575+ 82FF 44 2E 52    >                db      "D.R"
 575+ 8302             >len_NFA         defl    $ - temp_NFA
 575+ 8302             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 575+ 82FF             >
 575+ 82FF 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 575+ 8300 44 2E 52    >                db      "D.R"               // name string in 7-bit ascii, but
 575+ 8303             >                org     $-1                 // alter last byte of Name just above to set
 575+ 8302 D2          >                db      {b $} | END_BIT     // msb as name end
 575+ 8303             >
 575+ 8303 E9 82       >                dw      last_NFA            // Link to previous definition Name
 575+ 8305             >D_DOT_R:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 575+ 8305 CD D3 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 575+ 8308             >
 575+ 8308             >
 575+ 8308             >                endif           ; ok        // for other definitions it "points" the correct handler
 575+ 8308             >                // Use of "; ok" to suppress "warning[fwdref]"
 575+ 8308             >
 575+ 8308             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 576+ 8308 4D 69                        dw      TO_R
 577+ 830A 5E 6A 90 79                  dw      TUCK, DABS
 578+ 830E 75 82 EE 82                  dw      BEGIN_DASH, DASHES, ROT, SIGN, DASH_END
 578+ 8312 82 6A 9D 82
 578+ 8316 85 82
 579+ 8318 5B 69                        dw      R_TO
 580+ 831A 3C 6A A4 6E                  dw      OVER, SUBTRACT, SPACES, TYPE
 580+ 831E 5B 82 3D 72
 581+ 8322 40 69                        dw      EXIT
 582+ 8324
 583+ 8324              //  ______________________________________________________________________
 584+ 8324              //
 585+ 8324              // .r           n1 n2 --
 586+ 8324                              Colon_Def DOT_R, ".R", is_normal
 586+ 8324             >                New_Def  DOT_R, ".R", Enter_Ptr, is_normal ; ok
 586+ 8324             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 586+ 8324             >
 586+ 8324             >                // dummy db directives used to calculate length of namec
 586+ 8324 2E 52       >                db      ".R"
 586+ 8326             >len_NFA         defl    $ - temp_NFA
 586+ 8326             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 586+ 8324             >
 586+ 8324 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 586+ 8325 2E 52       >                db      ".R"               // name string in 7-bit ascii, but
 586+ 8327             >                org     $-1                 // alter last byte of Name just above to set
 586+ 8326 D2          >                db      {b $} | END_BIT     // msb as name end
 586+ 8327             >
 586+ 8327 FF 82       >                dw      last_NFA            // Link to previous definition Name
 586+ 8329             >DOT_R:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 586+ 8329 CD D3 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 586+ 832C             >
 586+ 832C             >
 586+ 832C             >                endif           ; ok        // for other definitions it "points" the correct handler
 586+ 832C             >                // Use of "; ok" to suppress "warning[fwdref]"
 586+ 832C             >
 586+ 832C             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 587+ 832C 4D 69                        dw      TO_R
 588+ 832E 97 6E 5B 69                  dw      S_TO_D, R_TO
 589+ 8332 05 83                        dw      D_DOT_R
 590+ 8334 40 69                        dw      EXIT
 591+ 8336
 592+ 8336              //  ______________________________________________________________________
 593+ 8336              //
 594+ 8336              // d.           d --
 595+ 8336                              Colon_Def D_DOT, "D.", is_normal
 595+ 8336             >                New_Def  D_DOT, "D.", Enter_Ptr, is_normal ; ok
 595+ 8336             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 595+ 8336             >
 595+ 8336             >                // dummy db directives used to calculate length of namec
 595+ 8336 44 2E       >                db      "D."
 595+ 8338             >len_NFA         defl    $ - temp_NFA
 595+ 8338             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 595+ 8336             >
 595+ 8336 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 595+ 8337 44 2E       >                db      "D."               // name string in 7-bit ascii, but
 595+ 8339             >                org     $-1                 // alter last byte of Name just above to set
 595+ 8338 AE          >                db      {b $} | END_BIT     // msb as name end
 595+ 8339             >
 595+ 8339 24 83       >                dw      last_NFA            // Link to previous definition Name
 595+ 833B             >D_DOT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 595+ 833B CD D3 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 595+ 833E             >
 595+ 833E             >
 595+ 833E             >                endif           ; ok        // for other definitions it "points" the correct handler
 595+ 833E             >                // Use of "; ok" to suppress "warning[fwdref]"
 595+ 833E             >
 595+ 833E             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 596+ 833E 48 6C 05 83                  dw      ZERO, D_DOT_R, SPACE
 596+ 8342 5C 6F
 597+ 8344 40 69                        dw      EXIT
 598+ 8346
 599+ 8346              //  ______________________________________________________________________
 600+ 8346              //
 601+ 8346              // .            n --
 602+ 8346                              Colon_Def DOT, ".", is_normal
 602+ 8346             >                New_Def  DOT, ".", Enter_Ptr, is_normal ; ok
 602+ 8346             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 602+ 8346             >
 602+ 8346             >                // dummy db directives used to calculate length of namec
 602+ 8346 2E          >                db      "."
 602+ 8347             >len_NFA         defl    $ - temp_NFA
 602+ 8347             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 602+ 8346             >
 602+ 8346 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 602+ 8347 2E          >                db      "."               // name string in 7-bit ascii, but
 602+ 8348             >                org     $-1                 // alter last byte of Name just above to set
 602+ 8347 AE          >                db      {b $} | END_BIT     // msb as name end
 602+ 8348             >
 602+ 8348 36 83       >                dw      last_NFA            // Link to previous definition Name
 602+ 834A             >DOT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 602+ 834A CD D3 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 602+ 834D             >
 602+ 834D             >
 602+ 834D             >                endif           ; ok        // for other definitions it "points" the correct handler
 602+ 834D             >                // Use of "; ok" to suppress "warning[fwdref]"
 602+ 834D             >
 602+ 834D             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 603+ 834D 97 6E 3B 83                  dw      S_TO_D, D_DOT
 604+ 8351 40 69                        dw      EXIT
 605+ 8353
 606+ 8353              //  ______________________________________________________________________
 607+ 8353              //
 608+ 8353              // ?            n --
 609+ 8353                              Colon_Def QUESTION, "?", is_normal
 609+ 8353             >                New_Def  QUESTION, "?", Enter_Ptr, is_normal ; ok
 609+ 8353             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 609+ 8353             >
 609+ 8353             >                // dummy db directives used to calculate length of namec
 609+ 8353 3F          >                db      "?"
 609+ 8354             >len_NFA         defl    $ - temp_NFA
 609+ 8354             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 609+ 8353             >
 609+ 8353 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 609+ 8354 3F          >                db      "?"               // name string in 7-bit ascii, but
 609+ 8355             >                org     $-1                 // alter last byte of Name just above to set
 609+ 8354 BF          >                db      {b $} | END_BIT     // msb as name end
 609+ 8355             >
 609+ 8355 46 83       >                dw      last_NFA            // Link to previous definition Name
 609+ 8357             >QUESTION:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 609+ 8357 CD D3 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 609+ 835A             >
 609+ 835A             >
 609+ 835A             >                endif           ; ok        // for other definitions it "points" the correct handler
 609+ 835A             >                // Use of "; ok" to suppress "warning[fwdref]"
 609+ 835A             >
 609+ 835A             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 610+ 835A 00 6B 4A 83                  dw      FETCH, DOT
 611+ 835E 40 69                        dw      EXIT
 612+ 8360
 613+ 8360              //  ______________________________________________________________________
 614+ 8360              //
 615+ 8360              // u.           u --
 616+ 8360                              Colon_Def U_DOT, "U.", is_normal
 616+ 8360             >                New_Def  U_DOT, "U.", Enter_Ptr, is_normal ; ok
 616+ 8360             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 616+ 8360             >
 616+ 8360             >                // dummy db directives used to calculate length of namec
 616+ 8360 55 2E       >                db      "U."
 616+ 8362             >len_NFA         defl    $ - temp_NFA
 616+ 8362             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 616+ 8360             >
 616+ 8360 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 616+ 8361 55 2E       >                db      "U."               // name string in 7-bit ascii, but
 616+ 8363             >                org     $-1                 // alter last byte of Name just above to set
 616+ 8362 AE          >                db      {b $} | END_BIT     // msb as name end
 616+ 8363             >
 616+ 8363 53 83       >                dw      last_NFA            // Link to previous definition Name
 616+ 8365             >U_DOT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 616+ 8365 CD D3 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 616+ 8368             >
 616+ 8368             >
 616+ 8368             >                endif           ; ok        // for other definitions it "points" the correct handler
 616+ 8368             >                // Use of "; ok" to suppress "warning[fwdref]"
 616+ 8368             >
 616+ 8368             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 617+ 8368 48 6C 3B 83                  dw      ZERO, D_DOT
 618+ 836C 40 69                        dw      EXIT
 619+ 836E
 620+ 836E              //  ______________________________________________________________________
 621+ 836E              //
 622+ 836E              // words        --
 623+ 836E                              Colon_Def WORDS, "WORDS", is_normal
 623+ 836E             >                New_Def  WORDS, "WORDS", Enter_Ptr, is_normal ; ok
 623+ 836E             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 623+ 836E             >
 623+ 836E             >                // dummy db directives used to calculate length of namec
 623+ 836E 57 4F 52 44 >                db      "WORDS"
 623+ 8372 53          >
 623+ 8373             >len_NFA         defl    $ - temp_NFA
 623+ 8373             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 623+ 836E             >
 623+ 836E 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 623+ 836F 57 4F 52 44 >                db      "WORDS"               // name string in 7-bit ascii, but
 623+ 8373 53          >
 623+ 8374             >                org     $-1                 // alter last byte of Name just above to set
 623+ 8373 D3          >                db      {b $} | END_BIT     // msb as name end
 623+ 8374             >
 623+ 8374 60 83       >                dw      last_NFA            // Link to previous definition Name
 623+ 8376             >WORDS:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 623+ 8376 CD D3 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 623+ 8379             >
 623+ 8379             >
 623+ 8379             >                endif           ; ok        // for other definitions it "points" the correct handler
 623+ 8379             >                // Use of "; ok" to suppress "warning[fwdref]"
 623+ 8379             >
 623+ 8379             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 624+ 8379 A5 63 80 00                  dw      LIT, 128, OUT, STORE
 624+ 837D 72 6D 0C 6B
 625+ 8381 97 6D 00 6B                  dw      CONTEXT, FETCH, FETCH
 625+ 8385 00 6B
 626+ 8387              Words_Begin:
 627+ 8387 77 6A 1A 6B                  dw          DUP, CFETCH, LIT, $1F, AND_OP
 627+ 838B A5 63 1F 00
 627+ 838F DE 68
 628+ 8391 72 6D 00 6B                  dw          OUT, FETCH, PLUS
 628+ 8395 AB 69
 629+ 8397 82 6C D0 6E                  dw          CL, LESS, ZEQUAL
 629+ 839B 71 69
 630+ 839D 1D 64                        dw          ZBRANCH
 631+ 839F 0A 00                        dw          Words_Endif - $
 632+ 83A1 00 66 48 6C                  dw              CR, ZERO, OUT, STORE
 632+ 83A5 72 6D 0C 6B
 633+ 83A9              Words_Endif:
 634+ 83A9 77 6A 0C 76                  dw          DUP, ID_DOT
 635+ 83AD DA 6F A5 6F                  dw          PFA, LFA, FETCH
 635+ 83B1 00 6B
 636+ 83B3 77 6A 71 69                  dw          DUP, ZEQUAL
 637+ 83B7 18 67 F0 68                  dw          QTERMINAL, OR_OP
 638+ 83BB 1D 64                        dw      ZBRANCH
 639+ 83BD CA FF                        dw      Words_Begin - $
 640+ 83BF 4A 6A                        dw      DROP
 641+ 83C1 40 69                        dw      EXIT
 642+ 83C3
 643+ 83C3              //  ______________________________________________________________________
 644+ 83C3              //
 645+ 83C3              // list         n --
 646+ 83C3                              Colon_Def LIST, "LIST", is_normal
 646+ 83C3             >                New_Def  LIST, "LIST", Enter_Ptr, is_normal ; ok
 646+ 83C3             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 646+ 83C3             >
 646+ 83C3             >                // dummy db directives used to calculate length of namec
 646+ 83C3 4C 49 53 54 >                db      "LIST"
 646+ 83C7             >len_NFA         defl    $ - temp_NFA
 646+ 83C7             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 646+ 83C3             >
 646+ 83C3 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 646+ 83C4 4C 49 53 54 >                db      "LIST"               // name string in 7-bit ascii, but
 646+ 83C8             >                org     $-1                 // alter last byte of Name just above to set
 646+ 83C7 D4          >                db      {b $} | END_BIT     // msb as name end
 646+ 83C8             >
 646+ 83C8 6E 83       >                dw      last_NFA            // Link to previous definition Name
 646+ 83CA             >LIST:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 646+ 83CA CD D3 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 646+ 83CD             >
 646+ 83CD             >
 646+ 83CD             >                endif           ; ok        // for other definitions it "points" the correct handler
 646+ 83CD             >                // Use of "; ok" to suppress "warning[fwdref]"
 646+ 83CD             >
 646+ 83CD             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 647+ 83CD 52 71 00 66                  dw      DECIMAL, CR
 648+ 83D1 77 6A 7C 6D                  dw      DUP, SCR, STORE
 648+ 83D5 0C 6B
 649+ 83D7 15 74                        dw      C_DOT_QUOTE
 650+ 83D9 05 53 63 72                  db      5, "Scr# "
 650+ 83DD 23 20
 651+ 83DF 4A 83                        dw      DOT
 652+ 83E1 A9 6C 48 6C                  dw      LSCR, ZERO, C_DO
 652+ 83E5 6F 64
 653+ 83E7              List_Loop:
 654+ 83E7 00 66                        dw          CR
 655+ 83E9 77 64 63 6C                  dw          I, THREE
 656+ 83ED 29 83 5C 6F                  dw          DOT_R, SPACE
 657+ 83F1 77 64 7C 6D                  dw          I, SCR, FETCH, DOT_LINE
 657+ 83F5 00 6B CC 7A
 658+ 83F9 18 67                        dw          QTERMINAL
 659+ 83FB 1D 64                        dw          ZBRANCH
 660+ 83FD 06 00                        dw          List_Endif - $
 661+ 83FF 30 64                        dw              C_LEAVE
 662+ 8401 06 00                        dw              List_Leave - $
 663+ 8403              List_Endif:
 664+ 8403 F9 63                        dw      C_LOOP
 665+ 8405 E2 FF                        dw      List_Loop - $
 666+ 8407              List_Leave:
 667+ 8407 00 66                        dw      CR
 668+ 8409 40 69                        dw      EXIT
 669+ 840B
 670+ 840B              //  ______________________________________________________________________
 671+ 840B              //
 672+ 840B              // index        n1 n2 --
 673+ 840B                              Colon_Def INDEX, "INDEX", is_normal
 673+ 840B             >                New_Def  INDEX, "INDEX", Enter_Ptr, is_normal ; ok
 673+ 840B             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 673+ 840B             >
 673+ 840B             >                // dummy db directives used to calculate length of namec
 673+ 840B 49 4E 44 45 >                db      "INDEX"
 673+ 840F 58          >
 673+ 8410             >len_NFA         defl    $ - temp_NFA
 673+ 8410             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 673+ 840B             >
 673+ 840B 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 673+ 840C 49 4E 44 45 >                db      "INDEX"               // name string in 7-bit ascii, but
 673+ 8410 58          >
 673+ 8411             >                org     $-1                 // alter last byte of Name just above to set
 673+ 8410 D8          >                db      {b $} | END_BIT     // msb as name end
 673+ 8411             >
 673+ 8411 C3 83       >                dw      last_NFA            // Link to previous definition Name
 673+ 8413             >INDEX:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 673+ 8413 CD D3 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 673+ 8416             >
 673+ 8416             >
 673+ 8416             >                endif           ; ok        // for other definitions it "points" the correct handler
 673+ 8416             >                // Use of "; ok" to suppress "warning[fwdref]"
 673+ 8416             >
 673+ 8416             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 674+ 8416 CA 69 6C 6A                  dw      ONE_PLUS, SWAP, C_DO
 674+ 841A 6F 64
 675+ 841C              Index_Loop:
 676+ 841C 00 66 77 64                  dw          CR, I, THREE
 676+ 8420 63 6C
 677+ 8422 29 83 5C 6F                  dw          DOT_R, SPACE
 678+ 8426 48 6C 77 64                  dw          ZERO, I, DOT_LINE
 678+ 842A CC 7A
 679+ 842C 18 67                        dw          QTERMINAL
 680+ 842E 1D 64                        dw          ZBRANCH
 681+ 8430 06 00                        dw          Index_Endif - $
 682+ 8432 30 64                        dw              C_LEAVE
 683+ 8434 06 00                        dw              Index_Leave - $
 684+ 8436              Index_Endif:
 685+ 8436 F9 63                        dw      C_LOOP
 686+ 8438 E4 FF                        dw      Index_Loop - $
 687+ 843A              Index_Leave:
 688+ 843A 00 66                        dw      CR
 689+ 843C 40 69                        dw      EXIT
 690+ 843E
 691+ 843E              //  ______________________________________________________________________
 692+ 843E              //
 693+ 843E              // cls          --
 694+ 843E                              Colon_Def CLS, "CLS", is_normal
 694+ 843E             >                New_Def  CLS, "CLS", Enter_Ptr, is_normal ; ok
 694+ 843E             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 694+ 843E             >
 694+ 843E             >                // dummy db directives used to calculate length of namec
 694+ 843E 43 4C 53    >                db      "CLS"
 694+ 8441             >len_NFA         defl    $ - temp_NFA
 694+ 8441             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 694+ 843E             >
 694+ 843E 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 694+ 843F 43 4C 53    >                db      "CLS"               // name string in 7-bit ascii, but
 694+ 8442             >                org     $-1                 // alter last byte of Name just above to set
 694+ 8441 D3          >                db      {b $} | END_BIT     // msb as name end
 694+ 8442             >
 694+ 8442 0B 84       >                dw      last_NFA            // Link to previous definition Name
 694+ 8444             >CLS:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 694+ 8444 CD D3 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 694+ 8447             >
 694+ 8447             >
 694+ 8447             >                endif           ; ok        // for other definitions it "points" the correct handler
 694+ 8447             >                // Use of "; ok" to suppress "warning[fwdref]"
 694+ 8447             >
 694+ 8447             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 695+ 8447 A5 63 0E 00                  dw      LIT, $0E, EMITC
 695+ 844B E9 65
 696+ 844D 40 69                        dw      EXIT
 697+ 844F
 698+ 844F              //  ______________________________________________________________________
 699+ 844F              //
 700+ 844F              // splash       --
 701+ 844F                              Colon_Def SPLASH, "SPLASH", is_normal
 701+ 844F             >                New_Def  SPLASH, "SPLASH", Enter_Ptr, is_normal ; ok
 701+ 844F             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 701+ 844F             >
 701+ 844F             >                // dummy db directives used to calculate length of namec
 701+ 844F 53 50 4C 41 >                db      "SPLASH"
 701+ 8453 53 48       >
 701+ 8455             >len_NFA         defl    $ - temp_NFA
 701+ 8455             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 701+ 844F             >
 701+ 844F 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 701+ 8450 53 50 4C 41 >                db      "SPLASH"               // name string in 7-bit ascii, but
 701+ 8454 53 48       >
 701+ 8456             >                org     $-1                 // alter last byte of Name just above to set
 701+ 8455 C8          >                db      {b $} | END_BIT     // msb as name end
 701+ 8456             >
 701+ 8456 3E 84       >                dw      last_NFA            // Link to previous definition Name
 701+ 8458             >SPLASH:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 701+ 8458 CD D3 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 701+ 845B             >
 701+ 845B             >
 701+ 845B             >                endif           ; ok        // for other definitions it "points" the correct handler
 701+ 845B             >                // Use of "; ok" to suppress "warning[fwdref]"
 701+ 845B             >
 701+ 845B             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 702+ 845B 44 84                        dw      CLS
 703+ 845D 15 74                        dw      C_DOT_QUOTE
 704+ 845F 58                           db      88
 705+ 8460 76 2D 46 6F                  db      "v-Forth 1.618   NextZXOS version", 13    // 29
 705+ 8464 72 74 68 20
 705+ 8468 31 2E 36 31
 705+ 846C 38 20 20 20
 705+ 8470 4E 65 78 74
 705+ 8474 5A 58 4F 53
 705+ 8478 20 76 65 72
 705+ 847C 73 69 6F 6E
 705+ 8480 0D
 706+ 8481 47 6F 6C 64                  db      "Golden Ratio - build 20230321", 13  // 31
 706+ 8485 65 6E 20 52
 706+ 8489 61 74 69 6F
 706+ 848D 20 2D 20 62
 706+ 8491 75 69 6C 64
 706+ 8495 20 32 30 32
 706+ 8499 33 30 33 32
 706+ 849D 31 0D
 707+ 849F 31 39 39 30                  db      "1990-2023 Matteo Vitturi", 13        // 25
 707+ 84A3 2D 32 30 32
 707+ 84A7 33 20 4D 61
 707+ 84AB 74 74 65 6F
 707+ 84AF 20 56 69 74
 707+ 84B3 74 75 72 69
 707+ 84B7 0D
 708+ 84B8 40 69                        dw      EXIT
 709+ 84BA
 710+ 84BA              //  ______________________________________________________________________
 711+ 84BA              //
 712+ 84BA              // video        --
 713+ 84BA                              Colon_Def VIDEO, "VIDEO", is_normal
 713+ 84BA             >                New_Def  VIDEO, "VIDEO", Enter_Ptr, is_normal ; ok
 713+ 84BA             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 713+ 84BA             >
 713+ 84BA             >                // dummy db directives used to calculate length of namec
 713+ 84BA 56 49 44 45 >                db      "VIDEO"
 713+ 84BE 4F          >
 713+ 84BF             >len_NFA         defl    $ - temp_NFA
 713+ 84BF             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 713+ 84BA             >
 713+ 84BA 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 713+ 84BB 56 49 44 45 >                db      "VIDEO"               // name string in 7-bit ascii, but
 713+ 84BF 4F          >
 713+ 84C0             >                org     $-1                 // alter last byte of Name just above to set
 713+ 84BF CF          >                db      {b $} | END_BIT     // msb as name end
 713+ 84C0             >
 713+ 84C0 4F 84       >                dw      last_NFA            // Link to previous definition Name
 713+ 84C2             >VIDEO:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 713+ 84C2 CD D3 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 713+ 84C5             >
 713+ 84C5             >
 713+ 84C5             >                endif           ; ok        // for other definitions it "points" the correct handler
 713+ 84C5             >                // Use of "; ok" to suppress "warning[fwdref]"
 713+ 84C5             >
 713+ 84C5             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 714+ 84C5 5A 6C 77 6A                  dw      TWO, DUP, DEVICE, STORE
 714+ 84C9 16 7B 0C 6B
 715+ 84CD 33 67                        dw      SELECT
 716+ 84CF 40 69                        dw      EXIT
 717+ 84D1
 718+ 84D1              //  ______________________________________________________________________
 719+ 84D1              //
 720+ 84D1              // autoexec     --
 721+ 84D1              // this word is called the first time the Forth system boot to
 722+ 84D1              // load Screen# 1. Once called it patches itself to prevent furhter runs.
 723+ 84D1                              Colon_Def AUTOEXEC, "AUTOEXEC", is_normal
 723+ 84D1             >                New_Def  AUTOEXEC, "AUTOEXEC", Enter_Ptr, is_normal ; ok
 723+ 84D1             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 723+ 84D1             >
 723+ 84D1             >                // dummy db directives used to calculate length of namec
 723+ 84D1 41 55 54 4F >                db      "AUTOEXEC"
 723+ 84D5 45 58 45 43 >
 723+ 84D9             >len_NFA         defl    $ - temp_NFA
 723+ 84D9             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 723+ 84D1             >
 723+ 84D1 88          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 723+ 84D2 41 55 54 4F >                db      "AUTOEXEC"               // name string in 7-bit ascii, but
 723+ 84D6 45 58 45 43 >
 723+ 84DA             >                org     $-1                 // alter last byte of Name just above to set
 723+ 84D9 C3          >                db      {b $} | END_BIT     // msb as name end
 723+ 84DA             >
 723+ 84DA BA 84       >                dw      last_NFA            // Link to previous definition Name
 723+ 84DC             >AUTOEXEC:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 723+ 84DC CD D3 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 723+ 84DF             >
 723+ 84DF             >
 723+ 84DF             >                endif           ; ok        // for other definitions it "points" the correct handler
 723+ 84DF             >                // Use of "; ok" to suppress "warning[fwdref]"
 723+ 84DF             >
 723+ 84DF             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 724+ 84DF A5 63 0B 00                  dw      LIT, 11
 725+ 84E3 A5 63 F6 6B                  dw      LIT, NOOP
 726+ 84E7 A5 63 AC 78                  dw      LIT, Autoexec_Ptr
 727+ 84EB 0C 6B                        dw      STORE
 728+ 84ED 4B 81                        dw      LOAD
 729+ 84EF 5B 78                        dw      QUIT
 730+ 84F1 40 69                        dw      EXIT
 731+ 84F3
 732+ 84F3
 733+ 84F3              //  ______________________________________________________________________
 734+ 84F3              //
 735+ 84F3              // bye     --
 736+ 84F3              //
 737+ 84F3                              Colon_Def BYE, "BYE", is_normal
 737+ 84F3             >                New_Def  BYE, "BYE", Enter_Ptr, is_normal ; ok
 737+ 84F3             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 737+ 84F3             >
 737+ 84F3             >                // dummy db directives used to calculate length of namec
 737+ 84F3 42 59 45    >                db      "BYE"
 737+ 84F6             >len_NFA         defl    $ - temp_NFA
 737+ 84F6             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 737+ 84F3             >
 737+ 84F3 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 737+ 84F4 42 59 45    >                db      "BYE"               // name string in 7-bit ascii, but
 737+ 84F7             >                org     $-1                 // alter last byte of Name just above to set
 737+ 84F6 C5          >                db      {b $} | END_BIT     // msb as name end
 737+ 84F7             >
 737+ 84F7 D1 84       >                dw      last_NFA            // Link to previous definition Name
 737+ 84F9             >BYE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 737+ 84F9 CD D3 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 737+ 84FC             >
 737+ 84FC             >
 737+ 84FC             >                endif           ; ok        // for other definitions it "points" the correct handler
 737+ 84FC             >                // Use of "; ok" to suppress "warning[fwdref]"
 737+ 84FC             >
 737+ 84FC             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 738+ 84FC DB 7D                        dw      FLUSH
 739+ 84FE 0A 7D                        dw      EMPTY_BUFFERS
 740+ 8500 A4 7B 00 6B                  dw      BLK_FH, FETCH, F_CLOSE, DROP
 740+ 8504 7A 67 4A 6A
 741+ 8508 48 6C B8 6C                  dw      ZERO, PLUS_ORIGIN
 742+ 850C 45 79                        dw      BASIC
 743+ 850E
 744+ 850E              //  ______________________________________________________________________
 745+ 850E              //
 746+ 850E              // invv     --
 747+ 850E              //
 748+ 850E              //              Colon_Def INVV, "INVV", is_normal
 749+ 850E              //              dw      LIT, 20, EMITC, ONE, EMITC
 750+ 850E              //              dw      EXIT
 751+ 850E
 752+ 850E              //  ______________________________________________________________________
 753+ 850E              //
 754+ 850E              // truv     --
 755+ 850E              //
 756+ 850E              //              Colon_Def TRUV, "TRUV", is_normal
 757+ 850E              //              dw      LIT, 20, EMITC, ZERO, EMITC
 758+ 850E              //              dw      EXIT
 759+ 850E
 760+ 850E              //  ______________________________________________________________________
 761+ 850E              //
 762+ 850E              // mark     --
 763+ 850E              //
 764+ 850E              //              Colon_Def MARK, "MARK", is_normal
 765+ 850E              //              dw      INVV, TYPE, TRUV
 766+ 850E              //              dw      EXIT
 767+ 850E
 768+ 850E              //  ______________________________________________________________________
 769+ 850E              //
 770+ 850E              // back     --
 771+ 850E              //
 772+ 850E                              Colon_Def BACK, "BACK", is_normal
 772+ 850E             >                New_Def  BACK, "BACK", Enter_Ptr, is_normal ; ok
 772+ 850E             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 772+ 850E             >
 772+ 850E             >                // dummy db directives used to calculate length of namec
 772+ 850E 42 41 43 4B >                db      "BACK"
 772+ 8512             >len_NFA         defl    $ - temp_NFA
 772+ 8512             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 772+ 850E             >
 772+ 850E 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 772+ 850F 42 41 43 4B >                db      "BACK"               // name string in 7-bit ascii, but
 772+ 8513             >                org     $-1                 // alter last byte of Name just above to set
 772+ 8512 CB          >                db      {b $} | END_BIT     // msb as name end
 772+ 8513             >
 772+ 8513 F3 84       >                dw      last_NFA            // Link to previous definition Name
 772+ 8515             >BACK:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 772+ 8515 CD D3 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 772+ 8518             >
 772+ 8518             >
 772+ 8518             >                endif           ; ok        // for other definitions it "points" the correct handler
 772+ 8518             >                // Use of "; ok" to suppress "warning[fwdref]"
 772+ 8518             >
 772+ 8518             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 773+ 8518 54 6E A4 6E                  dw      HERE, SUBTRACT, COMMA
 773+ 851C 72 6E
 774+ 851E 40 69                        dw      EXIT
 775+ 8520
 776+ 8520              //  ______________________________________________________________________
 777+ 8520              //
 778+ 8520              // if          ( -- a 2 ) \ compile-time
 779+ 8520              // IF ... THEN
 780+ 8520              // IF ... ELSE ... ENDIF
 781+ 8520                              Colon_Def IF, "IF", is_immediate
 781+ 8520             >                New_Def  IF, "IF", Enter_Ptr, is_immediate ; ok
 781+ 8520             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 781+ 8520             >
 781+ 8520             >                // dummy db directives used to calculate length of namec
 781+ 8520 49 46       >                db      "IF"
 781+ 8522             >len_NFA         defl    $ - temp_NFA
 781+ 8522             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 781+ 8520             >
 781+ 8520 C2          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 781+ 8521 49 46       >                db      "IF"               // name string in 7-bit ascii, but
 781+ 8523             >                org     $-1                 // alter last byte of Name just above to set
 781+ 8522 C6          >                db      {b $} | END_BIT     // msb as name end
 781+ 8523             >
 781+ 8523 0E 85       >                dw      last_NFA            // Link to previous definition Name
 781+ 8525             >IF:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 781+ 8525 CD D3 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 781+ 8528             >
 781+ 8528             >
 781+ 8528             >                endif           ; ok        // for other definitions it "points" the correct handler
 781+ 8528             >                // Use of "; ok" to suppress "warning[fwdref]"
 781+ 8528             >
 781+ 8528             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 782+ 8528 BF 70 1D 64                  dw      COMPILE, ZBRANCH
 783+ 852C 54 6E 48 6C                  dw      HERE, ZERO, COMMA
 783+ 8530 72 6E
 784+ 8532 5A 6C                        dw      TWO
 785+ 8534 40 69                        dw      EXIT
 786+ 8536
 787+ 8536              //  ______________________________________________________________________
 788+ 8536              //
 789+ 8536              // then        ( a 2 -- ) \ compile-time
 790+ 8536              //
 791+ 8536                              Colon_Def THEN, "THEN", is_immediate
 791+ 8536             >                New_Def  THEN, "THEN", Enter_Ptr, is_immediate ; ok
 791+ 8536             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 791+ 8536             >
 791+ 8536             >                // dummy db directives used to calculate length of namec
 791+ 8536 54 48 45 4E >                db      "THEN"
 791+ 853A             >len_NFA         defl    $ - temp_NFA
 791+ 853A             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 791+ 8536             >
 791+ 8536 C4          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 791+ 8537 54 48 45 4E >                db      "THEN"               // name string in 7-bit ascii, but
 791+ 853B             >                org     $-1                 // alter last byte of Name just above to set
 791+ 853A CE          >                db      {b $} | END_BIT     // msb as name end
 791+ 853B             >
 791+ 853B 20 85       >                dw      last_NFA            // Link to previous definition Name
 791+ 853D             >THEN:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 791+ 853D CD D3 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 791+ 8540             >
 791+ 8540             >
 791+ 8540             >                endif           ; ok        // for other definitions it "points" the correct handler
 791+ 8540             >                // Use of "; ok" to suppress "warning[fwdref]"
 791+ 8540             >
 791+ 8540             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 792+ 8540 41 70                        dw      QCOMP
 793+ 8542 5A 6C 72 70                  dw      TWO, QPAIRS
 794+ 8546 54 6E 3C 6A                  dw      HERE, OVER, SUBTRACT, SWAP, STORE
 794+ 854A A4 6E 6C 6A
 794+ 854E 0C 6B
 795+ 8550 40 69                        dw      EXIT
 796+ 8552
 797+ 8552              //  ______________________________________________________________________
 798+ 8552              //
 799+ 8552              // endif       ( a 2 -- ) \ compile-time
 800+ 8552              //
 801+ 8552                              Colon_Def ENDIF, "ENDIF", is_immediate
 801+ 8552             >                New_Def  ENDIF, "ENDIF", Enter_Ptr, is_immediate ; ok
 801+ 8552             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 801+ 8552             >
 801+ 8552             >                // dummy db directives used to calculate length of namec
 801+ 8552 45 4E 44 49 >                db      "ENDIF"
 801+ 8556 46          >
 801+ 8557             >len_NFA         defl    $ - temp_NFA
 801+ 8557             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 801+ 8552             >
 801+ 8552 C5          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 801+ 8553 45 4E 44 49 >                db      "ENDIF"               // name string in 7-bit ascii, but
 801+ 8557 46          >
 801+ 8558             >                org     $-1                 // alter last byte of Name just above to set
 801+ 8557 C6          >                db      {b $} | END_BIT     // msb as name end
 801+ 8558             >
 801+ 8558 36 85       >                dw      last_NFA            // Link to previous definition Name
 801+ 855A             >ENDIF:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 801+ 855A CD D3 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 801+ 855D             >
 801+ 855D             >
 801+ 855D             >                endif           ; ok        // for other definitions it "points" the correct handler
 801+ 855D             >                // Use of "; ok" to suppress "warning[fwdref]"
 801+ 855D             >
 801+ 855D             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 802+ 855D 3D 85                        dw      THEN
 803+ 855F 40 69                        dw      EXIT
 804+ 8561
 805+ 8561              //  ______________________________________________________________________
 806+ 8561              //
 807+ 8561              // else        ( a1 2 -- a2 2 ) \ compile-time
 808+ 8561              //
 809+ 8561                              Colon_Def ELSE, "ELSE", is_immediate
 809+ 8561             >                New_Def  ELSE, "ELSE", Enter_Ptr, is_immediate ; ok
 809+ 8561             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 809+ 8561             >
 809+ 8561             >                // dummy db directives used to calculate length of namec
 809+ 8561 45 4C 53 45 >                db      "ELSE"
 809+ 8565             >len_NFA         defl    $ - temp_NFA
 809+ 8565             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 809+ 8561             >
 809+ 8561 C4          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 809+ 8562 45 4C 53 45 >                db      "ELSE"               // name string in 7-bit ascii, but
 809+ 8566             >                org     $-1                 // alter last byte of Name just above to set
 809+ 8565 C5          >                db      {b $} | END_BIT     // msb as name end
 809+ 8566             >
 809+ 8566 52 85       >                dw      last_NFA            // Link to previous definition Name
 809+ 8568             >ELSE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 809+ 8568 CD D3 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 809+ 856B             >
 809+ 856B             >
 809+ 856B             >                endif           ; ok        // for other definitions it "points" the correct handler
 809+ 856B             >                // Use of "; ok" to suppress "warning[fwdref]"
 809+ 856B             >
 809+ 856B             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 810+ 856B 41 70                        dw      QCOMP
 811+ 856D 5A 6C 72 70                  dw      TWO, QPAIRS
 812+ 8571 BF 70 08 64                  dw      COMPILE, BRANCH
 813+ 8575 54 6E 48 6C                  dw      HERE, ZERO, COMMA
 813+ 8579 72 6E
 814+ 857B 6C 6A 5A 6C                  dw      SWAP, TWO, THEN
 814+ 857F 3D 85
 815+ 8581 5A 6C                        dw      TWO
 816+ 8583 40 69                        dw      EXIT
 817+ 8585
 818+ 8585              //  ______________________________________________________________________
 819+ 8585              //
 820+ 8585              // begin        ( -- a 1 ) \ compile-time
 821+ 8585              // BEGIN ... AGAIN
 822+ 8585              // BEGIN ... f UNTIL
 823+ 8585              // BEGIN ... f WHILE ... REPEAT
 824+ 8585                              Colon_Def BEGIN, "BEGIN", is_immediate
 824+ 8585             >                New_Def  BEGIN, "BEGIN", Enter_Ptr, is_immediate ; ok
 824+ 8585             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 824+ 8585             >
 824+ 8585             >                // dummy db directives used to calculate length of namec
 824+ 8585 42 45 47 49 >                db      "BEGIN"
 824+ 8589 4E          >
 824+ 858A             >len_NFA         defl    $ - temp_NFA
 824+ 858A             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 824+ 8585             >
 824+ 8585 C5          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 824+ 8586 42 45 47 49 >                db      "BEGIN"               // name string in 7-bit ascii, but
 824+ 858A 4E          >
 824+ 858B             >                org     $-1                 // alter last byte of Name just above to set
 824+ 858A CE          >                db      {b $} | END_BIT     // msb as name end
 824+ 858B             >
 824+ 858B 61 85       >                dw      last_NFA            // Link to previous definition Name
 824+ 858D             >BEGIN:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 824+ 858D CD D3 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 824+ 8590             >
 824+ 8590             >
 824+ 8590             >                endif           ; ok        // for other definitions it "points" the correct handler
 824+ 8590             >                // Use of "; ok" to suppress "warning[fwdref]"
 824+ 8590             >
 824+ 8590             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 825+ 8590 41 70                        dw      QCOMP
 826+ 8592 54 6E                        dw      HERE
 827+ 8594 5A 6C                        dw      TWO
 828+ 8596 40 69                        dw      EXIT
 829+ 8598
 830+ 8598              //  ______________________________________________________________________
 831+ 8598              //
 832+ 8598              // again        ( a 1 -- ) \ compile-time
 833+ 8598                              Colon_Def AGAIN, "AGAIN", is_immediate
 833+ 8598             >                New_Def  AGAIN, "AGAIN", Enter_Ptr, is_immediate ; ok
 833+ 8598             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 833+ 8598             >
 833+ 8598             >                // dummy db directives used to calculate length of namec
 833+ 8598 41 47 41 49 >                db      "AGAIN"
 833+ 859C 4E          >
 833+ 859D             >len_NFA         defl    $ - temp_NFA
 833+ 859D             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 833+ 8598             >
 833+ 8598 C5          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 833+ 8599 41 47 41 49 >                db      "AGAIN"               // name string in 7-bit ascii, but
 833+ 859D 4E          >
 833+ 859E             >                org     $-1                 // alter last byte of Name just above to set
 833+ 859D CE          >                db      {b $} | END_BIT     // msb as name end
 833+ 859E             >
 833+ 859E 85 85       >                dw      last_NFA            // Link to previous definition Name
 833+ 85A0             >AGAIN:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 833+ 85A0 CD D3 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 833+ 85A3             >
 833+ 85A3             >
 833+ 85A3             >                endif           ; ok        // for other definitions it "points" the correct handler
 833+ 85A3             >                // Use of "; ok" to suppress "warning[fwdref]"
 833+ 85A3             >
 833+ 85A3             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 834+ 85A3 41 70                        dw      QCOMP
 835+ 85A5 5A 6C 72 70                  dw      TWO, QPAIRS
 836+ 85A9 BF 70 08 64                  dw      COMPILE, BRANCH
 837+ 85AD 15 85                        dw      BACK
 838+ 85AF 40 69                        dw      EXIT
 839+ 85B1
 840+ 85B1              //  ______________________________________________________________________
 841+ 85B1              //
 842+ 85B1              // until        ( a 1 -- ) \ compile-time
 843+ 85B1                              Colon_Def UNTIL, "UNTIL", is_immediate
 843+ 85B1             >                New_Def  UNTIL, "UNTIL", Enter_Ptr, is_immediate ; ok
 843+ 85B1             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 843+ 85B1             >
 843+ 85B1             >                // dummy db directives used to calculate length of namec
 843+ 85B1 55 4E 54 49 >                db      "UNTIL"
 843+ 85B5 4C          >
 843+ 85B6             >len_NFA         defl    $ - temp_NFA
 843+ 85B6             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 843+ 85B1             >
 843+ 85B1 C5          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 843+ 85B2 55 4E 54 49 >                db      "UNTIL"               // name string in 7-bit ascii, but
 843+ 85B6 4C          >
 843+ 85B7             >                org     $-1                 // alter last byte of Name just above to set
 843+ 85B6 CC          >                db      {b $} | END_BIT     // msb as name end
 843+ 85B7             >
 843+ 85B7 98 85       >                dw      last_NFA            // Link to previous definition Name
 843+ 85B9             >UNTIL:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 843+ 85B9 CD D3 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 843+ 85BC             >
 843+ 85BC             >
 843+ 85BC             >                endif           ; ok        // for other definitions it "points" the correct handler
 843+ 85BC             >                // Use of "; ok" to suppress "warning[fwdref]"
 843+ 85BC             >
 843+ 85BC             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 844+ 85BC 41 70                        dw      QCOMP
 845+ 85BE 5A 6C 72 70                  dw      TWO, QPAIRS
 846+ 85C2 BF 70 1D 64                  dw      COMPILE, ZBRANCH
 847+ 85C6 15 85                        dw      BACK
 848+ 85C8 40 69                        dw      EXIT
 849+ 85CA
 850+ 85CA              //  ______________________________________________________________________
 851+ 85CA              //
 852+ 85CA              // end          ( a 1 -- ) \ compile-time
 853+ 85CA                              Colon_Def END, "END", is_immediate
 853+ 85CA             >                New_Def  END, "END", Enter_Ptr, is_immediate ; ok
 853+ 85CA             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 853+ 85CA             >
 853+ 85CA             >                // dummy db directives used to calculate length of namec
 853+ 85CA 45 4E 44    >                db      "END"
 853+ 85CD             >len_NFA         defl    $ - temp_NFA
 853+ 85CD             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 853+ 85CA             >
 853+ 85CA C3          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 853+ 85CB 45 4E 44    >                db      "END"               // name string in 7-bit ascii, but
 853+ 85CE             >                org     $-1                 // alter last byte of Name just above to set
 853+ 85CD C4          >                db      {b $} | END_BIT     // msb as name end
 853+ 85CE             >
 853+ 85CE B1 85       >                dw      last_NFA            // Link to previous definition Name
 853+ 85D0             >END:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 853+ 85D0 CD D3 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 853+ 85D3             >
 853+ 85D3             >
 853+ 85D3             >                endif           ; ok        // for other definitions it "points" the correct handler
 853+ 85D3             >                // Use of "; ok" to suppress "warning[fwdref]"
 853+ 85D3             >
 853+ 85D3             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 854+ 85D3 B9 85                        dw      UNTIL
 855+ 85D5 40 69                        dw      EXIT
 856+ 85D7
 857+ 85D7              //  ______________________________________________________________________
 858+ 85D7              //
 859+ 85D7              // while        ( a1 1 -- a1 1 a2 4 ) \ compile-time
 860+ 85D7                              Colon_Def WHILE, "WHILE", is_immediate
 860+ 85D7             >                New_Def  WHILE, "WHILE", Enter_Ptr, is_immediate ; ok
 860+ 85D7             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 860+ 85D7             >
 860+ 85D7             >                // dummy db directives used to calculate length of namec
 860+ 85D7 57 48 49 4C >                db      "WHILE"
 860+ 85DB 45          >
 860+ 85DC             >len_NFA         defl    $ - temp_NFA
 860+ 85DC             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 860+ 85D7             >
 860+ 85D7 C5          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 860+ 85D8 57 48 49 4C >                db      "WHILE"               // name string in 7-bit ascii, but
 860+ 85DC 45          >
 860+ 85DD             >                org     $-1                 // alter last byte of Name just above to set
 860+ 85DC C5          >                db      {b $} | END_BIT     // msb as name end
 860+ 85DD             >
 860+ 85DD CA 85       >                dw      last_NFA            // Link to previous definition Name
 860+ 85DF             >WHILE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 860+ 85DF CD D3 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 860+ 85E2             >
 860+ 85E2             >
 860+ 85E2             >                endif           ; ok        // for other definitions it "points" the correct handler
 860+ 85E2             >                // Use of "; ok" to suppress "warning[fwdref]"
 860+ 85E2             >
 860+ 85E2             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 861+ 85E2 25 85                        dw      IF
 862+ 85E4              //              dw      TWO_PLUS // ( that is 4 )
 863+ 85E4 C0 6A                        dw      TWO_SWAP
 864+ 85E6 40 69                        dw      EXIT
 865+ 85E8
 866+ 85E8              //  ______________________________________________________________________
 867+ 85E8              //
 868+ 85E8              // repeat       ( a1 1 a2 4 -- ) \ compile-time
 869+ 85E8                              Colon_Def REPEAT, "REPEAT", is_immediate
 869+ 85E8             >                New_Def  REPEAT, "REPEAT", Enter_Ptr, is_immediate ; ok
 869+ 85E8             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 869+ 85E8             >
 869+ 85E8             >                // dummy db directives used to calculate length of namec
 869+ 85E8 52 45 50 45 >                db      "REPEAT"
 869+ 85EC 41 54       >
 869+ 85EE             >len_NFA         defl    $ - temp_NFA
 869+ 85EE             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 869+ 85E8             >
 869+ 85E8 C6          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 869+ 85E9 52 45 50 45 >                db      "REPEAT"               // name string in 7-bit ascii, but
 869+ 85ED 41 54       >
 869+ 85EF             >                org     $-1                 // alter last byte of Name just above to set
 869+ 85EE D4          >                db      {b $} | END_BIT     // msb as name end
 869+ 85EF             >
 869+ 85EF D7 85       >                dw      last_NFA            // Link to previous definition Name
 869+ 85F1             >REPEAT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 869+ 85F1 CD D3 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 869+ 85F4             >
 869+ 85F4             >
 869+ 85F4             >                endif           ; ok        // for other definitions it "points" the correct handler
 869+ 85F4             >                // Use of "; ok" to suppress "warning[fwdref]"
 869+ 85F4             >
 869+ 85F4             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 870+ 85F4 A0 85                        dw      AGAIN
 871+ 85F6              //              dw      TWO_MINUS
 872+ 85F6 3D 85                        dw      THEN
 873+ 85F8 40 69                        dw      EXIT
 874+ 85FA
 875+ 85FA              //  ______________________________________________________________________
 876+ 85FA              //
 877+ 85FA              // ?do-
 878+ 85FA              // special version of "BACK" used by ?DO and LOOP
 879+ 85FA                              Colon_Def C_DO_BACK, "?DO-", is_normal
 879+ 85FA             >                New_Def  C_DO_BACK, "?DO-", Enter_Ptr, is_normal ; ok
 879+ 85FA             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 879+ 85FA             >
 879+ 85FA             >                // dummy db directives used to calculate length of namec
 879+ 85FA 3F 44 4F 2D >                db      "?DO-"
 879+ 85FE             >len_NFA         defl    $ - temp_NFA
 879+ 85FE             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 879+ 85FA             >
 879+ 85FA 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 879+ 85FB 3F 44 4F 2D >                db      "?DO-"               // name string in 7-bit ascii, but
 879+ 85FF             >                org     $-1                 // alter last byte of Name just above to set
 879+ 85FE AD          >                db      {b $} | END_BIT     // msb as name end
 879+ 85FF             >
 879+ 85FF E8 85       >                dw      last_NFA            // Link to previous definition Name
 879+ 8601             >C_DO_BACK:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 879+ 8601 CD D3 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 879+ 8604             >
 879+ 8604             >
 879+ 8604             >                endif           ; ok        // for other definitions it "points" the correct handler
 879+ 8604             >                // Use of "; ok" to suppress "warning[fwdref]"
 879+ 8604             >
 879+ 8604             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 880+ 8604 15 85                        dw      BACK
 881+ 8606              CDoBack_Begin:
 882+ 8606 16 69 DA 6D                  dw      SPFETCH, CSP, FETCH, SUBTRACT
 882+ 860A 00 6B A4 6E
 883+ 860E 1D 64                        dw      ZBRANCH
 884+ 8610 0A 00                        dw      CDoBack_While - $
 885+ 8612 DE 69 3D 85                  dw          TWO_PLUS, THEN
 886+ 8616 08 64                        dw      BRANCH
 887+ 8618 EE FF                        dw      CDoBack_Begin - $
 888+ 861A              CDoBack_While:
 889+ 861A 86 70 DA 6D                  dw      QCSP, CSP, STORE
 889+ 861E 0C 6B
 890+ 8620 40 69                        dw      EXIT
 891+ 8622
 892+ 8622              //  ______________________________________________________________________
 893+ 8622              //
 894+ 8622              // do
 895+ 8622              // DO  ... LOOP
 896+ 8622              // DO  ... n +LOOP
 897+ 8622              // ?DO ... LOOP
 898+ 8622              // ?DO ... n +LOOP
 899+ 8622                              Colon_Def DO, "DO", is_immediate
 899+ 8622             >                New_Def  DO, "DO", Enter_Ptr, is_immediate ; ok
 899+ 8622             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 899+ 8622             >
 899+ 8622             >                // dummy db directives used to calculate length of namec
 899+ 8622 44 4F       >                db      "DO"
 899+ 8624             >len_NFA         defl    $ - temp_NFA
 899+ 8624             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 899+ 8622             >
 899+ 8622 C2          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 899+ 8623 44 4F       >                db      "DO"               // name string in 7-bit ascii, but
 899+ 8625             >                org     $-1                 // alter last byte of Name just above to set
 899+ 8624 CF          >                db      {b $} | END_BIT     // msb as name end
 899+ 8625             >
 899+ 8625 FA 85       >                dw      last_NFA            // Link to previous definition Name
 899+ 8627             >DO:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 899+ 8627 CD D3 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 899+ 862A             >
 899+ 862A             >
 899+ 862A             >                endif           ; ok        // for other definitions it "points" the correct handler
 899+ 862A             >                // Use of "; ok" to suppress "warning[fwdref]"
 899+ 862A             >
 899+ 862A             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 900+ 862A BF 70 6F 64                  dw      COMPILE, C_DO
 901+ 862E DA 6D 00 6B                  dw      CSP, FETCH, STORE_CSP
 901+ 8632 12 70
 902+ 8634 54 6E 63 6C                  dw      HERE, THREE
 903+ 8638 40 69                        dw      EXIT
 904+ 863A
 905+ 863A              //  ______________________________________________________________________
 906+ 863A              //
 907+ 863A              // loop
 908+ 863A                              Colon_Def LOOP, "LOOP", is_immediate
 908+ 863A             >                New_Def  LOOP, "LOOP", Enter_Ptr, is_immediate ; ok
 908+ 863A             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 908+ 863A             >
 908+ 863A             >                // dummy db directives used to calculate length of namec
 908+ 863A 4C 4F 4F 50 >                db      "LOOP"
 908+ 863E             >len_NFA         defl    $ - temp_NFA
 908+ 863E             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 908+ 863A             >
 908+ 863A C4          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 908+ 863B 4C 4F 4F 50 >                db      "LOOP"               // name string in 7-bit ascii, but
 908+ 863F             >                org     $-1                 // alter last byte of Name just above to set
 908+ 863E D0          >                db      {b $} | END_BIT     // msb as name end
 908+ 863F             >
 908+ 863F 22 86       >                dw      last_NFA            // Link to previous definition Name
 908+ 8641             >LOOP:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 908+ 8641 CD D3 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 908+ 8644             >
 908+ 8644             >
 908+ 8644             >                endif           ; ok        // for other definitions it "points" the correct handler
 908+ 8644             >                // Use of "; ok" to suppress "warning[fwdref]"
 908+ 8644             >
 908+ 8644             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 909+ 8644 63 6C 72 70                  dw      THREE, QPAIRS
 910+ 8648 BF 70 F9 63                  dw      COMPILE, C_LOOP
 911+ 864C 01 86                        dw      C_DO_BACK
 912+ 864E 40 69                        dw      EXIT
 913+ 8650
 914+ 8650              //  ______________________________________________________________________
 915+ 8650              //
 916+ 8650              // +loop
 917+ 8650                              Colon_Def PLOOP, "+LOOP", is_immediate
 917+ 8650             >                New_Def  PLOOP, "+LOOP", Enter_Ptr, is_immediate ; ok
 917+ 8650             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 917+ 8650             >
 917+ 8650             >                // dummy db directives used to calculate length of namec
 917+ 8650 2B 4C 4F 4F >                db      "+LOOP"
 917+ 8654 50          >
 917+ 8655             >len_NFA         defl    $ - temp_NFA
 917+ 8655             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 917+ 8650             >
 917+ 8650 C5          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 917+ 8651 2B 4C 4F 4F >                db      "+LOOP"               // name string in 7-bit ascii, but
 917+ 8655 50          >
 917+ 8656             >                org     $-1                 // alter last byte of Name just above to set
 917+ 8655 D0          >                db      {b $} | END_BIT     // msb as name end
 917+ 8656             >
 917+ 8656 3A 86       >                dw      last_NFA            // Link to previous definition Name
 917+ 8658             >PLOOP:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 917+ 8658 CD D3 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 917+ 865B             >
 917+ 865B             >
 917+ 865B             >                endif           ; ok        // for other definitions it "points" the correct handler
 917+ 865B             >                // Use of "; ok" to suppress "warning[fwdref]"
 917+ 865B             >
 917+ 865B             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 918+ 865B 63 6C 72 70                  dw      THREE, QPAIRS
 919+ 865F BF 70 C3 63                  dw      COMPILE, C_PLOOP
 920+ 8663 01 86                        dw      C_DO_BACK
 921+ 8665 40 69                        dw      EXIT
 922+ 8667
 923+ 8667              //  ______________________________________________________________________
 924+ 8667              //
 925+ 8667              // ?do
 926+ 8667                              Colon_Def QDO, "?DO", is_immediate
 926+ 8667             >                New_Def  QDO, "?DO", Enter_Ptr, is_immediate ; ok
 926+ 8667             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 926+ 8667             >
 926+ 8667             >                // dummy db directives used to calculate length of namec
 926+ 8667 3F 44 4F    >                db      "?DO"
 926+ 866A             >len_NFA         defl    $ - temp_NFA
 926+ 866A             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 926+ 8667             >
 926+ 8667 C3          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 926+ 8668 3F 44 4F    >                db      "?DO"               // name string in 7-bit ascii, but
 926+ 866B             >                org     $-1                 // alter last byte of Name just above to set
 926+ 866A CF          >                db      {b $} | END_BIT     // msb as name end
 926+ 866B             >
 926+ 866B 50 86       >                dw      last_NFA            // Link to previous definition Name
 926+ 866D             >QDO:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 926+ 866D CD D3 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 926+ 8670             >
 926+ 8670             >
 926+ 8670             >                endif           ; ok        // for other definitions it "points" the correct handler
 926+ 8670             >                // Use of "; ok" to suppress "warning[fwdref]"
 926+ 8670             >
 926+ 8670             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 927+ 8670 BF 70 42 64                  dw      COMPILE, C_Q_DO
 928+ 8674 DA 6D 00 6B                  dw      CSP, FETCH, STORE_CSP
 928+ 8678 12 70
 929+ 867A 54 6E 48 6C                  dw      HERE, ZERO, COMMA, ZERO
 929+ 867E 72 6E 48 6C
 930+ 8682 54 6E 63 6C                  dw      HERE, THREE
 931+ 8686 40 69                        dw      EXIT
 932+ 8688
 933+ 8688              Latest_Definition:
 934+ 8688              //  ______________________________________________________________________
 935+ 8688              //
 936+ 8688              // \
 937+ 8688                              Colon_Def BACKSLASH, "\\", is_immediate  // this is a single back-slash
 937+ 8688             >                New_Def  BACKSLASH, "\\", Enter_Ptr, is_immediate ; ok
 937+ 8688             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 937+ 8688             >
 937+ 8688             >                // dummy db directives used to calculate length of namec
 937+ 8688 5C          >                db      "\\"
 937+ 8689             >len_NFA         defl    $ - temp_NFA
 937+ 8689             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 937+ 8688             >
 937+ 8688 C1          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 937+ 8689 5C          >                db      "\\"               // name string in 7-bit ascii, but
 937+ 868A             >                org     $-1                 // alter last byte of Name just above to set
 937+ 8689 DC          >                db      {b $} | END_BIT     // msb as name end
 937+ 868A             >
 937+ 868A 67 86       >                dw      last_NFA            // Link to previous definition Name
 937+ 868C             >BACKSLASH:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 937+ 868C CD D3 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 937+ 868F             >
 937+ 868F             >
 937+ 868F             >                endif           ; ok        // for other definitions it "points" the correct handler
 937+ 868F             >                // Use of "; ok" to suppress "warning[fwdref]"
 937+ 868F             >
 937+ 868F             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 938+ 868F 5E 6D 00 6B                  dw      BLK, FETCH
 939+ 8693 1D 64                        dw      ZBRANCH
 940+ 8695 30 00                        dw      Backslash_Else_1 - $
 941+ 8697 5E 6D 00 6B                  dw          BLK, FETCH, ONE, GREATER  // BLOCK 1 is used as temp-line in INCLUDE file
 941+ 869B 51 6C E7 6E
 942+ 869F 1D 64                        dw          ZBRANCH
 943+ 86A1 18 00                        dw          Backslash_Else_2 - $
 944+ 86A3 68 6D 00 6B                  dw              TO_IN, FETCH, CL, MOD, CL
 944+ 86A7 82 6C 70 7A
 944+ 86AB 82 6C
 945+ 86AD 6C 6A A4 6E                  dw              SWAP, SUBTRACT, TO_IN, PLUSSTORE
 945+ 86B1 68 6D DF 6A
 946+ 86B5 08 64                        dw          BRANCH
 947+ 86B7 0A 00                        dw          Backslash_Endif_2 - $
 948+ 86B9              Backslash_Else_2:
 949+ 86B9 8F 6C F7 69                  dw              BBUF, CELL_MINUS, TO_IN, STORE
 949+ 86BD 68 6D 0C 6B
 950+ 86C1              Backslash_Endif_2:
 951+ 86C1 08 64                        dw      BRANCH
 952+ 86C3 10 00                        dw      Backslash_Endif_1 - $
 953+ 86C5              Backslash_Else_1:
 954+ 86C5 48 6C E8 6C                  dw          ZERO, TIB, FETCH, TO_IN, FETCH, PLUS, STORE
 954+ 86C9 00 6B 68 6D
 954+ 86CD 00 6B AB 69
 954+ 86D1 0C 6B
 955+ 86D3              Backslash_Endif_1:
 956+ 86D3 40 69                        dw      EXIT
 957+ 86D5
 958+ 86D5              Fence_Word:
 959+ 86D5              //  ______________________________________________________________________
 960+ 86D5              //
 961+ 86D5
 962+ 86D5 00           Here_Dictionary db      0
 963+ 86D6
# file closed: C:\Zx\CSpect\Projects\vForth16_DIRECT_RP/source/L3.asm
 115  86D6
 116  86D6              // now we save the compiled file so we can either run it or debug it
 117  86D6                              SAVENEX OPEN "output/main.nex", ORIGIN
 118  86D6                              SAVENEX CORE 3, 0, 0                                // Next core 3.0.0 required as minimum
 119  86D6                              SAVENEX CFG  0
 120  86D6                              SAVENEX BANK 2, 0
 121  86D6                              SAVENEX AUTO
 122  86D6                              SAVENEX CLOSE
 123  86D6
 124  86D6              //              PAGE 7 ;set 7 page to current slot
 125  86D6              //              SAVEBIN "ram7.bin",$C000,$4000 ;- save 4000h begin from C000h of RAM to file
 126  86D6              //              SAVEBIN "output/ram2.bin", $8000, 9800 ;- save 3000h begin from 8000h of RAM to file
 127  86D6
 128  86D6                              SAVETAP "output/F16c.tap", CODE, "forth16c", ORIGIN, 9999
 129  86D6
 130  86D6                              SAVEBIN "output/forth16c.bin", ORIGIN, 9999
 131  86D6
 132  86D6                              END
# file closed: C:\Zx\CSpect\Projects\vForth16_DIRECT_RP/source/main.asm
