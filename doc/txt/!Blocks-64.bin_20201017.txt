This list is produced via Scr# 252 


Scr# 1 
  0 ( Autoexec 1/3 )
  1 \ This is executed at first COLD start by AUTOEXEC
  2 CR 7 REG@ 3 AND 35 SWAP LSHIFT S->D
  3 <# # CHAR . HOLD #S #> TYPE SPACE ." MHz CPU Speed." CR
  4 S0 PAD - U. ." bytes free in Dictionary." CR
  5 -1 HP @ - U. ." bytes free in Heap." CR
  6 CR
  7  -->
  8 ___________________________________________________________
  9 
 10 01234567890123456789012345678901234567890123456789012345678
 11 0         1         2         3         4         5
 12 Fancy 64-Columns Ruler
 13 ___________________________________________________________
 14 
 15 !Blocks-64.bin


Scr# 2 
  0 ( Autoexec 2/3 )
  1 MARKER FORGET-TASK
  2 : ASK-Y/N ( -- )
  3 \ ask Y/n to continue loading Screen 3
  4 ." Run Scr# 1 autoexec ? (Y/n) "
  5   KEY DUP EMIT CR
  6   [ HEX ] 0DF AND
  7   [ CHAR N ] LITERAL
  8   = IF ." ok "
  9    FORGET-TASK ABORT
 10   ELSE
 11    FORGET-TASK
 12  THEN ;
 13 ASK-Y/N --> ??
 14 
 15 


Scr# 3 
  0 ( Autoexec 3/3 )
  1 \
  2 .( NextZXOS version ) CR
  3 \
  4 DECIMAL 10 LOAD \ Line edit
  5 DECIMAL 17 LOAD \ Case-Of
  6 DECIMAL 20 LOAD \ Debugger
  7 \
  8 DECIMAL 1024 16 * 1 -
  9 DUP + 1+
 10 ' #SEC >BODY !
 11 ." #SEC is "
 12 DECIMAL #SEC . CR
 13 \
 14 ABORT
 15 


Scr# 4 
  0 is undefined.
  1 Stack is empty.
  2 Dictionary full.
  3 No such line.
  4 has already been defined.
  5 Invalid stream.
  6 No such block.
  7 Stack is full.
  8 Old dictionary is full
  9 Tape error.
 10 Wrong array index.
 11 Invalid floating point.
 12 Heap full.
 13 msg # 13
 14 msg # 14
 15 msg # 15


Scr# 5 
  0 ( Error messages    2/3 )
  1 Can't be executed. # 17
  2 Can't be compiled. # 18
  3 Syntax error. # 19
  4 Bad definition end. # 20
  5 is a protected word. # 21
  6 Aren't loading now. # 22
  7 Forget across vocabularies. # 23
  8 RS loading error. # 24
  9 Cannot open stream. # 25
 10 Error at postit time. # 26
 11 Inconsistent fixup. #27
 12 Unexpected fixup/commaer. # 28
 13 Commaer data error. # 29
 14 Commaer wrong order. # 30
 15 Programming error. # 31


Scr# 6 
  0 ( Error messages    3/3 )
  1 Programming error. # 33
  2 
  3 
  4 
  5 
  6 
  7 
  8 
  9 
 10 
 11 
 12 NextZXOS doscall error. #44
 13 NextZXOS pos error. #45
 14 NextZXOS read error. #46
 15 NextZXOS write error. #47


Scr# 7 
  0 \ TEST
  1 \ A wrong word
  2 ." HELLO " CR
  3 ." NOBODY KNOWS " CR
  4 \
  5 \
  6 \
  7 \
  8 ciao
  9 CIAO
 10 
 11 
 12 
 13 
 14 
 15 


Scr# 8 
  0 ( Get the list of errors )
  1 DECIMAL
  2 : LIST-OF-ERRORS ( -- )
  3   3 0 DO
  4    I 1+ 16 * I 16 * DO
  5     I MESSAGE CR
  6    LOOP
  7    ."   press any key..."
  8    KEY CR
  9   LOOP
 10 ;
 11 
 12 
 13 
 14 
 15 


Scr# 9 
  0 ." Assembler. "           CR
  1 \
  2 \ Load ASSEMBLER vocabulary
  3 \
  4 \
  5 DECIMAL 100 LOAD
  6 \
  7 
  8 
  9 
 10 
 11 
 12 
 13 
 14 
 15 


Scr# 10 
  0 .( Line editor. )         CR
  1 \ See .pdf documentation.
  2 \
  3 \ Inverse/True Video
  4 : INVV ( -- )
  5   [ HEX 14 ] LITERAL EMITC
  6   1 EMITC
  7 ;
  8 : TRUV ( -- )
  9   [ HEX 14 ] LITERAL EMITC
 10   0 EMITC
 11 ;
 12 DECIMAL
 13 --> \ Continue LOADing
 14     \ on next Screen.
 15 


Scr# 11 
  0 ( Line Editor          2/6 )
  1 : TEXT ( c -- ) \ accept following text to PAD
  2   HERE C/L 1+ BLANKS
  3   WORD      PAD C/L 1+   CMOVE ;
  4 : LINE ( n -- a ) \ leave address of current screen line n
  5   DUP 0 < 3 ?ERROR  \ error 3: No such line.
  6   DUP L/SCR < 0= 3 ?ERROR
  7   SCR @ (LINE) DROP ;
  8 : -MOVE ( a -- n ) \ move from a to current screen line n
  9   LINE C/L CMOVE UPDATE ;
 10 : H ( n -- ) \ hold line n to PAD
 11   LINE PAD 1+ C/L DUP PAD
 12   C! CMOVE ;
 13 --> \ continues to next
 14 
 15 


Scr# 12 
  0 ( Line Editor          3/6 )
  1 : E ( n -- ) \ blank line n of current screen
  2   LINE DUP C/L BLANKS
  3   1 ERASE UPDATE ;
  4 : RE ( n -- ) \ replace line n using PAD content
  5   PAD 1+ SWAP -MOVE ;
  6 : D ( n -- ) \ remove line n from current screen
  7   DUP H L/SCR 1 - DUP ROT
  8   DO I 1+ LINE I -MOVE
  9   LOOP E ;
 10 : S ( n -- ) \ shift lines >= n down by one on current scr
 11   DUP 1 - L/SCR 2 - DO I
 12   LINE I 1+ -MOVE -1 +LOOP
 13   E ;
 14 : INS ( n -- ) \ insert line n from PAD
 15   DUP S RE ; -->


Scr# 13 
  0 ( Line Editor          4/6 )
  1 : P ( n -- ) \ put line n
  2   126 TEXT RE ;
  3 : L ( -- ) \ list current
  4   SCR @ LIST ;
  5 : N ( -- ) \ next screen
  6   1 SCR +! L ;
  7 : B ( -- ) \ back screen
  8   -1 SCR +! L ;
  9 : BCOPY ( n1 n2 -- ) \ copy screen n1 to n2, overvriting it
 10  DUP SCR ! B/SCR * SWAP B/SCR *
 11  B/SCR 0 DO 2DUP
 12  BLOCK SWAP BLOCK B/BUF CMOVE UPDATE
 13  SWAP 1+ SWAP 1+
 14  LOOP 2DROP ;
 15 -->


Scr# 14 
  0 ( Line Editor          5/6 )
  1 \ usually used after an error during LOAD:
  2 : WHERE ( n1 n2 -- ) \ display offending row after an error
  3   DUP B/SCR /MOD DUP SCR ! ." Screen# " DECIMAL . CR
  4   B/BUF * ROT + C/L /MOD DUP
  5   [ 3 ] LITERAL .R SPACE
  6   ROT B/SCR / (LINE) -TRAILING TYPE
  7   CR 2+ SPACES [CHAR] ^ EMIT SPACE
  8 ;
  9 \
 10 -->
 11 \
 12 \ quick reference
 13 [TIB] <> [PAD]  <>  [BLOCK]
 14               H E RE
 15      TEXT     D S INS


Scr# 15 
  0 ( Line Editor          6/6 )
  1 : .PAD ( -- ) \ show PAD content
  2   PAD C/L -TRAILING TYPE ;
  3 : SAVE ( -- ) \ save all modified screens flushing to disk
  4   UPDATE FLUSH ;
  5 : UNUSED ( -- n ) \ return free dictionary space
  6   SP@ PAD - ;
  7 : ROOM ( -- ) \ display room available in dictionary
  8   UNUSED U. ." bytes free." CR ;
  9 ;S
 10 \
 11 \ omitted:
 12 : BMOVE OVER SWAP BCOPY
 13   BCLEAR ;
 14 ;S
 15 


Scr# 16 
  0 ( Editor utility           )
  1 \ multiple BCOPY
  2 : MBCOPY ( b1 b2 n --- )
  3 FLUSH
  4 >R 2DUP > IF
  5   R> 0 DO 2DUP BCOPY
  6   1 + SWAP 1 + SWAP
  7   46 EMIT LOOP
  8 ELSE
  9   R + 1 - SWAP R + 1 - SWAP
 10   0 R> DO 2DUP BCOPY
 11   1 - SWAP 1 - SWAP
 12   46 EMIT -1 +LOOP
 13 THEN
 14 2DROP ;
 15 


Scr# 17 
  0 .( Case-of structure. )   CR
  1 \ Used in the form:
  2 \  n0 CASE  n1 OF .. ENDOF
  3 \           nz OF .. ENDOF  .. else-part
  4 \  ENDCASE
  5 : CASE ( n0 -- ) \ begin case-of structure
  6   ?COMP CSP @ !CSP 4 ; IMMEDIATE
  7 : (OF)  ( n0 nk -- ) \ run-time compiled by OF
  8   OVER = DUP IF SWAP DROP ENDIF ;
  9 : OF  ( n0 nk -- )
 10   4 ?PAIRS COMPILE (OF) COMPILE 0BRANCH HERE 0 ,
 11   5 ; IMMEDIATE
 12 : ENDOF  ( -- )
 13   5 ?PAIRS COMPILE BRANCH HERE 0 ,
 14   SWAP 2 [COMPILE] THEN 4 ; IMMEDIATE
 15 -->


Scr# 18 
  0 ( Case-Of structure  2/2 )
  1 : ENDCASE
  2   4 ?PAIRS COMPILE DROP
  3   BEGIN SP@ CSP @ -
  4   WHILE 2 [COMPILE] THEN
  5   REPEAT CSP ! ; IMMEDIATE
  6 ;S
  7 \ Example:
  8 x CASE
  9 1 OF ... ENDOF
 10 2 OF ... ENDOF
 11 (else) ... ENDCASE
 12 
 13 
 14 
 15 


Scr# 19 
  0 .( Call utility. )        CR
  1 \ CALL# ( n1 a -- n2 )
  2 \ must save BC and IX
  3 HEX
  4 CODE  CALL#  ( n1 -- n2 )
  5 E1 C, D1 C,         \ pop hl   pop de
  6 C5 C, DD C, E5 C,   \ push bc  push ix
  7 4B C, 42 C, 7B C,   \ ld a,e   ld bc,de
  8 CD C,  (NEXT) 0A + ,   \ call hl
  9 69 C, 60 C,         \ ld hl,bc
 10 DD C, E1 C, C1 C,   \ pop ix   pop bc
 11 E5 C,              \ push hl
 12 DD C, E9 C,        \ jp ix
 13 SMUDGE
 14 DECIMAL
 15 


Scr# 20 
  0 .( Debugger. )            CR
  1 DECIMAL
  2 : (DUMP)
  3   DO I C@ S->D <# # # #> TYPE SPACE LOOP ;
  4 : DUMP  ( a -- )
  5   BASE @ SWAP HEX
  6   DUP 64 + SWAP DO CR
  7   I S->D <# # # # # #> TYPE 2 SPACES
  8   I 4 + I (DUMP) SPACE
  9   I 8 + I 4 + (DUMP) SPACE
 10   I 8 + I DO I C@
 11   127 AND DUP 32 <
 12   IF [CHAR] . EMIT DROP
 13   ELSE EMIT THEN LOOP
 14   ?TERMINAL IF LEAVE THEN
 15   8 +LOOP BASE ! ; -->


Scr# 21 
  0 ( Debugger             2/6 )
  1 : .WORD >BODY NFA ID. ;
  2 : DEB-N ." Nfa: "
  3   NFA DUP U. C@ . CR ;
  4 : DEB-C ." Cfa: "
  5   CFA DUP U. @ U. CR ;
  6 : DEB-L ." Lfa: "
  7   LFA DUP U. @ ID. CR ;
  8 : DEB-P ." Pfa: " DUMP ;
  9 : DEB-LIT 2+ DUP @ . ;
 10 : DEB-BRN DUP @ .WORD INVV
 11   DEB-LIT TRUV ;
 12 : DEB-DOT DUP @ .WORD 2+
 13   COUNT 2DUP INVV TYPE + 2 -
 14   TRUV SPACE ;
 15 -->


Scr# 22 
  0 ( Debugger             3/6 )
  1 ' : @ CONSTANT <:>
  2 ' ABORT CONSTANT <AB>
  3 ' ;S CONSTANT <;S>
  4 ' (+LOOP) CONSTANT <+L>
  5 ' (LOOP) CONSTANT <L>
  6 ' BRANCH CONSTANT <B>
  7 ' 0BRANCH CONSTANT <0B>
  8 ' LIT CONSTANT <LIT>
  9 ' (.") CONSTANT <.">
 10 ' QUIT CONSTANT <Q>
 11 ' CONSTANT CONSTANT <C>
 12 ' VARIABLE CONSTANT <V>
 13 ' WARM CONSTANT <!>
 14 : ?FWD DUP DUP @ U< IF
 15   INVV THEN ; -->


Scr# 23 
  0 ( Debugger             4/6 )
  1 ' (?DO) CONSTANT <D>
  2 : DELOAD
  3   BEGIN ?FWD
  4   DUP @ CASE
  5   <D> OF DEB-BRN ENDOF
  6   <+L> OF DEB-BRN ENDOF
  7   <L> OF DEB-BRN ENDOF
  8   <B> OF DEB-BRN ENDOF
  9   <0B> OF DEB-BRN ENDOF
 10   <LIT> OF DEB-LIT ENDOF
 11   <."> OF DEB-DOT ENDOF
 12   DUP .WORD ENDCASE 2+
 13   TRUV
 14   ?TERMINAL   [ --> ]
 15 \ [ --> ] is a trick -->


Scr# 24 
  0 ( Debugger             5/6 )
  1 ] OVER @ <AB> = OR
  2   OVER @ <Q> = OR
  3   OVER @ <;S> = OR
  4   OVER @ <!> = OR
  5   UNTIL ;
  6 -->
  7 
  8 
  9 
 10 
 11 
 12 
 13 
 14 
 15 


Scr# 25 
  0 ( Debugger             6/6 )
  1 : (SEE)
  2   2+ BASE @ SWAP HEX
  3   DUP DEB-N DUP DEB-L
  4   DUP DEB-C
  5   DUP CFA @ <:> =
  6   IF DECIMAL DELOAD
  7   DROP BASE !
  8   ELSE SWAP BASE ! DEB-P
  9   ENDIF ;
 10 \
 11 : SEE
 12   -FIND 0= 0 ?ERROR
 13   DROP CR (SEE) ;
 14 -->
 15 


Scr# 26 
  0 ( Stack viewer             )
  1 : DEPTH
  2   S0 @ SP@ - 2 / 1 - ;
  3 : .S
  4   DEPTH IF CR SP@ 2 - S0 @
  5   2 - DO I @ U. -2 +LOOP
  6   ELSE 1 MESSAGE CR ENDIF ;
  7 
  8 
  9 
 10 
 11 
 12 
 13 
 14 
 15 


Scr# 27 
  0 ( Long memory dump )
  1 \ Utility to dump large intervals of memory
  2 \ usually 13 SELECT to redirect to stream #13
  3 : DUMPM  ( a1 a2 -- )
  4  SWAP DO
  5   I DUMP
  6  64 +LOOP
  7 ;
  8 
  9 
 10 
 11 
 12 
 13 
 14 
 15 


Scr# 28 
  0 ( Vocabulary viewer        )
  1 : ?VOCAB
  2  CR ." Current "
  3  CURRENT @ 4 - NFA ID.
  4  CR ." Context "
  5  CONTEXT @ 4 - NFA ID.
  6  CR ." VocLink "
  7  VOC-LINK @ 6 - NFA ID.
  8 ;
  9 
 10 
 11 
 12 
 13 
 14 
 15 


Scr# 29 
  0 ( Simple Word RENAMEr )
  1 \ old and new names have
  2 \ the same length
  3 HEX
  4 : RENAME
  5  ' >BODY NFA DUP C@ 1F AND
  6  2DUP + >R
  7  BL WORD      20 ALLOT
  8  COUNT 1F AND ROT MIN
  9  >R SWAP 1+ R>
 10  CMOVE
 11  R C@ 80 OR R> C!
 12  -20 ALLOT ;
 13 DECIMAL
 14 
 15 


Scr# 30 
  0 ( 2CONSTANT )
  1 : 2CONSTANT
  2  <BUILDS SWAP , , DOES>
  3  2@
  4 ;
  5 : 2VARIABLE
  6  VARIABLE , ;
  7 
  8 
  9 
 10 
 11 
 12 
 13 
 14 
 15 


Scr# 31 
  0 ( SET-FENCE )
  1 HERE FENCE !
  2 HERE HEX 1C +ORIGIN !
  3 LATEST   0C +ORIGIN !
  4 HERE HEX 1E +ORIGIN !
  5 VOC-LINK @ 20 +ORIGIN !
  6 DECIMAL
  7 
  8 
  9 
 10 
 11 
 12 
 13 
 14 
 15 


Scr# 32 
  0 ( HIDE )
  1 : HIDE
  2   ' >BODY LFA
  3   CONTEXT @
  4   BEGIN
  5   @ PFA LFA
  6   2DUP = OVER @ AND
  7   UNTIL
  8 ;
  9 
 10 
 11 
 12 
 13 
 14 
 15 


Scr# 33 
  0 ( USED-BY )
  1 \ search memory for xt
  2 : USED-BY ( xt -- )
  3   HERE 0 +ORIGIN DO
  4   DUP I @ =
  5    IF I U. THEN
  6   LOOP
  7   -1 S0 @ DO
  8   DUP I @ =
  9    IF I U. THEN
 10   LOOP
 11   DROP ;
 12 HEX : EXAM FF58 EA40
 13   DO CR 2B EMIT I U.
 14   I USED-BY ?TERMINAL
 15   IF LEAVE THEN LOOP ;


Scr# 34 
  0 ( DUMP WORDS )
  1 : >OUTPUT 13 SELECT ;
  2 : DUMP-2-PRINTER
  3  0 HEX CONTEXT @ @
  4  BEGIN DUP PFA LFA @ DUP 0= ?TERMINAL OR UNTIL DROP
  5  BEGIN
  6   VIDEO DUP ID. >OUTPUT CR ." \  " DUP ID. CR
  7   PFA CFA 2+ DUP DEB-N DUP DEB-L DUP DEB-C
  8   ." Pfa: " DUP U. @ U. CR
  9   DUP 0= ?TERMINAL OR CR CR
 10 UNTIL VIDEO DROP ;
 11 
 12 
 13 
 14 
 15 


Scr# 35 
  0 ( Restore AUTOEXEC )
  1 \ The following sequence
  2 \ restores AUTOEXEC
  3 \ in the ABORT definition
  4 \
  5 \ ##  USE WITH CARE  ##
  6 \
  7 ' AUTOEXEC
  8 ' ABORT 7 CELLS +
  9 !
 10 DECIMAL 14 EMITC
 11 BYE
 12 \
 13 \ and remember Scr# 220
 14 \ to move up or down LIMIT
 15 


Scr# 36 
  0 ( RECURSE - GDC )
  1 : RECURSE ( -- )
  2  ?COMP
  3  LATEST PFA CFA ,
  4 ; IMMEDIATE
  5 \
  6 : GCD ( a b -- gcd )
  7  ?DUP IF
  8   TUCK MOD
  9   RECURSE
 10  THEN
 11 ;
 12 
 13 
 14 
 15 


Scr# 37 
  0 ( ?ESCAPE experiment       )
  1 CODE  ?ESCAPE
  2 HEX
  3 3E C, FE C, DB C, FE C,
  4 2F C, 5F C,
  5 3E C, F7 C, DB C, FE C,
  6 2F C,
  7 A3 C, E6 C, 01 C,
  8 26 C, 00 C, 6F C,
  9 E5 C, E9DD , ( PSH1 )
 10 SMUDGE DECIMAL ;S
 11 : ESCAPE-TEST
 12 1000 0 DO 2E EMIT
 13 ?ESCAPE IF LEAVE THEN
 14 LOOP ;
 15 DECIMAL


Scr# 38 
  0 ( RND Test )
  1 : TEST
  2  0 SYS-SEED !
  3  32767 0 DO
  4   32767
  5   RND
  6   256 /MOD
  7   PLOT
  8   ?TERMINAL IF LEAVE THEN
  9  LOOP
 10 ;
 11 
 12 
 13 
 14 
 15 


Scr# 39 
  0 ( CHOOSE - Brodie )
  1 DECIMAL
  2 23670 CONSTANT SYS-SEED
  3 : RANDOM
  4  SYS-SEED @ 31421 *
  5  6927 + DUP SYS-SEED !
  6 ;
  7 : CHOOSE ( u1 -- u2 )
  8  RANDOM UM* NIP
  9 ;
 10 \
 11 : RANDOMIZE
 12   SYS-SEED ! ;
 13 ;S
 14 
 15 


Scr# 40 
  0 ( RND - vitturi )
  1 DECIMAL
  2 23670 CONSTANT SYS-SEED
  3 \ gives a pseudo-random
  4 \ between 0 and n
  5 : RND ( n -- rnd(n)
  6   1+ SYS-SEED @
  7   8191 UM* \ it was U*
  8   1.  D+
  9   16381 UM/MOD
 10   DROP DUP SYS-SEED !
 11   SWAP MOD ;
 12 \
 13 : RANDOMIZE
 14   SYS-SEED ! ;
 15 ;S


Scr# 41 
  0 ( Color and attributes  )
  1 DECIMAL 19 LOAD \ CALL#
  2 HEX
  3 : PERM 0 1CAD CALL# DROP ;
  4 : BORDER. 2297 CALL# DROP ;
  5 DECIMAL
  6 : (COLOR)
  7   ROT AND SWAP EMITC EMITC
  8   PERM ;
  9 : INK. 16 7 (COLOR) ;
 10 : PAPER. 17 7 (COLOR) ;
 11 : FLASH. 18 1 (COLOR) ;
 12 : BRIGHT. 19 1 (COLOR) ;
 13 : INVERSE. 20 1 (COLOR) ;
 14 : OVER. 21 1 (COLOR) ;
 15 -->


Scr# 42 
  0 ( AT TAB                   )
  1 : AT.
  2   22 EMITC 31 AND SWAP
  3   21 MIN EMITC EMITC ;
  4 : TAB.
  5   23 EMITC EMITC 0 EMITC ;
  6 : LVIDEO
  7   2 23659 C! 1 SELECT ;
  8 : ATTR  ( x y --- b )
  9   SWAP 32 * + 22528 + C@ ;
 10 ;S
 11 : VIDEO
 12   2 DEVICE !
 13   1 23659 C! 2 SELECT ;
 14 -->
 15 


Scr# 43 
  0 ( POINT SCREEN$ )
  1 CODE  POINT  HEX
  2 E1 C, D1 C, C5 C, 454B ,
  3 CD C, 22AA , 47 C, 04 C,
  4 7E C, 07 C, 10 C, -3 C,
  5 E6 C, 01 C, 6F C, 26 C, 0 C,
  6 E5 C, E9DD , ( PSH1 )
  7 SMUDGE
  8 \
  9 CODE  SCREEN$  HEX
 10 E1 C, D1 C, C5 C, 454B ,
 11 CD C, 2538 , CD C, 2BF1 ,
 12 1A C, 6F C, 26 , C1 C,
 13 E5 C, E9DD , ( PSH1 )
 14 SMUDGE
 15 -->


Scr# 44 
  0 ( PLOT )
  1 \ 19 LOAD  for  CALL#
  2 HEX
  3 CODE  PLOT   HEX
  4   E1 C, D1 C, C5 C,
  5   45 C, 4B C, CD C, 22E5 ,
  6   C1 C,
  7   DD C, E9 C, ( NEXT ) SMUDGE
  8 \
  9 -->
 10 : CIRCLE
 11   ROT 0 >W SWAP 0 >W 0 >W
 12   232D CALL#
 13   ;
 14 \
 15 -->


Scr# 45 
  0 ( DRAW                     )
  1 CODE  (DRAW)  HEX
  2   D1 C, E1 C, C5 C,
  3   4D C, 43 C, 5C C,
  4   CD C, 24BA ,
  5   C1 C,
  6   DD C, E9 C, ( NEXT ) SMUDGE
  7 : DRW1
  8   100 OVER +- SWAP ABS + ;
  9 : DRAW
 10   SWAP DRW1 SWAP DRW1
 11   (DRAW)
 12 ;
 13 -->
 14 
 15 


Scr# 46 
  0 ( PAINT )
  1 HEX
  2 : HIT ( x y d -- )
  3   >R
  4   BEGIN
  5    2DUP PLOT
  6    R + ABS 0B0 MOD
  7    2DUP POINT
  8   UNTIL
  9   R> DROP 2DROP ;
 10 : HIT2 ( x y -- )
 11   2DUP 1 HIT -1 HIT
 12   ?TERMINAL IF QUIT THEN
 13 ;
 14 -->
 15 


Scr# 47 
  0 ( PAINT )
  1 DECIMAL
  2 : HITX ( x y d -- )
  3   >R
  4   BEGIN
  5    SWAP R + 255 AND SWAP
  6    2DUP POINT 0=
  7   WHILE
  8    2DUP HIT2
  9   REPEAT
 10   R> DROP 2DROP
 11 ;
 12 : PAINT ( x y -- )
 13   2DUP HIT2
 14   2DUP 1 HITX -1 HITX
 15 ;


Scr# 48 
  0 ( Mr Jones' keyboard test )
  1 CODE KEYBOARD?
  2  POP   HL|
  3  LD    A'|  L|
  4  ANDN  7    N,
  5  INC   A'|
  6  LD    H'|  A|
  7  SRL    L|
  8  SRL    L|
  9  SRL    L|
 10  LDN   A'|   5  N,
 11  SUBA   L|
 12  LD    L'|  A|
 13  LDN   A'|  HEX FE N,
 14 -->
 15 


Scr# 49 
  0 ( Mr Jones' keyboard test )
  1  HERE
  2   RRCA DEC H'|
  3  JRF   NZ'| BACK,
  4  INA   HEX FE P,
  5  HERE
  6   RRA  DEC L'|
  7  JRF   NZ'| BACK,
  8  CCF
  9  RL    L|
 10  PSH1
 11 C;
 12 DECIMAL
 13 
 14 
 15 


Scr# 50 
  0 ( BLEEP )
  1 \
  2 ( n1 = {3.5M/Hz-241}/8 )
  3 ( n2 = 1000 * ms / Hz )
  4 \
  5 CODE  BLEEP  HEX
  6 E1 C, \ POP HL
  7 D1 C, \ POP DE
  8 C5 C, \ PUSH BC
  9 DD C, E5 C, \ PUSH IX
 10 CD C, 03B5 , \ CALL 03B5
 11 DD C, E1 C, \ POP IX
 12 C1 C, \ POP BC
 13 DD C, E9 C, ( NEXT )
 14 SMUDGE DECIMAL
 15 -->


Scr# 51 
  0 ( BLEEP )
  1 ( ms Hz -- n1 n2 )
  2 : BLEEP-CALC
  3 >R R 1000 */
  4 3500.000 R> UM/MOD
  5 241 - 8 /
  6 SWAP DROP ;
  7 ( BEEP pitch -- freq )
  8 : BEEP-PITCH
  9 69 SWAP -
 10 12 /MOD 14080
 11 SWAP 0 ?DO 2/ LOOP
 12 SWAP 0 ?DO 269 286 */ LOOP
 13 ;
 14 
 15 


Scr# 52 
  0 ( Pitch bend )
  1 CODE PITCH-BEND
  2 PUSH  BC|
  3 LDX   HL|  500  NN,
  4 LDN   B'|  250   N,
  5 HERE
  6 LDX   DE|    1  NN,
  7 PUSH  BC|  PUSH  HL|  PUSH  IX|
  8 CALL  949 AA,
  9 POP   HL|  POP   BC|  POP   IX|
 10 INCX  HL|
 11 DJNZ  BACK,
 12 POP   BC|
 13 NEXT C;
 14 
 15 


Scr# 53 
  0 ( KEYBOARD-TEST )
  1 : KEYBOARD-TEST
  2 BEGIN
  3  40 0 DO
  4   I KEYBOARD?
  5   IF I . CR THEN
  6  LOOP
  7  ?TERMINAL
  8 UNTIL
  9 ;
 10 
 11 
 12 
 13 
 14 
 15 


Scr# 54 
  0 
  1 
  2 
  3 
  4 
  5 
  6 
  7 
  8 
  9 
 10 
 11 
 12 
 13 
 14 
 15 


Scr# 55 
  0 ( MS delay )
  1 \ at 3.5MHz n ms delay
  2 DECIMAL
  3 CODE ms ( n -- )
  4  POP DE|
  5  LD  D'|  B|
  6  LDN H'|  205  N,
  7  HERE   \ BEGIN,
  8   LD  B'|  H|
  9   HERE
 10    NOP
 11   DJNZ BACK,
 12   DEC  E'|
 13  JRF NZ'| BACK,
 14  LD  B'| D|
 15  NEXT C;


Scr# 56 
  0 
  1 
  2 
  3 
  4 
  5 
  6 
  7 
  8 
  9 
 10 
 11 
 12 
 13 
 14 
 15 


Scr# 57 
  0 ( FRAMES )
  1 CODE FRAMES@
  2  LDX  HL| HEX 5C78 NN,
  3  LD E'| (HL)|
  4  INCX HL|
  5  LD D'| (HL)|
  6  INCX HL|
  7  LD L'| (HL)|
  8  LDN H'| 0 N,
  9 PSH2 C;
 10 CODE 1FRAME
 11  LDX HL| HEX 5C78 NN,
 12  LD A'| (HL)|
 13  HERE CPA (HL)|
 14  JRF Z'| BACK,
 15  NEXT C; -->


Scr# 58 
  0 ( FRAMES )
  1 : T FRAMES@ D. ;
  2 : TT 1FRAME 1FRAME
  3   FRAMES@ ROT MS FRAMES@
  4   2SWAP DMINUS D+ . . ;
  5 : TEST ( frames -- )
  6   400 18 DO
  7   I DUP . TT
  8   I 1+ DUP . TT
  9   I 2+ DUP . TT
 10   I 3 + DUP . TT
 11   CR 100 +LOOP
 12 ;
 13 
 14 
 15 


Scr# 59 
  0 ( TEST )
  1 HEX 5800
  2 CONSTANT ADDRESS
  3 20 VARIABLE DELAY
  4 : WAIT
  5  DELAY @ 0 DO 1FRAME LOOP
  6 ;
  7 : TEST1
  8  87 ADDRESS 2+ C!
  9  BEGIN
 10  00 ADDRESS C! WAIT
 11  3F ADDRESS C! WAIT
 12  ?TERMINAL
 13  UNTIL
 14 ;
 15 DECIMAL


Scr# 60 
  0 ( Interrupt Handler )
  1 HEX
  2 CODE  INT-EI
  3  FB C,
  4  DD C, E9 C, ( NEXT ) SMUDGE
  5 CODE  INT-DI
  6  F3 C,
  7  DD C, E9 C, ( NEXT ) SMUDGE
  8 CODE  INT-IM1
  9  56ED , ( IM 1 )
 10  DD C, E9 C, ( NEXT ) SMUDGE
 11 CODE  INT-IM2
 12  5EED , ( IM 2 )
 13  DD C, E9 C, ( NEXT ) SMUDGE
 14 -->
 15 


Scr# 61 
  0 ( Interrupt Handler )
  1 HEX
  2 CODE  SETIREG
  3  E1 C, ( POP HL )
  4  7D C, ( LD A,L )
  5  47ED , ( LD I,A )
  6  DD C, E9 C, ( NEXT ) SMUDGE
  7 \
  8 : INT-OFF
  9  INT-DI
 10  3F SETIREG INT-IM1
 11  INT-EI
 12 ;
 13 \
 14 0 VARIABLE INT-SAVE
 15 -->


Scr# 62 
  0 ( Interrupt Handler )
  1 HEX
  2 CODE  INT-RET
  3  ED C, 7B C, INT-SAVE ,
  4  E1 C, \ POP HL
  5  22 C, (NEXT) 4 - ,
  6  C1 C, D1 C, E1 C, \ BCDEHL
  7  D9 C, \ EXX
  8  C1 C, D1 C, E1 C, \ BCDEHL
  9  F1 C, 08 C, F1 C, \ AF
 10  DD C, E1 C, \ POP IX
 11 \
 12  C3 C, 0038 , \ CALL 38
 13  FB C, C9 C, \ EI RET
 14 SMUDGE
 15 -->


Scr# 63 
  0 ( Interrupt Handler )
  1 ' NOOP VARIABLE INT-W
  2 ' INT-RET ,
  3 -->
  4 
  5 
  6 
  7 
  8 
  9 
 10 
 11 
 12 
 13 
 14 
 15 


Scr# 64 
  0 ( Interrupt Handler )
  1 HEX
  2 CODE  INT-SUB
  3  DD C, E5 C, \ PUSH IX
  4  F5 C, 08 C, F5 C, \ AF
  5  E5 C, D5 C, C5 C, \ HLDEBC
  6  D9 C, \ EXX
  7  E5 C, D5 C, C5 C, \ HLDEBC
  8 \ RP
  9  2A C, (NEXT) 4 - ,
 10  E5 C,
 11 \
 12  11 C, -10 ,
 13  19 C, ( ADD HL,DE )
 14  22 C, (NEXT) 4 - ,
 15 -->


Scr# 65 
  0 ( Interrupt Handler )
  1 \ SP
  2  ED C, 73 C, INT-SAVE ,
  3 \
  4  21 C, -10 ,
  5  39 C, ( ADD HL,SP )
  6  F9 C, ( LD  SP,HL  )
  7 \
  8  01 C, INT-W ,
  9        ( LD BC, INT-W )
 10  DD C, E9 C, ( NEXT ) SMUDGE
 11 SMUDGE
 12 -->
 13 
 14 
 15 


Scr# 66 
  0 ( Interrupt Handler )
  1 -->
  2 
  3 HEX
  4 : INT-ON
  5 [ ' INT-SUB 2+ ] LITERAL
  6 \ 63FF !
  7 0 +ORIGIN 1- !
  8 \ 63 LDIA
  9 0 + ORIGIN 1- 100 /
 10 SETIREG
 11  IM2
 12  EI
 13 ;
 14 DECIMAL
 15 


Scr# 67 
  0 ( Interrupt Handler )
  1 HEX
  2 : INT-ON
  3 [ ' INT-SUB 2+ ] LITERAL
  4  DUP INT-DI
  5  18 FFFF C!
  6  C3 FFF4 C!
  7     FFF5 !
  8  C3 FFE2 C!
  9     FFE3 !
 10  39 SETIREG \ last ROM page
 11  INT-IM2
 12  INT-EI
 13 ;
 14 
 15 


Scr# 68 
  0 ( INTERRUPT - TEST )
  1 HEX
  2 : TEST
  3 55 4700 C!
  4 4700 4701 FF CMOVE
  5 4700 4F00 100 CMOVE
  6 4700 5700 100 CMOVE
  7 ;
  8 DECIMAL
  9 
 10 
 11 
 12 
 13 
 14 
 15 


Scr# 69 
  0 ( INTERRUPT )
  1 INT-OFF
  2 ' TEST INT-W !
  3 INT-ON
  4 
  5 
  6 
  7 
  8 
  9 
 10 
 11 
 12 
 13 
 14 
 15 


Scr# 70 
  0 ( CPU speed )
  1 
  2 
  3 
  4 
  5 
  6 
  7 
  8 
  9 
 10 
 11 
 12 
 13 
 14 
 15 


Scr# 71 
  0 
  1 
  2 
  3 
  4 
  5 
  6 
  7 
  8 
  9 
 10 
 11 
 12 
 13 
 14 
 15 


Scr# 72 
  0 
  1 
  2 
  3 
  4 
  5 
  6 
  7 
  8 
  9 
 10 
 11 
 12 
 13 
 14 
 15 


Scr# 73 
  0 ( COMPARE ) -->
  1 CODE (COMPARE) ( a b n -- )
  2 POP HL| LD A'| L|
  3 POP HL| POP DE| PUSH BC|
  4 LD B'| A|
  5 HERE
  6  LDA(X) DE| CPA (HL)|
  7  INCX DE| INCX HL|
  8  JRF Z'| HOLDPLACE
  9     JRF CY'| HOLDPLACE
 10           LDX  HL|  1 NN,
 11     ELSE, LDX  HL| -1 NN,
 12     THEN, POP BC| PSH1
 13  THEN, DJNZ BACK,
 14 LDX HL| 0 NN,
 15 POP BC| PSH1 C; -->


Scr# 74 
  0 ( COMPARE )
  1 : COMPARE
  2 ( a1 c1 a2 c2 -- -1|0|1 )
  3   ROT 2DUP - >R MIN
  4   (COMPARE)
  5   R> OVER IF DROP ELSE
  6   DUP IF 1 SWAP +- THEN
  7   + THEN ;
  8 : TRACE BLK ? IN ? ;
  9 -->
 10 : TEST
 11   S" CIAO" S" CIOA"
 12   COMPARE .
 13   S" CIAO" S" CIAI"
 14   COMPARE .
 15 ;


Scr# 75 
  0 ( BSEARCH )
  1 : SEARCH.SHOW ( -- )
  2   TRACE IN @ C/L / .
  3   6 EMITC
  4 ;
  5 \
  6 : SEARCH.SCR ( -- f )
  7   BL WORD COUNT
  8   PAD COUNT COMPARE ;
  9 \
 10 : LOCATE.SCR ( -- f )
 11   BL WORD @ 14849 =
 12   IF SEARCH.SCR
 13   ELSE 1 THEN ;
 14 -->
 15 


Scr# 76 
  0 ( SEARCH )
  1 : SEARCH.BLOCK ( b -- )
  2   BLK @ >R IN @ >R
  3   0 IN ! BLK !
  4   BEGIN
  5    SEARCH.SCR
  6    0= IF SEARCH.SHOW THEN
  7    ?TERMINAL \ ?ESCAPE
  8    IF BLK ? IN ? QUIT THEN
  9    HERE 1+ C@ 0=
 10   UNTIL
 11   R> IN ! R> BLK !
 12 ;
 13 -->
 14 
 15 


Scr# 77 
  0 ( BSEARCH SEARCH-ALL )
  1 : BSEARCH ( n m "word" --)
  2   BL TEXT
  3   CR ." Searching for "
  4   PAD COUNT TYPE CR
  5   ." Scr#  Offs  Line" CR
  6   SWAP DO
  7    I 2* SEARCH.BLOCK I 2* 1+ SEARCH.BLOCK
  8    ?TERMINAL IF TRACE LEAVE THEN
  9   LOOP
 10 ;
 11 : SEARCH-ALL
 12   1 1000 BSEARCH
 13 ;
 14 -->
 15 


Scr# 78 
  0 ( LOCATE )
  1 : LOCATE.BLOCK ( b -- )
  2   BLK @ >R IN @ >R
  3   0 IN ! B/SCR * BLK !
  4   BEGIN
  5    LOCATE.SCR
  6    0= IF BLK @ LIST
  7     QUIT THEN
  8    ?TERMINAL \ ?ESCAPE
  9    IF ." Halt" QUIT THEN
 10    HERE 1+ C@ 0=
 11   UNTIL
 12   R> IN ! R> BLK !
 13 ;
 14 -->
 15 


Scr# 79 
  0 ( LOCATE )
  1 : LOCATE ( "word" -- )
  2   BL TEXT
  3   #SEC 1 DO
  4    I LOCATE.BLOCK
  5   LOOP
  6   ." Not found. " ;
  7 
  8 
  9 
 10 
 11 
 12 
 13 
 14 
 15 


Scr# 80 
  0 ( Heap Memory Management )
  1 \ Convert an heap-pointer address into a real address
  2 \ between E000h and FFFh and fit the 8K page on MMU7
  3 : FAR  ( ha -- a )
  4   >FAR MMU7! ;
  5 \
  6 \ Get current Heap Pointer
  7 : HP@ ( -- ha )
  8   HP @ ;
  9 \
 10 \ like CONSTANT but return a Heap-Pointer-Address
 11 : POINTER ( ha -- ccc )
 12   <BUILDS , DOES> @ FAR
 13 ;
 14 \
 15 -->


Scr# 81 
  0 ( Heap Memory Management )
  1 \ check if n bytes are available in this 8K-page in Heap
  2 \ otherwise skip HP to the beginning of next 8K-page
  3 : IN-PAGE? ( n -- )
  4   [ HEX 1FFF ] LITERAL >R
  5   HP@  CELL+  R  AND
  6   +  R  >
  7   IF
  8     HP@  R> OR 1+  HP !
  9   ELSE
 10     R> DROP
 11   THEN
 12   HP@  0=  [ DECIMAL 12 ] LITERAL  ?ERROR
 13 ;
 14 \
 15 -->


Scr# 82 
  0 ( Heap Memory Management )
  1 \ Reserve n bytes of Heap, return heap-pointe address
  2 \ Heap is a linked-list starting from 0002
  3 : HEAP ( n -- ha )
  4   DUP IN-PAGE?     \ n
  5   HP@ SWAP          \ ha n
  6   CELL+             \ ha n+2
  7   HP +!             \ ha
  8   HP@ SWAP          \ hp ha
  9   TUCK              \ ha hp ha
 10   FAR !             \ ha
 11   CELL+             \ ha
 12 ;
 13 \
 14 -->
 15 


Scr# 83 
  0 ( Heap Memory Management )
  1 \ Accept a string and store it to Heap, return a
  2 \ heap-address pointer to a counted string
  3 : H" ( -- ha )
  4   HP@ CELL+          \ ha
  5   [CHAR] "  WORD     \ ha  a1
  6   DUP C@ 1+ TUCK     \ ha  u  a1  u
  7   HEAP >FAR DROP     \ ha  u  a1  a2
  8   ROT                \ ha  a1  a2  u
  9   CMOVE              \ ha
 10 ;
 11 \
 12 -->
 13 
 14 
 15 


Scr# 84 
  0 ( Heap Memory Management )
  1 : (S") R @ FAR COUNT R> CELL+ >R ;
  2 : S"  ( -- a n )
  3   STATE @
  4   IF
  5    COMPILE (S") H" ,
  6   ELSE
  7    H" FAR COUNT
  8   ENDIF
  9 ; IMMEDIATE
 10 \
 11 -->
 12 \
 13 : TEST_S"  S" HELLO WORLD" NOOP ;
 14 CR TEST_S" TYPE
 15 CR S" HELLO WORLD" TYPE


Scr# 85 
  0 ( S" Counted Strings in Heap )
  1 \ consume  c  and append to the string being created
  2 \ in Heap at ha
  3 \ return the same Heap-Pointe to the counted string
  4 : +C ( ha c -- ha )
  5  OVER FAR                 \ ha c  a
  6  1 OVER CELL- +!          \ fix linked list pointer
  7  DUP C@ 1+ SWAP 2DUP      \ ha c  n  a  n  a
  8  C!                       \ ha c  n  a   :  fix length
  9  + C!                     \ ha           : store c
 10  1 HP +!                  \ ha
 11 ;
 12 
 13 
 14 
 15 


Scr# 86 
  0 ( S" Counted Strings in Heap )
  1 \ accept a string and store it to the being created on Heap
  2 \ appending to the existing string at "ha"
  3 \ return the same Heap-Pointer to the counted string on Heap
  4 : +" ( ha -- ha )
  5  DUP FAR C@
  6  [CHAR] " WORD
  7  DUP C@ >R 1+
  8  HP@ FAR R CMOVE
  9  R HP +!
 10  R> +
 11  OVER FAR C!
 12  DUP FAR HP@ SWAP !
 13 ;
 14 -->
 15 


Scr# 87 
  0 ( Allocate RAM banks )
  1 HEX
  2 : DOS-HEAP ( n -- )
  3   48 40 DO
  4     DUP  I  0  0  01BD  M_P3DOS
  5     2C ?ERROR
  6     2DROP 2DROP
  7   LOOP DROP ;
  8 DECIMAL
  9 : HEAP-ALLOC 2 DOS-HEAP ;
 10 : HEAP-FREE 3 DOS-HEAP ;
 11 \
 12 HEAP-ALLOC
 13 
 14 
 15 


Scr# 88 
  0 
  1 
  2 
  3 
  4 
  5 
  6 
  7 
  8 
  9 
 10 
 11 
 12 
 13 
 14 
 15 


Scr# 89 
  0 
  1 
  2 
  3 
  4 
  5 
  6 
  7 
  8 
  9 
 10 
 11 
 12 
 13 
 14 
 15 


Scr# 90 
  0 
  1 
  2 
  3 
  4 
  5 
  6 
  7 
  8 
  9 
 10 
 11 
 12 
 13 
 14 
 15 


Scr# 91 
  0 
  1 
  2 
  3 
  4 
  5 
  6 
  7 
  8 
  9 
 10 
 11 
 12 
 13 
 14 
 15 


Scr# 92 
  0 
  1 
  2 
  3 
  4 
  5 
  6 
  7 
  8 
  9 
 10 
 11 
 12 
 13 
 14 
 15 


Scr# 93 
  0 
  1 
  2 
  3 
  4 
  5 
  6 
  7 
  8 
  9 
 10 
 11 
 12 
 13 
 14 
 15 


Scr# 94 
  0 
  1 
  2 
  3 
  4 
  5 
  6 
  7 
  8 
  9 
 10 
 11 
 12 
 13 
 14 
 15 


Scr# 95 
  0 
  1 
  2 
  3 
  4 
  5 
  6 
  7 
  8 
  9 
 10 
 11 
 12 
 13 
 14 
 15 


Scr# 96 
  0 
  1 
  2 
  3 
  4 
  5 
  6 
  7 
  8 
  9 
 10 
 11 
 12 
 13 
 14 
 15 


Scr# 97 
  0 
  1 
  2 
  3 
  4 
  5 
  6 
  7 
  8 
  9 
 10 
 11 
 12 
 13 
 14 
 15 


Scr# 98 
  0 
  1 
  2 
  3 
  4 
  5 
  6 
  7 
  8 
  9 
 10 
 11 
 12 
 13 
 14 
 15 


Scr# 99 
  0 
  1 
  2 
  3 
  4 
  5 
  6 
  7 
  8 
  9 
 10 
 11 
 12 
 13 
 14 
 15 


Scr# 100 
  0 ." Assembler. "           CR
  1 \ Loads ASSEMBLER vocabulary
  2 FORTH DEFINITIONS
  3 MARKER FORGET-ASSEMBLER
  4 VOCABULARY TOOLS-ASM IMMEDIATE
  5 VOCABULARY FORTH-ASM
  6 : ASSEMBLER FORTH-ASM 1 MMU7! ; IMMEDIATE
  7 \
  8 \ there are 4 zones:
  9 DECIMAL 101 LOAD \ tools
 10 DECIMAL 120 LOAD \ Z80
 11 DECIMAL 140 LOAD \ structure
 12 DECIMAL 160 LOAD \ Z80N
 13 DECIMAL 117 LOAD \ final CODE patch
 14 ." Done " CR
 15 ;S


Scr# 101 
  0 .( Z80 Assembler. ) CR
  1 ASSEMBLER TOOLS-ASM DEFINITIONS
  2   DP @ LP ! HEX E080 DP !
  3 : INVERT -1 XOR ;
  4 : @+ >R R CELL+ R> @ ;
  5 : !+ >R R ! R> CELL+ ;
  6 : @- 0 CELL+ - >R R @ R> ;
  7 1 VARIABLE TABL1 1 ,
  8 : ROTLEFT  TABL1 + @
  9   UM* \ U*
 10   OR ;
 11 \
 12 CHAR - CONSTANT &-
 13 CHAR ~ CONSTANT &~
 14 -->
 15 


Scr# 102 
  0 ( Z80 Utility - Sys depend )
  1 : % COMPILE ' <NAME ;
  2 \ : % POSTPONE ' <NAME ;
  3 : %ID. ID. ;
  4 : %>BODY PFA CELL+ ;
  5 : %BODY> 0 CELL+ - NFA ;
  6 : %>CODE PFA CFA CELL+ ;
  7 : IGNORE? 1+ C@ &~ = ;
  8 : (>NEXT%) PFA LFA @ ;
  9 : VOCEND?
 10   @ FFFF AND A081 = ;
 11 : >NEXT% BEGIN (>NEXT%)
 12   DUP 1+ C@ &- - UNTIL ;
 13 -->
 14 
 15 


Scr# 103 
  0 ( Z80 Utility - Sys depend )
  1 : STARTVOC ' ASSEMBLER 2 +
  2   CELL+ @ ;
  3 : IS-A <BUILDS
  4   0 ,
  5   DOES>
  6   @ SWAP %>CODE @ = ;
  7 : REMEMBER HERE LATEST
  8   (>NEXT%) %>BODY ! ;
  9   IMMEDIATE
 10 : CONTAINED-IN OVER AND = ;
 11 -->
 12 
 13 
 14 
 15 


Scr# 104 
  0 ( Z80 System independ. )
  1 \ 0 VARIABLE TABLE FF ,
  2 \ FFFF , FFFFFF , FFFFFFFF ,
  3 \ : FIRSTBYTES CELLS TABLE
  4 \   + @ AND ;
  5 0 VARIABLE TALLY-BI
  6 0 VARIABLE TALLY-BY
  7 0 VARIABLE TALLY-BA
  8 0 VARIABLE ISS
  9 0 VARIABLE ISL
 10 0 VARIABLE PREVIOUS
 11 : !TALLY 0 TALLY-BY !
 12  0 TALLY-BI ! 0 TALLY-BA !
 13  0 PREVIOUS ! ;
 14 -->
 15 


Scr# 105 
  0 ( Z80 System independ. )
  1 : AT-REST? TALLY-BI @ 0=
  2  TALLY-BY @ 0= AND ;
  3 : BADPAIRS? DUP 2 * AND
  4  AAAAAAAA AND ;
  5 : BAD?
  6  TALLY-BA @ BADPAIRS? ;
  7 : COMPATIBLE?
  8  TALLY-BA @ OR BADPAIRS?
  9  0= ;
 10 DECIMAL
 11 -->
 12 
 13 
 14 
 15 


Scr# 106 
  0 ( Z80 Generate errors )
  1 : CHECK26 AT-REST? 0=
  2   26 ?ERROR ;
  3 : CHECK27 BAD? 27 ?ERROR ;
  4 : CHECK31 2DUP SWAP
  5   CONTAINED-IN 0= 31 ?ERROR ;
  6 : CHECK33 2DUP SWAP INVERT
  7   CONTAINED-IN 0= 33 ?ERROR ;
  8 : CHECK28 2DUP AND 28 ?ERROR ;
  9 : CHECK29 2DUP OR -1 -
 10   29 ?ERROR ;
 11 : CHECK30 DUP PREVIOUS @ <
 12   30 ?ERROR DUP PREVIOUS ! ;
 13 HEX
 14 -->
 15 


Scr# 107 
  0 ( Assembler Z80 )
  1 : OR!
  2   >R R @ CHECK28 OR R> ! ;
  3 : OR!U >R R @ OR R> ! ;
  4 : AND! >R INVERT R @
  5   CHECK29 AND R> ! ;
  6 -->
  7 
  8 
  9 
 10 
 11 
 12 
 13 
 14 
 15 


Scr# 108 
  0 ( Assembler Z80 )
  1 : >DATA %>BODY ;
  2 : >BI %>BODY CELL+ ;
  3 : >BY %>BODY 2 CELLS + ;
  4 : >BA %>BODY 3 CELLS + ;
  5 : >CNT %>BODY 4 CELLS + ;
  6 : >DIS %>BODY 5 CELLS ;
  7 : CORRECT,-
  8   ISL @ 1 CELLS - ALLOT ;
  9 : !POSTIT
 10   HERE ISS ! 0 PREVIOUS ! ;
 11 : TALLY:, @+ TALLY-BI !
 12   @+ TALLY-BY ! @+ TALLY-BA !
 13   @ ISL ! ;
 14 -->
 15 


Scr# 109 
  0 ( Assembler Z80 )
  1 : POSTIT CHECK26 !POSTIT
  2   HERE ISS ! @+ , TALLY:,
  3   CORRECT,- ;
  4 IS-A IS-CBPI : CBPI CHECK33
  5 <BUILDS , , , , 1 , DOES>
  6 REMEMBER CB C, POSTIT ;
  7 IS-A IS-EDPI : EDPI CHECK33
  8 <BUILDS , , , , 1 , DOES>
  9 REMEMBER ED C, POSTIT ;
 10 IS-A IS-DDPI : DDPI CHECK33
 11 <BUILDS , , , , 1 , DOES>
 12 REMEMBER DD C, POSTIT ;
 13 IS-A IS-FDPI : FDPI CHECK33
 14 <BUILDS , , , , 1 , DOES>
 15 REMEMBER FD C, POSTIT ; -->


Scr# 110 
  0 ( Assembler Z80 )
  1 IS-A IS-1PI : 1PI CHECK33
  2 <BUILDS , , , , 1 , DOES>
  3 REMEMBER POSTIT ;
  4 IS-A IS-2PI : 2PI CHECK33
  5 <BUILDS , , , , 2 , DOES>
  6 REMEMBER POSTIT ;
  7 IS-A IS-3PI : 3PI CHECK33
  8 <BUILDS , , , , 3 , DOES>
  9 REMEMBER POSTIT ;
 10 : IS-PI >R R IS-1PI
 11  R IS-2PI R IS-3PI OR OR
 12  R IS-CBPI R IS-EDPI OR OR
 13  R IS-DDPI R IS-FDPI OR OR
 14  R> DROP ;
 15 -->


Scr# 111 
  0 ( Assembler Z80 )
  1 : TALLY:|
  2   @+ TALLY-BI AND!
  3   @+ TALLY-BY OR!
  4   @  TALLY-BA OR!U ;
  5 : FIXUP> @+ ISS @ OR!
  6   TALLY:| CHECK27 ;
  7 IS-A IS-XFI : XFI CHECK31
  8 <BUILDS , , , , DOES>
  9 REMEMBER FIXUP> ;
 10 : CORRECT-R 0 CELL+ ISL @
 11 - ROTLEFT ;
 12 -->
 13 
 14 
 15 


Scr# 112 
  0 ( Assembler Z80 )
  1 : TALLY:|R @+ CORRECT-R
  2  TALLY-BI AND! @+ TALLY-BY OR!
  3  @ TALLY-BA OR!U ;
  4 : FIXUP< @+ CORRECT-R ISS
  5  @ OR! TALLY:|R CHECK27 ;
  6 IS-A IS-XFIR : XFIR CHECK31
  7 <BUILDS , , , , DOES>
  8 REMEMBER FIXUP< ;
  9 : TALLY:,, CELL+ @+ CHECK30
 10 TALLY-BY AND! @ TALLY-BA
 11 OR!U ;
 12 : COMMA @+ >R TALLY:,,
 13  CHECK27 R> EXECUTE ;
 14 -->
 15 


Scr# 113 
  0 ( Assembler Z80 )
  1 IS-A IS-COMMA
  2 : COMMAER
  3 <BUILDS , 0 , , , , , DOES>
  4 REMEMBER COMMA ;
  5 0 VARIABLE PRO-TALLY
  6   2 CELLS ALLOT
  7 : T! PRO-TALLY !+ !+ !+ DROP ;
  8 : T@ PRO-TALLY 3 CELLS +
  9   @- @- @- DROP ;
 10 -->
 11 
 12 
 13 
 14 
 15 


Scr# 114 
  0 ( Assembler Z80 )
  1 : 1FAMILY, 0 DO DUP >R T@
  2   R> 1PI OVER + LOOP
  3   DROP DROP ;
  4 : 2FAMILY, 0 DO DUP >R T@
  5   R> 2PI OVER + LOOP
  6   DROP DROP ;
  7 : 3FAMILY, 0 DO DUP >R T@
  8   R> 3PI OVER + LOOP
  9   DROP DROP ;
 10 : XFAMILY| 0 DO DUP >R T@
 11   R> XFI OVER + LOOP
 12   DROP DROP ;
 13 : XFAMILY|R 0 DO DUP >R T@
 14   R> XFIR OVER + LOOP
 15   DROP DROP ; -->


Scr# 115 
  0 ( Assembler Z80 )
  1 : CBFAMILY, 0 DO DUP >R T@
  2   R> CBPI OVER + LOOP
  3   DROP DROP ;
  4 : EDFAMILY, 0 DO DUP >R T@
  5   R> EDPI OVER + LOOP
  6   DROP DROP ;
  7 -->
  8 
  9 
 10 
 11 
 12 
 13 
 14 
 15 


Scr# 116 
  0 ( Assembler Z80 )
  1 : DDFAMILY, 0 DO DUP >R T@
  2   R> DDPI OVER + LOOP
  3   DROP DROP ;
  4 : FDFAMILY, 0 DO DUP >R T@
  5   R> FDPI OVER + LOOP
  6   DROP DROP ;
  7 \
  8 ;S
  9 
 10 
 11 
 12 
 13 
 14 
 15 


Scr# 117 
  0 ( Assembler z80 )
  1 FORTH DEFINITIONS RENAME CODE CDEF
  2 : CODE ?EXEC CDEF \ previous def of CODE
  3   [COMPILE] ASSEMBLER
  4   TOOLS-ASM
  5   !TALLY !CSP ; IMMEDIATE
  6 : C;  \ Ends a CODE definitions
  7   CURRENT @ CONTEXT !  ?EXEC
  8   TOOLS-ASM  CHECK26  CHECK27
  9   SMUDGE ; IMMEDIATE
 10 \
 11 ' ASSEMBLER ' ;CODE >BODY 4 CELLS + ! ( patch to ;CODE )
 12 \
 13 FORTH DEFINITIONS
 14 \
 15 ;S


Scr# 118 
  0 
  1 
  2 
  3 
  4 
  5 
  6 
  7 
  8 
  9 
 10 
 11 
 12 
 13 
 14 
 15 


Scr# 119 
  0 
  1 
  2 
  3 
  4 
  5 
  6 
  7 
  8 
  9 
 10 
 11 
 12 
 13 
 14 
 15 


Scr# 120 
  0 .( Z80 definitions. ) CR
  1 ASSEMBLER DEFINITIONS HEX
  2 TOOLS-ASM
  3 \
  4 0 1 0 800 ' C,
  5   COMMAER N,
  6 0 0 CELL+ 0 200 ' ,
  7   COMMAER NN,
  8 0 0 CELL+ 0 400 ' ,
  9   COMMAER AA,
 10 0 1 0 100 ' C,
 11   COMMAER P,
 12 0 1 0 1000 ' C,
 13   COMMAER D,
 14 -->
 15 


Scr# 121 
  0 ( Z80 ) HEX
  1 00 00 00 T!
  2 08 07 8 1FAMILY,
  3   RLCA RRCA RLA  RRA  DAA  CPL  SCF  CCF
  4 \
  5 08 00 2 1FAMILY,   NOP       EXAFAF
  6 \
  7 08 E3 4 1FAMILY,   EX(SP)HL  EXDEHL  DI  EI
  8 \
  9 00 00 238 T!
 10 08 00 8 XFAMILY|
 11    00| 08| 10| 18|
 12    20| 28| 30| 38|
 13 00 00 238 C7 1PI    RST
 14 -->
 15 \ RST 38|  DAA


Scr# 122 
  0 ( Z80 ) HEX
  1 00 00 07 T!
  2 01 00 8 XFAMILY|
  3   B|  C|    D|  E|
  4   H|  L| (HL)|  A|
  5 08 80 8 1FAMILY,
  6  ADDA ADCA SUBA SBCA
  7  ANDA XORA ORA  CPA
  8 \
  9 00 00 00 76 1PI HALT
 10 -->
 11 \ ADDA B|
 12 \ HALT
 13 
 14 
 15 


Scr# 123 
  0 ( Z80 ) HEX
  1 00 00 30 T!
  2 10 00 4 XFAMILY|
  3   BC| DE| HL| SP|
  4 01 02 2 1FAMILY,
  5   LD(X)A INCX
  6 01 09 3 1FAMILY,
  7   ADDHL  LDA(X)  DECX
  8 00 0200 30 01 1PI LDX
  9 00 00 30 30 XFI AF|
 10 00 00 30 T!
 11 04 C1 2 1FAMILY,
 12   POP PUSH
 13 -->
 14 \ LD(X)A BC|
 15 \ LDX BC| nn NN,


Scr# 124 
  0 ( Z80 immediate data )
  1 00 0100 00 T!
  2 08 D3 2 1FAMILY,
  3   OUTA  INA
  4 00 0800 00 T!
  5 08 C6 8 1FAMILY,
  6   ADDN ADCN SUBN SBCN
  7   ANDN XORN ORN  CPN
  8 00 00 00 T!
  9 10 C9 4 1FAMILY,
 10   RET EXX JPHL LDSPHL
 11 -->
 12 \ OUTA n P,   INA n P,
 13 \ ADDN n N,
 14 
 15 


Scr# 125 
  0 ( Z80 address )
  1 00 0400 00 T!
  2 08 22 4 1FAMILY,
  3   LD()HL LDHL() LD()A LDA()
  4 0A C3 2 1FAMILY,
  5   JP CALL
  6 00 00 38 T!
  7 \ LD B'| C| LD()A nn AA,
  8 08 00 8 XFAMILY|
  9   B'| C'| D'| E'|
 10   H'| L'| (HL)'| A'|
 11 01 04 2 1FAMILY,
 12   INC DEC
 13 00 00 3F 40 1PI LD
 14 00 0800 38 06 1PI LDN
 15 -->


Scr# 126 
  0 ( Z80 ) HEX
  1 00 00 138 T!
  2 08 00 8 XFAMILY|
  3   NZ|  Z|  NC|  CY|
  4   PO| PE|   P|   M|
  5 00 00 138 C0 1PI  RETF
  6 00 0400 138 T!
  7 \
  8 02 C2 2 1FAMILY,
  9  JPF CALLF
 10 -->
 11 \ JPF Z| aa AA,
 12 \ CALLF PO| aa AA,
 13 \ RETF NC|
 14 \ and CY| instead of C|
 15 


Scr# 127 
  0 ( Z80 relative jump )
  1 HEX
  2 00 1000 00 T!
  3 08 10 2 1FAMILY,
  4   DJNZ JR
  5 00 00 218 T!
  6 \
  7 \
  8 08 00 4 XFAMILY|
  9   NZ'| Z'| NC'| CY'|
 10 00 1000 218 20 1PI JRF
 11 -->
 12 \ JRF Z'| d D,
 13 \ JR d D,
 14 \ DJNZ d D,
 15 


Scr# 128 
  0 ( ED prefix )
  1 00 00 30 T!
  2 08 42 2 EDFAMILY,
  3  SBCHL  ADCHL
  4 00 0400 30 T!
  5 08 43 2 EDFAMILY,
  6   LD()X  LDX()
  7 00 00 38 T!
  8 01 40 2 EDFAMILY,
  9   IN(C)  OUT(C)
 10 -->
 11 \ SBCHL BC| ADCHL SP|
 12 \ LDX() BC| nn AA,
 13 \ LD()X SP| nn AA,
 14 \ IN(C) L'|
 15 \ OUT(C) H'|


Scr# 129 
  0 ( ED )
  1 00 00 00 T!
  2 01 44 4 EDFAMILY,
  3   NEG RETN IM0 LDIA
  4 02 4D 2 EDFAMILY,
  5   RETI LDRA
  6 01 56 2 EDFAMILY,
  7   IM1 LDAI
  8 01 5E 2 EDFAMILY,
  9   IM2 LDAR
 10 08 67 2 EDFAMILY,
 11   RRD RLD
 12 -->
 13 
 14 
 15 


Scr# 130 
  0 ( ED )
  1 00 00 00 T!
  2 01 A0 4 EDFAMILY,
  3   LDI  CPI  INI  OUTI
  4 01 A8 4 EDFAMILY,
  5   LDD  CPD  IND  OUTD
  6 01 B0 4 EDFAMILY,
  7   LDIR CPIR INIR OTIR
  8 01 B8 4 EDFAMILY,
  9   LDDR CPDR INDR OTDR
 10 -->
 11 
 12 
 13 
 14 
 15 


Scr# 131 
  0 ( CB )
  1 00 00 07 T!
  2 08 00 8 CBFAMILY,
  3   RLC  RRC  RL  RR
  4   SLA  SRA  SLL SRL
  5 00 00 43F T!
  6 40 40 3 CBFAMILY,
  7   BIT  RES  SET
  8 00 00 438 T!
  9 08 00 8 XFAMILY|
 10   0| 1| 2| 3| 4| 5| 6| 7|
 11 -->
 12 \ RLC B|
 13 \ BIT 3| B|
 14 \ RES 3| B|
 15 \ SET 3| B|


Scr# 132 
  0 ( IX IY )
  1 HEX
  2 00 00 00 T!
  3 02 E3 1 DDFAMILY,
  4   EX(SP)IX
  5 02 E3 1 FDFAMILY,
  6   EX(SP)IY
  7 \
  8 10 E9 2 DDFAMILY,
  9   JPIX  LDSPIX
 10 10 E9 2 FDFAMILY,
 11   JPIY  LDSPIY
 12 \
 13 -->
 14 \
 15 


Scr# 133 
  0 ( IX IY )
  1 HEX
  2 00 00 30 T!
  3 00 09 1 DDFAMILY, ADDIX
  4 00 09 1 FDFAMILY, ADDIY
  5 \
  6 00 0400 00 T!
  7 \
  8 08 22 2 DDFAMILY,
  9   LD()IX LDIX()
 10 08 22 2 FDFAMILY,
 11   LD()IY  LDIY()
 12 -->
 13 \ ADDIX IX|  ADDIX SP|
 14 \ LD()IY aa AA,
 15 \ LDIY() aa AA,


Scr# 134 
  0 ( IX IY )
  1 : I)
  2 HERE 1 - C@
  3 HERE 2 - C@ [ HEX ] CB - IF
  4 -1 ALLOT SWAP C, C,
  5 ELSE
  6 -2 ALLOT SWAP C, CB C, C,
  7 ENDIF ;
  8 TOOLS-ASM
  9 00 00 07 T!
 10 00 06 1 XFAMILY| (I
 11 : (IX+  (I  DD I) ;
 12 : (IY+  (I  FD I) ;
 13 TOOLS-ASM
 14 -->
 15 \ LD B'| (IY+ d )|    ADCA (IY+ d )|   SRA (IY+ d )|


Scr# 135 
  0 ( IX IY )
  1 HEX
  2 : )|
  3   HERE 1 - C@
  4   HERE 2 - C@
  5   CB = IF SWAP ENDIF
  6   HERE 1 - C! C, ;
  7 \
  8 : IXY| ( n -- )
  9  DUP HERE 2 - C@ - IF
 10   HERE 1- C@
 11   -1 ALLOT SWAP C, C,
 12  ENDIF ;
 13 TOOLS-ASM
 14 -->
 15 


Scr# 136 
  0 ( IX IY )
  1 \ INC DEC  (IX'+ d )|
  2 \ LDN  (IX'+ d )|  n N,
  3 00 00 38 T!
  4 00 30 1 XFAMILY|   (I'
  5 : (IX'+ (I' DD I) ;
  6 : (IY'+ (I' FD I) ;
  7 TOOLS-ASM
  8 \ LD(IX+ d )|  r|
  9 00 00 07 T!
 10 00 70 1 DDFAMILY, LD(IX+
 11 00 70 1 FDFAMILY, LD(IY+
 12 : )'| ' EXECUTE )| ;
 13 TOOLS-ASM
 14 -->
 15 


Scr# 137 
  0 ( IX IY )
  1 \ LDIXL A|
  2 00 00 07 T!
  3 08 60 2
  4    DDFAMILY, LDIXH LDIXL
  5 08 60 2
  6    FDFAMILY, LDIYH LDIYL
  7 -->
  8 
  9 
 10 
 11 
 12 
 13 
 14 
 15 


Scr# 138 
  0 ( IX IY )
  1 HEX
  2 : IX| HL| DD IXY| ;
  3 : IY| HL| FD IXY| ;
  4 : IXL| L| DD IXY| ;
  5 : IXH| H| DD IXY| ;
  6 : IYL| L| FD IXY| ;
  7 : IYH| H| FD IXY| ;
  8 TOOLS-ASM
  9 \ LDX IY| nn NN,
 10 \ POP IY|  LD A'| IXL|
 11 \ DP @ U. KEY \ verify...
 12 \
 13 DECIMAL
 14 
 15 


Scr# 139 
  0 
  1 
  2 
  3 
  4 
  5 
  6 
  7 
  8 
  9 
 10 
 11 
 12 
 13 
 14 
 15 


Scr# 140 
  0 .( Z80 near structure )   CR
  1 ASSEMBLER DEFINITIONS HEX
  2 \
  3 : NEXT                     JPIX ;
  4 : PSH1           PUSH HL|  JPIX ;
  5 : PSH2 PUSH DE|  PUSH HL|  JPIX ;
  6 \
  7 : HOLDPLACE HERE 0 D, ;
  8 : DISP, OVER -
  9   1 - SWAP C! ;
 10 : BACK,
 11  HOLDPLACE SWAP DISP, ;
 12 \
 13 -->
 14 
 15 


Scr# 141 
  0 ( Z80 Near struct. )
  1 : THEN, HERE DISP, ;
  2 : ELSE, JR HOLDPLACE
  3   SWAP THEN, ;
  4 \
  5 DECIMAL
  6 ;S
  7 
  8 
  9 
 10 
 11 
 12 
 13 
 14 
 15 


Scr# 142 
  0 ( Z80 Near struct. )
  1 ;S
  2 \
  3 : IF, JRF Z'|
  4   HOLDPLACE ;
  5 : -IF, JRF NZ'|
  6   HOLDPLACE ;
  7 : <IF, JRF CY'|
  8   HOLDPLACE ;
  9 : -<IF, JRF NC'|
 10   HOLDPLACE ;
 11 
 12 
 13 
 14 
 15 


Scr# 143 
  0 ( Z80 Near struct. )
  1 ;S
  2 : BEGIN, HERE ;
  3 : UNTIL, IF, SWAP DISP, ;
  4 : -UNTIL, -IF, SWAP DISP, ;
  5 : <UNTIL, <IF, SWAP DISP, ;
  6 : -<UNTIL, -<IF, SWAP DISP, ;
  7 : WHILE, IF, ;
  8 : -WHILE, -IF, ;
  9 : <WHILE, <IF, ;
 10 : -<WHILE, -<IF, ;
 11 : REPEAT, JR HOLDPLACE
 12   ROT DISP, THEN, ;
 13 -->
 14 
 15 


Scr# 144 
  0 ( Z80 Near struct. )
  1 ;S
  2 : DJNZ,
  3   DJNZ HOLDPLACE
  4   SWAP DISP, ;
  5 FORTH DEFINITIONS
  6 DECIMAL
  7 
  8 
  9 
 10 
 11 
 12 
 13 
 14 
 15 


Scr# 145 
  0 ." Z80 far struct "
  1 : THEN' HERE SWAP ! ;
  2 : HOLDPLACE' HERE 0 AA, ;
  3 : IF' JPF Z| HOLDPLACE' ;
  4 : ELSE' JP HOLDPLACE
  5         SWAP THEN' ;
  6 : BEGIN' HERE ;
  7 : UNTIL' IF' DROP THEN' ;
  8 : WHILE' IF' ;
  9 : REPEAT' ELSE' DROP THEN' ;
 10 DECIMAL
 11 FORTH DEFINITIONS
 12 
 13 
 14 
 15 


Scr# 146 
  0 ( TESTING )
  1 : T?
  2  TALLY-BY ?
  3  TALLY-BI ?
  4  TALLY-BA ?
  5 ;
  6 : H?
  7  HEX
  8  HERE 8 - DUMP
  9 ;
 10 
 11 
 12 
 13 
 14 
 15 


Scr# 147 
  0 ( BANK! TEST )
  1 HEX
  2 \ BANKM : 5B5C
  3 : ?BANK BASE @
  4   5B5C C@ 2 BASE ! .
  5   BASE ! ;
  6 : TEST
  7   BANK!
  8   C000 @ U.
  9   10 BANK!
 10 ;
 11 
 12 
 13 
 14 
 15 


Scr# 148 
  0 ( 128K Bank switch )
  1 \ between 0 and 7
  2 \ set bank n at C000
  3 CODE BANK! ( n -- )
  4  LDAR
  5  DI
  6  EXAFAF
  7  LD   D'|   B|
  8  LD   E'|   C|
  9  POP  BC|
 10  LDX  HL|  HEX  5B5C NN,
 11  LD   A'| (HL)|
 12  ANDN HEX  F8  N,
 13  ORA   C|
 14  LDX  BC|  HEX  7FFD NN,
 15 -->


Scr# 149 
  0 ( 128K Bank switch )
  1  OUT(C) A'|
  2  LD  (HL)'|   A|
  3  LD     B'|   D|
  4  LD     C'|   E|
  5  EXAFAF
  6  JPF    PO|  HERE 3 + A,
  7  EI
  8  NEXT
  9 C;
 10 \
 11 HEX
 12 : BANK@
 13  5B5C @ 7 AND
 14 ;
 15 


Scr# 150 
  0 ( TEST )
  1 CODE TEST
  2  RLCA RRCA RLA RRA
  3  DAA CPL SCF CCF
  4  NOP EXAFAF EX(SP)HL EXDEHL
  5  DI EI HALT RET EXX
  6  JPHL LDSPHL
  7  RST 00| RST 38|
  8  ADDA B| ADCA C| SUBA D|
  9  SBCA E| ANDA H| XORA L|
 10  ORA (HL)| CPA A|
 11  LD(X)A BC| LDA(X) DE|
 12  INCX HL| DECX SP|
 13  ADDHL BC| ADDHL SP|
 14 C;
 15 -->


Scr# 151 
  0 ( TEST1 )
  1 CODE TEST1
  2  LDX  BC| 1234 NN,
  3  LDX  SP| 5678 NN,
  4  PUSH AF| POP HL|
  5  OUTA 254 P, INA 254 P,
  6  ADDN 1 N, ADCN 2 N,
  7  SUBN 3 N, SBCN 4 N,
  8  ANDN 5 N, XORN 6 N,
  9  ORN  7 N, CPN  8 N,
 10  LD()HL 1234 AA,
 11  LDHL() 1234 AA,
 12  LD()A  1234 AA,
 13  LDA()  1234 AA,
 14 C;
 15 -->


Scr# 152 
  0 ( TEST2 )
  1 CODE TEST2
  2  JP 1234 AA, CALL 1234 AA,
  3  INC B'| DEC A'|
  4  LD D'| E|  LD (HL)'| A|
  5  LDN B'| 1 N, LDN A'| 8 N,
  6  JPF Z| 1234 AA,
  7  CALLF M| 1234 AA,
  8  RETF PE|
  9  DJNZ -10 D, JR +10 D,
 10  JRF NZ'| +10 D,
 11  JRF CY'| -10 D,
 12  SBCHL DE| ADCHL SP|
 13  LDX() BC| 1234 AA,
 14  LD()X SP| 1234 AA,
 15 C; -->


Scr# 153 
  0 ( TEST3 )
  1 CODE TEST3
  2  IN(C) D'|  OUT(C) E'|
  3  NEG RETN IM0 LDIA RETI LDRA
  4  IM1 LDAI IM2 LDAR RRD RLD
  5  LDI   CPI   INI   OUTI
  6  LDD   CPD   IND   OUTD
  7  LDIR  CPIR  INIR  OTIR
  8  LDDR  CPDR  INDR  OTDR
  9  RLC B| RRC C| RL D| RR E|
 10  SLA H| SRA L| SRL (HL)|
 11  BIT 2| D|  BIT 3| E|
 12  RES 4| H|  RES 5| L|
 13  SET 6| (HL)| SET 7| A|
 14 C;
 15 ;S


Scr# 154 
  0 ( TEST IF, THEN, )
  1 CODE TEST4
  2 BEGIN,
  3 NOP NOP NOP
  4 END,
  5 NEXT
  6 C;
  7 
  8 
  9 
 10 
 11 
 12 
 13 
 14 
 15 


Scr# 155 
  0 \ TEST
  1 CODE TEST5
  2 INCX IX|  DECX IY|
  3 PUSH IX|  POP  IY|
  4 EX(SP)IX  JPIY
  5 LDSPIX    LDSPIY
  6 ADDIX BC| ADDIX DE|
  7 ADDIX IX| ADDIX SP|
  8 ADDIY BC| ADDIY DE|
  9 ADDIY IY| ADDIY SP|
 10 LD()IX 4 AA, LDIX() 3 AA,
 11 LD()IY 5 AA, LDIY() 6 AA,
 12 LDX IX| 7 NN,
 13 LDX IY| 8 NN,
 14 C;
 15 


Scr# 156 
  0 \ TEST6
  1 CODE TEST6
  2  ADCA (HL)|
  3  ADCA (IY+ 9 )|
  4  INC (HL)'|
  5  INC (IY'+ 9 )|
  6  LDN (HL)'|      5 N,
  7  LDN (IY'+ 9 )|  5 N,
  8  SRA  (HL)|
  9  SRA (IY+  9 )|
 10  SET 0| (HL)|
 11  SET 0| (IY+ 9 )|
 12  LDIX() 1234 AA,
 13 C;
 14 ;S
 15 


Scr# 157 
  0 \ TEST7
  1 CODE TEST7
  2     LDX HL| 0 NN,
  3     BIT 5| (IY+ 1 )|
  4     IF, INC L'| THEN,
  5 PSH1 C;
  6 \
  7 : KEYIN
  8   BEGIN
  9   TEST7
 10   ?ESCAPE
 11   UNTIL ;
 12 
 13 
 14 
 15 


Scr# 158 
  0 \ TEST Z80N
  1 HEX CODE TEST8
  2  TESTN FF N,
  3  SWAPNIB MIRRORA
  4  LDIX LDDX LDIRX LDDRX
  5  LDWS LDPIRX
  6  OUTINB JP(C)
  7  PIXELDN PIXELAD SETAE
  8  BSLADE,B BSRADE,B BSRLDE,B
  9  BSRFDE,B BRLCDE,B
 10  MUL
 11  ADDHL,A ADDDE,A ADDBC,A
 12  ADDBC, 07654 NN,
 13  NEXTREGA 3 P,
 14  NEXTREG  3 P, 4 N,
 15  PUSHN 07654 LH,  NEXT C;


Scr# 159 
  0 \ TEST Z80N
  1 HEX CODE TEST9
  2  DECIMAL
  3  NEXTREG 87 P, 1 N,
  4  NEXTREGA 87 P,
  5 NEXT C;
  6 
  7 
  8 
  9 
 10 
 11 
 12 
 13 
 14 
 15 


Scr# 160 
  0 .( Z80N Next extensions )
  1 ASSEMBLER DEFINITIONS HEX
  2 : <, 100 /MOD C, C, ;
  3 TOOLS-ASM
  4 0 1 0 4000 ' <, COMMAER LH,
  5 \
  6 00 0900 00 91 EDPI NEXTREG
  7 \ NEXTREG reg P, n N,
  8 00 0100 00 92 EDPI NEXTREGA
  9 \  NEXTREGA r P,
 10 00 4000 00 8A EDPI PUSHN
 11 \   PUSHN nn LH,
 12 00 0800 00 27 EDPI TESTN
 13 \  TESTN n N,
 14 -->
 15 


Scr# 161 
  0 ( Z80N Next extension )
  1 \
  2 00 00 00 T!
  3 01 23 2 EDFAMILY,
  4  SWAPNIB MIRRORA
  5 08 A4 4 EDFAMILY,
  6  LDIX LDDX LDIRX LDDRX
  7 \
  8 12 A5 2 EDFAMILY,
  9  LDWS LDPIRX
 10 08 90 2 EDFAMILY,
 11  OUTINB JP(C)
 12 01 93 3 EDFAMILY,
 13  PIXELDN PIXELAD SETAE
 14 -->
 15 


Scr# 162 
  0 ( Z80N Next extension )
  1 01 28 5 EDFAMILY,
  2  BSLADE,B BSRADE,B BSRLDE,B
  3  BSRFDE,B BRLCDE,B
  4 01 30 4 EDFAMILY,
  5  MUL
  6  ADDHL,A ADDDE,A ADDBC,A
  7 00 0200 00 T!
  8 01 34 3 EDFAMILY,
  9  ADDHL, ADDDE, ADDBC,
 10 \ ADDBC, nn NN,
 11 \
 12 FORTH DEFINITIONS DECIMAL
 13 \
 14  DP @ LP @ DP !  LP !
 15 \


Scr# 163 
  0 
  1 
  2 
  3 
  4 
  5 
  6 
  7 
  8 
  9 
 10 
 11 
 12 
 13 
 14 
 15 


Scr# 164 
  0 
  1 
  2 
  3 
  4 
  5 
  6 
  7 
  8 
  9 
 10 
 11 
 12 
 13 
 14 
 15 


Scr# 165 
  0 
  1 
  2 
  3 
  4 
  5 
  6 
  7 
  8 
  9 
 10 
 11 
 12 
 13 
 14 
 15 


Scr# 166 
  0 ( White noise Egghead 3 )
  1 CODE WHITE-NOISE
  2  DI  PUSH BC|
  3 HERE CALL HERE AA,
  4  EI  POP  BC|  NEXT
  5 HERE SWAP 1+ !
  6 HERE LDN  E'|  250  N,
  7      LDX  HL|    0 NN,
  8 HERE PUSH DE|
  9      LDN  B'|   32  N,
 10 HERE PUSH BC|
 11      LD   A'| (HL)|
 12      INCX HL|
 13      ANDN 248 N,
 14      OUTA 254 P,
 15      LD   A'|   E|  -->


Scr# 167 
  0 ( White noise Egghead 3 )
  1      CPL
  2 HERE DEC  A'|
  3      JRF NZ'| BACK,
  4      POP  BC|
  5      DJNZ     BACK,
  6      POP  DE|
  7      LD   A'|    E|
  8      SUBN 24 N,
  9      CPN  30 N,
 10      RETF  Z|
 11      RETF CY|
 12      LD   E'|    A|
 13 -->
 14 
 15 


Scr# 168 
  0 ( White noise Egghead 3 )
  1      CPL
  2 \
  3 HERE LDN  B'| 40 N,
  4 HERE DJNZ BACK,
  5      DEC  A'|
  6      JRF NZ'| BACK,
  7      JR       BACK,
  8 C;
  9 
 10 
 11 
 12 
 13 
 14 
 15 


Scr# 169 
  0 ( Checksum of a RAM chunk )
  1 CODE CHECKSUM ( a n -- n2 )
  2  POP    DE|
  3  POP    HL|
  4  XORA    A|
  5  INC    D'|
  6 HERE DUP
  7  XORA (HL)|
  8  INCX   HL|
  9  DEC    E'|
 10  JRF   NZ'|  BACK,
 11  DEC    D'|
 12  JRF   NZ'|  BACK,
 13  LD     E'|  A|
 14  PUSH  DE|
 15  NEXT  C;


Scr# 170 
  0 \ BURP
  1 \ Example
  2 : BURP
  3 [ HEX ] 7999 6000
  4 DO
  5  I HEX . I DECIMAL . CR
  6  ?TERMINAL IF QUIT THEN
  7 [ HEX ] 100
  8 +LOOP
  9 ;
 10 
 11 
 12 
 13 
 14 
 15 


Scr# 171 
  0 ( Dump many pages )
  1 \ Dumps from a1 to a2
  2 DECIMAL
  3 : MDUMP ( a1 a2 -- )
  4  SWAP DO
  5   I DUMP
  6  64 +LOOP
  7 ;
  8 
  9 
 10 
 11 
 12 
 13 
 14 
 15 


Scr# 172 
  0 
  1 
  2 
  3 
  4 
  5 
  6 
  7 
  8 
  9 
 10 
 11 
 12 
 13 
 14 
 15 


Scr# 173 
  0 
  1 
  2 
  3 
  4 
  5 
  6 
  7 
  8 
  9 
 10 
 11 
 12 
 13 
 14 
 15 


Scr# 174 
  0 
  1 
  2 
  3 
  4 
  5 
  6 
  7 
  8 
  9 
 10 
 11 
 12 
 13 
 14 
 15 


Scr# 175 
  0 
  1 
  2 
  3 
  4 
  5 
  6 
  7 
  8 
  9 
 10 
 11 
 12 
 13 
 14 
 15 


Scr# 176 
  0 
  1 
  2 
  3 
  4 
  5 
  6 
  7 
  8 
  9 
 10 
 11 
 12 
 13 
 14 
 15 


Scr# 177 
  0 
  1 
  2 
  3 
  4 
  5 
  6 
  7 
  8 
  9 
 10 
 11 
 12 
 13 
 14 
 15 


Scr# 178 
  0 
  1 
  2 
  3 
  4 
  5 
  6 
  7 
  8 
  9 
 10 
 11 
 12 
 13 
 14 
 15 


Scr# 179 
  0 ( CHECK NULL               )
  1 : J RP@ 6 + @ ;
  2 : CHECKNULL
  3 #SEC 1 DO
  4 I .
  5 I BLOCK @ 2020 = IF
  6 ." WRONG " ENDIF
  7 CR
  8 ?ESCAPE IF QUIT ENDIF
  9 LOOP
 10 ;
 11 
 12 
 13 
 14 
 15 


Scr# 180 
  0 ( Fibonacci )
  1 ( n -- d )
  2 \ n must be between 0 and 46
  3 : FIBO ( n -- d )
  4  0. ROT
  5  ?DUP IF
  6   1- 1. ROT
  7   0 DO
  8    2SWAP 2OVER
  9    D+
 10   LOOP
 11   2SWAP 2DROP
 12  ENDIF
 13 ;
 14 
 15 


Scr# 181 
  0 ( DSQRT )
  1 \ Extract square root of d
  2 \ between 0 and 268435455
  3 : DSQRT ( d -- r q )
  4  2DUP D+ 2DUP D+
  5  0 [ HEX ] 8000
  6  0E 0 DO
  7   SWAP DROP
  8   >R 2DUP R UM/MOD
  9   R> + 1 RSHIFT
 10  LOOP 1 RSHIFT
 11  >R DROP 2DROP R>
 12 ;
 13 
 14 
 15 


Scr# 182 
  0 ( Primality Test )
  1 : ?PRIME ( d -- f )
  2  2DUP DSQRT 1+
  3  2 DO
  4   2DUP I UM/MOD DROP
  5   0= IF
  6    2DROP 0. LEAVE
  7   THEN
  8  LOOP
  9  OR 0= 0= ;
 10 
 11 
 12 
 13 
 14 
 15 


Scr# 183 
  0 ( TEST )
  1 HEX
  2 : CLS
  3  0E EMITC
  4  16 EMITC 0 EMITC 0 EMITC
  5 ;
  6 
  7 
  8 
  9 
 10 
 11 
 12 
 13 
 14 
 15 


Scr# 184 
  0 
  1 
  2 
  3 
  4 
  5 
  6 
  7 
  8 
  9 
 10 
 11 
 12 
 13 
 14 
 15 


Scr# 185 
  0 
  1 
  2 
  3 
  4 
  5 
  6 
  7 
  8 
  9 
 10 
 11 
 12 
 13 
 14 
 15 


Scr# 186 
  0 
  1 
  2 
  3 
  4 
  5 
  6 
  7 
  8 
  9 
 10 
 11 
 12 
 13 
 14 
 15 


Scr# 187 
  0 
  1 
  2 
  3 
  4 
  5 
  6 
  7 
  8 
  9 
 10 
 11 
 12 
 13 
 14 
 15 


Scr# 188 
  0 
  1 
  2 
  3 
  4 
  5 
  6 
  7 
  8 
  9 
 10 
 11 
 12 
 13 
 14 
 15 


Scr# 189 
  0 
  1 
  2 
  3 
  4 
  5 
  6 
  7 
  8 
  9 
 10 
 11 
 12 
 13 
 14 
 15 


Scr# 190 
  0 
  1 
  2 
  3 
  4 
  5 
  6 
  7 
  8 
  9 
 10 
 11 
 12 
 13 
 14 
 15 


Scr# 191 
  0 
  1 
  2 
  3 
  4 
  5 
  6 
  7 
  8 
  9 
 10 
 11 
 12 
 13 
 14 
 15 


Scr# 192 
  0 
  1 
  2 
  3 
  4 
  5 
  6 
  7 
  8 
  9 
 10 
 11 
 12 
 13 
 14 
 15 


Scr# 193 
  0 
  1 
  2 
  3 
  4 
  5 
  6 
  7 
  8 
  9 
 10 
 11 
 12 
 13 
 14 
 15 


Scr# 194 
  0 
  1 
  2 
  3 
  4 
  5 
  6 
  7 
  8 
  9 
 10 
 11 
 12 
 13 
 14 
 15 


Scr# 195 
  0 
  1 
  2 
  3 
  4 
  5 
  6 
  7 
  8 
  9 
 10 
 11 
 12 
 13 
 14 
 15 


Scr# 196 
  0 
  1 
  2 
  3 
  4 
  5 
  6 
  7 
  8 
  9 
 10 
 11 
 12 
 13 
 14 
 15 


Scr# 197 
  0 
  1 
  2 
  3 
  4 
  5 
  6 
  7 
  8 
  9 
 10 
 11 
 12 
 13 
 14 
 15 


Scr# 198 
  0 
  1 
  2 
  3 
  4 
  5 
  6 
  7 
  8 
  9 
 10 
 11 
 12 
 13 
 14 
 15 


Scr# 199 
  0 ( MARKER )
  1 : MARKER ( -- cccc )
  2   <BUILDS
  3    VOC-LINK @ , CURRENT @ , CONTEXT @ ,
  4    LATEST           , \ value for DP
  5    LATEST PFA LFA @ , \ value for LATEST
  6   DOES>
  7    DUP @ VOC-LINK !   CELL+
  8    DUP @ CURRENT  !   CELL+
  9    DUP @ CONTEXT  !   CELL+
 10    DUP @ DP       !   CELL+  @ CURRENT @ !
 11 ; IMMEDIATE
 12 HERE LATEST HEX .S
 13 MARKER TEST
 14 SEE TEST
 15 


Scr# 200 
  0 ( .RESET & CPU SPEED )
  1 HEX
  2 : SPEED!
  3      7 243B P!
  4  3 AND 253B P!
  5 ;
  6 \
  7 ;S
  8 \
  9 : .RESET
 10  2 253B P!
 11  2 243B P!
 12 ;
 13 
 14 
 15 


Scr# 201 
  0 ( DAA )
  1 HEX
  2 CODE TEST-DAA
  3  POP HL|
  4  LD A'| L|
  5  CPN 10 N,
  6  SBCN 69 N,
  7  DAA
  8  LD L'| A|
  9  PSH1
 10  C;
 11 
 12 
 13 
 14 
 15 


Scr# 202 
  0 ( DAA )
  1 HEX
  2 CODE T
  3  POP HL|
  4  CPL CPL
  5  LD A'| L|
  6  DAA
  7  LD L'| A|
  8  PSH1
  9  C;
 10 
 11 
 12 
 13 
 14 
 15 


Scr# 203 
  0 ( U* )
  1 CODE U*
  2  POP DE|
  3  POP HL|
  4  PUSH BC|
  5 \
  6  LD  C'|  L|
  7  LD  B'|  H|
  8  LDX HL| 0 NN,
  9  LDN A'| DECIMAL 16 N,
 10  HERE \ BEGIN,
 11   ADDHL HL|
 12   RL E|
 13   RL D|
 14   JRF NC'| HOLDPLACE
 15 -->


Scr# 204 
  0 ( U* )
  1    ADDHL BC|
  2    JRF NC'| HOLDPLACE
  3     INCX DE|
  4    HERE DISP, \ THEN,
  5   HERE DISP, \ THEN,
  6   DEC A'|
  7  JRF NZ'| HOLDPLACE
  8  SWAP DISP, \ -UNTIL,
  9  EXDEHL
 10 \
 11  POP BC|
 12  PSH2
 13  C;
 14 
 15 


Scr# 205 
  0 ( U/   dn n -- r dq )
  1 CODE U/
  2  POP  DE| \ Divisor
  3  POP  HL| \ High
  4  POP  IX| \ Low
  5  PUSH BC|
  6  LD   A'|    H|
  7  LD   C'|    L|
  8  LDX  HL|    0  NN,
  9  LDN  B'| DECIMAL 32 N,
 10  HERE DUP \ BEGIN,
 11   ADDIX IX|
 12   RL     C|
 13   RLA
 14   ADCHL HL|
 15 -->


Scr# 206 
  0 ( U/ )
  1   JRF CY'| HOLDPLACE
  2    SBCHL DE|
  3    JRF NC'| HOLDPLACE
  4     ADDHL DE|
  5     ROT DJNZ HOLDPLACE
  6     SWAP DISP,
  7    SWAP ELSE,
  8     ORA A|  SBCHL DE|
  9    SWAP THEN,
 10    INC IX|
 11   THEN,
 12  DNJZ BACK,
 13 -->
 14 
 15 


Scr# 207 
  0 ( U/ )
  1  LD   D'|  A|
  2  LD   E'|  C|
  3  POP  BC|
  4  PUSH HL|
  5  PUSH IX|
  6  PUSH DE|
  7  NEXT
  8 C;
  9 
 10 
 11 
 12 
 13 
 14 
 15 


Scr# 208 
  0 ( UPPER )
  1 CODE UPPER ( c1 -- c2 )
  2 POP   HL|
  3 LD A'| L|
  4 CPN HEX 61 N,
  5 JRF CY'| HOLDPLACE
  6  CPN HEX 7B N,
  7  JRF NC'| HOLDPLACE
  8   SUBN HEX 20 N,
  9  HERE DISP,
 10 HERE DISP,
 11 LD L'| A|
 12 PSH1
 13 C;
 14 DECIMAL
 15 


Scr# 209 
  0 ( PICK )
  1 CODE PICK ( n -- v-nth )
  2  POP   HL|
  3  ADDHL HL|
  4  ADDHL SP|
  5  LD    A'|  (HL)|
  6  INCX  HL|
  7  LD    H'|  (HL)|
  8  LD    L'|     A|
  9  PSH1
 10 C;
 11 
 12 
 13 
 14 
 15 


Scr# 210 
  0 ( DOS CALL# )
  1 \ DOS# ( bc de hl a -- )
  2 \      ( -- bc de hl f )
  3 CODE DOS#
  4 POP   HL|  \ dos call entry
  5 HERE  LD()HL 0 AA,
  6 LD    H'|   B|
  7 LD    L'|   C|
  8 POP   BC|  \ bc argument
  9 POP   DE|  \ de argument
 10 EX(SP)HL   \ hl argument
 11 LD    A'|   L|
 12 HERE  CALL HERE AA,
 13  1+ SWAP 1+ ! \ patch
 14 -->
 15 


Scr# 211 
  0 ( DOS CALL# )
  1 EX(SP)HL   \ hl argument
  2 PUSH  DE|  \ de argument
  3 PUSH  BC|  \ bc argument
  4 LD    C'|   L|
  5 LD    B'|   H|
  6 LDX   HL| 0 NN,
  7 JRF   NC'| HOLDPLACE
  8  LD   L'|   A|
  9 HERE DISP,
 10 PSH1
 11 C;
 12 
 13 
 14 
 15 


Scr# 212 
  0 ( KEY new ) HEX
  1 CODE KEY
  2 PUSH  BC|  PUSH IX|
  3 LD()X SP| 2C +ORIGIN AA,
  4 LDX   SP| -2 +ORIGIN NN,
  5 LDN   A'| 02 N,
  6 CALL  1601 AA,
  7 RES   5| (IY+ 1 )|
  8 HERE \ BEGIN,
  9  EI HALT
 10  LDN   A'| 8F N,
 11  BIT   5| (IY+ 3E )|
 12  JRF   Z'| HOLDPLACE \ IF,
 13   XORN  D0 N,
 14  HERE DISP, \ THEN,
 15 -->


Scr# 213 
  0 ( KEY new ) HEX
  1  RST   10|
  2  LDN   A'| 08 N,
  3  RST   10|
  4  BIT    5| (IY+ 1 )|
  5 JRF Z'| HOLDPLACE SWAP DISP,
  6 LDN A'| 20 N, RST 10|
  7 LDN A'| 08 N, RST 10|
  8 LDA()  5C08 AA,
  9 LD    L'|  A|
 10 LDN   H'|  0 N,
 11 LDX() SP| 2C +ORIGIN AA,
 12 POP  IX|
 13 POP   BC|
 14 PSH1 C;
 15 


Scr# 214 
  0 ( NEW UM* using MUL new OP-code )
  1 CASEOFF
  2 CODE U* ( n1 n2 -- d ) \ unsigned multiply
  3  pop de|  pop hl|  push bc|
  4  ld   c'|   e|
  5  ld   b'|   d|
  6  ld   d'|   l|
  7  mul
  8  ld   a'|   e|
  9  exafaf
 10  ld   a'|   h|
 11  ld   e'|   c|
 12  ld   c'|   d|
 13 -->
 14 
 15 


Scr# 215 
  0 ( NEW UM* using MUL new OP-code )
  1  ld   d'|   h|
  2  ld   h'|   b|
  3  mul
  4  exdehl
  5  mul
  6  addhl de|
  7  ld   e'|   c|
  8  ldn  d'|   00 n,
  9  exafaf  \ saves carry flag
 10  ld   c'|   a|
 11  addhl de|
 12  exafaf \ restore carry flag
 13  ld   e'|   a|
 14  ld   d'|   b|
 15 -->


Scr# 216 
  0 ( NEW UM* using MUL new OP-code )
  1  mul
  2  ldn  a'|  00  n,
  3  adca  d|
  4  ld   d'|   a|
  5  ld   b'|   l|
  6  ld   l'|   h|
  7  ldn  h'|  00  n,
  8  addhl de|
  9  ld   d'|   b|
 10  ld   e'|   c|
 11  pop  bc|
 12  PSH2
 13 c;
 14 
 15 


Scr# 217 
  0 ( TEST )
  1 HEX
  2 : TEST
  3  FFFF 0 DO
  4   I I 1- U*
  5   I I 1- UM*
  6   DMINUS D+ AND IF I . CR QUIT THEN
  7  LOOP
  8 ;
  9 DECIMAL
 10 
 11 
 12 
 13 
 14 
 15 


Scr# 218 
  0 ( NEW UM* using MUL new OP-code )
  1 code u* ( n1 n2 -- d )
  2  pop de|  pop hl|  push bc|
  3  ld   b'|   l|
  4  ld   c'|   e|
  5  ld   e'|   l|
  6  ld   l'|   d|
  7  push hl|
  8  ld   l'|   c|
  9  mul
 10  exdehl
 11  mul
 12  xora  a|
 13  addhl de|
 14  adca  a|
 15 -->


Scr# 219 
  0 ( NEW UM* using MUL new OP-code )
  1  ld   e'|   c|
  2  ld   d'|   b|
  3  mul
  4  ld   b'|   a|
  5  ld   c'|   h|
  6  ld   a'|   d|
  7  adda  l|
  8  ld   h'|   a|
  9  ld   l'|   e|
 10  pop  de|
 11  mul
 12  exdehl
 13  adchl bc|
 14  pop bc|  psh2  c;
 15 


Scr# 220 
  0 ( MOVE SP )
  1 ." Moving utility." CR
  2 \ Use: HEX D900 MOVE-SP
  3 \ or   HEX F840 MOVE-SP
  4 HEX
  5 : MOVE-SP ( a -- )
  6   DUP 16 +ORIGIN !
  7   DUP 12 +ORIGIN !
  8   DUP        S0  !
  9   DUP        TIB !
 10   S0 @ SP!
 11 ;
 12 DECIMAL
 13 -->
 14 
 15 


Scr# 221 
  0 ( MOVE RP )
  1 \ Use: HEX D9A0 MOVE-RP
  2 \ or   HEX F8E0 MOVE-RP
  3 HEX
  4 : MOVE-RP ( a -- )
  5   DUP R0 @ 80 -
  6   SWAP 80 - C0 CMOVE
  7   DUP 14 +ORIGIN !
  8   DUP 2E +ORIGIN !
  9   DUP         R0 !
 10 ;
 11 \
 12 DECIMAL
 13 -->
 14 
 15 


Scr# 222 
  0 ( MOVE LIMIT )
  1 \ Use: HEX E000 MOVE-LIMIT
  2 \ or   HEX FF58 MOVE-LIMIT
  3 HEX
  4 : MOVE-LIMIT ( a -- )
  5   DUP LIMIT !
  6   DUP 24 +ORIGIN !
  7   204 #BUFF * - DUP FIRST !
  8   DUP USE !
  9   DUP PREV !
 10   22 +ORIGIN !
 11 ;
 12 DECIMAL
 13 -->
 14 7 TO #BUFF
 15 


Scr# 223 
  0 ( UP AND DOWN )
  1 HEX
  2 : UP ( -- ) \ Move SP, RP, User's, Buffers to high memory
  3   FF58 MOVE-LIMIT
  4   F0E0 MOVE-RP
  5   F040 MOVE-SP
  6   EMPTY-BUFFERS ;
  7 \
  8 : DOWN ( -- ) \ Move SP, RP, User's, Buffers to low memory
  9   D0E8 MOVE-SP
 10   D188 MOVE-RP
 11   E000 MOVE-LIMIT
 12   EMPTY-BUFFERS ;
 13 DECIMAL
 14 
 15 


Scr# 224 
  0 ( BANK! TEST )
  1 HEX
  2 \ BANKM : 5B5C
  3 : ?BANK BASE @
  4   5B5C C@ 2 BASE ! .
  5   BASE ! ;
  6 : TEST
  7   BANK!
  8   C000 @ U.
  9   10 BANK!
 10 ;
 11 
 12 
 13 
 14 
 15 


Scr# 225 
  0 ( ?DO LOOP )
  1 : BACK-
  2  BACK
  3  SP@ CSP @ -
  4  IF 2+ [COMPILE] THEN
  5  ENDIF
  6  ?CSP CSP !
  7 ;
  8 -->
  9 
 10 
 11 
 12 
 13 
 14 
 15 


Scr# 226 
  0 ( ?DO LOOP )
  1 : ?DO
  2  COMPILE (?DO)
  3  CSP @ !CSP
  4  HERE 0 , 0
  5  HERE 3
  6 ; IMMEDIATE
  7 \
  8 : DO
  9  COMPILE (DO)
 10  CSP @ !CSP
 11  HERE 3
 12 ; IMMEDIATE
 13 -->
 14 
 15 


Scr# 227 
  0 ( ?DO LOOP )
  1 : LOOP
  2  3 ?PAIRS
  3  COMPILE (LOOP)
  4  BACK-
  5 ; IMMEDIATE
  6 \
  7 : +LOOP
  8  3 ?PAIRS
  9  COMPILE (+LOOP)
 10  BACK-
 11 ; IMMEDIATE
 12 
 13 
 14 
 15 


Scr# 228 
  0 ( ?DO LOOP )
  1 : TYPE
  2  OVER + SWAP
  3  ?DO
  4   I C@ EMIT
  5  LOOP
  6 ;
  7 : TEST
  8  0 0
  9  ?DO I . CR LOOP
 10 ;
 11 
 12 
 13 
 14 
 15 


Scr# 229 
  0 ( POSTPONE )
  1 DECIMAL
  2 : POSTPONE
  3  ?COMP -FIND \ xt b f
  4  0= 0 ?ERROR
  5  192 < IF
  6   COMPILE COMPILE
  7  ENDIF
  8  ,
  9 ; IMMEDIATE
 10 ;S
 11 \ test
 12 : TIF
 13  POSTPONE 0BRANCH HERE 0 ,
 14  2 ; IMMEDIATE
 15 


Scr# 230 
  0 
  1 
  2 
  3 
  4 
  5 
  6 
  7 
  8 
  9 
 10 
 11 
 12 
 13 
 14 
 15 


Scr# 231 
  0 
  1 
  2 
  3 
  4 
  5 
  6 
  7 
  8 
  9 
 10 
 11 
 12 
 13 
 14 
 15 


Scr# 232 
  0 
  1 
  2 
  3 
  4 
  5 
  6 
  7 
  8 
  9 
 10 
 11 
 12 
 13 
 14 
 15 


Scr# 233 
  0 
  1 
  2 
  3 
  4 
  5 
  6 
  7 
  8 
  9 
 10 
 11 
 12 
 13 
 14 
 15 


Scr# 234 
  0 
  1 
  2 
  3 
  4 
  5 
  6 
  7 
  8 
  9 
 10 
 11 
 12 
 13 
 14 
 15 


Scr# 235 
  0 
  1 
  2 
  3 
  4 
  5 
  6 
  7 
  8 
  9 
 10 
 11 
 12 
 13 
 14 
 15 


Scr# 236 
  0 
  1 
  2 
  3 
  4 
  5 
  6 
  7 
  8 
  9 
 10 
 11 
 12 
 13 
 14 
 15 


Scr# 237 
  0 
  1 
  2 
  3 
  4 
  5 
  6 
  7 
  8 
  9 
 10 
 11 
 12 
 13 
 14 
 15 


Scr# 238 
  0 
  1 
  2 
  3 
  4 
  5 
  6 
  7 
  8 
  9 
 10 
 11 
 12 
 13 
 14 
 15 


Scr# 239 
  0 ( Rainbow effects )
  1 HEX  CODE  SYNC
  2  76 C,
  3  DD C, E9 C, ( NEXT ) SMUDGE
  4 : RAINBOW
  5 BEGIN
  6  SYNC
  7  40 0 DO
  8   8 0 DO
  9    I FFFE P!
 10   LOOP
 11  LOOP
 12  ?TERMINAL
 13 UNTIL
 14 ;
 15 DECIMAL


Scr# 240 
  0 \ LARGE LETTER F
  1 : STAR   42 EMIT ;
  2 : STARS   0 DO STAR LOOP ;
  3 : MARGIN CR 15 SPACES ;
  4 : BLIP   MARGIN STAR ;
  5 : BAR    MARGIN 5 STARS ;
  6 : F      BAR BLIP BAR
  7          BLIP BLIP CR ;
  8 F
  9 
 10 
 11 
 12 
 13 
 14 
 15 


Scr# 241 
  0 ( Square example )
  1 0 variable board 7 allot
  2 : square ( square# -- addr ) board + ;
  3 : clear  board 9 erase ; clear
  4 : bar    ." | " ;
  5 : dashes cr 9 0 do [char] - emit loop cr ;
  6 : .box ( square# -- )
  7   square c@  dup 0= if 2 spaces
  8     else dup 1 = if ." X " else ." O "
  9     then then drop ;
 10 : display ( -- )
 11   cr 9 0 do i if i 3 mod 0 = if dashes else bar then then
 12   i .box loop cr quit ;
 13 : play  1- 0 max 8 min square c! ;
 14 : x! ( square# -- )  1 swap play display ;
 15 : o! ( square# -- ) -1 swap play display ;


Scr# 242 
  0 
  1 
  2 
  3 
  4 
  5 
  6 
  7 
  8 
  9 
 10 
 11 
 12 
 13 
 14 
 15 


Scr# 243 
  0 
  1 
  2 
  3 
  4 
  5 
  6 
  7 
  8 
  9 
 10 
 11 
 12 
 13 
 14 
 15 


Scr# 244 
  0 
  1 
  2 
  3 
  4 
  5 
  6 
  7 
  8 
  9 
 10 
 11 
 12 
 13 
 14 
 15 


Scr# 245 
  0 
  1 
  2 
  3 
  4 
  5 
  6 
  7 
  8 
  9 
 10 
 11 
 12 
 13 
 14 
 15 


Scr# 246 
  0 
  1 
  2 
  3 
  4 
  5 
  6 
  7 
  8 
  9 
 10 
 11 
 12 
 13 
 14 
 15 


Scr# 247 
  0 
  1 
  2 
  3 
  4 
  5 
  6 
  7 
  8 
  9 
 10 
 11 
 12 
 13 
 14 
 15 


Scr# 248 
  0 
  1 
  2 
  3 
  4 
  5 
  6 
  7 
  8 
  9 
 10 
 11 
 12 
 13 
 14 
 15 


Scr# 249 
  0 
  1 
  2 
  3 
  4 
  5 
  6 
  7 
  8 
  9 
 10 
 11 
 12 
 13 
 14 
 15 


Scr# 250 
  0 \ BLOCK-SHIFT
  1 \ change line 3
  2 : BLOCK-SHIFT
  3   99 118
  4  DO
  5  I . ." TO " I 1+ . CR
  6  I I 1+ BCOPY
  7  ?TERMINAL IF LEAVE THEN
  8  -1
  9  +LOOP
 10 ;
 11 
 12 
 13 
 14 
 15 


Scr# 251 
  0 ( block move reorder )
  1 \ Utility used while
  2 \ reordering all screens
  3 DECIMAL  3 LOAD
  4 DECIMAL 41 LOAD
  5 : BLOCK-SHIFT
  6  CLS
  7  350 1 DO
  8   0. AT. I . SPACE
  9   I I 10000 +
 10   BCOPY
 11   ?TERMINAL IF LEAVE THEN
 12  LOOP
 13 ;
 14 
 15 


Scr# 252 
  0 \ Print all blocsks to #13
  1 : >OUTPUT 13
  2  DUP DEVICE ! SELECT ;
  3 : PRINT-ALL-BLOCKS
  4  >OUTPUT
  5  ." This list is produced "
  6  ." via Scr# 252 " CR CR
  7  1001 1 DO
  8   VIDEO I 5 .R
  9   I BLOCK >OUTPUT I LIST CR
 10   VIDEO
 11   5 0 DO 8 EMITC LOOP
 12   ?TERMINAL IF LEAVE THEN
 13  LOOP
 14  VIDEO CR ;
 15 


Scr# 253 
  0 ( INITIALIZE-MMC )
  1 \ this erases blocks from
  2 \ # 302 up
  3 
  4 : INITIALIZE-MMC
  5 #SEC
  6 302
  7 DO I . I BCLEAR
  8 ?TERMINAL IF LEAVE THEN
  9 LOOP
 10 ;
 11 
 12 
 13 
 14 
 15 


Scr# 254 
  0 ( MICRODRIVE CARTRIDGE )
  1 ( LAST BLOCK )
  2 \ At least one block should
  3 \ be unusable due to the
  4 \ ring-junction on the tape
  5 \ so this block shouldn't be
  6 \ available.
  7 \ More: Real cartridges can
  8 \ have up to 85-90 K
  9 \ This means 170-180 blocks.
 10 
 11 
 12 
 13 
 14 
 15 \ TEST


Scr# 255 
  0 
  1 
  2 
  3 
  4 
  5 
  6 
  7 
  8 
  9 
 10 
 11 
 12 
 13 
 14 
 15 


Scr# 256 
  0 
  1 
  2 
  3 
  4 
  5 
  6 
  7 
  8 
  9 
 10 
 11 
 12 
 13 
 14 
 15 


Scr# 257 
  0 
  1 
  2 
  3 
  4 
  5 
  6 
  7 
  8 
  9 
 10 
 11 
 12 
 13 
 14 
 15 


Scr# 258 
  0 
  1 
  2 
  3 
  4 
  5 
  6 
  7 
  8 
  9 
 10 
 11 
 12 
 13 
 14 
 15 


Scr# 259 
  0 
  1 
  2 
  3 
  4 
  5 
  6 
  7 
  8 
  9 
 10 
 11 
 12 
 13 
 14 
 15 


Scr# 260 
  0 
  1 
  2 
  3 
  4 
  5 
  6 
  7 
  8 
  9 
 10 
 11 
 12 
 13 
 14 
 15 


Scr# 261 
  0 
  1 
  2 
  3 
  4 
  5 
  6 
  7 
  8 
  9 
 10 
 11 
 12 
 13 
 14 
 15 


Scr# 262 
  0 
  1 
  2 
  3 
  4 
  5 
  6 
  7 
  8 
  9 
 10 
 11 
 12 
 13 
 14 
 15 


Scr# 263 
  0 
  1 
  2 
  3 
  4 
  5 
  6 
  7 
  8 
  9 
 10 
 11 
 12 
 13 
 14 
 15 


Scr# 264 
  0 
  1 
  2 
  3 
  4 
  5 
  6 
  7 
  8 
  9 
 10 
 11 
 12 
 13 
 14 
 15 


Scr# 265 
  0 
  1 
  2 
  3 
  4 
  5 
  6 
  7 
  8 
  9 
 10 
 11 
 12 
 13 
 14 
 15 


Scr# 266 
  0 
  1 
  2 
  3 
  4 
  5 
  6 
  7 
  8 
  9 
 10 
 11 
 12 
 13 
 14 
 15 


Scr# 267 
  0 
  1 
  2 
  3 
  4 
  5 
  6 
  7 
  8 
  9 
 10 
 11 
 12 
 13 
 14 
 15 


Scr# 268 
  0 
  1 
  2 
  3 
  4 
  5 
  6 
  7 
  8 
  9 
 10 
 11 
 12 
 13 
 14 
 15 


Scr# 269 
  0 
  1 
  2 
  3 
  4 
  5 
  6 
  7 
  8 
  9 
 10 
 11 
 12 
 13 
 14 
 15 


Scr# 270 
  0 
  1 
  2 
  3 
  4 
  5 
  6 
  7 
  8 
  9 
 10 
 11 
 12 
 13 
 14 
 15 


Scr# 271 
  0 
  1 
  2 
  3 
  4 
  5 
  6 
  7 
  8 
  9 
 10 
 11 
 12 
 13 
 14 
 15 


Scr# 272 
  0 
  1 
  2 
  3 
  4 
  5 
  6 
  7 
  8 
  9 
 10 
 11 
 12 
 13 
 14 
 15 


Scr# 273 
  0 
  1 
  2 
  3 
  4 
  5 
  6 
  7 
  8 
  9 
 10 
 11 
 12 
 13 
 14 
 15 


Scr# 274 
  0 
  1 
  2 
  3 
  4 
  5 
  6 
  7 
  8 
  9 
 10 
 11 
 12 
 13 
 14 
 15 


Scr# 275 
  0 
  1 
  2 
  3 
  4 
  5 
  6 
  7 
  8 
  9 
 10 
 11 
 12 
 13 
 14 
 15 


Scr# 276 
  0 
  1 
  2 
  3 
  4 
  5 
  6 
  7 
  8 
  9 
 10 
 11 
 12 
 13 
 14 
 15 


Scr# 277 
  0 
  1 
  2 
  3 
  4 
  5 
  6 
  7 
  8 
  9 
 10 
 11 
 12 
 13 
 14 
 15 


Scr# 278 
  0 
  1 
  2 
  3 
  4 
  5 
  6 
  7 
  8 
  9 
 10 
 11 
 12 
 13 
 14 
 15 


Scr# 279 
  0 
  1 
  2 
  3 
  4 
  5 
  6 
  7 
  8 
  9 
 10 
 11 
 12 
 13 
 14 
 15 


Scr# 280 
  0 
  1 
  2 
  3 
  4 
  5 
  6 
  7 
  8 
  9 
 10 
 11 
 12 
 13 
 14 
 15 


Scr# 281 
  0 
  1 
  2 
  3 
  4 
  5 
  6 
  7 
  8 
  9 
 10 
 11 
 12 
 13 
 14 
 15 


Scr# 282 
  0 
  1 
  2 
  3 
  4 
  5 
  6 
  7 
  8 
  9 
 10 
 11 
 12 
 13 
 14 
 15 


Scr# 283 
  0 
  1 
  2 
  3 
  4 
  5 
  6 
  7 
  8 
  9 
 10 
 11 
 12 
 13 
 14 
 15 


Scr# 284 
  0 
  1 
  2 
  3 
  4 
  5 
  6 
  7 
  8 
  9 
 10 
 11 
 12 
 13 
 14 
 15 


Scr# 285 
  0 
  1 
  2 
  3 
  4 
  5 
  6 
  7 
  8 
  9 
 10 
 11 
 12 
 13 
 14 
 15 


Scr# 286 
  0 
  1 
  2 
  3 
  4 
  5 
  6 
  7 
  8 
  9 
 10 
 11 
 12 
 13 
 14 
 15 


Scr# 287 
  0 ( GREY-SCREEN example )
  1 HEX
  2 CODE GREY-SCREEN
  3  PUSH BC|
  4  LDX  HL|  4000  NN,
  5  LDX  DE|  AA55  NN,
  6  LDX  BC|  000C  NN,
  7 HERE HERE
  8  LD   A'|  (HL)|
  9  XORA  E|
 10  LD (HL)'|    A|
 11  INCX HL|
 12  DJNZ BACK,
 13 -->
 14 
 15 


Scr# 288 
  0 ( GREY-SCREEN example )
  1 HERE
  2  LD   A'|  (HL)|
  3  XORA  D|
  4  LD (HL)'|    A|
  5  INCX HL|
  6  DJNZ BACK,
  7  DEC  C'|
  8  JRF NZ'| BACK,
  9  POP BC|
 10 NEXT C;
 11 DECIMAL
 12 
 13 
 14 
 15 


Scr# 289 
  0 
  1 
  2 
  3 
  4 
  5 
  6 
  7 
  8 
  9 
 10 
 11 
 12 
 13 
 14 
 15 


Scr# 290 
  0 
  1 
  2 
  3 
  4 
  5 
  6 
  7 
  8 
  9 
 10 
 11 
 12 
 13 
 14 
 15 


Scr# 291 
  0 
  1 
  2 
  3 
  4 
  5 
  6 
  7 
  8 
  9 
 10 
 11 
 12 
 13 
 14 
 15 


Scr# 292 
  0 ( GREY-SCREEN example )
  1 HERE
  2  LD   A'|  (HL)|
  3  XORA  D|
  4  LD (HL)'|    A|
  5  INCX HL|
  6  DJNZ BACK,
  7  DEC  C'|
  8  JRF NZ'| BACK,
  9  POP BC|
 10 NEXT C;
 11 DECIMAL
 12 
 13 
 14 
 15 


Scr# 293 
  0 ( MMU7 = 40h )
  1 ( MMU7 = 41h )
  2 ( MMU7 = 42h )
  3 ( MMU7 = 43h )
  4 ( MMU7 = 44h )
  5 
  6 
  7 
  8 
  9 
 10 
 11 
 12 
 13 
 14 
 15 ( DEFAULT = 01h )


Scr# 294 
  0 
  1 
  2 
  3 
  4 
  5 
  6 
  7 
  8 
  9 
 10 
 11 
 12 
 13 
 14 
 15 


Scr# 295 
  0 
  1 
  2 
  3 
  4 
  5 
  6 
  7 
  8 
  9 
 10 
 11 
 12 
 13 
 14 
 15 


Scr# 296 
  0 
  1 
  2 
  3 
  4 
  5 
  6 
  7 
  8 
  9 
 10 
 11 
 12 
 13 
 14 
 15 


Scr# 297 
  0 
  1 
  2 
  3 
  4 
  5 
  6 
  7 
  8 
  9 
 10 
 11 
 12 
 13 
 14 
 15 


Scr# 298 
  0 
  1 
  2 
  3 
  4 
  5 
  6 
  7 
  8 
  9 
 10 
 11 
 12 
 13 
 14 
 15 


Scr# 299 
  0 
  1 
  2 
  3 
  4 
  5 
  6 
  7 
  8 
  9 
 10 
 11 
 12 
 13 
 14 
 15 


Scr# 300 
  0 ( FAR-HL first example )
  1 \ encode address 0000-3FFF to 8K-page #64-#79 and
  2 \ an offset from E000h rounded at 8 bytes
  3 CODE FAR-HL
  4  POP  HL|
  5  LD   A'|  H|
  6  ANDN HEX 0C0 N,
  7  JPF  NZ| (NEXT) 1- AA,
  8  LD   A'|  H|
  9  RRA
 10  ORN  HEX 080 N,
 11  RRA
 12  NEXTREGA DECIMAL 87 P,
 13 -->
 14 
 15 


Scr# 301 
  0 ( FAR-HL first example )
  1  ADDHL HL|
  2  ADDHL HL|
  3  ADDHL HL|
  4  LD   A'|  H|
  5  ORN  HEX 0E0 N,
  6  LD   H'|  A|
  7  PSH1
  8 C;
  9 \
 10 DECIMAL
 11 CODE NEAR-HL
 12  LDN  A'|  1  N,
 13  NEXTREGA 87 P,
 14  NEXT
 15 C;


Scr# 302 
  0 ( MMU7 / default bank )
  1 \
  2 \ reset MMU7 to default 1
  3 \
  4 DECIMAL
  5 CODE MMU7-01
  6  NEXTREG 87 P, 1 N,
  7  NEXT
  8 C;
  9 
 10 
 11 
 12 
 13 
 14 
 15 


Scr# 303 
  0 ( MMU7 / set bank )
  1 \ set MMU7 to 8K-page given between 0 and 223
  2 \ to fit *ANY* page
  3 DECIMAL
  4 CODE MMU7! ( n -- )
  5  POP  HL|
  6  LD   A'|  L|
  7  DECIMAL
  8  NEXTREGA 87 P,
  9  NEXT
 10 C;
 11 \
 12 : MMU7@ ( -- n )
 13 
 14 
 15 


Scr# 304 
  0 ( MMU7 / set bank 5 bits )
  1 \
  2 \ set MMU7 to  64+n  8K-block: n between 0 and 31
  3 \ to fit pages 64-95
  4 CODE MMU7 ( n -- )
  5  POP  HL|
  6  LD   A'|  L|
  7  ANDN HEX 1F N,
  8  ORN  HEX 040 N,
  9  DECIMAL
 10  NEXTREGA 87 P,
 11  NEXT
 12 C;
 13 \
 14 
 15 


Scr# 305 
  0 ( MMU7 / set bank 6 bits )
  1 \
  2 \ set MMU7 to  64+n  8K-block: n between 0 and 63
  3 \ to fit pages 64-127
  4 CODE MMU7 ( n -- )
  5  POP  HL|
  6  LD   A'|  L|
  7  ANDN HEX 3F N,
  8  ORN  HEX 040 N,
  9  DECIMAL
 10  NEXTREGA 87 P,
 11  NEXT
 12 C;
 13 \
 14 
 15 


Scr# 306 
  0 ( MMU7 / set bank 7 bits )
  1 \
  2 \ set MMU7 to  64+n  8K-block: n between 0 and 127
  3 \ to fit pages 64-191
  4 CODE MMU7 ( n -- )
  5  POP  HL|
  6  LD   A'|  L|
  7  ANDN HEX 7F N,
  8  ORN  HEX 040 N,
  9  DECIMAL
 10  NEXTREGA 87 P,
 11  NEXT
 12 C;
 13 \
 14 
 15 


Scr# 307 
  0 ( MMU7 / first 16K RAM )
  1 \ Given a lower 16K address, returns 8K-page #64+n
  2 \ and offset from E000 a2
  3 \
  4 CODE +FAR ( a1 -- a2 n )
  5  LDX  DE|  0 NN,
  6  POP  HL|
  7  LD   A'|  H|
  8  ANDN HEX 0C0 N,
  9  JRF NZ'| HOLDPLACE
 10  LD   A'|  H|
 11  RRA
 12  ORN  HEX 080 N,
 13  RRA
 14 -->
 15 


Scr# 308 
  0 ( MMU7 / first 16K RAM )
  1  LD   E'|  A|
  2  ADDHL HL|
  3  ADDHL HL|
  4  ADDHL HL|
  5  LD   A'|  H|
  6  ORN  HEX 0E0 N,
  7  LD   H'|  A|
  8 \
  9  HERE DISP,
 10  EXDEHL
 11  PSH2
 12 C;
 13 -->
 14 
 15 


Scr# 309 
  0 ( MMU7 / first 16K RAM )
  1 \ reverse of +FAR: encodes a FAR address 8K-page in
  2 \ bits 2-5 of H, bits 0-1 of H and L is the rounded
  3 \ address
  4 CODE -FAR ( a2 b -- a1 )
  5  POP  DE|
  6  POP  HL|
  7  LD   A'|  E|
  8  DEC  E'|
  9  JRF  Z'| HOLDPLACE
 10  ANDN HEX 0F N,
 11  RLA RLA
 12 -->
 13 
 14 
 15 


Scr# 310 
  0 ( MMU7 / first 16K RAM )
  1 \
  2  RR H|  RR L|
  3  RR H|  RR L|
  4  RR H|  RR L|
  5  ANDA H|
  6  LD  H'|  A|
  7  PSH1
  8 C;
  9 
 10 
 11 
 12 
 13 
 14 
 15 


Scr# 311 
  0 ( MMU7 / 8th byte )
  1 \ deocode bit 765432 of H as 8K-page 64-127
  2 \ lower bits of H and L are offset rounded at 8 byte
  3 \
  4 CODE >FAR ( a1 -- a2 n )
  5  POP  HL|
  6  LD   A'|  H|
  7  ANDN HEX FC N,
  8  RRA RRA
  9  ORN  HEX 40 N,
 10  LDN  D'| 0 N,
 11  LD   E'|  A|
 12 -->
 13 
 14 
 15 


Scr# 312 
  0 ( MMU7 / 8th byte )
  1 \
  2  ADDHL HL|
  3  ADDHL HL|
  4  ADDHL HL|
  5  LD   A'|  H|
  6  ORN  HEX E0 N,
  7  LD   H'|  A|
  8  EXDEHL
  9  PSH2
 10 C;
 11 -->
 12 
 13 
 14 
 15 


Scr# 313 
  0 ( MMU7 / 8th byte )
  1 \ reverse of >FAR, encodes 8K-page in bits 2-7 of H
  2 \ bits 1-1 of H and L are the address rounded at 8 byte
  3 \
  4 CODE <FAR ( a2 b -- a1 )
  5 \ 8K-page in bits 7-2 of H
  6  POP  HL|
  7  LD   A'|  E|
  8  DEC  E'|
  9  JRF  Z'| HOLDPLACE
 10  ANDN HEX 3F N,
 11  RLA RLA
 12 -->
 13 
 14 
 15 


Scr# 314 
  0 ( MMU7 / 8th byte )
  1 \
  2  RR H|  RR L|
  3  RR H|  RR L|
  4  RR H|  RR L|
  5  ANDA H|
  6  LD  H'|  A|
  7  PSH1
  8 C;
  9 
 10 
 11 
 12 
 13 
 14 
 15 


Scr# 315 
  0 ( MMU7 / 4th byte )
  1 \ decode bit 3-7 of H as 8K-page 64-95
  2 \ lower bits of H and L ar offset rounded at 4th byte
  3 \
  4 CODE >FAR ( a1 -- a2 n )
  5  POP  HL|
  6  LD   A'|  H|
  7  ANDN HEX F8 N,
  8  RRA RRA RRA
  9  ORN  HEX 40 N,
 10  LDN  D'| 0 N,
 11  LD   E'|  A|
 12 -->
 13 
 14 
 15 


Scr# 316 
  0 ( MMU7 / 4th byte )
  1 \
  2 \
  3  ADDHL HL|
  4  ADDHL HL|
  5  LD   A'|  H|
  6  ORN  HEX E0 N,
  7  LD   H'|  A|
  8  EXDEHL
  9  PSH2
 10 C;
 11 -->
 12 
 13 
 14 
 15 


Scr# 317 
  0 ( MMU7 / 4th byte )
  1 \ reverse of >FAR: encodes a FAR address 8K-page in bits
  2 \ 7-3 of H, bits 2-0 of H and L are address rounded at
  3 \ the 4th byte
  4 \
  5 CODE <FAR ( a2 b -- a1 )
  6  POP  DE|
  7  POP  HL|
  8  LD   A'|  E|
  9  DEC  E'|
 10  JRF  Z'| HOLDPLACE
 11  ANDN HEX 3E N,
 12  RLA RLA RLA
 13 -->
 14 
 15 


Scr# 318 
  0 ( MMU7 / 4th byte )
  1 \
  2 \
  3  RR H|  RR L|
  4  RR H|  RR L|
  5  ANDA H|
  6  LD  H'|  A|
  7  PSH1
  8 C;
  9 
 10 
 11 
 12 
 13 
 14 
 15 


Scr# 319 
  0 
  1 
  2 
  3 
  4 
  5 
  6 
  7 
  8 
  9 
 10 
 11 
 12 
 13 
 14 
 15 


Scr# 320 
  0 ( MMU7 / simplest )
  1 \ decode bits 765 of H as 8K-page 64-71
  2 \ lower bits of H and L are offset from E000h
  3 \
  4 CODE >FAR ( ha -- a n )
  5  POP  HL|
  6  LD   A'|  H|
  7  ANDN HEX  E0 N,
  8  RLCA
  9  RLCA
 10  RLCA
 11 -->
 12 
 13 
 14 
 15 


Scr# 321 
  0 ( MMU7 / simplest )
  1 \
  2  ORN  HEX  40 N,
  3 \
  4  LD   E'|  A|
  5  LDN  D'|  00 N,
  6  LD   A'|  H|
  7  ORN  HEX  E0 N,
  8  LD   H'|  A|
  9  EXDEHL
 10  PSH2
 11 C;
 12 -->
 13 
 14 
 15 


Scr# 322 
  0 ( MMU7 / simplest )
  1 \ reverse of >FAR: encodes a FAR address 8K-page in bits 765
  2 \ of H, lower bits of HL are offset at E000h
  3 \
  4 CODE <FAR ( a n -- ha )
  5  POP  DE|
  6  POP  HL|
  7  LD   A'|  E|
  8  ANDN HEX  07 N,
  9  RRCA
 10  RRCA
 11  RRCA
 12 -->
 13 
 14 
 15 


Scr# 323 
  0 ( MMU7 / simplest )
  1 \
  2  LD   D'|  A|
  3  LD   A'|  H|
  4  ANDN HEX  1F N,
  5  ORA   D|
  6  LD   H'|  A|
  7  PSH1
  8 C;
  9 DECIMAL
 10 
 11 
 12 
 13 
 14 
 15 


Scr# 324 
  0 ( MMU7 / simplest )
  1 \ visual test
  2 : .PG-OFFS
  3   <# # # # # [CHAR] . HOLD # # #> TYPE CR
  4 ;
  5 \ visual test
  6 : T
  7   HEX CR
  8   DUP S->D .PG-OFFS
  9   >FAR 2DUP .PG-OFFS
 10   <FAR S->D .PG-OFFS
 11 ;
 12 
 13 
 14 
 15 


Scr# 325 
  0 ( MMU Heap Management )
  1 \ DECIMAL 303 LOAD
  2 \
  3 \ Heap Pointer
  4 \ 70 USER HP
  5 \
  6 : HP@ HP @ ;
  7 : HP+! HP +! ;
  8 : FAR >FAR MMU7! ;
  9 \
 10 
 11 -->
 12 
 13 
 14 
 15 


Scr# 326 
  0 ( MMU7 HEAP )
  1 \ check for page boundary
  2 : HP@ HP @ ;
  3 hex
  4 : ?PAGE ( n -- ha )
  5   1fff >r
  6   hp@ cell+  r  and +  r  >
  7   if
  8    hp@  r>  or 1+  hp !
  9   else
 10    r> drop
 11   then
 12   hp@ 0= 12 ?error
 13 ;
 14 
 15 


Scr# 327 
  0 ( MMU7 HEAP )
  1 \ reserve n bytes on heap, retunrs heap-pointer to them
  2 : HEAP ( n -- ha )
  3   dup ?page
  4   hp@ swap
  5   cell+
  6   hp +!
  7   hp@ swap
  8   tuck   far !
  9 ;
 10 
 11 
 12 
 13 
 14 
 15 


Scr# 328 
  0 ( MMU7 HEAP STRING )
  1 \ accepts a string and stores it to Heap,
  2 \ returns a Pointer to a counted string
  3 : +" ( ha -- ha )
  4  DUP FAR C@
  5  [CHAR] " WORD
  6  DUP C@ >R 1+
  7  HP@ FAR R CMOVE
  8  R HP+!
  9  R> +
 10  OVER FAR C!
 11 ;
 12 -->
 13 
 14 
 15 


Scr# 329 
  0 ( MMU7 HEAP STRING )
  1 \ accepts a string and store it to Heap, returns a
  2 \ pointer to a counted string
  3 : H" ( -- ha )
  4  HP @
  5  [CHAR] " WORD  DUP C@ 1+ >R
  6  OVER FAR  TUCK CELL+  R CMOVE
  7  R> CELL+ HP +!
  8  HP @ [ HEX ] 1FFF AND 1EFF >
  9  IF 1FFF OR 1+ HP ! THEN
 10  HP @ OVER !
 11 ;
 12 DECIMAL
 13 
 14 
 15 


Scr# 330 
  0 ( MMU7 HEAP STRING )
  1 \ given a pointer, prints the counted string
  2 \
  3 : .H
  4   FAR
  5   COUNT TYPE
  6 ;
  7 -->
  8 
  9 
 10 
 11 
 12 
 13 
 14 
 15 


Scr# 331 
  0 ( MMU7 HEAP POINTER )
  1 \ like CONSTANT but it returns a FAR-resolved pointer
  2 : POINTER ( a -- cccc )
  3  <BUILDS
  4   ,
  5  DOES>
  6   @ FAR
  7 ;
  8 -->
  9 
 10 
 11 
 12 
 13 
 14 
 15 


Scr# 332 
  0 ( S" Counted Strings in Heap )
  1 : (S")   R R> CELL+ >R  @ FAR COUNT ;
  2 \
  3 : S"  ( -- a n )
  4   STATE @ IF
  5    COMPILE (S") H" ,
  6   ELSE
  7    H" FAR COUNT
  8   ENDIF
  9 ; IMMEDIATE
 10 \
 11 : TEST_S"  S" HELLO WORLD" NOOP ;
 12 ;S
 13 CR TEST_S" TYPE
 14 CR S" HELLO WORLD" TYPE
 15 


Scr# 333 
  0 \ TEST
  1 : Q CR
  2  ." HP  " HP@ U. CR
  3  ." P   " CURPAGE ? CR
  4 ;
  5 
  6 
  7 
  8 
  9 
 10 
 11 
 12 
 13 
 14 
 15 


Scr# 334 
  0 ( Testing where $6000 is paged )
  1 HEX
  2 : T
  3   MMU7
  4   E000 DUMP
  5   FD38 DUMP
  6 ;
  7 DECIMAL
  8 
  9 
 10 
 11 
 12 
 13 
 14 
 15 


Scr# 335 
  0 ( Testing where $6000 is paged )
  1 DECIMAL 14 EMITC
  2 HEX 8F EMITC 8F EMITC
  3 DECIMAL
  4 
  5 
  6 
  7 
  8 
  9 
 10 
 11 
 12 
 13 
 14 
 15 


Scr# 336 
  0 
  1 
  2 
  3 
  4 
  5 
  6 
  7 
  8 
  9 
 10 
 11 
 12 
 13 
 14 
 15 


Scr# 337 
  0 
  1 
  2 
  3 
  4 
  5 
  6 
  7 
  8 
  9 
 10 
 11 
 12 
 13 
 14 
 15 


Scr# 338 
  0 
  1 
  2 
  3 
  4 
  5 
  6 
  7 
  8 
  9 
 10 
 11 
 12 
 13 
 14 
 15 


Scr# 339 
  0 
  1 
  2 
  3 
  4 
  5 
  6 
  7 
  8 
  9 
 10 
 11 
 12 
 13 
 14 
 15 


Scr# 340 
  0 ( R/W : BLK-FH )
  1 1 variable blk-fh
  2 \ seek block n  within blocks!.bin  file
  3 : blk-seek  ( n -- )
  4   b/buf m*
  5   blk-fh @
  6   f_seek
  7   [ hex ] 2D ?error
  8 ;
  9 -->
 10 
 11 
 12 
 13 
 14 
 15 


Scr# 341 
  0 ( R/W : BLK-READ )
  1 \ read block n to address a
  2 : blk-read  ( a n -- )
  3   blk-seek
  4   b/buf
  5   blk-fh @
  6   f_read
  7   [ hex ] 2E ?error
  8   drop
  9 ;
 10 -->
 11 
 12 
 13 
 14 
 15 


Scr# 342 
  0 ( R/W : BLK-WRITE )
  1 \ write block n from address a
  2 : blk-write  ( a n -- )
  3   blk-seek
  4   b/buf
  5   blk-fh @
  6   f_write
  7   [ hex ] 2E ?error
  8   drop
  9 ;
 10 -->
 11 
 12 
 13 
 14 
 15 


Scr# 343 
  0 ( R/W : BLK-INIT )
  1 : blk-init
  2  blk-fh @ f_close drop   \ ignore error
  3  filename
  4  here 3 f_open
  5  44 ?error
  6  blk-fh !
  7 ;
  8 
  9 
 10 
 11 
 12 
 13 
 14 
 15 


Scr# 344 
  0 ( blk-fname )
  1 : STRING"
  2   [CHAR] " WORD   COUNT 1+ ALLOT ;
  3 create blk-fname
  4   STRING" !Block-64.bin" 0 c,
  5 
  6 
  7 
  8 
  9 
 10 
 11 
 12 
 13 
 14 
 15 


Scr# 345 
  0 ( r/w patch )
  1 ' r/w 32 + @ .word
  2 ' r/w 38 + @ .word
  3 ' nxtrd ' r/w 32 + !
  4 ' nxtwr ' r/w 38 + !
  5 
  6 
  7 
  8 
  9 
 10 
 11 
 12 
 13 
 14 
 15 


Scr# 346 
  0 ( r/w patch )
  1 ' r/w 32 + @ .word
  2 ' r/w 38 + @ .word
  3 ' blk-read ' r/w 32 + !
  4 ' blk-write ' r/w 38 + !
  5 
  6 
  7 
  8 
  9 
 10 
 11 
 12 
 13 
 14 
 15 


Scr# 347 
  0 
  1 
  2 
  3 
  4 
  5 
  6 
  7 
  8 
  9 
 10 
 11 
 12 
 13 
 14 
 15 


Scr# 348 
  0 
  1 
  2 
  3 
  4 
  5 
  6 
  7 
  8 
  9 
 10 
 11 
 12 
 13 
 14 
 15 


Scr# 349 
  0 
  1 
  2 
  3 
  4 
  5 
  6 
  7 
  8 
  9 
 10 
 11 
 12 
 13 
 14 
 15 


Scr# 350 
  0 
  1 
  2 
  3 
  4 
  5 
  6 
  7 
  8 
  9 
 10 
 11 
 12 
 13 
 14 
 15 


Scr# 351 
  0 
  1 
  2 
  3 
  4 
  5 
  6 
  7 
  8 
  9 
 10 
 11 
 12 
 13 
 14 
 15 


Scr# 352 
  0 
  1 
  2 
  3 
  4 
  5 
  6 
  7 
  8 
  9 
 10 
 11 
 12 
 13 
 14 
 15 


Scr# 353 
  0 
  1 
  2 
  3 
  4 
  5 
  6 
  7 
  8 
  9 
 10 
 11 
 12 
 13 
 14 
 15 


Scr# 354 
  0 
  1 
  2 
  3 
  4 
  5 
  6 
  7 
  8 
  9 
 10 
 11 
 12 
 13 
 14 
 15 


Scr# 355 
  0 
  1 
  2 
  3 
  4 
  5 
  6 
  7 
  8 
  9 
 10 
 11 
 12 
 13 
 14 
 15 


Scr# 356 
  0 
  1 
  2 
  3 
  4 
  5 
  6 
  7 
  8 
  9 
 10 
 11 
 12 
 13 
 14 
 15 


Scr# 357 
  0 
  1 
  2 
  3 
  4 
  5 
  6 
  7 
  8 
  9 
 10 
 11 
 12 
 13 
 14 
 15 


Scr# 358 
  0 
  1 
  2 
  3 
  4 
  5 
  6 
  7 
  8 
  9 
 10 
 11 
 12 
 13 
 14 
 15 


Scr# 359 
  0 
  1 
  2 
  3 
  4 
  5 
  6 
  7 
  8 
  9 
 10 
 11 
 12 
 13 
 14 
 15 


Scr# 360 
  0 ( F_STAT via RST 8 hook code )
  1 CASEOFF
  2 code F_STAT ( fspec buff -- f )
  3   pop   de|      \ 11-byte buffer
  4   ex(sp)ix       \ filespec nul-terminated
  5   push  bc|
  6   ldn   a'|   char  *  n,
  7   rst   08|   hex  AC  c,
  8   pop   bc|
  9   pop   ix|
 10   sbchl hl|
 11   push  hl|
 12   jpix
 13 c;
 14 -->
 15 


Scr# 361 
  0 ( F_FGETPOS via RST 08 hook code )
  1 code F_FGETPOS ( n -- d f )
  2   pop   hl|
  3   ld    a'|   l|
  4   push  ix|
  5   push  bc|
  6   rst  08|   hex  9F  c,
  7   ld    h'|   b|
  8   ld    l'|   c|
  9   pop   bc|
 10   pop   ix|
 11   push  de|
 12   push  hl|
 13   sbchl hl|
 14   push  hl|
 15   jpix    c;  -->


Scr# 362 
  0 ( F_SEEK via RST 08 hook code )
  1 code F_SEEK ( d n -- f )
  2   pop   hl|     ld   a'|  l|
  3   ld    h'|   b|
  4   ld    l'|   c|
  5   pop   bc|
  6   pop   de|
  7   push  ix|
  8   push  hl|
  9   ldx   ix| 0 nn,
 10   rst  08|   hex  9F  c,
 11   pop   bc|
 12   pop   ix|
 13   sbchl hl|
 14   push  hl|
 15   jpix    c;  -->


Scr# 363 
  0 ( F_WRITE via RST 8 hook code )
  1 code F_WRITE ( addr bytes n -- actual f )
  2   ld    d'|   b|
  3   ld    e'|   c|
  4   pop   hl|     \ file handle number
  5   ld    a'|   l|
  6   pop   bc|     \ bytes to read
  7   ex(sp)ix
  8   push  de|
  9   rst   08|   hex  9E  c,
 10   pop   bc|
 11   pop   ix|
 12   push  de|
 13   sbchl hl|
 14   push  hl|
 15   jpix    c;  -->


Scr# 364 
  0 ( F_READ via RST 8 hook code )
  1 code F_READ ( addr bytes n -- actual f )
  2   ld    d'|   b|
  3   ld    e'|   c|
  4   pop   hl|     \ file handle number
  5   ld    a'|   l|
  6   pop   bc|     \ bytes to read
  7   ex(sp)ix
  8   push  de|
  9   rst   08|   hex  9D  c,
 10   pop   bc|
 11   pop   ix|
 12   push  de|
 13   sbchl hl|
 14   push  hl|
 15   jpix    c;  -->


Scr# 365 
  0 ( F_CLOSE via RST 8 hook code )
  1 code F_CLOSE ( n -- f )
  2   pop   hl|
  3   ld    a'|   l|
  4   push  ix|
  5   push  bc|
  6   rst   08|   hex  9B  c,
  7   pop   bc|
  8   pop   ix|
  9   sbchl hl|
 10   push  hl|
 11   jpix
 12 c;
 13 -->
 14 
 15 


Scr# 366 
  0 ( F_OPEN via RST 8 hook code )
  1 code F_OPEN ( fspec buff mode -- n f )
  2   ld    h'|   b|
  3   ld    l'|   c|
  4   pop   bc|      \ mode
  5   ld    b'|   c|
  6   pop   de|      \ 8-byte buffer if any
  7   ex(sp)ix       \ filespec nul-terminated
  8   push  hl|      \ this push bc
  9   ldn   a'|   char  *  n,
 10   rst   08|   hex  9A  c,
 11   pop   bc|
 12   pop   ix|
 13 -->
 14 
 15 


Scr# 367 
  0 ( F_OPEN via RST 8 hook code )
  1   sbchl hl|
  2   ld    e'|   a|
  3   ldn   d'|   0  n,
  4   push  de|
  5   push  hl|
  6   jpix
  7 c;
  8 -->
  9 \ CREATE FILENAME 30 ALLOT
 10 \ FILENAME 30 ERASE
 11 \ S" test.txt"   \ new Counted String
 12 \ FILENAME SWAP CMOVE
 13 \ FILENAME PAD 1 F_OPEN
 14 \ DROP
 15 \ F_CLOSE


Scr# 368 
  0 ( F_FSTAT via RST 8 hook code )
  1 code F_FSTAT ( addr n -- f )
  2   pop   de|       \ file handle number
  3   ex(sp)ix        \ 11-byte buffer
  4   push  bc|
  5   ld    a'|   e|
  6   rst   08|   hex  A1  c,
  7   pop   bc|
  8   pop   ix|
  9   sbchl hl|
 10   push  hl|
 11   jpix
 12 c;
 13 -->
 14 \ 2 PAD F_FSTAT
 15 


Scr# 369 
  0 code F_SYNC  ( n -- f )
  1   pop   hl|
  2   push  ix|
  3   push  bc|
  4   ld    a'|   l|
  5   rst   08|   hex  9C  c,
  6   pop   bc|
  7   pop   ix|
  8   sbchl hl|
  9   push  hl|
 10   jpix
 11 c;
 12 -->
 13 \ 2 F_SYNC works
 14 
 15 


Scr# 370 
  0 ( M_DOSVERSION via RST 8 hook code )
  1 \ Get API version/mode information
  2 \ Entry: none
  3 \ Exit: Fc=1, error; A=14 "no such device"
  4 \ Fc=0, success. BC="NX"; DE=maj.min in BCD format
  5 \   HL="en" or "es" for English/Spanish
  6 code M_DOSVERSION ( -- n )
  7   push  ix|
  8   push  bc|
  9   rst   08|   hex  88  c,
 10   pop   bc|
 11   pop   ix|
 12   push  de|
 13   jpix
 14 c;
 15 DECIMAL


Scr# 371 
  0 ( F_GETFREE via RST 08 hook code test )
  1 code f_getfree ( drive -- d )
  2   pop   hl|
  3   push  ix|
  4   push  bc|
  5   ld    a'|   l|
  6   rst   08|   hex  B1  c,
  7   ld    h'|   b|
  8   ld    l'|   c|
  9   pop   bc|
 10   pop   ix|
 11   push  de|
 12   push  hl|
 13   jpix
 14 c;
 15 


Scr# 372 
  0 ( M_P3DOS )
  1 CASEOFF
  2 \ n1 n2 n3 n4 a -- n5 n6 n7 n8
  3 \ hl de bc  a   -- hl de bc  a  flag
  4 code M_P3DOS
  5   pop   de|   \ call ID
  6   pop   hl|
  7   ld    a'|    l|
  8   exx
  9   pop   bc|
 10   pop   de|
 11   pop   hl|
 12   exx
 13   push  bc|
 14   push  ix|
 15 -->


Scr# 373 
  0 ( M_P3DOS )
  1   ld()x sp|   hex 02C +origin  aa,
  2   ldx   sp|  hex  -2 +origin  nn,
  3 \
  4 \  use page 7 RAM bank
  5   ldn   c'|   7   n,
  6 \ nop nop
  7   rst   08|    hex  94  c,
  8 \
  9   ldx() sp|   hex 02C +origin  aa,
 10   push  ix|
 11   pop   hl|
 12   ld()x hl|  hex 02a +origin  aa,
 13 -->
 14 
 15 


Scr# 374 
  0 ( M_P3DOS )
  1   pop   ix|
  2   ex(sp)hl    \ retrieve BC
  3   push  de|
  4   push  bc|
  5   ld    c'|    l|
  6   ld    b'|    h|
  7   ldn   h'|    0   n,
  8   ld    l'|    a|
  9   push  hl|
 10   sbchl  hl|
 11   push   hl|
 12   jpix
 13 c;
 14 decimal
 15 


Scr# 375 
  0 
  1 
  2 
  3 
  4 
  5 
  6 
  7 
  8 
  9 
 10 
 11 
 12 
 13 
 14 
 15 


Scr# 376 
  0 
  1 
  2 
  3 
  4 
  5 
  6 
  7 
  8 
  9 
 10 
 11 
 12 
 13 
 14 
 15 


Scr# 377 
  0 
  1 
  2 
  3 
  4 
  5 
  6 
  7 
  8 
  9 
 10 
 11 
 12 
 13 
 14 
 15 


Scr# 378 
  0 
  1 
  2 
  3 
  4 
  5 
  6 
  7 
  8 
  9 
 10 
 11 
 12 
 13 
 14 
 15 


Scr# 379 
  0 ( IDE_BANK )
  1 HEX
  2 : IDE_BANK_ALLOC
  3   0002 SWAP 0 0 01BD M_P3DOS
  4   44 ?ERROR
  5   2DROP SWAP DROP ;
  6 DECIMAL
  7 
  8 
  9 
 10 
 11 
 12 
 13 
 14 
 15 


Scr# 380 
  0 ( NextZXOS - IDE_CAPACITY $01b4 )
  1 \ DOSCALL expects hl, de, bc, a, address
  2 \         returns hl, de, bc, a as error code
  3 \ register a is also stored at 029h +ORIGIN
  4 : IDE_CAPACITY ( n -- d )
  5 \ n: unit (0 or 1)
  6 \ d: total card capacity in sectors.
  7  >R  0 ( hl )   0 ( de )  R> 1 AND ( bc )  0 ( a )
  8  [ HEX ] 01B4 DOSCALL [ DECIMAL ]
  9  44 ?ERROR
 10  DROP ( bc ) SWAP ( hl-de )
 11  ;
 12 ;S
 13 > TEST <
 14 0 IDE_CAPACITY D.
 15 


Scr# 381 
  0 ( NextZXOS - DOS_FREE_SPACE $0121 )
  1 \ c: drive letter UpperCase
  2 \ d: total card capacity in sectors.
  3 : DOS_FREE_SPACE ( c -- d )
  4  >R  0  0  0  R>
  5  [ HEX ] 0121 DOSCALL [ DECIMAL ]
  6  44 ?ERROR
  7  ROT DROP
  8 \
  9 ;
 10 ;S
 11 > TEST <
 12 CHAR C DOS_FREE_SPACE D.
 13 
 14 
 15 


Scr# 382 
  0 ( NextZXOS IDE_MODE 01d5 )
  1 \ Set current NextBasic display mode
  2 : IDE_MODE! ( hl de bc a -- )
  3  [ HEX ] 01D5 DOSCALL [ DECIMAL ]
  4  VIDEO
  5 ;
  6 \
  7 \ LAYER 0  : 0 0 HEX 0000 1 IDE_MODE!
  8 \ LAYER 1,1: 0 0 HEX 0101 1 IDE_MODE!
  9 \ LAYER 1,2: 0 0 HEX 0102 1 IDE_MODE!
 10 
 11 
 12 
 13 
 14 
 15 


Scr# 383 
  0 ( NextZXOS IDE_MODE 01d5 )
  1 \ Query current NextBasic display mode information
  2 : IDE_MODE@ ( -- hl de bc a )
  3  0 0 0 0
  4  [ HEX ] 01D5 DOSCALL [ DECIMAL ]
  5  44 ?ERROR
  6  [ HEX ] 028 +ORIGIN @ [ DECIMAL ]
  7 ;
  8 \
  9 \ hex 1840 0 800 9
 10 \ hex 1820 7 800 5
 11 
 12 
 13 
 14 
 15 


Scr# 384 
  0 ( DOS_FLUSH $0142 )
  1 \ Flush any pending write to SD
  2 : DOS_FLUSH ( c -- )
  3 >R 0 0 0 R>
  4  [ HEX ] 0142 DOSCALL [ DECIMAL ]
  5  44 ?ERROR
  6  DROP 2DROP
  7 ;
  8 \ CHAR C DOS_FLUSH
  9 
 10 
 11 
 12 
 13 
 14 
 15 


Scr# 385 
  0 ( DOS_VERSION / IDE_VERSION )
  1 \ TO BE TESTED YET !
  2 : DOS_VERSION ( -- n )
  3  0 0 0 0
  4  [ HEX ] 0103 DOSCALL [ DECIMAL ]
  5  44 ?ERROR
  6  DROP NIP
  7 ;
  8 : IDE_VERSION ( -- n )
  9  0 0 0 0
 10  [ HEX ] 00A0 DOSCALL [ DECIMAL ]
 11  44 ?ERROR
 12  DROP NIP
 13 ;
 14 
 15 


Scr# 386 
  0 ( IDE_BASIC 1/3 )
  1 \ NOT VERIFIED YET !
  2 CODE IDE_BASIC
  3  POP    HL|
  4  LD()X  SP|  HEX 02C +ORIGIN AA, \ save Forth SP
  5  LDX()  SP|  HEX 008 +ORIGIN AA, \ use Basic's SP
  6  LDAR   DI   EXAFAF   EXX
  7  LDX    HL|  HEX 5B2C NN, \ BANKM
  8  LD     A'| (HL)|
  9  RES     4|    A|  \ ROM switch 3 to 2
 10  LD  (HL)'|    A|
 11  LDX    BC|  HEX 7FFD NN,
 12  OUT(C) A'|
 13  EXX    EXAFAF
 14  JPF    PO| HERE 3 + AA, \ skip EI
 15  EI -->


Scr# 387 
  0 ( IDE_BASIC 2/3 )
  1 \ NOT VERIFIED YET !
  2  PUSH   IX|    PUSH   BC|
  3  CALL   HEX  01C0 AA,
  4  POP    BC|    POP    IX|
  5  PUSH   AF|
  6  LDAR   DI   EXAFAF   EXX
  7  LDX    HL|  HEX 5B2C NN, \ BANKM
  8  LD     A'| (HL)|
  9  SET     4|    A|  \ ROM switch 2 to 3 (48K)
 10  LD  (HL)'|    A|
 11  LDX    BC|  HEX 7FFD NN,
 12  OUT(C) A'|
 13  EXX    EXAFAF
 14  JPF    PO| HERE 3 + AA, \ skip EI
 15  EI -->


Scr# 388 
  0 ( IDE_BASIC 3/3 )
  1 \ NOT VERIFIED YET !
  2  POP    AF|
  3  LDX()  SP|  HEX 02C +ORIGIN AA, \ restore Forth SP
  4 \
  5  LDX    HL|  0 NN,
  6  JRF   CY'|  HOLDPLACE
  7   INC   L'|
  8  HERE  DISP,
  9  PSH1
 10 C;
 11 \ PROG 23635
 12 \ 23635 @ 4 + DUMP
 13 
 14 
 15 


Scr# 389 
  0 ( IDE_BASIC test )
  1 \ NOT VERIFIED YET !
  2 0 VARIABLE PROGR
  3 80 ALLOT
  4 
  5 
  6 
  7 
  8 
  9 
 10 
 11 
 12 
 13 
 14 
 15 


Scr# 390 
  0 
  1 
  2 
  3 
  4 
  5 
  6 
  7 
  8 
  9 
 10 
 11 
 12 
 13 
 14 
 15 


Scr# 391 
  0 
  1 
  2 
  3 
  4 
  5 
  6 
  7 
  8 
  9 
 10 
 11 
 12 
 13 
 14 
 15 


Scr# 392 
  0 
  1 
  2 
  3 
  4 
  5 
  6 
  7 
  8 
  9 
 10 
 11 
 12 
 13 
 14 
 15 


Scr# 393 
  0 
  1 
  2 
  3 
  4 
  5 
  6 
  7 
  8 
  9 
 10 
 11 
 12 
 13 
 14 
 15 


Scr# 394 
  0 
  1 
  2 
  3 
  4 
  5 
  6 
  7 
  8 
  9 
 10 
 11 
 12 
 13 
 14 
 15 


Scr# 395 
  0 
  1 
  2 
  3 
  4 
  5 
  6 
  7 
  8 
  9 
 10 
 11 
 12 
 13 
 14 
 15 


Scr# 396 
  0 
  1 
  2 
  3 
  4 
  5 
  6 
  7 
  8 
  9 
 10 
 11 
 12 
 13 
 14 
 15 


Scr# 397 
  0 
  1 
  2 
  3 
  4 
  5 
  6 
  7 
  8 
  9 
 10 
 11 
 12 
 13 
 14 
 15 


Scr# 398 
  0 
  1 
  2 
  3 
  4 
  5 
  6 
  7 
  8 
  9 
 10 
 11 
 12 
 13 
 14 
 15 


Scr# 399 
  0 
  1 
  2 
  3 
  4 
  5 
  6 
  7 
  8 
  9 
 10 
 11 
 12 
 13 
 14 
 15 


Scr# 400 
  0 ( UDG utility )
  1 DECIMAL
  2 : UDG@ 65 - 8 * 23675 @ + ;
  3 : UDG+ 79 + ;
  4 : [UDG]
  5 CHAR UDG+ [COMPILE] LITERAL
  6 ; IMMEDIATE
  7 : BIN 2 BASE ! 8 .R
  8 DECIMAL ;
  9 : .UDG CR
 10 UDG@ DUP 8 + SWAP DO
 11  I C@ BIN CR
 12 LOOP DECIMAL ;
 13 
 14 
 15 


Scr# 401 
  0 ( Timex HiRes experiment )
  1 HEX
  2 : BORDCR
  3  5C48 C@ 7 AND 8 * ;
  4 : HIRES
  5  BORDCR 6 + FF P!
  6 ;
  7 : LORES
  8  BORDCR     FF P!
  9 ;
 10 
 11 
 12 
 13 
 14 
 15 


Scr# 402 
  0 ( STRMS study )
  1 hex 5C36 constant STRMS
  2 hex 5C4F constant CHANS
  3 decimal
  4 : CDUMP
  5  13 select
  6  chans @ dump
  7 ;
  8 
  9 
 10 
 11 
 12 
 13 
 14 
 15 


Scr# 403 
  0 
  1 
  2 
  3 
  4 
  5 
  6 
  7 
  8 
  9 
 10 
 11 
 12 
 13 
 14 
 15 


Scr# 404 
  0 
  1 
  2 
  3 
  4 
  5 
  6 
  7 
  8 
  9 
 10 
 11 
 12 
 13 
 14 
 15 


Scr# 405 
  0 
  1 
  2 
  3 
  4 
  5 
  6 
  7 
  8 
  9 
 10 
 11 
 12 
 13 
 14 
 15 


Scr# 406 
  0 
  1 
  2 
  3 
  4 
  5 
  6 
  7 
  8 
  9 
 10 
 11 
 12 
 13 
 14 
 15 


Scr# 407 
  0 
  1 
  2 
  3 
  4 
  5 
  6 
  7 
  8 
  9 
 10 
 11 
 12 
 13 
 14 
 15 


Scr# 408 
  0 
  1 
  2 
  3 
  4 
  5 
  6 
  7 
  8 
  9 
 10 
 11 
 12 
 13 
 14 
 15 


Scr# 409 
  0 
  1 
  2 
  3 
  4 
  5 
  6 
  7 
  8 
  9 
 10 
 11 
 12 
 13 
 14 
 15 


Scr# 410 
  0 
  1 
  2 
  3 
  4 
  5 
  6 
  7 
  8 
  9 
 10 
 11 
 12 
 13 
 14 
 15 


Scr# 411 
  0 
  1 
  2 
  3 
  4 
  5 
  6 
  7 
  8 
  9 
 10 
 11 
 12 
 13 
 14 
 15 


Scr# 412 
  0 
  1 
  2 
  3 
  4 
  5 
  6 
  7 
  8 
  9 
 10 
 11 
 12 
 13 
 14 
 15 


Scr# 413 
  0 
  1 
  2 
  3 
  4 
  5 
  6 
  7 
  8 
  9 
 10 
 11 
 12 
 13 
 14 
 15 


Scr# 414 
  0 
  1 
  2 
  3 
  4 
  5 
  6 
  7 
  8 
  9 
 10 
 11 
 12 
 13 
 14 
 15 


Scr# 415 
  0 
  1 
  2 
  3 
  4 
  5 
  6 
  7 
  8 
  9 
 10 
 11 
 12 
 13 
 14 
 15 


Scr# 416 
  0 
  1 
  2 
  3 
  4 
  5 
  6 
  7 
  8 
  9 
 10 
 11 
 12 
 13 
 14 
 15 


Scr# 417 
  0 
  1 
  2 
  3 
  4 
  5 
  6 
  7 
  8 
  9 
 10 
 11 
 12 
 13 
 14 
 15 


Scr# 418 
  0 
  1 
  2 
  3 
  4 
  5 
  6 
  7 
  8 
  9 
 10 
 11 
 12 
 13 
 14 
 15 


Scr# 419 
  0 
  1 
  2 
  3 
  4 
  5 
  6 
  7 
  8 
  9 
 10 
 11 
 12 
 13 
 14 
 15 


Scr# 420 
  0 
  1 
  2 
  3 
  4 
  5 
  6 
  7 
  8 
  9 
 10 
 11 
 12 
 13 
 14 
 15 


Scr# 421 
  0 
  1 
  2 
  3 
  4 
  5 
  6 
  7 
  8 
  9 
 10 
 11 
 12 
 13 
 14 
 15 


Scr# 422 
  0 
  1 
  2 
  3 
  4 
  5 
  6 
  7 
  8 
  9 
 10 
 11 
 12 
 13 
 14 
 15 


Scr# 423 
  0 
  1 
  2 
  3 
  4 
  5 
  6 
  7 
  8 
  9 
 10 
 11 
 12 
 13 
 14 
 15 


Scr# 424 
  0 
  1 
  2 
  3 
  4 
  5 
  6 
  7 
  8 
  9 
 10 
 11 
 12 
 13 
 14 
 15 


Scr# 425 
  0 
  1 
  2 
  3 
  4 
  5 
  6 
  7 
  8 
  9 
 10 
 11 
 12 
 13 
 14 
 15 


Scr# 426 
  0 
  1 
  2 
  3 
  4 
  5 
  6 
  7 
  8 
  9 
 10 
 11 
 12 
 13 
 14 
 15 


Scr# 427 
  0 
  1 
  2 
  3 
  4 
  5 
  6 
  7 
  8 
  9 
 10 
 11 
 12 
 13 
 14 
 15 


Scr# 428 
  0 
  1 
  2 
  3 
  4 
  5 
  6 
  7 
  8 
  9 
 10 
 11 
 12 
 13 
 14 
 15 


Scr# 429 
  0 
  1 
  2 
  3 
  4 
  5 
  6 
  7 
  8 
  9 
 10 
 11 
 12 
 13 
 14 
 15 


Scr# 430 
  0 
  1 
  2 
  3 
  4 
  5 
  6 
  7 
  8 
  9 
 10 
 11 
 12 
 13 
 14 
 15 


Scr# 431 
  0 
  1 
  2 
  3 
  4 
  5 
  6 
  7 
  8 
  9 
 10 
 11 
 12 
 13 
 14 
 15 


Scr# 432 
  0 
  1 
  2 
  3 
  4 
  5 
  6 
  7 
  8 
  9 
 10 
 11 
 12 
 13 
 14 
 15 


Scr# 433 
  0 
  1 
  2 
  3 
  4 
  5 
  6 
  7 
  8 
  9 
 10 
 11 
 12 
 13 
 14 
 15 


Scr# 434 
  0 
  1 
  2 
  3 
  4 
  5 
  6 
  7 
  8 
  9 
 10 
 11 
 12 
 13 
 14 
 15 


Scr# 435 
  0 
  1 
  2 
  3 
  4 
  5 
  6 
  7 
  8 
  9 
 10 
 11 
 12 
 13 
 14 
 15 


Scr# 436 
  0 
  1 
  2 
  3 
  4 
  5 
  6 
  7 
  8 
  9 
 10 
 11 
 12 
 13 
 14 
 15 


Scr# 437 
  0 
  1 
  2 
  3 
  4 
  5 
  6 
  7 
  8 
  9 
 10 
 11 
 12 
 13 
 14 
 15 


Scr# 438 
  0 
  1 
  2 
  3 
  4 
  5 
  6 
  7 
  8 
  9 
 10 
 11 
 12 
 13 
 14 
 15 


Scr# 439 
  0 
  1 
  2 
  3 
  4 
  5 
  6 
  7 
  8 
  9 
 10 
 11 
 12 
 13 
 14 
 15 


Scr# 440 
  0 
  1 
  2 
  3 
  4 
  5 
  6 
  7 
  8 
  9 
 10 
 11 
 12 
 13 
 14 
 15 


Scr# 441 
  0 
  1 
  2 
  3 
  4 
  5 
  6 
  7 
  8 
  9 
 10 
 11 
 12 
 13 
 14 
 15 


Scr# 442 
  0 
  1 
  2 
  3 
  4 
  5 
  6 
  7 
  8 
  9 
 10 
 11 
 12 
 13 
 14 
 15 


Scr# 443 
  0 
  1 
  2 
  3 
  4 
  5 
  6 
  7 
  8 
  9 
 10 
 11 
 12 
 13 
 14 
 15 


Scr# 444 
  0 
  1 
  2 
  3 
  4 
  5 
  6 
  7 
  8 
  9 
 10 
 11 
 12 
 13 
 14 
 15 


Scr# 445 
  0 
  1 
  2 
  3 
  4 
  5 
  6 
  7 
  8 
  9 
 10 
 11 
 12 
 13 
 14 
 15 


Scr# 446 
  0 
  1 
  2 
  3 
  4 
  5 
  6 
  7 
  8 
  9 
 10 
 11 
 12 
 13 
 14 
 15 


Scr# 447 
  0 
  1 
  2 
  3 
  4 
  5 
  6 
  7 
  8 
  9 
 10 
 11 
 12 
 13 
 14 
 15 


Scr# 448 
  0 
  1 
  2 
  3 
  4 
  5 
  6 
  7 
  8 
  9 
 10 
 11 
 12 
 13 
 14 
 15 


Scr# 449 
  0 
  1 
  2 
  3 
  4 
  5 
  6 
  7 
  8 
  9 
 10 
 11 
 12 
 13 
 14 
 15 


Scr# 450 
  0 
  1 
  2 
  3 
  4 
  5 
  6 
  7 
  8 
  9 
 10 
 11 
 12 
 13 
 14 
 15 


Scr# 451 
  0 
  1 
  2 
  3 
  4 
  5 
  6 
  7 
  8 
  9 
 10 
 11 
 12 
 13 
 14 
 15 


Scr# 452 
  0 
  1 
  2 
  3 
  4 
  5 
  6 
  7 
  8 
  9 
 10 
 11 
 12 
 13 
 14 
 15 


Scr# 453 
  0 
  1 
  2 
  3 
  4 
  5 
  6 
  7 
  8 
  9 
 10 
 11 
 12 
 13 
 14 
 15 


Scr# 454 
  0 
  1 
  2 
  3 
  4 
  5 
  6 
  7 
  8 
  9 
 10 
 11 
 12 
 13 
 14 
 15 


Scr# 455 
  0 
  1 
  2 
  3 
  4 
  5 
  6 
  7 
  8 
  9 
 10 
 11 
 12 
 13 
 14 
 15 


Scr# 456 
  0 
  1 
  2 
  3 
  4 
  5 
  6 
  7 
  8 
  9 
 10 
 11 
 12 
 13 
 14 
 15 


Scr# 457 
  0 
  1 
  2 
  3 
  4 
  5 
  6 
  7 
  8 
  9 
 10 
 11 
 12 
 13 
 14 
 15 


Scr# 458 
  0 
  1 
  2 
  3 
  4 
  5 
  6 
  7 
  8 
  9 
 10 
 11 
 12 
 13 
 14 
 15 


Scr# 459 
  0 
  1 
  2 
  3 
  4 
  5 
  6 
  7 
  8 
  9 
 10 
 11 
 12 
 13 
 14 
 15 


Scr# 460 
  0 
  1 
  2 
  3 
  4 
  5 
  6 
  7 
  8 
  9 
 10 
 11 
 12 
 13 
 14 
 15 


Scr# 461 
  0 
  1 
  2 
  3 
  4 
  5 
  6 
  7 
  8 
  9 
 10 
 11 
 12 
 13 
 14 
 15 


Scr# 462 
  0 
  1 
  2 
  3 
  4 
  5 
  6 
  7 
  8 
  9 
 10 
 11 
 12 
 13 
 14 
 15 


Scr# 463 
  0 
  1 
  2 
  3 
  4 
  5 
  6 
  7 
  8 
  9 
 10 
 11 
 12 
 13 
 14 
 15 


Scr# 464 
  0 
  1 
  2 
  3 
  4 
  5 
  6 
  7 
  8 
  9 
 10 
 11 
 12 
 13 
 14 
 15 


Scr# 465 
  0 
  1 
  2 
  3 
  4 
  5 
  6 
  7 
  8 
  9 
 10 
 11 
 12 
 13 
 14 
 15 


Scr# 466 
  0 
  1 
  2 
  3 
  4 
  5 
  6 
  7 
  8 
  9 
 10 
 11 
 12 
 13 
 14 
 15 


Scr# 467 
  0 
  1 
  2 
  3 
  4 
  5 
  6 
  7 
  8 
  9 
 10 
 11 
 12 
 13 
 14 
 15 


Scr# 468 
  0 
  1 
  2 
  3 
  4 
  5 
  6 
  7 
  8 
  9 
 10 
 11 
 12 
 13 
 14 
 15 


Scr# 469 
  0 
  1 
  2 
  3 
  4 
  5 
  6 
  7 
  8 
  9 
 10 
 11 
 12 
 13 
 14 
 15 


Scr# 470 
  0 
  1 
  2 
  3 
  4 
  5 
  6 
  7 
  8 
  9 
 10 
 11 
 12 
 13 
 14 
 15 


Scr# 471 
  0 
  1 
  2 
  3 
  4 
  5 
  6 
  7 
  8 
  9 
 10 
 11 
 12 
 13 
 14 
 15 


Scr# 472 
  0 
  1 
  2 
  3 
  4 
  5 
  6 
  7 
  8 
  9 
 10 
 11 
 12 
 13 
 14 
 15 


Scr# 473 
  0 
  1 
  2 
  3 
  4 
  5 
  6 
  7 
  8 
  9 
 10 
 11 
 12 
 13 
 14 
 15 


Scr# 474 
  0 
  1 
  2 
  3 
  4 
  5 
  6 
  7 
  8 
  9 
 10 
 11 
 12 
 13 
 14 
 15 


Scr# 475 
  0 
  1 
  2 
  3 
  4 
  5 
  6 
  7 
  8 
  9 
 10 
 11 
 12 
 13 
 14 
 15 


Scr# 476 
  0 
  1 
  2 
  3 
  4 
  5 
  6 
  7 
  8 
  9 
 10 
 11 
 12 
 13 
 14 
 15 


Scr# 477 
  0 
  1 
  2 
  3 
  4 
  5 
  6 
  7 
  8 
  9 
 10 
 11 
 12 
 13 
 14 
 15 


Scr# 478 
  0 
  1 
  2 
  3 
  4 
  5 
  6 
  7 
  8 
  9 
 10 
 11 
 12 
 13 
 14 
 15 


Scr# 479 
  0 
  1 
  2 
  3 
  4 
  5 
  6 
  7 
  8 
  9 
 10 
 11 
 12 
 13 
 14 
 15 


Scr# 480 
  0 
  1 
  2 
  3 
  4 
  5 
  6 
  7 
  8 
  9 
 10 
 11 
 12 
 13 
 14 
 15 


Scr# 481 
  0 
  1 
  2 
  3 
  4 
  5 
  6 
  7 
  8 
  9 
 10 
 11 
 12 
 13 
 14 
 15 


Scr# 482 
  0 
  1 
  2 
  3 
  4 
  5 
  6 
  7 
  8 
  9 
 10 
 11 
 12 
 13 
 14 
 15 


Scr# 483 
  0 
  1 
  2 
  3 
  4 
  5 
  6 
  7 
  8 
  9 
 10 
 11 
 12 
 13 
 14 
 15 


Scr# 484 
  0 
  1 
  2 
  3 
  4 
  5 
  6 
  7 
  8 
  9 
 10 
 11 
 12 
 13 
 14 
 15 


Scr# 485 
  0 
  1 
  2 
  3 
  4 
  5 
  6 
  7 
  8 
  9 
 10 
 11 
 12 
 13 
 14 
 15 


Scr# 486 
  0 
  1 
  2 
  3 
  4 
  5 
  6 
  7 
  8 
  9 
 10 
 11 
 12 
 13 
 14 
 15 


Scr# 487 
  0 
  1 
  2 
  3 
  4 
  5 
  6 
  7 
  8 
  9 
 10 
 11 
 12 
 13 
 14 
 15 


Scr# 488 
  0 
  1 
  2 
  3 
  4 
  5 
  6 
  7 
  8 
  9 
 10 
 11 
 12 
 13 
 14 
 15 


Scr# 489 
  0 
  1 
  2 
  3 
  4 
  5 
  6 
  7 
  8 
  9 
 10 
 11 
 12 
 13 
 14 
 15 


Scr# 490 
  0 
  1 
  2 
  3 
  4 
  5 
  6 
  7 
  8 
  9 
 10 
 11 
 12 
 13 
 14 
 15 


Scr# 491 
  0 
  1 
  2 
  3 
  4 
  5 
  6 
  7 
  8 
  9 
 10 
 11 
 12 
 13 
 14 
 15 


Scr# 492 
  0 
  1 
  2 
  3 
  4 
  5 
  6 
  7 
  8 
  9 
 10 
 11 
 12 
 13 
 14 
 15 


Scr# 493 
  0 
  1 
  2 
  3 
  4 
  5 
  6 
  7 
  8 
  9 
 10 
 11 
 12 
 13 
 14 
 15 


Scr# 494 
  0 
  1 
  2 
  3 
  4 
  5 
  6 
  7 
  8 
  9 
 10 
 11 
 12 
 13 
 14 
 15 


Scr# 495 
  0 
  1 
  2 
  3 
  4 
  5 
  6 
  7 
  8 
  9 
 10 
 11 
 12 
 13 
 14 
 15 


Scr# 496 
  0 
  1 
  2 
  3 
  4 
  5 
  6 
  7 
  8 
  9 
 10 
 11 
 12 
 13 
 14 
 15 


Scr# 497 
  0 
  1 
  2 
  3 
  4 
  5 
  6 
  7 
  8 
  9 
 10 
 11 
 12 
 13 
 14 
 15 


Scr# 498 
  0 
  1 
  2 
  3 
  4 
  5 
  6 
  7 
  8 
  9 
 10 
 11 
 12 
 13 
 14 
 15 


Scr# 499 
  0 
  1 
  2 
  3 
  4 
  5 
  6 
  7 
  8 
  9 
 10 
 11 
 12 
 13 
 14 
 15 


Scr# 500 
  0 ( Next Registers )
  1 HEX 253B CONSTANT REG-DATA
  2 HEX 243B CONSTANT REG-SELECT
  3 : REG-RD ( p -- v ) REG-SELECT P! REG-DATA P@ ;
  4 : REG-WR ( v p -- ) REG-SELECT P! REG-DATA P! ;
  5 \
  6 : B.  ( n -- ) \ display a number in binary
  7  BASE @ >R  S->D  2DUP HEX <# # # #> TYPE SPACE
  8  2 BASE ! <# 8 0 DO # LOOP #> TYPE  R> BASE ! ;
  9 \
 10 CR ." Machine ID    " 00 REG-RD B.
 11 CR ." Core Version  " 01 REG-RD B.
 12 CR ." Machine type  " 03 REG-RD B.
 13 CR ." CPU Speed     " 07 REG-RD 7 AND DUP .
 14 DECIMAL 35 SWAP LSHIFT S->D <# # CHAR . HOLD #S #>
 15 SPACE TYPE SPACE ." MHz" CR


Scr# 501 
  0 ( Next Registers )
  1 HEX
  2 CR ." Reset         " 02 REG-RD B.
  3 CR ." Peripheal 1   " 05 REG-RD B.
  4 CR ." Peripheal 2   " 06 REG-RD B.
  5 CR ." Peripheal 3   " 08 REG-RD B.
  6 CR ." Peripheal 4   " 09 REG-RD B.
  7 CR ." Core Boot     " 10 REG-RD B.
  8 CR ." Video Timing  " 11 REG-RD B.
  9 CR ." Layer 2 Active RAM Bank " 12 REG-RD B.
 10 CR ." Layer 2 Shadow RAM Bank " 13 REG-RD B.
 11 CR ." Global Transparency Colour " 14 REG-RD B.
 12 CR ." Sprite and Layer System Setup " 15 REG-RD B.
 13 CR ." Layer 2 Horizontal Scroll Control " 16 REG-RD B.
 14 CR ." Layer 2 Vertical Scroll Control   " 17 REG-RD B.
 15 -->


Scr# 502 
  0 ( Next Registers )
  1 HEX
  2 CR ." Layer 2 Clip Window Definition    " 18 REG-RD B.
  3 CR ." Sprites Clip Window Definition    " 19 REG-RD B.
  4 CR ." Layer 0 Clip Window Definition    " 1A REG-RD B.
  5 CR ." Layer 3 Clip Window Definition    " 1B REG-RD B.
  6 CR ." Clip Window Control               " 1C REG-RD B.
  7 CR ." Active Video Line " 1E REG-RD 100 * 1F REG-RD + .
  8 CR ." Line Interrupt Control      " 22 REG-RD .
  9 CR ." Line Interrupt Value        " 23 REG-RD .
 10 
 11 
 12 
 13 
 14 
 15 


Scr# 503 
  0 ( Next Registers )
  1 HEX
  2 CR ." ULA Horizontal Scroll Control " 26 REG-RD .
  3 CR ." ULA Vertical   Scroll Control " 27 REG-RD .
  4 CR ." Stored Palette Value  " 28 REG-RD .
  5 CR ." Layer 3 Horizontal Scroll Control "
  6                           2F REG-RD 100 * 30 REG-RD + .
  7 CR ." Layer 3 Vetical Scroll Control " 31 REG-RD .
  8 CR ." Layer 1,0 Horizontal Scroll Control " 32 REG-RD .
  9 CR ." Layer 1,0 Vertical   Scroll Control " 33 REG-RD .
 10 
 11 
 12 
 13 
 14 
 15 


Scr# 504 
  0 ( Next Registers )
  1 HEX
  2 
  3 
  4 
  5 
  6 
  7 
  8 
  9 
 10 
 11 
 12 
 13 
 14 
 15 


Scr# 505 
  0 
  1 
  2 
  3 
  4 
  5 
  6 
  7 
  8 
  9 
 10 
 11 
 12 
 13 
 14 
 15 


Scr# 506 
  0 
  1 
  2 
  3 
  4 
  5 
  6 
  7 
  8 
  9 
 10 
 11 
 12 
 13 
 14 
 15 


Scr# 507 
  0 
  1 
  2 
  3 
  4 
  5 
  6 
  7 
  8 
  9 
 10 
 11 
 12 
 13 
 14 
 15 


Scr# 508 
  0 
  1 
  2 
  3 
  4 
  5 
  6 
  7 
  8 
  9 
 10 
 11 
 12 
 13 
 14 
 15 


Scr# 509 
  0 
  1 
  2 
  3 
  4 
  5 
  6 
  7 
  8 
  9 
 10 
 11 
 12 
 13 
 14 
 15 


Scr# 510 
  0 
  1 
  2 
  3 
  4 
  5 
  6 
  7 
  8 
  9 
 10 
 11 
 12 
 13 
 14 
 15 


Scr# 511 
  0 
  1 
  2 
  3 
  4 
  5 
  6 
  7 
  8 
  9 
 10 
 11 
 12 
 13 
 14 
 15 


Scr# 512 
  0 LDDRXU<0F8CPDRmU<0F9INDRV<0F:O
  1 TDRV<0F;RLC,V<0hFRRCAV<0hFRLUV
  2 <0hFRRiV<0hFSLA|V<0hF SRAV<0hF(
  3 SLL#V<0hF0SRL7V<0hF8BITKV<0hF@?
  4 RES_V<0hF?SETsV<0hF@?0|W<00H81
  5 |W<00H82|,W<00H83|=W<00H84|NW<00H 8
  6 5|_W<00H(86|pW<00H087|W<00H88EX(SP)IXW
  7 <0RFcEX(SP)IY#W<0GcJPIX<W<0RFiLDS
  8 
  9 
 10 
 11 
 12 
 13 
 14 
 15 


Scr# 513 
  0 
  1 
  2 
  3 
  4 
  5 
  6 
  7 
  8 
  9 
 10 
 11 
 12 
 13 
 14 
 15 


Scr# 514 
  0 
  1 
  2 
  3 
  4 
  5 
  6 
  7 
  8 
  9 
 10 
 11 
 12 
 13 
 14 
 15 


Scr# 515 
  0 
  1 
  2 
  3 
  4 
  5 
  6 
  7 
  8 
  9 
 10 
 11 
 12 
 13 
 14 
 15 


Scr# 516 
  0 
  1 
  2 
  3 
  4 
  5 
  6 
  7 
  8 
  9 
 10 
 11 
 12 
 13 
 14 
 15 


Scr# 517 
  0 
  1 
  2 
  3 
  4 
  5 
  6 
  7 
  8 
  9 
 10 
 11 
 12 
 13 
 14 
 15 


Scr# 518 
  0 
  1 
  2 
  3 
  4 
  5 
  6 
  7 
  8 
  9 
 10 
 11 
 12 
 13 
 14 
 15 


Scr# 519 
  0 
  1 
  2 
  3 
  4 
  5 
  6 
  7 
  8 
  9 
 10 
 11 
 12 
 13 
 14 
 15 


Scr# 520 
  0 
  1 
  2 
  3 
  4 
  5 
  6 
  7 
  8 
  9 
 10 
 11 
 12 
 13 
 14 
 15 


Scr# 521 
  0 
  1 
  2 
  3 
  4 
  5 
  6 
  7 
  8 
  9 
 10 
 11 
 12 
 13 
 14 
 15 


Scr# 522 
  0 
  1 
  2 
  3 
  4 
  5 
  6 
  7 
  8 
  9 
 10 
 11 
 12 
 13 
 14 
 15 


Scr# 523 
  0 
  1 
  2 
  3 
  4 
  5 
  6 
  7 
  8 
  9 
 10 
 11 
 12 
 13 
 14 
 15 


Scr# 524 
  0 
  1 
  2 
  3 
  4 
  5 
  6 
  7 
  8 
  9 
 10 
 11 
 12 
 13 
 14 
 15 


Scr# 525 
  0 
  1 
  2 
  3 
  4 
  5 
  6 
  7 
  8 
  9 
 10 
 11 
 12 
 13 
 14 
 15 


Scr# 526 
  0 
  1 
  2 
  3 
  4 
  5 
  6 
  7 
  8 
  9 
 10 
 11 
 12 
 13 
 14 
 15 


Scr# 527 
  0 
  1 
  2 
  3 
  4 
  5 
  6 
  7 
  8 
  9 
 10 
 11 
 12 
 13 
 14 
 15 


Scr# 528 
  0 
  1 
  2 
  3 
  4 
  5 
  6 
  7 
  8 
  9 
 10 
 11 
 12 
 13 
 14 
 15 


Scr# 529 
  0 
  1 
  2 
  3 
  4 
  5 
  6 
  7 
  8 
  9 
 10 
 11 
 12 
 13 
 14 
 15 


Scr# 530 
  0 
  1 
  2 
  3 
  4 
  5 
  6 
  7 
  8 
  9 
 10 
 11 
 12 
 13 
 14 
 15 


Scr# 531 
  0 
  1 
  2 
  3 
  4 
  5 
  6 
  7 
  8 
  9 
 10 
 11 
 12 
 13 
 14 
 15 


Scr# 532 
  0 
  1 
  2 
  3 
  4 
  5 
  6 
  7 
  8 
  9 
 10 
 11 
 12 
 13 
 14 
 15 


Scr# 533 
  0 
  1 
  2 
  3 
  4 
  5 
  6 
  7 
  8 
  9 
 10 
 11 
 12 
 13 
 14 
 15 


Scr# 534 
  0 
  1 
  2 
  3 
  4 
  5 
  6 
  7 
  8 
  9 
 10 
 11 
 12 
 13 
 14 
 15 


Scr# 535 
  0 
  1 
  2 
  3 
  4 
  5 
  6 
  7 
  8 
  9 
 10 
 11 
 12 
 13 
 14 
 15 


Scr# 536 
  0 
  1 
  2 
  3 
  4 
  5 
  6 
  7 
  8 
  9 
 10 
 11 
 12 
 13 
 14 
 15 


Scr# 537 
  0 ( VALUE TO )
  1 : VALUE ( x ccc -- )
  2         ( -- n )
  3  [COMPILE] CONSTANT
  4 ; IMMEDIATE
  5 \
  6 : TO ( n -- ccc )
  7  ' >BODY
  8  STATE @ IF
  9   COMPILE LIT
 10   , COMPILE !
 11  ELSE
 12             !
 13  ENDIF
 14 ; IMMEDIATE
 15 


Scr# 538 
  0 \ test
  1 123 VALUE XXX
  2 456 VALUE YYY
  3 789 VALUE ZZZ
  4 XXX    TO ZZZ
  5 : TEST
  6  ZZZ TO YYY
  7 ;
  8 
  9 
 10 
 11 
 12 
 13 
 14 
 15 


Scr# 539 
  0 
  1 
  2 
  3 
  4 
  5 
  6 
  7 
  8 
  9 
 10 
 11 
 12 
 13 
 14 
 15 


Scr# 540 
  0 
  1 
  2 
  3 
  4 
  5 
  6 
  7 
  8 
  9 
 10 
 11 
 12 
 13 
 14 
 15 


Scr# 541 
  0 
  1 
  2 
  3 
  4 
  5 
  6 
  7 
  8 
  9 
 10 
 11 
 12 
 13 
 14 
 15 


Scr# 542 
  0 
  1 
  2 
  3 
  4 
  5 
  6 
  7 
  8 
  9 
 10 
 11 
 12 
 13 
 14 
 15 


Scr# 543 
  0 
  1 
  2 
  3 
  4 
  5 
  6 
  7 
  8 
  9 
 10 
 11 
 12 
 13 
 14 
 15 


Scr# 544 
  0 
  1 
  2 
  3 
  4 
  5 
  6 
  7 
  8 
  9 
 10 
 11 
 12 
 13 
 14 
 15 


Scr# 545 
  0 
  1 
  2 
  3 
  4 
  5 
  6 
  7 
  8 
  9 
 10 
 11 
 12 
 13 
 14 
 15 


Scr# 546 
  0 
  1 
  2 
  3 
  4 
  5 
  6 
  7 
  8 
  9 
 10 
 11 
 12 
 13 
 14 
 15 


Scr# 547 
  0 
  1 
  2 
  3 
  4 
  5 
  6 
  7 
  8 
  9 
 10 
 11 
 12 
 13 
 14 
 15 


Scr# 548 
  0 
  1 
  2 
  3 
  4 
  5 
  6 
  7 
  8 
  9 
 10 
 11 
 12 
 13 
 14 
 15 


Scr# 549 
  0 
  1 
  2 
  3 
  4 
  5 
  6 
  7 
  8 
  9 
 10 
 11 
 12 
 13 
 14 
 15 


Scr# 550 
  0 
  1 
  2 
  3 
  4 
  5 
  6 
  7 
  8 
  9 
 10 
 11 
 12 
 13 
 14 
 15 


Scr# 551 
  0 
  1 
  2 
  3 
  4 
  5 
  6 
  7 
  8 
  9 
 10 
 11 
 12 
 13 
 14 
 15 


Scr# 552 
  0 
  1 
  2 
  3 
  4 
  5 
  6 
  7 
  8 
  9 
 10 
 11 
 12 
 13 
 14 
 15 


Scr# 553 
  0 
  1 
  2 
  3 
  4 
  5 
  6 
  7 
  8 
  9 
 10 
 11 
 12 
 13 
 14 
 15 


Scr# 554 
  0 
  1 
  2 
  3 
  4 
  5 
  6 
  7 
  8 
  9 
 10 
 11 
 12 
 13 
 14 
 15 


Scr# 555 
  0 
  1 
  2 
  3 
  4 
  5 
  6 
  7 
  8 
  9 
 10 
 11 
 12 
 13 
 14 
 15 


Scr# 556 
  0 
  1 
  2 
  3 
  4 
  5 
  6 
  7 
  8 
  9 
 10 
 11 
 12 
 13 
 14 
 15 


Scr# 557 
  0 
  1 
  2 
  3 
  4 
  5 
  6 
  7 
  8 
  9 
 10 
 11 
 12 
 13 
 14 
 15 


Scr# 558 
  0 
  1 
  2 
  3 
  4 
  5 
  6 
  7 
  8 
  9 
 10 
 11 
 12 
 13 
 14 
 15 


Scr# 559 
  0 
  1 
  2 
  3 
  4 
  5 
  6 
  7 
  8 
  9 
 10 
 11 
 12 
 13 
 14 
 15 


Scr# 560 
  0 
  1 
  2 
  3 
  4 
  5 
  6 
  7 
  8 
  9 
 10 
 11 
 12 
 13 
 14 
 15 


Scr# 561 
  0 
  1 
  2 
  3 
  4 
  5 
  6 
  7 
  8 
  9 
 10 
 11 
 12 
 13 
 14 
 15 


Scr# 562 
  0 
  1 
  2 
  3 
  4 
  5 
  6 
  7 
  8 
  9 
 10 
 11 
 12 
 13 
 14 
 15 


Scr# 563 
  0 
  1 
  2 
  3 
  4 
  5 
  6 
  7 
  8 
  9 
 10 
 11 
 12 
 13 
 14 
 15 


Scr# 564 
  0 
  1 
  2 
  3 
  4 
  5 
  6 
  7 
  8 
  9 
 10 
 11 
 12 
 13 
 14 
 15 


Scr# 565 
  0 
  1 
  2 
  3 
  4 
  5 
  6 
  7 
  8 
  9 
 10 
 11 
 12 
 13 
 14 
 15 


Scr# 566 
  0 
  1 
  2 
  3 
  4 
  5 
  6 
  7 
  8 
  9 
 10 
 11 
 12 
 13 
 14 
 15 


Scr# 567 
  0 
  1 
  2 
  3 
  4 
  5 
  6 
  7 
  8 
  9 
 10 
 11 
 12 
 13 
 14 
 15 


Scr# 568 
  0 
  1 
  2 
  3 
  4 
  5 
  6 
  7 
  8 
  9 
 10 
 11 
 12 
 13 
 14 
 15 


Scr# 569 
  0 
  1 
  2 
  3 
  4 
  5 
  6 
  7 
  8 
  9 
 10 
 11 
 12 
 13 
 14 
 15 


Scr# 570 
  0 
  1 
  2 
  3 
  4 
  5 
  6 
  7 
  8 
  9 
 10 
 11 
 12 
 13 
 14 
 15 


Scr# 571 
  0 
  1 
  2 
  3 
  4 
  5 
  6 
  7 
  8 
  9 
 10 
 11 
 12 
 13 
 14 
 15 


Scr# 572 
  0 
  1 
  2 
  3 
  4 
  5 
  6 
  7 
  8 
  9 
 10 
 11 
 12 
 13 
 14 
 15 


Scr# 573 
  0 
  1 
  2 
  3 
  4 
  5 
  6 
  7 
  8 
  9 
 10 
 11 
 12 
 13 
 14 
 15 


Scr# 574 
  0 
  1 
  2 
  3 
  4 
  5 
  6 
  7 
  8 
  9 
 10 
 11 
 12 
 13 
 14 
 15 


Scr# 575 
  0 
  1 
  2 
  3 
  4 
  5 
  6 
  7 
  8 
  9 
 10 
 11 
 12 
 13 
 14 
 15 


Scr# 576 
  0 
  1 
  2 
  3 
  4 
  5 
  6 
  7 
  8 
  9 
 10 
 11 
 12 
 13 
 14 
 15 


Scr# 577 
  0 
  1 
  2 
  3 
  4 
  5 
  6 
  7 
  8 
  9 
 10 
 11 
 12 
 13 
 14 
 15 


Scr# 578 
  0 
  1 
  2 
  3 
  4 
  5 
  6 
  7 
  8 
  9 
 10 
 11 
 12 
 13 
 14 
 15 


Scr# 579 
  0 
  1 
  2 
  3 
  4 
  5 
  6 
  7 
  8 
  9 
 10 
 11 
 12 
 13 
 14 
 15 


Scr# 580 
  0 
  1 
  2 
  3 
  4 
  5 
  6 
  7 
  8 
  9 
 10 
 11 
 12 
 13 
 14 
 15 


Scr# 581 
  0 
  1 
  2 
  3 
  4 
  5 
  6 
  7 
  8 
  9 
 10 
 11 
 12 
 13 
 14 
 15 


Scr# 582 
  0 
  1 
  2 
  3 
  4 
  5 
  6 
  7 
  8 
  9 
 10 
 11 
 12 
 13 
 14 
 15 


Scr# 583 
  0 
  1 
  2 
  3 
  4 
  5 
  6 
  7 
  8 
  9 
 10 
 11 
 12 
 13 
 14 
 15 


Scr# 584 
  0 
  1 
  2 
  3 
  4 
  5 
  6 
  7 
  8 
  9 
 10 
 11 
 12 
 13 
 14 
 15 


Scr# 585 
  0 
  1 
  2 
  3 
  4 
  5 
  6 
  7 
  8 
  9 
 10 
 11 
 12 
 13 
 14 
 15 


Scr# 586 
  0 
  1 
  2 
  3 
  4 
  5 
  6 
  7 
  8 
  9 
 10 
 11 
 12 
 13 
 14 
 15 


Scr# 587 
  0 
  1 
  2 
  3 
  4 
  5 
  6 
  7 
  8 
  9 
 10 
 11 
 12 
 13 
 14 
 15 


Scr# 588 
  0 
  1 
  2 
  3 
  4 
  5 
  6 
  7 
  8 
  9 
 10 
 11 
 12 
 13 
 14 
 15 


Scr# 589 
  0 
  1 
  2 
  3 
  4 
  5 
  6 
  7 
  8 
  9 
 10 
 11 
 12 
 13 
 14 
 15 


Scr# 590 
  0 
  1 
  2 
  3 
  4 
  5 
  6 
  7 
  8 
  9 
 10 
 11 
 12 
 13 
 14 
 15 


Scr# 591 
  0 
  1 
  2 
  3 
  4 
  5 
  6 
  7 
  8 
  9 
 10 
 11 
 12 
 13 
 14 
 15 


Scr# 592 
  0 
  1 
  2 
  3 
  4 
  5 
  6 
  7 
  8 
  9 
 10 
 11 
 12 
 13 
 14 
 15 


Scr# 593 
  0 
  1 
  2 
  3 
  4 
  5 
  6 
  7 
  8 
  9 
 10 
 11 
 12 
 13 
 14 
 15 


Scr# 594 
  0 
  1 
  2 
  3 
  4 
  5 
  6 
  7 
  8 
  9 
 10 
 11 
 12 
 13 
 14 
 15 


Scr# 595 
  0 
  1 
  2 
  3 
  4 
  5 
  6 
  7 
  8 
  9 
 10 
 11 
 12 
 13 
 14 
 15 


Scr# 596 
  0 
  1 
  2 
  3 
  4 
  5 
  6 
  7 
  8 
  9 
 10 
 11 
 12 
 13 
 14 
 15 


Scr# 597 
  0 
  1 
  2 
  3 
  4 
  5 
  6 
  7 
  8 
  9 
 10 
 11 
 12 
 13 
 14 
 15 


Scr# 598 
  0 
  1 
  2 
  3 
  4 
  5 
  6 
  7 
  8 
  9 
 10 
 11 
 12 
 13 
 14 
 15 


Scr# 599 
  0 
  1 
  2 
  3 
  4 
  5 
  6 
  7 
  8 
  9 
 10 
 11 
 12 
 13 
 14 
 15 


Scr# 600 
  0 
  1 
  2 
  3 
  4 
  5 
  6 
  7 
  8 
  9 
 10 
 11 
 12 
 13 
 14 
 15 


Scr# 601 
  0 
  1 
  2 
  3 
  4 
  5 
  6 
  7 
  8 
  9 
 10 
 11 
 12 
 13 
 14 
 15 


Scr# 602 
  0 
  1 
  2 
  3 
  4 
  5 
  6 
  7 
  8 
  9 
 10 
 11 
 12 
 13 
 14 
 15 


Scr# 603 
  0 
  1 
  2 
  3 
  4 
  5 
  6 
  7 
  8 
  9 
 10 
 11 
 12 
 13 
 14 
 15 


Scr# 604 
  0 
  1 
  2 
  3 
  4 
  5 
  6 
  7 
  8 
  9 
 10 
 11 
 12 
 13 
 14 
 15 


Scr# 605 
  0 
  1 
  2 
  3 
  4 
  5 
  6 
  7 
  8 
  9 
 10 
 11 
 12 
 13 
 14 
 15 


Scr# 606 
  0 
  1 
  2 
  3 
  4 
  5 
  6 
  7 
  8 
  9 
 10 
 11 
 12 
 13 
 14 
 15 


Scr# 607 
  0 
  1 
  2 
  3 
  4 
  5 
  6 
  7 
  8 
  9 
 10 
 11 
 12 
 13 
 14 
 15 


Scr# 608 
  0 
  1 
  2 
  3 
  4 
  5 
  6 
  7 
  8 
  9 
 10 
 11 
 12 
 13 
 14 
 15 


Scr# 609 
  0 
  1 
  2 
  3 
  4 
  5 
  6 
  7 
  8 
  9 
 10 
 11 
 12 
 13 
 14 
 15 


Scr# 610 
  0 
  1 
  2 
  3 
  4 
  5 
  6 
  7 
  8 
  9 
 10 
 11 
 12 
 13 
 14 
 15 


Scr# 611 
  0 
  1 
  2 
  3 
  4 
  5 
  6 
  7 
  8 
  9 
 10 
 11 
 12 
 13 
 14 
 15 


Scr# 612 
  0 
  1 
  2 
  3 
  4 
  5 
  6 
  7 
  8 
  9 
 10 
 11 
 12 
 13 
 14 
 15 


Scr# 613 
  0 
  1 
  2 
  3 
  4 
  5 
  6 
  7 
  8 
  9 
 10 
 11 
 12 
 13 
 14 
 15 


Scr# 614 
  0 
  1 
  2 
  3 
  4 
  5 
  6 
  7 
  8 
  9 
 10 
 11 
 12 
 13 
 14 
 15 


Scr# 615 
  0 
  1 
  2 
  3 
  4 
  5 
  6 
  7 
  8 
  9 
 10 
 11 
 12 
 13 
 14 
 15 


Scr# 616 
  0 
  1 
  2 
  3 
  4 
  5 
  6 
  7 
  8 
  9 
 10 
 11 
 12 
 13 
 14 
 15 


Scr# 617 
  0 
  1 
  2 
  3 
  4 
  5 
  6 
  7 
  8 
  9 
 10 
 11 
 12 
 13 
 14 
 15 


Scr# 618 
  0 
  1 
  2 
  3 
  4 
  5 
  6 
  7 
  8 
  9 
 10 
 11 
 12 
 13 
 14 
 15 


Scr# 619 
  0 
  1 
  2 
  3 
  4 
  5 
  6 
  7 
  8 
  9 
 10 
 11 
 12 
 13 
 14 
 15 


Scr# 620 
  0 
  1 
  2 
  3 
  4 
  5 
  6 
  7 
  8 
  9 
 10 
 11 
 12 
 13 
 14 
 15 


Scr# 621 
  0 
  1 
  2 
  3 
  4 
  5 
  6 
  7 
  8 
  9 
 10 
 11 
 12 
 13 
 14 
 15 


Scr# 622 
  0 
  1 
  2 
  3 
  4 
  5 
  6 
  7 
  8 
  9 
 10 
 11 
 12 
 13 
 14 
 15 


Scr# 623 
  0 
  1 
  2 
  3 
  4 
  5 
  6 
  7 
  8 
  9 
 10 
 11 
 12 
 13 
 14 
 15 


Scr# 624 
  0 
  1 
  2 
  3 
  4 
  5 
  6 
  7 
  8 
  9 
 10 
 11 
 12 
 13 
 14 
 15 


Scr# 625 
  0 
  1 
  2 
  3 
  4 
  5 
  6 
  7 
  8 
  9 
 10 
 11 
 12 
 13 
 14 
 15 


Scr# 626 
  0 
  1 
  2 
  3 
  4 
  5 
  6 
  7 
  8 
  9 
 10 
 11 
 12 
 13 
 14 
 15 


Scr# 627 
  0 
  1 
  2 
  3 
  4 
  5 
  6 
  7 
  8 
  9 
 10 
 11 
 12 
 13 
 14 
 15 


Scr# 628 
  0 
  1 
  2 
  3 
  4 
  5 
  6 
  7 
  8 
  9 
 10 
 11 
 12 
 13 
 14 
 15 


Scr# 629 
  0 
  1 
  2 
  3 
  4 
  5 
  6 
  7 
  8 
  9 
 10 
 11 
 12 
 13 
 14 
 15 


Scr# 630 
  0 
  1 
  2 
  3 
  4 
  5 
  6 
  7 
  8 
  9 
 10 
 11 
 12 
 13 
 14 
 15 


Scr# 631 
  0 
  1 
  2 
  3 
  4 
  5 
  6 
  7 
  8 
  9 
 10 
 11 
 12 
 13 
 14 
 15 


Scr# 632 
  0 
  1 
  2 
  3 
  4 
  5 
  6 
  7 
  8 
  9 
 10 
 11 
 12 
 13 
 14 
 15 


Scr# 633 
  0 
  1 
  2 
  3 
  4 
  5 
  6 
  7 
  8 
  9 
 10 
 11 
 12 
 13 
 14 
 15 


Scr# 634 
  0 
  1 
  2 
  3 
  4 
  5 
  6 
  7 
  8 
  9 
 10 
 11 
 12 
 13 
 14 
 15 


Scr# 635 
  0 
  1 
  2 
  3 
  4 
  5 
  6 
  7 
  8 
  9 
 10 
 11 
 12 
 13 
 14 
 15 


Scr# 636 
  0 
  1 
  2 
  3 
  4 
  5 
  6 
  7 
  8 
  9 
 10 
 11 
 12 
 13 
 14 
 15 


Scr# 637 
  0 
  1 
  2 
  3 
  4 
  5 
  6 
  7 
  8 
  9 
 10 
 11 
 12 
 13 
 14 
 15 


Scr# 638 
  0 
  1 
  2 
  3 
  4 
  5 
  6 
  7 
  8 
  9 
 10 
 11 
 12 
 13 
 14 
 15 


Scr# 639 
  0 
  1 
  2 
  3 
  4 
  5 
  6 
  7 
  8 
  9 
 10 
 11 
 12 
 13 
 14 
 15 


Scr# 640 
  0 
  1 
  2 
  3 
  4 
  5 
  6 
  7 
  8 
  9 
 10 
 11 
 12 
 13 
 14 
 15 


Scr# 641 
  0 
  1 
  2 
  3 
  4 
  5 
  6 
  7 
  8 
  9 
 10 
 11 
 12 
 13 
 14 
 15 


Scr# 642 
  0 
  1 
  2 
  3 
  4 
  5 
  6 
  7 
  8 
  9 
 10 
 11 
 12 
 13 
 14 
 15 


Scr# 643 
  0 
  1 
  2 
  3 
  4 
  5 
  6 
  7 
  8 
  9 
 10 
 11 
 12 
 13 
 14 
 15 


Scr# 644 
  0 
  1 
  2 
  3 
  4 
  5 
  6 
  7 
  8 
  9 
 10 
 11 
 12 
 13 
 14 
 15 


Scr# 645 
  0 
  1 
  2 
  3 
  4 
  5 
  6 
  7 
  8 
  9 
 10 
 11 
 12 
 13 
 14 
 15 


Scr# 646 
  0 
  1 
  2 
  3 
  4 
  5 
  6 
  7 
  8 
  9 
 10 
 11 
 12 
 13 
 14 
 15 


Scr# 647 
  0 
  1 
  2 
  3 
  4 
  5 
  6 
  7 
  8 
  9 
 10 
 11 
 12 
 13 
 14 
 15 


Scr# 648 
  0 
  1 
  2 
  3 
  4 
  5 
  6 
  7 
  8 
  9 
 10 
 11 
 12 
 13 
 14 
 15 


Scr# 649 
  0 
  1 
  2 
  3 
  4 
  5 
  6 
  7 
  8 
  9 
 10 
 11 
 12 
 13 
 14 
 15 


Scr# 650 
  0 
  1 
  2 
  3 
  4 
  5 
  6 
  7 
  8 
  9 
 10 
 11 
 12 
 13 
 14 
 15 


Scr# 651 
  0 
  1 
  2 
  3 
  4 
  5 
  6 
  7 
  8 
  9 
 10 
 11 
 12 
 13 
 14 
 15 


Scr# 652 
  0 
  1 
  2 
  3 
  4 
  5 
  6 
  7 
  8 
  9 
 10 
 11 
 12 
 13 
 14 
 15 


Scr# 653 
  0 
  1 
  2 
  3 
  4 
  5 
  6 
  7 
  8 
  9 
 10 
 11 
 12 
 13 
 14 
 15 


Scr# 654 
  0 
  1 
  2 
  3 
  4 
  5 
  6 
  7 
  8 
  9 
 10 
 11 
 12 
 13 
 14 
 15 


Scr# 655 
  0 
  1 
  2 
  3 
  4 
  5 
  6 
  7 
  8 
  9 
 10 
 11 
 12 
 13 
 14 
 15 


Scr# 656 
  0 
  1 
  2 
  3 
  4 
  5 
  6 
  7 
  8 
  9 
 10 
 11 
 12 
 13 
 14 
 15 


Scr# 657 
  0 
  1 
  2 
  3 
  4 
  5 
  6 
  7 
  8 
  9 
 10 
 11 
 12 
 13 
 14 
 15 


Scr# 658 
  0 
  1 
  2 
  3 
  4 
  5 
  6 
  7 
  8 
  9 
 10 
 11 
 12 
 13 
 14 
 15 


Scr# 659 
  0 
  1 
  2 
  3 
  4 
  5 
  6 
  7 
  8 
  9 
 10 
 11 
 12 
 13 
 14 
 15 


Scr# 660 
  0 
  1 
  2 
  3 
  4 
  5 
  6 
  7 
  8 
  9 
 10 
 11 
 12 
 13 
 14 
 15 


Scr# 661 
  0 
  1 
  2 
  3 
  4 
  5 
  6 
  7 
  8 
  9 
 10 
 11 
 12 
 13 
 14 
 15 


Scr# 662 
  0 
  1 
  2 
  3 
  4 
  5 
  6 
  7 
  8 
  9 
 10 
 11 
 12 
 13 
 14 
 15 


Scr# 663 
  0 
  1 
  2 
  3 
  4 
  5 
  6 
  7 
  8 
  9 
 10 
 11 
 12 
 13 
 14 
 15 


Scr# 664 
  0 
  1 
  2 
  3 
  4 
  5 
  6 
  7 
  8 
  9 
 10 
 11 
 12 
 13 
 14 
 15 


Scr# 665 
  0 
  1 
  2 
  3 
  4 
  5 
  6 
  7 
  8 
  9 
 10 
 11 
 12 
 13 
 14 
 15 


Scr# 666 
  0 
  1 
  2 
  3 
  4 
  5 
  6 
  7 
  8 
  9 
 10 
 11 
 12 
 13 
 14 
 15 


Scr# 667 
  0 
  1 
  2 
  3 
  4 
  5 
  6 
  7 
  8 
  9 
 10 
 11 
 12 
 13 
 14 
 15 


Scr# 668 
  0 
  1 
  2 
  3 
  4 
  5 
  6 
  7 
  8 
  9 
 10 
 11 
 12 
 13 
 14 
 15 


Scr# 669 
  0 
  1 
  2 
  3 
  4 
  5 
  6 
  7 
  8 
  9 
 10 
 11 
 12 
 13 
 14 
 15 


Scr# 670 
  0 
  1 
  2 
  3 
  4 
  5 
  6 
  7 
  8 
  9 
 10 
 11 
 12 
 13 
 14 
 15 


Scr# 671 
  0 
  1 
  2 
  3 
  4 
  5 
  6 
  7 
  8 
  9 
 10 
 11 
 12 
 13 
 14 
 15 


Scr# 672 
  0 
  1 
  2 
  3 
  4 
  5 
  6 
  7 
  8 
  9 
 10 
 11 
 12 
 13 
 14 
 15 


Scr# 673 
  0 
  1 
  2 
  3 
  4 
  5 
  6 
  7 
  8 
  9 
 10 
 11 
 12 
 13 
 14 
 15 


Scr# 674 
  0 
  1 
  2 
  3 
  4 
  5 
  6 
  7 
  8 
  9 
 10 
 11 
 12 
 13 
 14 
 15 


Scr# 675 
  0 
  1 
  2 
  3 
  4 
  5 
  6 
  7 
  8 
  9 
 10 
 11 
 12 
 13 
 14 
 15 


Scr# 676 
  0 
  1 
  2 
  3 
  4 
  5 
  6 
  7 
  8 
  9 
 10 
 11 
 12 
 13 
 14 
 15 


Scr# 677 
  0 
  1 
  2 
  3 
  4 
  5 
  6 
  7 
  8 
  9 
 10 
 11 
 12 
 13 
 14 
 15 


Scr# 678 
  0 
  1 
  2 
  3 
  4 
  5 
  6 
  7 
  8 
  9 
 10 
 11 
 12 
 13 
 14 
 15 


Scr# 679 
  0 
  1 
  2 
  3 
  4 
  5 
  6 
  7 
  8 
  9 
 10 
 11 
 12 
 13 
 14 
 15 


Scr# 680 
  0 
  1 
  2 
  3 
  4 
  5 
  6 
  7 
  8 
  9 
 10 
 11 
 12 
 13 
 14 
 15 


Scr# 681 
  0 
  1 
  2 
  3 
  4 
  5 
  6 
  7 
  8 
  9 
 10 
 11 
 12 
 13 
 14 
 15 


Scr# 682 
  0 
  1 
  2 
  3 
  4 
  5 
  6 
  7 
  8 
  9 
 10 
 11 
 12 
 13 
 14 
 15 


Scr# 683 
  0 
  1 
  2 
  3 
  4 
  5 
  6 
  7 
  8 
  9 
 10 
 11 
 12 
 13 
 14 
 15 


Scr# 684 
  0 
  1 
  2 
  3 
  4 
  5 
  6 
  7 
  8 
  9 
 10 
 11 
 12 
 13 
 14 
 15 


Scr# 685 
  0 
  1 
  2 
  3 
  4 
  5 
  6 
  7 
  8 
  9 
 10 
 11 
 12 
 13 
 14 
 15 


Scr# 686 
  0 
  1 
  2 
  3 
  4 
  5 
  6 
  7 
  8 
  9 
 10 
 11 
 12 
 13 
 14 
 15 


Scr# 687 
  0 
  1 
  2 
  3 
  4 
  5 
  6 
  7 
  8 
  9 
 10 
 11 
 12 
 13 
 14 
 15 


Scr# 688 
  0 
  1 
  2 
  3 
  4 
  5 
  6 
  7 
  8 
  9 
 10 
 11 
 12 
 13 
 14 
 15 


Scr# 689 
  0 
  1 
  2 
  3 
  4 
  5 
  6 
  7 
  8 
  9 
 10 
 11 
 12 
 13 
 14 
 15 


Scr# 690 
  0 
  1 
  2 
  3 
  4 
  5 
  6 
  7 
  8 
  9 
 10 
 11 
 12 
 13 
 14 
 15 


Scr# 691 
  0 
  1 
  2 
  3 
  4 
  5 
  6 
  7 
  8 
  9 
 10 
 11 
 12 
 13 
 14 
 15 


Scr# 692 
  0 
  1 
  2 
  3 
  4 
  5 
  6 
  7 
  8 
  9 
 10 
 11 
 12 
 13 
 14 
 15 


Scr# 693 
  0 
  1 
  2 
  3 
  4 
  5 
  6 
  7 
  8 
  9 
 10 
 11 
 12 
 13 
 14 
 15 


Scr# 694 
  0 
  1 
  2 
  3 
  4 
  5 
  6 
  7 
  8 
  9 
 10 
 11 
 12 
 13 
 14 
 15 


Scr# 695 
  0 
  1 
  2 
  3 
  4 
  5 
  6 
  7 
  8 
  9 
 10 
 11 
 12 
 13 
 14 
 15 


Scr# 696 
  0 
  1 
  2 
  3 
  4 
  5 
  6 
  7 
  8 
  9 
 10 
 11 
 12 
 13 
 14 
 15 


Scr# 697 
  0 
  1 
  2 
  3 
  4 
  5 
  6 
  7 
  8 
  9 
 10 
 11 
 12 
 13 
 14 
 15 


Scr# 698 
  0 
  1 
  2 
  3 
  4 
  5 
  6 
  7 
  8 
  9 
 10 
 11 
 12 
 13 
 14 
 15 


Scr# 699 
  0 
  1 
  2 
  3 
  4 
  5 
  6 
  7 
  8 
  9 
 10 
 11 
 12 
 13 
 14 
 15 


Scr# 700 
  0 
  1 
  2 
  3 
  4 
  5 
  6 
  7 
  8 
  9 
 10 
 11 
 12 
 13 
 14 
 15 


Scr# 701 
  0 
  1 
  2 
  3 
  4 
  5 
  6 
  7 
  8 
  9 
 10 
 11 
 12 
 13 
 14 
 15 


Scr# 702 
  0 
  1 
  2 
  3 
  4 
  5 
  6 
  7 
  8 
  9 
 10 
 11 
 12 
 13 
 14 
 15 


Scr# 703 
  0 
  1 
  2 
  3 
  4 
  5 
  6 
  7 
  8 
  9 
 10 
 11 
 12 
 13 
 14 
 15 


Scr# 704 
  0 
  1 
  2 
  3 
  4 
  5 
  6 
  7 
  8 
  9 
 10 
 11 
 12 
 13 
 14 
 15 


Scr# 705 
  0 
  1 
  2 
  3 
  4 
  5 
  6 
  7 
  8 
  9 
 10 
 11 
 12 
 13 
 14 
 15 


Scr# 706 
  0 
  1 
  2 
  3 
  4 
  5 
  6 
  7 
  8 
  9 
 10 
 11 
 12 
 13 
 14 
 15 


Scr# 707 
  0 
  1 
  2 
  3 
  4 
  5 
  6 
  7 
  8 
  9 
 10 
 11 
 12 
 13 
 14 
 15 


Scr# 708 
  0 
  1 
  2 
  3 
  4 
  5 
  6 
  7 
  8 
  9 
 10 
 11 
 12 
 13 
 14 
 15 


Scr# 709 
  0 
  1 
  2 
  3 
  4 
  5 
  6 
  7 
  8 
  9 
 10 
 11 
 12 
 13 
 14 
 15 


Scr# 710 
  0 
  1 
  2 
  3 
  4 
  5 
  6 
  7 
  8 
  9 
 10 
 11 
 12 
 13 
 14 
 15 


Scr# 711 
  0 
  1 
  2 
  3 
  4 
  5 
  6 
  7 
  8 
  9 
 10 
 11 
 12 
 13 
 14 
 15 


Scr# 712 
  0 
  1 
  2 
  3 
  4 
  5 
  6 
  7 
  8 
  9 
 10 
 11 
 12 
 13 
 14 
 15 


Scr# 713 
  0 
  1 
  2 
  3 
  4 
  5 
  6 
  7 
  8 
  9 
 10 
 11 
 12 
 13 
 14 
 15 


Scr# 714 
  0 
  1 
  2 
  3 
  4 
  5 
  6 
  7 
  8 
  9 
 10 
 11 
 12 
 13 
 14 
 15 


Scr# 715 
  0 
  1 
  2 
  3 
  4 
  5 
  6 
  7 
  8 
  9 
 10 
 11 
 12 
 13 
 14 
 15 


Scr# 716 
  0 
  1 
  2 
  3 
  4 
  5 
  6 
  7 
  8 
  9 
 10 
 11 
 12 
 13 
 14 
 15 


Scr# 717 
  0 
  1 
  2 
  3 
  4 
  5 
  6 
  7 
  8 
  9 
 10 
 11 
 12 
 13 
 14 
 15 


Scr# 718 
  0 
  1 
  2 
  3 
  4 
  5 
  6 
  7 
  8 
  9 
 10 
 11 
 12 
 13 
 14 
 15 


Scr# 719 
  0 
  1 
  2 
  3 
  4 
  5 
  6 
  7 
  8 
  9 
 10 
 11 
 12 
 13 
 14 
 15 


Scr# 720 
  0 
  1 
  2 
  3 
  4 
  5 
  6 
  7 
  8 
  9 
 10 
 11 
 12 
 13 
 14 
 15 


Scr# 721 
  0 
  1 
  2 
  3 
  4 
  5 
  6 
  7 
  8 
  9 
 10 
 11 
 12 
 13 
 14 
 15 


Scr# 722 
  0 
  1 
  2 
  3 
  4 
  5 
  6 
  7 
  8 
  9 
 10 
 11 
 12 
 13 
 14 
 15 


Scr# 723 
  0 
  1 
  2 
  3 
  4 
  5 
  6 
  7 
  8 
  9 
 10 
 11 
 12 
 13 
 14 
 15 


Scr# 724 
  0 
  1 
  2 
  3 
  4 
  5 
  6 
  7 
  8 
  9 
 10 
 11 
 12 
 13 
 14 
 15 


Scr# 725 
  0 
  1 
  2 
  3 
  4 
  5 
  6 
  7 
  8 
  9 
 10 
 11 
 12 
 13 
 14 
 15 


Scr# 726 
  0 
  1 
  2 
  3 
  4 
  5 
  6 
  7 
  8 
  9 
 10 
 11 
 12 
 13 
 14 
 15 


Scr# 727 
  0 
  1 
  2 
  3 
  4 
  5 
  6 
  7 
  8 
  9 
 10 
 11 
 12 
 13 
 14 
 15 


Scr# 728 
  0 
  1 
  2 
  3 
  4 
  5 
  6 
  7 
  8 
  9 
 10 
 11 
 12 
 13 
 14 
 15 


Scr# 729 
  0 
  1 
  2 
  3 
  4 
  5 
  6 
  7 
  8 
  9 
 10 
 11 
 12 
 13 
 14 
 15 


Scr# 730 
  0 
  1 
  2 
  3 
  4 
  5 
  6 
  7 
  8 
  9 
 10 
 11 
 12 
 13 
 14 
 15 


Scr# 731 
  0 
  1 
  2 
  3 
  4 
  5 
  6 
  7 
  8 
  9 
 10 
 11 
 12 
 13 
 14 
 15 


Scr# 732 
  0 
  1 
  2 
  3 
  4 
  5 
  6 
  7 
  8 
  9 
 10 
 11 
 12 
 13 
 14 
 15 


Scr# 733 
  0 
  1 
  2 
  3 
  4 
  5 
  6 
  7 
  8 
  9 
 10 
 11 
 12 
 13 
 14 
 15 


Scr# 734 
  0 
  1 
  2 
  3 
  4 
  5 
  6 
  7 
  8 
  9 
 10 
 11 
 12 
 13 
 14 
 15 


Scr# 735 
  0 
  1 
  2 
  3 
  4 
  5 
  6 
  7 
  8 
  9 
 10 
 11 
 12 
 13 
 14 
 15 


Scr# 736 
  0 
  1 
  2 
  3 
  4 
  5 
  6 
  7 
  8 
  9 
 10 
 11 
 12 
 13 
 14 
 15 


Scr# 737 
  0 
  1 
  2 
  3 
  4 
  5 
  6 
  7 
  8 
  9 
 10 
 11 
 12 
 13 
 14 
 15 


Scr# 738 
  0 
  1 
  2 
  3 
  4 
  5 
  6 
  7 
  8 
  9 
 10 
 11 
 12 
 13 
 14 
 15 


Scr# 739 
  0 
  1 
  2 
  3 
  4 
  5 
  6 
  7 
  8 
  9 
 10 
 11 
 12 
 13 
 14 
 15 


Scr# 740 
  0 
  1 
  2 
  3 
  4 
  5 
  6 
  7 
  8 
  9 
 10 
 11 
 12 
 13 
 14 
 15 


Scr# 741 
  0 
  1 
  2 
  3 
  4 
  5 
  6 
  7 
  8 
  9 
 10 
 11 
 12 
 13 
 14 
 15 


Scr# 742 
  0 
  1 
  2 
  3 
  4 
  5 
  6 
  7 
  8 
  9 
 10 
 11 
 12 
 13 
 14 
 15 


Scr# 743 
  0 
  1 
  2 
  3 
  4 
  5 
  6 
  7 
  8 
  9 
 10 
 11 
 12 
 13 
 14 
 15 


Scr# 744 
  0 
  1 
  2 
  3 
  4 
  5 
  6 
  7 
  8 
  9 
 10 
 11 
 12 
 13 
 14 
 15 


Scr# 745 
  0 
  1 
  2 
  3 
  4 
  5 
  6 
  7 
  8 
  9 
 10 
 11 
 12 
 13 
 14 
 15 


Scr# 746 
  0 
  1 
  2 
  3 
  4 
  5 
  6 
  7 
  8 
  9 
 10 
 11 
 12 
 13 
 14 
 15 


Scr# 747 
  0 
  1 
  2 
  3 
  4 
  5 
  6 
  7 
  8 
  9 
 10 
 11 
 12 
 13 
 14 
 15 


Scr# 748 
  0 
  1 
  2 
  3 
  4 
  5 
  6 
  7 
  8 
  9 
 10 
 11 
 12 
 13 
 14 
 15 


Scr# 749 
  0 
  1 
  2 
  3 
  4 
  5 
  6 
  7 
  8 
  9 
 10 
 11 
 12 
 13 
 14 
 15 


Scr# 750 
  0 
  1 
  2 
  3 
  4 
  5 
  6 
  7 
  8 
  9 
 10 
 11 
 12 
 13 
 14 
 15 


Scr# 751 
  0 
  1 
  2 
  3 
  4 
  5 
  6 
  7 
  8 
  9 
 10 
 11 
 12 
 13 
 14 
 15 


Scr# 752 
  0 
  1 
  2 
  3 
  4 
  5 
  6 
  7 
  8 
  9 
 10 
 11 
 12 
 13 
 14 
 15 


Scr# 753 
  0 
  1 
  2 
  3 
  4 
  5 
  6 
  7 
  8 
  9 
 10 
 11 
 12 
 13 
 14 
 15 


Scr# 754 
  0 
  1 
  2 
  3 
  4 
  5 
  6 
  7 
  8 
  9 
 10 
 11 
 12 
 13 
 14 
 15 


Scr# 755 
  0 
  1 
  2 
  3 
  4 
  5 
  6 
  7 
  8 
  9 
 10 
 11 
 12 
 13 
 14 
 15 


Scr# 756 
  0 
  1 
  2 
  3 
  4 
  5 
  6 
  7 
  8 
  9 
 10 
 11 
 12 
 13 
 14 
 15 


Scr# 757 
  0 
  1 
  2 
  3 
  4 
  5 
  6 
  7 
  8 
  9 
 10 
 11 
 12 
 13 
 14 
 15 


Scr# 758 
  0 
  1 
  2 
  3 
  4 
  5 
  6 
  7 
  8 
  9 
 10 
 11 
 12 
 13 
 14 
 15 


Scr# 759 
  0 
  1 
  2 
  3 
  4 
  5 
  6 
  7 
  8 
  9 
 10 
 11 
 12 
 13 
 14 
 15 


Scr# 760 
  0 
  1 
  2 
  3 
  4 
  5 
  6 
  7 
  8 
  9 
 10 
 11 
 12 
 13 
 14 
 15 


Scr# 761 
  0 
  1 
  2 
  3 
  4 
  5 
  6 
  7 
  8 
  9 
 10 
 11 
 12 
 13 
 14 
 15 


Scr# 762 
  0 
  1 
  2 
  3 
  4 
  5 
  6 
  7 
  8 
  9 
 10 
 11 
 12 
 13 
 14 
 15 


Scr# 763 
  0 
  1 
  2 
  3 
  4 
  5 
  6 
  7 
  8 
  9 
 10 
 11 
 12 
 13 
 14 
 15 


Scr# 764 
  0 
  1 
  2 
  3 
  4 
  5 
  6 
  7 
  8 
  9 
 10 
 11 
 12 
 13 
 14 
 15 


Scr# 765 
  0 
  1 
  2 
  3 
  4 
  5 
  6 
  7 
  8 
  9 
 10 
 11 
 12 
 13 
 14 
 15 


Scr# 766 
  0 
  1 
  2 
  3 
  4 
  5 
  6 
  7 
  8 
  9 
 10 
 11 
 12 
 13 
 14 
 15 


Scr# 767 
  0 
  1 
  2 
  3 
  4 
  5 
  6 
  7 
  8 
  9 
 10 
 11 
 12 
 13 
 14 
 15 


Scr# 768 
  0 
  1 
  2 
  3 
  4 
  5 
  6 
  7 
  8 
  9 
 10 
 11 
 12 
 13 
 14 
 15 


Scr# 769 
  0 
  1 
  2 
  3 
  4 
  5 
  6 
  7 
  8 
  9 
 10 
 11 
 12 
 13 
 14 
 15 


Scr# 770 
  0 
  1 
  2 
  3 
  4 
  5 
  6 
  7 
  8 
  9 
 10 
 11 
 12 
 13 
 14 
 15 


Scr# 771 
  0 
  1 
  2 
  3 
  4 
  5 
  6 
  7 
  8 
  9 
 10 
 11 
 12 
 13 
 14 
 15 


Scr# 772 
  0 
  1 
  2 
  3 
  4 
  5 
  6 
  7 
  8 
  9 
 10 
 11 
 12 
 13 
 14 
 15 


Scr# 773 
  0 
  1 
  2 
  3 
  4 
  5 
  6 
  7 
  8 
  9 
 10 
 11 
 12 
 13 
 14 
 15 


Scr# 774 
  0 
  1 
  2 
  3 
  4 
  5 
  6 
  7 
  8 
  9 
 10 
 11 
 12 
 13 
 14 
 15 


Scr# 775 
  0 
  1 
  2 
  3 
  4 
  5 
  6 
  7 
  8 
  9 
 10 
 11 
 12 
 13 
 14 
 15 


Scr# 776 
  0 
  1 
  2 
  3 
  4 
  5 
  6 
  7 
  8 
  9 
 10 
 11 
 12 
 13 
 14 
 15 


Scr# 777 
  0 
  1 
  2 
  3 
  4 
  5 
  6 
  7 
  8 
  9 
 10 
 11 
 12 
 13 
 14 
 15 


Scr# 778 
  0 
  1 
  2 
  3 
  4 
  5 
  6 
  7 
  8 
  9 
 10 
 11 
 12 
 13 
 14 
 15 


Scr# 779 
  0 
  1 
  2 
  3 
  4 
  5 
  6 
  7 
  8 
  9 
 10 
 11 
 12 
 13 
 14 
 15 


Scr# 780 
  0 
  1 
  2 
  3 
  4 
  5 
  6 
  7 
  8 
  9 
 10 
 11 
 12 
 13 
 14 
 15 


Scr# 781 
  0 
  1 
  2 
  3 
  4 
  5 
  6 
  7 
  8 
  9 
 10 
 11 
 12 
 13 
 14 
 15 


Scr# 782 
  0 
  1 
  2 
  3 
  4 
  5 
  6 
  7 
  8 
  9 
 10 
 11 
 12 
 13 
 14 
 15 


Scr# 783 
  0 
  1 
  2 
  3 
  4 
  5 
  6 
  7 
  8 
  9 
 10 
 11 
 12 
 13 
 14 
 15 


Scr# 784 
  0 
  1 
  2 
  3 
  4 
  5 
  6 
  7 
  8 
  9 
 10 
 11 
 12 
 13 
 14 
 15 


Scr# 785 
  0 
  1 
  2 
  3 
  4 
  5 
  6 
  7 
  8 
  9 
 10 
 11 
 12 
 13 
 14 
 15 


Scr# 786 
  0 
  1 
  2 
  3 
  4 
  5 
  6 
  7 
  8 
  9 
 10 
 11 
 12 
 13 
 14 
 15 


Scr# 787 
  0 
  1 
  2 
  3 
  4 
  5 
  6 
  7 
  8 
  9 
 10 
 11 
 12 
 13 
 14 
 15 


Scr# 788 
  0 
  1 
  2 
  3 
  4 
  5 
  6 
  7 
  8 
  9 
 10 
 11 
 12 
 13 
 14 
 15 


Scr# 789 
  0 
  1 
  2 
  3 
  4 
  5 
  6 
  7 
  8 
  9 
 10 
 11 
 12 
 13 
 14 
 15 


Scr# 790 
  0 
  1 
  2 
  3 
  4 
  5 
  6 
  7 
  8 
  9 
 10 
 11 
 12 
 13 
 14 
 15 


Scr# 791 
  0 
  1 
  2 
  3 
  4 
  5 
  6 
  7 
  8 
  9 
 10 
 11 
 12 
 13 
 14 
 15 


Scr# 792 
  0 
  1 
  2 
  3 
  4 
  5 
  6 
  7 
  8 
  9 
 10 
 11 
 12 
 13 
 14 
 15 


Scr# 793 
  0 
  1 
  2 
  3 
  4 
  5 
  6 
  7 
  8 
  9 
 10 
 11 
 12 
 13 
 14 
 15 


Scr# 794 
  0 
  1 
  2 
  3 
  4 
  5 
  6 
  7 
  8 
  9 
 10 
 11 
 12 
 13 
 14 
 15 


Scr# 795 
  0 
  1 
  2 
  3 
  4 
  5 
  6 
  7 
  8 
  9 
 10 
 11 
 12 
 13 
 14 
 15 


Scr# 796 
  0 
  1 
  2 
  3 
  4 
  5 
  6 
  7 
  8 
  9 
 10 
 11 
 12 
 13 
 14 
 15 


Scr# 797 
  0 
  1 
  2 
  3 
  4 
  5 
  6 
  7 
  8 
  9 
 10 
 11 
 12 
 13 
 14 
 15 


Scr# 798 
  0 
  1 
  2 
  3 
  4 
  5 
  6 
  7 
  8 
  9 
 10 
 11 
 12 
 13 
 14 
 15 


Scr# 799 
  0 
  1 
  2 
  3 
  4 
  5 
  6 
  7 
  8 
  9 
 10 
 11 
 12 
 13 
 14 
 15 


Scr# 800 
  0 
  1 
  2 
  3 
  4 
  5 
  6 
  7 
  8 
  9 
 10 
 11 
 12 
 13 
 14 
 15 


Scr# 801 
  0 
  1 
  2 
  3 
  4 
  5 
  6 
  7 
  8 
  9 
 10 
 11 
 12 
 13 
 14 
 15 


Scr# 802 
  0 
  1 
  2 
  3 
  4 
  5 
  6 
  7 
  8 
  9 
 10 
 11 
 12 
 13 
 14 
 15 


Scr# 803 
  0 
  1 
  2 
  3 
  4 
  5 
  6 
  7 
  8 
  9 
 10 
 11 
 12 
 13 
 14 
 15 


Scr# 804 
  0 
  1 
  2 
  3 
  4 
  5 
  6 
  7 
  8 
  9 
 10 
 11 
 12 
 13 
 14 
 15 


Scr# 805 
  0 
  1 
  2 
  3 
  4 
  5 
  6 
  7 
  8 
  9 
 10 
 11 
 12 
 13 
 14 
 15 


Scr# 806 
  0 
  1 
  2 
  3 
  4 
  5 
  6 
  7 
  8 
  9 
 10 
 11 
 12 
 13 
 14 
 15 


Scr# 807 
  0 
  1 
  2 
  3 
  4 
  5 
  6 
  7 
  8 
  9 
 10 
 11 
 12 
 13 
 14 
 15 


Scr# 808 
  0 
  1 
  2 
  3 
  4 
  5 
  6 
  7 
  8 
  9 
 10 
 11 
 12 
 13 
 14 
 15 


Scr# 809 
  0 
  1 
  2 
  3 
  4 
  5 
  6 
  7 
  8 
  9 
 10 
 11 
 12 
 13 
 14 
 15 


Scr# 810 
  0 
  1 
  2 
  3 
  4 
  5 
  6 
  7 
  8 
  9 
 10 
 11 
 12 
 13 
 14 
 15 


Scr# 811 
  0 
  1 
  2 
  3 
  4 
  5 
  6 
  7 
  8 
  9 
 10 
 11 
 12 
 13 
 14 
 15 


Scr# 812 
  0 
  1 
  2 
  3 
  4 
  5 
  6 
  7 
  8 
  9 
 10 
 11 
 12 
 13 
 14 
 15 


Scr# 813 
  0 
  1 
  2 
  3 
  4 
  5 
  6 
  7 
  8 
  9 
 10 
 11 
 12 
 13 
 14 
 15 


Scr# 814 
  0 
  1 
  2 
  3 
  4 
  5 
  6 
  7 
  8 
  9 
 10 
 11 
 12 
 13 
 14 
 15 


Scr# 815 
  0 
  1 
  2 
  3 
  4 
  5 
  6 
  7 
  8 
  9 
 10 
 11 
 12 
 13 
 14 
 15 


Scr# 816 
  0 
  1 
  2 
  3 
  4 
  5 
  6 
  7 
  8 
  9 
 10 
 11 
 12 
 13 
 14 
 15 


Scr# 817 
  0 
  1 
  2 
  3 
  4 
  5 
  6 
  7 
  8 
  9 
 10 
 11 
 12 
 13 
 14 
 15 


Scr# 818 
  0 
  1 
  2 
  3 
  4 
  5 
  6 
  7 
  8 
  9 
 10 
 11 
 12 
 13 
 14 
 15 


Scr# 819 
  0 
  1 
  2 
  3 
  4 
  5 
  6 
  7 
  8 
  9 
 10 
 11 
 12 
 13 
 14 
 15 


Scr# 820 
  0 
  1 
  2 
  3 
  4 
  5 
  6 
  7 
  8 
  9 
 10 
 11 
 12 
 13 
 14 
 15 


Scr# 821 
  0 
  1 
  2 
  3 
  4 
  5 
  6 
  7 
  8 
  9 
 10 
 11 
 12 
 13 
 14 
 15 


Scr# 822 
  0 
  1 
  2 
  3 
  4 
  5 
  6 
  7 
  8 
  9 
 10 
 11 
 12 
 13 
 14 
 15 


Scr# 823 
  0 
  1 
  2 
  3 
  4 
  5 
  6 
  7 
  8 
  9 
 10 
 11 
 12 
 13 
 14 
 15 


Scr# 824 
  0 
  1 
  2 
  3 
  4 
  5 
  6 
  7 
  8 
  9 
 10 
 11 
 12 
 13 
 14 
 15 


Scr# 825 
  0 
  1 
  2 
  3 
  4 
  5 
  6 
  7 
  8 
  9 
 10 
 11 
 12 
 13 
 14 
 15 


Scr# 826 
  0 
  1 
  2 
  3 
  4 
  5 
  6 
  7 
  8 
  9 
 10 
 11 
 12 
 13 
 14 
 15 


Scr# 827 
  0 
  1 
  2 
  3 
  4 
  5 
  6 
  7 
  8 
  9 
 10 
 11 
 12 
 13 
 14 
 15 


Scr# 828 
  0 
  1 
  2 
  3 
  4 
  5 
  6 
  7 
  8 
  9 
 10 
 11 
 12 
 13 
 14 
 15 


Scr# 829 
  0 
  1 
  2 
  3 
  4 
  5 
  6 
  7 
  8 
  9 
 10 
 11 
 12 
 13 
 14 
 15 


Scr# 830 
  0 
  1 
  2 
  3 
  4 
  5 
  6 
  7 
  8 
  9 
 10 
 11 
 12 
 13 
 14 
 15 


Scr# 831 
  0 
  1 
  2 
  3 
  4 
  5 
  6 
  7 
  8 
  9 
 10 
 11 
 12 
 13 
 14 
 15 


Scr# 832 
  0 
  1 
  2 
  3 
  4 
  5 
  6 
  7 
  8 
  9 
 10 
 11 
 12 
 13 
 14 
 15 


Scr# 833 
  0 
  1 
  2 
  3 
  4 
  5 
  6 
  7 
  8 
  9 
 10 
 11 
 12 
 13 
 14 
 15 


Scr# 834 
  0 
  1 
  2 
  3 
  4 
  5 
  6 
  7 
  8 
  9 
 10 
 11 
 12 
 13 
 14 
 15 


Scr# 835 
  0 
  1 
  2 
  3 
  4 
  5 
  6 
  7 
  8 
  9 
 10 
 11 
 12 
 13 
 14 
 15 


Scr# 836 
  0 
  1 
  2 
  3 
  4 
  5 
  6 
  7 
  8 
  9 
 10 
 11 
 12 
 13 
 14 
 15 


Scr# 837 
  0 
  1 
  2 
  3 
  4 
  5 
  6 
  7 
  8 
  9 
 10 
 11 
 12 
 13 
 14 
 15 


Scr# 838 
  0 
  1 
  2 
  3 
  4 
  5 
  6 
  7 
  8 
  9 
 10 
 11 
 12 
 13 
 14 
 15 


Scr# 839 
  0 
  1 
  2 
  3 
  4 
  5 
  6 
  7 
  8 
  9 
 10 
 11 
 12 
 13 
 14 
 15 


Scr# 840 
  0 
  1 
  2 
  3 
  4 
  5 
  6 
  7 
  8 
  9 
 10 
 11 
 12 
 13 
 14 
 15 


Scr# 841 
  0 
  1 
  2 
  3 
  4 
  5 
  6 
  7 
  8 
  9 
 10 
 11 
 12 
 13 
 14 
 15 


Scr# 842 
  0 
  1 
  2 
  3 
  4 
  5 
  6 
  7 
  8 
  9 
 10 
 11 
 12 
 13 
 14 
 15 


Scr# 843 
  0 
  1 
  2 
  3 
  4 
  5 
  6 
  7 
  8 
  9 
 10 
 11 
 12 
 13 
 14 
 15 


Scr# 844 
  0 
  1 
  2 
  3 
  4 
  5 
  6 
  7 
  8 
  9 
 10 
 11 
 12 
 13 
 14 
 15 


Scr# 845 
  0 
  1 
  2 
  3 
  4 
  5 
  6 
  7 
  8 
  9 
 10 
 11 
 12 
 13 
 14 
 15 


Scr# 846 
  0 
  1 
  2 
  3 
  4 
  5 
  6 
  7 
  8 
  9 
 10 
 11 
 12 
 13 
 14 
 15 


Scr# 847 
  0 
  1 
  2 
  3 
  4 
  5 
  6 
  7 
  8 
  9 
 10 
 11 
 12 
 13 
 14 
 15 


Scr# 848 
  0 
  1 
  2 
  3 
  4 
  5 
  6 
  7 
  8 
  9 
 10 
 11 
 12 
 13 
 14 
 15 


Scr# 849 
  0 
  1 
  2 
  3 
  4 
  5 
  6 
  7 
  8 
  9 
 10 
 11 
 12 
 13 
 14 
 15 


Scr# 850 
  0 
  1 
  2 
  3 
  4 
  5 
  6 
  7 
  8 
  9 
 10 
 11 
 12 
 13 
 14 
 15 


Scr# 851 
  0 
  1 
  2 
  3 
  4 
  5 
  6 
  7 
  8 
  9 
 10 
 11 
 12 
 13 
 14 
 15 


Scr# 852 
  0 
  1 
  2 
  3 
  4 
  5 
  6 
  7 
  8 
  9 
 10 
 11 
 12 
 13 
 14 
 15 


Scr# 853 
  0 
  1 
  2 
  3 
  4 
  5 
  6 
  7 
  8 
  9 
 10 
 11 
 12 
 13 
 14 
 15 


Scr# 854 
  0 
  1 
  2 
  3 
  4 
  5 
  6 
  7 
  8 
  9 
 10 
 11 
 12 
 13 
 14 
 15 


Scr# 855 
  0 
  1 
  2 
  3 
  4 
  5 
  6 
  7 
  8 
  9 
 10 
 11 
 12 
 13 
 14 
 15 


Scr# 856 
  0 
  1 
  2 
  3 
  4 
  5 
  6 
  7 
  8 
  9 
 10 
 11 
 12 
 13 
 14 
 15 


Scr# 857 
  0 
  1 
  2 
  3 
  4 
  5 
  6 
  7 
  8 
  9 
 10 
 11 
 12 
 13 
 14 
 15 


Scr# 858 
  0 
  1 
  2 
  3 
  4 
  5 
  6 
  7 
  8 
  9 
 10 
 11 
 12 
 13 
 14 
 15 


Scr# 859 
  0 
  1 
  2 
  3 
  4 
  5 
  6 
  7 
  8 
  9 
 10 
 11 
 12 
 13 
 14 
 15 


Scr# 860 
  0 
  1 
  2 
  3 
  4 
  5 
  6 
  7 
  8 
  9 
 10 
 11 
 12 
 13 
 14 
 15 


Scr# 861 
  0 
  1 
  2 
  3 
  4 
  5 
  6 
  7 
  8 
  9 
 10 
 11 
 12 
 13 
 14 
 15 


Scr# 862 
  0 
  1 
  2 
  3 
  4 
  5 
  6 
  7 
  8 
  9 
 10 
 11 
 12 
 13 
 14 
 15 


Scr# 863 
  0 
  1 
  2 
  3 
  4 
  5 
  6 
  7 
  8 
  9 
 10 
 11 
 12 
 13 
 14 
 15 


Scr# 864 
  0 
  1 
  2 
  3 
  4 
  5 
  6 
  7 
  8 
  9 
 10 
 11 
 12 
 13 
 14 
 15 


Scr# 865 
  0 
  1 
  2 
  3 
  4 
  5 
  6 
  7 
  8 
  9 
 10 
 11 
 12 
 13 
 14 
 15 


Scr# 866 
  0 
  1 
  2 
  3 
  4 
  5 
  6 
  7 
  8 
  9 
 10 
 11 
 12 
 13 
 14 
 15 


Scr# 867 
  0 
  1 
  2 
  3 
  4 
  5 
  6 
  7 
  8 
  9 
 10 
 11 
 12 
 13 
 14 
 15 


Scr# 868 
  0 
  1 
  2 
  3 
  4 
  5 
  6 
  7 
  8 
  9 
 10 
 11 
 12 
 13 
 14 
 15 


Scr# 869 
  0 
  1 
  2 
  3 
  4 
  5 
  6 
  7 
  8 
  9 
 10 
 11 
 12 
 13 
 14 
 15 


Scr# 870 
  0 
  1 
  2 
  3 
  4 
  5 
  6 
  7 
  8 
  9 
 10 
 11 
 12 
 13 
 14 
 15 


Scr# 871 
  0 
  1 
  2 
  3 
  4 
  5 
  6 
  7 
  8 
  9 
 10 
 11 
 12 
 13 
 14 
 15 


Scr# 872 
  0 
  1 
  2 
  3 
  4 
  5 
  6 
  7 
  8 
  9 
 10 
 11 
 12 
 13 
 14 
 15 


Scr# 873 
  0 
  1 
  2 
  3 
  4 
  5 
  6 
  7 
  8 
  9 
 10 
 11 
 12 
 13 
 14 
 15 


Scr# 874 
  0 
  1 
  2 
  3 
  4 
  5 
  6 
  7 
  8 
  9 
 10 
 11 
 12 
 13 
 14 
 15 


Scr# 875 
  0 
  1 
  2 
  3 
  4 
  5 
  6 
  7 
  8 
  9 
 10 
 11 
 12 
 13 
 14 
 15 


Scr# 876 
  0 
  1 
  2 
  3 
  4 
  5 
  6 
  7 
  8 
  9 
 10 
 11 
 12 
 13 
 14 
 15 


Scr# 877 
  0 
  1 
  2 
  3 
  4 
  5 
  6 
  7 
  8 
  9 
 10 
 11 
 12 
 13 
 14 
 15 


Scr# 878 
  0 
  1 
  2 
  3 
  4 
  5 
  6 
  7 
  8 
  9 
 10 
 11 
 12 
 13 
 14 
 15 


Scr# 879 
  0 
  1 
  2 
  3 
  4 
  5 
  6 
  7 
  8 
  9 
 10 
 11 
 12 
 13 
 14 
 15 


Scr# 880 
  0 
  1 
  2 
  3 
  4 
  5 
  6 
  7 
  8 
  9 
 10 
 11 
 12 
 13 
 14 
 15 


Scr# 881 
  0 
  1 
  2 
  3 
  4 
  5 
  6 
  7 
  8 
  9 
 10 
 11 
 12 
 13 
 14 
 15 


Scr# 882 
  0 
  1 
  2 
  3 
  4 
  5 
  6 
  7 
  8 
  9 
 10 
 11 
 12 
 13 
 14 
 15 


Scr# 883 
  0 
  1 
  2 
  3 
  4 
  5 
  6 
  7 
  8 
  9 
 10 
 11 
 12 
 13 
 14 
 15 


Scr# 884 
  0 
  1 
  2 
  3 
  4 
  5 
  6 
  7 
  8 
  9 
 10 
 11 
 12 
 13 
 14 
 15 


Scr# 885 
  0 
  1 
  2 
  3 
  4 
  5 
  6 
  7 
  8 
  9 
 10 
 11 
 12 
 13 
 14 
 15 


Scr# 886 
  0 
  1 
  2 
  3 
  4 
  5 
  6 
  7 
  8 
  9 
 10 
 11 
 12 
 13 
 14 
 15 


Scr# 887 
  0 
  1 
  2 
  3 
  4 
  5 
  6 
  7 
  8 
  9 
 10 
 11 
 12 
 13 
 14 
 15 


Scr# 888 
  0 
  1 
  2 
  3 
  4 
  5 
  6 
  7 
  8 
  9 
 10 
 11 
 12 
 13 
 14 
 15 


Scr# 889 
  0 ( temporary patch )
  1 hex
  2  28 79f9 c!
  3  28 7a21 c!
  4  28 7a27 c!
  5 
  6 
  7 
  8 
  9 
 10 
 11 
 12 
 13 
 14 
 15 


Scr# 890 
  0 
  1 
  2 
  3 
  4 
  5 
  6 
  7 
  8 
  9 
 10 
 11 
 12 
 13 
 14 
 15 


Scr# 891 
  0 
  1 
  2 
  3 
  4 
  5 
  6 
  7 
  8 
  9 
 10 
 11 
 12 
 13 
 14 
 15 


Scr# 892 
  0 
  1 
  2 
  3 
  4 
  5 
  6 
  7 
  8 
  9 
 10 
 11 
 12 
 13 
 14 
 15 


Scr# 893 
  0 
  1 
  2 
  3 
  4 
  5 
  6 
  7 
  8 
  9 
 10 
 11 
 12 
 13 
 14 
 15 


Scr# 894 
  0 
  1 
  2 
  3 
  4 
  5 
  6 
  7 
  8 
  9 
 10 
 11 
 12 
 13 
 14 
 15 


Scr# 895 
  0 
  1 
  2 
  3 
  4 
  5 
  6 
  7 
  8 
  9 
 10 
 11 
 12 
 13 
 14 
 15 


Scr# 896 
  0 
  1 
  2 
  3 
  4 
  5 
  6 
  7 
  8 
  9 
 10 
 11 
 12 
 13 
 14 
 15 


Scr# 897 
  0 
  1 
  2 
  3 
  4 
  5 
  6 
  7 
  8 
  9 
 10 
 11 
 12 
 13 
 14 
 15 


Scr# 898 
  0 
  1 
  2 
  3 
  4 
  5 
  6 
  7 
  8 
  9 
 10 
 11 
 12 
 13 
 14 
 15 


Scr# 899 
  0 
  1 
  2 
  3 
  4 
  5 
  6 
  7 
  8 
  9 
 10 
 11 
 12 
 13 
 14 
 15 


Scr# 900 
  0 ( Remy Sharp )
  1 CODE CHARSETMOVE
  2  PUSH BC|
  3  LDX HL| 15616 NN,
  4  LDX DE| 16384 NN,
  5  LDX BC|   768 NN,
  6  LDIR
  7  POP BC|
  8  NEXT C;
  9 
 10 
 11 
 12 
 13 
 14 
 15 


Scr# 901 
  0 
  1 
  2 
  3 
  4 
  5 
  6 
  7 
  8 
  9 
 10 
 11 
 12 
 13 
 14 
 15 


Scr# 902 
  0 
  1 
  2 
  3 
  4 
  5 
  6 
  7 
  8 
  9 
 10 
 11 
 12 
 13 
 14 
 15 


Scr# 903 
  0 
  1 
  2 
  3 
  4 
  5 
  6 
  7 
  8 
  9 
 10 
 11 
 12 
 13 
 14 
 15 


Scr# 904 
  0 
  1 
  2 
  3 
  4 
  5 
  6 
  7 
  8 
  9 
 10 
 11 
 12 
 13 
 14 
 15 


Scr# 905 
  0 
  1 
  2 
  3 
  4 
  5 
  6 
  7 
  8 
  9 
 10 
 11 
 12 
 13 
 14 
 15 


Scr# 906 
  0 
  1 
  2 
  3 
  4 
  5 
  6 
  7 
  8 
  9 
 10 
 11 
 12 
 13 
 14 
 15 


Scr# 907 
  0 
  1 
  2 
  3 
  4 
  5 
  6 
  7 
  8 
  9 
 10 
 11 
 12 
 13 
 14 
 15 


Scr# 908 
  0 
  1 
  2 
  3 
  4 
  5 
  6 
  7 
  8 
  9 
 10 
 11 
 12 
 13 
 14 
 15 


Scr# 909 
  0 
  1 
  2 
  3 
  4 
  5 
  6 
  7 
  8 
  9 
 10 
 11 
 12 
 13 
 14 
 15 


Scr# 910 
  0 
  1 
  2 
  3 
  4 
  5 
  6 
  7 
  8 
  9 
 10 
 11 
 12 
 13 
 14 
 15 


Scr# 911 
  0 
  1 
  2 
  3 
  4 
  5 
  6 
  7 
  8 
  9 
 10 
 11 
 12 
 13 
 14 
 15 


Scr# 912 
  0 
  1 
  2 
  3 
  4 
  5 
  6 
  7 
  8 
  9 
 10 
 11 
 12 
 13 
 14 
 15 


Scr# 913 
  0 
  1 
  2 
  3 
  4 
  5 
  6 
  7 
  8 
  9 
 10 
 11 
 12 
 13 
 14 
 15 


Scr# 914 
  0 
  1 
  2 
  3 
  4 
  5 
  6 
  7 
  8 
  9 
 10 
 11 
 12 
 13 
 14 
 15 


Scr# 915 
  0 
  1 
  2 
  3 
  4 
  5 
  6 
  7 
  8 
  9 
 10 
 11 
 12 
 13 
 14 
 15 


Scr# 916 
  0 
  1 
  2 
  3 
  4 
  5 
  6 
  7 
  8 
  9 
 10 
 11 
 12 
 13 
 14 
 15 


Scr# 917 
  0 
  1 
  2 
  3 
  4 
  5 
  6 
  7 
  8 
  9 
 10 
 11 
 12 
 13 
 14 
 15 


Scr# 918 
  0 
  1 
  2 
  3 
  4 
  5 
  6 
  7 
  8 
  9 
 10 
 11 
 12 
 13 
 14 
 15 


Scr# 919 
  0 
  1 
  2 
  3 
  4 
  5 
  6 
  7 
  8 
  9 
 10 
 11 
 12 
 13 
 14 
 15 


Scr# 920 
  0 
  1 
  2 
  3 
  4 
  5 
  6 
  7 
  8 
  9 
 10 
 11 
 12 
 13 
 14 
 15 


Scr# 921 
  0 
  1 
  2 
  3 
  4 
  5 
  6 
  7 
  8 
  9 
 10 
 11 
 12 
 13 
 14 
 15 


Scr# 922 
  0 
  1 
  2 
  3 
  4 
  5 
  6 
  7 
  8 
  9 
 10 
 11 
 12 
 13 
 14 
 15 


Scr# 923 
  0 
  1 
  2 
  3 
  4 
  5 
  6 
  7 
  8 
  9 
 10 
 11 
 12 
 13 
 14 
 15 


Scr# 924 
  0 
  1 
  2 
  3 
  4 
  5 
  6 
  7 
  8 
  9 
 10 
 11 
 12 
 13 
 14 
 15 


Scr# 925 
  0 
  1 
  2 
  3 
  4 
  5 
  6 
  7 
  8 
  9 
 10 
 11 
 12 
 13 
 14 
 15 


Scr# 926 
  0 
  1 
  2 
  3 
  4 
  5 
  6 
  7 
  8 
  9 
 10 
 11 
 12 
 13 
 14 
 15 


Scr# 927 
  0 
  1 
  2 
  3 
  4 
  5 
  6 
  7 
  8 
  9 
 10 
 11 
 12 
 13 
 14 
 15 


Scr# 928 
  0 
  1 
  2 
  3 
  4 
  5 
  6 
  7 
  8 
  9 
 10 
 11 
 12 
 13 
 14 
 15 


Scr# 929 
  0 
  1 
  2 
  3 
  4 
  5 
  6 
  7 
  8 
  9 
 10 
 11 
 12 
 13 
 14 
 15 


Scr# 930 
  0 
  1 
  2 
  3 
  4 
  5 
  6 
  7 
  8 
  9 
 10 
 11 
 12 
 13 
 14 
 15 


Scr# 931 
  0 
  1 
  2 
  3 
  4 
  5 
  6 
  7 
  8 
  9 
 10 
 11 
 12 
 13 
 14 
 15 


Scr# 932 
  0 
  1 
  2 
  3 
  4 
  5 
  6 
  7 
  8 
  9 
 10 
 11 
 12 
 13 
 14 
 15 


Scr# 933 
  0 
  1 
  2 
  3 
  4 
  5 
  6 
  7 
  8 
  9 
 10 
 11 
 12 
 13 
 14 
 15 


Scr# 934 
  0 
  1 
  2 
  3 
  4 
  5 
  6 
  7 
  8 
  9 
 10 
 11 
 12 
 13 
 14 
 15 


Scr# 935 
  0 
  1 
  2 
  3 
  4 
  5 
  6 
  7 
  8 
  9 
 10 
 11 
 12 
 13 
 14 
 15 


Scr# 936 
  0 
  1 
  2 
  3 
  4 
  5 
  6 
  7 
  8 
  9 
 10 
 11 
 12 
 13 
 14 
 15 


Scr# 937 
  0 
  1 
  2 
  3 
  4 
  5 
  6 
  7 
  8 
  9 
 10 
 11 
 12 
 13 
 14 
 15 


Scr# 938 
  0 
  1 
  2 
  3 
  4 
  5 
  6 
  7 
  8 
  9 
 10 
 11 
 12 
 13 
 14 
 15 


Scr# 939 
  0 
  1 
  2 
  3 
  4 
  5 
  6 
  7 
  8 
  9 
 10 
 11 
 12 
 13 
 14 
 15 


Scr# 940 
  0 
  1 
  2 
  3 
  4 
  5 
  6 
  7 
  8 
  9 
 10 
 11 
 12 
 13 
 14 
 15 


Scr# 941 
  0 
  1 
  2 
  3 
  4 
  5 
  6 
  7 
  8 
  9 
 10 
 11 
 12 
 13 
 14 
 15 


Scr# 942 
  0 
  1 
  2 
  3 
  4 
  5 
  6 
  7 
  8 
  9 
 10 
 11 
 12 
 13 
 14 
 15 


Scr# 943 
  0 
  1 
  2 
  3 
  4 
  5 
  6 
  7 
  8 
  9 
 10 
 11 
 12 
 13 
 14 
 15 


Scr# 944 
  0 
  1 
  2 
  3 
  4 
  5 
  6 
  7 
  8 
  9 
 10 
 11 
 12 
 13 
 14 
 15 


Scr# 945 
  0 
  1 
  2 
  3 
  4 
  5 
  6 
  7 
  8 
  9 
 10 
 11 
 12 
 13 
 14 
 15 


Scr# 946 
  0 
  1 
  2 
  3 
  4 
  5 
  6 
  7 
  8 
  9 
 10 
 11 
 12 
 13 
 14 
 15 


Scr# 947 
  0 
  1 
  2 
  3 
  4 
  5 
  6 
  7 
  8 
  9 
 10 
 11 
 12 
 13 
 14 
 15 


Scr# 948 
  0 
  1 
  2 
  3 
  4 
  5 
  6 
  7 
  8 
  9 
 10 
 11 
 12 
 13 
 14 
 15 


Scr# 949 
  0 
  1 
  2 
  3 
  4 
  5 
  6 
  7 
  8 
  9 
 10 
 11 
 12 
 13 
 14 
 15 


Scr# 950 
  0 
  1 
  2 
  3 
  4 
  5 
  6 
  7 
  8 
  9 
 10 
 11 
 12 
 13 
 14 
 15 


Scr# 951 
  0 
  1 
  2 
  3 
  4 
  5 
  6 
  7 
  8 
  9 
 10 
 11 
 12 
 13 
 14 
 15 


Scr# 952 
  0 
  1 
  2 
  3 
  4 
  5 
  6 
  7 
  8 
  9 
 10 
 11 
 12 
 13 
 14 
 15 


Scr# 953 
  0 
  1 
  2 
  3 
  4 
  5 
  6 
  7 
  8 
  9 
 10 
 11 
 12 
 13 
 14 
 15 


Scr# 954 
  0 
  1 
  2 
  3 
  4 
  5 
  6 
  7 
  8 
  9 
 10 
 11 
 12 
 13 
 14 
 15 


Scr# 955 
  0 
  1 
  2 
  3 
  4 
  5 
  6 
  7 
  8 
  9 
 10 
 11 
 12 
 13 
 14 
 15 


Scr# 956 
  0 
  1 
  2 
  3 
  4 
  5 
  6 
  7 
  8 
  9 
 10 
 11 
 12 
 13 
 14 
 15 


Scr# 957 
  0 
  1 
  2 
  3 
  4 
  5 
  6 
  7 
  8 
  9 
 10 
 11 
 12 
 13 
 14 
 15 


Scr# 958 
  0 
  1 
  2 
  3 
  4 
  5 
  6 
  7 
  8 
  9 
 10 
 11 
 12 
 13 
 14 
 15 


Scr# 959 
  0 
  1 
  2 
  3 
  4 
  5 
  6 
  7 
  8 
  9 
 10 
 11 
 12 
 13 
 14 
 15 


Scr# 960 
  0 
  1 
  2 
  3 
  4 
  5 
  6 
  7 
  8 
  9 
 10 
 11 
 12 
 13 
 14 
 15 


Scr# 961 
  0 
  1 
  2 
  3 
  4 
  5 
  6 
  7 
  8 
  9 
 10 
 11 
 12 
 13 
 14 
 15 


Scr# 962 
  0 
  1 
  2 
  3 
  4 
  5 
  6 
  7 
  8 
  9 
 10 
 11 
 12 
 13 
 14 
 15 


Scr# 963 
  0 
  1 
  2 
  3 
  4 
  5 
  6 
  7 
  8 
  9 
 10 
 11 
 12 
 13 
 14 
 15 


Scr# 964 
  0 
  1 
  2 
  3 
  4 
  5 
  6 
  7 
  8 
  9 
 10 
 11 
 12 
 13 
 14 
 15 


Scr# 965 
  0 
  1 
  2 
  3 
  4 
  5 
  6 
  7 
  8 
  9 
 10 
 11 
 12 
 13 
 14 
 15 


Scr# 966 
  0 
  1 
  2 
  3 
  4 
  5 
  6 
  7 
  8 
  9 
 10 
 11 
 12 
 13 
 14 
 15 


Scr# 967 
  0 
  1 
  2 
  3 
  4 
  5 
  6 
  7 
  8 
  9 
 10 
 11 
 12 
 13 
 14 
 15 


Scr# 968 
  0 
  1 
  2 
  3 
  4 
  5 
  6 
  7 
  8 
  9 
 10 
 11 
 12 
 13 
 14 
 15 


Scr# 969 
  0 
  1 
  2 
  3 
  4 
  5 
  6 
  7 
  8 
  9 
 10 
 11 
 12 
 13 
 14 
 15 


Scr# 970 
  0 
  1 
  2 
  3 
  4 
  5 
  6 
  7 
  8 
  9 
 10 
 11 
 12 
 13 
 14 
 15 


Scr# 971 
  0 
  1 
  2 
  3 
  4 
  5 
  6 
  7 
  8 
  9 
 10 
 11 
 12 
 13 
 14 
 15 


Scr# 972 
  0 
  1 
  2 
  3 
  4 
  5 
  6 
  7 
  8 
  9 
 10 
 11 
 12 
 13 
 14 
 15 


Scr# 973 
  0 
  1 
  2 
  3 
  4 
  5 
  6 
  7 
  8 
  9 
 10 
 11 
 12 
 13 
 14 
 15 


Scr# 974 
  0 
  1 
  2 
  3 
  4 
  5 
  6 
  7 
  8 
  9 
 10 
 11 
 12 
 13 
 14 
 15 


Scr# 975 
  0 
  1 
  2 
  3 
  4 
  5 
  6 
  7 
  8 
  9 
 10 
 11 
 12 
 13 
 14 
 15 


Scr# 976 
  0 
  1 
  2 
  3 
  4 
  5 
  6 
  7 
  8 
  9 
 10 
 11 
 12 
 13 
 14 
 15 


Scr# 977 
  0 
  1 
  2 
  3 
  4 
  5 
  6 
  7 
  8 
  9 
 10 
 11 
 12 
 13 
 14 
 15 


Scr# 978 
  0 
  1 
  2 
  3 
  4 
  5 
  6 
  7 
  8 
  9 
 10 
 11 
 12 
 13 
 14 
 15 


Scr# 979 
  0 
  1 
  2 
  3 
  4 
  5 
  6 
  7 
  8 
  9 
 10 
 11 
 12 
 13 
 14 
 15 


Scr# 980 
  0 
  1 
  2 
  3 
  4 
  5 
  6 
  7 
  8 
  9 
 10 
 11 
 12 
 13 
 14 
 15 


Scr# 981 
  0 
  1 
  2 
  3 
  4 
  5 
  6 
  7 
  8 
  9 
 10 
 11 
 12 
 13 
 14 
 15 


Scr# 982 
  0 
  1 
  2 
  3 
  4 
  5 
  6 
  7 
  8 
  9 
 10 
 11 
 12 
 13 
 14 
 15 


Scr# 983 
  0 
  1 
  2 
  3 
  4 
  5 
  6 
  7 
  8 
  9 
 10 
 11 
 12 
 13 
 14 
 15 


Scr# 984 
  0 
  1 
  2 
  3 
  4 
  5 
  6 
  7 
  8 
  9 
 10 
 11 
 12 
 13 
 14 
 15 


Scr# 985 
  0 
  1 
  2 
  3 
  4 
  5 
  6 
  7 
  8 
  9 
 10 
 11 
 12 
 13 
 14 
 15 


Scr# 986 
  0 
  1 
  2 
  3 
  4 
  5 
  6 
  7 
  8 
  9 
 10 
 11 
 12 
 13 
 14 
 15 


Scr# 987 
  0 
  1 
  2 
  3 
  4 
  5 
  6 
  7 
  8 
  9 
 10 
 11 
 12 
 13 
 14 
 15 


Scr# 988 
  0 
  1 
  2 
  3 
  4 
  5 
  6 
  7 
  8 
  9 
 10 
 11 
 12 
 13 
 14 
 15 


Scr# 989 
  0 
  1 
  2 
  3 
  4 
  5 
  6 
  7 
  8 
  9 
 10 
 11 
 12 
 13 
 14 
 15 


Scr# 990 
  0 
  1 
  2 
  3 
  4 
  5 
  6 
  7 
  8 
  9 
 10 
 11 
 12 
 13 
 14 
 15 


Scr# 991 
  0 
  1 
  2 
  3 
  4 
  5 
  6 
  7 
  8 
  9 
 10 
 11 
 12 
 13 
 14 
 15 


Scr# 992 
  0 
  1 
  2 
  3 
  4 
  5 
  6 
  7 
  8 
  9 
 10 
 11 
 12 
 13 
 14 
 15 


Scr# 993 
  0 
  1 
  2 
  3 
  4 
  5 
  6 
  7 
  8 
  9 
 10 
 11 
 12 
 13 
 14 
 15 


Scr# 994 
  0 
  1 
  2 
  3 
  4 
  5 
  6 
  7 
  8 
  9 
 10 
 11 
 12 
 13 
 14 
 15 


Scr# 995 
  0 
  1 
  2 
  3 
  4 
  5 
  6 
  7 
  8 
  9 
 10 
 11 
 12 
 13 
 14 
 15 


Scr# 996 
  0 
  1 
  2 
  3 
  4 
  5 
  6 
  7 
  8 
  9 
 10 
 11 
 12 
 13 
 14 
 15 


Scr# 997 
  0 
  1 
  2 
  3 
  4 
  5 
  6 
  7 
  8 
  9 
 10 
 11 
 12 
 13 
 14 
 15 


Scr# 998 
  0 
  1 
  2 
  3 
  4 
  5 
  6 
  7 
  8 
  9 
 10 
 11 
 12 
 13 
 14 
 15 


Scr# 999 
  0 
  1 
  2 
  3 
  4 
  5 
  6 
  7 
  8 
  9 
 10 
 11 
 12 
 13 
 14 
 15 


Scr# 1000 
  0 
  1 
  2 
  3 
  4 
  5 
  6 
  7 
  8 
  9 
 10 
 11 
 12 
 13 
 14 
 15 



ok

  1 ( Autoexec 1/3 )
  2 ( Autoexec 2/3 )
  3 ( Autoexec 3/3 )
  4 is undefined.
  5 ( Error messages    2/3 )
  6 ( Error messages    3/3 )
  7 \ TEST
  8 ( Get the list of errors )
  9 ." Assembler. "           CR
 10 .( Line editor. )         CR
 11 ( Line Editor          2/6 )
 12 ( Line Editor          3/6 )
 13 ( Line Editor          4/6 )
 14 ( Line Editor          5/6 )
 15 ( Line Editor          6/6 )
 16 ( Editor utility           )
 17 .( Case-of structure. )   CR
 18 ( Case-Of structure  2/2 )
 19 .( Call utility. )        CR
 20 .( Debugger. )            CR
 21 ( Debugger             2/6 )
 22 ( Debugger             3/6 )
 23 ( Debugger             4/6 )
 24 ( Debugger             5/6 )
 25 ( Debugger             6/6 )
 26 ( Stack viewer             )
 27 ( Long memory dump )
 28 ( Vocabulary viewer        )
 29 ( Simple Word RENAMEr )
 30 ( 2CONSTANT )
 31 ( SET-FENCE )
 32 ( HIDE )
 33 ( USED-BY )
 34 ( DUMP WORDS )
 35 ( Restore AUTOEXEC )
 36 ( RECURSE - GDC )
 37 ( ?ESCAPE experiment       )
 38 ( RND Test )
 39 ( CHOOSE - Brodie )
 40 ( RND - vitturi )
 41 ( Color and attributes  )
 42 ( AT TAB                   )
 43 ( POINT SCREEN$ )
 44 ( PLOT )
 45 ( DRAW                     )
 46 ( PAINT )
 47 ( PAINT )
 48 ( Mr Jones' keyboard test )
 49 ( Mr Jones' keyboard test )
 50 ( BLEEP )
 51 ( BLEEP )
 52 ( Pitch bend )
 53 ( KEYBOARD-TEST )
 54 
 55 ( MS delay )
 56 
 57 ( FRAMES )
 58 ( FRAMES )
 59 ( TEST )
 60 ( Interrupt Handler )
 61 ( Interrupt Handler )
 62 ( Interrupt Handler )
 63 ( Interrupt Handler )
 64 ( Interrupt Handler )
 65 ( Interrupt Handler )
 66 ( Interrupt Handler )
 67 ( Interrupt Handler )
 68 ( INTERRUPT - TEST )
 69 ( INTERRUPT )
 70 ( CPU speed )
 71 
 72 
 73 ( COMPARE ) -->
 74 ( COMPARE )
 75 ( BSEARCH )
 76 ( SEARCH )
 77 ( BSEARCH SEARCH-ALL )
 78 ( LOCATE )
 79 ( LOCATE )
 80 ( Heap Memory Management )
 81 ( Heap Memory Management )
 82 ( Heap Memory Management )
 83 ( Heap Memory Management )
 84 ( Heap Memory Management )
 85 ( S" Counted Strings in Heap )
 86 ( S" Counted Strings in Heap )
 87 ( Allocate RAM banks )
 88 
 89 
 90 
 91 
 92 
 93 
 94 
 95 
 96 
 97 
 98 
 99 
100 ." Assembler. "           CR
101 .( Z80 Assembler. ) CR
102 ( Z80 Utility - Sys depend )
103 ( Z80 Utility - Sys depend )
104 ( Z80 System independ. )
105 ( Z80 System independ. )
106 ( Z80 Generate errors )
107 ( Assembler Z80 )
108 ( Assembler Z80 )
109 ( Assembler Z80 )
110 ( Assembler Z80 )
111 ( Assembler Z80 )
112 ( Assembler Z80 )
113 ( Assembler Z80 )
114 ( Assembler Z80 )
115 ( Assembler Z80 )
116 ( Assembler Z80 )
117 ( Assembler z80 )
118 
119 
120 .( Z80 definitions. ) CR
121 ( Z80 ) HEX
122 ( Z80 ) HEX
123 ( Z80 ) HEX
124 ( Z80 immediate data )
125 ( Z80 address )
126 ( Z80 ) HEX
127 ( Z80 relative jump )
128 ( ED prefix )
129 ( ED )
130 ( ED )
131 ( CB )
132 ( IX IY )
133 ( IX IY )
134 ( IX IY )
135 ( IX IY )
136 ( IX IY )
137 ( IX IY )
138 ( IX IY )
139 
140 .( Z80 near structure )   CR
141 ( Z80 Near struct. )
142 ( Z80 Near struct. )
143 ( Z80 Near struct. )
144 ( Z80 Near struct. )
145 ." Z80 far struct "
146 ( TESTING )
147 ( BANK! TEST )
148 ( 128K Bank switch )
149 ( 128K Bank switch )
150 ( TEST )
151 ( TEST1 )
152 ( TEST2 )
153 ( TEST3 )
154 ( TEST IF, THEN, )
155 \ TEST
156 \ TEST6
157 \ TEST7
158 \ TEST Z80N
159 \ TEST Z80N
160 .( Z80N Next extensions )
161 ( Z80N Next extension )
162 ( Z80N Next extension )
163 
164 
165 
166 ( White noise Egghead 3 )
167 ( White noise Egghead 3 )
168 ( White noise Egghead 3 )
169 ( Checksum of a RAM chunk )
170 \ BURP
171 ( Dump many pages )
172 
173 
174 
175 
176 
177 
178 
179 ( CHECK NULL               )
180 ( Fibonacci )
181 ( DSQRT )
182 ( Primality Test )
183 ( TEST )
184 
185 
186 
187 
188 
189 
190 
191 
192 
193 
194 
195 
196 
197 
198 
199 ( MARKER )
200 ( .RESET & CPU SPEED )
201 ( DAA )
202 ( DAA )
203 ( U* )
204 ( U* )
205 ( U/   dn n -- r dq )
206 ( U/ )
207 ( U/ )
208 ( UPPER )
209 ( PICK )
210 ( DOS CALL# )
211 ( DOS CALL# )
212 ( KEY new ) HEX
213 ( KEY new ) HEX
214 ( NEW UM* using MUL new OP-code )
215 ( NEW UM* using MUL new OP-code )
216 ( NEW UM* using MUL new OP-code )
217 ( TEST )
218 ( NEW UM* using MUL new OP-code )
219 ( NEW UM* using MUL new OP-code )
220 ( MOVE SP )
221 ( MOVE RP )
222 ( MOVE LIMIT )
223 ( UP AND DOWN )
224 ( BANK! TEST )
225 ( ?DO LOOP )
226 ( ?DO LOOP )
227 ( ?DO LOOP )
228 ( ?DO LOOP )
229 ( POSTPONE )
230 
231 
232 
233 
234 
235 
236 
237 
238 
239 ( Rainbow effects )
240 \ LARGE LETTER F
241 ( Square example )
242 
243 
244 
245 
246 
247 
248 
249 
250 \ BLOCK-SHIFT
251 ( block move reorder )
252 \ Print all blocsks to #13
253 ( INITIALIZE-MMC )
254 ( MICRODRIVE CARTRIDGE )
255 
256 
257 
258 
259 
260 
261 
262 
263 
264 
265 
266 
267 
268 
269 
270 
271 
272 
273 
274 
275 
276 
277 
278 
279 
280 
281 
282 
283 
284 
285 
286 
287 ( GREY-SCREEN example )
288 ( GREY-SCREEN example )
289 
290 
291 
292 ( GREY-SCREEN example )
293 ( MMU7 = 40h )
294 
295 
296 
297 
298 
299 
300 ( FAR-HL first example )
301 ( FAR-HL first example )
302 ( MMU7 / default bank )
303 ( MMU7 / set bank )
304 ( MMU7 / set bank 5 bits )
305 ( MMU7 / set bank 6 bits )
306 ( MMU7 / set bank 7 bits )
307 ( MMU7 / first 16K RAM )
308 ( MMU7 / first 16K RAM )
309 ( MMU7 / first 16K RAM )
310 ( MMU7 / first 16K RAM )
311 ( MMU7 / 8th byte )
312 ( MMU7 / 8th byte )
313 ( MMU7 / 8th byte )
314 ( MMU7 / 8th byte )
315 ( MMU7 / 4th byte )
316 ( MMU7 / 4th byte )
317 ( MMU7 / 4th byte )
318 ( MMU7 / 4th byte )
319 
320 ( MMU7 / simplest )
321 ( MMU7 / simplest )
322 ( MMU7 / simplest )
323 ( MMU7 / simplest )
324 ( MMU7 / simplest )
325 ( MMU Heap Management )
326 ( MMU7 HEAP )
327 ( MMU7 HEAP )
328 ( MMU7 HEAP STRING )
329 ( MMU7 HEAP STRING )
330 ( MMU7 HEAP STRING )
331 ( MMU7 HEAP POINTER )
332 ( S" Counted Strings in Heap )
333 \ TEST
334 ( Testing where $6000 is paged )
335 ( Testing where $6000 is paged )
336 
337 
338 
339 
340 ( R/W : BLK-FH )
341 ( R/W : BLK-READ )
342 ( R/W : BLK-WRITE )
343 ( R/W : BLK-INIT )
344 ( blk-fname )
345 ( r/w patch )
346 ( r/w patch )
347 
348 
349 
350 
351 
352 
353 
354 
355 
356 
357 
358 
359 
360 ( F_STAT via RST 8 hook code )
361 ( F_FGETPOS via RST 08 hook code )
362 ( F_SEEK via RST 08 hook code )
363 ( F_WRITE via RST 8 hook code )
364 ( F_READ via RST 8 hook code )
365 ( F_CLOSE via RST 8 hook code )
366 ( F_OPEN via RST 8 hook code )
367 ( F_OPEN via RST 8 hook code )
368 ( F_FSTAT via RST 8 hook code )
369 code F_SYNC  ( n -- f )
370 ( M_DOSVERSION via RST 8 hook code )
371 ( F_GETFREE via RST 08 hook code test )
372 ( M_P3DOS )
373 ( M_P3DOS )
374 ( M_P3DOS )
375 
376 
377 
378 
379 ( IDE_BANK )
380 ( NextZXOS - IDE_CAPACITY $01b4 )
381 ( NextZXOS - DOS_FREE_SPACE $0121 )
382 ( NextZXOS IDE_MODE 01d5 )
383 ( NextZXOS IDE_MODE 01d5 )
384 ( DOS_FLUSH $0142 )
385 ( DOS_VERSION / IDE_VERSION )
386 ( IDE_BASIC 1/3 )
387 ( IDE_BASIC 2/3 )
388 ( IDE_BASIC 3/3 )
389 ( IDE_BASIC test )
390 
391 
392 
393 
394 
395 
396 
397 
398 
399 
400 ( UDG utility )
401 ( Timex HiRes experiment )
402 ( STRMS study )
403 
404 
405 
406 
407 
408 
409 
410 
411 
412 
413 
414 
415 
416 
417 
418 
419 
420 
421 
422 
423 
424 
425 
426 
427 
428 
429 
430 
431 
432 
433 
434 
435 
436 
437 
438 
439 
440 
441 
442 
443 
444 
445 
446 
447 
448 
449 
450 
451 
452 
453 
454 
455 
456 
457 
458 
459 
460 
461 
462 
463 
464 
465 
466 
467 
468 
469 
470 
471 
472 
473 
474 
475 
476 
477 
478 
479 
480 
481 
482 
483 
484 
485 
486 
487 
488 
489 
490 
491 
492 
493 
494 
495 
496 
497 
498 
499 
500 ( Next Registers )
501 ( Next Registers )
502 ( Next Registers )
503 ( Next Registers )
504 ( Next Registers )
505 
506 
507 
508 
509 
510 
511 
512 LDDRXU<0F8CPDRmU<0F9INDRV<0F:O
513 
514 
515 
516 
517 
518 
519 
520 
521 
522 
523 
524 
525 
526 
527 
528 
529 
530 
531 
532 
533 
534 
535 
536 
537 ( VALUE TO )
538 \ test
539 
540 
541 
542 
543 
544 
545 
546 
547 
548 
549 
550 
551 
552 
553 
554 
555 
556 
557 
558 
559 
560 
561 
562 
563 
564 
565 
566 
567 
568 
569 
570 
571 
572 
573 
574 
575 
576 
577 
578 
579 
580 
581 
582 
583 
584 
585 
586 
587 
588 
589 
590 
591 
592 
593 
594 
595 
596 
597 
598 
599 
600 
601 
602 
603 
604 
605 
606 
607 
608 
609 
610 
611 
612 
613 
614 
615 
616 
617 
618 
619 
620 
621 
622 
623 
624 
625 
626 
627 
628 
629 
630 
631 
632 
633 
634 
635 
636 
637 
638 
639 
640 
641 
642 
643 
644 
645 
646 
647 
648 
649 
650 
651 
652 
653 
654 
655 
656 
657 
658 
659 
660 
661 
662 
663 
664 
665 
666 
667 
668 
669 
670 
671 
672 
673 
674 
675 
676 
677 
678 
679 
680 
681 
682 
683 
684 
685 
686 
687 
688 
689 
690 
691 
692 
693 
694 
695 
696 
697 
698 
699 
700 
701 
702 
703 
704 
705 
706 
707 
708 
709 
710 
711 
712 
713 
714 
715 
716 
717 
718 
719 
720 
721 
722 
723 
724 
725 
726 
727 
728 
729 
730 
731 
732 
733 
734 
735 
736 
737 
738 
739 
740 
741 
742 
743 
744 
745 
746 
747 
748 
749 
750 
751 
752 
753 
754 
755 
756 
757 
758 
759 
760 
761 
762 
763 
764 
765 
766 
767 
768 
769 
770 
771 
772 
773 
774 
775 
776 
777 
778 
779 
780 
781 
782 
783 
784 
785 
786 
787 
788 
789 
790 
791 
792 
793 
794 
795 
796 
797 
798 
799 
800 
801 
802 
803 
804 
805 
806 
807 
808 
809 
810 
811 
812 
813 
814 
815 
816 
817 
818 
819 
820 
821 
822 
823 
824 
825 
826 
827 
828 
829 
830 
831 
832 
833 
834 
835 
836 
837 
838 
839 
840 
841 
842 
843 
844 
845 
846 
847 
848 
849 
850 
851 
852 
853 
854 
855 
856 
857 
858 
859 
860 
861 
862 
863 
864 
865 
866 
867 
868 
869 
870 
871 
872 
873 
874 
875 
876 
877 
878 
879 
880 
881 
882 
883 
884 
885 
886 
887 
888 
889 ( temporary patch )
890 
891 
892 
893 
894 
895 
896 
897 
898 
899 
900 ( Remy Sharp )
901 
902 
903 
904 
905 
906 
907 
908 
909 
910 
911 
912 
913 
914 
915 
916 
917 
918 
919 
920 
921 
922 
923 
924 
925 
926 
927 
928 
929 
930 
931 
932 
933 
934 
935 
936 
937 
938 
939 
940 
941 
942 
943 
944 
945 
946 
947 
948 
949 
950 
951 
952 
953 
954 
955 
956 
957 
958 
959 
960 
961 
962 
963 
964 
965 
966 
967 
968 
969 
970 
971 
972 
973 
974 
975 
976 
977 
978 
979 
980 
981 
982 
983 
984 
985 
986 
987 
988 
989 
990 
991 
992 
993 
994 
995 
996 
997 
998 
999 
1000 ok
